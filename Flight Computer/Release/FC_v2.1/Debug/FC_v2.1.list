
FC_v2.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012910  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ad0  08012ac0  08012ac0  00022ac0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013590  08013590  00030204  2**0
                  CONTENTS
  4 .ARM          00000008  08013590  08013590  00023590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013598  08013598  00030204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08013598  08013598  00023598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080135a0  080135a0  000235a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  080135a4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030204  2**0
                  CONTENTS
 10 .bss          0000552c  20000204  20000204  00030204  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20005730  20005730  00030204  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004a54d  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000690d  00000000  00000000  0007a781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000031f8  00000000  00000000  00081090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002fc8  00000000  00000000  00084288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000094e2  00000000  00000000  00087250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002fe9f  00000000  00000000  00090732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001109f9  00000000  00000000  000c05d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001d0fca  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000efb0  00000000  00000000  001d1020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000204 	.word	0x20000204
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08012aa8 	.word	0x08012aa8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000208 	.word	0x20000208
 80001ec:	08012aa8 	.word	0x08012aa8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <lsm_write>:
/*
 * LSM6DSR
 */

static int32_t lsm_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af04      	add	r7, sp, #16
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	461a      	mov	r2, r3
 8001018:	460b      	mov	r3, r1
 800101a:	72fb      	strb	r3, [r7, #11]
 800101c:	4613      	mov	r3, r2
 800101e:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8001020:	7afb      	ldrb	r3, [r7, #11]
 8001022:	b29a      	uxth	r2, r3
 8001024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001028:	9302      	str	r3, [sp, #8]
 800102a:	893b      	ldrh	r3, [r7, #8]
 800102c:	9301      	str	r3, [sp, #4]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	21d5      	movs	r1, #213	; 0xd5
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f004 fd0a 	bl	8005a50 <HAL_I2C_Mem_Write>
  return 0;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <lsm_read>:

static int32_t lsm_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b088      	sub	sp, #32
 800104a:	af04      	add	r7, sp, #16
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	607a      	str	r2, [r7, #4]
 8001050:	461a      	mov	r2, r3
 8001052:	460b      	mov	r3, r1
 8001054:	72fb      	strb	r3, [r7, #11]
 8001056:	4613      	mov	r3, r2
 8001058:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LSM6DSR_I2C_ADD_L, reg,
 800105a:	7afb      	ldrb	r3, [r7, #11]
 800105c:	b29a      	uxth	r2, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	9302      	str	r3, [sp, #8]
 8001064:	893b      	ldrh	r3, [r7, #8]
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2301      	movs	r3, #1
 800106e:	21d5      	movs	r1, #213	; 0xd5
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f004 fde7 	bl	8005c44 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <MRT_LSM6DSR_Setup>:




stmdev_ctx_t  MRT_LSM6DSR_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b08b      	sub	sp, #44	; 0x2c
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
	  Guart = uart;
 800108c:	4a53      	ldr	r2, [pc, #332]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LSM6DSR Setup Starts\n\r", 22, HAL_MAX_DELAY);
 8001092:	4b52      	ldr	r3, [pc, #328]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 8001094:	6818      	ldr	r0, [r3, #0]
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	2216      	movs	r2, #22
 800109c:	4950      	ldr	r1, [pc, #320]	; (80011e0 <MRT_LSM6DSR_Setup+0x160>)
 800109e:	f008 fc22 	bl	80098e6 <HAL_UART_Transmit>


	  stmdev_ctx_t lsm_ctx;

	  /* Initialize mems driver interface */
	  lsm_ctx.write_reg = lsm_write;
 80010a2:	4b50      	ldr	r3, [pc, #320]	; (80011e4 <MRT_LSM6DSR_Setup+0x164>)
 80010a4:	61fb      	str	r3, [r7, #28]
	  lsm_ctx.read_reg = lsm_read;
 80010a6:	4b50      	ldr	r3, [pc, #320]	; (80011e8 <MRT_LSM6DSR_Setup+0x168>)
 80010a8:	623b      	str	r3, [r7, #32]
	  lsm_ctx.handle = SENSOR_BUS;
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 80010ae:	2064      	movs	r0, #100	; 0x64
 80010b0:	f003 fe02 	bl	8004cb8 <HAL_Delay>
	  /* Check device ID */
	  lsm6dsr_device_id_get(&lsm_ctx, &lsm_whoamI);
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	494c      	ldr	r1, [pc, #304]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010ba:	4618      	mov	r0, r3
 80010bc:	f003 fb70 	bl	80047a0 <lsm6dsr_device_id_get>

	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 21, HAL_MAX_DELAY);
 80010c0:	4b46      	ldr	r3, [pc, #280]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
 80010c8:	2215      	movs	r2, #21
 80010ca:	4949      	ldr	r1, [pc, #292]	; (80011f0 <MRT_LSM6DSR_Setup+0x170>)
 80010cc:	f008 fc0b 	bl	80098e6 <HAL_UART_Transmit>


	  if (lsm_whoamI != LSM6DSR_ID){
 80010d0:	4b46      	ldr	r3, [pc, #280]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b6a      	cmp	r3, #106	; 0x6a
 80010d6:	d032      	beq.n	800113e <MRT_LSM6DSR_Setup+0xbe>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 80010d8:	4b40      	ldr	r3, [pc, #256]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295
 80010e0:	2208      	movs	r2, #8
 80010e2:	4944      	ldr	r1, [pc, #272]	; (80011f4 <MRT_LSM6DSR_Setup+0x174>)
 80010e4:	f008 fbff 	bl	80098e6 <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 80010e8:	4b3c      	ldr	r3, [pc, #240]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295
 80010f0:	2210      	movs	r2, #16
 80010f2:	4941      	ldr	r1, [pc, #260]	; (80011f8 <MRT_LSM6DSR_Setup+0x178>)
 80010f4:	f008 fbf7 	bl	80098e6 <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lsm_whoamI);
 80010f8:	4b3c      	ldr	r3, [pc, #240]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	493e      	ldr	r1, [pc, #248]	; (80011fc <MRT_LSM6DSR_Setup+0x17c>)
 8001104:	4618      	mov	r0, r3
 8001106:	f00d fd19 	bl	800eb3c <siprintf>

			__BKPT();
 800110a:	be00      	bkpt	0x0000

		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 800110c:	4b33      	ldr	r3, [pc, #204]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800110e:	681c      	ldr	r4, [r3, #0]
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f86b 	bl	80001f0 <strlen>
 800111a:	4603      	mov	r3, r0
 800111c:	b29a      	uxth	r2, r3
 800111e:	f107 0110 	add.w	r1, r7, #16
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	4620      	mov	r0, r4
 8001128:	f008 fbdd 	bl	80098e6 <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 800112c:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800112e:	6818      	ldr	r0, [r3, #0]
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	2216      	movs	r2, #22
 8001136:	4932      	ldr	r1, [pc, #200]	; (8001200 <MRT_LSM6DSR_Setup+0x180>)
 8001138:	f008 fbd5 	bl	80098e6 <HAL_UART_Transmit>
		  while(1);
 800113c:	e7fe      	b.n	800113c <MRT_LSM6DSR_Setup+0xbc>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 6, HAL_MAX_DELAY);
 800113e:	4b27      	ldr	r3, [pc, #156]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 8001140:	6818      	ldr	r0, [r3, #0]
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	2206      	movs	r2, #6
 8001148:	492e      	ldr	r1, [pc, #184]	; (8001204 <MRT_LSM6DSR_Setup+0x184>)
 800114a:	f008 fbcc 	bl	80098e6 <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lsm6dsr_reset_set(&lsm_ctx, PROPERTY_ENABLE);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	2101      	movs	r1, #1
 8001154:	4618      	mov	r0, r3
 8001156:	f003 fb34 	bl	80047c2 <lsm6dsr_reset_set>


	  HAL_Delay(1000);
 800115a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800115e:	f003 fdab 	bl	8004cb8 <HAL_Delay>

	  do {
	    lsm6dsr_reset_get(&lsm_ctx, &lsm_rst);
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	4928      	ldr	r1, [pc, #160]	; (8001208 <MRT_LSM6DSR_Setup+0x188>)
 8001168:	4618      	mov	r0, r3
 800116a:	f003 fb50 	bl	800480e <lsm6dsr_reset_get>
	  } while (lsm_rst);
 800116e:	4b26      	ldr	r3, [pc, #152]	; (8001208 <MRT_LSM6DSR_Setup+0x188>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f5      	bne.n	8001162 <MRT_LSM6DSR_Setup+0xe2>

	  /* Disable I3C interface */
	  //TODO JASPER lsm6dsr_i3c_disable_set(&lsm_ctx, LSM6DSR_I3C_DISABLE);

	  /* Enable Block Data Update */
	  lsm6dsr_block_data_update_set(&lsm_ctx, PROPERTY_ENABLE);
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	2101      	movs	r1, #1
 800117c:	4618      	mov	r0, r3
 800117e:	f003 f9bf 	bl	8004500 <lsm6dsr_block_data_update_set>
	  /* Set Output Data Rate */
	  lsm6dsr_xl_data_rate_set(&lsm_ctx, LSM6DSR_XL_ODR_12Hz5);
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	2101      	movs	r1, #1
 8001188:	4618      	mov	r0, r3
 800118a:	f002 ff9b 	bl	80040c4 <lsm6dsr_xl_data_rate_set>
	  lsm6dsr_gy_data_rate_set(&lsm_ctx, LSM6DSR_GY_ODR_12Hz5);
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	2101      	movs	r1, #1
 8001194:	4618      	mov	r0, r3
 8001196:	f003 f8b7 	bl	8004308 <lsm6dsr_gy_data_rate_set>
	  /* Set full scale */
	  lsm6dsr_xl_full_scale_set(&lsm_ctx, LSM6DSR_2g);
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f002 ff69 	bl	8004078 <lsm6dsr_xl_full_scale_set>
	  lsm6dsr_gy_full_scale_set(&lsm_ctx, LSM6DSR_2000dps);
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	210c      	movs	r1, #12
 80011ac:	4618      	mov	r0, r3
 80011ae:	f003 f885 	bl	80042bc <lsm6dsr_gy_full_scale_set>
	  /* Configure filtering chain(No aux interface)
	   * Accelerometer - LPF1 + LPF2 path
	   */
	  //TODO JASPER lsm6dsr_xl_hp_path_on_out_set(&lsm_ctx, LSM6DSR_LP_ODR_DIV_100);
	  //TODO JASPER lsm6dsr_xl_filter_lp2_set(&lsm_ctx, PROPERTY_ENABLE);
	  HAL_UART_Transmit(Guart,"LLSM6DSR Setup Ends\n\r", 25, HAL_MAX_DELAY);
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80011b4:	6818      	ldr	r0, [r3, #0]
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	2219      	movs	r2, #25
 80011bc:	4913      	ldr	r1, [pc, #76]	; (800120c <MRT_LSM6DSR_Setup+0x18c>)
 80011be:	f008 fb92 	bl	80098e6 <HAL_UART_Transmit>

	  return lsm_ctx;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	461c      	mov	r4, r3
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	372c      	adds	r7, #44	; 0x2c
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd90      	pop	{r4, r7, pc}
 80011da:	bf00      	nop
 80011dc:	20004ef4 	.word	0x20004ef4
 80011e0:	08012ac0 	.word	0x08012ac0
 80011e4:	0800100d 	.word	0x0800100d
 80011e8:	08001047 	.word	0x08001047
 80011ec:	20000230 	.word	0x20000230
 80011f0:	08012ad8 	.word	0x08012ad8
 80011f4:	08012af0 	.word	0x08012af0
 80011f8:	08012afc 	.word	0x08012afc
 80011fc:	08012b10 	.word	0x08012b10
 8001200:	08012b18 	.word	0x08012b18
 8001204:	08012b30 	.word	0x08012b30
 8001208:	20000231 	.word	0x20000231
 800120c:	08012b38 	.word	0x08012b38

08001210 <MRT_LSM6DSR_getAcceleration>:


/*
 * Get acceleration values
 */
void MRT_LSM6DSR_getAcceleration(stmdev_ctx_t lsm_ctx,float acceleration_mg[3]){
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b087      	sub	sp, #28
 8001214:	af00      	add	r7, sp, #0
 8001216:	1d3c      	adds	r4, r7, #4
 8001218:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800121c:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_xl_flag_data_ready_get(&lsm_ctx, &reg);
 800121e:	f107 0217 	add.w	r2, r7, #23
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	4611      	mov	r1, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f003 f990 	bl	800454c <lsm6dsr_xl_flag_data_ready_get>

		//if (reg.status_reg.gda) {
	    if(reg){
 800122c:	7dfb      	ldrb	r3, [r7, #23]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d02d      	beq.n	800128e <MRT_LSM6DSR_getAcceleration+0x7e>
		/* Read magnetic field data */
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001232:	2206      	movs	r2, #6
 8001234:	2100      	movs	r1, #0
 8001236:	4818      	ldr	r0, [pc, #96]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001238:	f00c fc90 	bl	800db5c <memset>
        lsm6dsr_acceleration_raw_get(&lsm_ctx, data_raw_acceleration);
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	4916      	ldr	r1, [pc, #88]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001240:	4618      	mov	r0, r3
 8001242:	f003 fa3c 	bl	80046be <lsm6dsr_acceleration_raw_get>
        acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800124c:	4618      	mov	r0, r3
 800124e:	f002 fec7 	bl	8003fe0 <lsm6dsr_from_fs2g_to_mg>
 8001252:	eef0 7a40 	vmov.f32	s15, s0
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	edc3 7a00 	vstr	s15, [r3]
                               data_raw_acceleration[0]);
        acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 800125e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	1d1c      	adds	r4, r3, #4
 8001266:	4610      	mov	r0, r2
 8001268:	f002 feba 	bl	8003fe0 <lsm6dsr_from_fs2g_to_mg>
 800126c:	eef0 7a40 	vmov.f32	s15, s0
 8001270:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[1]);
        acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001276:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	f103 0408 	add.w	r4, r3, #8
 8001280:	4610      	mov	r0, r2
 8001282:	f002 fead 	bl	8003fe0 <lsm6dsr_from_fs2g_to_mg>
 8001286:	eef0 7a40 	vmov.f32	s15, s0
 800128a:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[2]);
      }
}
 800128e:	bf00      	nop
 8001290:	371c      	adds	r7, #28
 8001292:	46bd      	mov	sp, r7
 8001294:	bd90      	pop	{r4, r7, pc}
 8001296:	bf00      	nop
 8001298:	20000220 	.word	0x20000220

0800129c <MRT_LSM6DSR_getTemperature>:


/*
 * Get temperature value
 */
void MRT_LSM6DSR_getTemperature(stmdev_ctx_t lsm_ctx,float* temperature_degC){
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b087      	sub	sp, #28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	1d3c      	adds	r4, r7, #4
 80012a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012a8:	603b      	str	r3, [r7, #0]
	//lsm6dsr_reg_t reg;
	//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    uint8_t reg;
    lsm6dsr_temp_flag_data_ready_get(&lsm_ctx, &reg);
 80012aa:	f107 0217 	add.w	r2, r7, #23
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f003 f97c 	bl	80045b0 <lsm6dsr_temp_flag_data_ready_get>

	//if (reg.status_reg.tda) {
    if(reg){
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d017      	beq.n	80012ee <MRT_LSM6DSR_getTemperature+0x52>
		//Read temperature data
		memset(lsm_data_raw_temperature, 0x00, sizeof(int16_t));
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <MRT_LSM6DSR_getTemperature+0x5c>)
 80012c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c4:	2202      	movs	r2, #2
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f00c fc47 	bl	800db5c <memset>
		lsm6dsr_temperature_raw_get(&lsm_ctx, &lsm_data_raw_temperature);
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	4909      	ldr	r1, [pc, #36]	; (80012f8 <MRT_LSM6DSR_getTemperature+0x5c>)
 80012d2:	4618      	mov	r0, r3
 80012d4:	f003 f985 	bl	80045e2 <lsm6dsr_temperature_raw_get>
		*temperature_degC = lsm6dsr_from_lsb_to_celsius(lsm_data_raw_temperature);
 80012d8:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <MRT_LSM6DSR_getTemperature+0x5c>)
 80012da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 feae 	bl	8004040 <lsm6dsr_from_lsb_to_celsius>
 80012e4:	eef0 7a40 	vmov.f32	s15, s0
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	edc3 7a00 	vstr	s15, [r3]

	}
}
 80012ee:	bf00      	nop
 80012f0:	371c      	adds	r7, #28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd90      	pop	{r4, r7, pc}
 80012f6:	bf00      	nop
 80012f8:	2000022e 	.word	0x2000022e

080012fc <MRT_LSM6DSR_getAngularRate>:


/*
 * Get angular rate values
 */
void MRT_LSM6DSR_getAngularRate(stmdev_ctx_t lsm_ctx,float angular_rate_mdps[3]){
 80012fc:	b590      	push	{r4, r7, lr}
 80012fe:	b087      	sub	sp, #28
 8001300:	af00      	add	r7, sp, #0
 8001302:	1d3c      	adds	r4, r7, #4
 8001304:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001308:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_gy_flag_data_ready_get(&lsm_ctx, &reg);
 800130a:	f107 0217 	add.w	r2, r7, #23
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	4611      	mov	r1, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f003 f933 	bl	800457e <lsm6dsr_gy_flag_data_ready_get>

		//if (reg.status_reg.xlda) {
	    if(reg){
 8001318:	7dfb      	ldrb	r3, [r7, #23]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d02d      	beq.n	800137a <MRT_LSM6DSR_getAngularRate+0x7e>
		/* Read magnetic field data */
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 800131e:	2206      	movs	r2, #6
 8001320:	2100      	movs	r1, #0
 8001322:	4818      	ldr	r0, [pc, #96]	; (8001384 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001324:	f00c fc1a 	bl	800db5c <memset>
		lsm6dsr_angular_rate_raw_get(&lsm_ctx, data_raw_angular_rate);
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	4916      	ldr	r1, [pc, #88]	; (8001384 <MRT_LSM6DSR_getAngularRate+0x88>)
 800132c:	4618      	mov	r0, r3
 800132e:	f003 f97b 	bl	8004628 <lsm6dsr_angular_rate_raw_get>
		angular_rate_mdps[0] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8001332:	4b14      	ldr	r3, [pc, #80]	; (8001384 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001338:	4618      	mov	r0, r3
 800133a:	f002 fe69 	bl	8004010 <lsm6dsr_from_fs2000dps_to_mdps>
 800133e:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[0] =
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	edc3 7a00 	vstr	s15, [r3]
		angular_rate_mdps[1] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001348:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <MRT_LSM6DSR_getAngularRate+0x88>)
 800134a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
		angular_rate_mdps[1] =
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	1d1c      	adds	r4, r3, #4
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001352:	4610      	mov	r0, r2
 8001354:	f002 fe5c 	bl	8004010 <lsm6dsr_from_fs2000dps_to_mdps>
 8001358:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[1] =
 800135c:	edc4 7a00 	vstr	s15, [r4]
		angular_rate_mdps[2] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001362:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		angular_rate_mdps[2] =
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	f103 0408 	add.w	r4, r3, #8
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 800136c:	4610      	mov	r0, r2
 800136e:	f002 fe4f 	bl	8004010 <lsm6dsr_from_fs2000dps_to_mdps>
 8001372:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[2] =
 8001376:	edc4 7a00 	vstr	s15, [r4]
		fs2000dps_to_mdps
		*/

		}

}
 800137a:	bf00      	nop
 800137c:	371c      	adds	r7, #28
 800137e:	46bd      	mov	sp, r7
 8001380:	bd90      	pop	{r4, r7, pc}
 8001382:	bf00      	nop
 8001384:	20000228 	.word	0x20000228

08001388 <MRT_LPS22HH_Setup>:
 * LPS22HH
 */


stmdev_ctx_t  MRT_LPS22HH_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 8001388:	b590      	push	{r4, r7, lr}
 800138a:	b08d      	sub	sp, #52	; 0x34
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]

	  Guart = uart;
 8001394:	4a4b      	ldr	r2, [pc, #300]	; (80014c4 <MRT_LPS22HH_Setup+0x13c>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Starts\n\r", 22, HAL_MAX_DELAY);
 800139a:	4b4a      	ldr	r3, [pc, #296]	; (80014c4 <MRT_LPS22HH_Setup+0x13c>)
 800139c:	6818      	ldr	r0, [r3, #0]
 800139e:	f04f 33ff 	mov.w	r3, #4294967295
 80013a2:	2216      	movs	r2, #22
 80013a4:	4948      	ldr	r1, [pc, #288]	; (80014c8 <MRT_LPS22HH_Setup+0x140>)
 80013a6:	f008 fa9e 	bl	80098e6 <HAL_UART_Transmit>

	  stmdev_ctx_t lps_ctx;

	  lps22hh_reg_t reg;
	  /* Initialize mems driver interface */
	  lps_ctx.write_reg = lps_write;
 80013aa:	4b48      	ldr	r3, [pc, #288]	; (80014cc <MRT_LPS22HH_Setup+0x144>)
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
	  lps_ctx.read_reg = lps_read;
 80013ae:	4b48      	ldr	r3, [pc, #288]	; (80014d0 <MRT_LPS22HH_Setup+0x148>)
 80013b0:	62bb      	str	r3, [r7, #40]	; 0x28
	  lps_ctx.handle = SENSOR_BUS;
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 80013b6:	2064      	movs	r0, #100	; 0x64
 80013b8:	f003 fc7e 	bl	8004cb8 <HAL_Delay>
	  /* Check device ID */
	  lps_whoamI = 0;
 80013bc:	4b45      	ldr	r3, [pc, #276]	; (80014d4 <MRT_LPS22HH_Setup+0x14c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
	  lps22hh_device_id_get(&lps_ctx, &lps_whoamI);
 80013c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c6:	4943      	ldr	r1, [pc, #268]	; (80014d4 <MRT_LPS22HH_Setup+0x14c>)
 80013c8:	4618      	mov	r0, r3
 80013ca:	f002 fd88 	bl	8003ede <lps22hh_device_id_get>



  	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 22, HAL_MAX_DELAY);
 80013ce:	4b3d      	ldr	r3, [pc, #244]	; (80014c4 <MRT_LPS22HH_Setup+0x13c>)
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	2216      	movs	r2, #22
 80013d8:	493f      	ldr	r1, [pc, #252]	; (80014d8 <MRT_LPS22HH_Setup+0x150>)
 80013da:	f008 fa84 	bl	80098e6 <HAL_UART_Transmit>
	  if ( lps_whoamI != LPS22HH_ID ){
 80013de:	4b3d      	ldr	r3, [pc, #244]	; (80014d4 <MRT_LPS22HH_Setup+0x14c>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2bb3      	cmp	r3, #179	; 0xb3
 80013e4:	d031      	beq.n	800144a <MRT_LPS22HH_Setup+0xc2>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 80013e6:	4b37      	ldr	r3, [pc, #220]	; (80014c4 <MRT_LPS22HH_Setup+0x13c>)
 80013e8:	6818      	ldr	r0, [r3, #0]
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295
 80013ee:	2208      	movs	r2, #8
 80013f0:	493a      	ldr	r1, [pc, #232]	; (80014dc <MRT_LPS22HH_Setup+0x154>)
 80013f2:	f008 fa78 	bl	80098e6 <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 80013f6:	4b33      	ldr	r3, [pc, #204]	; (80014c4 <MRT_LPS22HH_Setup+0x13c>)
 80013f8:	6818      	ldr	r0, [r3, #0]
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295
 80013fe:	2210      	movs	r2, #16
 8001400:	4937      	ldr	r1, [pc, #220]	; (80014e0 <MRT_LPS22HH_Setup+0x158>)
 8001402:	f008 fa70 	bl	80098e6 <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lps_whoamI);
 8001406:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <MRT_LPS22HH_Setup+0x14c>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	4934      	ldr	r1, [pc, #208]	; (80014e4 <MRT_LPS22HH_Setup+0x15c>)
 8001412:	4618      	mov	r0, r3
 8001414:	f00d fb92 	bl	800eb3c <siprintf>
		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 8001418:	4b2a      	ldr	r3, [pc, #168]	; (80014c4 <MRT_LPS22HH_Setup+0x13c>)
 800141a:	681c      	ldr	r4, [r3, #0]
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4618      	mov	r0, r3
 8001422:	f7fe fee5 	bl	80001f0 <strlen>
 8001426:	4603      	mov	r3, r0
 8001428:	b29a      	uxth	r2, r3
 800142a:	f107 0114 	add.w	r1, r7, #20
 800142e:	f04f 33ff 	mov.w	r3, #4294967295
 8001432:	4620      	mov	r0, r4
 8001434:	f008 fa57 	bl	80098e6 <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 8001438:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <MRT_LPS22HH_Setup+0x13c>)
 800143a:	6818      	ldr	r0, [r3, #0]
 800143c:	f04f 33ff 	mov.w	r3, #4294967295
 8001440:	2216      	movs	r2, #22
 8001442:	4929      	ldr	r1, [pc, #164]	; (80014e8 <MRT_LPS22HH_Setup+0x160>)
 8001444:	f008 fa4f 	bl	80098e6 <HAL_UART_Transmit>
		  while(1);
 8001448:	e7fe      	b.n	8001448 <MRT_LPS22HH_Setup+0xc0>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 4, HAL_MAX_DELAY);
 800144a:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <MRT_LPS22HH_Setup+0x13c>)
 800144c:	6818      	ldr	r0, [r3, #0]
 800144e:	f04f 33ff 	mov.w	r3, #4294967295
 8001452:	2204      	movs	r2, #4
 8001454:	4925      	ldr	r1, [pc, #148]	; (80014ec <MRT_LPS22HH_Setup+0x164>)
 8001456:	f008 fa46 	bl	80098e6 <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lps22hh_reset_set(&lps_ctx, PROPERTY_ENABLE);
 800145a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145e:	2101      	movs	r1, #1
 8001460:	4618      	mov	r0, r3
 8001462:	f002 fd4d 	bl	8003f00 <lps22hh_reset_set>

	  HAL_Delay(1000);
 8001466:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800146a:	f003 fc25 	bl	8004cb8 <HAL_Delay>

	  do {
	    lps22hh_reset_get(&lps_ctx, &lps_rst);
 800146e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001472:	491f      	ldr	r1, [pc, #124]	; (80014f0 <MRT_LPS22HH_Setup+0x168>)
 8001474:	4618      	mov	r0, r3
 8001476:	f002 fd69 	bl	8003f4c <lps22hh_reset_get>
	  } while (lps_rst);
 800147a:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <MRT_LPS22HH_Setup+0x168>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f5      	bne.n	800146e <MRT_LPS22HH_Setup+0xe6>


	  /* Enable Block Data Update */
	  lps22hh_block_data_update_set(&lps_ctx, PROPERTY_ENABLE);
 8001482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001486:	2101      	movs	r1, #1
 8001488:	4618      	mov	r0, r3
 800148a:	f002 fc4f 	bl	8003d2c <lps22hh_block_data_update_set>
	  /* Set Output Data Rate */
	  lps22hh_data_rate_set(&lps_ctx, LPS22HH_75_Hz_LOW_NOISE);
 800148e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001492:	2115      	movs	r1, #21
 8001494:	4618      	mov	r0, r3
 8001496:	f002 fc6f 	bl	8003d78 <lps22hh_data_rate_set>
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Ends\n\r", 24, HAL_MAX_DELAY);
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <MRT_LPS22HH_Setup+0x13c>)
 800149c:	6818      	ldr	r0, [r3, #0]
 800149e:	f04f 33ff 	mov.w	r3, #4294967295
 80014a2:	2218      	movs	r2, #24
 80014a4:	4913      	ldr	r1, [pc, #76]	; (80014f4 <MRT_LPS22HH_Setup+0x16c>)
 80014a6:	f008 fa1e 	bl	80098e6 <HAL_UART_Transmit>

	  return lps_ctx;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	461c      	mov	r4, r3
 80014ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	}
 80014ba:	68f8      	ldr	r0, [r7, #12]
 80014bc:	3734      	adds	r7, #52	; 0x34
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd90      	pop	{r4, r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20004ef4 	.word	0x20004ef4
 80014c8:	08012b50 	.word	0x08012b50
 80014cc:	080015b9 	.word	0x080015b9
 80014d0:	080015f3 	.word	0x080015f3
 80014d4:	2000023a 	.word	0x2000023a
 80014d8:	08012ad8 	.word	0x08012ad8
 80014dc:	08012af0 	.word	0x08012af0
 80014e0:	08012afc 	.word	0x08012afc
 80014e4:	08012b10 	.word	0x08012b10
 80014e8:	08012b18 	.word	0x08012b18
 80014ec:	08012b30 	.word	0x08012b30
 80014f0:	2000023b 	.word	0x2000023b
 80014f4:	08012b68 	.word	0x08012b68

080014f8 <MRT_LPS22HH_getPressure>:



void MRT_LPS22HH_getPressure(stmdev_ctx_t lps_ctx,float* pressure){
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b087      	sub	sp, #28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	1d3c      	adds	r4, r7, #4
 8001500:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001504:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 8001506:	f107 0214 	add.w	r2, r7, #20
 800150a:	1d38      	adds	r0, r7, #4
 800150c:	2301      	movs	r3, #1
 800150e:	2127      	movs	r1, #39	; 0x27
 8001510:	f002 fbaa 	bl	8003c68 <lps22hh_read_reg>

	//uint8_t reg;
	//lps22hh_press_flag_data_ready_get(&lps_ctx, &reg);

	if (reg.status.p_da) {
 8001514:	7d3b      	ldrb	r3, [r7, #20]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d015      	beq.n	800154c <MRT_LPS22HH_getPressure+0x54>
	//if (reg) {
	  memset(data_raw_pressure, 0x00, sizeof(uint32_t));
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <MRT_LPS22HH_getPressure+0x5c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2204      	movs	r2, #4
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f00c fb17 	bl	800db5c <memset>
	  lps22hh_pressure_raw_get(&lps_ctx, &data_raw_pressure);
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	4908      	ldr	r1, [pc, #32]	; (8001554 <MRT_LPS22HH_getPressure+0x5c>)
 8001532:	4618      	mov	r0, r3
 8001534:	f002 fc87 	bl	8003e46 <lps22hh_pressure_raw_get>
	  *pressure = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <MRT_LPS22HH_getPressure+0x5c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f002 fbc3 	bl	8003cc8 <lps22hh_from_lsb_to_hpa>
 8001542:	eef0 7a40 	vmov.f32	s15, s0
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800154c:	bf00      	nop
 800154e:	371c      	adds	r7, #28
 8001550:	46bd      	mov	sp, r7
 8001552:	bd90      	pop	{r4, r7, pc}
 8001554:	20000234 	.word	0x20000234

08001558 <MRT_LPS22HH_getTemperature>:

void MRT_LPS22HH_getTemperature(stmdev_ctx_t lps_ctx,float* temperature_degC){
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b087      	sub	sp, #28
 800155c:	af00      	add	r7, sp, #0
 800155e:	1d3c      	adds	r4, r7, #4
 8001560:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001564:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	//lps22hh_reg_t reg;
	//lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);

	uint8_t reg;
	lps22hh_temp_flag_data_ready_get(&lps_ctx, &reg);
 8001566:	f107 0217 	add.w	r2, r7, #23
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	4611      	mov	r1, r2
 800156e:	4618      	mov	r0, r3
 8001570:	f002 fc50 	bl	8003e14 <lps22hh_temp_flag_data_ready_get>

	//if (reg.status.t_da) {
	if (reg) {
 8001574:	7dfb      	ldrb	r3, [r7, #23]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d017      	beq.n	80015aa <MRT_LPS22HH_getTemperature+0x52>
	  memset(lps_data_raw_temperature, 0x00, sizeof(int16_t));
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <MRT_LPS22HH_getTemperature+0x5c>)
 800157c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001580:	2202      	movs	r2, #2
 8001582:	2100      	movs	r1, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f00c fae9 	bl	800db5c <memset>
	  lps22hh_temperature_raw_get(&lps_ctx, &lps_data_raw_temperature);
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	4909      	ldr	r1, [pc, #36]	; (80015b4 <MRT_LPS22HH_getTemperature+0x5c>)
 800158e:	4618      	mov	r0, r3
 8001590:	f002 fc82 	bl	8003e98 <lps22hh_temperature_raw_get>
	  *temperature_degC = lps22hh_from_lsb_to_celsius(lps_data_raw_temperature);
 8001594:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <MRT_LPS22HH_getTemperature+0x5c>)
 8001596:	f9b3 3000 	ldrsh.w	r3, [r3]
 800159a:	4618      	mov	r0, r3
 800159c:	f002 fbac 	bl	8003cf8 <lps22hh_from_lsb_to_celsius>
 80015a0:	eef0 7a40 	vmov.f32	s15, s0
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80015aa:	bf00      	nop
 80015ac:	371c      	adds	r7, #28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd90      	pop	{r4, r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000238 	.word	0x20000238

080015b8 <lps_write>:




static int32_t lps_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af04      	add	r7, sp, #16
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	607a      	str	r2, [r7, #4]
 80015c2:	461a      	mov	r2, r3
 80015c4:	460b      	mov	r3, r1
 80015c6:	72fb      	strb	r3, [r7, #11]
 80015c8:	4613      	mov	r3, r2
 80015ca:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80015cc:	7afb      	ldrb	r3, [r7, #11]
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d4:	9302      	str	r3, [sp, #8]
 80015d6:	893b      	ldrh	r3, [r7, #8]
 80015d8:	9301      	str	r3, [sp, #4]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	2301      	movs	r3, #1
 80015e0:	21b9      	movs	r1, #185	; 0xb9
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	f004 fa34 	bl	8005a50 <HAL_I2C_Mem_Write>
  return 0;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <lps_read>:

static int32_t lps_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b088      	sub	sp, #32
 80015f6:	af04      	add	r7, sp, #16
 80015f8:	60f8      	str	r0, [r7, #12]
 80015fa:	607a      	str	r2, [r7, #4]
 80015fc:	461a      	mov	r2, r3
 80015fe:	460b      	mov	r3, r1
 8001600:	72fb      	strb	r3, [r7, #11]
 8001602:	4613      	mov	r3, r2
 8001604:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8001606:	7afb      	ldrb	r3, [r7, #11]
 8001608:	b29a      	uxth	r2, r3
 800160a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160e:	9302      	str	r3, [sp, #8]
 8001610:	893b      	ldrh	r3, [r7, #8]
 8001612:	9301      	str	r3, [sp, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	2301      	movs	r3, #1
 800161a:	21b9      	movs	r1, #185	; 0xb9
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f004 fb11 	bl	8005c44 <HAL_I2C_Mem_Read>
  return 0;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800162c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800162e:	b0a7      	sub	sp, #156	; 0x9c
 8001630:	af22      	add	r7, sp, #136	; 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001632:	f003 faff 	bl	8004c34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001636:	f000 f99f 	bl	8001978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800163a:	f000 fd2f 	bl	800209c <MX_GPIO_Init>
  MX_ADC1_Init();
 800163e:	f000 f9fd 	bl	8001a3c <MX_ADC1_Init>
  MX_I2C1_Init();
 8001642:	f000 fa4d 	bl	8001ae0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001646:	f000 fa8b 	bl	8001b60 <MX_I2C2_Init>
  MX_I2C3_Init();
 800164a:	f000 fac9 	bl	8001be0 <MX_I2C3_Init>
  MX_SPI2_Init();
 800164e:	f000 fbad 	bl	8001dac <MX_SPI2_Init>
  MX_SPI4_Init();
 8001652:	f000 fbe1 	bl	8001e18 <MX_SPI4_Init>
  MX_SPI5_Init();
 8001656:	f000 fc15 	bl	8001e84 <MX_SPI5_Init>
  MX_TIM2_Init();
 800165a:	f000 fc49 	bl	8001ef0 <MX_TIM2_Init>
  MX_UART8_Init();
 800165e:	f000 fc9f 	bl	8001fa0 <MX_UART8_Init>
  MX_USART3_UART_Init();
 8001662:	f000 fcc7 	bl	8001ff4 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001666:	f000 fcef 	bl	8002048 <MX_USART6_UART_Init>
  MX_RTC_Init();
 800166a:	f000 fb13 	bl	8001c94 <MX_RTC_Init>
  /*
   * Reinitialize all peripherals
   */

  // reset LEDs
  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	2102      	movs	r1, #2
 8001672:	4899      	ldr	r0, [pc, #612]	; (80018d8 <main+0x2ac>)
 8001674:	f004 f88e 	bl	8005794 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001678:	2200      	movs	r2, #0
 800167a:	2104      	movs	r1, #4
 800167c:	4896      	ldr	r0, [pc, #600]	; (80018d8 <main+0x2ac>)
 800167e:	f004 f889 	bl	8005794 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 8001682:	2200      	movs	r2, #0
 8001684:	2108      	movs	r1, #8
 8001686:	4894      	ldr	r0, [pc, #592]	; (80018d8 <main+0x2ac>)
 8001688:	f004 f884 	bl	8005794 <HAL_GPIO_WritePin>

  // reset recovery pyro pins
  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, RESET); //PG14 ARMING RCOV
 800168c:	2200      	movs	r2, #0
 800168e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001692:	4892      	ldr	r0, [pc, #584]	; (80018dc <main+0x2b0>)
 8001694:	f004 f87e 	bl	8005794 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 8001698:	2200      	movs	r2, #0
 800169a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800169e:	488f      	ldr	r0, [pc, #572]	; (80018dc <main+0x2b0>)
 80016a0:	f004 f878 	bl	8005794 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 80016a4:	2200      	movs	r2, #0
 80016a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016aa:	488c      	ldr	r0, [pc, #560]	; (80018dc <main+0x2b0>)
 80016ac:	f004 f872 	bl	8005794 <HAL_GPIO_WritePin>

  // reset prop pyro pins
  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, RESET); //PG1 ARMING_PROP
 80016b0:	2200      	movs	r2, #0
 80016b2:	2102      	movs	r1, #2
 80016b4:	4889      	ldr	r0, [pc, #548]	; (80018dc <main+0x2b0>)
 80016b6:	f004 f86d 	bl	8005794 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 80016ba:	2200      	movs	r2, #0
 80016bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016c0:	4887      	ldr	r0, [pc, #540]	; (80018e0 <main+0x2b4>)
 80016c2:	f004 f867 	bl	8005794 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 80016c6:	2200      	movs	r2, #0
 80016c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016cc:	4884      	ldr	r0, [pc, #528]	; (80018e0 <main+0x2b4>)
 80016ce:	f004 f861 	bl	8005794 <HAL_GPIO_WritePin>

  // reset 12 V buck converter enable pin (disable converter)
  HAL_GPIO_WritePin(EN_12V_Buck_GPIO_Port, EN_12V_Buck_Pin, RESET); //PE2 Buck converter enable
 80016d2:	2200      	movs	r2, #0
 80016d4:	2104      	movs	r1, #4
 80016d6:	4883      	ldr	r0, [pc, #524]	; (80018e4 <main+0x2b8>)
 80016d8:	f004 f85c 	bl	8005794 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET); //This was in the previous code
  //HAL_GPIO_WritePin(OUT_Prop_ActuatedVent_Gate_GPIO_Port, OUT_Prop_ActuatedVent_Gate_Pin, RESET); //PE7 (MAY NOT BE THE RIGHT ONE)


  // reset payload EN signal
  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 80016dc:	2200      	movs	r2, #0
 80016de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016e2:	4880      	ldr	r0, [pc, #512]	; (80018e4 <main+0x2b8>)
 80016e4:	f004 f856 	bl	8005794 <HAL_GPIO_WritePin>

  // set CS pin for thermocouple chip high
  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

  // set power off for VR
  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 80016e8:	2200      	movs	r2, #0
 80016ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016ee:	487b      	ldr	r0, [pc, #492]	; (80018dc <main+0x2b0>)
 80016f0:	f004 f850 	bl	8005794 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 80016f4:	2200      	movs	r2, #0
 80016f6:	2180      	movs	r1, #128	; 0x80
 80016f8:	487b      	ldr	r0, [pc, #492]	; (80018e8 <main+0x2bc>)
 80016fa:	f004 f84b 	bl	8005794 <HAL_GPIO_WritePin>
}¸
#define HAL_UART_Transmit(u,b,size,HAL_MAX_DELAY)		CDC_Transmit_FS(b, size); //TODO if we use USB instead of huart for debugging
*/


  checkForI2CDevices(huart8,hi2c1);
 80016fe:	4e7b      	ldr	r6, [pc, #492]	; (80018ec <main+0x2c0>)
 8001700:	4a7b      	ldr	r2, [pc, #492]	; (80018f0 <main+0x2c4>)
 8001702:	ab0d      	add	r3, sp, #52	; 0x34
 8001704:	4611      	mov	r1, r2
 8001706:	2254      	movs	r2, #84	; 0x54
 8001708:	4618      	mov	r0, r3
 800170a:	f00c f9ff 	bl	800db0c <memcpy>
 800170e:	466d      	mov	r5, sp
 8001710:	f106 0410 	add.w	r4, r6, #16
 8001714:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001716:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001718:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800171a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800171c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800171e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001720:	6823      	ldr	r3, [r4, #0]
 8001722:	602b      	str	r3, [r5, #0]
 8001724:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001728:	f001 ff76 	bl	8003618 <checkForI2CDevices>
  checkForI2CDevices(huart8,hi2c2);
 800172c:	4e6f      	ldr	r6, [pc, #444]	; (80018ec <main+0x2c0>)
 800172e:	4a71      	ldr	r2, [pc, #452]	; (80018f4 <main+0x2c8>)
 8001730:	ab0d      	add	r3, sp, #52	; 0x34
 8001732:	4611      	mov	r1, r2
 8001734:	2254      	movs	r2, #84	; 0x54
 8001736:	4618      	mov	r0, r3
 8001738:	f00c f9e8 	bl	800db0c <memcpy>
 800173c:	466d      	mov	r5, sp
 800173e:	f106 0410 	add.w	r4, r6, #16
 8001742:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001744:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001748:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800174c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174e:	6823      	ldr	r3, [r4, #0]
 8001750:	602b      	str	r3, [r5, #0]
 8001752:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001756:	f001 ff5f 	bl	8003618 <checkForI2CDevices>
  checkForI2CDevices(huart8,hi2c3);
 800175a:	4e64      	ldr	r6, [pc, #400]	; (80018ec <main+0x2c0>)
 800175c:	4a66      	ldr	r2, [pc, #408]	; (80018f8 <main+0x2cc>)
 800175e:	ab0d      	add	r3, sp, #52	; 0x34
 8001760:	4611      	mov	r1, r2
 8001762:	2254      	movs	r2, #84	; 0x54
 8001764:	4618      	mov	r0, r3
 8001766:	f00c f9d1 	bl	800db0c <memcpy>
 800176a:	466d      	mov	r5, sp
 800176c:	f106 0410 	add.w	r4, r6, #16
 8001770:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001772:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001774:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001776:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001778:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800177a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800177c:	6823      	ldr	r3, [r4, #0]
 800177e:	602b      	str	r3, [r5, #0]
 8001780:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001784:	f001 ff48 	bl	8003618 <checkForI2CDevices>

  /*
   * For LSM6DSR
   *-Enable float formatting for sprintf (go to Project->Properties->C/C++ Build->Settings->MCU Settings->Check the box "Use float with printf")
   */
  lsm_ctx = MRT_LSM6DSR_Setup(&hi2c3,&DEBUG_USART);
 8001788:	4c5c      	ldr	r4, [pc, #368]	; (80018fc <main+0x2d0>)
 800178a:	463b      	mov	r3, r7
 800178c:	4a57      	ldr	r2, [pc, #348]	; (80018ec <main+0x2c0>)
 800178e:	495a      	ldr	r1, [pc, #360]	; (80018f8 <main+0x2cc>)
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fc75 	bl	8001080 <MRT_LSM6DSR_Setup>
 8001796:	463b      	mov	r3, r7
 8001798:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800179c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

   /*
    * For LPS22HH
    *-Enable float formatting for sprintf (go to Project->Properties->C/C++ Build->Settings->MCU Settings->Check the box "Use float with printf")
    */
  lps_ctx = MRT_LPS22HH_Setup(&hi2c3,&DEBUG_USART);
 80017a0:	4c57      	ldr	r4, [pc, #348]	; (8001900 <main+0x2d4>)
 80017a2:	463b      	mov	r3, r7
 80017a4:	4a51      	ldr	r2, [pc, #324]	; (80018ec <main+0x2c0>)
 80017a6:	4954      	ldr	r1, [pc, #336]	; (80018f8 <main+0x2cc>)
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fded 	bl	8001388 <MRT_LPS22HH_Setup>
 80017ae:	463b      	mov	r3, r7
 80017b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    * For the GPS:
    * -huart6 on v4.3
    * -Set its uart to 9600)
    *
    */
   GPS_init(&huart6, &huart8);
 80017b8:	494c      	ldr	r1, [pc, #304]	; (80018ec <main+0x2c0>)
 80017ba:	4852      	ldr	r0, [pc, #328]	; (8001904 <main+0x2d8>)
 80017bc:	f001 ff0e 	bl	80035dc <GPS_init>

   /*
    * For the xtend
    * -huart3 on v4.3
    */
   HAL_GPIO_WritePin(XTend_CTS_Pin, GPIO_PIN_10, GPIO_PIN_RESET); //TODO is it necessary?
 80017c0:	2200      	movs	r2, #0
 80017c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017c6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80017ca:	f003 ffe3 	bl	8005794 <HAL_GPIO_WritePin>

   /*
    * For the SRadio
    * -SPI2 on v4.3
    */
	set_hspi(SRADIO_SPI);
 80017ce:	4c4e      	ldr	r4, [pc, #312]	; (8001908 <main+0x2dc>)
 80017d0:	4668      	mov	r0, sp
 80017d2:	f104 0310 	add.w	r3, r4, #16
 80017d6:	2248      	movs	r2, #72	; 0x48
 80017d8:	4619      	mov	r1, r3
 80017da:	f00c f997 	bl	800db0c <memcpy>
 80017de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80017e2:	f008 fcd3 	bl	800a18c <set_hspi>
	// SPI2_SX_CS_GPIO_Port
	set_NSS_pin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin);
 80017e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ea:	4848      	ldr	r0, [pc, #288]	; (800190c <main+0x2e0>)
 80017ec:	f008 fc76 	bl	800a0dc <set_NSS_pin>
	set_BUSY_pin(SX_BUSY_GPIO_Port, SX_BUSY_Pin);
 80017f0:	2108      	movs	r1, #8
 80017f2:	483a      	ldr	r0, [pc, #232]	; (80018dc <main+0x2b0>)
 80017f4:	f008 fc88 	bl	800a108 <set_BUSY_pin>
	set_NRESET_pin(SX_RST_GPIO_Port, SX_RST_Pin);
 80017f8:	2104      	movs	r1, #4
 80017fa:	4838      	ldr	r0, [pc, #224]	; (80018dc <main+0x2b0>)
 80017fc:	f008 fc9a 	bl	800a134 <set_NRESET_pin>
	set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
 8001800:	2110      	movs	r1, #16
 8001802:	4836      	ldr	r0, [pc, #216]	; (80018dc <main+0x2b0>)
 8001804:	f008 fcac 	bl	800a160 <set_DIO1_pin>
	Tx_setup();
 8001808:	f008 fcd8 	bl	800a1bc <Tx_setup>
   * -Define what you want in the alarms callback functions (check the MRT_RTOS_f4xx .h file)
   * -(Optional) Setup alarm A and the clock time in .ioc
   * The rest have been taken care of
   * You can access the flag of both alarm A and B with the variables flagA and flagB
   */
  MRT_SetupRTOS(DEBUG_USART,10);
 800180c:	4e37      	ldr	r6, [pc, #220]	; (80018ec <main+0x2c0>)
 800180e:	230a      	movs	r3, #10
 8001810:	930d      	str	r3, [sp, #52]	; 0x34
 8001812:	466d      	mov	r5, sp
 8001814:	f106 0410 	add.w	r4, r6, #16
 8001818:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800181a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800181c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800181e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001820:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001822:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001824:	6823      	ldr	r3, [r4, #0]
 8001826:	602b      	str	r3, [r5, #0]
 8001828:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800182c:	f003 f894 	bl	8004958 <MRT_SetupRTOS>

  HAL_UART_Transmit(&DEBUG_USART,"\r\n\r\nStarting FC\r\n\r\n",19,HAL_MAX_DELAY);
 8001830:	f04f 33ff 	mov.w	r3, #4294967295
 8001834:	2213      	movs	r2, #19
 8001836:	4936      	ldr	r1, [pc, #216]	; (8001910 <main+0x2e4>)
 8001838:	482c      	ldr	r0, [pc, #176]	; (80018ec <main+0x2c0>)
 800183a:	f008 f854 	bl	80098e6 <HAL_UART_Transmit>
   *
   * 	-A global interrupts that acts as a watchdog:
   * 		If the interrupts fails, we are doomed
   *
   */
  MX_IWDG_Init();
 800183e:	f000 fa0f 	bl	8001c60 <MX_IWDG_Init>
  HAL_IWDG_Refresh(&hiwdg);
 8001842:	4834      	ldr	r0, [pc, #208]	; (8001914 <main+0x2e8>)
 8001844:	f005 f9a0 	bl	8006b88 <HAL_IWDG_Refresh>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001848:	f009 f8f6 	bl	800aa38 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of MEMORY */
  MEMORYHandle = osMutexNew(&MEMORY_attributes);
 800184c:	4832      	ldr	r0, [pc, #200]	; (8001918 <main+0x2ec>)
 800184e:	f009 f9fb 	bl	800ac48 <osMutexNew>
 8001852:	4603      	mov	r3, r0
 8001854:	4a31      	ldr	r2, [pc, #196]	; (800191c <main+0x2f0>)
 8001856:	6013      	str	r3, [r2, #0]

  /* creation of TELEMETRY */
  TELEMETRYHandle = osMutexNew(&TELEMETRY_attributes);
 8001858:	4831      	ldr	r0, [pc, #196]	; (8001920 <main+0x2f4>)
 800185a:	f009 f9f5 	bl	800ac48 <osMutexNew>
 800185e:	4603      	mov	r3, r0
 8001860:	4a30      	ldr	r2, [pc, #192]	; (8001924 <main+0x2f8>)
 8001862:	6013      	str	r3, [r2, #0]

  /* creation of SENSOR_POLLING */
  SENSOR_POLLINGHandle = osMutexNew(&SENSOR_POLLING_attributes);
 8001864:	4830      	ldr	r0, [pc, #192]	; (8001928 <main+0x2fc>)
 8001866:	f009 f9ef 	bl	800ac48 <osMutexNew>
 800186a:	4603      	mov	r3, r0
 800186c:	4a2f      	ldr	r2, [pc, #188]	; (800192c <main+0x300>)
 800186e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Memory0 */
  Memory0Handle = osThreadNew(StartMemory0, NULL, &Memory0_attributes);
 8001870:	4a2f      	ldr	r2, [pc, #188]	; (8001930 <main+0x304>)
 8001872:	2100      	movs	r1, #0
 8001874:	482f      	ldr	r0, [pc, #188]	; (8001934 <main+0x308>)
 8001876:	f009 f929 	bl	800aacc <osThreadNew>
 800187a:	4603      	mov	r3, r0
 800187c:	4a2e      	ldr	r2, [pc, #184]	; (8001938 <main+0x30c>)
 800187e:	6013      	str	r3, [r2, #0]

  /* creation of Ejection1 */
  Ejection1Handle = osThreadNew(StartEjection1, NULL, &Ejection1_attributes);
 8001880:	4a2e      	ldr	r2, [pc, #184]	; (800193c <main+0x310>)
 8001882:	2100      	movs	r1, #0
 8001884:	482e      	ldr	r0, [pc, #184]	; (8001940 <main+0x314>)
 8001886:	f009 f921 	bl	800aacc <osThreadNew>
 800188a:	4603      	mov	r3, r0
 800188c:	4a2d      	ldr	r2, [pc, #180]	; (8001944 <main+0x318>)
 800188e:	6013      	str	r3, [r2, #0]

  /* creation of Telemetry2 */
  Telemetry2Handle = osThreadNew(StartTelemetry2, NULL, &Telemetry2_attributes);
 8001890:	4a2d      	ldr	r2, [pc, #180]	; (8001948 <main+0x31c>)
 8001892:	2100      	movs	r1, #0
 8001894:	482d      	ldr	r0, [pc, #180]	; (800194c <main+0x320>)
 8001896:	f009 f919 	bl	800aacc <osThreadNew>
 800189a:	4603      	mov	r3, r0
 800189c:	4a2c      	ldr	r2, [pc, #176]	; (8001950 <main+0x324>)
 800189e:	6013      	str	r3, [r2, #0]

  /* creation of Sensors3 */
  Sensors3Handle = osThreadNew(StartSensors3, NULL, &Sensors3_attributes);
 80018a0:	4a2c      	ldr	r2, [pc, #176]	; (8001954 <main+0x328>)
 80018a2:	2100      	movs	r1, #0
 80018a4:	482c      	ldr	r0, [pc, #176]	; (8001958 <main+0x32c>)
 80018a6:	f009 f911 	bl	800aacc <osThreadNew>
 80018aa:	4603      	mov	r3, r0
 80018ac:	4a2b      	ldr	r2, [pc, #172]	; (800195c <main+0x330>)
 80018ae:	6013      	str	r3, [r2, #0]

  /* creation of Propulsion4 */
  Propulsion4Handle = osThreadNew(StartPropulsion4, NULL, &Propulsion4_attributes);
 80018b0:	4a2b      	ldr	r2, [pc, #172]	; (8001960 <main+0x334>)
 80018b2:	2100      	movs	r1, #0
 80018b4:	482b      	ldr	r0, [pc, #172]	; (8001964 <main+0x338>)
 80018b6:	f009 f909 	bl	800aacc <osThreadNew>
 80018ba:	4603      	mov	r3, r0
 80018bc:	4a2a      	ldr	r2, [pc, #168]	; (8001968 <main+0x33c>)
 80018be:	6013      	str	r3, [r2, #0]

  /* creation of Printing */
  PrintingHandle = osThreadNew(StartPrinting, NULL, &Printing_attributes);
 80018c0:	4a2a      	ldr	r2, [pc, #168]	; (800196c <main+0x340>)
 80018c2:	2100      	movs	r1, #0
 80018c4:	482a      	ldr	r0, [pc, #168]	; (8001970 <main+0x344>)
 80018c6:	f009 f901 	bl	800aacc <osThreadNew>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4a29      	ldr	r2, [pc, #164]	; (8001974 <main+0x348>)
 80018ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80018d0:	f009 f8d6 	bl	800aa80 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <main+0x2a8>
 80018d6:	bf00      	nop
 80018d8:	40020800 	.word	0x40020800
 80018dc:	40021800 	.word	0x40021800
 80018e0:	40021400 	.word	0x40021400
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40020c00 	.word	0x40020c00
 80018ec:	20005478 	.word	0x20005478
 80018f0:	20005060 	.word	0x20005060
 80018f4:	200050c0 	.word	0x200050c0
 80018f8:	20004ef8 	.word	0x20004ef8
 80018fc:	20005564 	.word	0x20005564
 8001900:	20005558 	.word	0x20005558
 8001904:	200054bc 	.word	0x200054bc
 8001908:	20004f4c 	.word	0x20004f4c
 800190c:	40020400 	.word	0x40020400
 8001910:	08012be8 	.word	0x08012be8
 8001914:	200050b4 	.word	0x200050b4
 8001918:	08013034 	.word	0x08013034
 800191c:	2000537c 	.word	0x2000537c
 8001920:	08013044 	.word	0x08013044
 8001924:	20005584 	.word	0x20005584
 8001928:	08013054 	.word	0x08013054
 800192c:	200053f8 	.word	0x200053f8
 8001930:	08012f5c 	.word	0x08012f5c
 8001934:	080023ad 	.word	0x080023ad
 8001938:	20005124 	.word	0x20005124
 800193c:	08012f80 	.word	0x08012f80
 8001940:	080023b9 	.word	0x080023b9
 8001944:	20005470 	.word	0x20005470
 8001948:	08012fa4 	.word	0x08012fa4
 800194c:	080023c7 	.word	0x080023c7
 8001950:	20005474 	.word	0x20005474
 8001954:	08012fc8 	.word	0x08012fc8
 8001958:	080023d5 	.word	0x080023d5
 800195c:	20005554 	.word	0x20005554
 8001960:	08012fec 	.word	0x08012fec
 8001964:	08002481 	.word	0x08002481
 8001968:	20005570 	.word	0x20005570
 800196c:	08013010 	.word	0x08013010
 8001970:	0800248d 	.word	0x0800248d
 8001974:	20005400 	.word	0x20005400

08001978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b094      	sub	sp, #80	; 0x50
 800197c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800197e:	f107 0320 	add.w	r3, r7, #32
 8001982:	2230      	movs	r2, #48	; 0x30
 8001984:	2100      	movs	r1, #0
 8001986:	4618      	mov	r0, r3
 8001988:	f00c f8e8 	bl	800db5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800198c:	f107 030c 	add.w	r3, r7, #12
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800199c:	2300      	movs	r3, #0
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	4b24      	ldr	r3, [pc, #144]	; (8001a34 <SystemClock_Config+0xbc>)
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	4a23      	ldr	r2, [pc, #140]	; (8001a34 <SystemClock_Config+0xbc>)
 80019a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019aa:	6413      	str	r3, [r2, #64]	; 0x40
 80019ac:	4b21      	ldr	r3, [pc, #132]	; (8001a34 <SystemClock_Config+0xbc>)
 80019ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019b8:	2300      	movs	r3, #0
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	4b1e      	ldr	r3, [pc, #120]	; (8001a38 <SystemClock_Config+0xc0>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019c4:	4a1c      	ldr	r2, [pc, #112]	; (8001a38 <SystemClock_Config+0xc0>)
 80019c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <SystemClock_Config+0xc0>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80019d8:	2309      	movs	r3, #9
 80019da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019e2:	2301      	movs	r3, #1
 80019e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ea:	f107 0320 	add.w	r3, r7, #32
 80019ee:	4618      	mov	r0, r3
 80019f0:	f005 f8ee 	bl	8006bd0 <HAL_RCC_OscConfig>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <SystemClock_Config+0x86>
  {
    Error_Handler();
 80019fa:	f000 febd 	bl	8002778 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019fe:	230f      	movs	r3, #15
 8001a00:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001a02:	2301      	movs	r3, #1
 8001a04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a0e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a14:	f107 030c 	add.w	r3, r7, #12
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f005 fb50 	bl	80070c0 <HAL_RCC_ClockConfig>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001a26:	f000 fea7 	bl	8002778 <Error_Handler>
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	3750      	adds	r7, #80	; 0x50
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40007000 	.word	0x40007000

08001a3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a42:	463b      	mov	r3, r7
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a4e:	4b21      	ldr	r3, [pc, #132]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a50:	4a21      	ldr	r2, [pc, #132]	; (8001ad8 <MX_ADC1_Init+0x9c>)
 8001a52:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a54:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a60:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a66:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a6c:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a74:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a7a:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a7c:	4a17      	ldr	r2, [pc, #92]	; (8001adc <MX_ADC1_Init+0xa0>)
 8001a7e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a80:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a86:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a94:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a96:	2201      	movs	r2, #1
 8001a98:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a9a:	480e      	ldr	r0, [pc, #56]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a9c:	f003 f930 	bl	8004d00 <HAL_ADC_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001aa6:	f000 fe67 	bl	8002778 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001aaa:	2306      	movs	r3, #6
 8001aac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ab6:	463b      	mov	r3, r7
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4806      	ldr	r0, [pc, #24]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001abc:	f003 f964 	bl	8004d88 <HAL_ADC_ConfigChannel>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001ac6:	f000 fe57 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001aca:	bf00      	nop
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	2000512c 	.word	0x2000512c
 8001ad8:	40012000 	.word	0x40012000
 8001adc:	0f000001 	.word	0x0f000001

08001ae0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ae4:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001ae6:	4a1c      	ldr	r2, [pc, #112]	; (8001b58 <MX_I2C1_Init+0x78>)
 8001ae8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001aea:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001aec:	4a1b      	ldr	r2, [pc, #108]	; (8001b5c <MX_I2C1_Init+0x7c>)
 8001aee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001af0:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001af6:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001afc:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001afe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b04:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b0a:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b10:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b16:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b1c:	480d      	ldr	r0, [pc, #52]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001b1e:	f003 fe53 	bl	80057c8 <HAL_I2C_Init>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b28:	f000 fe26 	bl	8002778 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4809      	ldr	r0, [pc, #36]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001b30:	f004 ff6d 	bl	8006a0e <HAL_I2CEx_ConfigAnalogFilter>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001b3a:	f000 fe1d 	bl	8002778 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4804      	ldr	r0, [pc, #16]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001b42:	f004 ffa0 	bl	8006a86 <HAL_I2CEx_ConfigDigitalFilter>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001b4c:	f000 fe14 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20005060 	.word	0x20005060
 8001b58:	40005400 	.word	0x40005400
 8001b5c:	000186a0 	.word	0x000186a0

08001b60 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b64:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <MX_I2C2_Init+0x74>)
 8001b66:	4a1c      	ldr	r2, [pc, #112]	; (8001bd8 <MX_I2C2_Init+0x78>)
 8001b68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001b6a:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <MX_I2C2_Init+0x74>)
 8001b6c:	4a1b      	ldr	r2, [pc, #108]	; (8001bdc <MX_I2C2_Init+0x7c>)
 8001b6e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b70:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <MX_I2C2_Init+0x74>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b76:	4b17      	ldr	r3, [pc, #92]	; (8001bd4 <MX_I2C2_Init+0x74>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b7c:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <MX_I2C2_Init+0x74>)
 8001b7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b82:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b84:	4b13      	ldr	r3, [pc, #76]	; (8001bd4 <MX_I2C2_Init+0x74>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b8a:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <MX_I2C2_Init+0x74>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b90:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <MX_I2C2_Init+0x74>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b96:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <MX_I2C2_Init+0x74>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b9c:	480d      	ldr	r0, [pc, #52]	; (8001bd4 <MX_I2C2_Init+0x74>)
 8001b9e:	f003 fe13 	bl	80057c8 <HAL_I2C_Init>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001ba8:	f000 fde6 	bl	8002778 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bac:	2100      	movs	r1, #0
 8001bae:	4809      	ldr	r0, [pc, #36]	; (8001bd4 <MX_I2C2_Init+0x74>)
 8001bb0:	f004 ff2d 	bl	8006a0e <HAL_I2CEx_ConfigAnalogFilter>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001bba:	f000 fddd 	bl	8002778 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4804      	ldr	r0, [pc, #16]	; (8001bd4 <MX_I2C2_Init+0x74>)
 8001bc2:	f004 ff60 	bl	8006a86 <HAL_I2CEx_ConfigDigitalFilter>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001bcc:	f000 fdd4 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	200050c0 	.word	0x200050c0
 8001bd8:	40005800 	.word	0x40005800
 8001bdc:	000186a0 	.word	0x000186a0

08001be0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001be4:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <MX_I2C3_Init+0x74>)
 8001be6:	4a1c      	ldr	r2, [pc, #112]	; (8001c58 <MX_I2C3_Init+0x78>)
 8001be8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001bea:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <MX_I2C3_Init+0x74>)
 8001bec:	4a1b      	ldr	r2, [pc, #108]	; (8001c5c <MX_I2C3_Init+0x7c>)
 8001bee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bf0:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <MX_I2C3_Init+0x74>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001bf6:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <MX_I2C3_Init+0x74>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bfc:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <MX_I2C3_Init+0x74>)
 8001bfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c02:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c04:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <MX_I2C3_Init+0x74>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001c0a:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <MX_I2C3_Init+0x74>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c10:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <MX_I2C3_Init+0x74>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c16:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <MX_I2C3_Init+0x74>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001c1c:	480d      	ldr	r0, [pc, #52]	; (8001c54 <MX_I2C3_Init+0x74>)
 8001c1e:	f003 fdd3 	bl	80057c8 <HAL_I2C_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001c28:	f000 fda6 	bl	8002778 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4809      	ldr	r0, [pc, #36]	; (8001c54 <MX_I2C3_Init+0x74>)
 8001c30:	f004 feed 	bl	8006a0e <HAL_I2CEx_ConfigAnalogFilter>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001c3a:	f000 fd9d 	bl	8002778 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4804      	ldr	r0, [pc, #16]	; (8001c54 <MX_I2C3_Init+0x74>)
 8001c42:	f004 ff20 	bl	8006a86 <HAL_I2CEx_ConfigDigitalFilter>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001c4c:	f000 fd94 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20004ef8 	.word	0x20004ef8
 8001c58:	40005c00 	.word	0x40005c00
 8001c5c:	000186a0 	.word	0x000186a0

08001c60 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <MX_IWDG_Init+0x2c>)
 8001c66:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <MX_IWDG_Init+0x30>)
 8001c68:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8001c6a:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <MX_IWDG_Init+0x2c>)
 8001c6c:	2204      	movs	r2, #4
 8001c6e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2499;
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <MX_IWDG_Init+0x2c>)
 8001c72:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001c76:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001c78:	4804      	ldr	r0, [pc, #16]	; (8001c8c <MX_IWDG_Init+0x2c>)
 8001c7a:	f004 ff43 	bl	8006b04 <HAL_IWDG_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001c84:	f000 fd78 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001c88:	bf00      	nop
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	200050b4 	.word	0x200050b4
 8001c90:	40003000 	.word	0x40003000

08001c94 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b090      	sub	sp, #64	; 0x40
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001c9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	605a      	str	r2, [r3, #4]
 8001ca4:	609a      	str	r2, [r3, #8]
 8001ca6:	60da      	str	r2, [r3, #12]
 8001ca8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001caa:	2300      	movs	r3, #0
 8001cac:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001cae:	463b      	mov	r3, r7
 8001cb0:	2228      	movs	r2, #40	; 0x28
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f00b ff51 	bl	800db5c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001cba:	4b3a      	ldr	r3, [pc, #232]	; (8001da4 <MX_RTC_Init+0x110>)
 8001cbc:	4a3a      	ldr	r2, [pc, #232]	; (8001da8 <MX_RTC_Init+0x114>)
 8001cbe:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001cc0:	4b38      	ldr	r3, [pc, #224]	; (8001da4 <MX_RTC_Init+0x110>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001cc6:	4b37      	ldr	r3, [pc, #220]	; (8001da4 <MX_RTC_Init+0x110>)
 8001cc8:	227f      	movs	r2, #127	; 0x7f
 8001cca:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001ccc:	4b35      	ldr	r3, [pc, #212]	; (8001da4 <MX_RTC_Init+0x110>)
 8001cce:	22ff      	movs	r2, #255	; 0xff
 8001cd0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001cd2:	4b34      	ldr	r3, [pc, #208]	; (8001da4 <MX_RTC_Init+0x110>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001cd8:	4b32      	ldr	r3, [pc, #200]	; (8001da4 <MX_RTC_Init+0x110>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001cde:	4b31      	ldr	r3, [pc, #196]	; (8001da4 <MX_RTC_Init+0x110>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ce4:	482f      	ldr	r0, [pc, #188]	; (8001da4 <MX_RTC_Init+0x110>)
 8001ce6:	f005 fdd5 	bl	8007894 <HAL_RTC_Init>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001cf0:	f000 fd42 	bl	8002778 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d12:	2201      	movs	r2, #1
 8001d14:	4619      	mov	r1, r3
 8001d16:	4823      	ldr	r0, [pc, #140]	; (8001da4 <MX_RTC_Init+0x110>)
 8001d18:	f005 fe4d 	bl	80079b6 <HAL_RTC_SetTime>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001d22:	f000 fd29 	bl	8002778 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001d26:	2301      	movs	r3, #1
 8001d28:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001d32:	2301      	movs	r3, #1
 8001d34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001d3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d42:	2201      	movs	r2, #1
 8001d44:	4619      	mov	r1, r3
 8001d46:	4817      	ldr	r0, [pc, #92]	; (8001da4 <MX_RTC_Init+0x110>)
 8001d48:	f005 fef2 	bl	8007b30 <HAL_RTC_SetDate>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001d52:	f000 fd11 	bl	8002778 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001d80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d86:	463b      	mov	r3, r7
 8001d88:	2201      	movs	r2, #1
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4805      	ldr	r0, [pc, #20]	; (8001da4 <MX_RTC_Init+0x110>)
 8001d8e:	f005 ff77 	bl	8007c80 <HAL_RTC_SetAlarm_IT>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001d98:	f000 fcee 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001d9c:	bf00      	nop
 8001d9e:	3740      	adds	r7, #64	; 0x40
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	200053d8 	.word	0x200053d8
 8001da8:	40002800 	.word	0x40002800

08001dac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001db0:	4b17      	ldr	r3, [pc, #92]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001db2:	4a18      	ldr	r2, [pc, #96]	; (8001e14 <MX_SPI2_Init+0x68>)
 8001db4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001db6:	4b16      	ldr	r3, [pc, #88]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001db8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001dbc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001dbe:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dc4:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dca:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dd0:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ddc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dde:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001de4:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dea:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001df0:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001df6:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001df8:	220a      	movs	r2, #10
 8001dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001dfc:	4804      	ldr	r0, [pc, #16]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001dfe:	f006 f991 	bl	8008124 <HAL_SPI_Init>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001e08:	f000 fcb6 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20004f4c 	.word	0x20004f4c
 8001e14:	40003800 	.word	0x40003800

08001e18 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001e1c:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e1e:	4a18      	ldr	r2, [pc, #96]	; (8001e80 <MX_SPI4_Init+0x68>)
 8001e20:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001e22:	4b16      	ldr	r3, [pc, #88]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e28:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001e2a:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e30:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e36:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001e42:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e48:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e4a:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e50:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e5c:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e64:	220a      	movs	r2, #10
 8001e66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001e68:	4804      	ldr	r0, [pc, #16]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e6a:	f006 f95b 	bl	8008124 <HAL_SPI_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001e74:	f000 fc80 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20005380 	.word	0x20005380
 8001e80:	40013400 	.word	0x40013400

08001e84 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001e88:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001e8a:	4a18      	ldr	r2, [pc, #96]	; (8001eec <MX_SPI5_Init+0x68>)
 8001e8c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001e8e:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001e90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e94:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001e96:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ea2:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eb4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ec2:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ec8:	4b07      	ldr	r3, [pc, #28]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001ece:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001ed0:	220a      	movs	r2, #10
 8001ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001ed4:	4804      	ldr	r0, [pc, #16]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001ed6:	f006 f925 	bl	8008124 <HAL_SPI_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001ee0:	f000 fc4a 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20004fac 	.word	0x20004fac
 8001eec:	40015000 	.word	0x40015000

08001ef0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	; 0x28
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef6:	f107 0320 	add.w	r3, r7, #32
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	605a      	str	r2, [r3, #4]
 8001f08:	609a      	str	r2, [r3, #8]
 8001f0a:	60da      	str	r2, [r3, #12]
 8001f0c:	611a      	str	r2, [r3, #16]
 8001f0e:	615a      	str	r2, [r3, #20]
 8001f10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f12:	4b22      	ldr	r3, [pc, #136]	; (8001f9c <MX_TIM2_Init+0xac>)
 8001f14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f18:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f1a:	4b20      	ldr	r3, [pc, #128]	; (8001f9c <MX_TIM2_Init+0xac>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f20:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <MX_TIM2_Init+0xac>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001f26:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <MX_TIM2_Init+0xac>)
 8001f28:	f04f 32ff 	mov.w	r2, #4294967295
 8001f2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f2e:	4b1b      	ldr	r3, [pc, #108]	; (8001f9c <MX_TIM2_Init+0xac>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f34:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <MX_TIM2_Init+0xac>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f3a:	4818      	ldr	r0, [pc, #96]	; (8001f9c <MX_TIM2_Init+0xac>)
 8001f3c:	f006 ff64 	bl	8008e08 <HAL_TIM_PWM_Init>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001f46:	f000 fc17 	bl	8002778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f52:	f107 0320 	add.w	r3, r7, #32
 8001f56:	4619      	mov	r1, r3
 8001f58:	4810      	ldr	r0, [pc, #64]	; (8001f9c <MX_TIM2_Init+0xac>)
 8001f5a:	f007 fbe7 	bl	800972c <HAL_TIMEx_MasterConfigSynchronization>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001f64:	f000 fc08 	bl	8002778 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f68:	2360      	movs	r3, #96	; 0x60
 8001f6a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	2208      	movs	r2, #8
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4807      	ldr	r0, [pc, #28]	; (8001f9c <MX_TIM2_Init+0xac>)
 8001f80:	f007 f89a 	bl	80090b8 <HAL_TIM_PWM_ConfigChannel>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001f8a:	f000 fbf5 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f8e:	4803      	ldr	r0, [pc, #12]	; (8001f9c <MX_TIM2_Init+0xac>)
 8001f90:	f000 fe48 	bl	8002c24 <HAL_TIM_MspPostInit>

}
 8001f94:	bf00      	nop
 8001f96:	3728      	adds	r7, #40	; 0x28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	2000550c 	.word	0x2000550c

08001fa0 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001fa4:	4b11      	ldr	r3, [pc, #68]	; (8001fec <MX_UART8_Init+0x4c>)
 8001fa6:	4a12      	ldr	r2, [pc, #72]	; (8001ff0 <MX_UART8_Init+0x50>)
 8001fa8:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001faa:	4b10      	ldr	r3, [pc, #64]	; (8001fec <MX_UART8_Init+0x4c>)
 8001fac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fb0:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001fb2:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <MX_UART8_Init+0x4c>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001fb8:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <MX_UART8_Init+0x4c>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001fbe:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <MX_UART8_Init+0x4c>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001fc4:	4b09      	ldr	r3, [pc, #36]	; (8001fec <MX_UART8_Init+0x4c>)
 8001fc6:	220c      	movs	r2, #12
 8001fc8:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fca:	4b08      	ldr	r3, [pc, #32]	; (8001fec <MX_UART8_Init+0x4c>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd0:	4b06      	ldr	r3, [pc, #24]	; (8001fec <MX_UART8_Init+0x4c>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001fd6:	4805      	ldr	r0, [pc, #20]	; (8001fec <MX_UART8_Init+0x4c>)
 8001fd8:	f007 fc38 	bl	800984c <HAL_UART_Init>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8001fe2:	f000 fbc9 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20005478 	.word	0x20005478
 8001ff0:	40007c00 	.word	0x40007c00

08001ff4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ff8:	4b11      	ldr	r3, [pc, #68]	; (8002040 <MX_USART3_UART_Init+0x4c>)
 8001ffa:	4a12      	ldr	r2, [pc, #72]	; (8002044 <MX_USART3_UART_Init+0x50>)
 8001ffc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001ffe:	4b10      	ldr	r3, [pc, #64]	; (8002040 <MX_USART3_UART_Init+0x4c>)
 8002000:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002004:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002006:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <MX_USART3_UART_Init+0x4c>)
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800200c:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <MX_USART3_UART_Init+0x4c>)
 800200e:	2200      	movs	r2, #0
 8002010:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002012:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <MX_USART3_UART_Init+0x4c>)
 8002014:	2200      	movs	r2, #0
 8002016:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002018:	4b09      	ldr	r3, [pc, #36]	; (8002040 <MX_USART3_UART_Init+0x4c>)
 800201a:	220c      	movs	r2, #12
 800201c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800201e:	4b08      	ldr	r3, [pc, #32]	; (8002040 <MX_USART3_UART_Init+0x4c>)
 8002020:	2200      	movs	r2, #0
 8002022:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002024:	4b06      	ldr	r3, [pc, #24]	; (8002040 <MX_USART3_UART_Init+0x4c>)
 8002026:	2200      	movs	r2, #0
 8002028:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800202a:	4805      	ldr	r0, [pc, #20]	; (8002040 <MX_USART3_UART_Init+0x4c>)
 800202c:	f007 fc0e 	bl	800984c <HAL_UART_Init>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002036:	f000 fb9f 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20005008 	.word	0x20005008
 8002044:	40004800 	.word	0x40004800

08002048 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <MX_USART6_UART_Init+0x4c>)
 800204e:	4a12      	ldr	r2, [pc, #72]	; (8002098 <MX_USART6_UART_Init+0x50>)
 8002050:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002052:	4b10      	ldr	r3, [pc, #64]	; (8002094 <MX_USART6_UART_Init+0x4c>)
 8002054:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002058:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800205a:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <MX_USART6_UART_Init+0x4c>)
 800205c:	2200      	movs	r2, #0
 800205e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <MX_USART6_UART_Init+0x4c>)
 8002062:	2200      	movs	r2, #0
 8002064:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002066:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <MX_USART6_UART_Init+0x4c>)
 8002068:	2200      	movs	r2, #0
 800206a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800206c:	4b09      	ldr	r3, [pc, #36]	; (8002094 <MX_USART6_UART_Init+0x4c>)
 800206e:	220c      	movs	r2, #12
 8002070:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002072:	4b08      	ldr	r3, [pc, #32]	; (8002094 <MX_USART6_UART_Init+0x4c>)
 8002074:	2200      	movs	r2, #0
 8002076:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002078:	4b06      	ldr	r3, [pc, #24]	; (8002094 <MX_USART6_UART_Init+0x4c>)
 800207a:	2200      	movs	r2, #0
 800207c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800207e:	4805      	ldr	r0, [pc, #20]	; (8002094 <MX_USART6_UART_Init+0x4c>)
 8002080:	f007 fbe4 	bl	800984c <HAL_UART_Init>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800208a:	f000 fb75 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	200054bc 	.word	0x200054bc
 8002098:	40011400 	.word	0x40011400

0800209c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08e      	sub	sp, #56	; 0x38
 80020a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	605a      	str	r2, [r3, #4]
 80020ac:	609a      	str	r2, [r3, #8]
 80020ae:	60da      	str	r2, [r3, #12]
 80020b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	623b      	str	r3, [r7, #32]
 80020b6:	4bb5      	ldr	r3, [pc, #724]	; (800238c <MX_GPIO_Init+0x2f0>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4ab4      	ldr	r2, [pc, #720]	; (800238c <MX_GPIO_Init+0x2f0>)
 80020bc:	f043 0310 	orr.w	r3, r3, #16
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4bb2      	ldr	r3, [pc, #712]	; (800238c <MX_GPIO_Init+0x2f0>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0310 	and.w	r3, r3, #16
 80020ca:	623b      	str	r3, [r7, #32]
 80020cc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	61fb      	str	r3, [r7, #28]
 80020d2:	4bae      	ldr	r3, [pc, #696]	; (800238c <MX_GPIO_Init+0x2f0>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	4aad      	ldr	r2, [pc, #692]	; (800238c <MX_GPIO_Init+0x2f0>)
 80020d8:	f043 0304 	orr.w	r3, r3, #4
 80020dc:	6313      	str	r3, [r2, #48]	; 0x30
 80020de:	4bab      	ldr	r3, [pc, #684]	; (800238c <MX_GPIO_Init+0x2f0>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	61fb      	str	r3, [r7, #28]
 80020e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	61bb      	str	r3, [r7, #24]
 80020ee:	4ba7      	ldr	r3, [pc, #668]	; (800238c <MX_GPIO_Init+0x2f0>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4aa6      	ldr	r2, [pc, #664]	; (800238c <MX_GPIO_Init+0x2f0>)
 80020f4:	f043 0320 	orr.w	r3, r3, #32
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
 80020fa:	4ba4      	ldr	r3, [pc, #656]	; (800238c <MX_GPIO_Init+0x2f0>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f003 0320 	and.w	r3, r3, #32
 8002102:	61bb      	str	r3, [r7, #24]
 8002104:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	4ba0      	ldr	r3, [pc, #640]	; (800238c <MX_GPIO_Init+0x2f0>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	4a9f      	ldr	r2, [pc, #636]	; (800238c <MX_GPIO_Init+0x2f0>)
 8002110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002114:	6313      	str	r3, [r2, #48]	; 0x30
 8002116:	4b9d      	ldr	r3, [pc, #628]	; (800238c <MX_GPIO_Init+0x2f0>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	613b      	str	r3, [r7, #16]
 8002126:	4b99      	ldr	r3, [pc, #612]	; (800238c <MX_GPIO_Init+0x2f0>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	4a98      	ldr	r2, [pc, #608]	; (800238c <MX_GPIO_Init+0x2f0>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	6313      	str	r3, [r2, #48]	; 0x30
 8002132:	4b96      	ldr	r3, [pc, #600]	; (800238c <MX_GPIO_Init+0x2f0>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	4b92      	ldr	r3, [pc, #584]	; (800238c <MX_GPIO_Init+0x2f0>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	4a91      	ldr	r2, [pc, #580]	; (800238c <MX_GPIO_Init+0x2f0>)
 8002148:	f043 0302 	orr.w	r3, r3, #2
 800214c:	6313      	str	r3, [r2, #48]	; 0x30
 800214e:	4b8f      	ldr	r3, [pc, #572]	; (800238c <MX_GPIO_Init+0x2f0>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	4b8b      	ldr	r3, [pc, #556]	; (800238c <MX_GPIO_Init+0x2f0>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	4a8a      	ldr	r2, [pc, #552]	; (800238c <MX_GPIO_Init+0x2f0>)
 8002164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002168:	6313      	str	r3, [r2, #48]	; 0x30
 800216a:	4b88      	ldr	r3, [pc, #544]	; (800238c <MX_GPIO_Init+0x2f0>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	607b      	str	r3, [r7, #4]
 800217a:	4b84      	ldr	r3, [pc, #528]	; (800238c <MX_GPIO_Init+0x2f0>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	4a83      	ldr	r2, [pc, #524]	; (800238c <MX_GPIO_Init+0x2f0>)
 8002180:	f043 0308 	orr.w	r3, r3, #8
 8002184:	6313      	str	r3, [r2, #48]	; 0x30
 8002186:	4b81      	ldr	r3, [pc, #516]	; (800238c <MX_GPIO_Init+0x2f0>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	607b      	str	r3, [r7, #4]
 8002190:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 8002192:	2200      	movs	r2, #0
 8002194:	f248 4184 	movw	r1, #33924	; 0x8484
 8002198:	487d      	ldr	r0, [pc, #500]	; (8002390 <MX_GPIO_Init+0x2f4>)
 800219a:	f003 fafb 	bl	8005794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI5_SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 800219e:	2200      	movs	r2, #0
 80021a0:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 80021a4:	487b      	ldr	r0, [pc, #492]	; (8002394 <MX_GPIO_Init+0x2f8>)
 80021a6:	f003 faf5 	bl	8005794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 80021aa:	2200      	movs	r2, #0
 80021ac:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80021b0:	4879      	ldr	r0, [pc, #484]	; (8002398 <MX_GPIO_Init+0x2fc>)
 80021b2:	f003 faef 	bl	8005794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 80021b6:	2200      	movs	r2, #0
 80021b8:	2108      	movs	r1, #8
 80021ba:	4878      	ldr	r0, [pc, #480]	; (800239c <MX_GPIO_Init+0x300>)
 80021bc:	f003 faea 	bl	8005794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 80021c0:	2200      	movs	r2, #0
 80021c2:	f645 213e 	movw	r1, #23102	; 0x5a3e
 80021c6:	4876      	ldr	r0, [pc, #472]	; (80023a0 <MX_GPIO_Init+0x304>)
 80021c8:	f003 fae4 	bl	8005794 <HAL_GPIO_WritePin>
                          |SX_RF_SW_Pin|OUT_VR_PWR_Pin|OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin
                          |OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin, GPIO_PIN_RESET);
 80021cc:	2200      	movs	r2, #0
 80021ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021d2:	4874      	ldr	r0, [pc, #464]	; (80023a4 <MX_GPIO_Init+0x308>)
 80021d4:	f003 fade 	bl	8005794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 80021d8:	2200      	movs	r2, #0
 80021da:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 80021de:	4872      	ldr	r0, [pc, #456]	; (80023a8 <MX_GPIO_Init+0x30c>)
 80021e0:	f003 fad8 	bl	8005794 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_12V_Buck_Pin OUT_Prop_ActuatedVent_Gate_Pin SPI4_CS_Thermocouple_Pin Iridium_RST_Pin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 80021e4:	f248 4384 	movw	r3, #33924	; 0x8484
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ea:	2301      	movs	r3, #1
 80021ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f2:	2300      	movs	r3, #0
 80021f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021fa:	4619      	mov	r1, r3
 80021fc:	4864      	ldr	r0, [pc, #400]	; (8002390 <MX_GPIO_Init+0x2f4>)
 80021fe:	f003 f905 	bl	800540c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SD_CS_Pin OUT_PyroValve_Gate_2_Pin OUT_PyroValve_Gate_1_Pin */
  GPIO_InitStruct.Pin = SPI5_SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 8002202:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8002206:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002208:	2301      	movs	r3, #1
 800220a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002210:	2300      	movs	r3, #0
 8002212:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002218:	4619      	mov	r1, r3
 800221a:	485e      	ldr	r0, [pc, #376]	; (8002394 <MX_GPIO_Init+0x2f8>)
 800221c:	f003 f8f6 	bl	800540c <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Button_Pin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 8002220:	2301      	movs	r3, #1
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002224:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002228:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 800222e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002232:	4619      	mov	r1, r3
 8002234:	4858      	ldr	r0, [pc, #352]	; (8002398 <MX_GPIO_Init+0x2fc>)
 8002236:	f003 f8e9 	bl	800540c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_LED1_Pin OUT_LED2_Pin OUT_LED3_Pin SX_AMPLIFIER_Pin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 800223a:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800223e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002240:	2301      	movs	r3, #1
 8002242:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002248:	2300      	movs	r3, #0
 800224a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800224c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002250:	4619      	mov	r1, r3
 8002252:	4851      	ldr	r0, [pc, #324]	; (8002398 <MX_GPIO_Init+0x2fc>)
 8002254:	f003 f8da 	bl	800540c <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_LEDF_Pin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 8002258:	2308      	movs	r3, #8
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800225c:	2301      	movs	r3, #1
 800225e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002264:	2300      	movs	r3, #0
 8002266:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 8002268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800226c:	4619      	mov	r1, r3
 800226e:	484b      	ldr	r0, [pc, #300]	; (800239c <MX_GPIO_Init+0x300>)
 8002270:	f003 f8cc 	bl	800540c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_Prop_PyroTurboValve_LimitSwitch_Pin IN_SD_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 8002274:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8002278:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800227a:	2300      	movs	r3, #0
 800227c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	2300      	movs	r3, #0
 8002280:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002286:	4619      	mov	r1, r3
 8002288:	4843      	ldr	r0, [pc, #268]	; (8002398 <MX_GPIO_Init+0x2fc>)
 800228a:	f003 f8bf 	bl	800540c <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Prop_ActuatedVent_Feedback_Pin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 800228e:	2302      	movs	r3, #2
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002292:	2300      	movs	r3, #0
 8002294:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 800229a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800229e:	4619      	mov	r1, r3
 80022a0:	4840      	ldr	r0, [pc, #256]	; (80023a4 <MX_GPIO_Init+0x308>)
 80022a2:	f003 f8b3 	bl	800540c <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_PyroValve_Cont_2_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 80022a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ac:	2300      	movs	r3, #0
 80022ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 80022b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022b8:	4619      	mov	r1, r3
 80022ba:	4836      	ldr	r0, [pc, #216]	; (8002394 <MX_GPIO_Init+0x2f8>)
 80022bc:	f003 f8a6 	bl	800540c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_PyroValve_Cont_1_Pin IN_EJ_Main_Cont_Pin IN_EJ_Drogue_Cont_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|IN_EJ_Main_Cont_Pin|IN_EJ_Drogue_Cont_Pin;
 80022c0:	f242 4301 	movw	r3, #9217	; 0x2401
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c6:	2300      	movs	r3, #0
 80022c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d2:	4619      	mov	r1, r3
 80022d4:	4832      	ldr	r0, [pc, #200]	; (80023a0 <MX_GPIO_Init+0x304>)
 80022d6:	f003 f899 	bl	800540c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_PyroValve_Arming_Pin SX_RST_Pin SX_BUSY_Pin SX_DIO_Pin
                           SX_RF_SW_Pin OUT_VR_PWR_Pin OUT_EJ_Main_Gate_Pin OUT_EJ_Drogue_Gate_Pin
                           OUT_EJ_Arming_Pin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 80022da:	f645 233e 	movw	r3, #23102	; 0x5a3e
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
                          |SX_RF_SW_Pin|OUT_VR_PWR_Pin|OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin
                          |OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e0:	2301      	movs	r3, #1
 80022e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e8:	2300      	movs	r3, #0
 80022ea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f0:	4619      	mov	r1, r3
 80022f2:	482b      	ldr	r0, [pc, #172]	; (80023a0 <MX_GPIO_Init+0x304>)
 80022f4:	f003 f88a 	bl	800540c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAYLOAD_I2C_EN_Pin IN_XTend_Continuity_Pin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 80022f8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022fe:	2300      	movs	r3, #0
 8002300:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800230a:	4619      	mov	r1, r3
 800230c:	4820      	ldr	r0, [pc, #128]	; (8002390 <MX_GPIO_Init+0x2f4>)
 800230e:	f003 f87d 	bl	800540c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SX_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin;
 8002312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002318:	2301      	movs	r3, #1
 800231a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002320:	2300      	movs	r3, #0
 8002322:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_SX_CS_GPIO_Port, &GPIO_InitStruct);
 8002324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002328:	4619      	mov	r1, r3
 800232a:	481e      	ldr	r0, [pc, #120]	; (80023a4 <MX_GPIO_Init+0x308>)
 800232c:	f003 f86e 	bl	800540c <HAL_GPIO_Init>

  /*Configure GPIO pins : XTend_CTS_Pin XTend_RTS_Pin XTend_SLEEP_Pin XTend_RX_LED_Pin
                           XTend_TX_PWR_Pin OUT_FLASH_IO3_Pin OUT_FLASH_WP_Pin OUT_FLASH_CS_Pin
                           OUT_VR_REC_Pin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8002330:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002336:	2301      	movs	r3, #1
 8002338:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233e:	2300      	movs	r3, #0
 8002340:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002346:	4619      	mov	r1, r3
 8002348:	4817      	ldr	r0, [pc, #92]	; (80023a8 <MX_GPIO_Init+0x30c>)
 800234a:	f003 f85f 	bl	800540c <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BANDPASS_FILTER_Pin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 800234e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002354:	2300      	movs	r3, #0
 8002356:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 800235c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002360:	4619      	mov	r1, r3
 8002362:	4811      	ldr	r0, [pc, #68]	; (80023a8 <MX_GPIO_Init+0x30c>)
 8002364:	f003 f852 	bl	800540c <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_LPS22HH_DRDY_Pin EXTI_ISM330DCL_INT2_Pin EXTI_LSM6DSR_INT1_Pin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 8002368:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800236e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002372:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002374:	2300      	movs	r3, #0
 8002376:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002378:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800237c:	4619      	mov	r1, r3
 800237e:	4808      	ldr	r0, [pc, #32]	; (80023a0 <MX_GPIO_Init+0x304>)
 8002380:	f003 f844 	bl	800540c <HAL_GPIO_Init>

}
 8002384:	bf00      	nop
 8002386:	3738      	adds	r7, #56	; 0x38
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40023800 	.word	0x40023800
 8002390:	40021000 	.word	0x40021000
 8002394:	40021400 	.word	0x40021400
 8002398:	40020800 	.word	0x40020800
 800239c:	40020000 	.word	0x40020000
 80023a0:	40021800 	.word	0x40021800
 80023a4:	40020400 	.word	0x40020400
 80023a8:	40020c00 	.word	0x40020c00

080023ac <StartMemory0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMemory0 */
void StartMemory0(void *argument)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	osThreadExit();
 80023b4:	f008 fc27 	bl	800ac06 <osThreadExit>

080023b8 <StartEjection1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEjection1 */
void StartEjection1(void *argument)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b0c2      	sub	sp, #264	; 0x108
 80023bc:	af00      	add	r7, sp, #0
 80023be:	1d3b      	adds	r3, r7, #4
 80023c0:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartEjection1 */

	osThreadExit();
 80023c2:	f008 fc20 	bl	800ac06 <osThreadExit>

080023c6 <StartTelemetry2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry2 */
void StartTelemetry2(void *argument)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b082      	sub	sp, #8
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTelemetry2 */

	osThreadExit();
 80023ce:	f008 fc1a 	bl	800ac06 <osThreadExit>
	...

080023d4 <StartSensors3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensors3 */
void StartSensors3(void *argument)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensors3 */

	//osThreadExit();

	//Add thread id to the list
	threadID[3]=osThreadGetId();
 80023dc:	f008 fc08 	bl	800abf0 <osThreadGetId>
 80023e0:	4603      	mov	r3, r0
 80023e2:	4a1a      	ldr	r2, [pc, #104]	; (800244c <StartSensors3+0x78>)
 80023e4:	60d3      	str	r3, [r2, #12]

  for(;;)
  {

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 80023e6:	2201      	movs	r2, #1
 80023e8:	2102      	movs	r1, #2
 80023ea:	4819      	ldr	r0, [pc, #100]	; (8002450 <StartSensors3+0x7c>)
 80023ec:	f003 f9d2 	bl	8005794 <HAL_GPIO_WritePin>



	  //GPS
	  GPS_Poll(&latitude, &longitude, &time);
 80023f0:	4a18      	ldr	r2, [pc, #96]	; (8002454 <StartSensors3+0x80>)
 80023f2:	4919      	ldr	r1, [pc, #100]	; (8002458 <StartSensors3+0x84>)
 80023f4:	4819      	ldr	r0, [pc, #100]	; (800245c <StartSensors3+0x88>)
 80023f6:	f000 fe8f 	bl	8003118 <GPS_Poll>

  	  //LSM6DSR
  	  MRT_LSM6DSR_getAcceleration(lsm_ctx,acceleration_mg);
 80023fa:	4a19      	ldr	r2, [pc, #100]	; (8002460 <StartSensors3+0x8c>)
 80023fc:	4b19      	ldr	r3, [pc, #100]	; (8002464 <StartSensors3+0x90>)
 80023fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8002400:	f7fe ff06 	bl	8001210 <MRT_LSM6DSR_getAcceleration>
  	  /*
  	   * TODO NEEDS FILTERING BUT WORKS (maybe acceleration needs filtering too)
  	   */
  	  MRT_LSM6DSR_getAngularRate(lsm_ctx,angular_rate_mdps);
 8002404:	4a16      	ldr	r2, [pc, #88]	; (8002460 <StartSensors3+0x8c>)
 8002406:	4b18      	ldr	r3, [pc, #96]	; (8002468 <StartSensors3+0x94>)
 8002408:	ca07      	ldmia	r2, {r0, r1, r2}
 800240a:	f7fe ff77 	bl	80012fc <MRT_LSM6DSR_getAngularRate>
	  MRT_LSM6DSR_getTemperature(lsm_ctx,&lsm_temperature_degC);
 800240e:	4a14      	ldr	r2, [pc, #80]	; (8002460 <StartSensors3+0x8c>)
 8002410:	4b16      	ldr	r3, [pc, #88]	; (800246c <StartSensors3+0x98>)
 8002412:	ca07      	ldmia	r2, {r0, r1, r2}
 8002414:	f7fe ff42 	bl	800129c <MRT_LSM6DSR_getTemperature>


	  //LPS22HH
  	  MRT_LPS22HH_getPressure(lps_ctx,&pressure_hPa);
 8002418:	4a15      	ldr	r2, [pc, #84]	; (8002470 <StartSensors3+0x9c>)
 800241a:	4b16      	ldr	r3, [pc, #88]	; (8002474 <StartSensors3+0xa0>)
 800241c:	ca07      	ldmia	r2, {r0, r1, r2}
 800241e:	f7ff f86b 	bl	80014f8 <MRT_LPS22HH_getPressure>
	  MRT_LPS22HH_getTemperature(lps_ctx,&lps_temperature_degC);
 8002422:	4a13      	ldr	r2, [pc, #76]	; (8002470 <StartSensors3+0x9c>)
 8002424:	4b14      	ldr	r3, [pc, #80]	; (8002478 <StartSensors3+0xa4>)
 8002426:	ca07      	ldmia	r2, {r0, r1, r2}
 8002428:	f7ff f896 	bl	8001558 <MRT_LPS22HH_getTemperature>

	  //Pressure tank (just use an analog sensor if you don't have it)


	  //Thermocouple
	  Max31855_Read_Temp();
 800242c:	f002 fb6e 	bl	8004b0c <Max31855_Read_Temp>


	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 8002430:	2200      	movs	r2, #0
 8002432:	2102      	movs	r1, #2
 8002434:	4806      	ldr	r0, [pc, #24]	; (8002450 <StartSensors3+0x7c>)
 8002436:	f003 f9ad 	bl	8005794 <HAL_GPIO_WritePin>

	  HAL_IWDG_Refresh(&hiwdg);
 800243a:	4810      	ldr	r0, [pc, #64]	; (800247c <StartSensors3+0xa8>)
 800243c:	f004 fba4 	bl	8006b88 <HAL_IWDG_Refresh>

	  osDelay(1000);
 8002440:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002444:	f008 fbe5 	bl	800ac12 <osDelay>
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 8002448:	e7cd      	b.n	80023e6 <StartSensors3+0x12>
 800244a:	bf00      	nop
 800244c:	2000504c 	.word	0x2000504c
 8002450:	40020800 	.word	0x40020800
 8002454:	20005468 	.word	0x20005468
 8002458:	200053fc 	.word	0x200053fc
 800245c:	20005504 	.word	0x20005504
 8002460:	20005564 	.word	0x20005564
 8002464:	20000244 	.word	0x20000244
 8002468:	20000250 	.word	0x20000250
 800246c:	2000025c 	.word	0x2000025c
 8002470:	20005558 	.word	0x20005558
 8002474:	2000023c 	.word	0x2000023c
 8002478:	20000240 	.word	0x20000240
 800247c:	200050b4 	.word	0x200050b4

08002480 <StartPropulsion4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPropulsion4 */
void StartPropulsion4(void *argument)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPropulsion4 */

	osThreadExit();
 8002488:	f008 fbbd 	bl	800ac06 <osThreadExit>

0800248c <StartPrinting>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPrinting */
void StartPrinting(void *argument)
{
 800248c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002490:	b0c6      	sub	sp, #280	; 0x118
 8002492:	af04      	add	r7, sp, #16
 8002494:	1d3b      	adds	r3, r7, #4
 8002496:	6018      	str	r0, [r3, #0]

	//osThreadExit();

	char buffer[TX_BUF_DIM];

	osDelay(2000);
 8002498:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800249c:	f008 fbb9 	bl	800ac12 <osDelay>

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 80024a0:	2201      	movs	r2, #1
 80024a2:	2108      	movs	r1, #8
 80024a4:	4898      	ldr	r0, [pc, #608]	; (8002708 <StartPrinting+0x27c>)
 80024a6:	f003 f975 	bl	8005794 <HAL_GPIO_WritePin>

	  //GPS
  	  /*
  	   * TODO HOW DO WE RESET THE TIME
  	   */
	  memset(gps_data, 0, GPS_DATA_BUF_DIM);
 80024aa:	2264      	movs	r2, #100	; 0x64
 80024ac:	2100      	movs	r1, #0
 80024ae:	4897      	ldr	r0, [pc, #604]	; (800270c <StartPrinting+0x280>)
 80024b0:	f00b fb54 	bl	800db5c <memset>
	  sprintf(gps_data,"Alt: %.2f   Long: %.2f   Time: %.0f\r\n",latitude, longitude, time);
 80024b4:	4b96      	ldr	r3, [pc, #600]	; (8002710 <StartPrinting+0x284>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe f855 	bl	8000568 <__aeabi_f2d>
 80024be:	4680      	mov	r8, r0
 80024c0:	4689      	mov	r9, r1
 80024c2:	4b94      	ldr	r3, [pc, #592]	; (8002714 <StartPrinting+0x288>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fe f84e 	bl	8000568 <__aeabi_f2d>
 80024cc:	4604      	mov	r4, r0
 80024ce:	460d      	mov	r5, r1
 80024d0:	4b91      	ldr	r3, [pc, #580]	; (8002718 <StartPrinting+0x28c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fe f847 	bl	8000568 <__aeabi_f2d>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80024e2:	e9cd 4500 	strd	r4, r5, [sp]
 80024e6:	4642      	mov	r2, r8
 80024e8:	464b      	mov	r3, r9
 80024ea:	498c      	ldr	r1, [pc, #560]	; (800271c <StartPrinting+0x290>)
 80024ec:	4887      	ldr	r0, [pc, #540]	; (800270c <StartPrinting+0x280>)
 80024ee:	f00c fb25 	bl	800eb3c <siprintf>
	  HAL_UART_Transmit(&DEBUG_USART,gps_data,strlen(gps_data),HAL_MAX_DELAY);
 80024f2:	4886      	ldr	r0, [pc, #536]	; (800270c <StartPrinting+0x280>)
 80024f4:	f7fd fe7c 	bl	80001f0 <strlen>
 80024f8:	4603      	mov	r3, r0
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002500:	4982      	ldr	r1, [pc, #520]	; (800270c <StartPrinting+0x280>)
 8002502:	4887      	ldr	r0, [pc, #540]	; (8002720 <StartPrinting+0x294>)
 8002504:	f007 f9ef 	bl	80098e6 <HAL_UART_Transmit>

  	  //LSM6DSR
  	  memset(buffer, 0, TX_BUF_DIM);
 8002508:	f107 0308 	add.w	r3, r7, #8
 800250c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002510:	2100      	movs	r1, #0
 8002512:	4618      	mov	r0, r3
 8002514:	f00b fb22 	bl	800db5c <memset>
  	  sprintf(buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8002518:	4b82      	ldr	r3, [pc, #520]	; (8002724 <StartPrinting+0x298>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f7fe f823 	bl	8000568 <__aeabi_f2d>
 8002522:	4680      	mov	r8, r0
 8002524:	4689      	mov	r9, r1
 8002526:	4b7f      	ldr	r3, [pc, #508]	; (8002724 <StartPrinting+0x298>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	4618      	mov	r0, r3
 800252c:	f7fe f81c 	bl	8000568 <__aeabi_f2d>
 8002530:	4604      	mov	r4, r0
 8002532:	460d      	mov	r5, r1
 8002534:	4b7b      	ldr	r3, [pc, #492]	; (8002724 <StartPrinting+0x298>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	4618      	mov	r0, r3
 800253a:	f7fe f815 	bl	8000568 <__aeabi_f2d>
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	f107 0008 	add.w	r0, r7, #8
 8002546:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800254a:	e9cd 4500 	strd	r4, r5, [sp]
 800254e:	4642      	mov	r2, r8
 8002550:	464b      	mov	r3, r9
 8002552:	4975      	ldr	r1, [pc, #468]	; (8002728 <StartPrinting+0x29c>)
 8002554:	f00c faf2 	bl	800eb3c <siprintf>
  	  HAL_UART_Transmit(&DEBUG_USART, buffer, strlen(buffer), HAL_MAX_DELAY);
 8002558:	f107 0308 	add.w	r3, r7, #8
 800255c:	4618      	mov	r0, r3
 800255e:	f7fd fe47 	bl	80001f0 <strlen>
 8002562:	4603      	mov	r3, r0
 8002564:	b29a      	uxth	r2, r3
 8002566:	f107 0108 	add.w	r1, r7, #8
 800256a:	f04f 33ff 	mov.w	r3, #4294967295
 800256e:	486c      	ldr	r0, [pc, #432]	; (8002720 <StartPrinting+0x294>)
 8002570:	f007 f9b9 	bl	80098e6 <HAL_UART_Transmit>

  	  /*
  	   * TODO NEEDS FILTERING BUT WORKS (maybe acceleration needs filtering too)
  	   */
  	  memset(buffer, 0, TX_BUF_DIM);
 8002574:	f107 0308 	add.w	r3, r7, #8
 8002578:	f44f 7280 	mov.w	r2, #256	; 0x100
 800257c:	2100      	movs	r1, #0
 800257e:	4618      	mov	r0, r3
 8002580:	f00b faec 	bl	800db5c <memset>
  	  sprintf(buffer,"Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 8002584:	4b69      	ldr	r3, [pc, #420]	; (800272c <StartPrinting+0x2a0>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f7fd ffed 	bl	8000568 <__aeabi_f2d>
 800258e:	4680      	mov	r8, r0
 8002590:	4689      	mov	r9, r1
 8002592:	4b66      	ldr	r3, [pc, #408]	; (800272c <StartPrinting+0x2a0>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	4618      	mov	r0, r3
 8002598:	f7fd ffe6 	bl	8000568 <__aeabi_f2d>
 800259c:	4604      	mov	r4, r0
 800259e:	460d      	mov	r5, r1
 80025a0:	4b62      	ldr	r3, [pc, #392]	; (800272c <StartPrinting+0x2a0>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fd ffdf 	bl	8000568 <__aeabi_f2d>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	f107 0008 	add.w	r0, r7, #8
 80025b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80025b6:	e9cd 4500 	strd	r4, r5, [sp]
 80025ba:	4642      	mov	r2, r8
 80025bc:	464b      	mov	r3, r9
 80025be:	495c      	ldr	r1, [pc, #368]	; (8002730 <StartPrinting+0x2a4>)
 80025c0:	f00c fabc 	bl	800eb3c <siprintf>
  	  HAL_UART_Transmit(&DEBUG_USART, buffer, strlen(buffer), HAL_MAX_DELAY);
 80025c4:	f107 0308 	add.w	r3, r7, #8
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fd fe11 	bl	80001f0 <strlen>
 80025ce:	4603      	mov	r3, r0
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	f107 0108 	add.w	r1, r7, #8
 80025d6:	f04f 33ff 	mov.w	r3, #4294967295
 80025da:	4851      	ldr	r0, [pc, #324]	; (8002720 <StartPrinting+0x294>)
 80025dc:	f007 f983 	bl	80098e6 <HAL_UART_Transmit>

	  memset(buffer, 0, TX_BUF_DIM);
 80025e0:	f107 0308 	add.w	r3, r7, #8
 80025e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025e8:	2100      	movs	r1, #0
 80025ea:	4618      	mov	r0, r3
 80025ec:	f00b fab6 	bl	800db5c <memset>
	  sprintf(buffer, "Temperature [degC]:%6.2f\r\n", lsm_temperature_degC);
 80025f0:	4b50      	ldr	r3, [pc, #320]	; (8002734 <StartPrinting+0x2a8>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fd ffb7 	bl	8000568 <__aeabi_f2d>
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	f107 0008 	add.w	r0, r7, #8
 8002602:	494d      	ldr	r1, [pc, #308]	; (8002738 <StartPrinting+0x2ac>)
 8002604:	f00c fa9a 	bl	800eb3c <siprintf>
	  HAL_UART_Transmit(&DEBUG_USART, buffer, strlen(buffer), HAL_MAX_DELAY);
 8002608:	f107 0308 	add.w	r3, r7, #8
 800260c:	4618      	mov	r0, r3
 800260e:	f7fd fdef 	bl	80001f0 <strlen>
 8002612:	4603      	mov	r3, r0
 8002614:	b29a      	uxth	r2, r3
 8002616:	f107 0108 	add.w	r1, r7, #8
 800261a:	f04f 33ff 	mov.w	r3, #4294967295
 800261e:	4840      	ldr	r0, [pc, #256]	; (8002720 <StartPrinting+0x294>)
 8002620:	f007 f961 	bl	80098e6 <HAL_UART_Transmit>


	  //LPS22HH
  	  memset(buffer, 0, TX_BUF_DIM);
 8002624:	f107 0308 	add.w	r3, r7, #8
 8002628:	f44f 7280 	mov.w	r2, #256	; 0x100
 800262c:	2100      	movs	r1, #0
 800262e:	4618      	mov	r0, r3
 8002630:	f00b fa94 	bl	800db5c <memset>
  	  sprintf(buffer,"Pressure [hPa]:%6.2f\r\n",pressure_hPa);
 8002634:	4b41      	ldr	r3, [pc, #260]	; (800273c <StartPrinting+0x2b0>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f7fd ff95 	bl	8000568 <__aeabi_f2d>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	f107 0008 	add.w	r0, r7, #8
 8002646:	493e      	ldr	r1, [pc, #248]	; (8002740 <StartPrinting+0x2b4>)
 8002648:	f00c fa78 	bl	800eb3c <siprintf>
  	  HAL_UART_Transmit(&DEBUG_USART, buffer, strlen(buffer), HAL_MAX_DELAY);
 800264c:	f107 0308 	add.w	r3, r7, #8
 8002650:	4618      	mov	r0, r3
 8002652:	f7fd fdcd 	bl	80001f0 <strlen>
 8002656:	4603      	mov	r3, r0
 8002658:	b29a      	uxth	r2, r3
 800265a:	f107 0108 	add.w	r1, r7, #8
 800265e:	f04f 33ff 	mov.w	r3, #4294967295
 8002662:	482f      	ldr	r0, [pc, #188]	; (8002720 <StartPrinting+0x294>)
 8002664:	f007 f93f 	bl	80098e6 <HAL_UART_Transmit>

	  memset(buffer, 0, TX_BUF_DIM);
 8002668:	f107 0308 	add.w	r3, r7, #8
 800266c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002670:	2100      	movs	r1, #0
 8002672:	4618      	mov	r0, r3
 8002674:	f00b fa72 	bl	800db5c <memset>
	  sprintf(buffer, "Temperature [degC]:%6.2f\r\n", lps_temperature_degC);
 8002678:	4b32      	ldr	r3, [pc, #200]	; (8002744 <StartPrinting+0x2b8>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f7fd ff73 	bl	8000568 <__aeabi_f2d>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	f107 0008 	add.w	r0, r7, #8
 800268a:	492b      	ldr	r1, [pc, #172]	; (8002738 <StartPrinting+0x2ac>)
 800268c:	f00c fa56 	bl	800eb3c <siprintf>
	  HAL_UART_Transmit(&DEBUG_USART, buffer, strlen(buffer), HAL_MAX_DELAY);
 8002690:	f107 0308 	add.w	r3, r7, #8
 8002694:	4618      	mov	r0, r3
 8002696:	f7fd fdab 	bl	80001f0 <strlen>
 800269a:	4603      	mov	r3, r0
 800269c:	b29a      	uxth	r2, r3
 800269e:	f107 0108 	add.w	r1, r7, #8
 80026a2:	f04f 33ff 	mov.w	r3, #4294967295
 80026a6:	481e      	ldr	r0, [pc, #120]	; (8002720 <StartPrinting+0x294>)
 80026a8:	f007 f91d 	bl	80098e6 <HAL_UART_Transmit>


	  //Thermocouple
	  memset(buffer, 0, TX_BUF_DIM);
 80026ac:	f107 0308 	add.w	r3, r7, #8
 80026b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026b4:	2100      	movs	r1, #0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f00b fa50 	bl	800db5c <memset>
	  sprintf(buffer, "Thermocouple temperature [degC]: %6.2f\r\n", THERMO_TEMP);
 80026bc:	4b22      	ldr	r3, [pc, #136]	; (8002748 <StartPrinting+0x2bc>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fd ff51 	bl	8000568 <__aeabi_f2d>
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	f107 0008 	add.w	r0, r7, #8
 80026ce:	491f      	ldr	r1, [pc, #124]	; (800274c <StartPrinting+0x2c0>)
 80026d0:	f00c fa34 	bl	800eb3c <siprintf>
	  HAL_UART_Transmit(&DEBUG_USART, buffer, strlen(buffer), HAL_MAX_DELAY);
 80026d4:	f107 0308 	add.w	r3, r7, #8
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fd fd89 	bl	80001f0 <strlen>
 80026de:	4603      	mov	r3, r0
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	f107 0108 	add.w	r1, r7, #8
 80026e6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ea:	480d      	ldr	r0, [pc, #52]	; (8002720 <StartPrinting+0x294>)
 80026ec:	f007 f8fb 	bl	80098e6 <HAL_UART_Transmit>

	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 80026f0:	2200      	movs	r2, #0
 80026f2:	2108      	movs	r1, #8
 80026f4:	4804      	ldr	r0, [pc, #16]	; (8002708 <StartPrinting+0x27c>)
 80026f6:	f003 f84d 	bl	8005794 <HAL_GPIO_WritePin>

	  HAL_IWDG_Refresh(&hiwdg);
 80026fa:	4815      	ldr	r0, [pc, #84]	; (8002750 <StartPrinting+0x2c4>)
 80026fc:	f004 fa44 	bl	8006b88 <HAL_IWDG_Refresh>

      osDelay(200);
 8002700:	20c8      	movs	r0, #200	; 0xc8
 8002702:	f008 fa86 	bl	800ac12 <osDelay>
  {
 8002706:	e6cb      	b.n	80024a0 <StartPrinting+0x14>
 8002708:	40020800 	.word	0x40020800
 800270c:	20005404 	.word	0x20005404
 8002710:	20005504 	.word	0x20005504
 8002714:	200053fc 	.word	0x200053fc
 8002718:	20005468 	.word	0x20005468
 800271c:	08012bfc 	.word	0x08012bfc
 8002720:	20005478 	.word	0x20005478
 8002724:	20000244 	.word	0x20000244
 8002728:	08012c24 	.word	0x08012c24
 800272c:	20000250 	.word	0x20000250
 8002730:	08012c4c 	.word	0x08012c4c
 8002734:	2000025c 	.word	0x2000025c
 8002738:	08012c74 	.word	0x08012c74
 800273c:	2000023c 	.word	0x2000023c
 8002740:	08012c90 	.word	0x08012c90
 8002744:	20000240 	.word	0x20000240
 8002748:	20005508 	.word	0x20005508
 800274c:	08012ca8 	.word	0x08012ca8
 8002750:	200050b4 	.word	0x200050b4

08002754 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a04      	ldr	r2, [pc, #16]	; (8002774 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d101      	bne.n	800276a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002766:	f002 fa87 	bl	8004c78 <HAL_IncTick>
	  HAL_Delay(200);
  }
  */

  /* USER CODE END Callback 1 */
}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40001000 	.word	0x40001000

08002778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800277c:	bf00      	nop
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
	...

08002788 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	607b      	str	r3, [r7, #4]
 8002792:	4b12      	ldr	r3, [pc, #72]	; (80027dc <HAL_MspInit+0x54>)
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	4a11      	ldr	r2, [pc, #68]	; (80027dc <HAL_MspInit+0x54>)
 8002798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800279c:	6453      	str	r3, [r2, #68]	; 0x44
 800279e:	4b0f      	ldr	r3, [pc, #60]	; (80027dc <HAL_MspInit+0x54>)
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a6:	607b      	str	r3, [r7, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	603b      	str	r3, [r7, #0]
 80027ae:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <HAL_MspInit+0x54>)
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	4a0a      	ldr	r2, [pc, #40]	; (80027dc <HAL_MspInit+0x54>)
 80027b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b8:	6413      	str	r3, [r2, #64]	; 0x40
 80027ba:	4b08      	ldr	r3, [pc, #32]	; (80027dc <HAL_MspInit+0x54>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c2:	603b      	str	r3, [r7, #0]
 80027c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80027c6:	2200      	movs	r2, #0
 80027c8:	210f      	movs	r1, #15
 80027ca:	f06f 0001 	mvn.w	r0, #1
 80027ce:	f002 fde5 	bl	800539c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40023800 	.word	0x40023800

080027e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08a      	sub	sp, #40	; 0x28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e8:	f107 0314 	add.w	r3, r7, #20
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	609a      	str	r2, [r3, #8]
 80027f4:	60da      	str	r2, [r3, #12]
 80027f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a17      	ldr	r2, [pc, #92]	; (800285c <HAL_ADC_MspInit+0x7c>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d127      	bne.n	8002852 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]
 8002806:	4b16      	ldr	r3, [pc, #88]	; (8002860 <HAL_ADC_MspInit+0x80>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	4a15      	ldr	r2, [pc, #84]	; (8002860 <HAL_ADC_MspInit+0x80>)
 800280c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002810:	6453      	str	r3, [r2, #68]	; 0x44
 8002812:	4b13      	ldr	r3, [pc, #76]	; (8002860 <HAL_ADC_MspInit+0x80>)
 8002814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281a:	613b      	str	r3, [r7, #16]
 800281c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <HAL_ADC_MspInit+0x80>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	4a0e      	ldr	r2, [pc, #56]	; (8002860 <HAL_ADC_MspInit+0x80>)
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	6313      	str	r3, [r2, #48]	; 0x30
 800282e:	4b0c      	ldr	r3, [pc, #48]	; (8002860 <HAL_ADC_MspInit+0x80>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 800283a:	2340      	movs	r3, #64	; 0x40
 800283c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800283e:	2303      	movs	r3, #3
 8002840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 8002846:	f107 0314 	add.w	r3, r7, #20
 800284a:	4619      	mov	r1, r3
 800284c:	4805      	ldr	r0, [pc, #20]	; (8002864 <HAL_ADC_MspInit+0x84>)
 800284e:	f002 fddd 	bl	800540c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002852:	bf00      	nop
 8002854:	3728      	adds	r7, #40	; 0x28
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40012000 	.word	0x40012000
 8002860:	40023800 	.word	0x40023800
 8002864:	40020000 	.word	0x40020000

08002868 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08e      	sub	sp, #56	; 0x38
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a5c      	ldr	r2, [pc, #368]	; (80029f8 <HAL_I2C_MspInit+0x190>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d12d      	bne.n	80028e6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	623b      	str	r3, [r7, #32]
 800288e:	4b5b      	ldr	r3, [pc, #364]	; (80029fc <HAL_I2C_MspInit+0x194>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	4a5a      	ldr	r2, [pc, #360]	; (80029fc <HAL_I2C_MspInit+0x194>)
 8002894:	f043 0302 	orr.w	r3, r3, #2
 8002898:	6313      	str	r3, [r2, #48]	; 0x30
 800289a:	4b58      	ldr	r3, [pc, #352]	; (80029fc <HAL_I2C_MspInit+0x194>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	623b      	str	r3, [r7, #32]
 80028a4:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80028a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028ac:	2312      	movs	r3, #18
 80028ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028b0:	2301      	movs	r3, #1
 80028b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b4:	2303      	movs	r3, #3
 80028b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028b8:	2304      	movs	r3, #4
 80028ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028c0:	4619      	mov	r1, r3
 80028c2:	484f      	ldr	r0, [pc, #316]	; (8002a00 <HAL_I2C_MspInit+0x198>)
 80028c4:	f002 fda2 	bl	800540c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028c8:	2300      	movs	r3, #0
 80028ca:	61fb      	str	r3, [r7, #28]
 80028cc:	4b4b      	ldr	r3, [pc, #300]	; (80029fc <HAL_I2C_MspInit+0x194>)
 80028ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d0:	4a4a      	ldr	r2, [pc, #296]	; (80029fc <HAL_I2C_MspInit+0x194>)
 80028d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028d6:	6413      	str	r3, [r2, #64]	; 0x40
 80028d8:	4b48      	ldr	r3, [pc, #288]	; (80029fc <HAL_I2C_MspInit+0x194>)
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028e0:	61fb      	str	r3, [r7, #28]
 80028e2:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80028e4:	e083      	b.n	80029ee <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a46      	ldr	r2, [pc, #280]	; (8002a04 <HAL_I2C_MspInit+0x19c>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d12d      	bne.n	800294c <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f0:	2300      	movs	r3, #0
 80028f2:	61bb      	str	r3, [r7, #24]
 80028f4:	4b41      	ldr	r3, [pc, #260]	; (80029fc <HAL_I2C_MspInit+0x194>)
 80028f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f8:	4a40      	ldr	r2, [pc, #256]	; (80029fc <HAL_I2C_MspInit+0x194>)
 80028fa:	f043 0302 	orr.w	r3, r3, #2
 80028fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002900:	4b3e      	ldr	r3, [pc, #248]	; (80029fc <HAL_I2C_MspInit+0x194>)
 8002902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	61bb      	str	r3, [r7, #24]
 800290a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800290c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002910:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002912:	2312      	movs	r3, #18
 8002914:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002916:	2301      	movs	r3, #1
 8002918:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800291a:	2303      	movs	r3, #3
 800291c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800291e:	2304      	movs	r3, #4
 8002920:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002926:	4619      	mov	r1, r3
 8002928:	4835      	ldr	r0, [pc, #212]	; (8002a00 <HAL_I2C_MspInit+0x198>)
 800292a:	f002 fd6f 	bl	800540c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	4b32      	ldr	r3, [pc, #200]	; (80029fc <HAL_I2C_MspInit+0x194>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	4a31      	ldr	r2, [pc, #196]	; (80029fc <HAL_I2C_MspInit+0x194>)
 8002938:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800293c:	6413      	str	r3, [r2, #64]	; 0x40
 800293e:	4b2f      	ldr	r3, [pc, #188]	; (80029fc <HAL_I2C_MspInit+0x194>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	697b      	ldr	r3, [r7, #20]
}
 800294a:	e050      	b.n	80029ee <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a2d      	ldr	r2, [pc, #180]	; (8002a08 <HAL_I2C_MspInit+0x1a0>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d14b      	bne.n	80029ee <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	4b28      	ldr	r3, [pc, #160]	; (80029fc <HAL_I2C_MspInit+0x194>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	4a27      	ldr	r2, [pc, #156]	; (80029fc <HAL_I2C_MspInit+0x194>)
 8002960:	f043 0304 	orr.w	r3, r3, #4
 8002964:	6313      	str	r3, [r2, #48]	; 0x30
 8002966:	4b25      	ldr	r3, [pc, #148]	; (80029fc <HAL_I2C_MspInit+0x194>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	613b      	str	r3, [r7, #16]
 8002970:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	4b21      	ldr	r3, [pc, #132]	; (80029fc <HAL_I2C_MspInit+0x194>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	4a20      	ldr	r2, [pc, #128]	; (80029fc <HAL_I2C_MspInit+0x194>)
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	6313      	str	r3, [r2, #48]	; 0x30
 8002982:	4b1e      	ldr	r3, [pc, #120]	; (80029fc <HAL_I2C_MspInit+0x194>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800298e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002992:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002994:	2312      	movs	r3, #18
 8002996:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002998:	2301      	movs	r3, #1
 800299a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299c:	2303      	movs	r3, #3
 800299e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80029a0:	2304      	movs	r3, #4
 80029a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029a8:	4619      	mov	r1, r3
 80029aa:	4818      	ldr	r0, [pc, #96]	; (8002a0c <HAL_I2C_MspInit+0x1a4>)
 80029ac:	f002 fd2e 	bl	800540c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029b6:	2312      	movs	r3, #18
 80029b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029ba:	2301      	movs	r3, #1
 80029bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029be:	2303      	movs	r3, #3
 80029c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80029c2:	2304      	movs	r3, #4
 80029c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ca:	4619      	mov	r1, r3
 80029cc:	4810      	ldr	r0, [pc, #64]	; (8002a10 <HAL_I2C_MspInit+0x1a8>)
 80029ce:	f002 fd1d 	bl	800540c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	4b09      	ldr	r3, [pc, #36]	; (80029fc <HAL_I2C_MspInit+0x194>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	4a08      	ldr	r2, [pc, #32]	; (80029fc <HAL_I2C_MspInit+0x194>)
 80029dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029e0:	6413      	str	r3, [r2, #64]	; 0x40
 80029e2:	4b06      	ldr	r3, [pc, #24]	; (80029fc <HAL_I2C_MspInit+0x194>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029ea:	60bb      	str	r3, [r7, #8]
 80029ec:	68bb      	ldr	r3, [r7, #8]
}
 80029ee:	bf00      	nop
 80029f0:	3738      	adds	r7, #56	; 0x38
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40005400 	.word	0x40005400
 80029fc:	40023800 	.word	0x40023800
 8002a00:	40020400 	.word	0x40020400
 8002a04:	40005800 	.word	0x40005800
 8002a08:	40005c00 	.word	0x40005c00
 8002a0c:	40020800 	.word	0x40020800
 8002a10:	40020000 	.word	0x40020000

08002a14 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08e      	sub	sp, #56	; 0x38
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a1c:	f107 0308 	add.w	r3, r7, #8
 8002a20:	2230      	movs	r2, #48	; 0x30
 8002a22:	2100      	movs	r1, #0
 8002a24:	4618      	mov	r0, r3
 8002a26:	f00b f899 	bl	800db5c <memset>
  if(hrtc->Instance==RTC)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a10      	ldr	r2, [pc, #64]	; (8002a70 <HAL_RTC_MspInit+0x5c>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d119      	bne.n	8002a68 <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002a34:	2320      	movs	r3, #32
 8002a36:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002a38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a3c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a3e:	f107 0308 	add.w	r3, r7, #8
 8002a42:	4618      	mov	r0, r3
 8002a44:	f004 fd68 	bl	8007518 <HAL_RCCEx_PeriphCLKConfig>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002a4e:	f7ff fe93 	bl	8002778 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002a52:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <HAL_RTC_MspInit+0x60>)
 8002a54:	2201      	movs	r2, #1
 8002a56:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8002a58:	2200      	movs	r2, #0
 8002a5a:	2105      	movs	r1, #5
 8002a5c:	2029      	movs	r0, #41	; 0x29
 8002a5e:	f002 fc9d 	bl	800539c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002a62:	2029      	movs	r0, #41	; 0x29
 8002a64:	f002 fcb6 	bl	80053d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002a68:	bf00      	nop
 8002a6a:	3738      	adds	r7, #56	; 0x38
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40002800 	.word	0x40002800
 8002a74:	42470e3c 	.word	0x42470e3c

08002a78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b08e      	sub	sp, #56	; 0x38
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	605a      	str	r2, [r3, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
 8002a8c:	60da      	str	r2, [r3, #12]
 8002a8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a4c      	ldr	r2, [pc, #304]	; (8002bc8 <HAL_SPI_MspInit+0x150>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d12d      	bne.n	8002af6 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	623b      	str	r3, [r7, #32]
 8002a9e:	4b4b      	ldr	r3, [pc, #300]	; (8002bcc <HAL_SPI_MspInit+0x154>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	4a4a      	ldr	r2, [pc, #296]	; (8002bcc <HAL_SPI_MspInit+0x154>)
 8002aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aaa:	4b48      	ldr	r3, [pc, #288]	; (8002bcc <HAL_SPI_MspInit+0x154>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab2:	623b      	str	r3, [r7, #32]
 8002ab4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61fb      	str	r3, [r7, #28]
 8002aba:	4b44      	ldr	r3, [pc, #272]	; (8002bcc <HAL_SPI_MspInit+0x154>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	4a43      	ldr	r2, [pc, #268]	; (8002bcc <HAL_SPI_MspInit+0x154>)
 8002ac0:	f043 0302 	orr.w	r3, r3, #2
 8002ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac6:	4b41      	ldr	r3, [pc, #260]	; (8002bcc <HAL_SPI_MspInit+0x154>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	61fb      	str	r3, [r7, #28]
 8002ad0:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002ad2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002ad6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad8:	2302      	movs	r3, #2
 8002ada:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002adc:	2300      	movs	r3, #0
 8002ade:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ae4:	2305      	movs	r3, #5
 8002ae6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aec:	4619      	mov	r1, r3
 8002aee:	4838      	ldr	r0, [pc, #224]	; (8002bd0 <HAL_SPI_MspInit+0x158>)
 8002af0:	f002 fc8c 	bl	800540c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002af4:	e064      	b.n	8002bc0 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI4)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a36      	ldr	r2, [pc, #216]	; (8002bd4 <HAL_SPI_MspInit+0x15c>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d12d      	bne.n	8002b5c <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002b00:	2300      	movs	r3, #0
 8002b02:	61bb      	str	r3, [r7, #24]
 8002b04:	4b31      	ldr	r3, [pc, #196]	; (8002bcc <HAL_SPI_MspInit+0x154>)
 8002b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b08:	4a30      	ldr	r2, [pc, #192]	; (8002bcc <HAL_SPI_MspInit+0x154>)
 8002b0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b0e:	6453      	str	r3, [r2, #68]	; 0x44
 8002b10:	4b2e      	ldr	r3, [pc, #184]	; (8002bcc <HAL_SPI_MspInit+0x154>)
 8002b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b18:	61bb      	str	r3, [r7, #24]
 8002b1a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	4b2a      	ldr	r3, [pc, #168]	; (8002bcc <HAL_SPI_MspInit+0x154>)
 8002b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b24:	4a29      	ldr	r2, [pc, #164]	; (8002bcc <HAL_SPI_MspInit+0x154>)
 8002b26:	f043 0310 	orr.w	r3, r3, #16
 8002b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2c:	4b27      	ldr	r3, [pc, #156]	; (8002bcc <HAL_SPI_MspInit+0x154>)
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b30:	f003 0310 	and.w	r3, r3, #16
 8002b34:	617b      	str	r3, [r7, #20]
 8002b36:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002b38:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b46:	2303      	movs	r3, #3
 8002b48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002b4a:	2305      	movs	r3, #5
 8002b4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b52:	4619      	mov	r1, r3
 8002b54:	4820      	ldr	r0, [pc, #128]	; (8002bd8 <HAL_SPI_MspInit+0x160>)
 8002b56:	f002 fc59 	bl	800540c <HAL_GPIO_Init>
}
 8002b5a:	e031      	b.n	8002bc0 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI5)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a1e      	ldr	r2, [pc, #120]	; (8002bdc <HAL_SPI_MspInit+0x164>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d12c      	bne.n	8002bc0 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	4b18      	ldr	r3, [pc, #96]	; (8002bcc <HAL_SPI_MspInit+0x154>)
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6e:	4a17      	ldr	r2, [pc, #92]	; (8002bcc <HAL_SPI_MspInit+0x154>)
 8002b70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b74:	6453      	str	r3, [r2, #68]	; 0x44
 8002b76:	4b15      	ldr	r3, [pc, #84]	; (8002bcc <HAL_SPI_MspInit+0x154>)
 8002b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b7e:	613b      	str	r3, [r7, #16]
 8002b80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	4b11      	ldr	r3, [pc, #68]	; (8002bcc <HAL_SPI_MspInit+0x154>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	4a10      	ldr	r2, [pc, #64]	; (8002bcc <HAL_SPI_MspInit+0x154>)
 8002b8c:	f043 0320 	orr.w	r3, r3, #32
 8002b90:	6313      	str	r3, [r2, #48]	; 0x30
 8002b92:	4b0e      	ldr	r3, [pc, #56]	; (8002bcc <HAL_SPI_MspInit+0x154>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	f003 0320 	and.w	r3, r3, #32
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002b9e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bac:	2303      	movs	r3, #3
 8002bae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002bb0:	2305      	movs	r3, #5
 8002bb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4809      	ldr	r0, [pc, #36]	; (8002be0 <HAL_SPI_MspInit+0x168>)
 8002bbc:	f002 fc26 	bl	800540c <HAL_GPIO_Init>
}
 8002bc0:	bf00      	nop
 8002bc2:	3738      	adds	r7, #56	; 0x38
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40003800 	.word	0x40003800
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	40020400 	.word	0x40020400
 8002bd4:	40013400 	.word	0x40013400
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	40015000 	.word	0x40015000
 8002be0:	40021400 	.word	0x40021400

08002be4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf4:	d10d      	bne.n	8002c12 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	4b09      	ldr	r3, [pc, #36]	; (8002c20 <HAL_TIM_PWM_MspInit+0x3c>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	4a08      	ldr	r2, [pc, #32]	; (8002c20 <HAL_TIM_PWM_MspInit+0x3c>)
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	6413      	str	r3, [r2, #64]	; 0x40
 8002c06:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <HAL_TIM_PWM_MspInit+0x3c>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002c12:	bf00      	nop
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	40023800 	.word	0x40023800

08002c24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b088      	sub	sp, #32
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c2c:	f107 030c 	add.w	r3, r7, #12
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	60da      	str	r2, [r3, #12]
 8002c3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c44:	d11d      	bne.n	8002c82 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	4b10      	ldr	r3, [pc, #64]	; (8002c8c <HAL_TIM_MspPostInit+0x68>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	4a0f      	ldr	r2, [pc, #60]	; (8002c8c <HAL_TIM_MspPostInit+0x68>)
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	6313      	str	r3, [r2, #48]	; 0x30
 8002c56:	4b0d      	ldr	r3, [pc, #52]	; (8002c8c <HAL_TIM_MspPostInit+0x68>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	60bb      	str	r3, [r7, #8]
 8002c60:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8002c62:	2304      	movs	r3, #4
 8002c64:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c66:	2302      	movs	r3, #2
 8002c68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c72:	2301      	movs	r3, #1
 8002c74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8002c76:	f107 030c 	add.w	r3, r7, #12
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4804      	ldr	r0, [pc, #16]	; (8002c90 <HAL_TIM_MspPostInit+0x6c>)
 8002c7e:	f002 fbc5 	bl	800540c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002c82:	bf00      	nop
 8002c84:	3720      	adds	r7, #32
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	40020000 	.word	0x40020000

08002c94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08e      	sub	sp, #56	; 0x38
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	605a      	str	r2, [r3, #4]
 8002ca6:	609a      	str	r2, [r3, #8]
 8002ca8:	60da      	str	r2, [r3, #12]
 8002caa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a4b      	ldr	r2, [pc, #300]	; (8002de0 <HAL_UART_MspInit+0x14c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d12c      	bne.n	8002d10 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	623b      	str	r3, [r7, #32]
 8002cba:	4b4a      	ldr	r3, [pc, #296]	; (8002de4 <HAL_UART_MspInit+0x150>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	4a49      	ldr	r2, [pc, #292]	; (8002de4 <HAL_UART_MspInit+0x150>)
 8002cc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cc6:	4b47      	ldr	r3, [pc, #284]	; (8002de4 <HAL_UART_MspInit+0x150>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002cce:	623b      	str	r3, [r7, #32]
 8002cd0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61fb      	str	r3, [r7, #28]
 8002cd6:	4b43      	ldr	r3, [pc, #268]	; (8002de4 <HAL_UART_MspInit+0x150>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	4a42      	ldr	r2, [pc, #264]	; (8002de4 <HAL_UART_MspInit+0x150>)
 8002cdc:	f043 0310 	orr.w	r3, r3, #16
 8002ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce2:	4b40      	ldr	r3, [pc, #256]	; (8002de4 <HAL_UART_MspInit+0x150>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	f003 0310 	and.w	r3, r3, #16
 8002cea:	61fb      	str	r3, [r7, #28]
 8002cec:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002cfe:	2308      	movs	r3, #8
 8002d00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d06:	4619      	mov	r1, r3
 8002d08:	4837      	ldr	r0, [pc, #220]	; (8002de8 <HAL_UART_MspInit+0x154>)
 8002d0a:	f002 fb7f 	bl	800540c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002d0e:	e063      	b.n	8002dd8 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a35      	ldr	r2, [pc, #212]	; (8002dec <HAL_UART_MspInit+0x158>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d12d      	bne.n	8002d76 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61bb      	str	r3, [r7, #24]
 8002d1e:	4b31      	ldr	r3, [pc, #196]	; (8002de4 <HAL_UART_MspInit+0x150>)
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	4a30      	ldr	r2, [pc, #192]	; (8002de4 <HAL_UART_MspInit+0x150>)
 8002d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d28:	6413      	str	r3, [r2, #64]	; 0x40
 8002d2a:	4b2e      	ldr	r3, [pc, #184]	; (8002de4 <HAL_UART_MspInit+0x150>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d32:	61bb      	str	r3, [r7, #24]
 8002d34:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	617b      	str	r3, [r7, #20]
 8002d3a:	4b2a      	ldr	r3, [pc, #168]	; (8002de4 <HAL_UART_MspInit+0x150>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	4a29      	ldr	r2, [pc, #164]	; (8002de4 <HAL_UART_MspInit+0x150>)
 8002d40:	f043 0308 	orr.w	r3, r3, #8
 8002d44:	6313      	str	r3, [r2, #48]	; 0x30
 8002d46:	4b27      	ldr	r3, [pc, #156]	; (8002de4 <HAL_UART_MspInit+0x150>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8002d52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d58:	2302      	movs	r3, #2
 8002d5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d60:	2303      	movs	r3, #3
 8002d62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d64:	2307      	movs	r3, #7
 8002d66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4820      	ldr	r0, [pc, #128]	; (8002df0 <HAL_UART_MspInit+0x15c>)
 8002d70:	f002 fb4c 	bl	800540c <HAL_GPIO_Init>
}
 8002d74:	e030      	b.n	8002dd8 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a1e      	ldr	r2, [pc, #120]	; (8002df4 <HAL_UART_MspInit+0x160>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d12b      	bne.n	8002dd8 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002d80:	2300      	movs	r3, #0
 8002d82:	613b      	str	r3, [r7, #16]
 8002d84:	4b17      	ldr	r3, [pc, #92]	; (8002de4 <HAL_UART_MspInit+0x150>)
 8002d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d88:	4a16      	ldr	r2, [pc, #88]	; (8002de4 <HAL_UART_MspInit+0x150>)
 8002d8a:	f043 0320 	orr.w	r3, r3, #32
 8002d8e:	6453      	str	r3, [r2, #68]	; 0x44
 8002d90:	4b14      	ldr	r3, [pc, #80]	; (8002de4 <HAL_UART_MspInit+0x150>)
 8002d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d94:	f003 0320 	and.w	r3, r3, #32
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	4b10      	ldr	r3, [pc, #64]	; (8002de4 <HAL_UART_MspInit+0x150>)
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	4a0f      	ldr	r2, [pc, #60]	; (8002de4 <HAL_UART_MspInit+0x150>)
 8002da6:	f043 0304 	orr.w	r3, r3, #4
 8002daa:	6313      	str	r3, [r2, #48]	; 0x30
 8002dac:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <HAL_UART_MspInit+0x150>)
 8002dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8002db8:	23c0      	movs	r3, #192	; 0xc0
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002dc8:	2308      	movs	r3, #8
 8002dca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4809      	ldr	r0, [pc, #36]	; (8002df8 <HAL_UART_MspInit+0x164>)
 8002dd4:	f002 fb1a 	bl	800540c <HAL_GPIO_Init>
}
 8002dd8:	bf00      	nop
 8002dda:	3738      	adds	r7, #56	; 0x38
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40007c00 	.word	0x40007c00
 8002de4:	40023800 	.word	0x40023800
 8002de8:	40021000 	.word	0x40021000
 8002dec:	40004800 	.word	0x40004800
 8002df0:	40020c00 	.word	0x40020c00
 8002df4:	40011400 	.word	0x40011400
 8002df8:	40020800 	.word	0x40020800

08002dfc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08c      	sub	sp, #48	; 0x30
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002e04:	2300      	movs	r3, #0
 8002e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	2036      	movs	r0, #54	; 0x36
 8002e12:	f002 fac3 	bl	800539c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e16:	2036      	movs	r0, #54	; 0x36
 8002e18:	f002 fadc 	bl	80053d4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	4b1f      	ldr	r3, [pc, #124]	; (8002ea0 <HAL_InitTick+0xa4>)
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	4a1e      	ldr	r2, [pc, #120]	; (8002ea0 <HAL_InitTick+0xa4>)
 8002e26:	f043 0310 	orr.w	r3, r3, #16
 8002e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e2c:	4b1c      	ldr	r3, [pc, #112]	; (8002ea0 <HAL_InitTick+0xa4>)
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	f003 0310 	and.w	r3, r3, #16
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e38:	f107 0210 	add.w	r2, r7, #16
 8002e3c:	f107 0314 	add.w	r3, r7, #20
 8002e40:	4611      	mov	r1, r2
 8002e42:	4618      	mov	r0, r3
 8002e44:	f004 fb36 	bl	80074b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002e48:	f004 fb0c 	bl	8007464 <HAL_RCC_GetPCLK1Freq>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e54:	4a13      	ldr	r2, [pc, #76]	; (8002ea4 <HAL_InitTick+0xa8>)
 8002e56:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5a:	0c9b      	lsrs	r3, r3, #18
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002e60:	4b11      	ldr	r3, [pc, #68]	; (8002ea8 <HAL_InitTick+0xac>)
 8002e62:	4a12      	ldr	r2, [pc, #72]	; (8002eac <HAL_InitTick+0xb0>)
 8002e64:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002e66:	4b10      	ldr	r3, [pc, #64]	; (8002ea8 <HAL_InitTick+0xac>)
 8002e68:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e6c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002e6e:	4a0e      	ldr	r2, [pc, #56]	; (8002ea8 <HAL_InitTick+0xac>)
 8002e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e72:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002e74:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <HAL_InitTick+0xac>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <HAL_InitTick+0xac>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002e80:	4809      	ldr	r0, [pc, #36]	; (8002ea8 <HAL_InitTick+0xac>)
 8002e82:	f005 fef7 	bl	8008c74 <HAL_TIM_Base_Init>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d104      	bne.n	8002e96 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002e8c:	4806      	ldr	r0, [pc, #24]	; (8002ea8 <HAL_InitTick+0xac>)
 8002e8e:	f005 ff4b 	bl	8008d28 <HAL_TIM_Base_Start_IT>
 8002e92:	4603      	mov	r3, r0
 8002e94:	e000      	b.n	8002e98 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3730      	adds	r7, #48	; 0x30
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	431bde83 	.word	0x431bde83
 8002ea8:	20005588 	.word	0x20005588
 8002eac:	40001000 	.word	0x40001000

08002eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002eb4:	bf00      	nop
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ec2:	e7fe      	b.n	8002ec2 <HardFault_Handler+0x4>

08002ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ec8:	e7fe      	b.n	8002ec8 <MemManage_Handler+0x4>

08002eca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ece:	e7fe      	b.n	8002ece <BusFault_Handler+0x4>

08002ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ed4:	e7fe      	b.n	8002ed4 <UsageFault_Handler+0x4>

08002ed6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eda:	bf00      	nop
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002ee8:	4802      	ldr	r0, [pc, #8]	; (8002ef4 <RTC_Alarm_IRQHandler+0x10>)
 8002eea:	f005 f801 	bl	8007ef0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002eee:	bf00      	nop
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	200053d8 	.word	0x200053d8

08002ef8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002efc:	4802      	ldr	r0, [pc, #8]	; (8002f08 <TIM6_DAC_IRQHandler+0x10>)
 8002efe:	f005 ffd2 	bl	8008ea6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f02:	bf00      	nop
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	20005588 	.word	0x20005588

08002f0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
	return 1;
 8002f10:	2301      	movs	r3, #1
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <_kill>:

int _kill(int pid, int sig)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002f26:	f00a fcbd 	bl	800d8a4 <__errno>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2216      	movs	r2, #22
 8002f2e:	601a      	str	r2, [r3, #0]
	return -1;
 8002f30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <_exit>:

void _exit (int status)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002f44:	f04f 31ff 	mov.w	r1, #4294967295
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff ffe7 	bl	8002f1c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f4e:	e7fe      	b.n	8002f4e <_exit+0x12>

08002f50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	e00a      	b.n	8002f78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f62:	f3af 8000 	nop.w
 8002f66:	4601      	mov	r1, r0
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	60ba      	str	r2, [r7, #8]
 8002f6e:	b2ca      	uxtb	r2, r1
 8002f70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	3301      	adds	r3, #1
 8002f76:	617b      	str	r3, [r7, #20]
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	dbf0      	blt.n	8002f62 <_read+0x12>
	}

return len;
 8002f80:	687b      	ldr	r3, [r7, #4]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b086      	sub	sp, #24
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	60f8      	str	r0, [r7, #12]
 8002f92:	60b9      	str	r1, [r7, #8]
 8002f94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]
 8002f9a:	e009      	b.n	8002fb0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	60ba      	str	r2, [r7, #8]
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	3301      	adds	r3, #1
 8002fae:	617b      	str	r3, [r7, #20]
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	dbf1      	blt.n	8002f9c <_write+0x12>
	}
	return len;
 8002fb8:	687b      	ldr	r3, [r7, #4]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <_close>:

int _close(int file)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b083      	sub	sp, #12
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
	return -1;
 8002fca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fea:	605a      	str	r2, [r3, #4]
	return 0;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <_isatty>:

int _isatty(int file)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
	return 1;
 8003002:	2301      	movs	r3, #1
}
 8003004:	4618      	mov	r0, r3
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
	return 0;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3714      	adds	r7, #20
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
	...

0800302c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003034:	4a14      	ldr	r2, [pc, #80]	; (8003088 <_sbrk+0x5c>)
 8003036:	4b15      	ldr	r3, [pc, #84]	; (800308c <_sbrk+0x60>)
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003040:	4b13      	ldr	r3, [pc, #76]	; (8003090 <_sbrk+0x64>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d102      	bne.n	800304e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003048:	4b11      	ldr	r3, [pc, #68]	; (8003090 <_sbrk+0x64>)
 800304a:	4a12      	ldr	r2, [pc, #72]	; (8003094 <_sbrk+0x68>)
 800304c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800304e:	4b10      	ldr	r3, [pc, #64]	; (8003090 <_sbrk+0x64>)
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4413      	add	r3, r2
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	429a      	cmp	r2, r3
 800305a:	d207      	bcs.n	800306c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800305c:	f00a fc22 	bl	800d8a4 <__errno>
 8003060:	4603      	mov	r3, r0
 8003062:	220c      	movs	r2, #12
 8003064:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003066:	f04f 33ff 	mov.w	r3, #4294967295
 800306a:	e009      	b.n	8003080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800306c:	4b08      	ldr	r3, [pc, #32]	; (8003090 <_sbrk+0x64>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003072:	4b07      	ldr	r3, [pc, #28]	; (8003090 <_sbrk+0x64>)
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4413      	add	r3, r2
 800307a:	4a05      	ldr	r2, [pc, #20]	; (8003090 <_sbrk+0x64>)
 800307c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800307e:	68fb      	ldr	r3, [r7, #12]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	20030000 	.word	0x20030000
 800308c:	00000400 	.word	0x00000400
 8003090:	20000260 	.word	0x20000260
 8003094:	20005730 	.word	0x20005730

08003098 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800309c:	4b08      	ldr	r3, [pc, #32]	; (80030c0 <SystemInit+0x28>)
 800309e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a2:	4a07      	ldr	r2, [pc, #28]	; (80030c0 <SystemInit+0x28>)
 80030a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80030ac:	4b04      	ldr	r3, [pc, #16]	; (80030c0 <SystemInit+0x28>)
 80030ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030b2:	609a      	str	r2, [r3, #8]
#endif
}
 80030b4:	bf00      	nop
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	e000ed00 	.word	0xe000ed00

080030c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80030c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80030c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80030ca:	e003      	b.n	80030d4 <LoopCopyDataInit>

080030cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80030cc:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80030ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80030d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80030d2:	3104      	adds	r1, #4

080030d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80030d4:	480b      	ldr	r0, [pc, #44]	; (8003104 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80030d6:	4b0c      	ldr	r3, [pc, #48]	; (8003108 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80030d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80030da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80030dc:	d3f6      	bcc.n	80030cc <CopyDataInit>
  ldr  r2, =_sbss
 80030de:	4a0b      	ldr	r2, [pc, #44]	; (800310c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80030e0:	e002      	b.n	80030e8 <LoopFillZerobss>

080030e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80030e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80030e4:	f842 3b04 	str.w	r3, [r2], #4

080030e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80030e8:	4b09      	ldr	r3, [pc, #36]	; (8003110 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80030ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80030ec:	d3f9      	bcc.n	80030e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80030ee:	f7ff ffd3 	bl	8003098 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030f2:	f00a fcd3 	bl	800da9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030f6:	f7fe fa99 	bl	800162c <main>
  bx  lr    
 80030fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80030fc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003100:	080135a4 	.word	0x080135a4
  ldr  r0, =_sdata
 8003104:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003108:	20000204 	.word	0x20000204
  ldr  r2, =_sbss
 800310c:	20000204 	.word	0x20000204
  ldr  r3, = _ebss
 8003110:	20005730 	.word	0x20005730

08003114 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003114:	e7fe      	b.n	8003114 <ADC_IRQHandler>
	...

08003118 <GPS_Poll>:
UART_HandleTypeDef* SERIAL_USART;



void GPS_Poll(float *latitude, float *longitude, float *time)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08c      	sub	sp, #48	; 0x30
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 8003124:	2364      	movs	r3, #100	; 0x64
 8003126:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 8003128:	2300      	movs	r3, #0
 800312a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 800312c:	2300      	movs	r3, #0
 800312e:	62bb      	str	r3, [r7, #40]	; 0x28
	while(loop_count < max_loop_count && !done){
 8003130:	e073      	b.n	800321a <GPS_Poll+0x102>
		HAL_UART_Receive(GPS_USART, (uint8_t*)&rx_current, 1, 100);
 8003132:	4b3f      	ldr	r3, [pc, #252]	; (8003230 <GPS_Poll+0x118>)
 8003134:	6818      	ldr	r0, [r3, #0]
 8003136:	2364      	movs	r3, #100	; 0x64
 8003138:	2201      	movs	r2, #1
 800313a:	493e      	ldr	r1, [pc, #248]	; (8003234 <GPS_Poll+0x11c>)
 800313c:	f006 fc65 	bl	8009a0a <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 8003140:	4b3c      	ldr	r3, [pc, #240]	; (8003234 <GPS_Poll+0x11c>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b0a      	cmp	r3, #10
 8003146:	d00f      	beq.n	8003168 <GPS_Poll+0x50>
 8003148:	4b3b      	ldr	r3, [pc, #236]	; (8003238 <GPS_Poll+0x120>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b63      	cmp	r3, #99	; 0x63
 800314e:	d80b      	bhi.n	8003168 <GPS_Poll+0x50>
			rx_buffer[rx_index++] = rx_current;
 8003150:	4b39      	ldr	r3, [pc, #228]	; (8003238 <GPS_Poll+0x120>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	1c5a      	adds	r2, r3, #1
 8003156:	b2d1      	uxtb	r1, r2
 8003158:	4a37      	ldr	r2, [pc, #220]	; (8003238 <GPS_Poll+0x120>)
 800315a:	7011      	strb	r1, [r2, #0]
 800315c:	461a      	mov	r2, r3
 800315e:	4b35      	ldr	r3, [pc, #212]	; (8003234 <GPS_Poll+0x11c>)
 8003160:	7819      	ldrb	r1, [r3, #0]
 8003162:	4b36      	ldr	r3, [pc, #216]	; (800323c <GPS_Poll+0x124>)
 8003164:	5499      	strb	r1, [r3, r2]
 8003166:	e021      	b.n	80031ac <GPS_Poll+0x94>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 8003168:	4834      	ldr	r0, [pc, #208]	; (800323c <GPS_Poll+0x124>)
 800316a:	f000 f86b 	bl	8003244 <GPS_validate>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d013      	beq.n	800319c <GPS_Poll+0x84>
				if(GPS_parse((char*) rx_buffer)){
 8003174:	4831      	ldr	r0, [pc, #196]	; (800323c <GPS_Poll+0x124>)
 8003176:	f000 f8c7 	bl	8003308 <GPS_parse>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00d      	beq.n	800319c <GPS_Poll+0x84>
					*latitude = GPS.dec_latitude;
 8003180:	4b2f      	ldr	r3, [pc, #188]	; (8003240 <GPS_Poll+0x128>)
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 8003188:	4b2d      	ldr	r3, [pc, #180]	; (8003240 <GPS_Poll+0x128>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 8003190:	4b2b      	ldr	r3, [pc, #172]	; (8003240 <GPS_Poll+0x128>)
 8003192:	695a      	ldr	r2, [r3, #20]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	601a      	str	r2, [r3, #0]
					done = 1;
 8003198:	2301      	movs	r3, #1
 800319a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 800319c:	4b26      	ldr	r3, [pc, #152]	; (8003238 <GPS_Poll+0x120>)
 800319e:	2200      	movs	r2, #0
 80031a0:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 80031a2:	2264      	movs	r2, #100	; 0x64
 80031a4:	2100      	movs	r1, #0
 80031a6:	4825      	ldr	r0, [pc, #148]	; (800323c <GPS_Poll+0x124>)
 80031a8:	f00a fcd8 	bl	800db5c <memset>
		}

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS_USART);
 80031ac:	2300      	movs	r3, #0
 80031ae:	623b      	str	r3, [r7, #32]
 80031b0:	4b1f      	ldr	r3, [pc, #124]	; (8003230 <GPS_Poll+0x118>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	623b      	str	r3, [r7, #32]
 80031ba:	4b1d      	ldr	r3, [pc, #116]	; (8003230 <GPS_Poll+0x118>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	623b      	str	r3, [r7, #32]
 80031c4:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS_USART);
 80031c6:	2300      	movs	r3, #0
 80031c8:	61fb      	str	r3, [r7, #28]
 80031ca:	4b19      	ldr	r3, [pc, #100]	; (8003230 <GPS_Poll+0x118>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	61fb      	str	r3, [r7, #28]
 80031d4:	4b16      	ldr	r3, [pc, #88]	; (8003230 <GPS_Poll+0x118>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	61fb      	str	r3, [r7, #28]
 80031de:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS_USART);
 80031e0:	2300      	movs	r3, #0
 80031e2:	61bb      	str	r3, [r7, #24]
 80031e4:	4b12      	ldr	r3, [pc, #72]	; (8003230 <GPS_Poll+0x118>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	61bb      	str	r3, [r7, #24]
 80031ee:	4b10      	ldr	r3, [pc, #64]	; (8003230 <GPS_Poll+0x118>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	61bb      	str	r3, [r7, #24]
 80031f8:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS_USART);
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]
 80031fe:	4b0c      	ldr	r3, [pc, #48]	; (8003230 <GPS_Poll+0x118>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	617b      	str	r3, [r7, #20]
 8003208:	4b09      	ldr	r3, [pc, #36]	; (8003230 <GPS_Poll+0x118>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	617b      	str	r3, [r7, #20]
 8003212:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 8003214:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003216:	3301      	adds	r3, #1
 8003218:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 800321a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800321c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800321e:	429a      	cmp	r2, r3
 8003220:	d202      	bcs.n	8003228 <GPS_Poll+0x110>
 8003222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003224:	2b00      	cmp	r3, #0
 8003226:	d084      	beq.n	8003132 <GPS_Poll+0x1a>
	}
}
 8003228:	bf00      	nop
 800322a:	3730      	adds	r7, #48	; 0x30
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	20004fa4 	.word	0x20004fa4
 8003234:	20000264 	.word	0x20000264
 8003238:	20000265 	.word	0x20000265
 800323c:	20005628 	.word	0x20005628
 8003240:	200055d0 	.word	0x200055d0

08003244 <GPS_validate>:

int GPS_validate(char *nmeastr){
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 800324c:	2300      	movs	r3, #0
 800324e:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8003250:	2300      	movs	r3, #0
 8003252:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	4413      	add	r3, r2
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b24      	cmp	r3, #36	; 0x24
 800325e:	d103      	bne.n	8003268 <GPS_validate+0x24>
        i++;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	3301      	adds	r3, #1
 8003264:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8003266:	e00c      	b.n	8003282 <GPS_validate+0x3e>
        return 0;
 8003268:	2300      	movs	r3, #0
 800326a:	e047      	b.n	80032fc <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	4413      	add	r3, r2
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	461a      	mov	r2, r3
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4053      	eors	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
        i++;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	3301      	adds	r3, #1
 8003280:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	4413      	add	r3, r2
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d008      	beq.n	80032a0 <GPS_validate+0x5c>
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	4413      	add	r3, r2
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2b2a      	cmp	r3, #42	; 0x2a
 8003298:	d002      	beq.n	80032a0 <GPS_validate+0x5c>
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2b4a      	cmp	r3, #74	; 0x4a
 800329e:	dde5      	ble.n	800326c <GPS_validate+0x28>
    }

    if(i >= 75){
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	2b4a      	cmp	r3, #74	; 0x4a
 80032a4:	dd01      	ble.n	80032aa <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 80032a6:	2300      	movs	r3, #0
 80032a8:	e028      	b.n	80032fc <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	4413      	add	r3, r2
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b2a      	cmp	r3, #42	; 0x2a
 80032b4:	d119      	bne.n	80032ea <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	3301      	adds	r3, #1
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	4413      	add	r3, r2
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	3302      	adds	r3, #2
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	4413      	add	r3, r2
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 80032ce:	2300      	movs	r3, #0
 80032d0:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 80032d2:	f107 0308 	add.w	r3, r7, #8
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	490a      	ldr	r1, [pc, #40]	; (8003304 <GPS_validate+0xc0>)
 80032da:	4618      	mov	r0, r3
 80032dc:	f00b fc2e 	bl	800eb3c <siprintf>
    return((checkcalcstr[0] == check[0])
 80032e0:	7a3a      	ldrb	r2, [r7, #8]
 80032e2:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d108      	bne.n	80032fa <GPS_validate+0xb6>
 80032e8:	e001      	b.n	80032ee <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 80032ea:	2300      	movs	r3, #0
 80032ec:	e006      	b.n	80032fc <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80032ee:	7a7a      	ldrb	r2, [r7, #9]
 80032f0:	7b7b      	ldrb	r3, [r7, #13]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d101      	bne.n	80032fa <GPS_validate+0xb6>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <GPS_validate+0xb8>
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3718      	adds	r7, #24
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	08012cd4 	.word	0x08012cd4

08003308 <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 8003308:	b580      	push	{r7, lr}
 800330a:	b08a      	sub	sp, #40	; 0x28
 800330c:	af08      	add	r7, sp, #32
 800330e:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 8003310:	2206      	movs	r2, #6
 8003312:	496d      	ldr	r1, [pc, #436]	; (80034c8 <GPS_parse+0x1c0>)
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f00b fca2 	bl	800ec5e <strncmp>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d139      	bne.n	8003394 <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8003320:	4b6a      	ldr	r3, [pc, #424]	; (80034cc <GPS_parse+0x1c4>)
 8003322:	9307      	str	r3, [sp, #28]
 8003324:	4b6a      	ldr	r3, [pc, #424]	; (80034d0 <GPS_parse+0x1c8>)
 8003326:	9306      	str	r3, [sp, #24]
 8003328:	4b6a      	ldr	r3, [pc, #424]	; (80034d4 <GPS_parse+0x1cc>)
 800332a:	9305      	str	r3, [sp, #20]
 800332c:	4b6a      	ldr	r3, [pc, #424]	; (80034d8 <GPS_parse+0x1d0>)
 800332e:	9304      	str	r3, [sp, #16]
 8003330:	4b6a      	ldr	r3, [pc, #424]	; (80034dc <GPS_parse+0x1d4>)
 8003332:	9303      	str	r3, [sp, #12]
 8003334:	4b6a      	ldr	r3, [pc, #424]	; (80034e0 <GPS_parse+0x1d8>)
 8003336:	9302      	str	r3, [sp, #8]
 8003338:	4b6a      	ldr	r3, [pc, #424]	; (80034e4 <GPS_parse+0x1dc>)
 800333a:	9301      	str	r3, [sp, #4]
 800333c:	4b6a      	ldr	r3, [pc, #424]	; (80034e8 <GPS_parse+0x1e0>)
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	4b6a      	ldr	r3, [pc, #424]	; (80034ec <GPS_parse+0x1e4>)
 8003342:	4a6b      	ldr	r2, [pc, #428]	; (80034f0 <GPS_parse+0x1e8>)
 8003344:	496b      	ldr	r1, [pc, #428]	; (80034f4 <GPS_parse+0x1ec>)
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f00b fc18 	bl	800eb7c <siscanf>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	f340 80b5 	ble.w	80034be <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8003354:	4b68      	ldr	r3, [pc, #416]	; (80034f8 <GPS_parse+0x1f0>)
 8003356:	edd3 7a04 	vldr	s15, [r3, #16]
 800335a:	4b67      	ldr	r3, [pc, #412]	; (80034f8 <GPS_parse+0x1f0>)
 800335c:	7e1b      	ldrb	r3, [r3, #24]
 800335e:	4618      	mov	r0, r3
 8003360:	eeb0 0a67 	vmov.f32	s0, s15
 8003364:	f000 f8ec 	bl	8003540 <GPS_nmea_to_dec>
 8003368:	eef0 7a40 	vmov.f32	s15, s0
 800336c:	4b62      	ldr	r3, [pc, #392]	; (80034f8 <GPS_parse+0x1f0>)
 800336e:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8003372:	4b61      	ldr	r3, [pc, #388]	; (80034f8 <GPS_parse+0x1f0>)
 8003374:	edd3 7a03 	vldr	s15, [r3, #12]
 8003378:	4b5f      	ldr	r3, [pc, #380]	; (80034f8 <GPS_parse+0x1f0>)
 800337a:	7e5b      	ldrb	r3, [r3, #25]
 800337c:	4618      	mov	r0, r3
 800337e:	eeb0 0a67 	vmov.f32	s0, s15
 8003382:	f000 f8dd 	bl	8003540 <GPS_nmea_to_dec>
 8003386:	eef0 7a40 	vmov.f32	s15, s0
 800338a:	4b5b      	ldr	r3, [pc, #364]	; (80034f8 <GPS_parse+0x1f0>)
 800338c:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8003390:	2301      	movs	r3, #1
 8003392:	e095      	b.n	80034c0 <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 8003394:	2206      	movs	r2, #6
 8003396:	4959      	ldr	r1, [pc, #356]	; (80034fc <GPS_parse+0x1f4>)
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f00b fc60 	bl	800ec5e <strncmp>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d134      	bne.n	800340e <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 80033a4:	4b56      	ldr	r3, [pc, #344]	; (8003500 <GPS_parse+0x1f8>)
 80033a6:	9305      	str	r3, [sp, #20]
 80033a8:	4b56      	ldr	r3, [pc, #344]	; (8003504 <GPS_parse+0x1fc>)
 80033aa:	9304      	str	r3, [sp, #16]
 80033ac:	4b56      	ldr	r3, [pc, #344]	; (8003508 <GPS_parse+0x200>)
 80033ae:	9303      	str	r3, [sp, #12]
 80033b0:	4b4b      	ldr	r3, [pc, #300]	; (80034e0 <GPS_parse+0x1d8>)
 80033b2:	9302      	str	r3, [sp, #8]
 80033b4:	4b4b      	ldr	r3, [pc, #300]	; (80034e4 <GPS_parse+0x1dc>)
 80033b6:	9301      	str	r3, [sp, #4]
 80033b8:	4b4b      	ldr	r3, [pc, #300]	; (80034e8 <GPS_parse+0x1e0>)
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	4b4b      	ldr	r3, [pc, #300]	; (80034ec <GPS_parse+0x1e4>)
 80033be:	4a4c      	ldr	r2, [pc, #304]	; (80034f0 <GPS_parse+0x1e8>)
 80033c0:	4952      	ldr	r1, [pc, #328]	; (800350c <GPS_parse+0x204>)
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f00b fbda 	bl	800eb7c <siscanf>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	dd77      	ble.n	80034be <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80033ce:	4b4a      	ldr	r3, [pc, #296]	; (80034f8 <GPS_parse+0x1f0>)
 80033d0:	edd3 7a04 	vldr	s15, [r3, #16]
 80033d4:	4b48      	ldr	r3, [pc, #288]	; (80034f8 <GPS_parse+0x1f0>)
 80033d6:	7e1b      	ldrb	r3, [r3, #24]
 80033d8:	4618      	mov	r0, r3
 80033da:	eeb0 0a67 	vmov.f32	s0, s15
 80033de:	f000 f8af 	bl	8003540 <GPS_nmea_to_dec>
 80033e2:	eef0 7a40 	vmov.f32	s15, s0
 80033e6:	4b44      	ldr	r3, [pc, #272]	; (80034f8 <GPS_parse+0x1f0>)
 80033e8:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80033ec:	4b42      	ldr	r3, [pc, #264]	; (80034f8 <GPS_parse+0x1f0>)
 80033ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80033f2:	4b41      	ldr	r3, [pc, #260]	; (80034f8 <GPS_parse+0x1f0>)
 80033f4:	7e5b      	ldrb	r3, [r3, #25]
 80033f6:	4618      	mov	r0, r3
 80033f8:	eeb0 0a67 	vmov.f32	s0, s15
 80033fc:	f000 f8a0 	bl	8003540 <GPS_nmea_to_dec>
 8003400:	eef0 7a40 	vmov.f32	s15, s0
 8003404:	4b3c      	ldr	r3, [pc, #240]	; (80034f8 <GPS_parse+0x1f0>)
 8003406:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 800340a:	2301      	movs	r3, #1
 800340c:	e058      	b.n	80034c0 <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 800340e:	2206      	movs	r2, #6
 8003410:	493f      	ldr	r1, [pc, #252]	; (8003510 <GPS_parse+0x208>)
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f00b fc23 	bl	800ec5e <strncmp>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d130      	bne.n	8003480 <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 800341e:	4b3d      	ldr	r3, [pc, #244]	; (8003514 <GPS_parse+0x20c>)
 8003420:	9303      	str	r3, [sp, #12]
 8003422:	4b33      	ldr	r3, [pc, #204]	; (80034f0 <GPS_parse+0x1e8>)
 8003424:	9302      	str	r3, [sp, #8]
 8003426:	4b2e      	ldr	r3, [pc, #184]	; (80034e0 <GPS_parse+0x1d8>)
 8003428:	9301      	str	r3, [sp, #4]
 800342a:	4b2e      	ldr	r3, [pc, #184]	; (80034e4 <GPS_parse+0x1dc>)
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	4b2e      	ldr	r3, [pc, #184]	; (80034e8 <GPS_parse+0x1e0>)
 8003430:	4a2e      	ldr	r2, [pc, #184]	; (80034ec <GPS_parse+0x1e4>)
 8003432:	4939      	ldr	r1, [pc, #228]	; (8003518 <GPS_parse+0x210>)
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f00b fba1 	bl	800eb7c <siscanf>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	dd3e      	ble.n	80034be <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8003440:	4b2d      	ldr	r3, [pc, #180]	; (80034f8 <GPS_parse+0x1f0>)
 8003442:	edd3 7a04 	vldr	s15, [r3, #16]
 8003446:	4b2c      	ldr	r3, [pc, #176]	; (80034f8 <GPS_parse+0x1f0>)
 8003448:	7e1b      	ldrb	r3, [r3, #24]
 800344a:	4618      	mov	r0, r3
 800344c:	eeb0 0a67 	vmov.f32	s0, s15
 8003450:	f000 f876 	bl	8003540 <GPS_nmea_to_dec>
 8003454:	eef0 7a40 	vmov.f32	s15, s0
 8003458:	4b27      	ldr	r3, [pc, #156]	; (80034f8 <GPS_parse+0x1f0>)
 800345a:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 800345e:	4b26      	ldr	r3, [pc, #152]	; (80034f8 <GPS_parse+0x1f0>)
 8003460:	edd3 7a03 	vldr	s15, [r3, #12]
 8003464:	4b24      	ldr	r3, [pc, #144]	; (80034f8 <GPS_parse+0x1f0>)
 8003466:	7e5b      	ldrb	r3, [r3, #25]
 8003468:	4618      	mov	r0, r3
 800346a:	eeb0 0a67 	vmov.f32	s0, s15
 800346e:	f000 f867 	bl	8003540 <GPS_nmea_to_dec>
 8003472:	eef0 7a40 	vmov.f32	s15, s0
 8003476:	4b20      	ldr	r3, [pc, #128]	; (80034f8 <GPS_parse+0x1f0>)
 8003478:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 800347c:	2301      	movs	r3, #1
 800347e:	e01f      	b.n	80034c0 <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 8003480:	2206      	movs	r2, #6
 8003482:	4926      	ldr	r1, [pc, #152]	; (800351c <GPS_parse+0x214>)
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f00b fbea 	bl	800ec5e <strncmp>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d116      	bne.n	80034be <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8003490:	4b23      	ldr	r3, [pc, #140]	; (8003520 <GPS_parse+0x218>)
 8003492:	9305      	str	r3, [sp, #20]
 8003494:	4b23      	ldr	r3, [pc, #140]	; (8003524 <GPS_parse+0x21c>)
 8003496:	9304      	str	r3, [sp, #16]
 8003498:	4b23      	ldr	r3, [pc, #140]	; (8003528 <GPS_parse+0x220>)
 800349a:	9303      	str	r3, [sp, #12]
 800349c:	4b1a      	ldr	r3, [pc, #104]	; (8003508 <GPS_parse+0x200>)
 800349e:	9302      	str	r3, [sp, #8]
 80034a0:	4b22      	ldr	r3, [pc, #136]	; (800352c <GPS_parse+0x224>)
 80034a2:	9301      	str	r3, [sp, #4]
 80034a4:	4b22      	ldr	r3, [pc, #136]	; (8003530 <GPS_parse+0x228>)
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	4b22      	ldr	r3, [pc, #136]	; (8003534 <GPS_parse+0x22c>)
 80034aa:	4a23      	ldr	r2, [pc, #140]	; (8003538 <GPS_parse+0x230>)
 80034ac:	4923      	ldr	r1, [pc, #140]	; (800353c <GPS_parse+0x234>)
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f00b fb64 	bl	800eb7c <siscanf>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	dd01      	ble.n	80034be <GPS_parse+0x1b6>
            return 0;
 80034ba:	2300      	movs	r3, #0
 80034bc:	e000      	b.n	80034c0 <GPS_parse+0x1b8>
    }
    return 0;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	08012cdc 	.word	0x08012cdc
 80034cc:	200055fc 	.word	0x200055fc
 80034d0:	200055f8 	.word	0x200055f8
 80034d4:	200055f4 	.word	0x200055f4
 80034d8:	200055f0 	.word	0x200055f0
 80034dc:	200055ec 	.word	0x200055ec
 80034e0:	200055e9 	.word	0x200055e9
 80034e4:	200055dc 	.word	0x200055dc
 80034e8:	200055e8 	.word	0x200055e8
 80034ec:	200055e0 	.word	0x200055e0
 80034f0:	200055e4 	.word	0x200055e4
 80034f4:	08012ce4 	.word	0x08012ce4
 80034f8:	200055d0 	.word	0x200055d0
 80034fc:	08012d0c 	.word	0x08012d0c
 8003500:	20005608 	.word	0x20005608
 8003504:	20005604 	.word	0x20005604
 8003508:	20005600 	.word	0x20005600
 800350c:	08012d14 	.word	0x08012d14
 8003510:	08012d34 	.word	0x08012d34
 8003514:	2000560c 	.word	0x2000560c
 8003518:	08012d3c 	.word	0x08012d3c
 800351c:	08012d58 	.word	0x08012d58
 8003520:	20005624 	.word	0x20005624
 8003524:	20005620 	.word	0x20005620
 8003528:	2000561d 	.word	0x2000561d
 800352c:	2000561c 	.word	0x2000561c
 8003530:	20005618 	.word	0x20005618
 8003534:	20005614 	.word	0x20005614
 8003538:	20005610 	.word	0x20005610
 800353c:	08012d60 	.word	0x08012d60

08003540 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8003540:	b480      	push	{r7}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
 8003546:	ed87 0a01 	vstr	s0, [r7, #4]
 800354a:	4603      	mov	r3, r0
 800354c:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 800354e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003552:	eddf 6a20 	vldr	s13, [pc, #128]	; 80035d4 <GPS_nmea_to_dec+0x94>
 8003556:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800355a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800355e:	ee17 3a90 	vmov	r3, s15
 8003562:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	2264      	movs	r2, #100	; 0x64
 8003568:	fb02 f303 	mul.w	r3, r2, r3
 800356c:	ee07 3a90 	vmov	s15, r3
 8003570:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003574:	ed97 7a01 	vldr	s14, [r7, #4]
 8003578:	ee77 7a67 	vsub.f32	s15, s14, s15
 800357c:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8003580:	ed97 7a03 	vldr	s14, [r7, #12]
 8003584:	eddf 6a14 	vldr	s13, [pc, #80]	; 80035d8 <GPS_nmea_to_dec+0x98>
 8003588:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800358c:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	ee07 3a90 	vmov	s15, r3
 8003596:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800359a:	ed97 7a02 	vldr	s14, [r7, #8]
 800359e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035a2:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 80035a6:	78fb      	ldrb	r3, [r7, #3]
 80035a8:	2b53      	cmp	r3, #83	; 0x53
 80035aa:	d002      	beq.n	80035b2 <GPS_nmea_to_dec+0x72>
 80035ac:	78fb      	ldrb	r3, [r7, #3]
 80035ae:	2b57      	cmp	r3, #87	; 0x57
 80035b0:	d105      	bne.n	80035be <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 80035b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80035b6:	eef1 7a67 	vneg.f32	s15, s15
 80035ba:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	ee07 3a90 	vmov	s15, r3
}
 80035c4:	eeb0 0a67 	vmov.f32	s0, s15
 80035c8:	371c      	adds	r7, #28
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	42c80000 	.word	0x42c80000
 80035d8:	42700000 	.word	0x42700000

080035dc <GPS_init>:

/*
 * TODO MRT code
 */

void GPS_init(UART_HandleTypeDef* data_uart, UART_HandleTypeDef* transmit_uart){
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
	GPS_USART = data_uart;
 80035e6:	4a09      	ldr	r2, [pc, #36]	; (800360c <GPS_init+0x30>)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6013      	str	r3, [r2, #0]
	SERIAL_USART = transmit_uart;
 80035ec:	4a08      	ldr	r2, [pc, #32]	; (8003610 <GPS_init+0x34>)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(SERIAL_USART,"\r\n\r\nGPS Init\r\n\r\n",16,HAL_MAX_DELAY);
 80035f2:	4b07      	ldr	r3, [pc, #28]	; (8003610 <GPS_init+0x34>)
 80035f4:	6818      	ldr	r0, [r3, #0]
 80035f6:	f04f 33ff 	mov.w	r3, #4294967295
 80035fa:	2210      	movs	r2, #16
 80035fc:	4905      	ldr	r1, [pc, #20]	; (8003614 <GPS_init+0x38>)
 80035fe:	f006 f972 	bl	80098e6 <HAL_UART_Transmit>
}
 8003602:	bf00      	nop
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	20004fa4 	.word	0x20004fa4
 8003610:	2000568c 	.word	0x2000568c
 8003614:	08012d80 	.word	0x08012d80

08003618 <checkForI2CDevices>:
 *      Author: Jacoby
 */
#include <stm32f4xx_hal.h>


void checkForI2CDevices(UART_HandleTypeDef uart, I2C_HandleTypeDef I2C ){
 8003618:	b084      	sub	sp, #16
 800361a:	b5b0      	push	{r4, r5, r7, lr}
 800361c:	b092      	sub	sp, #72	; 0x48
 800361e:	af00      	add	r7, sp, #0
 8003620:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8003624:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t Buffer[25] = {0};
 8003628:	2300      	movs	r3, #0
 800362a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800362c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	605a      	str	r2, [r3, #4]
 8003636:	609a      	str	r2, [r3, #8]
 8003638:	60da      	str	r2, [r3, #12]
 800363a:	611a      	str	r2, [r3, #16]
 800363c:	751a      	strb	r2, [r3, #20]
	uint8_t Space[] = " - ";
 800363e:	4b38      	ldr	r3, [pc, #224]	; (8003720 <checkForI2CDevices+0x108>)
 8003640:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t StartMSG[] = "Starting I2C Scanning: \r\n";
 8003642:	4b38      	ldr	r3, [pc, #224]	; (8003724 <checkForI2CDevices+0x10c>)
 8003644:	f107 040c 	add.w	r4, r7, #12
 8003648:	461d      	mov	r5, r3
 800364a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800364c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800364e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003652:	c403      	stmia	r4!, {r0, r1}
 8003654:	8022      	strh	r2, [r4, #0]
	uint8_t EndMSG[] = "Done! \r\n\r\n";
 8003656:	4a34      	ldr	r2, [pc, #208]	; (8003728 <checkForI2CDevices+0x110>)
 8003658:	463b      	mov	r3, r7
 800365a:	ca07      	ldmia	r2, {r0, r1, r2}
 800365c:	c303      	stmia	r3!, {r0, r1}
 800365e:	801a      	strh	r2, [r3, #0]
 8003660:	3302      	adds	r3, #2
 8003662:	0c12      	lsrs	r2, r2, #16
 8003664:	701a      	strb	r2, [r3, #0]

    uint8_t i = 0, ret;
 8003666:	2300      	movs	r3, #0
 8003668:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    HAL_Delay(1000);
 800366c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003670:	f001 fb22 	bl	8004cb8 <HAL_Delay>

    /*-[ I2C Bus Scanning ]-*/
    HAL_UART_Transmit(&uart, StartMSG, sizeof(StartMSG), HAL_MAX_DELAY);
 8003674:	f107 010c 	add.w	r1, r7, #12
 8003678:	f04f 33ff 	mov.w	r3, #4294967295
 800367c:	221a      	movs	r2, #26
 800367e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8003682:	f006 f930 	bl	80098e6 <HAL_UART_Transmit>
    for(i=1; i<128; i++)
 8003686:	2301      	movs	r3, #1
 8003688:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800368c:	e035      	b.n	80036fa <checkForI2CDevices+0xe2>
    {
        ret = HAL_I2C_IsDeviceReady(&I2C, (uint16_t)(i<<1), 3, 5);
 800368e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003692:	b29b      	uxth	r3, r3
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	b299      	uxth	r1, r3
 8003698:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 800369c:	2305      	movs	r3, #5
 800369e:	2203      	movs	r2, #3
 80036a0:	f002 fcf6 	bl	8006090 <HAL_I2C_IsDeviceReady>
 80036a4:	4603      	mov	r3, r0
 80036a6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
        if (ret != HAL_OK) /* No ACK Received At That Address */
 80036aa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d009      	beq.n	80036c6 <checkForI2CDevices+0xae>
        {
            HAL_UART_Transmit(&uart, Space, sizeof(Space), HAL_MAX_DELAY);
 80036b2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80036b6:	f04f 33ff 	mov.w	r3, #4294967295
 80036ba:	2204      	movs	r2, #4
 80036bc:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80036c0:	f006 f911 	bl	80098e6 <HAL_UART_Transmit>
 80036c4:	e014      	b.n	80036f0 <checkForI2CDevices+0xd8>
        }
        else if(ret == HAL_OK)
 80036c6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d110      	bne.n	80036f0 <checkForI2CDevices+0xd8>
        {
            sprintf(Buffer, "0x%X", i);
 80036ce:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80036d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036d6:	4915      	ldr	r1, [pc, #84]	; (800372c <checkForI2CDevices+0x114>)
 80036d8:	4618      	mov	r0, r3
 80036da:	f00b fa2f 	bl	800eb3c <siprintf>
            HAL_UART_Transmit(&uart, Buffer, sizeof(Buffer), HAL_MAX_DELAY);
 80036de:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80036e2:	f04f 33ff 	mov.w	r3, #4294967295
 80036e6:	2219      	movs	r2, #25
 80036e8:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80036ec:	f006 f8fb 	bl	80098e6 <HAL_UART_Transmit>
    for(i=1; i<128; i++)
 80036f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80036f4:	3301      	adds	r3, #1
 80036f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80036fa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80036fe:	2b00      	cmp	r3, #0
 8003700:	dac5      	bge.n	800368e <checkForI2CDevices+0x76>
        }
    }
    HAL_UART_Transmit(&uart, EndMSG, sizeof(EndMSG), HAL_MAX_DELAY);
 8003702:	4639      	mov	r1, r7
 8003704:	f04f 33ff 	mov.w	r3, #4294967295
 8003708:	220b      	movs	r2, #11
 800370a:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800370e:	f006 f8ea 	bl	80098e6 <HAL_UART_Transmit>
    /*--[ Scanning Done ]--*/

}
 8003712:	bf00      	nop
 8003714:	3748      	adds	r7, #72	; 0x48
 8003716:	46bd      	mov	sp, r7
 8003718:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800371c:	b004      	add	sp, #16
 800371e:	4770      	bx	lr
 8003720:	00202d20 	.word	0x00202d20
 8003724:	08012d9c 	.word	0x08012d9c
 8003728:	08012db8 	.word	0x08012db8
 800372c:	08012d94 	.word	0x08012d94

08003730 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 800373c:	2300      	movs	r3, #0
 800373e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	1e5a      	subs	r2, r3, #1
 8003744:	607a      	str	r2, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	bf14      	ite	ne
 800374a:	2301      	movne	r3, #1
 800374c:	2300      	moveq	r3, #0
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00e      	beq.n	8003772 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	1c59      	adds	r1, r3, #1
 800375e:	60b9      	str	r1, [r7, #8]
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	4619      	mov	r1, r3
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	4790      	blx	r2
 8003768:	4602      	mov	r2, r0
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	4413      	add	r3, r2
 800376e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8003770:	e7e6      	b.n	8003740 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8003772:	697b      	ldr	r3, [r7, #20]
}
 8003774:	4618      	mov	r0, r3
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	4a06      	ldr	r2, [pc, #24]	; (80037a0 <_ZN5PrintC1Ev+0x24>)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	605a      	str	r2, [r3, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4618      	mov	r0, r3
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	08013084 	.word	0x08013084

080037a4 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7ff ffe4 	bl	800377c <_ZN5PrintC1Ev>
 80037b4:	4a05      	ldr	r2, [pc, #20]	; (80037cc <_ZN6StreamC1Ev+0x28>)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037c0:	609a      	str	r2, [r3, #8]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4618      	mov	r0, r3
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	080130b4 	.word	0x080130b4

080037d0 <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff ffe1 	bl	80037a4 <_ZN6StreamC1Ev>
 80037e2:	4a16      	ldr	r2, [pc, #88]	; (800383c <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3390      	adds	r3, #144	; 0x90
 80037f2:	2220      	movs	r2, #32
 80037f4:	2100      	movs	r1, #0
 80037f6:	4618      	mov	r0, r3
 80037f8:	f00a f9b0 	bl	800db5c <memset>
  rxBufferIndex = 0;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4618      	mov	r0, r3
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	08013094 	.word	0x08013094

08003840 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	460b      	mov	r3, r1
 800384a:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003852:	2b00      	cmp	r3, #0
 8003854:	d01d      	beq.n	8003892 <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800385c:	2b1f      	cmp	r3, #31
 800385e:	d901      	bls.n	8003864 <_ZN7TwoWire5writeEh+0x24>
      return 0;
 8003860:	2300      	movs	r3, #0
 8003862:	e028      	b.n	80038b6 <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800386a:	4619      	mov	r1, r3
 800386c:	78fa      	ldrb	r2, [r7, #3]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	440b      	add	r3, r1
 8003872:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800387a:	3301      	adds	r3, #1
 800387c:	b2da      	uxtb	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8003890:	e010      	b.n	80038b4 <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f984 	bl	8003ba0 <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 8003898:	1cfb      	adds	r3, r7, #3
 800389a:	2201      	movs	r2, #1
 800389c:	4619      	mov	r1, r3
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f8b7 	bl	8003a12 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 f949 	bl	8003b3c <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	333c      	adds	r3, #60	; 0x3c
 80038ae:	4618      	mov	r0, r3
 80038b0:	f002 fd1c 	bl	80062ec <HAL_I2C_EnableListen_IT>
  }
  return 1;
 80038b4:	2301      	movs	r3, #1
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b086      	sub	sp, #24
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	60f8      	str	r0, [r7, #12]
 80038c6:	60b9      	str	r1, [r7, #8]
 80038c8:	607a      	str	r2, [r7, #4]
  if(transmitting){
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d013      	beq.n	80038fc <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 80038d4:	2300      	movs	r3, #0
 80038d6:	617b      	str	r3, [r7, #20]
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d21e      	bcs.n	800391e <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68b9      	ldr	r1, [r7, #8]
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	440a      	add	r2, r1
 80038ec:	7812      	ldrb	r2, [r2, #0]
 80038ee:	4611      	mov	r1, r2
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	3301      	adds	r3, #1
 80038f8:	617b      	str	r3, [r7, #20]
 80038fa:	e7ed      	b.n	80038d8 <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 f94f 	bl	8003ba0 <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	461a      	mov	r2, r3
 8003906:	68b9      	ldr	r1, [r7, #8]
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f000 f882 	bl	8003a12 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f000 f914 	bl	8003b3c <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	333c      	adds	r3, #60	; 0x3c
 8003918:	4618      	mov	r0, r3
 800391a:	f002 fce7 	bl	80062ec <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 800391e:	687b      	ldr	r3, [r7, #4]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3718      	adds	r7, #24
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003936:	b2db      	uxtb	r3, r3
 8003938:	461a      	mov	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	1ad3      	subs	r3, r2, r3
}
 8003944:	4618      	mov	r0, r3
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  int value = -1;
 8003958:	f04f 33ff 	mov.w	r3, #4294967295
 800395c:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003964:	b2da      	uxtb	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800396c:	b2db      	uxtb	r3, r3
 800396e:	429a      	cmp	r2, r3
 8003970:	bf34      	ite	cc
 8003972:	2301      	movcc	r3, #1
 8003974:	2300      	movcs	r3, #0
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d012      	beq.n	80039a2 <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003982:	b2db      	uxtb	r3, r3
 8003984:	461a      	mov	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4413      	add	r3, r2
 800398a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800398e:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003996:	b2db      	uxtb	r3, r3
 8003998:	3301      	adds	r3, #1
 800399a:	b2da      	uxtb	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 80039a2:	68fb      	ldr	r3, [r7, #12]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  int value = -1;
 80039b8:	f04f 33ff 	mov.w	r3, #4294967295
 80039bc:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	429a      	cmp	r2, r3
 80039d0:	bf34      	ite	cc
 80039d2:	2301      	movcc	r3, #1
 80039d4:	2300      	movcs	r3, #0
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d009      	beq.n	80039f0 <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	461a      	mov	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4413      	add	r3, r2
 80039ea:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80039ee:	60fb      	str	r3, [r7, #12]
  }

  return value;
 80039f0:	68fb      	ldr	r3, [r7, #12]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b083      	sub	sp, #12
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <_ZN7TwoWire15i2c_slave_writeEPKci>:

    return 1;
}

int TwoWire::i2c_slave_write(const char *data, int length)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b089      	sub	sp, #36	; 0x24
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	60f8      	str	r0, [r7, #12]
 8003a1a:	60b9      	str	r1, [r7, #8]
 8003a1c:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a26:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	dd41      	ble.n	8003ab2 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 8003a2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a32:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a3e:	2b80      	cmp	r3, #128	; 0x80
 8003a40:	bf14      	ite	ne
 8003a42:	2301      	movne	r3, #1
 8003a44:	2300      	moveq	r3, #0
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d008      	beq.n	8003a5e <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1ed      	bne.n	8003a34 <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 8003a58:	f04f 33ff 	mov.w	r3, #4294967295
 8003a5c:	e068      	b.n	8003b30 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	1c5a      	adds	r2, r3, #1
 8003a62:	60ba      	str	r2, [r7, #8]
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	461a      	mov	r2, r3
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	611a      	str	r2, [r3, #16]
        length--;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	607b      	str	r3, [r7, #4]
        size++;
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	3301      	adds	r3, #1
 8003a76:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	f003 0304 	and.w	r3, r3, #4
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d104      	bne.n	8003a90 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e000      	b.n	8003a92 <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 8003a90:	2300      	movs	r3, #0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0c8      	beq.n	8003a28 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	1c5a      	adds	r2, r3, #1
 8003a9a:	60ba      	str	r2, [r7, #8]
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	611a      	str	r2, [r3, #16]
            length--;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	607b      	str	r3, [r7, #4]
            size++;
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	3301      	adds	r3, #1
 8003aae:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 8003ab0:	e7ba      	b.n	8003a28 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 8003ab2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ab6:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ac6:	bf14      	ite	ne
 8003ac8:	2301      	movne	r3, #1
 8003aca:	2300      	moveq	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d008      	beq.n	8003ae4 <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1ec      	bne.n	8003ab8 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 8003ade:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae2:	e025      	b.n	8003b30 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003aec:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 8003aee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003af2:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	bf0c      	ite	eq
 8003b02:	2301      	moveq	r3, #1
 8003b04:	2300      	movne	r3, #0
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d008      	beq.n	8003b1e <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1ed      	bne.n	8003af4 <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 8003b18:	f04f 33ff 	mov.w	r3, #4294967295
 8003b1c:	e008      	b.n	8003b30 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 8003b2e:	69bb      	ldr	r3, [r7, #24]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3724      	adds	r7, #36	; 0x24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b48:	4a12      	ldr	r2, [pc, #72]	; (8003b94 <_ZN7TwoWire15enableInterruptEv+0x58>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d106      	bne.n	8003b5c <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8003b4e:	2049      	movs	r0, #73	; 0x49
 8003b50:	f001 fc40 	bl	80053d4 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8003b54:	2048      	movs	r0, #72	; 0x48
 8003b56:	f001 fc3d 	bl	80053d4 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8003b5a:	e016      	b.n	8003b8a <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b60:	4a0d      	ldr	r2, [pc, #52]	; (8003b98 <_ZN7TwoWire15enableInterruptEv+0x5c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d106      	bne.n	8003b74 <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8003b66:	2022      	movs	r0, #34	; 0x22
 8003b68:	f001 fc34 	bl	80053d4 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003b6c:	2021      	movs	r0, #33	; 0x21
 8003b6e:	f001 fc31 	bl	80053d4 <HAL_NVIC_EnableIRQ>
}
 8003b72:	e00a      	b.n	8003b8a <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b78:	4a08      	ldr	r2, [pc, #32]	; (8003b9c <_ZN7TwoWire15enableInterruptEv+0x60>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d105      	bne.n	8003b8a <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003b7e:	2020      	movs	r0, #32
 8003b80:	f001 fc28 	bl	80053d4 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003b84:	201f      	movs	r0, #31
 8003b86:	f001 fc25 	bl	80053d4 <HAL_NVIC_EnableIRQ>
}
 8003b8a:	bf00      	nop
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40005c00 	.word	0x40005c00
 8003b98:	40005800 	.word	0x40005800
 8003b9c:	40005400 	.word	0x40005400

08003ba0 <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bac:	4a12      	ldr	r2, [pc, #72]	; (8003bf8 <_ZN7TwoWire16disableInterruptEv+0x58>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d106      	bne.n	8003bc0 <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8003bb2:	2049      	movs	r0, #73	; 0x49
 8003bb4:	f001 fc1c 	bl	80053f0 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8003bb8:	2048      	movs	r0, #72	; 0x48
 8003bba:	f001 fc19 	bl	80053f0 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8003bbe:	e016      	b.n	8003bee <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc4:	4a0d      	ldr	r2, [pc, #52]	; (8003bfc <_ZN7TwoWire16disableInterruptEv+0x5c>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d106      	bne.n	8003bd8 <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8003bca:	2022      	movs	r0, #34	; 0x22
 8003bcc:	f001 fc10 	bl	80053f0 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8003bd0:	2021      	movs	r0, #33	; 0x21
 8003bd2:	f001 fc0d 	bl	80053f0 <HAL_NVIC_DisableIRQ>
}
 8003bd6:	e00a      	b.n	8003bee <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bdc:	4a08      	ldr	r2, [pc, #32]	; (8003c00 <_ZN7TwoWire16disableInterruptEv+0x60>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d105      	bne.n	8003bee <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8003be2:	2020      	movs	r0, #32
 8003be4:	f001 fc04 	bl	80053f0 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8003be8:	201f      	movs	r0, #31
 8003bea:	f001 fc01 	bl	80053f0 <HAL_NVIC_DisableIRQ>
}
 8003bee:	bf00      	nop
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40005c00 	.word	0x40005c00
 8003bfc:	40005800 	.word	0x40005800
 8003c00:	40005400 	.word	0x40005400

08003c04 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d110      	bne.n	8003c36 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d10b      	bne.n	8003c36 <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 8003c1e:	4908      	ldr	r1, [pc, #32]	; (8003c40 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003c20:	4808      	ldr	r0, [pc, #32]	; (8003c44 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003c22:	f7ff fdd5 	bl	80037d0 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 8003c26:	4908      	ldr	r1, [pc, #32]	; (8003c48 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8003c28:	4808      	ldr	r0, [pc, #32]	; (8003c4c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8003c2a:	f7ff fdd1 	bl	80037d0 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 8003c2e:	4908      	ldr	r1, [pc, #32]	; (8003c50 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003c30:	4808      	ldr	r0, [pc, #32]	; (8003c54 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8003c32:	f7ff fdcd 	bl	80037d0 <_ZN7TwoWireC1EP11I2C_TypeDef>
 8003c36:	bf00      	nop
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	40005400 	.word	0x40005400
 8003c44:	20000268 	.word	0x20000268
 8003c48:	40005800 	.word	0x40005800
 8003c4c:	20000320 	.word	0x20000320
 8003c50:	40005c00 	.word	0x40005c00
 8003c54:	200003d8 	.word	0x200003d8

08003c58 <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c60:	2001      	movs	r0, #1
 8003c62:	f7ff ffcf 	bl	8003c04 <_Z41__static_initialization_and_destruction_0ii>
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8003c68:	b590      	push	{r4, r7, lr}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	607a      	str	r2, [r7, #4]
 8003c72:	461a      	mov	r2, r3
 8003c74:	460b      	mov	r3, r1
 8003c76:	72fb      	strb	r3, [r7, #11]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	685c      	ldr	r4, [r3, #4]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6898      	ldr	r0, [r3, #8]
 8003c84:	893b      	ldrh	r3, [r7, #8]
 8003c86:	7af9      	ldrb	r1, [r7, #11]
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	47a0      	blx	r4
 8003c8c:	6178      	str	r0, [r7, #20]

  return ret;
 8003c8e:	697b      	ldr	r3, [r7, #20]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	371c      	adds	r7, #28
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd90      	pop	{r4, r7, pc}

08003c98 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003c98:	b590      	push	{r4, r7, lr}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	607a      	str	r2, [r7, #4]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	72fb      	strb	r3, [r7, #11]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681c      	ldr	r4, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6898      	ldr	r0, [r3, #8]
 8003cb4:	893b      	ldrh	r3, [r7, #8]
 8003cb6:	7af9      	ldrb	r1, [r7, #11]
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	47a0      	blx	r4
 8003cbc:	6178      	str	r0, [r7, #20]

  return ret;
 8003cbe:	697b      	ldr	r3, [r7, #20]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	371c      	adds	r7, #28
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd90      	pop	{r4, r7, pc}

08003cc8 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	ee07 3a90 	vmov	s15, r3
 8003cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cda:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003cf4 <lps22hh_from_lsb_to_hpa+0x2c>
 8003cde:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003ce2:	eef0 7a66 	vmov.f32	s15, s13
}
 8003ce6:	eeb0 0a67 	vmov.f32	s0, s15
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	49800000 	.word	0x49800000

08003cf8 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8003d02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d06:	ee07 3a90 	vmov	s15, r3
 8003d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d0e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003d28 <lps22hh_from_lsb_to_celsius+0x30>
 8003d12:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003d16:	eef0 7a66 	vmov.f32	s15, s13
}
 8003d1a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	42c80000 	.word	0x42c80000

08003d2c <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	460b      	mov	r3, r1
 8003d36:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8003d38:	f107 0208 	add.w	r2, r7, #8
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	2110      	movs	r1, #16
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f7ff ff91 	bl	8003c68 <lps22hh_read_reg>
 8003d46:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10f      	bne.n	8003d6e <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8003d4e:	78fb      	ldrb	r3, [r7, #3]
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	7a3b      	ldrb	r3, [r7, #8]
 8003d58:	f362 0341 	bfi	r3, r2, #1, #1
 8003d5c:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8003d5e:	f107 0208 	add.w	r2, r7, #8
 8003d62:	2301      	movs	r3, #1
 8003d64:	2110      	movs	r1, #16
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7ff ff96 	bl	8003c98 <lps22hh_write_reg>
 8003d6c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	460b      	mov	r3, r1
 8003d82:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8003d84:	f107 0210 	add.w	r2, r7, #16
 8003d88:	2301      	movs	r3, #1
 8003d8a:	2110      	movs	r1, #16
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7ff ff6b 	bl	8003c68 <lps22hh_read_reg>
 8003d92:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d107      	bne.n	8003daa <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8003d9a:	f107 020c 	add.w	r2, r7, #12
 8003d9e:	2301      	movs	r3, #1
 8003da0:	2111      	movs	r1, #17
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7ff ff60 	bl	8003c68 <lps22hh_read_reg>
 8003da8:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10f      	bne.n	8003dd0 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8003db0:	78fb      	ldrb	r3, [r7, #3]
 8003db2:	f003 0307 	and.w	r3, r3, #7
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	7c3b      	ldrb	r3, [r7, #16]
 8003dba:	f362 1306 	bfi	r3, r2, #4, #3
 8003dbe:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8003dc0:	f107 0210 	add.w	r2, r7, #16
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	2110      	movs	r1, #16
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f7ff ff65 	bl	8003c98 <lps22hh_write_reg>
 8003dce:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d119      	bne.n	8003e0a <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8003dd6:	78fb      	ldrb	r3, [r7, #3]
 8003dd8:	091b      	lsrs	r3, r3, #4
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	7b3b      	ldrb	r3, [r7, #12]
 8003de2:	f362 0341 	bfi	r3, r2, #1, #1
 8003de6:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8003de8:	78fb      	ldrb	r3, [r7, #3]
 8003dea:	08db      	lsrs	r3, r3, #3
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	7b3b      	ldrb	r3, [r7, #12]
 8003df4:	f362 0300 	bfi	r3, r2, #0, #1
 8003df8:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8003dfa:	f107 020c 	add.w	r2, r7, #12
 8003dfe:	2301      	movs	r3, #1
 8003e00:	2111      	movs	r1, #17
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7ff ff48 	bl	8003c98 <lps22hh_write_reg>
 8003e08:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8003e0a:	697b      	ldr	r3, [r7, #20]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3718      	adds	r7, #24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <lps22hh_temp_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8003e1e:	f107 0208 	add.w	r2, r7, #8
 8003e22:	2301      	movs	r3, #1
 8003e24:	2127      	movs	r1, #39	; 0x27
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7ff ff1e 	bl	8003c68 <lps22hh_read_reg>
 8003e2c:	60f8      	str	r0, [r7, #12]
  *val = reg.t_da;
 8003e2e:	7a3b      	ldrb	r3, [r7, #8]
 8003e30:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	461a      	mov	r2, r3
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	701a      	strb	r2, [r3, #0]

  return ret;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b084      	sub	sp, #16
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
 8003e4e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8003e50:	f107 0208 	add.w	r2, r7, #8
 8003e54:	2303      	movs	r3, #3
 8003e56:	2128      	movs	r1, #40	; 0x28
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f7ff ff05 	bl	8003c68 <lps22hh_read_reg>
 8003e5e:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8003e60:	7abb      	ldrb	r3, [r7, #10]
 8003e62:	461a      	mov	r2, r3
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	021b      	lsls	r3, r3, #8
 8003e6e:	7a7a      	ldrb	r2, [r7, #9]
 8003e70:	441a      	add	r2, r3
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	021b      	lsls	r3, r3, #8
 8003e7c:	7a3a      	ldrb	r2, [r7, #8]
 8003e7e:	441a      	add	r2, r3
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	021a      	lsls	r2, r3, #8
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	601a      	str	r2, [r3, #0]

  return ret;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8003ea2:	f107 0208 	add.w	r2, r7, #8
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	212b      	movs	r1, #43	; 0x2b
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7ff fedc 	bl	8003c68 <lps22hh_read_reg>
 8003eb0:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8003eb2:	7a7b      	ldrb	r3, [r7, #9]
 8003eb4:	b21a      	sxth	r2, r3
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	021b      	lsls	r3, r3, #8
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	7a3b      	ldrb	r3, [r7, #8]
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	4413      	add	r3, r2
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	b21a      	sxth	r2, r3
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	801a      	strh	r2, [r3, #0]

  return ret;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b084      	sub	sp, #16
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
 8003ee6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8003ee8:	2301      	movs	r3, #1
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	210f      	movs	r1, #15
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7ff feba 	bl	8003c68 <lps22hh_read_reg>
 8003ef4:	60f8      	str	r0, [r7, #12]

  return ret;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	460b      	mov	r3, r1
 8003f0a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8003f0c:	f107 0208 	add.w	r2, r7, #8
 8003f10:	2301      	movs	r3, #1
 8003f12:	2111      	movs	r1, #17
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f7ff fea7 	bl	8003c68 <lps22hh_read_reg>
 8003f1a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10f      	bne.n	8003f42 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8003f22:	78fb      	ldrb	r3, [r7, #3]
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	7a3b      	ldrb	r3, [r7, #8]
 8003f2c:	f362 0382 	bfi	r3, r2, #2, #1
 8003f30:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8003f32:	f107 0208 	add.w	r2, r7, #8
 8003f36:	2301      	movs	r3, #1
 8003f38:	2111      	movs	r1, #17
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7ff feac 	bl	8003c98 <lps22hh_write_reg>
 8003f40:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003f42:	68fb      	ldr	r3, [r7, #12]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8003f56:	f107 0208 	add.w	r2, r7, #8
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	2111      	movs	r1, #17
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7ff fe82 	bl	8003c68 <lps22hh_read_reg>
 8003f64:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8003f66:	7a3b      	ldrb	r3, [r7, #8]
 8003f68:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	461a      	mov	r2, r3
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	701a      	strb	r2, [r3, #0]

  return ret;
 8003f74:	68fb      	ldr	r3, [r7, #12]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8003f7e:	b590      	push	{r4, r7, lr}
 8003f80:	b087      	sub	sp, #28
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	60f8      	str	r0, [r7, #12]
 8003f86:	607a      	str	r2, [r7, #4]
 8003f88:	461a      	mov	r2, r3
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	72fb      	strb	r3, [r7, #11]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	685c      	ldr	r4, [r3, #4]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6898      	ldr	r0, [r3, #8]
 8003f9a:	893b      	ldrh	r3, [r7, #8]
 8003f9c:	7af9      	ldrb	r1, [r7, #11]
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	47a0      	blx	r4
 8003fa2:	6178      	str	r0, [r7, #20]

  return ret;
 8003fa4:	697b      	ldr	r3, [r7, #20]
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	371c      	adds	r7, #28
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd90      	pop	{r4, r7, pc}

08003fae <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003fae:	b590      	push	{r4, r7, lr}
 8003fb0:	b087      	sub	sp, #28
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	60f8      	str	r0, [r7, #12]
 8003fb6:	607a      	str	r2, [r7, #4]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	460b      	mov	r3, r1
 8003fbc:	72fb      	strb	r3, [r7, #11]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681c      	ldr	r4, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6898      	ldr	r0, [r3, #8]
 8003fca:	893b      	ldrh	r3, [r7, #8]
 8003fcc:	7af9      	ldrb	r1, [r7, #11]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	47a0      	blx	r4
 8003fd2:	6178      	str	r0, [r7, #20]

  return ret;
 8003fd4:	697b      	ldr	r3, [r7, #20]
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	371c      	adds	r7, #28
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd90      	pop	{r4, r7, pc}
	...

08003fe0 <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8003fea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fee:	ee07 3a90 	vmov	s15, r3
 8003ff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ff6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800400c <lsm6dsr_from_fs2g_to_mg+0x2c>
 8003ffa:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003ffe:	eeb0 0a67 	vmov.f32	s0, s15
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	3d79db23 	.word	0x3d79db23

08004010 <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	4603      	mov	r3, r0
 8004018:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 800401a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800401e:	ee07 3a90 	vmov	s15, r3
 8004022:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004026:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800403c <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 800402a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800402e:	eeb0 0a67 	vmov.f32	s0, s15
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr
 800403c:	428c0000 	.word	0x428c0000

08004040 <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	4603      	mov	r3, r0
 8004048:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 800404a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800404e:	ee07 3a90 	vmov	s15, r3
 8004052:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004056:	eddf 6a07 	vldr	s13, [pc, #28]	; 8004074 <lsm6dsr_from_lsb_to_celsius+0x34>
 800405a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800405e:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004062:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8004066:	eeb0 0a67 	vmov.f32	s0, s15
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	43800000 	.word	0x43800000

08004078 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	460b      	mov	r3, r1
 8004082:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8004084:	f107 0208 	add.w	r2, r7, #8
 8004088:	2301      	movs	r3, #1
 800408a:	2110      	movs	r1, #16
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f7ff ff76 	bl	8003f7e <lsm6dsr_read_reg>
 8004092:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10f      	bne.n	80040ba <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 800409a:	78fb      	ldrb	r3, [r7, #3]
 800409c:	f003 0303 	and.w	r3, r3, #3
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	7a3b      	ldrb	r3, [r7, #8]
 80040a4:	f362 0383 	bfi	r3, r2, #2, #2
 80040a8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 80040aa:	f107 0208 	add.w	r2, r7, #8
 80040ae:	2301      	movs	r3, #1
 80040b0:	2110      	movs	r1, #16
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7ff ff7b 	bl	8003fae <lsm6dsr_write_reg>
 80040b8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80040ba:	68fb      	ldr	r3, [r7, #12]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	460b      	mov	r3, r1
 80040ce:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 80040d0:	78fb      	ldrb	r3, [r7, #3]
 80040d2:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 80040d4:	f107 030c 	add.w	r3, r7, #12
 80040d8:	4619      	mov	r1, r3
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 fbb0 	bl	8004840 <lsm6dsr_fsm_enable_get>
 80040e0:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f040 80c4 	bne.w	8004272 <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80040ea:	7b3b      	ldrb	r3, [r7, #12]
 80040ec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80040f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80040f2:	7b3b      	ldrb	r3, [r7, #12]
 80040f4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80040f8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80040fa:	4313      	orrs	r3, r2
 80040fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80040fe:	7b3b      	ldrb	r3, [r7, #12]
 8004100:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004104:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004106:	4313      	orrs	r3, r2
 8004108:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800410a:	7b3b      	ldrb	r3, [r7, #12]
 800410c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004110:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004112:	4313      	orrs	r3, r2
 8004114:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004116:	7b3b      	ldrb	r3, [r7, #12]
 8004118:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800411c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800411e:	4313      	orrs	r3, r2
 8004120:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004122:	7b3b      	ldrb	r3, [r7, #12]
 8004124:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004128:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800412a:	4313      	orrs	r3, r2
 800412c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800412e:	7b3b      	ldrb	r3, [r7, #12]
 8004130:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004134:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004136:	4313      	orrs	r3, r2
 8004138:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800413a:	7b3b      	ldrb	r3, [r7, #12]
 800413c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004140:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004142:	4313      	orrs	r3, r2
 8004144:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004146:	7b7b      	ldrb	r3, [r7, #13]
 8004148:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800414c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800414e:	4313      	orrs	r3, r2
 8004150:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004152:	7b7b      	ldrb	r3, [r7, #13]
 8004154:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004158:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800415a:	4313      	orrs	r3, r2
 800415c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800415e:	7b7b      	ldrb	r3, [r7, #13]
 8004160:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004164:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004166:	4313      	orrs	r3, r2
 8004168:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800416a:	7b7b      	ldrb	r3, [r7, #13]
 800416c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004170:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004172:	4313      	orrs	r3, r2
 8004174:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004176:	7b7b      	ldrb	r3, [r7, #13]
 8004178:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800417c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800417e:	4313      	orrs	r3, r2
 8004180:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004182:	7b7b      	ldrb	r3, [r7, #13]
 8004184:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004188:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800418a:	4313      	orrs	r3, r2
 800418c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800418e:	7b7b      	ldrb	r3, [r7, #13]
 8004190:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004194:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004196:	4313      	orrs	r3, r2
 8004198:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800419a:	7b7b      	ldrb	r3, [r7, #13]
 800419c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80041a0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80041a2:	4313      	orrs	r3, r2
 80041a4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d163      	bne.n	8004272 <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 80041aa:	f107 030b 	add.w	r3, r7, #11
 80041ae:	4619      	mov	r1, r3
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 fb71 	bl	8004898 <lsm6dsr_fsm_data_rate_get>
 80041b6:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d159      	bne.n	8004272 <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80041be:	7afb      	ldrb	r3, [r7, #11]
 80041c0:	2b03      	cmp	r3, #3
 80041c2:	d853      	bhi.n	800426c <lsm6dsr_xl_data_rate_set+0x1a8>
 80041c4:	a201      	add	r2, pc, #4	; (adr r2, 80041cc <lsm6dsr_xl_data_rate_set+0x108>)
 80041c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ca:	bf00      	nop
 80041cc:	080041dd 	.word	0x080041dd
 80041d0:	080041ef 	.word	0x080041ef
 80041d4:	0800420d 	.word	0x0800420d
 80041d8:	08004237 	.word	0x08004237
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 80041dc:	78fb      	ldrb	r3, [r7, #3]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d102      	bne.n	80041e8 <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 80041e2:	2301      	movs	r3, #1
 80041e4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80041e6:	e045      	b.n	8004274 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80041e8:	78fb      	ldrb	r3, [r7, #3]
 80041ea:	75fb      	strb	r3, [r7, #23]
            break;
 80041ec:	e042      	b.n	8004274 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 80041ee:	78fb      	ldrb	r3, [r7, #3]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d102      	bne.n	80041fa <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 80041f4:	2302      	movs	r3, #2
 80041f6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80041f8:	e03c      	b.n	8004274 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80041fa:	78fb      	ldrb	r3, [r7, #3]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d102      	bne.n	8004206 <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8004200:	2302      	movs	r3, #2
 8004202:	75fb      	strb	r3, [r7, #23]
            break;
 8004204:	e036      	b.n	8004274 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004206:	78fb      	ldrb	r3, [r7, #3]
 8004208:	75fb      	strb	r3, [r7, #23]
            break;
 800420a:	e033      	b.n	8004274 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 800420c:	78fb      	ldrb	r3, [r7, #3]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d102      	bne.n	8004218 <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8004212:	2303      	movs	r3, #3
 8004214:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004216:	e02d      	b.n	8004274 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8004218:	78fb      	ldrb	r3, [r7, #3]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d102      	bne.n	8004224 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800421e:	2303      	movs	r3, #3
 8004220:	75fb      	strb	r3, [r7, #23]
            break;
 8004222:	e027      	b.n	8004274 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8004224:	78fb      	ldrb	r3, [r7, #3]
 8004226:	2b02      	cmp	r3, #2
 8004228:	d102      	bne.n	8004230 <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800422a:	2303      	movs	r3, #3
 800422c:	75fb      	strb	r3, [r7, #23]
            break;
 800422e:	e021      	b.n	8004274 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004230:	78fb      	ldrb	r3, [r7, #3]
 8004232:	75fb      	strb	r3, [r7, #23]
            break;
 8004234:	e01e      	b.n	8004274 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8004236:	78fb      	ldrb	r3, [r7, #3]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d102      	bne.n	8004242 <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 800423c:	2304      	movs	r3, #4
 800423e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004240:	e018      	b.n	8004274 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8004242:	78fb      	ldrb	r3, [r7, #3]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d102      	bne.n	800424e <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8004248:	2304      	movs	r3, #4
 800424a:	75fb      	strb	r3, [r7, #23]
            break;
 800424c:	e012      	b.n	8004274 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 800424e:	78fb      	ldrb	r3, [r7, #3]
 8004250:	2b02      	cmp	r3, #2
 8004252:	d102      	bne.n	800425a <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8004254:	2304      	movs	r3, #4
 8004256:	75fb      	strb	r3, [r7, #23]
            break;
 8004258:	e00c      	b.n	8004274 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 800425a:	78fb      	ldrb	r3, [r7, #3]
 800425c:	2b03      	cmp	r3, #3
 800425e:	d102      	bne.n	8004266 <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8004260:	2304      	movs	r3, #4
 8004262:	75fb      	strb	r3, [r7, #23]
            break;
 8004264:	e006      	b.n	8004274 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004266:	78fb      	ldrb	r3, [r7, #3]
 8004268:	75fb      	strb	r3, [r7, #23]
            break;
 800426a:	e003      	b.n	8004274 <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 800426c:	78fb      	ldrb	r3, [r7, #3]
 800426e:	75fb      	strb	r3, [r7, #23]
            break;
 8004270:	e000      	b.n	8004274 <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 8004272:	bf00      	nop
    }
  }

  if (ret == 0)
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d107      	bne.n	800428a <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800427a:	f107 0208 	add.w	r2, r7, #8
 800427e:	2301      	movs	r3, #1
 8004280:	2110      	movs	r1, #16
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7ff fe7b 	bl	8003f7e <lsm6dsr_read_reg>
 8004288:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10f      	bne.n	80042b0 <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8004290:	7dfb      	ldrb	r3, [r7, #23]
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	b2da      	uxtb	r2, r3
 8004298:	7a3b      	ldrb	r3, [r7, #8]
 800429a:	f362 1307 	bfi	r3, r2, #4, #4
 800429e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 80042a0:	f107 0208 	add.w	r2, r7, #8
 80042a4:	2301      	movs	r3, #1
 80042a6:	2110      	movs	r1, #16
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7ff fe80 	bl	8003fae <lsm6dsr_write_reg>
 80042ae:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80042b0:	693b      	ldr	r3, [r7, #16]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3718      	adds	r7, #24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop

080042bc <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	460b      	mov	r3, r1
 80042c6:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80042c8:	f107 0208 	add.w	r2, r7, #8
 80042cc:	2301      	movs	r3, #1
 80042ce:	2111      	movs	r1, #17
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f7ff fe54 	bl	8003f7e <lsm6dsr_read_reg>
 80042d6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10f      	bne.n	80042fe <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 80042de:	78fb      	ldrb	r3, [r7, #3]
 80042e0:	f003 030f 	and.w	r3, r3, #15
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	7a3b      	ldrb	r3, [r7, #8]
 80042e8:	f362 0303 	bfi	r3, r2, #0, #4
 80042ec:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80042ee:	f107 0208 	add.w	r2, r7, #8
 80042f2:	2301      	movs	r3, #1
 80042f4:	2111      	movs	r1, #17
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7ff fe59 	bl	8003fae <lsm6dsr_write_reg>
 80042fc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80042fe:	68fb      	ldr	r3, [r7, #12]
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	460b      	mov	r3, r1
 8004312:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 8004314:	78fb      	ldrb	r3, [r7, #3]
 8004316:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8004318:	f107 030c 	add.w	r3, r7, #12
 800431c:	4619      	mov	r1, r3
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 fa8e 	bl	8004840 <lsm6dsr_fsm_enable_get>
 8004324:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	2b00      	cmp	r3, #0
 800432a:	f040 80c4 	bne.w	80044b6 <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800432e:	7b3b      	ldrb	r3, [r7, #12]
 8004330:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004334:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004336:	7b3b      	ldrb	r3, [r7, #12]
 8004338:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800433c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800433e:	4313      	orrs	r3, r2
 8004340:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004342:	7b3b      	ldrb	r3, [r7, #12]
 8004344:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004348:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800434a:	4313      	orrs	r3, r2
 800434c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800434e:	7b3b      	ldrb	r3, [r7, #12]
 8004350:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004354:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004356:	4313      	orrs	r3, r2
 8004358:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800435a:	7b3b      	ldrb	r3, [r7, #12]
 800435c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004360:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004362:	4313      	orrs	r3, r2
 8004364:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004366:	7b3b      	ldrb	r3, [r7, #12]
 8004368:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800436c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800436e:	4313      	orrs	r3, r2
 8004370:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004372:	7b3b      	ldrb	r3, [r7, #12]
 8004374:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004378:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800437a:	4313      	orrs	r3, r2
 800437c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800437e:	7b3b      	ldrb	r3, [r7, #12]
 8004380:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004384:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004386:	4313      	orrs	r3, r2
 8004388:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800438a:	7b7b      	ldrb	r3, [r7, #13]
 800438c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004390:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004392:	4313      	orrs	r3, r2
 8004394:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004396:	7b7b      	ldrb	r3, [r7, #13]
 8004398:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800439c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800439e:	4313      	orrs	r3, r2
 80043a0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80043a2:	7b7b      	ldrb	r3, [r7, #13]
 80043a4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80043a8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80043aa:	4313      	orrs	r3, r2
 80043ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80043ae:	7b7b      	ldrb	r3, [r7, #13]
 80043b0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80043b4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80043b6:	4313      	orrs	r3, r2
 80043b8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80043ba:	7b7b      	ldrb	r3, [r7, #13]
 80043bc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80043c0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80043c2:	4313      	orrs	r3, r2
 80043c4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80043c6:	7b7b      	ldrb	r3, [r7, #13]
 80043c8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80043cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80043ce:	4313      	orrs	r3, r2
 80043d0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80043d2:	7b7b      	ldrb	r3, [r7, #13]
 80043d4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80043d8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80043da:	4313      	orrs	r3, r2
 80043dc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80043de:	7b7b      	ldrb	r3, [r7, #13]
 80043e0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80043e4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80043e6:	4313      	orrs	r3, r2
 80043e8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d163      	bne.n	80044b6 <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 80043ee:	f107 030b 	add.w	r3, r7, #11
 80043f2:	4619      	mov	r1, r3
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 fa4f 	bl	8004898 <lsm6dsr_fsm_data_rate_get>
 80043fa:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d159      	bne.n	80044b6 <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8004402:	7afb      	ldrb	r3, [r7, #11]
 8004404:	2b03      	cmp	r3, #3
 8004406:	d853      	bhi.n	80044b0 <lsm6dsr_gy_data_rate_set+0x1a8>
 8004408:	a201      	add	r2, pc, #4	; (adr r2, 8004410 <lsm6dsr_gy_data_rate_set+0x108>)
 800440a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440e:	bf00      	nop
 8004410:	08004421 	.word	0x08004421
 8004414:	08004433 	.word	0x08004433
 8004418:	08004451 	.word	0x08004451
 800441c:	0800447b 	.word	0x0800447b
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 8004420:	78fb      	ldrb	r3, [r7, #3]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d102      	bne.n	800442c <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 8004426:	2301      	movs	r3, #1
 8004428:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800442a:	e045      	b.n	80044b8 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800442c:	78fb      	ldrb	r3, [r7, #3]
 800442e:	75fb      	strb	r3, [r7, #23]
            break;
 8004430:	e042      	b.n	80044b8 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8004432:	78fb      	ldrb	r3, [r7, #3]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d102      	bne.n	800443e <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8004438:	2302      	movs	r3, #2
 800443a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800443c:	e03c      	b.n	80044b8 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 800443e:	78fb      	ldrb	r3, [r7, #3]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d102      	bne.n	800444a <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8004444:	2302      	movs	r3, #2
 8004446:	75fb      	strb	r3, [r7, #23]
            break;
 8004448:	e036      	b.n	80044b8 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800444a:	78fb      	ldrb	r3, [r7, #3]
 800444c:	75fb      	strb	r3, [r7, #23]
            break;
 800444e:	e033      	b.n	80044b8 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8004450:	78fb      	ldrb	r3, [r7, #3]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d102      	bne.n	800445c <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8004456:	2303      	movs	r3, #3
 8004458:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800445a:	e02d      	b.n	80044b8 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 800445c:	78fb      	ldrb	r3, [r7, #3]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d102      	bne.n	8004468 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8004462:	2303      	movs	r3, #3
 8004464:	75fb      	strb	r3, [r7, #23]
            break;
 8004466:	e027      	b.n	80044b8 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8004468:	78fb      	ldrb	r3, [r7, #3]
 800446a:	2b02      	cmp	r3, #2
 800446c:	d102      	bne.n	8004474 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800446e:	2303      	movs	r3, #3
 8004470:	75fb      	strb	r3, [r7, #23]
            break;
 8004472:	e021      	b.n	80044b8 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004474:	78fb      	ldrb	r3, [r7, #3]
 8004476:	75fb      	strb	r3, [r7, #23]
            break;
 8004478:	e01e      	b.n	80044b8 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 800447a:	78fb      	ldrb	r3, [r7, #3]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d102      	bne.n	8004486 <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8004480:	2304      	movs	r3, #4
 8004482:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004484:	e018      	b.n	80044b8 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8004486:	78fb      	ldrb	r3, [r7, #3]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d102      	bne.n	8004492 <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 800448c:	2304      	movs	r3, #4
 800448e:	75fb      	strb	r3, [r7, #23]
            break;
 8004490:	e012      	b.n	80044b8 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8004492:	78fb      	ldrb	r3, [r7, #3]
 8004494:	2b02      	cmp	r3, #2
 8004496:	d102      	bne.n	800449e <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8004498:	2304      	movs	r3, #4
 800449a:	75fb      	strb	r3, [r7, #23]
            break;
 800449c:	e00c      	b.n	80044b8 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 800449e:	78fb      	ldrb	r3, [r7, #3]
 80044a0:	2b03      	cmp	r3, #3
 80044a2:	d102      	bne.n	80044aa <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80044a4:	2304      	movs	r3, #4
 80044a6:	75fb      	strb	r3, [r7, #23]
            break;
 80044a8:	e006      	b.n	80044b8 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80044aa:	78fb      	ldrb	r3, [r7, #3]
 80044ac:	75fb      	strb	r3, [r7, #23]
            break;
 80044ae:	e003      	b.n	80044b8 <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 80044b0:	78fb      	ldrb	r3, [r7, #3]
 80044b2:	75fb      	strb	r3, [r7, #23]
            break;
 80044b4:	e000      	b.n	80044b8 <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 80044b6:	bf00      	nop
    }
  }

  if (ret == 0)
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d107      	bne.n	80044ce <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80044be:	f107 0208 	add.w	r2, r7, #8
 80044c2:	2301      	movs	r3, #1
 80044c4:	2111      	movs	r1, #17
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7ff fd59 	bl	8003f7e <lsm6dsr_read_reg>
 80044cc:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10f      	bne.n	80044f4 <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 80044d4:	7dfb      	ldrb	r3, [r7, #23]
 80044d6:	f003 030f 	and.w	r3, r3, #15
 80044da:	b2da      	uxtb	r2, r3
 80044dc:	7a3b      	ldrb	r3, [r7, #8]
 80044de:	f362 1307 	bfi	r3, r2, #4, #4
 80044e2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80044e4:	f107 0208 	add.w	r2, r7, #8
 80044e8:	2301      	movs	r3, #1
 80044ea:	2111      	movs	r1, #17
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f7ff fd5e 	bl	8003fae <lsm6dsr_write_reg>
 80044f2:	6138      	str	r0, [r7, #16]
  }

  return ret;
 80044f4:	693b      	ldr	r3, [r7, #16]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop

08004500 <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	460b      	mov	r3, r1
 800450a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800450c:	f107 0208 	add.w	r2, r7, #8
 8004510:	2301      	movs	r3, #1
 8004512:	2112      	movs	r1, #18
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7ff fd32 	bl	8003f7e <lsm6dsr_read_reg>
 800451a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10f      	bne.n	8004542 <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 8004522:	78fb      	ldrb	r3, [r7, #3]
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	b2da      	uxtb	r2, r3
 800452a:	7a3b      	ldrb	r3, [r7, #8]
 800452c:	f362 1386 	bfi	r3, r2, #6, #1
 8004530:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8004532:	f107 0208 	add.w	r2, r7, #8
 8004536:	2301      	movs	r3, #1
 8004538:	2112      	movs	r1, #18
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7ff fd37 	bl	8003fae <lsm6dsr_write_reg>
 8004540:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004542:	68fb      	ldr	r3, [r7, #12]
}
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8004556:	f107 0208 	add.w	r2, r7, #8
 800455a:	2301      	movs	r3, #1
 800455c:	211e      	movs	r1, #30
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7ff fd0d 	bl	8003f7e <lsm6dsr_read_reg>
 8004564:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 8004566:	7a3b      	ldrb	r3, [r7, #8]
 8004568:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800456c:	b2db      	uxtb	r3, r3
 800456e:	461a      	mov	r2, r3
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	701a      	strb	r2, [r3, #0]

  return ret;
 8004574:	68fb      	ldr	r3, [r7, #12]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b084      	sub	sp, #16
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
 8004586:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8004588:	f107 0208 	add.w	r2, r7, #8
 800458c:	2301      	movs	r3, #1
 800458e:	211e      	movs	r1, #30
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f7ff fcf4 	bl	8003f7e <lsm6dsr_read_reg>
 8004596:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8004598:	7a3b      	ldrb	r3, [r7, #8]
 800459a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	461a      	mov	r2, r3
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	701a      	strb	r2, [r3, #0]

  return ret;
 80045a6:	68fb      	ldr	r3, [r7, #12]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 80045ba:	f107 0208 	add.w	r2, r7, #8
 80045be:	2301      	movs	r3, #1
 80045c0:	211e      	movs	r1, #30
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7ff fcdb 	bl	8003f7e <lsm6dsr_read_reg>
 80045c8:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 80045ca:	7a3b      	ldrb	r3, [r7, #8]
 80045cc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	461a      	mov	r2, r3
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	701a      	strb	r2, [r3, #0]

  return ret;
 80045d8:	68fb      	ldr	r3, [r7, #12]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b084      	sub	sp, #16
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
 80045ea:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 80045ec:	f107 0208 	add.w	r2, r7, #8
 80045f0:	2302      	movs	r3, #2
 80045f2:	2120      	movs	r1, #32
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f7ff fcc2 	bl	8003f7e <lsm6dsr_read_reg>
 80045fa:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 80045fc:	7a7b      	ldrb	r3, [r7, #9]
 80045fe:	b21a      	sxth	r2, r3
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	f9b3 3000 	ldrsh.w	r3, [r3]
 800460a:	b29b      	uxth	r3, r3
 800460c:	021b      	lsls	r3, r3, #8
 800460e:	b29a      	uxth	r2, r3
 8004610:	7a3b      	ldrb	r3, [r7, #8]
 8004612:	b29b      	uxth	r3, r3
 8004614:	4413      	add	r3, r2
 8004616:	b29b      	uxth	r3, r3
 8004618:	b21a      	sxth	r2, r3
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	801a      	strh	r2, [r3, #0]

  return ret;
 800461e:	68fb      	ldr	r3, [r7, #12]
}
 8004620:	4618      	mov	r0, r3
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 8004632:	f107 020c 	add.w	r2, r7, #12
 8004636:	2306      	movs	r3, #6
 8004638:	2122      	movs	r1, #34	; 0x22
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7ff fc9f 	bl	8003f7e <lsm6dsr_read_reg>
 8004640:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004642:	7b7b      	ldrb	r3, [r7, #13]
 8004644:	b21a      	sxth	r2, r3
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004650:	b29b      	uxth	r3, r3
 8004652:	021b      	lsls	r3, r3, #8
 8004654:	b29a      	uxth	r2, r3
 8004656:	7b3b      	ldrb	r3, [r7, #12]
 8004658:	b29b      	uxth	r3, r3
 800465a:	4413      	add	r3, r2
 800465c:	b29b      	uxth	r3, r3
 800465e:	b21a      	sxth	r2, r3
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004664:	7bfa      	ldrb	r2, [r7, #15]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	3302      	adds	r3, #2
 800466a:	b212      	sxth	r2, r2
 800466c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	3302      	adds	r3, #2
 8004672:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004676:	b29b      	uxth	r3, r3
 8004678:	021b      	lsls	r3, r3, #8
 800467a:	b29a      	uxth	r2, r3
 800467c:	7bbb      	ldrb	r3, [r7, #14]
 800467e:	b29b      	uxth	r3, r3
 8004680:	4413      	add	r3, r2
 8004682:	b29a      	uxth	r2, r3
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	3302      	adds	r3, #2
 8004688:	b212      	sxth	r2, r2
 800468a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800468c:	7c7a      	ldrb	r2, [r7, #17]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	3304      	adds	r3, #4
 8004692:	b212      	sxth	r2, r2
 8004694:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	3304      	adds	r3, #4
 800469a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800469e:	b29b      	uxth	r3, r3
 80046a0:	021b      	lsls	r3, r3, #8
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	7c3b      	ldrb	r3, [r7, #16]
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	4413      	add	r3, r2
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	3304      	adds	r3, #4
 80046b0:	b212      	sxth	r2, r2
 80046b2:	801a      	strh	r2, [r3, #0]

  return ret;
 80046b4:	697b      	ldr	r3, [r7, #20]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3718      	adds	r7, #24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b086      	sub	sp, #24
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
 80046c6:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 80046c8:	f107 020c 	add.w	r2, r7, #12
 80046cc:	2306      	movs	r3, #6
 80046ce:	2128      	movs	r1, #40	; 0x28
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f7ff fc54 	bl	8003f7e <lsm6dsr_read_reg>
 80046d6:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80046d8:	7b7b      	ldrb	r3, [r7, #13]
 80046da:	b21a      	sxth	r2, r3
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	021b      	lsls	r3, r3, #8
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	7b3b      	ldrb	r3, [r7, #12]
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	4413      	add	r3, r2
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	b21a      	sxth	r2, r3
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80046fa:	7bfa      	ldrb	r2, [r7, #15]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	3302      	adds	r3, #2
 8004700:	b212      	sxth	r2, r2
 8004702:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	3302      	adds	r3, #2
 8004708:	f9b3 3000 	ldrsh.w	r3, [r3]
 800470c:	b29b      	uxth	r3, r3
 800470e:	021b      	lsls	r3, r3, #8
 8004710:	b29a      	uxth	r2, r3
 8004712:	7bbb      	ldrb	r3, [r7, #14]
 8004714:	b29b      	uxth	r3, r3
 8004716:	4413      	add	r3, r2
 8004718:	b29a      	uxth	r2, r3
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	3302      	adds	r3, #2
 800471e:	b212      	sxth	r2, r2
 8004720:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004722:	7c7a      	ldrb	r2, [r7, #17]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	3304      	adds	r3, #4
 8004728:	b212      	sxth	r2, r2
 800472a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	3304      	adds	r3, #4
 8004730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004734:	b29b      	uxth	r3, r3
 8004736:	021b      	lsls	r3, r3, #8
 8004738:	b29a      	uxth	r2, r3
 800473a:	7c3b      	ldrb	r3, [r7, #16]
 800473c:	b29b      	uxth	r3, r3
 800473e:	4413      	add	r3, r2
 8004740:	b29a      	uxth	r2, r3
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	3304      	adds	r3, #4
 8004746:	b212      	sxth	r2, r2
 8004748:	801a      	strh	r2, [r3, #0]

  return ret;
 800474a:	697b      	ldr	r3, [r7, #20]
}
 800474c:	4618      	mov	r0, r3
 800474e:	3718      	adds	r7, #24
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	460b      	mov	r3, r1
 800475e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8004760:	f107 0208 	add.w	r2, r7, #8
 8004764:	2301      	movs	r3, #1
 8004766:	2101      	movs	r1, #1
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7ff fc08 	bl	8003f7e <lsm6dsr_read_reg>
 800476e:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10f      	bne.n	8004796 <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 8004776:	78fb      	ldrb	r3, [r7, #3]
 8004778:	f003 0303 	and.w	r3, r3, #3
 800477c:	b2da      	uxtb	r2, r3
 800477e:	7a3b      	ldrb	r3, [r7, #8]
 8004780:	f362 1387 	bfi	r3, r2, #6, #2
 8004784:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8004786:	f107 0208 	add.w	r2, r7, #8
 800478a:	2301      	movs	r3, #1
 800478c:	2101      	movs	r1, #1
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7ff fc0d 	bl	8003fae <lsm6dsr_write_reg>
 8004794:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 8004796:	68fb      	ldr	r3, [r7, #12]
}
 8004798:	4618      	mov	r0, r3
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 80047aa:	2301      	movs	r3, #1
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	210f      	movs	r1, #15
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7ff fbe4 	bl	8003f7e <lsm6dsr_read_reg>
 80047b6:	60f8      	str	r0, [r7, #12]

  return ret;
 80047b8:	68fb      	ldr	r3, [r7, #12]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b084      	sub	sp, #16
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	460b      	mov	r3, r1
 80047cc:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80047ce:	f107 0208 	add.w	r2, r7, #8
 80047d2:	2301      	movs	r3, #1
 80047d4:	2112      	movs	r1, #18
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7ff fbd1 	bl	8003f7e <lsm6dsr_read_reg>
 80047dc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10f      	bne.n	8004804 <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 80047e4:	78fb      	ldrb	r3, [r7, #3]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	7a3b      	ldrb	r3, [r7, #8]
 80047ee:	f362 0300 	bfi	r3, r2, #0, #1
 80047f2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80047f4:	f107 0208 	add.w	r2, r7, #8
 80047f8:	2301      	movs	r3, #1
 80047fa:	2112      	movs	r1, #18
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7ff fbd6 	bl	8003fae <lsm6dsr_write_reg>
 8004802:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004804:	68fb      	ldr	r3, [r7, #12]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b084      	sub	sp, #16
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
 8004816:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8004818:	f107 0208 	add.w	r2, r7, #8
 800481c:	2301      	movs	r3, #1
 800481e:	2112      	movs	r1, #18
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f7ff fbac 	bl	8003f7e <lsm6dsr_read_reg>
 8004826:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8004828:	7a3b      	ldrb	r3, [r7, #8]
 800482a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800482e:	b2db      	uxtb	r3, r3
 8004830:	461a      	mov	r2, r3
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	701a      	strb	r2, [r3, #0]

  return ret;
 8004836:	68fb      	ldr	r3, [r7, #12]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800484a:	2102      	movs	r1, #2
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f7ff ff81 	bl	8004754 <lsm6dsr_mem_bank_set>
 8004852:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d106      	bne.n	8004868 <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 800485a:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 800485c:	2301      	movs	r3, #1
 800485e:	2146      	movs	r1, #70	; 0x46
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f7ff fb8c 	bl	8003f7e <lsm6dsr_read_reg>
 8004866:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d107      	bne.n	800487e <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 8004872:	2301      	movs	r3, #1
 8004874:	2147      	movs	r1, #71	; 0x47
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7ff fb81 	bl	8003f7e <lsm6dsr_read_reg>
 800487c:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d104      	bne.n	800488e <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8004884:	2100      	movs	r1, #0
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7ff ff64 	bl	8004754 <lsm6dsr_mem_bank_set>
 800488c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800488e:	68fb      	ldr	r3, [r7, #12]
}
 8004890:	4618      	mov	r0, r3
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 80048a2:	2102      	movs	r1, #2
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7ff ff55 	bl	8004754 <lsm6dsr_mem_bank_set>
 80048aa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d107      	bne.n	80048c2 <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 80048b2:	f107 0208 	add.w	r2, r7, #8
 80048b6:	2301      	movs	r3, #1
 80048b8:	215f      	movs	r1, #95	; 0x5f
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7ff fb5f 	bl	8003f7e <lsm6dsr_read_reg>
 80048c0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d104      	bne.n	80048d2 <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 80048c8:	2100      	movs	r1, #0
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7ff ff42 	bl	8004754 <lsm6dsr_mem_bank_set>
 80048d0:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 80048d2:	7a3b      	ldrb	r3, [r7, #8]
 80048d4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b03      	cmp	r3, #3
 80048dc:	d81a      	bhi.n	8004914 <lsm6dsr_fsm_data_rate_get+0x7c>
 80048de:	a201      	add	r2, pc, #4	; (adr r2, 80048e4 <lsm6dsr_fsm_data_rate_get+0x4c>)
 80048e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e4:	080048f5 	.word	0x080048f5
 80048e8:	080048fd 	.word	0x080048fd
 80048ec:	08004905 	.word	0x08004905
 80048f0:	0800490d 	.word	0x0800490d
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	2200      	movs	r2, #0
 80048f8:	701a      	strb	r2, [r3, #0]
      break;
 80048fa:	e00f      	b.n	800491c <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	2201      	movs	r2, #1
 8004900:	701a      	strb	r2, [r3, #0]
      break;
 8004902:	e00b      	b.n	800491c <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	2202      	movs	r2, #2
 8004908:	701a      	strb	r2, [r3, #0]
      break;
 800490a:	e007      	b.n	800491c <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	2203      	movs	r2, #3
 8004910:	701a      	strb	r2, [r3, #0]
      break;
 8004912:	e003      	b.n	800491c <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	2200      	movs	r2, #0
 8004918:	701a      	strb	r2, [r3, #0]
      break;
 800491a:	bf00      	nop
  }

  return ret;
 800491c:	68fb      	ldr	r3, [r7, #12]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop

08004928 <HAL_RTC_AlarmAEventCallback>:
RTC_TimeTypeDef sTime = {0};
RTC_DateTypeDef sDate = {0};
RTC_AlarmTypeDef sAlarm = {0};

/*You cannot put these in the user callbacks section and I don't know why (can put in user begin 4)*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),(uint8_t*)"AlarmA\r\n", 8, HAL_MAX_DELAY);
 8004930:	f04f 33ff 	mov.w	r3, #4294967295
 8004934:	2208      	movs	r2, #8
 8004936:	4905      	ldr	r1, [pc, #20]	; (800494c <HAL_RTC_AlarmAEventCallback+0x24>)
 8004938:	4805      	ldr	r0, [pc, #20]	; (8004950 <HAL_RTC_AlarmAEventCallback+0x28>)
 800493a:	f004 ffd4 	bl	80098e6 <HAL_UART_Transmit>
	flagA = 1;
 800493e:	4b05      	ldr	r3, [pc, #20]	; (8004954 <HAL_RTC_AlarmAEventCallback+0x2c>)
 8004940:	2201      	movs	r2, #1
 8004942:	701a      	strb	r2, [r3, #0]
}
 8004944:	bf00      	nop
 8004946:	3708      	adds	r7, #8
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	08012dc4 	.word	0x08012dc4
 8004950:	20005690 	.word	0x20005690
 8004954:	20000490 	.word	0x20000490

08004958 <MRT_SetupRTOS>:
}




bool MRT_SetupRTOS(UART_HandleTypeDef uart,uint8_t sleepT){
 8004958:	b084      	sub	sp, #16
 800495a:	b580      	push	{r7, lr}
 800495c:	b082      	sub	sp, #8
 800495e:	af00      	add	r7, sp, #0
 8004960:	f107 0c10 	add.w	ip, r7, #16
 8004964:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTOS\r\n", 17, HAL_MAX_DELAY);
 8004968:	f04f 33ff 	mov.w	r3, #4294967295
 800496c:	2211      	movs	r2, #17
 800496e:	490e      	ldr	r1, [pc, #56]	; (80049a8 <MRT_SetupRTOS+0x50>)
 8004970:	480e      	ldr	r0, [pc, #56]	; (80049ac <MRT_SetupRTOS+0x54>)
 8004972:	f004 ffb8 	bl	80098e6 <HAL_UART_Transmit>
	rtos.huart = uart;
 8004976:	4b0d      	ldr	r3, [pc, #52]	; (80049ac <MRT_SetupRTOS+0x54>)
 8004978:	4618      	mov	r0, r3
 800497a:	f107 0310 	add.w	r3, r7, #16
 800497e:	2244      	movs	r2, #68	; 0x44
 8004980:	4619      	mov	r1, r3
 8004982:	f009 f8c3 	bl	800db0c <memcpy>
	rtos.sleepTime = sleepT;
 8004986:	4a09      	ldr	r2, [pc, #36]	; (80049ac <MRT_SetupRTOS+0x54>)
 8004988:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800498c:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
	bool wakingUp = MRT_WUProcedure();
 8004990:	f000 f80e 	bl	80049b0 <MRT_WUProcedure>
 8004994:	4603      	mov	r3, r0
 8004996:	71fb      	strb	r3, [r7, #7]
	return wakingUp;
 8004998:	79fb      	ldrb	r3, [r7, #7]
}
 800499a:	4618      	mov	r0, r3
 800499c:	3708      	adds	r7, #8
 800499e:	46bd      	mov	sp, r7
 80049a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049a4:	b004      	add	sp, #16
 80049a6:	4770      	bx	lr
 80049a8:	08012ddc 	.word	0x08012ddc
 80049ac:	20005690 	.word	0x20005690

080049b0 <MRT_WUProcedure>:



bool MRT_WUProcedure(void){
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0

	bool wakingUp = false;
 80049b6:	2300      	movs	r3, #0
 80049b8:	71fb      	strb	r3, [r7, #7]

	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 80049ba:	4b14      	ldr	r3, [pc, #80]	; (8004a0c <MRT_WUProcedure+0x5c>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d11b      	bne.n	80049fe <MRT_WUProcedure+0x4e>
	{
		wakingUp = true;
 80049c6:	2301      	movs	r3, #1
 80049c8:	71fb      	strb	r3, [r7, #7]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 80049ca:	4b10      	ldr	r3, [pc, #64]	; (8004a0c <MRT_WUProcedure+0x5c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a0f      	ldr	r2, [pc, #60]	; (8004a0c <MRT_WUProcedure+0x5c>)
 80049d0:	f043 0308 	orr.w	r3, r3, #8
 80049d4:	6013      	str	r3, [r2, #0]

		/** display  the string **/
		char *str = "Wakeup from the STANDBY MODE\r\n";
 80049d6:	4b0e      	ldr	r3, [pc, #56]	; (8004a10 <MRT_WUProcedure+0x60>)
 80049d8:	603b      	str	r3, [r7, #0]
		HAL_UART_Transmit(&(rtos.huart), (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80049da:	6838      	ldr	r0, [r7, #0]
 80049dc:	f7fb fc08 	bl	80001f0 <strlen>
 80049e0:	4603      	mov	r3, r0
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	f04f 33ff 	mov.w	r3, #4294967295
 80049e8:	6839      	ldr	r1, [r7, #0]
 80049ea:	480a      	ldr	r0, [pc, #40]	; (8004a14 <MRT_WUProcedure+0x64>)
 80049ec:	f004 ff7b 	bl	80098e6 <HAL_UART_Transmit>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 80049f0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80049f4:	f002 f8d8 	bl	8006ba8 <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80049f8:	4807      	ldr	r0, [pc, #28]	; (8004a18 <MRT_WUProcedure+0x68>)
 80049fa:	f003 fb31 	bl	8008060 <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_ClearFlags();
 80049fe:	f000 f80d 	bl	8004a1c <MRT_ClearFlags>

	return wakingUp;
 8004a02:	79fb      	ldrb	r3, [r7, #7]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3708      	adds	r7, #8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	40007000 	.word	0x40007000
 8004a10:	08012df0 	.word	0x08012df0
 8004a14:	20005690 	.word	0x20005690
 8004a18:	200053d8 	.word	0x200053d8

08004a1c <MRT_ClearFlags>:

void MRT_ClearFlags(void){
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	HAL_UART_Transmit(&(rtos.huart),"Clearing the flags\r\n", 20, HAL_MAX_DELAY);
 8004a20:	f04f 33ff 	mov.w	r3, #4294967295
 8004a24:	2214      	movs	r2, #20
 8004a26:	4932      	ldr	r1, [pc, #200]	; (8004af0 <MRT_ClearFlags+0xd4>)
 8004a28:	4832      	ldr	r0, [pc, #200]	; (8004af4 <MRT_ClearFlags+0xd8>)
 8004a2a:	f004 ff5c 	bl	80098e6 <HAL_UART_Transmit>
	  	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8004a2e:	4b32      	ldr	r3, [pc, #200]	; (8004af8 <MRT_ClearFlags+0xdc>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	22ca      	movs	r2, #202	; 0xca
 8004a34:	625a      	str	r2, [r3, #36]	; 0x24
 8004a36:	4b30      	ldr	r3, [pc, #192]	; (8004af8 <MRT_ClearFlags+0xdc>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2253      	movs	r2, #83	; 0x53
 8004a3c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8004a3e:	e00f      	b.n	8004a60 <MRT_ClearFlags+0x44>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm A flag\r\n", 23, HAL_MAX_DELAY);
 8004a40:	f04f 33ff 	mov.w	r3, #4294967295
 8004a44:	2217      	movs	r2, #23
 8004a46:	492d      	ldr	r1, [pc, #180]	; (8004afc <MRT_ClearFlags+0xe0>)
 8004a48:	482a      	ldr	r0, [pc, #168]	; (8004af4 <MRT_ClearFlags+0xd8>)
 8004a4a:	f004 ff4c 	bl	80098e6 <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8004a4e:	4b2a      	ldr	r3, [pc, #168]	; (8004af8 <MRT_ClearFlags+0xdc>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	4b28      	ldr	r3, [pc, #160]	; (8004af8 <MRT_ClearFlags+0xdc>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004a5e:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8004a60:	4b25      	ldr	r3, [pc, #148]	; (8004af8 <MRT_ClearFlags+0xdc>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1e8      	bne.n	8004a40 <MRT_ClearFlags+0x24>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8004a6e:	4b22      	ldr	r3, [pc, #136]	; (8004af8 <MRT_ClearFlags+0xdc>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	22ff      	movs	r2, #255	; 0xff
 8004a74:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004a76:	4b22      	ldr	r3, [pc, #136]	; (8004b00 <MRT_ClearFlags+0xe4>)
 8004a78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a7c:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8004a7e:	4b1e      	ldr	r3, [pc, #120]	; (8004af8 <MRT_ClearFlags+0xdc>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	22ca      	movs	r2, #202	; 0xca
 8004a84:	625a      	str	r2, [r3, #36]	; 0x24
 8004a86:	4b1c      	ldr	r3, [pc, #112]	; (8004af8 <MRT_ClearFlags+0xdc>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2253      	movs	r2, #83	; 0x53
 8004a8c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8004a8e:	e00f      	b.n	8004ab0 <MRT_ClearFlags+0x94>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm B flag\r\n", 23, HAL_MAX_DELAY);
 8004a90:	f04f 33ff 	mov.w	r3, #4294967295
 8004a94:	2217      	movs	r2, #23
 8004a96:	491b      	ldr	r1, [pc, #108]	; (8004b04 <MRT_ClearFlags+0xe8>)
 8004a98:	4816      	ldr	r0, [pc, #88]	; (8004af4 <MRT_ClearFlags+0xd8>)
 8004a9a:	f004 ff24 	bl	80098e6 <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRBF);
 8004a9e:	4b16      	ldr	r3, [pc, #88]	; (8004af8 <MRT_ClearFlags+0xdc>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	b2da      	uxtb	r2, r3
 8004aa6:	4b14      	ldr	r3, [pc, #80]	; (8004af8 <MRT_ClearFlags+0xdc>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004aae:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8004ab0:	4b11      	ldr	r3, [pc, #68]	; (8004af8 <MRT_ClearFlags+0xdc>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1e8      	bne.n	8004a90 <MRT_ClearFlags+0x74>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8004abe:	4b0e      	ldr	r3, [pc, #56]	; (8004af8 <MRT_ClearFlags+0xdc>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	22ff      	movs	r2, #255	; 0xff
 8004ac4:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004ac6:	4b0e      	ldr	r3, [pc, #56]	; (8004b00 <MRT_ClearFlags+0xe4>)
 8004ac8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004acc:	615a      	str	r2, [r3, #20]


	/* Clear the WU FLAG */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing WU flag\r\n", 18, HAL_MAX_DELAY);
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8004ace:	4b0e      	ldr	r3, [pc, #56]	; (8004b08 <MRT_ClearFlags+0xec>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a0d      	ldr	r2, [pc, #52]	; (8004b08 <MRT_ClearFlags+0xec>)
 8004ad4:	f043 0304 	orr.w	r3, r3, #4
 8004ad8:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing RTC WU flag\r\n", 22, HAL_MAX_DELAY);
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8004ada:	4b07      	ldr	r3, [pc, #28]	; (8004af8 <MRT_ClearFlags+0xdc>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	b2da      	uxtb	r2, r3
 8004ae2:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <MRT_ClearFlags+0xdc>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004aea:	60da      	str	r2, [r3, #12]
}
 8004aec:	bf00      	nop
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	08012e10 	.word	0x08012e10
 8004af4:	20005690 	.word	0x20005690
 8004af8:	200053d8 	.word	0x200053d8
 8004afc:	08012e28 	.word	0x08012e28
 8004b00:	40013c00 	.word	0x40013c00
 8004b04:	08012e40 	.word	0x08012e40
 8004b08:	40007000 	.word	0x40007000

08004b0c <Max31855_Read_Temp>:
uint32_t sign=0;									  // Sign bit
uint8_t DATARX[4];                                    // Raw Data from MAX6675
//uint8_t DATATX = {0xFF, 0xFF, 0xFF, 0xFF};                                    // Raw Data from MAX6675

// ------------------- Functions ----------------
void Max31855_Read_Temp(void) {
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
	int Temp = 0;                                        // Temperature Variable
 8004b12:	2300      	movs	r3, #0
 8004b14:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_RESET); // Low State for SPI Communication
 8004b16:	2200      	movs	r2, #0
 8004b18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004b1c:	483f      	ldr	r0, [pc, #252]	; (8004c1c <Max31855_Read_Temp+0x110>)
 8004b1e:	f000 fe39 	bl	8005794 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi4, DATARX, 4, 1000);                // DATA Transfer
 8004b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b26:	2204      	movs	r2, #4
 8004b28:	493d      	ldr	r1, [pc, #244]	; (8004c20 <Max31855_Read_Temp+0x114>)
 8004b2a:	483e      	ldr	r0, [pc, #248]	; (8004c24 <Max31855_Read_Temp+0x118>)
 8004b2c:	f003 fcbf 	bl	80084ae <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_SET); // High State for SPI Communication
 8004b30:	2201      	movs	r2, #1
 8004b32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004b36:	4839      	ldr	r0, [pc, #228]	; (8004c1c <Max31855_Read_Temp+0x110>)
 8004b38:	f000 fe2c 	bl	8005794 <HAL_GPIO_WritePin>


	uint32_t v = DATARX[3] | (DATARX[2] << 8) | (DATARX[1] << 16) | (DATARX[0] << 24);
 8004b3c:	4b38      	ldr	r3, [pc, #224]	; (8004c20 <Max31855_Read_Temp+0x114>)
 8004b3e:	78db      	ldrb	r3, [r3, #3]
 8004b40:	461a      	mov	r2, r3
 8004b42:	4b37      	ldr	r3, [pc, #220]	; (8004c20 <Max31855_Read_Temp+0x114>)
 8004b44:	789b      	ldrb	r3, [r3, #2]
 8004b46:	021b      	lsls	r3, r3, #8
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	4b35      	ldr	r3, [pc, #212]	; (8004c20 <Max31855_Read_Temp+0x114>)
 8004b4c:	785b      	ldrb	r3, [r3, #1]
 8004b4e:	041b      	lsls	r3, r3, #16
 8004b50:	431a      	orrs	r2, r3
 8004b52:	4b33      	ldr	r3, [pc, #204]	; (8004c20 <Max31855_Read_Temp+0x114>)
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	061b      	lsls	r3, r3, #24
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	603b      	str	r3, [r7, #0]

	Error = v & 0x07;								  // Error Detection
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	b2da      	uxtb	r2, r3
 8004b66:	4b30      	ldr	r3, [pc, #192]	; (8004c28 <Max31855_Read_Temp+0x11c>)
 8004b68:	701a      	strb	r2, [r3, #0]



		sign = (DATARX[0] & (0x80)) >> 7;					// Sign Bit calculation
 8004b6a:	4b2d      	ldr	r3, [pc, #180]	; (8004c20 <Max31855_Read_Temp+0x114>)
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	09db      	lsrs	r3, r3, #7
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	461a      	mov	r2, r3
 8004b74:	4b2d      	ldr	r3, [pc, #180]	; (8004c2c <Max31855_Read_Temp+0x120>)
 8004b76:	601a      	str	r2, [r3, #0]

		if (DATARX[3] & 0x07)								 // Returns Error Number
 8004b78:	4b29      	ldr	r3, [pc, #164]	; (8004c20 <Max31855_Read_Temp+0x114>)
 8004b7a:	78db      	ldrb	r3, [r3, #3]
 8004b7c:	f003 0307 	and.w	r3, r3, #7
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00c      	beq.n	8004b9e <Max31855_Read_Temp+0x92>
			THERMO_TEMP = (-1 * (DATARX[3] & 0x07));
 8004b84:	4b26      	ldr	r3, [pc, #152]	; (8004c20 <Max31855_Read_Temp+0x114>)
 8004b86:	78db      	ldrb	r3, [r3, #3]
 8004b88:	f003 0307 	and.w	r3, r3, #7
 8004b8c:	425b      	negs	r3, r3
 8004b8e:	ee07 3a90 	vmov	s15, r3
 8004b92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b96:	4b26      	ldr	r3, [pc, #152]	; (8004c30 <Max31855_Read_Temp+0x124>)
 8004b98:	edc3 7a00 	vstr	s15, [r3]

	// LSB = 0.25 degrees C
	centigrade *= 0.25;
	return centigrade;
	*/
}
 8004b9c:	e039      	b.n	8004c12 <Max31855_Read_Temp+0x106>
		else if (sign == 1) {								// Negative Temperature
 8004b9e:	4b23      	ldr	r3, [pc, #140]	; (8004c2c <Max31855_Read_Temp+0x120>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d120      	bne.n	8004be8 <Max31855_Read_Temp+0xdc>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8004ba6:	4b1e      	ldr	r3, [pc, #120]	; (8004c20 <Max31855_Read_Temp+0x114>)
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	019b      	lsls	r3, r3, #6
 8004bac:	4a1c      	ldr	r2, [pc, #112]	; (8004c20 <Max31855_Read_Temp+0x114>)
 8004bae:	7852      	ldrb	r2, [r2, #1]
 8004bb0:	0892      	lsrs	r2, r2, #2
 8004bb2:	b2d2      	uxtb	r2, r2
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	607b      	str	r3, [r7, #4]
			Temp &= 0b01111111111111;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004bbe:	607b      	str	r3, [r7, #4]
			Temp ^= 0b01111111111111;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f483 53ff 	eor.w	r3, r3, #8160	; 0x1fe0
 8004bc6:	f083 031f 	eor.w	r3, r3, #31
 8004bca:	607b      	str	r3, [r7, #4]
			THERMO_TEMP = ((float) -Temp / 4);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	425b      	negs	r3, r3
 8004bd0:	ee07 3a90 	vmov	s15, r3
 8004bd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bd8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8004bdc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004be0:	4b13      	ldr	r3, [pc, #76]	; (8004c30 <Max31855_Read_Temp+0x124>)
 8004be2:	edc3 7a00 	vstr	s15, [r3]
}
 8004be6:	e014      	b.n	8004c12 <Max31855_Read_Temp+0x106>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8004be8:	4b0d      	ldr	r3, [pc, #52]	; (8004c20 <Max31855_Read_Temp+0x114>)
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	019b      	lsls	r3, r3, #6
 8004bee:	4a0c      	ldr	r2, [pc, #48]	; (8004c20 <Max31855_Read_Temp+0x114>)
 8004bf0:	7852      	ldrb	r2, [r2, #1]
 8004bf2:	0892      	lsrs	r2, r2, #2
 8004bf4:	b2d2      	uxtb	r2, r2
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	607b      	str	r3, [r7, #4]
			THERMO_TEMP = ((float) Temp / 4.0);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	ee07 3a90 	vmov	s15, r3
 8004c00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c04:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8004c08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c0c:	4b08      	ldr	r3, [pc, #32]	; (8004c30 <Max31855_Read_Temp+0x124>)
 8004c0e:	edc3 7a00 	vstr	s15, [r3]
}
 8004c12:	bf00      	nop
 8004c14:	3708      	adds	r7, #8
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	200056d8 	.word	0x200056d8
 8004c24:	20005380 	.word	0x20005380
 8004c28:	20000491 	.word	0x20000491
 8004c2c:	20000494 	.word	0x20000494
 8004c30:	20005508 	.word	0x20005508

08004c34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c38:	4b0e      	ldr	r3, [pc, #56]	; (8004c74 <HAL_Init+0x40>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a0d      	ldr	r2, [pc, #52]	; (8004c74 <HAL_Init+0x40>)
 8004c3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c44:	4b0b      	ldr	r3, [pc, #44]	; (8004c74 <HAL_Init+0x40>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a0a      	ldr	r2, [pc, #40]	; (8004c74 <HAL_Init+0x40>)
 8004c4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c50:	4b08      	ldr	r3, [pc, #32]	; (8004c74 <HAL_Init+0x40>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a07      	ldr	r2, [pc, #28]	; (8004c74 <HAL_Init+0x40>)
 8004c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c5c:	2003      	movs	r0, #3
 8004c5e:	f000 fb92 	bl	8005386 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c62:	2000      	movs	r0, #0
 8004c64:	f7fe f8ca 	bl	8002dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c68:	f7fd fd8e 	bl	8002788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	40023c00 	.word	0x40023c00

08004c78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c7c:	4b06      	ldr	r3, [pc, #24]	; (8004c98 <HAL_IncTick+0x20>)
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	461a      	mov	r2, r3
 8004c82:	4b06      	ldr	r3, [pc, #24]	; (8004c9c <HAL_IncTick+0x24>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4413      	add	r3, r2
 8004c88:	4a04      	ldr	r2, [pc, #16]	; (8004c9c <HAL_IncTick+0x24>)
 8004c8a:	6013      	str	r3, [r2, #0]
}
 8004c8c:	bf00      	nop
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	20000008 	.word	0x20000008
 8004c9c:	200056dc 	.word	0x200056dc

08004ca0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8004ca4:	4b03      	ldr	r3, [pc, #12]	; (8004cb4 <HAL_GetTick+0x14>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	200056dc 	.word	0x200056dc

08004cb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004cc0:	f7ff ffee 	bl	8004ca0 <HAL_GetTick>
 8004cc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd0:	d005      	beq.n	8004cde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004cd2:	4b0a      	ldr	r3, [pc, #40]	; (8004cfc <HAL_Delay+0x44>)
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	4413      	add	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004cde:	bf00      	nop
 8004ce0:	f7ff ffde 	bl	8004ca0 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d8f7      	bhi.n	8004ce0 <HAL_Delay+0x28>
  {
  }
}
 8004cf0:	bf00      	nop
 8004cf2:	bf00      	nop
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	20000008 	.word	0x20000008

08004d00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e033      	b.n	8004d7e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d109      	bne.n	8004d32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7fd fd5e 	bl	80027e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	f003 0310 	and.w	r3, r3, #16
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d118      	bne.n	8004d70 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004d46:	f023 0302 	bic.w	r3, r3, #2
 8004d4a:	f043 0202 	orr.w	r2, r3, #2
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f94a 	bl	8004fec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	f023 0303 	bic.w	r3, r3, #3
 8004d66:	f043 0201 	orr.w	r2, r3, #1
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	641a      	str	r2, [r3, #64]	; 0x40
 8004d6e:	e001      	b.n	8004d74 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
	...

08004d88 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004d92:	2300      	movs	r3, #0
 8004d94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d101      	bne.n	8004da4 <HAL_ADC_ConfigChannel+0x1c>
 8004da0:	2302      	movs	r3, #2
 8004da2:	e113      	b.n	8004fcc <HAL_ADC_ConfigChannel+0x244>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b09      	cmp	r3, #9
 8004db2:	d925      	bls.n	8004e00 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68d9      	ldr	r1, [r3, #12]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	4413      	add	r3, r2
 8004dc8:	3b1e      	subs	r3, #30
 8004dca:	2207      	movs	r2, #7
 8004dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd0:	43da      	mvns	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	400a      	ands	r2, r1
 8004dd8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68d9      	ldr	r1, [r3, #12]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	4618      	mov	r0, r3
 8004dec:	4603      	mov	r3, r0
 8004dee:	005b      	lsls	r3, r3, #1
 8004df0:	4403      	add	r3, r0
 8004df2:	3b1e      	subs	r3, #30
 8004df4:	409a      	lsls	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	60da      	str	r2, [r3, #12]
 8004dfe:	e022      	b.n	8004e46 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6919      	ldr	r1, [r3, #16]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	4613      	mov	r3, r2
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	4413      	add	r3, r2
 8004e14:	2207      	movs	r2, #7
 8004e16:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1a:	43da      	mvns	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	400a      	ands	r2, r1
 8004e22:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6919      	ldr	r1, [r3, #16]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	689a      	ldr	r2, [r3, #8]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	4618      	mov	r0, r3
 8004e36:	4603      	mov	r3, r0
 8004e38:	005b      	lsls	r3, r3, #1
 8004e3a:	4403      	add	r3, r0
 8004e3c:	409a      	lsls	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	2b06      	cmp	r3, #6
 8004e4c:	d824      	bhi.n	8004e98 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	3b05      	subs	r3, #5
 8004e60:	221f      	movs	r2, #31
 8004e62:	fa02 f303 	lsl.w	r3, r2, r3
 8004e66:	43da      	mvns	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	400a      	ands	r2, r1
 8004e6e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	4613      	mov	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	3b05      	subs	r3, #5
 8004e8a:	fa00 f203 	lsl.w	r2, r0, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	635a      	str	r2, [r3, #52]	; 0x34
 8004e96:	e04c      	b.n	8004f32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	2b0c      	cmp	r3, #12
 8004e9e:	d824      	bhi.n	8004eea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685a      	ldr	r2, [r3, #4]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4413      	add	r3, r2
 8004eb0:	3b23      	subs	r3, #35	; 0x23
 8004eb2:	221f      	movs	r2, #31
 8004eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb8:	43da      	mvns	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	400a      	ands	r2, r1
 8004ec0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	4618      	mov	r0, r3
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685a      	ldr	r2, [r3, #4]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	4413      	add	r3, r2
 8004eda:	3b23      	subs	r3, #35	; 0x23
 8004edc:	fa00 f203 	lsl.w	r2, r0, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	631a      	str	r2, [r3, #48]	; 0x30
 8004ee8:	e023      	b.n	8004f32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4413      	add	r3, r2
 8004efa:	3b41      	subs	r3, #65	; 0x41
 8004efc:	221f      	movs	r2, #31
 8004efe:	fa02 f303 	lsl.w	r3, r2, r3
 8004f02:	43da      	mvns	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	400a      	ands	r2, r1
 8004f0a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	4618      	mov	r0, r3
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	685a      	ldr	r2, [r3, #4]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4413      	add	r3, r2
 8004f24:	3b41      	subs	r3, #65	; 0x41
 8004f26:	fa00 f203 	lsl.w	r2, r0, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f32:	4b29      	ldr	r3, [pc, #164]	; (8004fd8 <HAL_ADC_ConfigChannel+0x250>)
 8004f34:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a28      	ldr	r2, [pc, #160]	; (8004fdc <HAL_ADC_ConfigChannel+0x254>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d10f      	bne.n	8004f60 <HAL_ADC_ConfigChannel+0x1d8>
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b12      	cmp	r3, #18
 8004f46:	d10b      	bne.n	8004f60 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a1d      	ldr	r2, [pc, #116]	; (8004fdc <HAL_ADC_ConfigChannel+0x254>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d12b      	bne.n	8004fc2 <HAL_ADC_ConfigChannel+0x23a>
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a1c      	ldr	r2, [pc, #112]	; (8004fe0 <HAL_ADC_ConfigChannel+0x258>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d003      	beq.n	8004f7c <HAL_ADC_ConfigChannel+0x1f4>
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b11      	cmp	r3, #17
 8004f7a:	d122      	bne.n	8004fc2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a11      	ldr	r2, [pc, #68]	; (8004fe0 <HAL_ADC_ConfigChannel+0x258>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d111      	bne.n	8004fc2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004f9e:	4b11      	ldr	r3, [pc, #68]	; (8004fe4 <HAL_ADC_ConfigChannel+0x25c>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a11      	ldr	r2, [pc, #68]	; (8004fe8 <HAL_ADC_ConfigChannel+0x260>)
 8004fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa8:	0c9a      	lsrs	r2, r3, #18
 8004faa:	4613      	mov	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004fb4:	e002      	b.n	8004fbc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1f9      	bne.n	8004fb6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr
 8004fd8:	40012300 	.word	0x40012300
 8004fdc:	40012000 	.word	0x40012000
 8004fe0:	10000012 	.word	0x10000012
 8004fe4:	20000000 	.word	0x20000000
 8004fe8:	431bde83 	.word	0x431bde83

08004fec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ff4:	4b79      	ldr	r3, [pc, #484]	; (80051dc <ADC_Init+0x1f0>)
 8004ff6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	685a      	ldr	r2, [r3, #4]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	431a      	orrs	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005020:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6859      	ldr	r1, [r3, #4]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	021a      	lsls	r2, r3, #8
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005044:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	6859      	ldr	r1, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689a      	ldr	r2, [r3, #8]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	430a      	orrs	r2, r1
 8005056:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689a      	ldr	r2, [r3, #8]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005066:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6899      	ldr	r1, [r3, #8]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68da      	ldr	r2, [r3, #12]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	430a      	orrs	r2, r1
 8005078:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507e:	4a58      	ldr	r2, [pc, #352]	; (80051e0 <ADC_Init+0x1f4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d022      	beq.n	80050ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689a      	ldr	r2, [r3, #8]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005092:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6899      	ldr	r1, [r3, #8]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	689a      	ldr	r2, [r3, #8]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80050b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	6899      	ldr	r1, [r3, #8]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	430a      	orrs	r2, r1
 80050c6:	609a      	str	r2, [r3, #8]
 80050c8:	e00f      	b.n	80050ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80050d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689a      	ldr	r2, [r3, #8]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80050e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689a      	ldr	r2, [r3, #8]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f022 0202 	bic.w	r2, r2, #2
 80050f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	6899      	ldr	r1, [r3, #8]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	7e1b      	ldrb	r3, [r3, #24]
 8005104:	005a      	lsls	r2, r3, #1
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d01b      	beq.n	8005150 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685a      	ldr	r2, [r3, #4]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005126:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005136:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6859      	ldr	r1, [r3, #4]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005142:	3b01      	subs	r3, #1
 8005144:	035a      	lsls	r2, r3, #13
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	605a      	str	r2, [r3, #4]
 800514e:	e007      	b.n	8005160 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800515e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800516e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	3b01      	subs	r3, #1
 800517c:	051a      	lsls	r2, r3, #20
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	430a      	orrs	r2, r1
 8005184:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	689a      	ldr	r2, [r3, #8]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005194:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	6899      	ldr	r1, [r3, #8]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80051a2:	025a      	lsls	r2, r3, #9
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	689a      	ldr	r2, [r3, #8]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6899      	ldr	r1, [r3, #8]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	029a      	lsls	r2, r3, #10
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	430a      	orrs	r2, r1
 80051ce:	609a      	str	r2, [r3, #8]
}
 80051d0:	bf00      	nop
 80051d2:	3714      	adds	r7, #20
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	40012300 	.word	0x40012300
 80051e0:	0f000001 	.word	0x0f000001

080051e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f003 0307 	and.w	r3, r3, #7
 80051f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051f4:	4b0c      	ldr	r3, [pc, #48]	; (8005228 <__NVIC_SetPriorityGrouping+0x44>)
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005200:	4013      	ands	r3, r2
 8005202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800520c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005216:	4a04      	ldr	r2, [pc, #16]	; (8005228 <__NVIC_SetPriorityGrouping+0x44>)
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	60d3      	str	r3, [r2, #12]
}
 800521c:	bf00      	nop
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr
 8005228:	e000ed00 	.word	0xe000ed00

0800522c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800522c:	b480      	push	{r7}
 800522e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005230:	4b04      	ldr	r3, [pc, #16]	; (8005244 <__NVIC_GetPriorityGrouping+0x18>)
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	0a1b      	lsrs	r3, r3, #8
 8005236:	f003 0307 	and.w	r3, r3, #7
}
 800523a:	4618      	mov	r0, r3
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr
 8005244:	e000ed00 	.word	0xe000ed00

08005248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	4603      	mov	r3, r0
 8005250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005256:	2b00      	cmp	r3, #0
 8005258:	db0b      	blt.n	8005272 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800525a:	79fb      	ldrb	r3, [r7, #7]
 800525c:	f003 021f 	and.w	r2, r3, #31
 8005260:	4907      	ldr	r1, [pc, #28]	; (8005280 <__NVIC_EnableIRQ+0x38>)
 8005262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005266:	095b      	lsrs	r3, r3, #5
 8005268:	2001      	movs	r0, #1
 800526a:	fa00 f202 	lsl.w	r2, r0, r2
 800526e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005272:	bf00      	nop
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	e000e100 	.word	0xe000e100

08005284 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	4603      	mov	r3, r0
 800528c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800528e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005292:	2b00      	cmp	r3, #0
 8005294:	db12      	blt.n	80052bc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005296:	79fb      	ldrb	r3, [r7, #7]
 8005298:	f003 021f 	and.w	r2, r3, #31
 800529c:	490a      	ldr	r1, [pc, #40]	; (80052c8 <__NVIC_DisableIRQ+0x44>)
 800529e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052a2:	095b      	lsrs	r3, r3, #5
 80052a4:	2001      	movs	r0, #1
 80052a6:	fa00 f202 	lsl.w	r2, r0, r2
 80052aa:	3320      	adds	r3, #32
 80052ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80052b0:	f3bf 8f4f 	dsb	sy
}
 80052b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80052b6:	f3bf 8f6f 	isb	sy
}
 80052ba:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	e000e100 	.word	0xe000e100

080052cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	4603      	mov	r3, r0
 80052d4:	6039      	str	r1, [r7, #0]
 80052d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	db0a      	blt.n	80052f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	b2da      	uxtb	r2, r3
 80052e4:	490c      	ldr	r1, [pc, #48]	; (8005318 <__NVIC_SetPriority+0x4c>)
 80052e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ea:	0112      	lsls	r2, r2, #4
 80052ec:	b2d2      	uxtb	r2, r2
 80052ee:	440b      	add	r3, r1
 80052f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052f4:	e00a      	b.n	800530c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	b2da      	uxtb	r2, r3
 80052fa:	4908      	ldr	r1, [pc, #32]	; (800531c <__NVIC_SetPriority+0x50>)
 80052fc:	79fb      	ldrb	r3, [r7, #7]
 80052fe:	f003 030f 	and.w	r3, r3, #15
 8005302:	3b04      	subs	r3, #4
 8005304:	0112      	lsls	r2, r2, #4
 8005306:	b2d2      	uxtb	r2, r2
 8005308:	440b      	add	r3, r1
 800530a:	761a      	strb	r2, [r3, #24]
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr
 8005318:	e000e100 	.word	0xe000e100
 800531c:	e000ed00 	.word	0xe000ed00

08005320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005320:	b480      	push	{r7}
 8005322:	b089      	sub	sp, #36	; 0x24
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f003 0307 	and.w	r3, r3, #7
 8005332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	f1c3 0307 	rsb	r3, r3, #7
 800533a:	2b04      	cmp	r3, #4
 800533c:	bf28      	it	cs
 800533e:	2304      	movcs	r3, #4
 8005340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	3304      	adds	r3, #4
 8005346:	2b06      	cmp	r3, #6
 8005348:	d902      	bls.n	8005350 <NVIC_EncodePriority+0x30>
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	3b03      	subs	r3, #3
 800534e:	e000      	b.n	8005352 <NVIC_EncodePriority+0x32>
 8005350:	2300      	movs	r3, #0
 8005352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005354:	f04f 32ff 	mov.w	r2, #4294967295
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	fa02 f303 	lsl.w	r3, r2, r3
 800535e:	43da      	mvns	r2, r3
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	401a      	ands	r2, r3
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005368:	f04f 31ff 	mov.w	r1, #4294967295
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	fa01 f303 	lsl.w	r3, r1, r3
 8005372:	43d9      	mvns	r1, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005378:	4313      	orrs	r3, r2
         );
}
 800537a:	4618      	mov	r0, r3
 800537c:	3724      	adds	r7, #36	; 0x24
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b082      	sub	sp, #8
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7ff ff28 	bl	80051e4 <__NVIC_SetPriorityGrouping>
}
 8005394:	bf00      	nop
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	4603      	mov	r3, r0
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
 80053a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80053aa:	2300      	movs	r3, #0
 80053ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80053ae:	f7ff ff3d 	bl	800522c <__NVIC_GetPriorityGrouping>
 80053b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	68b9      	ldr	r1, [r7, #8]
 80053b8:	6978      	ldr	r0, [r7, #20]
 80053ba:	f7ff ffb1 	bl	8005320 <NVIC_EncodePriority>
 80053be:	4602      	mov	r2, r0
 80053c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053c4:	4611      	mov	r1, r2
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7ff ff80 	bl	80052cc <__NVIC_SetPriority>
}
 80053cc:	bf00      	nop
 80053ce:	3718      	adds	r7, #24
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	4603      	mov	r3, r0
 80053dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7ff ff30 	bl	8005248 <__NVIC_EnableIRQ>
}
 80053e8:	bf00      	nop
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	4603      	mov	r3, r0
 80053f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80053fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053fe:	4618      	mov	r0, r3
 8005400:	f7ff ff40 	bl	8005284 <__NVIC_DisableIRQ>
}
 8005404:	bf00      	nop
 8005406:	3708      	adds	r7, #8
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800540c:	b480      	push	{r7}
 800540e:	b089      	sub	sp, #36	; 0x24
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005416:	2300      	movs	r3, #0
 8005418:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800541a:	2300      	movs	r3, #0
 800541c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800541e:	2300      	movs	r3, #0
 8005420:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005422:	2300      	movs	r3, #0
 8005424:	61fb      	str	r3, [r7, #28]
 8005426:	e177      	b.n	8005718 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005428:	2201      	movs	r2, #1
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	fa02 f303 	lsl.w	r3, r2, r3
 8005430:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	4013      	ands	r3, r2
 800543a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	429a      	cmp	r2, r3
 8005442:	f040 8166 	bne.w	8005712 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f003 0303 	and.w	r3, r3, #3
 800544e:	2b01      	cmp	r3, #1
 8005450:	d005      	beq.n	800545e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800545a:	2b02      	cmp	r3, #2
 800545c:	d130      	bne.n	80054c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	005b      	lsls	r3, r3, #1
 8005468:	2203      	movs	r2, #3
 800546a:	fa02 f303 	lsl.w	r3, r2, r3
 800546e:	43db      	mvns	r3, r3
 8005470:	69ba      	ldr	r2, [r7, #24]
 8005472:	4013      	ands	r3, r2
 8005474:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68da      	ldr	r2, [r3, #12]
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	005b      	lsls	r3, r3, #1
 800547e:	fa02 f303 	lsl.w	r3, r2, r3
 8005482:	69ba      	ldr	r2, [r7, #24]
 8005484:	4313      	orrs	r3, r2
 8005486:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	69ba      	ldr	r2, [r7, #24]
 800548c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005494:	2201      	movs	r2, #1
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	fa02 f303 	lsl.w	r3, r2, r3
 800549c:	43db      	mvns	r3, r3
 800549e:	69ba      	ldr	r2, [r7, #24]
 80054a0:	4013      	ands	r3, r2
 80054a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	091b      	lsrs	r3, r3, #4
 80054aa:	f003 0201 	and.w	r2, r3, #1
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	fa02 f303 	lsl.w	r3, r2, r3
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f003 0303 	and.w	r3, r3, #3
 80054c8:	2b03      	cmp	r3, #3
 80054ca:	d017      	beq.n	80054fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	2203      	movs	r2, #3
 80054d8:	fa02 f303 	lsl.w	r3, r2, r3
 80054dc:	43db      	mvns	r3, r3
 80054de:	69ba      	ldr	r2, [r7, #24]
 80054e0:	4013      	ands	r3, r2
 80054e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	689a      	ldr	r2, [r3, #8]
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	005b      	lsls	r3, r3, #1
 80054ec:	fa02 f303 	lsl.w	r3, r2, r3
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f003 0303 	and.w	r3, r3, #3
 8005504:	2b02      	cmp	r3, #2
 8005506:	d123      	bne.n	8005550 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	08da      	lsrs	r2, r3, #3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	3208      	adds	r2, #8
 8005510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005514:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	f003 0307 	and.w	r3, r3, #7
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	220f      	movs	r2, #15
 8005520:	fa02 f303 	lsl.w	r3, r2, r3
 8005524:	43db      	mvns	r3, r3
 8005526:	69ba      	ldr	r2, [r7, #24]
 8005528:	4013      	ands	r3, r2
 800552a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	691a      	ldr	r2, [r3, #16]
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	f003 0307 	and.w	r3, r3, #7
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	fa02 f303 	lsl.w	r3, r2, r3
 800553c:	69ba      	ldr	r2, [r7, #24]
 800553e:	4313      	orrs	r3, r2
 8005540:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	08da      	lsrs	r2, r3, #3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	3208      	adds	r2, #8
 800554a:	69b9      	ldr	r1, [r7, #24]
 800554c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	005b      	lsls	r3, r3, #1
 800555a:	2203      	movs	r2, #3
 800555c:	fa02 f303 	lsl.w	r3, r2, r3
 8005560:	43db      	mvns	r3, r3
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	4013      	ands	r3, r2
 8005566:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f003 0203 	and.w	r2, r3, #3
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	005b      	lsls	r3, r3, #1
 8005574:	fa02 f303 	lsl.w	r3, r2, r3
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	4313      	orrs	r3, r2
 800557c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800558c:	2b00      	cmp	r3, #0
 800558e:	f000 80c0 	beq.w	8005712 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005592:	2300      	movs	r3, #0
 8005594:	60fb      	str	r3, [r7, #12]
 8005596:	4b66      	ldr	r3, [pc, #408]	; (8005730 <HAL_GPIO_Init+0x324>)
 8005598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800559a:	4a65      	ldr	r2, [pc, #404]	; (8005730 <HAL_GPIO_Init+0x324>)
 800559c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055a0:	6453      	str	r3, [r2, #68]	; 0x44
 80055a2:	4b63      	ldr	r3, [pc, #396]	; (8005730 <HAL_GPIO_Init+0x324>)
 80055a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055ae:	4a61      	ldr	r2, [pc, #388]	; (8005734 <HAL_GPIO_Init+0x328>)
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	089b      	lsrs	r3, r3, #2
 80055b4:	3302      	adds	r3, #2
 80055b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	f003 0303 	and.w	r3, r3, #3
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	220f      	movs	r2, #15
 80055c6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ca:	43db      	mvns	r3, r3
 80055cc:	69ba      	ldr	r2, [r7, #24]
 80055ce:	4013      	ands	r3, r2
 80055d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a58      	ldr	r2, [pc, #352]	; (8005738 <HAL_GPIO_Init+0x32c>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d037      	beq.n	800564a <HAL_GPIO_Init+0x23e>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a57      	ldr	r2, [pc, #348]	; (800573c <HAL_GPIO_Init+0x330>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d031      	beq.n	8005646 <HAL_GPIO_Init+0x23a>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a56      	ldr	r2, [pc, #344]	; (8005740 <HAL_GPIO_Init+0x334>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d02b      	beq.n	8005642 <HAL_GPIO_Init+0x236>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a55      	ldr	r2, [pc, #340]	; (8005744 <HAL_GPIO_Init+0x338>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d025      	beq.n	800563e <HAL_GPIO_Init+0x232>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a54      	ldr	r2, [pc, #336]	; (8005748 <HAL_GPIO_Init+0x33c>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d01f      	beq.n	800563a <HAL_GPIO_Init+0x22e>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a53      	ldr	r2, [pc, #332]	; (800574c <HAL_GPIO_Init+0x340>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d019      	beq.n	8005636 <HAL_GPIO_Init+0x22a>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a52      	ldr	r2, [pc, #328]	; (8005750 <HAL_GPIO_Init+0x344>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d013      	beq.n	8005632 <HAL_GPIO_Init+0x226>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a51      	ldr	r2, [pc, #324]	; (8005754 <HAL_GPIO_Init+0x348>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d00d      	beq.n	800562e <HAL_GPIO_Init+0x222>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a50      	ldr	r2, [pc, #320]	; (8005758 <HAL_GPIO_Init+0x34c>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d007      	beq.n	800562a <HAL_GPIO_Init+0x21e>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a4f      	ldr	r2, [pc, #316]	; (800575c <HAL_GPIO_Init+0x350>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d101      	bne.n	8005626 <HAL_GPIO_Init+0x21a>
 8005622:	2309      	movs	r3, #9
 8005624:	e012      	b.n	800564c <HAL_GPIO_Init+0x240>
 8005626:	230a      	movs	r3, #10
 8005628:	e010      	b.n	800564c <HAL_GPIO_Init+0x240>
 800562a:	2308      	movs	r3, #8
 800562c:	e00e      	b.n	800564c <HAL_GPIO_Init+0x240>
 800562e:	2307      	movs	r3, #7
 8005630:	e00c      	b.n	800564c <HAL_GPIO_Init+0x240>
 8005632:	2306      	movs	r3, #6
 8005634:	e00a      	b.n	800564c <HAL_GPIO_Init+0x240>
 8005636:	2305      	movs	r3, #5
 8005638:	e008      	b.n	800564c <HAL_GPIO_Init+0x240>
 800563a:	2304      	movs	r3, #4
 800563c:	e006      	b.n	800564c <HAL_GPIO_Init+0x240>
 800563e:	2303      	movs	r3, #3
 8005640:	e004      	b.n	800564c <HAL_GPIO_Init+0x240>
 8005642:	2302      	movs	r3, #2
 8005644:	e002      	b.n	800564c <HAL_GPIO_Init+0x240>
 8005646:	2301      	movs	r3, #1
 8005648:	e000      	b.n	800564c <HAL_GPIO_Init+0x240>
 800564a:	2300      	movs	r3, #0
 800564c:	69fa      	ldr	r2, [r7, #28]
 800564e:	f002 0203 	and.w	r2, r2, #3
 8005652:	0092      	lsls	r2, r2, #2
 8005654:	4093      	lsls	r3, r2
 8005656:	69ba      	ldr	r2, [r7, #24]
 8005658:	4313      	orrs	r3, r2
 800565a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800565c:	4935      	ldr	r1, [pc, #212]	; (8005734 <HAL_GPIO_Init+0x328>)
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	089b      	lsrs	r3, r3, #2
 8005662:	3302      	adds	r3, #2
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800566a:	4b3d      	ldr	r3, [pc, #244]	; (8005760 <HAL_GPIO_Init+0x354>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	43db      	mvns	r3, r3
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	4013      	ands	r3, r2
 8005678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005686:	69ba      	ldr	r2, [r7, #24]
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	4313      	orrs	r3, r2
 800568c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800568e:	4a34      	ldr	r2, [pc, #208]	; (8005760 <HAL_GPIO_Init+0x354>)
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005694:	4b32      	ldr	r3, [pc, #200]	; (8005760 <HAL_GPIO_Init+0x354>)
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	43db      	mvns	r3, r3
 800569e:	69ba      	ldr	r2, [r7, #24]
 80056a0:	4013      	ands	r3, r2
 80056a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d003      	beq.n	80056b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80056b8:	4a29      	ldr	r2, [pc, #164]	; (8005760 <HAL_GPIO_Init+0x354>)
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80056be:	4b28      	ldr	r3, [pc, #160]	; (8005760 <HAL_GPIO_Init+0x354>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	43db      	mvns	r3, r3
 80056c8:	69ba      	ldr	r2, [r7, #24]
 80056ca:	4013      	ands	r3, r2
 80056cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80056da:	69ba      	ldr	r2, [r7, #24]
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	4313      	orrs	r3, r2
 80056e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80056e2:	4a1f      	ldr	r2, [pc, #124]	; (8005760 <HAL_GPIO_Init+0x354>)
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80056e8:	4b1d      	ldr	r3, [pc, #116]	; (8005760 <HAL_GPIO_Init+0x354>)
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	43db      	mvns	r3, r3
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	4013      	ands	r3, r2
 80056f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d003      	beq.n	800570c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	4313      	orrs	r3, r2
 800570a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800570c:	4a14      	ldr	r2, [pc, #80]	; (8005760 <HAL_GPIO_Init+0x354>)
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	3301      	adds	r3, #1
 8005716:	61fb      	str	r3, [r7, #28]
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	2b0f      	cmp	r3, #15
 800571c:	f67f ae84 	bls.w	8005428 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005720:	bf00      	nop
 8005722:	bf00      	nop
 8005724:	3724      	adds	r7, #36	; 0x24
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	40023800 	.word	0x40023800
 8005734:	40013800 	.word	0x40013800
 8005738:	40020000 	.word	0x40020000
 800573c:	40020400 	.word	0x40020400
 8005740:	40020800 	.word	0x40020800
 8005744:	40020c00 	.word	0x40020c00
 8005748:	40021000 	.word	0x40021000
 800574c:	40021400 	.word	0x40021400
 8005750:	40021800 	.word	0x40021800
 8005754:	40021c00 	.word	0x40021c00
 8005758:	40022000 	.word	0x40022000
 800575c:	40022400 	.word	0x40022400
 8005760:	40013c00 	.word	0x40013c00

08005764 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	460b      	mov	r3, r1
 800576e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	691a      	ldr	r2, [r3, #16]
 8005774:	887b      	ldrh	r3, [r7, #2]
 8005776:	4013      	ands	r3, r2
 8005778:	2b00      	cmp	r3, #0
 800577a:	d002      	beq.n	8005782 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800577c:	2301      	movs	r3, #1
 800577e:	73fb      	strb	r3, [r7, #15]
 8005780:	e001      	b.n	8005786 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005782:	2300      	movs	r3, #0
 8005784:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005786:	7bfb      	ldrb	r3, [r7, #15]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3714      	adds	r7, #20
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	460b      	mov	r3, r1
 800579e:	807b      	strh	r3, [r7, #2]
 80057a0:	4613      	mov	r3, r2
 80057a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80057a4:	787b      	ldrb	r3, [r7, #1]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80057aa:	887a      	ldrh	r2, [r7, #2]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80057b0:	e003      	b.n	80057ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80057b2:	887b      	ldrh	r3, [r7, #2]
 80057b4:	041a      	lsls	r2, r3, #16
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	619a      	str	r2, [r3, #24]
}
 80057ba:	bf00      	nop
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
	...

080057c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e12b      	b.n	8005a32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d106      	bne.n	80057f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7fd f83a 	bl	8002868 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2224      	movs	r2, #36	; 0x24
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 0201 	bic.w	r2, r2, #1
 800580a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800581a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800582a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800582c:	f001 fe1a 	bl	8007464 <HAL_RCC_GetPCLK1Freq>
 8005830:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	4a81      	ldr	r2, [pc, #516]	; (8005a3c <HAL_I2C_Init+0x274>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d807      	bhi.n	800584c <HAL_I2C_Init+0x84>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4a80      	ldr	r2, [pc, #512]	; (8005a40 <HAL_I2C_Init+0x278>)
 8005840:	4293      	cmp	r3, r2
 8005842:	bf94      	ite	ls
 8005844:	2301      	movls	r3, #1
 8005846:	2300      	movhi	r3, #0
 8005848:	b2db      	uxtb	r3, r3
 800584a:	e006      	b.n	800585a <HAL_I2C_Init+0x92>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4a7d      	ldr	r2, [pc, #500]	; (8005a44 <HAL_I2C_Init+0x27c>)
 8005850:	4293      	cmp	r3, r2
 8005852:	bf94      	ite	ls
 8005854:	2301      	movls	r3, #1
 8005856:	2300      	movhi	r3, #0
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e0e7      	b.n	8005a32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	4a78      	ldr	r2, [pc, #480]	; (8005a48 <HAL_I2C_Init+0x280>)
 8005866:	fba2 2303 	umull	r2, r3, r2, r3
 800586a:	0c9b      	lsrs	r3, r3, #18
 800586c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	430a      	orrs	r2, r1
 8005880:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	4a6a      	ldr	r2, [pc, #424]	; (8005a3c <HAL_I2C_Init+0x274>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d802      	bhi.n	800589c <HAL_I2C_Init+0xd4>
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	3301      	adds	r3, #1
 800589a:	e009      	b.n	80058b0 <HAL_I2C_Init+0xe8>
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80058a2:	fb02 f303 	mul.w	r3, r2, r3
 80058a6:	4a69      	ldr	r2, [pc, #420]	; (8005a4c <HAL_I2C_Init+0x284>)
 80058a8:	fba2 2303 	umull	r2, r3, r2, r3
 80058ac:	099b      	lsrs	r3, r3, #6
 80058ae:	3301      	adds	r3, #1
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	6812      	ldr	r2, [r2, #0]
 80058b4:	430b      	orrs	r3, r1
 80058b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80058c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	495c      	ldr	r1, [pc, #368]	; (8005a3c <HAL_I2C_Init+0x274>)
 80058cc:	428b      	cmp	r3, r1
 80058ce:	d819      	bhi.n	8005904 <HAL_I2C_Init+0x13c>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	1e59      	subs	r1, r3, #1
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	005b      	lsls	r3, r3, #1
 80058da:	fbb1 f3f3 	udiv	r3, r1, r3
 80058de:	1c59      	adds	r1, r3, #1
 80058e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80058e4:	400b      	ands	r3, r1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00a      	beq.n	8005900 <HAL_I2C_Init+0x138>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	1e59      	subs	r1, r3, #1
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	005b      	lsls	r3, r3, #1
 80058f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80058f8:	3301      	adds	r3, #1
 80058fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058fe:	e051      	b.n	80059a4 <HAL_I2C_Init+0x1dc>
 8005900:	2304      	movs	r3, #4
 8005902:	e04f      	b.n	80059a4 <HAL_I2C_Init+0x1dc>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d111      	bne.n	8005930 <HAL_I2C_Init+0x168>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	1e58      	subs	r0, r3, #1
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6859      	ldr	r1, [r3, #4]
 8005914:	460b      	mov	r3, r1
 8005916:	005b      	lsls	r3, r3, #1
 8005918:	440b      	add	r3, r1
 800591a:	fbb0 f3f3 	udiv	r3, r0, r3
 800591e:	3301      	adds	r3, #1
 8005920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005924:	2b00      	cmp	r3, #0
 8005926:	bf0c      	ite	eq
 8005928:	2301      	moveq	r3, #1
 800592a:	2300      	movne	r3, #0
 800592c:	b2db      	uxtb	r3, r3
 800592e:	e012      	b.n	8005956 <HAL_I2C_Init+0x18e>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	1e58      	subs	r0, r3, #1
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6859      	ldr	r1, [r3, #4]
 8005938:	460b      	mov	r3, r1
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	440b      	add	r3, r1
 800593e:	0099      	lsls	r1, r3, #2
 8005940:	440b      	add	r3, r1
 8005942:	fbb0 f3f3 	udiv	r3, r0, r3
 8005946:	3301      	adds	r3, #1
 8005948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800594c:	2b00      	cmp	r3, #0
 800594e:	bf0c      	ite	eq
 8005950:	2301      	moveq	r3, #1
 8005952:	2300      	movne	r3, #0
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <HAL_I2C_Init+0x196>
 800595a:	2301      	movs	r3, #1
 800595c:	e022      	b.n	80059a4 <HAL_I2C_Init+0x1dc>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10e      	bne.n	8005984 <HAL_I2C_Init+0x1bc>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	1e58      	subs	r0, r3, #1
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6859      	ldr	r1, [r3, #4]
 800596e:	460b      	mov	r3, r1
 8005970:	005b      	lsls	r3, r3, #1
 8005972:	440b      	add	r3, r1
 8005974:	fbb0 f3f3 	udiv	r3, r0, r3
 8005978:	3301      	adds	r3, #1
 800597a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800597e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005982:	e00f      	b.n	80059a4 <HAL_I2C_Init+0x1dc>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	1e58      	subs	r0, r3, #1
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6859      	ldr	r1, [r3, #4]
 800598c:	460b      	mov	r3, r1
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	440b      	add	r3, r1
 8005992:	0099      	lsls	r1, r3, #2
 8005994:	440b      	add	r3, r1
 8005996:	fbb0 f3f3 	udiv	r3, r0, r3
 800599a:	3301      	adds	r3, #1
 800599c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059a4:	6879      	ldr	r1, [r7, #4]
 80059a6:	6809      	ldr	r1, [r1, #0]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	69da      	ldr	r2, [r3, #28]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	431a      	orrs	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	430a      	orrs	r2, r1
 80059c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80059d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	6911      	ldr	r1, [r2, #16]
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	68d2      	ldr	r2, [r2, #12]
 80059de:	4311      	orrs	r1, r2
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	6812      	ldr	r2, [r2, #0]
 80059e4:	430b      	orrs	r3, r1
 80059e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	695a      	ldr	r2, [r3, #20]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	431a      	orrs	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f042 0201 	orr.w	r2, r2, #1
 8005a12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2220      	movs	r2, #32
 8005a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	000186a0 	.word	0x000186a0
 8005a40:	001e847f 	.word	0x001e847f
 8005a44:	003d08ff 	.word	0x003d08ff
 8005a48:	431bde83 	.word	0x431bde83
 8005a4c:	10624dd3 	.word	0x10624dd3

08005a50 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b088      	sub	sp, #32
 8005a54:	af02      	add	r7, sp, #8
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	4608      	mov	r0, r1
 8005a5a:	4611      	mov	r1, r2
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	4603      	mov	r3, r0
 8005a60:	817b      	strh	r3, [r7, #10]
 8005a62:	460b      	mov	r3, r1
 8005a64:	813b      	strh	r3, [r7, #8]
 8005a66:	4613      	mov	r3, r2
 8005a68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a6a:	f7ff f919 	bl	8004ca0 <HAL_GetTick>
 8005a6e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	2b20      	cmp	r3, #32
 8005a7a:	f040 80d9 	bne.w	8005c30 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	2319      	movs	r3, #25
 8005a84:	2201      	movs	r2, #1
 8005a86:	496d      	ldr	r1, [pc, #436]	; (8005c3c <HAL_I2C_Mem_Write+0x1ec>)
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f000 fde3 	bl	8006654 <I2C_WaitOnFlagUntilTimeout>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d001      	beq.n	8005a98 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005a94:	2302      	movs	r3, #2
 8005a96:	e0cc      	b.n	8005c32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d101      	bne.n	8005aa6 <HAL_I2C_Mem_Write+0x56>
 8005aa2:	2302      	movs	r3, #2
 8005aa4:	e0c5      	b.n	8005c32 <HAL_I2C_Mem_Write+0x1e2>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d007      	beq.n	8005acc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f042 0201 	orr.w	r2, r2, #1
 8005aca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ada:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2221      	movs	r2, #33	; 0x21
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2240      	movs	r2, #64	; 0x40
 8005ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6a3a      	ldr	r2, [r7, #32]
 8005af6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005afc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4a4d      	ldr	r2, [pc, #308]	; (8005c40 <HAL_I2C_Mem_Write+0x1f0>)
 8005b0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b0e:	88f8      	ldrh	r0, [r7, #6]
 8005b10:	893a      	ldrh	r2, [r7, #8]
 8005b12:	8979      	ldrh	r1, [r7, #10]
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	9301      	str	r3, [sp, #4]
 8005b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f000 fc1a 	bl	8006358 <I2C_RequestMemoryWrite>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d052      	beq.n	8005bd0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e081      	b.n	8005c32 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f000 fe64 	bl	8006800 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00d      	beq.n	8005b5a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	2b04      	cmp	r3, #4
 8005b44:	d107      	bne.n	8005b56 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e06b      	b.n	8005c32 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5e:	781a      	ldrb	r2, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6a:	1c5a      	adds	r2, r3, #1
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b74:	3b01      	subs	r3, #1
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	3b01      	subs	r3, #1
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	f003 0304 	and.w	r3, r3, #4
 8005b94:	2b04      	cmp	r3, #4
 8005b96:	d11b      	bne.n	8005bd0 <HAL_I2C_Mem_Write+0x180>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d017      	beq.n	8005bd0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba4:	781a      	ldrb	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb0:	1c5a      	adds	r2, r3, #1
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1aa      	bne.n	8005b2e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f000 fe50 	bl	8006882 <I2C_WaitOnBTFFlagUntilTimeout>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00d      	beq.n	8005c04 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bec:	2b04      	cmp	r3, #4
 8005bee:	d107      	bne.n	8005c00 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bfe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e016      	b.n	8005c32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2220      	movs	r2, #32
 8005c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	e000      	b.n	8005c32 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005c30:	2302      	movs	r3, #2
  }
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3718      	adds	r7, #24
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	00100002 	.word	0x00100002
 8005c40:	ffff0000 	.word	0xffff0000

08005c44 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b08c      	sub	sp, #48	; 0x30
 8005c48:	af02      	add	r7, sp, #8
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	4608      	mov	r0, r1
 8005c4e:	4611      	mov	r1, r2
 8005c50:	461a      	mov	r2, r3
 8005c52:	4603      	mov	r3, r0
 8005c54:	817b      	strh	r3, [r7, #10]
 8005c56:	460b      	mov	r3, r1
 8005c58:	813b      	strh	r3, [r7, #8]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c5e:	f7ff f81f 	bl	8004ca0 <HAL_GetTick>
 8005c62:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b20      	cmp	r3, #32
 8005c6e:	f040 8208 	bne.w	8006082 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c74:	9300      	str	r3, [sp, #0]
 8005c76:	2319      	movs	r3, #25
 8005c78:	2201      	movs	r2, #1
 8005c7a:	497b      	ldr	r1, [pc, #492]	; (8005e68 <HAL_I2C_Mem_Read+0x224>)
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f000 fce9 	bl	8006654 <I2C_WaitOnFlagUntilTimeout>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d001      	beq.n	8005c8c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005c88:	2302      	movs	r3, #2
 8005c8a:	e1fb      	b.n	8006084 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d101      	bne.n	8005c9a <HAL_I2C_Mem_Read+0x56>
 8005c96:	2302      	movs	r3, #2
 8005c98:	e1f4      	b.n	8006084 <HAL_I2C_Mem_Read+0x440>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0301 	and.w	r3, r3, #1
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d007      	beq.n	8005cc0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f042 0201 	orr.w	r2, r2, #1
 8005cbe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2222      	movs	r2, #34	; 0x22
 8005cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2240      	movs	r2, #64	; 0x40
 8005cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005cf0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	4a5b      	ldr	r2, [pc, #364]	; (8005e6c <HAL_I2C_Mem_Read+0x228>)
 8005d00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d02:	88f8      	ldrh	r0, [r7, #6]
 8005d04:	893a      	ldrh	r2, [r7, #8]
 8005d06:	8979      	ldrh	r1, [r7, #10]
 8005d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0a:	9301      	str	r3, [sp, #4]
 8005d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0e:	9300      	str	r3, [sp, #0]
 8005d10:	4603      	mov	r3, r0
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f000 fbb6 	bl	8006484 <I2C_RequestMemoryRead>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e1b0      	b.n	8006084 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d113      	bne.n	8005d52 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	623b      	str	r3, [r7, #32]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	695b      	ldr	r3, [r3, #20]
 8005d34:	623b      	str	r3, [r7, #32]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	623b      	str	r3, [r7, #32]
 8005d3e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d4e:	601a      	str	r2, [r3, #0]
 8005d50:	e184      	b.n	800605c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d11b      	bne.n	8005d92 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	61fb      	str	r3, [r7, #28]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	695b      	ldr	r3, [r3, #20]
 8005d74:	61fb      	str	r3, [r7, #28]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	61fb      	str	r3, [r7, #28]
 8005d7e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d8e:	601a      	str	r2, [r3, #0]
 8005d90:	e164      	b.n	800605c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d11b      	bne.n	8005dd2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005da8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005db8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dba:	2300      	movs	r3, #0
 8005dbc:	61bb      	str	r3, [r7, #24]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	61bb      	str	r3, [r7, #24]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	699b      	ldr	r3, [r3, #24]
 8005dcc:	61bb      	str	r3, [r7, #24]
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	e144      	b.n	800605c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	617b      	str	r3, [r7, #20]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	617b      	str	r3, [r7, #20]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	617b      	str	r3, [r7, #20]
 8005de6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005de8:	e138      	b.n	800605c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dee:	2b03      	cmp	r3, #3
 8005df0:	f200 80f1 	bhi.w	8005fd6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d123      	bne.n	8005e44 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dfe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f000 fd7f 	bl	8006904 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e139      	b.n	8006084 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	691a      	ldr	r2, [r3, #16]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1a:	b2d2      	uxtb	r2, r2
 8005e1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e22:	1c5a      	adds	r2, r3, #1
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e42:	e10b      	b.n	800605c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d14e      	bne.n	8005eea <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e52:	2200      	movs	r2, #0
 8005e54:	4906      	ldr	r1, [pc, #24]	; (8005e70 <HAL_I2C_Mem_Read+0x22c>)
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f000 fbfc 	bl	8006654 <I2C_WaitOnFlagUntilTimeout>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d008      	beq.n	8005e74 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e10e      	b.n	8006084 <HAL_I2C_Mem_Read+0x440>
 8005e66:	bf00      	nop
 8005e68:	00100002 	.word	0x00100002
 8005e6c:	ffff0000 	.word	0xffff0000
 8005e70:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	691a      	ldr	r2, [r3, #16]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8e:	b2d2      	uxtb	r2, r2
 8005e90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	1c5a      	adds	r2, r3, #1
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	691a      	ldr	r2, [r3, #16]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec0:	b2d2      	uxtb	r2, r2
 8005ec2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec8:	1c5a      	adds	r2, r3, #1
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ee8:	e0b8      	b.n	800605c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	4966      	ldr	r1, [pc, #408]	; (800608c <HAL_I2C_Mem_Read+0x448>)
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 fbad 	bl	8006654 <I2C_WaitOnFlagUntilTimeout>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d001      	beq.n	8005f04 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e0bf      	b.n	8006084 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	691a      	ldr	r2, [r3, #16]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1e:	b2d2      	uxtb	r2, r2
 8005f20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	1c5a      	adds	r2, r3, #1
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f30:	3b01      	subs	r3, #1
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f48:	9300      	str	r3, [sp, #0]
 8005f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	494f      	ldr	r1, [pc, #316]	; (800608c <HAL_I2C_Mem_Read+0x448>)
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f000 fb7f 	bl	8006654 <I2C_WaitOnFlagUntilTimeout>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d001      	beq.n	8005f60 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e091      	b.n	8006084 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	691a      	ldr	r2, [r3, #16]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7a:	b2d2      	uxtb	r2, r2
 8005f7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	1c5a      	adds	r2, r3, #1
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	691a      	ldr	r2, [r3, #16]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fac:	b2d2      	uxtb	r2, r2
 8005fae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb4:	1c5a      	adds	r2, r3, #1
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005fd4:	e042      	b.n	800605c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fd8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f000 fc92 	bl	8006904 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d001      	beq.n	8005fea <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e04c      	b.n	8006084 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	691a      	ldr	r2, [r3, #16]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff4:	b2d2      	uxtb	r2, r2
 8005ff6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffc:	1c5a      	adds	r2, r3, #1
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006006:	3b01      	subs	r3, #1
 8006008:	b29a      	uxth	r2, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006012:	b29b      	uxth	r3, r3
 8006014:	3b01      	subs	r3, #1
 8006016:	b29a      	uxth	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	f003 0304 	and.w	r3, r3, #4
 8006026:	2b04      	cmp	r3, #4
 8006028:	d118      	bne.n	800605c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	691a      	ldr	r2, [r3, #16]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006034:	b2d2      	uxtb	r2, r2
 8006036:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603c:	1c5a      	adds	r2, r3, #1
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006046:	3b01      	subs	r3, #1
 8006048:	b29a      	uxth	r2, r3
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006052:	b29b      	uxth	r3, r3
 8006054:	3b01      	subs	r3, #1
 8006056:	b29a      	uxth	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006060:	2b00      	cmp	r3, #0
 8006062:	f47f aec2 	bne.w	8005dea <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2220      	movs	r2, #32
 800606a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800607e:	2300      	movs	r3, #0
 8006080:	e000      	b.n	8006084 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006082:	2302      	movs	r3, #2
  }
}
 8006084:	4618      	mov	r0, r3
 8006086:	3728      	adds	r7, #40	; 0x28
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	00010004 	.word	0x00010004

08006090 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b08a      	sub	sp, #40	; 0x28
 8006094:	af02      	add	r7, sp, #8
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	607a      	str	r2, [r7, #4]
 800609a:	603b      	str	r3, [r7, #0]
 800609c:	460b      	mov	r3, r1
 800609e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80060a0:	f7fe fdfe 	bl	8004ca0 <HAL_GetTick>
 80060a4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80060a6:	2301      	movs	r3, #1
 80060a8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b20      	cmp	r3, #32
 80060b4:	f040 8111 	bne.w	80062da <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	2319      	movs	r3, #25
 80060be:	2201      	movs	r2, #1
 80060c0:	4988      	ldr	r1, [pc, #544]	; (80062e4 <HAL_I2C_IsDeviceReady+0x254>)
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f000 fac6 	bl	8006654 <I2C_WaitOnFlagUntilTimeout>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d001      	beq.n	80060d2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80060ce:	2302      	movs	r3, #2
 80060d0:	e104      	b.n	80062dc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d101      	bne.n	80060e0 <HAL_I2C_IsDeviceReady+0x50>
 80060dc:	2302      	movs	r3, #2
 80060de:	e0fd      	b.n	80062dc <HAL_I2C_IsDeviceReady+0x24c>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d007      	beq.n	8006106 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f042 0201 	orr.w	r2, r2, #1
 8006104:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006114:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2224      	movs	r2, #36	; 0x24
 800611a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	4a70      	ldr	r2, [pc, #448]	; (80062e8 <HAL_I2C_IsDeviceReady+0x258>)
 8006128:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006138:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	9300      	str	r3, [sp, #0]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	2200      	movs	r2, #0
 8006142:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f000 fa84 	bl	8006654 <I2C_WaitOnFlagUntilTimeout>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00d      	beq.n	800616e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800615c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006160:	d103      	bne.n	800616a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006168:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e0b6      	b.n	80062dc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800616e:	897b      	ldrh	r3, [r7, #10]
 8006170:	b2db      	uxtb	r3, r3
 8006172:	461a      	mov	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800617c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800617e:	f7fe fd8f 	bl	8004ca0 <HAL_GetTick>
 8006182:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b02      	cmp	r3, #2
 8006190:	bf0c      	ite	eq
 8006192:	2301      	moveq	r3, #1
 8006194:	2300      	movne	r3, #0
 8006196:	b2db      	uxtb	r3, r3
 8006198:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	695b      	ldr	r3, [r3, #20]
 80061a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061a8:	bf0c      	ite	eq
 80061aa:	2301      	moveq	r3, #1
 80061ac:	2300      	movne	r3, #0
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80061b2:	e025      	b.n	8006200 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80061b4:	f7fe fd74 	bl	8004ca0 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d302      	bcc.n	80061ca <HAL_I2C_IsDeviceReady+0x13a>
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d103      	bne.n	80061d2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	22a0      	movs	r2, #160	; 0xa0
 80061ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	695b      	ldr	r3, [r3, #20]
 80061d8:	f003 0302 	and.w	r3, r3, #2
 80061dc:	2b02      	cmp	r3, #2
 80061de:	bf0c      	ite	eq
 80061e0:	2301      	moveq	r3, #1
 80061e2:	2300      	movne	r3, #0
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061f6:	bf0c      	ite	eq
 80061f8:	2301      	moveq	r3, #1
 80061fa:	2300      	movne	r3, #0
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006206:	b2db      	uxtb	r3, r3
 8006208:	2ba0      	cmp	r3, #160	; 0xa0
 800620a:	d005      	beq.n	8006218 <HAL_I2C_IsDeviceReady+0x188>
 800620c:	7dfb      	ldrb	r3, [r7, #23]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d102      	bne.n	8006218 <HAL_I2C_IsDeviceReady+0x188>
 8006212:	7dbb      	ldrb	r3, [r7, #22]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d0cd      	beq.n	80061b4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2220      	movs	r2, #32
 800621c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	f003 0302 	and.w	r3, r3, #2
 800622a:	2b02      	cmp	r3, #2
 800622c:	d129      	bne.n	8006282 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800623c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800623e:	2300      	movs	r3, #0
 8006240:	613b      	str	r3, [r7, #16]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	695b      	ldr	r3, [r3, #20]
 8006248:	613b      	str	r3, [r7, #16]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	613b      	str	r3, [r7, #16]
 8006252:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	2319      	movs	r3, #25
 800625a:	2201      	movs	r2, #1
 800625c:	4921      	ldr	r1, [pc, #132]	; (80062e4 <HAL_I2C_IsDeviceReady+0x254>)
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f000 f9f8 	bl	8006654 <I2C_WaitOnFlagUntilTimeout>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e036      	b.n	80062dc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2220      	movs	r2, #32
 8006272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800627e:	2300      	movs	r3, #0
 8006280:	e02c      	b.n	80062dc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006290:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800629a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	9300      	str	r3, [sp, #0]
 80062a0:	2319      	movs	r3, #25
 80062a2:	2201      	movs	r2, #1
 80062a4:	490f      	ldr	r1, [pc, #60]	; (80062e4 <HAL_I2C_IsDeviceReady+0x254>)
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f000 f9d4 	bl	8006654 <I2C_WaitOnFlagUntilTimeout>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d001      	beq.n	80062b6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e012      	b.n	80062dc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	3301      	adds	r3, #1
 80062ba:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	f4ff af32 	bcc.w	800612a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2220      	movs	r2, #32
 80062ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e000      	b.n	80062dc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80062da:	2302      	movs	r3, #2
  }
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3720      	adds	r7, #32
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	00100002 	.word	0x00100002
 80062e8:	ffff0000 	.word	0xffff0000

080062ec <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	2b20      	cmp	r3, #32
 80062fe:	d124      	bne.n	800634a <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2228      	movs	r2, #40	; 0x28
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b01      	cmp	r3, #1
 8006314:	d007      	beq.n	8006326 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f042 0201 	orr.w	r2, r2, #1
 8006324:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006334:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006344:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8006346:	2300      	movs	r3, #0
 8006348:	e000      	b.n	800634c <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800634a:	2302      	movs	r3, #2
  }
}
 800634c:	4618      	mov	r0, r3
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b088      	sub	sp, #32
 800635c:	af02      	add	r7, sp, #8
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	4608      	mov	r0, r1
 8006362:	4611      	mov	r1, r2
 8006364:	461a      	mov	r2, r3
 8006366:	4603      	mov	r3, r0
 8006368:	817b      	strh	r3, [r7, #10]
 800636a:	460b      	mov	r3, r1
 800636c:	813b      	strh	r3, [r7, #8]
 800636e:	4613      	mov	r3, r2
 8006370:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006380:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	6a3b      	ldr	r3, [r7, #32]
 8006388:	2200      	movs	r2, #0
 800638a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f000 f960 	bl	8006654 <I2C_WaitOnFlagUntilTimeout>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00d      	beq.n	80063b6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063a8:	d103      	bne.n	80063b2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e05f      	b.n	8006476 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80063b6:	897b      	ldrh	r3, [r7, #10]
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	461a      	mov	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80063c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c8:	6a3a      	ldr	r2, [r7, #32]
 80063ca:	492d      	ldr	r1, [pc, #180]	; (8006480 <I2C_RequestMemoryWrite+0x128>)
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f000 f998 	bl	8006702 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d001      	beq.n	80063dc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e04c      	b.n	8006476 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063dc:	2300      	movs	r3, #0
 80063de:	617b      	str	r3, [r7, #20]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	617b      	str	r3, [r7, #20]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	617b      	str	r3, [r7, #20]
 80063f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063f4:	6a39      	ldr	r1, [r7, #32]
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f000 fa02 	bl	8006800 <I2C_WaitOnTXEFlagUntilTimeout>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00d      	beq.n	800641e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006406:	2b04      	cmp	r3, #4
 8006408:	d107      	bne.n	800641a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006418:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e02b      	b.n	8006476 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800641e:	88fb      	ldrh	r3, [r7, #6]
 8006420:	2b01      	cmp	r3, #1
 8006422:	d105      	bne.n	8006430 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006424:	893b      	ldrh	r3, [r7, #8]
 8006426:	b2da      	uxtb	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	611a      	str	r2, [r3, #16]
 800642e:	e021      	b.n	8006474 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006430:	893b      	ldrh	r3, [r7, #8]
 8006432:	0a1b      	lsrs	r3, r3, #8
 8006434:	b29b      	uxth	r3, r3
 8006436:	b2da      	uxtb	r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800643e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006440:	6a39      	ldr	r1, [r7, #32]
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f000 f9dc 	bl	8006800 <I2C_WaitOnTXEFlagUntilTimeout>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00d      	beq.n	800646a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006452:	2b04      	cmp	r3, #4
 8006454:	d107      	bne.n	8006466 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006464:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e005      	b.n	8006476 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800646a:	893b      	ldrh	r3, [r7, #8]
 800646c:	b2da      	uxtb	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3718      	adds	r7, #24
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	00010002 	.word	0x00010002

08006484 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b088      	sub	sp, #32
 8006488:	af02      	add	r7, sp, #8
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	4608      	mov	r0, r1
 800648e:	4611      	mov	r1, r2
 8006490:	461a      	mov	r2, r3
 8006492:	4603      	mov	r3, r0
 8006494:	817b      	strh	r3, [r7, #10]
 8006496:	460b      	mov	r3, r1
 8006498:	813b      	strh	r3, [r7, #8]
 800649a:	4613      	mov	r3, r2
 800649c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80064ac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	6a3b      	ldr	r3, [r7, #32]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f000 f8c2 	bl	8006654 <I2C_WaitOnFlagUntilTimeout>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00d      	beq.n	80064f2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064e4:	d103      	bne.n	80064ee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e0aa      	b.n	8006648 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064f2:	897b      	ldrh	r3, [r7, #10]
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	461a      	mov	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006500:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006504:	6a3a      	ldr	r2, [r7, #32]
 8006506:	4952      	ldr	r1, [pc, #328]	; (8006650 <I2C_RequestMemoryRead+0x1cc>)
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f000 f8fa 	bl	8006702 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d001      	beq.n	8006518 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e097      	b.n	8006648 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006518:	2300      	movs	r3, #0
 800651a:	617b      	str	r3, [r7, #20]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	617b      	str	r3, [r7, #20]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	617b      	str	r3, [r7, #20]
 800652c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800652e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006530:	6a39      	ldr	r1, [r7, #32]
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f000 f964 	bl	8006800 <I2C_WaitOnTXEFlagUntilTimeout>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00d      	beq.n	800655a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006542:	2b04      	cmp	r3, #4
 8006544:	d107      	bne.n	8006556 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006554:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e076      	b.n	8006648 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800655a:	88fb      	ldrh	r3, [r7, #6]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d105      	bne.n	800656c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006560:	893b      	ldrh	r3, [r7, #8]
 8006562:	b2da      	uxtb	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	611a      	str	r2, [r3, #16]
 800656a:	e021      	b.n	80065b0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800656c:	893b      	ldrh	r3, [r7, #8]
 800656e:	0a1b      	lsrs	r3, r3, #8
 8006570:	b29b      	uxth	r3, r3
 8006572:	b2da      	uxtb	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800657a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800657c:	6a39      	ldr	r1, [r7, #32]
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f000 f93e 	bl	8006800 <I2C_WaitOnTXEFlagUntilTimeout>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00d      	beq.n	80065a6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658e:	2b04      	cmp	r3, #4
 8006590:	d107      	bne.n	80065a2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e050      	b.n	8006648 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80065a6:	893b      	ldrh	r3, [r7, #8]
 80065a8:	b2da      	uxtb	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065b2:	6a39      	ldr	r1, [r7, #32]
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f000 f923 	bl	8006800 <I2C_WaitOnTXEFlagUntilTimeout>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00d      	beq.n	80065dc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c4:	2b04      	cmp	r3, #4
 80065c6:	d107      	bne.n	80065d8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065d6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e035      	b.n	8006648 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065ea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	6a3b      	ldr	r3, [r7, #32]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f000 f82b 	bl	8006654 <I2C_WaitOnFlagUntilTimeout>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00d      	beq.n	8006620 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800660e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006612:	d103      	bne.n	800661c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f44f 7200 	mov.w	r2, #512	; 0x200
 800661a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e013      	b.n	8006648 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006620:	897b      	ldrh	r3, [r7, #10]
 8006622:	b2db      	uxtb	r3, r3
 8006624:	f043 0301 	orr.w	r3, r3, #1
 8006628:	b2da      	uxtb	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006632:	6a3a      	ldr	r2, [r7, #32]
 8006634:	4906      	ldr	r1, [pc, #24]	; (8006650 <I2C_RequestMemoryRead+0x1cc>)
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f000 f863 	bl	8006702 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d001      	beq.n	8006646 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e000      	b.n	8006648 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3718      	adds	r7, #24
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}
 8006650:	00010002 	.word	0x00010002

08006654 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	603b      	str	r3, [r7, #0]
 8006660:	4613      	mov	r3, r2
 8006662:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006664:	e025      	b.n	80066b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666c:	d021      	beq.n	80066b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800666e:	f7fe fb17 	bl	8004ca0 <HAL_GetTick>
 8006672:	4602      	mov	r2, r0
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	429a      	cmp	r2, r3
 800667c:	d302      	bcc.n	8006684 <I2C_WaitOnFlagUntilTimeout+0x30>
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d116      	bne.n	80066b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2220      	movs	r2, #32
 800668e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669e:	f043 0220 	orr.w	r2, r3, #32
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e023      	b.n	80066fa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	0c1b      	lsrs	r3, r3, #16
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d10d      	bne.n	80066d8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	43da      	mvns	r2, r3
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	4013      	ands	r3, r2
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	bf0c      	ite	eq
 80066ce:	2301      	moveq	r3, #1
 80066d0:	2300      	movne	r3, #0
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	461a      	mov	r2, r3
 80066d6:	e00c      	b.n	80066f2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	43da      	mvns	r2, r3
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	4013      	ands	r3, r2
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	bf0c      	ite	eq
 80066ea:	2301      	moveq	r3, #1
 80066ec:	2300      	movne	r3, #0
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	461a      	mov	r2, r3
 80066f2:	79fb      	ldrb	r3, [r7, #7]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d0b6      	beq.n	8006666 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006702:	b580      	push	{r7, lr}
 8006704:	b084      	sub	sp, #16
 8006706:	af00      	add	r7, sp, #0
 8006708:	60f8      	str	r0, [r7, #12]
 800670a:	60b9      	str	r1, [r7, #8]
 800670c:	607a      	str	r2, [r7, #4]
 800670e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006710:	e051      	b.n	80067b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800671c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006720:	d123      	bne.n	800676a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006730:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800673a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2220      	movs	r2, #32
 8006746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006756:	f043 0204 	orr.w	r2, r3, #4
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e046      	b.n	80067f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006770:	d021      	beq.n	80067b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006772:	f7fe fa95 	bl	8004ca0 <HAL_GetTick>
 8006776:	4602      	mov	r2, r0
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	429a      	cmp	r2, r3
 8006780:	d302      	bcc.n	8006788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d116      	bne.n	80067b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2220      	movs	r2, #32
 8006792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a2:	f043 0220 	orr.w	r2, r3, #32
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e020      	b.n	80067f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	0c1b      	lsrs	r3, r3, #16
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d10c      	bne.n	80067da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	43da      	mvns	r2, r3
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	4013      	ands	r3, r2
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	bf14      	ite	ne
 80067d2:	2301      	movne	r3, #1
 80067d4:	2300      	moveq	r3, #0
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	e00b      	b.n	80067f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	699b      	ldr	r3, [r3, #24]
 80067e0:	43da      	mvns	r2, r3
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	4013      	ands	r3, r2
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	bf14      	ite	ne
 80067ec:	2301      	movne	r3, #1
 80067ee:	2300      	moveq	r3, #0
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d18d      	bne.n	8006712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800680c:	e02d      	b.n	800686a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	f000 f8ce 	bl	80069b0 <I2C_IsAcknowledgeFailed>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d001      	beq.n	800681e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e02d      	b.n	800687a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006824:	d021      	beq.n	800686a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006826:	f7fe fa3b 	bl	8004ca0 <HAL_GetTick>
 800682a:	4602      	mov	r2, r0
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	68ba      	ldr	r2, [r7, #8]
 8006832:	429a      	cmp	r2, r3
 8006834:	d302      	bcc.n	800683c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d116      	bne.n	800686a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2220      	movs	r2, #32
 8006846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006856:	f043 0220 	orr.w	r2, r3, #32
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e007      	b.n	800687a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	695b      	ldr	r3, [r3, #20]
 8006870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006874:	2b80      	cmp	r3, #128	; 0x80
 8006876:	d1ca      	bne.n	800680e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b084      	sub	sp, #16
 8006886:	af00      	add	r7, sp, #0
 8006888:	60f8      	str	r0, [r7, #12]
 800688a:	60b9      	str	r1, [r7, #8]
 800688c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800688e:	e02d      	b.n	80068ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f000 f88d 	bl	80069b0 <I2C_IsAcknowledgeFailed>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d001      	beq.n	80068a0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e02d      	b.n	80068fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a6:	d021      	beq.n	80068ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068a8:	f7fe f9fa 	bl	8004ca0 <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	68ba      	ldr	r2, [r7, #8]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d302      	bcc.n	80068be <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d116      	bne.n	80068ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2220      	movs	r2, #32
 80068c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d8:	f043 0220 	orr.w	r2, r3, #32
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e007      	b.n	80068fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	f003 0304 	and.w	r3, r3, #4
 80068f6:	2b04      	cmp	r3, #4
 80068f8:	d1ca      	bne.n	8006890 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3710      	adds	r7, #16
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006910:	e042      	b.n	8006998 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	695b      	ldr	r3, [r3, #20]
 8006918:	f003 0310 	and.w	r3, r3, #16
 800691c:	2b10      	cmp	r3, #16
 800691e:	d119      	bne.n	8006954 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f06f 0210 	mvn.w	r2, #16
 8006928:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2220      	movs	r2, #32
 8006934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e029      	b.n	80069a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006954:	f7fe f9a4 	bl	8004ca0 <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	429a      	cmp	r2, r3
 8006962:	d302      	bcc.n	800696a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d116      	bne.n	8006998 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2220      	movs	r2, #32
 8006974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006984:	f043 0220 	orr.w	r2, r3, #32
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e007      	b.n	80069a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a2:	2b40      	cmp	r3, #64	; 0x40
 80069a4:	d1b5      	bne.n	8006912 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3710      	adds	r7, #16
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069c6:	d11b      	bne.n	8006a00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80069d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2220      	movs	r2, #32
 80069dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ec:	f043 0204 	orr.w	r2, r3, #4
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e000      	b.n	8006a02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	370c      	adds	r7, #12
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b083      	sub	sp, #12
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
 8006a16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	2b20      	cmp	r3, #32
 8006a22:	d129      	bne.n	8006a78 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2224      	movs	r2, #36	; 0x24
 8006a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f022 0201 	bic.w	r2, r2, #1
 8006a3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f022 0210 	bic.w	r2, r2, #16
 8006a4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	683a      	ldr	r2, [r7, #0]
 8006a58:	430a      	orrs	r2, r1
 8006a5a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f042 0201 	orr.w	r2, r2, #1
 8006a6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2220      	movs	r2, #32
 8006a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006a74:	2300      	movs	r3, #0
 8006a76:	e000      	b.n	8006a7a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006a78:	2302      	movs	r3, #2
  }
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	370c      	adds	r7, #12
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006a86:	b480      	push	{r7}
 8006a88:	b085      	sub	sp, #20
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
 8006a8e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006a90:	2300      	movs	r3, #0
 8006a92:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	2b20      	cmp	r3, #32
 8006a9e:	d12a      	bne.n	8006af6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2224      	movs	r2, #36	; 0x24
 8006aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f022 0201 	bic.w	r2, r2, #1
 8006ab6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abe:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006ac0:	89fb      	ldrh	r3, [r7, #14]
 8006ac2:	f023 030f 	bic.w	r3, r3, #15
 8006ac6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	89fb      	ldrh	r3, [r7, #14]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	89fa      	ldrh	r2, [r7, #14]
 8006ad8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f042 0201 	orr.w	r2, r2, #1
 8006ae8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2220      	movs	r2, #32
 8006aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006af2:	2300      	movs	r3, #0
 8006af4:	e000      	b.n	8006af8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006af6:	2302      	movs	r3, #2
  }
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3714      	adds	r7, #20
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d101      	bne.n	8006b16 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e034      	b.n	8006b80 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8006b1e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f245 5255 	movw	r2, #21845	; 0x5555
 8006b28:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	6852      	ldr	r2, [r2, #4]
 8006b32:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	6892      	ldr	r2, [r2, #8]
 8006b3c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006b3e:	f7fe f8af 	bl	8004ca0 <HAL_GetTick>
 8006b42:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006b44:	e00f      	b.n	8006b66 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006b46:	f7fe f8ab 	bl	8004ca0 <HAL_GetTick>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	2b31      	cmp	r3, #49	; 0x31
 8006b52:	d908      	bls.n	8006b66 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	f003 0303 	and.w	r3, r3, #3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d001      	beq.n	8006b66 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e00c      	b.n	8006b80 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	f003 0303 	and.w	r3, r3, #3
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1e8      	bne.n	8006b46 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006b7c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006b98:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8006bb0:	4b06      	ldr	r3, [pc, #24]	; (8006bcc <HAL_PWR_DisableWakeUpPin+0x24>)
 8006bb2:	685a      	ldr	r2, [r3, #4]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	43db      	mvns	r3, r3
 8006bb8:	4904      	ldr	r1, [pc, #16]	; (8006bcc <HAL_PWR_DisableWakeUpPin+0x24>)
 8006bba:	4013      	ands	r3, r2
 8006bbc:	604b      	str	r3, [r1, #4]
}
 8006bbe:	bf00      	nop
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	40007000 	.word	0x40007000

08006bd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b086      	sub	sp, #24
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d101      	bne.n	8006be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e264      	b.n	80070ac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0301 	and.w	r3, r3, #1
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d075      	beq.n	8006cda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006bee:	4ba3      	ldr	r3, [pc, #652]	; (8006e7c <HAL_RCC_OscConfig+0x2ac>)
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f003 030c 	and.w	r3, r3, #12
 8006bf6:	2b04      	cmp	r3, #4
 8006bf8:	d00c      	beq.n	8006c14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bfa:	4ba0      	ldr	r3, [pc, #640]	; (8006e7c <HAL_RCC_OscConfig+0x2ac>)
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c02:	2b08      	cmp	r3, #8
 8006c04:	d112      	bne.n	8006c2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c06:	4b9d      	ldr	r3, [pc, #628]	; (8006e7c <HAL_RCC_OscConfig+0x2ac>)
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c12:	d10b      	bne.n	8006c2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c14:	4b99      	ldr	r3, [pc, #612]	; (8006e7c <HAL_RCC_OscConfig+0x2ac>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d05b      	beq.n	8006cd8 <HAL_RCC_OscConfig+0x108>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d157      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e23f      	b.n	80070ac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c34:	d106      	bne.n	8006c44 <HAL_RCC_OscConfig+0x74>
 8006c36:	4b91      	ldr	r3, [pc, #580]	; (8006e7c <HAL_RCC_OscConfig+0x2ac>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a90      	ldr	r2, [pc, #576]	; (8006e7c <HAL_RCC_OscConfig+0x2ac>)
 8006c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c40:	6013      	str	r3, [r2, #0]
 8006c42:	e01d      	b.n	8006c80 <HAL_RCC_OscConfig+0xb0>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c4c:	d10c      	bne.n	8006c68 <HAL_RCC_OscConfig+0x98>
 8006c4e:	4b8b      	ldr	r3, [pc, #556]	; (8006e7c <HAL_RCC_OscConfig+0x2ac>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a8a      	ldr	r2, [pc, #552]	; (8006e7c <HAL_RCC_OscConfig+0x2ac>)
 8006c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c58:	6013      	str	r3, [r2, #0]
 8006c5a:	4b88      	ldr	r3, [pc, #544]	; (8006e7c <HAL_RCC_OscConfig+0x2ac>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a87      	ldr	r2, [pc, #540]	; (8006e7c <HAL_RCC_OscConfig+0x2ac>)
 8006c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c64:	6013      	str	r3, [r2, #0]
 8006c66:	e00b      	b.n	8006c80 <HAL_RCC_OscConfig+0xb0>
 8006c68:	4b84      	ldr	r3, [pc, #528]	; (8006e7c <HAL_RCC_OscConfig+0x2ac>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a83      	ldr	r2, [pc, #524]	; (8006e7c <HAL_RCC_OscConfig+0x2ac>)
 8006c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c72:	6013      	str	r3, [r2, #0]
 8006c74:	4b81      	ldr	r3, [pc, #516]	; (8006e7c <HAL_RCC_OscConfig+0x2ac>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a80      	ldr	r2, [pc, #512]	; (8006e7c <HAL_RCC_OscConfig+0x2ac>)
 8006c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d013      	beq.n	8006cb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c88:	f7fe f80a 	bl	8004ca0 <HAL_GetTick>
 8006c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c8e:	e008      	b.n	8006ca2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c90:	f7fe f806 	bl	8004ca0 <HAL_GetTick>
 8006c94:	4602      	mov	r2, r0
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	2b64      	cmp	r3, #100	; 0x64
 8006c9c:	d901      	bls.n	8006ca2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e204      	b.n	80070ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ca2:	4b76      	ldr	r3, [pc, #472]	; (8006e7c <HAL_RCC_OscConfig+0x2ac>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d0f0      	beq.n	8006c90 <HAL_RCC_OscConfig+0xc0>
 8006cae:	e014      	b.n	8006cda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cb0:	f7fd fff6 	bl	8004ca0 <HAL_GetTick>
 8006cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cb6:	e008      	b.n	8006cca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006cb8:	f7fd fff2 	bl	8004ca0 <HAL_GetTick>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	2b64      	cmp	r3, #100	; 0x64
 8006cc4:	d901      	bls.n	8006cca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e1f0      	b.n	80070ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cca:	4b6c      	ldr	r3, [pc, #432]	; (8006e7c <HAL_RCC_OscConfig+0x2ac>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1f0      	bne.n	8006cb8 <HAL_RCC_OscConfig+0xe8>
 8006cd6:	e000      	b.n	8006cda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0302 	and.w	r3, r3, #2
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d063      	beq.n	8006dae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ce6:	4b65      	ldr	r3, [pc, #404]	; (8006e7c <HAL_RCC_OscConfig+0x2ac>)
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	f003 030c 	and.w	r3, r3, #12
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00b      	beq.n	8006d0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cf2:	4b62      	ldr	r3, [pc, #392]	; (8006e7c <HAL_RCC_OscConfig+0x2ac>)
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006cfa:	2b08      	cmp	r3, #8
 8006cfc:	d11c      	bne.n	8006d38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cfe:	4b5f      	ldr	r3, [pc, #380]	; (8006e7c <HAL_RCC_OscConfig+0x2ac>)
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d116      	bne.n	8006d38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d0a:	4b5c      	ldr	r3, [pc, #368]	; (8006e7c <HAL_RCC_OscConfig+0x2ac>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0302 	and.w	r3, r3, #2
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d005      	beq.n	8006d22 <HAL_RCC_OscConfig+0x152>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d001      	beq.n	8006d22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e1c4      	b.n	80070ac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d22:	4b56      	ldr	r3, [pc, #344]	; (8006e7c <HAL_RCC_OscConfig+0x2ac>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	00db      	lsls	r3, r3, #3
 8006d30:	4952      	ldr	r1, [pc, #328]	; (8006e7c <HAL_RCC_OscConfig+0x2ac>)
 8006d32:	4313      	orrs	r3, r2
 8006d34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d36:	e03a      	b.n	8006dae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d020      	beq.n	8006d82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d40:	4b4f      	ldr	r3, [pc, #316]	; (8006e80 <HAL_RCC_OscConfig+0x2b0>)
 8006d42:	2201      	movs	r2, #1
 8006d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d46:	f7fd ffab 	bl	8004ca0 <HAL_GetTick>
 8006d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d4c:	e008      	b.n	8006d60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d4e:	f7fd ffa7 	bl	8004ca0 <HAL_GetTick>
 8006d52:	4602      	mov	r2, r0
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d901      	bls.n	8006d60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e1a5      	b.n	80070ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d60:	4b46      	ldr	r3, [pc, #280]	; (8006e7c <HAL_RCC_OscConfig+0x2ac>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0302 	and.w	r3, r3, #2
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d0f0      	beq.n	8006d4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d6c:	4b43      	ldr	r3, [pc, #268]	; (8006e7c <HAL_RCC_OscConfig+0x2ac>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	00db      	lsls	r3, r3, #3
 8006d7a:	4940      	ldr	r1, [pc, #256]	; (8006e7c <HAL_RCC_OscConfig+0x2ac>)
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	600b      	str	r3, [r1, #0]
 8006d80:	e015      	b.n	8006dae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d82:	4b3f      	ldr	r3, [pc, #252]	; (8006e80 <HAL_RCC_OscConfig+0x2b0>)
 8006d84:	2200      	movs	r2, #0
 8006d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d88:	f7fd ff8a 	bl	8004ca0 <HAL_GetTick>
 8006d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d8e:	e008      	b.n	8006da2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d90:	f7fd ff86 	bl	8004ca0 <HAL_GetTick>
 8006d94:	4602      	mov	r2, r0
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d901      	bls.n	8006da2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e184      	b.n	80070ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006da2:	4b36      	ldr	r3, [pc, #216]	; (8006e7c <HAL_RCC_OscConfig+0x2ac>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 0302 	and.w	r3, r3, #2
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d1f0      	bne.n	8006d90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 0308 	and.w	r3, r3, #8
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d030      	beq.n	8006e1c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d016      	beq.n	8006df0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006dc2:	4b30      	ldr	r3, [pc, #192]	; (8006e84 <HAL_RCC_OscConfig+0x2b4>)
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dc8:	f7fd ff6a 	bl	8004ca0 <HAL_GetTick>
 8006dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006dce:	e008      	b.n	8006de2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006dd0:	f7fd ff66 	bl	8004ca0 <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d901      	bls.n	8006de2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e164      	b.n	80070ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006de2:	4b26      	ldr	r3, [pc, #152]	; (8006e7c <HAL_RCC_OscConfig+0x2ac>)
 8006de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006de6:	f003 0302 	and.w	r3, r3, #2
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d0f0      	beq.n	8006dd0 <HAL_RCC_OscConfig+0x200>
 8006dee:	e015      	b.n	8006e1c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006df0:	4b24      	ldr	r3, [pc, #144]	; (8006e84 <HAL_RCC_OscConfig+0x2b4>)
 8006df2:	2200      	movs	r2, #0
 8006df4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006df6:	f7fd ff53 	bl	8004ca0 <HAL_GetTick>
 8006dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dfc:	e008      	b.n	8006e10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006dfe:	f7fd ff4f 	bl	8004ca0 <HAL_GetTick>
 8006e02:	4602      	mov	r2, r0
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d901      	bls.n	8006e10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	e14d      	b.n	80070ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e10:	4b1a      	ldr	r3, [pc, #104]	; (8006e7c <HAL_RCC_OscConfig+0x2ac>)
 8006e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e14:	f003 0302 	and.w	r3, r3, #2
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1f0      	bne.n	8006dfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 0304 	and.w	r3, r3, #4
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f000 80a0 	beq.w	8006f6a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e2e:	4b13      	ldr	r3, [pc, #76]	; (8006e7c <HAL_RCC_OscConfig+0x2ac>)
 8006e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10f      	bne.n	8006e5a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	60bb      	str	r3, [r7, #8]
 8006e3e:	4b0f      	ldr	r3, [pc, #60]	; (8006e7c <HAL_RCC_OscConfig+0x2ac>)
 8006e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e42:	4a0e      	ldr	r2, [pc, #56]	; (8006e7c <HAL_RCC_OscConfig+0x2ac>)
 8006e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e48:	6413      	str	r3, [r2, #64]	; 0x40
 8006e4a:	4b0c      	ldr	r3, [pc, #48]	; (8006e7c <HAL_RCC_OscConfig+0x2ac>)
 8006e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e52:	60bb      	str	r3, [r7, #8]
 8006e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e56:	2301      	movs	r3, #1
 8006e58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e5a:	4b0b      	ldr	r3, [pc, #44]	; (8006e88 <HAL_RCC_OscConfig+0x2b8>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d121      	bne.n	8006eaa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e66:	4b08      	ldr	r3, [pc, #32]	; (8006e88 <HAL_RCC_OscConfig+0x2b8>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a07      	ldr	r2, [pc, #28]	; (8006e88 <HAL_RCC_OscConfig+0x2b8>)
 8006e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e72:	f7fd ff15 	bl	8004ca0 <HAL_GetTick>
 8006e76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e78:	e011      	b.n	8006e9e <HAL_RCC_OscConfig+0x2ce>
 8006e7a:	bf00      	nop
 8006e7c:	40023800 	.word	0x40023800
 8006e80:	42470000 	.word	0x42470000
 8006e84:	42470e80 	.word	0x42470e80
 8006e88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e8c:	f7fd ff08 	bl	8004ca0 <HAL_GetTick>
 8006e90:	4602      	mov	r2, r0
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	d901      	bls.n	8006e9e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	e106      	b.n	80070ac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e9e:	4b85      	ldr	r3, [pc, #532]	; (80070b4 <HAL_RCC_OscConfig+0x4e4>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d0f0      	beq.n	8006e8c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d106      	bne.n	8006ec0 <HAL_RCC_OscConfig+0x2f0>
 8006eb2:	4b81      	ldr	r3, [pc, #516]	; (80070b8 <HAL_RCC_OscConfig+0x4e8>)
 8006eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb6:	4a80      	ldr	r2, [pc, #512]	; (80070b8 <HAL_RCC_OscConfig+0x4e8>)
 8006eb8:	f043 0301 	orr.w	r3, r3, #1
 8006ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8006ebe:	e01c      	b.n	8006efa <HAL_RCC_OscConfig+0x32a>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	2b05      	cmp	r3, #5
 8006ec6:	d10c      	bne.n	8006ee2 <HAL_RCC_OscConfig+0x312>
 8006ec8:	4b7b      	ldr	r3, [pc, #492]	; (80070b8 <HAL_RCC_OscConfig+0x4e8>)
 8006eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ecc:	4a7a      	ldr	r2, [pc, #488]	; (80070b8 <HAL_RCC_OscConfig+0x4e8>)
 8006ece:	f043 0304 	orr.w	r3, r3, #4
 8006ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8006ed4:	4b78      	ldr	r3, [pc, #480]	; (80070b8 <HAL_RCC_OscConfig+0x4e8>)
 8006ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ed8:	4a77      	ldr	r2, [pc, #476]	; (80070b8 <HAL_RCC_OscConfig+0x4e8>)
 8006eda:	f043 0301 	orr.w	r3, r3, #1
 8006ede:	6713      	str	r3, [r2, #112]	; 0x70
 8006ee0:	e00b      	b.n	8006efa <HAL_RCC_OscConfig+0x32a>
 8006ee2:	4b75      	ldr	r3, [pc, #468]	; (80070b8 <HAL_RCC_OscConfig+0x4e8>)
 8006ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ee6:	4a74      	ldr	r2, [pc, #464]	; (80070b8 <HAL_RCC_OscConfig+0x4e8>)
 8006ee8:	f023 0301 	bic.w	r3, r3, #1
 8006eec:	6713      	str	r3, [r2, #112]	; 0x70
 8006eee:	4b72      	ldr	r3, [pc, #456]	; (80070b8 <HAL_RCC_OscConfig+0x4e8>)
 8006ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef2:	4a71      	ldr	r2, [pc, #452]	; (80070b8 <HAL_RCC_OscConfig+0x4e8>)
 8006ef4:	f023 0304 	bic.w	r3, r3, #4
 8006ef8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d015      	beq.n	8006f2e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f02:	f7fd fecd 	bl	8004ca0 <HAL_GetTick>
 8006f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f08:	e00a      	b.n	8006f20 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f0a:	f7fd fec9 	bl	8004ca0 <HAL_GetTick>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d901      	bls.n	8006f20 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e0c5      	b.n	80070ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f20:	4b65      	ldr	r3, [pc, #404]	; (80070b8 <HAL_RCC_OscConfig+0x4e8>)
 8006f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f24:	f003 0302 	and.w	r3, r3, #2
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d0ee      	beq.n	8006f0a <HAL_RCC_OscConfig+0x33a>
 8006f2c:	e014      	b.n	8006f58 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f2e:	f7fd feb7 	bl	8004ca0 <HAL_GetTick>
 8006f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f34:	e00a      	b.n	8006f4c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f36:	f7fd feb3 	bl	8004ca0 <HAL_GetTick>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d901      	bls.n	8006f4c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e0af      	b.n	80070ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f4c:	4b5a      	ldr	r3, [pc, #360]	; (80070b8 <HAL_RCC_OscConfig+0x4e8>)
 8006f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f50:	f003 0302 	and.w	r3, r3, #2
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1ee      	bne.n	8006f36 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f58:	7dfb      	ldrb	r3, [r7, #23]
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d105      	bne.n	8006f6a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f5e:	4b56      	ldr	r3, [pc, #344]	; (80070b8 <HAL_RCC_OscConfig+0x4e8>)
 8006f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f62:	4a55      	ldr	r2, [pc, #340]	; (80070b8 <HAL_RCC_OscConfig+0x4e8>)
 8006f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	699b      	ldr	r3, [r3, #24]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f000 809b 	beq.w	80070aa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f74:	4b50      	ldr	r3, [pc, #320]	; (80070b8 <HAL_RCC_OscConfig+0x4e8>)
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	f003 030c 	and.w	r3, r3, #12
 8006f7c:	2b08      	cmp	r3, #8
 8006f7e:	d05c      	beq.n	800703a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	699b      	ldr	r3, [r3, #24]
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d141      	bne.n	800700c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f88:	4b4c      	ldr	r3, [pc, #304]	; (80070bc <HAL_RCC_OscConfig+0x4ec>)
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f8e:	f7fd fe87 	bl	8004ca0 <HAL_GetTick>
 8006f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f94:	e008      	b.n	8006fa8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f96:	f7fd fe83 	bl	8004ca0 <HAL_GetTick>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	2b02      	cmp	r3, #2
 8006fa2:	d901      	bls.n	8006fa8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e081      	b.n	80070ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fa8:	4b43      	ldr	r3, [pc, #268]	; (80070b8 <HAL_RCC_OscConfig+0x4e8>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1f0      	bne.n	8006f96 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	69da      	ldr	r2, [r3, #28]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a1b      	ldr	r3, [r3, #32]
 8006fbc:	431a      	orrs	r2, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc2:	019b      	lsls	r3, r3, #6
 8006fc4:	431a      	orrs	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fca:	085b      	lsrs	r3, r3, #1
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	041b      	lsls	r3, r3, #16
 8006fd0:	431a      	orrs	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd6:	061b      	lsls	r3, r3, #24
 8006fd8:	4937      	ldr	r1, [pc, #220]	; (80070b8 <HAL_RCC_OscConfig+0x4e8>)
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fde:	4b37      	ldr	r3, [pc, #220]	; (80070bc <HAL_RCC_OscConfig+0x4ec>)
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fe4:	f7fd fe5c 	bl	8004ca0 <HAL_GetTick>
 8006fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fea:	e008      	b.n	8006ffe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fec:	f7fd fe58 	bl	8004ca0 <HAL_GetTick>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d901      	bls.n	8006ffe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e056      	b.n	80070ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ffe:	4b2e      	ldr	r3, [pc, #184]	; (80070b8 <HAL_RCC_OscConfig+0x4e8>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d0f0      	beq.n	8006fec <HAL_RCC_OscConfig+0x41c>
 800700a:	e04e      	b.n	80070aa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800700c:	4b2b      	ldr	r3, [pc, #172]	; (80070bc <HAL_RCC_OscConfig+0x4ec>)
 800700e:	2200      	movs	r2, #0
 8007010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007012:	f7fd fe45 	bl	8004ca0 <HAL_GetTick>
 8007016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007018:	e008      	b.n	800702c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800701a:	f7fd fe41 	bl	8004ca0 <HAL_GetTick>
 800701e:	4602      	mov	r2, r0
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	2b02      	cmp	r3, #2
 8007026:	d901      	bls.n	800702c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007028:	2303      	movs	r3, #3
 800702a:	e03f      	b.n	80070ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800702c:	4b22      	ldr	r3, [pc, #136]	; (80070b8 <HAL_RCC_OscConfig+0x4e8>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1f0      	bne.n	800701a <HAL_RCC_OscConfig+0x44a>
 8007038:	e037      	b.n	80070aa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	2b01      	cmp	r3, #1
 8007040:	d101      	bne.n	8007046 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	e032      	b.n	80070ac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007046:	4b1c      	ldr	r3, [pc, #112]	; (80070b8 <HAL_RCC_OscConfig+0x4e8>)
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d028      	beq.n	80070a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800705e:	429a      	cmp	r2, r3
 8007060:	d121      	bne.n	80070a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800706c:	429a      	cmp	r2, r3
 800706e:	d11a      	bne.n	80070a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007076:	4013      	ands	r3, r2
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800707c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800707e:	4293      	cmp	r3, r2
 8007080:	d111      	bne.n	80070a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708c:	085b      	lsrs	r3, r3, #1
 800708e:	3b01      	subs	r3, #1
 8007090:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007092:	429a      	cmp	r2, r3
 8007094:	d107      	bne.n	80070a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d001      	beq.n	80070aa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e000      	b.n	80070ac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3718      	adds	r7, #24
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	40007000 	.word	0x40007000
 80070b8:	40023800 	.word	0x40023800
 80070bc:	42470060 	.word	0x42470060

080070c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e0cc      	b.n	800726e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80070d4:	4b68      	ldr	r3, [pc, #416]	; (8007278 <HAL_RCC_ClockConfig+0x1b8>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 030f 	and.w	r3, r3, #15
 80070dc:	683a      	ldr	r2, [r7, #0]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d90c      	bls.n	80070fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070e2:	4b65      	ldr	r3, [pc, #404]	; (8007278 <HAL_RCC_ClockConfig+0x1b8>)
 80070e4:	683a      	ldr	r2, [r7, #0]
 80070e6:	b2d2      	uxtb	r2, r2
 80070e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070ea:	4b63      	ldr	r3, [pc, #396]	; (8007278 <HAL_RCC_ClockConfig+0x1b8>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 030f 	and.w	r3, r3, #15
 80070f2:	683a      	ldr	r2, [r7, #0]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d001      	beq.n	80070fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e0b8      	b.n	800726e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0302 	and.w	r3, r3, #2
 8007104:	2b00      	cmp	r3, #0
 8007106:	d020      	beq.n	800714a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0304 	and.w	r3, r3, #4
 8007110:	2b00      	cmp	r3, #0
 8007112:	d005      	beq.n	8007120 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007114:	4b59      	ldr	r3, [pc, #356]	; (800727c <HAL_RCC_ClockConfig+0x1bc>)
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	4a58      	ldr	r2, [pc, #352]	; (800727c <HAL_RCC_ClockConfig+0x1bc>)
 800711a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800711e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 0308 	and.w	r3, r3, #8
 8007128:	2b00      	cmp	r3, #0
 800712a:	d005      	beq.n	8007138 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800712c:	4b53      	ldr	r3, [pc, #332]	; (800727c <HAL_RCC_ClockConfig+0x1bc>)
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	4a52      	ldr	r2, [pc, #328]	; (800727c <HAL_RCC_ClockConfig+0x1bc>)
 8007132:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007136:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007138:	4b50      	ldr	r3, [pc, #320]	; (800727c <HAL_RCC_ClockConfig+0x1bc>)
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	494d      	ldr	r1, [pc, #308]	; (800727c <HAL_RCC_ClockConfig+0x1bc>)
 8007146:	4313      	orrs	r3, r2
 8007148:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 0301 	and.w	r3, r3, #1
 8007152:	2b00      	cmp	r3, #0
 8007154:	d044      	beq.n	80071e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d107      	bne.n	800716e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800715e:	4b47      	ldr	r3, [pc, #284]	; (800727c <HAL_RCC_ClockConfig+0x1bc>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d119      	bne.n	800719e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e07f      	b.n	800726e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	2b02      	cmp	r3, #2
 8007174:	d003      	beq.n	800717e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800717a:	2b03      	cmp	r3, #3
 800717c:	d107      	bne.n	800718e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800717e:	4b3f      	ldr	r3, [pc, #252]	; (800727c <HAL_RCC_ClockConfig+0x1bc>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d109      	bne.n	800719e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e06f      	b.n	800726e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800718e:	4b3b      	ldr	r3, [pc, #236]	; (800727c <HAL_RCC_ClockConfig+0x1bc>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 0302 	and.w	r3, r3, #2
 8007196:	2b00      	cmp	r3, #0
 8007198:	d101      	bne.n	800719e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	e067      	b.n	800726e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800719e:	4b37      	ldr	r3, [pc, #220]	; (800727c <HAL_RCC_ClockConfig+0x1bc>)
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f023 0203 	bic.w	r2, r3, #3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	4934      	ldr	r1, [pc, #208]	; (800727c <HAL_RCC_ClockConfig+0x1bc>)
 80071ac:	4313      	orrs	r3, r2
 80071ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80071b0:	f7fd fd76 	bl	8004ca0 <HAL_GetTick>
 80071b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071b6:	e00a      	b.n	80071ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071b8:	f7fd fd72 	bl	8004ca0 <HAL_GetTick>
 80071bc:	4602      	mov	r2, r0
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d901      	bls.n	80071ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e04f      	b.n	800726e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071ce:	4b2b      	ldr	r3, [pc, #172]	; (800727c <HAL_RCC_ClockConfig+0x1bc>)
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f003 020c 	and.w	r2, r3, #12
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	429a      	cmp	r2, r3
 80071de:	d1eb      	bne.n	80071b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80071e0:	4b25      	ldr	r3, [pc, #148]	; (8007278 <HAL_RCC_ClockConfig+0x1b8>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 030f 	and.w	r3, r3, #15
 80071e8:	683a      	ldr	r2, [r7, #0]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d20c      	bcs.n	8007208 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071ee:	4b22      	ldr	r3, [pc, #136]	; (8007278 <HAL_RCC_ClockConfig+0x1b8>)
 80071f0:	683a      	ldr	r2, [r7, #0]
 80071f2:	b2d2      	uxtb	r2, r2
 80071f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071f6:	4b20      	ldr	r3, [pc, #128]	; (8007278 <HAL_RCC_ClockConfig+0x1b8>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 030f 	and.w	r3, r3, #15
 80071fe:	683a      	ldr	r2, [r7, #0]
 8007200:	429a      	cmp	r2, r3
 8007202:	d001      	beq.n	8007208 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	e032      	b.n	800726e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 0304 	and.w	r3, r3, #4
 8007210:	2b00      	cmp	r3, #0
 8007212:	d008      	beq.n	8007226 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007214:	4b19      	ldr	r3, [pc, #100]	; (800727c <HAL_RCC_ClockConfig+0x1bc>)
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	4916      	ldr	r1, [pc, #88]	; (800727c <HAL_RCC_ClockConfig+0x1bc>)
 8007222:	4313      	orrs	r3, r2
 8007224:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 0308 	and.w	r3, r3, #8
 800722e:	2b00      	cmp	r3, #0
 8007230:	d009      	beq.n	8007246 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007232:	4b12      	ldr	r3, [pc, #72]	; (800727c <HAL_RCC_ClockConfig+0x1bc>)
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	00db      	lsls	r3, r3, #3
 8007240:	490e      	ldr	r1, [pc, #56]	; (800727c <HAL_RCC_ClockConfig+0x1bc>)
 8007242:	4313      	orrs	r3, r2
 8007244:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007246:	f000 f821 	bl	800728c <HAL_RCC_GetSysClockFreq>
 800724a:	4602      	mov	r2, r0
 800724c:	4b0b      	ldr	r3, [pc, #44]	; (800727c <HAL_RCC_ClockConfig+0x1bc>)
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	091b      	lsrs	r3, r3, #4
 8007252:	f003 030f 	and.w	r3, r3, #15
 8007256:	490a      	ldr	r1, [pc, #40]	; (8007280 <HAL_RCC_ClockConfig+0x1c0>)
 8007258:	5ccb      	ldrb	r3, [r1, r3]
 800725a:	fa22 f303 	lsr.w	r3, r2, r3
 800725e:	4a09      	ldr	r2, [pc, #36]	; (8007284 <HAL_RCC_ClockConfig+0x1c4>)
 8007260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007262:	4b09      	ldr	r3, [pc, #36]	; (8007288 <HAL_RCC_ClockConfig+0x1c8>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4618      	mov	r0, r3
 8007268:	f7fb fdc8 	bl	8002dfc <HAL_InitTick>

  return HAL_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	40023c00 	.word	0x40023c00
 800727c:	40023800 	.word	0x40023800
 8007280:	08013064 	.word	0x08013064
 8007284:	20000000 	.word	0x20000000
 8007288:	20000004 	.word	0x20000004

0800728c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800728c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007290:	b084      	sub	sp, #16
 8007292:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007294:	2300      	movs	r3, #0
 8007296:	607b      	str	r3, [r7, #4]
 8007298:	2300      	movs	r3, #0
 800729a:	60fb      	str	r3, [r7, #12]
 800729c:	2300      	movs	r3, #0
 800729e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80072a0:	2300      	movs	r3, #0
 80072a2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80072a4:	4b67      	ldr	r3, [pc, #412]	; (8007444 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	f003 030c 	and.w	r3, r3, #12
 80072ac:	2b08      	cmp	r3, #8
 80072ae:	d00d      	beq.n	80072cc <HAL_RCC_GetSysClockFreq+0x40>
 80072b0:	2b08      	cmp	r3, #8
 80072b2:	f200 80bd 	bhi.w	8007430 <HAL_RCC_GetSysClockFreq+0x1a4>
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d002      	beq.n	80072c0 <HAL_RCC_GetSysClockFreq+0x34>
 80072ba:	2b04      	cmp	r3, #4
 80072bc:	d003      	beq.n	80072c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80072be:	e0b7      	b.n	8007430 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80072c0:	4b61      	ldr	r3, [pc, #388]	; (8007448 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80072c2:	60bb      	str	r3, [r7, #8]
       break;
 80072c4:	e0b7      	b.n	8007436 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80072c6:	4b60      	ldr	r3, [pc, #384]	; (8007448 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80072c8:	60bb      	str	r3, [r7, #8]
      break;
 80072ca:	e0b4      	b.n	8007436 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80072cc:	4b5d      	ldr	r3, [pc, #372]	; (8007444 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80072d6:	4b5b      	ldr	r3, [pc, #364]	; (8007444 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d04d      	beq.n	800737e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072e2:	4b58      	ldr	r3, [pc, #352]	; (8007444 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	099b      	lsrs	r3, r3, #6
 80072e8:	461a      	mov	r2, r3
 80072ea:	f04f 0300 	mov.w	r3, #0
 80072ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80072f2:	f04f 0100 	mov.w	r1, #0
 80072f6:	ea02 0800 	and.w	r8, r2, r0
 80072fa:	ea03 0901 	and.w	r9, r3, r1
 80072fe:	4640      	mov	r0, r8
 8007300:	4649      	mov	r1, r9
 8007302:	f04f 0200 	mov.w	r2, #0
 8007306:	f04f 0300 	mov.w	r3, #0
 800730a:	014b      	lsls	r3, r1, #5
 800730c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007310:	0142      	lsls	r2, r0, #5
 8007312:	4610      	mov	r0, r2
 8007314:	4619      	mov	r1, r3
 8007316:	ebb0 0008 	subs.w	r0, r0, r8
 800731a:	eb61 0109 	sbc.w	r1, r1, r9
 800731e:	f04f 0200 	mov.w	r2, #0
 8007322:	f04f 0300 	mov.w	r3, #0
 8007326:	018b      	lsls	r3, r1, #6
 8007328:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800732c:	0182      	lsls	r2, r0, #6
 800732e:	1a12      	subs	r2, r2, r0
 8007330:	eb63 0301 	sbc.w	r3, r3, r1
 8007334:	f04f 0000 	mov.w	r0, #0
 8007338:	f04f 0100 	mov.w	r1, #0
 800733c:	00d9      	lsls	r1, r3, #3
 800733e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007342:	00d0      	lsls	r0, r2, #3
 8007344:	4602      	mov	r2, r0
 8007346:	460b      	mov	r3, r1
 8007348:	eb12 0208 	adds.w	r2, r2, r8
 800734c:	eb43 0309 	adc.w	r3, r3, r9
 8007350:	f04f 0000 	mov.w	r0, #0
 8007354:	f04f 0100 	mov.w	r1, #0
 8007358:	0299      	lsls	r1, r3, #10
 800735a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800735e:	0290      	lsls	r0, r2, #10
 8007360:	4602      	mov	r2, r0
 8007362:	460b      	mov	r3, r1
 8007364:	4610      	mov	r0, r2
 8007366:	4619      	mov	r1, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	461a      	mov	r2, r3
 800736c:	f04f 0300 	mov.w	r3, #0
 8007370:	f7f9 fc9a 	bl	8000ca8 <__aeabi_uldivmod>
 8007374:	4602      	mov	r2, r0
 8007376:	460b      	mov	r3, r1
 8007378:	4613      	mov	r3, r2
 800737a:	60fb      	str	r3, [r7, #12]
 800737c:	e04a      	b.n	8007414 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800737e:	4b31      	ldr	r3, [pc, #196]	; (8007444 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	099b      	lsrs	r3, r3, #6
 8007384:	461a      	mov	r2, r3
 8007386:	f04f 0300 	mov.w	r3, #0
 800738a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800738e:	f04f 0100 	mov.w	r1, #0
 8007392:	ea02 0400 	and.w	r4, r2, r0
 8007396:	ea03 0501 	and.w	r5, r3, r1
 800739a:	4620      	mov	r0, r4
 800739c:	4629      	mov	r1, r5
 800739e:	f04f 0200 	mov.w	r2, #0
 80073a2:	f04f 0300 	mov.w	r3, #0
 80073a6:	014b      	lsls	r3, r1, #5
 80073a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80073ac:	0142      	lsls	r2, r0, #5
 80073ae:	4610      	mov	r0, r2
 80073b0:	4619      	mov	r1, r3
 80073b2:	1b00      	subs	r0, r0, r4
 80073b4:	eb61 0105 	sbc.w	r1, r1, r5
 80073b8:	f04f 0200 	mov.w	r2, #0
 80073bc:	f04f 0300 	mov.w	r3, #0
 80073c0:	018b      	lsls	r3, r1, #6
 80073c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80073c6:	0182      	lsls	r2, r0, #6
 80073c8:	1a12      	subs	r2, r2, r0
 80073ca:	eb63 0301 	sbc.w	r3, r3, r1
 80073ce:	f04f 0000 	mov.w	r0, #0
 80073d2:	f04f 0100 	mov.w	r1, #0
 80073d6:	00d9      	lsls	r1, r3, #3
 80073d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80073dc:	00d0      	lsls	r0, r2, #3
 80073de:	4602      	mov	r2, r0
 80073e0:	460b      	mov	r3, r1
 80073e2:	1912      	adds	r2, r2, r4
 80073e4:	eb45 0303 	adc.w	r3, r5, r3
 80073e8:	f04f 0000 	mov.w	r0, #0
 80073ec:	f04f 0100 	mov.w	r1, #0
 80073f0:	0299      	lsls	r1, r3, #10
 80073f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80073f6:	0290      	lsls	r0, r2, #10
 80073f8:	4602      	mov	r2, r0
 80073fa:	460b      	mov	r3, r1
 80073fc:	4610      	mov	r0, r2
 80073fe:	4619      	mov	r1, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	461a      	mov	r2, r3
 8007404:	f04f 0300 	mov.w	r3, #0
 8007408:	f7f9 fc4e 	bl	8000ca8 <__aeabi_uldivmod>
 800740c:	4602      	mov	r2, r0
 800740e:	460b      	mov	r3, r1
 8007410:	4613      	mov	r3, r2
 8007412:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007414:	4b0b      	ldr	r3, [pc, #44]	; (8007444 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	0c1b      	lsrs	r3, r3, #16
 800741a:	f003 0303 	and.w	r3, r3, #3
 800741e:	3301      	adds	r3, #1
 8007420:	005b      	lsls	r3, r3, #1
 8007422:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	fbb2 f3f3 	udiv	r3, r2, r3
 800742c:	60bb      	str	r3, [r7, #8]
      break;
 800742e:	e002      	b.n	8007436 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007430:	4b05      	ldr	r3, [pc, #20]	; (8007448 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007432:	60bb      	str	r3, [r7, #8]
      break;
 8007434:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007436:	68bb      	ldr	r3, [r7, #8]
}
 8007438:	4618      	mov	r0, r3
 800743a:	3710      	adds	r7, #16
 800743c:	46bd      	mov	sp, r7
 800743e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007442:	bf00      	nop
 8007444:	40023800 	.word	0x40023800
 8007448:	00f42400 	.word	0x00f42400

0800744c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800744c:	b480      	push	{r7}
 800744e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007450:	4b03      	ldr	r3, [pc, #12]	; (8007460 <HAL_RCC_GetHCLKFreq+0x14>)
 8007452:	681b      	ldr	r3, [r3, #0]
}
 8007454:	4618      	mov	r0, r3
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	20000000 	.word	0x20000000

08007464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007468:	f7ff fff0 	bl	800744c <HAL_RCC_GetHCLKFreq>
 800746c:	4602      	mov	r2, r0
 800746e:	4b05      	ldr	r3, [pc, #20]	; (8007484 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	0a9b      	lsrs	r3, r3, #10
 8007474:	f003 0307 	and.w	r3, r3, #7
 8007478:	4903      	ldr	r1, [pc, #12]	; (8007488 <HAL_RCC_GetPCLK1Freq+0x24>)
 800747a:	5ccb      	ldrb	r3, [r1, r3]
 800747c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007480:	4618      	mov	r0, r3
 8007482:	bd80      	pop	{r7, pc}
 8007484:	40023800 	.word	0x40023800
 8007488:	08013074 	.word	0x08013074

0800748c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007490:	f7ff ffdc 	bl	800744c <HAL_RCC_GetHCLKFreq>
 8007494:	4602      	mov	r2, r0
 8007496:	4b05      	ldr	r3, [pc, #20]	; (80074ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	0b5b      	lsrs	r3, r3, #13
 800749c:	f003 0307 	and.w	r3, r3, #7
 80074a0:	4903      	ldr	r1, [pc, #12]	; (80074b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80074a2:	5ccb      	ldrb	r3, [r1, r3]
 80074a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	40023800 	.word	0x40023800
 80074b0:	08013074 	.word	0x08013074

080074b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	220f      	movs	r2, #15
 80074c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80074c4:	4b12      	ldr	r3, [pc, #72]	; (8007510 <HAL_RCC_GetClockConfig+0x5c>)
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	f003 0203 	and.w	r2, r3, #3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80074d0:	4b0f      	ldr	r3, [pc, #60]	; (8007510 <HAL_RCC_GetClockConfig+0x5c>)
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80074dc:	4b0c      	ldr	r3, [pc, #48]	; (8007510 <HAL_RCC_GetClockConfig+0x5c>)
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80074e8:	4b09      	ldr	r3, [pc, #36]	; (8007510 <HAL_RCC_GetClockConfig+0x5c>)
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	08db      	lsrs	r3, r3, #3
 80074ee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80074f6:	4b07      	ldr	r3, [pc, #28]	; (8007514 <HAL_RCC_GetClockConfig+0x60>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 020f 	and.w	r2, r3, #15
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	601a      	str	r2, [r3, #0]
}
 8007502:	bf00      	nop
 8007504:	370c      	adds	r7, #12
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr
 800750e:	bf00      	nop
 8007510:	40023800 	.word	0x40023800
 8007514:	40023c00 	.word	0x40023c00

08007518 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b086      	sub	sp, #24
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007520:	2300      	movs	r3, #0
 8007522:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007524:	2300      	movs	r3, #0
 8007526:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 0301 	and.w	r3, r3, #1
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10b      	bne.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800753c:	2b00      	cmp	r3, #0
 800753e:	d105      	bne.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007548:	2b00      	cmp	r3, #0
 800754a:	d075      	beq.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800754c:	4bad      	ldr	r3, [pc, #692]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800754e:	2200      	movs	r2, #0
 8007550:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007552:	f7fd fba5 	bl	8004ca0 <HAL_GetTick>
 8007556:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007558:	e008      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800755a:	f7fd fba1 	bl	8004ca0 <HAL_GetTick>
 800755e:	4602      	mov	r2, r0
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	1ad3      	subs	r3, r2, r3
 8007564:	2b02      	cmp	r3, #2
 8007566:	d901      	bls.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007568:	2303      	movs	r3, #3
 800756a:	e18b      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800756c:	4ba6      	ldr	r3, [pc, #664]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1f0      	bne.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0301 	and.w	r3, r3, #1
 8007580:	2b00      	cmp	r3, #0
 8007582:	d009      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	019a      	lsls	r2, r3, #6
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	071b      	lsls	r3, r3, #28
 8007590:	499d      	ldr	r1, [pc, #628]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007592:	4313      	orrs	r3, r2
 8007594:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 0302 	and.w	r3, r3, #2
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d01f      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80075a4:	4b98      	ldr	r3, [pc, #608]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80075a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075aa:	0f1b      	lsrs	r3, r3, #28
 80075ac:	f003 0307 	and.w	r3, r3, #7
 80075b0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	019a      	lsls	r2, r3, #6
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	061b      	lsls	r3, r3, #24
 80075be:	431a      	orrs	r2, r3
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	071b      	lsls	r3, r3, #28
 80075c4:	4990      	ldr	r1, [pc, #576]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80075c6:	4313      	orrs	r3, r2
 80075c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80075cc:	4b8e      	ldr	r3, [pc, #568]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80075ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075d2:	f023 021f 	bic.w	r2, r3, #31
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	69db      	ldr	r3, [r3, #28]
 80075da:	3b01      	subs	r3, #1
 80075dc:	498a      	ldr	r1, [pc, #552]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00d      	beq.n	800760c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	019a      	lsls	r2, r3, #6
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	061b      	lsls	r3, r3, #24
 80075fc:	431a      	orrs	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	071b      	lsls	r3, r3, #28
 8007604:	4980      	ldr	r1, [pc, #512]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007606:	4313      	orrs	r3, r2
 8007608:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800760c:	4b7d      	ldr	r3, [pc, #500]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800760e:	2201      	movs	r2, #1
 8007610:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007612:	f7fd fb45 	bl	8004ca0 <HAL_GetTick>
 8007616:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007618:	e008      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800761a:	f7fd fb41 	bl	8004ca0 <HAL_GetTick>
 800761e:	4602      	mov	r2, r0
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	2b02      	cmp	r3, #2
 8007626:	d901      	bls.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007628:	2303      	movs	r3, #3
 800762a:	e12b      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800762c:	4b76      	ldr	r3, [pc, #472]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007634:	2b00      	cmp	r3, #0
 8007636:	d0f0      	beq.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 0304 	and.w	r3, r3, #4
 8007640:	2b00      	cmp	r3, #0
 8007642:	d105      	bne.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800764c:	2b00      	cmp	r3, #0
 800764e:	d079      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007650:	4b6e      	ldr	r3, [pc, #440]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007652:	2200      	movs	r2, #0
 8007654:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007656:	f7fd fb23 	bl	8004ca0 <HAL_GetTick>
 800765a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800765c:	e008      	b.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800765e:	f7fd fb1f 	bl	8004ca0 <HAL_GetTick>
 8007662:	4602      	mov	r2, r0
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	2b02      	cmp	r3, #2
 800766a:	d901      	bls.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800766c:	2303      	movs	r3, #3
 800766e:	e109      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007670:	4b65      	ldr	r3, [pc, #404]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007678:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800767c:	d0ef      	beq.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0304 	and.w	r3, r3, #4
 8007686:	2b00      	cmp	r3, #0
 8007688:	d020      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800768a:	4b5f      	ldr	r3, [pc, #380]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800768c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007690:	0f1b      	lsrs	r3, r3, #28
 8007692:	f003 0307 	and.w	r3, r3, #7
 8007696:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	019a      	lsls	r2, r3, #6
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	695b      	ldr	r3, [r3, #20]
 80076a2:	061b      	lsls	r3, r3, #24
 80076a4:	431a      	orrs	r2, r3
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	071b      	lsls	r3, r3, #28
 80076aa:	4957      	ldr	r1, [pc, #348]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80076ac:	4313      	orrs	r3, r2
 80076ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80076b2:	4b55      	ldr	r3, [pc, #340]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80076b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076b8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6a1b      	ldr	r3, [r3, #32]
 80076c0:	3b01      	subs	r3, #1
 80076c2:	021b      	lsls	r3, r3, #8
 80076c4:	4950      	ldr	r1, [pc, #320]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80076c6:	4313      	orrs	r3, r2
 80076c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f003 0308 	and.w	r3, r3, #8
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d01e      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80076d8:	4b4b      	ldr	r3, [pc, #300]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80076da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076de:	0e1b      	lsrs	r3, r3, #24
 80076e0:	f003 030f 	and.w	r3, r3, #15
 80076e4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	019a      	lsls	r2, r3, #6
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	061b      	lsls	r3, r3, #24
 80076f0:	431a      	orrs	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	699b      	ldr	r3, [r3, #24]
 80076f6:	071b      	lsls	r3, r3, #28
 80076f8:	4943      	ldr	r1, [pc, #268]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007700:	4b41      	ldr	r3, [pc, #260]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007702:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007706:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770e:	493e      	ldr	r1, [pc, #248]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007710:	4313      	orrs	r3, r2
 8007712:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007716:	4b3d      	ldr	r3, [pc, #244]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007718:	2201      	movs	r2, #1
 800771a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800771c:	f7fd fac0 	bl	8004ca0 <HAL_GetTick>
 8007720:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007722:	e008      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007724:	f7fd fabc 	bl	8004ca0 <HAL_GetTick>
 8007728:	4602      	mov	r2, r0
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	2b02      	cmp	r3, #2
 8007730:	d901      	bls.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007732:	2303      	movs	r3, #3
 8007734:	e0a6      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007736:	4b34      	ldr	r3, [pc, #208]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800773e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007742:	d1ef      	bne.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0320 	and.w	r3, r3, #32
 800774c:	2b00      	cmp	r3, #0
 800774e:	f000 808d 	beq.w	800786c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007752:	2300      	movs	r3, #0
 8007754:	60fb      	str	r3, [r7, #12]
 8007756:	4b2c      	ldr	r3, [pc, #176]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775a:	4a2b      	ldr	r2, [pc, #172]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800775c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007760:	6413      	str	r3, [r2, #64]	; 0x40
 8007762:	4b29      	ldr	r3, [pc, #164]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800776a:	60fb      	str	r3, [r7, #12]
 800776c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800776e:	4b28      	ldr	r3, [pc, #160]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a27      	ldr	r2, [pc, #156]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007778:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800777a:	f7fd fa91 	bl	8004ca0 <HAL_GetTick>
 800777e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007780:	e008      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007782:	f7fd fa8d 	bl	8004ca0 <HAL_GetTick>
 8007786:	4602      	mov	r2, r0
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	2b02      	cmp	r3, #2
 800778e:	d901      	bls.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8007790:	2303      	movs	r3, #3
 8007792:	e077      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007794:	4b1e      	ldr	r3, [pc, #120]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800779c:	2b00      	cmp	r3, #0
 800779e:	d0f0      	beq.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80077a0:	4b19      	ldr	r3, [pc, #100]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80077a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077a8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d039      	beq.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d032      	beq.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80077be:	4b12      	ldr	r3, [pc, #72]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80077c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077c6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80077c8:	4b12      	ldr	r3, [pc, #72]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80077ca:	2201      	movs	r2, #1
 80077cc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80077ce:	4b11      	ldr	r3, [pc, #68]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80077d0:	2200      	movs	r2, #0
 80077d2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80077d4:	4a0c      	ldr	r2, [pc, #48]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80077da:	4b0b      	ldr	r3, [pc, #44]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80077dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077de:	f003 0301 	and.w	r3, r3, #1
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d11e      	bne.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80077e6:	f7fd fa5b 	bl	8004ca0 <HAL_GetTick>
 80077ea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077ec:	e014      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077ee:	f7fd fa57 	bl	8004ca0 <HAL_GetTick>
 80077f2:	4602      	mov	r2, r0
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d90b      	bls.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8007800:	2303      	movs	r3, #3
 8007802:	e03f      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8007804:	42470068 	.word	0x42470068
 8007808:	40023800 	.word	0x40023800
 800780c:	42470070 	.word	0x42470070
 8007810:	40007000 	.word	0x40007000
 8007814:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007818:	4b1c      	ldr	r3, [pc, #112]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800781a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800781c:	f003 0302 	and.w	r3, r3, #2
 8007820:	2b00      	cmp	r3, #0
 8007822:	d0e4      	beq.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007828:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800782c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007830:	d10d      	bne.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8007832:	4b16      	ldr	r3, [pc, #88]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800783e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007846:	4911      	ldr	r1, [pc, #68]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007848:	4313      	orrs	r3, r2
 800784a:	608b      	str	r3, [r1, #8]
 800784c:	e005      	b.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800784e:	4b0f      	ldr	r3, [pc, #60]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	4a0e      	ldr	r2, [pc, #56]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007854:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007858:	6093      	str	r3, [r2, #8]
 800785a:	4b0c      	ldr	r3, [pc, #48]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800785c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007862:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007866:	4909      	ldr	r1, [pc, #36]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007868:	4313      	orrs	r3, r2
 800786a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f003 0310 	and.w	r3, r3, #16
 8007874:	2b00      	cmp	r3, #0
 8007876:	d004      	beq.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800787e:	4b04      	ldr	r3, [pc, #16]	; (8007890 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007880:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3718      	adds	r7, #24
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	40023800 	.word	0x40023800
 8007890:	424711e0 	.word	0x424711e0

08007894 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d101      	bne.n	80078a6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e083      	b.n	80079ae <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	7f5b      	ldrb	r3, [r3, #29]
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d105      	bne.n	80078bc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f7fb f8ac 	bl	8002a14 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2202      	movs	r2, #2
 80078c0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	22ca      	movs	r2, #202	; 0xca
 80078c8:	625a      	str	r2, [r3, #36]	; 0x24
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2253      	movs	r2, #83	; 0x53
 80078d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 fb7a 	bl	8007fcc <RTC_EnterInitMode>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d008      	beq.n	80078f0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	22ff      	movs	r2, #255	; 0xff
 80078e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2204      	movs	r2, #4
 80078ea:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	e05e      	b.n	80079ae <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	6812      	ldr	r2, [r2, #0]
 80078fa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80078fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007902:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6899      	ldr	r1, [r3, #8]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	685a      	ldr	r2, [r3, #4]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	431a      	orrs	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	695b      	ldr	r3, [r3, #20]
 8007918:	431a      	orrs	r2, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	430a      	orrs	r2, r1
 8007920:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	68d2      	ldr	r2, [r2, #12]
 800792a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	6919      	ldr	r1, [r3, #16]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	041a      	lsls	r2, r3, #16
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	430a      	orrs	r2, r1
 800793e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68da      	ldr	r2, [r3, #12]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800794e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	f003 0320 	and.w	r3, r3, #32
 800795a:	2b00      	cmp	r3, #0
 800795c:	d10e      	bne.n	800797c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 fb0c 	bl	8007f7c <HAL_RTC_WaitForSynchro>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d008      	beq.n	800797c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	22ff      	movs	r2, #255	; 0xff
 8007970:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2204      	movs	r2, #4
 8007976:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	e018      	b.n	80079ae <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800798a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	699a      	ldr	r2, [r3, #24]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	430a      	orrs	r2, r1
 800799c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	22ff      	movs	r2, #255	; 0xff
 80079a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2201      	movs	r2, #1
 80079aa:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80079ac:	2300      	movs	r3, #0
  }
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3708      	adds	r7, #8
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80079b6:	b590      	push	{r4, r7, lr}
 80079b8:	b087      	sub	sp, #28
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	60f8      	str	r0, [r7, #12]
 80079be:	60b9      	str	r1, [r7, #8]
 80079c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80079c2:	2300      	movs	r3, #0
 80079c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	7f1b      	ldrb	r3, [r3, #28]
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d101      	bne.n	80079d2 <HAL_RTC_SetTime+0x1c>
 80079ce:	2302      	movs	r3, #2
 80079d0:	e0aa      	b.n	8007b28 <HAL_RTC_SetTime+0x172>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2201      	movs	r2, #1
 80079d6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2202      	movs	r2, #2
 80079dc:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d126      	bne.n	8007a32 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d102      	bne.n	80079f8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	2200      	movs	r2, #0
 80079f6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	4618      	mov	r0, r3
 80079fe:	f000 fb11 	bl	8008024 <RTC_ByteToBcd2>
 8007a02:	4603      	mov	r3, r0
 8007a04:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	785b      	ldrb	r3, [r3, #1]
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f000 fb0a 	bl	8008024 <RTC_ByteToBcd2>
 8007a10:	4603      	mov	r3, r0
 8007a12:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007a14:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	789b      	ldrb	r3, [r3, #2]
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f000 fb02 	bl	8008024 <RTC_ByteToBcd2>
 8007a20:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007a22:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	78db      	ldrb	r3, [r3, #3]
 8007a2a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	617b      	str	r3, [r7, #20]
 8007a30:	e018      	b.n	8007a64 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d102      	bne.n	8007a46 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	2200      	movs	r2, #0
 8007a44:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	785b      	ldrb	r3, [r3, #1]
 8007a50:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007a52:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007a54:	68ba      	ldr	r2, [r7, #8]
 8007a56:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007a58:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	78db      	ldrb	r3, [r3, #3]
 8007a5e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007a60:	4313      	orrs	r3, r2
 8007a62:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	22ca      	movs	r2, #202	; 0xca
 8007a6a:	625a      	str	r2, [r3, #36]	; 0x24
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2253      	movs	r2, #83	; 0x53
 8007a72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	f000 faa9 	bl	8007fcc <RTC_EnterInitMode>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00b      	beq.n	8007a98 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	22ff      	movs	r2, #255	; 0xff
 8007a86:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2204      	movs	r2, #4
 8007a8c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	e047      	b.n	8007b28 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007aa2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007aa6:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	689a      	ldr	r2, [r3, #8]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007ab6:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	6899      	ldr	r1, [r3, #8]
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	68da      	ldr	r2, [r3, #12]
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	431a      	orrs	r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	430a      	orrs	r2, r1
 8007ace:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68da      	ldr	r2, [r3, #12]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ade:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	f003 0320 	and.w	r3, r3, #32
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d111      	bne.n	8007b12 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f000 fa44 	bl	8007f7c <HAL_RTC_WaitForSynchro>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00b      	beq.n	8007b12 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	22ff      	movs	r2, #255	; 0xff
 8007b00:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2204      	movs	r2, #4
 8007b06:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e00a      	b.n	8007b28 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	22ff      	movs	r2, #255	; 0xff
 8007b18:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8007b26:	2300      	movs	r3, #0
  }
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	371c      	adds	r7, #28
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd90      	pop	{r4, r7, pc}

08007b30 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007b30:	b590      	push	{r4, r7, lr}
 8007b32:	b087      	sub	sp, #28
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	7f1b      	ldrb	r3, [r3, #28]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d101      	bne.n	8007b4c <HAL_RTC_SetDate+0x1c>
 8007b48:	2302      	movs	r3, #2
 8007b4a:	e094      	b.n	8007c76 <HAL_RTC_SetDate+0x146>
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2202      	movs	r2, #2
 8007b56:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d10e      	bne.n	8007b7c <HAL_RTC_SetDate+0x4c>
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	785b      	ldrb	r3, [r3, #1]
 8007b62:	f003 0310 	and.w	r3, r3, #16
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d008      	beq.n	8007b7c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	785b      	ldrb	r3, [r3, #1]
 8007b6e:	f023 0310 	bic.w	r3, r3, #16
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	330a      	adds	r3, #10
 8007b76:	b2da      	uxtb	r2, r3
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d11c      	bne.n	8007bbc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	78db      	ldrb	r3, [r3, #3]
 8007b86:	4618      	mov	r0, r3
 8007b88:	f000 fa4c 	bl	8008024 <RTC_ByteToBcd2>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	785b      	ldrb	r3, [r3, #1]
 8007b94:	4618      	mov	r0, r3
 8007b96:	f000 fa45 	bl	8008024 <RTC_ByteToBcd2>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007b9e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	789b      	ldrb	r3, [r3, #2]
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f000 fa3d 	bl	8008024 <RTC_ByteToBcd2>
 8007baa:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007bac:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	617b      	str	r3, [r7, #20]
 8007bba:	e00e      	b.n	8007bda <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	78db      	ldrb	r3, [r3, #3]
 8007bc0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	785b      	ldrb	r3, [r3, #1]
 8007bc6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007bc8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007bca:	68ba      	ldr	r2, [r7, #8]
 8007bcc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8007bce:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	22ca      	movs	r2, #202	; 0xca
 8007be0:	625a      	str	r2, [r3, #36]	; 0x24
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2253      	movs	r2, #83	; 0x53
 8007be8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f000 f9ee 	bl	8007fcc <RTC_EnterInitMode>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00b      	beq.n	8007c0e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	22ff      	movs	r2, #255	; 0xff
 8007bfc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2204      	movs	r2, #4
 8007c02:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2200      	movs	r2, #0
 8007c08:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e033      	b.n	8007c76 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007c18:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007c1c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68da      	ldr	r2, [r3, #12]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c2c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	f003 0320 	and.w	r3, r3, #32
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d111      	bne.n	8007c60 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f000 f99d 	bl	8007f7c <HAL_RTC_WaitForSynchro>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00b      	beq.n	8007c60 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	22ff      	movs	r2, #255	; 0xff
 8007c4e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2204      	movs	r2, #4
 8007c54:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e00a      	b.n	8007c76 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	22ff      	movs	r2, #255	; 0xff
 8007c66:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007c74:	2300      	movs	r3, #0
  }
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	371c      	adds	r7, #28
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd90      	pop	{r4, r7, pc}
	...

08007c80 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007c80:	b590      	push	{r4, r7, lr}
 8007c82:	b089      	sub	sp, #36	; 0x24
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	61fb      	str	r3, [r7, #28]
 8007c90:	2300      	movs	r3, #0
 8007c92:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8007c94:	4b93      	ldr	r3, [pc, #588]	; (8007ee4 <HAL_RTC_SetAlarm_IT+0x264>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a93      	ldr	r2, [pc, #588]	; (8007ee8 <HAL_RTC_SetAlarm_IT+0x268>)
 8007c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c9e:	0adb      	lsrs	r3, r3, #11
 8007ca0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007ca4:	fb02 f303 	mul.w	r3, r2, r3
 8007ca8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	7f1b      	ldrb	r3, [r3, #28]
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d101      	bne.n	8007cb6 <HAL_RTC_SetAlarm_IT+0x36>
 8007cb2:	2302      	movs	r3, #2
 8007cb4:	e111      	b.n	8007eda <HAL_RTC_SetAlarm_IT+0x25a>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2202      	movs	r2, #2
 8007cc0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d137      	bne.n	8007d38 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d102      	bne.n	8007cdc <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f000 f99f 	bl	8008024 <RTC_ByteToBcd2>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	785b      	ldrb	r3, [r3, #1]
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f000 f998 	bl	8008024 <RTC_ByteToBcd2>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007cf8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	789b      	ldrb	r3, [r3, #2]
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f000 f990 	bl	8008024 <RTC_ByteToBcd2>
 8007d04:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007d06:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	78db      	ldrb	r3, [r3, #3]
 8007d0e:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007d10:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f000 f982 	bl	8008024 <RTC_ByteToBcd2>
 8007d20:	4603      	mov	r3, r0
 8007d22:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007d24:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007d2c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007d32:	4313      	orrs	r3, r2
 8007d34:	61fb      	str	r3, [r7, #28]
 8007d36:	e023      	b.n	8007d80 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d102      	bne.n	8007d4c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	785b      	ldrb	r3, [r3, #1]
 8007d56:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8007d58:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007d5a:	68ba      	ldr	r2, [r7, #8]
 8007d5c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007d5e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	78db      	ldrb	r3, [r3, #3]
 8007d64:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007d66:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d6e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007d70:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007d76:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	685a      	ldr	r2, [r3, #4]
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	699b      	ldr	r3, [r3, #24]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	22ca      	movs	r2, #202	; 0xca
 8007d92:	625a      	str	r2, [r3, #36]	; 0x24
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2253      	movs	r2, #83	; 0x53
 8007d9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007da4:	d141      	bne.n	8007e2a <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	689a      	ldr	r2, [r3, #8]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007db4:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	b2da      	uxtb	r2, r3
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007dc6:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	1e5a      	subs	r2, r3, #1
 8007dcc:	617a      	str	r2, [r7, #20]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10b      	bne.n	8007dea <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	22ff      	movs	r2, #255	; 0xff
 8007dd8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2203      	movs	r2, #3
 8007dde:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2200      	movs	r2, #0
 8007de4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e077      	b.n	8007eda <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	f003 0301 	and.w	r3, r3, #1
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d0e7      	beq.n	8007dc8 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	69fa      	ldr	r2, [r7, #28]
 8007dfe:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	69ba      	ldr	r2, [r7, #24]
 8007e06:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	689a      	ldr	r2, [r3, #8]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e16:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	689a      	ldr	r2, [r3, #8]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e26:	609a      	str	r2, [r3, #8]
 8007e28:	e040      	b.n	8007eac <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	689a      	ldr	r2, [r3, #8]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007e38:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	b2da      	uxtb	r2, r3
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007e4a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	1e5a      	subs	r2, r3, #1
 8007e50:	617a      	str	r2, [r7, #20]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d10b      	bne.n	8007e6e <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	22ff      	movs	r2, #255	; 0xff
 8007e5c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2203      	movs	r2, #3
 8007e62:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2200      	movs	r2, #0
 8007e68:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	e035      	b.n	8007eda <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	f003 0302 	and.w	r3, r3, #2
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d0e7      	beq.n	8007e4c <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	69fa      	ldr	r2, [r7, #28]
 8007e82:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	69ba      	ldr	r2, [r7, #24]
 8007e8a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	689a      	ldr	r2, [r3, #8]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e9a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	689a      	ldr	r2, [r3, #8]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007eaa:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007eac:	4b0f      	ldr	r3, [pc, #60]	; (8007eec <HAL_RTC_SetAlarm_IT+0x26c>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a0e      	ldr	r2, [pc, #56]	; (8007eec <HAL_RTC_SetAlarm_IT+0x26c>)
 8007eb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007eb6:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8007eb8:	4b0c      	ldr	r3, [pc, #48]	; (8007eec <HAL_RTC_SetAlarm_IT+0x26c>)
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	4a0b      	ldr	r2, [pc, #44]	; (8007eec <HAL_RTC_SetAlarm_IT+0x26c>)
 8007ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ec2:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	22ff      	movs	r2, #255	; 0xff
 8007eca:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007ed8:	2300      	movs	r3, #0
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3724      	adds	r7, #36	; 0x24
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd90      	pop	{r4, r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	20000000 	.word	0x20000000
 8007ee8:	10624dd3 	.word	0x10624dd3
 8007eec:	40013c00 	.word	0x40013c00

08007ef0 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d012      	beq.n	8007f2c <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00b      	beq.n	8007f2c <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f7fc fd07 	bl	8004928 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	b2da      	uxtb	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007f2a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d012      	beq.n	8007f60 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00b      	beq.n	8007f60 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 f8e1 	bl	8008110 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	b2da      	uxtb	r2, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007f5e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007f60:	4b05      	ldr	r3, [pc, #20]	; (8007f78 <HAL_RTC_AlarmIRQHandler+0x88>)
 8007f62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007f66:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	775a      	strb	r2, [r3, #29]
}
 8007f6e:	bf00      	nop
 8007f70:	3708      	adds	r7, #8
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	40013c00 	.word	0x40013c00

08007f7c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007f84:	2300      	movs	r3, #0
 8007f86:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68da      	ldr	r2, [r3, #12]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007f96:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007f98:	f7fc fe82 	bl	8004ca0 <HAL_GetTick>
 8007f9c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007f9e:	e009      	b.n	8007fb4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007fa0:	f7fc fe7e 	bl	8004ca0 <HAL_GetTick>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	1ad3      	subs	r3, r2, r3
 8007faa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007fae:	d901      	bls.n	8007fb4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	e007      	b.n	8007fc4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	f003 0320 	and.w	r3, r3, #32
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d0ee      	beq.n	8007fa0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007fc2:	2300      	movs	r3, #0
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3710      	adds	r7, #16
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d119      	bne.n	800801a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f04f 32ff 	mov.w	r2, #4294967295
 8007fee:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007ff0:	f7fc fe56 	bl	8004ca0 <HAL_GetTick>
 8007ff4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007ff6:	e009      	b.n	800800c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007ff8:	f7fc fe52 	bl	8004ca0 <HAL_GetTick>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008006:	d901      	bls.n	800800c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008008:	2303      	movs	r3, #3
 800800a:	e007      	b.n	800801c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008016:	2b00      	cmp	r3, #0
 8008018:	d0ee      	beq.n	8007ff8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800801a:	2300      	movs	r3, #0
}
 800801c:	4618      	mov	r0, r3
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
 800802a:	4603      	mov	r3, r0
 800802c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800802e:	2300      	movs	r3, #0
 8008030:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8008032:	e005      	b.n	8008040 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	3301      	adds	r3, #1
 8008038:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800803a:	79fb      	ldrb	r3, [r7, #7]
 800803c:	3b0a      	subs	r3, #10
 800803e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8008040:	79fb      	ldrb	r3, [r7, #7]
 8008042:	2b09      	cmp	r3, #9
 8008044:	d8f6      	bhi.n	8008034 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	b2db      	uxtb	r3, r3
 800804a:	011b      	lsls	r3, r3, #4
 800804c:	b2da      	uxtb	r2, r3
 800804e:	79fb      	ldrb	r3, [r7, #7]
 8008050:	4313      	orrs	r3, r2
 8008052:	b2db      	uxtb	r3, r3
}
 8008054:	4618      	mov	r0, r3
 8008056:	3714      	adds	r7, #20
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008068:	2300      	movs	r3, #0
 800806a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	7f1b      	ldrb	r3, [r3, #28]
 8008070:	2b01      	cmp	r3, #1
 8008072:	d101      	bne.n	8008078 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8008074:	2302      	movs	r3, #2
 8008076:	e047      	b.n	8008108 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2202      	movs	r2, #2
 8008082:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	22ca      	movs	r2, #202	; 0xca
 800808a:	625a      	str	r2, [r3, #36]	; 0x24
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2253      	movs	r2, #83	; 0x53
 8008092:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	689a      	ldr	r2, [r3, #8]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080a2:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	689a      	ldr	r2, [r3, #8]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80080b2:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 80080b4:	f7fc fdf4 	bl	8004ca0 <HAL_GetTick>
 80080b8:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 80080ba:	e013      	b.n	80080e4 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80080bc:	f7fc fdf0 	bl	8004ca0 <HAL_GetTick>
 80080c0:	4602      	mov	r2, r0
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	1ad3      	subs	r3, r2, r3
 80080c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080ca:	d90b      	bls.n	80080e4 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	22ff      	movs	r2, #255	; 0xff
 80080d2:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2203      	movs	r2, #3
 80080d8:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 80080e0:	2303      	movs	r3, #3
 80080e2:	e011      	b.n	8008108 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	f003 0304 	and.w	r3, r3, #4
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d0e4      	beq.n	80080bc <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	22ff      	movs	r2, #255	; 0xff
 80080f8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2201      	movs	r2, #1
 80080fe:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008106:	2300      	movs	r3, #0
}
 8008108:	4618      	mov	r0, r3
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8008118:	bf00      	nop
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b082      	sub	sp, #8
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d101      	bne.n	8008136 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	e07b      	b.n	800822e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813a:	2b00      	cmp	r3, #0
 800813c:	d108      	bne.n	8008150 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008146:	d009      	beq.n	800815c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	61da      	str	r2, [r3, #28]
 800814e:	e005      	b.n	800815c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008168:	b2db      	uxtb	r3, r3
 800816a:	2b00      	cmp	r3, #0
 800816c:	d106      	bne.n	800817c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f7fa fc7e 	bl	8002a78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2202      	movs	r2, #2
 8008180:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008192:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80081a4:	431a      	orrs	r2, r3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	68db      	ldr	r3, [r3, #12]
 80081aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081ae:	431a      	orrs	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	691b      	ldr	r3, [r3, #16]
 80081b4:	f003 0302 	and.w	r3, r3, #2
 80081b8:	431a      	orrs	r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	695b      	ldr	r3, [r3, #20]
 80081be:	f003 0301 	and.w	r3, r3, #1
 80081c2:	431a      	orrs	r2, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	699b      	ldr	r3, [r3, #24]
 80081c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081cc:	431a      	orrs	r2, r3
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	69db      	ldr	r3, [r3, #28]
 80081d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081d6:	431a      	orrs	r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6a1b      	ldr	r3, [r3, #32]
 80081dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081e0:	ea42 0103 	orr.w	r1, r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	430a      	orrs	r2, r1
 80081f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	699b      	ldr	r3, [r3, #24]
 80081f8:	0c1b      	lsrs	r3, r3, #16
 80081fa:	f003 0104 	and.w	r1, r3, #4
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008202:	f003 0210 	and.w	r2, r3, #16
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	430a      	orrs	r2, r1
 800820c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	69da      	ldr	r2, [r3, #28]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800821c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3708      	adds	r7, #8
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b088      	sub	sp, #32
 800823a:	af00      	add	r7, sp, #0
 800823c:	60f8      	str	r0, [r7, #12]
 800823e:	60b9      	str	r1, [r7, #8]
 8008240:	603b      	str	r3, [r7, #0]
 8008242:	4613      	mov	r3, r2
 8008244:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008246:	2300      	movs	r3, #0
 8008248:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008250:	2b01      	cmp	r3, #1
 8008252:	d101      	bne.n	8008258 <HAL_SPI_Transmit+0x22>
 8008254:	2302      	movs	r3, #2
 8008256:	e126      	b.n	80084a6 <HAL_SPI_Transmit+0x270>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008260:	f7fc fd1e 	bl	8004ca0 <HAL_GetTick>
 8008264:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008266:	88fb      	ldrh	r3, [r7, #6]
 8008268:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008270:	b2db      	uxtb	r3, r3
 8008272:	2b01      	cmp	r3, #1
 8008274:	d002      	beq.n	800827c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008276:	2302      	movs	r3, #2
 8008278:	77fb      	strb	r3, [r7, #31]
    goto error;
 800827a:	e10b      	b.n	8008494 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d002      	beq.n	8008288 <HAL_SPI_Transmit+0x52>
 8008282:	88fb      	ldrh	r3, [r7, #6]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d102      	bne.n	800828e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800828c:	e102      	b.n	8008494 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2203      	movs	r2, #3
 8008292:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	88fa      	ldrh	r2, [r7, #6]
 80082a6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	88fa      	ldrh	r2, [r7, #6]
 80082ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2200      	movs	r2, #0
 80082b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2200      	movs	r2, #0
 80082b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2200      	movs	r2, #0
 80082be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2200      	movs	r2, #0
 80082c4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2200      	movs	r2, #0
 80082ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082d4:	d10f      	bne.n	80082f6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80082f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008300:	2b40      	cmp	r3, #64	; 0x40
 8008302:	d007      	beq.n	8008314 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008312:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800831c:	d14b      	bne.n	80083b6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d002      	beq.n	800832c <HAL_SPI_Transmit+0xf6>
 8008326:	8afb      	ldrh	r3, [r7, #22]
 8008328:	2b01      	cmp	r3, #1
 800832a:	d13e      	bne.n	80083aa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008330:	881a      	ldrh	r2, [r3, #0]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800833c:	1c9a      	adds	r2, r3, #2
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008346:	b29b      	uxth	r3, r3
 8008348:	3b01      	subs	r3, #1
 800834a:	b29a      	uxth	r2, r3
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008350:	e02b      	b.n	80083aa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	f003 0302 	and.w	r3, r3, #2
 800835c:	2b02      	cmp	r3, #2
 800835e:	d112      	bne.n	8008386 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008364:	881a      	ldrh	r2, [r3, #0]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008370:	1c9a      	adds	r2, r3, #2
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800837a:	b29b      	uxth	r3, r3
 800837c:	3b01      	subs	r3, #1
 800837e:	b29a      	uxth	r2, r3
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	86da      	strh	r2, [r3, #54]	; 0x36
 8008384:	e011      	b.n	80083aa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008386:	f7fc fc8b 	bl	8004ca0 <HAL_GetTick>
 800838a:	4602      	mov	r2, r0
 800838c:	69bb      	ldr	r3, [r7, #24]
 800838e:	1ad3      	subs	r3, r2, r3
 8008390:	683a      	ldr	r2, [r7, #0]
 8008392:	429a      	cmp	r2, r3
 8008394:	d803      	bhi.n	800839e <HAL_SPI_Transmit+0x168>
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800839c:	d102      	bne.n	80083a4 <HAL_SPI_Transmit+0x16e>
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d102      	bne.n	80083aa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80083a4:	2303      	movs	r3, #3
 80083a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80083a8:	e074      	b.n	8008494 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d1ce      	bne.n	8008352 <HAL_SPI_Transmit+0x11c>
 80083b4:	e04c      	b.n	8008450 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d002      	beq.n	80083c4 <HAL_SPI_Transmit+0x18e>
 80083be:	8afb      	ldrh	r3, [r7, #22]
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d140      	bne.n	8008446 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	330c      	adds	r3, #12
 80083ce:	7812      	ldrb	r2, [r2, #0]
 80083d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d6:	1c5a      	adds	r2, r3, #1
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	3b01      	subs	r3, #1
 80083e4:	b29a      	uxth	r2, r3
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80083ea:	e02c      	b.n	8008446 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	f003 0302 	and.w	r3, r3, #2
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d113      	bne.n	8008422 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	330c      	adds	r3, #12
 8008404:	7812      	ldrb	r2, [r2, #0]
 8008406:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800840c:	1c5a      	adds	r2, r3, #1
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008416:	b29b      	uxth	r3, r3
 8008418:	3b01      	subs	r3, #1
 800841a:	b29a      	uxth	r2, r3
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	86da      	strh	r2, [r3, #54]	; 0x36
 8008420:	e011      	b.n	8008446 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008422:	f7fc fc3d 	bl	8004ca0 <HAL_GetTick>
 8008426:	4602      	mov	r2, r0
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	1ad3      	subs	r3, r2, r3
 800842c:	683a      	ldr	r2, [r7, #0]
 800842e:	429a      	cmp	r2, r3
 8008430:	d803      	bhi.n	800843a <HAL_SPI_Transmit+0x204>
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008438:	d102      	bne.n	8008440 <HAL_SPI_Transmit+0x20a>
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d102      	bne.n	8008446 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008440:	2303      	movs	r3, #3
 8008442:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008444:	e026      	b.n	8008494 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800844a:	b29b      	uxth	r3, r3
 800844c:	2b00      	cmp	r3, #0
 800844e:	d1cd      	bne.n	80083ec <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008450:	69ba      	ldr	r2, [r7, #24]
 8008452:	6839      	ldr	r1, [r7, #0]
 8008454:	68f8      	ldr	r0, [r7, #12]
 8008456:	f000 fbcb 	bl	8008bf0 <SPI_EndRxTxTransaction>
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d002      	beq.n	8008466 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2220      	movs	r2, #32
 8008464:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d10a      	bne.n	8008484 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800846e:	2300      	movs	r3, #0
 8008470:	613b      	str	r3, [r7, #16]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	613b      	str	r3, [r7, #16]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	613b      	str	r3, [r7, #16]
 8008482:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008488:	2b00      	cmp	r3, #0
 800848a:	d002      	beq.n	8008492 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800848c:	2301      	movs	r3, #1
 800848e:	77fb      	strb	r3, [r7, #31]
 8008490:	e000      	b.n	8008494 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008492:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2200      	movs	r2, #0
 80084a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80084a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3720      	adds	r7, #32
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}

080084ae <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084ae:	b580      	push	{r7, lr}
 80084b0:	b088      	sub	sp, #32
 80084b2:	af02      	add	r7, sp, #8
 80084b4:	60f8      	str	r0, [r7, #12]
 80084b6:	60b9      	str	r1, [r7, #8]
 80084b8:	603b      	str	r3, [r7, #0]
 80084ba:	4613      	mov	r3, r2
 80084bc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80084be:	2300      	movs	r3, #0
 80084c0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084ca:	d112      	bne.n	80084f2 <HAL_SPI_Receive+0x44>
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d10e      	bne.n	80084f2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2204      	movs	r2, #4
 80084d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80084dc:	88fa      	ldrh	r2, [r7, #6]
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	9300      	str	r3, [sp, #0]
 80084e2:	4613      	mov	r3, r2
 80084e4:	68ba      	ldr	r2, [r7, #8]
 80084e6:	68b9      	ldr	r1, [r7, #8]
 80084e8:	68f8      	ldr	r0, [r7, #12]
 80084ea:	f000 f8f1 	bl	80086d0 <HAL_SPI_TransmitReceive>
 80084ee:	4603      	mov	r3, r0
 80084f0:	e0ea      	b.n	80086c8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d101      	bne.n	8008500 <HAL_SPI_Receive+0x52>
 80084fc:	2302      	movs	r3, #2
 80084fe:	e0e3      	b.n	80086c8 <HAL_SPI_Receive+0x21a>
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008508:	f7fc fbca 	bl	8004ca0 <HAL_GetTick>
 800850c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008514:	b2db      	uxtb	r3, r3
 8008516:	2b01      	cmp	r3, #1
 8008518:	d002      	beq.n	8008520 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800851a:	2302      	movs	r3, #2
 800851c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800851e:	e0ca      	b.n	80086b6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d002      	beq.n	800852c <HAL_SPI_Receive+0x7e>
 8008526:	88fb      	ldrh	r3, [r7, #6]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d102      	bne.n	8008532 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008530:	e0c1      	b.n	80086b6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2204      	movs	r2, #4
 8008536:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2200      	movs	r2, #0
 800853e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	68ba      	ldr	r2, [r7, #8]
 8008544:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	88fa      	ldrh	r2, [r7, #6]
 800854a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	88fa      	ldrh	r2, [r7, #6]
 8008550:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2200      	movs	r2, #0
 8008556:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2200      	movs	r2, #0
 800855c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2200      	movs	r2, #0
 8008568:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2200      	movs	r2, #0
 800856e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008578:	d10f      	bne.n	800859a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008588:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008598:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085a4:	2b40      	cmp	r3, #64	; 0x40
 80085a6:	d007      	beq.n	80085b8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085b6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d162      	bne.n	8008686 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80085c0:	e02e      	b.n	8008620 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	f003 0301 	and.w	r3, r3, #1
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d115      	bne.n	80085fc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f103 020c 	add.w	r2, r3, #12
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085dc:	7812      	ldrb	r2, [r2, #0]
 80085de:	b2d2      	uxtb	r2, r2
 80085e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e6:	1c5a      	adds	r2, r3, #1
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	3b01      	subs	r3, #1
 80085f4:	b29a      	uxth	r2, r3
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80085fa:	e011      	b.n	8008620 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085fc:	f7fc fb50 	bl	8004ca0 <HAL_GetTick>
 8008600:	4602      	mov	r2, r0
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	1ad3      	subs	r3, r2, r3
 8008606:	683a      	ldr	r2, [r7, #0]
 8008608:	429a      	cmp	r2, r3
 800860a:	d803      	bhi.n	8008614 <HAL_SPI_Receive+0x166>
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008612:	d102      	bne.n	800861a <HAL_SPI_Receive+0x16c>
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d102      	bne.n	8008620 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800861a:	2303      	movs	r3, #3
 800861c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800861e:	e04a      	b.n	80086b6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008624:	b29b      	uxth	r3, r3
 8008626:	2b00      	cmp	r3, #0
 8008628:	d1cb      	bne.n	80085c2 <HAL_SPI_Receive+0x114>
 800862a:	e031      	b.n	8008690 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	f003 0301 	and.w	r3, r3, #1
 8008636:	2b01      	cmp	r3, #1
 8008638:	d113      	bne.n	8008662 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68da      	ldr	r2, [r3, #12]
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008644:	b292      	uxth	r2, r2
 8008646:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800864c:	1c9a      	adds	r2, r3, #2
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008656:	b29b      	uxth	r3, r3
 8008658:	3b01      	subs	r3, #1
 800865a:	b29a      	uxth	r2, r3
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008660:	e011      	b.n	8008686 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008662:	f7fc fb1d 	bl	8004ca0 <HAL_GetTick>
 8008666:	4602      	mov	r2, r0
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	683a      	ldr	r2, [r7, #0]
 800866e:	429a      	cmp	r2, r3
 8008670:	d803      	bhi.n	800867a <HAL_SPI_Receive+0x1cc>
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008678:	d102      	bne.n	8008680 <HAL_SPI_Receive+0x1d2>
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d102      	bne.n	8008686 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008680:	2303      	movs	r3, #3
 8008682:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008684:	e017      	b.n	80086b6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800868a:	b29b      	uxth	r3, r3
 800868c:	2b00      	cmp	r3, #0
 800868e:	d1cd      	bne.n	800862c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008690:	693a      	ldr	r2, [r7, #16]
 8008692:	6839      	ldr	r1, [r7, #0]
 8008694:	68f8      	ldr	r0, [r7, #12]
 8008696:	f000 fa45 	bl	8008b24 <SPI_EndRxTransaction>
 800869a:	4603      	mov	r3, r0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d002      	beq.n	80086a6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2220      	movs	r2, #32
 80086a4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d002      	beq.n	80086b4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	75fb      	strb	r3, [r7, #23]
 80086b2:	e000      	b.n	80086b6 <HAL_SPI_Receive+0x208>
  }

error :
 80086b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2201      	movs	r2, #1
 80086ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2200      	movs	r2, #0
 80086c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80086c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3718      	adds	r7, #24
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b08c      	sub	sp, #48	; 0x30
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
 80086dc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80086de:	2301      	movs	r3, #1
 80086e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80086e2:	2300      	movs	r3, #0
 80086e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d101      	bne.n	80086f6 <HAL_SPI_TransmitReceive+0x26>
 80086f2:	2302      	movs	r3, #2
 80086f4:	e18a      	b.n	8008a0c <HAL_SPI_TransmitReceive+0x33c>
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2201      	movs	r2, #1
 80086fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80086fe:	f7fc facf 	bl	8004ca0 <HAL_GetTick>
 8008702:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800870a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008714:	887b      	ldrh	r3, [r7, #2]
 8008716:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008718:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800871c:	2b01      	cmp	r3, #1
 800871e:	d00f      	beq.n	8008740 <HAL_SPI_TransmitReceive+0x70>
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008726:	d107      	bne.n	8008738 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d103      	bne.n	8008738 <HAL_SPI_TransmitReceive+0x68>
 8008730:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008734:	2b04      	cmp	r3, #4
 8008736:	d003      	beq.n	8008740 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008738:	2302      	movs	r3, #2
 800873a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800873e:	e15b      	b.n	80089f8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d005      	beq.n	8008752 <HAL_SPI_TransmitReceive+0x82>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d002      	beq.n	8008752 <HAL_SPI_TransmitReceive+0x82>
 800874c:	887b      	ldrh	r3, [r7, #2]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d103      	bne.n	800875a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008758:	e14e      	b.n	80089f8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008760:	b2db      	uxtb	r3, r3
 8008762:	2b04      	cmp	r3, #4
 8008764:	d003      	beq.n	800876e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2205      	movs	r2, #5
 800876a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2200      	movs	r2, #0
 8008772:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	887a      	ldrh	r2, [r7, #2]
 800877e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	887a      	ldrh	r2, [r7, #2]
 8008784:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	68ba      	ldr	r2, [r7, #8]
 800878a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	887a      	ldrh	r2, [r7, #2]
 8008790:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	887a      	ldrh	r2, [r7, #2]
 8008796:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2200      	movs	r2, #0
 800879c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2200      	movs	r2, #0
 80087a2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ae:	2b40      	cmp	r3, #64	; 0x40
 80087b0:	d007      	beq.n	80087c2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	681a      	ldr	r2, [r3, #0]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087ca:	d178      	bne.n	80088be <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d002      	beq.n	80087da <HAL_SPI_TransmitReceive+0x10a>
 80087d4:	8b7b      	ldrh	r3, [r7, #26]
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d166      	bne.n	80088a8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087de:	881a      	ldrh	r2, [r3, #0]
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ea:	1c9a      	adds	r2, r3, #2
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	3b01      	subs	r3, #1
 80087f8:	b29a      	uxth	r2, r3
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087fe:	e053      	b.n	80088a8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	f003 0302 	and.w	r3, r3, #2
 800880a:	2b02      	cmp	r3, #2
 800880c:	d11b      	bne.n	8008846 <HAL_SPI_TransmitReceive+0x176>
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008812:	b29b      	uxth	r3, r3
 8008814:	2b00      	cmp	r3, #0
 8008816:	d016      	beq.n	8008846 <HAL_SPI_TransmitReceive+0x176>
 8008818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800881a:	2b01      	cmp	r3, #1
 800881c:	d113      	bne.n	8008846 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008822:	881a      	ldrh	r2, [r3, #0]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800882e:	1c9a      	adds	r2, r3, #2
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008838:	b29b      	uxth	r3, r3
 800883a:	3b01      	subs	r3, #1
 800883c:	b29a      	uxth	r2, r3
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008842:	2300      	movs	r3, #0
 8008844:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	f003 0301 	and.w	r3, r3, #1
 8008850:	2b01      	cmp	r3, #1
 8008852:	d119      	bne.n	8008888 <HAL_SPI_TransmitReceive+0x1b8>
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008858:	b29b      	uxth	r3, r3
 800885a:	2b00      	cmp	r3, #0
 800885c:	d014      	beq.n	8008888 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	68da      	ldr	r2, [r3, #12]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008868:	b292      	uxth	r2, r2
 800886a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008870:	1c9a      	adds	r2, r3, #2
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800887a:	b29b      	uxth	r3, r3
 800887c:	3b01      	subs	r3, #1
 800887e:	b29a      	uxth	r2, r3
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008884:	2301      	movs	r3, #1
 8008886:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008888:	f7fc fa0a 	bl	8004ca0 <HAL_GetTick>
 800888c:	4602      	mov	r2, r0
 800888e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008894:	429a      	cmp	r2, r3
 8008896:	d807      	bhi.n	80088a8 <HAL_SPI_TransmitReceive+0x1d8>
 8008898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800889e:	d003      	beq.n	80088a8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80088a0:	2303      	movs	r3, #3
 80088a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80088a6:	e0a7      	b.n	80089f8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d1a6      	bne.n	8008800 <HAL_SPI_TransmitReceive+0x130>
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1a1      	bne.n	8008800 <HAL_SPI_TransmitReceive+0x130>
 80088bc:	e07c      	b.n	80089b8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d002      	beq.n	80088cc <HAL_SPI_TransmitReceive+0x1fc>
 80088c6:	8b7b      	ldrh	r3, [r7, #26]
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d16b      	bne.n	80089a4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	330c      	adds	r3, #12
 80088d6:	7812      	ldrb	r2, [r2, #0]
 80088d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088de:	1c5a      	adds	r2, r3, #1
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	3b01      	subs	r3, #1
 80088ec:	b29a      	uxth	r2, r3
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088f2:	e057      	b.n	80089a4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	f003 0302 	and.w	r3, r3, #2
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d11c      	bne.n	800893c <HAL_SPI_TransmitReceive+0x26c>
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008906:	b29b      	uxth	r3, r3
 8008908:	2b00      	cmp	r3, #0
 800890a:	d017      	beq.n	800893c <HAL_SPI_TransmitReceive+0x26c>
 800890c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800890e:	2b01      	cmp	r3, #1
 8008910:	d114      	bne.n	800893c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	330c      	adds	r3, #12
 800891c:	7812      	ldrb	r2, [r2, #0]
 800891e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008924:	1c5a      	adds	r2, r3, #1
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800892e:	b29b      	uxth	r3, r3
 8008930:	3b01      	subs	r3, #1
 8008932:	b29a      	uxth	r2, r3
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008938:	2300      	movs	r3, #0
 800893a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	f003 0301 	and.w	r3, r3, #1
 8008946:	2b01      	cmp	r3, #1
 8008948:	d119      	bne.n	800897e <HAL_SPI_TransmitReceive+0x2ae>
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800894e:	b29b      	uxth	r3, r3
 8008950:	2b00      	cmp	r3, #0
 8008952:	d014      	beq.n	800897e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68da      	ldr	r2, [r3, #12]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800895e:	b2d2      	uxtb	r2, r2
 8008960:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008966:	1c5a      	adds	r2, r3, #1
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008970:	b29b      	uxth	r3, r3
 8008972:	3b01      	subs	r3, #1
 8008974:	b29a      	uxth	r2, r3
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800897a:	2301      	movs	r3, #1
 800897c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800897e:	f7fc f98f 	bl	8004ca0 <HAL_GetTick>
 8008982:	4602      	mov	r2, r0
 8008984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008986:	1ad3      	subs	r3, r2, r3
 8008988:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800898a:	429a      	cmp	r2, r3
 800898c:	d803      	bhi.n	8008996 <HAL_SPI_TransmitReceive+0x2c6>
 800898e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008994:	d102      	bne.n	800899c <HAL_SPI_TransmitReceive+0x2cc>
 8008996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008998:	2b00      	cmp	r3, #0
 800899a:	d103      	bne.n	80089a4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800899c:	2303      	movs	r3, #3
 800899e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80089a2:	e029      	b.n	80089f8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d1a2      	bne.n	80088f4 <HAL_SPI_TransmitReceive+0x224>
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d19d      	bne.n	80088f4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80089b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80089bc:	68f8      	ldr	r0, [r7, #12]
 80089be:	f000 f917 	bl	8008bf0 <SPI_EndRxTxTransaction>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d006      	beq.n	80089d6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2220      	movs	r2, #32
 80089d2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80089d4:	e010      	b.n	80089f8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d10b      	bne.n	80089f6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80089de:	2300      	movs	r3, #0
 80089e0:	617b      	str	r3, [r7, #20]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	617b      	str	r3, [r7, #20]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	617b      	str	r3, [r7, #20]
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	e000      	b.n	80089f8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80089f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008a08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3730      	adds	r7, #48	; 0x30
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b088      	sub	sp, #32
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	603b      	str	r3, [r7, #0]
 8008a20:	4613      	mov	r3, r2
 8008a22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008a24:	f7fc f93c 	bl	8004ca0 <HAL_GetTick>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2c:	1a9b      	subs	r3, r3, r2
 8008a2e:	683a      	ldr	r2, [r7, #0]
 8008a30:	4413      	add	r3, r2
 8008a32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008a34:	f7fc f934 	bl	8004ca0 <HAL_GetTick>
 8008a38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008a3a:	4b39      	ldr	r3, [pc, #228]	; (8008b20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	015b      	lsls	r3, r3, #5
 8008a40:	0d1b      	lsrs	r3, r3, #20
 8008a42:	69fa      	ldr	r2, [r7, #28]
 8008a44:	fb02 f303 	mul.w	r3, r2, r3
 8008a48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a4a:	e054      	b.n	8008af6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a52:	d050      	beq.n	8008af6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008a54:	f7fc f924 	bl	8004ca0 <HAL_GetTick>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	1ad3      	subs	r3, r2, r3
 8008a5e:	69fa      	ldr	r2, [r7, #28]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d902      	bls.n	8008a6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d13d      	bne.n	8008ae6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	685a      	ldr	r2, [r3, #4]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008a78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a82:	d111      	bne.n	8008aa8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a8c:	d004      	beq.n	8008a98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a96:	d107      	bne.n	8008aa8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008aa6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ab0:	d10f      	bne.n	8008ad2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ac0:	601a      	str	r2, [r3, #0]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ad0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008ae2:	2303      	movs	r3, #3
 8008ae4:	e017      	b.n	8008b16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d101      	bne.n	8008af0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008aec:	2300      	movs	r3, #0
 8008aee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	3b01      	subs	r3, #1
 8008af4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	689a      	ldr	r2, [r3, #8]
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	4013      	ands	r3, r2
 8008b00:	68ba      	ldr	r2, [r7, #8]
 8008b02:	429a      	cmp	r2, r3
 8008b04:	bf0c      	ite	eq
 8008b06:	2301      	moveq	r3, #1
 8008b08:	2300      	movne	r3, #0
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	79fb      	ldrb	r3, [r7, #7]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d19b      	bne.n	8008a4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3720      	adds	r7, #32
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	20000000 	.word	0x20000000

08008b24 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b086      	sub	sp, #24
 8008b28:	af02      	add	r7, sp, #8
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	60b9      	str	r1, [r7, #8]
 8008b2e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b38:	d111      	bne.n	8008b5e <SPI_EndRxTransaction+0x3a>
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b42:	d004      	beq.n	8008b4e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b4c:	d107      	bne.n	8008b5e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b5c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b66:	d12a      	bne.n	8008bbe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b70:	d012      	beq.n	8008b98 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	9300      	str	r3, [sp, #0]
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	2180      	movs	r1, #128	; 0x80
 8008b7c:	68f8      	ldr	r0, [r7, #12]
 8008b7e:	f7ff ff49 	bl	8008a14 <SPI_WaitFlagStateUntilTimeout>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d02d      	beq.n	8008be4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b8c:	f043 0220 	orr.w	r2, r3, #32
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008b94:	2303      	movs	r3, #3
 8008b96:	e026      	b.n	8008be6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	9300      	str	r3, [sp, #0]
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	2101      	movs	r1, #1
 8008ba2:	68f8      	ldr	r0, [r7, #12]
 8008ba4:	f7ff ff36 	bl	8008a14 <SPI_WaitFlagStateUntilTimeout>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d01a      	beq.n	8008be4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bb2:	f043 0220 	orr.w	r2, r3, #32
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008bba:	2303      	movs	r3, #3
 8008bbc:	e013      	b.n	8008be6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	9300      	str	r3, [sp, #0]
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	2101      	movs	r1, #1
 8008bc8:	68f8      	ldr	r0, [r7, #12]
 8008bca:	f7ff ff23 	bl	8008a14 <SPI_WaitFlagStateUntilTimeout>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d007      	beq.n	8008be4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bd8:	f043 0220 	orr.w	r2, r3, #32
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008be0:	2303      	movs	r3, #3
 8008be2:	e000      	b.n	8008be6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
	...

08008bf0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b088      	sub	sp, #32
 8008bf4:	af02      	add	r7, sp, #8
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	60b9      	str	r1, [r7, #8]
 8008bfa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008bfc:	4b1b      	ldr	r3, [pc, #108]	; (8008c6c <SPI_EndRxTxTransaction+0x7c>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a1b      	ldr	r2, [pc, #108]	; (8008c70 <SPI_EndRxTxTransaction+0x80>)
 8008c02:	fba2 2303 	umull	r2, r3, r2, r3
 8008c06:	0d5b      	lsrs	r3, r3, #21
 8008c08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008c0c:	fb02 f303 	mul.w	r3, r2, r3
 8008c10:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c1a:	d112      	bne.n	8008c42 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	9300      	str	r3, [sp, #0]
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	2200      	movs	r2, #0
 8008c24:	2180      	movs	r1, #128	; 0x80
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	f7ff fef4 	bl	8008a14 <SPI_WaitFlagStateUntilTimeout>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d016      	beq.n	8008c60 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c36:	f043 0220 	orr.w	r2, r3, #32
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008c3e:	2303      	movs	r3, #3
 8008c40:	e00f      	b.n	8008c62 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d00a      	beq.n	8008c5e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	3b01      	subs	r3, #1
 8008c4c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c58:	2b80      	cmp	r3, #128	; 0x80
 8008c5a:	d0f2      	beq.n	8008c42 <SPI_EndRxTxTransaction+0x52>
 8008c5c:	e000      	b.n	8008c60 <SPI_EndRxTxTransaction+0x70>
        break;
 8008c5e:	bf00      	nop
  }

  return HAL_OK;
 8008c60:	2300      	movs	r3, #0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3718      	adds	r7, #24
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	20000000 	.word	0x20000000
 8008c70:	165e9f81 	.word	0x165e9f81

08008c74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d101      	bne.n	8008c86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	e041      	b.n	8008d0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d106      	bne.n	8008ca0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 f839 	bl	8008d12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2202      	movs	r2, #2
 8008ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	3304      	adds	r3, #4
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	4610      	mov	r0, r2
 8008cb4:	f000 faea 	bl	800928c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2201      	movs	r2, #1
 8008cec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3708      	adds	r7, #8
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008d12:	b480      	push	{r7}
 8008d14:	b083      	sub	sp, #12
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008d1a:	bf00      	nop
 8008d1c:	370c      	adds	r7, #12
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr
	...

08008d28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b085      	sub	sp, #20
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d001      	beq.n	8008d40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e04e      	b.n	8008dde <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2202      	movs	r2, #2
 8008d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	68da      	ldr	r2, [r3, #12]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f042 0201 	orr.w	r2, r2, #1
 8008d56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a23      	ldr	r2, [pc, #140]	; (8008dec <HAL_TIM_Base_Start_IT+0xc4>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d022      	beq.n	8008da8 <HAL_TIM_Base_Start_IT+0x80>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d6a:	d01d      	beq.n	8008da8 <HAL_TIM_Base_Start_IT+0x80>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a1f      	ldr	r2, [pc, #124]	; (8008df0 <HAL_TIM_Base_Start_IT+0xc8>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d018      	beq.n	8008da8 <HAL_TIM_Base_Start_IT+0x80>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a1e      	ldr	r2, [pc, #120]	; (8008df4 <HAL_TIM_Base_Start_IT+0xcc>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d013      	beq.n	8008da8 <HAL_TIM_Base_Start_IT+0x80>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a1c      	ldr	r2, [pc, #112]	; (8008df8 <HAL_TIM_Base_Start_IT+0xd0>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d00e      	beq.n	8008da8 <HAL_TIM_Base_Start_IT+0x80>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a1b      	ldr	r2, [pc, #108]	; (8008dfc <HAL_TIM_Base_Start_IT+0xd4>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d009      	beq.n	8008da8 <HAL_TIM_Base_Start_IT+0x80>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a19      	ldr	r2, [pc, #100]	; (8008e00 <HAL_TIM_Base_Start_IT+0xd8>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d004      	beq.n	8008da8 <HAL_TIM_Base_Start_IT+0x80>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a18      	ldr	r2, [pc, #96]	; (8008e04 <HAL_TIM_Base_Start_IT+0xdc>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d111      	bne.n	8008dcc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	f003 0307 	and.w	r3, r3, #7
 8008db2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2b06      	cmp	r3, #6
 8008db8:	d010      	beq.n	8008ddc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f042 0201 	orr.w	r2, r2, #1
 8008dc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dca:	e007      	b.n	8008ddc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f042 0201 	orr.w	r2, r2, #1
 8008dda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ddc:	2300      	movs	r3, #0
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3714      	adds	r7, #20
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop
 8008dec:	40010000 	.word	0x40010000
 8008df0:	40000400 	.word	0x40000400
 8008df4:	40000800 	.word	0x40000800
 8008df8:	40000c00 	.word	0x40000c00
 8008dfc:	40010400 	.word	0x40010400
 8008e00:	40014000 	.word	0x40014000
 8008e04:	40001800 	.word	0x40001800

08008e08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d101      	bne.n	8008e1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008e16:	2301      	movs	r3, #1
 8008e18:	e041      	b.n	8008e9e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d106      	bne.n	8008e34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f7f9 fed8 	bl	8002be4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2202      	movs	r2, #2
 8008e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	3304      	adds	r3, #4
 8008e44:	4619      	mov	r1, r3
 8008e46:	4610      	mov	r0, r2
 8008e48:	f000 fa20 	bl	800928c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2201      	movs	r2, #1
 8008e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3708      	adds	r7, #8
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b082      	sub	sp, #8
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	f003 0302 	and.w	r3, r3, #2
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	d122      	bne.n	8008f02 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	f003 0302 	and.w	r3, r3, #2
 8008ec6:	2b02      	cmp	r3, #2
 8008ec8:	d11b      	bne.n	8008f02 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f06f 0202 	mvn.w	r2, #2
 8008ed2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	699b      	ldr	r3, [r3, #24]
 8008ee0:	f003 0303 	and.w	r3, r3, #3
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d003      	beq.n	8008ef0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 f9b1 	bl	8009250 <HAL_TIM_IC_CaptureCallback>
 8008eee:	e005      	b.n	8008efc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 f9a3 	bl	800923c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 f9b4 	bl	8009264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	f003 0304 	and.w	r3, r3, #4
 8008f0c:	2b04      	cmp	r3, #4
 8008f0e:	d122      	bne.n	8008f56 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	f003 0304 	and.w	r3, r3, #4
 8008f1a:	2b04      	cmp	r3, #4
 8008f1c:	d11b      	bne.n	8008f56 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f06f 0204 	mvn.w	r2, #4
 8008f26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2202      	movs	r2, #2
 8008f2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	699b      	ldr	r3, [r3, #24]
 8008f34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d003      	beq.n	8008f44 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 f987 	bl	8009250 <HAL_TIM_IC_CaptureCallback>
 8008f42:	e005      	b.n	8008f50 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 f979 	bl	800923c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 f98a 	bl	8009264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	691b      	ldr	r3, [r3, #16]
 8008f5c:	f003 0308 	and.w	r3, r3, #8
 8008f60:	2b08      	cmp	r3, #8
 8008f62:	d122      	bne.n	8008faa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	f003 0308 	and.w	r3, r3, #8
 8008f6e:	2b08      	cmp	r3, #8
 8008f70:	d11b      	bne.n	8008faa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f06f 0208 	mvn.w	r2, #8
 8008f7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2204      	movs	r2, #4
 8008f80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	69db      	ldr	r3, [r3, #28]
 8008f88:	f003 0303 	and.w	r3, r3, #3
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d003      	beq.n	8008f98 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 f95d 	bl	8009250 <HAL_TIM_IC_CaptureCallback>
 8008f96:	e005      	b.n	8008fa4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 f94f 	bl	800923c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 f960 	bl	8009264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	691b      	ldr	r3, [r3, #16]
 8008fb0:	f003 0310 	and.w	r3, r3, #16
 8008fb4:	2b10      	cmp	r3, #16
 8008fb6:	d122      	bne.n	8008ffe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	68db      	ldr	r3, [r3, #12]
 8008fbe:	f003 0310 	and.w	r3, r3, #16
 8008fc2:	2b10      	cmp	r3, #16
 8008fc4:	d11b      	bne.n	8008ffe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f06f 0210 	mvn.w	r2, #16
 8008fce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2208      	movs	r2, #8
 8008fd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	69db      	ldr	r3, [r3, #28]
 8008fdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d003      	beq.n	8008fec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 f933 	bl	8009250 <HAL_TIM_IC_CaptureCallback>
 8008fea:	e005      	b.n	8008ff8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 f925 	bl	800923c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 f936 	bl	8009264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	691b      	ldr	r3, [r3, #16]
 8009004:	f003 0301 	and.w	r3, r3, #1
 8009008:	2b01      	cmp	r3, #1
 800900a:	d10e      	bne.n	800902a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	68db      	ldr	r3, [r3, #12]
 8009012:	f003 0301 	and.w	r3, r3, #1
 8009016:	2b01      	cmp	r3, #1
 8009018:	d107      	bne.n	800902a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f06f 0201 	mvn.w	r2, #1
 8009022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f7f9 fb95 	bl	8002754 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	691b      	ldr	r3, [r3, #16]
 8009030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009034:	2b80      	cmp	r3, #128	; 0x80
 8009036:	d10e      	bne.n	8009056 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009042:	2b80      	cmp	r3, #128	; 0x80
 8009044:	d107      	bne.n	8009056 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800904e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 fbf1 	bl	8009838 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009060:	2b40      	cmp	r3, #64	; 0x40
 8009062:	d10e      	bne.n	8009082 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800906e:	2b40      	cmp	r3, #64	; 0x40
 8009070:	d107      	bne.n	8009082 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800907a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 f8fb 	bl	8009278 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	691b      	ldr	r3, [r3, #16]
 8009088:	f003 0320 	and.w	r3, r3, #32
 800908c:	2b20      	cmp	r3, #32
 800908e:	d10e      	bne.n	80090ae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	f003 0320 	and.w	r3, r3, #32
 800909a:	2b20      	cmp	r3, #32
 800909c:	d107      	bne.n	80090ae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f06f 0220 	mvn.w	r2, #32
 80090a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 fbbb 	bl	8009824 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80090ae:	bf00      	nop
 80090b0:	3708      	adds	r7, #8
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
	...

080090b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b086      	sub	sp, #24
 80090bc:	af00      	add	r7, sp, #0
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090c4:	2300      	movs	r3, #0
 80090c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d101      	bne.n	80090d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80090d2:	2302      	movs	r3, #2
 80090d4:	e0ae      	b.n	8009234 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2201      	movs	r2, #1
 80090da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2b0c      	cmp	r3, #12
 80090e2:	f200 809f 	bhi.w	8009224 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80090e6:	a201      	add	r2, pc, #4	; (adr r2, 80090ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80090e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ec:	08009121 	.word	0x08009121
 80090f0:	08009225 	.word	0x08009225
 80090f4:	08009225 	.word	0x08009225
 80090f8:	08009225 	.word	0x08009225
 80090fc:	08009161 	.word	0x08009161
 8009100:	08009225 	.word	0x08009225
 8009104:	08009225 	.word	0x08009225
 8009108:	08009225 	.word	0x08009225
 800910c:	080091a3 	.word	0x080091a3
 8009110:	08009225 	.word	0x08009225
 8009114:	08009225 	.word	0x08009225
 8009118:	08009225 	.word	0x08009225
 800911c:	080091e3 	.word	0x080091e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	68b9      	ldr	r1, [r7, #8]
 8009126:	4618      	mov	r0, r3
 8009128:	f000 f950 	bl	80093cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	699a      	ldr	r2, [r3, #24]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f042 0208 	orr.w	r2, r2, #8
 800913a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	699a      	ldr	r2, [r3, #24]
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f022 0204 	bic.w	r2, r2, #4
 800914a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	6999      	ldr	r1, [r3, #24]
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	691a      	ldr	r2, [r3, #16]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	430a      	orrs	r2, r1
 800915c:	619a      	str	r2, [r3, #24]
      break;
 800915e:	e064      	b.n	800922a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	68b9      	ldr	r1, [r7, #8]
 8009166:	4618      	mov	r0, r3
 8009168:	f000 f9a0 	bl	80094ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	699a      	ldr	r2, [r3, #24]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800917a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	699a      	ldr	r2, [r3, #24]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800918a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	6999      	ldr	r1, [r3, #24]
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	691b      	ldr	r3, [r3, #16]
 8009196:	021a      	lsls	r2, r3, #8
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	430a      	orrs	r2, r1
 800919e:	619a      	str	r2, [r3, #24]
      break;
 80091a0:	e043      	b.n	800922a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	68b9      	ldr	r1, [r7, #8]
 80091a8:	4618      	mov	r0, r3
 80091aa:	f000 f9f5 	bl	8009598 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	69da      	ldr	r2, [r3, #28]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f042 0208 	orr.w	r2, r2, #8
 80091bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	69da      	ldr	r2, [r3, #28]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f022 0204 	bic.w	r2, r2, #4
 80091cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	69d9      	ldr	r1, [r3, #28]
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	691a      	ldr	r2, [r3, #16]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	430a      	orrs	r2, r1
 80091de:	61da      	str	r2, [r3, #28]
      break;
 80091e0:	e023      	b.n	800922a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68b9      	ldr	r1, [r7, #8]
 80091e8:	4618      	mov	r0, r3
 80091ea:	f000 fa49 	bl	8009680 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	69da      	ldr	r2, [r3, #28]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	69da      	ldr	r2, [r3, #28]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800920c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	69d9      	ldr	r1, [r3, #28]
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	691b      	ldr	r3, [r3, #16]
 8009218:	021a      	lsls	r2, r3, #8
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	430a      	orrs	r2, r1
 8009220:	61da      	str	r2, [r3, #28]
      break;
 8009222:	e002      	b.n	800922a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009224:	2301      	movs	r3, #1
 8009226:	75fb      	strb	r3, [r7, #23]
      break;
 8009228:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2200      	movs	r2, #0
 800922e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009232:	7dfb      	ldrb	r3, [r7, #23]
}
 8009234:	4618      	mov	r0, r3
 8009236:	3718      	adds	r7, #24
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009244:	bf00      	nop
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009258:	bf00      	nop
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800926c:	bf00      	nop
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009280:	bf00      	nop
 8009282:	370c      	adds	r7, #12
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4a40      	ldr	r2, [pc, #256]	; (80093a0 <TIM_Base_SetConfig+0x114>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d013      	beq.n	80092cc <TIM_Base_SetConfig+0x40>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092aa:	d00f      	beq.n	80092cc <TIM_Base_SetConfig+0x40>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	4a3d      	ldr	r2, [pc, #244]	; (80093a4 <TIM_Base_SetConfig+0x118>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d00b      	beq.n	80092cc <TIM_Base_SetConfig+0x40>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	4a3c      	ldr	r2, [pc, #240]	; (80093a8 <TIM_Base_SetConfig+0x11c>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d007      	beq.n	80092cc <TIM_Base_SetConfig+0x40>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	4a3b      	ldr	r2, [pc, #236]	; (80093ac <TIM_Base_SetConfig+0x120>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d003      	beq.n	80092cc <TIM_Base_SetConfig+0x40>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	4a3a      	ldr	r2, [pc, #232]	; (80093b0 <TIM_Base_SetConfig+0x124>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d108      	bne.n	80092de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	68fa      	ldr	r2, [r7, #12]
 80092da:	4313      	orrs	r3, r2
 80092dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	4a2f      	ldr	r2, [pc, #188]	; (80093a0 <TIM_Base_SetConfig+0x114>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d02b      	beq.n	800933e <TIM_Base_SetConfig+0xb2>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092ec:	d027      	beq.n	800933e <TIM_Base_SetConfig+0xb2>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	4a2c      	ldr	r2, [pc, #176]	; (80093a4 <TIM_Base_SetConfig+0x118>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d023      	beq.n	800933e <TIM_Base_SetConfig+0xb2>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	4a2b      	ldr	r2, [pc, #172]	; (80093a8 <TIM_Base_SetConfig+0x11c>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d01f      	beq.n	800933e <TIM_Base_SetConfig+0xb2>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	4a2a      	ldr	r2, [pc, #168]	; (80093ac <TIM_Base_SetConfig+0x120>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d01b      	beq.n	800933e <TIM_Base_SetConfig+0xb2>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	4a29      	ldr	r2, [pc, #164]	; (80093b0 <TIM_Base_SetConfig+0x124>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d017      	beq.n	800933e <TIM_Base_SetConfig+0xb2>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	4a28      	ldr	r2, [pc, #160]	; (80093b4 <TIM_Base_SetConfig+0x128>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d013      	beq.n	800933e <TIM_Base_SetConfig+0xb2>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	4a27      	ldr	r2, [pc, #156]	; (80093b8 <TIM_Base_SetConfig+0x12c>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d00f      	beq.n	800933e <TIM_Base_SetConfig+0xb2>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	4a26      	ldr	r2, [pc, #152]	; (80093bc <TIM_Base_SetConfig+0x130>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d00b      	beq.n	800933e <TIM_Base_SetConfig+0xb2>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	4a25      	ldr	r2, [pc, #148]	; (80093c0 <TIM_Base_SetConfig+0x134>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d007      	beq.n	800933e <TIM_Base_SetConfig+0xb2>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	4a24      	ldr	r2, [pc, #144]	; (80093c4 <TIM_Base_SetConfig+0x138>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d003      	beq.n	800933e <TIM_Base_SetConfig+0xb2>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	4a23      	ldr	r2, [pc, #140]	; (80093c8 <TIM_Base_SetConfig+0x13c>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d108      	bne.n	8009350 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	68fa      	ldr	r2, [r7, #12]
 800934c:	4313      	orrs	r3, r2
 800934e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	695b      	ldr	r3, [r3, #20]
 800935a:	4313      	orrs	r3, r2
 800935c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	68fa      	ldr	r2, [r7, #12]
 8009362:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	689a      	ldr	r2, [r3, #8]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4a0a      	ldr	r2, [pc, #40]	; (80093a0 <TIM_Base_SetConfig+0x114>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d003      	beq.n	8009384 <TIM_Base_SetConfig+0xf8>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	4a0c      	ldr	r2, [pc, #48]	; (80093b0 <TIM_Base_SetConfig+0x124>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d103      	bne.n	800938c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	691a      	ldr	r2, [r3, #16]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2201      	movs	r2, #1
 8009390:	615a      	str	r2, [r3, #20]
}
 8009392:	bf00      	nop
 8009394:	3714      	adds	r7, #20
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr
 800939e:	bf00      	nop
 80093a0:	40010000 	.word	0x40010000
 80093a4:	40000400 	.word	0x40000400
 80093a8:	40000800 	.word	0x40000800
 80093ac:	40000c00 	.word	0x40000c00
 80093b0:	40010400 	.word	0x40010400
 80093b4:	40014000 	.word	0x40014000
 80093b8:	40014400 	.word	0x40014400
 80093bc:	40014800 	.word	0x40014800
 80093c0:	40001800 	.word	0x40001800
 80093c4:	40001c00 	.word	0x40001c00
 80093c8:	40002000 	.word	0x40002000

080093cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b087      	sub	sp, #28
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6a1b      	ldr	r3, [r3, #32]
 80093da:	f023 0201 	bic.w	r2, r3, #1
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6a1b      	ldr	r3, [r3, #32]
 80093e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	699b      	ldr	r3, [r3, #24]
 80093f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f023 0303 	bic.w	r3, r3, #3
 8009402:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	68fa      	ldr	r2, [r7, #12]
 800940a:	4313      	orrs	r3, r2
 800940c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	f023 0302 	bic.w	r3, r3, #2
 8009414:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	697a      	ldr	r2, [r7, #20]
 800941c:	4313      	orrs	r3, r2
 800941e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4a20      	ldr	r2, [pc, #128]	; (80094a4 <TIM_OC1_SetConfig+0xd8>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d003      	beq.n	8009430 <TIM_OC1_SetConfig+0x64>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4a1f      	ldr	r2, [pc, #124]	; (80094a8 <TIM_OC1_SetConfig+0xdc>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d10c      	bne.n	800944a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	f023 0308 	bic.w	r3, r3, #8
 8009436:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	697a      	ldr	r2, [r7, #20]
 800943e:	4313      	orrs	r3, r2
 8009440:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	f023 0304 	bic.w	r3, r3, #4
 8009448:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4a15      	ldr	r2, [pc, #84]	; (80094a4 <TIM_OC1_SetConfig+0xd8>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d003      	beq.n	800945a <TIM_OC1_SetConfig+0x8e>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4a14      	ldr	r2, [pc, #80]	; (80094a8 <TIM_OC1_SetConfig+0xdc>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d111      	bne.n	800947e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009460:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009468:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	695b      	ldr	r3, [r3, #20]
 800946e:	693a      	ldr	r2, [r7, #16]
 8009470:	4313      	orrs	r3, r2
 8009472:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	699b      	ldr	r3, [r3, #24]
 8009478:	693a      	ldr	r2, [r7, #16]
 800947a:	4313      	orrs	r3, r2
 800947c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	693a      	ldr	r2, [r7, #16]
 8009482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	68fa      	ldr	r2, [r7, #12]
 8009488:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	685a      	ldr	r2, [r3, #4]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	697a      	ldr	r2, [r7, #20]
 8009496:	621a      	str	r2, [r3, #32]
}
 8009498:	bf00      	nop
 800949a:	371c      	adds	r7, #28
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr
 80094a4:	40010000 	.word	0x40010000
 80094a8:	40010400 	.word	0x40010400

080094ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b087      	sub	sp, #28
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6a1b      	ldr	r3, [r3, #32]
 80094ba:	f023 0210 	bic.w	r2, r3, #16
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6a1b      	ldr	r3, [r3, #32]
 80094c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	699b      	ldr	r3, [r3, #24]
 80094d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	021b      	lsls	r3, r3, #8
 80094ea:	68fa      	ldr	r2, [r7, #12]
 80094ec:	4313      	orrs	r3, r2
 80094ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	f023 0320 	bic.w	r3, r3, #32
 80094f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	011b      	lsls	r3, r3, #4
 80094fe:	697a      	ldr	r2, [r7, #20]
 8009500:	4313      	orrs	r3, r2
 8009502:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4a22      	ldr	r2, [pc, #136]	; (8009590 <TIM_OC2_SetConfig+0xe4>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d003      	beq.n	8009514 <TIM_OC2_SetConfig+0x68>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4a21      	ldr	r2, [pc, #132]	; (8009594 <TIM_OC2_SetConfig+0xe8>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d10d      	bne.n	8009530 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800951a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	011b      	lsls	r3, r3, #4
 8009522:	697a      	ldr	r2, [r7, #20]
 8009524:	4313      	orrs	r3, r2
 8009526:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800952e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4a17      	ldr	r2, [pc, #92]	; (8009590 <TIM_OC2_SetConfig+0xe4>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d003      	beq.n	8009540 <TIM_OC2_SetConfig+0x94>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a16      	ldr	r2, [pc, #88]	; (8009594 <TIM_OC2_SetConfig+0xe8>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d113      	bne.n	8009568 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009546:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800954e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	695b      	ldr	r3, [r3, #20]
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	693a      	ldr	r2, [r7, #16]
 8009558:	4313      	orrs	r3, r2
 800955a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	699b      	ldr	r3, [r3, #24]
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	693a      	ldr	r2, [r7, #16]
 8009564:	4313      	orrs	r3, r2
 8009566:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	693a      	ldr	r2, [r7, #16]
 800956c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	68fa      	ldr	r2, [r7, #12]
 8009572:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	685a      	ldr	r2, [r3, #4]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	697a      	ldr	r2, [r7, #20]
 8009580:	621a      	str	r2, [r3, #32]
}
 8009582:	bf00      	nop
 8009584:	371c      	adds	r7, #28
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr
 800958e:	bf00      	nop
 8009590:	40010000 	.word	0x40010000
 8009594:	40010400 	.word	0x40010400

08009598 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009598:	b480      	push	{r7}
 800959a:	b087      	sub	sp, #28
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6a1b      	ldr	r3, [r3, #32]
 80095a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6a1b      	ldr	r3, [r3, #32]
 80095b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	69db      	ldr	r3, [r3, #28]
 80095be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f023 0303 	bic.w	r3, r3, #3
 80095ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	68fa      	ldr	r2, [r7, #12]
 80095d6:	4313      	orrs	r3, r2
 80095d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80095e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	021b      	lsls	r3, r3, #8
 80095e8:	697a      	ldr	r2, [r7, #20]
 80095ea:	4313      	orrs	r3, r2
 80095ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	4a21      	ldr	r2, [pc, #132]	; (8009678 <TIM_OC3_SetConfig+0xe0>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d003      	beq.n	80095fe <TIM_OC3_SetConfig+0x66>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	4a20      	ldr	r2, [pc, #128]	; (800967c <TIM_OC3_SetConfig+0xe4>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d10d      	bne.n	800961a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009604:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	68db      	ldr	r3, [r3, #12]
 800960a:	021b      	lsls	r3, r3, #8
 800960c:	697a      	ldr	r2, [r7, #20]
 800960e:	4313      	orrs	r3, r2
 8009610:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009618:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	4a16      	ldr	r2, [pc, #88]	; (8009678 <TIM_OC3_SetConfig+0xe0>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d003      	beq.n	800962a <TIM_OC3_SetConfig+0x92>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	4a15      	ldr	r2, [pc, #84]	; (800967c <TIM_OC3_SetConfig+0xe4>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d113      	bne.n	8009652 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009630:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009638:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	695b      	ldr	r3, [r3, #20]
 800963e:	011b      	lsls	r3, r3, #4
 8009640:	693a      	ldr	r2, [r7, #16]
 8009642:	4313      	orrs	r3, r2
 8009644:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	699b      	ldr	r3, [r3, #24]
 800964a:	011b      	lsls	r3, r3, #4
 800964c:	693a      	ldr	r2, [r7, #16]
 800964e:	4313      	orrs	r3, r2
 8009650:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	693a      	ldr	r2, [r7, #16]
 8009656:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	68fa      	ldr	r2, [r7, #12]
 800965c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	685a      	ldr	r2, [r3, #4]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	697a      	ldr	r2, [r7, #20]
 800966a:	621a      	str	r2, [r3, #32]
}
 800966c:	bf00      	nop
 800966e:	371c      	adds	r7, #28
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr
 8009678:	40010000 	.word	0x40010000
 800967c:	40010400 	.word	0x40010400

08009680 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009680:	b480      	push	{r7}
 8009682:	b087      	sub	sp, #28
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6a1b      	ldr	r3, [r3, #32]
 800968e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6a1b      	ldr	r3, [r3, #32]
 800969a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	69db      	ldr	r3, [r3, #28]
 80096a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	021b      	lsls	r3, r3, #8
 80096be:	68fa      	ldr	r2, [r7, #12]
 80096c0:	4313      	orrs	r3, r2
 80096c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80096ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	031b      	lsls	r3, r3, #12
 80096d2:	693a      	ldr	r2, [r7, #16]
 80096d4:	4313      	orrs	r3, r2
 80096d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	4a12      	ldr	r2, [pc, #72]	; (8009724 <TIM_OC4_SetConfig+0xa4>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d003      	beq.n	80096e8 <TIM_OC4_SetConfig+0x68>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	4a11      	ldr	r2, [pc, #68]	; (8009728 <TIM_OC4_SetConfig+0xa8>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d109      	bne.n	80096fc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	695b      	ldr	r3, [r3, #20]
 80096f4:	019b      	lsls	r3, r3, #6
 80096f6:	697a      	ldr	r2, [r7, #20]
 80096f8:	4313      	orrs	r3, r2
 80096fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	697a      	ldr	r2, [r7, #20]
 8009700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	68fa      	ldr	r2, [r7, #12]
 8009706:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	685a      	ldr	r2, [r3, #4]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	693a      	ldr	r2, [r7, #16]
 8009714:	621a      	str	r2, [r3, #32]
}
 8009716:	bf00      	nop
 8009718:	371c      	adds	r7, #28
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr
 8009722:	bf00      	nop
 8009724:	40010000 	.word	0x40010000
 8009728:	40010400 	.word	0x40010400

0800972c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800972c:	b480      	push	{r7}
 800972e:	b085      	sub	sp, #20
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800973c:	2b01      	cmp	r3, #1
 800973e:	d101      	bne.n	8009744 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009740:	2302      	movs	r3, #2
 8009742:	e05a      	b.n	80097fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2201      	movs	r2, #1
 8009748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2202      	movs	r2, #2
 8009750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800976a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	68fa      	ldr	r2, [r7, #12]
 8009772:	4313      	orrs	r3, r2
 8009774:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	68fa      	ldr	r2, [r7, #12]
 800977c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a21      	ldr	r2, [pc, #132]	; (8009808 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d022      	beq.n	80097ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009790:	d01d      	beq.n	80097ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a1d      	ldr	r2, [pc, #116]	; (800980c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d018      	beq.n	80097ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a1b      	ldr	r2, [pc, #108]	; (8009810 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d013      	beq.n	80097ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4a1a      	ldr	r2, [pc, #104]	; (8009814 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d00e      	beq.n	80097ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a18      	ldr	r2, [pc, #96]	; (8009818 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d009      	beq.n	80097ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a17      	ldr	r2, [pc, #92]	; (800981c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d004      	beq.n	80097ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a15      	ldr	r2, [pc, #84]	; (8009820 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d10c      	bne.n	80097e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	68ba      	ldr	r2, [r7, #8]
 80097dc:	4313      	orrs	r3, r2
 80097de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	68ba      	ldr	r2, [r7, #8]
 80097e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3714      	adds	r7, #20
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr
 8009806:	bf00      	nop
 8009808:	40010000 	.word	0x40010000
 800980c:	40000400 	.word	0x40000400
 8009810:	40000800 	.word	0x40000800
 8009814:	40000c00 	.word	0x40000c00
 8009818:	40010400 	.word	0x40010400
 800981c:	40014000 	.word	0x40014000
 8009820:	40001800 	.word	0x40001800

08009824 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800982c:	bf00      	nop
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009840:	bf00      	nop
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b082      	sub	sp, #8
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d101      	bne.n	800985e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800985a:	2301      	movs	r3, #1
 800985c:	e03f      	b.n	80098de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009864:	b2db      	uxtb	r3, r3
 8009866:	2b00      	cmp	r3, #0
 8009868:	d106      	bne.n	8009878 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f7f9 fa0e 	bl	8002c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2224      	movs	r2, #36	; 0x24
 800987c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	68da      	ldr	r2, [r3, #12]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800988e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 f9cb 	bl	8009c2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	691a      	ldr	r2, [r3, #16]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80098a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	695a      	ldr	r2, [r3, #20]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80098b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	68da      	ldr	r2, [r3, #12]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80098c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2220      	movs	r2, #32
 80098d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2220      	movs	r2, #32
 80098d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80098dc:	2300      	movs	r3, #0
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3708      	adds	r7, #8
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b08a      	sub	sp, #40	; 0x28
 80098ea:	af02      	add	r7, sp, #8
 80098ec:	60f8      	str	r0, [r7, #12]
 80098ee:	60b9      	str	r1, [r7, #8]
 80098f0:	603b      	str	r3, [r7, #0]
 80098f2:	4613      	mov	r3, r2
 80098f4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80098f6:	2300      	movs	r3, #0
 80098f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009900:	b2db      	uxtb	r3, r3
 8009902:	2b20      	cmp	r3, #32
 8009904:	d17c      	bne.n	8009a00 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d002      	beq.n	8009912 <HAL_UART_Transmit+0x2c>
 800990c:	88fb      	ldrh	r3, [r7, #6]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d101      	bne.n	8009916 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009912:	2301      	movs	r3, #1
 8009914:	e075      	b.n	8009a02 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800991c:	2b01      	cmp	r3, #1
 800991e:	d101      	bne.n	8009924 <HAL_UART_Transmit+0x3e>
 8009920:	2302      	movs	r3, #2
 8009922:	e06e      	b.n	8009a02 <HAL_UART_Transmit+0x11c>
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2201      	movs	r2, #1
 8009928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2200      	movs	r2, #0
 8009930:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2221      	movs	r2, #33	; 0x21
 8009936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800993a:	f7fb f9b1 	bl	8004ca0 <HAL_GetTick>
 800993e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	88fa      	ldrh	r2, [r7, #6]
 8009944:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	88fa      	ldrh	r2, [r7, #6]
 800994a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	689b      	ldr	r3, [r3, #8]
 8009950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009954:	d108      	bne.n	8009968 <HAL_UART_Transmit+0x82>
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	691b      	ldr	r3, [r3, #16]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d104      	bne.n	8009968 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800995e:	2300      	movs	r3, #0
 8009960:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	61bb      	str	r3, [r7, #24]
 8009966:	e003      	b.n	8009970 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800996c:	2300      	movs	r3, #0
 800996e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2200      	movs	r2, #0
 8009974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009978:	e02a      	b.n	80099d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	9300      	str	r3, [sp, #0]
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	2200      	movs	r2, #0
 8009982:	2180      	movs	r1, #128	; 0x80
 8009984:	68f8      	ldr	r0, [r7, #12]
 8009986:	f000 f8e2 	bl	8009b4e <UART_WaitOnFlagUntilTimeout>
 800998a:	4603      	mov	r3, r0
 800998c:	2b00      	cmp	r3, #0
 800998e:	d001      	beq.n	8009994 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009990:	2303      	movs	r3, #3
 8009992:	e036      	b.n	8009a02 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009994:	69fb      	ldr	r3, [r7, #28]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d10b      	bne.n	80099b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	881b      	ldrh	r3, [r3, #0]
 800999e:	461a      	mov	r2, r3
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	3302      	adds	r3, #2
 80099ae:	61bb      	str	r3, [r7, #24]
 80099b0:	e007      	b.n	80099c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80099b2:	69fb      	ldr	r3, [r7, #28]
 80099b4:	781a      	ldrb	r2, [r3, #0]
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	3301      	adds	r3, #1
 80099c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	3b01      	subs	r3, #1
 80099ca:	b29a      	uxth	r2, r3
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d1cf      	bne.n	800997a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	9300      	str	r3, [sp, #0]
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	2200      	movs	r2, #0
 80099e2:	2140      	movs	r1, #64	; 0x40
 80099e4:	68f8      	ldr	r0, [r7, #12]
 80099e6:	f000 f8b2 	bl	8009b4e <UART_WaitOnFlagUntilTimeout>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d001      	beq.n	80099f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80099f0:	2303      	movs	r3, #3
 80099f2:	e006      	b.n	8009a02 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2220      	movs	r2, #32
 80099f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80099fc:	2300      	movs	r3, #0
 80099fe:	e000      	b.n	8009a02 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009a00:	2302      	movs	r3, #2
  }
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3720      	adds	r7, #32
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b08a      	sub	sp, #40	; 0x28
 8009a0e:	af02      	add	r7, sp, #8
 8009a10:	60f8      	str	r0, [r7, #12]
 8009a12:	60b9      	str	r1, [r7, #8]
 8009a14:	603b      	str	r3, [r7, #0]
 8009a16:	4613      	mov	r3, r2
 8009a18:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	2b20      	cmp	r3, #32
 8009a28:	f040 808c 	bne.w	8009b44 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d002      	beq.n	8009a38 <HAL_UART_Receive+0x2e>
 8009a32:	88fb      	ldrh	r3, [r7, #6]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d101      	bne.n	8009a3c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	e084      	b.n	8009b46 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d101      	bne.n	8009a4a <HAL_UART_Receive+0x40>
 8009a46:	2302      	movs	r3, #2
 8009a48:	e07d      	b.n	8009b46 <HAL_UART_Receive+0x13c>
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2200      	movs	r2, #0
 8009a56:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2222      	movs	r2, #34	; 0x22
 8009a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2200      	movs	r2, #0
 8009a64:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009a66:	f7fb f91b 	bl	8004ca0 <HAL_GetTick>
 8009a6a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	88fa      	ldrh	r2, [r7, #6]
 8009a70:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	88fa      	ldrh	r2, [r7, #6]
 8009a76:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a80:	d108      	bne.n	8009a94 <HAL_UART_Receive+0x8a>
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	691b      	ldr	r3, [r3, #16]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d104      	bne.n	8009a94 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	61bb      	str	r3, [r7, #24]
 8009a92:	e003      	b.n	8009a9c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8009aa4:	e043      	b.n	8009b2e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	9300      	str	r3, [sp, #0]
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	2200      	movs	r2, #0
 8009aae:	2120      	movs	r1, #32
 8009ab0:	68f8      	ldr	r0, [r7, #12]
 8009ab2:	f000 f84c 	bl	8009b4e <UART_WaitOnFlagUntilTimeout>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d001      	beq.n	8009ac0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8009abc:	2303      	movs	r3, #3
 8009abe:	e042      	b.n	8009b46 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8009ac0:	69fb      	ldr	r3, [r7, #28]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d10c      	bne.n	8009ae0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ad2:	b29a      	uxth	r2, r3
 8009ad4:	69bb      	ldr	r3, [r7, #24]
 8009ad6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009ad8:	69bb      	ldr	r3, [r7, #24]
 8009ada:	3302      	adds	r3, #2
 8009adc:	61bb      	str	r3, [r7, #24]
 8009ade:	e01f      	b.n	8009b20 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ae8:	d007      	beq.n	8009afa <HAL_UART_Receive+0xf0>
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d10a      	bne.n	8009b08 <HAL_UART_Receive+0xfe>
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	691b      	ldr	r3, [r3, #16]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d106      	bne.n	8009b08 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	b2da      	uxtb	r2, r3
 8009b02:	69fb      	ldr	r3, [r7, #28]
 8009b04:	701a      	strb	r2, [r3, #0]
 8009b06:	e008      	b.n	8009b1a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	685b      	ldr	r3, [r3, #4]
 8009b0e:	b2db      	uxtb	r3, r3
 8009b10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b14:	b2da      	uxtb	r2, r3
 8009b16:	69fb      	ldr	r3, [r7, #28]
 8009b18:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8009b1a:	69fb      	ldr	r3, [r7, #28]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	3b01      	subs	r3, #1
 8009b28:	b29a      	uxth	r2, r3
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d1b6      	bne.n	8009aa6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2220      	movs	r2, #32
 8009b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8009b40:	2300      	movs	r3, #0
 8009b42:	e000      	b.n	8009b46 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8009b44:	2302      	movs	r3, #2
  }
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3720      	adds	r7, #32
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}

08009b4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009b4e:	b580      	push	{r7, lr}
 8009b50:	b090      	sub	sp, #64	; 0x40
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	60f8      	str	r0, [r7, #12]
 8009b56:	60b9      	str	r1, [r7, #8]
 8009b58:	603b      	str	r3, [r7, #0]
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b5e:	e050      	b.n	8009c02 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b66:	d04c      	beq.n	8009c02 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009b68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d007      	beq.n	8009b7e <UART_WaitOnFlagUntilTimeout+0x30>
 8009b6e:	f7fb f897 	bl	8004ca0 <HAL_GetTick>
 8009b72:	4602      	mov	r2, r0
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	1ad3      	subs	r3, r2, r3
 8009b78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d241      	bcs.n	8009c02 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	330c      	adds	r3, #12
 8009b84:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b88:	e853 3f00 	ldrex	r3, [r3]
 8009b8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009b94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	330c      	adds	r3, #12
 8009b9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009b9e:	637a      	str	r2, [r7, #52]	; 0x34
 8009ba0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009ba4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ba6:	e841 2300 	strex	r3, r2, [r1]
 8009baa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d1e5      	bne.n	8009b7e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	3314      	adds	r3, #20
 8009bb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	e853 3f00 	ldrex	r3, [r3]
 8009bc0:	613b      	str	r3, [r7, #16]
   return(result);
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	f023 0301 	bic.w	r3, r3, #1
 8009bc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	3314      	adds	r3, #20
 8009bd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009bd2:	623a      	str	r2, [r7, #32]
 8009bd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd6:	69f9      	ldr	r1, [r7, #28]
 8009bd8:	6a3a      	ldr	r2, [r7, #32]
 8009bda:	e841 2300 	strex	r3, r2, [r1]
 8009bde:	61bb      	str	r3, [r7, #24]
   return(result);
 8009be0:	69bb      	ldr	r3, [r7, #24]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d1e5      	bne.n	8009bb2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2220      	movs	r2, #32
 8009bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2220      	movs	r2, #32
 8009bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009bfe:	2303      	movs	r3, #3
 8009c00:	e00f      	b.n	8009c22 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	4013      	ands	r3, r2
 8009c0c:	68ba      	ldr	r2, [r7, #8]
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	bf0c      	ite	eq
 8009c12:	2301      	moveq	r3, #1
 8009c14:	2300      	movne	r3, #0
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	461a      	mov	r2, r3
 8009c1a:	79fb      	ldrb	r3, [r7, #7]
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d09f      	beq.n	8009b60 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009c20:	2300      	movs	r3, #0
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3740      	adds	r7, #64	; 0x40
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
	...

08009c2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c30:	b09f      	sub	sp, #124	; 0x7c
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	691b      	ldr	r3, [r3, #16]
 8009c3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c42:	68d9      	ldr	r1, [r3, #12]
 8009c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c46:	681a      	ldr	r2, [r3, #0]
 8009c48:	ea40 0301 	orr.w	r3, r0, r1
 8009c4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c50:	689a      	ldr	r2, [r3, #8]
 8009c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c54:	691b      	ldr	r3, [r3, #16]
 8009c56:	431a      	orrs	r2, r3
 8009c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c5a:	695b      	ldr	r3, [r3, #20]
 8009c5c:	431a      	orrs	r2, r3
 8009c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c60:	69db      	ldr	r3, [r3, #28]
 8009c62:	4313      	orrs	r3, r2
 8009c64:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	68db      	ldr	r3, [r3, #12]
 8009c6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009c70:	f021 010c 	bic.w	r1, r1, #12
 8009c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c7a:	430b      	orrs	r3, r1
 8009c7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	695b      	ldr	r3, [r3, #20]
 8009c84:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c8a:	6999      	ldr	r1, [r3, #24]
 8009c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	ea40 0301 	orr.w	r3, r0, r1
 8009c94:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	4bc5      	ldr	r3, [pc, #788]	; (8009fb0 <UART_SetConfig+0x384>)
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d004      	beq.n	8009caa <UART_SetConfig+0x7e>
 8009ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	4bc3      	ldr	r3, [pc, #780]	; (8009fb4 <UART_SetConfig+0x388>)
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d103      	bne.n	8009cb2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009caa:	f7fd fbef 	bl	800748c <HAL_RCC_GetPCLK2Freq>
 8009cae:	6778      	str	r0, [r7, #116]	; 0x74
 8009cb0:	e002      	b.n	8009cb8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009cb2:	f7fd fbd7 	bl	8007464 <HAL_RCC_GetPCLK1Freq>
 8009cb6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cba:	69db      	ldr	r3, [r3, #28]
 8009cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cc0:	f040 80b6 	bne.w	8009e30 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009cc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009cc6:	461c      	mov	r4, r3
 8009cc8:	f04f 0500 	mov.w	r5, #0
 8009ccc:	4622      	mov	r2, r4
 8009cce:	462b      	mov	r3, r5
 8009cd0:	1891      	adds	r1, r2, r2
 8009cd2:	6439      	str	r1, [r7, #64]	; 0x40
 8009cd4:	415b      	adcs	r3, r3
 8009cd6:	647b      	str	r3, [r7, #68]	; 0x44
 8009cd8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009cdc:	1912      	adds	r2, r2, r4
 8009cde:	eb45 0303 	adc.w	r3, r5, r3
 8009ce2:	f04f 0000 	mov.w	r0, #0
 8009ce6:	f04f 0100 	mov.w	r1, #0
 8009cea:	00d9      	lsls	r1, r3, #3
 8009cec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009cf0:	00d0      	lsls	r0, r2, #3
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	1911      	adds	r1, r2, r4
 8009cf8:	6639      	str	r1, [r7, #96]	; 0x60
 8009cfa:	416b      	adcs	r3, r5
 8009cfc:	667b      	str	r3, [r7, #100]	; 0x64
 8009cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	461a      	mov	r2, r3
 8009d04:	f04f 0300 	mov.w	r3, #0
 8009d08:	1891      	adds	r1, r2, r2
 8009d0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8009d0c:	415b      	adcs	r3, r3
 8009d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009d14:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009d18:	f7f6 ffc6 	bl	8000ca8 <__aeabi_uldivmod>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	460b      	mov	r3, r1
 8009d20:	4ba5      	ldr	r3, [pc, #660]	; (8009fb8 <UART_SetConfig+0x38c>)
 8009d22:	fba3 2302 	umull	r2, r3, r3, r2
 8009d26:	095b      	lsrs	r3, r3, #5
 8009d28:	011e      	lsls	r6, r3, #4
 8009d2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d2c:	461c      	mov	r4, r3
 8009d2e:	f04f 0500 	mov.w	r5, #0
 8009d32:	4622      	mov	r2, r4
 8009d34:	462b      	mov	r3, r5
 8009d36:	1891      	adds	r1, r2, r2
 8009d38:	6339      	str	r1, [r7, #48]	; 0x30
 8009d3a:	415b      	adcs	r3, r3
 8009d3c:	637b      	str	r3, [r7, #52]	; 0x34
 8009d3e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009d42:	1912      	adds	r2, r2, r4
 8009d44:	eb45 0303 	adc.w	r3, r5, r3
 8009d48:	f04f 0000 	mov.w	r0, #0
 8009d4c:	f04f 0100 	mov.w	r1, #0
 8009d50:	00d9      	lsls	r1, r3, #3
 8009d52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009d56:	00d0      	lsls	r0, r2, #3
 8009d58:	4602      	mov	r2, r0
 8009d5a:	460b      	mov	r3, r1
 8009d5c:	1911      	adds	r1, r2, r4
 8009d5e:	65b9      	str	r1, [r7, #88]	; 0x58
 8009d60:	416b      	adcs	r3, r5
 8009d62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	461a      	mov	r2, r3
 8009d6a:	f04f 0300 	mov.w	r3, #0
 8009d6e:	1891      	adds	r1, r2, r2
 8009d70:	62b9      	str	r1, [r7, #40]	; 0x28
 8009d72:	415b      	adcs	r3, r3
 8009d74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d7a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009d7e:	f7f6 ff93 	bl	8000ca8 <__aeabi_uldivmod>
 8009d82:	4602      	mov	r2, r0
 8009d84:	460b      	mov	r3, r1
 8009d86:	4b8c      	ldr	r3, [pc, #560]	; (8009fb8 <UART_SetConfig+0x38c>)
 8009d88:	fba3 1302 	umull	r1, r3, r3, r2
 8009d8c:	095b      	lsrs	r3, r3, #5
 8009d8e:	2164      	movs	r1, #100	; 0x64
 8009d90:	fb01 f303 	mul.w	r3, r1, r3
 8009d94:	1ad3      	subs	r3, r2, r3
 8009d96:	00db      	lsls	r3, r3, #3
 8009d98:	3332      	adds	r3, #50	; 0x32
 8009d9a:	4a87      	ldr	r2, [pc, #540]	; (8009fb8 <UART_SetConfig+0x38c>)
 8009d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8009da0:	095b      	lsrs	r3, r3, #5
 8009da2:	005b      	lsls	r3, r3, #1
 8009da4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009da8:	441e      	add	r6, r3
 8009daa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009dac:	4618      	mov	r0, r3
 8009dae:	f04f 0100 	mov.w	r1, #0
 8009db2:	4602      	mov	r2, r0
 8009db4:	460b      	mov	r3, r1
 8009db6:	1894      	adds	r4, r2, r2
 8009db8:	623c      	str	r4, [r7, #32]
 8009dba:	415b      	adcs	r3, r3
 8009dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8009dbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009dc2:	1812      	adds	r2, r2, r0
 8009dc4:	eb41 0303 	adc.w	r3, r1, r3
 8009dc8:	f04f 0400 	mov.w	r4, #0
 8009dcc:	f04f 0500 	mov.w	r5, #0
 8009dd0:	00dd      	lsls	r5, r3, #3
 8009dd2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009dd6:	00d4      	lsls	r4, r2, #3
 8009dd8:	4622      	mov	r2, r4
 8009dda:	462b      	mov	r3, r5
 8009ddc:	1814      	adds	r4, r2, r0
 8009dde:	653c      	str	r4, [r7, #80]	; 0x50
 8009de0:	414b      	adcs	r3, r1
 8009de2:	657b      	str	r3, [r7, #84]	; 0x54
 8009de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	461a      	mov	r2, r3
 8009dea:	f04f 0300 	mov.w	r3, #0
 8009dee:	1891      	adds	r1, r2, r2
 8009df0:	61b9      	str	r1, [r7, #24]
 8009df2:	415b      	adcs	r3, r3
 8009df4:	61fb      	str	r3, [r7, #28]
 8009df6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009dfa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009dfe:	f7f6 ff53 	bl	8000ca8 <__aeabi_uldivmod>
 8009e02:	4602      	mov	r2, r0
 8009e04:	460b      	mov	r3, r1
 8009e06:	4b6c      	ldr	r3, [pc, #432]	; (8009fb8 <UART_SetConfig+0x38c>)
 8009e08:	fba3 1302 	umull	r1, r3, r3, r2
 8009e0c:	095b      	lsrs	r3, r3, #5
 8009e0e:	2164      	movs	r1, #100	; 0x64
 8009e10:	fb01 f303 	mul.w	r3, r1, r3
 8009e14:	1ad3      	subs	r3, r2, r3
 8009e16:	00db      	lsls	r3, r3, #3
 8009e18:	3332      	adds	r3, #50	; 0x32
 8009e1a:	4a67      	ldr	r2, [pc, #412]	; (8009fb8 <UART_SetConfig+0x38c>)
 8009e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8009e20:	095b      	lsrs	r3, r3, #5
 8009e22:	f003 0207 	and.w	r2, r3, #7
 8009e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4432      	add	r2, r6
 8009e2c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009e2e:	e0b9      	b.n	8009fa4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009e30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e32:	461c      	mov	r4, r3
 8009e34:	f04f 0500 	mov.w	r5, #0
 8009e38:	4622      	mov	r2, r4
 8009e3a:	462b      	mov	r3, r5
 8009e3c:	1891      	adds	r1, r2, r2
 8009e3e:	6139      	str	r1, [r7, #16]
 8009e40:	415b      	adcs	r3, r3
 8009e42:	617b      	str	r3, [r7, #20]
 8009e44:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009e48:	1912      	adds	r2, r2, r4
 8009e4a:	eb45 0303 	adc.w	r3, r5, r3
 8009e4e:	f04f 0000 	mov.w	r0, #0
 8009e52:	f04f 0100 	mov.w	r1, #0
 8009e56:	00d9      	lsls	r1, r3, #3
 8009e58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009e5c:	00d0      	lsls	r0, r2, #3
 8009e5e:	4602      	mov	r2, r0
 8009e60:	460b      	mov	r3, r1
 8009e62:	eb12 0804 	adds.w	r8, r2, r4
 8009e66:	eb43 0905 	adc.w	r9, r3, r5
 8009e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f04f 0100 	mov.w	r1, #0
 8009e74:	f04f 0200 	mov.w	r2, #0
 8009e78:	f04f 0300 	mov.w	r3, #0
 8009e7c:	008b      	lsls	r3, r1, #2
 8009e7e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009e82:	0082      	lsls	r2, r0, #2
 8009e84:	4640      	mov	r0, r8
 8009e86:	4649      	mov	r1, r9
 8009e88:	f7f6 ff0e 	bl	8000ca8 <__aeabi_uldivmod>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	460b      	mov	r3, r1
 8009e90:	4b49      	ldr	r3, [pc, #292]	; (8009fb8 <UART_SetConfig+0x38c>)
 8009e92:	fba3 2302 	umull	r2, r3, r3, r2
 8009e96:	095b      	lsrs	r3, r3, #5
 8009e98:	011e      	lsls	r6, r3, #4
 8009e9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f04f 0100 	mov.w	r1, #0
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	460b      	mov	r3, r1
 8009ea6:	1894      	adds	r4, r2, r2
 8009ea8:	60bc      	str	r4, [r7, #8]
 8009eaa:	415b      	adcs	r3, r3
 8009eac:	60fb      	str	r3, [r7, #12]
 8009eae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009eb2:	1812      	adds	r2, r2, r0
 8009eb4:	eb41 0303 	adc.w	r3, r1, r3
 8009eb8:	f04f 0400 	mov.w	r4, #0
 8009ebc:	f04f 0500 	mov.w	r5, #0
 8009ec0:	00dd      	lsls	r5, r3, #3
 8009ec2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009ec6:	00d4      	lsls	r4, r2, #3
 8009ec8:	4622      	mov	r2, r4
 8009eca:	462b      	mov	r3, r5
 8009ecc:	1814      	adds	r4, r2, r0
 8009ece:	64bc      	str	r4, [r7, #72]	; 0x48
 8009ed0:	414b      	adcs	r3, r1
 8009ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f04f 0100 	mov.w	r1, #0
 8009ede:	f04f 0200 	mov.w	r2, #0
 8009ee2:	f04f 0300 	mov.w	r3, #0
 8009ee6:	008b      	lsls	r3, r1, #2
 8009ee8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009eec:	0082      	lsls	r2, r0, #2
 8009eee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009ef2:	f7f6 fed9 	bl	8000ca8 <__aeabi_uldivmod>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	460b      	mov	r3, r1
 8009efa:	4b2f      	ldr	r3, [pc, #188]	; (8009fb8 <UART_SetConfig+0x38c>)
 8009efc:	fba3 1302 	umull	r1, r3, r3, r2
 8009f00:	095b      	lsrs	r3, r3, #5
 8009f02:	2164      	movs	r1, #100	; 0x64
 8009f04:	fb01 f303 	mul.w	r3, r1, r3
 8009f08:	1ad3      	subs	r3, r2, r3
 8009f0a:	011b      	lsls	r3, r3, #4
 8009f0c:	3332      	adds	r3, #50	; 0x32
 8009f0e:	4a2a      	ldr	r2, [pc, #168]	; (8009fb8 <UART_SetConfig+0x38c>)
 8009f10:	fba2 2303 	umull	r2, r3, r2, r3
 8009f14:	095b      	lsrs	r3, r3, #5
 8009f16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f1a:	441e      	add	r6, r3
 8009f1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f04f 0100 	mov.w	r1, #0
 8009f24:	4602      	mov	r2, r0
 8009f26:	460b      	mov	r3, r1
 8009f28:	1894      	adds	r4, r2, r2
 8009f2a:	603c      	str	r4, [r7, #0]
 8009f2c:	415b      	adcs	r3, r3
 8009f2e:	607b      	str	r3, [r7, #4]
 8009f30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f34:	1812      	adds	r2, r2, r0
 8009f36:	eb41 0303 	adc.w	r3, r1, r3
 8009f3a:	f04f 0400 	mov.w	r4, #0
 8009f3e:	f04f 0500 	mov.w	r5, #0
 8009f42:	00dd      	lsls	r5, r3, #3
 8009f44:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009f48:	00d4      	lsls	r4, r2, #3
 8009f4a:	4622      	mov	r2, r4
 8009f4c:	462b      	mov	r3, r5
 8009f4e:	eb12 0a00 	adds.w	sl, r2, r0
 8009f52:	eb43 0b01 	adc.w	fp, r3, r1
 8009f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f04f 0100 	mov.w	r1, #0
 8009f60:	f04f 0200 	mov.w	r2, #0
 8009f64:	f04f 0300 	mov.w	r3, #0
 8009f68:	008b      	lsls	r3, r1, #2
 8009f6a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009f6e:	0082      	lsls	r2, r0, #2
 8009f70:	4650      	mov	r0, sl
 8009f72:	4659      	mov	r1, fp
 8009f74:	f7f6 fe98 	bl	8000ca8 <__aeabi_uldivmod>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	460b      	mov	r3, r1
 8009f7c:	4b0e      	ldr	r3, [pc, #56]	; (8009fb8 <UART_SetConfig+0x38c>)
 8009f7e:	fba3 1302 	umull	r1, r3, r3, r2
 8009f82:	095b      	lsrs	r3, r3, #5
 8009f84:	2164      	movs	r1, #100	; 0x64
 8009f86:	fb01 f303 	mul.w	r3, r1, r3
 8009f8a:	1ad3      	subs	r3, r2, r3
 8009f8c:	011b      	lsls	r3, r3, #4
 8009f8e:	3332      	adds	r3, #50	; 0x32
 8009f90:	4a09      	ldr	r2, [pc, #36]	; (8009fb8 <UART_SetConfig+0x38c>)
 8009f92:	fba2 2303 	umull	r2, r3, r2, r3
 8009f96:	095b      	lsrs	r3, r3, #5
 8009f98:	f003 020f 	and.w	r2, r3, #15
 8009f9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4432      	add	r2, r6
 8009fa2:	609a      	str	r2, [r3, #8]
}
 8009fa4:	bf00      	nop
 8009fa6:	377c      	adds	r7, #124	; 0x7c
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fae:	bf00      	nop
 8009fb0:	40011000 	.word	0x40011000
 8009fb4:	40011400 	.word	0x40011400
 8009fb8:	51eb851f 	.word	0x51eb851f

08009fbc <sx126x_hal_write>:
 * @returns Operation status
 */


sx126x_hal_status_t sx126x_hal_write( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                      const uint8_t* data, const uint16_t data_length ){
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b086      	sub	sp, #24
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	60b9      	str	r1, [r7, #8]
 8009fc6:	603b      	str	r3, [r7, #0]
 8009fc8:	4613      	mov	r3, r2
 8009fca:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO,BUSY) == GPIO_PIN_SET);
 8009fcc:	bf00      	nop
 8009fce:	4b18      	ldr	r3, [pc, #96]	; (800a030 <sx126x_hal_write+0x74>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a18      	ldr	r2, [pc, #96]	; (800a034 <sx126x_hal_write+0x78>)
 8009fd4:	8812      	ldrh	r2, [r2, #0]
 8009fd6:	4611      	mov	r1, r2
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f7fb fbc3 	bl	8005764 <HAL_GPIO_ReadPin>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d0f4      	beq.n	8009fce <sx126x_hal_write+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 8009fe4:	4b14      	ldr	r3, [pc, #80]	; (800a038 <sx126x_hal_write+0x7c>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4a14      	ldr	r2, [pc, #80]	; (800a03c <sx126x_hal_write+0x80>)
 8009fea:	8811      	ldrh	r1, [r2, #0]
 8009fec:	2200      	movs	r2, #0
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7fb fbd0 	bl	8005794 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, command_length, 100);
 8009ff4:	88fa      	ldrh	r2, [r7, #6]
 8009ff6:	2364      	movs	r3, #100	; 0x64
 8009ff8:	68b9      	ldr	r1, [r7, #8]
 8009ffa:	68f8      	ldr	r0, [r7, #12]
 8009ffc:	f7fe f91b 	bl	8008236 <HAL_SPI_Transmit>
 800a000:	4603      	mov	r3, r0
 800a002:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_Transmit(hspi, data, data_length, 100);
 800a004:	8c3a      	ldrh	r2, [r7, #32]
 800a006:	2364      	movs	r3, #100	; 0x64
 800a008:	6839      	ldr	r1, [r7, #0]
 800a00a:	68f8      	ldr	r0, [r7, #12]
 800a00c:	f7fe f913 	bl	8008236 <HAL_SPI_Transmit>
 800a010:	4603      	mov	r3, r0
 800a012:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 800a014:	4b08      	ldr	r3, [pc, #32]	; (800a038 <sx126x_hal_write+0x7c>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4a08      	ldr	r2, [pc, #32]	; (800a03c <sx126x_hal_write+0x80>)
 800a01a:	8811      	ldrh	r1, [r2, #0]
 800a01c:	2201      	movs	r2, #1
 800a01e:	4618      	mov	r0, r3
 800a020:	f7fb fbb8 	bl	8005794 <HAL_GPIO_WritePin>
    return status;
 800a024:	7dfb      	ldrb	r3, [r7, #23]
}
 800a026:	4618      	mov	r0, r3
 800a028:	3718      	adds	r7, #24
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	bf00      	nop
 800a030:	200004ac 	.word	0x200004ac
 800a034:	200004a8 	.word	0x200004a8
 800a038:	2000049c 	.word	0x2000049c
 800a03c:	20000498 	.word	0x20000498

0800a040 <sx126x_hal_read>:
 * @param [in] data_length      Buffer size to be received
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_read( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                     uint8_t* data, const uint8_t offset ){
 800a040:	b580      	push	{r7, lr}
 800a042:	b088      	sub	sp, #32
 800a044:	af02      	add	r7, sp, #8
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	603b      	str	r3, [r7, #0]
 800a04c:	4613      	mov	r3, r2
 800a04e:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO, BUSY) == GPIO_PIN_SET);
 800a050:	bf00      	nop
 800a052:	4b1e      	ldr	r3, [pc, #120]	; (800a0cc <sx126x_hal_read+0x8c>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4a1e      	ldr	r2, [pc, #120]	; (800a0d0 <sx126x_hal_read+0x90>)
 800a058:	8812      	ldrh	r2, [r2, #0]
 800a05a:	4611      	mov	r1, r2
 800a05c:	4618      	mov	r0, r3
 800a05e:	f7fb fb81 	bl	8005764 <HAL_GPIO_ReadPin>
 800a062:	4603      	mov	r3, r0
 800a064:	2b01      	cmp	r3, #1
 800a066:	d0f4      	beq.n	800a052 <sx126x_hal_read+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 800a068:	4b1a      	ldr	r3, [pc, #104]	; (800a0d4 <sx126x_hal_read+0x94>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a1a      	ldr	r2, [pc, #104]	; (800a0d8 <sx126x_hal_read+0x98>)
 800a06e:	8811      	ldrh	r1, [r2, #0]
 800a070:	2200      	movs	r2, #0
 800a072:	4618      	mov	r0, r3
 800a074:	f7fb fb8e 	bl	8005794 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, offset, 100);
 800a078:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a07c:	b29a      	uxth	r2, r3
 800a07e:	2364      	movs	r3, #100	; 0x64
 800a080:	68b9      	ldr	r1, [r7, #8]
 800a082:	68f8      	ldr	r0, [r7, #12]
 800a084:	f7fe f8d7 	bl	8008236 <HAL_SPI_Transmit>
 800a088:	4603      	mov	r3, r0
 800a08a:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_TransmitReceive(hspi, command+offset, data, command_length-offset, 100);
 800a08c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a090:	68ba      	ldr	r2, [r7, #8]
 800a092:	18d1      	adds	r1, r2, r3
 800a094:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a098:	b29b      	uxth	r3, r3
 800a09a:	88fa      	ldrh	r2, [r7, #6]
 800a09c:	1ad3      	subs	r3, r2, r3
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	2264      	movs	r2, #100	; 0x64
 800a0a2:	9200      	str	r2, [sp, #0]
 800a0a4:	683a      	ldr	r2, [r7, #0]
 800a0a6:	68f8      	ldr	r0, [r7, #12]
 800a0a8:	f7fe fb12 	bl	80086d0 <HAL_SPI_TransmitReceive>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 800a0b0:	4b08      	ldr	r3, [pc, #32]	; (800a0d4 <sx126x_hal_read+0x94>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4a08      	ldr	r2, [pc, #32]	; (800a0d8 <sx126x_hal_read+0x98>)
 800a0b6:	8811      	ldrh	r1, [r2, #0]
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7fb fb6a 	bl	8005794 <HAL_GPIO_WritePin>
    return status;
 800a0c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3718      	adds	r7, #24
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	bf00      	nop
 800a0cc:	200004ac 	.word	0x200004ac
 800a0d0:	200004a8 	.word	0x200004a8
 800a0d4:	2000049c 	.word	0x2000049c
 800a0d8:	20000498 	.word	0x20000498

0800a0dc <set_NSS_pin>:
    status = HAL_SPI_TransmitReceive(&hspi, (uint8_t*)params, (uint8_t*)response, numOfParams, 100);
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
    return status;
}

void set_NSS_pin(GPIO_TypeDef* _NSS_GPIO, uint16_t _NSS){
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	807b      	strh	r3, [r7, #2]
    NSS = _NSS;
 800a0e8:	4a05      	ldr	r2, [pc, #20]	; (800a100 <set_NSS_pin+0x24>)
 800a0ea:	887b      	ldrh	r3, [r7, #2]
 800a0ec:	8013      	strh	r3, [r2, #0]
    NSS_GPIO = _NSS_GPIO;
 800a0ee:	4a05      	ldr	r2, [pc, #20]	; (800a104 <set_NSS_pin+0x28>)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6013      	str	r3, [r2, #0]
}
 800a0f4:	bf00      	nop
 800a0f6:	370c      	adds	r7, #12
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr
 800a100:	20000498 	.word	0x20000498
 800a104:	2000049c 	.word	0x2000049c

0800a108 <set_BUSY_pin>:

void set_BUSY_pin(GPIO_TypeDef* _BUSY_GPIO, uint16_t _BUSY){
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	460b      	mov	r3, r1
 800a112:	807b      	strh	r3, [r7, #2]
    BUSY = _BUSY;
 800a114:	4a05      	ldr	r2, [pc, #20]	; (800a12c <set_BUSY_pin+0x24>)
 800a116:	887b      	ldrh	r3, [r7, #2]
 800a118:	8013      	strh	r3, [r2, #0]
    BUSY_GPIO = _BUSY_GPIO;
 800a11a:	4a05      	ldr	r2, [pc, #20]	; (800a130 <set_BUSY_pin+0x28>)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6013      	str	r3, [r2, #0]
}
 800a120:	bf00      	nop
 800a122:	370c      	adds	r7, #12
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr
 800a12c:	200004a8 	.word	0x200004a8
 800a130:	200004ac 	.word	0x200004ac

0800a134 <set_NRESET_pin>:

void set_NRESET_pin(GPIO_TypeDef* _NRESET_GPIO, uint16_t _NRESET){
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	460b      	mov	r3, r1
 800a13e:	807b      	strh	r3, [r7, #2]
    NRESET = _NRESET;
 800a140:	4a05      	ldr	r2, [pc, #20]	; (800a158 <set_NRESET_pin+0x24>)
 800a142:	887b      	ldrh	r3, [r7, #2]
 800a144:	8013      	strh	r3, [r2, #0]
    NRESET_GPIO = _NRESET_GPIO;
 800a146:	4a05      	ldr	r2, [pc, #20]	; (800a15c <set_NRESET_pin+0x28>)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6013      	str	r3, [r2, #0]
}
 800a14c:	bf00      	nop
 800a14e:	370c      	adds	r7, #12
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr
 800a158:	200004a0 	.word	0x200004a0
 800a15c:	200004a4 	.word	0x200004a4

0800a160 <set_DIO1_pin>:

void set_DIO1_pin(GPIO_TypeDef* _DIO1_GPIO, uint16_t _DIO1){
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	460b      	mov	r3, r1
 800a16a:	807b      	strh	r3, [r7, #2]
    DIO1 = _DIO1;
 800a16c:	4a05      	ldr	r2, [pc, #20]	; (800a184 <set_DIO1_pin+0x24>)
 800a16e:	887b      	ldrh	r3, [r7, #2]
 800a170:	8013      	strh	r3, [r2, #0]
    DIO1_GPIO = _DIO1_GPIO;
 800a172:	4a05      	ldr	r2, [pc, #20]	; (800a188 <set_DIO1_pin+0x28>)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6013      	str	r3, [r2, #0]
}
 800a178:	bf00      	nop
 800a17a:	370c      	adds	r7, #12
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr
 800a184:	200004b0 	.word	0x200004b0
 800a188:	200004b4 	.word	0x200004b4

0800a18c <set_hspi>:
void set_DIO3_pin(GPIO_TypeDef* _DIO3_GPIO, uint16_t _DIO3){
    DIO3 = _DIO3;
    DIO3_GPIO = _DIO3_GPIO;
}

void set_hspi(SPI_HandleTypeDef _hspi){
 800a18c:	b084      	sub	sp, #16
 800a18e:	b580      	push	{r7, lr}
 800a190:	af00      	add	r7, sp, #0
 800a192:	f107 0c08 	add.w	ip, r7, #8
 800a196:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    hspi = _hspi;
 800a19a:	4b07      	ldr	r3, [pc, #28]	; (800a1b8 <set_hspi+0x2c>)
 800a19c:	4618      	mov	r0, r3
 800a19e:	f107 0308 	add.w	r3, r7, #8
 800a1a2:	2258      	movs	r2, #88	; 0x58
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	f003 fcb1 	bl	800db0c <memcpy>
}
 800a1aa:	bf00      	nop
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a1b2:	b004      	add	sp, #16
 800a1b4:	4770      	bx	lr
 800a1b6:	bf00      	nop
 800a1b8:	200004b8 	.word	0x200004b8

0800a1bc <Tx_setup>:

void Tx_setup(){
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b086      	sub	sp, #24
 800a1c0:	af02      	add	r7, sp, #8
    //NEED TO ADD COMMAND ERROR HANDLING
    HAL_GPIO_WritePin(NRESET_GPIO, NRESET, GPIO_PIN_SET);
 800a1c2:	4b66      	ldr	r3, [pc, #408]	; (800a35c <Tx_setup+0x1a0>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4a66      	ldr	r2, [pc, #408]	; (800a360 <Tx_setup+0x1a4>)
 800a1c8:	8811      	ldrh	r1, [r2, #0]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f7fb fae1 	bl	8005794 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 800a1d2:	4b64      	ldr	r3, [pc, #400]	; (800a364 <Tx_setup+0x1a8>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4a64      	ldr	r2, [pc, #400]	; (800a368 <Tx_setup+0x1ac>)
 800a1d8:	8811      	ldrh	r1, [r2, #0]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7fb fad9 	bl	8005794 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800a1e2:	2032      	movs	r0, #50	; 0x32
 800a1e4:	f7fa fd68 	bl	8004cb8 <HAL_Delay>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);             //make sure chip select is off
 800a1e8:	4b5e      	ldr	r3, [pc, #376]	; (800a364 <Tx_setup+0x1a8>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a5e      	ldr	r2, [pc, #376]	; (800a368 <Tx_setup+0x1ac>)
 800a1ee:	8811      	ldrh	r1, [r2, #0]
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7fb face 	bl	8005794 <HAL_GPIO_WritePin>

    //set to standby for setup
    sx126x_set_standby(&hspi, 0);
 800a1f8:	2100      	movs	r1, #0
 800a1fa:	485c      	ldr	r0, [pc, #368]	; (800a36c <Tx_setup+0x1b0>)
 800a1fc:	f000 f8f2 	bl	800a3e4 <sx126x_set_standby>

    //set general parameters
    sx126x_set_rf_freq(&hspi, frequency);                       //set rf frequency
 800a200:	4b5b      	ldr	r3, [pc, #364]	; (800a370 <Tx_setup+0x1b4>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4619      	mov	r1, r3
 800a206:	4859      	ldr	r0, [pc, #356]	; (800a36c <Tx_setup+0x1b0>)
 800a208:	f000 fa76 	bl	800a6f8 <sx126x_set_rf_freq>
    sx126x_set_pkt_type(&hspi, packet_type);                    //set packet type
 800a20c:	4b59      	ldr	r3, [pc, #356]	; (800a374 <Tx_setup+0x1b8>)
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	4619      	mov	r1, r3
 800a212:	4856      	ldr	r0, [pc, #344]	; (800a36c <Tx_setup+0x1b0>)
 800a214:	f000 faaa 	bl	800a76c <sx126x_set_pkt_type>
    sx126x_set_rx_tx_fallback_mode(&hspi, fallback_mode);       //set rx tx fallback mode
 800a218:	4b57      	ldr	r3, [pc, #348]	; (800a378 <Tx_setup+0x1bc>)
 800a21a:	781b      	ldrb	r3, [r3, #0]
 800a21c:	4619      	mov	r1, r3
 800a21e:	4853      	ldr	r0, [pc, #332]	; (800a36c <Tx_setup+0x1b0>)
 800a220:	f000 f977 	bl	800a512 <sx126x_set_rx_tx_fallback_mode>
    sx126x_set_dio2_as_rf_sw_ctrl(&hspi, 1);                    //set dio2 as rf sw -> 1 is to activate it 0 would be to have it as regular irq
 800a224:	2101      	movs	r1, #1
 800a226:	4851      	ldr	r0, [pc, #324]	; (800a36c <Tx_setup+0x1b0>)
 800a228:	f000 fa24 	bl	800a674 <sx126x_set_dio2_as_rf_sw_ctrl>
    sx126x_set_dio3_as_tcxo_ctrl(&hspi, tcxo_voltage_ctrl, 100);//set dio3 as tcxo ctrl, 100 is for the delay in ms
 800a22c:	4b53      	ldr	r3, [pc, #332]	; (800a37c <Tx_setup+0x1c0>)
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	2264      	movs	r2, #100	; 0x64
 800a232:	4619      	mov	r1, r3
 800a234:	484d      	ldr	r0, [pc, #308]	; (800a36c <Tx_setup+0x1b0>)
 800a236:	f000 fa37 	bl	800a6a8 <sx126x_set_dio3_as_tcxo_ctrl>

    //calibrate functions
    sx126x_cal(&hspi, cal_mask);                                //calibrate radio, mask chooses what to calibrate
 800a23a:	4b51      	ldr	r3, [pc, #324]	; (800a380 <Tx_setup+0x1c4>)
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	4619      	mov	r1, r3
 800a240:	484a      	ldr	r0, [pc, #296]	; (800a36c <Tx_setup+0x1b0>)
 800a242:	f000 f903 	bl	800a44c <sx126x_cal>
    HAL_Delay(50);
 800a246:	2032      	movs	r0, #50	; 0x32
 800a248:	f7fa fd36 	bl	8004cb8 <HAL_Delay>
    sx126x_set_reg_mode(&hspi, regulator_mode);                 //ldo or dc-dc
 800a24c:	4b4d      	ldr	r3, [pc, #308]	; (800a384 <Tx_setup+0x1c8>)
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	4619      	mov	r1, r3
 800a252:	4846      	ldr	r0, [pc, #280]	; (800a36c <Tx_setup+0x1b0>)
 800a254:	f000 f8e0 	bl	800a418 <sx126x_set_reg_mode>
    sx126x_cal_img_hex(&hspi, cal_low_freq, cal_hi_freq);       //image calibration frequencies
 800a258:	4b4b      	ldr	r3, [pc, #300]	; (800a388 <Tx_setup+0x1cc>)
 800a25a:	781b      	ldrb	r3, [r3, #0]
 800a25c:	4a4b      	ldr	r2, [pc, #300]	; (800a38c <Tx_setup+0x1d0>)
 800a25e:	7812      	ldrb	r2, [r2, #0]
 800a260:	4619      	mov	r1, r3
 800a262:	4842      	ldr	r0, [pc, #264]	; (800a36c <Tx_setup+0x1b0>)
 800a264:	f000 f90c 	bl	800a480 <sx126x_cal_img_hex>

    //set pa config
    struct sx126x_pa_cfg_params_s *params = malloc(sizeof(sx126x_pa_cfg_params_t));
 800a268:	2004      	movs	r0, #4
 800a26a:	f003 fc3f 	bl	800daec <malloc>
 800a26e:	4603      	mov	r3, r0
 800a270:	60fb      	str	r3, [r7, #12]
    params->pa_duty_cycle=pa_duty_cyc;
 800a272:	4b47      	ldr	r3, [pc, #284]	; (800a390 <Tx_setup+0x1d4>)
 800a274:	781a      	ldrb	r2, [r3, #0]
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	701a      	strb	r2, [r3, #0]
    params->hp_max=pa_hp_max;
 800a27a:	4b46      	ldr	r3, [pc, #280]	; (800a394 <Tx_setup+0x1d8>)
 800a27c:	781a      	ldrb	r2, [r3, #0]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	705a      	strb	r2, [r3, #1]
    params->device_sel=pa_device_sel;
 800a282:	4b45      	ldr	r3, [pc, #276]	; (800a398 <Tx_setup+0x1dc>)
 800a284:	781a      	ldrb	r2, [r3, #0]
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	709a      	strb	r2, [r3, #2]
    params->pa_lut=pa_lut;
 800a28a:	4b44      	ldr	r3, [pc, #272]	; (800a39c <Tx_setup+0x1e0>)
 800a28c:	781a      	ldrb	r2, [r3, #0]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	70da      	strb	r2, [r3, #3]
    sx126x_set_pa_cfg(&hspi, params);
 800a292:	68f9      	ldr	r1, [r7, #12]
 800a294:	4835      	ldr	r0, [pc, #212]	; (800a36c <Tx_setup+0x1b0>)
 800a296:	f000 f917 	bl	800a4c8 <sx126x_set_pa_cfg>
    free(params);
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	f003 fc2e 	bl	800dafc <free>

    //set transmission parameters
    sx126x_set_tx_params(&hspi, tx_power, ramp_time);
 800a2a0:	4b3f      	ldr	r3, [pc, #252]	; (800a3a0 <Tx_setup+0x1e4>)
 800a2a2:	781b      	ldrb	r3, [r3, #0]
 800a2a4:	b25b      	sxtb	r3, r3
 800a2a6:	4a3f      	ldr	r2, [pc, #252]	; (800a3a4 <Tx_setup+0x1e8>)
 800a2a8:	7812      	ldrb	r2, [r2, #0]
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	482f      	ldr	r0, [pc, #188]	; (800a36c <Tx_setup+0x1b0>)
 800a2ae:	f000 fa77 	bl	800a7a0 <sx126x_set_tx_params>
    sx126x_set_buffer_base_address(&hspi, tx_address_base, rx_address_base);
 800a2b2:	4b3d      	ldr	r3, [pc, #244]	; (800a3a8 <Tx_setup+0x1ec>)
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	4a3d      	ldr	r2, [pc, #244]	; (800a3ac <Tx_setup+0x1f0>)
 800a2b8:	7812      	ldrb	r2, [r2, #0]
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	482b      	ldr	r0, [pc, #172]	; (800a36c <Tx_setup+0x1b0>)
 800a2be:	f000 fb2d 	bl	800a91c <sx126x_set_buffer_base_address>

    //set modulation parameters
    struct sx126x_mod_params_lora_s *mod_params = malloc(sizeof(sx126x_mod_params_lora_t));
 800a2c2:	2004      	movs	r0, #4
 800a2c4:	f003 fc12 	bl	800daec <malloc>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	60bb      	str	r3, [r7, #8]
    mod_params->sf=lora_sf;
 800a2cc:	4b38      	ldr	r3, [pc, #224]	; (800a3b0 <Tx_setup+0x1f4>)
 800a2ce:	781a      	ldrb	r2, [r3, #0]
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	701a      	strb	r2, [r3, #0]
    mod_params->bw=lora_bw;
 800a2d4:	4b37      	ldr	r3, [pc, #220]	; (800a3b4 <Tx_setup+0x1f8>)
 800a2d6:	781a      	ldrb	r2, [r3, #0]
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	705a      	strb	r2, [r3, #1]
    mod_params->cr=lora_cr;
 800a2dc:	4b36      	ldr	r3, [pc, #216]	; (800a3b8 <Tx_setup+0x1fc>)
 800a2de:	781a      	ldrb	r2, [r3, #0]
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	709a      	strb	r2, [r3, #2]
    mod_params->ldro=lora_ldro;
 800a2e4:	4b35      	ldr	r3, [pc, #212]	; (800a3bc <Tx_setup+0x200>)
 800a2e6:	781a      	ldrb	r2, [r3, #0]
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	70da      	strb	r2, [r3, #3]
    sx126x_set_lora_mod_params(&hspi, mod_params);
 800a2ec:	68b9      	ldr	r1, [r7, #8]
 800a2ee:	481f      	ldr	r0, [pc, #124]	; (800a36c <Tx_setup+0x1b0>)
 800a2f0:	f000 fa7a 	bl	800a7e8 <sx126x_set_lora_mod_params>
    free(mod_params);
 800a2f4:	68b8      	ldr	r0, [r7, #8]
 800a2f6:	f003 fc01 	bl	800dafc <free>

    //set lora packet params
    struct sx126x_pkt_params_lora_s *lora_params = malloc(sizeof(sx126x_pkt_params_lora_t));
 800a2fa:	2006      	movs	r0, #6
 800a2fc:	f003 fbf6 	bl	800daec <malloc>
 800a300:	4603      	mov	r3, r0
 800a302:	607b      	str	r3, [r7, #4]
    lora_params->preamble_len_in_symb=pkt_preamble_len;
 800a304:	4b2e      	ldr	r3, [pc, #184]	; (800a3c0 <Tx_setup+0x204>)
 800a306:	881a      	ldrh	r2, [r3, #0]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	801a      	strh	r2, [r3, #0]
    lora_params->header_type=header_type;
 800a30c:	4b2d      	ldr	r3, [pc, #180]	; (800a3c4 <Tx_setup+0x208>)
 800a30e:	781a      	ldrb	r2, [r3, #0]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	709a      	strb	r2, [r3, #2]
    lora_params->pld_len_in_bytes=payload_len;
 800a314:	4b2c      	ldr	r3, [pc, #176]	; (800a3c8 <Tx_setup+0x20c>)
 800a316:	781a      	ldrb	r2, [r3, #0]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	70da      	strb	r2, [r3, #3]
    lora_params->crc_is_on=crc_is_on;
 800a31c:	4b2b      	ldr	r3, [pc, #172]	; (800a3cc <Tx_setup+0x210>)
 800a31e:	781a      	ldrb	r2, [r3, #0]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	711a      	strb	r2, [r3, #4]
    lora_params->invert_iq_is_on=invert_iq_is_on;
 800a324:	4b2a      	ldr	r3, [pc, #168]	; (800a3d0 <Tx_setup+0x214>)
 800a326:	781a      	ldrb	r2, [r3, #0]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	715a      	strb	r2, [r3, #5]
    sx126x_set_lora_pkt_params(&hspi, lora_params);
 800a32c:	6879      	ldr	r1, [r7, #4]
 800a32e:	480f      	ldr	r0, [pc, #60]	; (800a36c <Tx_setup+0x1b0>)
 800a330:	f000 fa86 	bl	800a840 <sx126x_set_lora_pkt_params>
    free(lora_params);
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f003 fbe1 	bl	800dafc <free>

    //set dio and irq parameters
    sx126x_set_dio_irq_params(&hspi, irq_mask, dio1_mask, dio2_mask, dio3_mask);
 800a33a:	4b26      	ldr	r3, [pc, #152]	; (800a3d4 <Tx_setup+0x218>)
 800a33c:	8819      	ldrh	r1, [r3, #0]
 800a33e:	4b26      	ldr	r3, [pc, #152]	; (800a3d8 <Tx_setup+0x21c>)
 800a340:	881a      	ldrh	r2, [r3, #0]
 800a342:	4b26      	ldr	r3, [pc, #152]	; (800a3dc <Tx_setup+0x220>)
 800a344:	8818      	ldrh	r0, [r3, #0]
 800a346:	4b26      	ldr	r3, [pc, #152]	; (800a3e0 <Tx_setup+0x224>)
 800a348:	881b      	ldrh	r3, [r3, #0]
 800a34a:	9300      	str	r3, [sp, #0]
 800a34c:	4603      	mov	r3, r0
 800a34e:	4807      	ldr	r0, [pc, #28]	; (800a36c <Tx_setup+0x1b0>)
 800a350:	f000 f94c 	bl	800a5ec <sx126x_set_dio_irq_params>

}
 800a354:	bf00      	nop
 800a356:	3710      	adds	r7, #16
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}
 800a35c:	200004a4 	.word	0x200004a4
 800a360:	200004a0 	.word	0x200004a0
 800a364:	2000049c 	.word	0x2000049c
 800a368:	20000498 	.word	0x20000498
 800a36c:	200004b8 	.word	0x200004b8
 800a370:	2000000c 	.word	0x2000000c
 800a374:	20000010 	.word	0x20000010
 800a378:	20000011 	.word	0x20000011
 800a37c:	20000012 	.word	0x20000012
 800a380:	20000014 	.word	0x20000014
 800a384:	20000013 	.word	0x20000013
 800a388:	20000015 	.word	0x20000015
 800a38c:	20000016 	.word	0x20000016
 800a390:	20000017 	.word	0x20000017
 800a394:	20000018 	.word	0x20000018
 800a398:	20000510 	.word	0x20000510
 800a39c:	20000019 	.word	0x20000019
 800a3a0:	2000001a 	.word	0x2000001a
 800a3a4:	2000001b 	.word	0x2000001b
 800a3a8:	20000511 	.word	0x20000511
 800a3ac:	20000512 	.word	0x20000512
 800a3b0:	2000001c 	.word	0x2000001c
 800a3b4:	2000001d 	.word	0x2000001d
 800a3b8:	2000001e 	.word	0x2000001e
 800a3bc:	20000513 	.word	0x20000513
 800a3c0:	20000020 	.word	0x20000020
 800a3c4:	20000514 	.word	0x20000514
 800a3c8:	20000022 	.word	0x20000022
 800a3cc:	20000023 	.word	0x20000023
 800a3d0:	20000515 	.word	0x20000515
 800a3d4:	20000024 	.word	0x20000024
 800a3d8:	20000026 	.word	0x20000026
 800a3dc:	20000516 	.word	0x20000516
 800a3e0:	20000518 	.word	0x20000518

0800a3e4 <sx126x_set_standby>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_SLEEP, 0, 0 );
}

sx126x_status_t sx126x_set_standby( const void* context, const sx126x_standby_cfg_t cfg )
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b086      	sub	sp, #24
 800a3e8:	af02      	add	r7, sp, #8
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_STANDBY] = { 0 };
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_STANDBY;
 800a3f4:	2380      	movs	r3, #128	; 0x80
 800a3f6:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) cfg;
 800a3f8:	78fb      	ldrb	r3, [r7, #3]
 800a3fa:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_STANDBY, 0, 0 );
 800a3fc:	f107 010c 	add.w	r1, r7, #12
 800a400:	2300      	movs	r3, #0
 800a402:	9300      	str	r3, [sp, #0]
 800a404:	2300      	movs	r3, #0
 800a406:	2202      	movs	r2, #2
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f7ff fdd7 	bl	8009fbc <sx126x_hal_write>
 800a40e:	4603      	mov	r3, r0
}
 800a410:	4618      	mov	r0, r3
 800a412:	3710      	adds	r7, #16
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <sx126x_set_reg_mode>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_INFINITE_PREAMBLE, 0, 0 );
}

sx126x_status_t sx126x_set_reg_mode( const void* context, const sx126x_reg_mod_t mode )
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b086      	sub	sp, #24
 800a41c:	af02      	add	r7, sp, #8
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	460b      	mov	r3, r1
 800a422:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_REGULATOR_MODE] = { 0 };
 800a424:	2300      	movs	r3, #0
 800a426:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_REGULATOR_MODE;
 800a428:	2396      	movs	r3, #150	; 0x96
 800a42a:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) mode;
 800a42c:	78fb      	ldrb	r3, [r7, #3]
 800a42e:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_REGULATOR_MODE, 0, 0 );
 800a430:	f107 010c 	add.w	r1, r7, #12
 800a434:	2300      	movs	r3, #0
 800a436:	9300      	str	r3, [sp, #0]
 800a438:	2300      	movs	r3, #0
 800a43a:	2202      	movs	r2, #2
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f7ff fdbd 	bl	8009fbc <sx126x_hal_write>
 800a442:	4603      	mov	r3, r0
}
 800a444:	4618      	mov	r0, r3
 800a446:	3710      	adds	r7, #16
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <sx126x_cal>:

sx126x_status_t sx126x_cal( const void* context, const sx126x_cal_mask_t param )
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b086      	sub	sp, #24
 800a450:	af02      	add	r7, sp, #8
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	460b      	mov	r3, r1
 800a456:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_CALIBRATE] = { 0 };
 800a458:	2300      	movs	r3, #0
 800a45a:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_CALIBRATE;
 800a45c:	2389      	movs	r3, #137	; 0x89
 800a45e:	733b      	strb	r3, [r7, #12]

    buf[1] = param;
 800a460:	78fb      	ldrb	r3, [r7, #3]
 800a462:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE, 0, 0 );
 800a464:	f107 010c 	add.w	r1, r7, #12
 800a468:	2300      	movs	r3, #0
 800a46a:	9300      	str	r3, [sp, #0]
 800a46c:	2300      	movs	r3, #0
 800a46e:	2202      	movs	r2, #2
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f7ff fda3 	bl	8009fbc <sx126x_hal_write>
 800a476:	4603      	mov	r3, r0
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3710      	adds	r7, #16
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <sx126x_cal_img_hex>:

sx126x_status_t sx126x_cal_img_hex( const void* context, const uint8_t low_freq, const uint8_t high_freq)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b086      	sub	sp, #24
 800a484:	af02      	add	r7, sp, #8
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	460b      	mov	r3, r1
 800a48a:	70fb      	strb	r3, [r7, #3]
 800a48c:	4613      	mov	r3, r2
 800a48e:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_CALIBRATE_IMAGE] = { 0 };
 800a490:	4b0c      	ldr	r3, [pc, #48]	; (800a4c4 <sx126x_cal_img_hex+0x44>)
 800a492:	881b      	ldrh	r3, [r3, #0]
 800a494:	81bb      	strh	r3, [r7, #12]
 800a496:	2300      	movs	r3, #0
 800a498:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_CALIBRATE_IMAGE;
 800a49a:	2398      	movs	r3, #152	; 0x98
 800a49c:	733b      	strb	r3, [r7, #12]
    buf[1] = low_freq;
 800a49e:	78fb      	ldrb	r3, [r7, #3]
 800a4a0:	737b      	strb	r3, [r7, #13]
    buf[2] = high_freq;
 800a4a2:	78bb      	ldrb	r3, [r7, #2]
 800a4a4:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
 800a4a6:	f107 010c 	add.w	r1, r7, #12
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	9300      	str	r3, [sp, #0]
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	2203      	movs	r2, #3
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f7ff fd82 	bl	8009fbc <sx126x_hal_write>
 800a4b8:	4603      	mov	r3, r0
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	08012f34 	.word	0x08012f34

0800a4c8 <sx126x_set_pa_cfg>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
}

sx126x_status_t sx126x_set_pa_cfg( const void* context, const sx126x_pa_cfg_params_t* params )
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b086      	sub	sp, #24
 800a4cc:	af02      	add	r7, sp, #8
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_PA_CFG] = { 0 };
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	60bb      	str	r3, [r7, #8]
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_PA_CFG;
 800a4da:	2395      	movs	r3, #149	; 0x95
 800a4dc:	723b      	strb	r3, [r7, #8]
    buf[1] = params->pa_duty_cycle;
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	727b      	strb	r3, [r7, #9]
    buf[2] = params->hp_max;
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	785b      	ldrb	r3, [r3, #1]
 800a4e8:	72bb      	strb	r3, [r7, #10]
    buf[3] = params->device_sel;
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	789b      	ldrb	r3, [r3, #2]
 800a4ee:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->pa_lut;
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	78db      	ldrb	r3, [r3, #3]
 800a4f4:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PA_CFG, 0, 0 );
 800a4f6:	f107 0108 	add.w	r1, r7, #8
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	9300      	str	r3, [sp, #0]
 800a4fe:	2300      	movs	r3, #0
 800a500:	2205      	movs	r2, #5
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f7ff fd5a 	bl	8009fbc <sx126x_hal_write>
 800a508:	4603      	mov	r3, r0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}

0800a512 <sx126x_set_rx_tx_fallback_mode>:

sx126x_status_t sx126x_set_rx_tx_fallback_mode( const void* context, const sx126x_fallback_modes_t fallback_mode )
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b086      	sub	sp, #24
 800a516:	af02      	add	r7, sp, #8
 800a518:	6078      	str	r0, [r7, #4]
 800a51a:	460b      	mov	r3, r1
 800a51c:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_RX_TX_FALLBACK_MODE] = { 0 };
 800a51e:	2300      	movs	r3, #0
 800a520:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_RX_TX_FALLBACK_MODE;
 800a522:	2393      	movs	r3, #147	; 0x93
 800a524:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) fallback_mode;
 800a526:	78fb      	ldrb	r3, [r7, #3]
 800a528:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RX_TX_FALLBACK_MODE, 0, 0 );
 800a52a:	f107 010c 	add.w	r1, r7, #12
 800a52e:	2300      	movs	r3, #0
 800a530:	9300      	str	r3, [sp, #0]
 800a532:	2300      	movs	r3, #0
 800a534:	2202      	movs	r2, #2
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f7ff fd40 	bl	8009fbc <sx126x_hal_write>
 800a53c:	4603      	mov	r3, r0
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3710      	adds	r7, #16
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
	...

0800a548 <sx126x_write_register>:
// Registers and buffer Access
//

sx126x_status_t sx126x_write_register( const void* context, const uint16_t address, const uint8_t* buffer,
                                       const uint8_t size )
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b088      	sub	sp, #32
 800a54c:	af02      	add	r7, sp, #8
 800a54e:	60f8      	str	r0, [r7, #12]
 800a550:	607a      	str	r2, [r7, #4]
 800a552:	461a      	mov	r2, r3
 800a554:	460b      	mov	r3, r1
 800a556:	817b      	strh	r3, [r7, #10]
 800a558:	4613      	mov	r3, r2
 800a55a:	727b      	strb	r3, [r7, #9]
    uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = { 0 };
 800a55c:	4b0e      	ldr	r3, [pc, #56]	; (800a598 <sx126x_write_register+0x50>)
 800a55e:	881b      	ldrh	r3, [r3, #0]
 800a560:	82bb      	strh	r3, [r7, #20]
 800a562:	2300      	movs	r3, #0
 800a564:	75bb      	strb	r3, [r7, #22]

    buf[0] = SX126X_WRITE_REGISTER;
 800a566:	230d      	movs	r3, #13
 800a568:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( address >> 8 );
 800a56a:	897b      	ldrh	r3, [r7, #10]
 800a56c:	0a1b      	lsrs	r3, r3, #8
 800a56e:	b29b      	uxth	r3, r3
 800a570:	b2db      	uxtb	r3, r3
 800a572:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( address >> 0 );
 800a574:	897b      	ldrh	r3, [r7, #10]
 800a576:	b2db      	uxtb	r3, r3
 800a578:	75bb      	strb	r3, [r7, #22]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_REGISTER, buffer, size );
 800a57a:	7a7b      	ldrb	r3, [r7, #9]
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	f107 0114 	add.w	r1, r7, #20
 800a582:	9300      	str	r3, [sp, #0]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2203      	movs	r2, #3
 800a588:	68f8      	ldr	r0, [r7, #12]
 800a58a:	f7ff fd17 	bl	8009fbc <sx126x_hal_write>
 800a58e:	4603      	mov	r3, r0
}
 800a590:	4618      	mov	r0, r3
 800a592:	3718      	adds	r7, #24
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}
 800a598:	08012f34 	.word	0x08012f34

0800a59c <sx126x_read_register>:

sx126x_status_t sx126x_read_register( const void* context, const uint16_t address, uint8_t* buffer, const uint8_t size )
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b088      	sub	sp, #32
 800a5a0:	af02      	add	r7, sp, #8
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	607a      	str	r2, [r7, #4]
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	460b      	mov	r3, r1
 800a5aa:	817b      	strh	r3, [r7, #10]
 800a5ac:	4613      	mov	r3, r2
 800a5ae:	727b      	strb	r3, [r7, #9]
    uint8_t         buf[SX126X_SIZE_READ_REGISTER] = { 0 };
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	613b      	str	r3, [r7, #16]
    sx126x_status_t status                         = SX126X_STATUS_ERROR;
 800a5b4:	2303      	movs	r3, #3
 800a5b6:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_READ_REGISTER;
 800a5b8:	231d      	movs	r3, #29
 800a5ba:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( address >> 8 );
 800a5bc:	897b      	ldrh	r3, [r7, #10]
 800a5be:	0a1b      	lsrs	r3, r3, #8
 800a5c0:	b29b      	uxth	r3, r3
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( address >> 0 );
 800a5c6:	897b      	ldrh	r3, [r7, #10]
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	74bb      	strb	r3, [r7, #18]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_READ_REGISTER, buffer, size );
 800a5cc:	f107 0110 	add.w	r1, r7, #16
 800a5d0:	7a7b      	ldrb	r3, [r7, #9]
 800a5d2:	9300      	str	r3, [sp, #0]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2204      	movs	r2, #4
 800a5d8:	68f8      	ldr	r0, [r7, #12]
 800a5da:	f7ff fd31 	bl	800a040 <sx126x_hal_read>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	75fb      	strb	r3, [r7, #23]

    return status;
 800a5e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3718      	adds	r7, #24
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <sx126x_set_dio_irq_params>:
//
// DIO and IRQ Control Functions
//
sx126x_status_t sx126x_set_dio_irq_params( const void* context, const uint16_t irq_mask, const uint16_t dio1_mask,
                                           const uint16_t dio2_mask, const uint16_t dio3_mask )
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b08a      	sub	sp, #40	; 0x28
 800a5f0:	af02      	add	r7, sp, #8
 800a5f2:	60f8      	str	r0, [r7, #12]
 800a5f4:	4608      	mov	r0, r1
 800a5f6:	4611      	mov	r1, r2
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	817b      	strh	r3, [r7, #10]
 800a5fe:	460b      	mov	r3, r1
 800a600:	813b      	strh	r3, [r7, #8]
 800a602:	4613      	mov	r3, r2
 800a604:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = { 0 };
 800a606:	2300      	movs	r3, #0
 800a608:	617b      	str	r3, [r7, #20]
 800a60a:	f107 0318 	add.w	r3, r7, #24
 800a60e:	2200      	movs	r2, #0
 800a610:	601a      	str	r2, [r3, #0]
 800a612:	711a      	strb	r2, [r3, #4]

    buf[0] = SX126X_SET_DIO_IRQ_PARAMS;
 800a614:	2308      	movs	r3, #8
 800a616:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( irq_mask >> 8 );
 800a618:	897b      	ldrh	r3, [r7, #10]
 800a61a:	0a1b      	lsrs	r3, r3, #8
 800a61c:	b29b      	uxth	r3, r3
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( irq_mask >> 0 );
 800a622:	897b      	ldrh	r3, [r7, #10]
 800a624:	b2db      	uxtb	r3, r3
 800a626:	75bb      	strb	r3, [r7, #22]

    buf[3] = ( uint8_t )( dio1_mask >> 8 );
 800a628:	893b      	ldrh	r3, [r7, #8]
 800a62a:	0a1b      	lsrs	r3, r3, #8
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	b2db      	uxtb	r3, r3
 800a630:	75fb      	strb	r3, [r7, #23]
    buf[4] = ( uint8_t )( dio1_mask >> 0 );
 800a632:	893b      	ldrh	r3, [r7, #8]
 800a634:	b2db      	uxtb	r3, r3
 800a636:	763b      	strb	r3, [r7, #24]

    buf[5] = ( uint8_t )( dio2_mask >> 8 );
 800a638:	88fb      	ldrh	r3, [r7, #6]
 800a63a:	0a1b      	lsrs	r3, r3, #8
 800a63c:	b29b      	uxth	r3, r3
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	767b      	strb	r3, [r7, #25]
    buf[6] = ( uint8_t )( dio2_mask >> 0 );
 800a642:	88fb      	ldrh	r3, [r7, #6]
 800a644:	b2db      	uxtb	r3, r3
 800a646:	76bb      	strb	r3, [r7, #26]

    buf[7] = ( uint8_t )( dio3_mask >> 8 );
 800a648:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a64a:	0a1b      	lsrs	r3, r3, #8
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	76fb      	strb	r3, [r7, #27]
    buf[8] = ( uint8_t )( dio3_mask >> 0 );
 800a652:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a654:	b2db      	uxtb	r3, r3
 800a656:	773b      	strb	r3, [r7, #28]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO_IRQ_PARAMS, 0, 0 );
 800a658:	f107 0114 	add.w	r1, r7, #20
 800a65c:	2300      	movs	r3, #0
 800a65e:	9300      	str	r3, [sp, #0]
 800a660:	2300      	movs	r3, #0
 800a662:	2209      	movs	r2, #9
 800a664:	68f8      	ldr	r0, [r7, #12]
 800a666:	f7ff fca9 	bl	8009fbc <sx126x_hal_write>
 800a66a:	4603      	mov	r3, r0
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3720      	adds	r7, #32
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <sx126x_set_dio2_as_rf_sw_ctrl>:
    }
    return status;
}

sx126x_status_t sx126x_set_dio2_as_rf_sw_ctrl( const void* context, const bool enable )
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b086      	sub	sp, #24
 800a678:	af02      	add	r7, sp, #8
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	460b      	mov	r3, r1
 800a67e:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL] = { 0 };
 800a680:	2300      	movs	r3, #0
 800a682:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_DIO2_AS_RF_SWITCH_CTRL;
 800a684:	239d      	movs	r3, #157	; 0x9d
 800a686:	733b      	strb	r3, [r7, #12]

    buf[1] = ( enable == true ) ? 1 : 0;
 800a688:	78fb      	ldrb	r3, [r7, #3]
 800a68a:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL, 0, 0 );
 800a68c:	f107 010c 	add.w	r1, r7, #12
 800a690:	2300      	movs	r3, #0
 800a692:	9300      	str	r3, [sp, #0]
 800a694:	2300      	movs	r3, #0
 800a696:	2202      	movs	r2, #2
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f7ff fc8f 	bl	8009fbc <sx126x_hal_write>
 800a69e:	4603      	mov	r3, r0
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3710      	adds	r7, #16
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <sx126x_set_dio3_as_tcxo_ctrl>:

sx126x_status_t sx126x_set_dio3_as_tcxo_ctrl( const void* context, const sx126x_tcxo_ctrl_voltages_t tcxo_voltage,
                                              const uint32_t timeout )
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b088      	sub	sp, #32
 800a6ac:	af02      	add	r7, sp, #8
 800a6ae:	60f8      	str	r0, [r7, #12]
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	607a      	str	r2, [r7, #4]
 800a6b4:	72fb      	strb	r3, [r7, #11]
    uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = { 0 };
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	613b      	str	r3, [r7, #16]
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	753b      	strb	r3, [r7, #20]

    buf[0] = SX126X_SET_DIO3_AS_TCXO_CTRL;
 800a6be:	2397      	movs	r3, #151	; 0x97
 800a6c0:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t ) tcxo_voltage;
 800a6c2:	7afb      	ldrb	r3, [r7, #11]
 800a6c4:	747b      	strb	r3, [r7, #17]

    buf[2] = ( uint8_t )( timeout >> 16 );
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	0c1b      	lsrs	r3, r3, #16
 800a6ca:	b2db      	uxtb	r3, r3
 800a6cc:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( timeout >> 8 );
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	0a1b      	lsrs	r3, r3, #8
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	74fb      	strb	r3, [r7, #19]
    buf[4] = ( uint8_t )( timeout >> 0 );
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	b2db      	uxtb	r3, r3
 800a6da:	753b      	strb	r3, [r7, #20]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL, 0, 0 );
 800a6dc:	f107 0110 	add.w	r1, r7, #16
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	9300      	str	r3, [sp, #0]
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	2205      	movs	r2, #5
 800a6e8:	68f8      	ldr	r0, [r7, #12]
 800a6ea:	f7ff fc67 	bl	8009fbc <sx126x_hal_write>
 800a6ee:	4603      	mov	r3, r0
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3718      	adds	r7, #24
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <sx126x_set_rf_freq>:
//
// RF Modulation and Packet-Related Functions
//

sx126x_status_t sx126x_set_rf_freq( const void* context, const uint32_t freq_in_hz )
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
    const uint32_t freq = sx126x_convert_freq_in_hz_to_pll_step( freq_in_hz );
 800a702:	6838      	ldr	r0, [r7, #0]
 800a704:	f000 f92e 	bl	800a964 <sx126x_convert_freq_in_hz_to_pll_step>
 800a708:	60f8      	str	r0, [r7, #12]

    return sx126x_set_rf_freq_in_pll_steps( context, freq );
 800a70a:	68f9      	ldr	r1, [r7, #12]
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f000 f805 	bl	800a71c <sx126x_set_rf_freq_in_pll_steps>
 800a712:	4603      	mov	r3, r0
}
 800a714:	4618      	mov	r0, r3
 800a716:	3710      	adds	r7, #16
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <sx126x_set_rf_freq_in_pll_steps>:

sx126x_status_t sx126x_set_rf_freq_in_pll_steps( const void* context, const uint32_t freq )
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b086      	sub	sp, #24
 800a720:	af02      	add	r7, sp, #8
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = { 0 };
 800a726:	2300      	movs	r3, #0
 800a728:	60bb      	str	r3, [r7, #8]
 800a72a:	2300      	movs	r3, #0
 800a72c:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_RF_FREQUENCY;
 800a72e:	2386      	movs	r3, #134	; 0x86
 800a730:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( freq >> 24 );
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	0e1b      	lsrs	r3, r3, #24
 800a736:	b2db      	uxtb	r3, r3
 800a738:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( freq >> 16 );
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	0c1b      	lsrs	r3, r3, #16
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( freq >> 8 );
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	0a1b      	lsrs	r3, r3, #8
 800a746:	b2db      	uxtb	r3, r3
 800a748:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( freq >> 0 );
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RF_FREQUENCY, 0, 0 );
 800a750:	f107 0108 	add.w	r1, r7, #8
 800a754:	2300      	movs	r3, #0
 800a756:	9300      	str	r3, [sp, #0]
 800a758:	2300      	movs	r3, #0
 800a75a:	2205      	movs	r2, #5
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f7ff fc2d 	bl	8009fbc <sx126x_hal_write>
 800a762:	4603      	mov	r3, r0
}
 800a764:	4618      	mov	r0, r3
 800a766:	3710      	adds	r7, #16
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <sx126x_set_pkt_type>:

sx126x_status_t sx126x_set_pkt_type( const void* context, const sx126x_pkt_type_t pkt_type )
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b086      	sub	sp, #24
 800a770:	af02      	add	r7, sp, #8
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	460b      	mov	r3, r1
 800a776:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_PKT_TYPE] = { 0 };
 800a778:	2300      	movs	r3, #0
 800a77a:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_PKT_TYPE;
 800a77c:	238a      	movs	r3, #138	; 0x8a
 800a77e:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pkt_type;
 800a780:	78fb      	ldrb	r3, [r7, #3]
 800a782:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_TYPE, 0, 0 );
 800a784:	f107 010c 	add.w	r1, r7, #12
 800a788:	2300      	movs	r3, #0
 800a78a:	9300      	str	r3, [sp, #0]
 800a78c:	2300      	movs	r3, #0
 800a78e:	2202      	movs	r2, #2
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f7ff fc13 	bl	8009fbc <sx126x_hal_write>
 800a796:	4603      	mov	r3, r0
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3710      	adds	r7, #16
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <sx126x_set_tx_params>:

    return status;
}

sx126x_status_t sx126x_set_tx_params( const void* context, const int8_t pwr_in_dbm, const sx126x_ramp_time_t ramp_time )
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b086      	sub	sp, #24
 800a7a4:	af02      	add	r7, sp, #8
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	460b      	mov	r3, r1
 800a7aa:	70fb      	strb	r3, [r7, #3]
 800a7ac:	4613      	mov	r3, r2
 800a7ae:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = { 0 };
 800a7b0:	4b0c      	ldr	r3, [pc, #48]	; (800a7e4 <sx126x_set_tx_params+0x44>)
 800a7b2:	881b      	ldrh	r3, [r3, #0]
 800a7b4:	81bb      	strh	r3, [r7, #12]
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_TX_PARAMS;
 800a7ba:	238e      	movs	r3, #142	; 0x8e
 800a7bc:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pwr_in_dbm;
 800a7be:	78fb      	ldrb	r3, [r7, #3]
 800a7c0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t ) ramp_time;
 800a7c2:	78bb      	ldrb	r3, [r7, #2]
 800a7c4:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_PARAMS, 0, 0 );
 800a7c6:	f107 010c 	add.w	r1, r7, #12
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	9300      	str	r3, [sp, #0]
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	2203      	movs	r2, #3
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f7ff fbf2 	bl	8009fbc <sx126x_hal_write>
 800a7d8:	4603      	mov	r3, r0
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3710      	adds	r7, #16
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	08012f34 	.word	0x08012f34

0800a7e8 <sx126x_set_lora_mod_params>:
    }
    return status;
}

sx126x_status_t sx126x_set_lora_mod_params( const void* context, const sx126x_mod_params_lora_t* params )
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b086      	sub	sp, #24
 800a7ec:	af02      	add	r7, sp, #8
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 800a7f2:	2303      	movs	r3, #3
 800a7f4:	73fb      	strb	r3, [r7, #15]

    uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = { 0 };
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	60bb      	str	r3, [r7, #8]
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_MODULATION_PARAMS;
 800a7fe:	238b      	movs	r3, #139	; 0x8b
 800a800:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( params->sf );
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( params->bw );
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	785b      	ldrb	r3, [r3, #1]
 800a80c:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( params->cr );
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	789b      	ldrb	r3, [r3, #2]
 800a812:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->ldro & 0x01;
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	78db      	ldrb	r3, [r3, #3]
 800a818:	f003 0301 	and.w	r3, r3, #1
 800a81c:	b2db      	uxtb	r3, r3
 800a81e:	733b      	strb	r3, [r7, #12]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_LORA, 0, 0 );
 800a820:	f107 0108 	add.w	r1, r7, #8
 800a824:	2300      	movs	r3, #0
 800a826:	9300      	str	r3, [sp, #0]
 800a828:	2300      	movs	r3, #0
 800a82a:	2205      	movs	r2, #5
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f7ff fbc5 	bl	8009fbc <sx126x_hal_write>
 800a832:	4603      	mov	r3, r0
 800a834:	73fb      	strb	r3, [r7, #15]
        status = sx126x_tx_modulation_workaround( context, SX126X_PKT_TYPE_LORA, params->bw );
        // WORKAROUND END
    }
    */

    return status;
 800a836:	7bfb      	ldrb	r3, [r7, #15]
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3710      	adds	r7, #16
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <sx126x_set_lora_pkt_params>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_GFSK, 0, 0 );
}

sx126x_status_t sx126x_set_lora_pkt_params( const void* context, const sx126x_pkt_params_lora_t* params )
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b088      	sub	sp, #32
 800a844:	af02      	add	r7, sp, #8
 800a846:	6078      	str	r0, [r7, #4]
 800a848:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 800a84a:	2303      	movs	r3, #3
 800a84c:	75fb      	strb	r3, [r7, #23]

    uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = { 0 };
 800a84e:	2300      	movs	r3, #0
 800a850:	613b      	str	r3, [r7, #16]
 800a852:	f107 0314 	add.w	r3, r7, #20
 800a856:	2100      	movs	r1, #0
 800a858:	460a      	mov	r2, r1
 800a85a:	801a      	strh	r2, [r3, #0]
 800a85c:	460a      	mov	r2, r1
 800a85e:	709a      	strb	r2, [r3, #2]

    buf[0] = SX126X_SET_PKT_PARAMS;
 800a860:	238c      	movs	r3, #140	; 0x8c
 800a862:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( params->preamble_len_in_symb >> 8 );
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	881b      	ldrh	r3, [r3, #0]
 800a868:	0a1b      	lsrs	r3, r3, #8
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	b2db      	uxtb	r3, r3
 800a86e:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( params->preamble_len_in_symb >> 0 );
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	881b      	ldrh	r3, [r3, #0]
 800a874:	b2db      	uxtb	r3, r3
 800a876:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( params->header_type );
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	789b      	ldrb	r3, [r3, #2]
 800a87c:	74fb      	strb	r3, [r7, #19]
    buf[4] = params->pld_len_in_bytes;
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	78db      	ldrb	r3, [r3, #3]
 800a882:	753b      	strb	r3, [r7, #20]
    buf[5] = ( uint8_t )( params->crc_is_on ? 1 : 0 );
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	791b      	ldrb	r3, [r3, #4]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d001      	beq.n	800a890 <sx126x_set_lora_pkt_params+0x50>
 800a88c:	2301      	movs	r3, #1
 800a88e:	e000      	b.n	800a892 <sx126x_set_lora_pkt_params+0x52>
 800a890:	2300      	movs	r3, #0
 800a892:	757b      	strb	r3, [r7, #21]
    buf[6] = ( uint8_t )( params->invert_iq_is_on ? 1 : 0 );
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	795b      	ldrb	r3, [r3, #5]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d001      	beq.n	800a8a0 <sx126x_set_lora_pkt_params+0x60>
 800a89c:	2301      	movs	r3, #1
 800a89e:	e000      	b.n	800a8a2 <sx126x_set_lora_pkt_params+0x62>
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	75bb      	strb	r3, [r7, #22]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_LORA, 0, 0 );
 800a8a4:	f107 0110 	add.w	r1, r7, #16
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	9300      	str	r3, [sp, #0]
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	2207      	movs	r2, #7
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f7ff fb83 	bl	8009fbc <sx126x_hal_write>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	75fb      	strb	r3, [r7, #23]

    // WORKAROUND - Optimizing the Inverted IQ Operation, see datasheet DS_SX1261-2_V1.2 §15.4
    if( status == SX126X_STATUS_OK )
 800a8ba:	7dfb      	ldrb	r3, [r7, #23]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d127      	bne.n	800a910 <sx126x_set_lora_pkt_params+0xd0>
    {
        uint8_t reg_value = 0;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	73fb      	strb	r3, [r7, #15]

        status = sx126x_read_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 800a8c4:	f107 020f 	add.w	r2, r7, #15
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	f240 7136 	movw	r1, #1846	; 0x736
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f7ff fe64 	bl	800a59c <sx126x_read_register>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	75fb      	strb	r3, [r7, #23]
        if( status == SX126X_STATUS_OK )
 800a8d8:	7dfb      	ldrb	r3, [r7, #23]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d118      	bne.n	800a910 <sx126x_set_lora_pkt_params+0xd0>
        {
            if( params->invert_iq_is_on == true )
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	795b      	ldrb	r3, [r3, #5]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d005      	beq.n	800a8f2 <sx126x_set_lora_pkt_params+0xb2>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 when using inverted IQ polarity
 800a8e6:	7bfb      	ldrb	r3, [r7, #15]
 800a8e8:	f023 0304 	bic.w	r3, r3, #4
 800a8ec:	b2db      	uxtb	r3, r3
 800a8ee:	73fb      	strb	r3, [r7, #15]
 800a8f0:	e004      	b.n	800a8fc <sx126x_set_lora_pkt_params+0xbc>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 when using standard IQ polarity
 800a8f2:	7bfb      	ldrb	r3, [r7, #15]
 800a8f4:	f043 0304 	orr.w	r3, r3, #4
 800a8f8:	b2db      	uxtb	r3, r3
 800a8fa:	73fb      	strb	r3, [r7, #15]
            }
            status = sx126x_write_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 800a8fc:	f107 020f 	add.w	r2, r7, #15
 800a900:	2301      	movs	r3, #1
 800a902:	f240 7136 	movw	r1, #1846	; 0x736
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f7ff fe1e 	bl	800a548 <sx126x_write_register>
 800a90c:	4603      	mov	r3, r0
 800a90e:	75fb      	strb	r3, [r7, #23]
        }
    }
    // WORKAROUND END

    return status;
 800a910:	7dfb      	ldrb	r3, [r7, #23]
}
 800a912:	4618      	mov	r0, r3
 800a914:	3718      	adds	r7, #24
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}
	...

0800a91c <sx126x_set_buffer_base_address>:
    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_CAD_PARAMS, 0, 0 );
}

sx126x_status_t sx126x_set_buffer_base_address( const void* context, const uint8_t tx_base_address,
                                                const uint8_t rx_base_address )
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b086      	sub	sp, #24
 800a920:	af02      	add	r7, sp, #8
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	460b      	mov	r3, r1
 800a926:	70fb      	strb	r3, [r7, #3]
 800a928:	4613      	mov	r3, r2
 800a92a:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_BUFFER_BASE_ADDRESS] = { 0 };
 800a92c:	4b0c      	ldr	r3, [pc, #48]	; (800a960 <sx126x_set_buffer_base_address+0x44>)
 800a92e:	881b      	ldrh	r3, [r3, #0]
 800a930:	81bb      	strh	r3, [r7, #12]
 800a932:	2300      	movs	r3, #0
 800a934:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_BUFFER_BASE_ADDRESS;
 800a936:	238f      	movs	r3, #143	; 0x8f
 800a938:	733b      	strb	r3, [r7, #12]

    buf[1] = tx_base_address;
 800a93a:	78fb      	ldrb	r3, [r7, #3]
 800a93c:	737b      	strb	r3, [r7, #13]
    buf[2] = rx_base_address;
 800a93e:	78bb      	ldrb	r3, [r7, #2]
 800a940:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_BUFFER_BASE_ADDRESS, 0, 0 );
 800a942:	f107 010c 	add.w	r1, r7, #12
 800a946:	2300      	movs	r3, #0
 800a948:	9300      	str	r3, [sp, #0]
 800a94a:	2300      	movs	r3, #0
 800a94c:	2203      	movs	r2, #3
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f7ff fb34 	bl	8009fbc <sx126x_hal_write>
 800a954:	4603      	mov	r3, r0
}
 800a956:	4618      	mov	r0, r3
 800a958:	3710      	adds	r7, #16
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
 800a95e:	bf00      	nop
 800a960:	08012f34 	.word	0x08012f34

0800a964 <sx126x_convert_freq_in_hz_to_pll_step>:

    return status;
}

uint32_t sx126x_convert_freq_in_hz_to_pll_step( uint32_t freq_in_hz )
{
 800a964:	b480      	push	{r7}
 800a966:	b085      	sub	sp, #20
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
    uint32_t steps_int;
    uint32_t steps_frac;

    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    steps_int  = freq_in_hz / SX126X_PLL_STEP_SCALED;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	4a0f      	ldr	r2, [pc, #60]	; (800a9ac <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800a970:	fba2 2303 	umull	r2, r3, r2, r3
 800a974:	0b1b      	lsrs	r3, r3, #12
 800a976:	60fb      	str	r3, [r7, #12]
    steps_frac = freq_in_hz - ( steps_int * SX126X_PLL_STEP_SCALED );
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f643 5209 	movw	r2, #15625	; 0x3d09
 800a97e:	fb02 f303 	mul.w	r3, r2, r3
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	1ad3      	subs	r3, r2, r3
 800a986:	60bb      	str	r3, [r7, #8]

    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	039a      	lsls	r2, r3, #14
           ( ( ( steps_frac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	039b      	lsls	r3, r3, #14
 800a990:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 800a994:	3304      	adds	r3, #4
 800a996:	4905      	ldr	r1, [pc, #20]	; (800a9ac <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800a998:	fba1 1303 	umull	r1, r3, r1, r3
 800a99c:	0b1b      	lsrs	r3, r3, #12
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800a99e:	4413      	add	r3, r2
             SX126X_PLL_STEP_SCALED );
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3714      	adds	r7, #20
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr
 800a9ac:	431bde83 	.word	0x431bde83

0800a9b0 <__NVIC_SetPriority>:
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b083      	sub	sp, #12
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	6039      	str	r1, [r7, #0]
 800a9ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a9bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	db0a      	blt.n	800a9da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	b2da      	uxtb	r2, r3
 800a9c8:	490c      	ldr	r1, [pc, #48]	; (800a9fc <__NVIC_SetPriority+0x4c>)
 800a9ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a9ce:	0112      	lsls	r2, r2, #4
 800a9d0:	b2d2      	uxtb	r2, r2
 800a9d2:	440b      	add	r3, r1
 800a9d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a9d8:	e00a      	b.n	800a9f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	b2da      	uxtb	r2, r3
 800a9de:	4908      	ldr	r1, [pc, #32]	; (800aa00 <__NVIC_SetPriority+0x50>)
 800a9e0:	79fb      	ldrb	r3, [r7, #7]
 800a9e2:	f003 030f 	and.w	r3, r3, #15
 800a9e6:	3b04      	subs	r3, #4
 800a9e8:	0112      	lsls	r2, r2, #4
 800a9ea:	b2d2      	uxtb	r2, r2
 800a9ec:	440b      	add	r3, r1
 800a9ee:	761a      	strb	r2, [r3, #24]
}
 800a9f0:	bf00      	nop
 800a9f2:	370c      	adds	r7, #12
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr
 800a9fc:	e000e100 	.word	0xe000e100
 800aa00:	e000ed00 	.word	0xe000ed00

0800aa04 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800aa04:	b580      	push	{r7, lr}
 800aa06:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800aa08:	4b05      	ldr	r3, [pc, #20]	; (800aa20 <SysTick_Handler+0x1c>)
 800aa0a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800aa0c:	f001 fec6 	bl	800c79c <xTaskGetSchedulerState>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b01      	cmp	r3, #1
 800aa14:	d001      	beq.n	800aa1a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800aa16:	f002 fcaf 	bl	800d378 <xPortSysTickHandler>
  }
}
 800aa1a:	bf00      	nop
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	e000e010 	.word	0xe000e010

0800aa24 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800aa24:	b580      	push	{r7, lr}
 800aa26:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800aa28:	2100      	movs	r1, #0
 800aa2a:	f06f 0004 	mvn.w	r0, #4
 800aa2e:	f7ff ffbf 	bl	800a9b0 <__NVIC_SetPriority>
#endif
}
 800aa32:	bf00      	nop
 800aa34:	bd80      	pop	{r7, pc}
	...

0800aa38 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800aa38:	b480      	push	{r7}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa3e:	f3ef 8305 	mrs	r3, IPSR
 800aa42:	603b      	str	r3, [r7, #0]
  return(result);
 800aa44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d003      	beq.n	800aa52 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800aa4a:	f06f 0305 	mvn.w	r3, #5
 800aa4e:	607b      	str	r3, [r7, #4]
 800aa50:	e00c      	b.n	800aa6c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800aa52:	4b0a      	ldr	r3, [pc, #40]	; (800aa7c <osKernelInitialize+0x44>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d105      	bne.n	800aa66 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800aa5a:	4b08      	ldr	r3, [pc, #32]	; (800aa7c <osKernelInitialize+0x44>)
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800aa60:	2300      	movs	r3, #0
 800aa62:	607b      	str	r3, [r7, #4]
 800aa64:	e002      	b.n	800aa6c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800aa66:	f04f 33ff 	mov.w	r3, #4294967295
 800aa6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800aa6c:	687b      	ldr	r3, [r7, #4]
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	370c      	adds	r7, #12
 800aa72:	46bd      	mov	sp, r7
 800aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa78:	4770      	bx	lr
 800aa7a:	bf00      	nop
 800aa7c:	2000051c 	.word	0x2000051c

0800aa80 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b082      	sub	sp, #8
 800aa84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa86:	f3ef 8305 	mrs	r3, IPSR
 800aa8a:	603b      	str	r3, [r7, #0]
  return(result);
 800aa8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d003      	beq.n	800aa9a <osKernelStart+0x1a>
    stat = osErrorISR;
 800aa92:	f06f 0305 	mvn.w	r3, #5
 800aa96:	607b      	str	r3, [r7, #4]
 800aa98:	e010      	b.n	800aabc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800aa9a:	4b0b      	ldr	r3, [pc, #44]	; (800aac8 <osKernelStart+0x48>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	d109      	bne.n	800aab6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800aaa2:	f7ff ffbf 	bl	800aa24 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800aaa6:	4b08      	ldr	r3, [pc, #32]	; (800aac8 <osKernelStart+0x48>)
 800aaa8:	2202      	movs	r2, #2
 800aaaa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800aaac:	f001 fa0a 	bl	800bec4 <vTaskStartScheduler>
      stat = osOK;
 800aab0:	2300      	movs	r3, #0
 800aab2:	607b      	str	r3, [r7, #4]
 800aab4:	e002      	b.n	800aabc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800aab6:	f04f 33ff 	mov.w	r3, #4294967295
 800aaba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800aabc:	687b      	ldr	r3, [r7, #4]
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3708      	adds	r7, #8
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}
 800aac6:	bf00      	nop
 800aac8:	2000051c 	.word	0x2000051c

0800aacc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800aacc:	b580      	push	{r7, lr}
 800aace:	b08e      	sub	sp, #56	; 0x38
 800aad0:	af04      	add	r7, sp, #16
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800aad8:	2300      	movs	r3, #0
 800aada:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aadc:	f3ef 8305 	mrs	r3, IPSR
 800aae0:	617b      	str	r3, [r7, #20]
  return(result);
 800aae2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d17e      	bne.n	800abe6 <osThreadNew+0x11a>
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d07b      	beq.n	800abe6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800aaee:	2380      	movs	r3, #128	; 0x80
 800aaf0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800aaf2:	2318      	movs	r3, #24
 800aaf4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800aafa:	f04f 33ff 	mov.w	r3, #4294967295
 800aafe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d045      	beq.n	800ab92 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d002      	beq.n	800ab14 <osThreadNew+0x48>
        name = attr->name;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	699b      	ldr	r3, [r3, #24]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d002      	beq.n	800ab22 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	699b      	ldr	r3, [r3, #24]
 800ab20:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ab22:	69fb      	ldr	r3, [r7, #28]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d008      	beq.n	800ab3a <osThreadNew+0x6e>
 800ab28:	69fb      	ldr	r3, [r7, #28]
 800ab2a:	2b38      	cmp	r3, #56	; 0x38
 800ab2c:	d805      	bhi.n	800ab3a <osThreadNew+0x6e>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	f003 0301 	and.w	r3, r3, #1
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d001      	beq.n	800ab3e <osThreadNew+0x72>
        return (NULL);
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	e054      	b.n	800abe8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	695b      	ldr	r3, [r3, #20]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d003      	beq.n	800ab4e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	695b      	ldr	r3, [r3, #20]
 800ab4a:	089b      	lsrs	r3, r3, #2
 800ab4c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	689b      	ldr	r3, [r3, #8]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d00e      	beq.n	800ab74 <osThreadNew+0xa8>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	68db      	ldr	r3, [r3, #12]
 800ab5a:	2bbb      	cmp	r3, #187	; 0xbb
 800ab5c:	d90a      	bls.n	800ab74 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d006      	beq.n	800ab74 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	695b      	ldr	r3, [r3, #20]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d002      	beq.n	800ab74 <osThreadNew+0xa8>
        mem = 1;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	61bb      	str	r3, [r7, #24]
 800ab72:	e010      	b.n	800ab96 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	689b      	ldr	r3, [r3, #8]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d10c      	bne.n	800ab96 <osThreadNew+0xca>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	68db      	ldr	r3, [r3, #12]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d108      	bne.n	800ab96 <osThreadNew+0xca>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	691b      	ldr	r3, [r3, #16]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d104      	bne.n	800ab96 <osThreadNew+0xca>
          mem = 0;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	61bb      	str	r3, [r7, #24]
 800ab90:	e001      	b.n	800ab96 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ab92:	2300      	movs	r3, #0
 800ab94:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ab96:	69bb      	ldr	r3, [r7, #24]
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d110      	bne.n	800abbe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aba4:	9202      	str	r2, [sp, #8]
 800aba6:	9301      	str	r3, [sp, #4]
 800aba8:	69fb      	ldr	r3, [r7, #28]
 800abaa:	9300      	str	r3, [sp, #0]
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	6a3a      	ldr	r2, [r7, #32]
 800abb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800abb2:	68f8      	ldr	r0, [r7, #12]
 800abb4:	f000 ff28 	bl	800ba08 <xTaskCreateStatic>
 800abb8:	4603      	mov	r3, r0
 800abba:	613b      	str	r3, [r7, #16]
 800abbc:	e013      	b.n	800abe6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800abbe:	69bb      	ldr	r3, [r7, #24]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d110      	bne.n	800abe6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800abc4:	6a3b      	ldr	r3, [r7, #32]
 800abc6:	b29a      	uxth	r2, r3
 800abc8:	f107 0310 	add.w	r3, r7, #16
 800abcc:	9301      	str	r3, [sp, #4]
 800abce:	69fb      	ldr	r3, [r7, #28]
 800abd0:	9300      	str	r3, [sp, #0]
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800abd6:	68f8      	ldr	r0, [r7, #12]
 800abd8:	f000 ff73 	bl	800bac2 <xTaskCreate>
 800abdc:	4603      	mov	r3, r0
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d001      	beq.n	800abe6 <osThreadNew+0x11a>
            hTask = NULL;
 800abe2:	2300      	movs	r3, #0
 800abe4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800abe6:	693b      	ldr	r3, [r7, #16]
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3728      	adds	r7, #40	; 0x28
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b082      	sub	sp, #8
 800abf4:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 800abf6:	f001 fdc1 	bl	800c77c <xTaskGetCurrentTaskHandle>
 800abfa:	6078      	str	r0, [r7, #4]

  return (id);
 800abfc:	687b      	ldr	r3, [r7, #4]
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3708      	adds	r7, #8
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}

0800ac06 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 800ac06:	b580      	push	{r7, lr}
 800ac08:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800ac0a:	2000      	movs	r0, #0
 800ac0c:	f001 f8b4 	bl	800bd78 <vTaskDelete>
#endif
  for (;;);
 800ac10:	e7fe      	b.n	800ac10 <osThreadExit+0xa>

0800ac12 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ac12:	b580      	push	{r7, lr}
 800ac14:	b084      	sub	sp, #16
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac1a:	f3ef 8305 	mrs	r3, IPSR
 800ac1e:	60bb      	str	r3, [r7, #8]
  return(result);
 800ac20:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d003      	beq.n	800ac2e <osDelay+0x1c>
    stat = osErrorISR;
 800ac26:	f06f 0305 	mvn.w	r3, #5
 800ac2a:	60fb      	str	r3, [r7, #12]
 800ac2c:	e007      	b.n	800ac3e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d002      	beq.n	800ac3e <osDelay+0x2c>
      vTaskDelay(ticks);
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f001 f90f 	bl	800be5c <vTaskDelay>
    }
  }

  return (stat);
 800ac3e:	68fb      	ldr	r3, [r7, #12]
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3710      	adds	r7, #16
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b088      	sub	sp, #32
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800ac50:	2300      	movs	r3, #0
 800ac52:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac54:	f3ef 8305 	mrs	r3, IPSR
 800ac58:	60bb      	str	r3, [r7, #8]
  return(result);
 800ac5a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d174      	bne.n	800ad4a <osMutexNew+0x102>
    if (attr != NULL) {
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d003      	beq.n	800ac6e <osMutexNew+0x26>
      type = attr->attr_bits;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	61bb      	str	r3, [r7, #24]
 800ac6c:	e001      	b.n	800ac72 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800ac72:	69bb      	ldr	r3, [r7, #24]
 800ac74:	f003 0301 	and.w	r3, r3, #1
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d002      	beq.n	800ac82 <osMutexNew+0x3a>
      rmtx = 1U;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	617b      	str	r3, [r7, #20]
 800ac80:	e001      	b.n	800ac86 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800ac82:	2300      	movs	r3, #0
 800ac84:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800ac86:	69bb      	ldr	r3, [r7, #24]
 800ac88:	f003 0308 	and.w	r3, r3, #8
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d15c      	bne.n	800ad4a <osMutexNew+0x102>
      mem = -1;
 800ac90:	f04f 33ff 	mov.w	r3, #4294967295
 800ac94:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d015      	beq.n	800acc8 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	689b      	ldr	r3, [r3, #8]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d006      	beq.n	800acb2 <osMutexNew+0x6a>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	68db      	ldr	r3, [r3, #12]
 800aca8:	2b4f      	cmp	r3, #79	; 0x4f
 800acaa:	d902      	bls.n	800acb2 <osMutexNew+0x6a>
          mem = 1;
 800acac:	2301      	movs	r3, #1
 800acae:	613b      	str	r3, [r7, #16]
 800acb0:	e00c      	b.n	800accc <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	689b      	ldr	r3, [r3, #8]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d108      	bne.n	800accc <osMutexNew+0x84>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	68db      	ldr	r3, [r3, #12]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d104      	bne.n	800accc <osMutexNew+0x84>
            mem = 0;
 800acc2:	2300      	movs	r3, #0
 800acc4:	613b      	str	r3, [r7, #16]
 800acc6:	e001      	b.n	800accc <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800acc8:	2300      	movs	r3, #0
 800acca:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	2b01      	cmp	r3, #1
 800acd0:	d112      	bne.n	800acf8 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d007      	beq.n	800ace8 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	689b      	ldr	r3, [r3, #8]
 800acdc:	4619      	mov	r1, r3
 800acde:	2004      	movs	r0, #4
 800ace0:	f000 fa8f 	bl	800b202 <xQueueCreateMutexStatic>
 800ace4:	61f8      	str	r0, [r7, #28]
 800ace6:	e016      	b.n	800ad16 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	689b      	ldr	r3, [r3, #8]
 800acec:	4619      	mov	r1, r3
 800acee:	2001      	movs	r0, #1
 800acf0:	f000 fa87 	bl	800b202 <xQueueCreateMutexStatic>
 800acf4:	61f8      	str	r0, [r7, #28]
 800acf6:	e00e      	b.n	800ad16 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d10b      	bne.n	800ad16 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d004      	beq.n	800ad0e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800ad04:	2004      	movs	r0, #4
 800ad06:	f000 fa64 	bl	800b1d2 <xQueueCreateMutex>
 800ad0a:	61f8      	str	r0, [r7, #28]
 800ad0c:	e003      	b.n	800ad16 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800ad0e:	2001      	movs	r0, #1
 800ad10:	f000 fa5f 	bl	800b1d2 <xQueueCreateMutex>
 800ad14:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800ad16:	69fb      	ldr	r3, [r7, #28]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d00c      	beq.n	800ad36 <osMutexNew+0xee>
        if (attr != NULL) {
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d003      	beq.n	800ad2a <osMutexNew+0xe2>
          name = attr->name;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	60fb      	str	r3, [r7, #12]
 800ad28:	e001      	b.n	800ad2e <osMutexNew+0xe6>
        } else {
          name = NULL;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800ad2e:	68f9      	ldr	r1, [r7, #12]
 800ad30:	69f8      	ldr	r0, [r7, #28]
 800ad32:	f000 fe0b 	bl	800b94c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800ad36:	69fb      	ldr	r3, [r7, #28]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d006      	beq.n	800ad4a <osMutexNew+0x102>
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d003      	beq.n	800ad4a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800ad42:	69fb      	ldr	r3, [r7, #28]
 800ad44:	f043 0301 	orr.w	r3, r3, #1
 800ad48:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800ad4a:	69fb      	ldr	r3, [r7, #28]
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3720      	adds	r7, #32
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ad54:	b480      	push	{r7}
 800ad56:	b085      	sub	sp, #20
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	60b9      	str	r1, [r7, #8]
 800ad5e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	4a07      	ldr	r2, [pc, #28]	; (800ad80 <vApplicationGetIdleTaskMemory+0x2c>)
 800ad64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	4a06      	ldr	r2, [pc, #24]	; (800ad84 <vApplicationGetIdleTaskMemory+0x30>)
 800ad6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2280      	movs	r2, #128	; 0x80
 800ad70:	601a      	str	r2, [r3, #0]
}
 800ad72:	bf00      	nop
 800ad74:	3714      	adds	r7, #20
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr
 800ad7e:	bf00      	nop
 800ad80:	20000520 	.word	0x20000520
 800ad84:	200005dc 	.word	0x200005dc

0800ad88 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ad88:	b480      	push	{r7}
 800ad8a:	b085      	sub	sp, #20
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	60f8      	str	r0, [r7, #12]
 800ad90:	60b9      	str	r1, [r7, #8]
 800ad92:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	4a07      	ldr	r2, [pc, #28]	; (800adb4 <vApplicationGetTimerTaskMemory+0x2c>)
 800ad98:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	4a06      	ldr	r2, [pc, #24]	; (800adb8 <vApplicationGetTimerTaskMemory+0x30>)
 800ad9e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ada6:	601a      	str	r2, [r3, #0]
}
 800ada8:	bf00      	nop
 800adaa:	3714      	adds	r7, #20
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr
 800adb4:	200007dc 	.word	0x200007dc
 800adb8:	20000898 	.word	0x20000898

0800adbc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800adbc:	b480      	push	{r7}
 800adbe:	b083      	sub	sp, #12
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f103 0208 	add.w	r2, r3, #8
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f04f 32ff 	mov.w	r2, #4294967295
 800add4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f103 0208 	add.w	r2, r3, #8
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f103 0208 	add.w	r2, r3, #8
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2200      	movs	r2, #0
 800adee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800adf0:	bf00      	nop
 800adf2:	370c      	adds	r7, #12
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr

0800adfc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800adfc:	b480      	push	{r7}
 800adfe:	b083      	sub	sp, #12
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2200      	movs	r2, #0
 800ae08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ae0a:	bf00      	nop
 800ae0c:	370c      	adds	r7, #12
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr

0800ae16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ae16:	b480      	push	{r7}
 800ae18:	b085      	sub	sp, #20
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
 800ae1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	68fa      	ldr	r2, [r7, #12]
 800ae2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	689a      	ldr	r2, [r3, #8]
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	689b      	ldr	r3, [r3, #8]
 800ae38:	683a      	ldr	r2, [r7, #0]
 800ae3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	683a      	ldr	r2, [r7, #0]
 800ae40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	1c5a      	adds	r2, r3, #1
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	601a      	str	r2, [r3, #0]
}
 800ae52:	bf00      	nop
 800ae54:	3714      	adds	r7, #20
 800ae56:	46bd      	mov	sp, r7
 800ae58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5c:	4770      	bx	lr

0800ae5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ae5e:	b480      	push	{r7}
 800ae60:	b085      	sub	sp, #20
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	6078      	str	r0, [r7, #4]
 800ae66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae74:	d103      	bne.n	800ae7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	691b      	ldr	r3, [r3, #16]
 800ae7a:	60fb      	str	r3, [r7, #12]
 800ae7c:	e00c      	b.n	800ae98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	3308      	adds	r3, #8
 800ae82:	60fb      	str	r3, [r7, #12]
 800ae84:	e002      	b.n	800ae8c <vListInsert+0x2e>
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	60fb      	str	r3, [r7, #12]
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	68ba      	ldr	r2, [r7, #8]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d2f6      	bcs.n	800ae86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	685a      	ldr	r2, [r3, #4]
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	683a      	ldr	r2, [r7, #0]
 800aea6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	68fa      	ldr	r2, [r7, #12]
 800aeac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	683a      	ldr	r2, [r7, #0]
 800aeb2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	687a      	ldr	r2, [r7, #4]
 800aeb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	1c5a      	adds	r2, r3, #1
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	601a      	str	r2, [r3, #0]
}
 800aec4:	bf00      	nop
 800aec6:	3714      	adds	r7, #20
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr

0800aed0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aed0:	b480      	push	{r7}
 800aed2:	b085      	sub	sp, #20
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	691b      	ldr	r3, [r3, #16]
 800aedc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	687a      	ldr	r2, [r7, #4]
 800aee4:	6892      	ldr	r2, [r2, #8]
 800aee6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	689b      	ldr	r3, [r3, #8]
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	6852      	ldr	r2, [r2, #4]
 800aef0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	685b      	ldr	r3, [r3, #4]
 800aef6:	687a      	ldr	r2, [r7, #4]
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d103      	bne.n	800af04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	689a      	ldr	r2, [r3, #8]
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	1e5a      	subs	r2, r3, #1
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3714      	adds	r7, #20
 800af1c:	46bd      	mov	sp, r7
 800af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af22:	4770      	bx	lr

0800af24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b084      	sub	sp, #16
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d10a      	bne.n	800af4e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800af38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af3c:	f383 8811 	msr	BASEPRI, r3
 800af40:	f3bf 8f6f 	isb	sy
 800af44:	f3bf 8f4f 	dsb	sy
 800af48:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800af4a:	bf00      	nop
 800af4c:	e7fe      	b.n	800af4c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800af4e:	f002 f981 	bl	800d254 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681a      	ldr	r2, [r3, #0]
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af5a:	68f9      	ldr	r1, [r7, #12]
 800af5c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800af5e:	fb01 f303 	mul.w	r3, r1, r3
 800af62:	441a      	add	r2, r3
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	2200      	movs	r2, #0
 800af6c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681a      	ldr	r2, [r3, #0]
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681a      	ldr	r2, [r3, #0]
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af7e:	3b01      	subs	r3, #1
 800af80:	68f9      	ldr	r1, [r7, #12]
 800af82:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800af84:	fb01 f303 	mul.w	r3, r1, r3
 800af88:	441a      	add	r2, r3
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	22ff      	movs	r2, #255	; 0xff
 800af92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	22ff      	movs	r2, #255	; 0xff
 800af9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d114      	bne.n	800afce <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	691b      	ldr	r3, [r3, #16]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d01a      	beq.n	800afe2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	3310      	adds	r3, #16
 800afb0:	4618      	mov	r0, r3
 800afb2:	f001 fa21 	bl	800c3f8 <xTaskRemoveFromEventList>
 800afb6:	4603      	mov	r3, r0
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d012      	beq.n	800afe2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800afbc:	4b0c      	ldr	r3, [pc, #48]	; (800aff0 <xQueueGenericReset+0xcc>)
 800afbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afc2:	601a      	str	r2, [r3, #0]
 800afc4:	f3bf 8f4f 	dsb	sy
 800afc8:	f3bf 8f6f 	isb	sy
 800afcc:	e009      	b.n	800afe2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	3310      	adds	r3, #16
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7ff fef2 	bl	800adbc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	3324      	adds	r3, #36	; 0x24
 800afdc:	4618      	mov	r0, r3
 800afde:	f7ff feed 	bl	800adbc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800afe2:	f002 f967 	bl	800d2b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800afe6:	2301      	movs	r3, #1
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3710      	adds	r7, #16
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	e000ed04 	.word	0xe000ed04

0800aff4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b08e      	sub	sp, #56	; 0x38
 800aff8:	af02      	add	r7, sp, #8
 800affa:	60f8      	str	r0, [r7, #12]
 800affc:	60b9      	str	r1, [r7, #8]
 800affe:	607a      	str	r2, [r7, #4]
 800b000:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d10a      	bne.n	800b01e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b00c:	f383 8811 	msr	BASEPRI, r3
 800b010:	f3bf 8f6f 	isb	sy
 800b014:	f3bf 8f4f 	dsb	sy
 800b018:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b01a:	bf00      	nop
 800b01c:	e7fe      	b.n	800b01c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d10a      	bne.n	800b03a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b028:	f383 8811 	msr	BASEPRI, r3
 800b02c:	f3bf 8f6f 	isb	sy
 800b030:	f3bf 8f4f 	dsb	sy
 800b034:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b036:	bf00      	nop
 800b038:	e7fe      	b.n	800b038 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d002      	beq.n	800b046 <xQueueGenericCreateStatic+0x52>
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d001      	beq.n	800b04a <xQueueGenericCreateStatic+0x56>
 800b046:	2301      	movs	r3, #1
 800b048:	e000      	b.n	800b04c <xQueueGenericCreateStatic+0x58>
 800b04a:	2300      	movs	r3, #0
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d10a      	bne.n	800b066 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b054:	f383 8811 	msr	BASEPRI, r3
 800b058:	f3bf 8f6f 	isb	sy
 800b05c:	f3bf 8f4f 	dsb	sy
 800b060:	623b      	str	r3, [r7, #32]
}
 800b062:	bf00      	nop
 800b064:	e7fe      	b.n	800b064 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d102      	bne.n	800b072 <xQueueGenericCreateStatic+0x7e>
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d101      	bne.n	800b076 <xQueueGenericCreateStatic+0x82>
 800b072:	2301      	movs	r3, #1
 800b074:	e000      	b.n	800b078 <xQueueGenericCreateStatic+0x84>
 800b076:	2300      	movs	r3, #0
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d10a      	bne.n	800b092 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b080:	f383 8811 	msr	BASEPRI, r3
 800b084:	f3bf 8f6f 	isb	sy
 800b088:	f3bf 8f4f 	dsb	sy
 800b08c:	61fb      	str	r3, [r7, #28]
}
 800b08e:	bf00      	nop
 800b090:	e7fe      	b.n	800b090 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b092:	2350      	movs	r3, #80	; 0x50
 800b094:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	2b50      	cmp	r3, #80	; 0x50
 800b09a:	d00a      	beq.n	800b0b2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a0:	f383 8811 	msr	BASEPRI, r3
 800b0a4:	f3bf 8f6f 	isb	sy
 800b0a8:	f3bf 8f4f 	dsb	sy
 800b0ac:	61bb      	str	r3, [r7, #24]
}
 800b0ae:	bf00      	nop
 800b0b0:	e7fe      	b.n	800b0b0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b0b2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d00d      	beq.n	800b0da <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b0c6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0cc:	9300      	str	r3, [sp, #0]
 800b0ce:	4613      	mov	r3, r2
 800b0d0:	687a      	ldr	r2, [r7, #4]
 800b0d2:	68b9      	ldr	r1, [r7, #8]
 800b0d4:	68f8      	ldr	r0, [r7, #12]
 800b0d6:	f000 f83f 	bl	800b158 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3730      	adds	r7, #48	; 0x30
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b08a      	sub	sp, #40	; 0x28
 800b0e8:	af02      	add	r7, sp, #8
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	4613      	mov	r3, r2
 800b0f0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d10a      	bne.n	800b10e <xQueueGenericCreate+0x2a>
	__asm volatile
 800b0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0fc:	f383 8811 	msr	BASEPRI, r3
 800b100:	f3bf 8f6f 	isb	sy
 800b104:	f3bf 8f4f 	dsb	sy
 800b108:	613b      	str	r3, [r7, #16]
}
 800b10a:	bf00      	nop
 800b10c:	e7fe      	b.n	800b10c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	68ba      	ldr	r2, [r7, #8]
 800b112:	fb02 f303 	mul.w	r3, r2, r3
 800b116:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b118:	69fb      	ldr	r3, [r7, #28]
 800b11a:	3350      	adds	r3, #80	; 0x50
 800b11c:	4618      	mov	r0, r3
 800b11e:	f002 f9bb 	bl	800d498 <pvPortMalloc>
 800b122:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b124:	69bb      	ldr	r3, [r7, #24]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d011      	beq.n	800b14e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b12a:	69bb      	ldr	r3, [r7, #24]
 800b12c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	3350      	adds	r3, #80	; 0x50
 800b132:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b134:	69bb      	ldr	r3, [r7, #24]
 800b136:	2200      	movs	r2, #0
 800b138:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b13c:	79fa      	ldrb	r2, [r7, #7]
 800b13e:	69bb      	ldr	r3, [r7, #24]
 800b140:	9300      	str	r3, [sp, #0]
 800b142:	4613      	mov	r3, r2
 800b144:	697a      	ldr	r2, [r7, #20]
 800b146:	68b9      	ldr	r1, [r7, #8]
 800b148:	68f8      	ldr	r0, [r7, #12]
 800b14a:	f000 f805 	bl	800b158 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b14e:	69bb      	ldr	r3, [r7, #24]
	}
 800b150:	4618      	mov	r0, r3
 800b152:	3720      	adds	r7, #32
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}

0800b158 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b084      	sub	sp, #16
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	60b9      	str	r1, [r7, #8]
 800b162:	607a      	str	r2, [r7, #4]
 800b164:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d103      	bne.n	800b174 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b16c:	69bb      	ldr	r3, [r7, #24]
 800b16e:	69ba      	ldr	r2, [r7, #24]
 800b170:	601a      	str	r2, [r3, #0]
 800b172:	e002      	b.n	800b17a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b174:	69bb      	ldr	r3, [r7, #24]
 800b176:	687a      	ldr	r2, [r7, #4]
 800b178:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b17a:	69bb      	ldr	r3, [r7, #24]
 800b17c:	68fa      	ldr	r2, [r7, #12]
 800b17e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b180:	69bb      	ldr	r3, [r7, #24]
 800b182:	68ba      	ldr	r2, [r7, #8]
 800b184:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b186:	2101      	movs	r1, #1
 800b188:	69b8      	ldr	r0, [r7, #24]
 800b18a:	f7ff fecb 	bl	800af24 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b18e:	69bb      	ldr	r3, [r7, #24]
 800b190:	78fa      	ldrb	r2, [r7, #3]
 800b192:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b196:	bf00      	nop
 800b198:	3710      	adds	r7, #16
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}

0800b19e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b19e:	b580      	push	{r7, lr}
 800b1a0:	b082      	sub	sp, #8
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d00e      	beq.n	800b1ca <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b1be:	2300      	movs	r3, #0
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	2100      	movs	r1, #0
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f000 f837 	bl	800b238 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b1ca:	bf00      	nop
 800b1cc:	3708      	adds	r7, #8
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}

0800b1d2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b1d2:	b580      	push	{r7, lr}
 800b1d4:	b086      	sub	sp, #24
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	4603      	mov	r3, r0
 800b1da:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	617b      	str	r3, [r7, #20]
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b1e4:	79fb      	ldrb	r3, [r7, #7]
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	6939      	ldr	r1, [r7, #16]
 800b1ea:	6978      	ldr	r0, [r7, #20]
 800b1ec:	f7ff ff7a 	bl	800b0e4 <xQueueGenericCreate>
 800b1f0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b1f2:	68f8      	ldr	r0, [r7, #12]
 800b1f4:	f7ff ffd3 	bl	800b19e <prvInitialiseMutex>

		return xNewQueue;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
	}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3718      	adds	r7, #24
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}

0800b202 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b202:	b580      	push	{r7, lr}
 800b204:	b088      	sub	sp, #32
 800b206:	af02      	add	r7, sp, #8
 800b208:	4603      	mov	r3, r0
 800b20a:	6039      	str	r1, [r7, #0]
 800b20c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b20e:	2301      	movs	r3, #1
 800b210:	617b      	str	r3, [r7, #20]
 800b212:	2300      	movs	r3, #0
 800b214:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b216:	79fb      	ldrb	r3, [r7, #7]
 800b218:	9300      	str	r3, [sp, #0]
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	2200      	movs	r2, #0
 800b21e:	6939      	ldr	r1, [r7, #16]
 800b220:	6978      	ldr	r0, [r7, #20]
 800b222:	f7ff fee7 	bl	800aff4 <xQueueGenericCreateStatic>
 800b226:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b228:	68f8      	ldr	r0, [r7, #12]
 800b22a:	f7ff ffb8 	bl	800b19e <prvInitialiseMutex>

		return xNewQueue;
 800b22e:	68fb      	ldr	r3, [r7, #12]
	}
 800b230:	4618      	mov	r0, r3
 800b232:	3718      	adds	r7, #24
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b08e      	sub	sp, #56	; 0x38
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	60f8      	str	r0, [r7, #12]
 800b240:	60b9      	str	r1, [r7, #8]
 800b242:	607a      	str	r2, [r7, #4]
 800b244:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b246:	2300      	movs	r3, #0
 800b248:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b250:	2b00      	cmp	r3, #0
 800b252:	d10a      	bne.n	800b26a <xQueueGenericSend+0x32>
	__asm volatile
 800b254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b258:	f383 8811 	msr	BASEPRI, r3
 800b25c:	f3bf 8f6f 	isb	sy
 800b260:	f3bf 8f4f 	dsb	sy
 800b264:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b266:	bf00      	nop
 800b268:	e7fe      	b.n	800b268 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d103      	bne.n	800b278 <xQueueGenericSend+0x40>
 800b270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b274:	2b00      	cmp	r3, #0
 800b276:	d101      	bne.n	800b27c <xQueueGenericSend+0x44>
 800b278:	2301      	movs	r3, #1
 800b27a:	e000      	b.n	800b27e <xQueueGenericSend+0x46>
 800b27c:	2300      	movs	r3, #0
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d10a      	bne.n	800b298 <xQueueGenericSend+0x60>
	__asm volatile
 800b282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b286:	f383 8811 	msr	BASEPRI, r3
 800b28a:	f3bf 8f6f 	isb	sy
 800b28e:	f3bf 8f4f 	dsb	sy
 800b292:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b294:	bf00      	nop
 800b296:	e7fe      	b.n	800b296 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	2b02      	cmp	r3, #2
 800b29c:	d103      	bne.n	800b2a6 <xQueueGenericSend+0x6e>
 800b29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d101      	bne.n	800b2aa <xQueueGenericSend+0x72>
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	e000      	b.n	800b2ac <xQueueGenericSend+0x74>
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d10a      	bne.n	800b2c6 <xQueueGenericSend+0x8e>
	__asm volatile
 800b2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b4:	f383 8811 	msr	BASEPRI, r3
 800b2b8:	f3bf 8f6f 	isb	sy
 800b2bc:	f3bf 8f4f 	dsb	sy
 800b2c0:	623b      	str	r3, [r7, #32]
}
 800b2c2:	bf00      	nop
 800b2c4:	e7fe      	b.n	800b2c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b2c6:	f001 fa69 	bl	800c79c <xTaskGetSchedulerState>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d102      	bne.n	800b2d6 <xQueueGenericSend+0x9e>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d101      	bne.n	800b2da <xQueueGenericSend+0xa2>
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	e000      	b.n	800b2dc <xQueueGenericSend+0xa4>
 800b2da:	2300      	movs	r3, #0
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d10a      	bne.n	800b2f6 <xQueueGenericSend+0xbe>
	__asm volatile
 800b2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e4:	f383 8811 	msr	BASEPRI, r3
 800b2e8:	f3bf 8f6f 	isb	sy
 800b2ec:	f3bf 8f4f 	dsb	sy
 800b2f0:	61fb      	str	r3, [r7, #28]
}
 800b2f2:	bf00      	nop
 800b2f4:	e7fe      	b.n	800b2f4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b2f6:	f001 ffad 	bl	800d254 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b302:	429a      	cmp	r2, r3
 800b304:	d302      	bcc.n	800b30c <xQueueGenericSend+0xd4>
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	2b02      	cmp	r3, #2
 800b30a:	d129      	bne.n	800b360 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b30c:	683a      	ldr	r2, [r7, #0]
 800b30e:	68b9      	ldr	r1, [r7, #8]
 800b310:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b312:	f000 fa0b 	bl	800b72c <prvCopyDataToQueue>
 800b316:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d010      	beq.n	800b342 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b322:	3324      	adds	r3, #36	; 0x24
 800b324:	4618      	mov	r0, r3
 800b326:	f001 f867 	bl	800c3f8 <xTaskRemoveFromEventList>
 800b32a:	4603      	mov	r3, r0
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d013      	beq.n	800b358 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b330:	4b3f      	ldr	r3, [pc, #252]	; (800b430 <xQueueGenericSend+0x1f8>)
 800b332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b336:	601a      	str	r2, [r3, #0]
 800b338:	f3bf 8f4f 	dsb	sy
 800b33c:	f3bf 8f6f 	isb	sy
 800b340:	e00a      	b.n	800b358 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b344:	2b00      	cmp	r3, #0
 800b346:	d007      	beq.n	800b358 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b348:	4b39      	ldr	r3, [pc, #228]	; (800b430 <xQueueGenericSend+0x1f8>)
 800b34a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b34e:	601a      	str	r2, [r3, #0]
 800b350:	f3bf 8f4f 	dsb	sy
 800b354:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b358:	f001 ffac 	bl	800d2b4 <vPortExitCritical>
				return pdPASS;
 800b35c:	2301      	movs	r3, #1
 800b35e:	e063      	b.n	800b428 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d103      	bne.n	800b36e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b366:	f001 ffa5 	bl	800d2b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b36a:	2300      	movs	r3, #0
 800b36c:	e05c      	b.n	800b428 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b36e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b370:	2b00      	cmp	r3, #0
 800b372:	d106      	bne.n	800b382 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b374:	f107 0314 	add.w	r3, r7, #20
 800b378:	4618      	mov	r0, r3
 800b37a:	f001 f8a1 	bl	800c4c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b37e:	2301      	movs	r3, #1
 800b380:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b382:	f001 ff97 	bl	800d2b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b386:	f000 fe0d 	bl	800bfa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b38a:	f001 ff63 	bl	800d254 <vPortEnterCritical>
 800b38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b390:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b394:	b25b      	sxtb	r3, r3
 800b396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b39a:	d103      	bne.n	800b3a4 <xQueueGenericSend+0x16c>
 800b39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b39e:	2200      	movs	r2, #0
 800b3a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b3aa:	b25b      	sxtb	r3, r3
 800b3ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3b0:	d103      	bne.n	800b3ba <xQueueGenericSend+0x182>
 800b3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b3ba:	f001 ff7b 	bl	800d2b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b3be:	1d3a      	adds	r2, r7, #4
 800b3c0:	f107 0314 	add.w	r3, r7, #20
 800b3c4:	4611      	mov	r1, r2
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f001 f890 	bl	800c4ec <xTaskCheckForTimeOut>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d124      	bne.n	800b41c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b3d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b3d4:	f000 faa2 	bl	800b91c <prvIsQueueFull>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d018      	beq.n	800b410 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e0:	3310      	adds	r3, #16
 800b3e2:	687a      	ldr	r2, [r7, #4]
 800b3e4:	4611      	mov	r1, r2
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f000 ffb6 	bl	800c358 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b3ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b3ee:	f000 fa2d 	bl	800b84c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b3f2:	f000 fde5 	bl	800bfc0 <xTaskResumeAll>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	f47f af7c 	bne.w	800b2f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b3fe:	4b0c      	ldr	r3, [pc, #48]	; (800b430 <xQueueGenericSend+0x1f8>)
 800b400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b404:	601a      	str	r2, [r3, #0]
 800b406:	f3bf 8f4f 	dsb	sy
 800b40a:	f3bf 8f6f 	isb	sy
 800b40e:	e772      	b.n	800b2f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b412:	f000 fa1b 	bl	800b84c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b416:	f000 fdd3 	bl	800bfc0 <xTaskResumeAll>
 800b41a:	e76c      	b.n	800b2f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b41c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b41e:	f000 fa15 	bl	800b84c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b422:	f000 fdcd 	bl	800bfc0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b426:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3738      	adds	r7, #56	; 0x38
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	e000ed04 	.word	0xe000ed04

0800b434 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b090      	sub	sp, #64	; 0x40
 800b438:	af00      	add	r7, sp, #0
 800b43a:	60f8      	str	r0, [r7, #12]
 800b43c:	60b9      	str	r1, [r7, #8]
 800b43e:	607a      	str	r2, [r7, #4]
 800b440:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d10a      	bne.n	800b462 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b450:	f383 8811 	msr	BASEPRI, r3
 800b454:	f3bf 8f6f 	isb	sy
 800b458:	f3bf 8f4f 	dsb	sy
 800b45c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b45e:	bf00      	nop
 800b460:	e7fe      	b.n	800b460 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d103      	bne.n	800b470 <xQueueGenericSendFromISR+0x3c>
 800b468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b46a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d101      	bne.n	800b474 <xQueueGenericSendFromISR+0x40>
 800b470:	2301      	movs	r3, #1
 800b472:	e000      	b.n	800b476 <xQueueGenericSendFromISR+0x42>
 800b474:	2300      	movs	r3, #0
 800b476:	2b00      	cmp	r3, #0
 800b478:	d10a      	bne.n	800b490 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b47e:	f383 8811 	msr	BASEPRI, r3
 800b482:	f3bf 8f6f 	isb	sy
 800b486:	f3bf 8f4f 	dsb	sy
 800b48a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b48c:	bf00      	nop
 800b48e:	e7fe      	b.n	800b48e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	2b02      	cmp	r3, #2
 800b494:	d103      	bne.n	800b49e <xQueueGenericSendFromISR+0x6a>
 800b496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b49a:	2b01      	cmp	r3, #1
 800b49c:	d101      	bne.n	800b4a2 <xQueueGenericSendFromISR+0x6e>
 800b49e:	2301      	movs	r3, #1
 800b4a0:	e000      	b.n	800b4a4 <xQueueGenericSendFromISR+0x70>
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d10a      	bne.n	800b4be <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ac:	f383 8811 	msr	BASEPRI, r3
 800b4b0:	f3bf 8f6f 	isb	sy
 800b4b4:	f3bf 8f4f 	dsb	sy
 800b4b8:	623b      	str	r3, [r7, #32]
}
 800b4ba:	bf00      	nop
 800b4bc:	e7fe      	b.n	800b4bc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b4be:	f001 ffab 	bl	800d418 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b4c2:	f3ef 8211 	mrs	r2, BASEPRI
 800b4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ca:	f383 8811 	msr	BASEPRI, r3
 800b4ce:	f3bf 8f6f 	isb	sy
 800b4d2:	f3bf 8f4f 	dsb	sy
 800b4d6:	61fa      	str	r2, [r7, #28]
 800b4d8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b4da:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b4dc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d302      	bcc.n	800b4f0 <xQueueGenericSendFromISR+0xbc>
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	2b02      	cmp	r3, #2
 800b4ee:	d12f      	bne.n	800b550 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b4f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4fe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b500:	683a      	ldr	r2, [r7, #0]
 800b502:	68b9      	ldr	r1, [r7, #8]
 800b504:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b506:	f000 f911 	bl	800b72c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b50a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b50e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b512:	d112      	bne.n	800b53a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d016      	beq.n	800b54a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b51e:	3324      	adds	r3, #36	; 0x24
 800b520:	4618      	mov	r0, r3
 800b522:	f000 ff69 	bl	800c3f8 <xTaskRemoveFromEventList>
 800b526:	4603      	mov	r3, r0
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d00e      	beq.n	800b54a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d00b      	beq.n	800b54a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2201      	movs	r2, #1
 800b536:	601a      	str	r2, [r3, #0]
 800b538:	e007      	b.n	800b54a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b53a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b53e:	3301      	adds	r3, #1
 800b540:	b2db      	uxtb	r3, r3
 800b542:	b25a      	sxtb	r2, r3
 800b544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b546:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b54a:	2301      	movs	r3, #1
 800b54c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b54e:	e001      	b.n	800b554 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b550:	2300      	movs	r3, #0
 800b552:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b556:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b55e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b562:	4618      	mov	r0, r3
 800b564:	3740      	adds	r7, #64	; 0x40
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
	...

0800b56c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b08c      	sub	sp, #48	; 0x30
 800b570:	af00      	add	r7, sp, #0
 800b572:	60f8      	str	r0, [r7, #12]
 800b574:	60b9      	str	r1, [r7, #8]
 800b576:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b578:	2300      	movs	r3, #0
 800b57a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b582:	2b00      	cmp	r3, #0
 800b584:	d10a      	bne.n	800b59c <xQueueReceive+0x30>
	__asm volatile
 800b586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b58a:	f383 8811 	msr	BASEPRI, r3
 800b58e:	f3bf 8f6f 	isb	sy
 800b592:	f3bf 8f4f 	dsb	sy
 800b596:	623b      	str	r3, [r7, #32]
}
 800b598:	bf00      	nop
 800b59a:	e7fe      	b.n	800b59a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d103      	bne.n	800b5aa <xQueueReceive+0x3e>
 800b5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d101      	bne.n	800b5ae <xQueueReceive+0x42>
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	e000      	b.n	800b5b0 <xQueueReceive+0x44>
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d10a      	bne.n	800b5ca <xQueueReceive+0x5e>
	__asm volatile
 800b5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b8:	f383 8811 	msr	BASEPRI, r3
 800b5bc:	f3bf 8f6f 	isb	sy
 800b5c0:	f3bf 8f4f 	dsb	sy
 800b5c4:	61fb      	str	r3, [r7, #28]
}
 800b5c6:	bf00      	nop
 800b5c8:	e7fe      	b.n	800b5c8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b5ca:	f001 f8e7 	bl	800c79c <xTaskGetSchedulerState>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d102      	bne.n	800b5da <xQueueReceive+0x6e>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d101      	bne.n	800b5de <xQueueReceive+0x72>
 800b5da:	2301      	movs	r3, #1
 800b5dc:	e000      	b.n	800b5e0 <xQueueReceive+0x74>
 800b5de:	2300      	movs	r3, #0
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d10a      	bne.n	800b5fa <xQueueReceive+0x8e>
	__asm volatile
 800b5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e8:	f383 8811 	msr	BASEPRI, r3
 800b5ec:	f3bf 8f6f 	isb	sy
 800b5f0:	f3bf 8f4f 	dsb	sy
 800b5f4:	61bb      	str	r3, [r7, #24]
}
 800b5f6:	bf00      	nop
 800b5f8:	e7fe      	b.n	800b5f8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b5fa:	f001 fe2b 	bl	800d254 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b602:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b606:	2b00      	cmp	r3, #0
 800b608:	d01f      	beq.n	800b64a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b60a:	68b9      	ldr	r1, [r7, #8]
 800b60c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b60e:	f000 f8f7 	bl	800b800 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b614:	1e5a      	subs	r2, r3, #1
 800b616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b618:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b61c:	691b      	ldr	r3, [r3, #16]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d00f      	beq.n	800b642 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b624:	3310      	adds	r3, #16
 800b626:	4618      	mov	r0, r3
 800b628:	f000 fee6 	bl	800c3f8 <xTaskRemoveFromEventList>
 800b62c:	4603      	mov	r3, r0
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d007      	beq.n	800b642 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b632:	4b3d      	ldr	r3, [pc, #244]	; (800b728 <xQueueReceive+0x1bc>)
 800b634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b638:	601a      	str	r2, [r3, #0]
 800b63a:	f3bf 8f4f 	dsb	sy
 800b63e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b642:	f001 fe37 	bl	800d2b4 <vPortExitCritical>
				return pdPASS;
 800b646:	2301      	movs	r3, #1
 800b648:	e069      	b.n	800b71e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d103      	bne.n	800b658 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b650:	f001 fe30 	bl	800d2b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b654:	2300      	movs	r3, #0
 800b656:	e062      	b.n	800b71e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d106      	bne.n	800b66c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b65e:	f107 0310 	add.w	r3, r7, #16
 800b662:	4618      	mov	r0, r3
 800b664:	f000 ff2c 	bl	800c4c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b668:	2301      	movs	r3, #1
 800b66a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b66c:	f001 fe22 	bl	800d2b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b670:	f000 fc98 	bl	800bfa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b674:	f001 fdee 	bl	800d254 <vPortEnterCritical>
 800b678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b67a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b67e:	b25b      	sxtb	r3, r3
 800b680:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b684:	d103      	bne.n	800b68e <xQueueReceive+0x122>
 800b686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b688:	2200      	movs	r2, #0
 800b68a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b690:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b694:	b25b      	sxtb	r3, r3
 800b696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b69a:	d103      	bne.n	800b6a4 <xQueueReceive+0x138>
 800b69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b69e:	2200      	movs	r2, #0
 800b6a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b6a4:	f001 fe06 	bl	800d2b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b6a8:	1d3a      	adds	r2, r7, #4
 800b6aa:	f107 0310 	add.w	r3, r7, #16
 800b6ae:	4611      	mov	r1, r2
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f000 ff1b 	bl	800c4ec <xTaskCheckForTimeOut>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d123      	bne.n	800b704 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b6bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6be:	f000 f917 	bl	800b8f0 <prvIsQueueEmpty>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d017      	beq.n	800b6f8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ca:	3324      	adds	r3, #36	; 0x24
 800b6cc:	687a      	ldr	r2, [r7, #4]
 800b6ce:	4611      	mov	r1, r2
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f000 fe41 	bl	800c358 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b6d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6d8:	f000 f8b8 	bl	800b84c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b6dc:	f000 fc70 	bl	800bfc0 <xTaskResumeAll>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d189      	bne.n	800b5fa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b6e6:	4b10      	ldr	r3, [pc, #64]	; (800b728 <xQueueReceive+0x1bc>)
 800b6e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6ec:	601a      	str	r2, [r3, #0]
 800b6ee:	f3bf 8f4f 	dsb	sy
 800b6f2:	f3bf 8f6f 	isb	sy
 800b6f6:	e780      	b.n	800b5fa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b6f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6fa:	f000 f8a7 	bl	800b84c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b6fe:	f000 fc5f 	bl	800bfc0 <xTaskResumeAll>
 800b702:	e77a      	b.n	800b5fa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b704:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b706:	f000 f8a1 	bl	800b84c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b70a:	f000 fc59 	bl	800bfc0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b70e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b710:	f000 f8ee 	bl	800b8f0 <prvIsQueueEmpty>
 800b714:	4603      	mov	r3, r0
 800b716:	2b00      	cmp	r3, #0
 800b718:	f43f af6f 	beq.w	800b5fa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b71c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3730      	adds	r7, #48	; 0x30
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	e000ed04 	.word	0xe000ed04

0800b72c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b086      	sub	sp, #24
 800b730:	af00      	add	r7, sp, #0
 800b732:	60f8      	str	r0, [r7, #12]
 800b734:	60b9      	str	r1, [r7, #8]
 800b736:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b738:	2300      	movs	r3, #0
 800b73a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b740:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b746:	2b00      	cmp	r3, #0
 800b748:	d10d      	bne.n	800b766 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d14d      	bne.n	800b7ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	689b      	ldr	r3, [r3, #8]
 800b756:	4618      	mov	r0, r3
 800b758:	f001 f83e 	bl	800c7d8 <xTaskPriorityDisinherit>
 800b75c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2200      	movs	r2, #0
 800b762:	609a      	str	r2, [r3, #8]
 800b764:	e043      	b.n	800b7ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d119      	bne.n	800b7a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	6858      	ldr	r0, [r3, #4]
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b774:	461a      	mov	r2, r3
 800b776:	68b9      	ldr	r1, [r7, #8]
 800b778:	f002 f9c8 	bl	800db0c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	685a      	ldr	r2, [r3, #4]
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b784:	441a      	add	r2, r3
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	685a      	ldr	r2, [r3, #4]
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	689b      	ldr	r3, [r3, #8]
 800b792:	429a      	cmp	r2, r3
 800b794:	d32b      	bcc.n	800b7ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	681a      	ldr	r2, [r3, #0]
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	605a      	str	r2, [r3, #4]
 800b79e:	e026      	b.n	800b7ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	68d8      	ldr	r0, [r3, #12]
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7a8:	461a      	mov	r2, r3
 800b7aa:	68b9      	ldr	r1, [r7, #8]
 800b7ac:	f002 f9ae 	bl	800db0c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	68da      	ldr	r2, [r3, #12]
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7b8:	425b      	negs	r3, r3
 800b7ba:	441a      	add	r2, r3
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	68da      	ldr	r2, [r3, #12]
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	d207      	bcs.n	800b7dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	689a      	ldr	r2, [r3, #8]
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7d4:	425b      	negs	r3, r3
 800b7d6:	441a      	add	r2, r3
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2b02      	cmp	r3, #2
 800b7e0:	d105      	bne.n	800b7ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d002      	beq.n	800b7ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	3b01      	subs	r3, #1
 800b7ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	1c5a      	adds	r2, r3, #1
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b7f6:	697b      	ldr	r3, [r7, #20]
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3718      	adds	r7, #24
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}

0800b800 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b082      	sub	sp, #8
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d018      	beq.n	800b844 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	68da      	ldr	r2, [r3, #12]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b81a:	441a      	add	r2, r3
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	68da      	ldr	r2, [r3, #12]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	689b      	ldr	r3, [r3, #8]
 800b828:	429a      	cmp	r2, r3
 800b82a:	d303      	bcc.n	800b834 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681a      	ldr	r2, [r3, #0]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	68d9      	ldr	r1, [r3, #12]
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b83c:	461a      	mov	r2, r3
 800b83e:	6838      	ldr	r0, [r7, #0]
 800b840:	f002 f964 	bl	800db0c <memcpy>
	}
}
 800b844:	bf00      	nop
 800b846:	3708      	adds	r7, #8
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b084      	sub	sp, #16
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b854:	f001 fcfe 	bl	800d254 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b85e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b860:	e011      	b.n	800b886 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b866:	2b00      	cmp	r3, #0
 800b868:	d012      	beq.n	800b890 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	3324      	adds	r3, #36	; 0x24
 800b86e:	4618      	mov	r0, r3
 800b870:	f000 fdc2 	bl	800c3f8 <xTaskRemoveFromEventList>
 800b874:	4603      	mov	r3, r0
 800b876:	2b00      	cmp	r3, #0
 800b878:	d001      	beq.n	800b87e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b87a:	f000 fe99 	bl	800c5b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b87e:	7bfb      	ldrb	r3, [r7, #15]
 800b880:	3b01      	subs	r3, #1
 800b882:	b2db      	uxtb	r3, r3
 800b884:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	dce9      	bgt.n	800b862 <prvUnlockQueue+0x16>
 800b88e:	e000      	b.n	800b892 <prvUnlockQueue+0x46>
					break;
 800b890:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	22ff      	movs	r2, #255	; 0xff
 800b896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b89a:	f001 fd0b 	bl	800d2b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b89e:	f001 fcd9 	bl	800d254 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b8a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b8aa:	e011      	b.n	800b8d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	691b      	ldr	r3, [r3, #16]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d012      	beq.n	800b8da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	3310      	adds	r3, #16
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f000 fd9d 	bl	800c3f8 <xTaskRemoveFromEventList>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d001      	beq.n	800b8c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b8c4:	f000 fe74 	bl	800c5b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b8c8:	7bbb      	ldrb	r3, [r7, #14]
 800b8ca:	3b01      	subs	r3, #1
 800b8cc:	b2db      	uxtb	r3, r3
 800b8ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b8d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	dce9      	bgt.n	800b8ac <prvUnlockQueue+0x60>
 800b8d8:	e000      	b.n	800b8dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b8da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	22ff      	movs	r2, #255	; 0xff
 800b8e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b8e4:	f001 fce6 	bl	800d2b4 <vPortExitCritical>
}
 800b8e8:	bf00      	nop
 800b8ea:	3710      	adds	r7, #16
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b084      	sub	sp, #16
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b8f8:	f001 fcac 	bl	800d254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b900:	2b00      	cmp	r3, #0
 800b902:	d102      	bne.n	800b90a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b904:	2301      	movs	r3, #1
 800b906:	60fb      	str	r3, [r7, #12]
 800b908:	e001      	b.n	800b90e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b90a:	2300      	movs	r3, #0
 800b90c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b90e:	f001 fcd1 	bl	800d2b4 <vPortExitCritical>

	return xReturn;
 800b912:	68fb      	ldr	r3, [r7, #12]
}
 800b914:	4618      	mov	r0, r3
 800b916:	3710      	adds	r7, #16
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}

0800b91c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b084      	sub	sp, #16
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b924:	f001 fc96 	bl	800d254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b930:	429a      	cmp	r2, r3
 800b932:	d102      	bne.n	800b93a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b934:	2301      	movs	r3, #1
 800b936:	60fb      	str	r3, [r7, #12]
 800b938:	e001      	b.n	800b93e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b93a:	2300      	movs	r3, #0
 800b93c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b93e:	f001 fcb9 	bl	800d2b4 <vPortExitCritical>

	return xReturn;
 800b942:	68fb      	ldr	r3, [r7, #12]
}
 800b944:	4618      	mov	r0, r3
 800b946:	3710      	adds	r7, #16
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}

0800b94c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b94c:	b480      	push	{r7}
 800b94e:	b085      	sub	sp, #20
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b956:	2300      	movs	r3, #0
 800b958:	60fb      	str	r3, [r7, #12]
 800b95a:	e014      	b.n	800b986 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b95c:	4a0f      	ldr	r2, [pc, #60]	; (800b99c <vQueueAddToRegistry+0x50>)
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d10b      	bne.n	800b980 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b968:	490c      	ldr	r1, [pc, #48]	; (800b99c <vQueueAddToRegistry+0x50>)
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	683a      	ldr	r2, [r7, #0]
 800b96e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b972:	4a0a      	ldr	r2, [pc, #40]	; (800b99c <vQueueAddToRegistry+0x50>)
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	00db      	lsls	r3, r3, #3
 800b978:	4413      	add	r3, r2
 800b97a:	687a      	ldr	r2, [r7, #4]
 800b97c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b97e:	e006      	b.n	800b98e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	3301      	adds	r3, #1
 800b984:	60fb      	str	r3, [r7, #12]
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	2b07      	cmp	r3, #7
 800b98a:	d9e7      	bls.n	800b95c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b98c:	bf00      	nop
 800b98e:	bf00      	nop
 800b990:	3714      	adds	r7, #20
 800b992:	46bd      	mov	sp, r7
 800b994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b998:	4770      	bx	lr
 800b99a:	bf00      	nop
 800b99c:	200056e0 	.word	0x200056e0

0800b9a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b086      	sub	sp, #24
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	60f8      	str	r0, [r7, #12]
 800b9a8:	60b9      	str	r1, [r7, #8]
 800b9aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b9b0:	f001 fc50 	bl	800d254 <vPortEnterCritical>
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9ba:	b25b      	sxtb	r3, r3
 800b9bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9c0:	d103      	bne.n	800b9ca <vQueueWaitForMessageRestricted+0x2a>
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9d0:	b25b      	sxtb	r3, r3
 800b9d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9d6:	d103      	bne.n	800b9e0 <vQueueWaitForMessageRestricted+0x40>
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b9e0:	f001 fc68 	bl	800d2b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d106      	bne.n	800b9fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	3324      	adds	r3, #36	; 0x24
 800b9f0:	687a      	ldr	r2, [r7, #4]
 800b9f2:	68b9      	ldr	r1, [r7, #8]
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f000 fcd3 	bl	800c3a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b9fa:	6978      	ldr	r0, [r7, #20]
 800b9fc:	f7ff ff26 	bl	800b84c <prvUnlockQueue>
	}
 800ba00:	bf00      	nop
 800ba02:	3718      	adds	r7, #24
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}

0800ba08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b08e      	sub	sp, #56	; 0x38
 800ba0c:	af04      	add	r7, sp, #16
 800ba0e:	60f8      	str	r0, [r7, #12]
 800ba10:	60b9      	str	r1, [r7, #8]
 800ba12:	607a      	str	r2, [r7, #4]
 800ba14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ba16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d10a      	bne.n	800ba32 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ba1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba20:	f383 8811 	msr	BASEPRI, r3
 800ba24:	f3bf 8f6f 	isb	sy
 800ba28:	f3bf 8f4f 	dsb	sy
 800ba2c:	623b      	str	r3, [r7, #32]
}
 800ba2e:	bf00      	nop
 800ba30:	e7fe      	b.n	800ba30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ba32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d10a      	bne.n	800ba4e <xTaskCreateStatic+0x46>
	__asm volatile
 800ba38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba3c:	f383 8811 	msr	BASEPRI, r3
 800ba40:	f3bf 8f6f 	isb	sy
 800ba44:	f3bf 8f4f 	dsb	sy
 800ba48:	61fb      	str	r3, [r7, #28]
}
 800ba4a:	bf00      	nop
 800ba4c:	e7fe      	b.n	800ba4c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ba4e:	23bc      	movs	r3, #188	; 0xbc
 800ba50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ba52:	693b      	ldr	r3, [r7, #16]
 800ba54:	2bbc      	cmp	r3, #188	; 0xbc
 800ba56:	d00a      	beq.n	800ba6e <xTaskCreateStatic+0x66>
	__asm volatile
 800ba58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba5c:	f383 8811 	msr	BASEPRI, r3
 800ba60:	f3bf 8f6f 	isb	sy
 800ba64:	f3bf 8f4f 	dsb	sy
 800ba68:	61bb      	str	r3, [r7, #24]
}
 800ba6a:	bf00      	nop
 800ba6c:	e7fe      	b.n	800ba6c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ba6e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ba70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d01e      	beq.n	800bab4 <xTaskCreateStatic+0xac>
 800ba76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d01b      	beq.n	800bab4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ba7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba7e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ba80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba84:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ba86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba88:	2202      	movs	r2, #2
 800ba8a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ba8e:	2300      	movs	r3, #0
 800ba90:	9303      	str	r3, [sp, #12]
 800ba92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba94:	9302      	str	r3, [sp, #8]
 800ba96:	f107 0314 	add.w	r3, r7, #20
 800ba9a:	9301      	str	r3, [sp, #4]
 800ba9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9e:	9300      	str	r3, [sp, #0]
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	687a      	ldr	r2, [r7, #4]
 800baa4:	68b9      	ldr	r1, [r7, #8]
 800baa6:	68f8      	ldr	r0, [r7, #12]
 800baa8:	f000 f850 	bl	800bb4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800baac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800baae:	f000 f8f3 	bl	800bc98 <prvAddNewTaskToReadyList>
 800bab2:	e001      	b.n	800bab8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bab4:	2300      	movs	r3, #0
 800bab6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bab8:	697b      	ldr	r3, [r7, #20]
	}
 800baba:	4618      	mov	r0, r3
 800babc:	3728      	adds	r7, #40	; 0x28
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}

0800bac2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bac2:	b580      	push	{r7, lr}
 800bac4:	b08c      	sub	sp, #48	; 0x30
 800bac6:	af04      	add	r7, sp, #16
 800bac8:	60f8      	str	r0, [r7, #12]
 800baca:	60b9      	str	r1, [r7, #8]
 800bacc:	603b      	str	r3, [r7, #0]
 800bace:	4613      	mov	r3, r2
 800bad0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bad2:	88fb      	ldrh	r3, [r7, #6]
 800bad4:	009b      	lsls	r3, r3, #2
 800bad6:	4618      	mov	r0, r3
 800bad8:	f001 fcde 	bl	800d498 <pvPortMalloc>
 800badc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d00e      	beq.n	800bb02 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bae4:	20bc      	movs	r0, #188	; 0xbc
 800bae6:	f001 fcd7 	bl	800d498 <pvPortMalloc>
 800baea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800baec:	69fb      	ldr	r3, [r7, #28]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d003      	beq.n	800bafa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800baf2:	69fb      	ldr	r3, [r7, #28]
 800baf4:	697a      	ldr	r2, [r7, #20]
 800baf6:	631a      	str	r2, [r3, #48]	; 0x30
 800baf8:	e005      	b.n	800bb06 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bafa:	6978      	ldr	r0, [r7, #20]
 800bafc:	f001 fd98 	bl	800d630 <vPortFree>
 800bb00:	e001      	b.n	800bb06 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bb02:	2300      	movs	r3, #0
 800bb04:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bb06:	69fb      	ldr	r3, [r7, #28]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d017      	beq.n	800bb3c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bb0c:	69fb      	ldr	r3, [r7, #28]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bb14:	88fa      	ldrh	r2, [r7, #6]
 800bb16:	2300      	movs	r3, #0
 800bb18:	9303      	str	r3, [sp, #12]
 800bb1a:	69fb      	ldr	r3, [r7, #28]
 800bb1c:	9302      	str	r3, [sp, #8]
 800bb1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb20:	9301      	str	r3, [sp, #4]
 800bb22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb24:	9300      	str	r3, [sp, #0]
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	68b9      	ldr	r1, [r7, #8]
 800bb2a:	68f8      	ldr	r0, [r7, #12]
 800bb2c:	f000 f80e 	bl	800bb4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bb30:	69f8      	ldr	r0, [r7, #28]
 800bb32:	f000 f8b1 	bl	800bc98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bb36:	2301      	movs	r3, #1
 800bb38:	61bb      	str	r3, [r7, #24]
 800bb3a:	e002      	b.n	800bb42 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bb3c:	f04f 33ff 	mov.w	r3, #4294967295
 800bb40:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bb42:	69bb      	ldr	r3, [r7, #24]
	}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3720      	adds	r7, #32
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}

0800bb4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b088      	sub	sp, #32
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	60f8      	str	r0, [r7, #12]
 800bb54:	60b9      	str	r1, [r7, #8]
 800bb56:	607a      	str	r2, [r7, #4]
 800bb58:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bb5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb5c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	009b      	lsls	r3, r3, #2
 800bb62:	461a      	mov	r2, r3
 800bb64:	21a5      	movs	r1, #165	; 0xa5
 800bb66:	f001 fff9 	bl	800db5c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bb6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bb74:	3b01      	subs	r3, #1
 800bb76:	009b      	lsls	r3, r3, #2
 800bb78:	4413      	add	r3, r2
 800bb7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bb7c:	69bb      	ldr	r3, [r7, #24]
 800bb7e:	f023 0307 	bic.w	r3, r3, #7
 800bb82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bb84:	69bb      	ldr	r3, [r7, #24]
 800bb86:	f003 0307 	and.w	r3, r3, #7
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d00a      	beq.n	800bba4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800bb8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb92:	f383 8811 	msr	BASEPRI, r3
 800bb96:	f3bf 8f6f 	isb	sy
 800bb9a:	f3bf 8f4f 	dsb	sy
 800bb9e:	617b      	str	r3, [r7, #20]
}
 800bba0:	bf00      	nop
 800bba2:	e7fe      	b.n	800bba2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d01f      	beq.n	800bbea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bbaa:	2300      	movs	r3, #0
 800bbac:	61fb      	str	r3, [r7, #28]
 800bbae:	e012      	b.n	800bbd6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bbb0:	68ba      	ldr	r2, [r7, #8]
 800bbb2:	69fb      	ldr	r3, [r7, #28]
 800bbb4:	4413      	add	r3, r2
 800bbb6:	7819      	ldrb	r1, [r3, #0]
 800bbb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbba:	69fb      	ldr	r3, [r7, #28]
 800bbbc:	4413      	add	r3, r2
 800bbbe:	3334      	adds	r3, #52	; 0x34
 800bbc0:	460a      	mov	r2, r1
 800bbc2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bbc4:	68ba      	ldr	r2, [r7, #8]
 800bbc6:	69fb      	ldr	r3, [r7, #28]
 800bbc8:	4413      	add	r3, r2
 800bbca:	781b      	ldrb	r3, [r3, #0]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d006      	beq.n	800bbde <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bbd0:	69fb      	ldr	r3, [r7, #28]
 800bbd2:	3301      	adds	r3, #1
 800bbd4:	61fb      	str	r3, [r7, #28]
 800bbd6:	69fb      	ldr	r3, [r7, #28]
 800bbd8:	2b0f      	cmp	r3, #15
 800bbda:	d9e9      	bls.n	800bbb0 <prvInitialiseNewTask+0x64>
 800bbdc:	e000      	b.n	800bbe0 <prvInitialiseNewTask+0x94>
			{
				break;
 800bbde:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bbe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bbe8:	e003      	b.n	800bbf2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bbea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbec:	2200      	movs	r2, #0
 800bbee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bbf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf4:	2b37      	cmp	r3, #55	; 0x37
 800bbf6:	d901      	bls.n	800bbfc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bbf8:	2337      	movs	r3, #55	; 0x37
 800bbfa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc00:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bc02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc06:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bc08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc10:	3304      	adds	r3, #4
 800bc12:	4618      	mov	r0, r3
 800bc14:	f7ff f8f2 	bl	800adfc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bc18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc1a:	3318      	adds	r3, #24
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f7ff f8ed 	bl	800adfc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc26:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bc2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc30:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc36:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bc40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc42:	2200      	movs	r2, #0
 800bc44:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bc48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc4a:	3354      	adds	r3, #84	; 0x54
 800bc4c:	2260      	movs	r2, #96	; 0x60
 800bc4e:	2100      	movs	r1, #0
 800bc50:	4618      	mov	r0, r3
 800bc52:	f001 ff83 	bl	800db5c <memset>
 800bc56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc58:	4a0c      	ldr	r2, [pc, #48]	; (800bc8c <prvInitialiseNewTask+0x140>)
 800bc5a:	659a      	str	r2, [r3, #88]	; 0x58
 800bc5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5e:	4a0c      	ldr	r2, [pc, #48]	; (800bc90 <prvInitialiseNewTask+0x144>)
 800bc60:	65da      	str	r2, [r3, #92]	; 0x5c
 800bc62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc64:	4a0b      	ldr	r2, [pc, #44]	; (800bc94 <prvInitialiseNewTask+0x148>)
 800bc66:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bc68:	683a      	ldr	r2, [r7, #0]
 800bc6a:	68f9      	ldr	r1, [r7, #12]
 800bc6c:	69b8      	ldr	r0, [r7, #24]
 800bc6e:	f001 f9c3 	bl	800cff8 <pxPortInitialiseStack>
 800bc72:	4602      	mov	r2, r0
 800bc74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc76:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d002      	beq.n	800bc84 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc82:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc84:	bf00      	nop
 800bc86:	3720      	adds	r7, #32
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}
 800bc8c:	080130ec 	.word	0x080130ec
 800bc90:	0801310c 	.word	0x0801310c
 800bc94:	080130cc 	.word	0x080130cc

0800bc98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bca0:	f001 fad8 	bl	800d254 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bca4:	4b2d      	ldr	r3, [pc, #180]	; (800bd5c <prvAddNewTaskToReadyList+0xc4>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	3301      	adds	r3, #1
 800bcaa:	4a2c      	ldr	r2, [pc, #176]	; (800bd5c <prvAddNewTaskToReadyList+0xc4>)
 800bcac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bcae:	4b2c      	ldr	r3, [pc, #176]	; (800bd60 <prvAddNewTaskToReadyList+0xc8>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d109      	bne.n	800bcca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bcb6:	4a2a      	ldr	r2, [pc, #168]	; (800bd60 <prvAddNewTaskToReadyList+0xc8>)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bcbc:	4b27      	ldr	r3, [pc, #156]	; (800bd5c <prvAddNewTaskToReadyList+0xc4>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	2b01      	cmp	r3, #1
 800bcc2:	d110      	bne.n	800bce6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bcc4:	f000 fc98 	bl	800c5f8 <prvInitialiseTaskLists>
 800bcc8:	e00d      	b.n	800bce6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bcca:	4b26      	ldr	r3, [pc, #152]	; (800bd64 <prvAddNewTaskToReadyList+0xcc>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d109      	bne.n	800bce6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bcd2:	4b23      	ldr	r3, [pc, #140]	; (800bd60 <prvAddNewTaskToReadyList+0xc8>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d802      	bhi.n	800bce6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bce0:	4a1f      	ldr	r2, [pc, #124]	; (800bd60 <prvAddNewTaskToReadyList+0xc8>)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bce6:	4b20      	ldr	r3, [pc, #128]	; (800bd68 <prvAddNewTaskToReadyList+0xd0>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	3301      	adds	r3, #1
 800bcec:	4a1e      	ldr	r2, [pc, #120]	; (800bd68 <prvAddNewTaskToReadyList+0xd0>)
 800bcee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bcf0:	4b1d      	ldr	r3, [pc, #116]	; (800bd68 <prvAddNewTaskToReadyList+0xd0>)
 800bcf2:	681a      	ldr	r2, [r3, #0]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcfc:	4b1b      	ldr	r3, [pc, #108]	; (800bd6c <prvAddNewTaskToReadyList+0xd4>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d903      	bls.n	800bd0c <prvAddNewTaskToReadyList+0x74>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd08:	4a18      	ldr	r2, [pc, #96]	; (800bd6c <prvAddNewTaskToReadyList+0xd4>)
 800bd0a:	6013      	str	r3, [r2, #0]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd10:	4613      	mov	r3, r2
 800bd12:	009b      	lsls	r3, r3, #2
 800bd14:	4413      	add	r3, r2
 800bd16:	009b      	lsls	r3, r3, #2
 800bd18:	4a15      	ldr	r2, [pc, #84]	; (800bd70 <prvAddNewTaskToReadyList+0xd8>)
 800bd1a:	441a      	add	r2, r3
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	3304      	adds	r3, #4
 800bd20:	4619      	mov	r1, r3
 800bd22:	4610      	mov	r0, r2
 800bd24:	f7ff f877 	bl	800ae16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bd28:	f001 fac4 	bl	800d2b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bd2c:	4b0d      	ldr	r3, [pc, #52]	; (800bd64 <prvAddNewTaskToReadyList+0xcc>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d00e      	beq.n	800bd52 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bd34:	4b0a      	ldr	r3, [pc, #40]	; (800bd60 <prvAddNewTaskToReadyList+0xc8>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d207      	bcs.n	800bd52 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bd42:	4b0c      	ldr	r3, [pc, #48]	; (800bd74 <prvAddNewTaskToReadyList+0xdc>)
 800bd44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd48:	601a      	str	r2, [r3, #0]
 800bd4a:	f3bf 8f4f 	dsb	sy
 800bd4e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bd52:	bf00      	nop
 800bd54:	3708      	adds	r7, #8
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}
 800bd5a:	bf00      	nop
 800bd5c:	2000116c 	.word	0x2000116c
 800bd60:	20000c98 	.word	0x20000c98
 800bd64:	20001178 	.word	0x20001178
 800bd68:	20001188 	.word	0x20001188
 800bd6c:	20001174 	.word	0x20001174
 800bd70:	20000c9c 	.word	0x20000c9c
 800bd74:	e000ed04 	.word	0xe000ed04

0800bd78 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b084      	sub	sp, #16
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800bd80:	f001 fa68 	bl	800d254 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d102      	bne.n	800bd90 <vTaskDelete+0x18>
 800bd8a:	4b2c      	ldr	r3, [pc, #176]	; (800be3c <vTaskDelete+0xc4>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	e000      	b.n	800bd92 <vTaskDelete+0x1a>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	3304      	adds	r3, #4
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f7ff f899 	bl	800aed0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d004      	beq.n	800bdb0 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	3318      	adds	r3, #24
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f7ff f890 	bl	800aed0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800bdb0:	4b23      	ldr	r3, [pc, #140]	; (800be40 <vTaskDelete+0xc8>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	3301      	adds	r3, #1
 800bdb6:	4a22      	ldr	r2, [pc, #136]	; (800be40 <vTaskDelete+0xc8>)
 800bdb8:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800bdba:	4b20      	ldr	r3, [pc, #128]	; (800be3c <vTaskDelete+0xc4>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	68fa      	ldr	r2, [r7, #12]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d10b      	bne.n	800bddc <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	3304      	adds	r3, #4
 800bdc8:	4619      	mov	r1, r3
 800bdca:	481e      	ldr	r0, [pc, #120]	; (800be44 <vTaskDelete+0xcc>)
 800bdcc:	f7ff f823 	bl	800ae16 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800bdd0:	4b1d      	ldr	r3, [pc, #116]	; (800be48 <vTaskDelete+0xd0>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	3301      	adds	r3, #1
 800bdd6:	4a1c      	ldr	r2, [pc, #112]	; (800be48 <vTaskDelete+0xd0>)
 800bdd8:	6013      	str	r3, [r2, #0]
 800bdda:	e009      	b.n	800bdf0 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800bddc:	4b1b      	ldr	r3, [pc, #108]	; (800be4c <vTaskDelete+0xd4>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	3b01      	subs	r3, #1
 800bde2:	4a1a      	ldr	r2, [pc, #104]	; (800be4c <vTaskDelete+0xd4>)
 800bde4:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800bde6:	68f8      	ldr	r0, [r7, #12]
 800bde8:	f000 fc74 	bl	800c6d4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800bdec:	f000 fca6 	bl	800c73c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800bdf0:	f001 fa60 	bl	800d2b4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800bdf4:	4b16      	ldr	r3, [pc, #88]	; (800be50 <vTaskDelete+0xd8>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d01b      	beq.n	800be34 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800bdfc:	4b0f      	ldr	r3, [pc, #60]	; (800be3c <vTaskDelete+0xc4>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	68fa      	ldr	r2, [r7, #12]
 800be02:	429a      	cmp	r2, r3
 800be04:	d116      	bne.n	800be34 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800be06:	4b13      	ldr	r3, [pc, #76]	; (800be54 <vTaskDelete+0xdc>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d00a      	beq.n	800be24 <vTaskDelete+0xac>
	__asm volatile
 800be0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be12:	f383 8811 	msr	BASEPRI, r3
 800be16:	f3bf 8f6f 	isb	sy
 800be1a:	f3bf 8f4f 	dsb	sy
 800be1e:	60bb      	str	r3, [r7, #8]
}
 800be20:	bf00      	nop
 800be22:	e7fe      	b.n	800be22 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800be24:	4b0c      	ldr	r3, [pc, #48]	; (800be58 <vTaskDelete+0xe0>)
 800be26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be2a:	601a      	str	r2, [r3, #0]
 800be2c:	f3bf 8f4f 	dsb	sy
 800be30:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800be34:	bf00      	nop
 800be36:	3710      	adds	r7, #16
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}
 800be3c:	20000c98 	.word	0x20000c98
 800be40:	20001188 	.word	0x20001188
 800be44:	20001140 	.word	0x20001140
 800be48:	20001154 	.word	0x20001154
 800be4c:	2000116c 	.word	0x2000116c
 800be50:	20001178 	.word	0x20001178
 800be54:	20001194 	.word	0x20001194
 800be58:	e000ed04 	.word	0xe000ed04

0800be5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b084      	sub	sp, #16
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800be64:	2300      	movs	r3, #0
 800be66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d017      	beq.n	800be9e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800be6e:	4b13      	ldr	r3, [pc, #76]	; (800bebc <vTaskDelay+0x60>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d00a      	beq.n	800be8c <vTaskDelay+0x30>
	__asm volatile
 800be76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be7a:	f383 8811 	msr	BASEPRI, r3
 800be7e:	f3bf 8f6f 	isb	sy
 800be82:	f3bf 8f4f 	dsb	sy
 800be86:	60bb      	str	r3, [r7, #8]
}
 800be88:	bf00      	nop
 800be8a:	e7fe      	b.n	800be8a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800be8c:	f000 f88a 	bl	800bfa4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800be90:	2100      	movs	r1, #0
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f000 fd0e 	bl	800c8b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800be98:	f000 f892 	bl	800bfc0 <xTaskResumeAll>
 800be9c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d107      	bne.n	800beb4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bea4:	4b06      	ldr	r3, [pc, #24]	; (800bec0 <vTaskDelay+0x64>)
 800bea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800beaa:	601a      	str	r2, [r3, #0]
 800beac:	f3bf 8f4f 	dsb	sy
 800beb0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800beb4:	bf00      	nop
 800beb6:	3710      	adds	r7, #16
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}
 800bebc:	20001194 	.word	0x20001194
 800bec0:	e000ed04 	.word	0xe000ed04

0800bec4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b08a      	sub	sp, #40	; 0x28
 800bec8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800beca:	2300      	movs	r3, #0
 800becc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bece:	2300      	movs	r3, #0
 800bed0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bed2:	463a      	mov	r2, r7
 800bed4:	1d39      	adds	r1, r7, #4
 800bed6:	f107 0308 	add.w	r3, r7, #8
 800beda:	4618      	mov	r0, r3
 800bedc:	f7fe ff3a 	bl	800ad54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bee0:	6839      	ldr	r1, [r7, #0]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	68ba      	ldr	r2, [r7, #8]
 800bee6:	9202      	str	r2, [sp, #8]
 800bee8:	9301      	str	r3, [sp, #4]
 800beea:	2300      	movs	r3, #0
 800beec:	9300      	str	r3, [sp, #0]
 800beee:	2300      	movs	r3, #0
 800bef0:	460a      	mov	r2, r1
 800bef2:	4924      	ldr	r1, [pc, #144]	; (800bf84 <vTaskStartScheduler+0xc0>)
 800bef4:	4824      	ldr	r0, [pc, #144]	; (800bf88 <vTaskStartScheduler+0xc4>)
 800bef6:	f7ff fd87 	bl	800ba08 <xTaskCreateStatic>
 800befa:	4603      	mov	r3, r0
 800befc:	4a23      	ldr	r2, [pc, #140]	; (800bf8c <vTaskStartScheduler+0xc8>)
 800befe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bf00:	4b22      	ldr	r3, [pc, #136]	; (800bf8c <vTaskStartScheduler+0xc8>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d002      	beq.n	800bf0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bf08:	2301      	movs	r3, #1
 800bf0a:	617b      	str	r3, [r7, #20]
 800bf0c:	e001      	b.n	800bf12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	d102      	bne.n	800bf1e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bf18:	f000 fd20 	bl	800c95c <xTimerCreateTimerTask>
 800bf1c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	d11b      	bne.n	800bf5c <vTaskStartScheduler+0x98>
	__asm volatile
 800bf24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf28:	f383 8811 	msr	BASEPRI, r3
 800bf2c:	f3bf 8f6f 	isb	sy
 800bf30:	f3bf 8f4f 	dsb	sy
 800bf34:	613b      	str	r3, [r7, #16]
}
 800bf36:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bf38:	4b15      	ldr	r3, [pc, #84]	; (800bf90 <vTaskStartScheduler+0xcc>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	3354      	adds	r3, #84	; 0x54
 800bf3e:	4a15      	ldr	r2, [pc, #84]	; (800bf94 <vTaskStartScheduler+0xd0>)
 800bf40:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bf42:	4b15      	ldr	r3, [pc, #84]	; (800bf98 <vTaskStartScheduler+0xd4>)
 800bf44:	f04f 32ff 	mov.w	r2, #4294967295
 800bf48:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bf4a:	4b14      	ldr	r3, [pc, #80]	; (800bf9c <vTaskStartScheduler+0xd8>)
 800bf4c:	2201      	movs	r2, #1
 800bf4e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bf50:	4b13      	ldr	r3, [pc, #76]	; (800bfa0 <vTaskStartScheduler+0xdc>)
 800bf52:	2200      	movs	r2, #0
 800bf54:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bf56:	f001 f8db 	bl	800d110 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bf5a:	e00e      	b.n	800bf7a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf62:	d10a      	bne.n	800bf7a <vTaskStartScheduler+0xb6>
	__asm volatile
 800bf64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf68:	f383 8811 	msr	BASEPRI, r3
 800bf6c:	f3bf 8f6f 	isb	sy
 800bf70:	f3bf 8f4f 	dsb	sy
 800bf74:	60fb      	str	r3, [r7, #12]
}
 800bf76:	bf00      	nop
 800bf78:	e7fe      	b.n	800bf78 <vTaskStartScheduler+0xb4>
}
 800bf7a:	bf00      	nop
 800bf7c:	3718      	adds	r7, #24
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}
 800bf82:	bf00      	nop
 800bf84:	08012f38 	.word	0x08012f38
 800bf88:	0800c5c9 	.word	0x0800c5c9
 800bf8c:	20001190 	.word	0x20001190
 800bf90:	20000c98 	.word	0x20000c98
 800bf94:	20000030 	.word	0x20000030
 800bf98:	2000118c 	.word	0x2000118c
 800bf9c:	20001178 	.word	0x20001178
 800bfa0:	20001170 	.word	0x20001170

0800bfa4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bfa8:	4b04      	ldr	r3, [pc, #16]	; (800bfbc <vTaskSuspendAll+0x18>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	3301      	adds	r3, #1
 800bfae:	4a03      	ldr	r2, [pc, #12]	; (800bfbc <vTaskSuspendAll+0x18>)
 800bfb0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bfb2:	bf00      	nop
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfba:	4770      	bx	lr
 800bfbc:	20001194 	.word	0x20001194

0800bfc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b084      	sub	sp, #16
 800bfc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bfce:	4b42      	ldr	r3, [pc, #264]	; (800c0d8 <xTaskResumeAll+0x118>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d10a      	bne.n	800bfec <xTaskResumeAll+0x2c>
	__asm volatile
 800bfd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfda:	f383 8811 	msr	BASEPRI, r3
 800bfde:	f3bf 8f6f 	isb	sy
 800bfe2:	f3bf 8f4f 	dsb	sy
 800bfe6:	603b      	str	r3, [r7, #0]
}
 800bfe8:	bf00      	nop
 800bfea:	e7fe      	b.n	800bfea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bfec:	f001 f932 	bl	800d254 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bff0:	4b39      	ldr	r3, [pc, #228]	; (800c0d8 <xTaskResumeAll+0x118>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	3b01      	subs	r3, #1
 800bff6:	4a38      	ldr	r2, [pc, #224]	; (800c0d8 <xTaskResumeAll+0x118>)
 800bff8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bffa:	4b37      	ldr	r3, [pc, #220]	; (800c0d8 <xTaskResumeAll+0x118>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d162      	bne.n	800c0c8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c002:	4b36      	ldr	r3, [pc, #216]	; (800c0dc <xTaskResumeAll+0x11c>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d05e      	beq.n	800c0c8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c00a:	e02f      	b.n	800c06c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c00c:	4b34      	ldr	r3, [pc, #208]	; (800c0e0 <xTaskResumeAll+0x120>)
 800c00e:	68db      	ldr	r3, [r3, #12]
 800c010:	68db      	ldr	r3, [r3, #12]
 800c012:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	3318      	adds	r3, #24
 800c018:	4618      	mov	r0, r3
 800c01a:	f7fe ff59 	bl	800aed0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	3304      	adds	r3, #4
 800c022:	4618      	mov	r0, r3
 800c024:	f7fe ff54 	bl	800aed0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c02c:	4b2d      	ldr	r3, [pc, #180]	; (800c0e4 <xTaskResumeAll+0x124>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	429a      	cmp	r2, r3
 800c032:	d903      	bls.n	800c03c <xTaskResumeAll+0x7c>
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c038:	4a2a      	ldr	r2, [pc, #168]	; (800c0e4 <xTaskResumeAll+0x124>)
 800c03a:	6013      	str	r3, [r2, #0]
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c040:	4613      	mov	r3, r2
 800c042:	009b      	lsls	r3, r3, #2
 800c044:	4413      	add	r3, r2
 800c046:	009b      	lsls	r3, r3, #2
 800c048:	4a27      	ldr	r2, [pc, #156]	; (800c0e8 <xTaskResumeAll+0x128>)
 800c04a:	441a      	add	r2, r3
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	3304      	adds	r3, #4
 800c050:	4619      	mov	r1, r3
 800c052:	4610      	mov	r0, r2
 800c054:	f7fe fedf 	bl	800ae16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c05c:	4b23      	ldr	r3, [pc, #140]	; (800c0ec <xTaskResumeAll+0x12c>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c062:	429a      	cmp	r2, r3
 800c064:	d302      	bcc.n	800c06c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c066:	4b22      	ldr	r3, [pc, #136]	; (800c0f0 <xTaskResumeAll+0x130>)
 800c068:	2201      	movs	r2, #1
 800c06a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c06c:	4b1c      	ldr	r3, [pc, #112]	; (800c0e0 <xTaskResumeAll+0x120>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d1cb      	bne.n	800c00c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d001      	beq.n	800c07e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c07a:	f000 fb5f 	bl	800c73c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c07e:	4b1d      	ldr	r3, [pc, #116]	; (800c0f4 <xTaskResumeAll+0x134>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d010      	beq.n	800c0ac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c08a:	f000 f847 	bl	800c11c <xTaskIncrementTick>
 800c08e:	4603      	mov	r3, r0
 800c090:	2b00      	cmp	r3, #0
 800c092:	d002      	beq.n	800c09a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c094:	4b16      	ldr	r3, [pc, #88]	; (800c0f0 <xTaskResumeAll+0x130>)
 800c096:	2201      	movs	r2, #1
 800c098:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	3b01      	subs	r3, #1
 800c09e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d1f1      	bne.n	800c08a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c0a6:	4b13      	ldr	r3, [pc, #76]	; (800c0f4 <xTaskResumeAll+0x134>)
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c0ac:	4b10      	ldr	r3, [pc, #64]	; (800c0f0 <xTaskResumeAll+0x130>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d009      	beq.n	800c0c8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c0b8:	4b0f      	ldr	r3, [pc, #60]	; (800c0f8 <xTaskResumeAll+0x138>)
 800c0ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0be:	601a      	str	r2, [r3, #0]
 800c0c0:	f3bf 8f4f 	dsb	sy
 800c0c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c0c8:	f001 f8f4 	bl	800d2b4 <vPortExitCritical>

	return xAlreadyYielded;
 800c0cc:	68bb      	ldr	r3, [r7, #8]
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	3710      	adds	r7, #16
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}
 800c0d6:	bf00      	nop
 800c0d8:	20001194 	.word	0x20001194
 800c0dc:	2000116c 	.word	0x2000116c
 800c0e0:	2000112c 	.word	0x2000112c
 800c0e4:	20001174 	.word	0x20001174
 800c0e8:	20000c9c 	.word	0x20000c9c
 800c0ec:	20000c98 	.word	0x20000c98
 800c0f0:	20001180 	.word	0x20001180
 800c0f4:	2000117c 	.word	0x2000117c
 800c0f8:	e000ed04 	.word	0xe000ed04

0800c0fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c0fc:	b480      	push	{r7}
 800c0fe:	b083      	sub	sp, #12
 800c100:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c102:	4b05      	ldr	r3, [pc, #20]	; (800c118 <xTaskGetTickCount+0x1c>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c108:	687b      	ldr	r3, [r7, #4]
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	370c      	adds	r7, #12
 800c10e:	46bd      	mov	sp, r7
 800c110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c114:	4770      	bx	lr
 800c116:	bf00      	nop
 800c118:	20001170 	.word	0x20001170

0800c11c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b086      	sub	sp, #24
 800c120:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c122:	2300      	movs	r3, #0
 800c124:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c126:	4b4f      	ldr	r3, [pc, #316]	; (800c264 <xTaskIncrementTick+0x148>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	f040 808f 	bne.w	800c24e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c130:	4b4d      	ldr	r3, [pc, #308]	; (800c268 <xTaskIncrementTick+0x14c>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	3301      	adds	r3, #1
 800c136:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c138:	4a4b      	ldr	r2, [pc, #300]	; (800c268 <xTaskIncrementTick+0x14c>)
 800c13a:	693b      	ldr	r3, [r7, #16]
 800c13c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d120      	bne.n	800c186 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c144:	4b49      	ldr	r3, [pc, #292]	; (800c26c <xTaskIncrementTick+0x150>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d00a      	beq.n	800c164 <xTaskIncrementTick+0x48>
	__asm volatile
 800c14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c152:	f383 8811 	msr	BASEPRI, r3
 800c156:	f3bf 8f6f 	isb	sy
 800c15a:	f3bf 8f4f 	dsb	sy
 800c15e:	603b      	str	r3, [r7, #0]
}
 800c160:	bf00      	nop
 800c162:	e7fe      	b.n	800c162 <xTaskIncrementTick+0x46>
 800c164:	4b41      	ldr	r3, [pc, #260]	; (800c26c <xTaskIncrementTick+0x150>)
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	60fb      	str	r3, [r7, #12]
 800c16a:	4b41      	ldr	r3, [pc, #260]	; (800c270 <xTaskIncrementTick+0x154>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	4a3f      	ldr	r2, [pc, #252]	; (800c26c <xTaskIncrementTick+0x150>)
 800c170:	6013      	str	r3, [r2, #0]
 800c172:	4a3f      	ldr	r2, [pc, #252]	; (800c270 <xTaskIncrementTick+0x154>)
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	6013      	str	r3, [r2, #0]
 800c178:	4b3e      	ldr	r3, [pc, #248]	; (800c274 <xTaskIncrementTick+0x158>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	3301      	adds	r3, #1
 800c17e:	4a3d      	ldr	r2, [pc, #244]	; (800c274 <xTaskIncrementTick+0x158>)
 800c180:	6013      	str	r3, [r2, #0]
 800c182:	f000 fadb 	bl	800c73c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c186:	4b3c      	ldr	r3, [pc, #240]	; (800c278 <xTaskIncrementTick+0x15c>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	693a      	ldr	r2, [r7, #16]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d349      	bcc.n	800c224 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c190:	4b36      	ldr	r3, [pc, #216]	; (800c26c <xTaskIncrementTick+0x150>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d104      	bne.n	800c1a4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c19a:	4b37      	ldr	r3, [pc, #220]	; (800c278 <xTaskIncrementTick+0x15c>)
 800c19c:	f04f 32ff 	mov.w	r2, #4294967295
 800c1a0:	601a      	str	r2, [r3, #0]
					break;
 800c1a2:	e03f      	b.n	800c224 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1a4:	4b31      	ldr	r3, [pc, #196]	; (800c26c <xTaskIncrementTick+0x150>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	68db      	ldr	r3, [r3, #12]
 800c1aa:	68db      	ldr	r3, [r3, #12]
 800c1ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	685b      	ldr	r3, [r3, #4]
 800c1b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c1b4:	693a      	ldr	r2, [r7, #16]
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	429a      	cmp	r2, r3
 800c1ba:	d203      	bcs.n	800c1c4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c1bc:	4a2e      	ldr	r2, [pc, #184]	; (800c278 <xTaskIncrementTick+0x15c>)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c1c2:	e02f      	b.n	800c224 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	3304      	adds	r3, #4
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f7fe fe81 	bl	800aed0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d004      	beq.n	800c1e0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	3318      	adds	r3, #24
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f7fe fe78 	bl	800aed0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1e4:	4b25      	ldr	r3, [pc, #148]	; (800c27c <xTaskIncrementTick+0x160>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	429a      	cmp	r2, r3
 800c1ea:	d903      	bls.n	800c1f4 <xTaskIncrementTick+0xd8>
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1f0:	4a22      	ldr	r2, [pc, #136]	; (800c27c <xTaskIncrementTick+0x160>)
 800c1f2:	6013      	str	r3, [r2, #0]
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1f8:	4613      	mov	r3, r2
 800c1fa:	009b      	lsls	r3, r3, #2
 800c1fc:	4413      	add	r3, r2
 800c1fe:	009b      	lsls	r3, r3, #2
 800c200:	4a1f      	ldr	r2, [pc, #124]	; (800c280 <xTaskIncrementTick+0x164>)
 800c202:	441a      	add	r2, r3
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	3304      	adds	r3, #4
 800c208:	4619      	mov	r1, r3
 800c20a:	4610      	mov	r0, r2
 800c20c:	f7fe fe03 	bl	800ae16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c214:	4b1b      	ldr	r3, [pc, #108]	; (800c284 <xTaskIncrementTick+0x168>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d3b8      	bcc.n	800c190 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c21e:	2301      	movs	r3, #1
 800c220:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c222:	e7b5      	b.n	800c190 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c224:	4b17      	ldr	r3, [pc, #92]	; (800c284 <xTaskIncrementTick+0x168>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c22a:	4915      	ldr	r1, [pc, #84]	; (800c280 <xTaskIncrementTick+0x164>)
 800c22c:	4613      	mov	r3, r2
 800c22e:	009b      	lsls	r3, r3, #2
 800c230:	4413      	add	r3, r2
 800c232:	009b      	lsls	r3, r3, #2
 800c234:	440b      	add	r3, r1
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	2b01      	cmp	r3, #1
 800c23a:	d901      	bls.n	800c240 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c23c:	2301      	movs	r3, #1
 800c23e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c240:	4b11      	ldr	r3, [pc, #68]	; (800c288 <xTaskIncrementTick+0x16c>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d007      	beq.n	800c258 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c248:	2301      	movs	r3, #1
 800c24a:	617b      	str	r3, [r7, #20]
 800c24c:	e004      	b.n	800c258 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c24e:	4b0f      	ldr	r3, [pc, #60]	; (800c28c <xTaskIncrementTick+0x170>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	3301      	adds	r3, #1
 800c254:	4a0d      	ldr	r2, [pc, #52]	; (800c28c <xTaskIncrementTick+0x170>)
 800c256:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c258:	697b      	ldr	r3, [r7, #20]
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3718      	adds	r7, #24
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}
 800c262:	bf00      	nop
 800c264:	20001194 	.word	0x20001194
 800c268:	20001170 	.word	0x20001170
 800c26c:	20001124 	.word	0x20001124
 800c270:	20001128 	.word	0x20001128
 800c274:	20001184 	.word	0x20001184
 800c278:	2000118c 	.word	0x2000118c
 800c27c:	20001174 	.word	0x20001174
 800c280:	20000c9c 	.word	0x20000c9c
 800c284:	20000c98 	.word	0x20000c98
 800c288:	20001180 	.word	0x20001180
 800c28c:	2000117c 	.word	0x2000117c

0800c290 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c290:	b480      	push	{r7}
 800c292:	b085      	sub	sp, #20
 800c294:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c296:	4b2a      	ldr	r3, [pc, #168]	; (800c340 <vTaskSwitchContext+0xb0>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d003      	beq.n	800c2a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c29e:	4b29      	ldr	r3, [pc, #164]	; (800c344 <vTaskSwitchContext+0xb4>)
 800c2a0:	2201      	movs	r2, #1
 800c2a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c2a4:	e046      	b.n	800c334 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800c2a6:	4b27      	ldr	r3, [pc, #156]	; (800c344 <vTaskSwitchContext+0xb4>)
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2ac:	4b26      	ldr	r3, [pc, #152]	; (800c348 <vTaskSwitchContext+0xb8>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	60fb      	str	r3, [r7, #12]
 800c2b2:	e010      	b.n	800c2d6 <vTaskSwitchContext+0x46>
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d10a      	bne.n	800c2d0 <vTaskSwitchContext+0x40>
	__asm volatile
 800c2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2be:	f383 8811 	msr	BASEPRI, r3
 800c2c2:	f3bf 8f6f 	isb	sy
 800c2c6:	f3bf 8f4f 	dsb	sy
 800c2ca:	607b      	str	r3, [r7, #4]
}
 800c2cc:	bf00      	nop
 800c2ce:	e7fe      	b.n	800c2ce <vTaskSwitchContext+0x3e>
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	3b01      	subs	r3, #1
 800c2d4:	60fb      	str	r3, [r7, #12]
 800c2d6:	491d      	ldr	r1, [pc, #116]	; (800c34c <vTaskSwitchContext+0xbc>)
 800c2d8:	68fa      	ldr	r2, [r7, #12]
 800c2da:	4613      	mov	r3, r2
 800c2dc:	009b      	lsls	r3, r3, #2
 800c2de:	4413      	add	r3, r2
 800c2e0:	009b      	lsls	r3, r3, #2
 800c2e2:	440b      	add	r3, r1
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d0e4      	beq.n	800c2b4 <vTaskSwitchContext+0x24>
 800c2ea:	68fa      	ldr	r2, [r7, #12]
 800c2ec:	4613      	mov	r3, r2
 800c2ee:	009b      	lsls	r3, r3, #2
 800c2f0:	4413      	add	r3, r2
 800c2f2:	009b      	lsls	r3, r3, #2
 800c2f4:	4a15      	ldr	r2, [pc, #84]	; (800c34c <vTaskSwitchContext+0xbc>)
 800c2f6:	4413      	add	r3, r2
 800c2f8:	60bb      	str	r3, [r7, #8]
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	685a      	ldr	r2, [r3, #4]
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	605a      	str	r2, [r3, #4]
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	685a      	ldr	r2, [r3, #4]
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	3308      	adds	r3, #8
 800c30c:	429a      	cmp	r2, r3
 800c30e:	d104      	bne.n	800c31a <vTaskSwitchContext+0x8a>
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	685b      	ldr	r3, [r3, #4]
 800c314:	685a      	ldr	r2, [r3, #4]
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	605a      	str	r2, [r3, #4]
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	685b      	ldr	r3, [r3, #4]
 800c31e:	68db      	ldr	r3, [r3, #12]
 800c320:	4a0b      	ldr	r2, [pc, #44]	; (800c350 <vTaskSwitchContext+0xc0>)
 800c322:	6013      	str	r3, [r2, #0]
 800c324:	4a08      	ldr	r2, [pc, #32]	; (800c348 <vTaskSwitchContext+0xb8>)
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c32a:	4b09      	ldr	r3, [pc, #36]	; (800c350 <vTaskSwitchContext+0xc0>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	3354      	adds	r3, #84	; 0x54
 800c330:	4a08      	ldr	r2, [pc, #32]	; (800c354 <vTaskSwitchContext+0xc4>)
 800c332:	6013      	str	r3, [r2, #0]
}
 800c334:	bf00      	nop
 800c336:	3714      	adds	r7, #20
 800c338:	46bd      	mov	sp, r7
 800c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33e:	4770      	bx	lr
 800c340:	20001194 	.word	0x20001194
 800c344:	20001180 	.word	0x20001180
 800c348:	20001174 	.word	0x20001174
 800c34c:	20000c9c 	.word	0x20000c9c
 800c350:	20000c98 	.word	0x20000c98
 800c354:	20000030 	.word	0x20000030

0800c358 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b084      	sub	sp, #16
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d10a      	bne.n	800c37e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c36c:	f383 8811 	msr	BASEPRI, r3
 800c370:	f3bf 8f6f 	isb	sy
 800c374:	f3bf 8f4f 	dsb	sy
 800c378:	60fb      	str	r3, [r7, #12]
}
 800c37a:	bf00      	nop
 800c37c:	e7fe      	b.n	800c37c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c37e:	4b07      	ldr	r3, [pc, #28]	; (800c39c <vTaskPlaceOnEventList+0x44>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	3318      	adds	r3, #24
 800c384:	4619      	mov	r1, r3
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	f7fe fd69 	bl	800ae5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c38c:	2101      	movs	r1, #1
 800c38e:	6838      	ldr	r0, [r7, #0]
 800c390:	f000 fa90 	bl	800c8b4 <prvAddCurrentTaskToDelayedList>
}
 800c394:	bf00      	nop
 800c396:	3710      	adds	r7, #16
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}
 800c39c:	20000c98 	.word	0x20000c98

0800c3a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b086      	sub	sp, #24
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	60f8      	str	r0, [r7, #12]
 800c3a8:	60b9      	str	r1, [r7, #8]
 800c3aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d10a      	bne.n	800c3c8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b6:	f383 8811 	msr	BASEPRI, r3
 800c3ba:	f3bf 8f6f 	isb	sy
 800c3be:	f3bf 8f4f 	dsb	sy
 800c3c2:	617b      	str	r3, [r7, #20]
}
 800c3c4:	bf00      	nop
 800c3c6:	e7fe      	b.n	800c3c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c3c8:	4b0a      	ldr	r3, [pc, #40]	; (800c3f4 <vTaskPlaceOnEventListRestricted+0x54>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	3318      	adds	r3, #24
 800c3ce:	4619      	mov	r1, r3
 800c3d0:	68f8      	ldr	r0, [r7, #12]
 800c3d2:	f7fe fd20 	bl	800ae16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d002      	beq.n	800c3e2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c3dc:	f04f 33ff 	mov.w	r3, #4294967295
 800c3e0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c3e2:	6879      	ldr	r1, [r7, #4]
 800c3e4:	68b8      	ldr	r0, [r7, #8]
 800c3e6:	f000 fa65 	bl	800c8b4 <prvAddCurrentTaskToDelayedList>
	}
 800c3ea:	bf00      	nop
 800c3ec:	3718      	adds	r7, #24
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
 800c3f2:	bf00      	nop
 800c3f4:	20000c98 	.word	0x20000c98

0800c3f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b086      	sub	sp, #24
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	68db      	ldr	r3, [r3, #12]
 800c404:	68db      	ldr	r3, [r3, #12]
 800c406:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d10a      	bne.n	800c424 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c412:	f383 8811 	msr	BASEPRI, r3
 800c416:	f3bf 8f6f 	isb	sy
 800c41a:	f3bf 8f4f 	dsb	sy
 800c41e:	60fb      	str	r3, [r7, #12]
}
 800c420:	bf00      	nop
 800c422:	e7fe      	b.n	800c422 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	3318      	adds	r3, #24
 800c428:	4618      	mov	r0, r3
 800c42a:	f7fe fd51 	bl	800aed0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c42e:	4b1e      	ldr	r3, [pc, #120]	; (800c4a8 <xTaskRemoveFromEventList+0xb0>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d11d      	bne.n	800c472 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c436:	693b      	ldr	r3, [r7, #16]
 800c438:	3304      	adds	r3, #4
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7fe fd48 	bl	800aed0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c444:	4b19      	ldr	r3, [pc, #100]	; (800c4ac <xTaskRemoveFromEventList+0xb4>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	429a      	cmp	r2, r3
 800c44a:	d903      	bls.n	800c454 <xTaskRemoveFromEventList+0x5c>
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c450:	4a16      	ldr	r2, [pc, #88]	; (800c4ac <xTaskRemoveFromEventList+0xb4>)
 800c452:	6013      	str	r3, [r2, #0]
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c458:	4613      	mov	r3, r2
 800c45a:	009b      	lsls	r3, r3, #2
 800c45c:	4413      	add	r3, r2
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	4a13      	ldr	r2, [pc, #76]	; (800c4b0 <xTaskRemoveFromEventList+0xb8>)
 800c462:	441a      	add	r2, r3
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	3304      	adds	r3, #4
 800c468:	4619      	mov	r1, r3
 800c46a:	4610      	mov	r0, r2
 800c46c:	f7fe fcd3 	bl	800ae16 <vListInsertEnd>
 800c470:	e005      	b.n	800c47e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c472:	693b      	ldr	r3, [r7, #16]
 800c474:	3318      	adds	r3, #24
 800c476:	4619      	mov	r1, r3
 800c478:	480e      	ldr	r0, [pc, #56]	; (800c4b4 <xTaskRemoveFromEventList+0xbc>)
 800c47a:	f7fe fccc 	bl	800ae16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c47e:	693b      	ldr	r3, [r7, #16]
 800c480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c482:	4b0d      	ldr	r3, [pc, #52]	; (800c4b8 <xTaskRemoveFromEventList+0xc0>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c488:	429a      	cmp	r2, r3
 800c48a:	d905      	bls.n	800c498 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c48c:	2301      	movs	r3, #1
 800c48e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c490:	4b0a      	ldr	r3, [pc, #40]	; (800c4bc <xTaskRemoveFromEventList+0xc4>)
 800c492:	2201      	movs	r2, #1
 800c494:	601a      	str	r2, [r3, #0]
 800c496:	e001      	b.n	800c49c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c498:	2300      	movs	r3, #0
 800c49a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c49c:	697b      	ldr	r3, [r7, #20]
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3718      	adds	r7, #24
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}
 800c4a6:	bf00      	nop
 800c4a8:	20001194 	.word	0x20001194
 800c4ac:	20001174 	.word	0x20001174
 800c4b0:	20000c9c 	.word	0x20000c9c
 800c4b4:	2000112c 	.word	0x2000112c
 800c4b8:	20000c98 	.word	0x20000c98
 800c4bc:	20001180 	.word	0x20001180

0800c4c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b083      	sub	sp, #12
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c4c8:	4b06      	ldr	r3, [pc, #24]	; (800c4e4 <vTaskInternalSetTimeOutState+0x24>)
 800c4ca:	681a      	ldr	r2, [r3, #0]
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c4d0:	4b05      	ldr	r3, [pc, #20]	; (800c4e8 <vTaskInternalSetTimeOutState+0x28>)
 800c4d2:	681a      	ldr	r2, [r3, #0]
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	605a      	str	r2, [r3, #4]
}
 800c4d8:	bf00      	nop
 800c4da:	370c      	adds	r7, #12
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e2:	4770      	bx	lr
 800c4e4:	20001184 	.word	0x20001184
 800c4e8:	20001170 	.word	0x20001170

0800c4ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b088      	sub	sp, #32
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
 800c4f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d10a      	bne.n	800c512 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c500:	f383 8811 	msr	BASEPRI, r3
 800c504:	f3bf 8f6f 	isb	sy
 800c508:	f3bf 8f4f 	dsb	sy
 800c50c:	613b      	str	r3, [r7, #16]
}
 800c50e:	bf00      	nop
 800c510:	e7fe      	b.n	800c510 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d10a      	bne.n	800c52e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c51c:	f383 8811 	msr	BASEPRI, r3
 800c520:	f3bf 8f6f 	isb	sy
 800c524:	f3bf 8f4f 	dsb	sy
 800c528:	60fb      	str	r3, [r7, #12]
}
 800c52a:	bf00      	nop
 800c52c:	e7fe      	b.n	800c52c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c52e:	f000 fe91 	bl	800d254 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c532:	4b1d      	ldr	r3, [pc, #116]	; (800c5a8 <xTaskCheckForTimeOut+0xbc>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	685b      	ldr	r3, [r3, #4]
 800c53c:	69ba      	ldr	r2, [r7, #24]
 800c53e:	1ad3      	subs	r3, r2, r3
 800c540:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c54a:	d102      	bne.n	800c552 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c54c:	2300      	movs	r3, #0
 800c54e:	61fb      	str	r3, [r7, #28]
 800c550:	e023      	b.n	800c59a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681a      	ldr	r2, [r3, #0]
 800c556:	4b15      	ldr	r3, [pc, #84]	; (800c5ac <xTaskCheckForTimeOut+0xc0>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d007      	beq.n	800c56e <xTaskCheckForTimeOut+0x82>
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	685b      	ldr	r3, [r3, #4]
 800c562:	69ba      	ldr	r2, [r7, #24]
 800c564:	429a      	cmp	r2, r3
 800c566:	d302      	bcc.n	800c56e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c568:	2301      	movs	r3, #1
 800c56a:	61fb      	str	r3, [r7, #28]
 800c56c:	e015      	b.n	800c59a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	697a      	ldr	r2, [r7, #20]
 800c574:	429a      	cmp	r2, r3
 800c576:	d20b      	bcs.n	800c590 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	681a      	ldr	r2, [r3, #0]
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	1ad2      	subs	r2, r2, r3
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f7ff ff9b 	bl	800c4c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c58a:	2300      	movs	r3, #0
 800c58c:	61fb      	str	r3, [r7, #28]
 800c58e:	e004      	b.n	800c59a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	2200      	movs	r2, #0
 800c594:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c596:	2301      	movs	r3, #1
 800c598:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c59a:	f000 fe8b 	bl	800d2b4 <vPortExitCritical>

	return xReturn;
 800c59e:	69fb      	ldr	r3, [r7, #28]
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3720      	adds	r7, #32
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}
 800c5a8:	20001170 	.word	0x20001170
 800c5ac:	20001184 	.word	0x20001184

0800c5b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c5b4:	4b03      	ldr	r3, [pc, #12]	; (800c5c4 <vTaskMissedYield+0x14>)
 800c5b6:	2201      	movs	r2, #1
 800c5b8:	601a      	str	r2, [r3, #0]
}
 800c5ba:	bf00      	nop
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr
 800c5c4:	20001180 	.word	0x20001180

0800c5c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b082      	sub	sp, #8
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c5d0:	f000 f852 	bl	800c678 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c5d4:	4b06      	ldr	r3, [pc, #24]	; (800c5f0 <prvIdleTask+0x28>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	2b01      	cmp	r3, #1
 800c5da:	d9f9      	bls.n	800c5d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c5dc:	4b05      	ldr	r3, [pc, #20]	; (800c5f4 <prvIdleTask+0x2c>)
 800c5de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5e2:	601a      	str	r2, [r3, #0]
 800c5e4:	f3bf 8f4f 	dsb	sy
 800c5e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c5ec:	e7f0      	b.n	800c5d0 <prvIdleTask+0x8>
 800c5ee:	bf00      	nop
 800c5f0:	20000c9c 	.word	0x20000c9c
 800c5f4:	e000ed04 	.word	0xe000ed04

0800c5f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c5fe:	2300      	movs	r3, #0
 800c600:	607b      	str	r3, [r7, #4]
 800c602:	e00c      	b.n	800c61e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c604:	687a      	ldr	r2, [r7, #4]
 800c606:	4613      	mov	r3, r2
 800c608:	009b      	lsls	r3, r3, #2
 800c60a:	4413      	add	r3, r2
 800c60c:	009b      	lsls	r3, r3, #2
 800c60e:	4a12      	ldr	r2, [pc, #72]	; (800c658 <prvInitialiseTaskLists+0x60>)
 800c610:	4413      	add	r3, r2
 800c612:	4618      	mov	r0, r3
 800c614:	f7fe fbd2 	bl	800adbc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	3301      	adds	r3, #1
 800c61c:	607b      	str	r3, [r7, #4]
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2b37      	cmp	r3, #55	; 0x37
 800c622:	d9ef      	bls.n	800c604 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c624:	480d      	ldr	r0, [pc, #52]	; (800c65c <prvInitialiseTaskLists+0x64>)
 800c626:	f7fe fbc9 	bl	800adbc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c62a:	480d      	ldr	r0, [pc, #52]	; (800c660 <prvInitialiseTaskLists+0x68>)
 800c62c:	f7fe fbc6 	bl	800adbc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c630:	480c      	ldr	r0, [pc, #48]	; (800c664 <prvInitialiseTaskLists+0x6c>)
 800c632:	f7fe fbc3 	bl	800adbc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c636:	480c      	ldr	r0, [pc, #48]	; (800c668 <prvInitialiseTaskLists+0x70>)
 800c638:	f7fe fbc0 	bl	800adbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c63c:	480b      	ldr	r0, [pc, #44]	; (800c66c <prvInitialiseTaskLists+0x74>)
 800c63e:	f7fe fbbd 	bl	800adbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c642:	4b0b      	ldr	r3, [pc, #44]	; (800c670 <prvInitialiseTaskLists+0x78>)
 800c644:	4a05      	ldr	r2, [pc, #20]	; (800c65c <prvInitialiseTaskLists+0x64>)
 800c646:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c648:	4b0a      	ldr	r3, [pc, #40]	; (800c674 <prvInitialiseTaskLists+0x7c>)
 800c64a:	4a05      	ldr	r2, [pc, #20]	; (800c660 <prvInitialiseTaskLists+0x68>)
 800c64c:	601a      	str	r2, [r3, #0]
}
 800c64e:	bf00      	nop
 800c650:	3708      	adds	r7, #8
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}
 800c656:	bf00      	nop
 800c658:	20000c9c 	.word	0x20000c9c
 800c65c:	200010fc 	.word	0x200010fc
 800c660:	20001110 	.word	0x20001110
 800c664:	2000112c 	.word	0x2000112c
 800c668:	20001140 	.word	0x20001140
 800c66c:	20001158 	.word	0x20001158
 800c670:	20001124 	.word	0x20001124
 800c674:	20001128 	.word	0x20001128

0800c678 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b082      	sub	sp, #8
 800c67c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c67e:	e019      	b.n	800c6b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c680:	f000 fde8 	bl	800d254 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c684:	4b10      	ldr	r3, [pc, #64]	; (800c6c8 <prvCheckTasksWaitingTermination+0x50>)
 800c686:	68db      	ldr	r3, [r3, #12]
 800c688:	68db      	ldr	r3, [r3, #12]
 800c68a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	3304      	adds	r3, #4
 800c690:	4618      	mov	r0, r3
 800c692:	f7fe fc1d 	bl	800aed0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c696:	4b0d      	ldr	r3, [pc, #52]	; (800c6cc <prvCheckTasksWaitingTermination+0x54>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	3b01      	subs	r3, #1
 800c69c:	4a0b      	ldr	r2, [pc, #44]	; (800c6cc <prvCheckTasksWaitingTermination+0x54>)
 800c69e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c6a0:	4b0b      	ldr	r3, [pc, #44]	; (800c6d0 <prvCheckTasksWaitingTermination+0x58>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	3b01      	subs	r3, #1
 800c6a6:	4a0a      	ldr	r2, [pc, #40]	; (800c6d0 <prvCheckTasksWaitingTermination+0x58>)
 800c6a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c6aa:	f000 fe03 	bl	800d2b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f000 f810 	bl	800c6d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c6b4:	4b06      	ldr	r3, [pc, #24]	; (800c6d0 <prvCheckTasksWaitingTermination+0x58>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d1e1      	bne.n	800c680 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c6bc:	bf00      	nop
 800c6be:	bf00      	nop
 800c6c0:	3708      	adds	r7, #8
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}
 800c6c6:	bf00      	nop
 800c6c8:	20001140 	.word	0x20001140
 800c6cc:	2000116c 	.word	0x2000116c
 800c6d0:	20001154 	.word	0x20001154

0800c6d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b084      	sub	sp, #16
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	3354      	adds	r3, #84	; 0x54
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f002 f975 	bl	800e9d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d108      	bne.n	800c702 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f000 ff9b 	bl	800d630 <vPortFree>
				vPortFree( pxTCB );
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f000 ff98 	bl	800d630 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c700:	e018      	b.n	800c734 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c708:	2b01      	cmp	r3, #1
 800c70a:	d103      	bne.n	800c714 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f000 ff8f 	bl	800d630 <vPortFree>
	}
 800c712:	e00f      	b.n	800c734 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c71a:	2b02      	cmp	r3, #2
 800c71c:	d00a      	beq.n	800c734 <prvDeleteTCB+0x60>
	__asm volatile
 800c71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c722:	f383 8811 	msr	BASEPRI, r3
 800c726:	f3bf 8f6f 	isb	sy
 800c72a:	f3bf 8f4f 	dsb	sy
 800c72e:	60fb      	str	r3, [r7, #12]
}
 800c730:	bf00      	nop
 800c732:	e7fe      	b.n	800c732 <prvDeleteTCB+0x5e>
	}
 800c734:	bf00      	nop
 800c736:	3710      	adds	r7, #16
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}

0800c73c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c73c:	b480      	push	{r7}
 800c73e:	b083      	sub	sp, #12
 800c740:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c742:	4b0c      	ldr	r3, [pc, #48]	; (800c774 <prvResetNextTaskUnblockTime+0x38>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d104      	bne.n	800c756 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c74c:	4b0a      	ldr	r3, [pc, #40]	; (800c778 <prvResetNextTaskUnblockTime+0x3c>)
 800c74e:	f04f 32ff 	mov.w	r2, #4294967295
 800c752:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c754:	e008      	b.n	800c768 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c756:	4b07      	ldr	r3, [pc, #28]	; (800c774 <prvResetNextTaskUnblockTime+0x38>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	68db      	ldr	r3, [r3, #12]
 800c75c:	68db      	ldr	r3, [r3, #12]
 800c75e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	685b      	ldr	r3, [r3, #4]
 800c764:	4a04      	ldr	r2, [pc, #16]	; (800c778 <prvResetNextTaskUnblockTime+0x3c>)
 800c766:	6013      	str	r3, [r2, #0]
}
 800c768:	bf00      	nop
 800c76a:	370c      	adds	r7, #12
 800c76c:	46bd      	mov	sp, r7
 800c76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c772:	4770      	bx	lr
 800c774:	20001124 	.word	0x20001124
 800c778:	2000118c 	.word	0x2000118c

0800c77c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800c77c:	b480      	push	{r7}
 800c77e:	b083      	sub	sp, #12
 800c780:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800c782:	4b05      	ldr	r3, [pc, #20]	; (800c798 <xTaskGetCurrentTaskHandle+0x1c>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	607b      	str	r3, [r7, #4]

		return xReturn;
 800c788:	687b      	ldr	r3, [r7, #4]
	}
 800c78a:	4618      	mov	r0, r3
 800c78c:	370c      	adds	r7, #12
 800c78e:	46bd      	mov	sp, r7
 800c790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c794:	4770      	bx	lr
 800c796:	bf00      	nop
 800c798:	20000c98 	.word	0x20000c98

0800c79c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c79c:	b480      	push	{r7}
 800c79e:	b083      	sub	sp, #12
 800c7a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c7a2:	4b0b      	ldr	r3, [pc, #44]	; (800c7d0 <xTaskGetSchedulerState+0x34>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d102      	bne.n	800c7b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	607b      	str	r3, [r7, #4]
 800c7ae:	e008      	b.n	800c7c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7b0:	4b08      	ldr	r3, [pc, #32]	; (800c7d4 <xTaskGetSchedulerState+0x38>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d102      	bne.n	800c7be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c7b8:	2302      	movs	r3, #2
 800c7ba:	607b      	str	r3, [r7, #4]
 800c7bc:	e001      	b.n	800c7c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c7c2:	687b      	ldr	r3, [r7, #4]
	}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	370c      	adds	r7, #12
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ce:	4770      	bx	lr
 800c7d0:	20001178 	.word	0x20001178
 800c7d4:	20001194 	.word	0x20001194

0800c7d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b086      	sub	sp, #24
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d056      	beq.n	800c89c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c7ee:	4b2e      	ldr	r3, [pc, #184]	; (800c8a8 <xTaskPriorityDisinherit+0xd0>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	693a      	ldr	r2, [r7, #16]
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d00a      	beq.n	800c80e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7fc:	f383 8811 	msr	BASEPRI, r3
 800c800:	f3bf 8f6f 	isb	sy
 800c804:	f3bf 8f4f 	dsb	sy
 800c808:	60fb      	str	r3, [r7, #12]
}
 800c80a:	bf00      	nop
 800c80c:	e7fe      	b.n	800c80c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c812:	2b00      	cmp	r3, #0
 800c814:	d10a      	bne.n	800c82c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c81a:	f383 8811 	msr	BASEPRI, r3
 800c81e:	f3bf 8f6f 	isb	sy
 800c822:	f3bf 8f4f 	dsb	sy
 800c826:	60bb      	str	r3, [r7, #8]
}
 800c828:	bf00      	nop
 800c82a:	e7fe      	b.n	800c82a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c830:	1e5a      	subs	r2, r3, #1
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c83e:	429a      	cmp	r2, r3
 800c840:	d02c      	beq.n	800c89c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c846:	2b00      	cmp	r3, #0
 800c848:	d128      	bne.n	800c89c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	3304      	adds	r3, #4
 800c84e:	4618      	mov	r0, r3
 800c850:	f7fe fb3e 	bl	800aed0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c854:	693b      	ldr	r3, [r7, #16]
 800c856:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c860:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c86c:	4b0f      	ldr	r3, [pc, #60]	; (800c8ac <xTaskPriorityDisinherit+0xd4>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	429a      	cmp	r2, r3
 800c872:	d903      	bls.n	800c87c <xTaskPriorityDisinherit+0xa4>
 800c874:	693b      	ldr	r3, [r7, #16]
 800c876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c878:	4a0c      	ldr	r2, [pc, #48]	; (800c8ac <xTaskPriorityDisinherit+0xd4>)
 800c87a:	6013      	str	r3, [r2, #0]
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c880:	4613      	mov	r3, r2
 800c882:	009b      	lsls	r3, r3, #2
 800c884:	4413      	add	r3, r2
 800c886:	009b      	lsls	r3, r3, #2
 800c888:	4a09      	ldr	r2, [pc, #36]	; (800c8b0 <xTaskPriorityDisinherit+0xd8>)
 800c88a:	441a      	add	r2, r3
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	3304      	adds	r3, #4
 800c890:	4619      	mov	r1, r3
 800c892:	4610      	mov	r0, r2
 800c894:	f7fe fabf 	bl	800ae16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c898:	2301      	movs	r3, #1
 800c89a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c89c:	697b      	ldr	r3, [r7, #20]
	}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3718      	adds	r7, #24
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}
 800c8a6:	bf00      	nop
 800c8a8:	20000c98 	.word	0x20000c98
 800c8ac:	20001174 	.word	0x20001174
 800c8b0:	20000c9c 	.word	0x20000c9c

0800c8b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b084      	sub	sp, #16
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
 800c8bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c8be:	4b21      	ldr	r3, [pc, #132]	; (800c944 <prvAddCurrentTaskToDelayedList+0x90>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c8c4:	4b20      	ldr	r3, [pc, #128]	; (800c948 <prvAddCurrentTaskToDelayedList+0x94>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	3304      	adds	r3, #4
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f7fe fb00 	bl	800aed0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8d6:	d10a      	bne.n	800c8ee <prvAddCurrentTaskToDelayedList+0x3a>
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d007      	beq.n	800c8ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c8de:	4b1a      	ldr	r3, [pc, #104]	; (800c948 <prvAddCurrentTaskToDelayedList+0x94>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	3304      	adds	r3, #4
 800c8e4:	4619      	mov	r1, r3
 800c8e6:	4819      	ldr	r0, [pc, #100]	; (800c94c <prvAddCurrentTaskToDelayedList+0x98>)
 800c8e8:	f7fe fa95 	bl	800ae16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c8ec:	e026      	b.n	800c93c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c8ee:	68fa      	ldr	r2, [r7, #12]
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	4413      	add	r3, r2
 800c8f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c8f6:	4b14      	ldr	r3, [pc, #80]	; (800c948 <prvAddCurrentTaskToDelayedList+0x94>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	68ba      	ldr	r2, [r7, #8]
 800c8fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c8fe:	68ba      	ldr	r2, [r7, #8]
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	429a      	cmp	r2, r3
 800c904:	d209      	bcs.n	800c91a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c906:	4b12      	ldr	r3, [pc, #72]	; (800c950 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c908:	681a      	ldr	r2, [r3, #0]
 800c90a:	4b0f      	ldr	r3, [pc, #60]	; (800c948 <prvAddCurrentTaskToDelayedList+0x94>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	3304      	adds	r3, #4
 800c910:	4619      	mov	r1, r3
 800c912:	4610      	mov	r0, r2
 800c914:	f7fe faa3 	bl	800ae5e <vListInsert>
}
 800c918:	e010      	b.n	800c93c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c91a:	4b0e      	ldr	r3, [pc, #56]	; (800c954 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c91c:	681a      	ldr	r2, [r3, #0]
 800c91e:	4b0a      	ldr	r3, [pc, #40]	; (800c948 <prvAddCurrentTaskToDelayedList+0x94>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	3304      	adds	r3, #4
 800c924:	4619      	mov	r1, r3
 800c926:	4610      	mov	r0, r2
 800c928:	f7fe fa99 	bl	800ae5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c92c:	4b0a      	ldr	r3, [pc, #40]	; (800c958 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	68ba      	ldr	r2, [r7, #8]
 800c932:	429a      	cmp	r2, r3
 800c934:	d202      	bcs.n	800c93c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c936:	4a08      	ldr	r2, [pc, #32]	; (800c958 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	6013      	str	r3, [r2, #0]
}
 800c93c:	bf00      	nop
 800c93e:	3710      	adds	r7, #16
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}
 800c944:	20001170 	.word	0x20001170
 800c948:	20000c98 	.word	0x20000c98
 800c94c:	20001158 	.word	0x20001158
 800c950:	20001128 	.word	0x20001128
 800c954:	20001124 	.word	0x20001124
 800c958:	2000118c 	.word	0x2000118c

0800c95c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b08a      	sub	sp, #40	; 0x28
 800c960:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c962:	2300      	movs	r3, #0
 800c964:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c966:	f000 fb07 	bl	800cf78 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c96a:	4b1c      	ldr	r3, [pc, #112]	; (800c9dc <xTimerCreateTimerTask+0x80>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d021      	beq.n	800c9b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c972:	2300      	movs	r3, #0
 800c974:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c976:	2300      	movs	r3, #0
 800c978:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c97a:	1d3a      	adds	r2, r7, #4
 800c97c:	f107 0108 	add.w	r1, r7, #8
 800c980:	f107 030c 	add.w	r3, r7, #12
 800c984:	4618      	mov	r0, r3
 800c986:	f7fe f9ff 	bl	800ad88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c98a:	6879      	ldr	r1, [r7, #4]
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	68fa      	ldr	r2, [r7, #12]
 800c990:	9202      	str	r2, [sp, #8]
 800c992:	9301      	str	r3, [sp, #4]
 800c994:	2302      	movs	r3, #2
 800c996:	9300      	str	r3, [sp, #0]
 800c998:	2300      	movs	r3, #0
 800c99a:	460a      	mov	r2, r1
 800c99c:	4910      	ldr	r1, [pc, #64]	; (800c9e0 <xTimerCreateTimerTask+0x84>)
 800c99e:	4811      	ldr	r0, [pc, #68]	; (800c9e4 <xTimerCreateTimerTask+0x88>)
 800c9a0:	f7ff f832 	bl	800ba08 <xTaskCreateStatic>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	4a10      	ldr	r2, [pc, #64]	; (800c9e8 <xTimerCreateTimerTask+0x8c>)
 800c9a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c9aa:	4b0f      	ldr	r3, [pc, #60]	; (800c9e8 <xTimerCreateTimerTask+0x8c>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d001      	beq.n	800c9b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d10a      	bne.n	800c9d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c0:	f383 8811 	msr	BASEPRI, r3
 800c9c4:	f3bf 8f6f 	isb	sy
 800c9c8:	f3bf 8f4f 	dsb	sy
 800c9cc:	613b      	str	r3, [r7, #16]
}
 800c9ce:	bf00      	nop
 800c9d0:	e7fe      	b.n	800c9d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c9d2:	697b      	ldr	r3, [r7, #20]
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3718      	adds	r7, #24
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}
 800c9dc:	200011c8 	.word	0x200011c8
 800c9e0:	08012f40 	.word	0x08012f40
 800c9e4:	0800cb21 	.word	0x0800cb21
 800c9e8:	200011cc 	.word	0x200011cc

0800c9ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b08a      	sub	sp, #40	; 0x28
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	60f8      	str	r0, [r7, #12]
 800c9f4:	60b9      	str	r1, [r7, #8]
 800c9f6:	607a      	str	r2, [r7, #4]
 800c9f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d10a      	bne.n	800ca1a <xTimerGenericCommand+0x2e>
	__asm volatile
 800ca04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca08:	f383 8811 	msr	BASEPRI, r3
 800ca0c:	f3bf 8f6f 	isb	sy
 800ca10:	f3bf 8f4f 	dsb	sy
 800ca14:	623b      	str	r3, [r7, #32]
}
 800ca16:	bf00      	nop
 800ca18:	e7fe      	b.n	800ca18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ca1a:	4b1a      	ldr	r3, [pc, #104]	; (800ca84 <xTimerGenericCommand+0x98>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d02a      	beq.n	800ca78 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	2b05      	cmp	r3, #5
 800ca32:	dc18      	bgt.n	800ca66 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ca34:	f7ff feb2 	bl	800c79c <xTaskGetSchedulerState>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	2b02      	cmp	r3, #2
 800ca3c:	d109      	bne.n	800ca52 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ca3e:	4b11      	ldr	r3, [pc, #68]	; (800ca84 <xTimerGenericCommand+0x98>)
 800ca40:	6818      	ldr	r0, [r3, #0]
 800ca42:	f107 0110 	add.w	r1, r7, #16
 800ca46:	2300      	movs	r3, #0
 800ca48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca4a:	f7fe fbf5 	bl	800b238 <xQueueGenericSend>
 800ca4e:	6278      	str	r0, [r7, #36]	; 0x24
 800ca50:	e012      	b.n	800ca78 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ca52:	4b0c      	ldr	r3, [pc, #48]	; (800ca84 <xTimerGenericCommand+0x98>)
 800ca54:	6818      	ldr	r0, [r3, #0]
 800ca56:	f107 0110 	add.w	r1, r7, #16
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	f7fe fbeb 	bl	800b238 <xQueueGenericSend>
 800ca62:	6278      	str	r0, [r7, #36]	; 0x24
 800ca64:	e008      	b.n	800ca78 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ca66:	4b07      	ldr	r3, [pc, #28]	; (800ca84 <xTimerGenericCommand+0x98>)
 800ca68:	6818      	ldr	r0, [r3, #0]
 800ca6a:	f107 0110 	add.w	r1, r7, #16
 800ca6e:	2300      	movs	r3, #0
 800ca70:	683a      	ldr	r2, [r7, #0]
 800ca72:	f7fe fcdf 	bl	800b434 <xQueueGenericSendFromISR>
 800ca76:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ca78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3728      	adds	r7, #40	; 0x28
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}
 800ca82:	bf00      	nop
 800ca84:	200011c8 	.word	0x200011c8

0800ca88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b088      	sub	sp, #32
 800ca8c:	af02      	add	r7, sp, #8
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca92:	4b22      	ldr	r3, [pc, #136]	; (800cb1c <prvProcessExpiredTimer+0x94>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	68db      	ldr	r3, [r3, #12]
 800ca98:	68db      	ldr	r3, [r3, #12]
 800ca9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	3304      	adds	r3, #4
 800caa0:	4618      	mov	r0, r3
 800caa2:	f7fe fa15 	bl	800aed0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800caac:	f003 0304 	and.w	r3, r3, #4
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d022      	beq.n	800cafa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cab4:	697b      	ldr	r3, [r7, #20]
 800cab6:	699a      	ldr	r2, [r3, #24]
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	18d1      	adds	r1, r2, r3
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	683a      	ldr	r2, [r7, #0]
 800cac0:	6978      	ldr	r0, [r7, #20]
 800cac2:	f000 f8d1 	bl	800cc68 <prvInsertTimerInActiveList>
 800cac6:	4603      	mov	r3, r0
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d01f      	beq.n	800cb0c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cacc:	2300      	movs	r3, #0
 800cace:	9300      	str	r3, [sp, #0]
 800cad0:	2300      	movs	r3, #0
 800cad2:	687a      	ldr	r2, [r7, #4]
 800cad4:	2100      	movs	r1, #0
 800cad6:	6978      	ldr	r0, [r7, #20]
 800cad8:	f7ff ff88 	bl	800c9ec <xTimerGenericCommand>
 800cadc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cade:	693b      	ldr	r3, [r7, #16]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d113      	bne.n	800cb0c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800cae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae8:	f383 8811 	msr	BASEPRI, r3
 800caec:	f3bf 8f6f 	isb	sy
 800caf0:	f3bf 8f4f 	dsb	sy
 800caf4:	60fb      	str	r3, [r7, #12]
}
 800caf6:	bf00      	nop
 800caf8:	e7fe      	b.n	800caf8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb00:	f023 0301 	bic.w	r3, r3, #1
 800cb04:	b2da      	uxtb	r2, r3
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	6a1b      	ldr	r3, [r3, #32]
 800cb10:	6978      	ldr	r0, [r7, #20]
 800cb12:	4798      	blx	r3
}
 800cb14:	bf00      	nop
 800cb16:	3718      	adds	r7, #24
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}
 800cb1c:	200011c0 	.word	0x200011c0

0800cb20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b084      	sub	sp, #16
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cb28:	f107 0308 	add.w	r3, r7, #8
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f000 f857 	bl	800cbe0 <prvGetNextExpireTime>
 800cb32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	4619      	mov	r1, r3
 800cb38:	68f8      	ldr	r0, [r7, #12]
 800cb3a:	f000 f803 	bl	800cb44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cb3e:	f000 f8d5 	bl	800ccec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cb42:	e7f1      	b.n	800cb28 <prvTimerTask+0x8>

0800cb44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b084      	sub	sp, #16
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cb4e:	f7ff fa29 	bl	800bfa4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cb52:	f107 0308 	add.w	r3, r7, #8
 800cb56:	4618      	mov	r0, r3
 800cb58:	f000 f866 	bl	800cc28 <prvSampleTimeNow>
 800cb5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d130      	bne.n	800cbc6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d10a      	bne.n	800cb80 <prvProcessTimerOrBlockTask+0x3c>
 800cb6a:	687a      	ldr	r2, [r7, #4]
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	d806      	bhi.n	800cb80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cb72:	f7ff fa25 	bl	800bfc0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cb76:	68f9      	ldr	r1, [r7, #12]
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f7ff ff85 	bl	800ca88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cb7e:	e024      	b.n	800cbca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d008      	beq.n	800cb98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cb86:	4b13      	ldr	r3, [pc, #76]	; (800cbd4 <prvProcessTimerOrBlockTask+0x90>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d101      	bne.n	800cb94 <prvProcessTimerOrBlockTask+0x50>
 800cb90:	2301      	movs	r3, #1
 800cb92:	e000      	b.n	800cb96 <prvProcessTimerOrBlockTask+0x52>
 800cb94:	2300      	movs	r3, #0
 800cb96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cb98:	4b0f      	ldr	r3, [pc, #60]	; (800cbd8 <prvProcessTimerOrBlockTask+0x94>)
 800cb9a:	6818      	ldr	r0, [r3, #0]
 800cb9c:	687a      	ldr	r2, [r7, #4]
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	1ad3      	subs	r3, r2, r3
 800cba2:	683a      	ldr	r2, [r7, #0]
 800cba4:	4619      	mov	r1, r3
 800cba6:	f7fe fefb 	bl	800b9a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cbaa:	f7ff fa09 	bl	800bfc0 <xTaskResumeAll>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d10a      	bne.n	800cbca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cbb4:	4b09      	ldr	r3, [pc, #36]	; (800cbdc <prvProcessTimerOrBlockTask+0x98>)
 800cbb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbba:	601a      	str	r2, [r3, #0]
 800cbbc:	f3bf 8f4f 	dsb	sy
 800cbc0:	f3bf 8f6f 	isb	sy
}
 800cbc4:	e001      	b.n	800cbca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cbc6:	f7ff f9fb 	bl	800bfc0 <xTaskResumeAll>
}
 800cbca:	bf00      	nop
 800cbcc:	3710      	adds	r7, #16
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}
 800cbd2:	bf00      	nop
 800cbd4:	200011c4 	.word	0x200011c4
 800cbd8:	200011c8 	.word	0x200011c8
 800cbdc:	e000ed04 	.word	0xe000ed04

0800cbe0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b085      	sub	sp, #20
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cbe8:	4b0e      	ldr	r3, [pc, #56]	; (800cc24 <prvGetNextExpireTime+0x44>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d101      	bne.n	800cbf6 <prvGetNextExpireTime+0x16>
 800cbf2:	2201      	movs	r2, #1
 800cbf4:	e000      	b.n	800cbf8 <prvGetNextExpireTime+0x18>
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d105      	bne.n	800cc10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cc04:	4b07      	ldr	r3, [pc, #28]	; (800cc24 <prvGetNextExpireTime+0x44>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	68db      	ldr	r3, [r3, #12]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	60fb      	str	r3, [r7, #12]
 800cc0e:	e001      	b.n	800cc14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cc10:	2300      	movs	r3, #0
 800cc12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cc14:	68fb      	ldr	r3, [r7, #12]
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3714      	adds	r7, #20
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc20:	4770      	bx	lr
 800cc22:	bf00      	nop
 800cc24:	200011c0 	.word	0x200011c0

0800cc28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b084      	sub	sp, #16
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cc30:	f7ff fa64 	bl	800c0fc <xTaskGetTickCount>
 800cc34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cc36:	4b0b      	ldr	r3, [pc, #44]	; (800cc64 <prvSampleTimeNow+0x3c>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	68fa      	ldr	r2, [r7, #12]
 800cc3c:	429a      	cmp	r2, r3
 800cc3e:	d205      	bcs.n	800cc4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cc40:	f000 f936 	bl	800ceb0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2201      	movs	r2, #1
 800cc48:	601a      	str	r2, [r3, #0]
 800cc4a:	e002      	b.n	800cc52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cc52:	4a04      	ldr	r2, [pc, #16]	; (800cc64 <prvSampleTimeNow+0x3c>)
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cc58:	68fb      	ldr	r3, [r7, #12]
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3710      	adds	r7, #16
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}
 800cc62:	bf00      	nop
 800cc64:	200011d0 	.word	0x200011d0

0800cc68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b086      	sub	sp, #24
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	60f8      	str	r0, [r7, #12]
 800cc70:	60b9      	str	r1, [r7, #8]
 800cc72:	607a      	str	r2, [r7, #4]
 800cc74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cc76:	2300      	movs	r3, #0
 800cc78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	68ba      	ldr	r2, [r7, #8]
 800cc7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	68fa      	ldr	r2, [r7, #12]
 800cc84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cc86:	68ba      	ldr	r2, [r7, #8]
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	d812      	bhi.n	800ccb4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc8e:	687a      	ldr	r2, [r7, #4]
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	1ad2      	subs	r2, r2, r3
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	699b      	ldr	r3, [r3, #24]
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	d302      	bcc.n	800cca2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	617b      	str	r3, [r7, #20]
 800cca0:	e01b      	b.n	800ccda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cca2:	4b10      	ldr	r3, [pc, #64]	; (800cce4 <prvInsertTimerInActiveList+0x7c>)
 800cca4:	681a      	ldr	r2, [r3, #0]
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	3304      	adds	r3, #4
 800ccaa:	4619      	mov	r1, r3
 800ccac:	4610      	mov	r0, r2
 800ccae:	f7fe f8d6 	bl	800ae5e <vListInsert>
 800ccb2:	e012      	b.n	800ccda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ccb4:	687a      	ldr	r2, [r7, #4]
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	429a      	cmp	r2, r3
 800ccba:	d206      	bcs.n	800ccca <prvInsertTimerInActiveList+0x62>
 800ccbc:	68ba      	ldr	r2, [r7, #8]
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	d302      	bcc.n	800ccca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	617b      	str	r3, [r7, #20]
 800ccc8:	e007      	b.n	800ccda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ccca:	4b07      	ldr	r3, [pc, #28]	; (800cce8 <prvInsertTimerInActiveList+0x80>)
 800cccc:	681a      	ldr	r2, [r3, #0]
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	3304      	adds	r3, #4
 800ccd2:	4619      	mov	r1, r3
 800ccd4:	4610      	mov	r0, r2
 800ccd6:	f7fe f8c2 	bl	800ae5e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ccda:	697b      	ldr	r3, [r7, #20]
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	3718      	adds	r7, #24
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}
 800cce4:	200011c4 	.word	0x200011c4
 800cce8:	200011c0 	.word	0x200011c0

0800ccec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b08e      	sub	sp, #56	; 0x38
 800ccf0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ccf2:	e0ca      	b.n	800ce8a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	da18      	bge.n	800cd2c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ccfa:	1d3b      	adds	r3, r7, #4
 800ccfc:	3304      	adds	r3, #4
 800ccfe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cd00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d10a      	bne.n	800cd1c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800cd06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd0a:	f383 8811 	msr	BASEPRI, r3
 800cd0e:	f3bf 8f6f 	isb	sy
 800cd12:	f3bf 8f4f 	dsb	sy
 800cd16:	61fb      	str	r3, [r7, #28]
}
 800cd18:	bf00      	nop
 800cd1a:	e7fe      	b.n	800cd1a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cd1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd22:	6850      	ldr	r0, [r2, #4]
 800cd24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd26:	6892      	ldr	r2, [r2, #8]
 800cd28:	4611      	mov	r1, r2
 800cd2a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	f2c0 80aa 	blt.w	800ce88 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cd38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd3a:	695b      	ldr	r3, [r3, #20]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d004      	beq.n	800cd4a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd42:	3304      	adds	r3, #4
 800cd44:	4618      	mov	r0, r3
 800cd46:	f7fe f8c3 	bl	800aed0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cd4a:	463b      	mov	r3, r7
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f7ff ff6b 	bl	800cc28 <prvSampleTimeNow>
 800cd52:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2b09      	cmp	r3, #9
 800cd58:	f200 8097 	bhi.w	800ce8a <prvProcessReceivedCommands+0x19e>
 800cd5c:	a201      	add	r2, pc, #4	; (adr r2, 800cd64 <prvProcessReceivedCommands+0x78>)
 800cd5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd62:	bf00      	nop
 800cd64:	0800cd8d 	.word	0x0800cd8d
 800cd68:	0800cd8d 	.word	0x0800cd8d
 800cd6c:	0800cd8d 	.word	0x0800cd8d
 800cd70:	0800ce01 	.word	0x0800ce01
 800cd74:	0800ce15 	.word	0x0800ce15
 800cd78:	0800ce5f 	.word	0x0800ce5f
 800cd7c:	0800cd8d 	.word	0x0800cd8d
 800cd80:	0800cd8d 	.word	0x0800cd8d
 800cd84:	0800ce01 	.word	0x0800ce01
 800cd88:	0800ce15 	.word	0x0800ce15
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cd8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd92:	f043 0301 	orr.w	r3, r3, #1
 800cd96:	b2da      	uxtb	r2, r3
 800cd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cd9e:	68ba      	ldr	r2, [r7, #8]
 800cda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda2:	699b      	ldr	r3, [r3, #24]
 800cda4:	18d1      	adds	r1, r2, r3
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cdac:	f7ff ff5c 	bl	800cc68 <prvInsertTimerInActiveList>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d069      	beq.n	800ce8a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cdb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb8:	6a1b      	ldr	r3, [r3, #32]
 800cdba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cdbc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cdbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cdc4:	f003 0304 	and.w	r3, r3, #4
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d05e      	beq.n	800ce8a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cdcc:	68ba      	ldr	r2, [r7, #8]
 800cdce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdd0:	699b      	ldr	r3, [r3, #24]
 800cdd2:	441a      	add	r2, r3
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	9300      	str	r3, [sp, #0]
 800cdd8:	2300      	movs	r3, #0
 800cdda:	2100      	movs	r1, #0
 800cddc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cdde:	f7ff fe05 	bl	800c9ec <xTimerGenericCommand>
 800cde2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cde4:	6a3b      	ldr	r3, [r7, #32]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d14f      	bne.n	800ce8a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800cdea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdee:	f383 8811 	msr	BASEPRI, r3
 800cdf2:	f3bf 8f6f 	isb	sy
 800cdf6:	f3bf 8f4f 	dsb	sy
 800cdfa:	61bb      	str	r3, [r7, #24]
}
 800cdfc:	bf00      	nop
 800cdfe:	e7fe      	b.n	800cdfe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ce00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce06:	f023 0301 	bic.w	r3, r3, #1
 800ce0a:	b2da      	uxtb	r2, r3
 800ce0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ce12:	e03a      	b.n	800ce8a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ce14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce1a:	f043 0301 	orr.w	r3, r3, #1
 800ce1e:	b2da      	uxtb	r2, r3
 800ce20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ce26:	68ba      	ldr	r2, [r7, #8]
 800ce28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce2a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ce2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce2e:	699b      	ldr	r3, [r3, #24]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d10a      	bne.n	800ce4a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ce34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce38:	f383 8811 	msr	BASEPRI, r3
 800ce3c:	f3bf 8f6f 	isb	sy
 800ce40:	f3bf 8f4f 	dsb	sy
 800ce44:	617b      	str	r3, [r7, #20]
}
 800ce46:	bf00      	nop
 800ce48:	e7fe      	b.n	800ce48 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ce4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce4c:	699a      	ldr	r2, [r3, #24]
 800ce4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce50:	18d1      	adds	r1, r2, r3
 800ce52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce58:	f7ff ff06 	bl	800cc68 <prvInsertTimerInActiveList>
					break;
 800ce5c:	e015      	b.n	800ce8a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ce5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce64:	f003 0302 	and.w	r3, r3, #2
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d103      	bne.n	800ce74 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ce6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce6e:	f000 fbdf 	bl	800d630 <vPortFree>
 800ce72:	e00a      	b.n	800ce8a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ce74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce7a:	f023 0301 	bic.w	r3, r3, #1
 800ce7e:	b2da      	uxtb	r2, r3
 800ce80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ce86:	e000      	b.n	800ce8a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ce88:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ce8a:	4b08      	ldr	r3, [pc, #32]	; (800ceac <prvProcessReceivedCommands+0x1c0>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	1d39      	adds	r1, r7, #4
 800ce90:	2200      	movs	r2, #0
 800ce92:	4618      	mov	r0, r3
 800ce94:	f7fe fb6a 	bl	800b56c <xQueueReceive>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	f47f af2a 	bne.w	800ccf4 <prvProcessReceivedCommands+0x8>
	}
}
 800cea0:	bf00      	nop
 800cea2:	bf00      	nop
 800cea4:	3730      	adds	r7, #48	; 0x30
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}
 800ceaa:	bf00      	nop
 800ceac:	200011c8 	.word	0x200011c8

0800ceb0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b088      	sub	sp, #32
 800ceb4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ceb6:	e048      	b.n	800cf4a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ceb8:	4b2d      	ldr	r3, [pc, #180]	; (800cf70 <prvSwitchTimerLists+0xc0>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	68db      	ldr	r3, [r3, #12]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cec2:	4b2b      	ldr	r3, [pc, #172]	; (800cf70 <prvSwitchTimerLists+0xc0>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	68db      	ldr	r3, [r3, #12]
 800cec8:	68db      	ldr	r3, [r3, #12]
 800ceca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	3304      	adds	r3, #4
 800ced0:	4618      	mov	r0, r3
 800ced2:	f7fd fffd 	bl	800aed0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	6a1b      	ldr	r3, [r3, #32]
 800ceda:	68f8      	ldr	r0, [r7, #12]
 800cedc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cee4:	f003 0304 	and.w	r3, r3, #4
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d02e      	beq.n	800cf4a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	699b      	ldr	r3, [r3, #24]
 800cef0:	693a      	ldr	r2, [r7, #16]
 800cef2:	4413      	add	r3, r2
 800cef4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cef6:	68ba      	ldr	r2, [r7, #8]
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	429a      	cmp	r2, r3
 800cefc:	d90e      	bls.n	800cf1c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	68ba      	ldr	r2, [r7, #8]
 800cf02:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	68fa      	ldr	r2, [r7, #12]
 800cf08:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cf0a:	4b19      	ldr	r3, [pc, #100]	; (800cf70 <prvSwitchTimerLists+0xc0>)
 800cf0c:	681a      	ldr	r2, [r3, #0]
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	3304      	adds	r3, #4
 800cf12:	4619      	mov	r1, r3
 800cf14:	4610      	mov	r0, r2
 800cf16:	f7fd ffa2 	bl	800ae5e <vListInsert>
 800cf1a:	e016      	b.n	800cf4a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	9300      	str	r3, [sp, #0]
 800cf20:	2300      	movs	r3, #0
 800cf22:	693a      	ldr	r2, [r7, #16]
 800cf24:	2100      	movs	r1, #0
 800cf26:	68f8      	ldr	r0, [r7, #12]
 800cf28:	f7ff fd60 	bl	800c9ec <xTimerGenericCommand>
 800cf2c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d10a      	bne.n	800cf4a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800cf34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf38:	f383 8811 	msr	BASEPRI, r3
 800cf3c:	f3bf 8f6f 	isb	sy
 800cf40:	f3bf 8f4f 	dsb	sy
 800cf44:	603b      	str	r3, [r7, #0]
}
 800cf46:	bf00      	nop
 800cf48:	e7fe      	b.n	800cf48 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cf4a:	4b09      	ldr	r3, [pc, #36]	; (800cf70 <prvSwitchTimerLists+0xc0>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d1b1      	bne.n	800ceb8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cf54:	4b06      	ldr	r3, [pc, #24]	; (800cf70 <prvSwitchTimerLists+0xc0>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cf5a:	4b06      	ldr	r3, [pc, #24]	; (800cf74 <prvSwitchTimerLists+0xc4>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	4a04      	ldr	r2, [pc, #16]	; (800cf70 <prvSwitchTimerLists+0xc0>)
 800cf60:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cf62:	4a04      	ldr	r2, [pc, #16]	; (800cf74 <prvSwitchTimerLists+0xc4>)
 800cf64:	697b      	ldr	r3, [r7, #20]
 800cf66:	6013      	str	r3, [r2, #0]
}
 800cf68:	bf00      	nop
 800cf6a:	3718      	adds	r7, #24
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}
 800cf70:	200011c0 	.word	0x200011c0
 800cf74:	200011c4 	.word	0x200011c4

0800cf78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b082      	sub	sp, #8
 800cf7c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cf7e:	f000 f969 	bl	800d254 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cf82:	4b15      	ldr	r3, [pc, #84]	; (800cfd8 <prvCheckForValidListAndQueue+0x60>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d120      	bne.n	800cfcc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cf8a:	4814      	ldr	r0, [pc, #80]	; (800cfdc <prvCheckForValidListAndQueue+0x64>)
 800cf8c:	f7fd ff16 	bl	800adbc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cf90:	4813      	ldr	r0, [pc, #76]	; (800cfe0 <prvCheckForValidListAndQueue+0x68>)
 800cf92:	f7fd ff13 	bl	800adbc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cf96:	4b13      	ldr	r3, [pc, #76]	; (800cfe4 <prvCheckForValidListAndQueue+0x6c>)
 800cf98:	4a10      	ldr	r2, [pc, #64]	; (800cfdc <prvCheckForValidListAndQueue+0x64>)
 800cf9a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cf9c:	4b12      	ldr	r3, [pc, #72]	; (800cfe8 <prvCheckForValidListAndQueue+0x70>)
 800cf9e:	4a10      	ldr	r2, [pc, #64]	; (800cfe0 <prvCheckForValidListAndQueue+0x68>)
 800cfa0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	9300      	str	r3, [sp, #0]
 800cfa6:	4b11      	ldr	r3, [pc, #68]	; (800cfec <prvCheckForValidListAndQueue+0x74>)
 800cfa8:	4a11      	ldr	r2, [pc, #68]	; (800cff0 <prvCheckForValidListAndQueue+0x78>)
 800cfaa:	2110      	movs	r1, #16
 800cfac:	200a      	movs	r0, #10
 800cfae:	f7fe f821 	bl	800aff4 <xQueueGenericCreateStatic>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	4a08      	ldr	r2, [pc, #32]	; (800cfd8 <prvCheckForValidListAndQueue+0x60>)
 800cfb6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cfb8:	4b07      	ldr	r3, [pc, #28]	; (800cfd8 <prvCheckForValidListAndQueue+0x60>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d005      	beq.n	800cfcc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cfc0:	4b05      	ldr	r3, [pc, #20]	; (800cfd8 <prvCheckForValidListAndQueue+0x60>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	490b      	ldr	r1, [pc, #44]	; (800cff4 <prvCheckForValidListAndQueue+0x7c>)
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f7fe fcc0 	bl	800b94c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cfcc:	f000 f972 	bl	800d2b4 <vPortExitCritical>
}
 800cfd0:	bf00      	nop
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}
 800cfd6:	bf00      	nop
 800cfd8:	200011c8 	.word	0x200011c8
 800cfdc:	20001198 	.word	0x20001198
 800cfe0:	200011ac 	.word	0x200011ac
 800cfe4:	200011c0 	.word	0x200011c0
 800cfe8:	200011c4 	.word	0x200011c4
 800cfec:	20001274 	.word	0x20001274
 800cff0:	200011d4 	.word	0x200011d4
 800cff4:	08012f48 	.word	0x08012f48

0800cff8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cff8:	b480      	push	{r7}
 800cffa:	b085      	sub	sp, #20
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	60f8      	str	r0, [r7, #12]
 800d000:	60b9      	str	r1, [r7, #8]
 800d002:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	3b04      	subs	r3, #4
 800d008:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d010:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	3b04      	subs	r3, #4
 800d016:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	f023 0201 	bic.w	r2, r3, #1
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	3b04      	subs	r3, #4
 800d026:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d028:	4a0c      	ldr	r2, [pc, #48]	; (800d05c <pxPortInitialiseStack+0x64>)
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	3b14      	subs	r3, #20
 800d032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d034:	687a      	ldr	r2, [r7, #4]
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	3b04      	subs	r3, #4
 800d03e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	f06f 0202 	mvn.w	r2, #2
 800d046:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	3b20      	subs	r3, #32
 800d04c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d04e:	68fb      	ldr	r3, [r7, #12]
}
 800d050:	4618      	mov	r0, r3
 800d052:	3714      	adds	r7, #20
 800d054:	46bd      	mov	sp, r7
 800d056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05a:	4770      	bx	lr
 800d05c:	0800d061 	.word	0x0800d061

0800d060 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d060:	b480      	push	{r7}
 800d062:	b085      	sub	sp, #20
 800d064:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d066:	2300      	movs	r3, #0
 800d068:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d06a:	4b12      	ldr	r3, [pc, #72]	; (800d0b4 <prvTaskExitError+0x54>)
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d072:	d00a      	beq.n	800d08a <prvTaskExitError+0x2a>
	__asm volatile
 800d074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d078:	f383 8811 	msr	BASEPRI, r3
 800d07c:	f3bf 8f6f 	isb	sy
 800d080:	f3bf 8f4f 	dsb	sy
 800d084:	60fb      	str	r3, [r7, #12]
}
 800d086:	bf00      	nop
 800d088:	e7fe      	b.n	800d088 <prvTaskExitError+0x28>
	__asm volatile
 800d08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d08e:	f383 8811 	msr	BASEPRI, r3
 800d092:	f3bf 8f6f 	isb	sy
 800d096:	f3bf 8f4f 	dsb	sy
 800d09a:	60bb      	str	r3, [r7, #8]
}
 800d09c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d09e:	bf00      	nop
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d0fc      	beq.n	800d0a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d0a6:	bf00      	nop
 800d0a8:	bf00      	nop
 800d0aa:	3714      	adds	r7, #20
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b2:	4770      	bx	lr
 800d0b4:	20000028 	.word	0x20000028
	...

0800d0c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d0c0:	4b07      	ldr	r3, [pc, #28]	; (800d0e0 <pxCurrentTCBConst2>)
 800d0c2:	6819      	ldr	r1, [r3, #0]
 800d0c4:	6808      	ldr	r0, [r1, #0]
 800d0c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0ca:	f380 8809 	msr	PSP, r0
 800d0ce:	f3bf 8f6f 	isb	sy
 800d0d2:	f04f 0000 	mov.w	r0, #0
 800d0d6:	f380 8811 	msr	BASEPRI, r0
 800d0da:	4770      	bx	lr
 800d0dc:	f3af 8000 	nop.w

0800d0e0 <pxCurrentTCBConst2>:
 800d0e0:	20000c98 	.word	0x20000c98
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d0e4:	bf00      	nop
 800d0e6:	bf00      	nop

0800d0e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d0e8:	4808      	ldr	r0, [pc, #32]	; (800d10c <prvPortStartFirstTask+0x24>)
 800d0ea:	6800      	ldr	r0, [r0, #0]
 800d0ec:	6800      	ldr	r0, [r0, #0]
 800d0ee:	f380 8808 	msr	MSP, r0
 800d0f2:	f04f 0000 	mov.w	r0, #0
 800d0f6:	f380 8814 	msr	CONTROL, r0
 800d0fa:	b662      	cpsie	i
 800d0fc:	b661      	cpsie	f
 800d0fe:	f3bf 8f4f 	dsb	sy
 800d102:	f3bf 8f6f 	isb	sy
 800d106:	df00      	svc	0
 800d108:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d10a:	bf00      	nop
 800d10c:	e000ed08 	.word	0xe000ed08

0800d110 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b086      	sub	sp, #24
 800d114:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d116:	4b46      	ldr	r3, [pc, #280]	; (800d230 <xPortStartScheduler+0x120>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	4a46      	ldr	r2, [pc, #280]	; (800d234 <xPortStartScheduler+0x124>)
 800d11c:	4293      	cmp	r3, r2
 800d11e:	d10a      	bne.n	800d136 <xPortStartScheduler+0x26>
	__asm volatile
 800d120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d124:	f383 8811 	msr	BASEPRI, r3
 800d128:	f3bf 8f6f 	isb	sy
 800d12c:	f3bf 8f4f 	dsb	sy
 800d130:	613b      	str	r3, [r7, #16]
}
 800d132:	bf00      	nop
 800d134:	e7fe      	b.n	800d134 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d136:	4b3e      	ldr	r3, [pc, #248]	; (800d230 <xPortStartScheduler+0x120>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	4a3f      	ldr	r2, [pc, #252]	; (800d238 <xPortStartScheduler+0x128>)
 800d13c:	4293      	cmp	r3, r2
 800d13e:	d10a      	bne.n	800d156 <xPortStartScheduler+0x46>
	__asm volatile
 800d140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d144:	f383 8811 	msr	BASEPRI, r3
 800d148:	f3bf 8f6f 	isb	sy
 800d14c:	f3bf 8f4f 	dsb	sy
 800d150:	60fb      	str	r3, [r7, #12]
}
 800d152:	bf00      	nop
 800d154:	e7fe      	b.n	800d154 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d156:	4b39      	ldr	r3, [pc, #228]	; (800d23c <xPortStartScheduler+0x12c>)
 800d158:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	781b      	ldrb	r3, [r3, #0]
 800d15e:	b2db      	uxtb	r3, r3
 800d160:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	22ff      	movs	r2, #255	; 0xff
 800d166:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	781b      	ldrb	r3, [r3, #0]
 800d16c:	b2db      	uxtb	r3, r3
 800d16e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d170:	78fb      	ldrb	r3, [r7, #3]
 800d172:	b2db      	uxtb	r3, r3
 800d174:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d178:	b2da      	uxtb	r2, r3
 800d17a:	4b31      	ldr	r3, [pc, #196]	; (800d240 <xPortStartScheduler+0x130>)
 800d17c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d17e:	4b31      	ldr	r3, [pc, #196]	; (800d244 <xPortStartScheduler+0x134>)
 800d180:	2207      	movs	r2, #7
 800d182:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d184:	e009      	b.n	800d19a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d186:	4b2f      	ldr	r3, [pc, #188]	; (800d244 <xPortStartScheduler+0x134>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	3b01      	subs	r3, #1
 800d18c:	4a2d      	ldr	r2, [pc, #180]	; (800d244 <xPortStartScheduler+0x134>)
 800d18e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d190:	78fb      	ldrb	r3, [r7, #3]
 800d192:	b2db      	uxtb	r3, r3
 800d194:	005b      	lsls	r3, r3, #1
 800d196:	b2db      	uxtb	r3, r3
 800d198:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d19a:	78fb      	ldrb	r3, [r7, #3]
 800d19c:	b2db      	uxtb	r3, r3
 800d19e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1a2:	2b80      	cmp	r3, #128	; 0x80
 800d1a4:	d0ef      	beq.n	800d186 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d1a6:	4b27      	ldr	r3, [pc, #156]	; (800d244 <xPortStartScheduler+0x134>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	f1c3 0307 	rsb	r3, r3, #7
 800d1ae:	2b04      	cmp	r3, #4
 800d1b0:	d00a      	beq.n	800d1c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b6:	f383 8811 	msr	BASEPRI, r3
 800d1ba:	f3bf 8f6f 	isb	sy
 800d1be:	f3bf 8f4f 	dsb	sy
 800d1c2:	60bb      	str	r3, [r7, #8]
}
 800d1c4:	bf00      	nop
 800d1c6:	e7fe      	b.n	800d1c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d1c8:	4b1e      	ldr	r3, [pc, #120]	; (800d244 <xPortStartScheduler+0x134>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	021b      	lsls	r3, r3, #8
 800d1ce:	4a1d      	ldr	r2, [pc, #116]	; (800d244 <xPortStartScheduler+0x134>)
 800d1d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d1d2:	4b1c      	ldr	r3, [pc, #112]	; (800d244 <xPortStartScheduler+0x134>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d1da:	4a1a      	ldr	r2, [pc, #104]	; (800d244 <xPortStartScheduler+0x134>)
 800d1dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	b2da      	uxtb	r2, r3
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d1e6:	4b18      	ldr	r3, [pc, #96]	; (800d248 <xPortStartScheduler+0x138>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	4a17      	ldr	r2, [pc, #92]	; (800d248 <xPortStartScheduler+0x138>)
 800d1ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d1f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d1f2:	4b15      	ldr	r3, [pc, #84]	; (800d248 <xPortStartScheduler+0x138>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	4a14      	ldr	r2, [pc, #80]	; (800d248 <xPortStartScheduler+0x138>)
 800d1f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d1fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d1fe:	f000 f8dd 	bl	800d3bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d202:	4b12      	ldr	r3, [pc, #72]	; (800d24c <xPortStartScheduler+0x13c>)
 800d204:	2200      	movs	r2, #0
 800d206:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d208:	f000 f8fc 	bl	800d404 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d20c:	4b10      	ldr	r3, [pc, #64]	; (800d250 <xPortStartScheduler+0x140>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	4a0f      	ldr	r2, [pc, #60]	; (800d250 <xPortStartScheduler+0x140>)
 800d212:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d216:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d218:	f7ff ff66 	bl	800d0e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d21c:	f7ff f838 	bl	800c290 <vTaskSwitchContext>
	prvTaskExitError();
 800d220:	f7ff ff1e 	bl	800d060 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d224:	2300      	movs	r3, #0
}
 800d226:	4618      	mov	r0, r3
 800d228:	3718      	adds	r7, #24
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd80      	pop	{r7, pc}
 800d22e:	bf00      	nop
 800d230:	e000ed00 	.word	0xe000ed00
 800d234:	410fc271 	.word	0x410fc271
 800d238:	410fc270 	.word	0x410fc270
 800d23c:	e000e400 	.word	0xe000e400
 800d240:	200012c4 	.word	0x200012c4
 800d244:	200012c8 	.word	0x200012c8
 800d248:	e000ed20 	.word	0xe000ed20
 800d24c:	20000028 	.word	0x20000028
 800d250:	e000ef34 	.word	0xe000ef34

0800d254 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d254:	b480      	push	{r7}
 800d256:	b083      	sub	sp, #12
 800d258:	af00      	add	r7, sp, #0
	__asm volatile
 800d25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d25e:	f383 8811 	msr	BASEPRI, r3
 800d262:	f3bf 8f6f 	isb	sy
 800d266:	f3bf 8f4f 	dsb	sy
 800d26a:	607b      	str	r3, [r7, #4]
}
 800d26c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d26e:	4b0f      	ldr	r3, [pc, #60]	; (800d2ac <vPortEnterCritical+0x58>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	3301      	adds	r3, #1
 800d274:	4a0d      	ldr	r2, [pc, #52]	; (800d2ac <vPortEnterCritical+0x58>)
 800d276:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d278:	4b0c      	ldr	r3, [pc, #48]	; (800d2ac <vPortEnterCritical+0x58>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	2b01      	cmp	r3, #1
 800d27e:	d10f      	bne.n	800d2a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d280:	4b0b      	ldr	r3, [pc, #44]	; (800d2b0 <vPortEnterCritical+0x5c>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	b2db      	uxtb	r3, r3
 800d286:	2b00      	cmp	r3, #0
 800d288:	d00a      	beq.n	800d2a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d28e:	f383 8811 	msr	BASEPRI, r3
 800d292:	f3bf 8f6f 	isb	sy
 800d296:	f3bf 8f4f 	dsb	sy
 800d29a:	603b      	str	r3, [r7, #0]
}
 800d29c:	bf00      	nop
 800d29e:	e7fe      	b.n	800d29e <vPortEnterCritical+0x4a>
	}
}
 800d2a0:	bf00      	nop
 800d2a2:	370c      	adds	r7, #12
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2aa:	4770      	bx	lr
 800d2ac:	20000028 	.word	0x20000028
 800d2b0:	e000ed04 	.word	0xe000ed04

0800d2b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	b083      	sub	sp, #12
 800d2b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d2ba:	4b12      	ldr	r3, [pc, #72]	; (800d304 <vPortExitCritical+0x50>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d10a      	bne.n	800d2d8 <vPortExitCritical+0x24>
	__asm volatile
 800d2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c6:	f383 8811 	msr	BASEPRI, r3
 800d2ca:	f3bf 8f6f 	isb	sy
 800d2ce:	f3bf 8f4f 	dsb	sy
 800d2d2:	607b      	str	r3, [r7, #4]
}
 800d2d4:	bf00      	nop
 800d2d6:	e7fe      	b.n	800d2d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d2d8:	4b0a      	ldr	r3, [pc, #40]	; (800d304 <vPortExitCritical+0x50>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	3b01      	subs	r3, #1
 800d2de:	4a09      	ldr	r2, [pc, #36]	; (800d304 <vPortExitCritical+0x50>)
 800d2e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d2e2:	4b08      	ldr	r3, [pc, #32]	; (800d304 <vPortExitCritical+0x50>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d105      	bne.n	800d2f6 <vPortExitCritical+0x42>
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	f383 8811 	msr	BASEPRI, r3
}
 800d2f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d2f6:	bf00      	nop
 800d2f8:	370c      	adds	r7, #12
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d300:	4770      	bx	lr
 800d302:	bf00      	nop
 800d304:	20000028 	.word	0x20000028
	...

0800d310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d310:	f3ef 8009 	mrs	r0, PSP
 800d314:	f3bf 8f6f 	isb	sy
 800d318:	4b15      	ldr	r3, [pc, #84]	; (800d370 <pxCurrentTCBConst>)
 800d31a:	681a      	ldr	r2, [r3, #0]
 800d31c:	f01e 0f10 	tst.w	lr, #16
 800d320:	bf08      	it	eq
 800d322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d32a:	6010      	str	r0, [r2, #0]
 800d32c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d330:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d334:	f380 8811 	msr	BASEPRI, r0
 800d338:	f3bf 8f4f 	dsb	sy
 800d33c:	f3bf 8f6f 	isb	sy
 800d340:	f7fe ffa6 	bl	800c290 <vTaskSwitchContext>
 800d344:	f04f 0000 	mov.w	r0, #0
 800d348:	f380 8811 	msr	BASEPRI, r0
 800d34c:	bc09      	pop	{r0, r3}
 800d34e:	6819      	ldr	r1, [r3, #0]
 800d350:	6808      	ldr	r0, [r1, #0]
 800d352:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d356:	f01e 0f10 	tst.w	lr, #16
 800d35a:	bf08      	it	eq
 800d35c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d360:	f380 8809 	msr	PSP, r0
 800d364:	f3bf 8f6f 	isb	sy
 800d368:	4770      	bx	lr
 800d36a:	bf00      	nop
 800d36c:	f3af 8000 	nop.w

0800d370 <pxCurrentTCBConst>:
 800d370:	20000c98 	.word	0x20000c98
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d374:	bf00      	nop
 800d376:	bf00      	nop

0800d378 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b082      	sub	sp, #8
 800d37c:	af00      	add	r7, sp, #0
	__asm volatile
 800d37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d382:	f383 8811 	msr	BASEPRI, r3
 800d386:	f3bf 8f6f 	isb	sy
 800d38a:	f3bf 8f4f 	dsb	sy
 800d38e:	607b      	str	r3, [r7, #4]
}
 800d390:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d392:	f7fe fec3 	bl	800c11c <xTaskIncrementTick>
 800d396:	4603      	mov	r3, r0
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d003      	beq.n	800d3a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d39c:	4b06      	ldr	r3, [pc, #24]	; (800d3b8 <xPortSysTickHandler+0x40>)
 800d39e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3a2:	601a      	str	r2, [r3, #0]
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	f383 8811 	msr	BASEPRI, r3
}
 800d3ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d3b0:	bf00      	nop
 800d3b2:	3708      	adds	r7, #8
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}
 800d3b8:	e000ed04 	.word	0xe000ed04

0800d3bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d3bc:	b480      	push	{r7}
 800d3be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d3c0:	4b0b      	ldr	r3, [pc, #44]	; (800d3f0 <vPortSetupTimerInterrupt+0x34>)
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d3c6:	4b0b      	ldr	r3, [pc, #44]	; (800d3f4 <vPortSetupTimerInterrupt+0x38>)
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d3cc:	4b0a      	ldr	r3, [pc, #40]	; (800d3f8 <vPortSetupTimerInterrupt+0x3c>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	4a0a      	ldr	r2, [pc, #40]	; (800d3fc <vPortSetupTimerInterrupt+0x40>)
 800d3d2:	fba2 2303 	umull	r2, r3, r2, r3
 800d3d6:	099b      	lsrs	r3, r3, #6
 800d3d8:	4a09      	ldr	r2, [pc, #36]	; (800d400 <vPortSetupTimerInterrupt+0x44>)
 800d3da:	3b01      	subs	r3, #1
 800d3dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d3de:	4b04      	ldr	r3, [pc, #16]	; (800d3f0 <vPortSetupTimerInterrupt+0x34>)
 800d3e0:	2207      	movs	r2, #7
 800d3e2:	601a      	str	r2, [r3, #0]
}
 800d3e4:	bf00      	nop
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ec:	4770      	bx	lr
 800d3ee:	bf00      	nop
 800d3f0:	e000e010 	.word	0xe000e010
 800d3f4:	e000e018 	.word	0xe000e018
 800d3f8:	20000000 	.word	0x20000000
 800d3fc:	10624dd3 	.word	0x10624dd3
 800d400:	e000e014 	.word	0xe000e014

0800d404 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d404:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d414 <vPortEnableVFP+0x10>
 800d408:	6801      	ldr	r1, [r0, #0]
 800d40a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d40e:	6001      	str	r1, [r0, #0]
 800d410:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d412:	bf00      	nop
 800d414:	e000ed88 	.word	0xe000ed88

0800d418 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d418:	b480      	push	{r7}
 800d41a:	b085      	sub	sp, #20
 800d41c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d41e:	f3ef 8305 	mrs	r3, IPSR
 800d422:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	2b0f      	cmp	r3, #15
 800d428:	d914      	bls.n	800d454 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d42a:	4a17      	ldr	r2, [pc, #92]	; (800d488 <vPortValidateInterruptPriority+0x70>)
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	4413      	add	r3, r2
 800d430:	781b      	ldrb	r3, [r3, #0]
 800d432:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d434:	4b15      	ldr	r3, [pc, #84]	; (800d48c <vPortValidateInterruptPriority+0x74>)
 800d436:	781b      	ldrb	r3, [r3, #0]
 800d438:	7afa      	ldrb	r2, [r7, #11]
 800d43a:	429a      	cmp	r2, r3
 800d43c:	d20a      	bcs.n	800d454 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d442:	f383 8811 	msr	BASEPRI, r3
 800d446:	f3bf 8f6f 	isb	sy
 800d44a:	f3bf 8f4f 	dsb	sy
 800d44e:	607b      	str	r3, [r7, #4]
}
 800d450:	bf00      	nop
 800d452:	e7fe      	b.n	800d452 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d454:	4b0e      	ldr	r3, [pc, #56]	; (800d490 <vPortValidateInterruptPriority+0x78>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d45c:	4b0d      	ldr	r3, [pc, #52]	; (800d494 <vPortValidateInterruptPriority+0x7c>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	429a      	cmp	r2, r3
 800d462:	d90a      	bls.n	800d47a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d468:	f383 8811 	msr	BASEPRI, r3
 800d46c:	f3bf 8f6f 	isb	sy
 800d470:	f3bf 8f4f 	dsb	sy
 800d474:	603b      	str	r3, [r7, #0]
}
 800d476:	bf00      	nop
 800d478:	e7fe      	b.n	800d478 <vPortValidateInterruptPriority+0x60>
	}
 800d47a:	bf00      	nop
 800d47c:	3714      	adds	r7, #20
 800d47e:	46bd      	mov	sp, r7
 800d480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d484:	4770      	bx	lr
 800d486:	bf00      	nop
 800d488:	e000e3f0 	.word	0xe000e3f0
 800d48c:	200012c4 	.word	0x200012c4
 800d490:	e000ed0c 	.word	0xe000ed0c
 800d494:	200012c8 	.word	0x200012c8

0800d498 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b08a      	sub	sp, #40	; 0x28
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d4a4:	f7fe fd7e 	bl	800bfa4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d4a8:	4b5b      	ldr	r3, [pc, #364]	; (800d618 <pvPortMalloc+0x180>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d101      	bne.n	800d4b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d4b0:	f000 f920 	bl	800d6f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d4b4:	4b59      	ldr	r3, [pc, #356]	; (800d61c <pvPortMalloc+0x184>)
 800d4b6:	681a      	ldr	r2, [r3, #0]
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	4013      	ands	r3, r2
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	f040 8093 	bne.w	800d5e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d01d      	beq.n	800d504 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d4c8:	2208      	movs	r2, #8
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	4413      	add	r3, r2
 800d4ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f003 0307 	and.w	r3, r3, #7
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d014      	beq.n	800d504 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f023 0307 	bic.w	r3, r3, #7
 800d4e0:	3308      	adds	r3, #8
 800d4e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f003 0307 	and.w	r3, r3, #7
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d00a      	beq.n	800d504 <pvPortMalloc+0x6c>
	__asm volatile
 800d4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f2:	f383 8811 	msr	BASEPRI, r3
 800d4f6:	f3bf 8f6f 	isb	sy
 800d4fa:	f3bf 8f4f 	dsb	sy
 800d4fe:	617b      	str	r3, [r7, #20]
}
 800d500:	bf00      	nop
 800d502:	e7fe      	b.n	800d502 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d06e      	beq.n	800d5e8 <pvPortMalloc+0x150>
 800d50a:	4b45      	ldr	r3, [pc, #276]	; (800d620 <pvPortMalloc+0x188>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	687a      	ldr	r2, [r7, #4]
 800d510:	429a      	cmp	r2, r3
 800d512:	d869      	bhi.n	800d5e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d514:	4b43      	ldr	r3, [pc, #268]	; (800d624 <pvPortMalloc+0x18c>)
 800d516:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d518:	4b42      	ldr	r3, [pc, #264]	; (800d624 <pvPortMalloc+0x18c>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d51e:	e004      	b.n	800d52a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d522:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d52c:	685b      	ldr	r3, [r3, #4]
 800d52e:	687a      	ldr	r2, [r7, #4]
 800d530:	429a      	cmp	r2, r3
 800d532:	d903      	bls.n	800d53c <pvPortMalloc+0xa4>
 800d534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d1f1      	bne.n	800d520 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d53c:	4b36      	ldr	r3, [pc, #216]	; (800d618 <pvPortMalloc+0x180>)
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d542:	429a      	cmp	r2, r3
 800d544:	d050      	beq.n	800d5e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d546:	6a3b      	ldr	r3, [r7, #32]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	2208      	movs	r2, #8
 800d54c:	4413      	add	r3, r2
 800d54e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d552:	681a      	ldr	r2, [r3, #0]
 800d554:	6a3b      	ldr	r3, [r7, #32]
 800d556:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d55a:	685a      	ldr	r2, [r3, #4]
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	1ad2      	subs	r2, r2, r3
 800d560:	2308      	movs	r3, #8
 800d562:	005b      	lsls	r3, r3, #1
 800d564:	429a      	cmp	r2, r3
 800d566:	d91f      	bls.n	800d5a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	4413      	add	r3, r2
 800d56e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d570:	69bb      	ldr	r3, [r7, #24]
 800d572:	f003 0307 	and.w	r3, r3, #7
 800d576:	2b00      	cmp	r3, #0
 800d578:	d00a      	beq.n	800d590 <pvPortMalloc+0xf8>
	__asm volatile
 800d57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d57e:	f383 8811 	msr	BASEPRI, r3
 800d582:	f3bf 8f6f 	isb	sy
 800d586:	f3bf 8f4f 	dsb	sy
 800d58a:	613b      	str	r3, [r7, #16]
}
 800d58c:	bf00      	nop
 800d58e:	e7fe      	b.n	800d58e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d592:	685a      	ldr	r2, [r3, #4]
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	1ad2      	subs	r2, r2, r3
 800d598:	69bb      	ldr	r3, [r7, #24]
 800d59a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d59e:	687a      	ldr	r2, [r7, #4]
 800d5a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d5a2:	69b8      	ldr	r0, [r7, #24]
 800d5a4:	f000 f908 	bl	800d7b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d5a8:	4b1d      	ldr	r3, [pc, #116]	; (800d620 <pvPortMalloc+0x188>)
 800d5aa:	681a      	ldr	r2, [r3, #0]
 800d5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ae:	685b      	ldr	r3, [r3, #4]
 800d5b0:	1ad3      	subs	r3, r2, r3
 800d5b2:	4a1b      	ldr	r2, [pc, #108]	; (800d620 <pvPortMalloc+0x188>)
 800d5b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d5b6:	4b1a      	ldr	r3, [pc, #104]	; (800d620 <pvPortMalloc+0x188>)
 800d5b8:	681a      	ldr	r2, [r3, #0]
 800d5ba:	4b1b      	ldr	r3, [pc, #108]	; (800d628 <pvPortMalloc+0x190>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	429a      	cmp	r2, r3
 800d5c0:	d203      	bcs.n	800d5ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d5c2:	4b17      	ldr	r3, [pc, #92]	; (800d620 <pvPortMalloc+0x188>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	4a18      	ldr	r2, [pc, #96]	; (800d628 <pvPortMalloc+0x190>)
 800d5c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5cc:	685a      	ldr	r2, [r3, #4]
 800d5ce:	4b13      	ldr	r3, [pc, #76]	; (800d61c <pvPortMalloc+0x184>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	431a      	orrs	r2, r3
 800d5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5da:	2200      	movs	r2, #0
 800d5dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d5de:	4b13      	ldr	r3, [pc, #76]	; (800d62c <pvPortMalloc+0x194>)
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	3301      	adds	r3, #1
 800d5e4:	4a11      	ldr	r2, [pc, #68]	; (800d62c <pvPortMalloc+0x194>)
 800d5e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d5e8:	f7fe fcea 	bl	800bfc0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d5ec:	69fb      	ldr	r3, [r7, #28]
 800d5ee:	f003 0307 	and.w	r3, r3, #7
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d00a      	beq.n	800d60c <pvPortMalloc+0x174>
	__asm volatile
 800d5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5fa:	f383 8811 	msr	BASEPRI, r3
 800d5fe:	f3bf 8f6f 	isb	sy
 800d602:	f3bf 8f4f 	dsb	sy
 800d606:	60fb      	str	r3, [r7, #12]
}
 800d608:	bf00      	nop
 800d60a:	e7fe      	b.n	800d60a <pvPortMalloc+0x172>
	return pvReturn;
 800d60c:	69fb      	ldr	r3, [r7, #28]
}
 800d60e:	4618      	mov	r0, r3
 800d610:	3728      	adds	r7, #40	; 0x28
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}
 800d616:	bf00      	nop
 800d618:	20004ed4 	.word	0x20004ed4
 800d61c:	20004ee8 	.word	0x20004ee8
 800d620:	20004ed8 	.word	0x20004ed8
 800d624:	20004ecc 	.word	0x20004ecc
 800d628:	20004edc 	.word	0x20004edc
 800d62c:	20004ee0 	.word	0x20004ee0

0800d630 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b086      	sub	sp, #24
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d04d      	beq.n	800d6de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d642:	2308      	movs	r3, #8
 800d644:	425b      	negs	r3, r3
 800d646:	697a      	ldr	r2, [r7, #20]
 800d648:	4413      	add	r3, r2
 800d64a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	685a      	ldr	r2, [r3, #4]
 800d654:	4b24      	ldr	r3, [pc, #144]	; (800d6e8 <vPortFree+0xb8>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	4013      	ands	r3, r2
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d10a      	bne.n	800d674 <vPortFree+0x44>
	__asm volatile
 800d65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d662:	f383 8811 	msr	BASEPRI, r3
 800d666:	f3bf 8f6f 	isb	sy
 800d66a:	f3bf 8f4f 	dsb	sy
 800d66e:	60fb      	str	r3, [r7, #12]
}
 800d670:	bf00      	nop
 800d672:	e7fe      	b.n	800d672 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d674:	693b      	ldr	r3, [r7, #16]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d00a      	beq.n	800d692 <vPortFree+0x62>
	__asm volatile
 800d67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d680:	f383 8811 	msr	BASEPRI, r3
 800d684:	f3bf 8f6f 	isb	sy
 800d688:	f3bf 8f4f 	dsb	sy
 800d68c:	60bb      	str	r3, [r7, #8]
}
 800d68e:	bf00      	nop
 800d690:	e7fe      	b.n	800d690 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d692:	693b      	ldr	r3, [r7, #16]
 800d694:	685a      	ldr	r2, [r3, #4]
 800d696:	4b14      	ldr	r3, [pc, #80]	; (800d6e8 <vPortFree+0xb8>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	4013      	ands	r3, r2
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d01e      	beq.n	800d6de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d6a0:	693b      	ldr	r3, [r7, #16]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d11a      	bne.n	800d6de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d6a8:	693b      	ldr	r3, [r7, #16]
 800d6aa:	685a      	ldr	r2, [r3, #4]
 800d6ac:	4b0e      	ldr	r3, [pc, #56]	; (800d6e8 <vPortFree+0xb8>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	43db      	mvns	r3, r3
 800d6b2:	401a      	ands	r2, r3
 800d6b4:	693b      	ldr	r3, [r7, #16]
 800d6b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d6b8:	f7fe fc74 	bl	800bfa4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d6bc:	693b      	ldr	r3, [r7, #16]
 800d6be:	685a      	ldr	r2, [r3, #4]
 800d6c0:	4b0a      	ldr	r3, [pc, #40]	; (800d6ec <vPortFree+0xbc>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	4413      	add	r3, r2
 800d6c6:	4a09      	ldr	r2, [pc, #36]	; (800d6ec <vPortFree+0xbc>)
 800d6c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d6ca:	6938      	ldr	r0, [r7, #16]
 800d6cc:	f000 f874 	bl	800d7b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d6d0:	4b07      	ldr	r3, [pc, #28]	; (800d6f0 <vPortFree+0xc0>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	3301      	adds	r3, #1
 800d6d6:	4a06      	ldr	r2, [pc, #24]	; (800d6f0 <vPortFree+0xc0>)
 800d6d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d6da:	f7fe fc71 	bl	800bfc0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d6de:	bf00      	nop
 800d6e0:	3718      	adds	r7, #24
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}
 800d6e6:	bf00      	nop
 800d6e8:	20004ee8 	.word	0x20004ee8
 800d6ec:	20004ed8 	.word	0x20004ed8
 800d6f0:	20004ee4 	.word	0x20004ee4

0800d6f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d6f4:	b480      	push	{r7}
 800d6f6:	b085      	sub	sp, #20
 800d6f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d6fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d6fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d700:	4b27      	ldr	r3, [pc, #156]	; (800d7a0 <prvHeapInit+0xac>)
 800d702:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	f003 0307 	and.w	r3, r3, #7
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d00c      	beq.n	800d728 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	3307      	adds	r3, #7
 800d712:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	f023 0307 	bic.w	r3, r3, #7
 800d71a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d71c:	68ba      	ldr	r2, [r7, #8]
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	1ad3      	subs	r3, r2, r3
 800d722:	4a1f      	ldr	r2, [pc, #124]	; (800d7a0 <prvHeapInit+0xac>)
 800d724:	4413      	add	r3, r2
 800d726:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d72c:	4a1d      	ldr	r2, [pc, #116]	; (800d7a4 <prvHeapInit+0xb0>)
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d732:	4b1c      	ldr	r3, [pc, #112]	; (800d7a4 <prvHeapInit+0xb0>)
 800d734:	2200      	movs	r2, #0
 800d736:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	68ba      	ldr	r2, [r7, #8]
 800d73c:	4413      	add	r3, r2
 800d73e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d740:	2208      	movs	r2, #8
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	1a9b      	subs	r3, r3, r2
 800d746:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	f023 0307 	bic.w	r3, r3, #7
 800d74e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	4a15      	ldr	r2, [pc, #84]	; (800d7a8 <prvHeapInit+0xb4>)
 800d754:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d756:	4b14      	ldr	r3, [pc, #80]	; (800d7a8 <prvHeapInit+0xb4>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	2200      	movs	r2, #0
 800d75c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d75e:	4b12      	ldr	r3, [pc, #72]	; (800d7a8 <prvHeapInit+0xb4>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	2200      	movs	r2, #0
 800d764:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	68fa      	ldr	r2, [r7, #12]
 800d76e:	1ad2      	subs	r2, r2, r3
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d774:	4b0c      	ldr	r3, [pc, #48]	; (800d7a8 <prvHeapInit+0xb4>)
 800d776:	681a      	ldr	r2, [r3, #0]
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	685b      	ldr	r3, [r3, #4]
 800d780:	4a0a      	ldr	r2, [pc, #40]	; (800d7ac <prvHeapInit+0xb8>)
 800d782:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	685b      	ldr	r3, [r3, #4]
 800d788:	4a09      	ldr	r2, [pc, #36]	; (800d7b0 <prvHeapInit+0xbc>)
 800d78a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d78c:	4b09      	ldr	r3, [pc, #36]	; (800d7b4 <prvHeapInit+0xc0>)
 800d78e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d792:	601a      	str	r2, [r3, #0]
}
 800d794:	bf00      	nop
 800d796:	3714      	adds	r7, #20
 800d798:	46bd      	mov	sp, r7
 800d79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79e:	4770      	bx	lr
 800d7a0:	200012cc 	.word	0x200012cc
 800d7a4:	20004ecc 	.word	0x20004ecc
 800d7a8:	20004ed4 	.word	0x20004ed4
 800d7ac:	20004edc 	.word	0x20004edc
 800d7b0:	20004ed8 	.word	0x20004ed8
 800d7b4:	20004ee8 	.word	0x20004ee8

0800d7b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d7b8:	b480      	push	{r7}
 800d7ba:	b085      	sub	sp, #20
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d7c0:	4b28      	ldr	r3, [pc, #160]	; (800d864 <prvInsertBlockIntoFreeList+0xac>)
 800d7c2:	60fb      	str	r3, [r7, #12]
 800d7c4:	e002      	b.n	800d7cc <prvInsertBlockIntoFreeList+0x14>
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	60fb      	str	r3, [r7, #12]
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	687a      	ldr	r2, [r7, #4]
 800d7d2:	429a      	cmp	r2, r3
 800d7d4:	d8f7      	bhi.n	800d7c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	685b      	ldr	r3, [r3, #4]
 800d7de:	68ba      	ldr	r2, [r7, #8]
 800d7e0:	4413      	add	r3, r2
 800d7e2:	687a      	ldr	r2, [r7, #4]
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	d108      	bne.n	800d7fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	685a      	ldr	r2, [r3, #4]
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	685b      	ldr	r3, [r3, #4]
 800d7f0:	441a      	add	r2, r3
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	685b      	ldr	r3, [r3, #4]
 800d802:	68ba      	ldr	r2, [r7, #8]
 800d804:	441a      	add	r2, r3
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d118      	bne.n	800d840 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	681a      	ldr	r2, [r3, #0]
 800d812:	4b15      	ldr	r3, [pc, #84]	; (800d868 <prvInsertBlockIntoFreeList+0xb0>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	429a      	cmp	r2, r3
 800d818:	d00d      	beq.n	800d836 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	685a      	ldr	r2, [r3, #4]
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	685b      	ldr	r3, [r3, #4]
 800d824:	441a      	add	r2, r3
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	681a      	ldr	r2, [r3, #0]
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	601a      	str	r2, [r3, #0]
 800d834:	e008      	b.n	800d848 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d836:	4b0c      	ldr	r3, [pc, #48]	; (800d868 <prvInsertBlockIntoFreeList+0xb0>)
 800d838:	681a      	ldr	r2, [r3, #0]
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	601a      	str	r2, [r3, #0]
 800d83e:	e003      	b.n	800d848 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	681a      	ldr	r2, [r3, #0]
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d848:	68fa      	ldr	r2, [r7, #12]
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d002      	beq.n	800d856 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	687a      	ldr	r2, [r7, #4]
 800d854:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d856:	bf00      	nop
 800d858:	3714      	adds	r7, #20
 800d85a:	46bd      	mov	sp, r7
 800d85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d860:	4770      	bx	lr
 800d862:	bf00      	nop
 800d864:	20004ecc 	.word	0x20004ecc
 800d868:	20004ed4 	.word	0x20004ed4

0800d86c <__cxa_pure_virtual>:
 800d86c:	b508      	push	{r3, lr}
 800d86e:	f000 f80d 	bl	800d88c <_ZSt9terminatev>

0800d872 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800d872:	b508      	push	{r3, lr}
 800d874:	4780      	blx	r0
 800d876:	f000 f80e 	bl	800d896 <abort>
	...

0800d87c <_ZSt13get_terminatev>:
 800d87c:	4b02      	ldr	r3, [pc, #8]	; (800d888 <_ZSt13get_terminatev+0xc>)
 800d87e:	6818      	ldr	r0, [r3, #0]
 800d880:	f3bf 8f5b 	dmb	ish
 800d884:	4770      	bx	lr
 800d886:	bf00      	nop
 800d888:	2000002c 	.word	0x2000002c

0800d88c <_ZSt9terminatev>:
 800d88c:	b508      	push	{r3, lr}
 800d88e:	f7ff fff5 	bl	800d87c <_ZSt13get_terminatev>
 800d892:	f7ff ffee 	bl	800d872 <_ZN10__cxxabiv111__terminateEPFvvE>

0800d896 <abort>:
 800d896:	b508      	push	{r3, lr}
 800d898:	2006      	movs	r0, #6
 800d89a:	f001 f933 	bl	800eb04 <raise>
 800d89e:	2001      	movs	r0, #1
 800d8a0:	f7f5 fb4c 	bl	8002f3c <_exit>

0800d8a4 <__errno>:
 800d8a4:	4b01      	ldr	r3, [pc, #4]	; (800d8ac <__errno+0x8>)
 800d8a6:	6818      	ldr	r0, [r3, #0]
 800d8a8:	4770      	bx	lr
 800d8aa:	bf00      	nop
 800d8ac:	20000030 	.word	0x20000030

0800d8b0 <std>:
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	b510      	push	{r4, lr}
 800d8b4:	4604      	mov	r4, r0
 800d8b6:	e9c0 3300 	strd	r3, r3, [r0]
 800d8ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d8be:	6083      	str	r3, [r0, #8]
 800d8c0:	8181      	strh	r1, [r0, #12]
 800d8c2:	6643      	str	r3, [r0, #100]	; 0x64
 800d8c4:	81c2      	strh	r2, [r0, #14]
 800d8c6:	6183      	str	r3, [r0, #24]
 800d8c8:	4619      	mov	r1, r3
 800d8ca:	2208      	movs	r2, #8
 800d8cc:	305c      	adds	r0, #92	; 0x5c
 800d8ce:	f000 f945 	bl	800db5c <memset>
 800d8d2:	4b05      	ldr	r3, [pc, #20]	; (800d8e8 <std+0x38>)
 800d8d4:	6263      	str	r3, [r4, #36]	; 0x24
 800d8d6:	4b05      	ldr	r3, [pc, #20]	; (800d8ec <std+0x3c>)
 800d8d8:	62a3      	str	r3, [r4, #40]	; 0x28
 800d8da:	4b05      	ldr	r3, [pc, #20]	; (800d8f0 <std+0x40>)
 800d8dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d8de:	4b05      	ldr	r3, [pc, #20]	; (800d8f4 <std+0x44>)
 800d8e0:	6224      	str	r4, [r4, #32]
 800d8e2:	6323      	str	r3, [r4, #48]	; 0x30
 800d8e4:	bd10      	pop	{r4, pc}
 800d8e6:	bf00      	nop
 800d8e8:	0800ebd5 	.word	0x0800ebd5
 800d8ec:	0800ebfb 	.word	0x0800ebfb
 800d8f0:	0800ec33 	.word	0x0800ec33
 800d8f4:	0800ec57 	.word	0x0800ec57

0800d8f8 <_cleanup_r>:
 800d8f8:	4901      	ldr	r1, [pc, #4]	; (800d900 <_cleanup_r+0x8>)
 800d8fa:	f000 b8af 	b.w	800da5c <_fwalk_reent>
 800d8fe:	bf00      	nop
 800d900:	08010965 	.word	0x08010965

0800d904 <__sfmoreglue>:
 800d904:	b570      	push	{r4, r5, r6, lr}
 800d906:	1e4a      	subs	r2, r1, #1
 800d908:	2568      	movs	r5, #104	; 0x68
 800d90a:	4355      	muls	r5, r2
 800d90c:	460e      	mov	r6, r1
 800d90e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d912:	f000 f97b 	bl	800dc0c <_malloc_r>
 800d916:	4604      	mov	r4, r0
 800d918:	b140      	cbz	r0, 800d92c <__sfmoreglue+0x28>
 800d91a:	2100      	movs	r1, #0
 800d91c:	e9c0 1600 	strd	r1, r6, [r0]
 800d920:	300c      	adds	r0, #12
 800d922:	60a0      	str	r0, [r4, #8]
 800d924:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d928:	f000 f918 	bl	800db5c <memset>
 800d92c:	4620      	mov	r0, r4
 800d92e:	bd70      	pop	{r4, r5, r6, pc}

0800d930 <__sfp_lock_acquire>:
 800d930:	4801      	ldr	r0, [pc, #4]	; (800d938 <__sfp_lock_acquire+0x8>)
 800d932:	f000 b8d8 	b.w	800dae6 <__retarget_lock_acquire_recursive>
 800d936:	bf00      	nop
 800d938:	20005728 	.word	0x20005728

0800d93c <__sfp_lock_release>:
 800d93c:	4801      	ldr	r0, [pc, #4]	; (800d944 <__sfp_lock_release+0x8>)
 800d93e:	f000 b8d3 	b.w	800dae8 <__retarget_lock_release_recursive>
 800d942:	bf00      	nop
 800d944:	20005728 	.word	0x20005728

0800d948 <__sinit_lock_acquire>:
 800d948:	4801      	ldr	r0, [pc, #4]	; (800d950 <__sinit_lock_acquire+0x8>)
 800d94a:	f000 b8cc 	b.w	800dae6 <__retarget_lock_acquire_recursive>
 800d94e:	bf00      	nop
 800d950:	20005723 	.word	0x20005723

0800d954 <__sinit_lock_release>:
 800d954:	4801      	ldr	r0, [pc, #4]	; (800d95c <__sinit_lock_release+0x8>)
 800d956:	f000 b8c7 	b.w	800dae8 <__retarget_lock_release_recursive>
 800d95a:	bf00      	nop
 800d95c:	20005723 	.word	0x20005723

0800d960 <__sinit>:
 800d960:	b510      	push	{r4, lr}
 800d962:	4604      	mov	r4, r0
 800d964:	f7ff fff0 	bl	800d948 <__sinit_lock_acquire>
 800d968:	69a3      	ldr	r3, [r4, #24]
 800d96a:	b11b      	cbz	r3, 800d974 <__sinit+0x14>
 800d96c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d970:	f7ff bff0 	b.w	800d954 <__sinit_lock_release>
 800d974:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d978:	6523      	str	r3, [r4, #80]	; 0x50
 800d97a:	4b13      	ldr	r3, [pc, #76]	; (800d9c8 <__sinit+0x68>)
 800d97c:	4a13      	ldr	r2, [pc, #76]	; (800d9cc <__sinit+0x6c>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	62a2      	str	r2, [r4, #40]	; 0x28
 800d982:	42a3      	cmp	r3, r4
 800d984:	bf04      	itt	eq
 800d986:	2301      	moveq	r3, #1
 800d988:	61a3      	streq	r3, [r4, #24]
 800d98a:	4620      	mov	r0, r4
 800d98c:	f000 f820 	bl	800d9d0 <__sfp>
 800d990:	6060      	str	r0, [r4, #4]
 800d992:	4620      	mov	r0, r4
 800d994:	f000 f81c 	bl	800d9d0 <__sfp>
 800d998:	60a0      	str	r0, [r4, #8]
 800d99a:	4620      	mov	r0, r4
 800d99c:	f000 f818 	bl	800d9d0 <__sfp>
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	60e0      	str	r0, [r4, #12]
 800d9a4:	2104      	movs	r1, #4
 800d9a6:	6860      	ldr	r0, [r4, #4]
 800d9a8:	f7ff ff82 	bl	800d8b0 <std>
 800d9ac:	68a0      	ldr	r0, [r4, #8]
 800d9ae:	2201      	movs	r2, #1
 800d9b0:	2109      	movs	r1, #9
 800d9b2:	f7ff ff7d 	bl	800d8b0 <std>
 800d9b6:	68e0      	ldr	r0, [r4, #12]
 800d9b8:	2202      	movs	r2, #2
 800d9ba:	2112      	movs	r1, #18
 800d9bc:	f7ff ff78 	bl	800d8b0 <std>
 800d9c0:	2301      	movs	r3, #1
 800d9c2:	61a3      	str	r3, [r4, #24]
 800d9c4:	e7d2      	b.n	800d96c <__sinit+0xc>
 800d9c6:	bf00      	nop
 800d9c8:	0801312c 	.word	0x0801312c
 800d9cc:	0800d8f9 	.word	0x0800d8f9

0800d9d0 <__sfp>:
 800d9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9d2:	4607      	mov	r7, r0
 800d9d4:	f7ff ffac 	bl	800d930 <__sfp_lock_acquire>
 800d9d8:	4b1e      	ldr	r3, [pc, #120]	; (800da54 <__sfp+0x84>)
 800d9da:	681e      	ldr	r6, [r3, #0]
 800d9dc:	69b3      	ldr	r3, [r6, #24]
 800d9de:	b913      	cbnz	r3, 800d9e6 <__sfp+0x16>
 800d9e0:	4630      	mov	r0, r6
 800d9e2:	f7ff ffbd 	bl	800d960 <__sinit>
 800d9e6:	3648      	adds	r6, #72	; 0x48
 800d9e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d9ec:	3b01      	subs	r3, #1
 800d9ee:	d503      	bpl.n	800d9f8 <__sfp+0x28>
 800d9f0:	6833      	ldr	r3, [r6, #0]
 800d9f2:	b30b      	cbz	r3, 800da38 <__sfp+0x68>
 800d9f4:	6836      	ldr	r6, [r6, #0]
 800d9f6:	e7f7      	b.n	800d9e8 <__sfp+0x18>
 800d9f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d9fc:	b9d5      	cbnz	r5, 800da34 <__sfp+0x64>
 800d9fe:	4b16      	ldr	r3, [pc, #88]	; (800da58 <__sfp+0x88>)
 800da00:	60e3      	str	r3, [r4, #12]
 800da02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800da06:	6665      	str	r5, [r4, #100]	; 0x64
 800da08:	f000 f86c 	bl	800dae4 <__retarget_lock_init_recursive>
 800da0c:	f7ff ff96 	bl	800d93c <__sfp_lock_release>
 800da10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800da14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800da18:	6025      	str	r5, [r4, #0]
 800da1a:	61a5      	str	r5, [r4, #24]
 800da1c:	2208      	movs	r2, #8
 800da1e:	4629      	mov	r1, r5
 800da20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800da24:	f000 f89a 	bl	800db5c <memset>
 800da28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800da2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800da30:	4620      	mov	r0, r4
 800da32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da34:	3468      	adds	r4, #104	; 0x68
 800da36:	e7d9      	b.n	800d9ec <__sfp+0x1c>
 800da38:	2104      	movs	r1, #4
 800da3a:	4638      	mov	r0, r7
 800da3c:	f7ff ff62 	bl	800d904 <__sfmoreglue>
 800da40:	4604      	mov	r4, r0
 800da42:	6030      	str	r0, [r6, #0]
 800da44:	2800      	cmp	r0, #0
 800da46:	d1d5      	bne.n	800d9f4 <__sfp+0x24>
 800da48:	f7ff ff78 	bl	800d93c <__sfp_lock_release>
 800da4c:	230c      	movs	r3, #12
 800da4e:	603b      	str	r3, [r7, #0]
 800da50:	e7ee      	b.n	800da30 <__sfp+0x60>
 800da52:	bf00      	nop
 800da54:	0801312c 	.word	0x0801312c
 800da58:	ffff0001 	.word	0xffff0001

0800da5c <_fwalk_reent>:
 800da5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da60:	4606      	mov	r6, r0
 800da62:	4688      	mov	r8, r1
 800da64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800da68:	2700      	movs	r7, #0
 800da6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800da6e:	f1b9 0901 	subs.w	r9, r9, #1
 800da72:	d505      	bpl.n	800da80 <_fwalk_reent+0x24>
 800da74:	6824      	ldr	r4, [r4, #0]
 800da76:	2c00      	cmp	r4, #0
 800da78:	d1f7      	bne.n	800da6a <_fwalk_reent+0xe>
 800da7a:	4638      	mov	r0, r7
 800da7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da80:	89ab      	ldrh	r3, [r5, #12]
 800da82:	2b01      	cmp	r3, #1
 800da84:	d907      	bls.n	800da96 <_fwalk_reent+0x3a>
 800da86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800da8a:	3301      	adds	r3, #1
 800da8c:	d003      	beq.n	800da96 <_fwalk_reent+0x3a>
 800da8e:	4629      	mov	r1, r5
 800da90:	4630      	mov	r0, r6
 800da92:	47c0      	blx	r8
 800da94:	4307      	orrs	r7, r0
 800da96:	3568      	adds	r5, #104	; 0x68
 800da98:	e7e9      	b.n	800da6e <_fwalk_reent+0x12>
	...

0800da9c <__libc_init_array>:
 800da9c:	b570      	push	{r4, r5, r6, lr}
 800da9e:	4d0d      	ldr	r5, [pc, #52]	; (800dad4 <__libc_init_array+0x38>)
 800daa0:	4c0d      	ldr	r4, [pc, #52]	; (800dad8 <__libc_init_array+0x3c>)
 800daa2:	1b64      	subs	r4, r4, r5
 800daa4:	10a4      	asrs	r4, r4, #2
 800daa6:	2600      	movs	r6, #0
 800daa8:	42a6      	cmp	r6, r4
 800daaa:	d109      	bne.n	800dac0 <__libc_init_array+0x24>
 800daac:	4d0b      	ldr	r5, [pc, #44]	; (800dadc <__libc_init_array+0x40>)
 800daae:	4c0c      	ldr	r4, [pc, #48]	; (800dae0 <__libc_init_array+0x44>)
 800dab0:	f004 fffa 	bl	8012aa8 <_init>
 800dab4:	1b64      	subs	r4, r4, r5
 800dab6:	10a4      	asrs	r4, r4, #2
 800dab8:	2600      	movs	r6, #0
 800daba:	42a6      	cmp	r6, r4
 800dabc:	d105      	bne.n	800daca <__libc_init_array+0x2e>
 800dabe:	bd70      	pop	{r4, r5, r6, pc}
 800dac0:	f855 3b04 	ldr.w	r3, [r5], #4
 800dac4:	4798      	blx	r3
 800dac6:	3601      	adds	r6, #1
 800dac8:	e7ee      	b.n	800daa8 <__libc_init_array+0xc>
 800daca:	f855 3b04 	ldr.w	r3, [r5], #4
 800dace:	4798      	blx	r3
 800dad0:	3601      	adds	r6, #1
 800dad2:	e7f2      	b.n	800daba <__libc_init_array+0x1e>
 800dad4:	08013598 	.word	0x08013598
 800dad8:	08013598 	.word	0x08013598
 800dadc:	08013598 	.word	0x08013598
 800dae0:	080135a0 	.word	0x080135a0

0800dae4 <__retarget_lock_init_recursive>:
 800dae4:	4770      	bx	lr

0800dae6 <__retarget_lock_acquire_recursive>:
 800dae6:	4770      	bx	lr

0800dae8 <__retarget_lock_release_recursive>:
 800dae8:	4770      	bx	lr
	...

0800daec <malloc>:
 800daec:	4b02      	ldr	r3, [pc, #8]	; (800daf8 <malloc+0xc>)
 800daee:	4601      	mov	r1, r0
 800daf0:	6818      	ldr	r0, [r3, #0]
 800daf2:	f000 b88b 	b.w	800dc0c <_malloc_r>
 800daf6:	bf00      	nop
 800daf8:	20000030 	.word	0x20000030

0800dafc <free>:
 800dafc:	4b02      	ldr	r3, [pc, #8]	; (800db08 <free+0xc>)
 800dafe:	4601      	mov	r1, r0
 800db00:	6818      	ldr	r0, [r3, #0]
 800db02:	f000 b833 	b.w	800db6c <_free_r>
 800db06:	bf00      	nop
 800db08:	20000030 	.word	0x20000030

0800db0c <memcpy>:
 800db0c:	440a      	add	r2, r1
 800db0e:	4291      	cmp	r1, r2
 800db10:	f100 33ff 	add.w	r3, r0, #4294967295
 800db14:	d100      	bne.n	800db18 <memcpy+0xc>
 800db16:	4770      	bx	lr
 800db18:	b510      	push	{r4, lr}
 800db1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db22:	4291      	cmp	r1, r2
 800db24:	d1f9      	bne.n	800db1a <memcpy+0xe>
 800db26:	bd10      	pop	{r4, pc}

0800db28 <memmove>:
 800db28:	4288      	cmp	r0, r1
 800db2a:	b510      	push	{r4, lr}
 800db2c:	eb01 0402 	add.w	r4, r1, r2
 800db30:	d902      	bls.n	800db38 <memmove+0x10>
 800db32:	4284      	cmp	r4, r0
 800db34:	4623      	mov	r3, r4
 800db36:	d807      	bhi.n	800db48 <memmove+0x20>
 800db38:	1e43      	subs	r3, r0, #1
 800db3a:	42a1      	cmp	r1, r4
 800db3c:	d008      	beq.n	800db50 <memmove+0x28>
 800db3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db42:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db46:	e7f8      	b.n	800db3a <memmove+0x12>
 800db48:	4402      	add	r2, r0
 800db4a:	4601      	mov	r1, r0
 800db4c:	428a      	cmp	r2, r1
 800db4e:	d100      	bne.n	800db52 <memmove+0x2a>
 800db50:	bd10      	pop	{r4, pc}
 800db52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800db5a:	e7f7      	b.n	800db4c <memmove+0x24>

0800db5c <memset>:
 800db5c:	4402      	add	r2, r0
 800db5e:	4603      	mov	r3, r0
 800db60:	4293      	cmp	r3, r2
 800db62:	d100      	bne.n	800db66 <memset+0xa>
 800db64:	4770      	bx	lr
 800db66:	f803 1b01 	strb.w	r1, [r3], #1
 800db6a:	e7f9      	b.n	800db60 <memset+0x4>

0800db6c <_free_r>:
 800db6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800db6e:	2900      	cmp	r1, #0
 800db70:	d048      	beq.n	800dc04 <_free_r+0x98>
 800db72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db76:	9001      	str	r0, [sp, #4]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	f1a1 0404 	sub.w	r4, r1, #4
 800db7e:	bfb8      	it	lt
 800db80:	18e4      	addlt	r4, r4, r3
 800db82:	f003 fad5 	bl	8011130 <__malloc_lock>
 800db86:	4a20      	ldr	r2, [pc, #128]	; (800dc08 <_free_r+0x9c>)
 800db88:	9801      	ldr	r0, [sp, #4]
 800db8a:	6813      	ldr	r3, [r2, #0]
 800db8c:	4615      	mov	r5, r2
 800db8e:	b933      	cbnz	r3, 800db9e <_free_r+0x32>
 800db90:	6063      	str	r3, [r4, #4]
 800db92:	6014      	str	r4, [r2, #0]
 800db94:	b003      	add	sp, #12
 800db96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800db9a:	f003 bacf 	b.w	801113c <__malloc_unlock>
 800db9e:	42a3      	cmp	r3, r4
 800dba0:	d90b      	bls.n	800dbba <_free_r+0x4e>
 800dba2:	6821      	ldr	r1, [r4, #0]
 800dba4:	1862      	adds	r2, r4, r1
 800dba6:	4293      	cmp	r3, r2
 800dba8:	bf04      	itt	eq
 800dbaa:	681a      	ldreq	r2, [r3, #0]
 800dbac:	685b      	ldreq	r3, [r3, #4]
 800dbae:	6063      	str	r3, [r4, #4]
 800dbb0:	bf04      	itt	eq
 800dbb2:	1852      	addeq	r2, r2, r1
 800dbb4:	6022      	streq	r2, [r4, #0]
 800dbb6:	602c      	str	r4, [r5, #0]
 800dbb8:	e7ec      	b.n	800db94 <_free_r+0x28>
 800dbba:	461a      	mov	r2, r3
 800dbbc:	685b      	ldr	r3, [r3, #4]
 800dbbe:	b10b      	cbz	r3, 800dbc4 <_free_r+0x58>
 800dbc0:	42a3      	cmp	r3, r4
 800dbc2:	d9fa      	bls.n	800dbba <_free_r+0x4e>
 800dbc4:	6811      	ldr	r1, [r2, #0]
 800dbc6:	1855      	adds	r5, r2, r1
 800dbc8:	42a5      	cmp	r5, r4
 800dbca:	d10b      	bne.n	800dbe4 <_free_r+0x78>
 800dbcc:	6824      	ldr	r4, [r4, #0]
 800dbce:	4421      	add	r1, r4
 800dbd0:	1854      	adds	r4, r2, r1
 800dbd2:	42a3      	cmp	r3, r4
 800dbd4:	6011      	str	r1, [r2, #0]
 800dbd6:	d1dd      	bne.n	800db94 <_free_r+0x28>
 800dbd8:	681c      	ldr	r4, [r3, #0]
 800dbda:	685b      	ldr	r3, [r3, #4]
 800dbdc:	6053      	str	r3, [r2, #4]
 800dbde:	4421      	add	r1, r4
 800dbe0:	6011      	str	r1, [r2, #0]
 800dbe2:	e7d7      	b.n	800db94 <_free_r+0x28>
 800dbe4:	d902      	bls.n	800dbec <_free_r+0x80>
 800dbe6:	230c      	movs	r3, #12
 800dbe8:	6003      	str	r3, [r0, #0]
 800dbea:	e7d3      	b.n	800db94 <_free_r+0x28>
 800dbec:	6825      	ldr	r5, [r4, #0]
 800dbee:	1961      	adds	r1, r4, r5
 800dbf0:	428b      	cmp	r3, r1
 800dbf2:	bf04      	itt	eq
 800dbf4:	6819      	ldreq	r1, [r3, #0]
 800dbf6:	685b      	ldreq	r3, [r3, #4]
 800dbf8:	6063      	str	r3, [r4, #4]
 800dbfa:	bf04      	itt	eq
 800dbfc:	1949      	addeq	r1, r1, r5
 800dbfe:	6021      	streq	r1, [r4, #0]
 800dc00:	6054      	str	r4, [r2, #4]
 800dc02:	e7c7      	b.n	800db94 <_free_r+0x28>
 800dc04:	b003      	add	sp, #12
 800dc06:	bd30      	pop	{r4, r5, pc}
 800dc08:	20004eec 	.word	0x20004eec

0800dc0c <_malloc_r>:
 800dc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc0e:	1ccd      	adds	r5, r1, #3
 800dc10:	f025 0503 	bic.w	r5, r5, #3
 800dc14:	3508      	adds	r5, #8
 800dc16:	2d0c      	cmp	r5, #12
 800dc18:	bf38      	it	cc
 800dc1a:	250c      	movcc	r5, #12
 800dc1c:	2d00      	cmp	r5, #0
 800dc1e:	4606      	mov	r6, r0
 800dc20:	db01      	blt.n	800dc26 <_malloc_r+0x1a>
 800dc22:	42a9      	cmp	r1, r5
 800dc24:	d903      	bls.n	800dc2e <_malloc_r+0x22>
 800dc26:	230c      	movs	r3, #12
 800dc28:	6033      	str	r3, [r6, #0]
 800dc2a:	2000      	movs	r0, #0
 800dc2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc2e:	f003 fa7f 	bl	8011130 <__malloc_lock>
 800dc32:	4921      	ldr	r1, [pc, #132]	; (800dcb8 <_malloc_r+0xac>)
 800dc34:	680a      	ldr	r2, [r1, #0]
 800dc36:	4614      	mov	r4, r2
 800dc38:	b99c      	cbnz	r4, 800dc62 <_malloc_r+0x56>
 800dc3a:	4f20      	ldr	r7, [pc, #128]	; (800dcbc <_malloc_r+0xb0>)
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	b923      	cbnz	r3, 800dc4a <_malloc_r+0x3e>
 800dc40:	4621      	mov	r1, r4
 800dc42:	4630      	mov	r0, r6
 800dc44:	f000 ff20 	bl	800ea88 <_sbrk_r>
 800dc48:	6038      	str	r0, [r7, #0]
 800dc4a:	4629      	mov	r1, r5
 800dc4c:	4630      	mov	r0, r6
 800dc4e:	f000 ff1b 	bl	800ea88 <_sbrk_r>
 800dc52:	1c43      	adds	r3, r0, #1
 800dc54:	d123      	bne.n	800dc9e <_malloc_r+0x92>
 800dc56:	230c      	movs	r3, #12
 800dc58:	6033      	str	r3, [r6, #0]
 800dc5a:	4630      	mov	r0, r6
 800dc5c:	f003 fa6e 	bl	801113c <__malloc_unlock>
 800dc60:	e7e3      	b.n	800dc2a <_malloc_r+0x1e>
 800dc62:	6823      	ldr	r3, [r4, #0]
 800dc64:	1b5b      	subs	r3, r3, r5
 800dc66:	d417      	bmi.n	800dc98 <_malloc_r+0x8c>
 800dc68:	2b0b      	cmp	r3, #11
 800dc6a:	d903      	bls.n	800dc74 <_malloc_r+0x68>
 800dc6c:	6023      	str	r3, [r4, #0]
 800dc6e:	441c      	add	r4, r3
 800dc70:	6025      	str	r5, [r4, #0]
 800dc72:	e004      	b.n	800dc7e <_malloc_r+0x72>
 800dc74:	6863      	ldr	r3, [r4, #4]
 800dc76:	42a2      	cmp	r2, r4
 800dc78:	bf0c      	ite	eq
 800dc7a:	600b      	streq	r3, [r1, #0]
 800dc7c:	6053      	strne	r3, [r2, #4]
 800dc7e:	4630      	mov	r0, r6
 800dc80:	f003 fa5c 	bl	801113c <__malloc_unlock>
 800dc84:	f104 000b 	add.w	r0, r4, #11
 800dc88:	1d23      	adds	r3, r4, #4
 800dc8a:	f020 0007 	bic.w	r0, r0, #7
 800dc8e:	1ac2      	subs	r2, r0, r3
 800dc90:	d0cc      	beq.n	800dc2c <_malloc_r+0x20>
 800dc92:	1a1b      	subs	r3, r3, r0
 800dc94:	50a3      	str	r3, [r4, r2]
 800dc96:	e7c9      	b.n	800dc2c <_malloc_r+0x20>
 800dc98:	4622      	mov	r2, r4
 800dc9a:	6864      	ldr	r4, [r4, #4]
 800dc9c:	e7cc      	b.n	800dc38 <_malloc_r+0x2c>
 800dc9e:	1cc4      	adds	r4, r0, #3
 800dca0:	f024 0403 	bic.w	r4, r4, #3
 800dca4:	42a0      	cmp	r0, r4
 800dca6:	d0e3      	beq.n	800dc70 <_malloc_r+0x64>
 800dca8:	1a21      	subs	r1, r4, r0
 800dcaa:	4630      	mov	r0, r6
 800dcac:	f000 feec 	bl	800ea88 <_sbrk_r>
 800dcb0:	3001      	adds	r0, #1
 800dcb2:	d1dd      	bne.n	800dc70 <_malloc_r+0x64>
 800dcb4:	e7cf      	b.n	800dc56 <_malloc_r+0x4a>
 800dcb6:	bf00      	nop
 800dcb8:	20004eec 	.word	0x20004eec
 800dcbc:	20004ef0 	.word	0x20004ef0

0800dcc0 <__cvt>:
 800dcc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dcc4:	ec55 4b10 	vmov	r4, r5, d0
 800dcc8:	2d00      	cmp	r5, #0
 800dcca:	460e      	mov	r6, r1
 800dccc:	4619      	mov	r1, r3
 800dcce:	462b      	mov	r3, r5
 800dcd0:	bfbb      	ittet	lt
 800dcd2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800dcd6:	461d      	movlt	r5, r3
 800dcd8:	2300      	movge	r3, #0
 800dcda:	232d      	movlt	r3, #45	; 0x2d
 800dcdc:	700b      	strb	r3, [r1, #0]
 800dcde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dce0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800dce4:	4691      	mov	r9, r2
 800dce6:	f023 0820 	bic.w	r8, r3, #32
 800dcea:	bfbc      	itt	lt
 800dcec:	4622      	movlt	r2, r4
 800dcee:	4614      	movlt	r4, r2
 800dcf0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dcf4:	d005      	beq.n	800dd02 <__cvt+0x42>
 800dcf6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800dcfa:	d100      	bne.n	800dcfe <__cvt+0x3e>
 800dcfc:	3601      	adds	r6, #1
 800dcfe:	2102      	movs	r1, #2
 800dd00:	e000      	b.n	800dd04 <__cvt+0x44>
 800dd02:	2103      	movs	r1, #3
 800dd04:	ab03      	add	r3, sp, #12
 800dd06:	9301      	str	r3, [sp, #4]
 800dd08:	ab02      	add	r3, sp, #8
 800dd0a:	9300      	str	r3, [sp, #0]
 800dd0c:	ec45 4b10 	vmov	d0, r4, r5
 800dd10:	4653      	mov	r3, sl
 800dd12:	4632      	mov	r2, r6
 800dd14:	f001 ffb4 	bl	800fc80 <_dtoa_r>
 800dd18:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800dd1c:	4607      	mov	r7, r0
 800dd1e:	d102      	bne.n	800dd26 <__cvt+0x66>
 800dd20:	f019 0f01 	tst.w	r9, #1
 800dd24:	d022      	beq.n	800dd6c <__cvt+0xac>
 800dd26:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dd2a:	eb07 0906 	add.w	r9, r7, r6
 800dd2e:	d110      	bne.n	800dd52 <__cvt+0x92>
 800dd30:	783b      	ldrb	r3, [r7, #0]
 800dd32:	2b30      	cmp	r3, #48	; 0x30
 800dd34:	d10a      	bne.n	800dd4c <__cvt+0x8c>
 800dd36:	2200      	movs	r2, #0
 800dd38:	2300      	movs	r3, #0
 800dd3a:	4620      	mov	r0, r4
 800dd3c:	4629      	mov	r1, r5
 800dd3e:	f7f2 fed3 	bl	8000ae8 <__aeabi_dcmpeq>
 800dd42:	b918      	cbnz	r0, 800dd4c <__cvt+0x8c>
 800dd44:	f1c6 0601 	rsb	r6, r6, #1
 800dd48:	f8ca 6000 	str.w	r6, [sl]
 800dd4c:	f8da 3000 	ldr.w	r3, [sl]
 800dd50:	4499      	add	r9, r3
 800dd52:	2200      	movs	r2, #0
 800dd54:	2300      	movs	r3, #0
 800dd56:	4620      	mov	r0, r4
 800dd58:	4629      	mov	r1, r5
 800dd5a:	f7f2 fec5 	bl	8000ae8 <__aeabi_dcmpeq>
 800dd5e:	b108      	cbz	r0, 800dd64 <__cvt+0xa4>
 800dd60:	f8cd 900c 	str.w	r9, [sp, #12]
 800dd64:	2230      	movs	r2, #48	; 0x30
 800dd66:	9b03      	ldr	r3, [sp, #12]
 800dd68:	454b      	cmp	r3, r9
 800dd6a:	d307      	bcc.n	800dd7c <__cvt+0xbc>
 800dd6c:	9b03      	ldr	r3, [sp, #12]
 800dd6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dd70:	1bdb      	subs	r3, r3, r7
 800dd72:	4638      	mov	r0, r7
 800dd74:	6013      	str	r3, [r2, #0]
 800dd76:	b004      	add	sp, #16
 800dd78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd7c:	1c59      	adds	r1, r3, #1
 800dd7e:	9103      	str	r1, [sp, #12]
 800dd80:	701a      	strb	r2, [r3, #0]
 800dd82:	e7f0      	b.n	800dd66 <__cvt+0xa6>

0800dd84 <__exponent>:
 800dd84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd86:	4603      	mov	r3, r0
 800dd88:	2900      	cmp	r1, #0
 800dd8a:	bfb8      	it	lt
 800dd8c:	4249      	neglt	r1, r1
 800dd8e:	f803 2b02 	strb.w	r2, [r3], #2
 800dd92:	bfb4      	ite	lt
 800dd94:	222d      	movlt	r2, #45	; 0x2d
 800dd96:	222b      	movge	r2, #43	; 0x2b
 800dd98:	2909      	cmp	r1, #9
 800dd9a:	7042      	strb	r2, [r0, #1]
 800dd9c:	dd2a      	ble.n	800ddf4 <__exponent+0x70>
 800dd9e:	f10d 0407 	add.w	r4, sp, #7
 800dda2:	46a4      	mov	ip, r4
 800dda4:	270a      	movs	r7, #10
 800dda6:	46a6      	mov	lr, r4
 800dda8:	460a      	mov	r2, r1
 800ddaa:	fb91 f6f7 	sdiv	r6, r1, r7
 800ddae:	fb07 1516 	mls	r5, r7, r6, r1
 800ddb2:	3530      	adds	r5, #48	; 0x30
 800ddb4:	2a63      	cmp	r2, #99	; 0x63
 800ddb6:	f104 34ff 	add.w	r4, r4, #4294967295
 800ddba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ddbe:	4631      	mov	r1, r6
 800ddc0:	dcf1      	bgt.n	800dda6 <__exponent+0x22>
 800ddc2:	3130      	adds	r1, #48	; 0x30
 800ddc4:	f1ae 0502 	sub.w	r5, lr, #2
 800ddc8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ddcc:	1c44      	adds	r4, r0, #1
 800ddce:	4629      	mov	r1, r5
 800ddd0:	4561      	cmp	r1, ip
 800ddd2:	d30a      	bcc.n	800ddea <__exponent+0x66>
 800ddd4:	f10d 0209 	add.w	r2, sp, #9
 800ddd8:	eba2 020e 	sub.w	r2, r2, lr
 800dddc:	4565      	cmp	r5, ip
 800ddde:	bf88      	it	hi
 800dde0:	2200      	movhi	r2, #0
 800dde2:	4413      	add	r3, r2
 800dde4:	1a18      	subs	r0, r3, r0
 800dde6:	b003      	add	sp, #12
 800dde8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ddee:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ddf2:	e7ed      	b.n	800ddd0 <__exponent+0x4c>
 800ddf4:	2330      	movs	r3, #48	; 0x30
 800ddf6:	3130      	adds	r1, #48	; 0x30
 800ddf8:	7083      	strb	r3, [r0, #2]
 800ddfa:	70c1      	strb	r1, [r0, #3]
 800ddfc:	1d03      	adds	r3, r0, #4
 800ddfe:	e7f1      	b.n	800dde4 <__exponent+0x60>

0800de00 <_printf_float>:
 800de00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de04:	ed2d 8b02 	vpush	{d8}
 800de08:	b08d      	sub	sp, #52	; 0x34
 800de0a:	460c      	mov	r4, r1
 800de0c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800de10:	4616      	mov	r6, r2
 800de12:	461f      	mov	r7, r3
 800de14:	4605      	mov	r5, r0
 800de16:	f003 f963 	bl	80110e0 <_localeconv_r>
 800de1a:	f8d0 a000 	ldr.w	sl, [r0]
 800de1e:	4650      	mov	r0, sl
 800de20:	f7f2 f9e6 	bl	80001f0 <strlen>
 800de24:	2300      	movs	r3, #0
 800de26:	930a      	str	r3, [sp, #40]	; 0x28
 800de28:	6823      	ldr	r3, [r4, #0]
 800de2a:	9305      	str	r3, [sp, #20]
 800de2c:	f8d8 3000 	ldr.w	r3, [r8]
 800de30:	f894 b018 	ldrb.w	fp, [r4, #24]
 800de34:	3307      	adds	r3, #7
 800de36:	f023 0307 	bic.w	r3, r3, #7
 800de3a:	f103 0208 	add.w	r2, r3, #8
 800de3e:	f8c8 2000 	str.w	r2, [r8]
 800de42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de46:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800de4a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800de4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800de52:	9307      	str	r3, [sp, #28]
 800de54:	f8cd 8018 	str.w	r8, [sp, #24]
 800de58:	ee08 0a10 	vmov	s16, r0
 800de5c:	4b9f      	ldr	r3, [pc, #636]	; (800e0dc <_printf_float+0x2dc>)
 800de5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800de62:	f04f 32ff 	mov.w	r2, #4294967295
 800de66:	f7f2 fe71 	bl	8000b4c <__aeabi_dcmpun>
 800de6a:	bb88      	cbnz	r0, 800ded0 <_printf_float+0xd0>
 800de6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800de70:	4b9a      	ldr	r3, [pc, #616]	; (800e0dc <_printf_float+0x2dc>)
 800de72:	f04f 32ff 	mov.w	r2, #4294967295
 800de76:	f7f2 fe4b 	bl	8000b10 <__aeabi_dcmple>
 800de7a:	bb48      	cbnz	r0, 800ded0 <_printf_float+0xd0>
 800de7c:	2200      	movs	r2, #0
 800de7e:	2300      	movs	r3, #0
 800de80:	4640      	mov	r0, r8
 800de82:	4649      	mov	r1, r9
 800de84:	f7f2 fe3a 	bl	8000afc <__aeabi_dcmplt>
 800de88:	b110      	cbz	r0, 800de90 <_printf_float+0x90>
 800de8a:	232d      	movs	r3, #45	; 0x2d
 800de8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de90:	4b93      	ldr	r3, [pc, #588]	; (800e0e0 <_printf_float+0x2e0>)
 800de92:	4894      	ldr	r0, [pc, #592]	; (800e0e4 <_printf_float+0x2e4>)
 800de94:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800de98:	bf94      	ite	ls
 800de9a:	4698      	movls	r8, r3
 800de9c:	4680      	movhi	r8, r0
 800de9e:	2303      	movs	r3, #3
 800dea0:	6123      	str	r3, [r4, #16]
 800dea2:	9b05      	ldr	r3, [sp, #20]
 800dea4:	f023 0204 	bic.w	r2, r3, #4
 800dea8:	6022      	str	r2, [r4, #0]
 800deaa:	f04f 0900 	mov.w	r9, #0
 800deae:	9700      	str	r7, [sp, #0]
 800deb0:	4633      	mov	r3, r6
 800deb2:	aa0b      	add	r2, sp, #44	; 0x2c
 800deb4:	4621      	mov	r1, r4
 800deb6:	4628      	mov	r0, r5
 800deb8:	f000 f9d8 	bl	800e26c <_printf_common>
 800debc:	3001      	adds	r0, #1
 800debe:	f040 8090 	bne.w	800dfe2 <_printf_float+0x1e2>
 800dec2:	f04f 30ff 	mov.w	r0, #4294967295
 800dec6:	b00d      	add	sp, #52	; 0x34
 800dec8:	ecbd 8b02 	vpop	{d8}
 800decc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ded0:	4642      	mov	r2, r8
 800ded2:	464b      	mov	r3, r9
 800ded4:	4640      	mov	r0, r8
 800ded6:	4649      	mov	r1, r9
 800ded8:	f7f2 fe38 	bl	8000b4c <__aeabi_dcmpun>
 800dedc:	b140      	cbz	r0, 800def0 <_printf_float+0xf0>
 800dede:	464b      	mov	r3, r9
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	bfbc      	itt	lt
 800dee4:	232d      	movlt	r3, #45	; 0x2d
 800dee6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800deea:	487f      	ldr	r0, [pc, #508]	; (800e0e8 <_printf_float+0x2e8>)
 800deec:	4b7f      	ldr	r3, [pc, #508]	; (800e0ec <_printf_float+0x2ec>)
 800deee:	e7d1      	b.n	800de94 <_printf_float+0x94>
 800def0:	6863      	ldr	r3, [r4, #4]
 800def2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800def6:	9206      	str	r2, [sp, #24]
 800def8:	1c5a      	adds	r2, r3, #1
 800defa:	d13f      	bne.n	800df7c <_printf_float+0x17c>
 800defc:	2306      	movs	r3, #6
 800defe:	6063      	str	r3, [r4, #4]
 800df00:	9b05      	ldr	r3, [sp, #20]
 800df02:	6861      	ldr	r1, [r4, #4]
 800df04:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800df08:	2300      	movs	r3, #0
 800df0a:	9303      	str	r3, [sp, #12]
 800df0c:	ab0a      	add	r3, sp, #40	; 0x28
 800df0e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800df12:	ab09      	add	r3, sp, #36	; 0x24
 800df14:	ec49 8b10 	vmov	d0, r8, r9
 800df18:	9300      	str	r3, [sp, #0]
 800df1a:	6022      	str	r2, [r4, #0]
 800df1c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800df20:	4628      	mov	r0, r5
 800df22:	f7ff fecd 	bl	800dcc0 <__cvt>
 800df26:	9b06      	ldr	r3, [sp, #24]
 800df28:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df2a:	2b47      	cmp	r3, #71	; 0x47
 800df2c:	4680      	mov	r8, r0
 800df2e:	d108      	bne.n	800df42 <_printf_float+0x142>
 800df30:	1cc8      	adds	r0, r1, #3
 800df32:	db02      	blt.n	800df3a <_printf_float+0x13a>
 800df34:	6863      	ldr	r3, [r4, #4]
 800df36:	4299      	cmp	r1, r3
 800df38:	dd41      	ble.n	800dfbe <_printf_float+0x1be>
 800df3a:	f1ab 0b02 	sub.w	fp, fp, #2
 800df3e:	fa5f fb8b 	uxtb.w	fp, fp
 800df42:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800df46:	d820      	bhi.n	800df8a <_printf_float+0x18a>
 800df48:	3901      	subs	r1, #1
 800df4a:	465a      	mov	r2, fp
 800df4c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800df50:	9109      	str	r1, [sp, #36]	; 0x24
 800df52:	f7ff ff17 	bl	800dd84 <__exponent>
 800df56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800df58:	1813      	adds	r3, r2, r0
 800df5a:	2a01      	cmp	r2, #1
 800df5c:	4681      	mov	r9, r0
 800df5e:	6123      	str	r3, [r4, #16]
 800df60:	dc02      	bgt.n	800df68 <_printf_float+0x168>
 800df62:	6822      	ldr	r2, [r4, #0]
 800df64:	07d2      	lsls	r2, r2, #31
 800df66:	d501      	bpl.n	800df6c <_printf_float+0x16c>
 800df68:	3301      	adds	r3, #1
 800df6a:	6123      	str	r3, [r4, #16]
 800df6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800df70:	2b00      	cmp	r3, #0
 800df72:	d09c      	beq.n	800deae <_printf_float+0xae>
 800df74:	232d      	movs	r3, #45	; 0x2d
 800df76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df7a:	e798      	b.n	800deae <_printf_float+0xae>
 800df7c:	9a06      	ldr	r2, [sp, #24]
 800df7e:	2a47      	cmp	r2, #71	; 0x47
 800df80:	d1be      	bne.n	800df00 <_printf_float+0x100>
 800df82:	2b00      	cmp	r3, #0
 800df84:	d1bc      	bne.n	800df00 <_printf_float+0x100>
 800df86:	2301      	movs	r3, #1
 800df88:	e7b9      	b.n	800defe <_printf_float+0xfe>
 800df8a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800df8e:	d118      	bne.n	800dfc2 <_printf_float+0x1c2>
 800df90:	2900      	cmp	r1, #0
 800df92:	6863      	ldr	r3, [r4, #4]
 800df94:	dd0b      	ble.n	800dfae <_printf_float+0x1ae>
 800df96:	6121      	str	r1, [r4, #16]
 800df98:	b913      	cbnz	r3, 800dfa0 <_printf_float+0x1a0>
 800df9a:	6822      	ldr	r2, [r4, #0]
 800df9c:	07d0      	lsls	r0, r2, #31
 800df9e:	d502      	bpl.n	800dfa6 <_printf_float+0x1a6>
 800dfa0:	3301      	adds	r3, #1
 800dfa2:	440b      	add	r3, r1
 800dfa4:	6123      	str	r3, [r4, #16]
 800dfa6:	65a1      	str	r1, [r4, #88]	; 0x58
 800dfa8:	f04f 0900 	mov.w	r9, #0
 800dfac:	e7de      	b.n	800df6c <_printf_float+0x16c>
 800dfae:	b913      	cbnz	r3, 800dfb6 <_printf_float+0x1b6>
 800dfb0:	6822      	ldr	r2, [r4, #0]
 800dfb2:	07d2      	lsls	r2, r2, #31
 800dfb4:	d501      	bpl.n	800dfba <_printf_float+0x1ba>
 800dfb6:	3302      	adds	r3, #2
 800dfb8:	e7f4      	b.n	800dfa4 <_printf_float+0x1a4>
 800dfba:	2301      	movs	r3, #1
 800dfbc:	e7f2      	b.n	800dfa4 <_printf_float+0x1a4>
 800dfbe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800dfc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dfc4:	4299      	cmp	r1, r3
 800dfc6:	db05      	blt.n	800dfd4 <_printf_float+0x1d4>
 800dfc8:	6823      	ldr	r3, [r4, #0]
 800dfca:	6121      	str	r1, [r4, #16]
 800dfcc:	07d8      	lsls	r0, r3, #31
 800dfce:	d5ea      	bpl.n	800dfa6 <_printf_float+0x1a6>
 800dfd0:	1c4b      	adds	r3, r1, #1
 800dfd2:	e7e7      	b.n	800dfa4 <_printf_float+0x1a4>
 800dfd4:	2900      	cmp	r1, #0
 800dfd6:	bfd4      	ite	le
 800dfd8:	f1c1 0202 	rsble	r2, r1, #2
 800dfdc:	2201      	movgt	r2, #1
 800dfde:	4413      	add	r3, r2
 800dfe0:	e7e0      	b.n	800dfa4 <_printf_float+0x1a4>
 800dfe2:	6823      	ldr	r3, [r4, #0]
 800dfe4:	055a      	lsls	r2, r3, #21
 800dfe6:	d407      	bmi.n	800dff8 <_printf_float+0x1f8>
 800dfe8:	6923      	ldr	r3, [r4, #16]
 800dfea:	4642      	mov	r2, r8
 800dfec:	4631      	mov	r1, r6
 800dfee:	4628      	mov	r0, r5
 800dff0:	47b8      	blx	r7
 800dff2:	3001      	adds	r0, #1
 800dff4:	d12c      	bne.n	800e050 <_printf_float+0x250>
 800dff6:	e764      	b.n	800dec2 <_printf_float+0xc2>
 800dff8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dffc:	f240 80e0 	bls.w	800e1c0 <_printf_float+0x3c0>
 800e000:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e004:	2200      	movs	r2, #0
 800e006:	2300      	movs	r3, #0
 800e008:	f7f2 fd6e 	bl	8000ae8 <__aeabi_dcmpeq>
 800e00c:	2800      	cmp	r0, #0
 800e00e:	d034      	beq.n	800e07a <_printf_float+0x27a>
 800e010:	4a37      	ldr	r2, [pc, #220]	; (800e0f0 <_printf_float+0x2f0>)
 800e012:	2301      	movs	r3, #1
 800e014:	4631      	mov	r1, r6
 800e016:	4628      	mov	r0, r5
 800e018:	47b8      	blx	r7
 800e01a:	3001      	adds	r0, #1
 800e01c:	f43f af51 	beq.w	800dec2 <_printf_float+0xc2>
 800e020:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e024:	429a      	cmp	r2, r3
 800e026:	db02      	blt.n	800e02e <_printf_float+0x22e>
 800e028:	6823      	ldr	r3, [r4, #0]
 800e02a:	07d8      	lsls	r0, r3, #31
 800e02c:	d510      	bpl.n	800e050 <_printf_float+0x250>
 800e02e:	ee18 3a10 	vmov	r3, s16
 800e032:	4652      	mov	r2, sl
 800e034:	4631      	mov	r1, r6
 800e036:	4628      	mov	r0, r5
 800e038:	47b8      	blx	r7
 800e03a:	3001      	adds	r0, #1
 800e03c:	f43f af41 	beq.w	800dec2 <_printf_float+0xc2>
 800e040:	f04f 0800 	mov.w	r8, #0
 800e044:	f104 091a 	add.w	r9, r4, #26
 800e048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e04a:	3b01      	subs	r3, #1
 800e04c:	4543      	cmp	r3, r8
 800e04e:	dc09      	bgt.n	800e064 <_printf_float+0x264>
 800e050:	6823      	ldr	r3, [r4, #0]
 800e052:	079b      	lsls	r3, r3, #30
 800e054:	f100 8105 	bmi.w	800e262 <_printf_float+0x462>
 800e058:	68e0      	ldr	r0, [r4, #12]
 800e05a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e05c:	4298      	cmp	r0, r3
 800e05e:	bfb8      	it	lt
 800e060:	4618      	movlt	r0, r3
 800e062:	e730      	b.n	800dec6 <_printf_float+0xc6>
 800e064:	2301      	movs	r3, #1
 800e066:	464a      	mov	r2, r9
 800e068:	4631      	mov	r1, r6
 800e06a:	4628      	mov	r0, r5
 800e06c:	47b8      	blx	r7
 800e06e:	3001      	adds	r0, #1
 800e070:	f43f af27 	beq.w	800dec2 <_printf_float+0xc2>
 800e074:	f108 0801 	add.w	r8, r8, #1
 800e078:	e7e6      	b.n	800e048 <_printf_float+0x248>
 800e07a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	dc39      	bgt.n	800e0f4 <_printf_float+0x2f4>
 800e080:	4a1b      	ldr	r2, [pc, #108]	; (800e0f0 <_printf_float+0x2f0>)
 800e082:	2301      	movs	r3, #1
 800e084:	4631      	mov	r1, r6
 800e086:	4628      	mov	r0, r5
 800e088:	47b8      	blx	r7
 800e08a:	3001      	adds	r0, #1
 800e08c:	f43f af19 	beq.w	800dec2 <_printf_float+0xc2>
 800e090:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e094:	4313      	orrs	r3, r2
 800e096:	d102      	bne.n	800e09e <_printf_float+0x29e>
 800e098:	6823      	ldr	r3, [r4, #0]
 800e09a:	07d9      	lsls	r1, r3, #31
 800e09c:	d5d8      	bpl.n	800e050 <_printf_float+0x250>
 800e09e:	ee18 3a10 	vmov	r3, s16
 800e0a2:	4652      	mov	r2, sl
 800e0a4:	4631      	mov	r1, r6
 800e0a6:	4628      	mov	r0, r5
 800e0a8:	47b8      	blx	r7
 800e0aa:	3001      	adds	r0, #1
 800e0ac:	f43f af09 	beq.w	800dec2 <_printf_float+0xc2>
 800e0b0:	f04f 0900 	mov.w	r9, #0
 800e0b4:	f104 0a1a 	add.w	sl, r4, #26
 800e0b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0ba:	425b      	negs	r3, r3
 800e0bc:	454b      	cmp	r3, r9
 800e0be:	dc01      	bgt.n	800e0c4 <_printf_float+0x2c4>
 800e0c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0c2:	e792      	b.n	800dfea <_printf_float+0x1ea>
 800e0c4:	2301      	movs	r3, #1
 800e0c6:	4652      	mov	r2, sl
 800e0c8:	4631      	mov	r1, r6
 800e0ca:	4628      	mov	r0, r5
 800e0cc:	47b8      	blx	r7
 800e0ce:	3001      	adds	r0, #1
 800e0d0:	f43f aef7 	beq.w	800dec2 <_printf_float+0xc2>
 800e0d4:	f109 0901 	add.w	r9, r9, #1
 800e0d8:	e7ee      	b.n	800e0b8 <_printf_float+0x2b8>
 800e0da:	bf00      	nop
 800e0dc:	7fefffff 	.word	0x7fefffff
 800e0e0:	08013130 	.word	0x08013130
 800e0e4:	08013134 	.word	0x08013134
 800e0e8:	0801313c 	.word	0x0801313c
 800e0ec:	08013138 	.word	0x08013138
 800e0f0:	08013579 	.word	0x08013579
 800e0f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e0f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e0f8:	429a      	cmp	r2, r3
 800e0fa:	bfa8      	it	ge
 800e0fc:	461a      	movge	r2, r3
 800e0fe:	2a00      	cmp	r2, #0
 800e100:	4691      	mov	r9, r2
 800e102:	dc37      	bgt.n	800e174 <_printf_float+0x374>
 800e104:	f04f 0b00 	mov.w	fp, #0
 800e108:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e10c:	f104 021a 	add.w	r2, r4, #26
 800e110:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e112:	9305      	str	r3, [sp, #20]
 800e114:	eba3 0309 	sub.w	r3, r3, r9
 800e118:	455b      	cmp	r3, fp
 800e11a:	dc33      	bgt.n	800e184 <_printf_float+0x384>
 800e11c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e120:	429a      	cmp	r2, r3
 800e122:	db3b      	blt.n	800e19c <_printf_float+0x39c>
 800e124:	6823      	ldr	r3, [r4, #0]
 800e126:	07da      	lsls	r2, r3, #31
 800e128:	d438      	bmi.n	800e19c <_printf_float+0x39c>
 800e12a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e12c:	9b05      	ldr	r3, [sp, #20]
 800e12e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e130:	1ad3      	subs	r3, r2, r3
 800e132:	eba2 0901 	sub.w	r9, r2, r1
 800e136:	4599      	cmp	r9, r3
 800e138:	bfa8      	it	ge
 800e13a:	4699      	movge	r9, r3
 800e13c:	f1b9 0f00 	cmp.w	r9, #0
 800e140:	dc35      	bgt.n	800e1ae <_printf_float+0x3ae>
 800e142:	f04f 0800 	mov.w	r8, #0
 800e146:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e14a:	f104 0a1a 	add.w	sl, r4, #26
 800e14e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e152:	1a9b      	subs	r3, r3, r2
 800e154:	eba3 0309 	sub.w	r3, r3, r9
 800e158:	4543      	cmp	r3, r8
 800e15a:	f77f af79 	ble.w	800e050 <_printf_float+0x250>
 800e15e:	2301      	movs	r3, #1
 800e160:	4652      	mov	r2, sl
 800e162:	4631      	mov	r1, r6
 800e164:	4628      	mov	r0, r5
 800e166:	47b8      	blx	r7
 800e168:	3001      	adds	r0, #1
 800e16a:	f43f aeaa 	beq.w	800dec2 <_printf_float+0xc2>
 800e16e:	f108 0801 	add.w	r8, r8, #1
 800e172:	e7ec      	b.n	800e14e <_printf_float+0x34e>
 800e174:	4613      	mov	r3, r2
 800e176:	4631      	mov	r1, r6
 800e178:	4642      	mov	r2, r8
 800e17a:	4628      	mov	r0, r5
 800e17c:	47b8      	blx	r7
 800e17e:	3001      	adds	r0, #1
 800e180:	d1c0      	bne.n	800e104 <_printf_float+0x304>
 800e182:	e69e      	b.n	800dec2 <_printf_float+0xc2>
 800e184:	2301      	movs	r3, #1
 800e186:	4631      	mov	r1, r6
 800e188:	4628      	mov	r0, r5
 800e18a:	9205      	str	r2, [sp, #20]
 800e18c:	47b8      	blx	r7
 800e18e:	3001      	adds	r0, #1
 800e190:	f43f ae97 	beq.w	800dec2 <_printf_float+0xc2>
 800e194:	9a05      	ldr	r2, [sp, #20]
 800e196:	f10b 0b01 	add.w	fp, fp, #1
 800e19a:	e7b9      	b.n	800e110 <_printf_float+0x310>
 800e19c:	ee18 3a10 	vmov	r3, s16
 800e1a0:	4652      	mov	r2, sl
 800e1a2:	4631      	mov	r1, r6
 800e1a4:	4628      	mov	r0, r5
 800e1a6:	47b8      	blx	r7
 800e1a8:	3001      	adds	r0, #1
 800e1aa:	d1be      	bne.n	800e12a <_printf_float+0x32a>
 800e1ac:	e689      	b.n	800dec2 <_printf_float+0xc2>
 800e1ae:	9a05      	ldr	r2, [sp, #20]
 800e1b0:	464b      	mov	r3, r9
 800e1b2:	4442      	add	r2, r8
 800e1b4:	4631      	mov	r1, r6
 800e1b6:	4628      	mov	r0, r5
 800e1b8:	47b8      	blx	r7
 800e1ba:	3001      	adds	r0, #1
 800e1bc:	d1c1      	bne.n	800e142 <_printf_float+0x342>
 800e1be:	e680      	b.n	800dec2 <_printf_float+0xc2>
 800e1c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e1c2:	2a01      	cmp	r2, #1
 800e1c4:	dc01      	bgt.n	800e1ca <_printf_float+0x3ca>
 800e1c6:	07db      	lsls	r3, r3, #31
 800e1c8:	d538      	bpl.n	800e23c <_printf_float+0x43c>
 800e1ca:	2301      	movs	r3, #1
 800e1cc:	4642      	mov	r2, r8
 800e1ce:	4631      	mov	r1, r6
 800e1d0:	4628      	mov	r0, r5
 800e1d2:	47b8      	blx	r7
 800e1d4:	3001      	adds	r0, #1
 800e1d6:	f43f ae74 	beq.w	800dec2 <_printf_float+0xc2>
 800e1da:	ee18 3a10 	vmov	r3, s16
 800e1de:	4652      	mov	r2, sl
 800e1e0:	4631      	mov	r1, r6
 800e1e2:	4628      	mov	r0, r5
 800e1e4:	47b8      	blx	r7
 800e1e6:	3001      	adds	r0, #1
 800e1e8:	f43f ae6b 	beq.w	800dec2 <_printf_float+0xc2>
 800e1ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	f7f2 fc78 	bl	8000ae8 <__aeabi_dcmpeq>
 800e1f8:	b9d8      	cbnz	r0, 800e232 <_printf_float+0x432>
 800e1fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1fc:	f108 0201 	add.w	r2, r8, #1
 800e200:	3b01      	subs	r3, #1
 800e202:	4631      	mov	r1, r6
 800e204:	4628      	mov	r0, r5
 800e206:	47b8      	blx	r7
 800e208:	3001      	adds	r0, #1
 800e20a:	d10e      	bne.n	800e22a <_printf_float+0x42a>
 800e20c:	e659      	b.n	800dec2 <_printf_float+0xc2>
 800e20e:	2301      	movs	r3, #1
 800e210:	4652      	mov	r2, sl
 800e212:	4631      	mov	r1, r6
 800e214:	4628      	mov	r0, r5
 800e216:	47b8      	blx	r7
 800e218:	3001      	adds	r0, #1
 800e21a:	f43f ae52 	beq.w	800dec2 <_printf_float+0xc2>
 800e21e:	f108 0801 	add.w	r8, r8, #1
 800e222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e224:	3b01      	subs	r3, #1
 800e226:	4543      	cmp	r3, r8
 800e228:	dcf1      	bgt.n	800e20e <_printf_float+0x40e>
 800e22a:	464b      	mov	r3, r9
 800e22c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e230:	e6dc      	b.n	800dfec <_printf_float+0x1ec>
 800e232:	f04f 0800 	mov.w	r8, #0
 800e236:	f104 0a1a 	add.w	sl, r4, #26
 800e23a:	e7f2      	b.n	800e222 <_printf_float+0x422>
 800e23c:	2301      	movs	r3, #1
 800e23e:	4642      	mov	r2, r8
 800e240:	e7df      	b.n	800e202 <_printf_float+0x402>
 800e242:	2301      	movs	r3, #1
 800e244:	464a      	mov	r2, r9
 800e246:	4631      	mov	r1, r6
 800e248:	4628      	mov	r0, r5
 800e24a:	47b8      	blx	r7
 800e24c:	3001      	adds	r0, #1
 800e24e:	f43f ae38 	beq.w	800dec2 <_printf_float+0xc2>
 800e252:	f108 0801 	add.w	r8, r8, #1
 800e256:	68e3      	ldr	r3, [r4, #12]
 800e258:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e25a:	1a5b      	subs	r3, r3, r1
 800e25c:	4543      	cmp	r3, r8
 800e25e:	dcf0      	bgt.n	800e242 <_printf_float+0x442>
 800e260:	e6fa      	b.n	800e058 <_printf_float+0x258>
 800e262:	f04f 0800 	mov.w	r8, #0
 800e266:	f104 0919 	add.w	r9, r4, #25
 800e26a:	e7f4      	b.n	800e256 <_printf_float+0x456>

0800e26c <_printf_common>:
 800e26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e270:	4616      	mov	r6, r2
 800e272:	4699      	mov	r9, r3
 800e274:	688a      	ldr	r2, [r1, #8]
 800e276:	690b      	ldr	r3, [r1, #16]
 800e278:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e27c:	4293      	cmp	r3, r2
 800e27e:	bfb8      	it	lt
 800e280:	4613      	movlt	r3, r2
 800e282:	6033      	str	r3, [r6, #0]
 800e284:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e288:	4607      	mov	r7, r0
 800e28a:	460c      	mov	r4, r1
 800e28c:	b10a      	cbz	r2, 800e292 <_printf_common+0x26>
 800e28e:	3301      	adds	r3, #1
 800e290:	6033      	str	r3, [r6, #0]
 800e292:	6823      	ldr	r3, [r4, #0]
 800e294:	0699      	lsls	r1, r3, #26
 800e296:	bf42      	ittt	mi
 800e298:	6833      	ldrmi	r3, [r6, #0]
 800e29a:	3302      	addmi	r3, #2
 800e29c:	6033      	strmi	r3, [r6, #0]
 800e29e:	6825      	ldr	r5, [r4, #0]
 800e2a0:	f015 0506 	ands.w	r5, r5, #6
 800e2a4:	d106      	bne.n	800e2b4 <_printf_common+0x48>
 800e2a6:	f104 0a19 	add.w	sl, r4, #25
 800e2aa:	68e3      	ldr	r3, [r4, #12]
 800e2ac:	6832      	ldr	r2, [r6, #0]
 800e2ae:	1a9b      	subs	r3, r3, r2
 800e2b0:	42ab      	cmp	r3, r5
 800e2b2:	dc26      	bgt.n	800e302 <_printf_common+0x96>
 800e2b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e2b8:	1e13      	subs	r3, r2, #0
 800e2ba:	6822      	ldr	r2, [r4, #0]
 800e2bc:	bf18      	it	ne
 800e2be:	2301      	movne	r3, #1
 800e2c0:	0692      	lsls	r2, r2, #26
 800e2c2:	d42b      	bmi.n	800e31c <_printf_common+0xb0>
 800e2c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e2c8:	4649      	mov	r1, r9
 800e2ca:	4638      	mov	r0, r7
 800e2cc:	47c0      	blx	r8
 800e2ce:	3001      	adds	r0, #1
 800e2d0:	d01e      	beq.n	800e310 <_printf_common+0xa4>
 800e2d2:	6823      	ldr	r3, [r4, #0]
 800e2d4:	68e5      	ldr	r5, [r4, #12]
 800e2d6:	6832      	ldr	r2, [r6, #0]
 800e2d8:	f003 0306 	and.w	r3, r3, #6
 800e2dc:	2b04      	cmp	r3, #4
 800e2de:	bf08      	it	eq
 800e2e0:	1aad      	subeq	r5, r5, r2
 800e2e2:	68a3      	ldr	r3, [r4, #8]
 800e2e4:	6922      	ldr	r2, [r4, #16]
 800e2e6:	bf0c      	ite	eq
 800e2e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e2ec:	2500      	movne	r5, #0
 800e2ee:	4293      	cmp	r3, r2
 800e2f0:	bfc4      	itt	gt
 800e2f2:	1a9b      	subgt	r3, r3, r2
 800e2f4:	18ed      	addgt	r5, r5, r3
 800e2f6:	2600      	movs	r6, #0
 800e2f8:	341a      	adds	r4, #26
 800e2fa:	42b5      	cmp	r5, r6
 800e2fc:	d11a      	bne.n	800e334 <_printf_common+0xc8>
 800e2fe:	2000      	movs	r0, #0
 800e300:	e008      	b.n	800e314 <_printf_common+0xa8>
 800e302:	2301      	movs	r3, #1
 800e304:	4652      	mov	r2, sl
 800e306:	4649      	mov	r1, r9
 800e308:	4638      	mov	r0, r7
 800e30a:	47c0      	blx	r8
 800e30c:	3001      	adds	r0, #1
 800e30e:	d103      	bne.n	800e318 <_printf_common+0xac>
 800e310:	f04f 30ff 	mov.w	r0, #4294967295
 800e314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e318:	3501      	adds	r5, #1
 800e31a:	e7c6      	b.n	800e2aa <_printf_common+0x3e>
 800e31c:	18e1      	adds	r1, r4, r3
 800e31e:	1c5a      	adds	r2, r3, #1
 800e320:	2030      	movs	r0, #48	; 0x30
 800e322:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e326:	4422      	add	r2, r4
 800e328:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e32c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e330:	3302      	adds	r3, #2
 800e332:	e7c7      	b.n	800e2c4 <_printf_common+0x58>
 800e334:	2301      	movs	r3, #1
 800e336:	4622      	mov	r2, r4
 800e338:	4649      	mov	r1, r9
 800e33a:	4638      	mov	r0, r7
 800e33c:	47c0      	blx	r8
 800e33e:	3001      	adds	r0, #1
 800e340:	d0e6      	beq.n	800e310 <_printf_common+0xa4>
 800e342:	3601      	adds	r6, #1
 800e344:	e7d9      	b.n	800e2fa <_printf_common+0x8e>
	...

0800e348 <_printf_i>:
 800e348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e34c:	460c      	mov	r4, r1
 800e34e:	4691      	mov	r9, r2
 800e350:	7e27      	ldrb	r7, [r4, #24]
 800e352:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e354:	2f78      	cmp	r7, #120	; 0x78
 800e356:	4680      	mov	r8, r0
 800e358:	469a      	mov	sl, r3
 800e35a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e35e:	d807      	bhi.n	800e370 <_printf_i+0x28>
 800e360:	2f62      	cmp	r7, #98	; 0x62
 800e362:	d80a      	bhi.n	800e37a <_printf_i+0x32>
 800e364:	2f00      	cmp	r7, #0
 800e366:	f000 80d8 	beq.w	800e51a <_printf_i+0x1d2>
 800e36a:	2f58      	cmp	r7, #88	; 0x58
 800e36c:	f000 80a3 	beq.w	800e4b6 <_printf_i+0x16e>
 800e370:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e374:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e378:	e03a      	b.n	800e3f0 <_printf_i+0xa8>
 800e37a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e37e:	2b15      	cmp	r3, #21
 800e380:	d8f6      	bhi.n	800e370 <_printf_i+0x28>
 800e382:	a001      	add	r0, pc, #4	; (adr r0, 800e388 <_printf_i+0x40>)
 800e384:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e388:	0800e3e1 	.word	0x0800e3e1
 800e38c:	0800e3f5 	.word	0x0800e3f5
 800e390:	0800e371 	.word	0x0800e371
 800e394:	0800e371 	.word	0x0800e371
 800e398:	0800e371 	.word	0x0800e371
 800e39c:	0800e371 	.word	0x0800e371
 800e3a0:	0800e3f5 	.word	0x0800e3f5
 800e3a4:	0800e371 	.word	0x0800e371
 800e3a8:	0800e371 	.word	0x0800e371
 800e3ac:	0800e371 	.word	0x0800e371
 800e3b0:	0800e371 	.word	0x0800e371
 800e3b4:	0800e501 	.word	0x0800e501
 800e3b8:	0800e425 	.word	0x0800e425
 800e3bc:	0800e4e3 	.word	0x0800e4e3
 800e3c0:	0800e371 	.word	0x0800e371
 800e3c4:	0800e371 	.word	0x0800e371
 800e3c8:	0800e523 	.word	0x0800e523
 800e3cc:	0800e371 	.word	0x0800e371
 800e3d0:	0800e425 	.word	0x0800e425
 800e3d4:	0800e371 	.word	0x0800e371
 800e3d8:	0800e371 	.word	0x0800e371
 800e3dc:	0800e4eb 	.word	0x0800e4eb
 800e3e0:	680b      	ldr	r3, [r1, #0]
 800e3e2:	1d1a      	adds	r2, r3, #4
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	600a      	str	r2, [r1, #0]
 800e3e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e3ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e3f0:	2301      	movs	r3, #1
 800e3f2:	e0a3      	b.n	800e53c <_printf_i+0x1f4>
 800e3f4:	6825      	ldr	r5, [r4, #0]
 800e3f6:	6808      	ldr	r0, [r1, #0]
 800e3f8:	062e      	lsls	r6, r5, #24
 800e3fa:	f100 0304 	add.w	r3, r0, #4
 800e3fe:	d50a      	bpl.n	800e416 <_printf_i+0xce>
 800e400:	6805      	ldr	r5, [r0, #0]
 800e402:	600b      	str	r3, [r1, #0]
 800e404:	2d00      	cmp	r5, #0
 800e406:	da03      	bge.n	800e410 <_printf_i+0xc8>
 800e408:	232d      	movs	r3, #45	; 0x2d
 800e40a:	426d      	negs	r5, r5
 800e40c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e410:	485e      	ldr	r0, [pc, #376]	; (800e58c <_printf_i+0x244>)
 800e412:	230a      	movs	r3, #10
 800e414:	e019      	b.n	800e44a <_printf_i+0x102>
 800e416:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e41a:	6805      	ldr	r5, [r0, #0]
 800e41c:	600b      	str	r3, [r1, #0]
 800e41e:	bf18      	it	ne
 800e420:	b22d      	sxthne	r5, r5
 800e422:	e7ef      	b.n	800e404 <_printf_i+0xbc>
 800e424:	680b      	ldr	r3, [r1, #0]
 800e426:	6825      	ldr	r5, [r4, #0]
 800e428:	1d18      	adds	r0, r3, #4
 800e42a:	6008      	str	r0, [r1, #0]
 800e42c:	0628      	lsls	r0, r5, #24
 800e42e:	d501      	bpl.n	800e434 <_printf_i+0xec>
 800e430:	681d      	ldr	r5, [r3, #0]
 800e432:	e002      	b.n	800e43a <_printf_i+0xf2>
 800e434:	0669      	lsls	r1, r5, #25
 800e436:	d5fb      	bpl.n	800e430 <_printf_i+0xe8>
 800e438:	881d      	ldrh	r5, [r3, #0]
 800e43a:	4854      	ldr	r0, [pc, #336]	; (800e58c <_printf_i+0x244>)
 800e43c:	2f6f      	cmp	r7, #111	; 0x6f
 800e43e:	bf0c      	ite	eq
 800e440:	2308      	moveq	r3, #8
 800e442:	230a      	movne	r3, #10
 800e444:	2100      	movs	r1, #0
 800e446:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e44a:	6866      	ldr	r6, [r4, #4]
 800e44c:	60a6      	str	r6, [r4, #8]
 800e44e:	2e00      	cmp	r6, #0
 800e450:	bfa2      	ittt	ge
 800e452:	6821      	ldrge	r1, [r4, #0]
 800e454:	f021 0104 	bicge.w	r1, r1, #4
 800e458:	6021      	strge	r1, [r4, #0]
 800e45a:	b90d      	cbnz	r5, 800e460 <_printf_i+0x118>
 800e45c:	2e00      	cmp	r6, #0
 800e45e:	d04d      	beq.n	800e4fc <_printf_i+0x1b4>
 800e460:	4616      	mov	r6, r2
 800e462:	fbb5 f1f3 	udiv	r1, r5, r3
 800e466:	fb03 5711 	mls	r7, r3, r1, r5
 800e46a:	5dc7      	ldrb	r7, [r0, r7]
 800e46c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e470:	462f      	mov	r7, r5
 800e472:	42bb      	cmp	r3, r7
 800e474:	460d      	mov	r5, r1
 800e476:	d9f4      	bls.n	800e462 <_printf_i+0x11a>
 800e478:	2b08      	cmp	r3, #8
 800e47a:	d10b      	bne.n	800e494 <_printf_i+0x14c>
 800e47c:	6823      	ldr	r3, [r4, #0]
 800e47e:	07df      	lsls	r7, r3, #31
 800e480:	d508      	bpl.n	800e494 <_printf_i+0x14c>
 800e482:	6923      	ldr	r3, [r4, #16]
 800e484:	6861      	ldr	r1, [r4, #4]
 800e486:	4299      	cmp	r1, r3
 800e488:	bfde      	ittt	le
 800e48a:	2330      	movle	r3, #48	; 0x30
 800e48c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e490:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e494:	1b92      	subs	r2, r2, r6
 800e496:	6122      	str	r2, [r4, #16]
 800e498:	f8cd a000 	str.w	sl, [sp]
 800e49c:	464b      	mov	r3, r9
 800e49e:	aa03      	add	r2, sp, #12
 800e4a0:	4621      	mov	r1, r4
 800e4a2:	4640      	mov	r0, r8
 800e4a4:	f7ff fee2 	bl	800e26c <_printf_common>
 800e4a8:	3001      	adds	r0, #1
 800e4aa:	d14c      	bne.n	800e546 <_printf_i+0x1fe>
 800e4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800e4b0:	b004      	add	sp, #16
 800e4b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4b6:	4835      	ldr	r0, [pc, #212]	; (800e58c <_printf_i+0x244>)
 800e4b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e4bc:	6823      	ldr	r3, [r4, #0]
 800e4be:	680e      	ldr	r6, [r1, #0]
 800e4c0:	061f      	lsls	r7, r3, #24
 800e4c2:	f856 5b04 	ldr.w	r5, [r6], #4
 800e4c6:	600e      	str	r6, [r1, #0]
 800e4c8:	d514      	bpl.n	800e4f4 <_printf_i+0x1ac>
 800e4ca:	07d9      	lsls	r1, r3, #31
 800e4cc:	bf44      	itt	mi
 800e4ce:	f043 0320 	orrmi.w	r3, r3, #32
 800e4d2:	6023      	strmi	r3, [r4, #0]
 800e4d4:	b91d      	cbnz	r5, 800e4de <_printf_i+0x196>
 800e4d6:	6823      	ldr	r3, [r4, #0]
 800e4d8:	f023 0320 	bic.w	r3, r3, #32
 800e4dc:	6023      	str	r3, [r4, #0]
 800e4de:	2310      	movs	r3, #16
 800e4e0:	e7b0      	b.n	800e444 <_printf_i+0xfc>
 800e4e2:	6823      	ldr	r3, [r4, #0]
 800e4e4:	f043 0320 	orr.w	r3, r3, #32
 800e4e8:	6023      	str	r3, [r4, #0]
 800e4ea:	2378      	movs	r3, #120	; 0x78
 800e4ec:	4828      	ldr	r0, [pc, #160]	; (800e590 <_printf_i+0x248>)
 800e4ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e4f2:	e7e3      	b.n	800e4bc <_printf_i+0x174>
 800e4f4:	065e      	lsls	r6, r3, #25
 800e4f6:	bf48      	it	mi
 800e4f8:	b2ad      	uxthmi	r5, r5
 800e4fa:	e7e6      	b.n	800e4ca <_printf_i+0x182>
 800e4fc:	4616      	mov	r6, r2
 800e4fe:	e7bb      	b.n	800e478 <_printf_i+0x130>
 800e500:	680b      	ldr	r3, [r1, #0]
 800e502:	6826      	ldr	r6, [r4, #0]
 800e504:	6960      	ldr	r0, [r4, #20]
 800e506:	1d1d      	adds	r5, r3, #4
 800e508:	600d      	str	r5, [r1, #0]
 800e50a:	0635      	lsls	r5, r6, #24
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	d501      	bpl.n	800e514 <_printf_i+0x1cc>
 800e510:	6018      	str	r0, [r3, #0]
 800e512:	e002      	b.n	800e51a <_printf_i+0x1d2>
 800e514:	0671      	lsls	r1, r6, #25
 800e516:	d5fb      	bpl.n	800e510 <_printf_i+0x1c8>
 800e518:	8018      	strh	r0, [r3, #0]
 800e51a:	2300      	movs	r3, #0
 800e51c:	6123      	str	r3, [r4, #16]
 800e51e:	4616      	mov	r6, r2
 800e520:	e7ba      	b.n	800e498 <_printf_i+0x150>
 800e522:	680b      	ldr	r3, [r1, #0]
 800e524:	1d1a      	adds	r2, r3, #4
 800e526:	600a      	str	r2, [r1, #0]
 800e528:	681e      	ldr	r6, [r3, #0]
 800e52a:	6862      	ldr	r2, [r4, #4]
 800e52c:	2100      	movs	r1, #0
 800e52e:	4630      	mov	r0, r6
 800e530:	f7f1 fe66 	bl	8000200 <memchr>
 800e534:	b108      	cbz	r0, 800e53a <_printf_i+0x1f2>
 800e536:	1b80      	subs	r0, r0, r6
 800e538:	6060      	str	r0, [r4, #4]
 800e53a:	6863      	ldr	r3, [r4, #4]
 800e53c:	6123      	str	r3, [r4, #16]
 800e53e:	2300      	movs	r3, #0
 800e540:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e544:	e7a8      	b.n	800e498 <_printf_i+0x150>
 800e546:	6923      	ldr	r3, [r4, #16]
 800e548:	4632      	mov	r2, r6
 800e54a:	4649      	mov	r1, r9
 800e54c:	4640      	mov	r0, r8
 800e54e:	47d0      	blx	sl
 800e550:	3001      	adds	r0, #1
 800e552:	d0ab      	beq.n	800e4ac <_printf_i+0x164>
 800e554:	6823      	ldr	r3, [r4, #0]
 800e556:	079b      	lsls	r3, r3, #30
 800e558:	d413      	bmi.n	800e582 <_printf_i+0x23a>
 800e55a:	68e0      	ldr	r0, [r4, #12]
 800e55c:	9b03      	ldr	r3, [sp, #12]
 800e55e:	4298      	cmp	r0, r3
 800e560:	bfb8      	it	lt
 800e562:	4618      	movlt	r0, r3
 800e564:	e7a4      	b.n	800e4b0 <_printf_i+0x168>
 800e566:	2301      	movs	r3, #1
 800e568:	4632      	mov	r2, r6
 800e56a:	4649      	mov	r1, r9
 800e56c:	4640      	mov	r0, r8
 800e56e:	47d0      	blx	sl
 800e570:	3001      	adds	r0, #1
 800e572:	d09b      	beq.n	800e4ac <_printf_i+0x164>
 800e574:	3501      	adds	r5, #1
 800e576:	68e3      	ldr	r3, [r4, #12]
 800e578:	9903      	ldr	r1, [sp, #12]
 800e57a:	1a5b      	subs	r3, r3, r1
 800e57c:	42ab      	cmp	r3, r5
 800e57e:	dcf2      	bgt.n	800e566 <_printf_i+0x21e>
 800e580:	e7eb      	b.n	800e55a <_printf_i+0x212>
 800e582:	2500      	movs	r5, #0
 800e584:	f104 0619 	add.w	r6, r4, #25
 800e588:	e7f5      	b.n	800e576 <_printf_i+0x22e>
 800e58a:	bf00      	nop
 800e58c:	08013140 	.word	0x08013140
 800e590:	08013151 	.word	0x08013151

0800e594 <_scanf_float>:
 800e594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e598:	b087      	sub	sp, #28
 800e59a:	4617      	mov	r7, r2
 800e59c:	9303      	str	r3, [sp, #12]
 800e59e:	688b      	ldr	r3, [r1, #8]
 800e5a0:	1e5a      	subs	r2, r3, #1
 800e5a2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e5a6:	bf83      	ittte	hi
 800e5a8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e5ac:	195b      	addhi	r3, r3, r5
 800e5ae:	9302      	strhi	r3, [sp, #8]
 800e5b0:	2300      	movls	r3, #0
 800e5b2:	bf86      	itte	hi
 800e5b4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e5b8:	608b      	strhi	r3, [r1, #8]
 800e5ba:	9302      	strls	r3, [sp, #8]
 800e5bc:	680b      	ldr	r3, [r1, #0]
 800e5be:	468b      	mov	fp, r1
 800e5c0:	2500      	movs	r5, #0
 800e5c2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e5c6:	f84b 3b1c 	str.w	r3, [fp], #28
 800e5ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e5ce:	4680      	mov	r8, r0
 800e5d0:	460c      	mov	r4, r1
 800e5d2:	465e      	mov	r6, fp
 800e5d4:	46aa      	mov	sl, r5
 800e5d6:	46a9      	mov	r9, r5
 800e5d8:	9501      	str	r5, [sp, #4]
 800e5da:	68a2      	ldr	r2, [r4, #8]
 800e5dc:	b152      	cbz	r2, 800e5f4 <_scanf_float+0x60>
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	781b      	ldrb	r3, [r3, #0]
 800e5e2:	2b4e      	cmp	r3, #78	; 0x4e
 800e5e4:	d864      	bhi.n	800e6b0 <_scanf_float+0x11c>
 800e5e6:	2b40      	cmp	r3, #64	; 0x40
 800e5e8:	d83c      	bhi.n	800e664 <_scanf_float+0xd0>
 800e5ea:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800e5ee:	b2c8      	uxtb	r0, r1
 800e5f0:	280e      	cmp	r0, #14
 800e5f2:	d93a      	bls.n	800e66a <_scanf_float+0xd6>
 800e5f4:	f1b9 0f00 	cmp.w	r9, #0
 800e5f8:	d003      	beq.n	800e602 <_scanf_float+0x6e>
 800e5fa:	6823      	ldr	r3, [r4, #0]
 800e5fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e600:	6023      	str	r3, [r4, #0]
 800e602:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e606:	f1ba 0f01 	cmp.w	sl, #1
 800e60a:	f200 8113 	bhi.w	800e834 <_scanf_float+0x2a0>
 800e60e:	455e      	cmp	r6, fp
 800e610:	f200 8105 	bhi.w	800e81e <_scanf_float+0x28a>
 800e614:	2501      	movs	r5, #1
 800e616:	4628      	mov	r0, r5
 800e618:	b007      	add	sp, #28
 800e61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e61e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800e622:	2a0d      	cmp	r2, #13
 800e624:	d8e6      	bhi.n	800e5f4 <_scanf_float+0x60>
 800e626:	a101      	add	r1, pc, #4	; (adr r1, 800e62c <_scanf_float+0x98>)
 800e628:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e62c:	0800e76b 	.word	0x0800e76b
 800e630:	0800e5f5 	.word	0x0800e5f5
 800e634:	0800e5f5 	.word	0x0800e5f5
 800e638:	0800e5f5 	.word	0x0800e5f5
 800e63c:	0800e7cb 	.word	0x0800e7cb
 800e640:	0800e7a3 	.word	0x0800e7a3
 800e644:	0800e5f5 	.word	0x0800e5f5
 800e648:	0800e5f5 	.word	0x0800e5f5
 800e64c:	0800e779 	.word	0x0800e779
 800e650:	0800e5f5 	.word	0x0800e5f5
 800e654:	0800e5f5 	.word	0x0800e5f5
 800e658:	0800e5f5 	.word	0x0800e5f5
 800e65c:	0800e5f5 	.word	0x0800e5f5
 800e660:	0800e731 	.word	0x0800e731
 800e664:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800e668:	e7db      	b.n	800e622 <_scanf_float+0x8e>
 800e66a:	290e      	cmp	r1, #14
 800e66c:	d8c2      	bhi.n	800e5f4 <_scanf_float+0x60>
 800e66e:	a001      	add	r0, pc, #4	; (adr r0, 800e674 <_scanf_float+0xe0>)
 800e670:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e674:	0800e723 	.word	0x0800e723
 800e678:	0800e5f5 	.word	0x0800e5f5
 800e67c:	0800e723 	.word	0x0800e723
 800e680:	0800e7b7 	.word	0x0800e7b7
 800e684:	0800e5f5 	.word	0x0800e5f5
 800e688:	0800e6d1 	.word	0x0800e6d1
 800e68c:	0800e70d 	.word	0x0800e70d
 800e690:	0800e70d 	.word	0x0800e70d
 800e694:	0800e70d 	.word	0x0800e70d
 800e698:	0800e70d 	.word	0x0800e70d
 800e69c:	0800e70d 	.word	0x0800e70d
 800e6a0:	0800e70d 	.word	0x0800e70d
 800e6a4:	0800e70d 	.word	0x0800e70d
 800e6a8:	0800e70d 	.word	0x0800e70d
 800e6ac:	0800e70d 	.word	0x0800e70d
 800e6b0:	2b6e      	cmp	r3, #110	; 0x6e
 800e6b2:	d809      	bhi.n	800e6c8 <_scanf_float+0x134>
 800e6b4:	2b60      	cmp	r3, #96	; 0x60
 800e6b6:	d8b2      	bhi.n	800e61e <_scanf_float+0x8a>
 800e6b8:	2b54      	cmp	r3, #84	; 0x54
 800e6ba:	d077      	beq.n	800e7ac <_scanf_float+0x218>
 800e6bc:	2b59      	cmp	r3, #89	; 0x59
 800e6be:	d199      	bne.n	800e5f4 <_scanf_float+0x60>
 800e6c0:	2d07      	cmp	r5, #7
 800e6c2:	d197      	bne.n	800e5f4 <_scanf_float+0x60>
 800e6c4:	2508      	movs	r5, #8
 800e6c6:	e029      	b.n	800e71c <_scanf_float+0x188>
 800e6c8:	2b74      	cmp	r3, #116	; 0x74
 800e6ca:	d06f      	beq.n	800e7ac <_scanf_float+0x218>
 800e6cc:	2b79      	cmp	r3, #121	; 0x79
 800e6ce:	e7f6      	b.n	800e6be <_scanf_float+0x12a>
 800e6d0:	6821      	ldr	r1, [r4, #0]
 800e6d2:	05c8      	lsls	r0, r1, #23
 800e6d4:	d51a      	bpl.n	800e70c <_scanf_float+0x178>
 800e6d6:	9b02      	ldr	r3, [sp, #8]
 800e6d8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e6dc:	6021      	str	r1, [r4, #0]
 800e6de:	f109 0901 	add.w	r9, r9, #1
 800e6e2:	b11b      	cbz	r3, 800e6ec <_scanf_float+0x158>
 800e6e4:	3b01      	subs	r3, #1
 800e6e6:	3201      	adds	r2, #1
 800e6e8:	9302      	str	r3, [sp, #8]
 800e6ea:	60a2      	str	r2, [r4, #8]
 800e6ec:	68a3      	ldr	r3, [r4, #8]
 800e6ee:	3b01      	subs	r3, #1
 800e6f0:	60a3      	str	r3, [r4, #8]
 800e6f2:	6923      	ldr	r3, [r4, #16]
 800e6f4:	3301      	adds	r3, #1
 800e6f6:	6123      	str	r3, [r4, #16]
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	3b01      	subs	r3, #1
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	607b      	str	r3, [r7, #4]
 800e700:	f340 8084 	ble.w	800e80c <_scanf_float+0x278>
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	3301      	adds	r3, #1
 800e708:	603b      	str	r3, [r7, #0]
 800e70a:	e766      	b.n	800e5da <_scanf_float+0x46>
 800e70c:	eb1a 0f05 	cmn.w	sl, r5
 800e710:	f47f af70 	bne.w	800e5f4 <_scanf_float+0x60>
 800e714:	6822      	ldr	r2, [r4, #0]
 800e716:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800e71a:	6022      	str	r2, [r4, #0]
 800e71c:	f806 3b01 	strb.w	r3, [r6], #1
 800e720:	e7e4      	b.n	800e6ec <_scanf_float+0x158>
 800e722:	6822      	ldr	r2, [r4, #0]
 800e724:	0610      	lsls	r0, r2, #24
 800e726:	f57f af65 	bpl.w	800e5f4 <_scanf_float+0x60>
 800e72a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e72e:	e7f4      	b.n	800e71a <_scanf_float+0x186>
 800e730:	f1ba 0f00 	cmp.w	sl, #0
 800e734:	d10e      	bne.n	800e754 <_scanf_float+0x1c0>
 800e736:	f1b9 0f00 	cmp.w	r9, #0
 800e73a:	d10e      	bne.n	800e75a <_scanf_float+0x1c6>
 800e73c:	6822      	ldr	r2, [r4, #0]
 800e73e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e742:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e746:	d108      	bne.n	800e75a <_scanf_float+0x1c6>
 800e748:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e74c:	6022      	str	r2, [r4, #0]
 800e74e:	f04f 0a01 	mov.w	sl, #1
 800e752:	e7e3      	b.n	800e71c <_scanf_float+0x188>
 800e754:	f1ba 0f02 	cmp.w	sl, #2
 800e758:	d055      	beq.n	800e806 <_scanf_float+0x272>
 800e75a:	2d01      	cmp	r5, #1
 800e75c:	d002      	beq.n	800e764 <_scanf_float+0x1d0>
 800e75e:	2d04      	cmp	r5, #4
 800e760:	f47f af48 	bne.w	800e5f4 <_scanf_float+0x60>
 800e764:	3501      	adds	r5, #1
 800e766:	b2ed      	uxtb	r5, r5
 800e768:	e7d8      	b.n	800e71c <_scanf_float+0x188>
 800e76a:	f1ba 0f01 	cmp.w	sl, #1
 800e76e:	f47f af41 	bne.w	800e5f4 <_scanf_float+0x60>
 800e772:	f04f 0a02 	mov.w	sl, #2
 800e776:	e7d1      	b.n	800e71c <_scanf_float+0x188>
 800e778:	b97d      	cbnz	r5, 800e79a <_scanf_float+0x206>
 800e77a:	f1b9 0f00 	cmp.w	r9, #0
 800e77e:	f47f af3c 	bne.w	800e5fa <_scanf_float+0x66>
 800e782:	6822      	ldr	r2, [r4, #0]
 800e784:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e788:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e78c:	f47f af39 	bne.w	800e602 <_scanf_float+0x6e>
 800e790:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e794:	6022      	str	r2, [r4, #0]
 800e796:	2501      	movs	r5, #1
 800e798:	e7c0      	b.n	800e71c <_scanf_float+0x188>
 800e79a:	2d03      	cmp	r5, #3
 800e79c:	d0e2      	beq.n	800e764 <_scanf_float+0x1d0>
 800e79e:	2d05      	cmp	r5, #5
 800e7a0:	e7de      	b.n	800e760 <_scanf_float+0x1cc>
 800e7a2:	2d02      	cmp	r5, #2
 800e7a4:	f47f af26 	bne.w	800e5f4 <_scanf_float+0x60>
 800e7a8:	2503      	movs	r5, #3
 800e7aa:	e7b7      	b.n	800e71c <_scanf_float+0x188>
 800e7ac:	2d06      	cmp	r5, #6
 800e7ae:	f47f af21 	bne.w	800e5f4 <_scanf_float+0x60>
 800e7b2:	2507      	movs	r5, #7
 800e7b4:	e7b2      	b.n	800e71c <_scanf_float+0x188>
 800e7b6:	6822      	ldr	r2, [r4, #0]
 800e7b8:	0591      	lsls	r1, r2, #22
 800e7ba:	f57f af1b 	bpl.w	800e5f4 <_scanf_float+0x60>
 800e7be:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800e7c2:	6022      	str	r2, [r4, #0]
 800e7c4:	f8cd 9004 	str.w	r9, [sp, #4]
 800e7c8:	e7a8      	b.n	800e71c <_scanf_float+0x188>
 800e7ca:	6822      	ldr	r2, [r4, #0]
 800e7cc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800e7d0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e7d4:	d006      	beq.n	800e7e4 <_scanf_float+0x250>
 800e7d6:	0550      	lsls	r0, r2, #21
 800e7d8:	f57f af0c 	bpl.w	800e5f4 <_scanf_float+0x60>
 800e7dc:	f1b9 0f00 	cmp.w	r9, #0
 800e7e0:	f43f af0f 	beq.w	800e602 <_scanf_float+0x6e>
 800e7e4:	0591      	lsls	r1, r2, #22
 800e7e6:	bf58      	it	pl
 800e7e8:	9901      	ldrpl	r1, [sp, #4]
 800e7ea:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e7ee:	bf58      	it	pl
 800e7f0:	eba9 0101 	subpl.w	r1, r9, r1
 800e7f4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800e7f8:	bf58      	it	pl
 800e7fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e7fe:	6022      	str	r2, [r4, #0]
 800e800:	f04f 0900 	mov.w	r9, #0
 800e804:	e78a      	b.n	800e71c <_scanf_float+0x188>
 800e806:	f04f 0a03 	mov.w	sl, #3
 800e80a:	e787      	b.n	800e71c <_scanf_float+0x188>
 800e80c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e810:	4639      	mov	r1, r7
 800e812:	4640      	mov	r0, r8
 800e814:	4798      	blx	r3
 800e816:	2800      	cmp	r0, #0
 800e818:	f43f aedf 	beq.w	800e5da <_scanf_float+0x46>
 800e81c:	e6ea      	b.n	800e5f4 <_scanf_float+0x60>
 800e81e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e822:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e826:	463a      	mov	r2, r7
 800e828:	4640      	mov	r0, r8
 800e82a:	4798      	blx	r3
 800e82c:	6923      	ldr	r3, [r4, #16]
 800e82e:	3b01      	subs	r3, #1
 800e830:	6123      	str	r3, [r4, #16]
 800e832:	e6ec      	b.n	800e60e <_scanf_float+0x7a>
 800e834:	1e6b      	subs	r3, r5, #1
 800e836:	2b06      	cmp	r3, #6
 800e838:	d825      	bhi.n	800e886 <_scanf_float+0x2f2>
 800e83a:	2d02      	cmp	r5, #2
 800e83c:	d836      	bhi.n	800e8ac <_scanf_float+0x318>
 800e83e:	455e      	cmp	r6, fp
 800e840:	f67f aee8 	bls.w	800e614 <_scanf_float+0x80>
 800e844:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e848:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e84c:	463a      	mov	r2, r7
 800e84e:	4640      	mov	r0, r8
 800e850:	4798      	blx	r3
 800e852:	6923      	ldr	r3, [r4, #16]
 800e854:	3b01      	subs	r3, #1
 800e856:	6123      	str	r3, [r4, #16]
 800e858:	e7f1      	b.n	800e83e <_scanf_float+0x2aa>
 800e85a:	9802      	ldr	r0, [sp, #8]
 800e85c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e860:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800e864:	9002      	str	r0, [sp, #8]
 800e866:	463a      	mov	r2, r7
 800e868:	4640      	mov	r0, r8
 800e86a:	4798      	blx	r3
 800e86c:	6923      	ldr	r3, [r4, #16]
 800e86e:	3b01      	subs	r3, #1
 800e870:	6123      	str	r3, [r4, #16]
 800e872:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e876:	fa5f fa8a 	uxtb.w	sl, sl
 800e87a:	f1ba 0f02 	cmp.w	sl, #2
 800e87e:	d1ec      	bne.n	800e85a <_scanf_float+0x2c6>
 800e880:	3d03      	subs	r5, #3
 800e882:	b2ed      	uxtb	r5, r5
 800e884:	1b76      	subs	r6, r6, r5
 800e886:	6823      	ldr	r3, [r4, #0]
 800e888:	05da      	lsls	r2, r3, #23
 800e88a:	d52f      	bpl.n	800e8ec <_scanf_float+0x358>
 800e88c:	055b      	lsls	r3, r3, #21
 800e88e:	d510      	bpl.n	800e8b2 <_scanf_float+0x31e>
 800e890:	455e      	cmp	r6, fp
 800e892:	f67f aebf 	bls.w	800e614 <_scanf_float+0x80>
 800e896:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e89a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e89e:	463a      	mov	r2, r7
 800e8a0:	4640      	mov	r0, r8
 800e8a2:	4798      	blx	r3
 800e8a4:	6923      	ldr	r3, [r4, #16]
 800e8a6:	3b01      	subs	r3, #1
 800e8a8:	6123      	str	r3, [r4, #16]
 800e8aa:	e7f1      	b.n	800e890 <_scanf_float+0x2fc>
 800e8ac:	46aa      	mov	sl, r5
 800e8ae:	9602      	str	r6, [sp, #8]
 800e8b0:	e7df      	b.n	800e872 <_scanf_float+0x2de>
 800e8b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e8b6:	6923      	ldr	r3, [r4, #16]
 800e8b8:	2965      	cmp	r1, #101	; 0x65
 800e8ba:	f103 33ff 	add.w	r3, r3, #4294967295
 800e8be:	f106 35ff 	add.w	r5, r6, #4294967295
 800e8c2:	6123      	str	r3, [r4, #16]
 800e8c4:	d00c      	beq.n	800e8e0 <_scanf_float+0x34c>
 800e8c6:	2945      	cmp	r1, #69	; 0x45
 800e8c8:	d00a      	beq.n	800e8e0 <_scanf_float+0x34c>
 800e8ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e8ce:	463a      	mov	r2, r7
 800e8d0:	4640      	mov	r0, r8
 800e8d2:	4798      	blx	r3
 800e8d4:	6923      	ldr	r3, [r4, #16]
 800e8d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e8da:	3b01      	subs	r3, #1
 800e8dc:	1eb5      	subs	r5, r6, #2
 800e8de:	6123      	str	r3, [r4, #16]
 800e8e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e8e4:	463a      	mov	r2, r7
 800e8e6:	4640      	mov	r0, r8
 800e8e8:	4798      	blx	r3
 800e8ea:	462e      	mov	r6, r5
 800e8ec:	6825      	ldr	r5, [r4, #0]
 800e8ee:	f015 0510 	ands.w	r5, r5, #16
 800e8f2:	d158      	bne.n	800e9a6 <_scanf_float+0x412>
 800e8f4:	7035      	strb	r5, [r6, #0]
 800e8f6:	6823      	ldr	r3, [r4, #0]
 800e8f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e8fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e900:	d11c      	bne.n	800e93c <_scanf_float+0x3a8>
 800e902:	9b01      	ldr	r3, [sp, #4]
 800e904:	454b      	cmp	r3, r9
 800e906:	eba3 0209 	sub.w	r2, r3, r9
 800e90a:	d124      	bne.n	800e956 <_scanf_float+0x3c2>
 800e90c:	2200      	movs	r2, #0
 800e90e:	4659      	mov	r1, fp
 800e910:	4640      	mov	r0, r8
 800e912:	f000 ffdf 	bl	800f8d4 <_strtod_r>
 800e916:	9b03      	ldr	r3, [sp, #12]
 800e918:	6821      	ldr	r1, [r4, #0]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	f011 0f02 	tst.w	r1, #2
 800e920:	ec57 6b10 	vmov	r6, r7, d0
 800e924:	f103 0204 	add.w	r2, r3, #4
 800e928:	d020      	beq.n	800e96c <_scanf_float+0x3d8>
 800e92a:	9903      	ldr	r1, [sp, #12]
 800e92c:	600a      	str	r2, [r1, #0]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	e9c3 6700 	strd	r6, r7, [r3]
 800e934:	68e3      	ldr	r3, [r4, #12]
 800e936:	3301      	adds	r3, #1
 800e938:	60e3      	str	r3, [r4, #12]
 800e93a:	e66c      	b.n	800e616 <_scanf_float+0x82>
 800e93c:	9b04      	ldr	r3, [sp, #16]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d0e4      	beq.n	800e90c <_scanf_float+0x378>
 800e942:	9905      	ldr	r1, [sp, #20]
 800e944:	230a      	movs	r3, #10
 800e946:	462a      	mov	r2, r5
 800e948:	3101      	adds	r1, #1
 800e94a:	4640      	mov	r0, r8
 800e94c:	f001 f84c 	bl	800f9e8 <_strtol_r>
 800e950:	9b04      	ldr	r3, [sp, #16]
 800e952:	9e05      	ldr	r6, [sp, #20]
 800e954:	1ac2      	subs	r2, r0, r3
 800e956:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e95a:	429e      	cmp	r6, r3
 800e95c:	bf28      	it	cs
 800e95e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800e962:	4912      	ldr	r1, [pc, #72]	; (800e9ac <_scanf_float+0x418>)
 800e964:	4630      	mov	r0, r6
 800e966:	f000 f8e9 	bl	800eb3c <siprintf>
 800e96a:	e7cf      	b.n	800e90c <_scanf_float+0x378>
 800e96c:	f011 0f04 	tst.w	r1, #4
 800e970:	9903      	ldr	r1, [sp, #12]
 800e972:	600a      	str	r2, [r1, #0]
 800e974:	d1db      	bne.n	800e92e <_scanf_float+0x39a>
 800e976:	f8d3 8000 	ldr.w	r8, [r3]
 800e97a:	ee10 2a10 	vmov	r2, s0
 800e97e:	ee10 0a10 	vmov	r0, s0
 800e982:	463b      	mov	r3, r7
 800e984:	4639      	mov	r1, r7
 800e986:	f7f2 f8e1 	bl	8000b4c <__aeabi_dcmpun>
 800e98a:	b128      	cbz	r0, 800e998 <_scanf_float+0x404>
 800e98c:	4808      	ldr	r0, [pc, #32]	; (800e9b0 <_scanf_float+0x41c>)
 800e98e:	f000 f88b 	bl	800eaa8 <nanf>
 800e992:	ed88 0a00 	vstr	s0, [r8]
 800e996:	e7cd      	b.n	800e934 <_scanf_float+0x3a0>
 800e998:	4630      	mov	r0, r6
 800e99a:	4639      	mov	r1, r7
 800e99c:	f7f2 f934 	bl	8000c08 <__aeabi_d2f>
 800e9a0:	f8c8 0000 	str.w	r0, [r8]
 800e9a4:	e7c6      	b.n	800e934 <_scanf_float+0x3a0>
 800e9a6:	2500      	movs	r5, #0
 800e9a8:	e635      	b.n	800e616 <_scanf_float+0x82>
 800e9aa:	bf00      	nop
 800e9ac:	08013162 	.word	0x08013162
 800e9b0:	080131f3 	.word	0x080131f3

0800e9b4 <cleanup_glue>:
 800e9b4:	b538      	push	{r3, r4, r5, lr}
 800e9b6:	460c      	mov	r4, r1
 800e9b8:	6809      	ldr	r1, [r1, #0]
 800e9ba:	4605      	mov	r5, r0
 800e9bc:	b109      	cbz	r1, 800e9c2 <cleanup_glue+0xe>
 800e9be:	f7ff fff9 	bl	800e9b4 <cleanup_glue>
 800e9c2:	4621      	mov	r1, r4
 800e9c4:	4628      	mov	r0, r5
 800e9c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e9ca:	f7ff b8cf 	b.w	800db6c <_free_r>
	...

0800e9d0 <_reclaim_reent>:
 800e9d0:	4b2c      	ldr	r3, [pc, #176]	; (800ea84 <_reclaim_reent+0xb4>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	4283      	cmp	r3, r0
 800e9d6:	b570      	push	{r4, r5, r6, lr}
 800e9d8:	4604      	mov	r4, r0
 800e9da:	d051      	beq.n	800ea80 <_reclaim_reent+0xb0>
 800e9dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e9de:	b143      	cbz	r3, 800e9f2 <_reclaim_reent+0x22>
 800e9e0:	68db      	ldr	r3, [r3, #12]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d14a      	bne.n	800ea7c <_reclaim_reent+0xac>
 800e9e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e9e8:	6819      	ldr	r1, [r3, #0]
 800e9ea:	b111      	cbz	r1, 800e9f2 <_reclaim_reent+0x22>
 800e9ec:	4620      	mov	r0, r4
 800e9ee:	f7ff f8bd 	bl	800db6c <_free_r>
 800e9f2:	6961      	ldr	r1, [r4, #20]
 800e9f4:	b111      	cbz	r1, 800e9fc <_reclaim_reent+0x2c>
 800e9f6:	4620      	mov	r0, r4
 800e9f8:	f7ff f8b8 	bl	800db6c <_free_r>
 800e9fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e9fe:	b111      	cbz	r1, 800ea06 <_reclaim_reent+0x36>
 800ea00:	4620      	mov	r0, r4
 800ea02:	f7ff f8b3 	bl	800db6c <_free_r>
 800ea06:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ea08:	b111      	cbz	r1, 800ea10 <_reclaim_reent+0x40>
 800ea0a:	4620      	mov	r0, r4
 800ea0c:	f7ff f8ae 	bl	800db6c <_free_r>
 800ea10:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ea12:	b111      	cbz	r1, 800ea1a <_reclaim_reent+0x4a>
 800ea14:	4620      	mov	r0, r4
 800ea16:	f7ff f8a9 	bl	800db6c <_free_r>
 800ea1a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ea1c:	b111      	cbz	r1, 800ea24 <_reclaim_reent+0x54>
 800ea1e:	4620      	mov	r0, r4
 800ea20:	f7ff f8a4 	bl	800db6c <_free_r>
 800ea24:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ea26:	b111      	cbz	r1, 800ea2e <_reclaim_reent+0x5e>
 800ea28:	4620      	mov	r0, r4
 800ea2a:	f7ff f89f 	bl	800db6c <_free_r>
 800ea2e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ea30:	b111      	cbz	r1, 800ea38 <_reclaim_reent+0x68>
 800ea32:	4620      	mov	r0, r4
 800ea34:	f7ff f89a 	bl	800db6c <_free_r>
 800ea38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea3a:	b111      	cbz	r1, 800ea42 <_reclaim_reent+0x72>
 800ea3c:	4620      	mov	r0, r4
 800ea3e:	f7ff f895 	bl	800db6c <_free_r>
 800ea42:	69a3      	ldr	r3, [r4, #24]
 800ea44:	b1e3      	cbz	r3, 800ea80 <_reclaim_reent+0xb0>
 800ea46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ea48:	4620      	mov	r0, r4
 800ea4a:	4798      	blx	r3
 800ea4c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ea4e:	b1b9      	cbz	r1, 800ea80 <_reclaim_reent+0xb0>
 800ea50:	4620      	mov	r0, r4
 800ea52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ea56:	f7ff bfad 	b.w	800e9b4 <cleanup_glue>
 800ea5a:	5949      	ldr	r1, [r1, r5]
 800ea5c:	b941      	cbnz	r1, 800ea70 <_reclaim_reent+0xa0>
 800ea5e:	3504      	adds	r5, #4
 800ea60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea62:	2d80      	cmp	r5, #128	; 0x80
 800ea64:	68d9      	ldr	r1, [r3, #12]
 800ea66:	d1f8      	bne.n	800ea5a <_reclaim_reent+0x8a>
 800ea68:	4620      	mov	r0, r4
 800ea6a:	f7ff f87f 	bl	800db6c <_free_r>
 800ea6e:	e7ba      	b.n	800e9e6 <_reclaim_reent+0x16>
 800ea70:	680e      	ldr	r6, [r1, #0]
 800ea72:	4620      	mov	r0, r4
 800ea74:	f7ff f87a 	bl	800db6c <_free_r>
 800ea78:	4631      	mov	r1, r6
 800ea7a:	e7ef      	b.n	800ea5c <_reclaim_reent+0x8c>
 800ea7c:	2500      	movs	r5, #0
 800ea7e:	e7ef      	b.n	800ea60 <_reclaim_reent+0x90>
 800ea80:	bd70      	pop	{r4, r5, r6, pc}
 800ea82:	bf00      	nop
 800ea84:	20000030 	.word	0x20000030

0800ea88 <_sbrk_r>:
 800ea88:	b538      	push	{r3, r4, r5, lr}
 800ea8a:	4d06      	ldr	r5, [pc, #24]	; (800eaa4 <_sbrk_r+0x1c>)
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	4604      	mov	r4, r0
 800ea90:	4608      	mov	r0, r1
 800ea92:	602b      	str	r3, [r5, #0]
 800ea94:	f7f4 faca 	bl	800302c <_sbrk>
 800ea98:	1c43      	adds	r3, r0, #1
 800ea9a:	d102      	bne.n	800eaa2 <_sbrk_r+0x1a>
 800ea9c:	682b      	ldr	r3, [r5, #0]
 800ea9e:	b103      	cbz	r3, 800eaa2 <_sbrk_r+0x1a>
 800eaa0:	6023      	str	r3, [r4, #0]
 800eaa2:	bd38      	pop	{r3, r4, r5, pc}
 800eaa4:	2000572c 	.word	0x2000572c

0800eaa8 <nanf>:
 800eaa8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800eab0 <nanf+0x8>
 800eaac:	4770      	bx	lr
 800eaae:	bf00      	nop
 800eab0:	7fc00000 	.word	0x7fc00000

0800eab4 <_raise_r>:
 800eab4:	291f      	cmp	r1, #31
 800eab6:	b538      	push	{r3, r4, r5, lr}
 800eab8:	4604      	mov	r4, r0
 800eaba:	460d      	mov	r5, r1
 800eabc:	d904      	bls.n	800eac8 <_raise_r+0x14>
 800eabe:	2316      	movs	r3, #22
 800eac0:	6003      	str	r3, [r0, #0]
 800eac2:	f04f 30ff 	mov.w	r0, #4294967295
 800eac6:	bd38      	pop	{r3, r4, r5, pc}
 800eac8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800eaca:	b112      	cbz	r2, 800ead2 <_raise_r+0x1e>
 800eacc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ead0:	b94b      	cbnz	r3, 800eae6 <_raise_r+0x32>
 800ead2:	4620      	mov	r0, r4
 800ead4:	f000 f830 	bl	800eb38 <_getpid_r>
 800ead8:	462a      	mov	r2, r5
 800eada:	4601      	mov	r1, r0
 800eadc:	4620      	mov	r0, r4
 800eade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eae2:	f000 b817 	b.w	800eb14 <_kill_r>
 800eae6:	2b01      	cmp	r3, #1
 800eae8:	d00a      	beq.n	800eb00 <_raise_r+0x4c>
 800eaea:	1c59      	adds	r1, r3, #1
 800eaec:	d103      	bne.n	800eaf6 <_raise_r+0x42>
 800eaee:	2316      	movs	r3, #22
 800eaf0:	6003      	str	r3, [r0, #0]
 800eaf2:	2001      	movs	r0, #1
 800eaf4:	e7e7      	b.n	800eac6 <_raise_r+0x12>
 800eaf6:	2400      	movs	r4, #0
 800eaf8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800eafc:	4628      	mov	r0, r5
 800eafe:	4798      	blx	r3
 800eb00:	2000      	movs	r0, #0
 800eb02:	e7e0      	b.n	800eac6 <_raise_r+0x12>

0800eb04 <raise>:
 800eb04:	4b02      	ldr	r3, [pc, #8]	; (800eb10 <raise+0xc>)
 800eb06:	4601      	mov	r1, r0
 800eb08:	6818      	ldr	r0, [r3, #0]
 800eb0a:	f7ff bfd3 	b.w	800eab4 <_raise_r>
 800eb0e:	bf00      	nop
 800eb10:	20000030 	.word	0x20000030

0800eb14 <_kill_r>:
 800eb14:	b538      	push	{r3, r4, r5, lr}
 800eb16:	4d07      	ldr	r5, [pc, #28]	; (800eb34 <_kill_r+0x20>)
 800eb18:	2300      	movs	r3, #0
 800eb1a:	4604      	mov	r4, r0
 800eb1c:	4608      	mov	r0, r1
 800eb1e:	4611      	mov	r1, r2
 800eb20:	602b      	str	r3, [r5, #0]
 800eb22:	f7f4 f9fb 	bl	8002f1c <_kill>
 800eb26:	1c43      	adds	r3, r0, #1
 800eb28:	d102      	bne.n	800eb30 <_kill_r+0x1c>
 800eb2a:	682b      	ldr	r3, [r5, #0]
 800eb2c:	b103      	cbz	r3, 800eb30 <_kill_r+0x1c>
 800eb2e:	6023      	str	r3, [r4, #0]
 800eb30:	bd38      	pop	{r3, r4, r5, pc}
 800eb32:	bf00      	nop
 800eb34:	2000572c 	.word	0x2000572c

0800eb38 <_getpid_r>:
 800eb38:	f7f4 b9e8 	b.w	8002f0c <_getpid>

0800eb3c <siprintf>:
 800eb3c:	b40e      	push	{r1, r2, r3}
 800eb3e:	b500      	push	{lr}
 800eb40:	b09c      	sub	sp, #112	; 0x70
 800eb42:	ab1d      	add	r3, sp, #116	; 0x74
 800eb44:	9002      	str	r0, [sp, #8]
 800eb46:	9006      	str	r0, [sp, #24]
 800eb48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eb4c:	4809      	ldr	r0, [pc, #36]	; (800eb74 <siprintf+0x38>)
 800eb4e:	9107      	str	r1, [sp, #28]
 800eb50:	9104      	str	r1, [sp, #16]
 800eb52:	4909      	ldr	r1, [pc, #36]	; (800eb78 <siprintf+0x3c>)
 800eb54:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb58:	9105      	str	r1, [sp, #20]
 800eb5a:	6800      	ldr	r0, [r0, #0]
 800eb5c:	9301      	str	r3, [sp, #4]
 800eb5e:	a902      	add	r1, sp, #8
 800eb60:	f003 f83e 	bl	8011be0 <_svfiprintf_r>
 800eb64:	9b02      	ldr	r3, [sp, #8]
 800eb66:	2200      	movs	r2, #0
 800eb68:	701a      	strb	r2, [r3, #0]
 800eb6a:	b01c      	add	sp, #112	; 0x70
 800eb6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb70:	b003      	add	sp, #12
 800eb72:	4770      	bx	lr
 800eb74:	20000030 	.word	0x20000030
 800eb78:	ffff0208 	.word	0xffff0208

0800eb7c <siscanf>:
 800eb7c:	b40e      	push	{r1, r2, r3}
 800eb7e:	b510      	push	{r4, lr}
 800eb80:	b09f      	sub	sp, #124	; 0x7c
 800eb82:	ac21      	add	r4, sp, #132	; 0x84
 800eb84:	f44f 7101 	mov.w	r1, #516	; 0x204
 800eb88:	f854 2b04 	ldr.w	r2, [r4], #4
 800eb8c:	9201      	str	r2, [sp, #4]
 800eb8e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800eb92:	9004      	str	r0, [sp, #16]
 800eb94:	9008      	str	r0, [sp, #32]
 800eb96:	f7f1 fb2b 	bl	80001f0 <strlen>
 800eb9a:	4b0c      	ldr	r3, [pc, #48]	; (800ebcc <siscanf+0x50>)
 800eb9c:	9005      	str	r0, [sp, #20]
 800eb9e:	9009      	str	r0, [sp, #36]	; 0x24
 800eba0:	930d      	str	r3, [sp, #52]	; 0x34
 800eba2:	480b      	ldr	r0, [pc, #44]	; (800ebd0 <siscanf+0x54>)
 800eba4:	9a01      	ldr	r2, [sp, #4]
 800eba6:	6800      	ldr	r0, [r0, #0]
 800eba8:	9403      	str	r4, [sp, #12]
 800ebaa:	2300      	movs	r3, #0
 800ebac:	9311      	str	r3, [sp, #68]	; 0x44
 800ebae:	9316      	str	r3, [sp, #88]	; 0x58
 800ebb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ebb4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ebb8:	a904      	add	r1, sp, #16
 800ebba:	4623      	mov	r3, r4
 800ebbc:	f003 f96a 	bl	8011e94 <__ssvfiscanf_r>
 800ebc0:	b01f      	add	sp, #124	; 0x7c
 800ebc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ebc6:	b003      	add	sp, #12
 800ebc8:	4770      	bx	lr
 800ebca:	bf00      	nop
 800ebcc:	0800ebf7 	.word	0x0800ebf7
 800ebd0:	20000030 	.word	0x20000030

0800ebd4 <__sread>:
 800ebd4:	b510      	push	{r4, lr}
 800ebd6:	460c      	mov	r4, r1
 800ebd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebdc:	f003 fd78 	bl	80126d0 <_read_r>
 800ebe0:	2800      	cmp	r0, #0
 800ebe2:	bfab      	itete	ge
 800ebe4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ebe6:	89a3      	ldrhlt	r3, [r4, #12]
 800ebe8:	181b      	addge	r3, r3, r0
 800ebea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ebee:	bfac      	ite	ge
 800ebf0:	6563      	strge	r3, [r4, #84]	; 0x54
 800ebf2:	81a3      	strhlt	r3, [r4, #12]
 800ebf4:	bd10      	pop	{r4, pc}

0800ebf6 <__seofread>:
 800ebf6:	2000      	movs	r0, #0
 800ebf8:	4770      	bx	lr

0800ebfa <__swrite>:
 800ebfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebfe:	461f      	mov	r7, r3
 800ec00:	898b      	ldrh	r3, [r1, #12]
 800ec02:	05db      	lsls	r3, r3, #23
 800ec04:	4605      	mov	r5, r0
 800ec06:	460c      	mov	r4, r1
 800ec08:	4616      	mov	r6, r2
 800ec0a:	d505      	bpl.n	800ec18 <__swrite+0x1e>
 800ec0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec10:	2302      	movs	r3, #2
 800ec12:	2200      	movs	r2, #0
 800ec14:	f002 fa68 	bl	80110e8 <_lseek_r>
 800ec18:	89a3      	ldrh	r3, [r4, #12]
 800ec1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ec22:	81a3      	strh	r3, [r4, #12]
 800ec24:	4632      	mov	r2, r6
 800ec26:	463b      	mov	r3, r7
 800ec28:	4628      	mov	r0, r5
 800ec2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec2e:	f000 bf5b 	b.w	800fae8 <_write_r>

0800ec32 <__sseek>:
 800ec32:	b510      	push	{r4, lr}
 800ec34:	460c      	mov	r4, r1
 800ec36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec3a:	f002 fa55 	bl	80110e8 <_lseek_r>
 800ec3e:	1c43      	adds	r3, r0, #1
 800ec40:	89a3      	ldrh	r3, [r4, #12]
 800ec42:	bf15      	itete	ne
 800ec44:	6560      	strne	r0, [r4, #84]	; 0x54
 800ec46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ec4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ec4e:	81a3      	strheq	r3, [r4, #12]
 800ec50:	bf18      	it	ne
 800ec52:	81a3      	strhne	r3, [r4, #12]
 800ec54:	bd10      	pop	{r4, pc}

0800ec56 <__sclose>:
 800ec56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec5a:	f000 bf75 	b.w	800fb48 <_close_r>

0800ec5e <strncmp>:
 800ec5e:	b510      	push	{r4, lr}
 800ec60:	b16a      	cbz	r2, 800ec7e <strncmp+0x20>
 800ec62:	3901      	subs	r1, #1
 800ec64:	1884      	adds	r4, r0, r2
 800ec66:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ec6a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ec6e:	4293      	cmp	r3, r2
 800ec70:	d103      	bne.n	800ec7a <strncmp+0x1c>
 800ec72:	42a0      	cmp	r0, r4
 800ec74:	d001      	beq.n	800ec7a <strncmp+0x1c>
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d1f5      	bne.n	800ec66 <strncmp+0x8>
 800ec7a:	1a98      	subs	r0, r3, r2
 800ec7c:	bd10      	pop	{r4, pc}
 800ec7e:	4610      	mov	r0, r2
 800ec80:	e7fc      	b.n	800ec7c <strncmp+0x1e>

0800ec82 <sulp>:
 800ec82:	b570      	push	{r4, r5, r6, lr}
 800ec84:	4604      	mov	r4, r0
 800ec86:	460d      	mov	r5, r1
 800ec88:	ec45 4b10 	vmov	d0, r4, r5
 800ec8c:	4616      	mov	r6, r2
 800ec8e:	f002 fdc7 	bl	8011820 <__ulp>
 800ec92:	ec51 0b10 	vmov	r0, r1, d0
 800ec96:	b17e      	cbz	r6, 800ecb8 <sulp+0x36>
 800ec98:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ec9c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	dd09      	ble.n	800ecb8 <sulp+0x36>
 800eca4:	051b      	lsls	r3, r3, #20
 800eca6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ecaa:	2400      	movs	r4, #0
 800ecac:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ecb0:	4622      	mov	r2, r4
 800ecb2:	462b      	mov	r3, r5
 800ecb4:	f7f1 fcb0 	bl	8000618 <__aeabi_dmul>
 800ecb8:	bd70      	pop	{r4, r5, r6, pc}
 800ecba:	0000      	movs	r0, r0
 800ecbc:	0000      	movs	r0, r0
	...

0800ecc0 <_strtod_l>:
 800ecc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecc4:	b0a3      	sub	sp, #140	; 0x8c
 800ecc6:	461f      	mov	r7, r3
 800ecc8:	2300      	movs	r3, #0
 800ecca:	931e      	str	r3, [sp, #120]	; 0x78
 800eccc:	4ba4      	ldr	r3, [pc, #656]	; (800ef60 <_strtod_l+0x2a0>)
 800ecce:	9219      	str	r2, [sp, #100]	; 0x64
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	9307      	str	r3, [sp, #28]
 800ecd4:	4604      	mov	r4, r0
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	4688      	mov	r8, r1
 800ecda:	f7f1 fa89 	bl	80001f0 <strlen>
 800ecde:	f04f 0a00 	mov.w	sl, #0
 800ece2:	4605      	mov	r5, r0
 800ece4:	f04f 0b00 	mov.w	fp, #0
 800ece8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800ecec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ecee:	781a      	ldrb	r2, [r3, #0]
 800ecf0:	2a2b      	cmp	r2, #43	; 0x2b
 800ecf2:	d04c      	beq.n	800ed8e <_strtod_l+0xce>
 800ecf4:	d839      	bhi.n	800ed6a <_strtod_l+0xaa>
 800ecf6:	2a0d      	cmp	r2, #13
 800ecf8:	d832      	bhi.n	800ed60 <_strtod_l+0xa0>
 800ecfa:	2a08      	cmp	r2, #8
 800ecfc:	d832      	bhi.n	800ed64 <_strtod_l+0xa4>
 800ecfe:	2a00      	cmp	r2, #0
 800ed00:	d03c      	beq.n	800ed7c <_strtod_l+0xbc>
 800ed02:	2300      	movs	r3, #0
 800ed04:	930e      	str	r3, [sp, #56]	; 0x38
 800ed06:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800ed08:	7833      	ldrb	r3, [r6, #0]
 800ed0a:	2b30      	cmp	r3, #48	; 0x30
 800ed0c:	f040 80b4 	bne.w	800ee78 <_strtod_l+0x1b8>
 800ed10:	7873      	ldrb	r3, [r6, #1]
 800ed12:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ed16:	2b58      	cmp	r3, #88	; 0x58
 800ed18:	d16c      	bne.n	800edf4 <_strtod_l+0x134>
 800ed1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed1c:	9301      	str	r3, [sp, #4]
 800ed1e:	ab1e      	add	r3, sp, #120	; 0x78
 800ed20:	9702      	str	r7, [sp, #8]
 800ed22:	9300      	str	r3, [sp, #0]
 800ed24:	4a8f      	ldr	r2, [pc, #572]	; (800ef64 <_strtod_l+0x2a4>)
 800ed26:	ab1f      	add	r3, sp, #124	; 0x7c
 800ed28:	a91d      	add	r1, sp, #116	; 0x74
 800ed2a:	4620      	mov	r0, r4
 800ed2c:	f001 fed0 	bl	8010ad0 <__gethex>
 800ed30:	f010 0707 	ands.w	r7, r0, #7
 800ed34:	4605      	mov	r5, r0
 800ed36:	d005      	beq.n	800ed44 <_strtod_l+0x84>
 800ed38:	2f06      	cmp	r7, #6
 800ed3a:	d12a      	bne.n	800ed92 <_strtod_l+0xd2>
 800ed3c:	3601      	adds	r6, #1
 800ed3e:	2300      	movs	r3, #0
 800ed40:	961d      	str	r6, [sp, #116]	; 0x74
 800ed42:	930e      	str	r3, [sp, #56]	; 0x38
 800ed44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	f040 8596 	bne.w	800f878 <_strtod_l+0xbb8>
 800ed4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed4e:	b1db      	cbz	r3, 800ed88 <_strtod_l+0xc8>
 800ed50:	4652      	mov	r2, sl
 800ed52:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ed56:	ec43 2b10 	vmov	d0, r2, r3
 800ed5a:	b023      	add	sp, #140	; 0x8c
 800ed5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed60:	2a20      	cmp	r2, #32
 800ed62:	d1ce      	bne.n	800ed02 <_strtod_l+0x42>
 800ed64:	3301      	adds	r3, #1
 800ed66:	931d      	str	r3, [sp, #116]	; 0x74
 800ed68:	e7c0      	b.n	800ecec <_strtod_l+0x2c>
 800ed6a:	2a2d      	cmp	r2, #45	; 0x2d
 800ed6c:	d1c9      	bne.n	800ed02 <_strtod_l+0x42>
 800ed6e:	2201      	movs	r2, #1
 800ed70:	920e      	str	r2, [sp, #56]	; 0x38
 800ed72:	1c5a      	adds	r2, r3, #1
 800ed74:	921d      	str	r2, [sp, #116]	; 0x74
 800ed76:	785b      	ldrb	r3, [r3, #1]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d1c4      	bne.n	800ed06 <_strtod_l+0x46>
 800ed7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ed7e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	f040 8576 	bne.w	800f874 <_strtod_l+0xbb4>
 800ed88:	4652      	mov	r2, sl
 800ed8a:	465b      	mov	r3, fp
 800ed8c:	e7e3      	b.n	800ed56 <_strtod_l+0x96>
 800ed8e:	2200      	movs	r2, #0
 800ed90:	e7ee      	b.n	800ed70 <_strtod_l+0xb0>
 800ed92:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ed94:	b13a      	cbz	r2, 800eda6 <_strtod_l+0xe6>
 800ed96:	2135      	movs	r1, #53	; 0x35
 800ed98:	a820      	add	r0, sp, #128	; 0x80
 800ed9a:	f002 fe4c 	bl	8011a36 <__copybits>
 800ed9e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800eda0:	4620      	mov	r0, r4
 800eda2:	f002 fa11 	bl	80111c8 <_Bfree>
 800eda6:	3f01      	subs	r7, #1
 800eda8:	2f05      	cmp	r7, #5
 800edaa:	d807      	bhi.n	800edbc <_strtod_l+0xfc>
 800edac:	e8df f007 	tbb	[pc, r7]
 800edb0:	1d180b0e 	.word	0x1d180b0e
 800edb4:	030e      	.short	0x030e
 800edb6:	f04f 0b00 	mov.w	fp, #0
 800edba:	46da      	mov	sl, fp
 800edbc:	0728      	lsls	r0, r5, #28
 800edbe:	d5c1      	bpl.n	800ed44 <_strtod_l+0x84>
 800edc0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800edc4:	e7be      	b.n	800ed44 <_strtod_l+0x84>
 800edc6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800edca:	e7f7      	b.n	800edbc <_strtod_l+0xfc>
 800edcc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800edd0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800edd2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800edd6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800edda:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800edde:	e7ed      	b.n	800edbc <_strtod_l+0xfc>
 800ede0:	f8df b184 	ldr.w	fp, [pc, #388]	; 800ef68 <_strtod_l+0x2a8>
 800ede4:	f04f 0a00 	mov.w	sl, #0
 800ede8:	e7e8      	b.n	800edbc <_strtod_l+0xfc>
 800edea:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800edee:	f04f 3aff 	mov.w	sl, #4294967295
 800edf2:	e7e3      	b.n	800edbc <_strtod_l+0xfc>
 800edf4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800edf6:	1c5a      	adds	r2, r3, #1
 800edf8:	921d      	str	r2, [sp, #116]	; 0x74
 800edfa:	785b      	ldrb	r3, [r3, #1]
 800edfc:	2b30      	cmp	r3, #48	; 0x30
 800edfe:	d0f9      	beq.n	800edf4 <_strtod_l+0x134>
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d09f      	beq.n	800ed44 <_strtod_l+0x84>
 800ee04:	2301      	movs	r3, #1
 800ee06:	f04f 0900 	mov.w	r9, #0
 800ee0a:	9304      	str	r3, [sp, #16]
 800ee0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ee0e:	930a      	str	r3, [sp, #40]	; 0x28
 800ee10:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ee14:	464f      	mov	r7, r9
 800ee16:	220a      	movs	r2, #10
 800ee18:	981d      	ldr	r0, [sp, #116]	; 0x74
 800ee1a:	7806      	ldrb	r6, [r0, #0]
 800ee1c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ee20:	b2d9      	uxtb	r1, r3
 800ee22:	2909      	cmp	r1, #9
 800ee24:	d92a      	bls.n	800ee7c <_strtod_l+0x1bc>
 800ee26:	9907      	ldr	r1, [sp, #28]
 800ee28:	462a      	mov	r2, r5
 800ee2a:	f7ff ff18 	bl	800ec5e <strncmp>
 800ee2e:	b398      	cbz	r0, 800ee98 <_strtod_l+0x1d8>
 800ee30:	2000      	movs	r0, #0
 800ee32:	4633      	mov	r3, r6
 800ee34:	463d      	mov	r5, r7
 800ee36:	9007      	str	r0, [sp, #28]
 800ee38:	4602      	mov	r2, r0
 800ee3a:	2b65      	cmp	r3, #101	; 0x65
 800ee3c:	d001      	beq.n	800ee42 <_strtod_l+0x182>
 800ee3e:	2b45      	cmp	r3, #69	; 0x45
 800ee40:	d118      	bne.n	800ee74 <_strtod_l+0x1b4>
 800ee42:	b91d      	cbnz	r5, 800ee4c <_strtod_l+0x18c>
 800ee44:	9b04      	ldr	r3, [sp, #16]
 800ee46:	4303      	orrs	r3, r0
 800ee48:	d098      	beq.n	800ed7c <_strtod_l+0xbc>
 800ee4a:	2500      	movs	r5, #0
 800ee4c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800ee50:	f108 0301 	add.w	r3, r8, #1
 800ee54:	931d      	str	r3, [sp, #116]	; 0x74
 800ee56:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ee5a:	2b2b      	cmp	r3, #43	; 0x2b
 800ee5c:	d075      	beq.n	800ef4a <_strtod_l+0x28a>
 800ee5e:	2b2d      	cmp	r3, #45	; 0x2d
 800ee60:	d07b      	beq.n	800ef5a <_strtod_l+0x29a>
 800ee62:	f04f 0c00 	mov.w	ip, #0
 800ee66:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ee6a:	2909      	cmp	r1, #9
 800ee6c:	f240 8082 	bls.w	800ef74 <_strtod_l+0x2b4>
 800ee70:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800ee74:	2600      	movs	r6, #0
 800ee76:	e09d      	b.n	800efb4 <_strtod_l+0x2f4>
 800ee78:	2300      	movs	r3, #0
 800ee7a:	e7c4      	b.n	800ee06 <_strtod_l+0x146>
 800ee7c:	2f08      	cmp	r7, #8
 800ee7e:	bfd8      	it	le
 800ee80:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800ee82:	f100 0001 	add.w	r0, r0, #1
 800ee86:	bfda      	itte	le
 800ee88:	fb02 3301 	mlale	r3, r2, r1, r3
 800ee8c:	9309      	strle	r3, [sp, #36]	; 0x24
 800ee8e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ee92:	3701      	adds	r7, #1
 800ee94:	901d      	str	r0, [sp, #116]	; 0x74
 800ee96:	e7bf      	b.n	800ee18 <_strtod_l+0x158>
 800ee98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ee9a:	195a      	adds	r2, r3, r5
 800ee9c:	921d      	str	r2, [sp, #116]	; 0x74
 800ee9e:	5d5b      	ldrb	r3, [r3, r5]
 800eea0:	2f00      	cmp	r7, #0
 800eea2:	d037      	beq.n	800ef14 <_strtod_l+0x254>
 800eea4:	9007      	str	r0, [sp, #28]
 800eea6:	463d      	mov	r5, r7
 800eea8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800eeac:	2a09      	cmp	r2, #9
 800eeae:	d912      	bls.n	800eed6 <_strtod_l+0x216>
 800eeb0:	2201      	movs	r2, #1
 800eeb2:	e7c2      	b.n	800ee3a <_strtod_l+0x17a>
 800eeb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800eeb6:	1c5a      	adds	r2, r3, #1
 800eeb8:	921d      	str	r2, [sp, #116]	; 0x74
 800eeba:	785b      	ldrb	r3, [r3, #1]
 800eebc:	3001      	adds	r0, #1
 800eebe:	2b30      	cmp	r3, #48	; 0x30
 800eec0:	d0f8      	beq.n	800eeb4 <_strtod_l+0x1f4>
 800eec2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800eec6:	2a08      	cmp	r2, #8
 800eec8:	f200 84db 	bhi.w	800f882 <_strtod_l+0xbc2>
 800eecc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800eece:	9007      	str	r0, [sp, #28]
 800eed0:	2000      	movs	r0, #0
 800eed2:	920a      	str	r2, [sp, #40]	; 0x28
 800eed4:	4605      	mov	r5, r0
 800eed6:	3b30      	subs	r3, #48	; 0x30
 800eed8:	f100 0201 	add.w	r2, r0, #1
 800eedc:	d014      	beq.n	800ef08 <_strtod_l+0x248>
 800eede:	9907      	ldr	r1, [sp, #28]
 800eee0:	4411      	add	r1, r2
 800eee2:	9107      	str	r1, [sp, #28]
 800eee4:	462a      	mov	r2, r5
 800eee6:	eb00 0e05 	add.w	lr, r0, r5
 800eeea:	210a      	movs	r1, #10
 800eeec:	4572      	cmp	r2, lr
 800eeee:	d113      	bne.n	800ef18 <_strtod_l+0x258>
 800eef0:	182a      	adds	r2, r5, r0
 800eef2:	2a08      	cmp	r2, #8
 800eef4:	f105 0501 	add.w	r5, r5, #1
 800eef8:	4405      	add	r5, r0
 800eefa:	dc1c      	bgt.n	800ef36 <_strtod_l+0x276>
 800eefc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eefe:	220a      	movs	r2, #10
 800ef00:	fb02 3301 	mla	r3, r2, r1, r3
 800ef04:	9309      	str	r3, [sp, #36]	; 0x24
 800ef06:	2200      	movs	r2, #0
 800ef08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ef0a:	1c59      	adds	r1, r3, #1
 800ef0c:	911d      	str	r1, [sp, #116]	; 0x74
 800ef0e:	785b      	ldrb	r3, [r3, #1]
 800ef10:	4610      	mov	r0, r2
 800ef12:	e7c9      	b.n	800eea8 <_strtod_l+0x1e8>
 800ef14:	4638      	mov	r0, r7
 800ef16:	e7d2      	b.n	800eebe <_strtod_l+0x1fe>
 800ef18:	2a08      	cmp	r2, #8
 800ef1a:	dc04      	bgt.n	800ef26 <_strtod_l+0x266>
 800ef1c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ef1e:	434e      	muls	r6, r1
 800ef20:	9609      	str	r6, [sp, #36]	; 0x24
 800ef22:	3201      	adds	r2, #1
 800ef24:	e7e2      	b.n	800eeec <_strtod_l+0x22c>
 800ef26:	f102 0c01 	add.w	ip, r2, #1
 800ef2a:	f1bc 0f10 	cmp.w	ip, #16
 800ef2e:	bfd8      	it	le
 800ef30:	fb01 f909 	mulle.w	r9, r1, r9
 800ef34:	e7f5      	b.n	800ef22 <_strtod_l+0x262>
 800ef36:	2d10      	cmp	r5, #16
 800ef38:	bfdc      	itt	le
 800ef3a:	220a      	movle	r2, #10
 800ef3c:	fb02 3909 	mlale	r9, r2, r9, r3
 800ef40:	e7e1      	b.n	800ef06 <_strtod_l+0x246>
 800ef42:	2300      	movs	r3, #0
 800ef44:	9307      	str	r3, [sp, #28]
 800ef46:	2201      	movs	r2, #1
 800ef48:	e77c      	b.n	800ee44 <_strtod_l+0x184>
 800ef4a:	f04f 0c00 	mov.w	ip, #0
 800ef4e:	f108 0302 	add.w	r3, r8, #2
 800ef52:	931d      	str	r3, [sp, #116]	; 0x74
 800ef54:	f898 3002 	ldrb.w	r3, [r8, #2]
 800ef58:	e785      	b.n	800ee66 <_strtod_l+0x1a6>
 800ef5a:	f04f 0c01 	mov.w	ip, #1
 800ef5e:	e7f6      	b.n	800ef4e <_strtod_l+0x28e>
 800ef60:	080133f4 	.word	0x080133f4
 800ef64:	08013168 	.word	0x08013168
 800ef68:	7ff00000 	.word	0x7ff00000
 800ef6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ef6e:	1c59      	adds	r1, r3, #1
 800ef70:	911d      	str	r1, [sp, #116]	; 0x74
 800ef72:	785b      	ldrb	r3, [r3, #1]
 800ef74:	2b30      	cmp	r3, #48	; 0x30
 800ef76:	d0f9      	beq.n	800ef6c <_strtod_l+0x2ac>
 800ef78:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800ef7c:	2908      	cmp	r1, #8
 800ef7e:	f63f af79 	bhi.w	800ee74 <_strtod_l+0x1b4>
 800ef82:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800ef86:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ef88:	9308      	str	r3, [sp, #32]
 800ef8a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ef8c:	1c59      	adds	r1, r3, #1
 800ef8e:	911d      	str	r1, [sp, #116]	; 0x74
 800ef90:	785b      	ldrb	r3, [r3, #1]
 800ef92:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800ef96:	2e09      	cmp	r6, #9
 800ef98:	d937      	bls.n	800f00a <_strtod_l+0x34a>
 800ef9a:	9e08      	ldr	r6, [sp, #32]
 800ef9c:	1b89      	subs	r1, r1, r6
 800ef9e:	2908      	cmp	r1, #8
 800efa0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800efa4:	dc02      	bgt.n	800efac <_strtod_l+0x2ec>
 800efa6:	4576      	cmp	r6, lr
 800efa8:	bfa8      	it	ge
 800efaa:	4676      	movge	r6, lr
 800efac:	f1bc 0f00 	cmp.w	ip, #0
 800efb0:	d000      	beq.n	800efb4 <_strtod_l+0x2f4>
 800efb2:	4276      	negs	r6, r6
 800efb4:	2d00      	cmp	r5, #0
 800efb6:	d14f      	bne.n	800f058 <_strtod_l+0x398>
 800efb8:	9904      	ldr	r1, [sp, #16]
 800efba:	4301      	orrs	r1, r0
 800efbc:	f47f aec2 	bne.w	800ed44 <_strtod_l+0x84>
 800efc0:	2a00      	cmp	r2, #0
 800efc2:	f47f aedb 	bne.w	800ed7c <_strtod_l+0xbc>
 800efc6:	2b69      	cmp	r3, #105	; 0x69
 800efc8:	d027      	beq.n	800f01a <_strtod_l+0x35a>
 800efca:	dc24      	bgt.n	800f016 <_strtod_l+0x356>
 800efcc:	2b49      	cmp	r3, #73	; 0x49
 800efce:	d024      	beq.n	800f01a <_strtod_l+0x35a>
 800efd0:	2b4e      	cmp	r3, #78	; 0x4e
 800efd2:	f47f aed3 	bne.w	800ed7c <_strtod_l+0xbc>
 800efd6:	499e      	ldr	r1, [pc, #632]	; (800f250 <_strtod_l+0x590>)
 800efd8:	a81d      	add	r0, sp, #116	; 0x74
 800efda:	f001 ffd1 	bl	8010f80 <__match>
 800efde:	2800      	cmp	r0, #0
 800efe0:	f43f aecc 	beq.w	800ed7c <_strtod_l+0xbc>
 800efe4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800efe6:	781b      	ldrb	r3, [r3, #0]
 800efe8:	2b28      	cmp	r3, #40	; 0x28
 800efea:	d12d      	bne.n	800f048 <_strtod_l+0x388>
 800efec:	4999      	ldr	r1, [pc, #612]	; (800f254 <_strtod_l+0x594>)
 800efee:	aa20      	add	r2, sp, #128	; 0x80
 800eff0:	a81d      	add	r0, sp, #116	; 0x74
 800eff2:	f001 ffd9 	bl	8010fa8 <__hexnan>
 800eff6:	2805      	cmp	r0, #5
 800eff8:	d126      	bne.n	800f048 <_strtod_l+0x388>
 800effa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800effc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800f000:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f004:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f008:	e69c      	b.n	800ed44 <_strtod_l+0x84>
 800f00a:	210a      	movs	r1, #10
 800f00c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800f010:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800f014:	e7b9      	b.n	800ef8a <_strtod_l+0x2ca>
 800f016:	2b6e      	cmp	r3, #110	; 0x6e
 800f018:	e7db      	b.n	800efd2 <_strtod_l+0x312>
 800f01a:	498f      	ldr	r1, [pc, #572]	; (800f258 <_strtod_l+0x598>)
 800f01c:	a81d      	add	r0, sp, #116	; 0x74
 800f01e:	f001 ffaf 	bl	8010f80 <__match>
 800f022:	2800      	cmp	r0, #0
 800f024:	f43f aeaa 	beq.w	800ed7c <_strtod_l+0xbc>
 800f028:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f02a:	498c      	ldr	r1, [pc, #560]	; (800f25c <_strtod_l+0x59c>)
 800f02c:	3b01      	subs	r3, #1
 800f02e:	a81d      	add	r0, sp, #116	; 0x74
 800f030:	931d      	str	r3, [sp, #116]	; 0x74
 800f032:	f001 ffa5 	bl	8010f80 <__match>
 800f036:	b910      	cbnz	r0, 800f03e <_strtod_l+0x37e>
 800f038:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f03a:	3301      	adds	r3, #1
 800f03c:	931d      	str	r3, [sp, #116]	; 0x74
 800f03e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800f26c <_strtod_l+0x5ac>
 800f042:	f04f 0a00 	mov.w	sl, #0
 800f046:	e67d      	b.n	800ed44 <_strtod_l+0x84>
 800f048:	4885      	ldr	r0, [pc, #532]	; (800f260 <_strtod_l+0x5a0>)
 800f04a:	f003 fb55 	bl	80126f8 <nan>
 800f04e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800f052:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800f056:	e675      	b.n	800ed44 <_strtod_l+0x84>
 800f058:	9b07      	ldr	r3, [sp, #28]
 800f05a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f05c:	1af3      	subs	r3, r6, r3
 800f05e:	2f00      	cmp	r7, #0
 800f060:	bf08      	it	eq
 800f062:	462f      	moveq	r7, r5
 800f064:	2d10      	cmp	r5, #16
 800f066:	9308      	str	r3, [sp, #32]
 800f068:	46a8      	mov	r8, r5
 800f06a:	bfa8      	it	ge
 800f06c:	f04f 0810 	movge.w	r8, #16
 800f070:	f7f1 fa58 	bl	8000524 <__aeabi_ui2d>
 800f074:	2d09      	cmp	r5, #9
 800f076:	4682      	mov	sl, r0
 800f078:	468b      	mov	fp, r1
 800f07a:	dd13      	ble.n	800f0a4 <_strtod_l+0x3e4>
 800f07c:	4b79      	ldr	r3, [pc, #484]	; (800f264 <_strtod_l+0x5a4>)
 800f07e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f082:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f086:	f7f1 fac7 	bl	8000618 <__aeabi_dmul>
 800f08a:	4682      	mov	sl, r0
 800f08c:	4648      	mov	r0, r9
 800f08e:	468b      	mov	fp, r1
 800f090:	f7f1 fa48 	bl	8000524 <__aeabi_ui2d>
 800f094:	4602      	mov	r2, r0
 800f096:	460b      	mov	r3, r1
 800f098:	4650      	mov	r0, sl
 800f09a:	4659      	mov	r1, fp
 800f09c:	f7f1 f906 	bl	80002ac <__adddf3>
 800f0a0:	4682      	mov	sl, r0
 800f0a2:	468b      	mov	fp, r1
 800f0a4:	2d0f      	cmp	r5, #15
 800f0a6:	dc38      	bgt.n	800f11a <_strtod_l+0x45a>
 800f0a8:	9b08      	ldr	r3, [sp, #32]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	f43f ae4a 	beq.w	800ed44 <_strtod_l+0x84>
 800f0b0:	dd24      	ble.n	800f0fc <_strtod_l+0x43c>
 800f0b2:	2b16      	cmp	r3, #22
 800f0b4:	dc0b      	bgt.n	800f0ce <_strtod_l+0x40e>
 800f0b6:	4d6b      	ldr	r5, [pc, #428]	; (800f264 <_strtod_l+0x5a4>)
 800f0b8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800f0bc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800f0c0:	4652      	mov	r2, sl
 800f0c2:	465b      	mov	r3, fp
 800f0c4:	f7f1 faa8 	bl	8000618 <__aeabi_dmul>
 800f0c8:	4682      	mov	sl, r0
 800f0ca:	468b      	mov	fp, r1
 800f0cc:	e63a      	b.n	800ed44 <_strtod_l+0x84>
 800f0ce:	9a08      	ldr	r2, [sp, #32]
 800f0d0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800f0d4:	4293      	cmp	r3, r2
 800f0d6:	db20      	blt.n	800f11a <_strtod_l+0x45a>
 800f0d8:	4c62      	ldr	r4, [pc, #392]	; (800f264 <_strtod_l+0x5a4>)
 800f0da:	f1c5 050f 	rsb	r5, r5, #15
 800f0de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f0e2:	4652      	mov	r2, sl
 800f0e4:	465b      	mov	r3, fp
 800f0e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0ea:	f7f1 fa95 	bl	8000618 <__aeabi_dmul>
 800f0ee:	9b08      	ldr	r3, [sp, #32]
 800f0f0:	1b5d      	subs	r5, r3, r5
 800f0f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f0f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f0fa:	e7e3      	b.n	800f0c4 <_strtod_l+0x404>
 800f0fc:	9b08      	ldr	r3, [sp, #32]
 800f0fe:	3316      	adds	r3, #22
 800f100:	db0b      	blt.n	800f11a <_strtod_l+0x45a>
 800f102:	9b07      	ldr	r3, [sp, #28]
 800f104:	4a57      	ldr	r2, [pc, #348]	; (800f264 <_strtod_l+0x5a4>)
 800f106:	1b9e      	subs	r6, r3, r6
 800f108:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800f10c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f110:	4650      	mov	r0, sl
 800f112:	4659      	mov	r1, fp
 800f114:	f7f1 fbaa 	bl	800086c <__aeabi_ddiv>
 800f118:	e7d6      	b.n	800f0c8 <_strtod_l+0x408>
 800f11a:	9b08      	ldr	r3, [sp, #32]
 800f11c:	eba5 0808 	sub.w	r8, r5, r8
 800f120:	4498      	add	r8, r3
 800f122:	f1b8 0f00 	cmp.w	r8, #0
 800f126:	dd71      	ble.n	800f20c <_strtod_l+0x54c>
 800f128:	f018 030f 	ands.w	r3, r8, #15
 800f12c:	d00a      	beq.n	800f144 <_strtod_l+0x484>
 800f12e:	494d      	ldr	r1, [pc, #308]	; (800f264 <_strtod_l+0x5a4>)
 800f130:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f134:	4652      	mov	r2, sl
 800f136:	465b      	mov	r3, fp
 800f138:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f13c:	f7f1 fa6c 	bl	8000618 <__aeabi_dmul>
 800f140:	4682      	mov	sl, r0
 800f142:	468b      	mov	fp, r1
 800f144:	f038 080f 	bics.w	r8, r8, #15
 800f148:	d04d      	beq.n	800f1e6 <_strtod_l+0x526>
 800f14a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f14e:	dd22      	ble.n	800f196 <_strtod_l+0x4d6>
 800f150:	2500      	movs	r5, #0
 800f152:	462e      	mov	r6, r5
 800f154:	9509      	str	r5, [sp, #36]	; 0x24
 800f156:	9507      	str	r5, [sp, #28]
 800f158:	2322      	movs	r3, #34	; 0x22
 800f15a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800f26c <_strtod_l+0x5ac>
 800f15e:	6023      	str	r3, [r4, #0]
 800f160:	f04f 0a00 	mov.w	sl, #0
 800f164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f166:	2b00      	cmp	r3, #0
 800f168:	f43f adec 	beq.w	800ed44 <_strtod_l+0x84>
 800f16c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f16e:	4620      	mov	r0, r4
 800f170:	f002 f82a 	bl	80111c8 <_Bfree>
 800f174:	9907      	ldr	r1, [sp, #28]
 800f176:	4620      	mov	r0, r4
 800f178:	f002 f826 	bl	80111c8 <_Bfree>
 800f17c:	4631      	mov	r1, r6
 800f17e:	4620      	mov	r0, r4
 800f180:	f002 f822 	bl	80111c8 <_Bfree>
 800f184:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f186:	4620      	mov	r0, r4
 800f188:	f002 f81e 	bl	80111c8 <_Bfree>
 800f18c:	4629      	mov	r1, r5
 800f18e:	4620      	mov	r0, r4
 800f190:	f002 f81a 	bl	80111c8 <_Bfree>
 800f194:	e5d6      	b.n	800ed44 <_strtod_l+0x84>
 800f196:	2300      	movs	r3, #0
 800f198:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f19c:	4650      	mov	r0, sl
 800f19e:	4659      	mov	r1, fp
 800f1a0:	4699      	mov	r9, r3
 800f1a2:	f1b8 0f01 	cmp.w	r8, #1
 800f1a6:	dc21      	bgt.n	800f1ec <_strtod_l+0x52c>
 800f1a8:	b10b      	cbz	r3, 800f1ae <_strtod_l+0x4ee>
 800f1aa:	4682      	mov	sl, r0
 800f1ac:	468b      	mov	fp, r1
 800f1ae:	4b2e      	ldr	r3, [pc, #184]	; (800f268 <_strtod_l+0x5a8>)
 800f1b0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f1b4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800f1b8:	4652      	mov	r2, sl
 800f1ba:	465b      	mov	r3, fp
 800f1bc:	e9d9 0100 	ldrd	r0, r1, [r9]
 800f1c0:	f7f1 fa2a 	bl	8000618 <__aeabi_dmul>
 800f1c4:	4b29      	ldr	r3, [pc, #164]	; (800f26c <_strtod_l+0x5ac>)
 800f1c6:	460a      	mov	r2, r1
 800f1c8:	400b      	ands	r3, r1
 800f1ca:	4929      	ldr	r1, [pc, #164]	; (800f270 <_strtod_l+0x5b0>)
 800f1cc:	428b      	cmp	r3, r1
 800f1ce:	4682      	mov	sl, r0
 800f1d0:	d8be      	bhi.n	800f150 <_strtod_l+0x490>
 800f1d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f1d6:	428b      	cmp	r3, r1
 800f1d8:	bf86      	itte	hi
 800f1da:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800f274 <_strtod_l+0x5b4>
 800f1de:	f04f 3aff 	movhi.w	sl, #4294967295
 800f1e2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	9304      	str	r3, [sp, #16]
 800f1ea:	e081      	b.n	800f2f0 <_strtod_l+0x630>
 800f1ec:	f018 0f01 	tst.w	r8, #1
 800f1f0:	d007      	beq.n	800f202 <_strtod_l+0x542>
 800f1f2:	4b1d      	ldr	r3, [pc, #116]	; (800f268 <_strtod_l+0x5a8>)
 800f1f4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800f1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1fc:	f7f1 fa0c 	bl	8000618 <__aeabi_dmul>
 800f200:	2301      	movs	r3, #1
 800f202:	f109 0901 	add.w	r9, r9, #1
 800f206:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f20a:	e7ca      	b.n	800f1a2 <_strtod_l+0x4e2>
 800f20c:	d0eb      	beq.n	800f1e6 <_strtod_l+0x526>
 800f20e:	f1c8 0800 	rsb	r8, r8, #0
 800f212:	f018 020f 	ands.w	r2, r8, #15
 800f216:	d00a      	beq.n	800f22e <_strtod_l+0x56e>
 800f218:	4b12      	ldr	r3, [pc, #72]	; (800f264 <_strtod_l+0x5a4>)
 800f21a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f21e:	4650      	mov	r0, sl
 800f220:	4659      	mov	r1, fp
 800f222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f226:	f7f1 fb21 	bl	800086c <__aeabi_ddiv>
 800f22a:	4682      	mov	sl, r0
 800f22c:	468b      	mov	fp, r1
 800f22e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f232:	d0d8      	beq.n	800f1e6 <_strtod_l+0x526>
 800f234:	f1b8 0f1f 	cmp.w	r8, #31
 800f238:	dd1e      	ble.n	800f278 <_strtod_l+0x5b8>
 800f23a:	2500      	movs	r5, #0
 800f23c:	462e      	mov	r6, r5
 800f23e:	9509      	str	r5, [sp, #36]	; 0x24
 800f240:	9507      	str	r5, [sp, #28]
 800f242:	2322      	movs	r3, #34	; 0x22
 800f244:	f04f 0a00 	mov.w	sl, #0
 800f248:	f04f 0b00 	mov.w	fp, #0
 800f24c:	6023      	str	r3, [r4, #0]
 800f24e:	e789      	b.n	800f164 <_strtod_l+0x4a4>
 800f250:	0801313d 	.word	0x0801313d
 800f254:	0801317c 	.word	0x0801317c
 800f258:	08013135 	.word	0x08013135
 800f25c:	080132f8 	.word	0x080132f8
 800f260:	080131f3 	.word	0x080131f3
 800f264:	08013490 	.word	0x08013490
 800f268:	08013468 	.word	0x08013468
 800f26c:	7ff00000 	.word	0x7ff00000
 800f270:	7ca00000 	.word	0x7ca00000
 800f274:	7fefffff 	.word	0x7fefffff
 800f278:	f018 0310 	ands.w	r3, r8, #16
 800f27c:	bf18      	it	ne
 800f27e:	236a      	movne	r3, #106	; 0x6a
 800f280:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800f638 <_strtod_l+0x978>
 800f284:	9304      	str	r3, [sp, #16]
 800f286:	4650      	mov	r0, sl
 800f288:	4659      	mov	r1, fp
 800f28a:	2300      	movs	r3, #0
 800f28c:	f018 0f01 	tst.w	r8, #1
 800f290:	d004      	beq.n	800f29c <_strtod_l+0x5dc>
 800f292:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f296:	f7f1 f9bf 	bl	8000618 <__aeabi_dmul>
 800f29a:	2301      	movs	r3, #1
 800f29c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800f2a0:	f109 0908 	add.w	r9, r9, #8
 800f2a4:	d1f2      	bne.n	800f28c <_strtod_l+0x5cc>
 800f2a6:	b10b      	cbz	r3, 800f2ac <_strtod_l+0x5ec>
 800f2a8:	4682      	mov	sl, r0
 800f2aa:	468b      	mov	fp, r1
 800f2ac:	9b04      	ldr	r3, [sp, #16]
 800f2ae:	b1bb      	cbz	r3, 800f2e0 <_strtod_l+0x620>
 800f2b0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800f2b4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	4659      	mov	r1, fp
 800f2bc:	dd10      	ble.n	800f2e0 <_strtod_l+0x620>
 800f2be:	2b1f      	cmp	r3, #31
 800f2c0:	f340 8128 	ble.w	800f514 <_strtod_l+0x854>
 800f2c4:	2b34      	cmp	r3, #52	; 0x34
 800f2c6:	bfde      	ittt	le
 800f2c8:	3b20      	suble	r3, #32
 800f2ca:	f04f 32ff 	movle.w	r2, #4294967295
 800f2ce:	fa02 f303 	lslle.w	r3, r2, r3
 800f2d2:	f04f 0a00 	mov.w	sl, #0
 800f2d6:	bfcc      	ite	gt
 800f2d8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f2dc:	ea03 0b01 	andle.w	fp, r3, r1
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	4650      	mov	r0, sl
 800f2e6:	4659      	mov	r1, fp
 800f2e8:	f7f1 fbfe 	bl	8000ae8 <__aeabi_dcmpeq>
 800f2ec:	2800      	cmp	r0, #0
 800f2ee:	d1a4      	bne.n	800f23a <_strtod_l+0x57a>
 800f2f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2f2:	9300      	str	r3, [sp, #0]
 800f2f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f2f6:	462b      	mov	r3, r5
 800f2f8:	463a      	mov	r2, r7
 800f2fa:	4620      	mov	r0, r4
 800f2fc:	f001 ffd0 	bl	80112a0 <__s2b>
 800f300:	9009      	str	r0, [sp, #36]	; 0x24
 800f302:	2800      	cmp	r0, #0
 800f304:	f43f af24 	beq.w	800f150 <_strtod_l+0x490>
 800f308:	9b07      	ldr	r3, [sp, #28]
 800f30a:	1b9e      	subs	r6, r3, r6
 800f30c:	9b08      	ldr	r3, [sp, #32]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	bfb4      	ite	lt
 800f312:	4633      	movlt	r3, r6
 800f314:	2300      	movge	r3, #0
 800f316:	9310      	str	r3, [sp, #64]	; 0x40
 800f318:	9b08      	ldr	r3, [sp, #32]
 800f31a:	2500      	movs	r5, #0
 800f31c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f320:	9318      	str	r3, [sp, #96]	; 0x60
 800f322:	462e      	mov	r6, r5
 800f324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f326:	4620      	mov	r0, r4
 800f328:	6859      	ldr	r1, [r3, #4]
 800f32a:	f001 ff0d 	bl	8011148 <_Balloc>
 800f32e:	9007      	str	r0, [sp, #28]
 800f330:	2800      	cmp	r0, #0
 800f332:	f43f af11 	beq.w	800f158 <_strtod_l+0x498>
 800f336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f338:	691a      	ldr	r2, [r3, #16]
 800f33a:	3202      	adds	r2, #2
 800f33c:	f103 010c 	add.w	r1, r3, #12
 800f340:	0092      	lsls	r2, r2, #2
 800f342:	300c      	adds	r0, #12
 800f344:	f7fe fbe2 	bl	800db0c <memcpy>
 800f348:	ec4b ab10 	vmov	d0, sl, fp
 800f34c:	aa20      	add	r2, sp, #128	; 0x80
 800f34e:	a91f      	add	r1, sp, #124	; 0x7c
 800f350:	4620      	mov	r0, r4
 800f352:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800f356:	f002 fadf 	bl	8011918 <__d2b>
 800f35a:	901e      	str	r0, [sp, #120]	; 0x78
 800f35c:	2800      	cmp	r0, #0
 800f35e:	f43f aefb 	beq.w	800f158 <_strtod_l+0x498>
 800f362:	2101      	movs	r1, #1
 800f364:	4620      	mov	r0, r4
 800f366:	f002 f835 	bl	80113d4 <__i2b>
 800f36a:	4606      	mov	r6, r0
 800f36c:	2800      	cmp	r0, #0
 800f36e:	f43f aef3 	beq.w	800f158 <_strtod_l+0x498>
 800f372:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f374:	9904      	ldr	r1, [sp, #16]
 800f376:	2b00      	cmp	r3, #0
 800f378:	bfab      	itete	ge
 800f37a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800f37c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800f37e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800f380:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800f384:	bfac      	ite	ge
 800f386:	eb03 0902 	addge.w	r9, r3, r2
 800f38a:	1ad7      	sublt	r7, r2, r3
 800f38c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f38e:	eba3 0801 	sub.w	r8, r3, r1
 800f392:	4490      	add	r8, r2
 800f394:	4ba3      	ldr	r3, [pc, #652]	; (800f624 <_strtod_l+0x964>)
 800f396:	f108 38ff 	add.w	r8, r8, #4294967295
 800f39a:	4598      	cmp	r8, r3
 800f39c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f3a0:	f280 80cc 	bge.w	800f53c <_strtod_l+0x87c>
 800f3a4:	eba3 0308 	sub.w	r3, r3, r8
 800f3a8:	2b1f      	cmp	r3, #31
 800f3aa:	eba2 0203 	sub.w	r2, r2, r3
 800f3ae:	f04f 0101 	mov.w	r1, #1
 800f3b2:	f300 80b6 	bgt.w	800f522 <_strtod_l+0x862>
 800f3b6:	fa01 f303 	lsl.w	r3, r1, r3
 800f3ba:	9311      	str	r3, [sp, #68]	; 0x44
 800f3bc:	2300      	movs	r3, #0
 800f3be:	930c      	str	r3, [sp, #48]	; 0x30
 800f3c0:	eb09 0802 	add.w	r8, r9, r2
 800f3c4:	9b04      	ldr	r3, [sp, #16]
 800f3c6:	45c1      	cmp	r9, r8
 800f3c8:	4417      	add	r7, r2
 800f3ca:	441f      	add	r7, r3
 800f3cc:	464b      	mov	r3, r9
 800f3ce:	bfa8      	it	ge
 800f3d0:	4643      	movge	r3, r8
 800f3d2:	42bb      	cmp	r3, r7
 800f3d4:	bfa8      	it	ge
 800f3d6:	463b      	movge	r3, r7
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	bfc2      	ittt	gt
 800f3dc:	eba8 0803 	subgt.w	r8, r8, r3
 800f3e0:	1aff      	subgt	r7, r7, r3
 800f3e2:	eba9 0903 	subgt.w	r9, r9, r3
 800f3e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	dd17      	ble.n	800f41c <_strtod_l+0x75c>
 800f3ec:	4631      	mov	r1, r6
 800f3ee:	461a      	mov	r2, r3
 800f3f0:	4620      	mov	r0, r4
 800f3f2:	f002 f8ab 	bl	801154c <__pow5mult>
 800f3f6:	4606      	mov	r6, r0
 800f3f8:	2800      	cmp	r0, #0
 800f3fa:	f43f aead 	beq.w	800f158 <_strtod_l+0x498>
 800f3fe:	4601      	mov	r1, r0
 800f400:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f402:	4620      	mov	r0, r4
 800f404:	f001 fffc 	bl	8011400 <__multiply>
 800f408:	900f      	str	r0, [sp, #60]	; 0x3c
 800f40a:	2800      	cmp	r0, #0
 800f40c:	f43f aea4 	beq.w	800f158 <_strtod_l+0x498>
 800f410:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f412:	4620      	mov	r0, r4
 800f414:	f001 fed8 	bl	80111c8 <_Bfree>
 800f418:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f41a:	931e      	str	r3, [sp, #120]	; 0x78
 800f41c:	f1b8 0f00 	cmp.w	r8, #0
 800f420:	f300 8091 	bgt.w	800f546 <_strtod_l+0x886>
 800f424:	9b08      	ldr	r3, [sp, #32]
 800f426:	2b00      	cmp	r3, #0
 800f428:	dd08      	ble.n	800f43c <_strtod_l+0x77c>
 800f42a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f42c:	9907      	ldr	r1, [sp, #28]
 800f42e:	4620      	mov	r0, r4
 800f430:	f002 f88c 	bl	801154c <__pow5mult>
 800f434:	9007      	str	r0, [sp, #28]
 800f436:	2800      	cmp	r0, #0
 800f438:	f43f ae8e 	beq.w	800f158 <_strtod_l+0x498>
 800f43c:	2f00      	cmp	r7, #0
 800f43e:	dd08      	ble.n	800f452 <_strtod_l+0x792>
 800f440:	9907      	ldr	r1, [sp, #28]
 800f442:	463a      	mov	r2, r7
 800f444:	4620      	mov	r0, r4
 800f446:	f002 f8db 	bl	8011600 <__lshift>
 800f44a:	9007      	str	r0, [sp, #28]
 800f44c:	2800      	cmp	r0, #0
 800f44e:	f43f ae83 	beq.w	800f158 <_strtod_l+0x498>
 800f452:	f1b9 0f00 	cmp.w	r9, #0
 800f456:	dd08      	ble.n	800f46a <_strtod_l+0x7aa>
 800f458:	4631      	mov	r1, r6
 800f45a:	464a      	mov	r2, r9
 800f45c:	4620      	mov	r0, r4
 800f45e:	f002 f8cf 	bl	8011600 <__lshift>
 800f462:	4606      	mov	r6, r0
 800f464:	2800      	cmp	r0, #0
 800f466:	f43f ae77 	beq.w	800f158 <_strtod_l+0x498>
 800f46a:	9a07      	ldr	r2, [sp, #28]
 800f46c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f46e:	4620      	mov	r0, r4
 800f470:	f002 f94e 	bl	8011710 <__mdiff>
 800f474:	4605      	mov	r5, r0
 800f476:	2800      	cmp	r0, #0
 800f478:	f43f ae6e 	beq.w	800f158 <_strtod_l+0x498>
 800f47c:	68c3      	ldr	r3, [r0, #12]
 800f47e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f480:	2300      	movs	r3, #0
 800f482:	60c3      	str	r3, [r0, #12]
 800f484:	4631      	mov	r1, r6
 800f486:	f002 f927 	bl	80116d8 <__mcmp>
 800f48a:	2800      	cmp	r0, #0
 800f48c:	da65      	bge.n	800f55a <_strtod_l+0x89a>
 800f48e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f490:	ea53 030a 	orrs.w	r3, r3, sl
 800f494:	f040 8087 	bne.w	800f5a6 <_strtod_l+0x8e6>
 800f498:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	f040 8082 	bne.w	800f5a6 <_strtod_l+0x8e6>
 800f4a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f4a6:	0d1b      	lsrs	r3, r3, #20
 800f4a8:	051b      	lsls	r3, r3, #20
 800f4aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f4ae:	d97a      	bls.n	800f5a6 <_strtod_l+0x8e6>
 800f4b0:	696b      	ldr	r3, [r5, #20]
 800f4b2:	b913      	cbnz	r3, 800f4ba <_strtod_l+0x7fa>
 800f4b4:	692b      	ldr	r3, [r5, #16]
 800f4b6:	2b01      	cmp	r3, #1
 800f4b8:	dd75      	ble.n	800f5a6 <_strtod_l+0x8e6>
 800f4ba:	4629      	mov	r1, r5
 800f4bc:	2201      	movs	r2, #1
 800f4be:	4620      	mov	r0, r4
 800f4c0:	f002 f89e 	bl	8011600 <__lshift>
 800f4c4:	4631      	mov	r1, r6
 800f4c6:	4605      	mov	r5, r0
 800f4c8:	f002 f906 	bl	80116d8 <__mcmp>
 800f4cc:	2800      	cmp	r0, #0
 800f4ce:	dd6a      	ble.n	800f5a6 <_strtod_l+0x8e6>
 800f4d0:	9904      	ldr	r1, [sp, #16]
 800f4d2:	4a55      	ldr	r2, [pc, #340]	; (800f628 <_strtod_l+0x968>)
 800f4d4:	465b      	mov	r3, fp
 800f4d6:	2900      	cmp	r1, #0
 800f4d8:	f000 8085 	beq.w	800f5e6 <_strtod_l+0x926>
 800f4dc:	ea02 010b 	and.w	r1, r2, fp
 800f4e0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f4e4:	dc7f      	bgt.n	800f5e6 <_strtod_l+0x926>
 800f4e6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f4ea:	f77f aeaa 	ble.w	800f242 <_strtod_l+0x582>
 800f4ee:	4a4f      	ldr	r2, [pc, #316]	; (800f62c <_strtod_l+0x96c>)
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800f4f6:	4650      	mov	r0, sl
 800f4f8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800f4fc:	4659      	mov	r1, fp
 800f4fe:	f7f1 f88b 	bl	8000618 <__aeabi_dmul>
 800f502:	460b      	mov	r3, r1
 800f504:	4303      	orrs	r3, r0
 800f506:	bf08      	it	eq
 800f508:	2322      	moveq	r3, #34	; 0x22
 800f50a:	4682      	mov	sl, r0
 800f50c:	468b      	mov	fp, r1
 800f50e:	bf08      	it	eq
 800f510:	6023      	streq	r3, [r4, #0]
 800f512:	e62b      	b.n	800f16c <_strtod_l+0x4ac>
 800f514:	f04f 32ff 	mov.w	r2, #4294967295
 800f518:	fa02 f303 	lsl.w	r3, r2, r3
 800f51c:	ea03 0a0a 	and.w	sl, r3, sl
 800f520:	e6de      	b.n	800f2e0 <_strtod_l+0x620>
 800f522:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800f526:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800f52a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800f52e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800f532:	fa01 f308 	lsl.w	r3, r1, r8
 800f536:	930c      	str	r3, [sp, #48]	; 0x30
 800f538:	9111      	str	r1, [sp, #68]	; 0x44
 800f53a:	e741      	b.n	800f3c0 <_strtod_l+0x700>
 800f53c:	2300      	movs	r3, #0
 800f53e:	930c      	str	r3, [sp, #48]	; 0x30
 800f540:	2301      	movs	r3, #1
 800f542:	9311      	str	r3, [sp, #68]	; 0x44
 800f544:	e73c      	b.n	800f3c0 <_strtod_l+0x700>
 800f546:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f548:	4642      	mov	r2, r8
 800f54a:	4620      	mov	r0, r4
 800f54c:	f002 f858 	bl	8011600 <__lshift>
 800f550:	901e      	str	r0, [sp, #120]	; 0x78
 800f552:	2800      	cmp	r0, #0
 800f554:	f47f af66 	bne.w	800f424 <_strtod_l+0x764>
 800f558:	e5fe      	b.n	800f158 <_strtod_l+0x498>
 800f55a:	465f      	mov	r7, fp
 800f55c:	d16e      	bne.n	800f63c <_strtod_l+0x97c>
 800f55e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f560:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f564:	b342      	cbz	r2, 800f5b8 <_strtod_l+0x8f8>
 800f566:	4a32      	ldr	r2, [pc, #200]	; (800f630 <_strtod_l+0x970>)
 800f568:	4293      	cmp	r3, r2
 800f56a:	d128      	bne.n	800f5be <_strtod_l+0x8fe>
 800f56c:	9b04      	ldr	r3, [sp, #16]
 800f56e:	4650      	mov	r0, sl
 800f570:	b1eb      	cbz	r3, 800f5ae <_strtod_l+0x8ee>
 800f572:	4a2d      	ldr	r2, [pc, #180]	; (800f628 <_strtod_l+0x968>)
 800f574:	403a      	ands	r2, r7
 800f576:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800f57a:	f04f 31ff 	mov.w	r1, #4294967295
 800f57e:	d819      	bhi.n	800f5b4 <_strtod_l+0x8f4>
 800f580:	0d12      	lsrs	r2, r2, #20
 800f582:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f586:	fa01 f303 	lsl.w	r3, r1, r3
 800f58a:	4298      	cmp	r0, r3
 800f58c:	d117      	bne.n	800f5be <_strtod_l+0x8fe>
 800f58e:	4b29      	ldr	r3, [pc, #164]	; (800f634 <_strtod_l+0x974>)
 800f590:	429f      	cmp	r7, r3
 800f592:	d102      	bne.n	800f59a <_strtod_l+0x8da>
 800f594:	3001      	adds	r0, #1
 800f596:	f43f addf 	beq.w	800f158 <_strtod_l+0x498>
 800f59a:	4b23      	ldr	r3, [pc, #140]	; (800f628 <_strtod_l+0x968>)
 800f59c:	403b      	ands	r3, r7
 800f59e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800f5a2:	f04f 0a00 	mov.w	sl, #0
 800f5a6:	9b04      	ldr	r3, [sp, #16]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d1a0      	bne.n	800f4ee <_strtod_l+0x82e>
 800f5ac:	e5de      	b.n	800f16c <_strtod_l+0x4ac>
 800f5ae:	f04f 33ff 	mov.w	r3, #4294967295
 800f5b2:	e7ea      	b.n	800f58a <_strtod_l+0x8ca>
 800f5b4:	460b      	mov	r3, r1
 800f5b6:	e7e8      	b.n	800f58a <_strtod_l+0x8ca>
 800f5b8:	ea53 030a 	orrs.w	r3, r3, sl
 800f5bc:	d088      	beq.n	800f4d0 <_strtod_l+0x810>
 800f5be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f5c0:	b1db      	cbz	r3, 800f5fa <_strtod_l+0x93a>
 800f5c2:	423b      	tst	r3, r7
 800f5c4:	d0ef      	beq.n	800f5a6 <_strtod_l+0x8e6>
 800f5c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f5c8:	9a04      	ldr	r2, [sp, #16]
 800f5ca:	4650      	mov	r0, sl
 800f5cc:	4659      	mov	r1, fp
 800f5ce:	b1c3      	cbz	r3, 800f602 <_strtod_l+0x942>
 800f5d0:	f7ff fb57 	bl	800ec82 <sulp>
 800f5d4:	4602      	mov	r2, r0
 800f5d6:	460b      	mov	r3, r1
 800f5d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f5dc:	f7f0 fe66 	bl	80002ac <__adddf3>
 800f5e0:	4682      	mov	sl, r0
 800f5e2:	468b      	mov	fp, r1
 800f5e4:	e7df      	b.n	800f5a6 <_strtod_l+0x8e6>
 800f5e6:	4013      	ands	r3, r2
 800f5e8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f5ec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f5f0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f5f4:	f04f 3aff 	mov.w	sl, #4294967295
 800f5f8:	e7d5      	b.n	800f5a6 <_strtod_l+0x8e6>
 800f5fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f5fc:	ea13 0f0a 	tst.w	r3, sl
 800f600:	e7e0      	b.n	800f5c4 <_strtod_l+0x904>
 800f602:	f7ff fb3e 	bl	800ec82 <sulp>
 800f606:	4602      	mov	r2, r0
 800f608:	460b      	mov	r3, r1
 800f60a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f60e:	f7f0 fe4b 	bl	80002a8 <__aeabi_dsub>
 800f612:	2200      	movs	r2, #0
 800f614:	2300      	movs	r3, #0
 800f616:	4682      	mov	sl, r0
 800f618:	468b      	mov	fp, r1
 800f61a:	f7f1 fa65 	bl	8000ae8 <__aeabi_dcmpeq>
 800f61e:	2800      	cmp	r0, #0
 800f620:	d0c1      	beq.n	800f5a6 <_strtod_l+0x8e6>
 800f622:	e60e      	b.n	800f242 <_strtod_l+0x582>
 800f624:	fffffc02 	.word	0xfffffc02
 800f628:	7ff00000 	.word	0x7ff00000
 800f62c:	39500000 	.word	0x39500000
 800f630:	000fffff 	.word	0x000fffff
 800f634:	7fefffff 	.word	0x7fefffff
 800f638:	08013190 	.word	0x08013190
 800f63c:	4631      	mov	r1, r6
 800f63e:	4628      	mov	r0, r5
 800f640:	f002 f9c6 	bl	80119d0 <__ratio>
 800f644:	ec59 8b10 	vmov	r8, r9, d0
 800f648:	ee10 0a10 	vmov	r0, s0
 800f64c:	2200      	movs	r2, #0
 800f64e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f652:	4649      	mov	r1, r9
 800f654:	f7f1 fa5c 	bl	8000b10 <__aeabi_dcmple>
 800f658:	2800      	cmp	r0, #0
 800f65a:	d07c      	beq.n	800f756 <_strtod_l+0xa96>
 800f65c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d04c      	beq.n	800f6fc <_strtod_l+0xa3c>
 800f662:	4b95      	ldr	r3, [pc, #596]	; (800f8b8 <_strtod_l+0xbf8>)
 800f664:	2200      	movs	r2, #0
 800f666:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800f66a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800f8b8 <_strtod_l+0xbf8>
 800f66e:	f04f 0800 	mov.w	r8, #0
 800f672:	4b92      	ldr	r3, [pc, #584]	; (800f8bc <_strtod_l+0xbfc>)
 800f674:	403b      	ands	r3, r7
 800f676:	9311      	str	r3, [sp, #68]	; 0x44
 800f678:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f67a:	4b91      	ldr	r3, [pc, #580]	; (800f8c0 <_strtod_l+0xc00>)
 800f67c:	429a      	cmp	r2, r3
 800f67e:	f040 80b2 	bne.w	800f7e6 <_strtod_l+0xb26>
 800f682:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f686:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f68a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800f68e:	ec4b ab10 	vmov	d0, sl, fp
 800f692:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800f696:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f69a:	f002 f8c1 	bl	8011820 <__ulp>
 800f69e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f6a2:	ec53 2b10 	vmov	r2, r3, d0
 800f6a6:	f7f0 ffb7 	bl	8000618 <__aeabi_dmul>
 800f6aa:	4652      	mov	r2, sl
 800f6ac:	465b      	mov	r3, fp
 800f6ae:	f7f0 fdfd 	bl	80002ac <__adddf3>
 800f6b2:	460b      	mov	r3, r1
 800f6b4:	4981      	ldr	r1, [pc, #516]	; (800f8bc <_strtod_l+0xbfc>)
 800f6b6:	4a83      	ldr	r2, [pc, #524]	; (800f8c4 <_strtod_l+0xc04>)
 800f6b8:	4019      	ands	r1, r3
 800f6ba:	4291      	cmp	r1, r2
 800f6bc:	4682      	mov	sl, r0
 800f6be:	d95e      	bls.n	800f77e <_strtod_l+0xabe>
 800f6c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6c2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f6c6:	4293      	cmp	r3, r2
 800f6c8:	d103      	bne.n	800f6d2 <_strtod_l+0xa12>
 800f6ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6cc:	3301      	adds	r3, #1
 800f6ce:	f43f ad43 	beq.w	800f158 <_strtod_l+0x498>
 800f6d2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800f8d0 <_strtod_l+0xc10>
 800f6d6:	f04f 3aff 	mov.w	sl, #4294967295
 800f6da:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f6dc:	4620      	mov	r0, r4
 800f6de:	f001 fd73 	bl	80111c8 <_Bfree>
 800f6e2:	9907      	ldr	r1, [sp, #28]
 800f6e4:	4620      	mov	r0, r4
 800f6e6:	f001 fd6f 	bl	80111c8 <_Bfree>
 800f6ea:	4631      	mov	r1, r6
 800f6ec:	4620      	mov	r0, r4
 800f6ee:	f001 fd6b 	bl	80111c8 <_Bfree>
 800f6f2:	4629      	mov	r1, r5
 800f6f4:	4620      	mov	r0, r4
 800f6f6:	f001 fd67 	bl	80111c8 <_Bfree>
 800f6fa:	e613      	b.n	800f324 <_strtod_l+0x664>
 800f6fc:	f1ba 0f00 	cmp.w	sl, #0
 800f700:	d11b      	bne.n	800f73a <_strtod_l+0xa7a>
 800f702:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f706:	b9f3      	cbnz	r3, 800f746 <_strtod_l+0xa86>
 800f708:	4b6b      	ldr	r3, [pc, #428]	; (800f8b8 <_strtod_l+0xbf8>)
 800f70a:	2200      	movs	r2, #0
 800f70c:	4640      	mov	r0, r8
 800f70e:	4649      	mov	r1, r9
 800f710:	f7f1 f9f4 	bl	8000afc <__aeabi_dcmplt>
 800f714:	b9d0      	cbnz	r0, 800f74c <_strtod_l+0xa8c>
 800f716:	4640      	mov	r0, r8
 800f718:	4649      	mov	r1, r9
 800f71a:	4b6b      	ldr	r3, [pc, #428]	; (800f8c8 <_strtod_l+0xc08>)
 800f71c:	2200      	movs	r2, #0
 800f71e:	f7f0 ff7b 	bl	8000618 <__aeabi_dmul>
 800f722:	4680      	mov	r8, r0
 800f724:	4689      	mov	r9, r1
 800f726:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f72a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800f72e:	931b      	str	r3, [sp, #108]	; 0x6c
 800f730:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800f734:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800f738:	e79b      	b.n	800f672 <_strtod_l+0x9b2>
 800f73a:	f1ba 0f01 	cmp.w	sl, #1
 800f73e:	d102      	bne.n	800f746 <_strtod_l+0xa86>
 800f740:	2f00      	cmp	r7, #0
 800f742:	f43f ad7e 	beq.w	800f242 <_strtod_l+0x582>
 800f746:	4b61      	ldr	r3, [pc, #388]	; (800f8cc <_strtod_l+0xc0c>)
 800f748:	2200      	movs	r2, #0
 800f74a:	e78c      	b.n	800f666 <_strtod_l+0x9a6>
 800f74c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800f8c8 <_strtod_l+0xc08>
 800f750:	f04f 0800 	mov.w	r8, #0
 800f754:	e7e7      	b.n	800f726 <_strtod_l+0xa66>
 800f756:	4b5c      	ldr	r3, [pc, #368]	; (800f8c8 <_strtod_l+0xc08>)
 800f758:	4640      	mov	r0, r8
 800f75a:	4649      	mov	r1, r9
 800f75c:	2200      	movs	r2, #0
 800f75e:	f7f0 ff5b 	bl	8000618 <__aeabi_dmul>
 800f762:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f764:	4680      	mov	r8, r0
 800f766:	4689      	mov	r9, r1
 800f768:	b933      	cbnz	r3, 800f778 <_strtod_l+0xab8>
 800f76a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f76e:	9012      	str	r0, [sp, #72]	; 0x48
 800f770:	9313      	str	r3, [sp, #76]	; 0x4c
 800f772:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800f776:	e7dd      	b.n	800f734 <_strtod_l+0xa74>
 800f778:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800f77c:	e7f9      	b.n	800f772 <_strtod_l+0xab2>
 800f77e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f782:	9b04      	ldr	r3, [sp, #16]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d1a8      	bne.n	800f6da <_strtod_l+0xa1a>
 800f788:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f78c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f78e:	0d1b      	lsrs	r3, r3, #20
 800f790:	051b      	lsls	r3, r3, #20
 800f792:	429a      	cmp	r2, r3
 800f794:	d1a1      	bne.n	800f6da <_strtod_l+0xa1a>
 800f796:	4640      	mov	r0, r8
 800f798:	4649      	mov	r1, r9
 800f79a:	f7f1 fa9d 	bl	8000cd8 <__aeabi_d2lz>
 800f79e:	f7f0 ff0d 	bl	80005bc <__aeabi_l2d>
 800f7a2:	4602      	mov	r2, r0
 800f7a4:	460b      	mov	r3, r1
 800f7a6:	4640      	mov	r0, r8
 800f7a8:	4649      	mov	r1, r9
 800f7aa:	f7f0 fd7d 	bl	80002a8 <__aeabi_dsub>
 800f7ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f7b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f7b4:	ea43 030a 	orr.w	r3, r3, sl
 800f7b8:	4313      	orrs	r3, r2
 800f7ba:	4680      	mov	r8, r0
 800f7bc:	4689      	mov	r9, r1
 800f7be:	d053      	beq.n	800f868 <_strtod_l+0xba8>
 800f7c0:	a335      	add	r3, pc, #212	; (adr r3, 800f898 <_strtod_l+0xbd8>)
 800f7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7c6:	f7f1 f999 	bl	8000afc <__aeabi_dcmplt>
 800f7ca:	2800      	cmp	r0, #0
 800f7cc:	f47f acce 	bne.w	800f16c <_strtod_l+0x4ac>
 800f7d0:	a333      	add	r3, pc, #204	; (adr r3, 800f8a0 <_strtod_l+0xbe0>)
 800f7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7d6:	4640      	mov	r0, r8
 800f7d8:	4649      	mov	r1, r9
 800f7da:	f7f1 f9ad 	bl	8000b38 <__aeabi_dcmpgt>
 800f7de:	2800      	cmp	r0, #0
 800f7e0:	f43f af7b 	beq.w	800f6da <_strtod_l+0xa1a>
 800f7e4:	e4c2      	b.n	800f16c <_strtod_l+0x4ac>
 800f7e6:	9b04      	ldr	r3, [sp, #16]
 800f7e8:	b333      	cbz	r3, 800f838 <_strtod_l+0xb78>
 800f7ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f7ec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f7f0:	d822      	bhi.n	800f838 <_strtod_l+0xb78>
 800f7f2:	a32d      	add	r3, pc, #180	; (adr r3, 800f8a8 <_strtod_l+0xbe8>)
 800f7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7f8:	4640      	mov	r0, r8
 800f7fa:	4649      	mov	r1, r9
 800f7fc:	f7f1 f988 	bl	8000b10 <__aeabi_dcmple>
 800f800:	b1a0      	cbz	r0, 800f82c <_strtod_l+0xb6c>
 800f802:	4649      	mov	r1, r9
 800f804:	4640      	mov	r0, r8
 800f806:	f7f1 f9df 	bl	8000bc8 <__aeabi_d2uiz>
 800f80a:	2801      	cmp	r0, #1
 800f80c:	bf38      	it	cc
 800f80e:	2001      	movcc	r0, #1
 800f810:	f7f0 fe88 	bl	8000524 <__aeabi_ui2d>
 800f814:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f816:	4680      	mov	r8, r0
 800f818:	4689      	mov	r9, r1
 800f81a:	bb13      	cbnz	r3, 800f862 <_strtod_l+0xba2>
 800f81c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f820:	9014      	str	r0, [sp, #80]	; 0x50
 800f822:	9315      	str	r3, [sp, #84]	; 0x54
 800f824:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f828:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800f82c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f82e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f830:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f834:	1a9b      	subs	r3, r3, r2
 800f836:	930d      	str	r3, [sp, #52]	; 0x34
 800f838:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f83c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f840:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f844:	f001 ffec 	bl	8011820 <__ulp>
 800f848:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f84c:	ec53 2b10 	vmov	r2, r3, d0
 800f850:	f7f0 fee2 	bl	8000618 <__aeabi_dmul>
 800f854:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f858:	f7f0 fd28 	bl	80002ac <__adddf3>
 800f85c:	4682      	mov	sl, r0
 800f85e:	468b      	mov	fp, r1
 800f860:	e78f      	b.n	800f782 <_strtod_l+0xac2>
 800f862:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800f866:	e7dd      	b.n	800f824 <_strtod_l+0xb64>
 800f868:	a311      	add	r3, pc, #68	; (adr r3, 800f8b0 <_strtod_l+0xbf0>)
 800f86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f86e:	f7f1 f945 	bl	8000afc <__aeabi_dcmplt>
 800f872:	e7b4      	b.n	800f7de <_strtod_l+0xb1e>
 800f874:	2300      	movs	r3, #0
 800f876:	930e      	str	r3, [sp, #56]	; 0x38
 800f878:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f87a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f87c:	6013      	str	r3, [r2, #0]
 800f87e:	f7ff ba65 	b.w	800ed4c <_strtod_l+0x8c>
 800f882:	2b65      	cmp	r3, #101	; 0x65
 800f884:	f43f ab5d 	beq.w	800ef42 <_strtod_l+0x282>
 800f888:	2b45      	cmp	r3, #69	; 0x45
 800f88a:	f43f ab5a 	beq.w	800ef42 <_strtod_l+0x282>
 800f88e:	2201      	movs	r2, #1
 800f890:	f7ff bb92 	b.w	800efb8 <_strtod_l+0x2f8>
 800f894:	f3af 8000 	nop.w
 800f898:	94a03595 	.word	0x94a03595
 800f89c:	3fdfffff 	.word	0x3fdfffff
 800f8a0:	35afe535 	.word	0x35afe535
 800f8a4:	3fe00000 	.word	0x3fe00000
 800f8a8:	ffc00000 	.word	0xffc00000
 800f8ac:	41dfffff 	.word	0x41dfffff
 800f8b0:	94a03595 	.word	0x94a03595
 800f8b4:	3fcfffff 	.word	0x3fcfffff
 800f8b8:	3ff00000 	.word	0x3ff00000
 800f8bc:	7ff00000 	.word	0x7ff00000
 800f8c0:	7fe00000 	.word	0x7fe00000
 800f8c4:	7c9fffff 	.word	0x7c9fffff
 800f8c8:	3fe00000 	.word	0x3fe00000
 800f8cc:	bff00000 	.word	0xbff00000
 800f8d0:	7fefffff 	.word	0x7fefffff

0800f8d4 <_strtod_r>:
 800f8d4:	4b01      	ldr	r3, [pc, #4]	; (800f8dc <_strtod_r+0x8>)
 800f8d6:	f7ff b9f3 	b.w	800ecc0 <_strtod_l>
 800f8da:	bf00      	nop
 800f8dc:	20000098 	.word	0x20000098

0800f8e0 <_strtol_l.isra.0>:
 800f8e0:	2b01      	cmp	r3, #1
 800f8e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8e6:	d001      	beq.n	800f8ec <_strtol_l.isra.0+0xc>
 800f8e8:	2b24      	cmp	r3, #36	; 0x24
 800f8ea:	d906      	bls.n	800f8fa <_strtol_l.isra.0+0x1a>
 800f8ec:	f7fd ffda 	bl	800d8a4 <__errno>
 800f8f0:	2316      	movs	r3, #22
 800f8f2:	6003      	str	r3, [r0, #0]
 800f8f4:	2000      	movs	r0, #0
 800f8f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8fa:	4f3a      	ldr	r7, [pc, #232]	; (800f9e4 <_strtol_l.isra.0+0x104>)
 800f8fc:	468e      	mov	lr, r1
 800f8fe:	4676      	mov	r6, lr
 800f900:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800f904:	5de5      	ldrb	r5, [r4, r7]
 800f906:	f015 0508 	ands.w	r5, r5, #8
 800f90a:	d1f8      	bne.n	800f8fe <_strtol_l.isra.0+0x1e>
 800f90c:	2c2d      	cmp	r4, #45	; 0x2d
 800f90e:	d134      	bne.n	800f97a <_strtol_l.isra.0+0x9a>
 800f910:	f89e 4000 	ldrb.w	r4, [lr]
 800f914:	f04f 0801 	mov.w	r8, #1
 800f918:	f106 0e02 	add.w	lr, r6, #2
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d05c      	beq.n	800f9da <_strtol_l.isra.0+0xfa>
 800f920:	2b10      	cmp	r3, #16
 800f922:	d10c      	bne.n	800f93e <_strtol_l.isra.0+0x5e>
 800f924:	2c30      	cmp	r4, #48	; 0x30
 800f926:	d10a      	bne.n	800f93e <_strtol_l.isra.0+0x5e>
 800f928:	f89e 4000 	ldrb.w	r4, [lr]
 800f92c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f930:	2c58      	cmp	r4, #88	; 0x58
 800f932:	d14d      	bne.n	800f9d0 <_strtol_l.isra.0+0xf0>
 800f934:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800f938:	2310      	movs	r3, #16
 800f93a:	f10e 0e02 	add.w	lr, lr, #2
 800f93e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800f942:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f946:	2600      	movs	r6, #0
 800f948:	fbbc f9f3 	udiv	r9, ip, r3
 800f94c:	4635      	mov	r5, r6
 800f94e:	fb03 ca19 	mls	sl, r3, r9, ip
 800f952:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800f956:	2f09      	cmp	r7, #9
 800f958:	d818      	bhi.n	800f98c <_strtol_l.isra.0+0xac>
 800f95a:	463c      	mov	r4, r7
 800f95c:	42a3      	cmp	r3, r4
 800f95e:	dd24      	ble.n	800f9aa <_strtol_l.isra.0+0xca>
 800f960:	2e00      	cmp	r6, #0
 800f962:	db1f      	blt.n	800f9a4 <_strtol_l.isra.0+0xc4>
 800f964:	45a9      	cmp	r9, r5
 800f966:	d31d      	bcc.n	800f9a4 <_strtol_l.isra.0+0xc4>
 800f968:	d101      	bne.n	800f96e <_strtol_l.isra.0+0x8e>
 800f96a:	45a2      	cmp	sl, r4
 800f96c:	db1a      	blt.n	800f9a4 <_strtol_l.isra.0+0xc4>
 800f96e:	fb05 4503 	mla	r5, r5, r3, r4
 800f972:	2601      	movs	r6, #1
 800f974:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800f978:	e7eb      	b.n	800f952 <_strtol_l.isra.0+0x72>
 800f97a:	2c2b      	cmp	r4, #43	; 0x2b
 800f97c:	bf08      	it	eq
 800f97e:	f89e 4000 	ldrbeq.w	r4, [lr]
 800f982:	46a8      	mov	r8, r5
 800f984:	bf08      	it	eq
 800f986:	f106 0e02 	addeq.w	lr, r6, #2
 800f98a:	e7c7      	b.n	800f91c <_strtol_l.isra.0+0x3c>
 800f98c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800f990:	2f19      	cmp	r7, #25
 800f992:	d801      	bhi.n	800f998 <_strtol_l.isra.0+0xb8>
 800f994:	3c37      	subs	r4, #55	; 0x37
 800f996:	e7e1      	b.n	800f95c <_strtol_l.isra.0+0x7c>
 800f998:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800f99c:	2f19      	cmp	r7, #25
 800f99e:	d804      	bhi.n	800f9aa <_strtol_l.isra.0+0xca>
 800f9a0:	3c57      	subs	r4, #87	; 0x57
 800f9a2:	e7db      	b.n	800f95c <_strtol_l.isra.0+0x7c>
 800f9a4:	f04f 36ff 	mov.w	r6, #4294967295
 800f9a8:	e7e4      	b.n	800f974 <_strtol_l.isra.0+0x94>
 800f9aa:	2e00      	cmp	r6, #0
 800f9ac:	da05      	bge.n	800f9ba <_strtol_l.isra.0+0xda>
 800f9ae:	2322      	movs	r3, #34	; 0x22
 800f9b0:	6003      	str	r3, [r0, #0]
 800f9b2:	4665      	mov	r5, ip
 800f9b4:	b942      	cbnz	r2, 800f9c8 <_strtol_l.isra.0+0xe8>
 800f9b6:	4628      	mov	r0, r5
 800f9b8:	e79d      	b.n	800f8f6 <_strtol_l.isra.0+0x16>
 800f9ba:	f1b8 0f00 	cmp.w	r8, #0
 800f9be:	d000      	beq.n	800f9c2 <_strtol_l.isra.0+0xe2>
 800f9c0:	426d      	negs	r5, r5
 800f9c2:	2a00      	cmp	r2, #0
 800f9c4:	d0f7      	beq.n	800f9b6 <_strtol_l.isra.0+0xd6>
 800f9c6:	b10e      	cbz	r6, 800f9cc <_strtol_l.isra.0+0xec>
 800f9c8:	f10e 31ff 	add.w	r1, lr, #4294967295
 800f9cc:	6011      	str	r1, [r2, #0]
 800f9ce:	e7f2      	b.n	800f9b6 <_strtol_l.isra.0+0xd6>
 800f9d0:	2430      	movs	r4, #48	; 0x30
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d1b3      	bne.n	800f93e <_strtol_l.isra.0+0x5e>
 800f9d6:	2308      	movs	r3, #8
 800f9d8:	e7b1      	b.n	800f93e <_strtol_l.isra.0+0x5e>
 800f9da:	2c30      	cmp	r4, #48	; 0x30
 800f9dc:	d0a4      	beq.n	800f928 <_strtol_l.isra.0+0x48>
 800f9de:	230a      	movs	r3, #10
 800f9e0:	e7ad      	b.n	800f93e <_strtol_l.isra.0+0x5e>
 800f9e2:	bf00      	nop
 800f9e4:	080131f5 	.word	0x080131f5

0800f9e8 <_strtol_r>:
 800f9e8:	f7ff bf7a 	b.w	800f8e0 <_strtol_l.isra.0>

0800f9ec <_strtoul_l.isra.0>:
 800f9ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f9f0:	4e3b      	ldr	r6, [pc, #236]	; (800fae0 <_strtoul_l.isra.0+0xf4>)
 800f9f2:	4686      	mov	lr, r0
 800f9f4:	468c      	mov	ip, r1
 800f9f6:	4660      	mov	r0, ip
 800f9f8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800f9fc:	5da5      	ldrb	r5, [r4, r6]
 800f9fe:	f015 0508 	ands.w	r5, r5, #8
 800fa02:	d1f8      	bne.n	800f9f6 <_strtoul_l.isra.0+0xa>
 800fa04:	2c2d      	cmp	r4, #45	; 0x2d
 800fa06:	d134      	bne.n	800fa72 <_strtoul_l.isra.0+0x86>
 800fa08:	f89c 4000 	ldrb.w	r4, [ip]
 800fa0c:	f04f 0801 	mov.w	r8, #1
 800fa10:	f100 0c02 	add.w	ip, r0, #2
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d05e      	beq.n	800fad6 <_strtoul_l.isra.0+0xea>
 800fa18:	2b10      	cmp	r3, #16
 800fa1a:	d10c      	bne.n	800fa36 <_strtoul_l.isra.0+0x4a>
 800fa1c:	2c30      	cmp	r4, #48	; 0x30
 800fa1e:	d10a      	bne.n	800fa36 <_strtoul_l.isra.0+0x4a>
 800fa20:	f89c 0000 	ldrb.w	r0, [ip]
 800fa24:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800fa28:	2858      	cmp	r0, #88	; 0x58
 800fa2a:	d14f      	bne.n	800facc <_strtoul_l.isra.0+0xe0>
 800fa2c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800fa30:	2310      	movs	r3, #16
 800fa32:	f10c 0c02 	add.w	ip, ip, #2
 800fa36:	f04f 37ff 	mov.w	r7, #4294967295
 800fa3a:	2500      	movs	r5, #0
 800fa3c:	fbb7 f7f3 	udiv	r7, r7, r3
 800fa40:	fb03 f907 	mul.w	r9, r3, r7
 800fa44:	ea6f 0909 	mvn.w	r9, r9
 800fa48:	4628      	mov	r0, r5
 800fa4a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800fa4e:	2e09      	cmp	r6, #9
 800fa50:	d818      	bhi.n	800fa84 <_strtoul_l.isra.0+0x98>
 800fa52:	4634      	mov	r4, r6
 800fa54:	42a3      	cmp	r3, r4
 800fa56:	dd24      	ble.n	800faa2 <_strtoul_l.isra.0+0xb6>
 800fa58:	2d00      	cmp	r5, #0
 800fa5a:	db1f      	blt.n	800fa9c <_strtoul_l.isra.0+0xb0>
 800fa5c:	4287      	cmp	r7, r0
 800fa5e:	d31d      	bcc.n	800fa9c <_strtoul_l.isra.0+0xb0>
 800fa60:	d101      	bne.n	800fa66 <_strtoul_l.isra.0+0x7a>
 800fa62:	45a1      	cmp	r9, r4
 800fa64:	db1a      	blt.n	800fa9c <_strtoul_l.isra.0+0xb0>
 800fa66:	fb00 4003 	mla	r0, r0, r3, r4
 800fa6a:	2501      	movs	r5, #1
 800fa6c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800fa70:	e7eb      	b.n	800fa4a <_strtoul_l.isra.0+0x5e>
 800fa72:	2c2b      	cmp	r4, #43	; 0x2b
 800fa74:	bf08      	it	eq
 800fa76:	f89c 4000 	ldrbeq.w	r4, [ip]
 800fa7a:	46a8      	mov	r8, r5
 800fa7c:	bf08      	it	eq
 800fa7e:	f100 0c02 	addeq.w	ip, r0, #2
 800fa82:	e7c7      	b.n	800fa14 <_strtoul_l.isra.0+0x28>
 800fa84:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800fa88:	2e19      	cmp	r6, #25
 800fa8a:	d801      	bhi.n	800fa90 <_strtoul_l.isra.0+0xa4>
 800fa8c:	3c37      	subs	r4, #55	; 0x37
 800fa8e:	e7e1      	b.n	800fa54 <_strtoul_l.isra.0+0x68>
 800fa90:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800fa94:	2e19      	cmp	r6, #25
 800fa96:	d804      	bhi.n	800faa2 <_strtoul_l.isra.0+0xb6>
 800fa98:	3c57      	subs	r4, #87	; 0x57
 800fa9a:	e7db      	b.n	800fa54 <_strtoul_l.isra.0+0x68>
 800fa9c:	f04f 35ff 	mov.w	r5, #4294967295
 800faa0:	e7e4      	b.n	800fa6c <_strtoul_l.isra.0+0x80>
 800faa2:	2d00      	cmp	r5, #0
 800faa4:	da07      	bge.n	800fab6 <_strtoul_l.isra.0+0xca>
 800faa6:	2322      	movs	r3, #34	; 0x22
 800faa8:	f8ce 3000 	str.w	r3, [lr]
 800faac:	f04f 30ff 	mov.w	r0, #4294967295
 800fab0:	b942      	cbnz	r2, 800fac4 <_strtoul_l.isra.0+0xd8>
 800fab2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fab6:	f1b8 0f00 	cmp.w	r8, #0
 800faba:	d000      	beq.n	800fabe <_strtoul_l.isra.0+0xd2>
 800fabc:	4240      	negs	r0, r0
 800fabe:	2a00      	cmp	r2, #0
 800fac0:	d0f7      	beq.n	800fab2 <_strtoul_l.isra.0+0xc6>
 800fac2:	b10d      	cbz	r5, 800fac8 <_strtoul_l.isra.0+0xdc>
 800fac4:	f10c 31ff 	add.w	r1, ip, #4294967295
 800fac8:	6011      	str	r1, [r2, #0]
 800faca:	e7f2      	b.n	800fab2 <_strtoul_l.isra.0+0xc6>
 800facc:	2430      	movs	r4, #48	; 0x30
 800face:	2b00      	cmp	r3, #0
 800fad0:	d1b1      	bne.n	800fa36 <_strtoul_l.isra.0+0x4a>
 800fad2:	2308      	movs	r3, #8
 800fad4:	e7af      	b.n	800fa36 <_strtoul_l.isra.0+0x4a>
 800fad6:	2c30      	cmp	r4, #48	; 0x30
 800fad8:	d0a2      	beq.n	800fa20 <_strtoul_l.isra.0+0x34>
 800fada:	230a      	movs	r3, #10
 800fadc:	e7ab      	b.n	800fa36 <_strtoul_l.isra.0+0x4a>
 800fade:	bf00      	nop
 800fae0:	080131f5 	.word	0x080131f5

0800fae4 <_strtoul_r>:
 800fae4:	f7ff bf82 	b.w	800f9ec <_strtoul_l.isra.0>

0800fae8 <_write_r>:
 800fae8:	b538      	push	{r3, r4, r5, lr}
 800faea:	4d07      	ldr	r5, [pc, #28]	; (800fb08 <_write_r+0x20>)
 800faec:	4604      	mov	r4, r0
 800faee:	4608      	mov	r0, r1
 800faf0:	4611      	mov	r1, r2
 800faf2:	2200      	movs	r2, #0
 800faf4:	602a      	str	r2, [r5, #0]
 800faf6:	461a      	mov	r2, r3
 800faf8:	f7f3 fa47 	bl	8002f8a <_write>
 800fafc:	1c43      	adds	r3, r0, #1
 800fafe:	d102      	bne.n	800fb06 <_write_r+0x1e>
 800fb00:	682b      	ldr	r3, [r5, #0]
 800fb02:	b103      	cbz	r3, 800fb06 <_write_r+0x1e>
 800fb04:	6023      	str	r3, [r4, #0]
 800fb06:	bd38      	pop	{r3, r4, r5, pc}
 800fb08:	2000572c 	.word	0x2000572c

0800fb0c <__assert_func>:
 800fb0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fb0e:	4614      	mov	r4, r2
 800fb10:	461a      	mov	r2, r3
 800fb12:	4b09      	ldr	r3, [pc, #36]	; (800fb38 <__assert_func+0x2c>)
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	4605      	mov	r5, r0
 800fb18:	68d8      	ldr	r0, [r3, #12]
 800fb1a:	b14c      	cbz	r4, 800fb30 <__assert_func+0x24>
 800fb1c:	4b07      	ldr	r3, [pc, #28]	; (800fb3c <__assert_func+0x30>)
 800fb1e:	9100      	str	r1, [sp, #0]
 800fb20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fb24:	4906      	ldr	r1, [pc, #24]	; (800fb40 <__assert_func+0x34>)
 800fb26:	462b      	mov	r3, r5
 800fb28:	f000 ff58 	bl	80109dc <fiprintf>
 800fb2c:	f7fd feb3 	bl	800d896 <abort>
 800fb30:	4b04      	ldr	r3, [pc, #16]	; (800fb44 <__assert_func+0x38>)
 800fb32:	461c      	mov	r4, r3
 800fb34:	e7f3      	b.n	800fb1e <__assert_func+0x12>
 800fb36:	bf00      	nop
 800fb38:	20000030 	.word	0x20000030
 800fb3c:	080131b8 	.word	0x080131b8
 800fb40:	080131c5 	.word	0x080131c5
 800fb44:	080131f3 	.word	0x080131f3

0800fb48 <_close_r>:
 800fb48:	b538      	push	{r3, r4, r5, lr}
 800fb4a:	4d06      	ldr	r5, [pc, #24]	; (800fb64 <_close_r+0x1c>)
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	4604      	mov	r4, r0
 800fb50:	4608      	mov	r0, r1
 800fb52:	602b      	str	r3, [r5, #0]
 800fb54:	f7f3 fa35 	bl	8002fc2 <_close>
 800fb58:	1c43      	adds	r3, r0, #1
 800fb5a:	d102      	bne.n	800fb62 <_close_r+0x1a>
 800fb5c:	682b      	ldr	r3, [r5, #0]
 800fb5e:	b103      	cbz	r3, 800fb62 <_close_r+0x1a>
 800fb60:	6023      	str	r3, [r4, #0]
 800fb62:	bd38      	pop	{r3, r4, r5, pc}
 800fb64:	2000572c 	.word	0x2000572c

0800fb68 <quorem>:
 800fb68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb6c:	6903      	ldr	r3, [r0, #16]
 800fb6e:	690c      	ldr	r4, [r1, #16]
 800fb70:	42a3      	cmp	r3, r4
 800fb72:	4607      	mov	r7, r0
 800fb74:	f2c0 8081 	blt.w	800fc7a <quorem+0x112>
 800fb78:	3c01      	subs	r4, #1
 800fb7a:	f101 0814 	add.w	r8, r1, #20
 800fb7e:	f100 0514 	add.w	r5, r0, #20
 800fb82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fb86:	9301      	str	r3, [sp, #4]
 800fb88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fb8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fb90:	3301      	adds	r3, #1
 800fb92:	429a      	cmp	r2, r3
 800fb94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fb98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fb9c:	fbb2 f6f3 	udiv	r6, r2, r3
 800fba0:	d331      	bcc.n	800fc06 <quorem+0x9e>
 800fba2:	f04f 0e00 	mov.w	lr, #0
 800fba6:	4640      	mov	r0, r8
 800fba8:	46ac      	mov	ip, r5
 800fbaa:	46f2      	mov	sl, lr
 800fbac:	f850 2b04 	ldr.w	r2, [r0], #4
 800fbb0:	b293      	uxth	r3, r2
 800fbb2:	fb06 e303 	mla	r3, r6, r3, lr
 800fbb6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fbba:	b29b      	uxth	r3, r3
 800fbbc:	ebaa 0303 	sub.w	r3, sl, r3
 800fbc0:	0c12      	lsrs	r2, r2, #16
 800fbc2:	f8dc a000 	ldr.w	sl, [ip]
 800fbc6:	fb06 e202 	mla	r2, r6, r2, lr
 800fbca:	fa13 f38a 	uxtah	r3, r3, sl
 800fbce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fbd2:	fa1f fa82 	uxth.w	sl, r2
 800fbd6:	f8dc 2000 	ldr.w	r2, [ip]
 800fbda:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800fbde:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fbe2:	b29b      	uxth	r3, r3
 800fbe4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fbe8:	4581      	cmp	r9, r0
 800fbea:	f84c 3b04 	str.w	r3, [ip], #4
 800fbee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fbf2:	d2db      	bcs.n	800fbac <quorem+0x44>
 800fbf4:	f855 300b 	ldr.w	r3, [r5, fp]
 800fbf8:	b92b      	cbnz	r3, 800fc06 <quorem+0x9e>
 800fbfa:	9b01      	ldr	r3, [sp, #4]
 800fbfc:	3b04      	subs	r3, #4
 800fbfe:	429d      	cmp	r5, r3
 800fc00:	461a      	mov	r2, r3
 800fc02:	d32e      	bcc.n	800fc62 <quorem+0xfa>
 800fc04:	613c      	str	r4, [r7, #16]
 800fc06:	4638      	mov	r0, r7
 800fc08:	f001 fd66 	bl	80116d8 <__mcmp>
 800fc0c:	2800      	cmp	r0, #0
 800fc0e:	db24      	blt.n	800fc5a <quorem+0xf2>
 800fc10:	3601      	adds	r6, #1
 800fc12:	4628      	mov	r0, r5
 800fc14:	f04f 0c00 	mov.w	ip, #0
 800fc18:	f858 2b04 	ldr.w	r2, [r8], #4
 800fc1c:	f8d0 e000 	ldr.w	lr, [r0]
 800fc20:	b293      	uxth	r3, r2
 800fc22:	ebac 0303 	sub.w	r3, ip, r3
 800fc26:	0c12      	lsrs	r2, r2, #16
 800fc28:	fa13 f38e 	uxtah	r3, r3, lr
 800fc2c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fc30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fc34:	b29b      	uxth	r3, r3
 800fc36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fc3a:	45c1      	cmp	r9, r8
 800fc3c:	f840 3b04 	str.w	r3, [r0], #4
 800fc40:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fc44:	d2e8      	bcs.n	800fc18 <quorem+0xb0>
 800fc46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fc4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fc4e:	b922      	cbnz	r2, 800fc5a <quorem+0xf2>
 800fc50:	3b04      	subs	r3, #4
 800fc52:	429d      	cmp	r5, r3
 800fc54:	461a      	mov	r2, r3
 800fc56:	d30a      	bcc.n	800fc6e <quorem+0x106>
 800fc58:	613c      	str	r4, [r7, #16]
 800fc5a:	4630      	mov	r0, r6
 800fc5c:	b003      	add	sp, #12
 800fc5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc62:	6812      	ldr	r2, [r2, #0]
 800fc64:	3b04      	subs	r3, #4
 800fc66:	2a00      	cmp	r2, #0
 800fc68:	d1cc      	bne.n	800fc04 <quorem+0x9c>
 800fc6a:	3c01      	subs	r4, #1
 800fc6c:	e7c7      	b.n	800fbfe <quorem+0x96>
 800fc6e:	6812      	ldr	r2, [r2, #0]
 800fc70:	3b04      	subs	r3, #4
 800fc72:	2a00      	cmp	r2, #0
 800fc74:	d1f0      	bne.n	800fc58 <quorem+0xf0>
 800fc76:	3c01      	subs	r4, #1
 800fc78:	e7eb      	b.n	800fc52 <quorem+0xea>
 800fc7a:	2000      	movs	r0, #0
 800fc7c:	e7ee      	b.n	800fc5c <quorem+0xf4>
	...

0800fc80 <_dtoa_r>:
 800fc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc84:	ed2d 8b02 	vpush	{d8}
 800fc88:	ec57 6b10 	vmov	r6, r7, d0
 800fc8c:	b095      	sub	sp, #84	; 0x54
 800fc8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fc90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fc94:	9105      	str	r1, [sp, #20]
 800fc96:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800fc9a:	4604      	mov	r4, r0
 800fc9c:	9209      	str	r2, [sp, #36]	; 0x24
 800fc9e:	930f      	str	r3, [sp, #60]	; 0x3c
 800fca0:	b975      	cbnz	r5, 800fcc0 <_dtoa_r+0x40>
 800fca2:	2010      	movs	r0, #16
 800fca4:	f7fd ff22 	bl	800daec <malloc>
 800fca8:	4602      	mov	r2, r0
 800fcaa:	6260      	str	r0, [r4, #36]	; 0x24
 800fcac:	b920      	cbnz	r0, 800fcb8 <_dtoa_r+0x38>
 800fcae:	4bb2      	ldr	r3, [pc, #712]	; (800ff78 <_dtoa_r+0x2f8>)
 800fcb0:	21ea      	movs	r1, #234	; 0xea
 800fcb2:	48b2      	ldr	r0, [pc, #712]	; (800ff7c <_dtoa_r+0x2fc>)
 800fcb4:	f7ff ff2a 	bl	800fb0c <__assert_func>
 800fcb8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fcbc:	6005      	str	r5, [r0, #0]
 800fcbe:	60c5      	str	r5, [r0, #12]
 800fcc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fcc2:	6819      	ldr	r1, [r3, #0]
 800fcc4:	b151      	cbz	r1, 800fcdc <_dtoa_r+0x5c>
 800fcc6:	685a      	ldr	r2, [r3, #4]
 800fcc8:	604a      	str	r2, [r1, #4]
 800fcca:	2301      	movs	r3, #1
 800fccc:	4093      	lsls	r3, r2
 800fcce:	608b      	str	r3, [r1, #8]
 800fcd0:	4620      	mov	r0, r4
 800fcd2:	f001 fa79 	bl	80111c8 <_Bfree>
 800fcd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fcd8:	2200      	movs	r2, #0
 800fcda:	601a      	str	r2, [r3, #0]
 800fcdc:	1e3b      	subs	r3, r7, #0
 800fcde:	bfb9      	ittee	lt
 800fce0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fce4:	9303      	strlt	r3, [sp, #12]
 800fce6:	2300      	movge	r3, #0
 800fce8:	f8c8 3000 	strge.w	r3, [r8]
 800fcec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800fcf0:	4ba3      	ldr	r3, [pc, #652]	; (800ff80 <_dtoa_r+0x300>)
 800fcf2:	bfbc      	itt	lt
 800fcf4:	2201      	movlt	r2, #1
 800fcf6:	f8c8 2000 	strlt.w	r2, [r8]
 800fcfa:	ea33 0309 	bics.w	r3, r3, r9
 800fcfe:	d11b      	bne.n	800fd38 <_dtoa_r+0xb8>
 800fd00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fd02:	f242 730f 	movw	r3, #9999	; 0x270f
 800fd06:	6013      	str	r3, [r2, #0]
 800fd08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fd0c:	4333      	orrs	r3, r6
 800fd0e:	f000 857a 	beq.w	8010806 <_dtoa_r+0xb86>
 800fd12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd14:	b963      	cbnz	r3, 800fd30 <_dtoa_r+0xb0>
 800fd16:	4b9b      	ldr	r3, [pc, #620]	; (800ff84 <_dtoa_r+0x304>)
 800fd18:	e024      	b.n	800fd64 <_dtoa_r+0xe4>
 800fd1a:	4b9b      	ldr	r3, [pc, #620]	; (800ff88 <_dtoa_r+0x308>)
 800fd1c:	9300      	str	r3, [sp, #0]
 800fd1e:	3308      	adds	r3, #8
 800fd20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fd22:	6013      	str	r3, [r2, #0]
 800fd24:	9800      	ldr	r0, [sp, #0]
 800fd26:	b015      	add	sp, #84	; 0x54
 800fd28:	ecbd 8b02 	vpop	{d8}
 800fd2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd30:	4b94      	ldr	r3, [pc, #592]	; (800ff84 <_dtoa_r+0x304>)
 800fd32:	9300      	str	r3, [sp, #0]
 800fd34:	3303      	adds	r3, #3
 800fd36:	e7f3      	b.n	800fd20 <_dtoa_r+0xa0>
 800fd38:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fd3c:	2200      	movs	r2, #0
 800fd3e:	ec51 0b17 	vmov	r0, r1, d7
 800fd42:	2300      	movs	r3, #0
 800fd44:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800fd48:	f7f0 fece 	bl	8000ae8 <__aeabi_dcmpeq>
 800fd4c:	4680      	mov	r8, r0
 800fd4e:	b158      	cbz	r0, 800fd68 <_dtoa_r+0xe8>
 800fd50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fd52:	2301      	movs	r3, #1
 800fd54:	6013      	str	r3, [r2, #0]
 800fd56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	f000 8551 	beq.w	8010800 <_dtoa_r+0xb80>
 800fd5e:	488b      	ldr	r0, [pc, #556]	; (800ff8c <_dtoa_r+0x30c>)
 800fd60:	6018      	str	r0, [r3, #0]
 800fd62:	1e43      	subs	r3, r0, #1
 800fd64:	9300      	str	r3, [sp, #0]
 800fd66:	e7dd      	b.n	800fd24 <_dtoa_r+0xa4>
 800fd68:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800fd6c:	aa12      	add	r2, sp, #72	; 0x48
 800fd6e:	a913      	add	r1, sp, #76	; 0x4c
 800fd70:	4620      	mov	r0, r4
 800fd72:	f001 fdd1 	bl	8011918 <__d2b>
 800fd76:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fd7a:	4683      	mov	fp, r0
 800fd7c:	2d00      	cmp	r5, #0
 800fd7e:	d07c      	beq.n	800fe7a <_dtoa_r+0x1fa>
 800fd80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd82:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800fd86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fd8a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800fd8e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800fd92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800fd96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fd9a:	4b7d      	ldr	r3, [pc, #500]	; (800ff90 <_dtoa_r+0x310>)
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	4630      	mov	r0, r6
 800fda0:	4639      	mov	r1, r7
 800fda2:	f7f0 fa81 	bl	80002a8 <__aeabi_dsub>
 800fda6:	a36e      	add	r3, pc, #440	; (adr r3, 800ff60 <_dtoa_r+0x2e0>)
 800fda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdac:	f7f0 fc34 	bl	8000618 <__aeabi_dmul>
 800fdb0:	a36d      	add	r3, pc, #436	; (adr r3, 800ff68 <_dtoa_r+0x2e8>)
 800fdb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdb6:	f7f0 fa79 	bl	80002ac <__adddf3>
 800fdba:	4606      	mov	r6, r0
 800fdbc:	4628      	mov	r0, r5
 800fdbe:	460f      	mov	r7, r1
 800fdc0:	f7f0 fbc0 	bl	8000544 <__aeabi_i2d>
 800fdc4:	a36a      	add	r3, pc, #424	; (adr r3, 800ff70 <_dtoa_r+0x2f0>)
 800fdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdca:	f7f0 fc25 	bl	8000618 <__aeabi_dmul>
 800fdce:	4602      	mov	r2, r0
 800fdd0:	460b      	mov	r3, r1
 800fdd2:	4630      	mov	r0, r6
 800fdd4:	4639      	mov	r1, r7
 800fdd6:	f7f0 fa69 	bl	80002ac <__adddf3>
 800fdda:	4606      	mov	r6, r0
 800fddc:	460f      	mov	r7, r1
 800fdde:	f7f0 fecb 	bl	8000b78 <__aeabi_d2iz>
 800fde2:	2200      	movs	r2, #0
 800fde4:	4682      	mov	sl, r0
 800fde6:	2300      	movs	r3, #0
 800fde8:	4630      	mov	r0, r6
 800fdea:	4639      	mov	r1, r7
 800fdec:	f7f0 fe86 	bl	8000afc <__aeabi_dcmplt>
 800fdf0:	b148      	cbz	r0, 800fe06 <_dtoa_r+0x186>
 800fdf2:	4650      	mov	r0, sl
 800fdf4:	f7f0 fba6 	bl	8000544 <__aeabi_i2d>
 800fdf8:	4632      	mov	r2, r6
 800fdfa:	463b      	mov	r3, r7
 800fdfc:	f7f0 fe74 	bl	8000ae8 <__aeabi_dcmpeq>
 800fe00:	b908      	cbnz	r0, 800fe06 <_dtoa_r+0x186>
 800fe02:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fe06:	f1ba 0f16 	cmp.w	sl, #22
 800fe0a:	d854      	bhi.n	800feb6 <_dtoa_r+0x236>
 800fe0c:	4b61      	ldr	r3, [pc, #388]	; (800ff94 <_dtoa_r+0x314>)
 800fe0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fe12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fe1a:	f7f0 fe6f 	bl	8000afc <__aeabi_dcmplt>
 800fe1e:	2800      	cmp	r0, #0
 800fe20:	d04b      	beq.n	800feba <_dtoa_r+0x23a>
 800fe22:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fe26:	2300      	movs	r3, #0
 800fe28:	930e      	str	r3, [sp, #56]	; 0x38
 800fe2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fe2c:	1b5d      	subs	r5, r3, r5
 800fe2e:	1e6b      	subs	r3, r5, #1
 800fe30:	9304      	str	r3, [sp, #16]
 800fe32:	bf43      	ittte	mi
 800fe34:	2300      	movmi	r3, #0
 800fe36:	f1c5 0801 	rsbmi	r8, r5, #1
 800fe3a:	9304      	strmi	r3, [sp, #16]
 800fe3c:	f04f 0800 	movpl.w	r8, #0
 800fe40:	f1ba 0f00 	cmp.w	sl, #0
 800fe44:	db3b      	blt.n	800febe <_dtoa_r+0x23e>
 800fe46:	9b04      	ldr	r3, [sp, #16]
 800fe48:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800fe4c:	4453      	add	r3, sl
 800fe4e:	9304      	str	r3, [sp, #16]
 800fe50:	2300      	movs	r3, #0
 800fe52:	9306      	str	r3, [sp, #24]
 800fe54:	9b05      	ldr	r3, [sp, #20]
 800fe56:	2b09      	cmp	r3, #9
 800fe58:	d869      	bhi.n	800ff2e <_dtoa_r+0x2ae>
 800fe5a:	2b05      	cmp	r3, #5
 800fe5c:	bfc4      	itt	gt
 800fe5e:	3b04      	subgt	r3, #4
 800fe60:	9305      	strgt	r3, [sp, #20]
 800fe62:	9b05      	ldr	r3, [sp, #20]
 800fe64:	f1a3 0302 	sub.w	r3, r3, #2
 800fe68:	bfcc      	ite	gt
 800fe6a:	2500      	movgt	r5, #0
 800fe6c:	2501      	movle	r5, #1
 800fe6e:	2b03      	cmp	r3, #3
 800fe70:	d869      	bhi.n	800ff46 <_dtoa_r+0x2c6>
 800fe72:	e8df f003 	tbb	[pc, r3]
 800fe76:	4e2c      	.short	0x4e2c
 800fe78:	5a4c      	.short	0x5a4c
 800fe7a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800fe7e:	441d      	add	r5, r3
 800fe80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fe84:	2b20      	cmp	r3, #32
 800fe86:	bfc1      	itttt	gt
 800fe88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fe8c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800fe90:	fa09 f303 	lslgt.w	r3, r9, r3
 800fe94:	fa26 f000 	lsrgt.w	r0, r6, r0
 800fe98:	bfda      	itte	le
 800fe9a:	f1c3 0320 	rsble	r3, r3, #32
 800fe9e:	fa06 f003 	lslle.w	r0, r6, r3
 800fea2:	4318      	orrgt	r0, r3
 800fea4:	f7f0 fb3e 	bl	8000524 <__aeabi_ui2d>
 800fea8:	2301      	movs	r3, #1
 800feaa:	4606      	mov	r6, r0
 800feac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800feb0:	3d01      	subs	r5, #1
 800feb2:	9310      	str	r3, [sp, #64]	; 0x40
 800feb4:	e771      	b.n	800fd9a <_dtoa_r+0x11a>
 800feb6:	2301      	movs	r3, #1
 800feb8:	e7b6      	b.n	800fe28 <_dtoa_r+0x1a8>
 800feba:	900e      	str	r0, [sp, #56]	; 0x38
 800febc:	e7b5      	b.n	800fe2a <_dtoa_r+0x1aa>
 800febe:	f1ca 0300 	rsb	r3, sl, #0
 800fec2:	9306      	str	r3, [sp, #24]
 800fec4:	2300      	movs	r3, #0
 800fec6:	eba8 080a 	sub.w	r8, r8, sl
 800feca:	930d      	str	r3, [sp, #52]	; 0x34
 800fecc:	e7c2      	b.n	800fe54 <_dtoa_r+0x1d4>
 800fece:	2300      	movs	r3, #0
 800fed0:	9308      	str	r3, [sp, #32]
 800fed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	dc39      	bgt.n	800ff4c <_dtoa_r+0x2cc>
 800fed8:	f04f 0901 	mov.w	r9, #1
 800fedc:	f8cd 9004 	str.w	r9, [sp, #4]
 800fee0:	464b      	mov	r3, r9
 800fee2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800fee6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fee8:	2200      	movs	r2, #0
 800feea:	6042      	str	r2, [r0, #4]
 800feec:	2204      	movs	r2, #4
 800feee:	f102 0614 	add.w	r6, r2, #20
 800fef2:	429e      	cmp	r6, r3
 800fef4:	6841      	ldr	r1, [r0, #4]
 800fef6:	d92f      	bls.n	800ff58 <_dtoa_r+0x2d8>
 800fef8:	4620      	mov	r0, r4
 800fefa:	f001 f925 	bl	8011148 <_Balloc>
 800fefe:	9000      	str	r0, [sp, #0]
 800ff00:	2800      	cmp	r0, #0
 800ff02:	d14b      	bne.n	800ff9c <_dtoa_r+0x31c>
 800ff04:	4b24      	ldr	r3, [pc, #144]	; (800ff98 <_dtoa_r+0x318>)
 800ff06:	4602      	mov	r2, r0
 800ff08:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ff0c:	e6d1      	b.n	800fcb2 <_dtoa_r+0x32>
 800ff0e:	2301      	movs	r3, #1
 800ff10:	e7de      	b.n	800fed0 <_dtoa_r+0x250>
 800ff12:	2300      	movs	r3, #0
 800ff14:	9308      	str	r3, [sp, #32]
 800ff16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff18:	eb0a 0903 	add.w	r9, sl, r3
 800ff1c:	f109 0301 	add.w	r3, r9, #1
 800ff20:	2b01      	cmp	r3, #1
 800ff22:	9301      	str	r3, [sp, #4]
 800ff24:	bfb8      	it	lt
 800ff26:	2301      	movlt	r3, #1
 800ff28:	e7dd      	b.n	800fee6 <_dtoa_r+0x266>
 800ff2a:	2301      	movs	r3, #1
 800ff2c:	e7f2      	b.n	800ff14 <_dtoa_r+0x294>
 800ff2e:	2501      	movs	r5, #1
 800ff30:	2300      	movs	r3, #0
 800ff32:	9305      	str	r3, [sp, #20]
 800ff34:	9508      	str	r5, [sp, #32]
 800ff36:	f04f 39ff 	mov.w	r9, #4294967295
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	f8cd 9004 	str.w	r9, [sp, #4]
 800ff40:	2312      	movs	r3, #18
 800ff42:	9209      	str	r2, [sp, #36]	; 0x24
 800ff44:	e7cf      	b.n	800fee6 <_dtoa_r+0x266>
 800ff46:	2301      	movs	r3, #1
 800ff48:	9308      	str	r3, [sp, #32]
 800ff4a:	e7f4      	b.n	800ff36 <_dtoa_r+0x2b6>
 800ff4c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ff50:	f8cd 9004 	str.w	r9, [sp, #4]
 800ff54:	464b      	mov	r3, r9
 800ff56:	e7c6      	b.n	800fee6 <_dtoa_r+0x266>
 800ff58:	3101      	adds	r1, #1
 800ff5a:	6041      	str	r1, [r0, #4]
 800ff5c:	0052      	lsls	r2, r2, #1
 800ff5e:	e7c6      	b.n	800feee <_dtoa_r+0x26e>
 800ff60:	636f4361 	.word	0x636f4361
 800ff64:	3fd287a7 	.word	0x3fd287a7
 800ff68:	8b60c8b3 	.word	0x8b60c8b3
 800ff6c:	3fc68a28 	.word	0x3fc68a28
 800ff70:	509f79fb 	.word	0x509f79fb
 800ff74:	3fd34413 	.word	0x3fd34413
 800ff78:	08013302 	.word	0x08013302
 800ff7c:	08013319 	.word	0x08013319
 800ff80:	7ff00000 	.word	0x7ff00000
 800ff84:	080132fe 	.word	0x080132fe
 800ff88:	080132f5 	.word	0x080132f5
 800ff8c:	0801357a 	.word	0x0801357a
 800ff90:	3ff80000 	.word	0x3ff80000
 800ff94:	08013490 	.word	0x08013490
 800ff98:	08013378 	.word	0x08013378
 800ff9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff9e:	9a00      	ldr	r2, [sp, #0]
 800ffa0:	601a      	str	r2, [r3, #0]
 800ffa2:	9b01      	ldr	r3, [sp, #4]
 800ffa4:	2b0e      	cmp	r3, #14
 800ffa6:	f200 80ad 	bhi.w	8010104 <_dtoa_r+0x484>
 800ffaa:	2d00      	cmp	r5, #0
 800ffac:	f000 80aa 	beq.w	8010104 <_dtoa_r+0x484>
 800ffb0:	f1ba 0f00 	cmp.w	sl, #0
 800ffb4:	dd36      	ble.n	8010024 <_dtoa_r+0x3a4>
 800ffb6:	4ac3      	ldr	r2, [pc, #780]	; (80102c4 <_dtoa_r+0x644>)
 800ffb8:	f00a 030f 	and.w	r3, sl, #15
 800ffbc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ffc0:	ed93 7b00 	vldr	d7, [r3]
 800ffc4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800ffc8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800ffcc:	eeb0 8a47 	vmov.f32	s16, s14
 800ffd0:	eef0 8a67 	vmov.f32	s17, s15
 800ffd4:	d016      	beq.n	8010004 <_dtoa_r+0x384>
 800ffd6:	4bbc      	ldr	r3, [pc, #752]	; (80102c8 <_dtoa_r+0x648>)
 800ffd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ffdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ffe0:	f7f0 fc44 	bl	800086c <__aeabi_ddiv>
 800ffe4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ffe8:	f007 070f 	and.w	r7, r7, #15
 800ffec:	2503      	movs	r5, #3
 800ffee:	4eb6      	ldr	r6, [pc, #728]	; (80102c8 <_dtoa_r+0x648>)
 800fff0:	b957      	cbnz	r7, 8010008 <_dtoa_r+0x388>
 800fff2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fff6:	ec53 2b18 	vmov	r2, r3, d8
 800fffa:	f7f0 fc37 	bl	800086c <__aeabi_ddiv>
 800fffe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010002:	e029      	b.n	8010058 <_dtoa_r+0x3d8>
 8010004:	2502      	movs	r5, #2
 8010006:	e7f2      	b.n	800ffee <_dtoa_r+0x36e>
 8010008:	07f9      	lsls	r1, r7, #31
 801000a:	d508      	bpl.n	801001e <_dtoa_r+0x39e>
 801000c:	ec51 0b18 	vmov	r0, r1, d8
 8010010:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010014:	f7f0 fb00 	bl	8000618 <__aeabi_dmul>
 8010018:	ec41 0b18 	vmov	d8, r0, r1
 801001c:	3501      	adds	r5, #1
 801001e:	107f      	asrs	r7, r7, #1
 8010020:	3608      	adds	r6, #8
 8010022:	e7e5      	b.n	800fff0 <_dtoa_r+0x370>
 8010024:	f000 80a6 	beq.w	8010174 <_dtoa_r+0x4f4>
 8010028:	f1ca 0600 	rsb	r6, sl, #0
 801002c:	4ba5      	ldr	r3, [pc, #660]	; (80102c4 <_dtoa_r+0x644>)
 801002e:	4fa6      	ldr	r7, [pc, #664]	; (80102c8 <_dtoa_r+0x648>)
 8010030:	f006 020f 	and.w	r2, r6, #15
 8010034:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801003c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010040:	f7f0 faea 	bl	8000618 <__aeabi_dmul>
 8010044:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010048:	1136      	asrs	r6, r6, #4
 801004a:	2300      	movs	r3, #0
 801004c:	2502      	movs	r5, #2
 801004e:	2e00      	cmp	r6, #0
 8010050:	f040 8085 	bne.w	801015e <_dtoa_r+0x4de>
 8010054:	2b00      	cmp	r3, #0
 8010056:	d1d2      	bne.n	800fffe <_dtoa_r+0x37e>
 8010058:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801005a:	2b00      	cmp	r3, #0
 801005c:	f000 808c 	beq.w	8010178 <_dtoa_r+0x4f8>
 8010060:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010064:	4b99      	ldr	r3, [pc, #612]	; (80102cc <_dtoa_r+0x64c>)
 8010066:	2200      	movs	r2, #0
 8010068:	4630      	mov	r0, r6
 801006a:	4639      	mov	r1, r7
 801006c:	f7f0 fd46 	bl	8000afc <__aeabi_dcmplt>
 8010070:	2800      	cmp	r0, #0
 8010072:	f000 8081 	beq.w	8010178 <_dtoa_r+0x4f8>
 8010076:	9b01      	ldr	r3, [sp, #4]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d07d      	beq.n	8010178 <_dtoa_r+0x4f8>
 801007c:	f1b9 0f00 	cmp.w	r9, #0
 8010080:	dd3c      	ble.n	80100fc <_dtoa_r+0x47c>
 8010082:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010086:	9307      	str	r3, [sp, #28]
 8010088:	2200      	movs	r2, #0
 801008a:	4b91      	ldr	r3, [pc, #580]	; (80102d0 <_dtoa_r+0x650>)
 801008c:	4630      	mov	r0, r6
 801008e:	4639      	mov	r1, r7
 8010090:	f7f0 fac2 	bl	8000618 <__aeabi_dmul>
 8010094:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010098:	3501      	adds	r5, #1
 801009a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801009e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80100a2:	4628      	mov	r0, r5
 80100a4:	f7f0 fa4e 	bl	8000544 <__aeabi_i2d>
 80100a8:	4632      	mov	r2, r6
 80100aa:	463b      	mov	r3, r7
 80100ac:	f7f0 fab4 	bl	8000618 <__aeabi_dmul>
 80100b0:	4b88      	ldr	r3, [pc, #544]	; (80102d4 <_dtoa_r+0x654>)
 80100b2:	2200      	movs	r2, #0
 80100b4:	f7f0 f8fa 	bl	80002ac <__adddf3>
 80100b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80100bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80100c0:	9303      	str	r3, [sp, #12]
 80100c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d15c      	bne.n	8010182 <_dtoa_r+0x502>
 80100c8:	4b83      	ldr	r3, [pc, #524]	; (80102d8 <_dtoa_r+0x658>)
 80100ca:	2200      	movs	r2, #0
 80100cc:	4630      	mov	r0, r6
 80100ce:	4639      	mov	r1, r7
 80100d0:	f7f0 f8ea 	bl	80002a8 <__aeabi_dsub>
 80100d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80100d8:	4606      	mov	r6, r0
 80100da:	460f      	mov	r7, r1
 80100dc:	f7f0 fd2c 	bl	8000b38 <__aeabi_dcmpgt>
 80100e0:	2800      	cmp	r0, #0
 80100e2:	f040 8296 	bne.w	8010612 <_dtoa_r+0x992>
 80100e6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80100ea:	4630      	mov	r0, r6
 80100ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80100f0:	4639      	mov	r1, r7
 80100f2:	f7f0 fd03 	bl	8000afc <__aeabi_dcmplt>
 80100f6:	2800      	cmp	r0, #0
 80100f8:	f040 8288 	bne.w	801060c <_dtoa_r+0x98c>
 80100fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010100:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010104:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010106:	2b00      	cmp	r3, #0
 8010108:	f2c0 8158 	blt.w	80103bc <_dtoa_r+0x73c>
 801010c:	f1ba 0f0e 	cmp.w	sl, #14
 8010110:	f300 8154 	bgt.w	80103bc <_dtoa_r+0x73c>
 8010114:	4b6b      	ldr	r3, [pc, #428]	; (80102c4 <_dtoa_r+0x644>)
 8010116:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801011a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801011e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010120:	2b00      	cmp	r3, #0
 8010122:	f280 80e3 	bge.w	80102ec <_dtoa_r+0x66c>
 8010126:	9b01      	ldr	r3, [sp, #4]
 8010128:	2b00      	cmp	r3, #0
 801012a:	f300 80df 	bgt.w	80102ec <_dtoa_r+0x66c>
 801012e:	f040 826d 	bne.w	801060c <_dtoa_r+0x98c>
 8010132:	4b69      	ldr	r3, [pc, #420]	; (80102d8 <_dtoa_r+0x658>)
 8010134:	2200      	movs	r2, #0
 8010136:	4640      	mov	r0, r8
 8010138:	4649      	mov	r1, r9
 801013a:	f7f0 fa6d 	bl	8000618 <__aeabi_dmul>
 801013e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010142:	f7f0 fcef 	bl	8000b24 <__aeabi_dcmpge>
 8010146:	9e01      	ldr	r6, [sp, #4]
 8010148:	4637      	mov	r7, r6
 801014a:	2800      	cmp	r0, #0
 801014c:	f040 8243 	bne.w	80105d6 <_dtoa_r+0x956>
 8010150:	9d00      	ldr	r5, [sp, #0]
 8010152:	2331      	movs	r3, #49	; 0x31
 8010154:	f805 3b01 	strb.w	r3, [r5], #1
 8010158:	f10a 0a01 	add.w	sl, sl, #1
 801015c:	e23f      	b.n	80105de <_dtoa_r+0x95e>
 801015e:	07f2      	lsls	r2, r6, #31
 8010160:	d505      	bpl.n	801016e <_dtoa_r+0x4ee>
 8010162:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010166:	f7f0 fa57 	bl	8000618 <__aeabi_dmul>
 801016a:	3501      	adds	r5, #1
 801016c:	2301      	movs	r3, #1
 801016e:	1076      	asrs	r6, r6, #1
 8010170:	3708      	adds	r7, #8
 8010172:	e76c      	b.n	801004e <_dtoa_r+0x3ce>
 8010174:	2502      	movs	r5, #2
 8010176:	e76f      	b.n	8010058 <_dtoa_r+0x3d8>
 8010178:	9b01      	ldr	r3, [sp, #4]
 801017a:	f8cd a01c 	str.w	sl, [sp, #28]
 801017e:	930c      	str	r3, [sp, #48]	; 0x30
 8010180:	e78d      	b.n	801009e <_dtoa_r+0x41e>
 8010182:	9900      	ldr	r1, [sp, #0]
 8010184:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010186:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010188:	4b4e      	ldr	r3, [pc, #312]	; (80102c4 <_dtoa_r+0x644>)
 801018a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801018e:	4401      	add	r1, r0
 8010190:	9102      	str	r1, [sp, #8]
 8010192:	9908      	ldr	r1, [sp, #32]
 8010194:	eeb0 8a47 	vmov.f32	s16, s14
 8010198:	eef0 8a67 	vmov.f32	s17, s15
 801019c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80101a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80101a4:	2900      	cmp	r1, #0
 80101a6:	d045      	beq.n	8010234 <_dtoa_r+0x5b4>
 80101a8:	494c      	ldr	r1, [pc, #304]	; (80102dc <_dtoa_r+0x65c>)
 80101aa:	2000      	movs	r0, #0
 80101ac:	f7f0 fb5e 	bl	800086c <__aeabi_ddiv>
 80101b0:	ec53 2b18 	vmov	r2, r3, d8
 80101b4:	f7f0 f878 	bl	80002a8 <__aeabi_dsub>
 80101b8:	9d00      	ldr	r5, [sp, #0]
 80101ba:	ec41 0b18 	vmov	d8, r0, r1
 80101be:	4639      	mov	r1, r7
 80101c0:	4630      	mov	r0, r6
 80101c2:	f7f0 fcd9 	bl	8000b78 <__aeabi_d2iz>
 80101c6:	900c      	str	r0, [sp, #48]	; 0x30
 80101c8:	f7f0 f9bc 	bl	8000544 <__aeabi_i2d>
 80101cc:	4602      	mov	r2, r0
 80101ce:	460b      	mov	r3, r1
 80101d0:	4630      	mov	r0, r6
 80101d2:	4639      	mov	r1, r7
 80101d4:	f7f0 f868 	bl	80002a8 <__aeabi_dsub>
 80101d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80101da:	3330      	adds	r3, #48	; 0x30
 80101dc:	f805 3b01 	strb.w	r3, [r5], #1
 80101e0:	ec53 2b18 	vmov	r2, r3, d8
 80101e4:	4606      	mov	r6, r0
 80101e6:	460f      	mov	r7, r1
 80101e8:	f7f0 fc88 	bl	8000afc <__aeabi_dcmplt>
 80101ec:	2800      	cmp	r0, #0
 80101ee:	d165      	bne.n	80102bc <_dtoa_r+0x63c>
 80101f0:	4632      	mov	r2, r6
 80101f2:	463b      	mov	r3, r7
 80101f4:	4935      	ldr	r1, [pc, #212]	; (80102cc <_dtoa_r+0x64c>)
 80101f6:	2000      	movs	r0, #0
 80101f8:	f7f0 f856 	bl	80002a8 <__aeabi_dsub>
 80101fc:	ec53 2b18 	vmov	r2, r3, d8
 8010200:	f7f0 fc7c 	bl	8000afc <__aeabi_dcmplt>
 8010204:	2800      	cmp	r0, #0
 8010206:	f040 80b9 	bne.w	801037c <_dtoa_r+0x6fc>
 801020a:	9b02      	ldr	r3, [sp, #8]
 801020c:	429d      	cmp	r5, r3
 801020e:	f43f af75 	beq.w	80100fc <_dtoa_r+0x47c>
 8010212:	4b2f      	ldr	r3, [pc, #188]	; (80102d0 <_dtoa_r+0x650>)
 8010214:	ec51 0b18 	vmov	r0, r1, d8
 8010218:	2200      	movs	r2, #0
 801021a:	f7f0 f9fd 	bl	8000618 <__aeabi_dmul>
 801021e:	4b2c      	ldr	r3, [pc, #176]	; (80102d0 <_dtoa_r+0x650>)
 8010220:	ec41 0b18 	vmov	d8, r0, r1
 8010224:	2200      	movs	r2, #0
 8010226:	4630      	mov	r0, r6
 8010228:	4639      	mov	r1, r7
 801022a:	f7f0 f9f5 	bl	8000618 <__aeabi_dmul>
 801022e:	4606      	mov	r6, r0
 8010230:	460f      	mov	r7, r1
 8010232:	e7c4      	b.n	80101be <_dtoa_r+0x53e>
 8010234:	ec51 0b17 	vmov	r0, r1, d7
 8010238:	f7f0 f9ee 	bl	8000618 <__aeabi_dmul>
 801023c:	9b02      	ldr	r3, [sp, #8]
 801023e:	9d00      	ldr	r5, [sp, #0]
 8010240:	930c      	str	r3, [sp, #48]	; 0x30
 8010242:	ec41 0b18 	vmov	d8, r0, r1
 8010246:	4639      	mov	r1, r7
 8010248:	4630      	mov	r0, r6
 801024a:	f7f0 fc95 	bl	8000b78 <__aeabi_d2iz>
 801024e:	9011      	str	r0, [sp, #68]	; 0x44
 8010250:	f7f0 f978 	bl	8000544 <__aeabi_i2d>
 8010254:	4602      	mov	r2, r0
 8010256:	460b      	mov	r3, r1
 8010258:	4630      	mov	r0, r6
 801025a:	4639      	mov	r1, r7
 801025c:	f7f0 f824 	bl	80002a8 <__aeabi_dsub>
 8010260:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010262:	3330      	adds	r3, #48	; 0x30
 8010264:	f805 3b01 	strb.w	r3, [r5], #1
 8010268:	9b02      	ldr	r3, [sp, #8]
 801026a:	429d      	cmp	r5, r3
 801026c:	4606      	mov	r6, r0
 801026e:	460f      	mov	r7, r1
 8010270:	f04f 0200 	mov.w	r2, #0
 8010274:	d134      	bne.n	80102e0 <_dtoa_r+0x660>
 8010276:	4b19      	ldr	r3, [pc, #100]	; (80102dc <_dtoa_r+0x65c>)
 8010278:	ec51 0b18 	vmov	r0, r1, d8
 801027c:	f7f0 f816 	bl	80002ac <__adddf3>
 8010280:	4602      	mov	r2, r0
 8010282:	460b      	mov	r3, r1
 8010284:	4630      	mov	r0, r6
 8010286:	4639      	mov	r1, r7
 8010288:	f7f0 fc56 	bl	8000b38 <__aeabi_dcmpgt>
 801028c:	2800      	cmp	r0, #0
 801028e:	d175      	bne.n	801037c <_dtoa_r+0x6fc>
 8010290:	ec53 2b18 	vmov	r2, r3, d8
 8010294:	4911      	ldr	r1, [pc, #68]	; (80102dc <_dtoa_r+0x65c>)
 8010296:	2000      	movs	r0, #0
 8010298:	f7f0 f806 	bl	80002a8 <__aeabi_dsub>
 801029c:	4602      	mov	r2, r0
 801029e:	460b      	mov	r3, r1
 80102a0:	4630      	mov	r0, r6
 80102a2:	4639      	mov	r1, r7
 80102a4:	f7f0 fc2a 	bl	8000afc <__aeabi_dcmplt>
 80102a8:	2800      	cmp	r0, #0
 80102aa:	f43f af27 	beq.w	80100fc <_dtoa_r+0x47c>
 80102ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80102b0:	1e6b      	subs	r3, r5, #1
 80102b2:	930c      	str	r3, [sp, #48]	; 0x30
 80102b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80102b8:	2b30      	cmp	r3, #48	; 0x30
 80102ba:	d0f8      	beq.n	80102ae <_dtoa_r+0x62e>
 80102bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80102c0:	e04a      	b.n	8010358 <_dtoa_r+0x6d8>
 80102c2:	bf00      	nop
 80102c4:	08013490 	.word	0x08013490
 80102c8:	08013468 	.word	0x08013468
 80102cc:	3ff00000 	.word	0x3ff00000
 80102d0:	40240000 	.word	0x40240000
 80102d4:	401c0000 	.word	0x401c0000
 80102d8:	40140000 	.word	0x40140000
 80102dc:	3fe00000 	.word	0x3fe00000
 80102e0:	4baf      	ldr	r3, [pc, #700]	; (80105a0 <_dtoa_r+0x920>)
 80102e2:	f7f0 f999 	bl	8000618 <__aeabi_dmul>
 80102e6:	4606      	mov	r6, r0
 80102e8:	460f      	mov	r7, r1
 80102ea:	e7ac      	b.n	8010246 <_dtoa_r+0x5c6>
 80102ec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80102f0:	9d00      	ldr	r5, [sp, #0]
 80102f2:	4642      	mov	r2, r8
 80102f4:	464b      	mov	r3, r9
 80102f6:	4630      	mov	r0, r6
 80102f8:	4639      	mov	r1, r7
 80102fa:	f7f0 fab7 	bl	800086c <__aeabi_ddiv>
 80102fe:	f7f0 fc3b 	bl	8000b78 <__aeabi_d2iz>
 8010302:	9002      	str	r0, [sp, #8]
 8010304:	f7f0 f91e 	bl	8000544 <__aeabi_i2d>
 8010308:	4642      	mov	r2, r8
 801030a:	464b      	mov	r3, r9
 801030c:	f7f0 f984 	bl	8000618 <__aeabi_dmul>
 8010310:	4602      	mov	r2, r0
 8010312:	460b      	mov	r3, r1
 8010314:	4630      	mov	r0, r6
 8010316:	4639      	mov	r1, r7
 8010318:	f7ef ffc6 	bl	80002a8 <__aeabi_dsub>
 801031c:	9e02      	ldr	r6, [sp, #8]
 801031e:	9f01      	ldr	r7, [sp, #4]
 8010320:	3630      	adds	r6, #48	; 0x30
 8010322:	f805 6b01 	strb.w	r6, [r5], #1
 8010326:	9e00      	ldr	r6, [sp, #0]
 8010328:	1bae      	subs	r6, r5, r6
 801032a:	42b7      	cmp	r7, r6
 801032c:	4602      	mov	r2, r0
 801032e:	460b      	mov	r3, r1
 8010330:	d137      	bne.n	80103a2 <_dtoa_r+0x722>
 8010332:	f7ef ffbb 	bl	80002ac <__adddf3>
 8010336:	4642      	mov	r2, r8
 8010338:	464b      	mov	r3, r9
 801033a:	4606      	mov	r6, r0
 801033c:	460f      	mov	r7, r1
 801033e:	f7f0 fbfb 	bl	8000b38 <__aeabi_dcmpgt>
 8010342:	b9c8      	cbnz	r0, 8010378 <_dtoa_r+0x6f8>
 8010344:	4642      	mov	r2, r8
 8010346:	464b      	mov	r3, r9
 8010348:	4630      	mov	r0, r6
 801034a:	4639      	mov	r1, r7
 801034c:	f7f0 fbcc 	bl	8000ae8 <__aeabi_dcmpeq>
 8010350:	b110      	cbz	r0, 8010358 <_dtoa_r+0x6d8>
 8010352:	9b02      	ldr	r3, [sp, #8]
 8010354:	07d9      	lsls	r1, r3, #31
 8010356:	d40f      	bmi.n	8010378 <_dtoa_r+0x6f8>
 8010358:	4620      	mov	r0, r4
 801035a:	4659      	mov	r1, fp
 801035c:	f000 ff34 	bl	80111c8 <_Bfree>
 8010360:	2300      	movs	r3, #0
 8010362:	702b      	strb	r3, [r5, #0]
 8010364:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010366:	f10a 0001 	add.w	r0, sl, #1
 801036a:	6018      	str	r0, [r3, #0]
 801036c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801036e:	2b00      	cmp	r3, #0
 8010370:	f43f acd8 	beq.w	800fd24 <_dtoa_r+0xa4>
 8010374:	601d      	str	r5, [r3, #0]
 8010376:	e4d5      	b.n	800fd24 <_dtoa_r+0xa4>
 8010378:	f8cd a01c 	str.w	sl, [sp, #28]
 801037c:	462b      	mov	r3, r5
 801037e:	461d      	mov	r5, r3
 8010380:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010384:	2a39      	cmp	r2, #57	; 0x39
 8010386:	d108      	bne.n	801039a <_dtoa_r+0x71a>
 8010388:	9a00      	ldr	r2, [sp, #0]
 801038a:	429a      	cmp	r2, r3
 801038c:	d1f7      	bne.n	801037e <_dtoa_r+0x6fe>
 801038e:	9a07      	ldr	r2, [sp, #28]
 8010390:	9900      	ldr	r1, [sp, #0]
 8010392:	3201      	adds	r2, #1
 8010394:	9207      	str	r2, [sp, #28]
 8010396:	2230      	movs	r2, #48	; 0x30
 8010398:	700a      	strb	r2, [r1, #0]
 801039a:	781a      	ldrb	r2, [r3, #0]
 801039c:	3201      	adds	r2, #1
 801039e:	701a      	strb	r2, [r3, #0]
 80103a0:	e78c      	b.n	80102bc <_dtoa_r+0x63c>
 80103a2:	4b7f      	ldr	r3, [pc, #508]	; (80105a0 <_dtoa_r+0x920>)
 80103a4:	2200      	movs	r2, #0
 80103a6:	f7f0 f937 	bl	8000618 <__aeabi_dmul>
 80103aa:	2200      	movs	r2, #0
 80103ac:	2300      	movs	r3, #0
 80103ae:	4606      	mov	r6, r0
 80103b0:	460f      	mov	r7, r1
 80103b2:	f7f0 fb99 	bl	8000ae8 <__aeabi_dcmpeq>
 80103b6:	2800      	cmp	r0, #0
 80103b8:	d09b      	beq.n	80102f2 <_dtoa_r+0x672>
 80103ba:	e7cd      	b.n	8010358 <_dtoa_r+0x6d8>
 80103bc:	9a08      	ldr	r2, [sp, #32]
 80103be:	2a00      	cmp	r2, #0
 80103c0:	f000 80c4 	beq.w	801054c <_dtoa_r+0x8cc>
 80103c4:	9a05      	ldr	r2, [sp, #20]
 80103c6:	2a01      	cmp	r2, #1
 80103c8:	f300 80a8 	bgt.w	801051c <_dtoa_r+0x89c>
 80103cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80103ce:	2a00      	cmp	r2, #0
 80103d0:	f000 80a0 	beq.w	8010514 <_dtoa_r+0x894>
 80103d4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80103d8:	9e06      	ldr	r6, [sp, #24]
 80103da:	4645      	mov	r5, r8
 80103dc:	9a04      	ldr	r2, [sp, #16]
 80103de:	2101      	movs	r1, #1
 80103e0:	441a      	add	r2, r3
 80103e2:	4620      	mov	r0, r4
 80103e4:	4498      	add	r8, r3
 80103e6:	9204      	str	r2, [sp, #16]
 80103e8:	f000 fff4 	bl	80113d4 <__i2b>
 80103ec:	4607      	mov	r7, r0
 80103ee:	2d00      	cmp	r5, #0
 80103f0:	dd0b      	ble.n	801040a <_dtoa_r+0x78a>
 80103f2:	9b04      	ldr	r3, [sp, #16]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	dd08      	ble.n	801040a <_dtoa_r+0x78a>
 80103f8:	42ab      	cmp	r3, r5
 80103fa:	9a04      	ldr	r2, [sp, #16]
 80103fc:	bfa8      	it	ge
 80103fe:	462b      	movge	r3, r5
 8010400:	eba8 0803 	sub.w	r8, r8, r3
 8010404:	1aed      	subs	r5, r5, r3
 8010406:	1ad3      	subs	r3, r2, r3
 8010408:	9304      	str	r3, [sp, #16]
 801040a:	9b06      	ldr	r3, [sp, #24]
 801040c:	b1fb      	cbz	r3, 801044e <_dtoa_r+0x7ce>
 801040e:	9b08      	ldr	r3, [sp, #32]
 8010410:	2b00      	cmp	r3, #0
 8010412:	f000 809f 	beq.w	8010554 <_dtoa_r+0x8d4>
 8010416:	2e00      	cmp	r6, #0
 8010418:	dd11      	ble.n	801043e <_dtoa_r+0x7be>
 801041a:	4639      	mov	r1, r7
 801041c:	4632      	mov	r2, r6
 801041e:	4620      	mov	r0, r4
 8010420:	f001 f894 	bl	801154c <__pow5mult>
 8010424:	465a      	mov	r2, fp
 8010426:	4601      	mov	r1, r0
 8010428:	4607      	mov	r7, r0
 801042a:	4620      	mov	r0, r4
 801042c:	f000 ffe8 	bl	8011400 <__multiply>
 8010430:	4659      	mov	r1, fp
 8010432:	9007      	str	r0, [sp, #28]
 8010434:	4620      	mov	r0, r4
 8010436:	f000 fec7 	bl	80111c8 <_Bfree>
 801043a:	9b07      	ldr	r3, [sp, #28]
 801043c:	469b      	mov	fp, r3
 801043e:	9b06      	ldr	r3, [sp, #24]
 8010440:	1b9a      	subs	r2, r3, r6
 8010442:	d004      	beq.n	801044e <_dtoa_r+0x7ce>
 8010444:	4659      	mov	r1, fp
 8010446:	4620      	mov	r0, r4
 8010448:	f001 f880 	bl	801154c <__pow5mult>
 801044c:	4683      	mov	fp, r0
 801044e:	2101      	movs	r1, #1
 8010450:	4620      	mov	r0, r4
 8010452:	f000 ffbf 	bl	80113d4 <__i2b>
 8010456:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010458:	2b00      	cmp	r3, #0
 801045a:	4606      	mov	r6, r0
 801045c:	dd7c      	ble.n	8010558 <_dtoa_r+0x8d8>
 801045e:	461a      	mov	r2, r3
 8010460:	4601      	mov	r1, r0
 8010462:	4620      	mov	r0, r4
 8010464:	f001 f872 	bl	801154c <__pow5mult>
 8010468:	9b05      	ldr	r3, [sp, #20]
 801046a:	2b01      	cmp	r3, #1
 801046c:	4606      	mov	r6, r0
 801046e:	dd76      	ble.n	801055e <_dtoa_r+0x8de>
 8010470:	2300      	movs	r3, #0
 8010472:	9306      	str	r3, [sp, #24]
 8010474:	6933      	ldr	r3, [r6, #16]
 8010476:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801047a:	6918      	ldr	r0, [r3, #16]
 801047c:	f000 ff5a 	bl	8011334 <__hi0bits>
 8010480:	f1c0 0020 	rsb	r0, r0, #32
 8010484:	9b04      	ldr	r3, [sp, #16]
 8010486:	4418      	add	r0, r3
 8010488:	f010 001f 	ands.w	r0, r0, #31
 801048c:	f000 8086 	beq.w	801059c <_dtoa_r+0x91c>
 8010490:	f1c0 0320 	rsb	r3, r0, #32
 8010494:	2b04      	cmp	r3, #4
 8010496:	dd7f      	ble.n	8010598 <_dtoa_r+0x918>
 8010498:	f1c0 001c 	rsb	r0, r0, #28
 801049c:	9b04      	ldr	r3, [sp, #16]
 801049e:	4403      	add	r3, r0
 80104a0:	4480      	add	r8, r0
 80104a2:	4405      	add	r5, r0
 80104a4:	9304      	str	r3, [sp, #16]
 80104a6:	f1b8 0f00 	cmp.w	r8, #0
 80104aa:	dd05      	ble.n	80104b8 <_dtoa_r+0x838>
 80104ac:	4659      	mov	r1, fp
 80104ae:	4642      	mov	r2, r8
 80104b0:	4620      	mov	r0, r4
 80104b2:	f001 f8a5 	bl	8011600 <__lshift>
 80104b6:	4683      	mov	fp, r0
 80104b8:	9b04      	ldr	r3, [sp, #16]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	dd05      	ble.n	80104ca <_dtoa_r+0x84a>
 80104be:	4631      	mov	r1, r6
 80104c0:	461a      	mov	r2, r3
 80104c2:	4620      	mov	r0, r4
 80104c4:	f001 f89c 	bl	8011600 <__lshift>
 80104c8:	4606      	mov	r6, r0
 80104ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d069      	beq.n	80105a4 <_dtoa_r+0x924>
 80104d0:	4631      	mov	r1, r6
 80104d2:	4658      	mov	r0, fp
 80104d4:	f001 f900 	bl	80116d8 <__mcmp>
 80104d8:	2800      	cmp	r0, #0
 80104da:	da63      	bge.n	80105a4 <_dtoa_r+0x924>
 80104dc:	2300      	movs	r3, #0
 80104de:	4659      	mov	r1, fp
 80104e0:	220a      	movs	r2, #10
 80104e2:	4620      	mov	r0, r4
 80104e4:	f000 fe92 	bl	801120c <__multadd>
 80104e8:	9b08      	ldr	r3, [sp, #32]
 80104ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80104ee:	4683      	mov	fp, r0
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	f000 818f 	beq.w	8010814 <_dtoa_r+0xb94>
 80104f6:	4639      	mov	r1, r7
 80104f8:	2300      	movs	r3, #0
 80104fa:	220a      	movs	r2, #10
 80104fc:	4620      	mov	r0, r4
 80104fe:	f000 fe85 	bl	801120c <__multadd>
 8010502:	f1b9 0f00 	cmp.w	r9, #0
 8010506:	4607      	mov	r7, r0
 8010508:	f300 808e 	bgt.w	8010628 <_dtoa_r+0x9a8>
 801050c:	9b05      	ldr	r3, [sp, #20]
 801050e:	2b02      	cmp	r3, #2
 8010510:	dc50      	bgt.n	80105b4 <_dtoa_r+0x934>
 8010512:	e089      	b.n	8010628 <_dtoa_r+0x9a8>
 8010514:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010516:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801051a:	e75d      	b.n	80103d8 <_dtoa_r+0x758>
 801051c:	9b01      	ldr	r3, [sp, #4]
 801051e:	1e5e      	subs	r6, r3, #1
 8010520:	9b06      	ldr	r3, [sp, #24]
 8010522:	42b3      	cmp	r3, r6
 8010524:	bfbf      	itttt	lt
 8010526:	9b06      	ldrlt	r3, [sp, #24]
 8010528:	9606      	strlt	r6, [sp, #24]
 801052a:	1af2      	sublt	r2, r6, r3
 801052c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801052e:	bfb6      	itet	lt
 8010530:	189b      	addlt	r3, r3, r2
 8010532:	1b9e      	subge	r6, r3, r6
 8010534:	930d      	strlt	r3, [sp, #52]	; 0x34
 8010536:	9b01      	ldr	r3, [sp, #4]
 8010538:	bfb8      	it	lt
 801053a:	2600      	movlt	r6, #0
 801053c:	2b00      	cmp	r3, #0
 801053e:	bfb5      	itete	lt
 8010540:	eba8 0503 	sublt.w	r5, r8, r3
 8010544:	9b01      	ldrge	r3, [sp, #4]
 8010546:	2300      	movlt	r3, #0
 8010548:	4645      	movge	r5, r8
 801054a:	e747      	b.n	80103dc <_dtoa_r+0x75c>
 801054c:	9e06      	ldr	r6, [sp, #24]
 801054e:	9f08      	ldr	r7, [sp, #32]
 8010550:	4645      	mov	r5, r8
 8010552:	e74c      	b.n	80103ee <_dtoa_r+0x76e>
 8010554:	9a06      	ldr	r2, [sp, #24]
 8010556:	e775      	b.n	8010444 <_dtoa_r+0x7c4>
 8010558:	9b05      	ldr	r3, [sp, #20]
 801055a:	2b01      	cmp	r3, #1
 801055c:	dc18      	bgt.n	8010590 <_dtoa_r+0x910>
 801055e:	9b02      	ldr	r3, [sp, #8]
 8010560:	b9b3      	cbnz	r3, 8010590 <_dtoa_r+0x910>
 8010562:	9b03      	ldr	r3, [sp, #12]
 8010564:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010568:	b9a3      	cbnz	r3, 8010594 <_dtoa_r+0x914>
 801056a:	9b03      	ldr	r3, [sp, #12]
 801056c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010570:	0d1b      	lsrs	r3, r3, #20
 8010572:	051b      	lsls	r3, r3, #20
 8010574:	b12b      	cbz	r3, 8010582 <_dtoa_r+0x902>
 8010576:	9b04      	ldr	r3, [sp, #16]
 8010578:	3301      	adds	r3, #1
 801057a:	9304      	str	r3, [sp, #16]
 801057c:	f108 0801 	add.w	r8, r8, #1
 8010580:	2301      	movs	r3, #1
 8010582:	9306      	str	r3, [sp, #24]
 8010584:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010586:	2b00      	cmp	r3, #0
 8010588:	f47f af74 	bne.w	8010474 <_dtoa_r+0x7f4>
 801058c:	2001      	movs	r0, #1
 801058e:	e779      	b.n	8010484 <_dtoa_r+0x804>
 8010590:	2300      	movs	r3, #0
 8010592:	e7f6      	b.n	8010582 <_dtoa_r+0x902>
 8010594:	9b02      	ldr	r3, [sp, #8]
 8010596:	e7f4      	b.n	8010582 <_dtoa_r+0x902>
 8010598:	d085      	beq.n	80104a6 <_dtoa_r+0x826>
 801059a:	4618      	mov	r0, r3
 801059c:	301c      	adds	r0, #28
 801059e:	e77d      	b.n	801049c <_dtoa_r+0x81c>
 80105a0:	40240000 	.word	0x40240000
 80105a4:	9b01      	ldr	r3, [sp, #4]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	dc38      	bgt.n	801061c <_dtoa_r+0x99c>
 80105aa:	9b05      	ldr	r3, [sp, #20]
 80105ac:	2b02      	cmp	r3, #2
 80105ae:	dd35      	ble.n	801061c <_dtoa_r+0x99c>
 80105b0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80105b4:	f1b9 0f00 	cmp.w	r9, #0
 80105b8:	d10d      	bne.n	80105d6 <_dtoa_r+0x956>
 80105ba:	4631      	mov	r1, r6
 80105bc:	464b      	mov	r3, r9
 80105be:	2205      	movs	r2, #5
 80105c0:	4620      	mov	r0, r4
 80105c2:	f000 fe23 	bl	801120c <__multadd>
 80105c6:	4601      	mov	r1, r0
 80105c8:	4606      	mov	r6, r0
 80105ca:	4658      	mov	r0, fp
 80105cc:	f001 f884 	bl	80116d8 <__mcmp>
 80105d0:	2800      	cmp	r0, #0
 80105d2:	f73f adbd 	bgt.w	8010150 <_dtoa_r+0x4d0>
 80105d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105d8:	9d00      	ldr	r5, [sp, #0]
 80105da:	ea6f 0a03 	mvn.w	sl, r3
 80105de:	f04f 0800 	mov.w	r8, #0
 80105e2:	4631      	mov	r1, r6
 80105e4:	4620      	mov	r0, r4
 80105e6:	f000 fdef 	bl	80111c8 <_Bfree>
 80105ea:	2f00      	cmp	r7, #0
 80105ec:	f43f aeb4 	beq.w	8010358 <_dtoa_r+0x6d8>
 80105f0:	f1b8 0f00 	cmp.w	r8, #0
 80105f4:	d005      	beq.n	8010602 <_dtoa_r+0x982>
 80105f6:	45b8      	cmp	r8, r7
 80105f8:	d003      	beq.n	8010602 <_dtoa_r+0x982>
 80105fa:	4641      	mov	r1, r8
 80105fc:	4620      	mov	r0, r4
 80105fe:	f000 fde3 	bl	80111c8 <_Bfree>
 8010602:	4639      	mov	r1, r7
 8010604:	4620      	mov	r0, r4
 8010606:	f000 fddf 	bl	80111c8 <_Bfree>
 801060a:	e6a5      	b.n	8010358 <_dtoa_r+0x6d8>
 801060c:	2600      	movs	r6, #0
 801060e:	4637      	mov	r7, r6
 8010610:	e7e1      	b.n	80105d6 <_dtoa_r+0x956>
 8010612:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010614:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010618:	4637      	mov	r7, r6
 801061a:	e599      	b.n	8010150 <_dtoa_r+0x4d0>
 801061c:	9b08      	ldr	r3, [sp, #32]
 801061e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010622:	2b00      	cmp	r3, #0
 8010624:	f000 80fd 	beq.w	8010822 <_dtoa_r+0xba2>
 8010628:	2d00      	cmp	r5, #0
 801062a:	dd05      	ble.n	8010638 <_dtoa_r+0x9b8>
 801062c:	4639      	mov	r1, r7
 801062e:	462a      	mov	r2, r5
 8010630:	4620      	mov	r0, r4
 8010632:	f000 ffe5 	bl	8011600 <__lshift>
 8010636:	4607      	mov	r7, r0
 8010638:	9b06      	ldr	r3, [sp, #24]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d05c      	beq.n	80106f8 <_dtoa_r+0xa78>
 801063e:	6879      	ldr	r1, [r7, #4]
 8010640:	4620      	mov	r0, r4
 8010642:	f000 fd81 	bl	8011148 <_Balloc>
 8010646:	4605      	mov	r5, r0
 8010648:	b928      	cbnz	r0, 8010656 <_dtoa_r+0x9d6>
 801064a:	4b80      	ldr	r3, [pc, #512]	; (801084c <_dtoa_r+0xbcc>)
 801064c:	4602      	mov	r2, r0
 801064e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010652:	f7ff bb2e 	b.w	800fcb2 <_dtoa_r+0x32>
 8010656:	693a      	ldr	r2, [r7, #16]
 8010658:	3202      	adds	r2, #2
 801065a:	0092      	lsls	r2, r2, #2
 801065c:	f107 010c 	add.w	r1, r7, #12
 8010660:	300c      	adds	r0, #12
 8010662:	f7fd fa53 	bl	800db0c <memcpy>
 8010666:	2201      	movs	r2, #1
 8010668:	4629      	mov	r1, r5
 801066a:	4620      	mov	r0, r4
 801066c:	f000 ffc8 	bl	8011600 <__lshift>
 8010670:	9b00      	ldr	r3, [sp, #0]
 8010672:	3301      	adds	r3, #1
 8010674:	9301      	str	r3, [sp, #4]
 8010676:	9b00      	ldr	r3, [sp, #0]
 8010678:	444b      	add	r3, r9
 801067a:	9307      	str	r3, [sp, #28]
 801067c:	9b02      	ldr	r3, [sp, #8]
 801067e:	f003 0301 	and.w	r3, r3, #1
 8010682:	46b8      	mov	r8, r7
 8010684:	9306      	str	r3, [sp, #24]
 8010686:	4607      	mov	r7, r0
 8010688:	9b01      	ldr	r3, [sp, #4]
 801068a:	4631      	mov	r1, r6
 801068c:	3b01      	subs	r3, #1
 801068e:	4658      	mov	r0, fp
 8010690:	9302      	str	r3, [sp, #8]
 8010692:	f7ff fa69 	bl	800fb68 <quorem>
 8010696:	4603      	mov	r3, r0
 8010698:	3330      	adds	r3, #48	; 0x30
 801069a:	9004      	str	r0, [sp, #16]
 801069c:	4641      	mov	r1, r8
 801069e:	4658      	mov	r0, fp
 80106a0:	9308      	str	r3, [sp, #32]
 80106a2:	f001 f819 	bl	80116d8 <__mcmp>
 80106a6:	463a      	mov	r2, r7
 80106a8:	4681      	mov	r9, r0
 80106aa:	4631      	mov	r1, r6
 80106ac:	4620      	mov	r0, r4
 80106ae:	f001 f82f 	bl	8011710 <__mdiff>
 80106b2:	68c2      	ldr	r2, [r0, #12]
 80106b4:	9b08      	ldr	r3, [sp, #32]
 80106b6:	4605      	mov	r5, r0
 80106b8:	bb02      	cbnz	r2, 80106fc <_dtoa_r+0xa7c>
 80106ba:	4601      	mov	r1, r0
 80106bc:	4658      	mov	r0, fp
 80106be:	f001 f80b 	bl	80116d8 <__mcmp>
 80106c2:	9b08      	ldr	r3, [sp, #32]
 80106c4:	4602      	mov	r2, r0
 80106c6:	4629      	mov	r1, r5
 80106c8:	4620      	mov	r0, r4
 80106ca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80106ce:	f000 fd7b 	bl	80111c8 <_Bfree>
 80106d2:	9b05      	ldr	r3, [sp, #20]
 80106d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80106d6:	9d01      	ldr	r5, [sp, #4]
 80106d8:	ea43 0102 	orr.w	r1, r3, r2
 80106dc:	9b06      	ldr	r3, [sp, #24]
 80106de:	430b      	orrs	r3, r1
 80106e0:	9b08      	ldr	r3, [sp, #32]
 80106e2:	d10d      	bne.n	8010700 <_dtoa_r+0xa80>
 80106e4:	2b39      	cmp	r3, #57	; 0x39
 80106e6:	d029      	beq.n	801073c <_dtoa_r+0xabc>
 80106e8:	f1b9 0f00 	cmp.w	r9, #0
 80106ec:	dd01      	ble.n	80106f2 <_dtoa_r+0xa72>
 80106ee:	9b04      	ldr	r3, [sp, #16]
 80106f0:	3331      	adds	r3, #49	; 0x31
 80106f2:	9a02      	ldr	r2, [sp, #8]
 80106f4:	7013      	strb	r3, [r2, #0]
 80106f6:	e774      	b.n	80105e2 <_dtoa_r+0x962>
 80106f8:	4638      	mov	r0, r7
 80106fa:	e7b9      	b.n	8010670 <_dtoa_r+0x9f0>
 80106fc:	2201      	movs	r2, #1
 80106fe:	e7e2      	b.n	80106c6 <_dtoa_r+0xa46>
 8010700:	f1b9 0f00 	cmp.w	r9, #0
 8010704:	db06      	blt.n	8010714 <_dtoa_r+0xa94>
 8010706:	9905      	ldr	r1, [sp, #20]
 8010708:	ea41 0909 	orr.w	r9, r1, r9
 801070c:	9906      	ldr	r1, [sp, #24]
 801070e:	ea59 0101 	orrs.w	r1, r9, r1
 8010712:	d120      	bne.n	8010756 <_dtoa_r+0xad6>
 8010714:	2a00      	cmp	r2, #0
 8010716:	ddec      	ble.n	80106f2 <_dtoa_r+0xa72>
 8010718:	4659      	mov	r1, fp
 801071a:	2201      	movs	r2, #1
 801071c:	4620      	mov	r0, r4
 801071e:	9301      	str	r3, [sp, #4]
 8010720:	f000 ff6e 	bl	8011600 <__lshift>
 8010724:	4631      	mov	r1, r6
 8010726:	4683      	mov	fp, r0
 8010728:	f000 ffd6 	bl	80116d8 <__mcmp>
 801072c:	2800      	cmp	r0, #0
 801072e:	9b01      	ldr	r3, [sp, #4]
 8010730:	dc02      	bgt.n	8010738 <_dtoa_r+0xab8>
 8010732:	d1de      	bne.n	80106f2 <_dtoa_r+0xa72>
 8010734:	07da      	lsls	r2, r3, #31
 8010736:	d5dc      	bpl.n	80106f2 <_dtoa_r+0xa72>
 8010738:	2b39      	cmp	r3, #57	; 0x39
 801073a:	d1d8      	bne.n	80106ee <_dtoa_r+0xa6e>
 801073c:	9a02      	ldr	r2, [sp, #8]
 801073e:	2339      	movs	r3, #57	; 0x39
 8010740:	7013      	strb	r3, [r2, #0]
 8010742:	462b      	mov	r3, r5
 8010744:	461d      	mov	r5, r3
 8010746:	3b01      	subs	r3, #1
 8010748:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801074c:	2a39      	cmp	r2, #57	; 0x39
 801074e:	d050      	beq.n	80107f2 <_dtoa_r+0xb72>
 8010750:	3201      	adds	r2, #1
 8010752:	701a      	strb	r2, [r3, #0]
 8010754:	e745      	b.n	80105e2 <_dtoa_r+0x962>
 8010756:	2a00      	cmp	r2, #0
 8010758:	dd03      	ble.n	8010762 <_dtoa_r+0xae2>
 801075a:	2b39      	cmp	r3, #57	; 0x39
 801075c:	d0ee      	beq.n	801073c <_dtoa_r+0xabc>
 801075e:	3301      	adds	r3, #1
 8010760:	e7c7      	b.n	80106f2 <_dtoa_r+0xa72>
 8010762:	9a01      	ldr	r2, [sp, #4]
 8010764:	9907      	ldr	r1, [sp, #28]
 8010766:	f802 3c01 	strb.w	r3, [r2, #-1]
 801076a:	428a      	cmp	r2, r1
 801076c:	d02a      	beq.n	80107c4 <_dtoa_r+0xb44>
 801076e:	4659      	mov	r1, fp
 8010770:	2300      	movs	r3, #0
 8010772:	220a      	movs	r2, #10
 8010774:	4620      	mov	r0, r4
 8010776:	f000 fd49 	bl	801120c <__multadd>
 801077a:	45b8      	cmp	r8, r7
 801077c:	4683      	mov	fp, r0
 801077e:	f04f 0300 	mov.w	r3, #0
 8010782:	f04f 020a 	mov.w	r2, #10
 8010786:	4641      	mov	r1, r8
 8010788:	4620      	mov	r0, r4
 801078a:	d107      	bne.n	801079c <_dtoa_r+0xb1c>
 801078c:	f000 fd3e 	bl	801120c <__multadd>
 8010790:	4680      	mov	r8, r0
 8010792:	4607      	mov	r7, r0
 8010794:	9b01      	ldr	r3, [sp, #4]
 8010796:	3301      	adds	r3, #1
 8010798:	9301      	str	r3, [sp, #4]
 801079a:	e775      	b.n	8010688 <_dtoa_r+0xa08>
 801079c:	f000 fd36 	bl	801120c <__multadd>
 80107a0:	4639      	mov	r1, r7
 80107a2:	4680      	mov	r8, r0
 80107a4:	2300      	movs	r3, #0
 80107a6:	220a      	movs	r2, #10
 80107a8:	4620      	mov	r0, r4
 80107aa:	f000 fd2f 	bl	801120c <__multadd>
 80107ae:	4607      	mov	r7, r0
 80107b0:	e7f0      	b.n	8010794 <_dtoa_r+0xb14>
 80107b2:	f1b9 0f00 	cmp.w	r9, #0
 80107b6:	9a00      	ldr	r2, [sp, #0]
 80107b8:	bfcc      	ite	gt
 80107ba:	464d      	movgt	r5, r9
 80107bc:	2501      	movle	r5, #1
 80107be:	4415      	add	r5, r2
 80107c0:	f04f 0800 	mov.w	r8, #0
 80107c4:	4659      	mov	r1, fp
 80107c6:	2201      	movs	r2, #1
 80107c8:	4620      	mov	r0, r4
 80107ca:	9301      	str	r3, [sp, #4]
 80107cc:	f000 ff18 	bl	8011600 <__lshift>
 80107d0:	4631      	mov	r1, r6
 80107d2:	4683      	mov	fp, r0
 80107d4:	f000 ff80 	bl	80116d8 <__mcmp>
 80107d8:	2800      	cmp	r0, #0
 80107da:	dcb2      	bgt.n	8010742 <_dtoa_r+0xac2>
 80107dc:	d102      	bne.n	80107e4 <_dtoa_r+0xb64>
 80107de:	9b01      	ldr	r3, [sp, #4]
 80107e0:	07db      	lsls	r3, r3, #31
 80107e2:	d4ae      	bmi.n	8010742 <_dtoa_r+0xac2>
 80107e4:	462b      	mov	r3, r5
 80107e6:	461d      	mov	r5, r3
 80107e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80107ec:	2a30      	cmp	r2, #48	; 0x30
 80107ee:	d0fa      	beq.n	80107e6 <_dtoa_r+0xb66>
 80107f0:	e6f7      	b.n	80105e2 <_dtoa_r+0x962>
 80107f2:	9a00      	ldr	r2, [sp, #0]
 80107f4:	429a      	cmp	r2, r3
 80107f6:	d1a5      	bne.n	8010744 <_dtoa_r+0xac4>
 80107f8:	f10a 0a01 	add.w	sl, sl, #1
 80107fc:	2331      	movs	r3, #49	; 0x31
 80107fe:	e779      	b.n	80106f4 <_dtoa_r+0xa74>
 8010800:	4b13      	ldr	r3, [pc, #76]	; (8010850 <_dtoa_r+0xbd0>)
 8010802:	f7ff baaf 	b.w	800fd64 <_dtoa_r+0xe4>
 8010806:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010808:	2b00      	cmp	r3, #0
 801080a:	f47f aa86 	bne.w	800fd1a <_dtoa_r+0x9a>
 801080e:	4b11      	ldr	r3, [pc, #68]	; (8010854 <_dtoa_r+0xbd4>)
 8010810:	f7ff baa8 	b.w	800fd64 <_dtoa_r+0xe4>
 8010814:	f1b9 0f00 	cmp.w	r9, #0
 8010818:	dc03      	bgt.n	8010822 <_dtoa_r+0xba2>
 801081a:	9b05      	ldr	r3, [sp, #20]
 801081c:	2b02      	cmp	r3, #2
 801081e:	f73f aec9 	bgt.w	80105b4 <_dtoa_r+0x934>
 8010822:	9d00      	ldr	r5, [sp, #0]
 8010824:	4631      	mov	r1, r6
 8010826:	4658      	mov	r0, fp
 8010828:	f7ff f99e 	bl	800fb68 <quorem>
 801082c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8010830:	f805 3b01 	strb.w	r3, [r5], #1
 8010834:	9a00      	ldr	r2, [sp, #0]
 8010836:	1aaa      	subs	r2, r5, r2
 8010838:	4591      	cmp	r9, r2
 801083a:	ddba      	ble.n	80107b2 <_dtoa_r+0xb32>
 801083c:	4659      	mov	r1, fp
 801083e:	2300      	movs	r3, #0
 8010840:	220a      	movs	r2, #10
 8010842:	4620      	mov	r0, r4
 8010844:	f000 fce2 	bl	801120c <__multadd>
 8010848:	4683      	mov	fp, r0
 801084a:	e7eb      	b.n	8010824 <_dtoa_r+0xba4>
 801084c:	08013378 	.word	0x08013378
 8010850:	08013579 	.word	0x08013579
 8010854:	080132f5 	.word	0x080132f5

08010858 <__sflush_r>:
 8010858:	898a      	ldrh	r2, [r1, #12]
 801085a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801085e:	4605      	mov	r5, r0
 8010860:	0710      	lsls	r0, r2, #28
 8010862:	460c      	mov	r4, r1
 8010864:	d458      	bmi.n	8010918 <__sflush_r+0xc0>
 8010866:	684b      	ldr	r3, [r1, #4]
 8010868:	2b00      	cmp	r3, #0
 801086a:	dc05      	bgt.n	8010878 <__sflush_r+0x20>
 801086c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801086e:	2b00      	cmp	r3, #0
 8010870:	dc02      	bgt.n	8010878 <__sflush_r+0x20>
 8010872:	2000      	movs	r0, #0
 8010874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010878:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801087a:	2e00      	cmp	r6, #0
 801087c:	d0f9      	beq.n	8010872 <__sflush_r+0x1a>
 801087e:	2300      	movs	r3, #0
 8010880:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010884:	682f      	ldr	r7, [r5, #0]
 8010886:	602b      	str	r3, [r5, #0]
 8010888:	d032      	beq.n	80108f0 <__sflush_r+0x98>
 801088a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801088c:	89a3      	ldrh	r3, [r4, #12]
 801088e:	075a      	lsls	r2, r3, #29
 8010890:	d505      	bpl.n	801089e <__sflush_r+0x46>
 8010892:	6863      	ldr	r3, [r4, #4]
 8010894:	1ac0      	subs	r0, r0, r3
 8010896:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010898:	b10b      	cbz	r3, 801089e <__sflush_r+0x46>
 801089a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801089c:	1ac0      	subs	r0, r0, r3
 801089e:	2300      	movs	r3, #0
 80108a0:	4602      	mov	r2, r0
 80108a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80108a4:	6a21      	ldr	r1, [r4, #32]
 80108a6:	4628      	mov	r0, r5
 80108a8:	47b0      	blx	r6
 80108aa:	1c43      	adds	r3, r0, #1
 80108ac:	89a3      	ldrh	r3, [r4, #12]
 80108ae:	d106      	bne.n	80108be <__sflush_r+0x66>
 80108b0:	6829      	ldr	r1, [r5, #0]
 80108b2:	291d      	cmp	r1, #29
 80108b4:	d82c      	bhi.n	8010910 <__sflush_r+0xb8>
 80108b6:	4a2a      	ldr	r2, [pc, #168]	; (8010960 <__sflush_r+0x108>)
 80108b8:	40ca      	lsrs	r2, r1
 80108ba:	07d6      	lsls	r6, r2, #31
 80108bc:	d528      	bpl.n	8010910 <__sflush_r+0xb8>
 80108be:	2200      	movs	r2, #0
 80108c0:	6062      	str	r2, [r4, #4]
 80108c2:	04d9      	lsls	r1, r3, #19
 80108c4:	6922      	ldr	r2, [r4, #16]
 80108c6:	6022      	str	r2, [r4, #0]
 80108c8:	d504      	bpl.n	80108d4 <__sflush_r+0x7c>
 80108ca:	1c42      	adds	r2, r0, #1
 80108cc:	d101      	bne.n	80108d2 <__sflush_r+0x7a>
 80108ce:	682b      	ldr	r3, [r5, #0]
 80108d0:	b903      	cbnz	r3, 80108d4 <__sflush_r+0x7c>
 80108d2:	6560      	str	r0, [r4, #84]	; 0x54
 80108d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80108d6:	602f      	str	r7, [r5, #0]
 80108d8:	2900      	cmp	r1, #0
 80108da:	d0ca      	beq.n	8010872 <__sflush_r+0x1a>
 80108dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80108e0:	4299      	cmp	r1, r3
 80108e2:	d002      	beq.n	80108ea <__sflush_r+0x92>
 80108e4:	4628      	mov	r0, r5
 80108e6:	f7fd f941 	bl	800db6c <_free_r>
 80108ea:	2000      	movs	r0, #0
 80108ec:	6360      	str	r0, [r4, #52]	; 0x34
 80108ee:	e7c1      	b.n	8010874 <__sflush_r+0x1c>
 80108f0:	6a21      	ldr	r1, [r4, #32]
 80108f2:	2301      	movs	r3, #1
 80108f4:	4628      	mov	r0, r5
 80108f6:	47b0      	blx	r6
 80108f8:	1c41      	adds	r1, r0, #1
 80108fa:	d1c7      	bne.n	801088c <__sflush_r+0x34>
 80108fc:	682b      	ldr	r3, [r5, #0]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d0c4      	beq.n	801088c <__sflush_r+0x34>
 8010902:	2b1d      	cmp	r3, #29
 8010904:	d001      	beq.n	801090a <__sflush_r+0xb2>
 8010906:	2b16      	cmp	r3, #22
 8010908:	d101      	bne.n	801090e <__sflush_r+0xb6>
 801090a:	602f      	str	r7, [r5, #0]
 801090c:	e7b1      	b.n	8010872 <__sflush_r+0x1a>
 801090e:	89a3      	ldrh	r3, [r4, #12]
 8010910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010914:	81a3      	strh	r3, [r4, #12]
 8010916:	e7ad      	b.n	8010874 <__sflush_r+0x1c>
 8010918:	690f      	ldr	r7, [r1, #16]
 801091a:	2f00      	cmp	r7, #0
 801091c:	d0a9      	beq.n	8010872 <__sflush_r+0x1a>
 801091e:	0793      	lsls	r3, r2, #30
 8010920:	680e      	ldr	r6, [r1, #0]
 8010922:	bf08      	it	eq
 8010924:	694b      	ldreq	r3, [r1, #20]
 8010926:	600f      	str	r7, [r1, #0]
 8010928:	bf18      	it	ne
 801092a:	2300      	movne	r3, #0
 801092c:	eba6 0807 	sub.w	r8, r6, r7
 8010930:	608b      	str	r3, [r1, #8]
 8010932:	f1b8 0f00 	cmp.w	r8, #0
 8010936:	dd9c      	ble.n	8010872 <__sflush_r+0x1a>
 8010938:	6a21      	ldr	r1, [r4, #32]
 801093a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801093c:	4643      	mov	r3, r8
 801093e:	463a      	mov	r2, r7
 8010940:	4628      	mov	r0, r5
 8010942:	47b0      	blx	r6
 8010944:	2800      	cmp	r0, #0
 8010946:	dc06      	bgt.n	8010956 <__sflush_r+0xfe>
 8010948:	89a3      	ldrh	r3, [r4, #12]
 801094a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801094e:	81a3      	strh	r3, [r4, #12]
 8010950:	f04f 30ff 	mov.w	r0, #4294967295
 8010954:	e78e      	b.n	8010874 <__sflush_r+0x1c>
 8010956:	4407      	add	r7, r0
 8010958:	eba8 0800 	sub.w	r8, r8, r0
 801095c:	e7e9      	b.n	8010932 <__sflush_r+0xda>
 801095e:	bf00      	nop
 8010960:	20400001 	.word	0x20400001

08010964 <_fflush_r>:
 8010964:	b538      	push	{r3, r4, r5, lr}
 8010966:	690b      	ldr	r3, [r1, #16]
 8010968:	4605      	mov	r5, r0
 801096a:	460c      	mov	r4, r1
 801096c:	b913      	cbnz	r3, 8010974 <_fflush_r+0x10>
 801096e:	2500      	movs	r5, #0
 8010970:	4628      	mov	r0, r5
 8010972:	bd38      	pop	{r3, r4, r5, pc}
 8010974:	b118      	cbz	r0, 801097e <_fflush_r+0x1a>
 8010976:	6983      	ldr	r3, [r0, #24]
 8010978:	b90b      	cbnz	r3, 801097e <_fflush_r+0x1a>
 801097a:	f7fc fff1 	bl	800d960 <__sinit>
 801097e:	4b14      	ldr	r3, [pc, #80]	; (80109d0 <_fflush_r+0x6c>)
 8010980:	429c      	cmp	r4, r3
 8010982:	d11b      	bne.n	80109bc <_fflush_r+0x58>
 8010984:	686c      	ldr	r4, [r5, #4]
 8010986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d0ef      	beq.n	801096e <_fflush_r+0xa>
 801098e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010990:	07d0      	lsls	r0, r2, #31
 8010992:	d404      	bmi.n	801099e <_fflush_r+0x3a>
 8010994:	0599      	lsls	r1, r3, #22
 8010996:	d402      	bmi.n	801099e <_fflush_r+0x3a>
 8010998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801099a:	f7fd f8a4 	bl	800dae6 <__retarget_lock_acquire_recursive>
 801099e:	4628      	mov	r0, r5
 80109a0:	4621      	mov	r1, r4
 80109a2:	f7ff ff59 	bl	8010858 <__sflush_r>
 80109a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80109a8:	07da      	lsls	r2, r3, #31
 80109aa:	4605      	mov	r5, r0
 80109ac:	d4e0      	bmi.n	8010970 <_fflush_r+0xc>
 80109ae:	89a3      	ldrh	r3, [r4, #12]
 80109b0:	059b      	lsls	r3, r3, #22
 80109b2:	d4dd      	bmi.n	8010970 <_fflush_r+0xc>
 80109b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80109b6:	f7fd f897 	bl	800dae8 <__retarget_lock_release_recursive>
 80109ba:	e7d9      	b.n	8010970 <_fflush_r+0xc>
 80109bc:	4b05      	ldr	r3, [pc, #20]	; (80109d4 <_fflush_r+0x70>)
 80109be:	429c      	cmp	r4, r3
 80109c0:	d101      	bne.n	80109c6 <_fflush_r+0x62>
 80109c2:	68ac      	ldr	r4, [r5, #8]
 80109c4:	e7df      	b.n	8010986 <_fflush_r+0x22>
 80109c6:	4b04      	ldr	r3, [pc, #16]	; (80109d8 <_fflush_r+0x74>)
 80109c8:	429c      	cmp	r4, r3
 80109ca:	bf08      	it	eq
 80109cc:	68ec      	ldreq	r4, [r5, #12]
 80109ce:	e7da      	b.n	8010986 <_fflush_r+0x22>
 80109d0:	080130ec 	.word	0x080130ec
 80109d4:	0801310c 	.word	0x0801310c
 80109d8:	080130cc 	.word	0x080130cc

080109dc <fiprintf>:
 80109dc:	b40e      	push	{r1, r2, r3}
 80109de:	b503      	push	{r0, r1, lr}
 80109e0:	4601      	mov	r1, r0
 80109e2:	ab03      	add	r3, sp, #12
 80109e4:	4805      	ldr	r0, [pc, #20]	; (80109fc <fiprintf+0x20>)
 80109e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80109ea:	6800      	ldr	r0, [r0, #0]
 80109ec:	9301      	str	r3, [sp, #4]
 80109ee:	f001 fbf3 	bl	80121d8 <_vfiprintf_r>
 80109f2:	b002      	add	sp, #8
 80109f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80109f8:	b003      	add	sp, #12
 80109fa:	4770      	bx	lr
 80109fc:	20000030 	.word	0x20000030

08010a00 <rshift>:
 8010a00:	6903      	ldr	r3, [r0, #16]
 8010a02:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010a06:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010a0a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010a0e:	f100 0414 	add.w	r4, r0, #20
 8010a12:	dd45      	ble.n	8010aa0 <rshift+0xa0>
 8010a14:	f011 011f 	ands.w	r1, r1, #31
 8010a18:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010a1c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010a20:	d10c      	bne.n	8010a3c <rshift+0x3c>
 8010a22:	f100 0710 	add.w	r7, r0, #16
 8010a26:	4629      	mov	r1, r5
 8010a28:	42b1      	cmp	r1, r6
 8010a2a:	d334      	bcc.n	8010a96 <rshift+0x96>
 8010a2c:	1a9b      	subs	r3, r3, r2
 8010a2e:	009b      	lsls	r3, r3, #2
 8010a30:	1eea      	subs	r2, r5, #3
 8010a32:	4296      	cmp	r6, r2
 8010a34:	bf38      	it	cc
 8010a36:	2300      	movcc	r3, #0
 8010a38:	4423      	add	r3, r4
 8010a3a:	e015      	b.n	8010a68 <rshift+0x68>
 8010a3c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010a40:	f1c1 0820 	rsb	r8, r1, #32
 8010a44:	40cf      	lsrs	r7, r1
 8010a46:	f105 0e04 	add.w	lr, r5, #4
 8010a4a:	46a1      	mov	r9, r4
 8010a4c:	4576      	cmp	r6, lr
 8010a4e:	46f4      	mov	ip, lr
 8010a50:	d815      	bhi.n	8010a7e <rshift+0x7e>
 8010a52:	1a9b      	subs	r3, r3, r2
 8010a54:	009a      	lsls	r2, r3, #2
 8010a56:	3a04      	subs	r2, #4
 8010a58:	3501      	adds	r5, #1
 8010a5a:	42ae      	cmp	r6, r5
 8010a5c:	bf38      	it	cc
 8010a5e:	2200      	movcc	r2, #0
 8010a60:	18a3      	adds	r3, r4, r2
 8010a62:	50a7      	str	r7, [r4, r2]
 8010a64:	b107      	cbz	r7, 8010a68 <rshift+0x68>
 8010a66:	3304      	adds	r3, #4
 8010a68:	1b1a      	subs	r2, r3, r4
 8010a6a:	42a3      	cmp	r3, r4
 8010a6c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010a70:	bf08      	it	eq
 8010a72:	2300      	moveq	r3, #0
 8010a74:	6102      	str	r2, [r0, #16]
 8010a76:	bf08      	it	eq
 8010a78:	6143      	streq	r3, [r0, #20]
 8010a7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a7e:	f8dc c000 	ldr.w	ip, [ip]
 8010a82:	fa0c fc08 	lsl.w	ip, ip, r8
 8010a86:	ea4c 0707 	orr.w	r7, ip, r7
 8010a8a:	f849 7b04 	str.w	r7, [r9], #4
 8010a8e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010a92:	40cf      	lsrs	r7, r1
 8010a94:	e7da      	b.n	8010a4c <rshift+0x4c>
 8010a96:	f851 cb04 	ldr.w	ip, [r1], #4
 8010a9a:	f847 cf04 	str.w	ip, [r7, #4]!
 8010a9e:	e7c3      	b.n	8010a28 <rshift+0x28>
 8010aa0:	4623      	mov	r3, r4
 8010aa2:	e7e1      	b.n	8010a68 <rshift+0x68>

08010aa4 <__hexdig_fun>:
 8010aa4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010aa8:	2b09      	cmp	r3, #9
 8010aaa:	d802      	bhi.n	8010ab2 <__hexdig_fun+0xe>
 8010aac:	3820      	subs	r0, #32
 8010aae:	b2c0      	uxtb	r0, r0
 8010ab0:	4770      	bx	lr
 8010ab2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010ab6:	2b05      	cmp	r3, #5
 8010ab8:	d801      	bhi.n	8010abe <__hexdig_fun+0x1a>
 8010aba:	3847      	subs	r0, #71	; 0x47
 8010abc:	e7f7      	b.n	8010aae <__hexdig_fun+0xa>
 8010abe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010ac2:	2b05      	cmp	r3, #5
 8010ac4:	d801      	bhi.n	8010aca <__hexdig_fun+0x26>
 8010ac6:	3827      	subs	r0, #39	; 0x27
 8010ac8:	e7f1      	b.n	8010aae <__hexdig_fun+0xa>
 8010aca:	2000      	movs	r0, #0
 8010acc:	4770      	bx	lr
	...

08010ad0 <__gethex>:
 8010ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ad4:	ed2d 8b02 	vpush	{d8}
 8010ad8:	b089      	sub	sp, #36	; 0x24
 8010ada:	ee08 0a10 	vmov	s16, r0
 8010ade:	9304      	str	r3, [sp, #16]
 8010ae0:	4bbc      	ldr	r3, [pc, #752]	; (8010dd4 <__gethex+0x304>)
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	9301      	str	r3, [sp, #4]
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	468b      	mov	fp, r1
 8010aea:	4690      	mov	r8, r2
 8010aec:	f7ef fb80 	bl	80001f0 <strlen>
 8010af0:	9b01      	ldr	r3, [sp, #4]
 8010af2:	f8db 2000 	ldr.w	r2, [fp]
 8010af6:	4403      	add	r3, r0
 8010af8:	4682      	mov	sl, r0
 8010afa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010afe:	9305      	str	r3, [sp, #20]
 8010b00:	1c93      	adds	r3, r2, #2
 8010b02:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010b06:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010b0a:	32fe      	adds	r2, #254	; 0xfe
 8010b0c:	18d1      	adds	r1, r2, r3
 8010b0e:	461f      	mov	r7, r3
 8010b10:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010b14:	9100      	str	r1, [sp, #0]
 8010b16:	2830      	cmp	r0, #48	; 0x30
 8010b18:	d0f8      	beq.n	8010b0c <__gethex+0x3c>
 8010b1a:	f7ff ffc3 	bl	8010aa4 <__hexdig_fun>
 8010b1e:	4604      	mov	r4, r0
 8010b20:	2800      	cmp	r0, #0
 8010b22:	d13a      	bne.n	8010b9a <__gethex+0xca>
 8010b24:	9901      	ldr	r1, [sp, #4]
 8010b26:	4652      	mov	r2, sl
 8010b28:	4638      	mov	r0, r7
 8010b2a:	f7fe f898 	bl	800ec5e <strncmp>
 8010b2e:	4605      	mov	r5, r0
 8010b30:	2800      	cmp	r0, #0
 8010b32:	d168      	bne.n	8010c06 <__gethex+0x136>
 8010b34:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010b38:	eb07 060a 	add.w	r6, r7, sl
 8010b3c:	f7ff ffb2 	bl	8010aa4 <__hexdig_fun>
 8010b40:	2800      	cmp	r0, #0
 8010b42:	d062      	beq.n	8010c0a <__gethex+0x13a>
 8010b44:	4633      	mov	r3, r6
 8010b46:	7818      	ldrb	r0, [r3, #0]
 8010b48:	2830      	cmp	r0, #48	; 0x30
 8010b4a:	461f      	mov	r7, r3
 8010b4c:	f103 0301 	add.w	r3, r3, #1
 8010b50:	d0f9      	beq.n	8010b46 <__gethex+0x76>
 8010b52:	f7ff ffa7 	bl	8010aa4 <__hexdig_fun>
 8010b56:	2301      	movs	r3, #1
 8010b58:	fab0 f480 	clz	r4, r0
 8010b5c:	0964      	lsrs	r4, r4, #5
 8010b5e:	4635      	mov	r5, r6
 8010b60:	9300      	str	r3, [sp, #0]
 8010b62:	463a      	mov	r2, r7
 8010b64:	4616      	mov	r6, r2
 8010b66:	3201      	adds	r2, #1
 8010b68:	7830      	ldrb	r0, [r6, #0]
 8010b6a:	f7ff ff9b 	bl	8010aa4 <__hexdig_fun>
 8010b6e:	2800      	cmp	r0, #0
 8010b70:	d1f8      	bne.n	8010b64 <__gethex+0x94>
 8010b72:	9901      	ldr	r1, [sp, #4]
 8010b74:	4652      	mov	r2, sl
 8010b76:	4630      	mov	r0, r6
 8010b78:	f7fe f871 	bl	800ec5e <strncmp>
 8010b7c:	b980      	cbnz	r0, 8010ba0 <__gethex+0xd0>
 8010b7e:	b94d      	cbnz	r5, 8010b94 <__gethex+0xc4>
 8010b80:	eb06 050a 	add.w	r5, r6, sl
 8010b84:	462a      	mov	r2, r5
 8010b86:	4616      	mov	r6, r2
 8010b88:	3201      	adds	r2, #1
 8010b8a:	7830      	ldrb	r0, [r6, #0]
 8010b8c:	f7ff ff8a 	bl	8010aa4 <__hexdig_fun>
 8010b90:	2800      	cmp	r0, #0
 8010b92:	d1f8      	bne.n	8010b86 <__gethex+0xb6>
 8010b94:	1bad      	subs	r5, r5, r6
 8010b96:	00ad      	lsls	r5, r5, #2
 8010b98:	e004      	b.n	8010ba4 <__gethex+0xd4>
 8010b9a:	2400      	movs	r4, #0
 8010b9c:	4625      	mov	r5, r4
 8010b9e:	e7e0      	b.n	8010b62 <__gethex+0x92>
 8010ba0:	2d00      	cmp	r5, #0
 8010ba2:	d1f7      	bne.n	8010b94 <__gethex+0xc4>
 8010ba4:	7833      	ldrb	r3, [r6, #0]
 8010ba6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010baa:	2b50      	cmp	r3, #80	; 0x50
 8010bac:	d13b      	bne.n	8010c26 <__gethex+0x156>
 8010bae:	7873      	ldrb	r3, [r6, #1]
 8010bb0:	2b2b      	cmp	r3, #43	; 0x2b
 8010bb2:	d02c      	beq.n	8010c0e <__gethex+0x13e>
 8010bb4:	2b2d      	cmp	r3, #45	; 0x2d
 8010bb6:	d02e      	beq.n	8010c16 <__gethex+0x146>
 8010bb8:	1c71      	adds	r1, r6, #1
 8010bba:	f04f 0900 	mov.w	r9, #0
 8010bbe:	7808      	ldrb	r0, [r1, #0]
 8010bc0:	f7ff ff70 	bl	8010aa4 <__hexdig_fun>
 8010bc4:	1e43      	subs	r3, r0, #1
 8010bc6:	b2db      	uxtb	r3, r3
 8010bc8:	2b18      	cmp	r3, #24
 8010bca:	d82c      	bhi.n	8010c26 <__gethex+0x156>
 8010bcc:	f1a0 0210 	sub.w	r2, r0, #16
 8010bd0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010bd4:	f7ff ff66 	bl	8010aa4 <__hexdig_fun>
 8010bd8:	1e43      	subs	r3, r0, #1
 8010bda:	b2db      	uxtb	r3, r3
 8010bdc:	2b18      	cmp	r3, #24
 8010bde:	d91d      	bls.n	8010c1c <__gethex+0x14c>
 8010be0:	f1b9 0f00 	cmp.w	r9, #0
 8010be4:	d000      	beq.n	8010be8 <__gethex+0x118>
 8010be6:	4252      	negs	r2, r2
 8010be8:	4415      	add	r5, r2
 8010bea:	f8cb 1000 	str.w	r1, [fp]
 8010bee:	b1e4      	cbz	r4, 8010c2a <__gethex+0x15a>
 8010bf0:	9b00      	ldr	r3, [sp, #0]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	bf14      	ite	ne
 8010bf6:	2700      	movne	r7, #0
 8010bf8:	2706      	moveq	r7, #6
 8010bfa:	4638      	mov	r0, r7
 8010bfc:	b009      	add	sp, #36	; 0x24
 8010bfe:	ecbd 8b02 	vpop	{d8}
 8010c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c06:	463e      	mov	r6, r7
 8010c08:	4625      	mov	r5, r4
 8010c0a:	2401      	movs	r4, #1
 8010c0c:	e7ca      	b.n	8010ba4 <__gethex+0xd4>
 8010c0e:	f04f 0900 	mov.w	r9, #0
 8010c12:	1cb1      	adds	r1, r6, #2
 8010c14:	e7d3      	b.n	8010bbe <__gethex+0xee>
 8010c16:	f04f 0901 	mov.w	r9, #1
 8010c1a:	e7fa      	b.n	8010c12 <__gethex+0x142>
 8010c1c:	230a      	movs	r3, #10
 8010c1e:	fb03 0202 	mla	r2, r3, r2, r0
 8010c22:	3a10      	subs	r2, #16
 8010c24:	e7d4      	b.n	8010bd0 <__gethex+0x100>
 8010c26:	4631      	mov	r1, r6
 8010c28:	e7df      	b.n	8010bea <__gethex+0x11a>
 8010c2a:	1bf3      	subs	r3, r6, r7
 8010c2c:	3b01      	subs	r3, #1
 8010c2e:	4621      	mov	r1, r4
 8010c30:	2b07      	cmp	r3, #7
 8010c32:	dc0b      	bgt.n	8010c4c <__gethex+0x17c>
 8010c34:	ee18 0a10 	vmov	r0, s16
 8010c38:	f000 fa86 	bl	8011148 <_Balloc>
 8010c3c:	4604      	mov	r4, r0
 8010c3e:	b940      	cbnz	r0, 8010c52 <__gethex+0x182>
 8010c40:	4b65      	ldr	r3, [pc, #404]	; (8010dd8 <__gethex+0x308>)
 8010c42:	4602      	mov	r2, r0
 8010c44:	21de      	movs	r1, #222	; 0xde
 8010c46:	4865      	ldr	r0, [pc, #404]	; (8010ddc <__gethex+0x30c>)
 8010c48:	f7fe ff60 	bl	800fb0c <__assert_func>
 8010c4c:	3101      	adds	r1, #1
 8010c4e:	105b      	asrs	r3, r3, #1
 8010c50:	e7ee      	b.n	8010c30 <__gethex+0x160>
 8010c52:	f100 0914 	add.w	r9, r0, #20
 8010c56:	f04f 0b00 	mov.w	fp, #0
 8010c5a:	f1ca 0301 	rsb	r3, sl, #1
 8010c5e:	f8cd 9008 	str.w	r9, [sp, #8]
 8010c62:	f8cd b000 	str.w	fp, [sp]
 8010c66:	9306      	str	r3, [sp, #24]
 8010c68:	42b7      	cmp	r7, r6
 8010c6a:	d340      	bcc.n	8010cee <__gethex+0x21e>
 8010c6c:	9802      	ldr	r0, [sp, #8]
 8010c6e:	9b00      	ldr	r3, [sp, #0]
 8010c70:	f840 3b04 	str.w	r3, [r0], #4
 8010c74:	eba0 0009 	sub.w	r0, r0, r9
 8010c78:	1080      	asrs	r0, r0, #2
 8010c7a:	0146      	lsls	r6, r0, #5
 8010c7c:	6120      	str	r0, [r4, #16]
 8010c7e:	4618      	mov	r0, r3
 8010c80:	f000 fb58 	bl	8011334 <__hi0bits>
 8010c84:	1a30      	subs	r0, r6, r0
 8010c86:	f8d8 6000 	ldr.w	r6, [r8]
 8010c8a:	42b0      	cmp	r0, r6
 8010c8c:	dd63      	ble.n	8010d56 <__gethex+0x286>
 8010c8e:	1b87      	subs	r7, r0, r6
 8010c90:	4639      	mov	r1, r7
 8010c92:	4620      	mov	r0, r4
 8010c94:	f000 fef2 	bl	8011a7c <__any_on>
 8010c98:	4682      	mov	sl, r0
 8010c9a:	b1a8      	cbz	r0, 8010cc8 <__gethex+0x1f8>
 8010c9c:	1e7b      	subs	r3, r7, #1
 8010c9e:	1159      	asrs	r1, r3, #5
 8010ca0:	f003 021f 	and.w	r2, r3, #31
 8010ca4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010ca8:	f04f 0a01 	mov.w	sl, #1
 8010cac:	fa0a f202 	lsl.w	r2, sl, r2
 8010cb0:	420a      	tst	r2, r1
 8010cb2:	d009      	beq.n	8010cc8 <__gethex+0x1f8>
 8010cb4:	4553      	cmp	r3, sl
 8010cb6:	dd05      	ble.n	8010cc4 <__gethex+0x1f4>
 8010cb8:	1eb9      	subs	r1, r7, #2
 8010cba:	4620      	mov	r0, r4
 8010cbc:	f000 fede 	bl	8011a7c <__any_on>
 8010cc0:	2800      	cmp	r0, #0
 8010cc2:	d145      	bne.n	8010d50 <__gethex+0x280>
 8010cc4:	f04f 0a02 	mov.w	sl, #2
 8010cc8:	4639      	mov	r1, r7
 8010cca:	4620      	mov	r0, r4
 8010ccc:	f7ff fe98 	bl	8010a00 <rshift>
 8010cd0:	443d      	add	r5, r7
 8010cd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010cd6:	42ab      	cmp	r3, r5
 8010cd8:	da4c      	bge.n	8010d74 <__gethex+0x2a4>
 8010cda:	ee18 0a10 	vmov	r0, s16
 8010cde:	4621      	mov	r1, r4
 8010ce0:	f000 fa72 	bl	80111c8 <_Bfree>
 8010ce4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	6013      	str	r3, [r2, #0]
 8010cea:	27a3      	movs	r7, #163	; 0xa3
 8010cec:	e785      	b.n	8010bfa <__gethex+0x12a>
 8010cee:	1e73      	subs	r3, r6, #1
 8010cf0:	9a05      	ldr	r2, [sp, #20]
 8010cf2:	9303      	str	r3, [sp, #12]
 8010cf4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010cf8:	4293      	cmp	r3, r2
 8010cfa:	d019      	beq.n	8010d30 <__gethex+0x260>
 8010cfc:	f1bb 0f20 	cmp.w	fp, #32
 8010d00:	d107      	bne.n	8010d12 <__gethex+0x242>
 8010d02:	9b02      	ldr	r3, [sp, #8]
 8010d04:	9a00      	ldr	r2, [sp, #0]
 8010d06:	f843 2b04 	str.w	r2, [r3], #4
 8010d0a:	9302      	str	r3, [sp, #8]
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	9300      	str	r3, [sp, #0]
 8010d10:	469b      	mov	fp, r3
 8010d12:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010d16:	f7ff fec5 	bl	8010aa4 <__hexdig_fun>
 8010d1a:	9b00      	ldr	r3, [sp, #0]
 8010d1c:	f000 000f 	and.w	r0, r0, #15
 8010d20:	fa00 f00b 	lsl.w	r0, r0, fp
 8010d24:	4303      	orrs	r3, r0
 8010d26:	9300      	str	r3, [sp, #0]
 8010d28:	f10b 0b04 	add.w	fp, fp, #4
 8010d2c:	9b03      	ldr	r3, [sp, #12]
 8010d2e:	e00d      	b.n	8010d4c <__gethex+0x27c>
 8010d30:	9b03      	ldr	r3, [sp, #12]
 8010d32:	9a06      	ldr	r2, [sp, #24]
 8010d34:	4413      	add	r3, r2
 8010d36:	42bb      	cmp	r3, r7
 8010d38:	d3e0      	bcc.n	8010cfc <__gethex+0x22c>
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	9901      	ldr	r1, [sp, #4]
 8010d3e:	9307      	str	r3, [sp, #28]
 8010d40:	4652      	mov	r2, sl
 8010d42:	f7fd ff8c 	bl	800ec5e <strncmp>
 8010d46:	9b07      	ldr	r3, [sp, #28]
 8010d48:	2800      	cmp	r0, #0
 8010d4a:	d1d7      	bne.n	8010cfc <__gethex+0x22c>
 8010d4c:	461e      	mov	r6, r3
 8010d4e:	e78b      	b.n	8010c68 <__gethex+0x198>
 8010d50:	f04f 0a03 	mov.w	sl, #3
 8010d54:	e7b8      	b.n	8010cc8 <__gethex+0x1f8>
 8010d56:	da0a      	bge.n	8010d6e <__gethex+0x29e>
 8010d58:	1a37      	subs	r7, r6, r0
 8010d5a:	4621      	mov	r1, r4
 8010d5c:	ee18 0a10 	vmov	r0, s16
 8010d60:	463a      	mov	r2, r7
 8010d62:	f000 fc4d 	bl	8011600 <__lshift>
 8010d66:	1bed      	subs	r5, r5, r7
 8010d68:	4604      	mov	r4, r0
 8010d6a:	f100 0914 	add.w	r9, r0, #20
 8010d6e:	f04f 0a00 	mov.w	sl, #0
 8010d72:	e7ae      	b.n	8010cd2 <__gethex+0x202>
 8010d74:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010d78:	42a8      	cmp	r0, r5
 8010d7a:	dd72      	ble.n	8010e62 <__gethex+0x392>
 8010d7c:	1b45      	subs	r5, r0, r5
 8010d7e:	42ae      	cmp	r6, r5
 8010d80:	dc36      	bgt.n	8010df0 <__gethex+0x320>
 8010d82:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010d86:	2b02      	cmp	r3, #2
 8010d88:	d02a      	beq.n	8010de0 <__gethex+0x310>
 8010d8a:	2b03      	cmp	r3, #3
 8010d8c:	d02c      	beq.n	8010de8 <__gethex+0x318>
 8010d8e:	2b01      	cmp	r3, #1
 8010d90:	d115      	bne.n	8010dbe <__gethex+0x2ee>
 8010d92:	42ae      	cmp	r6, r5
 8010d94:	d113      	bne.n	8010dbe <__gethex+0x2ee>
 8010d96:	2e01      	cmp	r6, #1
 8010d98:	d10b      	bne.n	8010db2 <__gethex+0x2e2>
 8010d9a:	9a04      	ldr	r2, [sp, #16]
 8010d9c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010da0:	6013      	str	r3, [r2, #0]
 8010da2:	2301      	movs	r3, #1
 8010da4:	6123      	str	r3, [r4, #16]
 8010da6:	f8c9 3000 	str.w	r3, [r9]
 8010daa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010dac:	2762      	movs	r7, #98	; 0x62
 8010dae:	601c      	str	r4, [r3, #0]
 8010db0:	e723      	b.n	8010bfa <__gethex+0x12a>
 8010db2:	1e71      	subs	r1, r6, #1
 8010db4:	4620      	mov	r0, r4
 8010db6:	f000 fe61 	bl	8011a7c <__any_on>
 8010dba:	2800      	cmp	r0, #0
 8010dbc:	d1ed      	bne.n	8010d9a <__gethex+0x2ca>
 8010dbe:	ee18 0a10 	vmov	r0, s16
 8010dc2:	4621      	mov	r1, r4
 8010dc4:	f000 fa00 	bl	80111c8 <_Bfree>
 8010dc8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010dca:	2300      	movs	r3, #0
 8010dcc:	6013      	str	r3, [r2, #0]
 8010dce:	2750      	movs	r7, #80	; 0x50
 8010dd0:	e713      	b.n	8010bfa <__gethex+0x12a>
 8010dd2:	bf00      	nop
 8010dd4:	080133f4 	.word	0x080133f4
 8010dd8:	08013378 	.word	0x08013378
 8010ddc:	08013389 	.word	0x08013389
 8010de0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d1eb      	bne.n	8010dbe <__gethex+0x2ee>
 8010de6:	e7d8      	b.n	8010d9a <__gethex+0x2ca>
 8010de8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d1d5      	bne.n	8010d9a <__gethex+0x2ca>
 8010dee:	e7e6      	b.n	8010dbe <__gethex+0x2ee>
 8010df0:	1e6f      	subs	r7, r5, #1
 8010df2:	f1ba 0f00 	cmp.w	sl, #0
 8010df6:	d131      	bne.n	8010e5c <__gethex+0x38c>
 8010df8:	b127      	cbz	r7, 8010e04 <__gethex+0x334>
 8010dfa:	4639      	mov	r1, r7
 8010dfc:	4620      	mov	r0, r4
 8010dfe:	f000 fe3d 	bl	8011a7c <__any_on>
 8010e02:	4682      	mov	sl, r0
 8010e04:	117b      	asrs	r3, r7, #5
 8010e06:	2101      	movs	r1, #1
 8010e08:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010e0c:	f007 071f 	and.w	r7, r7, #31
 8010e10:	fa01 f707 	lsl.w	r7, r1, r7
 8010e14:	421f      	tst	r7, r3
 8010e16:	4629      	mov	r1, r5
 8010e18:	4620      	mov	r0, r4
 8010e1a:	bf18      	it	ne
 8010e1c:	f04a 0a02 	orrne.w	sl, sl, #2
 8010e20:	1b76      	subs	r6, r6, r5
 8010e22:	f7ff fded 	bl	8010a00 <rshift>
 8010e26:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010e2a:	2702      	movs	r7, #2
 8010e2c:	f1ba 0f00 	cmp.w	sl, #0
 8010e30:	d048      	beq.n	8010ec4 <__gethex+0x3f4>
 8010e32:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010e36:	2b02      	cmp	r3, #2
 8010e38:	d015      	beq.n	8010e66 <__gethex+0x396>
 8010e3a:	2b03      	cmp	r3, #3
 8010e3c:	d017      	beq.n	8010e6e <__gethex+0x39e>
 8010e3e:	2b01      	cmp	r3, #1
 8010e40:	d109      	bne.n	8010e56 <__gethex+0x386>
 8010e42:	f01a 0f02 	tst.w	sl, #2
 8010e46:	d006      	beq.n	8010e56 <__gethex+0x386>
 8010e48:	f8d9 0000 	ldr.w	r0, [r9]
 8010e4c:	ea4a 0a00 	orr.w	sl, sl, r0
 8010e50:	f01a 0f01 	tst.w	sl, #1
 8010e54:	d10e      	bne.n	8010e74 <__gethex+0x3a4>
 8010e56:	f047 0710 	orr.w	r7, r7, #16
 8010e5a:	e033      	b.n	8010ec4 <__gethex+0x3f4>
 8010e5c:	f04f 0a01 	mov.w	sl, #1
 8010e60:	e7d0      	b.n	8010e04 <__gethex+0x334>
 8010e62:	2701      	movs	r7, #1
 8010e64:	e7e2      	b.n	8010e2c <__gethex+0x35c>
 8010e66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e68:	f1c3 0301 	rsb	r3, r3, #1
 8010e6c:	9315      	str	r3, [sp, #84]	; 0x54
 8010e6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d0f0      	beq.n	8010e56 <__gethex+0x386>
 8010e74:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010e78:	f104 0314 	add.w	r3, r4, #20
 8010e7c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010e80:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010e84:	f04f 0c00 	mov.w	ip, #0
 8010e88:	4618      	mov	r0, r3
 8010e8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e8e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010e92:	d01c      	beq.n	8010ece <__gethex+0x3fe>
 8010e94:	3201      	adds	r2, #1
 8010e96:	6002      	str	r2, [r0, #0]
 8010e98:	2f02      	cmp	r7, #2
 8010e9a:	f104 0314 	add.w	r3, r4, #20
 8010e9e:	d13f      	bne.n	8010f20 <__gethex+0x450>
 8010ea0:	f8d8 2000 	ldr.w	r2, [r8]
 8010ea4:	3a01      	subs	r2, #1
 8010ea6:	42b2      	cmp	r2, r6
 8010ea8:	d10a      	bne.n	8010ec0 <__gethex+0x3f0>
 8010eaa:	1171      	asrs	r1, r6, #5
 8010eac:	2201      	movs	r2, #1
 8010eae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010eb2:	f006 061f 	and.w	r6, r6, #31
 8010eb6:	fa02 f606 	lsl.w	r6, r2, r6
 8010eba:	421e      	tst	r6, r3
 8010ebc:	bf18      	it	ne
 8010ebe:	4617      	movne	r7, r2
 8010ec0:	f047 0720 	orr.w	r7, r7, #32
 8010ec4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010ec6:	601c      	str	r4, [r3, #0]
 8010ec8:	9b04      	ldr	r3, [sp, #16]
 8010eca:	601d      	str	r5, [r3, #0]
 8010ecc:	e695      	b.n	8010bfa <__gethex+0x12a>
 8010ece:	4299      	cmp	r1, r3
 8010ed0:	f843 cc04 	str.w	ip, [r3, #-4]
 8010ed4:	d8d8      	bhi.n	8010e88 <__gethex+0x3b8>
 8010ed6:	68a3      	ldr	r3, [r4, #8]
 8010ed8:	459b      	cmp	fp, r3
 8010eda:	db19      	blt.n	8010f10 <__gethex+0x440>
 8010edc:	6861      	ldr	r1, [r4, #4]
 8010ede:	ee18 0a10 	vmov	r0, s16
 8010ee2:	3101      	adds	r1, #1
 8010ee4:	f000 f930 	bl	8011148 <_Balloc>
 8010ee8:	4681      	mov	r9, r0
 8010eea:	b918      	cbnz	r0, 8010ef4 <__gethex+0x424>
 8010eec:	4b1a      	ldr	r3, [pc, #104]	; (8010f58 <__gethex+0x488>)
 8010eee:	4602      	mov	r2, r0
 8010ef0:	2184      	movs	r1, #132	; 0x84
 8010ef2:	e6a8      	b.n	8010c46 <__gethex+0x176>
 8010ef4:	6922      	ldr	r2, [r4, #16]
 8010ef6:	3202      	adds	r2, #2
 8010ef8:	f104 010c 	add.w	r1, r4, #12
 8010efc:	0092      	lsls	r2, r2, #2
 8010efe:	300c      	adds	r0, #12
 8010f00:	f7fc fe04 	bl	800db0c <memcpy>
 8010f04:	4621      	mov	r1, r4
 8010f06:	ee18 0a10 	vmov	r0, s16
 8010f0a:	f000 f95d 	bl	80111c8 <_Bfree>
 8010f0e:	464c      	mov	r4, r9
 8010f10:	6923      	ldr	r3, [r4, #16]
 8010f12:	1c5a      	adds	r2, r3, #1
 8010f14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010f18:	6122      	str	r2, [r4, #16]
 8010f1a:	2201      	movs	r2, #1
 8010f1c:	615a      	str	r2, [r3, #20]
 8010f1e:	e7bb      	b.n	8010e98 <__gethex+0x3c8>
 8010f20:	6922      	ldr	r2, [r4, #16]
 8010f22:	455a      	cmp	r2, fp
 8010f24:	dd0b      	ble.n	8010f3e <__gethex+0x46e>
 8010f26:	2101      	movs	r1, #1
 8010f28:	4620      	mov	r0, r4
 8010f2a:	f7ff fd69 	bl	8010a00 <rshift>
 8010f2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010f32:	3501      	adds	r5, #1
 8010f34:	42ab      	cmp	r3, r5
 8010f36:	f6ff aed0 	blt.w	8010cda <__gethex+0x20a>
 8010f3a:	2701      	movs	r7, #1
 8010f3c:	e7c0      	b.n	8010ec0 <__gethex+0x3f0>
 8010f3e:	f016 061f 	ands.w	r6, r6, #31
 8010f42:	d0fa      	beq.n	8010f3a <__gethex+0x46a>
 8010f44:	449a      	add	sl, r3
 8010f46:	f1c6 0620 	rsb	r6, r6, #32
 8010f4a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8010f4e:	f000 f9f1 	bl	8011334 <__hi0bits>
 8010f52:	42b0      	cmp	r0, r6
 8010f54:	dbe7      	blt.n	8010f26 <__gethex+0x456>
 8010f56:	e7f0      	b.n	8010f3a <__gethex+0x46a>
 8010f58:	08013378 	.word	0x08013378

08010f5c <L_shift>:
 8010f5c:	f1c2 0208 	rsb	r2, r2, #8
 8010f60:	0092      	lsls	r2, r2, #2
 8010f62:	b570      	push	{r4, r5, r6, lr}
 8010f64:	f1c2 0620 	rsb	r6, r2, #32
 8010f68:	6843      	ldr	r3, [r0, #4]
 8010f6a:	6804      	ldr	r4, [r0, #0]
 8010f6c:	fa03 f506 	lsl.w	r5, r3, r6
 8010f70:	432c      	orrs	r4, r5
 8010f72:	40d3      	lsrs	r3, r2
 8010f74:	6004      	str	r4, [r0, #0]
 8010f76:	f840 3f04 	str.w	r3, [r0, #4]!
 8010f7a:	4288      	cmp	r0, r1
 8010f7c:	d3f4      	bcc.n	8010f68 <L_shift+0xc>
 8010f7e:	bd70      	pop	{r4, r5, r6, pc}

08010f80 <__match>:
 8010f80:	b530      	push	{r4, r5, lr}
 8010f82:	6803      	ldr	r3, [r0, #0]
 8010f84:	3301      	adds	r3, #1
 8010f86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f8a:	b914      	cbnz	r4, 8010f92 <__match+0x12>
 8010f8c:	6003      	str	r3, [r0, #0]
 8010f8e:	2001      	movs	r0, #1
 8010f90:	bd30      	pop	{r4, r5, pc}
 8010f92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f96:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010f9a:	2d19      	cmp	r5, #25
 8010f9c:	bf98      	it	ls
 8010f9e:	3220      	addls	r2, #32
 8010fa0:	42a2      	cmp	r2, r4
 8010fa2:	d0f0      	beq.n	8010f86 <__match+0x6>
 8010fa4:	2000      	movs	r0, #0
 8010fa6:	e7f3      	b.n	8010f90 <__match+0x10>

08010fa8 <__hexnan>:
 8010fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fac:	680b      	ldr	r3, [r1, #0]
 8010fae:	6801      	ldr	r1, [r0, #0]
 8010fb0:	115e      	asrs	r6, r3, #5
 8010fb2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010fb6:	f013 031f 	ands.w	r3, r3, #31
 8010fba:	b087      	sub	sp, #28
 8010fbc:	bf18      	it	ne
 8010fbe:	3604      	addne	r6, #4
 8010fc0:	2500      	movs	r5, #0
 8010fc2:	1f37      	subs	r7, r6, #4
 8010fc4:	4682      	mov	sl, r0
 8010fc6:	4690      	mov	r8, r2
 8010fc8:	9301      	str	r3, [sp, #4]
 8010fca:	f846 5c04 	str.w	r5, [r6, #-4]
 8010fce:	46b9      	mov	r9, r7
 8010fd0:	463c      	mov	r4, r7
 8010fd2:	9502      	str	r5, [sp, #8]
 8010fd4:	46ab      	mov	fp, r5
 8010fd6:	784a      	ldrb	r2, [r1, #1]
 8010fd8:	1c4b      	adds	r3, r1, #1
 8010fda:	9303      	str	r3, [sp, #12]
 8010fdc:	b342      	cbz	r2, 8011030 <__hexnan+0x88>
 8010fde:	4610      	mov	r0, r2
 8010fe0:	9105      	str	r1, [sp, #20]
 8010fe2:	9204      	str	r2, [sp, #16]
 8010fe4:	f7ff fd5e 	bl	8010aa4 <__hexdig_fun>
 8010fe8:	2800      	cmp	r0, #0
 8010fea:	d14f      	bne.n	801108c <__hexnan+0xe4>
 8010fec:	9a04      	ldr	r2, [sp, #16]
 8010fee:	9905      	ldr	r1, [sp, #20]
 8010ff0:	2a20      	cmp	r2, #32
 8010ff2:	d818      	bhi.n	8011026 <__hexnan+0x7e>
 8010ff4:	9b02      	ldr	r3, [sp, #8]
 8010ff6:	459b      	cmp	fp, r3
 8010ff8:	dd13      	ble.n	8011022 <__hexnan+0x7a>
 8010ffa:	454c      	cmp	r4, r9
 8010ffc:	d206      	bcs.n	801100c <__hexnan+0x64>
 8010ffe:	2d07      	cmp	r5, #7
 8011000:	dc04      	bgt.n	801100c <__hexnan+0x64>
 8011002:	462a      	mov	r2, r5
 8011004:	4649      	mov	r1, r9
 8011006:	4620      	mov	r0, r4
 8011008:	f7ff ffa8 	bl	8010f5c <L_shift>
 801100c:	4544      	cmp	r4, r8
 801100e:	d950      	bls.n	80110b2 <__hexnan+0x10a>
 8011010:	2300      	movs	r3, #0
 8011012:	f1a4 0904 	sub.w	r9, r4, #4
 8011016:	f844 3c04 	str.w	r3, [r4, #-4]
 801101a:	f8cd b008 	str.w	fp, [sp, #8]
 801101e:	464c      	mov	r4, r9
 8011020:	461d      	mov	r5, r3
 8011022:	9903      	ldr	r1, [sp, #12]
 8011024:	e7d7      	b.n	8010fd6 <__hexnan+0x2e>
 8011026:	2a29      	cmp	r2, #41	; 0x29
 8011028:	d156      	bne.n	80110d8 <__hexnan+0x130>
 801102a:	3102      	adds	r1, #2
 801102c:	f8ca 1000 	str.w	r1, [sl]
 8011030:	f1bb 0f00 	cmp.w	fp, #0
 8011034:	d050      	beq.n	80110d8 <__hexnan+0x130>
 8011036:	454c      	cmp	r4, r9
 8011038:	d206      	bcs.n	8011048 <__hexnan+0xa0>
 801103a:	2d07      	cmp	r5, #7
 801103c:	dc04      	bgt.n	8011048 <__hexnan+0xa0>
 801103e:	462a      	mov	r2, r5
 8011040:	4649      	mov	r1, r9
 8011042:	4620      	mov	r0, r4
 8011044:	f7ff ff8a 	bl	8010f5c <L_shift>
 8011048:	4544      	cmp	r4, r8
 801104a:	d934      	bls.n	80110b6 <__hexnan+0x10e>
 801104c:	f1a8 0204 	sub.w	r2, r8, #4
 8011050:	4623      	mov	r3, r4
 8011052:	f853 1b04 	ldr.w	r1, [r3], #4
 8011056:	f842 1f04 	str.w	r1, [r2, #4]!
 801105a:	429f      	cmp	r7, r3
 801105c:	d2f9      	bcs.n	8011052 <__hexnan+0xaa>
 801105e:	1b3b      	subs	r3, r7, r4
 8011060:	f023 0303 	bic.w	r3, r3, #3
 8011064:	3304      	adds	r3, #4
 8011066:	3401      	adds	r4, #1
 8011068:	3e03      	subs	r6, #3
 801106a:	42b4      	cmp	r4, r6
 801106c:	bf88      	it	hi
 801106e:	2304      	movhi	r3, #4
 8011070:	4443      	add	r3, r8
 8011072:	2200      	movs	r2, #0
 8011074:	f843 2b04 	str.w	r2, [r3], #4
 8011078:	429f      	cmp	r7, r3
 801107a:	d2fb      	bcs.n	8011074 <__hexnan+0xcc>
 801107c:	683b      	ldr	r3, [r7, #0]
 801107e:	b91b      	cbnz	r3, 8011088 <__hexnan+0xe0>
 8011080:	4547      	cmp	r7, r8
 8011082:	d127      	bne.n	80110d4 <__hexnan+0x12c>
 8011084:	2301      	movs	r3, #1
 8011086:	603b      	str	r3, [r7, #0]
 8011088:	2005      	movs	r0, #5
 801108a:	e026      	b.n	80110da <__hexnan+0x132>
 801108c:	3501      	adds	r5, #1
 801108e:	2d08      	cmp	r5, #8
 8011090:	f10b 0b01 	add.w	fp, fp, #1
 8011094:	dd06      	ble.n	80110a4 <__hexnan+0xfc>
 8011096:	4544      	cmp	r4, r8
 8011098:	d9c3      	bls.n	8011022 <__hexnan+0x7a>
 801109a:	2300      	movs	r3, #0
 801109c:	f844 3c04 	str.w	r3, [r4, #-4]
 80110a0:	2501      	movs	r5, #1
 80110a2:	3c04      	subs	r4, #4
 80110a4:	6822      	ldr	r2, [r4, #0]
 80110a6:	f000 000f 	and.w	r0, r0, #15
 80110aa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80110ae:	6022      	str	r2, [r4, #0]
 80110b0:	e7b7      	b.n	8011022 <__hexnan+0x7a>
 80110b2:	2508      	movs	r5, #8
 80110b4:	e7b5      	b.n	8011022 <__hexnan+0x7a>
 80110b6:	9b01      	ldr	r3, [sp, #4]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d0df      	beq.n	801107c <__hexnan+0xd4>
 80110bc:	f04f 32ff 	mov.w	r2, #4294967295
 80110c0:	f1c3 0320 	rsb	r3, r3, #32
 80110c4:	fa22 f303 	lsr.w	r3, r2, r3
 80110c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80110cc:	401a      	ands	r2, r3
 80110ce:	f846 2c04 	str.w	r2, [r6, #-4]
 80110d2:	e7d3      	b.n	801107c <__hexnan+0xd4>
 80110d4:	3f04      	subs	r7, #4
 80110d6:	e7d1      	b.n	801107c <__hexnan+0xd4>
 80110d8:	2004      	movs	r0, #4
 80110da:	b007      	add	sp, #28
 80110dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080110e0 <_localeconv_r>:
 80110e0:	4800      	ldr	r0, [pc, #0]	; (80110e4 <_localeconv_r+0x4>)
 80110e2:	4770      	bx	lr
 80110e4:	20000188 	.word	0x20000188

080110e8 <_lseek_r>:
 80110e8:	b538      	push	{r3, r4, r5, lr}
 80110ea:	4d07      	ldr	r5, [pc, #28]	; (8011108 <_lseek_r+0x20>)
 80110ec:	4604      	mov	r4, r0
 80110ee:	4608      	mov	r0, r1
 80110f0:	4611      	mov	r1, r2
 80110f2:	2200      	movs	r2, #0
 80110f4:	602a      	str	r2, [r5, #0]
 80110f6:	461a      	mov	r2, r3
 80110f8:	f7f1 ff8a 	bl	8003010 <_lseek>
 80110fc:	1c43      	adds	r3, r0, #1
 80110fe:	d102      	bne.n	8011106 <_lseek_r+0x1e>
 8011100:	682b      	ldr	r3, [r5, #0]
 8011102:	b103      	cbz	r3, 8011106 <_lseek_r+0x1e>
 8011104:	6023      	str	r3, [r4, #0]
 8011106:	bd38      	pop	{r3, r4, r5, pc}
 8011108:	2000572c 	.word	0x2000572c

0801110c <__ascii_mbtowc>:
 801110c:	b082      	sub	sp, #8
 801110e:	b901      	cbnz	r1, 8011112 <__ascii_mbtowc+0x6>
 8011110:	a901      	add	r1, sp, #4
 8011112:	b142      	cbz	r2, 8011126 <__ascii_mbtowc+0x1a>
 8011114:	b14b      	cbz	r3, 801112a <__ascii_mbtowc+0x1e>
 8011116:	7813      	ldrb	r3, [r2, #0]
 8011118:	600b      	str	r3, [r1, #0]
 801111a:	7812      	ldrb	r2, [r2, #0]
 801111c:	1e10      	subs	r0, r2, #0
 801111e:	bf18      	it	ne
 8011120:	2001      	movne	r0, #1
 8011122:	b002      	add	sp, #8
 8011124:	4770      	bx	lr
 8011126:	4610      	mov	r0, r2
 8011128:	e7fb      	b.n	8011122 <__ascii_mbtowc+0x16>
 801112a:	f06f 0001 	mvn.w	r0, #1
 801112e:	e7f8      	b.n	8011122 <__ascii_mbtowc+0x16>

08011130 <__malloc_lock>:
 8011130:	4801      	ldr	r0, [pc, #4]	; (8011138 <__malloc_lock+0x8>)
 8011132:	f7fc bcd8 	b.w	800dae6 <__retarget_lock_acquire_recursive>
 8011136:	bf00      	nop
 8011138:	20005724 	.word	0x20005724

0801113c <__malloc_unlock>:
 801113c:	4801      	ldr	r0, [pc, #4]	; (8011144 <__malloc_unlock+0x8>)
 801113e:	f7fc bcd3 	b.w	800dae8 <__retarget_lock_release_recursive>
 8011142:	bf00      	nop
 8011144:	20005724 	.word	0x20005724

08011148 <_Balloc>:
 8011148:	b570      	push	{r4, r5, r6, lr}
 801114a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801114c:	4604      	mov	r4, r0
 801114e:	460d      	mov	r5, r1
 8011150:	b976      	cbnz	r6, 8011170 <_Balloc+0x28>
 8011152:	2010      	movs	r0, #16
 8011154:	f7fc fcca 	bl	800daec <malloc>
 8011158:	4602      	mov	r2, r0
 801115a:	6260      	str	r0, [r4, #36]	; 0x24
 801115c:	b920      	cbnz	r0, 8011168 <_Balloc+0x20>
 801115e:	4b18      	ldr	r3, [pc, #96]	; (80111c0 <_Balloc+0x78>)
 8011160:	4818      	ldr	r0, [pc, #96]	; (80111c4 <_Balloc+0x7c>)
 8011162:	2166      	movs	r1, #102	; 0x66
 8011164:	f7fe fcd2 	bl	800fb0c <__assert_func>
 8011168:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801116c:	6006      	str	r6, [r0, #0]
 801116e:	60c6      	str	r6, [r0, #12]
 8011170:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011172:	68f3      	ldr	r3, [r6, #12]
 8011174:	b183      	cbz	r3, 8011198 <_Balloc+0x50>
 8011176:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011178:	68db      	ldr	r3, [r3, #12]
 801117a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801117e:	b9b8      	cbnz	r0, 80111b0 <_Balloc+0x68>
 8011180:	2101      	movs	r1, #1
 8011182:	fa01 f605 	lsl.w	r6, r1, r5
 8011186:	1d72      	adds	r2, r6, #5
 8011188:	0092      	lsls	r2, r2, #2
 801118a:	4620      	mov	r0, r4
 801118c:	f000 fc97 	bl	8011abe <_calloc_r>
 8011190:	b160      	cbz	r0, 80111ac <_Balloc+0x64>
 8011192:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011196:	e00e      	b.n	80111b6 <_Balloc+0x6e>
 8011198:	2221      	movs	r2, #33	; 0x21
 801119a:	2104      	movs	r1, #4
 801119c:	4620      	mov	r0, r4
 801119e:	f000 fc8e 	bl	8011abe <_calloc_r>
 80111a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80111a4:	60f0      	str	r0, [r6, #12]
 80111a6:	68db      	ldr	r3, [r3, #12]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d1e4      	bne.n	8011176 <_Balloc+0x2e>
 80111ac:	2000      	movs	r0, #0
 80111ae:	bd70      	pop	{r4, r5, r6, pc}
 80111b0:	6802      	ldr	r2, [r0, #0]
 80111b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80111b6:	2300      	movs	r3, #0
 80111b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80111bc:	e7f7      	b.n	80111ae <_Balloc+0x66>
 80111be:	bf00      	nop
 80111c0:	08013302 	.word	0x08013302
 80111c4:	08013408 	.word	0x08013408

080111c8 <_Bfree>:
 80111c8:	b570      	push	{r4, r5, r6, lr}
 80111ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80111cc:	4605      	mov	r5, r0
 80111ce:	460c      	mov	r4, r1
 80111d0:	b976      	cbnz	r6, 80111f0 <_Bfree+0x28>
 80111d2:	2010      	movs	r0, #16
 80111d4:	f7fc fc8a 	bl	800daec <malloc>
 80111d8:	4602      	mov	r2, r0
 80111da:	6268      	str	r0, [r5, #36]	; 0x24
 80111dc:	b920      	cbnz	r0, 80111e8 <_Bfree+0x20>
 80111de:	4b09      	ldr	r3, [pc, #36]	; (8011204 <_Bfree+0x3c>)
 80111e0:	4809      	ldr	r0, [pc, #36]	; (8011208 <_Bfree+0x40>)
 80111e2:	218a      	movs	r1, #138	; 0x8a
 80111e4:	f7fe fc92 	bl	800fb0c <__assert_func>
 80111e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80111ec:	6006      	str	r6, [r0, #0]
 80111ee:	60c6      	str	r6, [r0, #12]
 80111f0:	b13c      	cbz	r4, 8011202 <_Bfree+0x3a>
 80111f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80111f4:	6862      	ldr	r2, [r4, #4]
 80111f6:	68db      	ldr	r3, [r3, #12]
 80111f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80111fc:	6021      	str	r1, [r4, #0]
 80111fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011202:	bd70      	pop	{r4, r5, r6, pc}
 8011204:	08013302 	.word	0x08013302
 8011208:	08013408 	.word	0x08013408

0801120c <__multadd>:
 801120c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011210:	690e      	ldr	r6, [r1, #16]
 8011212:	4607      	mov	r7, r0
 8011214:	4698      	mov	r8, r3
 8011216:	460c      	mov	r4, r1
 8011218:	f101 0014 	add.w	r0, r1, #20
 801121c:	2300      	movs	r3, #0
 801121e:	6805      	ldr	r5, [r0, #0]
 8011220:	b2a9      	uxth	r1, r5
 8011222:	fb02 8101 	mla	r1, r2, r1, r8
 8011226:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801122a:	0c2d      	lsrs	r5, r5, #16
 801122c:	fb02 c505 	mla	r5, r2, r5, ip
 8011230:	b289      	uxth	r1, r1
 8011232:	3301      	adds	r3, #1
 8011234:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8011238:	429e      	cmp	r6, r3
 801123a:	f840 1b04 	str.w	r1, [r0], #4
 801123e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8011242:	dcec      	bgt.n	801121e <__multadd+0x12>
 8011244:	f1b8 0f00 	cmp.w	r8, #0
 8011248:	d022      	beq.n	8011290 <__multadd+0x84>
 801124a:	68a3      	ldr	r3, [r4, #8]
 801124c:	42b3      	cmp	r3, r6
 801124e:	dc19      	bgt.n	8011284 <__multadd+0x78>
 8011250:	6861      	ldr	r1, [r4, #4]
 8011252:	4638      	mov	r0, r7
 8011254:	3101      	adds	r1, #1
 8011256:	f7ff ff77 	bl	8011148 <_Balloc>
 801125a:	4605      	mov	r5, r0
 801125c:	b928      	cbnz	r0, 801126a <__multadd+0x5e>
 801125e:	4602      	mov	r2, r0
 8011260:	4b0d      	ldr	r3, [pc, #52]	; (8011298 <__multadd+0x8c>)
 8011262:	480e      	ldr	r0, [pc, #56]	; (801129c <__multadd+0x90>)
 8011264:	21b5      	movs	r1, #181	; 0xb5
 8011266:	f7fe fc51 	bl	800fb0c <__assert_func>
 801126a:	6922      	ldr	r2, [r4, #16]
 801126c:	3202      	adds	r2, #2
 801126e:	f104 010c 	add.w	r1, r4, #12
 8011272:	0092      	lsls	r2, r2, #2
 8011274:	300c      	adds	r0, #12
 8011276:	f7fc fc49 	bl	800db0c <memcpy>
 801127a:	4621      	mov	r1, r4
 801127c:	4638      	mov	r0, r7
 801127e:	f7ff ffa3 	bl	80111c8 <_Bfree>
 8011282:	462c      	mov	r4, r5
 8011284:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8011288:	3601      	adds	r6, #1
 801128a:	f8c3 8014 	str.w	r8, [r3, #20]
 801128e:	6126      	str	r6, [r4, #16]
 8011290:	4620      	mov	r0, r4
 8011292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011296:	bf00      	nop
 8011298:	08013378 	.word	0x08013378
 801129c:	08013408 	.word	0x08013408

080112a0 <__s2b>:
 80112a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112a4:	460c      	mov	r4, r1
 80112a6:	4615      	mov	r5, r2
 80112a8:	461f      	mov	r7, r3
 80112aa:	2209      	movs	r2, #9
 80112ac:	3308      	adds	r3, #8
 80112ae:	4606      	mov	r6, r0
 80112b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80112b4:	2100      	movs	r1, #0
 80112b6:	2201      	movs	r2, #1
 80112b8:	429a      	cmp	r2, r3
 80112ba:	db09      	blt.n	80112d0 <__s2b+0x30>
 80112bc:	4630      	mov	r0, r6
 80112be:	f7ff ff43 	bl	8011148 <_Balloc>
 80112c2:	b940      	cbnz	r0, 80112d6 <__s2b+0x36>
 80112c4:	4602      	mov	r2, r0
 80112c6:	4b19      	ldr	r3, [pc, #100]	; (801132c <__s2b+0x8c>)
 80112c8:	4819      	ldr	r0, [pc, #100]	; (8011330 <__s2b+0x90>)
 80112ca:	21ce      	movs	r1, #206	; 0xce
 80112cc:	f7fe fc1e 	bl	800fb0c <__assert_func>
 80112d0:	0052      	lsls	r2, r2, #1
 80112d2:	3101      	adds	r1, #1
 80112d4:	e7f0      	b.n	80112b8 <__s2b+0x18>
 80112d6:	9b08      	ldr	r3, [sp, #32]
 80112d8:	6143      	str	r3, [r0, #20]
 80112da:	2d09      	cmp	r5, #9
 80112dc:	f04f 0301 	mov.w	r3, #1
 80112e0:	6103      	str	r3, [r0, #16]
 80112e2:	dd16      	ble.n	8011312 <__s2b+0x72>
 80112e4:	f104 0909 	add.w	r9, r4, #9
 80112e8:	46c8      	mov	r8, r9
 80112ea:	442c      	add	r4, r5
 80112ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 80112f0:	4601      	mov	r1, r0
 80112f2:	3b30      	subs	r3, #48	; 0x30
 80112f4:	220a      	movs	r2, #10
 80112f6:	4630      	mov	r0, r6
 80112f8:	f7ff ff88 	bl	801120c <__multadd>
 80112fc:	45a0      	cmp	r8, r4
 80112fe:	d1f5      	bne.n	80112ec <__s2b+0x4c>
 8011300:	f1a5 0408 	sub.w	r4, r5, #8
 8011304:	444c      	add	r4, r9
 8011306:	1b2d      	subs	r5, r5, r4
 8011308:	1963      	adds	r3, r4, r5
 801130a:	42bb      	cmp	r3, r7
 801130c:	db04      	blt.n	8011318 <__s2b+0x78>
 801130e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011312:	340a      	adds	r4, #10
 8011314:	2509      	movs	r5, #9
 8011316:	e7f6      	b.n	8011306 <__s2b+0x66>
 8011318:	f814 3b01 	ldrb.w	r3, [r4], #1
 801131c:	4601      	mov	r1, r0
 801131e:	3b30      	subs	r3, #48	; 0x30
 8011320:	220a      	movs	r2, #10
 8011322:	4630      	mov	r0, r6
 8011324:	f7ff ff72 	bl	801120c <__multadd>
 8011328:	e7ee      	b.n	8011308 <__s2b+0x68>
 801132a:	bf00      	nop
 801132c:	08013378 	.word	0x08013378
 8011330:	08013408 	.word	0x08013408

08011334 <__hi0bits>:
 8011334:	0c03      	lsrs	r3, r0, #16
 8011336:	041b      	lsls	r3, r3, #16
 8011338:	b9d3      	cbnz	r3, 8011370 <__hi0bits+0x3c>
 801133a:	0400      	lsls	r0, r0, #16
 801133c:	2310      	movs	r3, #16
 801133e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011342:	bf04      	itt	eq
 8011344:	0200      	lsleq	r0, r0, #8
 8011346:	3308      	addeq	r3, #8
 8011348:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801134c:	bf04      	itt	eq
 801134e:	0100      	lsleq	r0, r0, #4
 8011350:	3304      	addeq	r3, #4
 8011352:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011356:	bf04      	itt	eq
 8011358:	0080      	lsleq	r0, r0, #2
 801135a:	3302      	addeq	r3, #2
 801135c:	2800      	cmp	r0, #0
 801135e:	db05      	blt.n	801136c <__hi0bits+0x38>
 8011360:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011364:	f103 0301 	add.w	r3, r3, #1
 8011368:	bf08      	it	eq
 801136a:	2320      	moveq	r3, #32
 801136c:	4618      	mov	r0, r3
 801136e:	4770      	bx	lr
 8011370:	2300      	movs	r3, #0
 8011372:	e7e4      	b.n	801133e <__hi0bits+0xa>

08011374 <__lo0bits>:
 8011374:	6803      	ldr	r3, [r0, #0]
 8011376:	f013 0207 	ands.w	r2, r3, #7
 801137a:	4601      	mov	r1, r0
 801137c:	d00b      	beq.n	8011396 <__lo0bits+0x22>
 801137e:	07da      	lsls	r2, r3, #31
 8011380:	d424      	bmi.n	80113cc <__lo0bits+0x58>
 8011382:	0798      	lsls	r0, r3, #30
 8011384:	bf49      	itett	mi
 8011386:	085b      	lsrmi	r3, r3, #1
 8011388:	089b      	lsrpl	r3, r3, #2
 801138a:	2001      	movmi	r0, #1
 801138c:	600b      	strmi	r3, [r1, #0]
 801138e:	bf5c      	itt	pl
 8011390:	600b      	strpl	r3, [r1, #0]
 8011392:	2002      	movpl	r0, #2
 8011394:	4770      	bx	lr
 8011396:	b298      	uxth	r0, r3
 8011398:	b9b0      	cbnz	r0, 80113c8 <__lo0bits+0x54>
 801139a:	0c1b      	lsrs	r3, r3, #16
 801139c:	2010      	movs	r0, #16
 801139e:	f013 0fff 	tst.w	r3, #255	; 0xff
 80113a2:	bf04      	itt	eq
 80113a4:	0a1b      	lsreq	r3, r3, #8
 80113a6:	3008      	addeq	r0, #8
 80113a8:	071a      	lsls	r2, r3, #28
 80113aa:	bf04      	itt	eq
 80113ac:	091b      	lsreq	r3, r3, #4
 80113ae:	3004      	addeq	r0, #4
 80113b0:	079a      	lsls	r2, r3, #30
 80113b2:	bf04      	itt	eq
 80113b4:	089b      	lsreq	r3, r3, #2
 80113b6:	3002      	addeq	r0, #2
 80113b8:	07da      	lsls	r2, r3, #31
 80113ba:	d403      	bmi.n	80113c4 <__lo0bits+0x50>
 80113bc:	085b      	lsrs	r3, r3, #1
 80113be:	f100 0001 	add.w	r0, r0, #1
 80113c2:	d005      	beq.n	80113d0 <__lo0bits+0x5c>
 80113c4:	600b      	str	r3, [r1, #0]
 80113c6:	4770      	bx	lr
 80113c8:	4610      	mov	r0, r2
 80113ca:	e7e8      	b.n	801139e <__lo0bits+0x2a>
 80113cc:	2000      	movs	r0, #0
 80113ce:	4770      	bx	lr
 80113d0:	2020      	movs	r0, #32
 80113d2:	4770      	bx	lr

080113d4 <__i2b>:
 80113d4:	b510      	push	{r4, lr}
 80113d6:	460c      	mov	r4, r1
 80113d8:	2101      	movs	r1, #1
 80113da:	f7ff feb5 	bl	8011148 <_Balloc>
 80113de:	4602      	mov	r2, r0
 80113e0:	b928      	cbnz	r0, 80113ee <__i2b+0x1a>
 80113e2:	4b05      	ldr	r3, [pc, #20]	; (80113f8 <__i2b+0x24>)
 80113e4:	4805      	ldr	r0, [pc, #20]	; (80113fc <__i2b+0x28>)
 80113e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80113ea:	f7fe fb8f 	bl	800fb0c <__assert_func>
 80113ee:	2301      	movs	r3, #1
 80113f0:	6144      	str	r4, [r0, #20]
 80113f2:	6103      	str	r3, [r0, #16]
 80113f4:	bd10      	pop	{r4, pc}
 80113f6:	bf00      	nop
 80113f8:	08013378 	.word	0x08013378
 80113fc:	08013408 	.word	0x08013408

08011400 <__multiply>:
 8011400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011404:	4614      	mov	r4, r2
 8011406:	690a      	ldr	r2, [r1, #16]
 8011408:	6923      	ldr	r3, [r4, #16]
 801140a:	429a      	cmp	r2, r3
 801140c:	bfb8      	it	lt
 801140e:	460b      	movlt	r3, r1
 8011410:	460d      	mov	r5, r1
 8011412:	bfbc      	itt	lt
 8011414:	4625      	movlt	r5, r4
 8011416:	461c      	movlt	r4, r3
 8011418:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801141c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011420:	68ab      	ldr	r3, [r5, #8]
 8011422:	6869      	ldr	r1, [r5, #4]
 8011424:	eb0a 0709 	add.w	r7, sl, r9
 8011428:	42bb      	cmp	r3, r7
 801142a:	b085      	sub	sp, #20
 801142c:	bfb8      	it	lt
 801142e:	3101      	addlt	r1, #1
 8011430:	f7ff fe8a 	bl	8011148 <_Balloc>
 8011434:	b930      	cbnz	r0, 8011444 <__multiply+0x44>
 8011436:	4602      	mov	r2, r0
 8011438:	4b42      	ldr	r3, [pc, #264]	; (8011544 <__multiply+0x144>)
 801143a:	4843      	ldr	r0, [pc, #268]	; (8011548 <__multiply+0x148>)
 801143c:	f240 115d 	movw	r1, #349	; 0x15d
 8011440:	f7fe fb64 	bl	800fb0c <__assert_func>
 8011444:	f100 0614 	add.w	r6, r0, #20
 8011448:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801144c:	4633      	mov	r3, r6
 801144e:	2200      	movs	r2, #0
 8011450:	4543      	cmp	r3, r8
 8011452:	d31e      	bcc.n	8011492 <__multiply+0x92>
 8011454:	f105 0c14 	add.w	ip, r5, #20
 8011458:	f104 0314 	add.w	r3, r4, #20
 801145c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8011460:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8011464:	9202      	str	r2, [sp, #8]
 8011466:	ebac 0205 	sub.w	r2, ip, r5
 801146a:	3a15      	subs	r2, #21
 801146c:	f022 0203 	bic.w	r2, r2, #3
 8011470:	3204      	adds	r2, #4
 8011472:	f105 0115 	add.w	r1, r5, #21
 8011476:	458c      	cmp	ip, r1
 8011478:	bf38      	it	cc
 801147a:	2204      	movcc	r2, #4
 801147c:	9201      	str	r2, [sp, #4]
 801147e:	9a02      	ldr	r2, [sp, #8]
 8011480:	9303      	str	r3, [sp, #12]
 8011482:	429a      	cmp	r2, r3
 8011484:	d808      	bhi.n	8011498 <__multiply+0x98>
 8011486:	2f00      	cmp	r7, #0
 8011488:	dc55      	bgt.n	8011536 <__multiply+0x136>
 801148a:	6107      	str	r7, [r0, #16]
 801148c:	b005      	add	sp, #20
 801148e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011492:	f843 2b04 	str.w	r2, [r3], #4
 8011496:	e7db      	b.n	8011450 <__multiply+0x50>
 8011498:	f8b3 a000 	ldrh.w	sl, [r3]
 801149c:	f1ba 0f00 	cmp.w	sl, #0
 80114a0:	d020      	beq.n	80114e4 <__multiply+0xe4>
 80114a2:	f105 0e14 	add.w	lr, r5, #20
 80114a6:	46b1      	mov	r9, r6
 80114a8:	2200      	movs	r2, #0
 80114aa:	f85e 4b04 	ldr.w	r4, [lr], #4
 80114ae:	f8d9 b000 	ldr.w	fp, [r9]
 80114b2:	b2a1      	uxth	r1, r4
 80114b4:	fa1f fb8b 	uxth.w	fp, fp
 80114b8:	fb0a b101 	mla	r1, sl, r1, fp
 80114bc:	4411      	add	r1, r2
 80114be:	f8d9 2000 	ldr.w	r2, [r9]
 80114c2:	0c24      	lsrs	r4, r4, #16
 80114c4:	0c12      	lsrs	r2, r2, #16
 80114c6:	fb0a 2404 	mla	r4, sl, r4, r2
 80114ca:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80114ce:	b289      	uxth	r1, r1
 80114d0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80114d4:	45f4      	cmp	ip, lr
 80114d6:	f849 1b04 	str.w	r1, [r9], #4
 80114da:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80114de:	d8e4      	bhi.n	80114aa <__multiply+0xaa>
 80114e0:	9901      	ldr	r1, [sp, #4]
 80114e2:	5072      	str	r2, [r6, r1]
 80114e4:	9a03      	ldr	r2, [sp, #12]
 80114e6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80114ea:	3304      	adds	r3, #4
 80114ec:	f1b9 0f00 	cmp.w	r9, #0
 80114f0:	d01f      	beq.n	8011532 <__multiply+0x132>
 80114f2:	6834      	ldr	r4, [r6, #0]
 80114f4:	f105 0114 	add.w	r1, r5, #20
 80114f8:	46b6      	mov	lr, r6
 80114fa:	f04f 0a00 	mov.w	sl, #0
 80114fe:	880a      	ldrh	r2, [r1, #0]
 8011500:	f8be b002 	ldrh.w	fp, [lr, #2]
 8011504:	fb09 b202 	mla	r2, r9, r2, fp
 8011508:	4492      	add	sl, r2
 801150a:	b2a4      	uxth	r4, r4
 801150c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8011510:	f84e 4b04 	str.w	r4, [lr], #4
 8011514:	f851 4b04 	ldr.w	r4, [r1], #4
 8011518:	f8be 2000 	ldrh.w	r2, [lr]
 801151c:	0c24      	lsrs	r4, r4, #16
 801151e:	fb09 2404 	mla	r4, r9, r4, r2
 8011522:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8011526:	458c      	cmp	ip, r1
 8011528:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801152c:	d8e7      	bhi.n	80114fe <__multiply+0xfe>
 801152e:	9a01      	ldr	r2, [sp, #4]
 8011530:	50b4      	str	r4, [r6, r2]
 8011532:	3604      	adds	r6, #4
 8011534:	e7a3      	b.n	801147e <__multiply+0x7e>
 8011536:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801153a:	2b00      	cmp	r3, #0
 801153c:	d1a5      	bne.n	801148a <__multiply+0x8a>
 801153e:	3f01      	subs	r7, #1
 8011540:	e7a1      	b.n	8011486 <__multiply+0x86>
 8011542:	bf00      	nop
 8011544:	08013378 	.word	0x08013378
 8011548:	08013408 	.word	0x08013408

0801154c <__pow5mult>:
 801154c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011550:	4615      	mov	r5, r2
 8011552:	f012 0203 	ands.w	r2, r2, #3
 8011556:	4606      	mov	r6, r0
 8011558:	460f      	mov	r7, r1
 801155a:	d007      	beq.n	801156c <__pow5mult+0x20>
 801155c:	4c25      	ldr	r4, [pc, #148]	; (80115f4 <__pow5mult+0xa8>)
 801155e:	3a01      	subs	r2, #1
 8011560:	2300      	movs	r3, #0
 8011562:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011566:	f7ff fe51 	bl	801120c <__multadd>
 801156a:	4607      	mov	r7, r0
 801156c:	10ad      	asrs	r5, r5, #2
 801156e:	d03d      	beq.n	80115ec <__pow5mult+0xa0>
 8011570:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011572:	b97c      	cbnz	r4, 8011594 <__pow5mult+0x48>
 8011574:	2010      	movs	r0, #16
 8011576:	f7fc fab9 	bl	800daec <malloc>
 801157a:	4602      	mov	r2, r0
 801157c:	6270      	str	r0, [r6, #36]	; 0x24
 801157e:	b928      	cbnz	r0, 801158c <__pow5mult+0x40>
 8011580:	4b1d      	ldr	r3, [pc, #116]	; (80115f8 <__pow5mult+0xac>)
 8011582:	481e      	ldr	r0, [pc, #120]	; (80115fc <__pow5mult+0xb0>)
 8011584:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011588:	f7fe fac0 	bl	800fb0c <__assert_func>
 801158c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011590:	6004      	str	r4, [r0, #0]
 8011592:	60c4      	str	r4, [r0, #12]
 8011594:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011598:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801159c:	b94c      	cbnz	r4, 80115b2 <__pow5mult+0x66>
 801159e:	f240 2171 	movw	r1, #625	; 0x271
 80115a2:	4630      	mov	r0, r6
 80115a4:	f7ff ff16 	bl	80113d4 <__i2b>
 80115a8:	2300      	movs	r3, #0
 80115aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80115ae:	4604      	mov	r4, r0
 80115b0:	6003      	str	r3, [r0, #0]
 80115b2:	f04f 0900 	mov.w	r9, #0
 80115b6:	07eb      	lsls	r3, r5, #31
 80115b8:	d50a      	bpl.n	80115d0 <__pow5mult+0x84>
 80115ba:	4639      	mov	r1, r7
 80115bc:	4622      	mov	r2, r4
 80115be:	4630      	mov	r0, r6
 80115c0:	f7ff ff1e 	bl	8011400 <__multiply>
 80115c4:	4639      	mov	r1, r7
 80115c6:	4680      	mov	r8, r0
 80115c8:	4630      	mov	r0, r6
 80115ca:	f7ff fdfd 	bl	80111c8 <_Bfree>
 80115ce:	4647      	mov	r7, r8
 80115d0:	106d      	asrs	r5, r5, #1
 80115d2:	d00b      	beq.n	80115ec <__pow5mult+0xa0>
 80115d4:	6820      	ldr	r0, [r4, #0]
 80115d6:	b938      	cbnz	r0, 80115e8 <__pow5mult+0x9c>
 80115d8:	4622      	mov	r2, r4
 80115da:	4621      	mov	r1, r4
 80115dc:	4630      	mov	r0, r6
 80115de:	f7ff ff0f 	bl	8011400 <__multiply>
 80115e2:	6020      	str	r0, [r4, #0]
 80115e4:	f8c0 9000 	str.w	r9, [r0]
 80115e8:	4604      	mov	r4, r0
 80115ea:	e7e4      	b.n	80115b6 <__pow5mult+0x6a>
 80115ec:	4638      	mov	r0, r7
 80115ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115f2:	bf00      	nop
 80115f4:	08013558 	.word	0x08013558
 80115f8:	08013302 	.word	0x08013302
 80115fc:	08013408 	.word	0x08013408

08011600 <__lshift>:
 8011600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011604:	460c      	mov	r4, r1
 8011606:	6849      	ldr	r1, [r1, #4]
 8011608:	6923      	ldr	r3, [r4, #16]
 801160a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801160e:	68a3      	ldr	r3, [r4, #8]
 8011610:	4607      	mov	r7, r0
 8011612:	4691      	mov	r9, r2
 8011614:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011618:	f108 0601 	add.w	r6, r8, #1
 801161c:	42b3      	cmp	r3, r6
 801161e:	db0b      	blt.n	8011638 <__lshift+0x38>
 8011620:	4638      	mov	r0, r7
 8011622:	f7ff fd91 	bl	8011148 <_Balloc>
 8011626:	4605      	mov	r5, r0
 8011628:	b948      	cbnz	r0, 801163e <__lshift+0x3e>
 801162a:	4602      	mov	r2, r0
 801162c:	4b28      	ldr	r3, [pc, #160]	; (80116d0 <__lshift+0xd0>)
 801162e:	4829      	ldr	r0, [pc, #164]	; (80116d4 <__lshift+0xd4>)
 8011630:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011634:	f7fe fa6a 	bl	800fb0c <__assert_func>
 8011638:	3101      	adds	r1, #1
 801163a:	005b      	lsls	r3, r3, #1
 801163c:	e7ee      	b.n	801161c <__lshift+0x1c>
 801163e:	2300      	movs	r3, #0
 8011640:	f100 0114 	add.w	r1, r0, #20
 8011644:	f100 0210 	add.w	r2, r0, #16
 8011648:	4618      	mov	r0, r3
 801164a:	4553      	cmp	r3, sl
 801164c:	db33      	blt.n	80116b6 <__lshift+0xb6>
 801164e:	6920      	ldr	r0, [r4, #16]
 8011650:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011654:	f104 0314 	add.w	r3, r4, #20
 8011658:	f019 091f 	ands.w	r9, r9, #31
 801165c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011660:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011664:	d02b      	beq.n	80116be <__lshift+0xbe>
 8011666:	f1c9 0e20 	rsb	lr, r9, #32
 801166a:	468a      	mov	sl, r1
 801166c:	2200      	movs	r2, #0
 801166e:	6818      	ldr	r0, [r3, #0]
 8011670:	fa00 f009 	lsl.w	r0, r0, r9
 8011674:	4302      	orrs	r2, r0
 8011676:	f84a 2b04 	str.w	r2, [sl], #4
 801167a:	f853 2b04 	ldr.w	r2, [r3], #4
 801167e:	459c      	cmp	ip, r3
 8011680:	fa22 f20e 	lsr.w	r2, r2, lr
 8011684:	d8f3      	bhi.n	801166e <__lshift+0x6e>
 8011686:	ebac 0304 	sub.w	r3, ip, r4
 801168a:	3b15      	subs	r3, #21
 801168c:	f023 0303 	bic.w	r3, r3, #3
 8011690:	3304      	adds	r3, #4
 8011692:	f104 0015 	add.w	r0, r4, #21
 8011696:	4584      	cmp	ip, r0
 8011698:	bf38      	it	cc
 801169a:	2304      	movcc	r3, #4
 801169c:	50ca      	str	r2, [r1, r3]
 801169e:	b10a      	cbz	r2, 80116a4 <__lshift+0xa4>
 80116a0:	f108 0602 	add.w	r6, r8, #2
 80116a4:	3e01      	subs	r6, #1
 80116a6:	4638      	mov	r0, r7
 80116a8:	612e      	str	r6, [r5, #16]
 80116aa:	4621      	mov	r1, r4
 80116ac:	f7ff fd8c 	bl	80111c8 <_Bfree>
 80116b0:	4628      	mov	r0, r5
 80116b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80116ba:	3301      	adds	r3, #1
 80116bc:	e7c5      	b.n	801164a <__lshift+0x4a>
 80116be:	3904      	subs	r1, #4
 80116c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80116c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80116c8:	459c      	cmp	ip, r3
 80116ca:	d8f9      	bhi.n	80116c0 <__lshift+0xc0>
 80116cc:	e7ea      	b.n	80116a4 <__lshift+0xa4>
 80116ce:	bf00      	nop
 80116d0:	08013378 	.word	0x08013378
 80116d4:	08013408 	.word	0x08013408

080116d8 <__mcmp>:
 80116d8:	b530      	push	{r4, r5, lr}
 80116da:	6902      	ldr	r2, [r0, #16]
 80116dc:	690c      	ldr	r4, [r1, #16]
 80116de:	1b12      	subs	r2, r2, r4
 80116e0:	d10e      	bne.n	8011700 <__mcmp+0x28>
 80116e2:	f100 0314 	add.w	r3, r0, #20
 80116e6:	3114      	adds	r1, #20
 80116e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80116ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80116f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80116f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80116f8:	42a5      	cmp	r5, r4
 80116fa:	d003      	beq.n	8011704 <__mcmp+0x2c>
 80116fc:	d305      	bcc.n	801170a <__mcmp+0x32>
 80116fe:	2201      	movs	r2, #1
 8011700:	4610      	mov	r0, r2
 8011702:	bd30      	pop	{r4, r5, pc}
 8011704:	4283      	cmp	r3, r0
 8011706:	d3f3      	bcc.n	80116f0 <__mcmp+0x18>
 8011708:	e7fa      	b.n	8011700 <__mcmp+0x28>
 801170a:	f04f 32ff 	mov.w	r2, #4294967295
 801170e:	e7f7      	b.n	8011700 <__mcmp+0x28>

08011710 <__mdiff>:
 8011710:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011714:	460c      	mov	r4, r1
 8011716:	4606      	mov	r6, r0
 8011718:	4611      	mov	r1, r2
 801171a:	4620      	mov	r0, r4
 801171c:	4617      	mov	r7, r2
 801171e:	f7ff ffdb 	bl	80116d8 <__mcmp>
 8011722:	1e05      	subs	r5, r0, #0
 8011724:	d110      	bne.n	8011748 <__mdiff+0x38>
 8011726:	4629      	mov	r1, r5
 8011728:	4630      	mov	r0, r6
 801172a:	f7ff fd0d 	bl	8011148 <_Balloc>
 801172e:	b930      	cbnz	r0, 801173e <__mdiff+0x2e>
 8011730:	4b39      	ldr	r3, [pc, #228]	; (8011818 <__mdiff+0x108>)
 8011732:	4602      	mov	r2, r0
 8011734:	f240 2132 	movw	r1, #562	; 0x232
 8011738:	4838      	ldr	r0, [pc, #224]	; (801181c <__mdiff+0x10c>)
 801173a:	f7fe f9e7 	bl	800fb0c <__assert_func>
 801173e:	2301      	movs	r3, #1
 8011740:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011744:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011748:	bfa4      	itt	ge
 801174a:	463b      	movge	r3, r7
 801174c:	4627      	movge	r7, r4
 801174e:	4630      	mov	r0, r6
 8011750:	6879      	ldr	r1, [r7, #4]
 8011752:	bfa6      	itte	ge
 8011754:	461c      	movge	r4, r3
 8011756:	2500      	movge	r5, #0
 8011758:	2501      	movlt	r5, #1
 801175a:	f7ff fcf5 	bl	8011148 <_Balloc>
 801175e:	b920      	cbnz	r0, 801176a <__mdiff+0x5a>
 8011760:	4b2d      	ldr	r3, [pc, #180]	; (8011818 <__mdiff+0x108>)
 8011762:	4602      	mov	r2, r0
 8011764:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011768:	e7e6      	b.n	8011738 <__mdiff+0x28>
 801176a:	693e      	ldr	r6, [r7, #16]
 801176c:	60c5      	str	r5, [r0, #12]
 801176e:	6925      	ldr	r5, [r4, #16]
 8011770:	f107 0114 	add.w	r1, r7, #20
 8011774:	f104 0914 	add.w	r9, r4, #20
 8011778:	f100 0e14 	add.w	lr, r0, #20
 801177c:	f107 0210 	add.w	r2, r7, #16
 8011780:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8011784:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8011788:	46f2      	mov	sl, lr
 801178a:	2700      	movs	r7, #0
 801178c:	f859 3b04 	ldr.w	r3, [r9], #4
 8011790:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011794:	fa1f f883 	uxth.w	r8, r3
 8011798:	fa17 f78b 	uxtah	r7, r7, fp
 801179c:	0c1b      	lsrs	r3, r3, #16
 801179e:	eba7 0808 	sub.w	r8, r7, r8
 80117a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80117a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80117aa:	fa1f f888 	uxth.w	r8, r8
 80117ae:	141f      	asrs	r7, r3, #16
 80117b0:	454d      	cmp	r5, r9
 80117b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80117b6:	f84a 3b04 	str.w	r3, [sl], #4
 80117ba:	d8e7      	bhi.n	801178c <__mdiff+0x7c>
 80117bc:	1b2b      	subs	r3, r5, r4
 80117be:	3b15      	subs	r3, #21
 80117c0:	f023 0303 	bic.w	r3, r3, #3
 80117c4:	3304      	adds	r3, #4
 80117c6:	3415      	adds	r4, #21
 80117c8:	42a5      	cmp	r5, r4
 80117ca:	bf38      	it	cc
 80117cc:	2304      	movcc	r3, #4
 80117ce:	4419      	add	r1, r3
 80117d0:	4473      	add	r3, lr
 80117d2:	469e      	mov	lr, r3
 80117d4:	460d      	mov	r5, r1
 80117d6:	4565      	cmp	r5, ip
 80117d8:	d30e      	bcc.n	80117f8 <__mdiff+0xe8>
 80117da:	f10c 0203 	add.w	r2, ip, #3
 80117de:	1a52      	subs	r2, r2, r1
 80117e0:	f022 0203 	bic.w	r2, r2, #3
 80117e4:	3903      	subs	r1, #3
 80117e6:	458c      	cmp	ip, r1
 80117e8:	bf38      	it	cc
 80117ea:	2200      	movcc	r2, #0
 80117ec:	441a      	add	r2, r3
 80117ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80117f2:	b17b      	cbz	r3, 8011814 <__mdiff+0x104>
 80117f4:	6106      	str	r6, [r0, #16]
 80117f6:	e7a5      	b.n	8011744 <__mdiff+0x34>
 80117f8:	f855 8b04 	ldr.w	r8, [r5], #4
 80117fc:	fa17 f488 	uxtah	r4, r7, r8
 8011800:	1422      	asrs	r2, r4, #16
 8011802:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8011806:	b2a4      	uxth	r4, r4
 8011808:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801180c:	f84e 4b04 	str.w	r4, [lr], #4
 8011810:	1417      	asrs	r7, r2, #16
 8011812:	e7e0      	b.n	80117d6 <__mdiff+0xc6>
 8011814:	3e01      	subs	r6, #1
 8011816:	e7ea      	b.n	80117ee <__mdiff+0xde>
 8011818:	08013378 	.word	0x08013378
 801181c:	08013408 	.word	0x08013408

08011820 <__ulp>:
 8011820:	b082      	sub	sp, #8
 8011822:	ed8d 0b00 	vstr	d0, [sp]
 8011826:	9b01      	ldr	r3, [sp, #4]
 8011828:	4912      	ldr	r1, [pc, #72]	; (8011874 <__ulp+0x54>)
 801182a:	4019      	ands	r1, r3
 801182c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8011830:	2900      	cmp	r1, #0
 8011832:	dd05      	ble.n	8011840 <__ulp+0x20>
 8011834:	2200      	movs	r2, #0
 8011836:	460b      	mov	r3, r1
 8011838:	ec43 2b10 	vmov	d0, r2, r3
 801183c:	b002      	add	sp, #8
 801183e:	4770      	bx	lr
 8011840:	4249      	negs	r1, r1
 8011842:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8011846:	ea4f 5021 	mov.w	r0, r1, asr #20
 801184a:	f04f 0200 	mov.w	r2, #0
 801184e:	f04f 0300 	mov.w	r3, #0
 8011852:	da04      	bge.n	801185e <__ulp+0x3e>
 8011854:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8011858:	fa41 f300 	asr.w	r3, r1, r0
 801185c:	e7ec      	b.n	8011838 <__ulp+0x18>
 801185e:	f1a0 0114 	sub.w	r1, r0, #20
 8011862:	291e      	cmp	r1, #30
 8011864:	bfda      	itte	le
 8011866:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801186a:	fa20 f101 	lsrle.w	r1, r0, r1
 801186e:	2101      	movgt	r1, #1
 8011870:	460a      	mov	r2, r1
 8011872:	e7e1      	b.n	8011838 <__ulp+0x18>
 8011874:	7ff00000 	.word	0x7ff00000

08011878 <__b2d>:
 8011878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801187a:	6905      	ldr	r5, [r0, #16]
 801187c:	f100 0714 	add.w	r7, r0, #20
 8011880:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011884:	1f2e      	subs	r6, r5, #4
 8011886:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801188a:	4620      	mov	r0, r4
 801188c:	f7ff fd52 	bl	8011334 <__hi0bits>
 8011890:	f1c0 0320 	rsb	r3, r0, #32
 8011894:	280a      	cmp	r0, #10
 8011896:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011914 <__b2d+0x9c>
 801189a:	600b      	str	r3, [r1, #0]
 801189c:	dc14      	bgt.n	80118c8 <__b2d+0x50>
 801189e:	f1c0 0e0b 	rsb	lr, r0, #11
 80118a2:	fa24 f10e 	lsr.w	r1, r4, lr
 80118a6:	42b7      	cmp	r7, r6
 80118a8:	ea41 030c 	orr.w	r3, r1, ip
 80118ac:	bf34      	ite	cc
 80118ae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80118b2:	2100      	movcs	r1, #0
 80118b4:	3015      	adds	r0, #21
 80118b6:	fa04 f000 	lsl.w	r0, r4, r0
 80118ba:	fa21 f10e 	lsr.w	r1, r1, lr
 80118be:	ea40 0201 	orr.w	r2, r0, r1
 80118c2:	ec43 2b10 	vmov	d0, r2, r3
 80118c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118c8:	42b7      	cmp	r7, r6
 80118ca:	bf3a      	itte	cc
 80118cc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80118d0:	f1a5 0608 	subcc.w	r6, r5, #8
 80118d4:	2100      	movcs	r1, #0
 80118d6:	380b      	subs	r0, #11
 80118d8:	d017      	beq.n	801190a <__b2d+0x92>
 80118da:	f1c0 0c20 	rsb	ip, r0, #32
 80118de:	fa04 f500 	lsl.w	r5, r4, r0
 80118e2:	42be      	cmp	r6, r7
 80118e4:	fa21 f40c 	lsr.w	r4, r1, ip
 80118e8:	ea45 0504 	orr.w	r5, r5, r4
 80118ec:	bf8c      	ite	hi
 80118ee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80118f2:	2400      	movls	r4, #0
 80118f4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80118f8:	fa01 f000 	lsl.w	r0, r1, r0
 80118fc:	fa24 f40c 	lsr.w	r4, r4, ip
 8011900:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011904:	ea40 0204 	orr.w	r2, r0, r4
 8011908:	e7db      	b.n	80118c2 <__b2d+0x4a>
 801190a:	ea44 030c 	orr.w	r3, r4, ip
 801190e:	460a      	mov	r2, r1
 8011910:	e7d7      	b.n	80118c2 <__b2d+0x4a>
 8011912:	bf00      	nop
 8011914:	3ff00000 	.word	0x3ff00000

08011918 <__d2b>:
 8011918:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801191c:	4689      	mov	r9, r1
 801191e:	2101      	movs	r1, #1
 8011920:	ec57 6b10 	vmov	r6, r7, d0
 8011924:	4690      	mov	r8, r2
 8011926:	f7ff fc0f 	bl	8011148 <_Balloc>
 801192a:	4604      	mov	r4, r0
 801192c:	b930      	cbnz	r0, 801193c <__d2b+0x24>
 801192e:	4602      	mov	r2, r0
 8011930:	4b25      	ldr	r3, [pc, #148]	; (80119c8 <__d2b+0xb0>)
 8011932:	4826      	ldr	r0, [pc, #152]	; (80119cc <__d2b+0xb4>)
 8011934:	f240 310a 	movw	r1, #778	; 0x30a
 8011938:	f7fe f8e8 	bl	800fb0c <__assert_func>
 801193c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011940:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011944:	bb35      	cbnz	r5, 8011994 <__d2b+0x7c>
 8011946:	2e00      	cmp	r6, #0
 8011948:	9301      	str	r3, [sp, #4]
 801194a:	d028      	beq.n	801199e <__d2b+0x86>
 801194c:	4668      	mov	r0, sp
 801194e:	9600      	str	r6, [sp, #0]
 8011950:	f7ff fd10 	bl	8011374 <__lo0bits>
 8011954:	9900      	ldr	r1, [sp, #0]
 8011956:	b300      	cbz	r0, 801199a <__d2b+0x82>
 8011958:	9a01      	ldr	r2, [sp, #4]
 801195a:	f1c0 0320 	rsb	r3, r0, #32
 801195e:	fa02 f303 	lsl.w	r3, r2, r3
 8011962:	430b      	orrs	r3, r1
 8011964:	40c2      	lsrs	r2, r0
 8011966:	6163      	str	r3, [r4, #20]
 8011968:	9201      	str	r2, [sp, #4]
 801196a:	9b01      	ldr	r3, [sp, #4]
 801196c:	61a3      	str	r3, [r4, #24]
 801196e:	2b00      	cmp	r3, #0
 8011970:	bf14      	ite	ne
 8011972:	2202      	movne	r2, #2
 8011974:	2201      	moveq	r2, #1
 8011976:	6122      	str	r2, [r4, #16]
 8011978:	b1d5      	cbz	r5, 80119b0 <__d2b+0x98>
 801197a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801197e:	4405      	add	r5, r0
 8011980:	f8c9 5000 	str.w	r5, [r9]
 8011984:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011988:	f8c8 0000 	str.w	r0, [r8]
 801198c:	4620      	mov	r0, r4
 801198e:	b003      	add	sp, #12
 8011990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011994:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011998:	e7d5      	b.n	8011946 <__d2b+0x2e>
 801199a:	6161      	str	r1, [r4, #20]
 801199c:	e7e5      	b.n	801196a <__d2b+0x52>
 801199e:	a801      	add	r0, sp, #4
 80119a0:	f7ff fce8 	bl	8011374 <__lo0bits>
 80119a4:	9b01      	ldr	r3, [sp, #4]
 80119a6:	6163      	str	r3, [r4, #20]
 80119a8:	2201      	movs	r2, #1
 80119aa:	6122      	str	r2, [r4, #16]
 80119ac:	3020      	adds	r0, #32
 80119ae:	e7e3      	b.n	8011978 <__d2b+0x60>
 80119b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80119b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80119b8:	f8c9 0000 	str.w	r0, [r9]
 80119bc:	6918      	ldr	r0, [r3, #16]
 80119be:	f7ff fcb9 	bl	8011334 <__hi0bits>
 80119c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80119c6:	e7df      	b.n	8011988 <__d2b+0x70>
 80119c8:	08013378 	.word	0x08013378
 80119cc:	08013408 	.word	0x08013408

080119d0 <__ratio>:
 80119d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119d4:	4688      	mov	r8, r1
 80119d6:	4669      	mov	r1, sp
 80119d8:	4681      	mov	r9, r0
 80119da:	f7ff ff4d 	bl	8011878 <__b2d>
 80119de:	a901      	add	r1, sp, #4
 80119e0:	4640      	mov	r0, r8
 80119e2:	ec55 4b10 	vmov	r4, r5, d0
 80119e6:	f7ff ff47 	bl	8011878 <__b2d>
 80119ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80119ee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80119f2:	eba3 0c02 	sub.w	ip, r3, r2
 80119f6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80119fa:	1a9b      	subs	r3, r3, r2
 80119fc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011a00:	ec51 0b10 	vmov	r0, r1, d0
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	bfd6      	itet	le
 8011a08:	460a      	movle	r2, r1
 8011a0a:	462a      	movgt	r2, r5
 8011a0c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011a10:	468b      	mov	fp, r1
 8011a12:	462f      	mov	r7, r5
 8011a14:	bfd4      	ite	le
 8011a16:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011a1a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011a1e:	4620      	mov	r0, r4
 8011a20:	ee10 2a10 	vmov	r2, s0
 8011a24:	465b      	mov	r3, fp
 8011a26:	4639      	mov	r1, r7
 8011a28:	f7ee ff20 	bl	800086c <__aeabi_ddiv>
 8011a2c:	ec41 0b10 	vmov	d0, r0, r1
 8011a30:	b003      	add	sp, #12
 8011a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011a36 <__copybits>:
 8011a36:	3901      	subs	r1, #1
 8011a38:	b570      	push	{r4, r5, r6, lr}
 8011a3a:	1149      	asrs	r1, r1, #5
 8011a3c:	6914      	ldr	r4, [r2, #16]
 8011a3e:	3101      	adds	r1, #1
 8011a40:	f102 0314 	add.w	r3, r2, #20
 8011a44:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011a48:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011a4c:	1f05      	subs	r5, r0, #4
 8011a4e:	42a3      	cmp	r3, r4
 8011a50:	d30c      	bcc.n	8011a6c <__copybits+0x36>
 8011a52:	1aa3      	subs	r3, r4, r2
 8011a54:	3b11      	subs	r3, #17
 8011a56:	f023 0303 	bic.w	r3, r3, #3
 8011a5a:	3211      	adds	r2, #17
 8011a5c:	42a2      	cmp	r2, r4
 8011a5e:	bf88      	it	hi
 8011a60:	2300      	movhi	r3, #0
 8011a62:	4418      	add	r0, r3
 8011a64:	2300      	movs	r3, #0
 8011a66:	4288      	cmp	r0, r1
 8011a68:	d305      	bcc.n	8011a76 <__copybits+0x40>
 8011a6a:	bd70      	pop	{r4, r5, r6, pc}
 8011a6c:	f853 6b04 	ldr.w	r6, [r3], #4
 8011a70:	f845 6f04 	str.w	r6, [r5, #4]!
 8011a74:	e7eb      	b.n	8011a4e <__copybits+0x18>
 8011a76:	f840 3b04 	str.w	r3, [r0], #4
 8011a7a:	e7f4      	b.n	8011a66 <__copybits+0x30>

08011a7c <__any_on>:
 8011a7c:	f100 0214 	add.w	r2, r0, #20
 8011a80:	6900      	ldr	r0, [r0, #16]
 8011a82:	114b      	asrs	r3, r1, #5
 8011a84:	4298      	cmp	r0, r3
 8011a86:	b510      	push	{r4, lr}
 8011a88:	db11      	blt.n	8011aae <__any_on+0x32>
 8011a8a:	dd0a      	ble.n	8011aa2 <__any_on+0x26>
 8011a8c:	f011 011f 	ands.w	r1, r1, #31
 8011a90:	d007      	beq.n	8011aa2 <__any_on+0x26>
 8011a92:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011a96:	fa24 f001 	lsr.w	r0, r4, r1
 8011a9a:	fa00 f101 	lsl.w	r1, r0, r1
 8011a9e:	428c      	cmp	r4, r1
 8011aa0:	d10b      	bne.n	8011aba <__any_on+0x3e>
 8011aa2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011aa6:	4293      	cmp	r3, r2
 8011aa8:	d803      	bhi.n	8011ab2 <__any_on+0x36>
 8011aaa:	2000      	movs	r0, #0
 8011aac:	bd10      	pop	{r4, pc}
 8011aae:	4603      	mov	r3, r0
 8011ab0:	e7f7      	b.n	8011aa2 <__any_on+0x26>
 8011ab2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011ab6:	2900      	cmp	r1, #0
 8011ab8:	d0f5      	beq.n	8011aa6 <__any_on+0x2a>
 8011aba:	2001      	movs	r0, #1
 8011abc:	e7f6      	b.n	8011aac <__any_on+0x30>

08011abe <_calloc_r>:
 8011abe:	b513      	push	{r0, r1, r4, lr}
 8011ac0:	434a      	muls	r2, r1
 8011ac2:	4611      	mov	r1, r2
 8011ac4:	9201      	str	r2, [sp, #4]
 8011ac6:	f7fc f8a1 	bl	800dc0c <_malloc_r>
 8011aca:	4604      	mov	r4, r0
 8011acc:	b118      	cbz	r0, 8011ad6 <_calloc_r+0x18>
 8011ace:	9a01      	ldr	r2, [sp, #4]
 8011ad0:	2100      	movs	r1, #0
 8011ad2:	f7fc f843 	bl	800db5c <memset>
 8011ad6:	4620      	mov	r0, r4
 8011ad8:	b002      	add	sp, #8
 8011ada:	bd10      	pop	{r4, pc}

08011adc <_realloc_r>:
 8011adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ade:	4607      	mov	r7, r0
 8011ae0:	4614      	mov	r4, r2
 8011ae2:	460e      	mov	r6, r1
 8011ae4:	b921      	cbnz	r1, 8011af0 <_realloc_r+0x14>
 8011ae6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011aea:	4611      	mov	r1, r2
 8011aec:	f7fc b88e 	b.w	800dc0c <_malloc_r>
 8011af0:	b922      	cbnz	r2, 8011afc <_realloc_r+0x20>
 8011af2:	f7fc f83b 	bl	800db6c <_free_r>
 8011af6:	4625      	mov	r5, r4
 8011af8:	4628      	mov	r0, r5
 8011afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011afc:	f000 ffaa 	bl	8012a54 <_malloc_usable_size_r>
 8011b00:	42a0      	cmp	r0, r4
 8011b02:	d20f      	bcs.n	8011b24 <_realloc_r+0x48>
 8011b04:	4621      	mov	r1, r4
 8011b06:	4638      	mov	r0, r7
 8011b08:	f7fc f880 	bl	800dc0c <_malloc_r>
 8011b0c:	4605      	mov	r5, r0
 8011b0e:	2800      	cmp	r0, #0
 8011b10:	d0f2      	beq.n	8011af8 <_realloc_r+0x1c>
 8011b12:	4631      	mov	r1, r6
 8011b14:	4622      	mov	r2, r4
 8011b16:	f7fb fff9 	bl	800db0c <memcpy>
 8011b1a:	4631      	mov	r1, r6
 8011b1c:	4638      	mov	r0, r7
 8011b1e:	f7fc f825 	bl	800db6c <_free_r>
 8011b22:	e7e9      	b.n	8011af8 <_realloc_r+0x1c>
 8011b24:	4635      	mov	r5, r6
 8011b26:	e7e7      	b.n	8011af8 <_realloc_r+0x1c>

08011b28 <__ssputs_r>:
 8011b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b2c:	688e      	ldr	r6, [r1, #8]
 8011b2e:	429e      	cmp	r6, r3
 8011b30:	4682      	mov	sl, r0
 8011b32:	460c      	mov	r4, r1
 8011b34:	4690      	mov	r8, r2
 8011b36:	461f      	mov	r7, r3
 8011b38:	d838      	bhi.n	8011bac <__ssputs_r+0x84>
 8011b3a:	898a      	ldrh	r2, [r1, #12]
 8011b3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011b40:	d032      	beq.n	8011ba8 <__ssputs_r+0x80>
 8011b42:	6825      	ldr	r5, [r4, #0]
 8011b44:	6909      	ldr	r1, [r1, #16]
 8011b46:	eba5 0901 	sub.w	r9, r5, r1
 8011b4a:	6965      	ldr	r5, [r4, #20]
 8011b4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011b50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011b54:	3301      	adds	r3, #1
 8011b56:	444b      	add	r3, r9
 8011b58:	106d      	asrs	r5, r5, #1
 8011b5a:	429d      	cmp	r5, r3
 8011b5c:	bf38      	it	cc
 8011b5e:	461d      	movcc	r5, r3
 8011b60:	0553      	lsls	r3, r2, #21
 8011b62:	d531      	bpl.n	8011bc8 <__ssputs_r+0xa0>
 8011b64:	4629      	mov	r1, r5
 8011b66:	f7fc f851 	bl	800dc0c <_malloc_r>
 8011b6a:	4606      	mov	r6, r0
 8011b6c:	b950      	cbnz	r0, 8011b84 <__ssputs_r+0x5c>
 8011b6e:	230c      	movs	r3, #12
 8011b70:	f8ca 3000 	str.w	r3, [sl]
 8011b74:	89a3      	ldrh	r3, [r4, #12]
 8011b76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b7a:	81a3      	strh	r3, [r4, #12]
 8011b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8011b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b84:	6921      	ldr	r1, [r4, #16]
 8011b86:	464a      	mov	r2, r9
 8011b88:	f7fb ffc0 	bl	800db0c <memcpy>
 8011b8c:	89a3      	ldrh	r3, [r4, #12]
 8011b8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b96:	81a3      	strh	r3, [r4, #12]
 8011b98:	6126      	str	r6, [r4, #16]
 8011b9a:	6165      	str	r5, [r4, #20]
 8011b9c:	444e      	add	r6, r9
 8011b9e:	eba5 0509 	sub.w	r5, r5, r9
 8011ba2:	6026      	str	r6, [r4, #0]
 8011ba4:	60a5      	str	r5, [r4, #8]
 8011ba6:	463e      	mov	r6, r7
 8011ba8:	42be      	cmp	r6, r7
 8011baa:	d900      	bls.n	8011bae <__ssputs_r+0x86>
 8011bac:	463e      	mov	r6, r7
 8011bae:	4632      	mov	r2, r6
 8011bb0:	6820      	ldr	r0, [r4, #0]
 8011bb2:	4641      	mov	r1, r8
 8011bb4:	f7fb ffb8 	bl	800db28 <memmove>
 8011bb8:	68a3      	ldr	r3, [r4, #8]
 8011bba:	6822      	ldr	r2, [r4, #0]
 8011bbc:	1b9b      	subs	r3, r3, r6
 8011bbe:	4432      	add	r2, r6
 8011bc0:	60a3      	str	r3, [r4, #8]
 8011bc2:	6022      	str	r2, [r4, #0]
 8011bc4:	2000      	movs	r0, #0
 8011bc6:	e7db      	b.n	8011b80 <__ssputs_r+0x58>
 8011bc8:	462a      	mov	r2, r5
 8011bca:	f7ff ff87 	bl	8011adc <_realloc_r>
 8011bce:	4606      	mov	r6, r0
 8011bd0:	2800      	cmp	r0, #0
 8011bd2:	d1e1      	bne.n	8011b98 <__ssputs_r+0x70>
 8011bd4:	6921      	ldr	r1, [r4, #16]
 8011bd6:	4650      	mov	r0, sl
 8011bd8:	f7fb ffc8 	bl	800db6c <_free_r>
 8011bdc:	e7c7      	b.n	8011b6e <__ssputs_r+0x46>
	...

08011be0 <_svfiprintf_r>:
 8011be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011be4:	4698      	mov	r8, r3
 8011be6:	898b      	ldrh	r3, [r1, #12]
 8011be8:	061b      	lsls	r3, r3, #24
 8011bea:	b09d      	sub	sp, #116	; 0x74
 8011bec:	4607      	mov	r7, r0
 8011bee:	460d      	mov	r5, r1
 8011bf0:	4614      	mov	r4, r2
 8011bf2:	d50e      	bpl.n	8011c12 <_svfiprintf_r+0x32>
 8011bf4:	690b      	ldr	r3, [r1, #16]
 8011bf6:	b963      	cbnz	r3, 8011c12 <_svfiprintf_r+0x32>
 8011bf8:	2140      	movs	r1, #64	; 0x40
 8011bfa:	f7fc f807 	bl	800dc0c <_malloc_r>
 8011bfe:	6028      	str	r0, [r5, #0]
 8011c00:	6128      	str	r0, [r5, #16]
 8011c02:	b920      	cbnz	r0, 8011c0e <_svfiprintf_r+0x2e>
 8011c04:	230c      	movs	r3, #12
 8011c06:	603b      	str	r3, [r7, #0]
 8011c08:	f04f 30ff 	mov.w	r0, #4294967295
 8011c0c:	e0d1      	b.n	8011db2 <_svfiprintf_r+0x1d2>
 8011c0e:	2340      	movs	r3, #64	; 0x40
 8011c10:	616b      	str	r3, [r5, #20]
 8011c12:	2300      	movs	r3, #0
 8011c14:	9309      	str	r3, [sp, #36]	; 0x24
 8011c16:	2320      	movs	r3, #32
 8011c18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011c1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011c20:	2330      	movs	r3, #48	; 0x30
 8011c22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011dcc <_svfiprintf_r+0x1ec>
 8011c26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011c2a:	f04f 0901 	mov.w	r9, #1
 8011c2e:	4623      	mov	r3, r4
 8011c30:	469a      	mov	sl, r3
 8011c32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c36:	b10a      	cbz	r2, 8011c3c <_svfiprintf_r+0x5c>
 8011c38:	2a25      	cmp	r2, #37	; 0x25
 8011c3a:	d1f9      	bne.n	8011c30 <_svfiprintf_r+0x50>
 8011c3c:	ebba 0b04 	subs.w	fp, sl, r4
 8011c40:	d00b      	beq.n	8011c5a <_svfiprintf_r+0x7a>
 8011c42:	465b      	mov	r3, fp
 8011c44:	4622      	mov	r2, r4
 8011c46:	4629      	mov	r1, r5
 8011c48:	4638      	mov	r0, r7
 8011c4a:	f7ff ff6d 	bl	8011b28 <__ssputs_r>
 8011c4e:	3001      	adds	r0, #1
 8011c50:	f000 80aa 	beq.w	8011da8 <_svfiprintf_r+0x1c8>
 8011c54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011c56:	445a      	add	r2, fp
 8011c58:	9209      	str	r2, [sp, #36]	; 0x24
 8011c5a:	f89a 3000 	ldrb.w	r3, [sl]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	f000 80a2 	beq.w	8011da8 <_svfiprintf_r+0x1c8>
 8011c64:	2300      	movs	r3, #0
 8011c66:	f04f 32ff 	mov.w	r2, #4294967295
 8011c6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011c6e:	f10a 0a01 	add.w	sl, sl, #1
 8011c72:	9304      	str	r3, [sp, #16]
 8011c74:	9307      	str	r3, [sp, #28]
 8011c76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011c7a:	931a      	str	r3, [sp, #104]	; 0x68
 8011c7c:	4654      	mov	r4, sl
 8011c7e:	2205      	movs	r2, #5
 8011c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c84:	4851      	ldr	r0, [pc, #324]	; (8011dcc <_svfiprintf_r+0x1ec>)
 8011c86:	f7ee fabb 	bl	8000200 <memchr>
 8011c8a:	9a04      	ldr	r2, [sp, #16]
 8011c8c:	b9d8      	cbnz	r0, 8011cc6 <_svfiprintf_r+0xe6>
 8011c8e:	06d0      	lsls	r0, r2, #27
 8011c90:	bf44      	itt	mi
 8011c92:	2320      	movmi	r3, #32
 8011c94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011c98:	0711      	lsls	r1, r2, #28
 8011c9a:	bf44      	itt	mi
 8011c9c:	232b      	movmi	r3, #43	; 0x2b
 8011c9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ca2:	f89a 3000 	ldrb.w	r3, [sl]
 8011ca6:	2b2a      	cmp	r3, #42	; 0x2a
 8011ca8:	d015      	beq.n	8011cd6 <_svfiprintf_r+0xf6>
 8011caa:	9a07      	ldr	r2, [sp, #28]
 8011cac:	4654      	mov	r4, sl
 8011cae:	2000      	movs	r0, #0
 8011cb0:	f04f 0c0a 	mov.w	ip, #10
 8011cb4:	4621      	mov	r1, r4
 8011cb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011cba:	3b30      	subs	r3, #48	; 0x30
 8011cbc:	2b09      	cmp	r3, #9
 8011cbe:	d94e      	bls.n	8011d5e <_svfiprintf_r+0x17e>
 8011cc0:	b1b0      	cbz	r0, 8011cf0 <_svfiprintf_r+0x110>
 8011cc2:	9207      	str	r2, [sp, #28]
 8011cc4:	e014      	b.n	8011cf0 <_svfiprintf_r+0x110>
 8011cc6:	eba0 0308 	sub.w	r3, r0, r8
 8011cca:	fa09 f303 	lsl.w	r3, r9, r3
 8011cce:	4313      	orrs	r3, r2
 8011cd0:	9304      	str	r3, [sp, #16]
 8011cd2:	46a2      	mov	sl, r4
 8011cd4:	e7d2      	b.n	8011c7c <_svfiprintf_r+0x9c>
 8011cd6:	9b03      	ldr	r3, [sp, #12]
 8011cd8:	1d19      	adds	r1, r3, #4
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	9103      	str	r1, [sp, #12]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	bfbb      	ittet	lt
 8011ce2:	425b      	neglt	r3, r3
 8011ce4:	f042 0202 	orrlt.w	r2, r2, #2
 8011ce8:	9307      	strge	r3, [sp, #28]
 8011cea:	9307      	strlt	r3, [sp, #28]
 8011cec:	bfb8      	it	lt
 8011cee:	9204      	strlt	r2, [sp, #16]
 8011cf0:	7823      	ldrb	r3, [r4, #0]
 8011cf2:	2b2e      	cmp	r3, #46	; 0x2e
 8011cf4:	d10c      	bne.n	8011d10 <_svfiprintf_r+0x130>
 8011cf6:	7863      	ldrb	r3, [r4, #1]
 8011cf8:	2b2a      	cmp	r3, #42	; 0x2a
 8011cfa:	d135      	bne.n	8011d68 <_svfiprintf_r+0x188>
 8011cfc:	9b03      	ldr	r3, [sp, #12]
 8011cfe:	1d1a      	adds	r2, r3, #4
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	9203      	str	r2, [sp, #12]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	bfb8      	it	lt
 8011d08:	f04f 33ff 	movlt.w	r3, #4294967295
 8011d0c:	3402      	adds	r4, #2
 8011d0e:	9305      	str	r3, [sp, #20]
 8011d10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011ddc <_svfiprintf_r+0x1fc>
 8011d14:	7821      	ldrb	r1, [r4, #0]
 8011d16:	2203      	movs	r2, #3
 8011d18:	4650      	mov	r0, sl
 8011d1a:	f7ee fa71 	bl	8000200 <memchr>
 8011d1e:	b140      	cbz	r0, 8011d32 <_svfiprintf_r+0x152>
 8011d20:	2340      	movs	r3, #64	; 0x40
 8011d22:	eba0 000a 	sub.w	r0, r0, sl
 8011d26:	fa03 f000 	lsl.w	r0, r3, r0
 8011d2a:	9b04      	ldr	r3, [sp, #16]
 8011d2c:	4303      	orrs	r3, r0
 8011d2e:	3401      	adds	r4, #1
 8011d30:	9304      	str	r3, [sp, #16]
 8011d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d36:	4826      	ldr	r0, [pc, #152]	; (8011dd0 <_svfiprintf_r+0x1f0>)
 8011d38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011d3c:	2206      	movs	r2, #6
 8011d3e:	f7ee fa5f 	bl	8000200 <memchr>
 8011d42:	2800      	cmp	r0, #0
 8011d44:	d038      	beq.n	8011db8 <_svfiprintf_r+0x1d8>
 8011d46:	4b23      	ldr	r3, [pc, #140]	; (8011dd4 <_svfiprintf_r+0x1f4>)
 8011d48:	bb1b      	cbnz	r3, 8011d92 <_svfiprintf_r+0x1b2>
 8011d4a:	9b03      	ldr	r3, [sp, #12]
 8011d4c:	3307      	adds	r3, #7
 8011d4e:	f023 0307 	bic.w	r3, r3, #7
 8011d52:	3308      	adds	r3, #8
 8011d54:	9303      	str	r3, [sp, #12]
 8011d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d58:	4433      	add	r3, r6
 8011d5a:	9309      	str	r3, [sp, #36]	; 0x24
 8011d5c:	e767      	b.n	8011c2e <_svfiprintf_r+0x4e>
 8011d5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011d62:	460c      	mov	r4, r1
 8011d64:	2001      	movs	r0, #1
 8011d66:	e7a5      	b.n	8011cb4 <_svfiprintf_r+0xd4>
 8011d68:	2300      	movs	r3, #0
 8011d6a:	3401      	adds	r4, #1
 8011d6c:	9305      	str	r3, [sp, #20]
 8011d6e:	4619      	mov	r1, r3
 8011d70:	f04f 0c0a 	mov.w	ip, #10
 8011d74:	4620      	mov	r0, r4
 8011d76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d7a:	3a30      	subs	r2, #48	; 0x30
 8011d7c:	2a09      	cmp	r2, #9
 8011d7e:	d903      	bls.n	8011d88 <_svfiprintf_r+0x1a8>
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d0c5      	beq.n	8011d10 <_svfiprintf_r+0x130>
 8011d84:	9105      	str	r1, [sp, #20]
 8011d86:	e7c3      	b.n	8011d10 <_svfiprintf_r+0x130>
 8011d88:	fb0c 2101 	mla	r1, ip, r1, r2
 8011d8c:	4604      	mov	r4, r0
 8011d8e:	2301      	movs	r3, #1
 8011d90:	e7f0      	b.n	8011d74 <_svfiprintf_r+0x194>
 8011d92:	ab03      	add	r3, sp, #12
 8011d94:	9300      	str	r3, [sp, #0]
 8011d96:	462a      	mov	r2, r5
 8011d98:	4b0f      	ldr	r3, [pc, #60]	; (8011dd8 <_svfiprintf_r+0x1f8>)
 8011d9a:	a904      	add	r1, sp, #16
 8011d9c:	4638      	mov	r0, r7
 8011d9e:	f7fc f82f 	bl	800de00 <_printf_float>
 8011da2:	1c42      	adds	r2, r0, #1
 8011da4:	4606      	mov	r6, r0
 8011da6:	d1d6      	bne.n	8011d56 <_svfiprintf_r+0x176>
 8011da8:	89ab      	ldrh	r3, [r5, #12]
 8011daa:	065b      	lsls	r3, r3, #25
 8011dac:	f53f af2c 	bmi.w	8011c08 <_svfiprintf_r+0x28>
 8011db0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011db2:	b01d      	add	sp, #116	; 0x74
 8011db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011db8:	ab03      	add	r3, sp, #12
 8011dba:	9300      	str	r3, [sp, #0]
 8011dbc:	462a      	mov	r2, r5
 8011dbe:	4b06      	ldr	r3, [pc, #24]	; (8011dd8 <_svfiprintf_r+0x1f8>)
 8011dc0:	a904      	add	r1, sp, #16
 8011dc2:	4638      	mov	r0, r7
 8011dc4:	f7fc fac0 	bl	800e348 <_printf_i>
 8011dc8:	e7eb      	b.n	8011da2 <_svfiprintf_r+0x1c2>
 8011dca:	bf00      	nop
 8011dcc:	08013564 	.word	0x08013564
 8011dd0:	0801356e 	.word	0x0801356e
 8011dd4:	0800de01 	.word	0x0800de01
 8011dd8:	08011b29 	.word	0x08011b29
 8011ddc:	0801356a 	.word	0x0801356a

08011de0 <_sungetc_r>:
 8011de0:	b538      	push	{r3, r4, r5, lr}
 8011de2:	1c4b      	adds	r3, r1, #1
 8011de4:	4614      	mov	r4, r2
 8011de6:	d103      	bne.n	8011df0 <_sungetc_r+0x10>
 8011de8:	f04f 35ff 	mov.w	r5, #4294967295
 8011dec:	4628      	mov	r0, r5
 8011dee:	bd38      	pop	{r3, r4, r5, pc}
 8011df0:	8993      	ldrh	r3, [r2, #12]
 8011df2:	f023 0320 	bic.w	r3, r3, #32
 8011df6:	8193      	strh	r3, [r2, #12]
 8011df8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011dfa:	6852      	ldr	r2, [r2, #4]
 8011dfc:	b2cd      	uxtb	r5, r1
 8011dfe:	b18b      	cbz	r3, 8011e24 <_sungetc_r+0x44>
 8011e00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011e02:	4293      	cmp	r3, r2
 8011e04:	dd08      	ble.n	8011e18 <_sungetc_r+0x38>
 8011e06:	6823      	ldr	r3, [r4, #0]
 8011e08:	1e5a      	subs	r2, r3, #1
 8011e0a:	6022      	str	r2, [r4, #0]
 8011e0c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8011e10:	6863      	ldr	r3, [r4, #4]
 8011e12:	3301      	adds	r3, #1
 8011e14:	6063      	str	r3, [r4, #4]
 8011e16:	e7e9      	b.n	8011dec <_sungetc_r+0xc>
 8011e18:	4621      	mov	r1, r4
 8011e1a:	f000 fcaf 	bl	801277c <__submore>
 8011e1e:	2800      	cmp	r0, #0
 8011e20:	d0f1      	beq.n	8011e06 <_sungetc_r+0x26>
 8011e22:	e7e1      	b.n	8011de8 <_sungetc_r+0x8>
 8011e24:	6921      	ldr	r1, [r4, #16]
 8011e26:	6823      	ldr	r3, [r4, #0]
 8011e28:	b151      	cbz	r1, 8011e40 <_sungetc_r+0x60>
 8011e2a:	4299      	cmp	r1, r3
 8011e2c:	d208      	bcs.n	8011e40 <_sungetc_r+0x60>
 8011e2e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8011e32:	42a9      	cmp	r1, r5
 8011e34:	d104      	bne.n	8011e40 <_sungetc_r+0x60>
 8011e36:	3b01      	subs	r3, #1
 8011e38:	3201      	adds	r2, #1
 8011e3a:	6023      	str	r3, [r4, #0]
 8011e3c:	6062      	str	r2, [r4, #4]
 8011e3e:	e7d5      	b.n	8011dec <_sungetc_r+0xc>
 8011e40:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8011e44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011e48:	6363      	str	r3, [r4, #52]	; 0x34
 8011e4a:	2303      	movs	r3, #3
 8011e4c:	63a3      	str	r3, [r4, #56]	; 0x38
 8011e4e:	4623      	mov	r3, r4
 8011e50:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011e54:	6023      	str	r3, [r4, #0]
 8011e56:	2301      	movs	r3, #1
 8011e58:	e7dc      	b.n	8011e14 <_sungetc_r+0x34>

08011e5a <__ssrefill_r>:
 8011e5a:	b510      	push	{r4, lr}
 8011e5c:	460c      	mov	r4, r1
 8011e5e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8011e60:	b169      	cbz	r1, 8011e7e <__ssrefill_r+0x24>
 8011e62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011e66:	4299      	cmp	r1, r3
 8011e68:	d001      	beq.n	8011e6e <__ssrefill_r+0x14>
 8011e6a:	f7fb fe7f 	bl	800db6c <_free_r>
 8011e6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011e70:	6063      	str	r3, [r4, #4]
 8011e72:	2000      	movs	r0, #0
 8011e74:	6360      	str	r0, [r4, #52]	; 0x34
 8011e76:	b113      	cbz	r3, 8011e7e <__ssrefill_r+0x24>
 8011e78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011e7a:	6023      	str	r3, [r4, #0]
 8011e7c:	bd10      	pop	{r4, pc}
 8011e7e:	6923      	ldr	r3, [r4, #16]
 8011e80:	6023      	str	r3, [r4, #0]
 8011e82:	2300      	movs	r3, #0
 8011e84:	6063      	str	r3, [r4, #4]
 8011e86:	89a3      	ldrh	r3, [r4, #12]
 8011e88:	f043 0320 	orr.w	r3, r3, #32
 8011e8c:	81a3      	strh	r3, [r4, #12]
 8011e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8011e92:	e7f3      	b.n	8011e7c <__ssrefill_r+0x22>

08011e94 <__ssvfiscanf_r>:
 8011e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e98:	460c      	mov	r4, r1
 8011e9a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8011e9e:	2100      	movs	r1, #0
 8011ea0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8011ea4:	49b2      	ldr	r1, [pc, #712]	; (8012170 <__ssvfiscanf_r+0x2dc>)
 8011ea6:	91a0      	str	r1, [sp, #640]	; 0x280
 8011ea8:	f10d 0804 	add.w	r8, sp, #4
 8011eac:	49b1      	ldr	r1, [pc, #708]	; (8012174 <__ssvfiscanf_r+0x2e0>)
 8011eae:	4fb2      	ldr	r7, [pc, #712]	; (8012178 <__ssvfiscanf_r+0x2e4>)
 8011eb0:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801217c <__ssvfiscanf_r+0x2e8>
 8011eb4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8011eb8:	4606      	mov	r6, r0
 8011eba:	91a1      	str	r1, [sp, #644]	; 0x284
 8011ebc:	9300      	str	r3, [sp, #0]
 8011ebe:	f892 a000 	ldrb.w	sl, [r2]
 8011ec2:	f1ba 0f00 	cmp.w	sl, #0
 8011ec6:	f000 8151 	beq.w	801216c <__ssvfiscanf_r+0x2d8>
 8011eca:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8011ece:	f013 0308 	ands.w	r3, r3, #8
 8011ed2:	f102 0501 	add.w	r5, r2, #1
 8011ed6:	d019      	beq.n	8011f0c <__ssvfiscanf_r+0x78>
 8011ed8:	6863      	ldr	r3, [r4, #4]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	dd0f      	ble.n	8011efe <__ssvfiscanf_r+0x6a>
 8011ede:	6823      	ldr	r3, [r4, #0]
 8011ee0:	781a      	ldrb	r2, [r3, #0]
 8011ee2:	5cba      	ldrb	r2, [r7, r2]
 8011ee4:	0712      	lsls	r2, r2, #28
 8011ee6:	d401      	bmi.n	8011eec <__ssvfiscanf_r+0x58>
 8011ee8:	462a      	mov	r2, r5
 8011eea:	e7e8      	b.n	8011ebe <__ssvfiscanf_r+0x2a>
 8011eec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011eee:	3201      	adds	r2, #1
 8011ef0:	9245      	str	r2, [sp, #276]	; 0x114
 8011ef2:	6862      	ldr	r2, [r4, #4]
 8011ef4:	3301      	adds	r3, #1
 8011ef6:	3a01      	subs	r2, #1
 8011ef8:	6062      	str	r2, [r4, #4]
 8011efa:	6023      	str	r3, [r4, #0]
 8011efc:	e7ec      	b.n	8011ed8 <__ssvfiscanf_r+0x44>
 8011efe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011f00:	4621      	mov	r1, r4
 8011f02:	4630      	mov	r0, r6
 8011f04:	4798      	blx	r3
 8011f06:	2800      	cmp	r0, #0
 8011f08:	d0e9      	beq.n	8011ede <__ssvfiscanf_r+0x4a>
 8011f0a:	e7ed      	b.n	8011ee8 <__ssvfiscanf_r+0x54>
 8011f0c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8011f10:	f040 8083 	bne.w	801201a <__ssvfiscanf_r+0x186>
 8011f14:	9341      	str	r3, [sp, #260]	; 0x104
 8011f16:	9343      	str	r3, [sp, #268]	; 0x10c
 8011f18:	7853      	ldrb	r3, [r2, #1]
 8011f1a:	2b2a      	cmp	r3, #42	; 0x2a
 8011f1c:	bf02      	ittt	eq
 8011f1e:	2310      	moveq	r3, #16
 8011f20:	1c95      	addeq	r5, r2, #2
 8011f22:	9341      	streq	r3, [sp, #260]	; 0x104
 8011f24:	220a      	movs	r2, #10
 8011f26:	46ab      	mov	fp, r5
 8011f28:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8011f2c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8011f30:	2b09      	cmp	r3, #9
 8011f32:	d91d      	bls.n	8011f70 <__ssvfiscanf_r+0xdc>
 8011f34:	4891      	ldr	r0, [pc, #580]	; (801217c <__ssvfiscanf_r+0x2e8>)
 8011f36:	2203      	movs	r2, #3
 8011f38:	f7ee f962 	bl	8000200 <memchr>
 8011f3c:	b140      	cbz	r0, 8011f50 <__ssvfiscanf_r+0xbc>
 8011f3e:	2301      	movs	r3, #1
 8011f40:	eba0 0009 	sub.w	r0, r0, r9
 8011f44:	fa03 f000 	lsl.w	r0, r3, r0
 8011f48:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011f4a:	4318      	orrs	r0, r3
 8011f4c:	9041      	str	r0, [sp, #260]	; 0x104
 8011f4e:	465d      	mov	r5, fp
 8011f50:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011f54:	2b78      	cmp	r3, #120	; 0x78
 8011f56:	d806      	bhi.n	8011f66 <__ssvfiscanf_r+0xd2>
 8011f58:	2b57      	cmp	r3, #87	; 0x57
 8011f5a:	d810      	bhi.n	8011f7e <__ssvfiscanf_r+0xea>
 8011f5c:	2b25      	cmp	r3, #37	; 0x25
 8011f5e:	d05c      	beq.n	801201a <__ssvfiscanf_r+0x186>
 8011f60:	d856      	bhi.n	8012010 <__ssvfiscanf_r+0x17c>
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d074      	beq.n	8012050 <__ssvfiscanf_r+0x1bc>
 8011f66:	2303      	movs	r3, #3
 8011f68:	9347      	str	r3, [sp, #284]	; 0x11c
 8011f6a:	230a      	movs	r3, #10
 8011f6c:	9342      	str	r3, [sp, #264]	; 0x108
 8011f6e:	e081      	b.n	8012074 <__ssvfiscanf_r+0x1e0>
 8011f70:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8011f72:	fb02 1303 	mla	r3, r2, r3, r1
 8011f76:	3b30      	subs	r3, #48	; 0x30
 8011f78:	9343      	str	r3, [sp, #268]	; 0x10c
 8011f7a:	465d      	mov	r5, fp
 8011f7c:	e7d3      	b.n	8011f26 <__ssvfiscanf_r+0x92>
 8011f7e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8011f82:	2a20      	cmp	r2, #32
 8011f84:	d8ef      	bhi.n	8011f66 <__ssvfiscanf_r+0xd2>
 8011f86:	a101      	add	r1, pc, #4	; (adr r1, 8011f8c <__ssvfiscanf_r+0xf8>)
 8011f88:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011f8c:	0801205f 	.word	0x0801205f
 8011f90:	08011f67 	.word	0x08011f67
 8011f94:	08011f67 	.word	0x08011f67
 8011f98:	080120bd 	.word	0x080120bd
 8011f9c:	08011f67 	.word	0x08011f67
 8011fa0:	08011f67 	.word	0x08011f67
 8011fa4:	08011f67 	.word	0x08011f67
 8011fa8:	08011f67 	.word	0x08011f67
 8011fac:	08011f67 	.word	0x08011f67
 8011fb0:	08011f67 	.word	0x08011f67
 8011fb4:	08011f67 	.word	0x08011f67
 8011fb8:	080120d3 	.word	0x080120d3
 8011fbc:	080120a9 	.word	0x080120a9
 8011fc0:	08012017 	.word	0x08012017
 8011fc4:	08012017 	.word	0x08012017
 8011fc8:	08012017 	.word	0x08012017
 8011fcc:	08011f67 	.word	0x08011f67
 8011fd0:	080120ad 	.word	0x080120ad
 8011fd4:	08011f67 	.word	0x08011f67
 8011fd8:	08011f67 	.word	0x08011f67
 8011fdc:	08011f67 	.word	0x08011f67
 8011fe0:	08011f67 	.word	0x08011f67
 8011fe4:	080120e3 	.word	0x080120e3
 8011fe8:	080120b5 	.word	0x080120b5
 8011fec:	08012057 	.word	0x08012057
 8011ff0:	08011f67 	.word	0x08011f67
 8011ff4:	08011f67 	.word	0x08011f67
 8011ff8:	080120df 	.word	0x080120df
 8011ffc:	08011f67 	.word	0x08011f67
 8012000:	080120a9 	.word	0x080120a9
 8012004:	08011f67 	.word	0x08011f67
 8012008:	08011f67 	.word	0x08011f67
 801200c:	0801205f 	.word	0x0801205f
 8012010:	3b45      	subs	r3, #69	; 0x45
 8012012:	2b02      	cmp	r3, #2
 8012014:	d8a7      	bhi.n	8011f66 <__ssvfiscanf_r+0xd2>
 8012016:	2305      	movs	r3, #5
 8012018:	e02b      	b.n	8012072 <__ssvfiscanf_r+0x1de>
 801201a:	6863      	ldr	r3, [r4, #4]
 801201c:	2b00      	cmp	r3, #0
 801201e:	dd0d      	ble.n	801203c <__ssvfiscanf_r+0x1a8>
 8012020:	6823      	ldr	r3, [r4, #0]
 8012022:	781a      	ldrb	r2, [r3, #0]
 8012024:	4552      	cmp	r2, sl
 8012026:	f040 80a1 	bne.w	801216c <__ssvfiscanf_r+0x2d8>
 801202a:	3301      	adds	r3, #1
 801202c:	6862      	ldr	r2, [r4, #4]
 801202e:	6023      	str	r3, [r4, #0]
 8012030:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8012032:	3a01      	subs	r2, #1
 8012034:	3301      	adds	r3, #1
 8012036:	6062      	str	r2, [r4, #4]
 8012038:	9345      	str	r3, [sp, #276]	; 0x114
 801203a:	e755      	b.n	8011ee8 <__ssvfiscanf_r+0x54>
 801203c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801203e:	4621      	mov	r1, r4
 8012040:	4630      	mov	r0, r6
 8012042:	4798      	blx	r3
 8012044:	2800      	cmp	r0, #0
 8012046:	d0eb      	beq.n	8012020 <__ssvfiscanf_r+0x18c>
 8012048:	9844      	ldr	r0, [sp, #272]	; 0x110
 801204a:	2800      	cmp	r0, #0
 801204c:	f040 8084 	bne.w	8012158 <__ssvfiscanf_r+0x2c4>
 8012050:	f04f 30ff 	mov.w	r0, #4294967295
 8012054:	e086      	b.n	8012164 <__ssvfiscanf_r+0x2d0>
 8012056:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012058:	f042 0220 	orr.w	r2, r2, #32
 801205c:	9241      	str	r2, [sp, #260]	; 0x104
 801205e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012060:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012064:	9241      	str	r2, [sp, #260]	; 0x104
 8012066:	2210      	movs	r2, #16
 8012068:	2b6f      	cmp	r3, #111	; 0x6f
 801206a:	9242      	str	r2, [sp, #264]	; 0x108
 801206c:	bf34      	ite	cc
 801206e:	2303      	movcc	r3, #3
 8012070:	2304      	movcs	r3, #4
 8012072:	9347      	str	r3, [sp, #284]	; 0x11c
 8012074:	6863      	ldr	r3, [r4, #4]
 8012076:	2b00      	cmp	r3, #0
 8012078:	dd41      	ble.n	80120fe <__ssvfiscanf_r+0x26a>
 801207a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801207c:	0659      	lsls	r1, r3, #25
 801207e:	d404      	bmi.n	801208a <__ssvfiscanf_r+0x1f6>
 8012080:	6823      	ldr	r3, [r4, #0]
 8012082:	781a      	ldrb	r2, [r3, #0]
 8012084:	5cba      	ldrb	r2, [r7, r2]
 8012086:	0712      	lsls	r2, r2, #28
 8012088:	d440      	bmi.n	801210c <__ssvfiscanf_r+0x278>
 801208a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801208c:	2b02      	cmp	r3, #2
 801208e:	dc4f      	bgt.n	8012130 <__ssvfiscanf_r+0x29c>
 8012090:	466b      	mov	r3, sp
 8012092:	4622      	mov	r2, r4
 8012094:	a941      	add	r1, sp, #260	; 0x104
 8012096:	4630      	mov	r0, r6
 8012098:	f000 f9ce 	bl	8012438 <_scanf_chars>
 801209c:	2801      	cmp	r0, #1
 801209e:	d065      	beq.n	801216c <__ssvfiscanf_r+0x2d8>
 80120a0:	2802      	cmp	r0, #2
 80120a2:	f47f af21 	bne.w	8011ee8 <__ssvfiscanf_r+0x54>
 80120a6:	e7cf      	b.n	8012048 <__ssvfiscanf_r+0x1b4>
 80120a8:	220a      	movs	r2, #10
 80120aa:	e7dd      	b.n	8012068 <__ssvfiscanf_r+0x1d4>
 80120ac:	2300      	movs	r3, #0
 80120ae:	9342      	str	r3, [sp, #264]	; 0x108
 80120b0:	2303      	movs	r3, #3
 80120b2:	e7de      	b.n	8012072 <__ssvfiscanf_r+0x1de>
 80120b4:	2308      	movs	r3, #8
 80120b6:	9342      	str	r3, [sp, #264]	; 0x108
 80120b8:	2304      	movs	r3, #4
 80120ba:	e7da      	b.n	8012072 <__ssvfiscanf_r+0x1de>
 80120bc:	4629      	mov	r1, r5
 80120be:	4640      	mov	r0, r8
 80120c0:	f000 fb22 	bl	8012708 <__sccl>
 80120c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80120c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80120ca:	9341      	str	r3, [sp, #260]	; 0x104
 80120cc:	4605      	mov	r5, r0
 80120ce:	2301      	movs	r3, #1
 80120d0:	e7cf      	b.n	8012072 <__ssvfiscanf_r+0x1de>
 80120d2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80120d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80120d8:	9341      	str	r3, [sp, #260]	; 0x104
 80120da:	2300      	movs	r3, #0
 80120dc:	e7c9      	b.n	8012072 <__ssvfiscanf_r+0x1de>
 80120de:	2302      	movs	r3, #2
 80120e0:	e7c7      	b.n	8012072 <__ssvfiscanf_r+0x1de>
 80120e2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80120e4:	06c3      	lsls	r3, r0, #27
 80120e6:	f53f aeff 	bmi.w	8011ee8 <__ssvfiscanf_r+0x54>
 80120ea:	9b00      	ldr	r3, [sp, #0]
 80120ec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80120ee:	1d19      	adds	r1, r3, #4
 80120f0:	9100      	str	r1, [sp, #0]
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	07c0      	lsls	r0, r0, #31
 80120f6:	bf4c      	ite	mi
 80120f8:	801a      	strhmi	r2, [r3, #0]
 80120fa:	601a      	strpl	r2, [r3, #0]
 80120fc:	e6f4      	b.n	8011ee8 <__ssvfiscanf_r+0x54>
 80120fe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012100:	4621      	mov	r1, r4
 8012102:	4630      	mov	r0, r6
 8012104:	4798      	blx	r3
 8012106:	2800      	cmp	r0, #0
 8012108:	d0b7      	beq.n	801207a <__ssvfiscanf_r+0x1e6>
 801210a:	e79d      	b.n	8012048 <__ssvfiscanf_r+0x1b4>
 801210c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801210e:	3201      	adds	r2, #1
 8012110:	9245      	str	r2, [sp, #276]	; 0x114
 8012112:	6862      	ldr	r2, [r4, #4]
 8012114:	3a01      	subs	r2, #1
 8012116:	2a00      	cmp	r2, #0
 8012118:	6062      	str	r2, [r4, #4]
 801211a:	dd02      	ble.n	8012122 <__ssvfiscanf_r+0x28e>
 801211c:	3301      	adds	r3, #1
 801211e:	6023      	str	r3, [r4, #0]
 8012120:	e7ae      	b.n	8012080 <__ssvfiscanf_r+0x1ec>
 8012122:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012124:	4621      	mov	r1, r4
 8012126:	4630      	mov	r0, r6
 8012128:	4798      	blx	r3
 801212a:	2800      	cmp	r0, #0
 801212c:	d0a8      	beq.n	8012080 <__ssvfiscanf_r+0x1ec>
 801212e:	e78b      	b.n	8012048 <__ssvfiscanf_r+0x1b4>
 8012130:	2b04      	cmp	r3, #4
 8012132:	dc06      	bgt.n	8012142 <__ssvfiscanf_r+0x2ae>
 8012134:	466b      	mov	r3, sp
 8012136:	4622      	mov	r2, r4
 8012138:	a941      	add	r1, sp, #260	; 0x104
 801213a:	4630      	mov	r0, r6
 801213c:	f000 f9d4 	bl	80124e8 <_scanf_i>
 8012140:	e7ac      	b.n	801209c <__ssvfiscanf_r+0x208>
 8012142:	4b0f      	ldr	r3, [pc, #60]	; (8012180 <__ssvfiscanf_r+0x2ec>)
 8012144:	2b00      	cmp	r3, #0
 8012146:	f43f aecf 	beq.w	8011ee8 <__ssvfiscanf_r+0x54>
 801214a:	466b      	mov	r3, sp
 801214c:	4622      	mov	r2, r4
 801214e:	a941      	add	r1, sp, #260	; 0x104
 8012150:	4630      	mov	r0, r6
 8012152:	f7fc fa1f 	bl	800e594 <_scanf_float>
 8012156:	e7a1      	b.n	801209c <__ssvfiscanf_r+0x208>
 8012158:	89a3      	ldrh	r3, [r4, #12]
 801215a:	f013 0f40 	tst.w	r3, #64	; 0x40
 801215e:	bf18      	it	ne
 8012160:	f04f 30ff 	movne.w	r0, #4294967295
 8012164:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8012168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801216c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801216e:	e7f9      	b.n	8012164 <__ssvfiscanf_r+0x2d0>
 8012170:	08011de1 	.word	0x08011de1
 8012174:	08011e5b 	.word	0x08011e5b
 8012178:	080131f5 	.word	0x080131f5
 801217c:	0801356a 	.word	0x0801356a
 8012180:	0800e595 	.word	0x0800e595

08012184 <__sfputc_r>:
 8012184:	6893      	ldr	r3, [r2, #8]
 8012186:	3b01      	subs	r3, #1
 8012188:	2b00      	cmp	r3, #0
 801218a:	b410      	push	{r4}
 801218c:	6093      	str	r3, [r2, #8]
 801218e:	da08      	bge.n	80121a2 <__sfputc_r+0x1e>
 8012190:	6994      	ldr	r4, [r2, #24]
 8012192:	42a3      	cmp	r3, r4
 8012194:	db01      	blt.n	801219a <__sfputc_r+0x16>
 8012196:	290a      	cmp	r1, #10
 8012198:	d103      	bne.n	80121a2 <__sfputc_r+0x1e>
 801219a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801219e:	f000 bb27 	b.w	80127f0 <__swbuf_r>
 80121a2:	6813      	ldr	r3, [r2, #0]
 80121a4:	1c58      	adds	r0, r3, #1
 80121a6:	6010      	str	r0, [r2, #0]
 80121a8:	7019      	strb	r1, [r3, #0]
 80121aa:	4608      	mov	r0, r1
 80121ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121b0:	4770      	bx	lr

080121b2 <__sfputs_r>:
 80121b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121b4:	4606      	mov	r6, r0
 80121b6:	460f      	mov	r7, r1
 80121b8:	4614      	mov	r4, r2
 80121ba:	18d5      	adds	r5, r2, r3
 80121bc:	42ac      	cmp	r4, r5
 80121be:	d101      	bne.n	80121c4 <__sfputs_r+0x12>
 80121c0:	2000      	movs	r0, #0
 80121c2:	e007      	b.n	80121d4 <__sfputs_r+0x22>
 80121c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121c8:	463a      	mov	r2, r7
 80121ca:	4630      	mov	r0, r6
 80121cc:	f7ff ffda 	bl	8012184 <__sfputc_r>
 80121d0:	1c43      	adds	r3, r0, #1
 80121d2:	d1f3      	bne.n	80121bc <__sfputs_r+0xa>
 80121d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080121d8 <_vfiprintf_r>:
 80121d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121dc:	460d      	mov	r5, r1
 80121de:	b09d      	sub	sp, #116	; 0x74
 80121e0:	4614      	mov	r4, r2
 80121e2:	4698      	mov	r8, r3
 80121e4:	4606      	mov	r6, r0
 80121e6:	b118      	cbz	r0, 80121f0 <_vfiprintf_r+0x18>
 80121e8:	6983      	ldr	r3, [r0, #24]
 80121ea:	b90b      	cbnz	r3, 80121f0 <_vfiprintf_r+0x18>
 80121ec:	f7fb fbb8 	bl	800d960 <__sinit>
 80121f0:	4b89      	ldr	r3, [pc, #548]	; (8012418 <_vfiprintf_r+0x240>)
 80121f2:	429d      	cmp	r5, r3
 80121f4:	d11b      	bne.n	801222e <_vfiprintf_r+0x56>
 80121f6:	6875      	ldr	r5, [r6, #4]
 80121f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80121fa:	07d9      	lsls	r1, r3, #31
 80121fc:	d405      	bmi.n	801220a <_vfiprintf_r+0x32>
 80121fe:	89ab      	ldrh	r3, [r5, #12]
 8012200:	059a      	lsls	r2, r3, #22
 8012202:	d402      	bmi.n	801220a <_vfiprintf_r+0x32>
 8012204:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012206:	f7fb fc6e 	bl	800dae6 <__retarget_lock_acquire_recursive>
 801220a:	89ab      	ldrh	r3, [r5, #12]
 801220c:	071b      	lsls	r3, r3, #28
 801220e:	d501      	bpl.n	8012214 <_vfiprintf_r+0x3c>
 8012210:	692b      	ldr	r3, [r5, #16]
 8012212:	b9eb      	cbnz	r3, 8012250 <_vfiprintf_r+0x78>
 8012214:	4629      	mov	r1, r5
 8012216:	4630      	mov	r0, r6
 8012218:	f000 fb4a 	bl	80128b0 <__swsetup_r>
 801221c:	b1c0      	cbz	r0, 8012250 <_vfiprintf_r+0x78>
 801221e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012220:	07dc      	lsls	r4, r3, #31
 8012222:	d50e      	bpl.n	8012242 <_vfiprintf_r+0x6a>
 8012224:	f04f 30ff 	mov.w	r0, #4294967295
 8012228:	b01d      	add	sp, #116	; 0x74
 801222a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801222e:	4b7b      	ldr	r3, [pc, #492]	; (801241c <_vfiprintf_r+0x244>)
 8012230:	429d      	cmp	r5, r3
 8012232:	d101      	bne.n	8012238 <_vfiprintf_r+0x60>
 8012234:	68b5      	ldr	r5, [r6, #8]
 8012236:	e7df      	b.n	80121f8 <_vfiprintf_r+0x20>
 8012238:	4b79      	ldr	r3, [pc, #484]	; (8012420 <_vfiprintf_r+0x248>)
 801223a:	429d      	cmp	r5, r3
 801223c:	bf08      	it	eq
 801223e:	68f5      	ldreq	r5, [r6, #12]
 8012240:	e7da      	b.n	80121f8 <_vfiprintf_r+0x20>
 8012242:	89ab      	ldrh	r3, [r5, #12]
 8012244:	0598      	lsls	r0, r3, #22
 8012246:	d4ed      	bmi.n	8012224 <_vfiprintf_r+0x4c>
 8012248:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801224a:	f7fb fc4d 	bl	800dae8 <__retarget_lock_release_recursive>
 801224e:	e7e9      	b.n	8012224 <_vfiprintf_r+0x4c>
 8012250:	2300      	movs	r3, #0
 8012252:	9309      	str	r3, [sp, #36]	; 0x24
 8012254:	2320      	movs	r3, #32
 8012256:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801225a:	f8cd 800c 	str.w	r8, [sp, #12]
 801225e:	2330      	movs	r3, #48	; 0x30
 8012260:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012424 <_vfiprintf_r+0x24c>
 8012264:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012268:	f04f 0901 	mov.w	r9, #1
 801226c:	4623      	mov	r3, r4
 801226e:	469a      	mov	sl, r3
 8012270:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012274:	b10a      	cbz	r2, 801227a <_vfiprintf_r+0xa2>
 8012276:	2a25      	cmp	r2, #37	; 0x25
 8012278:	d1f9      	bne.n	801226e <_vfiprintf_r+0x96>
 801227a:	ebba 0b04 	subs.w	fp, sl, r4
 801227e:	d00b      	beq.n	8012298 <_vfiprintf_r+0xc0>
 8012280:	465b      	mov	r3, fp
 8012282:	4622      	mov	r2, r4
 8012284:	4629      	mov	r1, r5
 8012286:	4630      	mov	r0, r6
 8012288:	f7ff ff93 	bl	80121b2 <__sfputs_r>
 801228c:	3001      	adds	r0, #1
 801228e:	f000 80aa 	beq.w	80123e6 <_vfiprintf_r+0x20e>
 8012292:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012294:	445a      	add	r2, fp
 8012296:	9209      	str	r2, [sp, #36]	; 0x24
 8012298:	f89a 3000 	ldrb.w	r3, [sl]
 801229c:	2b00      	cmp	r3, #0
 801229e:	f000 80a2 	beq.w	80123e6 <_vfiprintf_r+0x20e>
 80122a2:	2300      	movs	r3, #0
 80122a4:	f04f 32ff 	mov.w	r2, #4294967295
 80122a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80122ac:	f10a 0a01 	add.w	sl, sl, #1
 80122b0:	9304      	str	r3, [sp, #16]
 80122b2:	9307      	str	r3, [sp, #28]
 80122b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80122b8:	931a      	str	r3, [sp, #104]	; 0x68
 80122ba:	4654      	mov	r4, sl
 80122bc:	2205      	movs	r2, #5
 80122be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122c2:	4858      	ldr	r0, [pc, #352]	; (8012424 <_vfiprintf_r+0x24c>)
 80122c4:	f7ed ff9c 	bl	8000200 <memchr>
 80122c8:	9a04      	ldr	r2, [sp, #16]
 80122ca:	b9d8      	cbnz	r0, 8012304 <_vfiprintf_r+0x12c>
 80122cc:	06d1      	lsls	r1, r2, #27
 80122ce:	bf44      	itt	mi
 80122d0:	2320      	movmi	r3, #32
 80122d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80122d6:	0713      	lsls	r3, r2, #28
 80122d8:	bf44      	itt	mi
 80122da:	232b      	movmi	r3, #43	; 0x2b
 80122dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80122e0:	f89a 3000 	ldrb.w	r3, [sl]
 80122e4:	2b2a      	cmp	r3, #42	; 0x2a
 80122e6:	d015      	beq.n	8012314 <_vfiprintf_r+0x13c>
 80122e8:	9a07      	ldr	r2, [sp, #28]
 80122ea:	4654      	mov	r4, sl
 80122ec:	2000      	movs	r0, #0
 80122ee:	f04f 0c0a 	mov.w	ip, #10
 80122f2:	4621      	mov	r1, r4
 80122f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80122f8:	3b30      	subs	r3, #48	; 0x30
 80122fa:	2b09      	cmp	r3, #9
 80122fc:	d94e      	bls.n	801239c <_vfiprintf_r+0x1c4>
 80122fe:	b1b0      	cbz	r0, 801232e <_vfiprintf_r+0x156>
 8012300:	9207      	str	r2, [sp, #28]
 8012302:	e014      	b.n	801232e <_vfiprintf_r+0x156>
 8012304:	eba0 0308 	sub.w	r3, r0, r8
 8012308:	fa09 f303 	lsl.w	r3, r9, r3
 801230c:	4313      	orrs	r3, r2
 801230e:	9304      	str	r3, [sp, #16]
 8012310:	46a2      	mov	sl, r4
 8012312:	e7d2      	b.n	80122ba <_vfiprintf_r+0xe2>
 8012314:	9b03      	ldr	r3, [sp, #12]
 8012316:	1d19      	adds	r1, r3, #4
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	9103      	str	r1, [sp, #12]
 801231c:	2b00      	cmp	r3, #0
 801231e:	bfbb      	ittet	lt
 8012320:	425b      	neglt	r3, r3
 8012322:	f042 0202 	orrlt.w	r2, r2, #2
 8012326:	9307      	strge	r3, [sp, #28]
 8012328:	9307      	strlt	r3, [sp, #28]
 801232a:	bfb8      	it	lt
 801232c:	9204      	strlt	r2, [sp, #16]
 801232e:	7823      	ldrb	r3, [r4, #0]
 8012330:	2b2e      	cmp	r3, #46	; 0x2e
 8012332:	d10c      	bne.n	801234e <_vfiprintf_r+0x176>
 8012334:	7863      	ldrb	r3, [r4, #1]
 8012336:	2b2a      	cmp	r3, #42	; 0x2a
 8012338:	d135      	bne.n	80123a6 <_vfiprintf_r+0x1ce>
 801233a:	9b03      	ldr	r3, [sp, #12]
 801233c:	1d1a      	adds	r2, r3, #4
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	9203      	str	r2, [sp, #12]
 8012342:	2b00      	cmp	r3, #0
 8012344:	bfb8      	it	lt
 8012346:	f04f 33ff 	movlt.w	r3, #4294967295
 801234a:	3402      	adds	r4, #2
 801234c:	9305      	str	r3, [sp, #20]
 801234e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012434 <_vfiprintf_r+0x25c>
 8012352:	7821      	ldrb	r1, [r4, #0]
 8012354:	2203      	movs	r2, #3
 8012356:	4650      	mov	r0, sl
 8012358:	f7ed ff52 	bl	8000200 <memchr>
 801235c:	b140      	cbz	r0, 8012370 <_vfiprintf_r+0x198>
 801235e:	2340      	movs	r3, #64	; 0x40
 8012360:	eba0 000a 	sub.w	r0, r0, sl
 8012364:	fa03 f000 	lsl.w	r0, r3, r0
 8012368:	9b04      	ldr	r3, [sp, #16]
 801236a:	4303      	orrs	r3, r0
 801236c:	3401      	adds	r4, #1
 801236e:	9304      	str	r3, [sp, #16]
 8012370:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012374:	482c      	ldr	r0, [pc, #176]	; (8012428 <_vfiprintf_r+0x250>)
 8012376:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801237a:	2206      	movs	r2, #6
 801237c:	f7ed ff40 	bl	8000200 <memchr>
 8012380:	2800      	cmp	r0, #0
 8012382:	d03f      	beq.n	8012404 <_vfiprintf_r+0x22c>
 8012384:	4b29      	ldr	r3, [pc, #164]	; (801242c <_vfiprintf_r+0x254>)
 8012386:	bb1b      	cbnz	r3, 80123d0 <_vfiprintf_r+0x1f8>
 8012388:	9b03      	ldr	r3, [sp, #12]
 801238a:	3307      	adds	r3, #7
 801238c:	f023 0307 	bic.w	r3, r3, #7
 8012390:	3308      	adds	r3, #8
 8012392:	9303      	str	r3, [sp, #12]
 8012394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012396:	443b      	add	r3, r7
 8012398:	9309      	str	r3, [sp, #36]	; 0x24
 801239a:	e767      	b.n	801226c <_vfiprintf_r+0x94>
 801239c:	fb0c 3202 	mla	r2, ip, r2, r3
 80123a0:	460c      	mov	r4, r1
 80123a2:	2001      	movs	r0, #1
 80123a4:	e7a5      	b.n	80122f2 <_vfiprintf_r+0x11a>
 80123a6:	2300      	movs	r3, #0
 80123a8:	3401      	adds	r4, #1
 80123aa:	9305      	str	r3, [sp, #20]
 80123ac:	4619      	mov	r1, r3
 80123ae:	f04f 0c0a 	mov.w	ip, #10
 80123b2:	4620      	mov	r0, r4
 80123b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80123b8:	3a30      	subs	r2, #48	; 0x30
 80123ba:	2a09      	cmp	r2, #9
 80123bc:	d903      	bls.n	80123c6 <_vfiprintf_r+0x1ee>
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d0c5      	beq.n	801234e <_vfiprintf_r+0x176>
 80123c2:	9105      	str	r1, [sp, #20]
 80123c4:	e7c3      	b.n	801234e <_vfiprintf_r+0x176>
 80123c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80123ca:	4604      	mov	r4, r0
 80123cc:	2301      	movs	r3, #1
 80123ce:	e7f0      	b.n	80123b2 <_vfiprintf_r+0x1da>
 80123d0:	ab03      	add	r3, sp, #12
 80123d2:	9300      	str	r3, [sp, #0]
 80123d4:	462a      	mov	r2, r5
 80123d6:	4b16      	ldr	r3, [pc, #88]	; (8012430 <_vfiprintf_r+0x258>)
 80123d8:	a904      	add	r1, sp, #16
 80123da:	4630      	mov	r0, r6
 80123dc:	f7fb fd10 	bl	800de00 <_printf_float>
 80123e0:	4607      	mov	r7, r0
 80123e2:	1c78      	adds	r0, r7, #1
 80123e4:	d1d6      	bne.n	8012394 <_vfiprintf_r+0x1bc>
 80123e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80123e8:	07d9      	lsls	r1, r3, #31
 80123ea:	d405      	bmi.n	80123f8 <_vfiprintf_r+0x220>
 80123ec:	89ab      	ldrh	r3, [r5, #12]
 80123ee:	059a      	lsls	r2, r3, #22
 80123f0:	d402      	bmi.n	80123f8 <_vfiprintf_r+0x220>
 80123f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80123f4:	f7fb fb78 	bl	800dae8 <__retarget_lock_release_recursive>
 80123f8:	89ab      	ldrh	r3, [r5, #12]
 80123fa:	065b      	lsls	r3, r3, #25
 80123fc:	f53f af12 	bmi.w	8012224 <_vfiprintf_r+0x4c>
 8012400:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012402:	e711      	b.n	8012228 <_vfiprintf_r+0x50>
 8012404:	ab03      	add	r3, sp, #12
 8012406:	9300      	str	r3, [sp, #0]
 8012408:	462a      	mov	r2, r5
 801240a:	4b09      	ldr	r3, [pc, #36]	; (8012430 <_vfiprintf_r+0x258>)
 801240c:	a904      	add	r1, sp, #16
 801240e:	4630      	mov	r0, r6
 8012410:	f7fb ff9a 	bl	800e348 <_printf_i>
 8012414:	e7e4      	b.n	80123e0 <_vfiprintf_r+0x208>
 8012416:	bf00      	nop
 8012418:	080130ec 	.word	0x080130ec
 801241c:	0801310c 	.word	0x0801310c
 8012420:	080130cc 	.word	0x080130cc
 8012424:	08013564 	.word	0x08013564
 8012428:	0801356e 	.word	0x0801356e
 801242c:	0800de01 	.word	0x0800de01
 8012430:	080121b3 	.word	0x080121b3
 8012434:	0801356a 	.word	0x0801356a

08012438 <_scanf_chars>:
 8012438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801243c:	4615      	mov	r5, r2
 801243e:	688a      	ldr	r2, [r1, #8]
 8012440:	4680      	mov	r8, r0
 8012442:	460c      	mov	r4, r1
 8012444:	b932      	cbnz	r2, 8012454 <_scanf_chars+0x1c>
 8012446:	698a      	ldr	r2, [r1, #24]
 8012448:	2a00      	cmp	r2, #0
 801244a:	bf0c      	ite	eq
 801244c:	2201      	moveq	r2, #1
 801244e:	f04f 32ff 	movne.w	r2, #4294967295
 8012452:	608a      	str	r2, [r1, #8]
 8012454:	6822      	ldr	r2, [r4, #0]
 8012456:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80124e4 <_scanf_chars+0xac>
 801245a:	06d1      	lsls	r1, r2, #27
 801245c:	bf5f      	itttt	pl
 801245e:	681a      	ldrpl	r2, [r3, #0]
 8012460:	1d11      	addpl	r1, r2, #4
 8012462:	6019      	strpl	r1, [r3, #0]
 8012464:	6816      	ldrpl	r6, [r2, #0]
 8012466:	2700      	movs	r7, #0
 8012468:	69a0      	ldr	r0, [r4, #24]
 801246a:	b188      	cbz	r0, 8012490 <_scanf_chars+0x58>
 801246c:	2801      	cmp	r0, #1
 801246e:	d107      	bne.n	8012480 <_scanf_chars+0x48>
 8012470:	682b      	ldr	r3, [r5, #0]
 8012472:	781a      	ldrb	r2, [r3, #0]
 8012474:	6963      	ldr	r3, [r4, #20]
 8012476:	5c9b      	ldrb	r3, [r3, r2]
 8012478:	b953      	cbnz	r3, 8012490 <_scanf_chars+0x58>
 801247a:	bb27      	cbnz	r7, 80124c6 <_scanf_chars+0x8e>
 801247c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012480:	2802      	cmp	r0, #2
 8012482:	d120      	bne.n	80124c6 <_scanf_chars+0x8e>
 8012484:	682b      	ldr	r3, [r5, #0]
 8012486:	781b      	ldrb	r3, [r3, #0]
 8012488:	f813 3009 	ldrb.w	r3, [r3, r9]
 801248c:	071b      	lsls	r3, r3, #28
 801248e:	d41a      	bmi.n	80124c6 <_scanf_chars+0x8e>
 8012490:	6823      	ldr	r3, [r4, #0]
 8012492:	06da      	lsls	r2, r3, #27
 8012494:	bf5e      	ittt	pl
 8012496:	682b      	ldrpl	r3, [r5, #0]
 8012498:	781b      	ldrbpl	r3, [r3, #0]
 801249a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801249e:	682a      	ldr	r2, [r5, #0]
 80124a0:	686b      	ldr	r3, [r5, #4]
 80124a2:	3201      	adds	r2, #1
 80124a4:	602a      	str	r2, [r5, #0]
 80124a6:	68a2      	ldr	r2, [r4, #8]
 80124a8:	3b01      	subs	r3, #1
 80124aa:	3a01      	subs	r2, #1
 80124ac:	606b      	str	r3, [r5, #4]
 80124ae:	3701      	adds	r7, #1
 80124b0:	60a2      	str	r2, [r4, #8]
 80124b2:	b142      	cbz	r2, 80124c6 <_scanf_chars+0x8e>
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	dcd7      	bgt.n	8012468 <_scanf_chars+0x30>
 80124b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80124bc:	4629      	mov	r1, r5
 80124be:	4640      	mov	r0, r8
 80124c0:	4798      	blx	r3
 80124c2:	2800      	cmp	r0, #0
 80124c4:	d0d0      	beq.n	8012468 <_scanf_chars+0x30>
 80124c6:	6823      	ldr	r3, [r4, #0]
 80124c8:	f013 0310 	ands.w	r3, r3, #16
 80124cc:	d105      	bne.n	80124da <_scanf_chars+0xa2>
 80124ce:	68e2      	ldr	r2, [r4, #12]
 80124d0:	3201      	adds	r2, #1
 80124d2:	60e2      	str	r2, [r4, #12]
 80124d4:	69a2      	ldr	r2, [r4, #24]
 80124d6:	b102      	cbz	r2, 80124da <_scanf_chars+0xa2>
 80124d8:	7033      	strb	r3, [r6, #0]
 80124da:	6923      	ldr	r3, [r4, #16]
 80124dc:	441f      	add	r7, r3
 80124de:	6127      	str	r7, [r4, #16]
 80124e0:	2000      	movs	r0, #0
 80124e2:	e7cb      	b.n	801247c <_scanf_chars+0x44>
 80124e4:	080131f5 	.word	0x080131f5

080124e8 <_scanf_i>:
 80124e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124ec:	4698      	mov	r8, r3
 80124ee:	4b74      	ldr	r3, [pc, #464]	; (80126c0 <_scanf_i+0x1d8>)
 80124f0:	460c      	mov	r4, r1
 80124f2:	4682      	mov	sl, r0
 80124f4:	4616      	mov	r6, r2
 80124f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80124fa:	b087      	sub	sp, #28
 80124fc:	ab03      	add	r3, sp, #12
 80124fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012502:	4b70      	ldr	r3, [pc, #448]	; (80126c4 <_scanf_i+0x1dc>)
 8012504:	69a1      	ldr	r1, [r4, #24]
 8012506:	4a70      	ldr	r2, [pc, #448]	; (80126c8 <_scanf_i+0x1e0>)
 8012508:	2903      	cmp	r1, #3
 801250a:	bf18      	it	ne
 801250c:	461a      	movne	r2, r3
 801250e:	68a3      	ldr	r3, [r4, #8]
 8012510:	9201      	str	r2, [sp, #4]
 8012512:	1e5a      	subs	r2, r3, #1
 8012514:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012518:	bf88      	it	hi
 801251a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801251e:	4627      	mov	r7, r4
 8012520:	bf82      	ittt	hi
 8012522:	eb03 0905 	addhi.w	r9, r3, r5
 8012526:	f240 135d 	movwhi	r3, #349	; 0x15d
 801252a:	60a3      	strhi	r3, [r4, #8]
 801252c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012530:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8012534:	bf98      	it	ls
 8012536:	f04f 0900 	movls.w	r9, #0
 801253a:	6023      	str	r3, [r4, #0]
 801253c:	463d      	mov	r5, r7
 801253e:	f04f 0b00 	mov.w	fp, #0
 8012542:	6831      	ldr	r1, [r6, #0]
 8012544:	ab03      	add	r3, sp, #12
 8012546:	7809      	ldrb	r1, [r1, #0]
 8012548:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801254c:	2202      	movs	r2, #2
 801254e:	f7ed fe57 	bl	8000200 <memchr>
 8012552:	b328      	cbz	r0, 80125a0 <_scanf_i+0xb8>
 8012554:	f1bb 0f01 	cmp.w	fp, #1
 8012558:	d159      	bne.n	801260e <_scanf_i+0x126>
 801255a:	6862      	ldr	r2, [r4, #4]
 801255c:	b92a      	cbnz	r2, 801256a <_scanf_i+0x82>
 801255e:	6822      	ldr	r2, [r4, #0]
 8012560:	2308      	movs	r3, #8
 8012562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012566:	6063      	str	r3, [r4, #4]
 8012568:	6022      	str	r2, [r4, #0]
 801256a:	6822      	ldr	r2, [r4, #0]
 801256c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8012570:	6022      	str	r2, [r4, #0]
 8012572:	68a2      	ldr	r2, [r4, #8]
 8012574:	1e51      	subs	r1, r2, #1
 8012576:	60a1      	str	r1, [r4, #8]
 8012578:	b192      	cbz	r2, 80125a0 <_scanf_i+0xb8>
 801257a:	6832      	ldr	r2, [r6, #0]
 801257c:	1c51      	adds	r1, r2, #1
 801257e:	6031      	str	r1, [r6, #0]
 8012580:	7812      	ldrb	r2, [r2, #0]
 8012582:	f805 2b01 	strb.w	r2, [r5], #1
 8012586:	6872      	ldr	r2, [r6, #4]
 8012588:	3a01      	subs	r2, #1
 801258a:	2a00      	cmp	r2, #0
 801258c:	6072      	str	r2, [r6, #4]
 801258e:	dc07      	bgt.n	80125a0 <_scanf_i+0xb8>
 8012590:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8012594:	4631      	mov	r1, r6
 8012596:	4650      	mov	r0, sl
 8012598:	4790      	blx	r2
 801259a:	2800      	cmp	r0, #0
 801259c:	f040 8085 	bne.w	80126aa <_scanf_i+0x1c2>
 80125a0:	f10b 0b01 	add.w	fp, fp, #1
 80125a4:	f1bb 0f03 	cmp.w	fp, #3
 80125a8:	d1cb      	bne.n	8012542 <_scanf_i+0x5a>
 80125aa:	6863      	ldr	r3, [r4, #4]
 80125ac:	b90b      	cbnz	r3, 80125b2 <_scanf_i+0xca>
 80125ae:	230a      	movs	r3, #10
 80125b0:	6063      	str	r3, [r4, #4]
 80125b2:	6863      	ldr	r3, [r4, #4]
 80125b4:	4945      	ldr	r1, [pc, #276]	; (80126cc <_scanf_i+0x1e4>)
 80125b6:	6960      	ldr	r0, [r4, #20]
 80125b8:	1ac9      	subs	r1, r1, r3
 80125ba:	f000 f8a5 	bl	8012708 <__sccl>
 80125be:	f04f 0b00 	mov.w	fp, #0
 80125c2:	68a3      	ldr	r3, [r4, #8]
 80125c4:	6822      	ldr	r2, [r4, #0]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d03d      	beq.n	8012646 <_scanf_i+0x15e>
 80125ca:	6831      	ldr	r1, [r6, #0]
 80125cc:	6960      	ldr	r0, [r4, #20]
 80125ce:	f891 c000 	ldrb.w	ip, [r1]
 80125d2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80125d6:	2800      	cmp	r0, #0
 80125d8:	d035      	beq.n	8012646 <_scanf_i+0x15e>
 80125da:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80125de:	d124      	bne.n	801262a <_scanf_i+0x142>
 80125e0:	0510      	lsls	r0, r2, #20
 80125e2:	d522      	bpl.n	801262a <_scanf_i+0x142>
 80125e4:	f10b 0b01 	add.w	fp, fp, #1
 80125e8:	f1b9 0f00 	cmp.w	r9, #0
 80125ec:	d003      	beq.n	80125f6 <_scanf_i+0x10e>
 80125ee:	3301      	adds	r3, #1
 80125f0:	f109 39ff 	add.w	r9, r9, #4294967295
 80125f4:	60a3      	str	r3, [r4, #8]
 80125f6:	6873      	ldr	r3, [r6, #4]
 80125f8:	3b01      	subs	r3, #1
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	6073      	str	r3, [r6, #4]
 80125fe:	dd1b      	ble.n	8012638 <_scanf_i+0x150>
 8012600:	6833      	ldr	r3, [r6, #0]
 8012602:	3301      	adds	r3, #1
 8012604:	6033      	str	r3, [r6, #0]
 8012606:	68a3      	ldr	r3, [r4, #8]
 8012608:	3b01      	subs	r3, #1
 801260a:	60a3      	str	r3, [r4, #8]
 801260c:	e7d9      	b.n	80125c2 <_scanf_i+0xda>
 801260e:	f1bb 0f02 	cmp.w	fp, #2
 8012612:	d1ae      	bne.n	8012572 <_scanf_i+0x8a>
 8012614:	6822      	ldr	r2, [r4, #0]
 8012616:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801261a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801261e:	d1bf      	bne.n	80125a0 <_scanf_i+0xb8>
 8012620:	2310      	movs	r3, #16
 8012622:	6063      	str	r3, [r4, #4]
 8012624:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012628:	e7a2      	b.n	8012570 <_scanf_i+0x88>
 801262a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801262e:	6022      	str	r2, [r4, #0]
 8012630:	780b      	ldrb	r3, [r1, #0]
 8012632:	f805 3b01 	strb.w	r3, [r5], #1
 8012636:	e7de      	b.n	80125f6 <_scanf_i+0x10e>
 8012638:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801263c:	4631      	mov	r1, r6
 801263e:	4650      	mov	r0, sl
 8012640:	4798      	blx	r3
 8012642:	2800      	cmp	r0, #0
 8012644:	d0df      	beq.n	8012606 <_scanf_i+0x11e>
 8012646:	6823      	ldr	r3, [r4, #0]
 8012648:	05d9      	lsls	r1, r3, #23
 801264a:	d50d      	bpl.n	8012668 <_scanf_i+0x180>
 801264c:	42bd      	cmp	r5, r7
 801264e:	d909      	bls.n	8012664 <_scanf_i+0x17c>
 8012650:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012654:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012658:	4632      	mov	r2, r6
 801265a:	4650      	mov	r0, sl
 801265c:	4798      	blx	r3
 801265e:	f105 39ff 	add.w	r9, r5, #4294967295
 8012662:	464d      	mov	r5, r9
 8012664:	42bd      	cmp	r5, r7
 8012666:	d028      	beq.n	80126ba <_scanf_i+0x1d2>
 8012668:	6822      	ldr	r2, [r4, #0]
 801266a:	f012 0210 	ands.w	r2, r2, #16
 801266e:	d113      	bne.n	8012698 <_scanf_i+0x1b0>
 8012670:	702a      	strb	r2, [r5, #0]
 8012672:	6863      	ldr	r3, [r4, #4]
 8012674:	9e01      	ldr	r6, [sp, #4]
 8012676:	4639      	mov	r1, r7
 8012678:	4650      	mov	r0, sl
 801267a:	47b0      	blx	r6
 801267c:	f8d8 3000 	ldr.w	r3, [r8]
 8012680:	6821      	ldr	r1, [r4, #0]
 8012682:	1d1a      	adds	r2, r3, #4
 8012684:	f8c8 2000 	str.w	r2, [r8]
 8012688:	f011 0f20 	tst.w	r1, #32
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	d00f      	beq.n	80126b0 <_scanf_i+0x1c8>
 8012690:	6018      	str	r0, [r3, #0]
 8012692:	68e3      	ldr	r3, [r4, #12]
 8012694:	3301      	adds	r3, #1
 8012696:	60e3      	str	r3, [r4, #12]
 8012698:	1bed      	subs	r5, r5, r7
 801269a:	44ab      	add	fp, r5
 801269c:	6925      	ldr	r5, [r4, #16]
 801269e:	445d      	add	r5, fp
 80126a0:	6125      	str	r5, [r4, #16]
 80126a2:	2000      	movs	r0, #0
 80126a4:	b007      	add	sp, #28
 80126a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126aa:	f04f 0b00 	mov.w	fp, #0
 80126ae:	e7ca      	b.n	8012646 <_scanf_i+0x15e>
 80126b0:	07ca      	lsls	r2, r1, #31
 80126b2:	bf4c      	ite	mi
 80126b4:	8018      	strhmi	r0, [r3, #0]
 80126b6:	6018      	strpl	r0, [r3, #0]
 80126b8:	e7eb      	b.n	8012692 <_scanf_i+0x1aa>
 80126ba:	2001      	movs	r0, #1
 80126bc:	e7f2      	b.n	80126a4 <_scanf_i+0x1bc>
 80126be:	bf00      	nop
 80126c0:	08012f50 	.word	0x08012f50
 80126c4:	0800fae5 	.word	0x0800fae5
 80126c8:	0800f9e9 	.word	0x0800f9e9
 80126cc:	0801358e 	.word	0x0801358e

080126d0 <_read_r>:
 80126d0:	b538      	push	{r3, r4, r5, lr}
 80126d2:	4d07      	ldr	r5, [pc, #28]	; (80126f0 <_read_r+0x20>)
 80126d4:	4604      	mov	r4, r0
 80126d6:	4608      	mov	r0, r1
 80126d8:	4611      	mov	r1, r2
 80126da:	2200      	movs	r2, #0
 80126dc:	602a      	str	r2, [r5, #0]
 80126de:	461a      	mov	r2, r3
 80126e0:	f7f0 fc36 	bl	8002f50 <_read>
 80126e4:	1c43      	adds	r3, r0, #1
 80126e6:	d102      	bne.n	80126ee <_read_r+0x1e>
 80126e8:	682b      	ldr	r3, [r5, #0]
 80126ea:	b103      	cbz	r3, 80126ee <_read_r+0x1e>
 80126ec:	6023      	str	r3, [r4, #0]
 80126ee:	bd38      	pop	{r3, r4, r5, pc}
 80126f0:	2000572c 	.word	0x2000572c
 80126f4:	00000000 	.word	0x00000000

080126f8 <nan>:
 80126f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012700 <nan+0x8>
 80126fc:	4770      	bx	lr
 80126fe:	bf00      	nop
 8012700:	00000000 	.word	0x00000000
 8012704:	7ff80000 	.word	0x7ff80000

08012708 <__sccl>:
 8012708:	b570      	push	{r4, r5, r6, lr}
 801270a:	780b      	ldrb	r3, [r1, #0]
 801270c:	4604      	mov	r4, r0
 801270e:	2b5e      	cmp	r3, #94	; 0x5e
 8012710:	bf0b      	itete	eq
 8012712:	784b      	ldrbeq	r3, [r1, #1]
 8012714:	1c48      	addne	r0, r1, #1
 8012716:	1c88      	addeq	r0, r1, #2
 8012718:	2200      	movne	r2, #0
 801271a:	bf08      	it	eq
 801271c:	2201      	moveq	r2, #1
 801271e:	1e61      	subs	r1, r4, #1
 8012720:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8012724:	f801 2f01 	strb.w	r2, [r1, #1]!
 8012728:	42a9      	cmp	r1, r5
 801272a:	d1fb      	bne.n	8012724 <__sccl+0x1c>
 801272c:	b90b      	cbnz	r3, 8012732 <__sccl+0x2a>
 801272e:	3801      	subs	r0, #1
 8012730:	bd70      	pop	{r4, r5, r6, pc}
 8012732:	f082 0101 	eor.w	r1, r2, #1
 8012736:	54e1      	strb	r1, [r4, r3]
 8012738:	1c42      	adds	r2, r0, #1
 801273a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801273e:	2d2d      	cmp	r5, #45	; 0x2d
 8012740:	f102 36ff 	add.w	r6, r2, #4294967295
 8012744:	4610      	mov	r0, r2
 8012746:	d006      	beq.n	8012756 <__sccl+0x4e>
 8012748:	2d5d      	cmp	r5, #93	; 0x5d
 801274a:	d0f1      	beq.n	8012730 <__sccl+0x28>
 801274c:	b90d      	cbnz	r5, 8012752 <__sccl+0x4a>
 801274e:	4630      	mov	r0, r6
 8012750:	e7ee      	b.n	8012730 <__sccl+0x28>
 8012752:	462b      	mov	r3, r5
 8012754:	e7ef      	b.n	8012736 <__sccl+0x2e>
 8012756:	7816      	ldrb	r6, [r2, #0]
 8012758:	2e5d      	cmp	r6, #93	; 0x5d
 801275a:	d0fa      	beq.n	8012752 <__sccl+0x4a>
 801275c:	42b3      	cmp	r3, r6
 801275e:	dcf8      	bgt.n	8012752 <__sccl+0x4a>
 8012760:	4618      	mov	r0, r3
 8012762:	3001      	adds	r0, #1
 8012764:	4286      	cmp	r6, r0
 8012766:	5421      	strb	r1, [r4, r0]
 8012768:	dcfb      	bgt.n	8012762 <__sccl+0x5a>
 801276a:	43d8      	mvns	r0, r3
 801276c:	4430      	add	r0, r6
 801276e:	1c5d      	adds	r5, r3, #1
 8012770:	42b3      	cmp	r3, r6
 8012772:	bfa8      	it	ge
 8012774:	2000      	movge	r0, #0
 8012776:	182b      	adds	r3, r5, r0
 8012778:	3202      	adds	r2, #2
 801277a:	e7de      	b.n	801273a <__sccl+0x32>

0801277c <__submore>:
 801277c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012780:	460c      	mov	r4, r1
 8012782:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8012784:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012788:	4299      	cmp	r1, r3
 801278a:	d11d      	bne.n	80127c8 <__submore+0x4c>
 801278c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8012790:	f7fb fa3c 	bl	800dc0c <_malloc_r>
 8012794:	b918      	cbnz	r0, 801279e <__submore+0x22>
 8012796:	f04f 30ff 	mov.w	r0, #4294967295
 801279a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801279e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80127a2:	63a3      	str	r3, [r4, #56]	; 0x38
 80127a4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80127a8:	6360      	str	r0, [r4, #52]	; 0x34
 80127aa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80127ae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80127b2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80127b6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80127ba:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80127be:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80127c2:	6020      	str	r0, [r4, #0]
 80127c4:	2000      	movs	r0, #0
 80127c6:	e7e8      	b.n	801279a <__submore+0x1e>
 80127c8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80127ca:	0077      	lsls	r7, r6, #1
 80127cc:	463a      	mov	r2, r7
 80127ce:	f7ff f985 	bl	8011adc <_realloc_r>
 80127d2:	4605      	mov	r5, r0
 80127d4:	2800      	cmp	r0, #0
 80127d6:	d0de      	beq.n	8012796 <__submore+0x1a>
 80127d8:	eb00 0806 	add.w	r8, r0, r6
 80127dc:	4601      	mov	r1, r0
 80127de:	4632      	mov	r2, r6
 80127e0:	4640      	mov	r0, r8
 80127e2:	f7fb f993 	bl	800db0c <memcpy>
 80127e6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80127ea:	f8c4 8000 	str.w	r8, [r4]
 80127ee:	e7e9      	b.n	80127c4 <__submore+0x48>

080127f0 <__swbuf_r>:
 80127f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127f2:	460e      	mov	r6, r1
 80127f4:	4614      	mov	r4, r2
 80127f6:	4605      	mov	r5, r0
 80127f8:	b118      	cbz	r0, 8012802 <__swbuf_r+0x12>
 80127fa:	6983      	ldr	r3, [r0, #24]
 80127fc:	b90b      	cbnz	r3, 8012802 <__swbuf_r+0x12>
 80127fe:	f7fb f8af 	bl	800d960 <__sinit>
 8012802:	4b21      	ldr	r3, [pc, #132]	; (8012888 <__swbuf_r+0x98>)
 8012804:	429c      	cmp	r4, r3
 8012806:	d12b      	bne.n	8012860 <__swbuf_r+0x70>
 8012808:	686c      	ldr	r4, [r5, #4]
 801280a:	69a3      	ldr	r3, [r4, #24]
 801280c:	60a3      	str	r3, [r4, #8]
 801280e:	89a3      	ldrh	r3, [r4, #12]
 8012810:	071a      	lsls	r2, r3, #28
 8012812:	d52f      	bpl.n	8012874 <__swbuf_r+0x84>
 8012814:	6923      	ldr	r3, [r4, #16]
 8012816:	b36b      	cbz	r3, 8012874 <__swbuf_r+0x84>
 8012818:	6923      	ldr	r3, [r4, #16]
 801281a:	6820      	ldr	r0, [r4, #0]
 801281c:	1ac0      	subs	r0, r0, r3
 801281e:	6963      	ldr	r3, [r4, #20]
 8012820:	b2f6      	uxtb	r6, r6
 8012822:	4283      	cmp	r3, r0
 8012824:	4637      	mov	r7, r6
 8012826:	dc04      	bgt.n	8012832 <__swbuf_r+0x42>
 8012828:	4621      	mov	r1, r4
 801282a:	4628      	mov	r0, r5
 801282c:	f7fe f89a 	bl	8010964 <_fflush_r>
 8012830:	bb30      	cbnz	r0, 8012880 <__swbuf_r+0x90>
 8012832:	68a3      	ldr	r3, [r4, #8]
 8012834:	3b01      	subs	r3, #1
 8012836:	60a3      	str	r3, [r4, #8]
 8012838:	6823      	ldr	r3, [r4, #0]
 801283a:	1c5a      	adds	r2, r3, #1
 801283c:	6022      	str	r2, [r4, #0]
 801283e:	701e      	strb	r6, [r3, #0]
 8012840:	6963      	ldr	r3, [r4, #20]
 8012842:	3001      	adds	r0, #1
 8012844:	4283      	cmp	r3, r0
 8012846:	d004      	beq.n	8012852 <__swbuf_r+0x62>
 8012848:	89a3      	ldrh	r3, [r4, #12]
 801284a:	07db      	lsls	r3, r3, #31
 801284c:	d506      	bpl.n	801285c <__swbuf_r+0x6c>
 801284e:	2e0a      	cmp	r6, #10
 8012850:	d104      	bne.n	801285c <__swbuf_r+0x6c>
 8012852:	4621      	mov	r1, r4
 8012854:	4628      	mov	r0, r5
 8012856:	f7fe f885 	bl	8010964 <_fflush_r>
 801285a:	b988      	cbnz	r0, 8012880 <__swbuf_r+0x90>
 801285c:	4638      	mov	r0, r7
 801285e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012860:	4b0a      	ldr	r3, [pc, #40]	; (801288c <__swbuf_r+0x9c>)
 8012862:	429c      	cmp	r4, r3
 8012864:	d101      	bne.n	801286a <__swbuf_r+0x7a>
 8012866:	68ac      	ldr	r4, [r5, #8]
 8012868:	e7cf      	b.n	801280a <__swbuf_r+0x1a>
 801286a:	4b09      	ldr	r3, [pc, #36]	; (8012890 <__swbuf_r+0xa0>)
 801286c:	429c      	cmp	r4, r3
 801286e:	bf08      	it	eq
 8012870:	68ec      	ldreq	r4, [r5, #12]
 8012872:	e7ca      	b.n	801280a <__swbuf_r+0x1a>
 8012874:	4621      	mov	r1, r4
 8012876:	4628      	mov	r0, r5
 8012878:	f000 f81a 	bl	80128b0 <__swsetup_r>
 801287c:	2800      	cmp	r0, #0
 801287e:	d0cb      	beq.n	8012818 <__swbuf_r+0x28>
 8012880:	f04f 37ff 	mov.w	r7, #4294967295
 8012884:	e7ea      	b.n	801285c <__swbuf_r+0x6c>
 8012886:	bf00      	nop
 8012888:	080130ec 	.word	0x080130ec
 801288c:	0801310c 	.word	0x0801310c
 8012890:	080130cc 	.word	0x080130cc

08012894 <__ascii_wctomb>:
 8012894:	b149      	cbz	r1, 80128aa <__ascii_wctomb+0x16>
 8012896:	2aff      	cmp	r2, #255	; 0xff
 8012898:	bf85      	ittet	hi
 801289a:	238a      	movhi	r3, #138	; 0x8a
 801289c:	6003      	strhi	r3, [r0, #0]
 801289e:	700a      	strbls	r2, [r1, #0]
 80128a0:	f04f 30ff 	movhi.w	r0, #4294967295
 80128a4:	bf98      	it	ls
 80128a6:	2001      	movls	r0, #1
 80128a8:	4770      	bx	lr
 80128aa:	4608      	mov	r0, r1
 80128ac:	4770      	bx	lr
	...

080128b0 <__swsetup_r>:
 80128b0:	4b32      	ldr	r3, [pc, #200]	; (801297c <__swsetup_r+0xcc>)
 80128b2:	b570      	push	{r4, r5, r6, lr}
 80128b4:	681d      	ldr	r5, [r3, #0]
 80128b6:	4606      	mov	r6, r0
 80128b8:	460c      	mov	r4, r1
 80128ba:	b125      	cbz	r5, 80128c6 <__swsetup_r+0x16>
 80128bc:	69ab      	ldr	r3, [r5, #24]
 80128be:	b913      	cbnz	r3, 80128c6 <__swsetup_r+0x16>
 80128c0:	4628      	mov	r0, r5
 80128c2:	f7fb f84d 	bl	800d960 <__sinit>
 80128c6:	4b2e      	ldr	r3, [pc, #184]	; (8012980 <__swsetup_r+0xd0>)
 80128c8:	429c      	cmp	r4, r3
 80128ca:	d10f      	bne.n	80128ec <__swsetup_r+0x3c>
 80128cc:	686c      	ldr	r4, [r5, #4]
 80128ce:	89a3      	ldrh	r3, [r4, #12]
 80128d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80128d4:	0719      	lsls	r1, r3, #28
 80128d6:	d42c      	bmi.n	8012932 <__swsetup_r+0x82>
 80128d8:	06dd      	lsls	r5, r3, #27
 80128da:	d411      	bmi.n	8012900 <__swsetup_r+0x50>
 80128dc:	2309      	movs	r3, #9
 80128de:	6033      	str	r3, [r6, #0]
 80128e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80128e4:	81a3      	strh	r3, [r4, #12]
 80128e6:	f04f 30ff 	mov.w	r0, #4294967295
 80128ea:	e03e      	b.n	801296a <__swsetup_r+0xba>
 80128ec:	4b25      	ldr	r3, [pc, #148]	; (8012984 <__swsetup_r+0xd4>)
 80128ee:	429c      	cmp	r4, r3
 80128f0:	d101      	bne.n	80128f6 <__swsetup_r+0x46>
 80128f2:	68ac      	ldr	r4, [r5, #8]
 80128f4:	e7eb      	b.n	80128ce <__swsetup_r+0x1e>
 80128f6:	4b24      	ldr	r3, [pc, #144]	; (8012988 <__swsetup_r+0xd8>)
 80128f8:	429c      	cmp	r4, r3
 80128fa:	bf08      	it	eq
 80128fc:	68ec      	ldreq	r4, [r5, #12]
 80128fe:	e7e6      	b.n	80128ce <__swsetup_r+0x1e>
 8012900:	0758      	lsls	r0, r3, #29
 8012902:	d512      	bpl.n	801292a <__swsetup_r+0x7a>
 8012904:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012906:	b141      	cbz	r1, 801291a <__swsetup_r+0x6a>
 8012908:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801290c:	4299      	cmp	r1, r3
 801290e:	d002      	beq.n	8012916 <__swsetup_r+0x66>
 8012910:	4630      	mov	r0, r6
 8012912:	f7fb f92b 	bl	800db6c <_free_r>
 8012916:	2300      	movs	r3, #0
 8012918:	6363      	str	r3, [r4, #52]	; 0x34
 801291a:	89a3      	ldrh	r3, [r4, #12]
 801291c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012920:	81a3      	strh	r3, [r4, #12]
 8012922:	2300      	movs	r3, #0
 8012924:	6063      	str	r3, [r4, #4]
 8012926:	6923      	ldr	r3, [r4, #16]
 8012928:	6023      	str	r3, [r4, #0]
 801292a:	89a3      	ldrh	r3, [r4, #12]
 801292c:	f043 0308 	orr.w	r3, r3, #8
 8012930:	81a3      	strh	r3, [r4, #12]
 8012932:	6923      	ldr	r3, [r4, #16]
 8012934:	b94b      	cbnz	r3, 801294a <__swsetup_r+0x9a>
 8012936:	89a3      	ldrh	r3, [r4, #12]
 8012938:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801293c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012940:	d003      	beq.n	801294a <__swsetup_r+0x9a>
 8012942:	4621      	mov	r1, r4
 8012944:	4630      	mov	r0, r6
 8012946:	f000 f845 	bl	80129d4 <__smakebuf_r>
 801294a:	89a0      	ldrh	r0, [r4, #12]
 801294c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012950:	f010 0301 	ands.w	r3, r0, #1
 8012954:	d00a      	beq.n	801296c <__swsetup_r+0xbc>
 8012956:	2300      	movs	r3, #0
 8012958:	60a3      	str	r3, [r4, #8]
 801295a:	6963      	ldr	r3, [r4, #20]
 801295c:	425b      	negs	r3, r3
 801295e:	61a3      	str	r3, [r4, #24]
 8012960:	6923      	ldr	r3, [r4, #16]
 8012962:	b943      	cbnz	r3, 8012976 <__swsetup_r+0xc6>
 8012964:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012968:	d1ba      	bne.n	80128e0 <__swsetup_r+0x30>
 801296a:	bd70      	pop	{r4, r5, r6, pc}
 801296c:	0781      	lsls	r1, r0, #30
 801296e:	bf58      	it	pl
 8012970:	6963      	ldrpl	r3, [r4, #20]
 8012972:	60a3      	str	r3, [r4, #8]
 8012974:	e7f4      	b.n	8012960 <__swsetup_r+0xb0>
 8012976:	2000      	movs	r0, #0
 8012978:	e7f7      	b.n	801296a <__swsetup_r+0xba>
 801297a:	bf00      	nop
 801297c:	20000030 	.word	0x20000030
 8012980:	080130ec 	.word	0x080130ec
 8012984:	0801310c 	.word	0x0801310c
 8012988:	080130cc 	.word	0x080130cc

0801298c <__swhatbuf_r>:
 801298c:	b570      	push	{r4, r5, r6, lr}
 801298e:	460e      	mov	r6, r1
 8012990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012994:	2900      	cmp	r1, #0
 8012996:	b096      	sub	sp, #88	; 0x58
 8012998:	4614      	mov	r4, r2
 801299a:	461d      	mov	r5, r3
 801299c:	da07      	bge.n	80129ae <__swhatbuf_r+0x22>
 801299e:	2300      	movs	r3, #0
 80129a0:	602b      	str	r3, [r5, #0]
 80129a2:	89b3      	ldrh	r3, [r6, #12]
 80129a4:	061a      	lsls	r2, r3, #24
 80129a6:	d410      	bmi.n	80129ca <__swhatbuf_r+0x3e>
 80129a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80129ac:	e00e      	b.n	80129cc <__swhatbuf_r+0x40>
 80129ae:	466a      	mov	r2, sp
 80129b0:	f000 f858 	bl	8012a64 <_fstat_r>
 80129b4:	2800      	cmp	r0, #0
 80129b6:	dbf2      	blt.n	801299e <__swhatbuf_r+0x12>
 80129b8:	9a01      	ldr	r2, [sp, #4]
 80129ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80129be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80129c2:	425a      	negs	r2, r3
 80129c4:	415a      	adcs	r2, r3
 80129c6:	602a      	str	r2, [r5, #0]
 80129c8:	e7ee      	b.n	80129a8 <__swhatbuf_r+0x1c>
 80129ca:	2340      	movs	r3, #64	; 0x40
 80129cc:	2000      	movs	r0, #0
 80129ce:	6023      	str	r3, [r4, #0]
 80129d0:	b016      	add	sp, #88	; 0x58
 80129d2:	bd70      	pop	{r4, r5, r6, pc}

080129d4 <__smakebuf_r>:
 80129d4:	898b      	ldrh	r3, [r1, #12]
 80129d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80129d8:	079d      	lsls	r5, r3, #30
 80129da:	4606      	mov	r6, r0
 80129dc:	460c      	mov	r4, r1
 80129de:	d507      	bpl.n	80129f0 <__smakebuf_r+0x1c>
 80129e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80129e4:	6023      	str	r3, [r4, #0]
 80129e6:	6123      	str	r3, [r4, #16]
 80129e8:	2301      	movs	r3, #1
 80129ea:	6163      	str	r3, [r4, #20]
 80129ec:	b002      	add	sp, #8
 80129ee:	bd70      	pop	{r4, r5, r6, pc}
 80129f0:	ab01      	add	r3, sp, #4
 80129f2:	466a      	mov	r2, sp
 80129f4:	f7ff ffca 	bl	801298c <__swhatbuf_r>
 80129f8:	9900      	ldr	r1, [sp, #0]
 80129fa:	4605      	mov	r5, r0
 80129fc:	4630      	mov	r0, r6
 80129fe:	f7fb f905 	bl	800dc0c <_malloc_r>
 8012a02:	b948      	cbnz	r0, 8012a18 <__smakebuf_r+0x44>
 8012a04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a08:	059a      	lsls	r2, r3, #22
 8012a0a:	d4ef      	bmi.n	80129ec <__smakebuf_r+0x18>
 8012a0c:	f023 0303 	bic.w	r3, r3, #3
 8012a10:	f043 0302 	orr.w	r3, r3, #2
 8012a14:	81a3      	strh	r3, [r4, #12]
 8012a16:	e7e3      	b.n	80129e0 <__smakebuf_r+0xc>
 8012a18:	4b0d      	ldr	r3, [pc, #52]	; (8012a50 <__smakebuf_r+0x7c>)
 8012a1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8012a1c:	89a3      	ldrh	r3, [r4, #12]
 8012a1e:	6020      	str	r0, [r4, #0]
 8012a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a24:	81a3      	strh	r3, [r4, #12]
 8012a26:	9b00      	ldr	r3, [sp, #0]
 8012a28:	6163      	str	r3, [r4, #20]
 8012a2a:	9b01      	ldr	r3, [sp, #4]
 8012a2c:	6120      	str	r0, [r4, #16]
 8012a2e:	b15b      	cbz	r3, 8012a48 <__smakebuf_r+0x74>
 8012a30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012a34:	4630      	mov	r0, r6
 8012a36:	f000 f827 	bl	8012a88 <_isatty_r>
 8012a3a:	b128      	cbz	r0, 8012a48 <__smakebuf_r+0x74>
 8012a3c:	89a3      	ldrh	r3, [r4, #12]
 8012a3e:	f023 0303 	bic.w	r3, r3, #3
 8012a42:	f043 0301 	orr.w	r3, r3, #1
 8012a46:	81a3      	strh	r3, [r4, #12]
 8012a48:	89a0      	ldrh	r0, [r4, #12]
 8012a4a:	4305      	orrs	r5, r0
 8012a4c:	81a5      	strh	r5, [r4, #12]
 8012a4e:	e7cd      	b.n	80129ec <__smakebuf_r+0x18>
 8012a50:	0800d8f9 	.word	0x0800d8f9

08012a54 <_malloc_usable_size_r>:
 8012a54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012a58:	1f18      	subs	r0, r3, #4
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	bfbc      	itt	lt
 8012a5e:	580b      	ldrlt	r3, [r1, r0]
 8012a60:	18c0      	addlt	r0, r0, r3
 8012a62:	4770      	bx	lr

08012a64 <_fstat_r>:
 8012a64:	b538      	push	{r3, r4, r5, lr}
 8012a66:	4d07      	ldr	r5, [pc, #28]	; (8012a84 <_fstat_r+0x20>)
 8012a68:	2300      	movs	r3, #0
 8012a6a:	4604      	mov	r4, r0
 8012a6c:	4608      	mov	r0, r1
 8012a6e:	4611      	mov	r1, r2
 8012a70:	602b      	str	r3, [r5, #0]
 8012a72:	f7f0 fab2 	bl	8002fda <_fstat>
 8012a76:	1c43      	adds	r3, r0, #1
 8012a78:	d102      	bne.n	8012a80 <_fstat_r+0x1c>
 8012a7a:	682b      	ldr	r3, [r5, #0]
 8012a7c:	b103      	cbz	r3, 8012a80 <_fstat_r+0x1c>
 8012a7e:	6023      	str	r3, [r4, #0]
 8012a80:	bd38      	pop	{r3, r4, r5, pc}
 8012a82:	bf00      	nop
 8012a84:	2000572c 	.word	0x2000572c

08012a88 <_isatty_r>:
 8012a88:	b538      	push	{r3, r4, r5, lr}
 8012a8a:	4d06      	ldr	r5, [pc, #24]	; (8012aa4 <_isatty_r+0x1c>)
 8012a8c:	2300      	movs	r3, #0
 8012a8e:	4604      	mov	r4, r0
 8012a90:	4608      	mov	r0, r1
 8012a92:	602b      	str	r3, [r5, #0]
 8012a94:	f7f0 fab1 	bl	8002ffa <_isatty>
 8012a98:	1c43      	adds	r3, r0, #1
 8012a9a:	d102      	bne.n	8012aa2 <_isatty_r+0x1a>
 8012a9c:	682b      	ldr	r3, [r5, #0]
 8012a9e:	b103      	cbz	r3, 8012aa2 <_isatty_r+0x1a>
 8012aa0:	6023      	str	r3, [r4, #0]
 8012aa2:	bd38      	pop	{r3, r4, r5, pc}
 8012aa4:	2000572c 	.word	0x2000572c

08012aa8 <_init>:
 8012aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012aaa:	bf00      	nop
 8012aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012aae:	bc08      	pop	{r3}
 8012ab0:	469e      	mov	lr, r3
 8012ab2:	4770      	bx	lr

08012ab4 <_fini>:
 8012ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ab6:	bf00      	nop
 8012ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012aba:	bc08      	pop	{r3}
 8012abc:	469e      	mov	lr, r3
 8012abe:	4770      	bx	lr
