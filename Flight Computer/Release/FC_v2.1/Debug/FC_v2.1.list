
FC_v2.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ecbc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002368  0801ee70  0801ee70  0002ee70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080211d8  080211d8  000403ac  2**0
                  CONTENTS
  4 .ARM          00000008  080211d8  080211d8  000311d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080211e0  080211e0  000403ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080211e0  080211e0  000311e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080211e8  080211e8  000311e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003ac  20000000  080211ec  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000403ac  2**0
                  CONTENTS
 10 .bss          00008bf0  200003ac  200003ac  000403ac  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  20008f9c  20008f9c  000403ac  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000403ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   000750d7  00000000  00000000  000403dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000ad6f  00000000  00000000  000b54b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000041e0  00000000  00000000  000c0228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038781  00000000  00000000  000c4408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004adcc  00000000  00000000  000fcb89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001198d5  00000000  00000000  00147955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0026122a  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00003ec0  00000000  00000000  00261280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000134a8  00000000  00000000  00265140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200003ac 	.word	0x200003ac
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801ee54 	.word	0x0801ee54

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200003b0 	.word	0x200003b0
 80001ec:	0801ee54 	.word	0x0801ee54

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <lsm_write>:
/*
 * LSM6DSR
 */

static int32_t lsm_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af04      	add	r7, sp, #16
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	461a      	mov	r2, r3
 8001018:	460b      	mov	r3, r1
 800101a:	72fb      	strb	r3, [r7, #11]
 800101c:	4613      	mov	r3, r2
 800101e:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8001020:	7afb      	ldrb	r3, [r7, #11]
 8001022:	b29a      	uxth	r2, r3
 8001024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001028:	9302      	str	r3, [sp, #8]
 800102a:	893b      	ldrh	r3, [r7, #8]
 800102c:	9301      	str	r3, [sp, #4]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	21d5      	movs	r1, #213	; 0xd5
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f006 fe4c 	bl	8007cd4 <HAL_I2C_Mem_Write>
  return 0;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <lsm_read>:

static int32_t lsm_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b088      	sub	sp, #32
 800104a:	af04      	add	r7, sp, #16
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	607a      	str	r2, [r7, #4]
 8001050:	461a      	mov	r2, r3
 8001052:	460b      	mov	r3, r1
 8001054:	72fb      	strb	r3, [r7, #11]
 8001056:	4613      	mov	r3, r2
 8001058:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LSM6DSR_I2C_ADD_L, reg,
 800105a:	7afb      	ldrb	r3, [r7, #11]
 800105c:	b29a      	uxth	r2, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	9302      	str	r3, [sp, #8]
 8001064:	893b      	ldrh	r3, [r7, #8]
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2301      	movs	r3, #1
 800106e:	21d5      	movs	r1, #213	; 0xd5
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f006 ff29 	bl	8007ec8 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <MRT_LSM6DSR_Setup>:




stmdev_ctx_t  MRT_LSM6DSR_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b08b      	sub	sp, #44	; 0x2c
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
	  Guart = uart;
 800108c:	4a53      	ldr	r2, [pc, #332]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LSM6DSR Setup Starts\n\r", 22, HAL_MAX_DELAY);
 8001092:	4b52      	ldr	r3, [pc, #328]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 8001094:	6818      	ldr	r0, [r3, #0]
 8001096:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800109a:	2216      	movs	r2, #22
 800109c:	4950      	ldr	r1, [pc, #320]	; (80011e0 <MRT_LSM6DSR_Setup+0x160>)
 800109e:	f00b ff1c 	bl	800ceda <HAL_UART_Transmit>


	  stmdev_ctx_t lsm_ctx;

	  /* Initialize mems driver interface */
	  lsm_ctx.write_reg = lsm_write;
 80010a2:	4b50      	ldr	r3, [pc, #320]	; (80011e4 <MRT_LSM6DSR_Setup+0x164>)
 80010a4:	61fb      	str	r3, [r7, #28]
	  lsm_ctx.read_reg = lsm_read;
 80010a6:	4b50      	ldr	r3, [pc, #320]	; (80011e8 <MRT_LSM6DSR_Setup+0x168>)
 80010a8:	623b      	str	r3, [r7, #32]
	  lsm_ctx.handle = SENSOR_BUS;
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 80010ae:	2064      	movs	r0, #100	; 0x64
 80010b0:	f005 ff2c 	bl	8006f0c <HAL_Delay>
	  /* Check device ID */
	  lsm6dsr_device_id_get(&lsm_ctx, &lsm_whoamI);
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	494c      	ldr	r1, [pc, #304]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010ba:	4618      	mov	r0, r3
 80010bc:	f005 f992 	bl	80063e4 <lsm6dsr_device_id_get>

	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 21, HAL_MAX_DELAY);
 80010c0:	4b46      	ldr	r3, [pc, #280]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010c8:	2215      	movs	r2, #21
 80010ca:	4949      	ldr	r1, [pc, #292]	; (80011f0 <MRT_LSM6DSR_Setup+0x170>)
 80010cc:	f00b ff05 	bl	800ceda <HAL_UART_Transmit>


	  if (lsm_whoamI != LSM6DSR_ID){
 80010d0:	4b46      	ldr	r3, [pc, #280]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b6a      	cmp	r3, #106	; 0x6a
 80010d6:	d032      	beq.n	800113e <MRT_LSM6DSR_Setup+0xbe>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 80010d8:	4b40      	ldr	r3, [pc, #256]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010e0:	2208      	movs	r2, #8
 80010e2:	4944      	ldr	r1, [pc, #272]	; (80011f4 <MRT_LSM6DSR_Setup+0x174>)
 80010e4:	f00b fef9 	bl	800ceda <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 80010e8:	4b3c      	ldr	r3, [pc, #240]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010f0:	2210      	movs	r2, #16
 80010f2:	4941      	ldr	r1, [pc, #260]	; (80011f8 <MRT_LSM6DSR_Setup+0x178>)
 80010f4:	f00b fef1 	bl	800ceda <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lsm_whoamI);
 80010f8:	4b3c      	ldr	r3, [pc, #240]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	493e      	ldr	r1, [pc, #248]	; (80011fc <MRT_LSM6DSR_Setup+0x17c>)
 8001104:	4618      	mov	r0, r3
 8001106:	f019 feaf 	bl	801ae68 <siprintf>

			__BKPT();
 800110a:	be00      	bkpt	0x0000

		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 800110c:	4b33      	ldr	r3, [pc, #204]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800110e:	681c      	ldr	r4, [r3, #0]
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f86b 	bl	80001f0 <strlen>
 800111a:	4603      	mov	r3, r0
 800111c:	b29a      	uxth	r2, r3
 800111e:	f107 0110 	add.w	r1, r7, #16
 8001122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001126:	4620      	mov	r0, r4
 8001128:	f00b fed7 	bl	800ceda <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 800112c:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800112e:	6818      	ldr	r0, [r3, #0]
 8001130:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001134:	2216      	movs	r2, #22
 8001136:	4932      	ldr	r1, [pc, #200]	; (8001200 <MRT_LSM6DSR_Setup+0x180>)
 8001138:	f00b fecf 	bl	800ceda <HAL_UART_Transmit>
		  while(1);
 800113c:	e7fe      	b.n	800113c <MRT_LSM6DSR_Setup+0xbc>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 6, HAL_MAX_DELAY);
 800113e:	4b27      	ldr	r3, [pc, #156]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 8001140:	6818      	ldr	r0, [r3, #0]
 8001142:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001146:	2206      	movs	r2, #6
 8001148:	492e      	ldr	r1, [pc, #184]	; (8001204 <MRT_LSM6DSR_Setup+0x184>)
 800114a:	f00b fec6 	bl	800ceda <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lsm6dsr_reset_set(&lsm_ctx, PROPERTY_ENABLE);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	2101      	movs	r1, #1
 8001154:	4618      	mov	r0, r3
 8001156:	f005 f956 	bl	8006406 <lsm6dsr_reset_set>


	  HAL_Delay(1000);
 800115a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800115e:	f005 fed5 	bl	8006f0c <HAL_Delay>

	  do {
	    lsm6dsr_reset_get(&lsm_ctx, &lsm_rst);
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	4928      	ldr	r1, [pc, #160]	; (8001208 <MRT_LSM6DSR_Setup+0x188>)
 8001168:	4618      	mov	r0, r3
 800116a:	f005 f972 	bl	8006452 <lsm6dsr_reset_get>
	  } while (lsm_rst);
 800116e:	4b26      	ldr	r3, [pc, #152]	; (8001208 <MRT_LSM6DSR_Setup+0x188>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f5      	bne.n	8001162 <MRT_LSM6DSR_Setup+0xe2>

	  /* Disable I3C interface */
	  //TODO JASPER lsm6dsr_i3c_disable_set(&lsm_ctx, LSM6DSR_I3C_DISABLE);

	  /* Enable Block Data Update */
	  lsm6dsr_block_data_update_set(&lsm_ctx, PROPERTY_ENABLE);
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	2101      	movs	r1, #1
 800117c:	4618      	mov	r0, r3
 800117e:	f004 ffe1 	bl	8006144 <lsm6dsr_block_data_update_set>
	  /* Set Output Data Rate */
	  lsm6dsr_xl_data_rate_set(&lsm_ctx, LSM6DSR_XL_ODR_12Hz5);
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	2101      	movs	r1, #1
 8001188:	4618      	mov	r0, r3
 800118a:	f004 fdbd 	bl	8005d08 <lsm6dsr_xl_data_rate_set>
	  lsm6dsr_gy_data_rate_set(&lsm_ctx, LSM6DSR_GY_ODR_12Hz5);
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	2101      	movs	r1, #1
 8001194:	4618      	mov	r0, r3
 8001196:	f004 fed9 	bl	8005f4c <lsm6dsr_gy_data_rate_set>
	  /* Set full scale */
	  lsm6dsr_xl_full_scale_set(&lsm_ctx, LSM6DSR_2g);
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f004 fd8b 	bl	8005cbc <lsm6dsr_xl_full_scale_set>
	  lsm6dsr_gy_full_scale_set(&lsm_ctx, LSM6DSR_2000dps);
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	210c      	movs	r1, #12
 80011ac:	4618      	mov	r0, r3
 80011ae:	f004 fea7 	bl	8005f00 <lsm6dsr_gy_full_scale_set>
	  /* Configure filtering chain(No aux interface)
	   * Accelerometer - LPF1 + LPF2 path
	   */
	  //TODO JASPER lsm6dsr_xl_hp_path_on_out_set(&lsm_ctx, LSM6DSR_LP_ODR_DIV_100);
	  //TODO JASPER lsm6dsr_xl_filter_lp2_set(&lsm_ctx, PROPERTY_ENABLE);
	  HAL_UART_Transmit(Guart,"LLSM6DSR Setup Ends\n\r", 25, HAL_MAX_DELAY);
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80011b4:	6818      	ldr	r0, [r3, #0]
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011ba:	2219      	movs	r2, #25
 80011bc:	4913      	ldr	r1, [pc, #76]	; (800120c <MRT_LSM6DSR_Setup+0x18c>)
 80011be:	f00b fe8c 	bl	800ceda <HAL_UART_Transmit>

	  return lsm_ctx;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	461c      	mov	r4, r3
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	372c      	adds	r7, #44	; 0x2c
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd90      	pop	{r4, r7, pc}
 80011da:	bf00      	nop
 80011dc:	20005ef0 	.word	0x20005ef0
 80011e0:	0801ee70 	.word	0x0801ee70
 80011e4:	0800100d 	.word	0x0800100d
 80011e8:	08001047 	.word	0x08001047
 80011ec:	200003d8 	.word	0x200003d8
 80011f0:	0801ee88 	.word	0x0801ee88
 80011f4:	0801eea0 	.word	0x0801eea0
 80011f8:	0801eeac 	.word	0x0801eeac
 80011fc:	0801eec0 	.word	0x0801eec0
 8001200:	0801eec8 	.word	0x0801eec8
 8001204:	0801eee0 	.word	0x0801eee0
 8001208:	200003d9 	.word	0x200003d9
 800120c:	0801eee8 	.word	0x0801eee8

08001210 <MRT_LSM6DSR_getAcceleration>:


/*
 * Get acceleration values
 */
void MRT_LSM6DSR_getAcceleration(stmdev_ctx_t lsm_ctx,float acceleration_mg[3]){
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b087      	sub	sp, #28
 8001214:	af00      	add	r7, sp, #0
 8001216:	1d3c      	adds	r4, r7, #4
 8001218:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800121c:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_xl_flag_data_ready_get(&lsm_ctx, &reg);
 800121e:	f107 0217 	add.w	r2, r7, #23
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	4611      	mov	r1, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f004 ffb2 	bl	8006190 <lsm6dsr_xl_flag_data_ready_get>

		//if (reg.status_reg.gda) {
	    if(reg){
 800122c:	7dfb      	ldrb	r3, [r7, #23]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d02d      	beq.n	800128e <MRT_LSM6DSR_getAcceleration+0x7e>
		/* Read magnetic field data */
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001232:	2206      	movs	r2, #6
 8001234:	2100      	movs	r1, #0
 8001236:	4818      	ldr	r0, [pc, #96]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001238:	f018 fd98 	bl	8019d6c <memset>
        lsm6dsr_acceleration_raw_get(&lsm_ctx, data_raw_acceleration);
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	4916      	ldr	r1, [pc, #88]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001240:	4618      	mov	r0, r3
 8001242:	f005 f85e 	bl	8006302 <lsm6dsr_acceleration_raw_get>
        acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800124c:	4618      	mov	r0, r3
 800124e:	f004 fce9 	bl	8005c24 <lsm6dsr_from_fs2g_to_mg>
 8001252:	eef0 7a40 	vmov.f32	s15, s0
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	edc3 7a00 	vstr	s15, [r3]
                               data_raw_acceleration[0]);
        acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 800125e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	1d1c      	adds	r4, r3, #4
 8001266:	4610      	mov	r0, r2
 8001268:	f004 fcdc 	bl	8005c24 <lsm6dsr_from_fs2g_to_mg>
 800126c:	eef0 7a40 	vmov.f32	s15, s0
 8001270:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[1]);
        acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001276:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	f103 0408 	add.w	r4, r3, #8
 8001280:	4610      	mov	r0, r2
 8001282:	f004 fccf 	bl	8005c24 <lsm6dsr_from_fs2g_to_mg>
 8001286:	eef0 7a40 	vmov.f32	s15, s0
 800128a:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[2]);
      }
}
 800128e:	bf00      	nop
 8001290:	371c      	adds	r7, #28
 8001292:	46bd      	mov	sp, r7
 8001294:	bd90      	pop	{r4, r7, pc}
 8001296:	bf00      	nop
 8001298:	200003c8 	.word	0x200003c8

0800129c <MRT_LSM6DSR_getTemperature>:


/*
 * Get temperature value
 */
void MRT_LSM6DSR_getTemperature(stmdev_ctx_t lsm_ctx,float* temperature_degC){
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b087      	sub	sp, #28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	1d3c      	adds	r4, r7, #4
 80012a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012a8:	603b      	str	r3, [r7, #0]
	//lsm6dsr_reg_t reg;
	//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    uint8_t reg;
    lsm6dsr_temp_flag_data_ready_get(&lsm_ctx, &reg);
 80012aa:	f107 0217 	add.w	r2, r7, #23
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f004 ff9e 	bl	80061f4 <lsm6dsr_temp_flag_data_ready_get>

	//if (reg.status_reg.tda) {
    if(reg){
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d012      	beq.n	80012e4 <MRT_LSM6DSR_getTemperature+0x48>
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <MRT_LSM6DSR_getTemperature+0x50>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	801a      	strh	r2, [r3, #0]
		//Read temperature data
		memset(&lsm_data_raw_temperature, 0x00, sizeof(int16_t));
		lsm6dsr_temperature_raw_get(&lsm_ctx, &lsm_data_raw_temperature);
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	4909      	ldr	r1, [pc, #36]	; (80012ec <MRT_LSM6DSR_getTemperature+0x50>)
 80012c8:	4618      	mov	r0, r3
 80012ca:	f004 ffac 	bl	8006226 <lsm6dsr_temperature_raw_get>
		*temperature_degC = lsm6dsr_from_lsb_to_celsius(lsm_data_raw_temperature);
 80012ce:	4b07      	ldr	r3, [pc, #28]	; (80012ec <MRT_LSM6DSR_getTemperature+0x50>)
 80012d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f004 fcd5 	bl	8005c84 <lsm6dsr_from_lsb_to_celsius>
 80012da:	eef0 7a40 	vmov.f32	s15, s0
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	edc3 7a00 	vstr	s15, [r3]

	}
}
 80012e4:	bf00      	nop
 80012e6:	371c      	adds	r7, #28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd90      	pop	{r4, r7, pc}
 80012ec:	200003d6 	.word	0x200003d6

080012f0 <MRT_LSM6DSR_getAngularRate>:


/*
 * Get angular rate values
 */
void MRT_LSM6DSR_getAngularRate(stmdev_ctx_t lsm_ctx,float angular_rate_mdps[3]){
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b087      	sub	sp, #28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	1d3c      	adds	r4, r7, #4
 80012f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012fc:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_gy_flag_data_ready_get(&lsm_ctx, &reg);
 80012fe:	f107 0217 	add.w	r2, r7, #23
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	4611      	mov	r1, r2
 8001306:	4618      	mov	r0, r3
 8001308:	f004 ff5b 	bl	80061c2 <lsm6dsr_gy_flag_data_ready_get>

		//if (reg.status_reg.xlda) {
	    if(reg){
 800130c:	7dfb      	ldrb	r3, [r7, #23]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d02d      	beq.n	800136e <MRT_LSM6DSR_getAngularRate+0x7e>
		/* Read magnetic field data */
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8001312:	2206      	movs	r2, #6
 8001314:	2100      	movs	r1, #0
 8001316:	4818      	ldr	r0, [pc, #96]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001318:	f018 fd28 	bl	8019d6c <memset>
		lsm6dsr_angular_rate_raw_get(&lsm_ctx, data_raw_angular_rate);
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	4916      	ldr	r1, [pc, #88]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001320:	4618      	mov	r0, r3
 8001322:	f004 ffa3 	bl	800626c <lsm6dsr_angular_rate_raw_get>
		angular_rate_mdps[0] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8001326:	4b14      	ldr	r3, [pc, #80]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001328:	f9b3 3000 	ldrsh.w	r3, [r3]
 800132c:	4618      	mov	r0, r3
 800132e:	f004 fc91 	bl	8005c54 <lsm6dsr_from_fs2000dps_to_mdps>
 8001332:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[0] =
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	edc3 7a00 	vstr	s15, [r3]
		angular_rate_mdps[1] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 800133c:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 800133e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
		angular_rate_mdps[1] =
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	1d1c      	adds	r4, r3, #4
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001346:	4610      	mov	r0, r2
 8001348:	f004 fc84 	bl	8005c54 <lsm6dsr_from_fs2000dps_to_mdps>
 800134c:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[1] =
 8001350:	edc4 7a00 	vstr	s15, [r4]
		angular_rate_mdps[2] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001356:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		angular_rate_mdps[2] =
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	f103 0408 	add.w	r4, r3, #8
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001360:	4610      	mov	r0, r2
 8001362:	f004 fc77 	bl	8005c54 <lsm6dsr_from_fs2000dps_to_mdps>
 8001366:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[2] =
 800136a:	edc4 7a00 	vstr	s15, [r4]
		fs2000dps_to_mdps
		*/

		}

}
 800136e:	bf00      	nop
 8001370:	371c      	adds	r7, #28
 8001372:	46bd      	mov	sp, r7
 8001374:	bd90      	pop	{r4, r7, pc}
 8001376:	bf00      	nop
 8001378:	200003d0 	.word	0x200003d0

0800137c <MRT_LPS22HH_Setup>:
 * LPS22HH
 */


stmdev_ctx_t  MRT_LPS22HH_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b08d      	sub	sp, #52	; 0x34
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]

	  Guart = uart;
 8001388:	4a4b      	ldr	r2, [pc, #300]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Starts\n\r", 22, HAL_MAX_DELAY);
 800138e:	4b4a      	ldr	r3, [pc, #296]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 8001390:	6818      	ldr	r0, [r3, #0]
 8001392:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001396:	2216      	movs	r2, #22
 8001398:	4948      	ldr	r1, [pc, #288]	; (80014bc <MRT_LPS22HH_Setup+0x140>)
 800139a:	f00b fd9e 	bl	800ceda <HAL_UART_Transmit>

	  stmdev_ctx_t lps_ctx;

	  lps22hh_reg_t reg;
	  /* Initialize mems driver interface */
	  lps_ctx.write_reg = lps_write;
 800139e:	4b48      	ldr	r3, [pc, #288]	; (80014c0 <MRT_LPS22HH_Setup+0x144>)
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
	  lps_ctx.read_reg = lps_read;
 80013a2:	4b48      	ldr	r3, [pc, #288]	; (80014c4 <MRT_LPS22HH_Setup+0x148>)
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
	  lps_ctx.handle = SENSOR_BUS;
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 80013aa:	2064      	movs	r0, #100	; 0x64
 80013ac:	f005 fdae 	bl	8006f0c <HAL_Delay>
	  /* Check device ID */
	  lps_whoamI = 0;
 80013b0:	4b45      	ldr	r3, [pc, #276]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
	  lps22hh_device_id_get(&lps_ctx, &lps_whoamI);
 80013b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ba:	4943      	ldr	r1, [pc, #268]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013bc:	4618      	mov	r0, r3
 80013be:	f004 fbb0 	bl	8005b22 <lps22hh_device_id_get>



  	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 22, HAL_MAX_DELAY);
 80013c2:	4b3d      	ldr	r3, [pc, #244]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 80013c4:	6818      	ldr	r0, [r3, #0]
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013ca:	2216      	movs	r2, #22
 80013cc:	493f      	ldr	r1, [pc, #252]	; (80014cc <MRT_LPS22HH_Setup+0x150>)
 80013ce:	f00b fd84 	bl	800ceda <HAL_UART_Transmit>
	  if ( lps_whoamI != LPS22HH_ID ){
 80013d2:	4b3d      	ldr	r3, [pc, #244]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2bb3      	cmp	r3, #179	; 0xb3
 80013d8:	d031      	beq.n	800143e <MRT_LPS22HH_Setup+0xc2>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 80013da:	4b37      	ldr	r3, [pc, #220]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 80013dc:	6818      	ldr	r0, [r3, #0]
 80013de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013e2:	2208      	movs	r2, #8
 80013e4:	493a      	ldr	r1, [pc, #232]	; (80014d0 <MRT_LPS22HH_Setup+0x154>)
 80013e6:	f00b fd78 	bl	800ceda <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 80013ea:	4b33      	ldr	r3, [pc, #204]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 80013ec:	6818      	ldr	r0, [r3, #0]
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013f2:	2210      	movs	r2, #16
 80013f4:	4937      	ldr	r1, [pc, #220]	; (80014d4 <MRT_LPS22HH_Setup+0x158>)
 80013f6:	f00b fd70 	bl	800ceda <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lps_whoamI);
 80013fa:	4b33      	ldr	r3, [pc, #204]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	4934      	ldr	r1, [pc, #208]	; (80014d8 <MRT_LPS22HH_Setup+0x15c>)
 8001406:	4618      	mov	r0, r3
 8001408:	f019 fd2e 	bl	801ae68 <siprintf>
		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 800140c:	4b2a      	ldr	r3, [pc, #168]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 800140e:	681c      	ldr	r4, [r3, #0]
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	4618      	mov	r0, r3
 8001416:	f7fe feeb 	bl	80001f0 <strlen>
 800141a:	4603      	mov	r3, r0
 800141c:	b29a      	uxth	r2, r3
 800141e:	f107 0114 	add.w	r1, r7, #20
 8001422:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001426:	4620      	mov	r0, r4
 8001428:	f00b fd57 	bl	800ceda <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 800142c:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 800142e:	6818      	ldr	r0, [r3, #0]
 8001430:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001434:	2216      	movs	r2, #22
 8001436:	4929      	ldr	r1, [pc, #164]	; (80014dc <MRT_LPS22HH_Setup+0x160>)
 8001438:	f00b fd4f 	bl	800ceda <HAL_UART_Transmit>
		  while(1);
 800143c:	e7fe      	b.n	800143c <MRT_LPS22HH_Setup+0xc0>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 4, HAL_MAX_DELAY);
 800143e:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 8001440:	6818      	ldr	r0, [r3, #0]
 8001442:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001446:	2204      	movs	r2, #4
 8001448:	4925      	ldr	r1, [pc, #148]	; (80014e0 <MRT_LPS22HH_Setup+0x164>)
 800144a:	f00b fd46 	bl	800ceda <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lps22hh_reset_set(&lps_ctx, PROPERTY_ENABLE);
 800144e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001452:	2101      	movs	r1, #1
 8001454:	4618      	mov	r0, r3
 8001456:	f004 fb75 	bl	8005b44 <lps22hh_reset_set>

	  HAL_Delay(1000);
 800145a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800145e:	f005 fd55 	bl	8006f0c <HAL_Delay>

	  do {
	    lps22hh_reset_get(&lps_ctx, &lps_rst);
 8001462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001466:	491f      	ldr	r1, [pc, #124]	; (80014e4 <MRT_LPS22HH_Setup+0x168>)
 8001468:	4618      	mov	r0, r3
 800146a:	f004 fb91 	bl	8005b90 <lps22hh_reset_get>
	  } while (lps_rst);
 800146e:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <MRT_LPS22HH_Setup+0x168>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f5      	bne.n	8001462 <MRT_LPS22HH_Setup+0xe6>


	  /* Enable Block Data Update */
	  lps22hh_block_data_update_set(&lps_ctx, PROPERTY_ENABLE);
 8001476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147a:	2101      	movs	r1, #1
 800147c:	4618      	mov	r0, r3
 800147e:	f004 fa77 	bl	8005970 <lps22hh_block_data_update_set>
	  /* Set Output Data Rate */
	  lps22hh_data_rate_set(&lps_ctx, LPS22HH_75_Hz_LOW_NOISE);
 8001482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001486:	2115      	movs	r1, #21
 8001488:	4618      	mov	r0, r3
 800148a:	f004 fa97 	bl	80059bc <lps22hh_data_rate_set>
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Ends\n\r", 24, HAL_MAX_DELAY);
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 8001490:	6818      	ldr	r0, [r3, #0]
 8001492:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001496:	2218      	movs	r2, #24
 8001498:	4913      	ldr	r1, [pc, #76]	; (80014e8 <MRT_LPS22HH_Setup+0x16c>)
 800149a:	f00b fd1e 	bl	800ceda <HAL_UART_Transmit>

	  return lps_ctx;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	461c      	mov	r4, r3
 80014a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	}
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	3734      	adds	r7, #52	; 0x34
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd90      	pop	{r4, r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20005ef0 	.word	0x20005ef0
 80014bc:	0801ef00 	.word	0x0801ef00
 80014c0:	08001599 	.word	0x08001599
 80014c4:	080015d3 	.word	0x080015d3
 80014c8:	200003e2 	.word	0x200003e2
 80014cc:	0801ee88 	.word	0x0801ee88
 80014d0:	0801eea0 	.word	0x0801eea0
 80014d4:	0801eeac 	.word	0x0801eeac
 80014d8:	0801eec0 	.word	0x0801eec0
 80014dc:	0801eec8 	.word	0x0801eec8
 80014e0:	0801eee0 	.word	0x0801eee0
 80014e4:	200003e3 	.word	0x200003e3
 80014e8:	0801ef18 	.word	0x0801ef18

080014ec <MRT_LPS22HH_getPressure>:



void MRT_LPS22HH_getPressure(stmdev_ctx_t lps_ctx,float* pressure){
 80014ec:	b590      	push	{r4, r7, lr}
 80014ee:	b087      	sub	sp, #28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	1d3c      	adds	r4, r7, #4
 80014f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80014f8:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 80014fa:	f107 0214 	add.w	r2, r7, #20
 80014fe:	1d38      	adds	r0, r7, #4
 8001500:	2301      	movs	r3, #1
 8001502:	2127      	movs	r1, #39	; 0x27
 8001504:	f004 f9d2 	bl	80058ac <lps22hh_read_reg>

	//uint8_t reg;
	//lps22hh_press_flag_data_ready_get(&lps_ctx, &reg);

	if (reg.status.p_da) {
 8001508:	7d3b      	ldrb	r3, [r7, #20]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	d011      	beq.n	8001538 <MRT_LPS22HH_getPressure+0x4c>
 8001514:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <MRT_LPS22HH_getPressure+0x54>)
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
	//if (reg) {
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t)); //TODO CAN CAUSE AN HARDFAULT
	  lps22hh_pressure_raw_get(&lps_ctx, &data_raw_pressure);
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	4908      	ldr	r1, [pc, #32]	; (8001540 <MRT_LPS22HH_getPressure+0x54>)
 800151e:	4618      	mov	r0, r3
 8001520:	f004 fab3 	bl	8005a8a <lps22hh_pressure_raw_get>
	  *pressure = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MRT_LPS22HH_getPressure+0x54>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f004 f9ef 	bl	800590c <lps22hh_from_lsb_to_hpa>
 800152e:	eef0 7a40 	vmov.f32	s15, s0
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001538:	bf00      	nop
 800153a:	371c      	adds	r7, #28
 800153c:	46bd      	mov	sp, r7
 800153e:	bd90      	pop	{r4, r7, pc}
 8001540:	200003dc 	.word	0x200003dc

08001544 <MRT_LPS22HH_getTemperature>:

void MRT_LPS22HH_getTemperature(stmdev_ctx_t lps_ctx,float* temperature_degC){
 8001544:	b590      	push	{r4, r7, lr}
 8001546:	b087      	sub	sp, #28
 8001548:	af00      	add	r7, sp, #0
 800154a:	1d3c      	adds	r4, r7, #4
 800154c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001550:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	//lps22hh_reg_t reg;
	//lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);

	uint8_t reg;
	lps22hh_temp_flag_data_ready_get(&lps_ctx, &reg);
 8001552:	f107 0217 	add.w	r2, r7, #23
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f004 fa7c 	bl	8005a58 <lps22hh_temp_flag_data_ready_get>

	//if (reg.status.t_da) {
	if (reg) {
 8001560:	7dfb      	ldrb	r3, [r7, #23]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d012      	beq.n	800158c <MRT_LPS22HH_getTemperature+0x48>
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <MRT_LPS22HH_getTemperature+0x50>)
 8001568:	2200      	movs	r2, #0
 800156a:	801a      	strh	r2, [r3, #0]
	  memset(&lps_data_raw_temperature, 0x00, sizeof(int16_t));
	  lps22hh_temperature_raw_get(&lps_ctx, &lps_data_raw_temperature);
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	4909      	ldr	r1, [pc, #36]	; (8001594 <MRT_LPS22HH_getTemperature+0x50>)
 8001570:	4618      	mov	r0, r3
 8001572:	f004 fab3 	bl	8005adc <lps22hh_temperature_raw_get>
	  *temperature_degC = lps22hh_from_lsb_to_celsius(lps_data_raw_temperature);
 8001576:	4b07      	ldr	r3, [pc, #28]	; (8001594 <MRT_LPS22HH_getTemperature+0x50>)
 8001578:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157c:	4618      	mov	r0, r3
 800157e:	f004 f9dd 	bl	800593c <lps22hh_from_lsb_to_celsius>
 8001582:	eef0 7a40 	vmov.f32	s15, s0
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800158c:	bf00      	nop
 800158e:	371c      	adds	r7, #28
 8001590:	46bd      	mov	sp, r7
 8001592:	bd90      	pop	{r4, r7, pc}
 8001594:	200003e0 	.word	0x200003e0

08001598 <lps_write>:




static int32_t lps_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af04      	add	r7, sp, #16
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	461a      	mov	r2, r3
 80015a4:	460b      	mov	r3, r1
 80015a6:	72fb      	strb	r3, [r7, #11]
 80015a8:	4613      	mov	r3, r2
 80015aa:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80015ac:	7afb      	ldrb	r3, [r7, #11]
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b4:	9302      	str	r3, [sp, #8]
 80015b6:	893b      	ldrh	r3, [r7, #8]
 80015b8:	9301      	str	r3, [sp, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	2301      	movs	r3, #1
 80015c0:	21b9      	movs	r1, #185	; 0xb9
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f006 fb86 	bl	8007cd4 <HAL_I2C_Mem_Write>
  return 0;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <lps_read>:

static int32_t lps_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b088      	sub	sp, #32
 80015d6:	af04      	add	r7, sp, #16
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	461a      	mov	r2, r3
 80015de:	460b      	mov	r3, r1
 80015e0:	72fb      	strb	r3, [r7, #11]
 80015e2:	4613      	mov	r3, r2
 80015e4:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80015e6:	7afb      	ldrb	r3, [r7, #11]
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ee:	9302      	str	r3, [sp, #8]
 80015f0:	893b      	ldrh	r3, [r7, #8]
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	2301      	movs	r3, #1
 80015fa:	21b9      	movs	r1, #185	; 0xb9
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f006 fc63 	bl	8007ec8 <HAL_I2C_Mem_Read>
  return 0;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001610:	f3bf 8f4f 	dsb	sy
}
 8001614:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <__NVIC_SystemReset+0x24>)
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800161e:	4904      	ldr	r1, [pc, #16]	; (8001630 <__NVIC_SystemReset+0x24>)
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <__NVIC_SystemReset+0x28>)
 8001622:	4313      	orrs	r3, r2
 8001624:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001626:	f3bf 8f4f 	dsb	sy
}
 800162a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <__NVIC_SystemReset+0x20>
 8001630:	e000ed00 	.word	0xe000ed00
 8001634:	05fa0004 	.word	0x05fa0004

08001638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800163a:	b09d      	sub	sp, #116	; 0x74
 800163c:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800163e:	f005 fc23 	bl	8006e88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001642:	f000 f991 	bl	8001968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001646:	f000 fd11 	bl	800206c <MX_GPIO_Init>
  MX_ADC1_Init();
 800164a:	f000 f9f9 	bl	8001a40 <MX_ADC1_Init>
  MX_I2C1_Init();
 800164e:	f000 fa49 	bl	8001ae4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001652:	f000 fa87 	bl	8001b64 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001656:	f000 fac5 	bl	8001be4 <MX_I2C3_Init>
  MX_SPI2_Init();
 800165a:	f000 fb8f 	bl	8001d7c <MX_SPI2_Init>
  MX_SPI4_Init();
 800165e:	f000 fbc3 	bl	8001de8 <MX_SPI4_Init>
  MX_SPI5_Init();
 8001662:	f000 fbf7 	bl	8001e54 <MX_SPI5_Init>
  MX_TIM2_Init();
 8001666:	f000 fc2b 	bl	8001ec0 <MX_TIM2_Init>
  MX_UART8_Init();
 800166a:	f000 fc81 	bl	8001f70 <MX_UART8_Init>
  MX_USART3_UART_Init();
 800166e:	f000 fca9 	bl	8001fc4 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001672:	f000 fcd1 	bl	8002018 <MX_USART6_UART_Init>
  MX_RTC_Init();
 8001676:	f000 faf5 	bl	8001c64 <MX_RTC_Init>
  //MX_IWDG_Init();
  MX_FATFS_Init();
 800167a:	f00e f939 	bl	800f8f0 <MX_FATFS_Init>
  /*
   * Reinitialize all peripherals
   */

  // reset LEDs
  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 800167e:	2200      	movs	r2, #0
 8001680:	2102      	movs	r1, #2
 8001682:	4890      	ldr	r0, [pc, #576]	; (80018c4 <main+0x28c>)
 8001684:	f006 f9b0 	bl	80079e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001688:	2200      	movs	r2, #0
 800168a:	2104      	movs	r1, #4
 800168c:	488d      	ldr	r0, [pc, #564]	; (80018c4 <main+0x28c>)
 800168e:	f006 f9ab 	bl	80079e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 8001692:	2200      	movs	r2, #0
 8001694:	2108      	movs	r1, #8
 8001696:	488b      	ldr	r0, [pc, #556]	; (80018c4 <main+0x28c>)
 8001698:	f006 f9a6 	bl	80079e8 <HAL_GPIO_WritePin>

  // reset recovery pyro pins
  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 800169c:	2201      	movs	r2, #1
 800169e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016a2:	4889      	ldr	r0, [pc, #548]	; (80018c8 <main+0x290>)
 80016a4:	f006 f9a0 	bl	80079e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 80016a8:	2200      	movs	r2, #0
 80016aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ae:	4886      	ldr	r0, [pc, #536]	; (80018c8 <main+0x290>)
 80016b0:	f006 f99a 	bl	80079e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 80016b4:	2200      	movs	r2, #0
 80016b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016ba:	4883      	ldr	r0, [pc, #524]	; (80018c8 <main+0x290>)
 80016bc:	f006 f994 	bl	80079e8 <HAL_GPIO_WritePin>

  // reset prop pyro pins
  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET); //PG1 ARMING_PROP
 80016c0:	2201      	movs	r2, #1
 80016c2:	2102      	movs	r1, #2
 80016c4:	4880      	ldr	r0, [pc, #512]	; (80018c8 <main+0x290>)
 80016c6:	f006 f98f 	bl	80079e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 80016ca:	2200      	movs	r2, #0
 80016cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016d0:	487e      	ldr	r0, [pc, #504]	; (80018cc <main+0x294>)
 80016d2:	f006 f989 	bl	80079e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 80016d6:	2200      	movs	r2, #0
 80016d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016dc:	487b      	ldr	r0, [pc, #492]	; (80018cc <main+0x294>)
 80016de:	f006 f983 	bl	80079e8 <HAL_GPIO_WritePin>

  // reset 12 V buck converter enable pin (disable converter)
  HAL_GPIO_WritePin(EN_12V_Buck_GPIO_Port, EN_12V_Buck_Pin, RESET); //PE2 Buck converter enable
 80016e2:	2200      	movs	r2, #0
 80016e4:	2104      	movs	r1, #4
 80016e6:	487a      	ldr	r0, [pc, #488]	; (80018d0 <main+0x298>)
 80016e8:	f006 f97e 	bl	80079e8 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET); //This was in the previous code
  //HAL_GPIO_WritePin(OUT_Prop_ActuatedVent_Gate_GPIO_Port, OUT_Prop_ActuatedVent_Gate_Pin, RESET); //PE7 (MAY NOT BE THE RIGHT ONE)


  // reset payload EN signal
  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 80016ec:	2200      	movs	r2, #0
 80016ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016f2:	4877      	ldr	r0, [pc, #476]	; (80018d0 <main+0x298>)
 80016f4:	f006 f978 	bl	80079e8 <HAL_GPIO_WritePin>

  // set CS pin for thermocouple chip high
  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

  // set power off for VR
  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 80016f8:	2200      	movs	r2, #0
 80016fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016fe:	4872      	ldr	r0, [pc, #456]	; (80018c8 <main+0x290>)
 8001700:	f006 f972 	bl	80079e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 8001704:	2200      	movs	r2, #0
 8001706:	2180      	movs	r1, #128	; 0x80
 8001708:	4872      	ldr	r0, [pc, #456]	; (80018d4 <main+0x29c>)
 800170a:	f006 f96d 	bl	80079e8 <HAL_GPIO_WritePin>

  // FLASH set CS, WP and IO3 pins high
  HAL_GPIO_WritePin(OUT_FLASH_CS_GPIO_Port, OUT_FLASH_CS_Pin, SET);
 800170e:	2201      	movs	r2, #1
 8001710:	2140      	movs	r1, #64	; 0x40
 8001712:	4870      	ldr	r0, [pc, #448]	; (80018d4 <main+0x29c>)
 8001714:	f006 f968 	bl	80079e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_FLASH_WP_GPIO_Port, OUT_FLASH_WP_Pin, SET);
 8001718:	2201      	movs	r2, #1
 800171a:	2120      	movs	r1, #32
 800171c:	486d      	ldr	r0, [pc, #436]	; (80018d4 <main+0x29c>)
 800171e:	f006 f963 	bl	80079e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_FLASH_IO3_GPIO_Port, OUT_FLASH_IO3_Pin, SET);
 8001722:	2201      	movs	r2, #1
 8001724:	2110      	movs	r1, #16
 8001726:	486b      	ldr	r0, [pc, #428]	; (80018d4 <main+0x29c>)
 8001728:	f006 f95e 	bl	80079e8 <HAL_GPIO_WritePin>
   *-Activate freeRTOS
   *-Change SysTic to any other timer (done in .ioc)
   *-Include the path to all includes folders of the drivers (for C and C++ linkers)
   */

  HAL_UART_Transmit(&DEBUG_UART,"\r\n\r\nStarting FC\r\n\r\n",19,HAL_MAX_DELAY);
 800172c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001730:	2213      	movs	r2, #19
 8001732:	4969      	ldr	r1, [pc, #420]	; (80018d8 <main+0x2a0>)
 8001734:	4869      	ldr	r0, [pc, #420]	; (80018dc <main+0x2a4>)
 8001736:	f00b fbd0 	bl	800ceda <HAL_UART_Transmit>

  /*
   * For external FLASH memory
   *-Put before RTOS setup because you need the external flash in its setup
   */
    MRT_SetupRTOS(DEBUG_UART,SLEEP_TIME); //Put here so we can pass the uart value to the setup
 800173a:	4e68      	ldr	r6, [pc, #416]	; (80018dc <main+0x2a4>)
 800173c:	231e      	movs	r3, #30
 800173e:	930d      	str	r3, [sp, #52]	; 0x34
 8001740:	466d      	mov	r5, sp
 8001742:	f106 0410 	add.w	r4, r6, #16
 8001746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001748:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800174c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001750:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001752:	6823      	ldr	r3, [r4, #0]
 8001754:	602b      	str	r3, [r5, #0]
 8001756:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800175a:	f004 ff1f 	bl	800659c <MRT_SetupRTOS>
	MRT_externalFlashSetup(&DEBUG_UART);
 800175e:	485f      	ldr	r0, [pc, #380]	; (80018dc <main+0x2a4>)
 8001760:	f002 f890 	bl	8003884 <MRT_externalFlashSetup>
   * You can access the flag of both alarm A and B with the variables flagA and flagB
   */

//TODO doesn't work on wakeup (in the thread it seems)
  char tmp_buffer[20];
  sprintf(tmp_buffer,"Prev_Sec %i\r\n",prev_sec);
 8001764:	4b5e      	ldr	r3, [pc, #376]	; (80018e0 <main+0x2a8>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	f107 0314 	add.w	r3, r7, #20
 800176e:	495d      	ldr	r1, [pc, #372]	; (80018e4 <main+0x2ac>)
 8001770:	4618      	mov	r0, r3
 8001772:	f019 fb79 	bl	801ae68 <siprintf>
  HAL_UART_Transmit(&DEBUG_UART,tmp_buffer,strlen(tmp_buffer),HAL_MAX_DELAY);
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fd38 	bl	80001f0 <strlen>
 8001780:	4603      	mov	r3, r0
 8001782:	b29a      	uxth	r2, r3
 8001784:	f107 0114 	add.w	r1, r7, #20
 8001788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800178c:	4853      	ldr	r0, [pc, #332]	; (80018dc <main+0x2a4>)
 800178e:	f00b fba4 	bl	800ceda <HAL_UART_Transmit>
  MRT_setRTC(prev_hours,prev_min,prev_sec);
 8001792:	4b55      	ldr	r3, [pc, #340]	; (80018e8 <main+0x2b0>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	4a55      	ldr	r2, [pc, #340]	; (80018ec <main+0x2b4>)
 8001798:	7811      	ldrb	r1, [r2, #0]
 800179a:	4a51      	ldr	r2, [pc, #324]	; (80018e0 <main+0x2a8>)
 800179c:	7812      	ldrb	r2, [r2, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f005 f856 	bl	8006850 <MRT_setRTC>
  MRT_setAlarmA(WHEN_SLEEP_TIME_HOURS, WHEN_SLEEP_TIME_MIN, WHEN_SLEEP_TIME_SEC);
 80017a4:	2215      	movs	r2, #21
 80017a6:	2100      	movs	r1, #0
 80017a8:	2000      	movs	r0, #0
 80017aa:	f005 f813 	bl	80067d4 <MRT_setAlarmA>

  /*
   * For Iridium:
   * -Set the project as c++
   */
	HAL_GPIO_WritePin(Iridium_RST_GPIO_Port, Iridium_RST_Pin, SET);
 80017ae:	2201      	movs	r2, #1
 80017b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017b4:	4846      	ldr	r0, [pc, #280]	; (80018d0 <main+0x298>)
 80017b6:	f006 f917 	bl	80079e8 <HAL_GPIO_WritePin>

  /*
   * For LSM6DSR
   *-Enable float formatting for sprintf (go to Project->Properties->C/C++ Build->Settings->MCU Settings->Check the box "Use float with printf")
   */
  lsm_ctx = MRT_LSM6DSR_Setup(&LSM_I2C, &DEBUG_UART);
 80017ba:	4c4d      	ldr	r4, [pc, #308]	; (80018f0 <main+0x2b8>)
 80017bc:	463b      	mov	r3, r7
 80017be:	4a47      	ldr	r2, [pc, #284]	; (80018dc <main+0x2a4>)
 80017c0:	494c      	ldr	r1, [pc, #304]	; (80018f4 <main+0x2bc>)
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fc5c 	bl	8001080 <MRT_LSM6DSR_Setup>
 80017c8:	463b      	mov	r3, r7
 80017ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}

   /*
    * For LPS22HH
    *-Enable float formatting for sprintf (go to Project->Properties->C/C++ Build->Settings->MCU Settings->Check the box "Use float with printf")
    */
  lps_ctx = MRT_LPS22HH_Setup(&LPS_I2C, &DEBUG_UART);
 80017d2:	4c49      	ldr	r4, [pc, #292]	; (80018f8 <main+0x2c0>)
 80017d4:	463b      	mov	r3, r7
 80017d6:	4a41      	ldr	r2, [pc, #260]	; (80018dc <main+0x2a4>)
 80017d8:	4946      	ldr	r1, [pc, #280]	; (80018f4 <main+0x2bc>)
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fdce 	bl	800137c <MRT_LPS22HH_Setup>
 80017e0:	463b      	mov	r3, r7
 80017e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    * For the GPS:
    * -huart6 on v4.3
    * -Set its uart to 9600
    *
    */
   GPS_init(&GPS_UART, &DEBUG_UART);
 80017ea:	493c      	ldr	r1, [pc, #240]	; (80018dc <main+0x2a4>)
 80017ec:	4843      	ldr	r0, [pc, #268]	; (80018fc <main+0x2c4>)
 80017ee:	f002 f815 	bl	800381c <GPS_init>

   /*
    * For the xtend
    * -huart3 on v4.3
    */
   HAL_GPIO_WritePin(XTend_CTS_Pin, GPIO_PIN_10, GPIO_PIN_RESET); //TODO is it necessary?
 80017f2:	2200      	movs	r2, #0
 80017f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017f8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80017fc:	f006 f8f4 	bl	80079e8 <HAL_GPIO_WritePin>

   /*
    * For the SRadio
    * -SPI2 on v4.3
    */
	set_hspi(SRADIO_SPI);
 8001800:	4c3f      	ldr	r4, [pc, #252]	; (8001900 <main+0x2c8>)
 8001802:	4668      	mov	r0, sp
 8001804:	f104 0310 	add.w	r3, r4, #16
 8001808:	2248      	movs	r2, #72	; 0x48
 800180a:	4619      	mov	r1, r3
 800180c:	f018 fa86 	bl	8019d1c <memcpy>
 8001810:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001814:	f00d fb2e 	bl	800ee74 <set_hspi>
	// SPI2_SX_CS_GPIO_Port
	set_NSS_pin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin);
 8001818:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800181c:	4839      	ldr	r0, [pc, #228]	; (8001904 <main+0x2cc>)
 800181e:	f00d fad1 	bl	800edc4 <set_NSS_pin>
	set_BUSY_pin(SX_BUSY_GPIO_Port, SX_BUSY_Pin);
 8001822:	2108      	movs	r1, #8
 8001824:	4828      	ldr	r0, [pc, #160]	; (80018c8 <main+0x290>)
 8001826:	f00d fae3 	bl	800edf0 <set_BUSY_pin>
	set_NRESET_pin(SX_RST_GPIO_Port, SX_RST_Pin);
 800182a:	2104      	movs	r1, #4
 800182c:	4826      	ldr	r0, [pc, #152]	; (80018c8 <main+0x290>)
 800182e:	f00d faf5 	bl	800ee1c <set_NRESET_pin>
	set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
 8001832:	2110      	movs	r1, #16
 8001834:	4824      	ldr	r0, [pc, #144]	; (80018c8 <main+0x290>)
 8001836:	f00d fb07 	bl	800ee48 <set_DIO1_pin>
	Tx_setup();
 800183a:	f00d fb33 	bl	800eea4 <Tx_setup>

	/*
	* For the SD card
	*
	*/
	sd_init_dynamic_filename("FC", "", filename);
 800183e:	4a32      	ldr	r2, [pc, #200]	; (8001908 <main+0x2d0>)
 8001840:	4932      	ldr	r1, [pc, #200]	; (800190c <main+0x2d4>)
 8001842:	4833      	ldr	r0, [pc, #204]	; (8001910 <main+0x2d8>)
 8001844:	f005 f8fa 	bl	8006a3c <sd_init_dynamic_filename>
//TODO DISABLE EXTERNAL BUTTON INTERRUPT ONCE ROCKET IS ARMED

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001848:	f013 f8f0 	bl	8014a2c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Memory0 */
  Memory0Handle = osThreadNew(StartMemory0, NULL, &Memory0_attributes);
 800184c:	4a31      	ldr	r2, [pc, #196]	; (8001914 <main+0x2dc>)
 800184e:	2100      	movs	r1, #0
 8001850:	4831      	ldr	r0, [pc, #196]	; (8001918 <main+0x2e0>)
 8001852:	f013 f935 	bl	8014ac0 <osThreadNew>
 8001856:	4603      	mov	r3, r0
 8001858:	4a30      	ldr	r2, [pc, #192]	; (800191c <main+0x2e4>)
 800185a:	6013      	str	r3, [r2, #0]

  /* creation of Ejection1 */
  Ejection1Handle = osThreadNew(StartEjection1, NULL, &Ejection1_attributes);
 800185c:	4a30      	ldr	r2, [pc, #192]	; (8001920 <main+0x2e8>)
 800185e:	2100      	movs	r1, #0
 8001860:	4830      	ldr	r0, [pc, #192]	; (8001924 <main+0x2ec>)
 8001862:	f013 f92d 	bl	8014ac0 <osThreadNew>
 8001866:	4603      	mov	r3, r0
 8001868:	4a2f      	ldr	r2, [pc, #188]	; (8001928 <main+0x2f0>)
 800186a:	6013      	str	r3, [r2, #0]

  /* creation of Telemetry2 */
  Telemetry2Handle = osThreadNew(StartTelemetry2, NULL, &Telemetry2_attributes);
 800186c:	4a2f      	ldr	r2, [pc, #188]	; (800192c <main+0x2f4>)
 800186e:	2100      	movs	r1, #0
 8001870:	482f      	ldr	r0, [pc, #188]	; (8001930 <main+0x2f8>)
 8001872:	f013 f925 	bl	8014ac0 <osThreadNew>
 8001876:	4603      	mov	r3, r0
 8001878:	4a2e      	ldr	r2, [pc, #184]	; (8001934 <main+0x2fc>)
 800187a:	6013      	str	r3, [r2, #0]

  /* creation of Sensors3 */
  Sensors3Handle = osThreadNew(StartSensors3, NULL, &Sensors3_attributes);
 800187c:	4a2e      	ldr	r2, [pc, #184]	; (8001938 <main+0x300>)
 800187e:	2100      	movs	r1, #0
 8001880:	482e      	ldr	r0, [pc, #184]	; (800193c <main+0x304>)
 8001882:	f013 f91d 	bl	8014ac0 <osThreadNew>
 8001886:	4603      	mov	r3, r0
 8001888:	4a2d      	ldr	r2, [pc, #180]	; (8001940 <main+0x308>)
 800188a:	6013      	str	r3, [r2, #0]

  /* creation of Propulsion4 */
  Propulsion4Handle = osThreadNew(StartPropulsion4, NULL, &Propulsion4_attributes);
 800188c:	4a2d      	ldr	r2, [pc, #180]	; (8001944 <main+0x30c>)
 800188e:	2100      	movs	r1, #0
 8001890:	482d      	ldr	r0, [pc, #180]	; (8001948 <main+0x310>)
 8001892:	f013 f915 	bl	8014ac0 <osThreadNew>
 8001896:	4603      	mov	r3, r0
 8001898:	4a2c      	ldr	r2, [pc, #176]	; (800194c <main+0x314>)
 800189a:	6013      	str	r3, [r2, #0]

  /* creation of Printing */
  PrintingHandle = osThreadNew(StartPrinting, NULL, &Printing_attributes);
 800189c:	4a2c      	ldr	r2, [pc, #176]	; (8001950 <main+0x318>)
 800189e:	2100      	movs	r1, #0
 80018a0:	482c      	ldr	r0, [pc, #176]	; (8001954 <main+0x31c>)
 80018a2:	f013 f90d 	bl	8014ac0 <osThreadNew>
 80018a6:	4603      	mov	r3, r0
 80018a8:	4a2b      	ldr	r2, [pc, #172]	; (8001958 <main+0x320>)
 80018aa:	6013      	str	r3, [r2, #0]

  /* creation of WatchDog */
  WatchDogHandle = osThreadNew(StartWatchDog, NULL, &WatchDog_attributes);
 80018ac:	4a2b      	ldr	r2, [pc, #172]	; (800195c <main+0x324>)
 80018ae:	2100      	movs	r1, #0
 80018b0:	482b      	ldr	r0, [pc, #172]	; (8001960 <main+0x328>)
 80018b2:	f013 f905 	bl	8014ac0 <osThreadNew>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4a2a      	ldr	r2, [pc, #168]	; (8001964 <main+0x32c>)
 80018ba:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80018bc:	f013 f8da 	bl	8014a74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <main+0x288>
 80018c2:	bf00      	nop
 80018c4:	40020800 	.word	0x40020800
 80018c8:	40021800 	.word	0x40021800
 80018cc:	40021400 	.word	0x40021400
 80018d0:	40021000 	.word	0x40021000
 80018d4:	40020c00 	.word	0x40020c00
 80018d8:	0801ef80 	.word	0x0801ef80
 80018dc:	20005eac 	.word	0x20005eac
 80018e0:	20000416 	.word	0x20000416
 80018e4:	0801ef94 	.word	0x0801ef94
 80018e8:	20000414 	.word	0x20000414
 80018ec:	20000415 	.word	0x20000415
 80018f0:	20006a48 	.word	0x20006a48
 80018f4:	20005ef4 	.word	0x20005ef4
 80018f8:	20006a38 	.word	0x20006a38
 80018fc:	200069a0 	.word	0x200069a0
 8001900:	20005f48 	.word	0x20005f48
 8001904:	40020400 	.word	0x40020400
 8001908:	20006358 	.word	0x20006358
 800190c:	0801efa4 	.word	0x0801efa4
 8001910:	0801efa8 	.word	0x0801efa8
 8001914:	08020aec 	.word	0x08020aec
 8001918:	080023bd 	.word	0x080023bd
 800191c:	20006354 	.word	0x20006354
 8001920:	08020b10 	.word	0x08020b10
 8001924:	080024a1 	.word	0x080024a1
 8001928:	20006998 	.word	0x20006998
 800192c:	08020b34 	.word	0x08020b34
 8001930:	080024b1 	.word	0x080024b1
 8001934:	2000699c 	.word	0x2000699c
 8001938:	08020b58 	.word	0x08020b58
 800193c:	080027b9 	.word	0x080027b9
 8001940:	20006a34 	.word	0x20006a34
 8001944:	08020b7c 	.word	0x08020b7c
 8001948:	08002875 	.word	0x08002875
 800194c:	20006a54 	.word	0x20006a54
 8001950:	08020ba0 	.word	0x08020ba0
 8001954:	08002881 	.word	0x08002881
 8001958:	20006928 	.word	0x20006928
 800195c:	08020bc4 	.word	0x08020bc4
 8001960:	08002891 	.word	0x08002891
 8001964:	20006340 	.word	0x20006340

08001968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b094      	sub	sp, #80	; 0x50
 800196c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800196e:	f107 0320 	add.w	r3, r7, #32
 8001972:	2230      	movs	r2, #48	; 0x30
 8001974:	2100      	movs	r1, #0
 8001976:	4618      	mov	r0, r3
 8001978:	f018 f9f8 	bl	8019d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800197c:	f107 030c 	add.w	r3, r7, #12
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800198c:	2300      	movs	r3, #0
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	4b29      	ldr	r3, [pc, #164]	; (8001a38 <SystemClock_Config+0xd0>)
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	4a28      	ldr	r2, [pc, #160]	; (8001a38 <SystemClock_Config+0xd0>)
 8001996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199a:	6413      	str	r3, [r2, #64]	; 0x40
 800199c:	4b26      	ldr	r3, [pc, #152]	; (8001a38 <SystemClock_Config+0xd0>)
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019a8:	2300      	movs	r3, #0
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	4b23      	ldr	r3, [pc, #140]	; (8001a3c <SystemClock_Config+0xd4>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019b4:	4a21      	ldr	r2, [pc, #132]	; (8001a3c <SystemClock_Config+0xd4>)
 80019b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ba:	6013      	str	r3, [r2, #0]
 80019bc:	4b1f      	ldr	r3, [pc, #124]	; (8001a3c <SystemClock_Config+0xd4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80019c8:	2309      	movs	r3, #9
 80019ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019d2:	2301      	movs	r3, #1
 80019d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019d6:	2302      	movs	r3, #2
 80019d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019e0:	2308      	movs	r3, #8
 80019e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80019e4:	2348      	movs	r3, #72	; 0x48
 80019e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019e8:	2302      	movs	r3, #2
 80019ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80019ec:	2303      	movs	r3, #3
 80019ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f0:	f107 0320 	add.w	r3, r7, #32
 80019f4:	4618      	mov	r0, r3
 80019f6:	f008 fa5b 	bl	8009eb0 <HAL_RCC_OscConfig>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001a00:	f000 ffc8 	bl	8002994 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a04:	230f      	movs	r3, #15
 8001a06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a1a:	f107 030c 	add.w	r3, r7, #12
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4618      	mov	r0, r3
 8001a22:	f008 fcbd 	bl	800a3a0 <HAL_RCC_ClockConfig>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001a2c:	f000 ffb2 	bl	8002994 <Error_Handler>
  }
}
 8001a30:	bf00      	nop
 8001a32:	3750      	adds	r7, #80	; 0x50
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40007000 	.word	0x40007000

08001a40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a46:	463b      	mov	r3, r7
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a52:	4b21      	ldr	r3, [pc, #132]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001a54:	4a21      	ldr	r2, [pc, #132]	; (8001adc <MX_ADC1_Init+0x9c>)
 8001a56:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a58:	4b1f      	ldr	r3, [pc, #124]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a5e:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a64:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a6a:	4b1b      	ldr	r3, [pc, #108]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a70:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a78:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a7e:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001a80:	4a17      	ldr	r2, [pc, #92]	; (8001ae0 <MX_ADC1_Init+0xa0>)
 8001a82:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a84:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a8a:	4b13      	ldr	r3, [pc, #76]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a98:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a9e:	480e      	ldr	r0, [pc, #56]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001aa0:	f005 fa58 	bl	8006f54 <HAL_ADC_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001aaa:	f000 ff73 	bl	8002994 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001aae:	2306      	movs	r3, #6
 8001ab0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aba:	463b      	mov	r3, r7
 8001abc:	4619      	mov	r1, r3
 8001abe:	4806      	ldr	r0, [pc, #24]	; (8001ad8 <MX_ADC1_Init+0x98>)
 8001ac0:	f005 fa8c 	bl	8006fdc <HAL_ADC_ConfigChannel>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001aca:	f000 ff63 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20006754 	.word	0x20006754
 8001adc:	40012000 	.word	0x40012000
 8001ae0:	0f000001 	.word	0x0f000001

08001ae4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ae8:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001aea:	4a1c      	ldr	r2, [pc, #112]	; (8001b5c <MX_I2C1_Init+0x78>)
 8001aec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001aee:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001af0:	4a1b      	ldr	r2, [pc, #108]	; (8001b60 <MX_I2C1_Init+0x7c>)
 8001af2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001af4:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001afa:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b00:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001b02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b08:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b0e:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b14:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b20:	480d      	ldr	r0, [pc, #52]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001b22:	f005 ff93 	bl	8007a4c <HAL_I2C_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b2c:	f000 ff32 	bl	8002994 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b30:	2100      	movs	r1, #0
 8001b32:	4809      	ldr	r0, [pc, #36]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001b34:	f006 ff7f 	bl	8008a36 <HAL_I2CEx_ConfigAnalogFilter>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001b3e:	f000 ff29 	bl	8002994 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b42:	2100      	movs	r1, #0
 8001b44:	4804      	ldr	r0, [pc, #16]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001b46:	f006 ffb2 	bl	8008aae <HAL_I2CEx_ConfigDigitalFilter>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001b50:	f000 ff20 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	2000628c 	.word	0x2000628c
 8001b5c:	40005400 	.word	0x40005400
 8001b60:	000186a0 	.word	0x000186a0

08001b64 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b68:	4b1b      	ldr	r3, [pc, #108]	; (8001bd8 <MX_I2C2_Init+0x74>)
 8001b6a:	4a1c      	ldr	r2, [pc, #112]	; (8001bdc <MX_I2C2_Init+0x78>)
 8001b6c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <MX_I2C2_Init+0x74>)
 8001b70:	4a1b      	ldr	r2, [pc, #108]	; (8001be0 <MX_I2C2_Init+0x7c>)
 8001b72:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b74:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <MX_I2C2_Init+0x74>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b7a:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <MX_I2C2_Init+0x74>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b80:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <MX_I2C2_Init+0x74>)
 8001b82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b86:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b88:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <MX_I2C2_Init+0x74>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b8e:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <MX_I2C2_Init+0x74>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b94:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <MX_I2C2_Init+0x74>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b9a:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <MX_I2C2_Init+0x74>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ba0:	480d      	ldr	r0, [pc, #52]	; (8001bd8 <MX_I2C2_Init+0x74>)
 8001ba2:	f005 ff53 	bl	8007a4c <HAL_I2C_Init>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001bac:	f000 fef2 	bl	8002994 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4809      	ldr	r0, [pc, #36]	; (8001bd8 <MX_I2C2_Init+0x74>)
 8001bb4:	f006 ff3f 	bl	8008a36 <HAL_I2CEx_ConfigAnalogFilter>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001bbe:	f000 fee9 	bl	8002994 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	4804      	ldr	r0, [pc, #16]	; (8001bd8 <MX_I2C2_Init+0x74>)
 8001bc6:	f006 ff72 	bl	8008aae <HAL_I2CEx_ConfigDigitalFilter>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001bd0:	f000 fee0 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	200062ec 	.word	0x200062ec
 8001bdc:	40005800 	.word	0x40005800
 8001be0:	000186a0 	.word	0x000186a0

08001be4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001be8:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <MX_I2C3_Init+0x74>)
 8001bea:	4a1c      	ldr	r2, [pc, #112]	; (8001c5c <MX_I2C3_Init+0x78>)
 8001bec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001bee:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <MX_I2C3_Init+0x74>)
 8001bf0:	4a1b      	ldr	r2, [pc, #108]	; (8001c60 <MX_I2C3_Init+0x7c>)
 8001bf2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bf4:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <MX_I2C3_Init+0x74>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001bfa:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <MX_I2C3_Init+0x74>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c00:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <MX_I2C3_Init+0x74>)
 8001c02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c06:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c08:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <MX_I2C3_Init+0x74>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001c0e:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <MX_I2C3_Init+0x74>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c14:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <MX_I2C3_Init+0x74>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c1a:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <MX_I2C3_Init+0x74>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001c20:	480d      	ldr	r0, [pc, #52]	; (8001c58 <MX_I2C3_Init+0x74>)
 8001c22:	f005 ff13 	bl	8007a4c <HAL_I2C_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001c2c:	f000 feb2 	bl	8002994 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c30:	2100      	movs	r1, #0
 8001c32:	4809      	ldr	r0, [pc, #36]	; (8001c58 <MX_I2C3_Init+0x74>)
 8001c34:	f006 feff 	bl	8008a36 <HAL_I2CEx_ConfigAnalogFilter>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001c3e:	f000 fea9 	bl	8002994 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001c42:	2100      	movs	r1, #0
 8001c44:	4804      	ldr	r0, [pc, #16]	; (8001c58 <MX_I2C3_Init+0x74>)
 8001c46:	f006 ff32 	bl	8008aae <HAL_I2CEx_ConfigDigitalFilter>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001c50:	f000 fea0 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001c54:	bf00      	nop
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20005ef4 	.word	0x20005ef4
 8001c5c:	40005c00 	.word	0x40005c00
 8001c60:	000186a0 	.word	0x000186a0

08001c64 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b090      	sub	sp, #64	; 0x40
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001c6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	60da      	str	r2, [r3, #12]
 8001c78:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001c7e:	463b      	mov	r3, r7
 8001c80:	2228      	movs	r2, #40	; 0x28
 8001c82:	2100      	movs	r1, #0
 8001c84:	4618      	mov	r0, r3
 8001c86:	f018 f871 	bl	8019d6c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c8a:	4b3a      	ldr	r3, [pc, #232]	; (8001d74 <MX_RTC_Init+0x110>)
 8001c8c:	4a3a      	ldr	r2, [pc, #232]	; (8001d78 <MX_RTC_Init+0x114>)
 8001c8e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c90:	4b38      	ldr	r3, [pc, #224]	; (8001d74 <MX_RTC_Init+0x110>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001c96:	4b37      	ldr	r3, [pc, #220]	; (8001d74 <MX_RTC_Init+0x110>)
 8001c98:	227f      	movs	r2, #127	; 0x7f
 8001c9a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001c9c:	4b35      	ldr	r3, [pc, #212]	; (8001d74 <MX_RTC_Init+0x110>)
 8001c9e:	22ff      	movs	r2, #255	; 0xff
 8001ca0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ca2:	4b34      	ldr	r3, [pc, #208]	; (8001d74 <MX_RTC_Init+0x110>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ca8:	4b32      	ldr	r3, [pc, #200]	; (8001d74 <MX_RTC_Init+0x110>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001cae:	4b31      	ldr	r3, [pc, #196]	; (8001d74 <MX_RTC_Init+0x110>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001cb4:	482f      	ldr	r0, [pc, #188]	; (8001d74 <MX_RTC_Init+0x110>)
 8001cb6:	f008 ff5d 	bl	800ab74 <HAL_RTC_Init>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001cc0:	f000 fe68 	bl	8002994 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001cde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4823      	ldr	r0, [pc, #140]	; (8001d74 <MX_RTC_Init+0x110>)
 8001ce8:	f008 ffd5 	bl	800ac96 <HAL_RTC_SetTime>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001cf2:	f000 fe4f 	bl	8002994 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001d02:	2301      	movs	r3, #1
 8001d04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001d0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d12:	2201      	movs	r2, #1
 8001d14:	4619      	mov	r1, r3
 8001d16:	4817      	ldr	r0, [pc, #92]	; (8001d74 <MX_RTC_Init+0x110>)
 8001d18:	f009 f8d8 	bl	800aecc <HAL_RTC_SetDate>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001d22:	f000 fe37 	bl	8002994 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001d50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d56:	463b      	mov	r3, r7
 8001d58:	2201      	movs	r2, #1
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4805      	ldr	r0, [pc, #20]	; (8001d74 <MX_RTC_Init+0x110>)
 8001d5e:	f009 f9ab 	bl	800b0b8 <HAL_RTC_SetAlarm_IT>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001d68:	f000 fe14 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001d6c:	bf00      	nop
 8001d6e:	3740      	adds	r7, #64	; 0x40
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20006908 	.word	0x20006908
 8001d78:	40002800 	.word	0x40002800

08001d7c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001d80:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001d82:	4a18      	ldr	r2, [pc, #96]	; (8001de4 <MX_SPI2_Init+0x68>)
 8001d84:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d86:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001d88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d8c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d8e:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d94:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001da0:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001da6:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001da8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dae:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001db4:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dba:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dc0:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001dc8:	220a      	movs	r2, #10
 8001dca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001dcc:	4804      	ldr	r0, [pc, #16]	; (8001de0 <MX_SPI2_Init+0x64>)
 8001dce:	f009 fca3 	bl	800b718 <HAL_SPI_Init>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001dd8:	f000 fddc 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20005f48 	.word	0x20005f48
 8001de4:	40003800 	.word	0x40003800

08001de8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001dec:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001dee:	4a18      	ldr	r2, [pc, #96]	; (8001e50 <MX_SPI4_Init+0x68>)
 8001df0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001df2:	4b16      	ldr	r3, [pc, #88]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001df4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001df8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001dfa:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e00:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001e14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e18:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e20:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e2c:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001e34:	220a      	movs	r2, #10
 8001e36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001e38:	4804      	ldr	r0, [pc, #16]	; (8001e4c <MX_SPI4_Init+0x64>)
 8001e3a:	f009 fc6d 	bl	800b718 <HAL_SPI_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001e44:	f000 fda6 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001e48:	bf00      	nop
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	200068ac 	.word	0x200068ac
 8001e50:	40013400 	.word	0x40013400

08001e54 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001e58:	4b17      	ldr	r3, [pc, #92]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001e5a:	4a18      	ldr	r2, [pc, #96]	; (8001ebc <MX_SPI5_Init+0x68>)
 8001e5c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001e5e:	4b16      	ldr	r3, [pc, #88]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001e60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e64:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001e66:	4b14      	ldr	r3, [pc, #80]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e6c:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e72:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e78:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001e80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e84:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e86:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e8c:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e92:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e98:	4b07      	ldr	r3, [pc, #28]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001ea0:	220a      	movs	r2, #10
 8001ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001ea4:	4804      	ldr	r0, [pc, #16]	; (8001eb8 <MX_SPI5_Init+0x64>)
 8001ea6:	f009 fc37 	bl	800b718 <HAL_SPI_Init>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001eb0:	f000 fd70 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001eb4:	bf00      	nop
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	20005fa4 	.word	0x20005fa4
 8001ebc:	40015000 	.word	0x40015000

08001ec0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08a      	sub	sp, #40	; 0x28
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec6:	f107 0320 	add.w	r3, r7, #32
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ed0:	1d3b      	adds	r3, r7, #4
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	605a      	str	r2, [r3, #4]
 8001ed8:	609a      	str	r2, [r3, #8]
 8001eda:	60da      	str	r2, [r3, #12]
 8001edc:	611a      	str	r2, [r3, #16]
 8001ede:	615a      	str	r2, [r3, #20]
 8001ee0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ee2:	4b22      	ldr	r3, [pc, #136]	; (8001f6c <MX_TIM2_Init+0xac>)
 8001ee4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ee8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001eea:	4b20      	ldr	r3, [pc, #128]	; (8001f6c <MX_TIM2_Init+0xac>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef0:	4b1e      	ldr	r3, [pc, #120]	; (8001f6c <MX_TIM2_Init+0xac>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001ef6:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <MX_TIM2_Init+0xac>)
 8001ef8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001efc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001efe:	4b1b      	ldr	r3, [pc, #108]	; (8001f6c <MX_TIM2_Init+0xac>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f04:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <MX_TIM2_Init+0xac>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f0a:	4818      	ldr	r0, [pc, #96]	; (8001f6c <MX_TIM2_Init+0xac>)
 8001f0c:	f00a fa76 	bl	800c3fc <HAL_TIM_PWM_Init>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001f16:	f000 fd3d 	bl	8002994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f22:	f107 0320 	add.w	r3, r7, #32
 8001f26:	4619      	mov	r1, r3
 8001f28:	4810      	ldr	r0, [pc, #64]	; (8001f6c <MX_TIM2_Init+0xac>)
 8001f2a:	f00a fef9 	bl	800cd20 <HAL_TIMEx_MasterConfigSynchronization>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001f34:	f000 fd2e 	bl	8002994 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f38:	2360      	movs	r3, #96	; 0x60
 8001f3a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f40:	2300      	movs	r3, #0
 8001f42:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f48:	1d3b      	adds	r3, r7, #4
 8001f4a:	2208      	movs	r2, #8
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4807      	ldr	r0, [pc, #28]	; (8001f6c <MX_TIM2_Init+0xac>)
 8001f50:	f00a fbac 	bl	800c6ac <HAL_TIM_PWM_ConfigChannel>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001f5a:	f000 fd1b 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f5e:	4803      	ldr	r0, [pc, #12]	; (8001f6c <MX_TIM2_Init+0xac>)
 8001f60:	f000 ff6e 	bl	8002e40 <HAL_TIM_MspPostInit>

}
 8001f64:	bf00      	nop
 8001f66:	3728      	adds	r7, #40	; 0x28
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	200069ec 	.word	0x200069ec

08001f70 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <MX_UART8_Init+0x4c>)
 8001f76:	4a12      	ldr	r2, [pc, #72]	; (8001fc0 <MX_UART8_Init+0x50>)
 8001f78:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <MX_UART8_Init+0x4c>)
 8001f7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f80:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001f82:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <MX_UART8_Init+0x4c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <MX_UART8_Init+0x4c>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001f8e:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <MX_UART8_Init+0x4c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001f94:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <MX_UART8_Init+0x4c>)
 8001f96:	220c      	movs	r2, #12
 8001f98:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f9a:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <MX_UART8_Init+0x4c>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <MX_UART8_Init+0x4c>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001fa6:	4805      	ldr	r0, [pc, #20]	; (8001fbc <MX_UART8_Init+0x4c>)
 8001fa8:	f00a ff4a 	bl	800ce40 <HAL_UART_Init>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8001fb2:	f000 fcef 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20005eac 	.word	0x20005eac
 8001fc0:	40007c00 	.word	0x40007c00

08001fc4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fc8:	4b11      	ldr	r3, [pc, #68]	; (8002010 <MX_USART3_UART_Init+0x4c>)
 8001fca:	4a12      	ldr	r2, [pc, #72]	; (8002014 <MX_USART3_UART_Init+0x50>)
 8001fcc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001fce:	4b10      	ldr	r3, [pc, #64]	; (8002010 <MX_USART3_UART_Init+0x4c>)
 8001fd0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001fd4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fd6:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <MX_USART3_UART_Init+0x4c>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <MX_USART3_UART_Init+0x4c>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <MX_USART3_UART_Init+0x4c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fe8:	4b09      	ldr	r3, [pc, #36]	; (8002010 <MX_USART3_UART_Init+0x4c>)
 8001fea:	220c      	movs	r2, #12
 8001fec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fee:	4b08      	ldr	r3, [pc, #32]	; (8002010 <MX_USART3_UART_Init+0x4c>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <MX_USART3_UART_Init+0x4c>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ffa:	4805      	ldr	r0, [pc, #20]	; (8002010 <MX_USART3_UART_Init+0x4c>)
 8001ffc:	f00a ff20 	bl	800ce40 <HAL_UART_Init>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002006:	f000 fcc5 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20005ffc 	.word	0x20005ffc
 8002014:	40004800 	.word	0x40004800

08002018 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800201c:	4b11      	ldr	r3, [pc, #68]	; (8002064 <MX_USART6_UART_Init+0x4c>)
 800201e:	4a12      	ldr	r2, [pc, #72]	; (8002068 <MX_USART6_UART_Init+0x50>)
 8002020:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002022:	4b10      	ldr	r3, [pc, #64]	; (8002064 <MX_USART6_UART_Init+0x4c>)
 8002024:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002028:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800202a:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <MX_USART6_UART_Init+0x4c>)
 800202c:	2200      	movs	r2, #0
 800202e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002030:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <MX_USART6_UART_Init+0x4c>)
 8002032:	2200      	movs	r2, #0
 8002034:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002036:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <MX_USART6_UART_Init+0x4c>)
 8002038:	2200      	movs	r2, #0
 800203a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800203c:	4b09      	ldr	r3, [pc, #36]	; (8002064 <MX_USART6_UART_Init+0x4c>)
 800203e:	220c      	movs	r2, #12
 8002040:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002042:	4b08      	ldr	r3, [pc, #32]	; (8002064 <MX_USART6_UART_Init+0x4c>)
 8002044:	2200      	movs	r2, #0
 8002046:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <MX_USART6_UART_Init+0x4c>)
 800204a:	2200      	movs	r2, #0
 800204c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800204e:	4805      	ldr	r0, [pc, #20]	; (8002064 <MX_USART6_UART_Init+0x4c>)
 8002050:	f00a fef6 	bl	800ce40 <HAL_UART_Init>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800205a:	f000 fc9b 	bl	8002994 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	200069a0 	.word	0x200069a0
 8002068:	40011400 	.word	0x40011400

0800206c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08e      	sub	sp, #56	; 0x38
 8002070:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	605a      	str	r2, [r3, #4]
 800207c:	609a      	str	r2, [r3, #8]
 800207e:	60da      	str	r2, [r3, #12]
 8002080:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	623b      	str	r3, [r7, #32]
 8002086:	4bb5      	ldr	r3, [pc, #724]	; (800235c <MX_GPIO_Init+0x2f0>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	4ab4      	ldr	r2, [pc, #720]	; (800235c <MX_GPIO_Init+0x2f0>)
 800208c:	f043 0310 	orr.w	r3, r3, #16
 8002090:	6313      	str	r3, [r2, #48]	; 0x30
 8002092:	4bb2      	ldr	r3, [pc, #712]	; (800235c <MX_GPIO_Init+0x2f0>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	f003 0310 	and.w	r3, r3, #16
 800209a:	623b      	str	r3, [r7, #32]
 800209c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	4bae      	ldr	r3, [pc, #696]	; (800235c <MX_GPIO_Init+0x2f0>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	4aad      	ldr	r2, [pc, #692]	; (800235c <MX_GPIO_Init+0x2f0>)
 80020a8:	f043 0304 	orr.w	r3, r3, #4
 80020ac:	6313      	str	r3, [r2, #48]	; 0x30
 80020ae:	4bab      	ldr	r3, [pc, #684]	; (800235c <MX_GPIO_Init+0x2f0>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	f003 0304 	and.w	r3, r3, #4
 80020b6:	61fb      	str	r3, [r7, #28]
 80020b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	61bb      	str	r3, [r7, #24]
 80020be:	4ba7      	ldr	r3, [pc, #668]	; (800235c <MX_GPIO_Init+0x2f0>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	4aa6      	ldr	r2, [pc, #664]	; (800235c <MX_GPIO_Init+0x2f0>)
 80020c4:	f043 0320 	orr.w	r3, r3, #32
 80020c8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ca:	4ba4      	ldr	r3, [pc, #656]	; (800235c <MX_GPIO_Init+0x2f0>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	f003 0320 	and.w	r3, r3, #32
 80020d2:	61bb      	str	r3, [r7, #24]
 80020d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	4ba0      	ldr	r3, [pc, #640]	; (800235c <MX_GPIO_Init+0x2f0>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	4a9f      	ldr	r2, [pc, #636]	; (800235c <MX_GPIO_Init+0x2f0>)
 80020e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020e4:	6313      	str	r3, [r2, #48]	; 0x30
 80020e6:	4b9d      	ldr	r3, [pc, #628]	; (800235c <MX_GPIO_Init+0x2f0>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	4b99      	ldr	r3, [pc, #612]	; (800235c <MX_GPIO_Init+0x2f0>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	4a98      	ldr	r2, [pc, #608]	; (800235c <MX_GPIO_Init+0x2f0>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6313      	str	r3, [r2, #48]	; 0x30
 8002102:	4b96      	ldr	r3, [pc, #600]	; (800235c <MX_GPIO_Init+0x2f0>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	4b92      	ldr	r3, [pc, #584]	; (800235c <MX_GPIO_Init+0x2f0>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	4a91      	ldr	r2, [pc, #580]	; (800235c <MX_GPIO_Init+0x2f0>)
 8002118:	f043 0302 	orr.w	r3, r3, #2
 800211c:	6313      	str	r3, [r2, #48]	; 0x30
 800211e:	4b8f      	ldr	r3, [pc, #572]	; (800235c <MX_GPIO_Init+0x2f0>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	60bb      	str	r3, [r7, #8]
 800212e:	4b8b      	ldr	r3, [pc, #556]	; (800235c <MX_GPIO_Init+0x2f0>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	4a8a      	ldr	r2, [pc, #552]	; (800235c <MX_GPIO_Init+0x2f0>)
 8002134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002138:	6313      	str	r3, [r2, #48]	; 0x30
 800213a:	4b88      	ldr	r3, [pc, #544]	; (800235c <MX_GPIO_Init+0x2f0>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	4b84      	ldr	r3, [pc, #528]	; (800235c <MX_GPIO_Init+0x2f0>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	4a83      	ldr	r2, [pc, #524]	; (800235c <MX_GPIO_Init+0x2f0>)
 8002150:	f043 0308 	orr.w	r3, r3, #8
 8002154:	6313      	str	r3, [r2, #48]	; 0x30
 8002156:	4b81      	ldr	r3, [pc, #516]	; (800235c <MX_GPIO_Init+0x2f0>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	607b      	str	r3, [r7, #4]
 8002160:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 8002162:	2200      	movs	r2, #0
 8002164:	f248 4184 	movw	r1, #33924	; 0x8484
 8002168:	487d      	ldr	r0, [pc, #500]	; (8002360 <MX_GPIO_Init+0x2f4>)
 800216a:	f005 fc3d 	bl	80079e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 800216e:	2200      	movs	r2, #0
 8002170:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8002174:	487b      	ldr	r0, [pc, #492]	; (8002364 <MX_GPIO_Init+0x2f8>)
 8002176:	f005 fc37 	bl	80079e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 800217a:	2200      	movs	r2, #0
 800217c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8002180:	4879      	ldr	r0, [pc, #484]	; (8002368 <MX_GPIO_Init+0x2fc>)
 8002182:	f005 fc31 	bl	80079e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 8002186:	2200      	movs	r2, #0
 8002188:	2108      	movs	r1, #8
 800218a:	4878      	ldr	r0, [pc, #480]	; (800236c <MX_GPIO_Init+0x300>)
 800218c:	f005 fc2c 	bl	80079e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 8002190:	2200      	movs	r2, #0
 8002192:	f645 2126 	movw	r1, #23078	; 0x5a26
 8002196:	4876      	ldr	r0, [pc, #472]	; (8002370 <MX_GPIO_Init+0x304>)
 8002198:	f005 fc26 	bl	80079e8 <HAL_GPIO_WritePin>
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin, GPIO_PIN_RESET);
 800219c:	2200      	movs	r2, #0
 800219e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021a2:	4874      	ldr	r0, [pc, #464]	; (8002374 <MX_GPIO_Init+0x308>)
 80021a4:	f005 fc20 	bl	80079e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 80021a8:	2200      	movs	r2, #0
 80021aa:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 80021ae:	4872      	ldr	r0, [pc, #456]	; (8002378 <MX_GPIO_Init+0x30c>)
 80021b0:	f005 fc1a 	bl	80079e8 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_12V_Buck_Pin OUT_Prop_ActuatedVent_Gate_Pin SPI4_CS_Thermocouple_Pin Iridium_RST_Pin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 80021b4:	f248 4384 	movw	r3, #33924	; 0x8484
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ba:	2301      	movs	r3, #1
 80021bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c2:	2300      	movs	r3, #0
 80021c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ca:	4619      	mov	r1, r3
 80021cc:	4864      	ldr	r0, [pc, #400]	; (8002360 <MX_GPIO_Init+0x2f4>)
 80021ce:	f005 fa47 	bl	8007660 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin OUT_PyroValve_Gate_2_Pin OUT_PyroValve_Gate_1_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 80021d2:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d8:	2301      	movs	r3, #1
 80021da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e0:	2300      	movs	r3, #0
 80021e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e8:	4619      	mov	r1, r3
 80021ea:	485e      	ldr	r0, [pc, #376]	; (8002364 <MX_GPIO_Init+0x2f8>)
 80021ec:	f005 fa38 	bl	8007660 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Button_Pin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 80021f0:	2301      	movs	r3, #1
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021f4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80021f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 80021fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002202:	4619      	mov	r1, r3
 8002204:	4858      	ldr	r0, [pc, #352]	; (8002368 <MX_GPIO_Init+0x2fc>)
 8002206:	f005 fa2b 	bl	8007660 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_LED1_Pin OUT_LED2_Pin OUT_LED3_Pin SX_AMPLIFIER_Pin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 800220a:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800220e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002210:	2301      	movs	r3, #1
 8002212:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002218:	2300      	movs	r3, #0
 800221a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800221c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002220:	4619      	mov	r1, r3
 8002222:	4851      	ldr	r0, [pc, #324]	; (8002368 <MX_GPIO_Init+0x2fc>)
 8002224:	f005 fa1c 	bl	8007660 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_LEDF_Pin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 8002228:	2308      	movs	r3, #8
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800222c:	2301      	movs	r3, #1
 800222e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002234:	2300      	movs	r3, #0
 8002236:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 8002238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800223c:	4619      	mov	r1, r3
 800223e:	484b      	ldr	r0, [pc, #300]	; (800236c <MX_GPIO_Init+0x300>)
 8002240:	f005 fa0e 	bl	8007660 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_Prop_PyroTurboValve_LimitSwitch_Pin IN_SD_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 8002244:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800224a:	2300      	movs	r3, #0
 800224c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002256:	4619      	mov	r1, r3
 8002258:	4843      	ldr	r0, [pc, #268]	; (8002368 <MX_GPIO_Init+0x2fc>)
 800225a:	f005 fa01 	bl	8007660 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Prop_ActuatedVent_Feedback_Pin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 800225e:	2302      	movs	r3, #2
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002262:	2300      	movs	r3, #0
 8002264:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 800226a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800226e:	4619      	mov	r1, r3
 8002270:	4840      	ldr	r0, [pc, #256]	; (8002374 <MX_GPIO_Init+0x308>)
 8002272:	f005 f9f5 	bl	8007660 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_PyroValve_Cont_2_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 8002276:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800227c:	2300      	movs	r3, #0
 800227e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 8002284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002288:	4619      	mov	r1, r3
 800228a:	4836      	ldr	r0, [pc, #216]	; (8002364 <MX_GPIO_Init+0x2f8>)
 800228c:	f005 f9e8 	bl	8007660 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_PyroValve_Cont_1_Pin SX_BUSY_Pin SX_DIO_Pin IN_EJ_Main_Cont_Pin
                           IN_EJ_Drogue_Cont_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|SX_BUSY_Pin|SX_DIO_Pin|IN_EJ_Main_Cont_Pin
 8002290:	f242 4319 	movw	r3, #9241	; 0x2419
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
                          |IN_EJ_Drogue_Cont_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002296:	2300      	movs	r3, #0
 8002298:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800229e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a2:	4619      	mov	r1, r3
 80022a4:	4832      	ldr	r0, [pc, #200]	; (8002370 <MX_GPIO_Init+0x304>)
 80022a6:	f005 f9db 	bl	8007660 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_PyroValve_Arming_Pin SX_RST_Pin SX_RF_SW_Pin OUT_VR_PWR_Pin
                           OUT_EJ_Main_Gate_Pin OUT_EJ_Drogue_Gate_Pin OUT_EJ_Arming_Pin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 80022aa:	f645 2326 	movw	r3, #23078	; 0x5a26
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b0:	2301      	movs	r3, #1
 80022b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b8:	2300      	movs	r3, #0
 80022ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c0:	4619      	mov	r1, r3
 80022c2:	482b      	ldr	r0, [pc, #172]	; (8002370 <MX_GPIO_Init+0x304>)
 80022c4:	f005 f9cc 	bl	8007660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAYLOAD_I2C_EN_Pin IN_XTend_Continuity_Pin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 80022c8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ce:	2300      	movs	r3, #0
 80022d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022da:	4619      	mov	r1, r3
 80022dc:	4820      	ldr	r0, [pc, #128]	; (8002360 <MX_GPIO_Init+0x2f4>)
 80022de:	f005 f9bf 	bl	8007660 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SX_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin;
 80022e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e8:	2301      	movs	r3, #1
 80022ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f0:	2300      	movs	r3, #0
 80022f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_SX_CS_GPIO_Port, &GPIO_InitStruct);
 80022f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f8:	4619      	mov	r1, r3
 80022fa:	481e      	ldr	r0, [pc, #120]	; (8002374 <MX_GPIO_Init+0x308>)
 80022fc:	f005 f9b0 	bl	8007660 <HAL_GPIO_Init>

  /*Configure GPIO pins : XTend_CTS_Pin XTend_RTS_Pin XTend_SLEEP_Pin XTend_RX_LED_Pin
                           XTend_TX_PWR_Pin OUT_FLASH_IO3_Pin OUT_FLASH_WP_Pin OUT_FLASH_CS_Pin
                           OUT_VR_REC_Pin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8002300:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002306:	2301      	movs	r3, #1
 8002308:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230a:	2300      	movs	r3, #0
 800230c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230e:	2300      	movs	r3, #0
 8002310:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002316:	4619      	mov	r1, r3
 8002318:	4817      	ldr	r0, [pc, #92]	; (8002378 <MX_GPIO_Init+0x30c>)
 800231a:	f005 f9a1 	bl	8007660 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BANDPASS_FILTER_Pin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 800231e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002324:	2300      	movs	r3, #0
 8002326:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 800232c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002330:	4619      	mov	r1, r3
 8002332:	4811      	ldr	r0, [pc, #68]	; (8002378 <MX_GPIO_Init+0x30c>)
 8002334:	f005 f994 	bl	8007660 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_LPS22HH_DRDY_Pin EXTI_ISM330DCL_INT2_Pin EXTI_LSM6DSR_INT1_Pin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 8002338:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800233e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002342:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	2300      	movs	r3, #0
 8002346:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800234c:	4619      	mov	r1, r3
 800234e:	4808      	ldr	r0, [pc, #32]	; (8002370 <MX_GPIO_Init+0x304>)
 8002350:	f005 f986 	bl	8007660 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002354:	2200      	movs	r2, #0
 8002356:	2105      	movs	r1, #5
 8002358:	2006      	movs	r0, #6
 800235a:	e00f      	b.n	800237c <MX_GPIO_Init+0x310>
 800235c:	40023800 	.word	0x40023800
 8002360:	40021000 	.word	0x40021000
 8002364:	40021400 	.word	0x40021400
 8002368:	40020800 	.word	0x40020800
 800236c:	40020000 	.word	0x40020000
 8002370:	40021800 	.word	0x40021800
 8002374:	40020400 	.word	0x40020400
 8002378:	40020c00 	.word	0x40020c00
 800237c:	f005 f938 	bl	80075f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002380:	2006      	movs	r0, #6
 8002382:	f005 f951 	bl	8007628 <HAL_NVIC_EnableIRQ>

}
 8002386:	bf00      	nop
 8002388:	3738      	adds	r7, #56	; 0x38
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop

08002390 <XTend_Transmit>:

/**
 * @brief   Function to transmit message to XTend
 * @param  Msg : char array (range 1-800)
 */
static void XTend_Transmit(char* Msg){
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&XTEND_UART, Msg, strlen(Msg), HAL_Delay);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7fd ff29 	bl	80001f0 <strlen>
 800239e:	4603      	mov	r3, r0
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <XTend_Transmit+0x24>)
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	4804      	ldr	r0, [pc, #16]	; (80023b8 <XTend_Transmit+0x28>)
 80023a8:	f00a fd97 	bl	800ceda <HAL_UART_Transmit>
}
 80023ac:	bf00      	nop
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	08006f0d 	.word	0x08006f0d
 80023b8:	20005ffc 	.word	0x20005ffc

080023bc <StartMemory0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMemory0 */
void StartMemory0(void *argument)
{
 80023bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023c0:	b088      	sub	sp, #32
 80023c2:	af06      	add	r7, sp, #24
 80023c4:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80023c6:	f015 fea1 	bl	801810c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */

	//osThreadExit();

	//Add thread id to the list
	threadID[0]=osThreadGetId();
 80023ca:	f012 fc0b 	bl	8014be4 <osThreadGetId>
 80023ce:	4603      	mov	r3, r0
 80023d0:	4a27      	ldr	r2, [pc, #156]	; (8002470 <StartMemory0+0xb4>)
 80023d2:	6013      	str	r3, [r2, #0]
	  /* Infinite loop */
	  for(;;)
	  {

		  //Write data to sd and flash
		  sd_open_file(&filename);
 80023d4:	4827      	ldr	r0, [pc, #156]	; (8002474 <StartMemory0+0xb8>)
 80023d6:	f004 fbaf 	bl	8006b38 <sd_open_file>
		  sprintf((char*)writeBuf, "Data: %f, %f, %f, %f\r\n", PRESSURE, MIN, SEC, SUBSEC);
 80023da:	4b27      	ldr	r3, [pc, #156]	; (8002478 <StartMemory0+0xbc>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe f8c2 	bl	8000568 <__aeabi_f2d>
 80023e4:	4682      	mov	sl, r0
 80023e6:	468b      	mov	fp, r1
 80023e8:	4b24      	ldr	r3, [pc, #144]	; (800247c <StartMemory0+0xc0>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fe f8bb 	bl	8000568 <__aeabi_f2d>
 80023f2:	4604      	mov	r4, r0
 80023f4:	460d      	mov	r5, r1
 80023f6:	4b22      	ldr	r3, [pc, #136]	; (8002480 <StartMemory0+0xc4>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe f8b4 	bl	8000568 <__aeabi_f2d>
 8002400:	4680      	mov	r8, r0
 8002402:	4689      	mov	r9, r1
 8002404:	4b1f      	ldr	r3, [pc, #124]	; (8002484 <StartMemory0+0xc8>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe f8ad 	bl	8000568 <__aeabi_f2d>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002416:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800241a:	e9cd 4500 	strd	r4, r5, [sp]
 800241e:	4652      	mov	r2, sl
 8002420:	465b      	mov	r3, fp
 8002422:	4919      	ldr	r1, [pc, #100]	; (8002488 <StartMemory0+0xcc>)
 8002424:	4819      	ldr	r0, [pc, #100]	; (800248c <StartMemory0+0xd0>)
 8002426:	f018 fd1f 	bl	801ae68 <siprintf>
		  sd_write(&fil, writeBuf);
 800242a:	4918      	ldr	r1, [pc, #96]	; (800248c <StartMemory0+0xd0>)
 800242c:	4818      	ldr	r0, [pc, #96]	; (8002490 <StartMemory0+0xd4>)
 800242e:	f004 fb9b 	bl	8006b68 <sd_write>
		  f_close(&fil);
 8002432:	4817      	ldr	r0, [pc, #92]	; (8002490 <StartMemory0+0xd4>)
 8002434:	f011 feaa 	bl	801418c <f_close>

		  //Check if it's sleep time
		//if (flagA==1 && wu_flag !=1){
		  if (flagA==1){
 8002438:	4b16      	ldr	r3, [pc, #88]	; (8002494 <StartMemory0+0xd8>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d111      	bne.n	8002464 <StartMemory0+0xa8>
			//Update iwdg_flag
			iwdg_flag = 1;
 8002440:	4b15      	ldr	r3, [pc, #84]	; (8002498 <StartMemory0+0xdc>)
 8002442:	2201      	movs	r2, #1
 8002444:	701a      	strb	r2, [r3, #0]
			flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 8002446:	4b14      	ldr	r3, [pc, #80]	; (8002498 <StartMemory0+0xdc>)
 8002448:	781a      	ldrb	r2, [r3, #0]
 800244a:	4b14      	ldr	r3, [pc, #80]	; (800249c <StartMemory0+0xe0>)
 800244c:	709a      	strb	r2, [r3, #2]
			W25qxx_EraseSector(1);
 800244e:	2001      	movs	r0, #1
 8002450:	f001 ff0e 	bl	8004270 <W25qxx_EraseSector>
			W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8002454:	2303      	movs	r3, #3
 8002456:	2200      	movs	r2, #0
 8002458:	2101      	movs	r1, #1
 800245a:	4810      	ldr	r0, [pc, #64]	; (800249c <StartMemory0+0xe0>)
 800245c:	f002 f852 	bl	8004504 <W25qxx_WriteSector>

			//Reset to deactivate IWDG
			NVIC_SystemReset();
 8002460:	f7ff f8d4 	bl	800160c <__NVIC_SystemReset>
		  }

		  //osDelay(1000/DATA_FREQ);
		  osDelay(1000/DATA_FREQ);
 8002464:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002468:	f012 fbcd 	bl	8014c06 <osDelay>
	  {
 800246c:	e7b2      	b.n	80023d4 <StartMemory0+0x18>
 800246e:	bf00      	nop
 8002470:	20006044 	.word	0x20006044
 8002474:	20006358 	.word	0x20006358
 8002478:	20006348 	.word	0x20006348
 800247c:	20006c90 	.word	0x20006c90
 8002480:	20006350 	.word	0x20006350
 8002484:	20006c8c 	.word	0x20006c8c
 8002488:	0801efac 	.word	0x0801efac
 800248c:	2000636c 	.word	0x2000636c
 8002490:	20006a5c 	.word	0x20006a5c
 8002494:	20000648 	.word	0x20000648
 8002498:	20000413 	.word	0x20000413
 800249c:	20006040 	.word	0x20006040

080024a0 <StartEjection1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEjection1 */
void StartEjection1(void *argument)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b0c2      	sub	sp, #264	; 0x108
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	1d3b      	adds	r3, r7, #4
 80024a8:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartEjection1 */

	osThreadExit();
 80024aa:	f012 fba6 	bl	8014bfa <osThreadExit>
	...

080024b0 <StartTelemetry2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry2 */
void StartTelemetry2(void *argument)
{
 80024b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024b4:	b0ae      	sub	sp, #184	; 0xb8
 80024b6:	af1a      	add	r7, sp, #104	; 0x68
 80024b8:	64f8      	str	r0, [r7, #76]	; 0x4c
  /* USER CODE BEGIN StartTelemetry2 */

	//Add thread id to the list
	threadID[2]=osThreadGetId();
 80024ba:	f012 fb93 	bl	8014be4 <osThreadGetId>
 80024be:	4603      	mov	r3, r0
 80024c0:	4aa1      	ldr	r2, [pc, #644]	; (8002748 <StartTelemetry2+0x298>)
 80024c2:	6093      	str	r3, [r2, #8]

	osDelay(1000);
 80024c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024c8:	f012 fb9d 	bl	8014c06 <osDelay>
  /* Infinite loop */
  for(;;)
  {
	  //Poll sensors data in other thread

	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 80024cc:	2201      	movs	r2, #1
 80024ce:	2108      	movs	r1, #8
 80024d0:	489e      	ldr	r0, [pc, #632]	; (800274c <StartTelemetry2+0x29c>)
 80024d2:	f005 fa89 	bl	80079e8 <HAL_GPIO_WritePin>

	  //Updating data variables

	  //Need to verify these six to make sure they are in the right order

  	  ACCx = acceleration_mg[0];
 80024d6:	4b9e      	ldr	r3, [pc, #632]	; (8002750 <StartTelemetry2+0x2a0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a9e      	ldr	r2, [pc, #632]	; (8002754 <StartTelemetry2+0x2a4>)
 80024dc:	6013      	str	r3, [r2, #0]
  	  ACCy = acceleration_mg[1];
 80024de:	4b9c      	ldr	r3, [pc, #624]	; (8002750 <StartTelemetry2+0x2a0>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	4a9d      	ldr	r2, [pc, #628]	; (8002758 <StartTelemetry2+0x2a8>)
 80024e4:	6013      	str	r3, [r2, #0]
  	  ACCz = acceleration_mg[2];
 80024e6:	4b9a      	ldr	r3, [pc, #616]	; (8002750 <StartTelemetry2+0x2a0>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	4a9c      	ldr	r2, [pc, #624]	; (800275c <StartTelemetry2+0x2ac>)
 80024ec:	6013      	str	r3, [r2, #0]
  	  GYROx = angular_rate_mdps[0];
 80024ee:	4b9c      	ldr	r3, [pc, #624]	; (8002760 <StartTelemetry2+0x2b0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a9c      	ldr	r2, [pc, #624]	; (8002764 <StartTelemetry2+0x2b4>)
 80024f4:	6013      	str	r3, [r2, #0]
  	  GYROy = angular_rate_mdps[1];
 80024f6:	4b9a      	ldr	r3, [pc, #616]	; (8002760 <StartTelemetry2+0x2b0>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	4a9b      	ldr	r2, [pc, #620]	; (8002768 <StartTelemetry2+0x2b8>)
 80024fc:	6013      	str	r3, [r2, #0]
  	  GYROz = angular_rate_mdps[2];
 80024fe:	4b98      	ldr	r3, [pc, #608]	; (8002760 <StartTelemetry2+0x2b0>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	4a9a      	ldr	r2, [pc, #616]	; (800276c <StartTelemetry2+0x2bc>)
 8002504:	6013      	str	r3, [r2, #0]
  	  PRESSURE = pressure_hPa;
 8002506:	4b9a      	ldr	r3, [pc, #616]	; (8002770 <StartTelemetry2+0x2c0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a9a      	ldr	r2, [pc, #616]	; (8002774 <StartTelemetry2+0x2c4>)
 800250c:	6013      	str	r3, [r2, #0]

	  //From the GPS time value
	  MIN = ((uint8_t) time % 3600) / 60.0;
 800250e:	4b9a      	ldr	r3, [pc, #616]	; (8002778 <StartTelemetry2+0x2c8>)
 8002510:	edd3 7a00 	vldr	s15, [r3]
 8002514:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002518:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 800251c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002520:	b2db      	uxtb	r3, r3
 8002522:	4a96      	ldr	r2, [pc, #600]	; (800277c <StartTelemetry2+0x2cc>)
 8002524:	fb82 1203 	smull	r1, r2, r2, r3
 8002528:	441a      	add	r2, r3
 800252a:	12d1      	asrs	r1, r2, #11
 800252c:	17da      	asrs	r2, r3, #31
 800252e:	1a8a      	subs	r2, r1, r2
 8002530:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002534:	fb01 f202 	mul.w	r2, r1, r2
 8002538:	1a9a      	subs	r2, r3, r2
 800253a:	4610      	mov	r0, r2
 800253c:	f7fe f802 	bl	8000544 <__aeabi_i2d>
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	4b8e      	ldr	r3, [pc, #568]	; (8002780 <StartTelemetry2+0x2d0>)
 8002546:	f7fe f991 	bl	800086c <__aeabi_ddiv>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4610      	mov	r0, r2
 8002550:	4619      	mov	r1, r3
 8002552:	f7fe fb59 	bl	8000c08 <__aeabi_d2f>
 8002556:	4603      	mov	r3, r0
 8002558:	4a8a      	ldr	r2, [pc, #552]	; (8002784 <StartTelemetry2+0x2d4>)
 800255a:	6013      	str	r3, [r2, #0]
	  sprintf(&MIN, "%.0f",MIN);
 800255c:	4b89      	ldr	r3, [pc, #548]	; (8002784 <StartTelemetry2+0x2d4>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f7fe f801 	bl	8000568 <__aeabi_f2d>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	4987      	ldr	r1, [pc, #540]	; (8002788 <StartTelemetry2+0x2d8>)
 800256c:	4885      	ldr	r0, [pc, #532]	; (8002784 <StartTelemetry2+0x2d4>)
 800256e:	f018 fc7b 	bl	801ae68 <siprintf>
	  SEC = (uint8_t) time % 60;
 8002572:	4b81      	ldr	r3, [pc, #516]	; (8002778 <StartTelemetry2+0x2c8>)
 8002574:	edd3 7a00 	vldr	s15, [r3]
 8002578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800257c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 8002580:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002584:	b2da      	uxtb	r2, r3
 8002586:	4b81      	ldr	r3, [pc, #516]	; (800278c <StartTelemetry2+0x2dc>)
 8002588:	fba3 1302 	umull	r1, r3, r3, r2
 800258c:	0959      	lsrs	r1, r3, #5
 800258e:	460b      	mov	r3, r1
 8002590:	011b      	lsls	r3, r3, #4
 8002592:	1a5b      	subs	r3, r3, r1
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	b2db      	uxtb	r3, r3
 800259a:	ee07 3a90 	vmov	s15, r3
 800259e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025a2:	4b7b      	ldr	r3, [pc, #492]	; (8002790 <StartTelemetry2+0x2e0>)
 80025a4:	edc3 7a00 	vstr	s15, [r3]
	  sprintf(&SEC,"%.0f",SEC);
 80025a8:	4b79      	ldr	r3, [pc, #484]	; (8002790 <StartTelemetry2+0x2e0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7fd ffdb 	bl	8000568 <__aeabi_f2d>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	4974      	ldr	r1, [pc, #464]	; (8002788 <StartTelemetry2+0x2d8>)
 80025b8:	4875      	ldr	r0, [pc, #468]	; (8002790 <StartTelemetry2+0x2e0>)
 80025ba:	f018 fc55 	bl	801ae68 <siprintf>
	  SUBSEC = time / 3600.0;
 80025be:	4b6e      	ldr	r3, [pc, #440]	; (8002778 <StartTelemetry2+0x2c8>)
 80025c0:	ed93 7a00 	vldr	s14, [r3]
 80025c4:	eddf 6a73 	vldr	s13, [pc, #460]	; 8002794 <StartTelemetry2+0x2e4>
 80025c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025cc:	4b72      	ldr	r3, [pc, #456]	; (8002798 <StartTelemetry2+0x2e8>)
 80025ce:	edc3 7a00 	vstr	s15, [r3]
	  sprintf(&SUBSEC,"%.0f",SUBSEC);
 80025d2:	4b71      	ldr	r3, [pc, #452]	; (8002798 <StartTelemetry2+0x2e8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fd ffc6 	bl	8000568 <__aeabi_f2d>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4969      	ldr	r1, [pc, #420]	; (8002788 <StartTelemetry2+0x2d8>)
 80025e2:	486d      	ldr	r0, [pc, #436]	; (8002798 <StartTelemetry2+0x2e8>)
 80025e4:	f018 fc40 	bl	801ae68 <siprintf>

  	  STATE = THERMO_TEMP; //TODO not the right value
 80025e8:	4b6c      	ldr	r3, [pc, #432]	; (800279c <StartTelemetry2+0x2ec>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a6c      	ldr	r2, [pc, #432]	; (80027a0 <StartTelemetry2+0x2f0>)
 80025ee:	6013      	str	r3, [r2, #0]
  	  CONT = MRT_getContinuity();
 80025f0:	f001 fb62 	bl	8003cb8 <MRT_getContinuity>
 80025f4:	4603      	mov	r3, r0
 80025f6:	461a      	mov	r2, r3
 80025f8:	4b6a      	ldr	r3, [pc, #424]	; (80027a4 <StartTelemetry2+0x2f4>)
 80025fa:	701a      	strb	r2, [r3, #0]
	  HOUR = t.tm_hour;
	  MIN = t.tm_min;
	  SEC = t.tm_sec;
	  */

  	  memset(xtend_tx_buffer, 0, XTEND_BUFFER_SIZE);
 80025fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002600:	2100      	movs	r1, #0
 8002602:	4869      	ldr	r0, [pc, #420]	; (80027a8 <StartTelemetry2+0x2f8>)
 8002604:	f017 fbb2 	bl	8019d6c <memset>
  	  sprintf(xtend_tx_buffer,"S,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.7f,%.7f,%.1f,%.1f,%.1f,%.2f,%i,E",
 8002608:	4b52      	ldr	r3, [pc, #328]	; (8002754 <StartTelemetry2+0x2a4>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f7fd ffab 	bl	8000568 <__aeabi_f2d>
 8002612:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 8002616:	4b50      	ldr	r3, [pc, #320]	; (8002758 <StartTelemetry2+0x2a8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7fd ffa4 	bl	8000568 <__aeabi_f2d>
 8002620:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8002624:	4b4d      	ldr	r3, [pc, #308]	; (800275c <StartTelemetry2+0x2ac>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f7fd ff9d 	bl	8000568 <__aeabi_f2d>
 800262e:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8002632:	4b4c      	ldr	r3, [pc, #304]	; (8002764 <StartTelemetry2+0x2b4>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f7fd ff96 	bl	8000568 <__aeabi_f2d>
 800263c:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8002640:	4b49      	ldr	r3, [pc, #292]	; (8002768 <StartTelemetry2+0x2b8>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f7fd ff8f 	bl	8000568 <__aeabi_f2d>
 800264a:	e9c7 0108 	strd	r0, r1, [r7, #32]
 800264e:	4b47      	ldr	r3, [pc, #284]	; (800276c <StartTelemetry2+0x2bc>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f7fd ff88 	bl	8000568 <__aeabi_f2d>
 8002658:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800265c:	4b45      	ldr	r3, [pc, #276]	; (8002774 <StartTelemetry2+0x2c4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f7fd ff81 	bl	8000568 <__aeabi_f2d>
 8002666:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800266a:	4b50      	ldr	r3, [pc, #320]	; (80027ac <StartTelemetry2+0x2fc>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7fd ff7a 	bl	8000568 <__aeabi_f2d>
 8002674:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002678:	4b4d      	ldr	r3, [pc, #308]	; (80027b0 <StartTelemetry2+0x300>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f7fd ff73 	bl	8000568 <__aeabi_f2d>
 8002682:	e9c7 0100 	strd	r0, r1, [r7]
 8002686:	4b3f      	ldr	r3, [pc, #252]	; (8002784 <StartTelemetry2+0x2d4>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7fd ff6c 	bl	8000568 <__aeabi_f2d>
 8002690:	4682      	mov	sl, r0
 8002692:	468b      	mov	fp, r1
 8002694:	4b3e      	ldr	r3, [pc, #248]	; (8002790 <StartTelemetry2+0x2e0>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f7fd ff65 	bl	8000568 <__aeabi_f2d>
 800269e:	4680      	mov	r8, r0
 80026a0:	4689      	mov	r9, r1
 80026a2:	4b3d      	ldr	r3, [pc, #244]	; (8002798 <StartTelemetry2+0x2e8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fd ff5e 	bl	8000568 <__aeabi_f2d>
 80026ac:	4604      	mov	r4, r0
 80026ae:	460d      	mov	r5, r1
 80026b0:	4b3b      	ldr	r3, [pc, #236]	; (80027a0 <StartTelemetry2+0x2f0>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fd ff57 	bl	8000568 <__aeabi_f2d>
 80026ba:	4b3a      	ldr	r3, [pc, #232]	; (80027a4 <StartTelemetry2+0x2f4>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	9318      	str	r3, [sp, #96]	; 0x60
 80026c0:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 80026c4:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
 80026c8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80026cc:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
 80026d0:	ed97 7b00 	vldr	d7, [r7]
 80026d4:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80026d8:	ed97 7b02 	vldr	d7, [r7, #8]
 80026dc:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80026e0:	ed97 7b04 	vldr	d7, [r7, #16]
 80026e4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80026e8:	ed97 7b06 	vldr	d7, [r7, #24]
 80026ec:	ed8d 7b08 	vstr	d7, [sp, #32]
 80026f0:	ed97 7b08 	vldr	d7, [r7, #32]
 80026f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80026f8:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80026fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002700:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002704:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002708:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800270c:	ed8d 7b00 	vstr	d7, [sp]
 8002710:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002714:	4927      	ldr	r1, [pc, #156]	; (80027b4 <StartTelemetry2+0x304>)
 8002716:	4824      	ldr	r0, [pc, #144]	; (80027a8 <StartTelemetry2+0x2f8>)
 8002718:	f018 fba6 	bl	801ae68 <siprintf>
  			  	  	  	  	  	  ACCx,ACCy,ACCz,GYROx,GYROy,GYROz,PRESSURE,LATITUDE,LONGITUDE,MIN,SEC,SUBSEC,STATE,CONT);

	  //Xtend send
	  XTend_Transmit(xtend_tx_buffer);
 800271c:	4822      	ldr	r0, [pc, #136]	; (80027a8 <StartTelemetry2+0x2f8>)
 800271e:	f7ff fe37 	bl	8002390 <XTend_Transmit>

	  //SRadio send
	  TxProtocol(xtend_tx_buffer, strlen(xtend_tx_buffer));
 8002722:	4821      	ldr	r0, [pc, #132]	; (80027a8 <StartTelemetry2+0x2f8>)
 8002724:	f7fd fd64 	bl	80001f0 <strlen>
 8002728:	4603      	mov	r3, r0
 800272a:	b2db      	uxtb	r3, r3
 800272c:	4619      	mov	r1, r3
 800272e:	481e      	ldr	r0, [pc, #120]	; (80027a8 <StartTelemetry2+0x2f8>)
 8002730:	f00c fccc 	bl	800f0cc <TxProtocol>
	  //TODO Can get stuck for some time (SHOULD CHANGE TIMEOUT)
	  //MRT_Static_Iridium_getTime(); //TODO doesn't cost anything
	  //MRT_Static_Iridium_sendMessage(msg); TODO IT COSTS CREDITS WATCH OUT


	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 8002734:	2200      	movs	r2, #0
 8002736:	2108      	movs	r1, #8
 8002738:	4804      	ldr	r0, [pc, #16]	; (800274c <StartTelemetry2+0x29c>)
 800273a:	f005 f955 	bl	80079e8 <HAL_GPIO_WritePin>


      osDelay(1000/SEND_FREQ);
 800273e:	2001      	movs	r0, #1
 8002740:	f012 fa61 	bl	8014c06 <osDelay>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 8002744:	e6c2      	b.n	80024cc <StartTelemetry2+0x1c>
 8002746:	bf00      	nop
 8002748:	20006044 	.word	0x20006044
 800274c:	40020800 	.word	0x40020800
 8002750:	200003ec 	.word	0x200003ec
 8002754:	20006994 	.word	0x20006994
 8002758:	200069e4 	.word	0x200069e4
 800275c:	20006368 	.word	0x20006368
 8002760:	200003f8 	.word	0x200003f8
 8002764:	2000634c 	.word	0x2000634c
 8002768:	20006344 	.word	0x20006344
 800276c:	200067a4 	.word	0x200067a4
 8002770:	200003e4 	.word	0x200003e4
 8002774:	20006348 	.word	0x20006348
 8002778:	20006990 	.word	0x20006990
 800277c:	91a2b3c5 	.word	0x91a2b3c5
 8002780:	404e0000 	.word	0x404e0000
 8002784:	20006c90 	.word	0x20006c90
 8002788:	0801efc4 	.word	0x0801efc4
 800278c:	88888889 	.word	0x88888889
 8002790:	20006350 	.word	0x20006350
 8002794:	45610000 	.word	0x45610000
 8002798:	20006c8c 	.word	0x20006c8c
 800279c:	200069e8 	.word	0x200069e8
 80027a0:	200068a8 	.word	0x200068a8
 80027a4:	20006a58 	.word	0x20006a58
 80027a8:	200067a8 	.word	0x200067a8
 80027ac:	20006904 	.word	0x20006904
 80027b0:	2000679c 	.word	0x2000679c
 80027b4:	0801efcc 	.word	0x0801efcc

080027b8 <StartSensors3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensors3 */
void StartSensors3(void *argument)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensors3 */

	//osThreadExit();

	//Add thread id to the list
	threadID[3]=osThreadGetId();
 80027c0:	f012 fa10 	bl	8014be4 <osThreadGetId>
 80027c4:	4603      	mov	r3, r0
 80027c6:	4a1e      	ldr	r2, [pc, #120]	; (8002840 <StartSensors3+0x88>)
 80027c8:	60d3      	str	r3, [r2, #12]

  for(;;)
  {

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 80027ca:	2201      	movs	r2, #1
 80027cc:	2102      	movs	r1, #2
 80027ce:	481d      	ldr	r0, [pc, #116]	; (8002844 <StartSensors3+0x8c>)
 80027d0:	f005 f90a 	bl	80079e8 <HAL_GPIO_WritePin>


	  //GPS
	  GPS_Poll(&LATITUDE, &LONGITUDE, &time);
 80027d4:	4a1c      	ldr	r2, [pc, #112]	; (8002848 <StartSensors3+0x90>)
 80027d6:	491d      	ldr	r1, [pc, #116]	; (800284c <StartSensors3+0x94>)
 80027d8:	481d      	ldr	r0, [pc, #116]	; (8002850 <StartSensors3+0x98>)
 80027da:	f000 fdbd 	bl	8003358 <GPS_Poll>

  	  //LSM6DSR
  	  MRT_LSM6DSR_getAcceleration(lsm_ctx,acceleration_mg);
 80027de:	4a1d      	ldr	r2, [pc, #116]	; (8002854 <StartSensors3+0x9c>)
 80027e0:	4b1d      	ldr	r3, [pc, #116]	; (8002858 <StartSensors3+0xa0>)
 80027e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80027e4:	f7fe fd14 	bl	8001210 <MRT_LSM6DSR_getAcceleration>
  	  MRT_LSM6DSR_getAngularRate(lsm_ctx,angular_rate_mdps);
 80027e8:	4a1a      	ldr	r2, [pc, #104]	; (8002854 <StartSensors3+0x9c>)
 80027ea:	4b1c      	ldr	r3, [pc, #112]	; (800285c <StartSensors3+0xa4>)
 80027ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80027ee:	f7fe fd7f 	bl	80012f0 <MRT_LSM6DSR_getAngularRate>
	  MRT_LSM6DSR_getTemperature(lsm_ctx,&lsm_temperature_degC);
 80027f2:	4a18      	ldr	r2, [pc, #96]	; (8002854 <StartSensors3+0x9c>)
 80027f4:	4b1a      	ldr	r3, [pc, #104]	; (8002860 <StartSensors3+0xa8>)
 80027f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80027f8:	f7fe fd50 	bl	800129c <MRT_LSM6DSR_getTemperature>

	  //LPS22HH
  	  MRT_LPS22HH_getPressure(lps_ctx,&pressure_hPa);
 80027fc:	4a19      	ldr	r2, [pc, #100]	; (8002864 <StartSensors3+0xac>)
 80027fe:	4b1a      	ldr	r3, [pc, #104]	; (8002868 <StartSensors3+0xb0>)
 8002800:	ca07      	ldmia	r2, {r0, r1, r2}
 8002802:	f7fe fe73 	bl	80014ec <MRT_LPS22HH_getPressure>
	  MRT_LPS22HH_getTemperature(lps_ctx,&lps_temperature_degC);
 8002806:	4a17      	ldr	r2, [pc, #92]	; (8002864 <StartSensors3+0xac>)
 8002808:	4b18      	ldr	r3, [pc, #96]	; (800286c <StartSensors3+0xb4>)
 800280a:	ca07      	ldmia	r2, {r0, r1, r2}
 800280c:	f7fe fe9a 	bl	8001544 <MRT_LPS22HH_getTemperature>
	  altitude_m = MRT_getAltitude(pressure_hPa); //Update altitude
 8002810:	4b15      	ldr	r3, [pc, #84]	; (8002868 <StartSensors3+0xb0>)
 8002812:	edd3 7a00 	vldr	s15, [r3]
 8002816:	eeb0 0a67 	vmov.f32	s0, s15
 800281a:	f001 fa81 	bl	8003d20 <MRT_getAltitude>
 800281e:	eef0 7a40 	vmov.f32	s15, s0
 8002822:	4b13      	ldr	r3, [pc, #76]	; (8002870 <StartSensors3+0xb8>)
 8002824:	edc3 7a00 	vstr	s15, [r3]

	  //TODO Pressure tank (just use an analog sensor if you don't have it)


	  //Thermocouple
	  Max31855_Read_Temp();
 8002828:	f004 f850 	bl	80068cc <Max31855_Read_Temp>

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 800282c:	2200      	movs	r2, #0
 800282e:	2102      	movs	r1, #2
 8002830:	4804      	ldr	r0, [pc, #16]	; (8002844 <StartSensors3+0x8c>)
 8002832:	f005 f8d9 	bl	80079e8 <HAL_GPIO_WritePin>

	  osDelay(1000/POLL_FREQ);
 8002836:	2001      	movs	r0, #1
 8002838:	f012 f9e5 	bl	8014c06 <osDelay>
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 800283c:	e7c5      	b.n	80027ca <StartSensors3+0x12>
 800283e:	bf00      	nop
 8002840:	20006044 	.word	0x20006044
 8002844:	40020800 	.word	0x40020800
 8002848:	20006990 	.word	0x20006990
 800284c:	2000679c 	.word	0x2000679c
 8002850:	20006904 	.word	0x20006904
 8002854:	20006a48 	.word	0x20006a48
 8002858:	200003ec 	.word	0x200003ec
 800285c:	200003f8 	.word	0x200003f8
 8002860:	20000404 	.word	0x20000404
 8002864:	20006a38 	.word	0x20006a38
 8002868:	200003e4 	.word	0x200003e4
 800286c:	200003e8 	.word	0x200003e8
 8002870:	20000408 	.word	0x20000408

08002874 <StartPropulsion4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPropulsion4 */
void StartPropulsion4(void *argument)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPropulsion4 */

	osThreadExit();
 800287c:	f012 f9bd 	bl	8014bfa <osThreadExit>

08002880 <StartPrinting>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPrinting */
void StartPrinting(void *argument)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b0c2      	sub	sp, #264	; 0x108
 8002884:	af00      	add	r7, sp, #0
 8002886:	1d3b      	adds	r3, r7, #4
 8002888:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartPrinting */

	osThreadExit();
 800288a:	f012 f9b6 	bl	8014bfa <osThreadExit>
	...

08002890 <StartWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWatchDog */
void StartWatchDog(void *argument)
{
 8002890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002892:	b0c7      	sub	sp, #284	; 0x11c
 8002894:	af04      	add	r7, sp, #16
 8002896:	1d3b      	adds	r3, r7, #4
 8002898:	6018      	str	r0, [r3, #0]

	char buffer[TX_BUF_DIM];
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 800289a:	2201      	movs	r2, #1
 800289c:	2104      	movs	r1, #4
 800289e:	482a      	ldr	r0, [pc, #168]	; (8002948 <StartWatchDog+0xb8>)
 80028a0:	f005 f8a2 	bl	80079e8 <HAL_GPIO_WritePin>
	 //HAL_IWDG_Refresh(&hiwdg);

	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80028a4:	2200      	movs	r2, #0
 80028a6:	4929      	ldr	r1, [pc, #164]	; (800294c <StartWatchDog+0xbc>)
 80028a8:	4829      	ldr	r0, [pc, #164]	; (8002950 <StartWatchDog+0xc0>)
 80028aa:	f008 fab1 	bl	800ae10 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80028ae:	2200      	movs	r2, #0
 80028b0:	4928      	ldr	r1, [pc, #160]	; (8002954 <StartWatchDog+0xc4>)
 80028b2:	4827      	ldr	r0, [pc, #156]	; (8002950 <StartWatchDog+0xc0>)
 80028b4:	f008 fbb1 	bl	800b01a <HAL_RTC_GetDate>

	 prev_hours = sTime.Hours;
 80028b8:	4b24      	ldr	r3, [pc, #144]	; (800294c <StartWatchDog+0xbc>)
 80028ba:	781a      	ldrb	r2, [r3, #0]
 80028bc:	4b26      	ldr	r3, [pc, #152]	; (8002958 <StartWatchDog+0xc8>)
 80028be:	701a      	strb	r2, [r3, #0]
	 prev_min = sTime.Minutes;
 80028c0:	4b22      	ldr	r3, [pc, #136]	; (800294c <StartWatchDog+0xbc>)
 80028c2:	785a      	ldrb	r2, [r3, #1]
 80028c4:	4b25      	ldr	r3, [pc, #148]	; (800295c <StartWatchDog+0xcc>)
 80028c6:	701a      	strb	r2, [r3, #0]
	 prev_sec = sTime.Seconds;
 80028c8:	4b20      	ldr	r3, [pc, #128]	; (800294c <StartWatchDog+0xbc>)
 80028ca:	789a      	ldrb	r2, [r3, #2]
 80028cc:	4b24      	ldr	r3, [pc, #144]	; (8002960 <StartWatchDog+0xd0>)
 80028ce:	701a      	strb	r2, [r3, #0]



	  memset(buffer, 0, TX_BUF_DIM);
 80028d0:	f107 0308 	add.w	r3, r7, #8
 80028d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028d8:	2100      	movs	r1, #0
 80028da:	4618      	mov	r0, r3
 80028dc:	f017 fa46 	bl	8019d6c <memset>
	  sprintf(buffer, "Time: %i:%i:%i	Date: \r\n %f\r\n", prev_hours,prev_min,prev_sec, altitude_m);
 80028e0:	4b1d      	ldr	r3, [pc, #116]	; (8002958 <StartWatchDog+0xc8>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	461d      	mov	r5, r3
 80028e6:	4b1d      	ldr	r3, [pc, #116]	; (800295c <StartWatchDog+0xcc>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	461e      	mov	r6, r3
 80028ec:	4b1c      	ldr	r3, [pc, #112]	; (8002960 <StartWatchDog+0xd0>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	461c      	mov	r4, r3
 80028f2:	4b1c      	ldr	r3, [pc, #112]	; (8002964 <StartWatchDog+0xd4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fd fe36 	bl	8000568 <__aeabi_f2d>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	f107 0008 	add.w	r0, r7, #8
 8002904:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002908:	9400      	str	r4, [sp, #0]
 800290a:	4633      	mov	r3, r6
 800290c:	462a      	mov	r2, r5
 800290e:	4916      	ldr	r1, [pc, #88]	; (8002968 <StartWatchDog+0xd8>)
 8002910:	f018 faaa 	bl	801ae68 <siprintf>
	  HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 8002914:	f107 0308 	add.w	r3, r7, #8
 8002918:	4618      	mov	r0, r3
 800291a:	f7fd fc69 	bl	80001f0 <strlen>
 800291e:	4603      	mov	r3, r0
 8002920:	b29a      	uxth	r2, r3
 8002922:	f107 0108 	add.w	r1, r7, #8
 8002926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800292a:	4810      	ldr	r0, [pc, #64]	; (800296c <StartWatchDog+0xdc>)
 800292c:	f00a fad5 	bl	800ceda <HAL_UART_Transmit>


	  //Save the time
	  MRT_saveRTCTime();
 8002930:	f001 f9b0 	bl	8003c94 <MRT_saveRTCTime>

	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8002934:	2200      	movs	r2, #0
 8002936:	2104      	movs	r1, #4
 8002938:	4803      	ldr	r0, [pc, #12]	; (8002948 <StartWatchDog+0xb8>)
 800293a:	f005 f855 	bl	80079e8 <HAL_GPIO_WritePin>

	  osDelay(1000/WD_FREQ);
 800293e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002942:	f012 f960 	bl	8014c06 <osDelay>
	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 8002946:	e7a8      	b.n	800289a <StartWatchDog+0xa>
 8002948:	40020800 	.word	0x40020800
 800294c:	2000064c 	.word	0x2000064c
 8002950:	20006908 	.word	0x20006908
 8002954:	20000660 	.word	0x20000660
 8002958:	20000414 	.word	0x20000414
 800295c:	20000415 	.word	0x20000415
 8002960:	20000416 	.word	0x20000416
 8002964:	20000408 	.word	0x20000408
 8002968:	0801f014 	.word	0x0801f014
 800296c:	20005eac 	.word	0x20005eac

08002970 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a04      	ldr	r2, [pc, #16]	; (8002990 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d101      	bne.n	8002986 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002982:	f004 faa3 	bl	8006ecc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002986:	bf00      	nop
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40001000 	.word	0x40001000

08002994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
	...

080029a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	607b      	str	r3, [r7, #4]
 80029ae:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <HAL_MspInit+0x54>)
 80029b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b2:	4a11      	ldr	r2, [pc, #68]	; (80029f8 <HAL_MspInit+0x54>)
 80029b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b8:	6453      	str	r3, [r2, #68]	; 0x44
 80029ba:	4b0f      	ldr	r3, [pc, #60]	; (80029f8 <HAL_MspInit+0x54>)
 80029bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029c2:	607b      	str	r3, [r7, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	603b      	str	r3, [r7, #0]
 80029ca:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <HAL_MspInit+0x54>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	4a0a      	ldr	r2, [pc, #40]	; (80029f8 <HAL_MspInit+0x54>)
 80029d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d4:	6413      	str	r3, [r2, #64]	; 0x40
 80029d6:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <HAL_MspInit+0x54>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029de:	603b      	str	r3, [r7, #0]
 80029e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80029e2:	2200      	movs	r2, #0
 80029e4:	210f      	movs	r1, #15
 80029e6:	f06f 0001 	mvn.w	r0, #1
 80029ea:	f004 fe01 	bl	80075f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40023800 	.word	0x40023800

080029fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08a      	sub	sp, #40	; 0x28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a04:	f107 0314 	add.w	r3, r7, #20
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a17      	ldr	r2, [pc, #92]	; (8002a78 <HAL_ADC_MspInit+0x7c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d127      	bne.n	8002a6e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	613b      	str	r3, [r7, #16]
 8002a22:	4b16      	ldr	r3, [pc, #88]	; (8002a7c <HAL_ADC_MspInit+0x80>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	4a15      	ldr	r2, [pc, #84]	; (8002a7c <HAL_ADC_MspInit+0x80>)
 8002a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a2e:	4b13      	ldr	r3, [pc, #76]	; (8002a7c <HAL_ADC_MspInit+0x80>)
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a36:	613b      	str	r3, [r7, #16]
 8002a38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	4b0f      	ldr	r3, [pc, #60]	; (8002a7c <HAL_ADC_MspInit+0x80>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	4a0e      	ldr	r2, [pc, #56]	; (8002a7c <HAL_ADC_MspInit+0x80>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4a:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <HAL_ADC_MspInit+0x80>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 8002a56:	2340      	movs	r3, #64	; 0x40
 8002a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 8002a62:	f107 0314 	add.w	r3, r7, #20
 8002a66:	4619      	mov	r1, r3
 8002a68:	4805      	ldr	r0, [pc, #20]	; (8002a80 <HAL_ADC_MspInit+0x84>)
 8002a6a:	f004 fdf9 	bl	8007660 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a6e:	bf00      	nop
 8002a70:	3728      	adds	r7, #40	; 0x28
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40012000 	.word	0x40012000
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40020000 	.word	0x40020000

08002a84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08e      	sub	sp, #56	; 0x38
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a5c      	ldr	r2, [pc, #368]	; (8002c14 <HAL_I2C_MspInit+0x190>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d12d      	bne.n	8002b02 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	623b      	str	r3, [r7, #32]
 8002aaa:	4b5b      	ldr	r3, [pc, #364]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	4a5a      	ldr	r2, [pc, #360]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002ab0:	f043 0302 	orr.w	r3, r3, #2
 8002ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab6:	4b58      	ldr	r3, [pc, #352]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	623b      	str	r3, [r7, #32]
 8002ac0:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ac2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ac8:	2312      	movs	r3, #18
 8002aca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002acc:	2301      	movs	r3, #1
 8002ace:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ad4:	2304      	movs	r3, #4
 8002ad6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002adc:	4619      	mov	r1, r3
 8002ade:	484f      	ldr	r0, [pc, #316]	; (8002c1c <HAL_I2C_MspInit+0x198>)
 8002ae0:	f004 fdbe 	bl	8007660 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	61fb      	str	r3, [r7, #28]
 8002ae8:	4b4b      	ldr	r3, [pc, #300]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	4a4a      	ldr	r2, [pc, #296]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002aee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002af2:	6413      	str	r3, [r2, #64]	; 0x40
 8002af4:	4b48      	ldr	r3, [pc, #288]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002afc:	61fb      	str	r3, [r7, #28]
 8002afe:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002b00:	e083      	b.n	8002c0a <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a46      	ldr	r2, [pc, #280]	; (8002c20 <HAL_I2C_MspInit+0x19c>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d12d      	bne.n	8002b68 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61bb      	str	r3, [r7, #24]
 8002b10:	4b41      	ldr	r3, [pc, #260]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b14:	4a40      	ldr	r2, [pc, #256]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002b16:	f043 0302 	orr.w	r3, r3, #2
 8002b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1c:	4b3e      	ldr	r3, [pc, #248]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	61bb      	str	r3, [r7, #24]
 8002b26:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002b28:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b2e:	2312      	movs	r3, #18
 8002b30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b32:	2301      	movs	r3, #1
 8002b34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b36:	2303      	movs	r3, #3
 8002b38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002b3a:	2304      	movs	r3, #4
 8002b3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b42:	4619      	mov	r1, r3
 8002b44:	4835      	ldr	r0, [pc, #212]	; (8002c1c <HAL_I2C_MspInit+0x198>)
 8002b46:	f004 fd8b 	bl	8007660 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	617b      	str	r3, [r7, #20]
 8002b4e:	4b32      	ldr	r3, [pc, #200]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	4a31      	ldr	r2, [pc, #196]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002b54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b58:	6413      	str	r3, [r2, #64]	; 0x40
 8002b5a:	4b2f      	ldr	r3, [pc, #188]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	697b      	ldr	r3, [r7, #20]
}
 8002b66:	e050      	b.n	8002c0a <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a2d      	ldr	r2, [pc, #180]	; (8002c24 <HAL_I2C_MspInit+0x1a0>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d14b      	bne.n	8002c0a <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	613b      	str	r3, [r7, #16]
 8002b76:	4b28      	ldr	r3, [pc, #160]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	4a27      	ldr	r2, [pc, #156]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002b7c:	f043 0304 	orr.w	r3, r3, #4
 8002b80:	6313      	str	r3, [r2, #48]	; 0x30
 8002b82:	4b25      	ldr	r3, [pc, #148]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	f003 0304 	and.w	r3, r3, #4
 8002b8a:	613b      	str	r3, [r7, #16]
 8002b8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	4b21      	ldr	r3, [pc, #132]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	4a20      	ldr	r2, [pc, #128]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002b98:	f043 0301 	orr.w	r3, r3, #1
 8002b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9e:	4b1e      	ldr	r3, [pc, #120]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002baa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bb0:	2312      	movs	r3, #18
 8002bb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002bbc:	2304      	movs	r3, #4
 8002bbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4818      	ldr	r0, [pc, #96]	; (8002c28 <HAL_I2C_MspInit+0x1a4>)
 8002bc8:	f004 fd4a 	bl	8007660 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002bcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bd2:	2312      	movs	r3, #18
 8002bd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002bde:	2304      	movs	r3, #4
 8002be0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002be6:	4619      	mov	r1, r3
 8002be8:	4810      	ldr	r0, [pc, #64]	; (8002c2c <HAL_I2C_MspInit+0x1a8>)
 8002bea:	f004 fd39 	bl	8007660 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60bb      	str	r3, [r7, #8]
 8002bf2:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	4a08      	ldr	r2, [pc, #32]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002bf8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bfe:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <HAL_I2C_MspInit+0x194>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c06:	60bb      	str	r3, [r7, #8]
 8002c08:	68bb      	ldr	r3, [r7, #8]
}
 8002c0a:	bf00      	nop
 8002c0c:	3738      	adds	r7, #56	; 0x38
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40005400 	.word	0x40005400
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40020400 	.word	0x40020400
 8002c20:	40005800 	.word	0x40005800
 8002c24:	40005c00 	.word	0x40005c00
 8002c28:	40020800 	.word	0x40020800
 8002c2c:	40020000 	.word	0x40020000

08002c30 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08e      	sub	sp, #56	; 0x38
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c38:	f107 0308 	add.w	r3, r7, #8
 8002c3c:	2230      	movs	r2, #48	; 0x30
 8002c3e:	2100      	movs	r1, #0
 8002c40:	4618      	mov	r0, r3
 8002c42:	f017 f893 	bl	8019d6c <memset>
  if(hrtc->Instance==RTC)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a10      	ldr	r2, [pc, #64]	; (8002c8c <HAL_RTC_MspInit+0x5c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d119      	bne.n	8002c84 <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002c50:	2320      	movs	r3, #32
 8002c52:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002c54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c58:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c5a:	f107 0308 	add.w	r3, r7, #8
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f007 fdca 	bl	800a7f8 <HAL_RCCEx_PeriphCLKConfig>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002c6a:	f7ff fe93 	bl	8002994 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c6e:	4b08      	ldr	r3, [pc, #32]	; (8002c90 <HAL_RTC_MspInit+0x60>)
 8002c70:	2201      	movs	r2, #1
 8002c72:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8002c74:	2200      	movs	r2, #0
 8002c76:	2105      	movs	r1, #5
 8002c78:	2029      	movs	r0, #41	; 0x29
 8002c7a:	f004 fcb9 	bl	80075f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002c7e:	2029      	movs	r0, #41	; 0x29
 8002c80:	f004 fcd2 	bl	8007628 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002c84:	bf00      	nop
 8002c86:	3738      	adds	r7, #56	; 0x38
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40002800 	.word	0x40002800
 8002c90:	42470e3c 	.word	0x42470e3c

08002c94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08e      	sub	sp, #56	; 0x38
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	605a      	str	r2, [r3, #4]
 8002ca6:	609a      	str	r2, [r3, #8]
 8002ca8:	60da      	str	r2, [r3, #12]
 8002caa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a4c      	ldr	r2, [pc, #304]	; (8002de4 <HAL_SPI_MspInit+0x150>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d12d      	bne.n	8002d12 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	623b      	str	r3, [r7, #32]
 8002cba:	4b4b      	ldr	r3, [pc, #300]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	4a4a      	ldr	r2, [pc, #296]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cc6:	4b48      	ldr	r3, [pc, #288]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cce:	623b      	str	r3, [r7, #32]
 8002cd0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61fb      	str	r3, [r7, #28]
 8002cd6:	4b44      	ldr	r3, [pc, #272]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	4a43      	ldr	r2, [pc, #268]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002cdc:	f043 0302 	orr.w	r3, r3, #2
 8002ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce2:	4b41      	ldr	r3, [pc, #260]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	61fb      	str	r3, [r7, #28]
 8002cec:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002cee:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d00:	2305      	movs	r3, #5
 8002d02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4838      	ldr	r0, [pc, #224]	; (8002dec <HAL_SPI_MspInit+0x158>)
 8002d0c:	f004 fca8 	bl	8007660 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002d10:	e064      	b.n	8002ddc <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI4)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a36      	ldr	r2, [pc, #216]	; (8002df0 <HAL_SPI_MspInit+0x15c>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d12d      	bne.n	8002d78 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	61bb      	str	r3, [r7, #24]
 8002d20:	4b31      	ldr	r3, [pc, #196]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d24:	4a30      	ldr	r2, [pc, #192]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002d26:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d2a:	6453      	str	r3, [r2, #68]	; 0x44
 8002d2c:	4b2e      	ldr	r3, [pc, #184]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d34:	61bb      	str	r3, [r7, #24]
 8002d36:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d38:	2300      	movs	r3, #0
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	4b2a      	ldr	r3, [pc, #168]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	4a29      	ldr	r2, [pc, #164]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002d42:	f043 0310 	orr.w	r3, r3, #16
 8002d46:	6313      	str	r3, [r2, #48]	; 0x30
 8002d48:	4b27      	ldr	r3, [pc, #156]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4c:	f003 0310 	and.w	r3, r3, #16
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002d54:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d62:	2303      	movs	r3, #3
 8002d64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002d66:	2305      	movs	r3, #5
 8002d68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4820      	ldr	r0, [pc, #128]	; (8002df4 <HAL_SPI_MspInit+0x160>)
 8002d72:	f004 fc75 	bl	8007660 <HAL_GPIO_Init>
}
 8002d76:	e031      	b.n	8002ddc <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI5)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a1e      	ldr	r2, [pc, #120]	; (8002df8 <HAL_SPI_MspInit+0x164>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d12c      	bne.n	8002ddc <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	4b18      	ldr	r3, [pc, #96]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8a:	4a17      	ldr	r2, [pc, #92]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002d8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d90:	6453      	str	r3, [r2, #68]	; 0x44
 8002d92:	4b15      	ldr	r3, [pc, #84]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d9a:	613b      	str	r3, [r7, #16]
 8002d9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	4a10      	ldr	r2, [pc, #64]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002da8:	f043 0320 	orr.w	r3, r3, #32
 8002dac:	6313      	str	r3, [r2, #48]	; 0x30
 8002dae:	4b0e      	ldr	r3, [pc, #56]	; (8002de8 <HAL_SPI_MspInit+0x154>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	f003 0320 	and.w	r3, r3, #32
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002dba:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002dbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002dcc:	2305      	movs	r3, #5
 8002dce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4809      	ldr	r0, [pc, #36]	; (8002dfc <HAL_SPI_MspInit+0x168>)
 8002dd8:	f004 fc42 	bl	8007660 <HAL_GPIO_Init>
}
 8002ddc:	bf00      	nop
 8002dde:	3738      	adds	r7, #56	; 0x38
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40003800 	.word	0x40003800
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40020400 	.word	0x40020400
 8002df0:	40013400 	.word	0x40013400
 8002df4:	40021000 	.word	0x40021000
 8002df8:	40015000 	.word	0x40015000
 8002dfc:	40021400 	.word	0x40021400

08002e00 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e10:	d10d      	bne.n	8002e2e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	4b09      	ldr	r3, [pc, #36]	; (8002e3c <HAL_TIM_PWM_MspInit+0x3c>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	4a08      	ldr	r2, [pc, #32]	; (8002e3c <HAL_TIM_PWM_MspInit+0x3c>)
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	6413      	str	r3, [r2, #64]	; 0x40
 8002e22:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <HAL_TIM_PWM_MspInit+0x3c>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002e2e:	bf00      	nop
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	40023800 	.word	0x40023800

08002e40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b088      	sub	sp, #32
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e48:	f107 030c 	add.w	r3, r7, #12
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	605a      	str	r2, [r3, #4]
 8002e52:	609a      	str	r2, [r3, #8]
 8002e54:	60da      	str	r2, [r3, #12]
 8002e56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e60:	d11d      	bne.n	8002e9e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	4b10      	ldr	r3, [pc, #64]	; (8002ea8 <HAL_TIM_MspPostInit+0x68>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	4a0f      	ldr	r2, [pc, #60]	; (8002ea8 <HAL_TIM_MspPostInit+0x68>)
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	6313      	str	r3, [r2, #48]	; 0x30
 8002e72:	4b0d      	ldr	r3, [pc, #52]	; (8002ea8 <HAL_TIM_MspPostInit+0x68>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	60bb      	str	r3, [r7, #8]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8002e7e:	2304      	movs	r3, #4
 8002e80:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e82:	2302      	movs	r3, #2
 8002e84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8002e92:	f107 030c 	add.w	r3, r7, #12
 8002e96:	4619      	mov	r1, r3
 8002e98:	4804      	ldr	r0, [pc, #16]	; (8002eac <HAL_TIM_MspPostInit+0x6c>)
 8002e9a:	f004 fbe1 	bl	8007660 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002e9e:	bf00      	nop
 8002ea0:	3720      	adds	r7, #32
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	40020000 	.word	0x40020000

08002eb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08e      	sub	sp, #56	; 0x38
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	609a      	str	r2, [r3, #8]
 8002ec4:	60da      	str	r2, [r3, #12]
 8002ec6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a4b      	ldr	r2, [pc, #300]	; (8002ffc <HAL_UART_MspInit+0x14c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d12c      	bne.n	8002f2c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	623b      	str	r3, [r7, #32]
 8002ed6:	4b4a      	ldr	r3, [pc, #296]	; (8003000 <HAL_UART_MspInit+0x150>)
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	4a49      	ldr	r2, [pc, #292]	; (8003000 <HAL_UART_MspInit+0x150>)
 8002edc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee2:	4b47      	ldr	r3, [pc, #284]	; (8003000 <HAL_UART_MspInit+0x150>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002eea:	623b      	str	r3, [r7, #32]
 8002eec:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61fb      	str	r3, [r7, #28]
 8002ef2:	4b43      	ldr	r3, [pc, #268]	; (8003000 <HAL_UART_MspInit+0x150>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	4a42      	ldr	r2, [pc, #264]	; (8003000 <HAL_UART_MspInit+0x150>)
 8002ef8:	f043 0310 	orr.w	r3, r3, #16
 8002efc:	6313      	str	r3, [r2, #48]	; 0x30
 8002efe:	4b40      	ldr	r3, [pc, #256]	; (8003000 <HAL_UART_MspInit+0x150>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	f003 0310 	and.w	r3, r3, #16
 8002f06:	61fb      	str	r3, [r7, #28]
 8002f08:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f12:	2300      	movs	r3, #0
 8002f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f16:	2303      	movs	r3, #3
 8002f18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002f1a:	2308      	movs	r3, #8
 8002f1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f22:	4619      	mov	r1, r3
 8002f24:	4837      	ldr	r0, [pc, #220]	; (8003004 <HAL_UART_MspInit+0x154>)
 8002f26:	f004 fb9b 	bl	8007660 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002f2a:	e063      	b.n	8002ff4 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a35      	ldr	r2, [pc, #212]	; (8003008 <HAL_UART_MspInit+0x158>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d12d      	bne.n	8002f92 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	61bb      	str	r3, [r7, #24]
 8002f3a:	4b31      	ldr	r3, [pc, #196]	; (8003000 <HAL_UART_MspInit+0x150>)
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	4a30      	ldr	r2, [pc, #192]	; (8003000 <HAL_UART_MspInit+0x150>)
 8002f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f44:	6413      	str	r3, [r2, #64]	; 0x40
 8002f46:	4b2e      	ldr	r3, [pc, #184]	; (8003000 <HAL_UART_MspInit+0x150>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f4e:	61bb      	str	r3, [r7, #24]
 8002f50:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	4b2a      	ldr	r3, [pc, #168]	; (8003000 <HAL_UART_MspInit+0x150>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	4a29      	ldr	r2, [pc, #164]	; (8003000 <HAL_UART_MspInit+0x150>)
 8002f5c:	f043 0308 	orr.w	r3, r3, #8
 8002f60:	6313      	str	r3, [r2, #48]	; 0x30
 8002f62:	4b27      	ldr	r3, [pc, #156]	; (8003000 <HAL_UART_MspInit+0x150>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	617b      	str	r3, [r7, #20]
 8002f6c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8002f6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f74:	2302      	movs	r3, #2
 8002f76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f80:	2307      	movs	r3, #7
 8002f82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4820      	ldr	r0, [pc, #128]	; (800300c <HAL_UART_MspInit+0x15c>)
 8002f8c:	f004 fb68 	bl	8007660 <HAL_GPIO_Init>
}
 8002f90:	e030      	b.n	8002ff4 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a1e      	ldr	r2, [pc, #120]	; (8003010 <HAL_UART_MspInit+0x160>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d12b      	bne.n	8002ff4 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	4b17      	ldr	r3, [pc, #92]	; (8003000 <HAL_UART_MspInit+0x150>)
 8002fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa4:	4a16      	ldr	r2, [pc, #88]	; (8003000 <HAL_UART_MspInit+0x150>)
 8002fa6:	f043 0320 	orr.w	r3, r3, #32
 8002faa:	6453      	str	r3, [r2, #68]	; 0x44
 8002fac:	4b14      	ldr	r3, [pc, #80]	; (8003000 <HAL_UART_MspInit+0x150>)
 8002fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb0:	f003 0320 	and.w	r3, r3, #32
 8002fb4:	613b      	str	r3, [r7, #16]
 8002fb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	4b10      	ldr	r3, [pc, #64]	; (8003000 <HAL_UART_MspInit+0x150>)
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc0:	4a0f      	ldr	r2, [pc, #60]	; (8003000 <HAL_UART_MspInit+0x150>)
 8002fc2:	f043 0304 	orr.w	r3, r3, #4
 8002fc6:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc8:	4b0d      	ldr	r3, [pc, #52]	; (8003000 <HAL_UART_MspInit+0x150>)
 8002fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	60fb      	str	r3, [r7, #12]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8002fd4:	23c0      	movs	r3, #192	; 0xc0
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd8:	2302      	movs	r3, #2
 8002fda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002fe4:	2308      	movs	r3, #8
 8002fe6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fec:	4619      	mov	r1, r3
 8002fee:	4809      	ldr	r0, [pc, #36]	; (8003014 <HAL_UART_MspInit+0x164>)
 8002ff0:	f004 fb36 	bl	8007660 <HAL_GPIO_Init>
}
 8002ff4:	bf00      	nop
 8002ff6:	3738      	adds	r7, #56	; 0x38
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40007c00 	.word	0x40007c00
 8003000:	40023800 	.word	0x40023800
 8003004:	40021000 	.word	0x40021000
 8003008:	40004800 	.word	0x40004800
 800300c:	40020c00 	.word	0x40020c00
 8003010:	40011400 	.word	0x40011400
 8003014:	40020800 	.word	0x40020800

08003018 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b08c      	sub	sp, #48	; 0x30
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003020:	2300      	movs	r3, #0
 8003022:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003024:	2300      	movs	r3, #0
 8003026:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003028:	2200      	movs	r2, #0
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	2036      	movs	r0, #54	; 0x36
 800302e:	f004 fadf 	bl	80075f0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003032:	2036      	movs	r0, #54	; 0x36
 8003034:	f004 faf8 	bl	8007628 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003038:	2300      	movs	r3, #0
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	4b1f      	ldr	r3, [pc, #124]	; (80030bc <HAL_InitTick+0xa4>)
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	4a1e      	ldr	r2, [pc, #120]	; (80030bc <HAL_InitTick+0xa4>)
 8003042:	f043 0310 	orr.w	r3, r3, #16
 8003046:	6413      	str	r3, [r2, #64]	; 0x40
 8003048:	4b1c      	ldr	r3, [pc, #112]	; (80030bc <HAL_InitTick+0xa4>)
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	f003 0310 	and.w	r3, r3, #16
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003054:	f107 0210 	add.w	r2, r7, #16
 8003058:	f107 0314 	add.w	r3, r7, #20
 800305c:	4611      	mov	r1, r2
 800305e:	4618      	mov	r0, r3
 8003060:	f007 fb98 	bl	800a794 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003064:	f007 fb6e 	bl	800a744 <HAL_RCC_GetPCLK1Freq>
 8003068:	4603      	mov	r3, r0
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800306e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003070:	4a13      	ldr	r2, [pc, #76]	; (80030c0 <HAL_InitTick+0xa8>)
 8003072:	fba2 2303 	umull	r2, r3, r2, r3
 8003076:	0c9b      	lsrs	r3, r3, #18
 8003078:	3b01      	subs	r3, #1
 800307a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800307c:	4b11      	ldr	r3, [pc, #68]	; (80030c4 <HAL_InitTick+0xac>)
 800307e:	4a12      	ldr	r2, [pc, #72]	; (80030c8 <HAL_InitTick+0xb0>)
 8003080:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003082:	4b10      	ldr	r3, [pc, #64]	; (80030c4 <HAL_InitTick+0xac>)
 8003084:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003088:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800308a:	4a0e      	ldr	r2, [pc, #56]	; (80030c4 <HAL_InitTick+0xac>)
 800308c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003090:	4b0c      	ldr	r3, [pc, #48]	; (80030c4 <HAL_InitTick+0xac>)
 8003092:	2200      	movs	r2, #0
 8003094:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003096:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <HAL_InitTick+0xac>)
 8003098:	2200      	movs	r2, #0
 800309a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800309c:	4809      	ldr	r0, [pc, #36]	; (80030c4 <HAL_InitTick+0xac>)
 800309e:	f009 f8e3 	bl	800c268 <HAL_TIM_Base_Init>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d104      	bne.n	80030b2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80030a8:	4806      	ldr	r0, [pc, #24]	; (80030c4 <HAL_InitTick+0xac>)
 80030aa:	f009 f937 	bl	800c31c <HAL_TIM_Base_Start_IT>
 80030ae:	4603      	mov	r3, r0
 80030b0:	e000      	b.n	80030b4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3730      	adds	r7, #48	; 0x30
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40023800 	.word	0x40023800
 80030c0:	431bde83 	.word	0x431bde83
 80030c4:	20006c94 	.word	0x20006c94
 80030c8:	40001000 	.word	0x40001000

080030cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80030d0:	bf00      	nop
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030da:	b480      	push	{r7}
 80030dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030de:	e7fe      	b.n	80030de <HardFault_Handler+0x4>

080030e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030e4:	e7fe      	b.n	80030e4 <MemManage_Handler+0x4>

080030e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030e6:	b480      	push	{r7}
 80030e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030ea:	e7fe      	b.n	80030ea <BusFault_Handler+0x4>

080030ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030f0:	e7fe      	b.n	80030f0 <UsageFault_Handler+0x4>

080030f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030f2:	b480      	push	{r7}
 80030f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030f6:	bf00      	nop
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003104:	2001      	movs	r0, #1
 8003106:	f004 fc89 	bl	8007a1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800310a:	bf00      	nop
 800310c:	bd80      	pop	{r7, pc}
	...

08003110 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003114:	4802      	ldr	r0, [pc, #8]	; (8003120 <RTC_Alarm_IRQHandler+0x10>)
 8003116:	f008 f907 	bl	800b328 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800311a:	bf00      	nop
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	20006908 	.word	0x20006908

08003124 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003128:	4802      	ldr	r0, [pc, #8]	; (8003134 <TIM6_DAC_IRQHandler+0x10>)
 800312a:	f009 f9b6 	bl	800c49a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800312e:	bf00      	nop
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	20006c94 	.word	0x20006c94

08003138 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800313c:	4802      	ldr	r0, [pc, #8]	; (8003148 <OTG_FS_IRQHandler+0x10>)
 800313e:	f005 fe45 	bl	8008dcc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003142:	bf00      	nop
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20008b84 	.word	0x20008b84

0800314c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
	return 1;
 8003150:	2301      	movs	r3, #1
}
 8003152:	4618      	mov	r0, r3
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <_kill>:

int _kill(int pid, int sig)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003166:	f016 fca5 	bl	8019ab4 <__errno>
 800316a:	4603      	mov	r3, r0
 800316c:	2216      	movs	r2, #22
 800316e:	601a      	str	r2, [r3, #0]
	return -1;
 8003170:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003174:	4618      	mov	r0, r3
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <_exit>:

void _exit (int status)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003184:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f7ff ffe7 	bl	800315c <_kill>
	while (1) {}		/* Make sure we hang here */
 800318e:	e7fe      	b.n	800318e <_exit+0x12>

08003190 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800319c:	2300      	movs	r3, #0
 800319e:	617b      	str	r3, [r7, #20]
 80031a0:	e00a      	b.n	80031b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80031a2:	f3af 8000 	nop.w
 80031a6:	4601      	mov	r1, r0
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	1c5a      	adds	r2, r3, #1
 80031ac:	60ba      	str	r2, [r7, #8]
 80031ae:	b2ca      	uxtb	r2, r1
 80031b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	3301      	adds	r3, #1
 80031b6:	617b      	str	r3, [r7, #20]
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	429a      	cmp	r2, r3
 80031be:	dbf0      	blt.n	80031a2 <_read+0x12>
	}

return len;
 80031c0:	687b      	ldr	r3, [r7, #4]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b086      	sub	sp, #24
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	60f8      	str	r0, [r7, #12]
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031d6:	2300      	movs	r3, #0
 80031d8:	617b      	str	r3, [r7, #20]
 80031da:	e009      	b.n	80031f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	1c5a      	adds	r2, r3, #1
 80031e0:	60ba      	str	r2, [r7, #8]
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	3301      	adds	r3, #1
 80031ee:	617b      	str	r3, [r7, #20]
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	dbf1      	blt.n	80031dc <_write+0x12>
	}
	return len;
 80031f8:	687b      	ldr	r3, [r7, #4]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <_close>:

int _close(int file)
{
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
	return -1;
 800320a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800320e:	4618      	mov	r0, r3
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
 8003222:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800322a:	605a      	str	r2, [r3, #4]
	return 0;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <_isatty>:

int _isatty(int file)
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
	return 1;
 8003242:	2301      	movs	r3, #1
}
 8003244:	4618      	mov	r0, r3
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
	return 0;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
	...

0800326c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003274:	4a14      	ldr	r2, [pc, #80]	; (80032c8 <_sbrk+0x5c>)
 8003276:	4b15      	ldr	r3, [pc, #84]	; (80032cc <_sbrk+0x60>)
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003280:	4b13      	ldr	r3, [pc, #76]	; (80032d0 <_sbrk+0x64>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d102      	bne.n	800328e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003288:	4b11      	ldr	r3, [pc, #68]	; (80032d0 <_sbrk+0x64>)
 800328a:	4a12      	ldr	r2, [pc, #72]	; (80032d4 <_sbrk+0x68>)
 800328c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800328e:	4b10      	ldr	r3, [pc, #64]	; (80032d0 <_sbrk+0x64>)
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4413      	add	r3, r2
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	429a      	cmp	r2, r3
 800329a:	d207      	bcs.n	80032ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800329c:	f016 fc0a 	bl	8019ab4 <__errno>
 80032a0:	4603      	mov	r3, r0
 80032a2:	220c      	movs	r2, #12
 80032a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032aa:	e009      	b.n	80032c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032ac:	4b08      	ldr	r3, [pc, #32]	; (80032d0 <_sbrk+0x64>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032b2:	4b07      	ldr	r3, [pc, #28]	; (80032d0 <_sbrk+0x64>)
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4413      	add	r3, r2
 80032ba:	4a05      	ldr	r2, [pc, #20]	; (80032d0 <_sbrk+0x64>)
 80032bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032be:	68fb      	ldr	r3, [r7, #12]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	20030000 	.word	0x20030000
 80032cc:	00000400 	.word	0x00000400
 80032d0:	2000040c 	.word	0x2000040c
 80032d4:	20008fa0 	.word	0x20008fa0

080032d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032dc:	4b08      	ldr	r3, [pc, #32]	; (8003300 <SystemInit+0x28>)
 80032de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e2:	4a07      	ldr	r2, [pc, #28]	; (8003300 <SystemInit+0x28>)
 80032e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80032ec:	4b04      	ldr	r3, [pc, #16]	; (8003300 <SystemInit+0x28>)
 80032ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032f2:	609a      	str	r2, [r3, #8]
#endif
}
 80032f4:	bf00      	nop
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	e000ed00 	.word	0xe000ed00

08003304 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003304:	f8df d034 	ldr.w	sp, [pc, #52]	; 800333c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003308:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800330a:	e003      	b.n	8003314 <LoopCopyDataInit>

0800330c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800330c:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800330e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003310:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003312:	3104      	adds	r1, #4

08003314 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003314:	480b      	ldr	r0, [pc, #44]	; (8003344 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003316:	4b0c      	ldr	r3, [pc, #48]	; (8003348 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003318:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800331a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800331c:	d3f6      	bcc.n	800330c <CopyDataInit>
  ldr  r2, =_sbss
 800331e:	4a0b      	ldr	r2, [pc, #44]	; (800334c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003320:	e002      	b.n	8003328 <LoopFillZerobss>

08003322 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003322:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003324:	f842 3b04 	str.w	r3, [r2], #4

08003328 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003328:	4b09      	ldr	r3, [pc, #36]	; (8003350 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800332a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800332c:	d3f9      	bcc.n	8003322 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800332e:	f7ff ffd3 	bl	80032d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003332:	f016 fcbb 	bl	8019cac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003336:	f7fe f97f 	bl	8001638 <main>
  bx  lr    
 800333a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800333c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003340:	080211ec 	.word	0x080211ec
  ldr  r0, =_sdata
 8003344:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003348:	200003ac 	.word	0x200003ac
  ldr  r2, =_sbss
 800334c:	200003ac 	.word	0x200003ac
  ldr  r3, = _ebss
 8003350:	20008f9c 	.word	0x20008f9c

08003354 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003354:	e7fe      	b.n	8003354 <ADC_IRQHandler>
	...

08003358 <GPS_Poll>:
UART_HandleTypeDef* SERIAL_USART;



void GPS_Poll(float *latitude, float *longitude, float *time)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b08c      	sub	sp, #48	; 0x30
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 8003364:	2364      	movs	r3, #100	; 0x64
 8003366:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 8003368:	2300      	movs	r3, #0
 800336a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 800336c:	2300      	movs	r3, #0
 800336e:	62bb      	str	r3, [r7, #40]	; 0x28
	while(loop_count < max_loop_count && !done){
 8003370:	e073      	b.n	800345a <GPS_Poll+0x102>
		HAL_UART_Receive(GPS_USART, (uint8_t*)&rx_current, 1, 100);
 8003372:	4b3f      	ldr	r3, [pc, #252]	; (8003470 <GPS_Poll+0x118>)
 8003374:	6818      	ldr	r0, [r3, #0]
 8003376:	2364      	movs	r3, #100	; 0x64
 8003378:	2201      	movs	r2, #1
 800337a:	493e      	ldr	r1, [pc, #248]	; (8003474 <GPS_Poll+0x11c>)
 800337c:	f009 fe3f 	bl	800cffe <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 8003380:	4b3c      	ldr	r3, [pc, #240]	; (8003474 <GPS_Poll+0x11c>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b0a      	cmp	r3, #10
 8003386:	d00f      	beq.n	80033a8 <GPS_Poll+0x50>
 8003388:	4b3b      	ldr	r3, [pc, #236]	; (8003478 <GPS_Poll+0x120>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b63      	cmp	r3, #99	; 0x63
 800338e:	d80b      	bhi.n	80033a8 <GPS_Poll+0x50>
			rx_buffer[rx_index++] = rx_current;
 8003390:	4b39      	ldr	r3, [pc, #228]	; (8003478 <GPS_Poll+0x120>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	1c5a      	adds	r2, r3, #1
 8003396:	b2d1      	uxtb	r1, r2
 8003398:	4a37      	ldr	r2, [pc, #220]	; (8003478 <GPS_Poll+0x120>)
 800339a:	7011      	strb	r1, [r2, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	4b35      	ldr	r3, [pc, #212]	; (8003474 <GPS_Poll+0x11c>)
 80033a0:	7819      	ldrb	r1, [r3, #0]
 80033a2:	4b36      	ldr	r3, [pc, #216]	; (800347c <GPS_Poll+0x124>)
 80033a4:	5499      	strb	r1, [r3, r2]
 80033a6:	e021      	b.n	80033ec <GPS_Poll+0x94>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 80033a8:	4834      	ldr	r0, [pc, #208]	; (800347c <GPS_Poll+0x124>)
 80033aa:	f000 f86b 	bl	8003484 <GPS_validate>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d013      	beq.n	80033dc <GPS_Poll+0x84>
				if(GPS_parse((char*) rx_buffer)){
 80033b4:	4831      	ldr	r0, [pc, #196]	; (800347c <GPS_Poll+0x124>)
 80033b6:	f000 f8c7 	bl	8003548 <GPS_parse>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00d      	beq.n	80033dc <GPS_Poll+0x84>
					*latitude = GPS.dec_latitude;
 80033c0:	4b2f      	ldr	r3, [pc, #188]	; (8003480 <GPS_Poll+0x128>)
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 80033c8:	4b2d      	ldr	r3, [pc, #180]	; (8003480 <GPS_Poll+0x128>)
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 80033d0:	4b2b      	ldr	r3, [pc, #172]	; (8003480 <GPS_Poll+0x128>)
 80033d2:	695a      	ldr	r2, [r3, #20]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	601a      	str	r2, [r3, #0]
					done = 1;
 80033d8:	2301      	movs	r3, #1
 80033da:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 80033dc:	4b26      	ldr	r3, [pc, #152]	; (8003478 <GPS_Poll+0x120>)
 80033de:	2200      	movs	r2, #0
 80033e0:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 80033e2:	2264      	movs	r2, #100	; 0x64
 80033e4:	2100      	movs	r1, #0
 80033e6:	4825      	ldr	r0, [pc, #148]	; (800347c <GPS_Poll+0x124>)
 80033e8:	f016 fcc0 	bl	8019d6c <memset>
		}

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS_USART);
 80033ec:	2300      	movs	r3, #0
 80033ee:	623b      	str	r3, [r7, #32]
 80033f0:	4b1f      	ldr	r3, [pc, #124]	; (8003470 <GPS_Poll+0x118>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	623b      	str	r3, [r7, #32]
 80033fa:	4b1d      	ldr	r3, [pc, #116]	; (8003470 <GPS_Poll+0x118>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	623b      	str	r3, [r7, #32]
 8003404:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS_USART);
 8003406:	2300      	movs	r3, #0
 8003408:	61fb      	str	r3, [r7, #28]
 800340a:	4b19      	ldr	r3, [pc, #100]	; (8003470 <GPS_Poll+0x118>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	61fb      	str	r3, [r7, #28]
 8003414:	4b16      	ldr	r3, [pc, #88]	; (8003470 <GPS_Poll+0x118>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	61fb      	str	r3, [r7, #28]
 800341e:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS_USART);
 8003420:	2300      	movs	r3, #0
 8003422:	61bb      	str	r3, [r7, #24]
 8003424:	4b12      	ldr	r3, [pc, #72]	; (8003470 <GPS_Poll+0x118>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	61bb      	str	r3, [r7, #24]
 800342e:	4b10      	ldr	r3, [pc, #64]	; (8003470 <GPS_Poll+0x118>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	61bb      	str	r3, [r7, #24]
 8003438:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS_USART);
 800343a:	2300      	movs	r3, #0
 800343c:	617b      	str	r3, [r7, #20]
 800343e:	4b0c      	ldr	r3, [pc, #48]	; (8003470 <GPS_Poll+0x118>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	4b09      	ldr	r3, [pc, #36]	; (8003470 <GPS_Poll+0x118>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	617b      	str	r3, [r7, #20]
 8003452:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 8003454:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003456:	3301      	adds	r3, #1
 8003458:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 800345a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800345c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800345e:	429a      	cmp	r2, r3
 8003460:	d202      	bcs.n	8003468 <GPS_Poll+0x110>
 8003462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003464:	2b00      	cmp	r3, #0
 8003466:	d084      	beq.n	8003372 <GPS_Poll+0x1a>
	}
}
 8003468:	bf00      	nop
 800346a:	3730      	adds	r7, #48	; 0x30
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	20005fa0 	.word	0x20005fa0
 8003474:	20000410 	.word	0x20000410
 8003478:	20000411 	.word	0x20000411
 800347c:	20006d34 	.word	0x20006d34
 8003480:	20006cdc 	.word	0x20006cdc

08003484 <GPS_validate>:

int GPS_validate(char *nmeastr){
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 800348c:	2300      	movs	r3, #0
 800348e:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8003490:	2300      	movs	r3, #0
 8003492:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	4413      	add	r3, r2
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b24      	cmp	r3, #36	; 0x24
 800349e:	d103      	bne.n	80034a8 <GPS_validate+0x24>
        i++;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	3301      	adds	r3, #1
 80034a4:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80034a6:	e00c      	b.n	80034c2 <GPS_validate+0x3e>
        return 0;
 80034a8:	2300      	movs	r3, #0
 80034aa:	e047      	b.n	800353c <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	4413      	add	r3, r2
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	461a      	mov	r2, r3
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	4053      	eors	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]
        i++;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	3301      	adds	r3, #1
 80034c0:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	4413      	add	r3, r2
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d008      	beq.n	80034e0 <GPS_validate+0x5c>
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	4413      	add	r3, r2
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b2a      	cmp	r3, #42	; 0x2a
 80034d8:	d002      	beq.n	80034e0 <GPS_validate+0x5c>
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2b4a      	cmp	r3, #74	; 0x4a
 80034de:	dde5      	ble.n	80034ac <GPS_validate+0x28>
    }

    if(i >= 75){
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	2b4a      	cmp	r3, #74	; 0x4a
 80034e4:	dd01      	ble.n	80034ea <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 80034e6:	2300      	movs	r3, #0
 80034e8:	e028      	b.n	800353c <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	4413      	add	r3, r2
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b2a      	cmp	r3, #42	; 0x2a
 80034f4:	d119      	bne.n	800352a <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	3301      	adds	r3, #1
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	4413      	add	r3, r2
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	3302      	adds	r3, #2
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	4413      	add	r3, r2
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 800350e:	2300      	movs	r3, #0
 8003510:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 8003512:	f107 0308 	add.w	r3, r7, #8
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	490a      	ldr	r1, [pc, #40]	; (8003544 <GPS_validate+0xc0>)
 800351a:	4618      	mov	r0, r3
 800351c:	f017 fca4 	bl	801ae68 <siprintf>
    return((checkcalcstr[0] == check[0])
 8003520:	7a3a      	ldrb	r2, [r7, #8]
 8003522:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8003524:	429a      	cmp	r2, r3
 8003526:	d108      	bne.n	800353a <GPS_validate+0xb6>
 8003528:	e001      	b.n	800352e <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 800352a:	2300      	movs	r3, #0
 800352c:	e006      	b.n	800353c <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800352e:	7a7a      	ldrb	r2, [r7, #9]
 8003530:	7b7b      	ldrb	r3, [r7, #13]
 8003532:	429a      	cmp	r2, r3
 8003534:	d101      	bne.n	800353a <GPS_validate+0xb6>
 8003536:	2301      	movs	r3, #1
 8003538:	e000      	b.n	800353c <GPS_validate+0xb8>
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	0801f034 	.word	0x0801f034

08003548 <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 8003548:	b580      	push	{r7, lr}
 800354a:	b08a      	sub	sp, #40	; 0x28
 800354c:	af08      	add	r7, sp, #32
 800354e:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 8003550:	2206      	movs	r2, #6
 8003552:	496d      	ldr	r1, [pc, #436]	; (8003708 <GPS_parse+0x1c0>)
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f017 fd20 	bl	801af9a <strncmp>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d139      	bne.n	80035d4 <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8003560:	4b6a      	ldr	r3, [pc, #424]	; (800370c <GPS_parse+0x1c4>)
 8003562:	9307      	str	r3, [sp, #28]
 8003564:	4b6a      	ldr	r3, [pc, #424]	; (8003710 <GPS_parse+0x1c8>)
 8003566:	9306      	str	r3, [sp, #24]
 8003568:	4b6a      	ldr	r3, [pc, #424]	; (8003714 <GPS_parse+0x1cc>)
 800356a:	9305      	str	r3, [sp, #20]
 800356c:	4b6a      	ldr	r3, [pc, #424]	; (8003718 <GPS_parse+0x1d0>)
 800356e:	9304      	str	r3, [sp, #16]
 8003570:	4b6a      	ldr	r3, [pc, #424]	; (800371c <GPS_parse+0x1d4>)
 8003572:	9303      	str	r3, [sp, #12]
 8003574:	4b6a      	ldr	r3, [pc, #424]	; (8003720 <GPS_parse+0x1d8>)
 8003576:	9302      	str	r3, [sp, #8]
 8003578:	4b6a      	ldr	r3, [pc, #424]	; (8003724 <GPS_parse+0x1dc>)
 800357a:	9301      	str	r3, [sp, #4]
 800357c:	4b6a      	ldr	r3, [pc, #424]	; (8003728 <GPS_parse+0x1e0>)
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	4b6a      	ldr	r3, [pc, #424]	; (800372c <GPS_parse+0x1e4>)
 8003582:	4a6b      	ldr	r2, [pc, #428]	; (8003730 <GPS_parse+0x1e8>)
 8003584:	496b      	ldr	r1, [pc, #428]	; (8003734 <GPS_parse+0x1ec>)
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f017 fc8e 	bl	801aea8 <siscanf>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	f340 80b5 	ble.w	80036fe <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8003594:	4b68      	ldr	r3, [pc, #416]	; (8003738 <GPS_parse+0x1f0>)
 8003596:	edd3 7a04 	vldr	s15, [r3, #16]
 800359a:	4b67      	ldr	r3, [pc, #412]	; (8003738 <GPS_parse+0x1f0>)
 800359c:	7e1b      	ldrb	r3, [r3, #24]
 800359e:	4618      	mov	r0, r3
 80035a0:	eeb0 0a67 	vmov.f32	s0, s15
 80035a4:	f000 f8ec 	bl	8003780 <GPS_nmea_to_dec>
 80035a8:	eef0 7a40 	vmov.f32	s15, s0
 80035ac:	4b62      	ldr	r3, [pc, #392]	; (8003738 <GPS_parse+0x1f0>)
 80035ae:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80035b2:	4b61      	ldr	r3, [pc, #388]	; (8003738 <GPS_parse+0x1f0>)
 80035b4:	edd3 7a03 	vldr	s15, [r3, #12]
 80035b8:	4b5f      	ldr	r3, [pc, #380]	; (8003738 <GPS_parse+0x1f0>)
 80035ba:	7e5b      	ldrb	r3, [r3, #25]
 80035bc:	4618      	mov	r0, r3
 80035be:	eeb0 0a67 	vmov.f32	s0, s15
 80035c2:	f000 f8dd 	bl	8003780 <GPS_nmea_to_dec>
 80035c6:	eef0 7a40 	vmov.f32	s15, s0
 80035ca:	4b5b      	ldr	r3, [pc, #364]	; (8003738 <GPS_parse+0x1f0>)
 80035cc:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e095      	b.n	8003700 <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 80035d4:	2206      	movs	r2, #6
 80035d6:	4959      	ldr	r1, [pc, #356]	; (800373c <GPS_parse+0x1f4>)
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f017 fcde 	bl	801af9a <strncmp>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d134      	bne.n	800364e <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 80035e4:	4b56      	ldr	r3, [pc, #344]	; (8003740 <GPS_parse+0x1f8>)
 80035e6:	9305      	str	r3, [sp, #20]
 80035e8:	4b56      	ldr	r3, [pc, #344]	; (8003744 <GPS_parse+0x1fc>)
 80035ea:	9304      	str	r3, [sp, #16]
 80035ec:	4b56      	ldr	r3, [pc, #344]	; (8003748 <GPS_parse+0x200>)
 80035ee:	9303      	str	r3, [sp, #12]
 80035f0:	4b4b      	ldr	r3, [pc, #300]	; (8003720 <GPS_parse+0x1d8>)
 80035f2:	9302      	str	r3, [sp, #8]
 80035f4:	4b4b      	ldr	r3, [pc, #300]	; (8003724 <GPS_parse+0x1dc>)
 80035f6:	9301      	str	r3, [sp, #4]
 80035f8:	4b4b      	ldr	r3, [pc, #300]	; (8003728 <GPS_parse+0x1e0>)
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	4b4b      	ldr	r3, [pc, #300]	; (800372c <GPS_parse+0x1e4>)
 80035fe:	4a4c      	ldr	r2, [pc, #304]	; (8003730 <GPS_parse+0x1e8>)
 8003600:	4952      	ldr	r1, [pc, #328]	; (800374c <GPS_parse+0x204>)
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f017 fc50 	bl	801aea8 <siscanf>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	dd77      	ble.n	80036fe <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 800360e:	4b4a      	ldr	r3, [pc, #296]	; (8003738 <GPS_parse+0x1f0>)
 8003610:	edd3 7a04 	vldr	s15, [r3, #16]
 8003614:	4b48      	ldr	r3, [pc, #288]	; (8003738 <GPS_parse+0x1f0>)
 8003616:	7e1b      	ldrb	r3, [r3, #24]
 8003618:	4618      	mov	r0, r3
 800361a:	eeb0 0a67 	vmov.f32	s0, s15
 800361e:	f000 f8af 	bl	8003780 <GPS_nmea_to_dec>
 8003622:	eef0 7a40 	vmov.f32	s15, s0
 8003626:	4b44      	ldr	r3, [pc, #272]	; (8003738 <GPS_parse+0x1f0>)
 8003628:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 800362c:	4b42      	ldr	r3, [pc, #264]	; (8003738 <GPS_parse+0x1f0>)
 800362e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003632:	4b41      	ldr	r3, [pc, #260]	; (8003738 <GPS_parse+0x1f0>)
 8003634:	7e5b      	ldrb	r3, [r3, #25]
 8003636:	4618      	mov	r0, r3
 8003638:	eeb0 0a67 	vmov.f32	s0, s15
 800363c:	f000 f8a0 	bl	8003780 <GPS_nmea_to_dec>
 8003640:	eef0 7a40 	vmov.f32	s15, s0
 8003644:	4b3c      	ldr	r3, [pc, #240]	; (8003738 <GPS_parse+0x1f0>)
 8003646:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 800364a:	2301      	movs	r3, #1
 800364c:	e058      	b.n	8003700 <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 800364e:	2206      	movs	r2, #6
 8003650:	493f      	ldr	r1, [pc, #252]	; (8003750 <GPS_parse+0x208>)
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f017 fca1 	bl	801af9a <strncmp>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d130      	bne.n	80036c0 <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 800365e:	4b3d      	ldr	r3, [pc, #244]	; (8003754 <GPS_parse+0x20c>)
 8003660:	9303      	str	r3, [sp, #12]
 8003662:	4b33      	ldr	r3, [pc, #204]	; (8003730 <GPS_parse+0x1e8>)
 8003664:	9302      	str	r3, [sp, #8]
 8003666:	4b2e      	ldr	r3, [pc, #184]	; (8003720 <GPS_parse+0x1d8>)
 8003668:	9301      	str	r3, [sp, #4]
 800366a:	4b2e      	ldr	r3, [pc, #184]	; (8003724 <GPS_parse+0x1dc>)
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	4b2e      	ldr	r3, [pc, #184]	; (8003728 <GPS_parse+0x1e0>)
 8003670:	4a2e      	ldr	r2, [pc, #184]	; (800372c <GPS_parse+0x1e4>)
 8003672:	4939      	ldr	r1, [pc, #228]	; (8003758 <GPS_parse+0x210>)
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f017 fc17 	bl	801aea8 <siscanf>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	dd3e      	ble.n	80036fe <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8003680:	4b2d      	ldr	r3, [pc, #180]	; (8003738 <GPS_parse+0x1f0>)
 8003682:	edd3 7a04 	vldr	s15, [r3, #16]
 8003686:	4b2c      	ldr	r3, [pc, #176]	; (8003738 <GPS_parse+0x1f0>)
 8003688:	7e1b      	ldrb	r3, [r3, #24]
 800368a:	4618      	mov	r0, r3
 800368c:	eeb0 0a67 	vmov.f32	s0, s15
 8003690:	f000 f876 	bl	8003780 <GPS_nmea_to_dec>
 8003694:	eef0 7a40 	vmov.f32	s15, s0
 8003698:	4b27      	ldr	r3, [pc, #156]	; (8003738 <GPS_parse+0x1f0>)
 800369a:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 800369e:	4b26      	ldr	r3, [pc, #152]	; (8003738 <GPS_parse+0x1f0>)
 80036a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80036a4:	4b24      	ldr	r3, [pc, #144]	; (8003738 <GPS_parse+0x1f0>)
 80036a6:	7e5b      	ldrb	r3, [r3, #25]
 80036a8:	4618      	mov	r0, r3
 80036aa:	eeb0 0a67 	vmov.f32	s0, s15
 80036ae:	f000 f867 	bl	8003780 <GPS_nmea_to_dec>
 80036b2:	eef0 7a40 	vmov.f32	s15, s0
 80036b6:	4b20      	ldr	r3, [pc, #128]	; (8003738 <GPS_parse+0x1f0>)
 80036b8:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 80036bc:	2301      	movs	r3, #1
 80036be:	e01f      	b.n	8003700 <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 80036c0:	2206      	movs	r2, #6
 80036c2:	4926      	ldr	r1, [pc, #152]	; (800375c <GPS_parse+0x214>)
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f017 fc68 	bl	801af9a <strncmp>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d116      	bne.n	80036fe <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 80036d0:	4b23      	ldr	r3, [pc, #140]	; (8003760 <GPS_parse+0x218>)
 80036d2:	9305      	str	r3, [sp, #20]
 80036d4:	4b23      	ldr	r3, [pc, #140]	; (8003764 <GPS_parse+0x21c>)
 80036d6:	9304      	str	r3, [sp, #16]
 80036d8:	4b23      	ldr	r3, [pc, #140]	; (8003768 <GPS_parse+0x220>)
 80036da:	9303      	str	r3, [sp, #12]
 80036dc:	4b1a      	ldr	r3, [pc, #104]	; (8003748 <GPS_parse+0x200>)
 80036de:	9302      	str	r3, [sp, #8]
 80036e0:	4b22      	ldr	r3, [pc, #136]	; (800376c <GPS_parse+0x224>)
 80036e2:	9301      	str	r3, [sp, #4]
 80036e4:	4b22      	ldr	r3, [pc, #136]	; (8003770 <GPS_parse+0x228>)
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	4b22      	ldr	r3, [pc, #136]	; (8003774 <GPS_parse+0x22c>)
 80036ea:	4a23      	ldr	r2, [pc, #140]	; (8003778 <GPS_parse+0x230>)
 80036ec:	4923      	ldr	r1, [pc, #140]	; (800377c <GPS_parse+0x234>)
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f017 fbda 	bl	801aea8 <siscanf>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	dd01      	ble.n	80036fe <GPS_parse+0x1b6>
            return 0;
 80036fa:	2300      	movs	r3, #0
 80036fc:	e000      	b.n	8003700 <GPS_parse+0x1b8>
    }
    return 0;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	0801f03c 	.word	0x0801f03c
 800370c:	20006d08 	.word	0x20006d08
 8003710:	20006d04 	.word	0x20006d04
 8003714:	20006d00 	.word	0x20006d00
 8003718:	20006cfc 	.word	0x20006cfc
 800371c:	20006cf8 	.word	0x20006cf8
 8003720:	20006cf5 	.word	0x20006cf5
 8003724:	20006ce8 	.word	0x20006ce8
 8003728:	20006cf4 	.word	0x20006cf4
 800372c:	20006cec 	.word	0x20006cec
 8003730:	20006cf0 	.word	0x20006cf0
 8003734:	0801f044 	.word	0x0801f044
 8003738:	20006cdc 	.word	0x20006cdc
 800373c:	0801f06c 	.word	0x0801f06c
 8003740:	20006d14 	.word	0x20006d14
 8003744:	20006d10 	.word	0x20006d10
 8003748:	20006d0c 	.word	0x20006d0c
 800374c:	0801f074 	.word	0x0801f074
 8003750:	0801f094 	.word	0x0801f094
 8003754:	20006d18 	.word	0x20006d18
 8003758:	0801f09c 	.word	0x0801f09c
 800375c:	0801f0b8 	.word	0x0801f0b8
 8003760:	20006d30 	.word	0x20006d30
 8003764:	20006d2c 	.word	0x20006d2c
 8003768:	20006d29 	.word	0x20006d29
 800376c:	20006d28 	.word	0x20006d28
 8003770:	20006d24 	.word	0x20006d24
 8003774:	20006d20 	.word	0x20006d20
 8003778:	20006d1c 	.word	0x20006d1c
 800377c:	0801f0c0 	.word	0x0801f0c0

08003780 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8003780:	b480      	push	{r7}
 8003782:	b087      	sub	sp, #28
 8003784:	af00      	add	r7, sp, #0
 8003786:	ed87 0a01 	vstr	s0, [r7, #4]
 800378a:	4603      	mov	r3, r0
 800378c:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 800378e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003792:	eddf 6a20 	vldr	s13, [pc, #128]	; 8003814 <GPS_nmea_to_dec+0x94>
 8003796:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800379a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800379e:	ee17 3a90 	vmov	r3, s15
 80037a2:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	2264      	movs	r2, #100	; 0x64
 80037a8:	fb02 f303 	mul.w	r3, r2, r3
 80037ac:	ee07 3a90 	vmov	s15, r3
 80037b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037b4:	ed97 7a01 	vldr	s14, [r7, #4]
 80037b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037bc:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 80037c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80037c4:	eddf 6a14 	vldr	s13, [pc, #80]	; 8003818 <GPS_nmea_to_dec+0x98>
 80037c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037cc:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	ee07 3a90 	vmov	s15, r3
 80037d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037da:	ed97 7a02 	vldr	s14, [r7, #8]
 80037de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037e2:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 80037e6:	78fb      	ldrb	r3, [r7, #3]
 80037e8:	2b53      	cmp	r3, #83	; 0x53
 80037ea:	d002      	beq.n	80037f2 <GPS_nmea_to_dec+0x72>
 80037ec:	78fb      	ldrb	r3, [r7, #3]
 80037ee:	2b57      	cmp	r3, #87	; 0x57
 80037f0:	d105      	bne.n	80037fe <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 80037f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80037f6:	eef1 7a67 	vneg.f32	s15, s15
 80037fa:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	ee07 3a90 	vmov	s15, r3
}
 8003804:	eeb0 0a67 	vmov.f32	s0, s15
 8003808:	371c      	adds	r7, #28
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	42c80000 	.word	0x42c80000
 8003818:	42700000 	.word	0x42700000

0800381c <GPS_init>:

/*
 * TODO MRT code
 */

void GPS_init(UART_HandleTypeDef* data_uart, UART_HandleTypeDef* transmit_uart){
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
	GPS_USART = data_uart;
 8003826:	4a09      	ldr	r2, [pc, #36]	; (800384c <GPS_init+0x30>)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6013      	str	r3, [r2, #0]
	SERIAL_USART = transmit_uart;
 800382c:	4a08      	ldr	r2, [pc, #32]	; (8003850 <GPS_init+0x34>)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(SERIAL_USART,"\r\n\r\nGPS Init\r\n\r\n",16,HAL_MAX_DELAY);
 8003832:	4b07      	ldr	r3, [pc, #28]	; (8003850 <GPS_init+0x34>)
 8003834:	6818      	ldr	r0, [r3, #0]
 8003836:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800383a:	2210      	movs	r2, #16
 800383c:	4905      	ldr	r1, [pc, #20]	; (8003854 <GPS_init+0x38>)
 800383e:	f009 fb4c 	bl	800ceda <HAL_UART_Transmit>
}
 8003842:	bf00      	nop
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	20005fa0 	.word	0x20005fa0
 8003850:	20006d98 	.word	0x20006d98
 8003854:	0801f0e0 	.word	0x0801f0e0

08003858 <__NVIC_SystemReset>:
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800385c:	f3bf 8f4f 	dsb	sy
}
 8003860:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003862:	4b06      	ldr	r3, [pc, #24]	; (800387c <__NVIC_SystemReset+0x24>)
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800386a:	4904      	ldr	r1, [pc, #16]	; (800387c <__NVIC_SystemReset+0x24>)
 800386c:	4b04      	ldr	r3, [pc, #16]	; (8003880 <__NVIC_SystemReset+0x28>)
 800386e:	4313      	orrs	r3, r2
 8003870:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003872:	f3bf 8f4f 	dsb	sy
}
 8003876:	bf00      	nop
    __NOP();
 8003878:	bf00      	nop
 800387a:	e7fd      	b.n	8003878 <__NVIC_SystemReset+0x20>
 800387c:	e000ed00 	.word	0xe000ed00
 8003880:	05fa0004 	.word	0x05fa0004

08003884 <MRT_externalFlashSetup>:


/*
 * User functions
 */
void MRT_externalFlashSetup(UART_HandleTypeDef* uart){
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < NB_OF_FLAGS; i++){
 800388c:	2300      	movs	r3, #0
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	e007      	b.n	80038a2 <MRT_externalFlashSetup+0x1e>
		FLAGS_NULL_BUFFER[i] = 0; //Setup the flags null buffer for the correct number of values
 8003892:	4a10      	ldr	r2, [pc, #64]	; (80038d4 <MRT_externalFlashSetup+0x50>)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4413      	add	r3, r2
 8003898:	2200      	movs	r2, #0
 800389a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	3301      	adds	r3, #1
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	ddf4      	ble.n	8003892 <MRT_externalFlashSetup+0xe>
	}

	if (!W25qxx_Init()) {
 80038a8:	f000 fb90 	bl	8003fcc <W25qxx_Init>
 80038ac:	4603      	mov	r3, r0
 80038ae:	f083 0301 	eor.w	r3, r3, #1
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <MRT_externalFlashSetup+0x38>
		Error_Handler(); // hangs and blinks LEDF
 80038b8:	f7ff f86c 	bl	8002994 <Error_Handler>
	}
	MRT_WUProcedure(); //Needs to be called before getFlags() and after the W25xx_Init()
 80038bc:	f002 fe94 	bl	80065e8 <MRT_WUProcedure>
	MRT_getFlags();
 80038c0:	f000 f86c 	bl	800399c <MRT_getFlags>
	MRT_resetInfo(uart);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f949 	bl	8003b5c <MRT_resetInfo>
}
 80038ca:	bf00      	nop
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	20006d9c 	.word	0x20006d9c

080038d8 <HAL_GPIO_EXTI_Callback>:


/*
 * Helper functions
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	4603      	mov	r3, r0
 80038e0:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == IN_Button_Pin){
 80038e2:	88fb      	ldrh	r3, [r7, #6]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <HAL_GPIO_EXTI_Callback+0x14>
		//Manual reset from external button
		MRT_resetFromStart();
 80038e8:	f000 f804 	bl	80038f4 <MRT_resetFromStart>
	}

}
 80038ec:	bf00      	nop
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <MRT_resetFromStart>:


void MRT_resetFromStart(void){
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
	//Clear wakeup and reset flags
	W25qxx_EraseSector(1);
 80038f8:	2001      	movs	r0, #1
 80038fa:	f000 fcb9 	bl	8004270 <W25qxx_EraseSector>
	W25qxx_WriteSector(FLAGS_NULL_BUFFER, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80038fe:	2303      	movs	r3, #3
 8003900:	2200      	movs	r2, #0
 8003902:	2101      	movs	r1, #1
 8003904:	4807      	ldr	r0, [pc, #28]	; (8003924 <MRT_resetFromStart+0x30>)
 8003906:	f000 fdfd 	bl	8004504 <W25qxx_WriteSector>

	//Clear RTC time (last recorded)
	W25qxx_EraseSector(2);
 800390a:	2002      	movs	r0, #2
 800390c:	f000 fcb0 	bl	8004270 <W25qxx_EraseSector>
	W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, 2, RTC_TIME_OFFSET, 3);
 8003910:	2303      	movs	r3, #3
 8003912:	2200      	movs	r2, #0
 8003914:	2102      	movs	r1, #2
 8003916:	4804      	ldr	r0, [pc, #16]	; (8003928 <MRT_resetFromStart+0x34>)
 8003918:	f000 fdf4 	bl	8004504 <W25qxx_WriteSector>

	//Clear all saved data of stages
	//TODO

	//Shutdown Iridium
	MRT_Static_Iridium_Shutdown();
 800391c:	f001 fa8e 	bl	8004e3c <MRT_Static_Iridium_Shutdown>

	//Reset function
	NVIC_SystemReset();
 8003920:	f7ff ff9a 	bl	8003858 <__NVIC_SystemReset>
 8003924:	20006d9c 	.word	0x20006d9c
 8003928:	20000418 	.word	0x20000418

0800392c <MRT_updateExternalFlashBuffers>:
}


void MRT_updateExternalFlashBuffers(void){
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003932:	2300      	movs	r3, #0
 8003934:	607b      	str	r3, [r7, #4]
 8003936:	e00c      	b.n	8003952 <MRT_updateExternalFlashBuffers+0x26>
		flash_flags_buffer[i] = *flash_flags[i];
 8003938:	4a14      	ldr	r2, [pc, #80]	; (800398c <MRT_updateExternalFlashBuffers+0x60>)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003940:	7819      	ldrb	r1, [r3, #0]
 8003942:	4a13      	ldr	r2, [pc, #76]	; (8003990 <MRT_updateExternalFlashBuffers+0x64>)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4413      	add	r3, r2
 8003948:	460a      	mov	r2, r1
 800394a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3301      	adds	r3, #1
 8003950:	607b      	str	r3, [r7, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2b02      	cmp	r3, #2
 8003956:	ddef      	ble.n	8003938 <MRT_updateExternalFlashBuffers+0xc>
	}
	for (int i = 0; i < 3; i++){
 8003958:	2300      	movs	r3, #0
 800395a:	603b      	str	r3, [r7, #0]
 800395c:	e00c      	b.n	8003978 <MRT_updateExternalFlashBuffers+0x4c>
		flash_time_buffer[i] = *flash_time[i];
 800395e:	4a0d      	ldr	r2, [pc, #52]	; (8003994 <MRT_updateExternalFlashBuffers+0x68>)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003966:	7819      	ldrb	r1, [r3, #0]
 8003968:	4a0b      	ldr	r2, [pc, #44]	; (8003998 <MRT_updateExternalFlashBuffers+0x6c>)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	4413      	add	r3, r2
 800396e:	460a      	mov	r2, r1
 8003970:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++){
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	3301      	adds	r3, #1
 8003976:	603b      	str	r3, [r7, #0]
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	2b02      	cmp	r3, #2
 800397c:	ddef      	ble.n	800395e <MRT_updateExternalFlashBuffers+0x32>
	}
}
 800397e:	bf00      	nop
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	20000004 	.word	0x20000004
 8003990:	20006040 	.word	0x20006040
 8003994:	20000010 	.word	0x20000010
 8003998:	200067a0 	.word	0x200067a0

0800399c <MRT_getFlags>:


void MRT_getFlags(void){
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0

	//Retrieve flags
	W25qxx_ReadSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80039a2:	2303      	movs	r3, #3
 80039a4:	2200      	movs	r2, #0
 80039a6:	2101      	movs	r1, #1
 80039a8:	4862      	ldr	r0, [pc, #392]	; (8003b34 <MRT_getFlags+0x198>)
 80039aa:	f000 fee9 	bl	8004780 <W25qxx_ReadSector>

	//Retrieve RTC time (last recorded)
	W25qxx_ReadSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 80039ae:	2303      	movs	r3, #3
 80039b0:	2200      	movs	r2, #0
 80039b2:	2102      	movs	r1, #2
 80039b4:	4860      	ldr	r0, [pc, #384]	; (8003b38 <MRT_getFlags+0x19c>)
 80039b6:	f000 fee3 	bl	8004780 <W25qxx_ReadSector>

	//If RTC detected a wake up, update the flash memory
	if (wu_flag == 1){
 80039ba:	4b60      	ldr	r3, [pc, #384]	; (8003b3c <MRT_getFlags+0x1a0>)
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d10c      	bne.n	80039dc <MRT_getFlags+0x40>
		flash_flags_buffer[WU_FLAG_OFFSET] = wu_flag;
 80039c2:	4b5e      	ldr	r3, [pc, #376]	; (8003b3c <MRT_getFlags+0x1a0>)
 80039c4:	781a      	ldrb	r2, [r3, #0]
 80039c6:	4b5b      	ldr	r3, [pc, #364]	; (8003b34 <MRT_getFlags+0x198>)
 80039c8:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 80039ca:	2001      	movs	r0, #1
 80039cc:	f000 fc50 	bl	8004270 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80039d0:	2303      	movs	r3, #3
 80039d2:	2200      	movs	r2, #0
 80039d4:	2101      	movs	r1, #1
 80039d6:	4857      	ldr	r0, [pc, #348]	; (8003b34 <MRT_getFlags+0x198>)
 80039d8:	f000 fd94 	bl	8004504 <W25qxx_WriteSector>
	}

	//Assign each value read to their variable
	for (int i = 0; i < NB_OF_FLAGS; i++){
 80039dc:	2300      	movs	r3, #0
 80039de:	607b      	str	r3, [r7, #4]
 80039e0:	e00b      	b.n	80039fa <MRT_getFlags+0x5e>
		*flash_flags[i] = flash_flags_buffer[i];
 80039e2:	4a57      	ldr	r2, [pc, #348]	; (8003b40 <MRT_getFlags+0x1a4>)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ea:	4952      	ldr	r1, [pc, #328]	; (8003b34 <MRT_getFlags+0x198>)
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	440a      	add	r2, r1
 80039f0:	7812      	ldrb	r2, [r2, #0]
 80039f2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3301      	adds	r3, #1
 80039f8:	607b      	str	r3, [r7, #4]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	ddf0      	ble.n	80039e2 <MRT_getFlags+0x46>
	}
	for (int i = 0; i < 3; i++){
 8003a00:	2300      	movs	r3, #0
 8003a02:	603b      	str	r3, [r7, #0]
 8003a04:	e00b      	b.n	8003a1e <MRT_getFlags+0x82>
		*flash_time[i] = flash_time_buffer[i];
 8003a06:	4a4f      	ldr	r2, [pc, #316]	; (8003b44 <MRT_getFlags+0x1a8>)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a0e:	494a      	ldr	r1, [pc, #296]	; (8003b38 <MRT_getFlags+0x19c>)
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	440a      	add	r2, r1
 8003a14:	7812      	ldrb	r2, [r2, #0]
 8003a16:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++){
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	603b      	str	r3, [r7, #0]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	ddf0      	ble.n	8003a06 <MRT_getFlags+0x6a>
	}


	//Check flags values
	//Reset flag
	if (reset_flag != 0 && reset_flag !=1){ //If random value (none was written)
 8003a24:	4b48      	ldr	r3, [pc, #288]	; (8003b48 <MRT_getFlags+0x1ac>)
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d013      	beq.n	8003a54 <MRT_getFlags+0xb8>
 8003a2c:	4b46      	ldr	r3, [pc, #280]	; (8003b48 <MRT_getFlags+0x1ac>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d00f      	beq.n	8003a54 <MRT_getFlags+0xb8>
		reset_flag = 0;
 8003a34:	4b44      	ldr	r3, [pc, #272]	; (8003b48 <MRT_getFlags+0x1ac>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 8003a3a:	4b43      	ldr	r3, [pc, #268]	; (8003b48 <MRT_getFlags+0x1ac>)
 8003a3c:	781a      	ldrb	r2, [r3, #0]
 8003a3e:	4b3d      	ldr	r3, [pc, #244]	; (8003b34 <MRT_getFlags+0x198>)
 8003a40:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(1);
 8003a42:	2001      	movs	r0, #1
 8003a44:	f000 fc14 	bl	8004270 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003a48:	2303      	movs	r3, #3
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	4839      	ldr	r0, [pc, #228]	; (8003b34 <MRT_getFlags+0x198>)
 8003a50:	f000 fd58 	bl	8004504 <W25qxx_WriteSector>
	}

	//Wake up flag
	if (wu_flag != 0 && wu_flag !=1){ //If random value (none was written)
 8003a54:	4b39      	ldr	r3, [pc, #228]	; (8003b3c <MRT_getFlags+0x1a0>)
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d013      	beq.n	8003a84 <MRT_getFlags+0xe8>
 8003a5c:	4b37      	ldr	r3, [pc, #220]	; (8003b3c <MRT_getFlags+0x1a0>)
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d00f      	beq.n	8003a84 <MRT_getFlags+0xe8>
		wu_flag = 0;
 8003a64:	4b35      	ldr	r3, [pc, #212]	; (8003b3c <MRT_getFlags+0x1a0>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[WU_FLAG_OFFSET] = wu_flag;
 8003a6a:	4b34      	ldr	r3, [pc, #208]	; (8003b3c <MRT_getFlags+0x1a0>)
 8003a6c:	781a      	ldrb	r2, [r3, #0]
 8003a6e:	4b31      	ldr	r3, [pc, #196]	; (8003b34 <MRT_getFlags+0x198>)
 8003a70:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 8003a72:	2001      	movs	r0, #1
 8003a74:	f000 fbfc 	bl	8004270 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003a78:	2303      	movs	r3, #3
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	482d      	ldr	r0, [pc, #180]	; (8003b34 <MRT_getFlags+0x198>)
 8003a80:	f000 fd40 	bl	8004504 <W25qxx_WriteSector>
	}

	//IWDG flag
	if (iwdg_flag != 0 && iwdg_flag !=1){ //If random value (none was written)
 8003a84:	4b31      	ldr	r3, [pc, #196]	; (8003b4c <MRT_getFlags+0x1b0>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d013      	beq.n	8003ab4 <MRT_getFlags+0x118>
 8003a8c:	4b2f      	ldr	r3, [pc, #188]	; (8003b4c <MRT_getFlags+0x1b0>)
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d00f      	beq.n	8003ab4 <MRT_getFlags+0x118>
		iwdg_flag = 0;
 8003a94:	4b2d      	ldr	r3, [pc, #180]	; (8003b4c <MRT_getFlags+0x1b0>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 8003a9a:	4b2c      	ldr	r3, [pc, #176]	; (8003b4c <MRT_getFlags+0x1b0>)
 8003a9c:	781a      	ldrb	r2, [r3, #0]
 8003a9e:	4b25      	ldr	r3, [pc, #148]	; (8003b34 <MRT_getFlags+0x198>)
 8003aa0:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(1);
 8003aa2:	2001      	movs	r0, #1
 8003aa4:	f000 fbe4 	bl	8004270 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	2200      	movs	r2, #0
 8003aac:	2101      	movs	r1, #1
 8003aae:	4821      	ldr	r0, [pc, #132]	; (8003b34 <MRT_getFlags+0x198>)
 8003ab0:	f000 fd28 	bl	8004504 <W25qxx_WriteSector>
	}


	//Check RTC time values
	//Hours
	if (!(prev_hours >= 0 && prev_hours < 24)){ //If random value (none was written)
 8003ab4:	4b26      	ldr	r3, [pc, #152]	; (8003b50 <MRT_getFlags+0x1b4>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b17      	cmp	r3, #23
 8003aba:	d90f      	bls.n	8003adc <MRT_getFlags+0x140>
		prev_hours = 0;
 8003abc:	4b24      	ldr	r3, [pc, #144]	; (8003b50 <MRT_getFlags+0x1b4>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_HOURS_OFFSET] = prev_hours;
 8003ac2:	4b23      	ldr	r3, [pc, #140]	; (8003b50 <MRT_getFlags+0x1b4>)
 8003ac4:	781a      	ldrb	r2, [r3, #0]
 8003ac6:	4b1c      	ldr	r3, [pc, #112]	; (8003b38 <MRT_getFlags+0x19c>)
 8003ac8:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(2);
 8003aca:	2002      	movs	r0, #2
 8003acc:	f000 fbd0 	bl	8004270 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	2102      	movs	r1, #2
 8003ad6:	4818      	ldr	r0, [pc, #96]	; (8003b38 <MRT_getFlags+0x19c>)
 8003ad8:	f000 fd14 	bl	8004504 <W25qxx_WriteSector>
	}

	//Minutes
	if (!(prev_min >= 0 && prev_min < 60)){ //If random value (none was written)
 8003adc:	4b1d      	ldr	r3, [pc, #116]	; (8003b54 <MRT_getFlags+0x1b8>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	2b3b      	cmp	r3, #59	; 0x3b
 8003ae2:	d90f      	bls.n	8003b04 <MRT_getFlags+0x168>
		prev_min = 0;
 8003ae4:	4b1b      	ldr	r3, [pc, #108]	; (8003b54 <MRT_getFlags+0x1b8>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_MIN_OFFSET] = prev_min;
 8003aea:	4b1a      	ldr	r3, [pc, #104]	; (8003b54 <MRT_getFlags+0x1b8>)
 8003aec:	781a      	ldrb	r2, [r3, #0]
 8003aee:	4b12      	ldr	r3, [pc, #72]	; (8003b38 <MRT_getFlags+0x19c>)
 8003af0:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(2);
 8003af2:	2002      	movs	r0, #2
 8003af4:	f000 fbbc 	bl	8004270 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003af8:	2303      	movs	r3, #3
 8003afa:	2200      	movs	r2, #0
 8003afc:	2102      	movs	r1, #2
 8003afe:	480e      	ldr	r0, [pc, #56]	; (8003b38 <MRT_getFlags+0x19c>)
 8003b00:	f000 fd00 	bl	8004504 <W25qxx_WriteSector>
	}

	//Seconds
	if (!(prev_sec >= 0 && prev_sec < 60)){ //If random value (none was written)
 8003b04:	4b14      	ldr	r3, [pc, #80]	; (8003b58 <MRT_getFlags+0x1bc>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	2b3b      	cmp	r3, #59	; 0x3b
 8003b0a:	d90f      	bls.n	8003b2c <MRT_getFlags+0x190>
		prev_sec = 0;
 8003b0c:	4b12      	ldr	r3, [pc, #72]	; (8003b58 <MRT_getFlags+0x1bc>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_SEC_OFFSET] = prev_sec;
 8003b12:	4b11      	ldr	r3, [pc, #68]	; (8003b58 <MRT_getFlags+0x1bc>)
 8003b14:	781a      	ldrb	r2, [r3, #0]
 8003b16:	4b08      	ldr	r3, [pc, #32]	; (8003b38 <MRT_getFlags+0x19c>)
 8003b18:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(2);
 8003b1a:	2002      	movs	r0, #2
 8003b1c:	f000 fba8 	bl	8004270 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003b20:	2303      	movs	r3, #3
 8003b22:	2200      	movs	r2, #0
 8003b24:	2102      	movs	r1, #2
 8003b26:	4804      	ldr	r0, [pc, #16]	; (8003b38 <MRT_getFlags+0x19c>)
 8003b28:	f000 fcec 	bl	8004504 <W25qxx_WriteSector>
	}
}
 8003b2c:	bf00      	nop
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	20006040 	.word	0x20006040
 8003b38:	200067a0 	.word	0x200067a0
 8003b3c:	20000649 	.word	0x20000649
 8003b40:	20000004 	.word	0x20000004
 8003b44:	20000010 	.word	0x20000010
 8003b48:	20000412 	.word	0x20000412
 8003b4c:	20000413 	.word	0x20000413
 8003b50:	20000414 	.word	0x20000414
 8003b54:	20000415 	.word	0x20000415
 8003b58:	20000416 	.word	0x20000416

08003b5c <MRT_resetInfo>:


void MRT_resetInfo(UART_HandleTypeDef* uart){
 8003b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b5e:	b0a1      	sub	sp, #132	; 0x84
 8003b60:	af04      	add	r7, sp, #16
 8003b62:	6078      	str	r0, [r7, #4]

	  char buffer[100];
	  sprintf(buffer,"Reset: %i,  WU: %i,  IWDG: %i\r\nPrevious RTC time: %i:%i:%i\r\n",reset_flag, wu_flag, iwdg_flag, prev_hours, prev_min, prev_sec);
 8003b64:	4b3f      	ldr	r3, [pc, #252]	; (8003c64 <MRT_resetInfo+0x108>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	461d      	mov	r5, r3
 8003b6a:	4b3f      	ldr	r3, [pc, #252]	; (8003c68 <MRT_resetInfo+0x10c>)
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	461e      	mov	r6, r3
 8003b70:	4b3e      	ldr	r3, [pc, #248]	; (8003c6c <MRT_resetInfo+0x110>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	461a      	mov	r2, r3
 8003b76:	4b3e      	ldr	r3, [pc, #248]	; (8003c70 <MRT_resetInfo+0x114>)
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	4b3d      	ldr	r3, [pc, #244]	; (8003c74 <MRT_resetInfo+0x118>)
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	461c      	mov	r4, r3
 8003b82:	4b3d      	ldr	r3, [pc, #244]	; (8003c78 <MRT_resetInfo+0x11c>)
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	f107 000c 	add.w	r0, r7, #12
 8003b8a:	9303      	str	r3, [sp, #12]
 8003b8c:	9402      	str	r4, [sp, #8]
 8003b8e:	9101      	str	r1, [sp, #4]
 8003b90:	9200      	str	r2, [sp, #0]
 8003b92:	4633      	mov	r3, r6
 8003b94:	462a      	mov	r2, r5
 8003b96:	4939      	ldr	r1, [pc, #228]	; (8003c7c <MRT_resetInfo+0x120>)
 8003b98:	f017 f966 	bl	801ae68 <siprintf>
	  HAL_UART_Transmit(uart, buffer, strlen(buffer), HAL_MAX_DELAY);
 8003b9c:	f107 030c 	add.w	r3, r7, #12
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fc fb25 	bl	80001f0 <strlen>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	f107 010c 	add.w	r1, r7, #12
 8003bae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f009 f991 	bl	800ceda <HAL_UART_Transmit>

	  //Check if IWDG is being deactivated
	  if (iwdg_flag==1){
 8003bb8:	4b2c      	ldr	r3, [pc, #176]	; (8003c6c <MRT_resetInfo+0x110>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d11d      	bne.n	8003bfc <MRT_resetInfo+0xa0>
		  HAL_UART_Transmit(uart, "Deactivating IWDG\r\n", 19, HAL_MAX_DELAY);
 8003bc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bc4:	2213      	movs	r2, #19
 8003bc6:	492e      	ldr	r1, [pc, #184]	; (8003c80 <MRT_resetInfo+0x124>)
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f009 f986 	bl	800ceda <HAL_UART_Transmit>

		  iwdg_flag = 0; //Flip flag
 8003bce:	4b27      	ldr	r3, [pc, #156]	; (8003c6c <MRT_resetInfo+0x110>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
		  flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 8003bd4:	4b25      	ldr	r3, [pc, #148]	; (8003c6c <MRT_resetInfo+0x110>)
 8003bd6:	781a      	ldrb	r2, [r3, #0]
 8003bd8:	4b2a      	ldr	r3, [pc, #168]	; (8003c84 <MRT_resetInfo+0x128>)
 8003bda:	709a      	strb	r2, [r3, #2]
		  W25qxx_EraseSector(1);
 8003bdc:	2001      	movs	r0, #1
 8003bde:	f000 fb47 	bl	8004270 <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003be2:	2303      	movs	r3, #3
 8003be4:	2200      	movs	r2, #0
 8003be6:	2101      	movs	r1, #1
 8003be8:	4826      	ldr	r0, [pc, #152]	; (8003c84 <MRT_resetInfo+0x128>)
 8003bea:	f000 fc8b 	bl	8004504 <W25qxx_WriteSector>

		  //Disable alarm A only
		  //MRT_setAlarmA(0,0,0); TODO can be removed?

		  HAL_Delay(1000);
 8003bee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bf2:	f003 f98b 	bl	8006f0c <HAL_Delay>

		  //Go to sleep
		  MRT_StandByMode(SLEEP_TIME);
 8003bf6:	201e      	movs	r0, #30
 8003bf8:	f002 fda4 	bl	8006744 <MRT_StandByMode>
	  }


	  //Check if we are after waking up
	  if (wu_flag==1){
 8003bfc:	4b1a      	ldr	r3, [pc, #104]	; (8003c68 <MRT_resetInfo+0x10c>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d10f      	bne.n	8003c24 <MRT_resetInfo+0xc8>
		  HAL_UART_Transmit(uart, "FC wake up\r\n", 12, HAL_MAX_DELAY);
 8003c04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c08:	220c      	movs	r2, #12
 8003c0a:	491f      	ldr	r1, [pc, #124]	; (8003c88 <MRT_resetInfo+0x12c>)
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f009 f964 	bl	800ceda <HAL_UART_Transmit>

		  //Deactivate alarm interrupts
		  HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);
 8003c12:	2029      	movs	r0, #41	; 0x29
 8003c14:	f003 fd16 	bl	8007644 <HAL_NVIC_DisableIRQ>
		  __HAL_RTC_ALARM_EXTI_DISABLE_IT();
 8003c18:	4b1c      	ldr	r3, [pc, #112]	; (8003c8c <MRT_resetInfo+0x130>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a1b      	ldr	r2, [pc, #108]	; (8003c8c <MRT_resetInfo+0x130>)
 8003c1e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003c22:	6013      	str	r3, [r2, #0]
	  }


	  //Check if we start from the beginning
	  if (reset_flag==0){
 8003c24:	4b0f      	ldr	r3, [pc, #60]	; (8003c64 <MRT_resetInfo+0x108>)
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d116      	bne.n	8003c5a <MRT_resetInfo+0xfe>
		  HAL_UART_Transmit(uart, "FC restarted\r\n", 14, HAL_MAX_DELAY);
 8003c2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c30:	220e      	movs	r2, #14
 8003c32:	4917      	ldr	r1, [pc, #92]	; (8003c90 <MRT_resetInfo+0x134>)
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f009 f950 	bl	800ceda <HAL_UART_Transmit>

		  reset_flag = 1; //Flip flag
 8003c3a:	4b0a      	ldr	r3, [pc, #40]	; (8003c64 <MRT_resetInfo+0x108>)
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
	      flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 8003c40:	4b08      	ldr	r3, [pc, #32]	; (8003c64 <MRT_resetInfo+0x108>)
 8003c42:	781a      	ldrb	r2, [r3, #0]
 8003c44:	4b0f      	ldr	r3, [pc, #60]	; (8003c84 <MRT_resetInfo+0x128>)
 8003c46:	701a      	strb	r2, [r3, #0]
		  W25qxx_EraseSector(1);
 8003c48:	2001      	movs	r0, #1
 8003c4a:	f000 fb11 	bl	8004270 <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003c4e:	2303      	movs	r3, #3
 8003c50:	2200      	movs	r2, #0
 8003c52:	2101      	movs	r1, #1
 8003c54:	480b      	ldr	r0, [pc, #44]	; (8003c84 <MRT_resetInfo+0x128>)
 8003c56:	f000 fc55 	bl	8004504 <W25qxx_WriteSector>
	  }
}
 8003c5a:	bf00      	nop
 8003c5c:	3774      	adds	r7, #116	; 0x74
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c62:	bf00      	nop
 8003c64:	20000412 	.word	0x20000412
 8003c68:	20000649 	.word	0x20000649
 8003c6c:	20000413 	.word	0x20000413
 8003c70:	20000414 	.word	0x20000414
 8003c74:	20000415 	.word	0x20000415
 8003c78:	20000416 	.word	0x20000416
 8003c7c:	0801f124 	.word	0x0801f124
 8003c80:	0801f164 	.word	0x0801f164
 8003c84:	20006040 	.word	0x20006040
 8003c88:	0801f178 	.word	0x0801f178
 8003c8c:	40013c00 	.word	0x40013c00
 8003c90:	0801f188 	.word	0x0801f188

08003c94 <MRT_saveRTCTime>:


/*
 * Update and save the RTC time in external flash memory
 */
void MRT_saveRTCTime(void){
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
	MRT_updateExternalFlashBuffers();
 8003c98:	f7ff fe48 	bl	800392c <MRT_updateExternalFlashBuffers>

	//Write new RTC time to flash memory
	W25qxx_EraseSector(2);
 8003c9c:	2002      	movs	r0, #2
 8003c9e:	f000 fae7 	bl	8004270 <W25qxx_EraseSector>
	W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	2102      	movs	r1, #2
 8003ca8:	4802      	ldr	r0, [pc, #8]	; (8003cb4 <MRT_saveRTCTime+0x20>)
 8003caa:	f000 fc2b 	bl	8004504 <W25qxx_WriteSector>
}
 8003cae:	bf00      	nop
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	200067a0 	.word	0x200067a0

08003cb8 <MRT_getContinuity>:
 * Checks the continuity of the gates
 *
 * returns a binary number in its decimal form. Each bit is the state of a gate.
 * bit3 bit2 bit1 bit0 = drogue1 drogue2 prop1 prop2
 */
uint8_t MRT_getContinuity(void){
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
	uint8_t drogue1 = HAL_GPIO_ReadPin(IN_EJ_Drogue_Cont_GPIO_Port, IN_EJ_Drogue_Cont_Pin);
 8003cbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003cc2:	4815      	ldr	r0, [pc, #84]	; (8003d18 <MRT_getContinuity+0x60>)
 8003cc4:	f003 fe78 	bl	80079b8 <HAL_GPIO_ReadPin>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	71fb      	strb	r3, [r7, #7]
	uint8_t drogue2 = HAL_GPIO_ReadPin(IN_EJ_Main_Cont_GPIO_Port, IN_EJ_Main_Cont_Pin);
 8003ccc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003cd0:	4811      	ldr	r0, [pc, #68]	; (8003d18 <MRT_getContinuity+0x60>)
 8003cd2:	f003 fe71 	bl	80079b8 <HAL_GPIO_ReadPin>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	71bb      	strb	r3, [r7, #6]
	uint8_t prop1 = HAL_GPIO_ReadPin(IN_PyroValve_Cont_1_GPIO_Port, IN_PyroValve_Cont_1_Pin);
 8003cda:	2101      	movs	r1, #1
 8003cdc:	480e      	ldr	r0, [pc, #56]	; (8003d18 <MRT_getContinuity+0x60>)
 8003cde:	f003 fe6b 	bl	80079b8 <HAL_GPIO_ReadPin>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	717b      	strb	r3, [r7, #5]
	uint8_t prop2 = HAL_GPIO_ReadPin(IN_PyroValve_Cont_2_GPIO_Port, IN_PyroValve_Cont_2_Pin);
 8003ce6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003cea:	480c      	ldr	r0, [pc, #48]	; (8003d1c <MRT_getContinuity+0x64>)
 8003cec:	f003 fe64 	bl	80079b8 <HAL_GPIO_ReadPin>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	713b      	strb	r3, [r7, #4]
	uint8_t continuity = 8*drogue1 + 4*drogue2 + 2*prop1 + prop2;
 8003cf4:	79fb      	ldrb	r3, [r7, #7]
 8003cf6:	005a      	lsls	r2, r3, #1
 8003cf8:	79bb      	ldrb	r3, [r7, #6]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	005a      	lsls	r2, r3, #1
 8003cfe:	797b      	ldrb	r3, [r7, #5]
 8003d00:	4413      	add	r3, r2
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	793b      	ldrb	r3, [r7, #4]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	70fb      	strb	r3, [r7, #3]
	return continuity;
 8003d0e:	78fb      	ldrb	r3, [r7, #3]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3708      	adds	r7, #8
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	40021800 	.word	0x40021800
 8003d1c:	40021400 	.word	0x40021400

08003d20 <MRT_getAltitude>:

/*
 * Gets the altitude using temperature, pressure and sea-level pressure
 *https://www.mide.com/air-pressure-at-altitude-calculator
 */
float MRT_getAltitude(float pressure){
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	ed87 0a01 	vstr	s0, [r7, #4]
	return BASE_HEIGHT+(SEA_LEVEL_TEMPERATURE/-0.0065)*(pow(pressure/SEA_LEVEL_PRESSURE,(-R*-0.0065/(go*M)))-1);
 8003d2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d2e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003db0 <MRT_getAltitude+0x90>
 8003d32:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003d36:	ee16 0a90 	vmov	r0, s13
 8003d3a:	f7fc fc15 	bl	8000568 <__aeabi_f2d>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	460b      	mov	r3, r1
 8003d42:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8003da0 <MRT_getAltitude+0x80>
 8003d46:	ec43 2b10 	vmov	d0, r2, r3
 8003d4a:	f014 fef7 	bl	8018b3c <pow>
 8003d4e:	ec51 0b10 	vmov	r0, r1, d0
 8003d52:	f04f 0200 	mov.w	r2, #0
 8003d56:	4b17      	ldr	r3, [pc, #92]	; (8003db4 <MRT_getAltitude+0x94>)
 8003d58:	f7fc faa6 	bl	80002a8 <__aeabi_dsub>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4610      	mov	r0, r2
 8003d62:	4619      	mov	r1, r3
 8003d64:	a310      	add	r3, pc, #64	; (adr r3, 8003da8 <MRT_getAltitude+0x88>)
 8003d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6a:	f7fc fc55 	bl	8000618 <__aeabi_dmul>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	460b      	mov	r3, r1
 8003d72:	4610      	mov	r0, r2
 8003d74:	4619      	mov	r1, r3
 8003d76:	f04f 0200 	mov.w	r2, #0
 8003d7a:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <MRT_getAltitude+0x98>)
 8003d7c:	f7fc fa96 	bl	80002ac <__adddf3>
 8003d80:	4602      	mov	r2, r0
 8003d82:	460b      	mov	r3, r1
 8003d84:	4610      	mov	r0, r2
 8003d86:	4619      	mov	r1, r3
 8003d88:	f7fc ff3e 	bl	8000c08 <__aeabi_d2f>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	ee07 3a90 	vmov	s15, r3
}
 8003d92:	eeb0 0a67 	vmov.f32	s0, s15
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	f3af 8000 	nop.w
 8003da0:	b537afba 	.word	0xb537afba
 8003da4:	3fc85a8b 	.word	0x3fc85a8b
 8003da8:	76276276 	.word	0x76276276
 8003dac:	c0e481c2 	.word	0xc0e481c2
 8003db0:	447d8000 	.word	0x447d8000
 8003db4:	3ff00000 	.word	0x3ff00000
 8003db8:	40590000 	.word	0x40590000

08003dbc <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af02      	add	r7, sp, #8
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8003dc6:	f107 020f 	add.w	r2, r7, #15
 8003dca:	1df9      	adds	r1, r7, #7
 8003dcc:	2364      	movs	r3, #100	; 0x64
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	4804      	ldr	r0, [pc, #16]	; (8003de4 <W25qxx_Spi+0x28>)
 8003dd4:	f007 ff76 	bl	800bcc4 <HAL_SPI_TransmitReceive>
	return ret;
 8003dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	20005fa4 	.word	0x20005fa4

08003de8 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8003dee:	2300      	movs	r3, #0
 8003df0:	60fb      	str	r3, [r7, #12]
 8003df2:	2300      	movs	r3, #0
 8003df4:	60bb      	str	r3, [r7, #8]
 8003df6:	2300      	movs	r3, #0
 8003df8:	607b      	str	r3, [r7, #4]
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003dfe:	2200      	movs	r2, #0
 8003e00:	2140      	movs	r1, #64	; 0x40
 8003e02:	4813      	ldr	r0, [pc, #76]	; (8003e50 <W25qxx_ReadID+0x68>)
 8003e04:	f003 fdf0 	bl	80079e8 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8003e08:	209f      	movs	r0, #159	; 0x9f
 8003e0a:	f7ff ffd7 	bl	8003dbc <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003e0e:	20a5      	movs	r0, #165	; 0xa5
 8003e10:	f7ff ffd4 	bl	8003dbc <W25qxx_Spi>
 8003e14:	4603      	mov	r3, r0
 8003e16:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003e18:	20a5      	movs	r0, #165	; 0xa5
 8003e1a:	f7ff ffcf 	bl	8003dbc <W25qxx_Spi>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003e22:	20a5      	movs	r0, #165	; 0xa5
 8003e24:	f7ff ffca 	bl	8003dbc <W25qxx_Spi>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	2140      	movs	r1, #64	; 0x40
 8003e30:	4807      	ldr	r0, [pc, #28]	; (8003e50 <W25qxx_ReadID+0x68>)
 8003e32:	f003 fdd9 	bl	80079e8 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	041a      	lsls	r2, r3, #16
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	021b      	lsls	r3, r3, #8
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]
	return Temp;
 8003e46:	68fb      	ldr	r3, [r7, #12]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40020c00 	.word	0x40020c00

08003e54 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8003e54:	b590      	push	{r4, r7, lr}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	2140      	movs	r1, #64	; 0x40
 8003e5e:	4816      	ldr	r0, [pc, #88]	; (8003eb8 <W25qxx_ReadUniqID+0x64>)
 8003e60:	f003 fdc2 	bl	80079e8 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8003e64:	204b      	movs	r0, #75	; 0x4b
 8003e66:	f7ff ffa9 	bl	8003dbc <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	71fb      	strb	r3, [r7, #7]
 8003e6e:	e005      	b.n	8003e7c <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003e70:	20a5      	movs	r0, #165	; 0xa5
 8003e72:	f7ff ffa3 	bl	8003dbc <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003e76:	79fb      	ldrb	r3, [r7, #7]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	71fb      	strb	r3, [r7, #7]
 8003e7c:	79fb      	ldrb	r3, [r7, #7]
 8003e7e:	2b03      	cmp	r3, #3
 8003e80:	d9f6      	bls.n	8003e70 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8003e82:	2300      	movs	r3, #0
 8003e84:	71bb      	strb	r3, [r7, #6]
 8003e86:	e00b      	b.n	8003ea0 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003e88:	79bc      	ldrb	r4, [r7, #6]
 8003e8a:	20a5      	movs	r0, #165	; 0xa5
 8003e8c:	f7ff ff96 	bl	8003dbc <W25qxx_Spi>
 8003e90:	4603      	mov	r3, r0
 8003e92:	461a      	mov	r2, r3
 8003e94:	4b09      	ldr	r3, [pc, #36]	; (8003ebc <W25qxx_ReadUniqID+0x68>)
 8003e96:	4423      	add	r3, r4
 8003e98:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8003e9a:	79bb      	ldrb	r3, [r7, #6]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	71bb      	strb	r3, [r7, #6]
 8003ea0:	79bb      	ldrb	r3, [r7, #6]
 8003ea2:	2b07      	cmp	r3, #7
 8003ea4:	d9f0      	bls.n	8003e88 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	2140      	movs	r1, #64	; 0x40
 8003eaa:	4803      	ldr	r0, [pc, #12]	; (8003eb8 <W25qxx_ReadUniqID+0x64>)
 8003eac:	f003 fd9c 	bl	80079e8 <HAL_GPIO_WritePin>
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd90      	pop	{r4, r7, pc}
 8003eb8:	40020c00 	.word	0x40020c00
 8003ebc:	20006da0 	.word	0x20006da0

08003ec0 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	2140      	movs	r1, #64	; 0x40
 8003ec8:	4807      	ldr	r0, [pc, #28]	; (8003ee8 <W25qxx_WriteEnable+0x28>)
 8003eca:	f003 fd8d 	bl	80079e8 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8003ece:	2006      	movs	r0, #6
 8003ed0:	f7ff ff74 	bl	8003dbc <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	2140      	movs	r1, #64	; 0x40
 8003ed8:	4803      	ldr	r0, [pc, #12]	; (8003ee8 <W25qxx_WriteEnable+0x28>)
 8003eda:	f003 fd85 	bl	80079e8 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8003ede:	2001      	movs	r0, #1
 8003ee0:	f010 fe91 	bl	8014c06 <osDelay>
}
 8003ee4:	bf00      	nop
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40020c00 	.word	0x40020c00

08003eec <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003efa:	2200      	movs	r2, #0
 8003efc:	2140      	movs	r1, #64	; 0x40
 8003efe:	481c      	ldr	r0, [pc, #112]	; (8003f70 <W25qxx_ReadStatusRegister+0x84>)
 8003f00:	f003 fd72 	bl	80079e8 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8003f04:	79fb      	ldrb	r3, [r7, #7]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d10c      	bne.n	8003f24 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8003f0a:	2005      	movs	r0, #5
 8003f0c:	f7ff ff56 	bl	8003dbc <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003f10:	20a5      	movs	r0, #165	; 0xa5
 8003f12:	f7ff ff53 	bl	8003dbc <W25qxx_Spi>
 8003f16:	4603      	mov	r3, r0
 8003f18:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8003f1a:	4a16      	ldr	r2, [pc, #88]	; (8003f74 <W25qxx_ReadStatusRegister+0x88>)
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
 8003f1e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8003f22:	e01b      	b.n	8003f5c <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8003f24:	79fb      	ldrb	r3, [r7, #7]
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d10c      	bne.n	8003f44 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8003f2a:	2035      	movs	r0, #53	; 0x35
 8003f2c:	f7ff ff46 	bl	8003dbc <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003f30:	20a5      	movs	r0, #165	; 0xa5
 8003f32:	f7ff ff43 	bl	8003dbc <W25qxx_Spi>
 8003f36:	4603      	mov	r3, r0
 8003f38:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8003f3a:	4a0e      	ldr	r2, [pc, #56]	; (8003f74 <W25qxx_ReadStatusRegister+0x88>)
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
 8003f3e:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8003f42:	e00b      	b.n	8003f5c <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8003f44:	2015      	movs	r0, #21
 8003f46:	f7ff ff39 	bl	8003dbc <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003f4a:	20a5      	movs	r0, #165	; 0xa5
 8003f4c:	f7ff ff36 	bl	8003dbc <W25qxx_Spi>
 8003f50:	4603      	mov	r3, r0
 8003f52:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8003f54:	4a07      	ldr	r2, [pc, #28]	; (8003f74 <W25qxx_ReadStatusRegister+0x88>)
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
 8003f58:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	2140      	movs	r1, #64	; 0x40
 8003f60:	4803      	ldr	r0, [pc, #12]	; (8003f70 <W25qxx_ReadStatusRegister+0x84>)
 8003f62:	f003 fd41 	bl	80079e8 <HAL_GPIO_WritePin>
	return status;
 8003f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	40020c00 	.word	0x40020c00
 8003f74:	20006da0 	.word	0x20006da0

08003f78 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8003f7c:	2001      	movs	r0, #1
 8003f7e:	f010 fe42 	bl	8014c06 <osDelay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003f82:	2200      	movs	r2, #0
 8003f84:	2140      	movs	r1, #64	; 0x40
 8003f86:	480f      	ldr	r0, [pc, #60]	; (8003fc4 <W25qxx_WaitForWriteEnd+0x4c>)
 8003f88:	f003 fd2e 	bl	80079e8 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8003f8c:	2005      	movs	r0, #5
 8003f8e:	f7ff ff15 	bl	8003dbc <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003f92:	20a5      	movs	r0, #165	; 0xa5
 8003f94:	f7ff ff12 	bl	8003dbc <W25qxx_Spi>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	4b0a      	ldr	r3, [pc, #40]	; (8003fc8 <W25qxx_WaitForWriteEnd+0x50>)
 8003f9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8003fa2:	2001      	movs	r0, #1
 8003fa4:	f010 fe2f 	bl	8014c06 <osDelay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8003fa8:	4b07      	ldr	r3, [pc, #28]	; (8003fc8 <W25qxx_WaitForWriteEnd+0x50>)
 8003faa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1ed      	bne.n	8003f92 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	2140      	movs	r1, #64	; 0x40
 8003fba:	4802      	ldr	r0, [pc, #8]	; (8003fc4 <W25qxx_WaitForWriteEnd+0x4c>)
 8003fbc:	f003 fd14 	bl	80079e8 <HAL_GPIO_WritePin>
}
 8003fc0:	bf00      	nop
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	40020c00 	.word	0x40020c00
 8003fc8:	20006da0 	.word	0x20006da0

08003fcc <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8003fd2:	4b90      	ldr	r3, [pc, #576]	; (8004214 <W25qxx_Init+0x248>)
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8003fda:	e002      	b.n	8003fe2 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8003fdc:	2001      	movs	r0, #1
 8003fde:	f010 fe12 	bl	8014c06 <osDelay>
	while (HAL_GetTick() < 100)
 8003fe2:	f002 ff87 	bl	8006ef4 <HAL_GetTick>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b63      	cmp	r3, #99	; 0x63
 8003fea:	d9f7      	bls.n	8003fdc <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003fec:	2201      	movs	r2, #1
 8003fee:	2140      	movs	r1, #64	; 0x40
 8003ff0:	4889      	ldr	r0, [pc, #548]	; (8004218 <W25qxx_Init+0x24c>)
 8003ff2:	f003 fcf9 	bl	80079e8 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8003ff6:	2064      	movs	r0, #100	; 0x64
 8003ff8:	f010 fe05 	bl	8014c06 <osDelay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 8003ffc:	4887      	ldr	r0, [pc, #540]	; (800421c <W25qxx_Init+0x250>)
 8003ffe:	f016 fe67 	bl	801acd0 <puts>
#endif
	id = W25qxx_ReadID();
 8004002:	f7ff fef1 	bl	8003de8 <W25qxx_ReadID>
 8004006:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 8004008:	6879      	ldr	r1, [r7, #4]
 800400a:	4885      	ldr	r0, [pc, #532]	; (8004220 <W25qxx_Init+0x254>)
 800400c:	f016 fdda 	bl	801abc4 <iprintf>
#endif
	switch (id & 0x000000FF)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	b2db      	uxtb	r3, r3
 8004014:	3b11      	subs	r3, #17
 8004016:	2b0f      	cmp	r3, #15
 8004018:	f200 808b 	bhi.w	8004132 <W25qxx_Init+0x166>
 800401c:	a201      	add	r2, pc, #4	; (adr r2, 8004024 <W25qxx_Init+0x58>)
 800401e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004022:	bf00      	nop
 8004024:	0800411f 	.word	0x0800411f
 8004028:	0800410b 	.word	0x0800410b
 800402c:	080040f7 	.word	0x080040f7
 8004030:	080040e3 	.word	0x080040e3
 8004034:	080040cf 	.word	0x080040cf
 8004038:	080040bb 	.word	0x080040bb
 800403c:	080040a7 	.word	0x080040a7
 8004040:	08004091 	.word	0x08004091
 8004044:	0800407b 	.word	0x0800407b
 8004048:	08004133 	.word	0x08004133
 800404c:	08004133 	.word	0x08004133
 8004050:	08004133 	.word	0x08004133
 8004054:	08004133 	.word	0x08004133
 8004058:	08004133 	.word	0x08004133
 800405c:	08004133 	.word	0x08004133
 8004060:	08004065 	.word	0x08004065
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8004064:	4b6b      	ldr	r3, [pc, #428]	; (8004214 <W25qxx_Init+0x248>)
 8004066:	220a      	movs	r2, #10
 8004068:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 800406a:	4b6a      	ldr	r3, [pc, #424]	; (8004214 <W25qxx_Init+0x248>)
 800406c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004070:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 8004072:	486c      	ldr	r0, [pc, #432]	; (8004224 <W25qxx_Init+0x258>)
 8004074:	f016 fe2c 	bl	801acd0 <puts>
#endif
		break;
 8004078:	e064      	b.n	8004144 <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 800407a:	4b66      	ldr	r3, [pc, #408]	; (8004214 <W25qxx_Init+0x248>)
 800407c:	2209      	movs	r2, #9
 800407e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8004080:	4b64      	ldr	r3, [pc, #400]	; (8004214 <W25qxx_Init+0x248>)
 8004082:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004086:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 8004088:	4867      	ldr	r0, [pc, #412]	; (8004228 <W25qxx_Init+0x25c>)
 800408a:	f016 fe21 	bl	801acd0 <puts>
#endif
		break;
 800408e:	e059      	b.n	8004144 <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8004090:	4b60      	ldr	r3, [pc, #384]	; (8004214 <W25qxx_Init+0x248>)
 8004092:	2208      	movs	r2, #8
 8004094:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8004096:	4b5f      	ldr	r3, [pc, #380]	; (8004214 <W25qxx_Init+0x248>)
 8004098:	f44f 7280 	mov.w	r2, #256	; 0x100
 800409c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 800409e:	4863      	ldr	r0, [pc, #396]	; (800422c <W25qxx_Init+0x260>)
 80040a0:	f016 fe16 	bl	801acd0 <puts>
#endif
		break;
 80040a4:	e04e      	b.n	8004144 <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 80040a6:	4b5b      	ldr	r3, [pc, #364]	; (8004214 <W25qxx_Init+0x248>)
 80040a8:	2207      	movs	r2, #7
 80040aa:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 80040ac:	4b59      	ldr	r3, [pc, #356]	; (8004214 <W25qxx_Init+0x248>)
 80040ae:	2280      	movs	r2, #128	; 0x80
 80040b0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 80040b2:	485f      	ldr	r0, [pc, #380]	; (8004230 <W25qxx_Init+0x264>)
 80040b4:	f016 fe0c 	bl	801acd0 <puts>
#endif
		break;
 80040b8:	e044      	b.n	8004144 <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 80040ba:	4b56      	ldr	r3, [pc, #344]	; (8004214 <W25qxx_Init+0x248>)
 80040bc:	2206      	movs	r2, #6
 80040be:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 80040c0:	4b54      	ldr	r3, [pc, #336]	; (8004214 <W25qxx_Init+0x248>)
 80040c2:	2240      	movs	r2, #64	; 0x40
 80040c4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 80040c6:	485b      	ldr	r0, [pc, #364]	; (8004234 <W25qxx_Init+0x268>)
 80040c8:	f016 fe02 	bl	801acd0 <puts>
#endif
		break;
 80040cc:	e03a      	b.n	8004144 <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 80040ce:	4b51      	ldr	r3, [pc, #324]	; (8004214 <W25qxx_Init+0x248>)
 80040d0:	2205      	movs	r2, #5
 80040d2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 80040d4:	4b4f      	ldr	r3, [pc, #316]	; (8004214 <W25qxx_Init+0x248>)
 80040d6:	2220      	movs	r2, #32
 80040d8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 80040da:	4857      	ldr	r0, [pc, #348]	; (8004238 <W25qxx_Init+0x26c>)
 80040dc:	f016 fdf8 	bl	801acd0 <puts>
#endif
		break;
 80040e0:	e030      	b.n	8004144 <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 80040e2:	4b4c      	ldr	r3, [pc, #304]	; (8004214 <W25qxx_Init+0x248>)
 80040e4:	2204      	movs	r2, #4
 80040e6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 80040e8:	4b4a      	ldr	r3, [pc, #296]	; (8004214 <W25qxx_Init+0x248>)
 80040ea:	2210      	movs	r2, #16
 80040ec:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 80040ee:	4853      	ldr	r0, [pc, #332]	; (800423c <W25qxx_Init+0x270>)
 80040f0:	f016 fdee 	bl	801acd0 <puts>
#endif
		break;
 80040f4:	e026      	b.n	8004144 <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 80040f6:	4b47      	ldr	r3, [pc, #284]	; (8004214 <W25qxx_Init+0x248>)
 80040f8:	2203      	movs	r2, #3
 80040fa:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 80040fc:	4b45      	ldr	r3, [pc, #276]	; (8004214 <W25qxx_Init+0x248>)
 80040fe:	2208      	movs	r2, #8
 8004100:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 8004102:	484f      	ldr	r0, [pc, #316]	; (8004240 <W25qxx_Init+0x274>)
 8004104:	f016 fde4 	bl	801acd0 <puts>
#endif
		break;
 8004108:	e01c      	b.n	8004144 <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 800410a:	4b42      	ldr	r3, [pc, #264]	; (8004214 <W25qxx_Init+0x248>)
 800410c:	2202      	movs	r2, #2
 800410e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8004110:	4b40      	ldr	r3, [pc, #256]	; (8004214 <W25qxx_Init+0x248>)
 8004112:	2204      	movs	r2, #4
 8004114:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 8004116:	484b      	ldr	r0, [pc, #300]	; (8004244 <W25qxx_Init+0x278>)
 8004118:	f016 fdda 	bl	801acd0 <puts>
#endif
		break;
 800411c:	e012      	b.n	8004144 <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 800411e:	4b3d      	ldr	r3, [pc, #244]	; (8004214 <W25qxx_Init+0x248>)
 8004120:	2201      	movs	r2, #1
 8004122:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8004124:	4b3b      	ldr	r3, [pc, #236]	; (8004214 <W25qxx_Init+0x248>)
 8004126:	2202      	movs	r2, #2
 8004128:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 800412a:	4847      	ldr	r0, [pc, #284]	; (8004248 <W25qxx_Init+0x27c>)
 800412c:	f016 fdd0 	bl	801acd0 <puts>
#endif
		break;
 8004130:	e008      	b.n	8004144 <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 8004132:	4846      	ldr	r0, [pc, #280]	; (800424c <W25qxx_Init+0x280>)
 8004134:	f016 fdcc 	bl	801acd0 <puts>
#endif
		w25qxx.Lock = 0;
 8004138:	4b36      	ldr	r3, [pc, #216]	; (8004214 <W25qxx_Init+0x248>)
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8004140:	2300      	movs	r3, #0
 8004142:	e063      	b.n	800420c <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 8004144:	4b33      	ldr	r3, [pc, #204]	; (8004214 <W25qxx_Init+0x248>)
 8004146:	f44f 7280 	mov.w	r2, #256	; 0x100
 800414a:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 800414c:	4b31      	ldr	r3, [pc, #196]	; (8004214 <W25qxx_Init+0x248>)
 800414e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004152:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8004154:	4b2f      	ldr	r3, [pc, #188]	; (8004214 <W25qxx_Init+0x248>)
 8004156:	69db      	ldr	r3, [r3, #28]
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	4a2e      	ldr	r2, [pc, #184]	; (8004214 <W25qxx_Init+0x248>)
 800415c:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 800415e:	4b2d      	ldr	r3, [pc, #180]	; (8004214 <W25qxx_Init+0x248>)
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	4a2c      	ldr	r2, [pc, #176]	; (8004214 <W25qxx_Init+0x248>)
 8004164:	6912      	ldr	r2, [r2, #16]
 8004166:	fb02 f303 	mul.w	r3, r2, r3
 800416a:	4a2a      	ldr	r2, [pc, #168]	; (8004214 <W25qxx_Init+0x248>)
 800416c:	8952      	ldrh	r2, [r2, #10]
 800416e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004172:	4a28      	ldr	r2, [pc, #160]	; (8004214 <W25qxx_Init+0x248>)
 8004174:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8004176:	4b27      	ldr	r3, [pc, #156]	; (8004214 <W25qxx_Init+0x248>)
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	4a25      	ldr	r2, [pc, #148]	; (8004214 <W25qxx_Init+0x248>)
 800417e:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8004180:	4b24      	ldr	r3, [pc, #144]	; (8004214 <W25qxx_Init+0x248>)
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	4a23      	ldr	r2, [pc, #140]	; (8004214 <W25qxx_Init+0x248>)
 8004186:	6912      	ldr	r2, [r2, #16]
 8004188:	fb02 f303 	mul.w	r3, r2, r3
 800418c:	0a9b      	lsrs	r3, r3, #10
 800418e:	4a21      	ldr	r2, [pc, #132]	; (8004214 <W25qxx_Init+0x248>)
 8004190:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8004192:	f7ff fe5f 	bl	8003e54 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8004196:	2001      	movs	r0, #1
 8004198:	f7ff fea8 	bl	8003eec <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 800419c:	2002      	movs	r0, #2
 800419e:	f7ff fea5 	bl	8003eec <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80041a2:	2003      	movs	r0, #3
 80041a4:	f7ff fea2 	bl	8003eec <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 80041a8:	4b1a      	ldr	r3, [pc, #104]	; (8004214 <W25qxx_Init+0x248>)
 80041aa:	895b      	ldrh	r3, [r3, #10]
 80041ac:	4619      	mov	r1, r3
 80041ae:	4828      	ldr	r0, [pc, #160]	; (8004250 <W25qxx_Init+0x284>)
 80041b0:	f016 fd08 	bl	801abc4 <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 80041b4:	4b17      	ldr	r3, [pc, #92]	; (8004214 <W25qxx_Init+0x248>)
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	4619      	mov	r1, r3
 80041ba:	4826      	ldr	r0, [pc, #152]	; (8004254 <W25qxx_Init+0x288>)
 80041bc:	f016 fd02 	bl	801abc4 <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 80041c0:	4b14      	ldr	r3, [pc, #80]	; (8004214 <W25qxx_Init+0x248>)
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	4619      	mov	r1, r3
 80041c6:	4824      	ldr	r0, [pc, #144]	; (8004258 <W25qxx_Init+0x28c>)
 80041c8:	f016 fcfc 	bl	801abc4 <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 80041cc:	4b11      	ldr	r3, [pc, #68]	; (8004214 <W25qxx_Init+0x248>)
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	4619      	mov	r1, r3
 80041d2:	4822      	ldr	r0, [pc, #136]	; (800425c <W25qxx_Init+0x290>)
 80041d4:	f016 fcf6 	bl	801abc4 <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 80041d8:	4b0e      	ldr	r3, [pc, #56]	; (8004214 <W25qxx_Init+0x248>)
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	4619      	mov	r1, r3
 80041de:	4820      	ldr	r0, [pc, #128]	; (8004260 <W25qxx_Init+0x294>)
 80041e0:	f016 fcf0 	bl	801abc4 <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 80041e4:	4b0b      	ldr	r3, [pc, #44]	; (8004214 <W25qxx_Init+0x248>)
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	4619      	mov	r1, r3
 80041ea:	481e      	ldr	r0, [pc, #120]	; (8004264 <W25qxx_Init+0x298>)
 80041ec:	f016 fcea 	bl	801abc4 <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 80041f0:	4b08      	ldr	r3, [pc, #32]	; (8004214 <W25qxx_Init+0x248>)
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	4619      	mov	r1, r3
 80041f6:	481c      	ldr	r0, [pc, #112]	; (8004268 <W25qxx_Init+0x29c>)
 80041f8:	f016 fce4 	bl	801abc4 <iprintf>
	printf("w25qxx Init Done\r\n");
 80041fc:	481b      	ldr	r0, [pc, #108]	; (800426c <W25qxx_Init+0x2a0>)
 80041fe:	f016 fd67 	bl	801acd0 <puts>
#endif
	w25qxx.Lock = 0;
 8004202:	4b04      	ldr	r3, [pc, #16]	; (8004214 <W25qxx_Init+0x248>)
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 800420a:	2301      	movs	r3, #1
}
 800420c:	4618      	mov	r0, r3
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	20006da0 	.word	0x20006da0
 8004218:	40020c00 	.word	0x40020c00
 800421c:	0801f198 	.word	0x0801f198
 8004220:	0801f1b0 	.word	0x0801f1b0
 8004224:	0801f1c4 	.word	0x0801f1c4
 8004228:	0801f1dc 	.word	0x0801f1dc
 800422c:	0801f1f4 	.word	0x0801f1f4
 8004230:	0801f20c 	.word	0x0801f20c
 8004234:	0801f224 	.word	0x0801f224
 8004238:	0801f23c 	.word	0x0801f23c
 800423c:	0801f254 	.word	0x0801f254
 8004240:	0801f26c 	.word	0x0801f26c
 8004244:	0801f284 	.word	0x0801f284
 8004248:	0801f29c 	.word	0x0801f29c
 800424c:	0801f2b4 	.word	0x0801f2b4
 8004250:	0801f2c8 	.word	0x0801f2c8
 8004254:	0801f2e8 	.word	0x0801f2e8
 8004258:	0801f300 	.word	0x0801f300
 800425c:	0801f320 	.word	0x0801f320
 8004260:	0801f33c 	.word	0x0801f33c
 8004264:	0801f35c 	.word	0x0801f35c
 8004268:	0801f378 	.word	0x0801f378
 800426c:	0801f398 	.word	0x0801f398

08004270 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8004278:	e002      	b.n	8004280 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 800427a:	2001      	movs	r0, #1
 800427c:	f010 fcc3 	bl	8014c06 <osDelay>
	while (w25qxx.Lock == 1)
 8004280:	4b2d      	ldr	r3, [pc, #180]	; (8004338 <W25qxx_EraseSector+0xc8>)
 8004282:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004286:	2b01      	cmp	r3, #1
 8004288:	d0f7      	beq.n	800427a <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 800428a:	4b2b      	ldr	r3, [pc, #172]	; (8004338 <W25qxx_EraseSector+0xc8>)
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
 8004292:	f002 fe2f 	bl	8006ef4 <HAL_GetTick>
 8004296:	60f8      	str	r0, [r7, #12]
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
 8004298:	6879      	ldr	r1, [r7, #4]
 800429a:	4828      	ldr	r0, [pc, #160]	; (800433c <W25qxx_EraseSector+0xcc>)
 800429c:	f016 fc92 	bl	801abc4 <iprintf>
#endif
	W25qxx_WaitForWriteEnd();
 80042a0:	f7ff fe6a 	bl	8003f78 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 80042a4:	4b24      	ldr	r3, [pc, #144]	; (8004338 <W25qxx_EraseSector+0xc8>)
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	fb02 f303 	mul.w	r3, r2, r3
 80042ae:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 80042b0:	f7ff fe06 	bl	8003ec0 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80042b4:	2200      	movs	r2, #0
 80042b6:	2140      	movs	r1, #64	; 0x40
 80042b8:	4821      	ldr	r0, [pc, #132]	; (8004340 <W25qxx_EraseSector+0xd0>)
 80042ba:	f003 fb95 	bl	80079e8 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80042be:	4b1e      	ldr	r3, [pc, #120]	; (8004338 <W25qxx_EraseSector+0xc8>)
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	2b08      	cmp	r3, #8
 80042c4:	d909      	bls.n	80042da <W25qxx_EraseSector+0x6a>
	{
		W25qxx_Spi(0x21);
 80042c6:	2021      	movs	r0, #33	; 0x21
 80042c8:	f7ff fd78 	bl	8003dbc <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	0e1b      	lsrs	r3, r3, #24
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7ff fd72 	bl	8003dbc <W25qxx_Spi>
 80042d8:	e002      	b.n	80042e0 <W25qxx_EraseSector+0x70>
	}
	else
	{
		W25qxx_Spi(0x20);
 80042da:	2020      	movs	r0, #32
 80042dc:	f7ff fd6e 	bl	8003dbc <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	0c1b      	lsrs	r3, r3, #16
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7ff fd68 	bl	8003dbc <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	0a1b      	lsrs	r3, r3, #8
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff fd62 	bl	8003dbc <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff fd5d 	bl	8003dbc <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004302:	2201      	movs	r2, #1
 8004304:	2140      	movs	r1, #64	; 0x40
 8004306:	480e      	ldr	r0, [pc, #56]	; (8004340 <W25qxx_EraseSector+0xd0>)
 8004308:	f003 fb6e 	bl	80079e8 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800430c:	f7ff fe34 	bl	8003f78 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
 8004310:	f002 fdf0 	bl	8006ef4 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	4619      	mov	r1, r3
 800431c:	4809      	ldr	r0, [pc, #36]	; (8004344 <W25qxx_EraseSector+0xd4>)
 800431e:	f016 fc51 	bl	801abc4 <iprintf>
#endif
	W25qxx_Delay(1);
 8004322:	2001      	movs	r0, #1
 8004324:	f010 fc6f 	bl	8014c06 <osDelay>
	w25qxx.Lock = 0;
 8004328:	4b03      	ldr	r3, [pc, #12]	; (8004338 <W25qxx_EraseSector+0xc8>)
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004330:	bf00      	nop
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	20006da0 	.word	0x20006da0
 800433c:	0801f3f0 	.word	0x0801f3f0
 8004340:	40020c00 	.word	0x40020c00
 8004344:	0801f414 	.word	0x0801f414

08004348 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8004350:	4b07      	ldr	r3, [pc, #28]	; (8004370 <W25qxx_SectorToPage+0x28>)
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	fb02 f303 	mul.w	r3, r2, r3
 800435a:	4a05      	ldr	r2, [pc, #20]	; (8004370 <W25qxx_SectorToPage+0x28>)
 800435c:	8952      	ldrh	r2, [r2, #10]
 800435e:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8004362:	4618      	mov	r0, r3
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	20006da0 	.word	0x20006da0

08004374 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
 8004380:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8004382:	e002      	b.n	800438a <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8004384:	2001      	movs	r0, #1
 8004386:	f010 fc3e 	bl	8014c06 <osDelay>
	while (w25qxx.Lock == 1)
 800438a:	4b57      	ldr	r3, [pc, #348]	; (80044e8 <W25qxx_WritePage+0x174>)
 800438c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004390:	2b01      	cmp	r3, #1
 8004392:	d0f7      	beq.n	8004384 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8004394:	4b54      	ldr	r3, [pc, #336]	; (80044e8 <W25qxx_WritePage+0x174>)
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4413      	add	r3, r2
 80043a2:	4a51      	ldr	r2, [pc, #324]	; (80044e8 <W25qxx_WritePage+0x174>)
 80043a4:	8952      	ldrh	r2, [r2, #10]
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d802      	bhi.n	80043b0 <W25qxx_WritePage+0x3c>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d105      	bne.n	80043bc <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80043b0:	4b4d      	ldr	r3, [pc, #308]	; (80044e8 <W25qxx_WritePage+0x174>)
 80043b2:	895b      	ldrh	r3, [r3, #10]
 80043b4:	461a      	mov	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	4413      	add	r3, r2
 80043c2:	4a49      	ldr	r2, [pc, #292]	; (80044e8 <W25qxx_WritePage+0x174>)
 80043c4:	8952      	ldrh	r2, [r2, #10]
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d905      	bls.n	80043d6 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80043ca:	4b47      	ldr	r3, [pc, #284]	; (80044e8 <W25qxx_WritePage+0x174>)
 80043cc:	895b      	ldrh	r3, [r3, #10]
 80043ce:	461a      	mov	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	68b9      	ldr	r1, [r7, #8]
 80043dc:	4843      	ldr	r0, [pc, #268]	; (80044ec <W25qxx_WritePage+0x178>)
 80043de:	f016 fbf1 	bl	801abc4 <iprintf>
	W25qxx_Delay(100);
 80043e2:	2064      	movs	r0, #100	; 0x64
 80043e4:	f010 fc0f 	bl	8014c06 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 80043e8:	f002 fd84 	bl	8006ef4 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]
#endif
	W25qxx_WaitForWriteEnd();
 80043ee:	f7ff fdc3 	bl	8003f78 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 80043f2:	f7ff fd65 	bl	8003ec0 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80043f6:	2200      	movs	r2, #0
 80043f8:	2140      	movs	r1, #64	; 0x40
 80043fa:	483d      	ldr	r0, [pc, #244]	; (80044f0 <W25qxx_WritePage+0x17c>)
 80043fc:	f003 faf4 	bl	80079e8 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8004400:	4b39      	ldr	r3, [pc, #228]	; (80044e8 <W25qxx_WritePage+0x174>)
 8004402:	895b      	ldrh	r3, [r3, #10]
 8004404:	461a      	mov	r2, r3
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	fb03 f302 	mul.w	r3, r3, r2
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	4413      	add	r3, r2
 8004410:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8004412:	4b35      	ldr	r3, [pc, #212]	; (80044e8 <W25qxx_WritePage+0x174>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	2b08      	cmp	r3, #8
 8004418:	d909      	bls.n	800442e <W25qxx_WritePage+0xba>
	{
		W25qxx_Spi(0x12);
 800441a:	2012      	movs	r0, #18
 800441c:	f7ff fcce 	bl	8003dbc <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	0e1b      	lsrs	r3, r3, #24
 8004424:	b2db      	uxtb	r3, r3
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff fcc8 	bl	8003dbc <W25qxx_Spi>
 800442c:	e002      	b.n	8004434 <W25qxx_WritePage+0xc0>
	}
	else
	{
		W25qxx_Spi(0x02);
 800442e:	2002      	movs	r0, #2
 8004430:	f7ff fcc4 	bl	8003dbc <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	0c1b      	lsrs	r3, r3, #16
 8004438:	b2db      	uxtb	r3, r3
 800443a:	4618      	mov	r0, r3
 800443c:	f7ff fcbe 	bl	8003dbc <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	0a1b      	lsrs	r3, r3, #8
 8004444:	b2db      	uxtb	r3, r3
 8004446:	4618      	mov	r0, r3
 8004448:	f7ff fcb8 	bl	8003dbc <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	b2db      	uxtb	r3, r3
 8004450:	4618      	mov	r0, r3
 8004452:	f7ff fcb3 	bl	8003dbc <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	b29a      	uxth	r2, r3
 800445a:	2364      	movs	r3, #100	; 0x64
 800445c:	68f9      	ldr	r1, [r7, #12]
 800445e:	4825      	ldr	r0, [pc, #148]	; (80044f4 <W25qxx_WritePage+0x180>)
 8004460:	f007 f9e3 	bl	800b82a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004464:	2201      	movs	r2, #1
 8004466:	2140      	movs	r1, #64	; 0x40
 8004468:	4821      	ldr	r0, [pc, #132]	; (80044f0 <W25qxx_WritePage+0x17c>)
 800446a:	f003 fabd 	bl	80079e8 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800446e:	f7ff fd83 	bl	8003f78 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 8004472:	f002 fd3f 	bl	8006ef4 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 800447e:	2300      	movs	r3, #0
 8004480:	617b      	str	r3, [r7, #20]
 8004482:	e018      	b.n	80044b6 <W25qxx_WritePage+0x142>
	{
		if ((i % 8 == 0) && (i > 2))
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f003 0307 	and.w	r3, r3, #7
 800448a:	2b00      	cmp	r3, #0
 800448c:	d108      	bne.n	80044a0 <W25qxx_WritePage+0x12c>
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2b02      	cmp	r3, #2
 8004492:	d905      	bls.n	80044a0 <W25qxx_WritePage+0x12c>
		{
			printf("\r\n");
 8004494:	4818      	ldr	r0, [pc, #96]	; (80044f8 <W25qxx_WritePage+0x184>)
 8004496:	f016 fc1b 	bl	801acd0 <puts>
			W25qxx_Delay(10);
 800449a:	200a      	movs	r0, #10
 800449c:	f010 fbb3 	bl	8014c06 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	4413      	add	r3, r2
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	4619      	mov	r1, r3
 80044aa:	4814      	ldr	r0, [pc, #80]	; (80044fc <W25qxx_WritePage+0x188>)
 80044ac:	f016 fb8a 	bl	801abc4 <iprintf>
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	3301      	adds	r3, #1
 80044b4:	617b      	str	r3, [r7, #20]
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d3e2      	bcc.n	8004484 <W25qxx_WritePage+0x110>
	}
	printf("\r\n");
 80044be:	480e      	ldr	r0, [pc, #56]	; (80044f8 <W25qxx_WritePage+0x184>)
 80044c0:	f016 fc06 	bl	801acd0 <puts>
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
 80044c4:	6939      	ldr	r1, [r7, #16]
 80044c6:	480e      	ldr	r0, [pc, #56]	; (8004500 <W25qxx_WritePage+0x18c>)
 80044c8:	f016 fb7c 	bl	801abc4 <iprintf>
	W25qxx_Delay(100);
 80044cc:	2064      	movs	r0, #100	; 0x64
 80044ce:	f010 fb9a 	bl	8014c06 <osDelay>
#endif
	W25qxx_Delay(1);
 80044d2:	2001      	movs	r0, #1
 80044d4:	f010 fb97 	bl	8014c06 <osDelay>
	w25qxx.Lock = 0;
 80044d8:	4b03      	ldr	r3, [pc, #12]	; (80044e8 <W25qxx_WritePage+0x174>)
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80044e0:	bf00      	nop
 80044e2:	3718      	adds	r7, #24
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	20006da0 	.word	0x20006da0
 80044ec:	0801f678 	.word	0x0801f678
 80044f0:	40020c00 	.word	0x40020c00
 80044f4:	20005fa4 	.word	0x20005fa4
 80044f8:	0801f6b4 	.word	0x0801f6b4
 80044fc:	0801f6b8 	.word	0x0801f6b8
 8004500:	0801f6c0 	.word	0x0801f6c0

08004504 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b088      	sub	sp, #32
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
 8004510:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8004512:	4b36      	ldr	r3, [pc, #216]	; (80045ec <W25qxx_WriteSector+0xe8>)
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	429a      	cmp	r2, r3
 800451a:	d802      	bhi.n	8004522 <W25qxx_WriteSector+0x1e>
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d102      	bne.n	8004528 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8004522:	4b32      	ldr	r3, [pc, #200]	; (80045ec <W25qxx_WriteSector+0xe8>)
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	68b9      	ldr	r1, [r7, #8]
 800452e:	4830      	ldr	r0, [pc, #192]	; (80045f0 <W25qxx_WriteSector+0xec>)
 8004530:	f016 fb48 	bl	801abc4 <iprintf>
	W25qxx_Delay(100);
 8004534:	2064      	movs	r0, #100	; 0x64
 8004536:	f010 fb66 	bl	8014c06 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 800453a:	4b2c      	ldr	r3, [pc, #176]	; (80045ec <W25qxx_WriteSector+0xe8>)
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	429a      	cmp	r2, r3
 8004542:	d306      	bcc.n	8004552 <W25qxx_WriteSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
 8004544:	482b      	ldr	r0, [pc, #172]	; (80045f4 <W25qxx_WriteSector+0xf0>)
 8004546:	f016 fbc3 	bl	801acd0 <puts>
		W25qxx_Delay(100);
 800454a:	2064      	movs	r0, #100	; 0x64
 800454c:	f010 fb5b 	bl	8014c06 <osDelay>
#endif
		return;
 8004550:	e048      	b.n	80045e4 <W25qxx_WriteSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	441a      	add	r2, r3
 8004558:	4b24      	ldr	r3, [pc, #144]	; (80045ec <W25qxx_WriteSector+0xe8>)
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	429a      	cmp	r2, r3
 800455e:	d905      	bls.n	800456c <W25qxx_WriteSector+0x68>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8004560:	4b22      	ldr	r3, [pc, #136]	; (80045ec <W25qxx_WriteSector+0xe8>)
 8004562:	691a      	ldr	r2, [r3, #16]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	61bb      	str	r3, [r7, #24]
 800456a:	e001      	b.n	8004570 <W25qxx_WriteSector+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004570:	68b8      	ldr	r0, [r7, #8]
 8004572:	f7ff fee9 	bl	8004348 <W25qxx_SectorToPage>
 8004576:	4602      	mov	r2, r0
 8004578:	4b1c      	ldr	r3, [pc, #112]	; (80045ec <W25qxx_WriteSector+0xe8>)
 800457a:	895b      	ldrh	r3, [r3, #10]
 800457c:	4619      	mov	r1, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	fbb3 f3f1 	udiv	r3, r3, r1
 8004584:	4413      	add	r3, r2
 8004586:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004588:	4b18      	ldr	r3, [pc, #96]	; (80045ec <W25qxx_WriteSector+0xe8>)
 800458a:	895b      	ldrh	r3, [r3, #10]
 800458c:	461a      	mov	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	fbb3 f1f2 	udiv	r1, r3, r2
 8004594:	fb02 f201 	mul.w	r2, r2, r1
 8004598:	1a9b      	subs	r3, r3, r2
 800459a:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	69f9      	ldr	r1, [r7, #28]
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f7ff fee6 	bl	8004374 <W25qxx_WritePage>
		StartPage++;
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	3301      	adds	r3, #1
 80045ac:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 80045ae:	4b0f      	ldr	r3, [pc, #60]	; (80045ec <W25qxx_WriteSector+0xe8>)
 80045b0:	895b      	ldrh	r3, [r3, #10]
 80045b2:	461a      	mov	r2, r3
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	1a9a      	subs	r2, r3, r2
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	4413      	add	r3, r2
 80045bc:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80045be:	4b0b      	ldr	r3, [pc, #44]	; (80045ec <W25qxx_WriteSector+0xe8>)
 80045c0:	895b      	ldrh	r3, [r3, #10]
 80045c2:	461a      	mov	r2, r3
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	4413      	add	r3, r2
 80045cc:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80045ce:	2300      	movs	r3, #0
 80045d0:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	dce1      	bgt.n	800459c <W25qxx_WriteSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
 80045d8:	4807      	ldr	r0, [pc, #28]	; (80045f8 <W25qxx_WriteSector+0xf4>)
 80045da:	f016 fb79 	bl	801acd0 <puts>
	W25qxx_Delay(100);
 80045de:	2064      	movs	r0, #100	; 0x64
 80045e0:	f010 fb11 	bl	8014c06 <osDelay>
#endif
}
 80045e4:	3720      	adds	r7, #32
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	20006da0 	.word	0x20006da0
 80045f0:	0801f6e4 	.word	0x0801f6e4
 80045f4:	0801f724 	.word	0x0801f724
 80045f8:	0801f744 	.word	0x0801f744

080045fc <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
 8004608:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800460a:	e002      	b.n	8004612 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 800460c:	2001      	movs	r0, #1
 800460e:	f010 fafa 	bl	8014c06 <osDelay>
	while (w25qxx.Lock == 1)
 8004612:	4b54      	ldr	r3, [pc, #336]	; (8004764 <W25qxx_ReadPage+0x168>)
 8004614:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004618:	2b01      	cmp	r3, #1
 800461a:	d0f7      	beq.n	800460c <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 800461c:	4b51      	ldr	r3, [pc, #324]	; (8004764 <W25qxx_ReadPage+0x168>)
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8004624:	4b4f      	ldr	r3, [pc, #316]	; (8004764 <W25qxx_ReadPage+0x168>)
 8004626:	895b      	ldrh	r3, [r3, #10]
 8004628:	461a      	mov	r2, r3
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	4293      	cmp	r3, r2
 800462e:	d802      	bhi.n	8004636 <W25qxx_ReadPage+0x3a>
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d102      	bne.n	800463c <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8004636:	4b4b      	ldr	r3, [pc, #300]	; (8004764 <W25qxx_ReadPage+0x168>)
 8004638:	895b      	ldrh	r3, [r3, #10]
 800463a:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	4413      	add	r3, r2
 8004642:	4a48      	ldr	r2, [pc, #288]	; (8004764 <W25qxx_ReadPage+0x168>)
 8004644:	8952      	ldrh	r2, [r2, #10]
 8004646:	4293      	cmp	r3, r2
 8004648:	d905      	bls.n	8004656 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800464a:	4b46      	ldr	r3, [pc, #280]	; (8004764 <W25qxx_ReadPage+0x168>)
 800464c:	895b      	ldrh	r3, [r3, #10]
 800464e:	461a      	mov	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	68b9      	ldr	r1, [r7, #8]
 800465c:	4842      	ldr	r0, [pc, #264]	; (8004768 <W25qxx_ReadPage+0x16c>)
 800465e:	f016 fab1 	bl	801abc4 <iprintf>
	W25qxx_Delay(100);
 8004662:	2064      	movs	r0, #100	; 0x64
 8004664:	f010 facf 	bl	8014c06 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8004668:	f002 fc44 	bl	8006ef4 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 800466e:	4b3d      	ldr	r3, [pc, #244]	; (8004764 <W25qxx_ReadPage+0x168>)
 8004670:	895b      	ldrh	r3, [r3, #10]
 8004672:	461a      	mov	r2, r3
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	fb03 f302 	mul.w	r3, r3, r2
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	4413      	add	r3, r2
 800467e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004680:	2200      	movs	r2, #0
 8004682:	2140      	movs	r1, #64	; 0x40
 8004684:	4839      	ldr	r0, [pc, #228]	; (800476c <W25qxx_ReadPage+0x170>)
 8004686:	f003 f9af 	bl	80079e8 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 800468a:	4b36      	ldr	r3, [pc, #216]	; (8004764 <W25qxx_ReadPage+0x168>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	2b08      	cmp	r3, #8
 8004690:	d909      	bls.n	80046a6 <W25qxx_ReadPage+0xaa>
	{
		W25qxx_Spi(0x0C);
 8004692:	200c      	movs	r0, #12
 8004694:	f7ff fb92 	bl	8003dbc <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	0e1b      	lsrs	r3, r3, #24
 800469c:	b2db      	uxtb	r3, r3
 800469e:	4618      	mov	r0, r3
 80046a0:	f7ff fb8c 	bl	8003dbc <W25qxx_Spi>
 80046a4:	e002      	b.n	80046ac <W25qxx_ReadPage+0xb0>
	}
	else
	{
		W25qxx_Spi(0x0B);
 80046a6:	200b      	movs	r0, #11
 80046a8:	f7ff fb88 	bl	8003dbc <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	0c1b      	lsrs	r3, r3, #16
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff fb82 	bl	8003dbc <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	0a1b      	lsrs	r3, r3, #8
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	4618      	mov	r0, r3
 80046c0:	f7ff fb7c 	bl	8003dbc <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff fb77 	bl	8003dbc <W25qxx_Spi>
	W25qxx_Spi(0);
 80046ce:	2000      	movs	r0, #0
 80046d0:	f7ff fb74 	bl	8003dbc <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	2364      	movs	r3, #100	; 0x64
 80046da:	68f9      	ldr	r1, [r7, #12]
 80046dc:	4824      	ldr	r0, [pc, #144]	; (8004770 <W25qxx_ReadPage+0x174>)
 80046de:	f007 f9e0 	bl	800baa2 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80046e2:	2201      	movs	r2, #1
 80046e4:	2140      	movs	r1, #64	; 0x40
 80046e6:	4821      	ldr	r0, [pc, #132]	; (800476c <W25qxx_ReadPage+0x170>)
 80046e8:	f003 f97e 	bl	80079e8 <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 80046ec:	f002 fc02 	bl	8006ef4 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 80046f8:	2300      	movs	r3, #0
 80046fa:	617b      	str	r3, [r7, #20]
 80046fc:	e018      	b.n	8004730 <W25qxx_ReadPage+0x134>
	{
		if ((i % 8 == 0) && (i > 2))
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	2b00      	cmp	r3, #0
 8004706:	d108      	bne.n	800471a <W25qxx_ReadPage+0x11e>
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	2b02      	cmp	r3, #2
 800470c:	d905      	bls.n	800471a <W25qxx_ReadPage+0x11e>
		{
			printf("\r\n");
 800470e:	4819      	ldr	r0, [pc, #100]	; (8004774 <W25qxx_ReadPage+0x178>)
 8004710:	f016 fade 	bl	801acd0 <puts>
			W25qxx_Delay(10);
 8004714:	200a      	movs	r0, #10
 8004716:	f010 fa76 	bl	8014c06 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	4413      	add	r3, r2
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	4619      	mov	r1, r3
 8004724:	4814      	ldr	r0, [pc, #80]	; (8004778 <W25qxx_ReadPage+0x17c>)
 8004726:	f016 fa4d 	bl	801abc4 <iprintf>
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	3301      	adds	r3, #1
 800472e:	617b      	str	r3, [r7, #20]
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	429a      	cmp	r2, r3
 8004736:	d3e2      	bcc.n	80046fe <W25qxx_ReadPage+0x102>
	}
	printf("\r\n");
 8004738:	480e      	ldr	r0, [pc, #56]	; (8004774 <W25qxx_ReadPage+0x178>)
 800473a:	f016 fac9 	bl	801acd0 <puts>
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
 800473e:	6939      	ldr	r1, [r7, #16]
 8004740:	480e      	ldr	r0, [pc, #56]	; (800477c <W25qxx_ReadPage+0x180>)
 8004742:	f016 fa3f 	bl	801abc4 <iprintf>
	W25qxx_Delay(100);
 8004746:	2064      	movs	r0, #100	; 0x64
 8004748:	f010 fa5d 	bl	8014c06 <osDelay>
#endif
	W25qxx_Delay(1);
 800474c:	2001      	movs	r0, #1
 800474e:	f010 fa5a 	bl	8014c06 <osDelay>
	w25qxx.Lock = 0;
 8004752:	4b04      	ldr	r3, [pc, #16]	; (8004764 <W25qxx_ReadPage+0x168>)
 8004754:	2200      	movs	r2, #0
 8004756:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800475a:	bf00      	nop
 800475c:	3718      	adds	r7, #24
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	20006da0 	.word	0x20006da0
 8004768:	0801f890 	.word	0x0801f890
 800476c:	40020c00 	.word	0x40020c00
 8004770:	20005fa4 	.word	0x20005fa4
 8004774:	0801f6b4 	.word	0x0801f6b4
 8004778:	0801f6b8 	.word	0x0801f6b8
 800477c:	0801f8cc 	.word	0x0801f8cc

08004780 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b088      	sub	sp, #32
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
 800478c:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 800478e:	4b36      	ldr	r3, [pc, #216]	; (8004868 <W25qxx_ReadSector+0xe8>)
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	429a      	cmp	r2, r3
 8004796:	d802      	bhi.n	800479e <W25qxx_ReadSector+0x1e>
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d102      	bne.n	80047a4 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 800479e:	4b32      	ldr	r3, [pc, #200]	; (8004868 <W25qxx_ReadSector+0xe8>)
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	68b9      	ldr	r1, [r7, #8]
 80047aa:	4830      	ldr	r0, [pc, #192]	; (800486c <W25qxx_ReadSector+0xec>)
 80047ac:	f016 fa0a 	bl	801abc4 <iprintf>
	W25qxx_Delay(100);
 80047b0:	2064      	movs	r0, #100	; 0x64
 80047b2:	f010 fa28 	bl	8014c06 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 80047b6:	4b2c      	ldr	r3, [pc, #176]	; (8004868 <W25qxx_ReadSector+0xe8>)
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d306      	bcc.n	80047ce <W25qxx_ReadSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
 80047c0:	482b      	ldr	r0, [pc, #172]	; (8004870 <W25qxx_ReadSector+0xf0>)
 80047c2:	f016 fa85 	bl	801acd0 <puts>
		W25qxx_Delay(100);
 80047c6:	2064      	movs	r0, #100	; 0x64
 80047c8:	f010 fa1d 	bl	8014c06 <osDelay>
#endif
		return;
 80047cc:	e048      	b.n	8004860 <W25qxx_ReadSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	441a      	add	r2, r3
 80047d4:	4b24      	ldr	r3, [pc, #144]	; (8004868 <W25qxx_ReadSector+0xe8>)
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d905      	bls.n	80047e8 <W25qxx_ReadSector+0x68>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 80047dc:	4b22      	ldr	r3, [pc, #136]	; (8004868 <W25qxx_ReadSector+0xe8>)
 80047de:	691a      	ldr	r2, [r3, #16]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	61bb      	str	r3, [r7, #24]
 80047e6:	e001      	b.n	80047ec <W25qxx_ReadSector+0x6c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80047ec:	68b8      	ldr	r0, [r7, #8]
 80047ee:	f7ff fdab 	bl	8004348 <W25qxx_SectorToPage>
 80047f2:	4602      	mov	r2, r0
 80047f4:	4b1c      	ldr	r3, [pc, #112]	; (8004868 <W25qxx_ReadSector+0xe8>)
 80047f6:	895b      	ldrh	r3, [r3, #10]
 80047f8:	4619      	mov	r1, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8004800:	4413      	add	r3, r2
 8004802:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004804:	4b18      	ldr	r3, [pc, #96]	; (8004868 <W25qxx_ReadSector+0xe8>)
 8004806:	895b      	ldrh	r3, [r3, #10]
 8004808:	461a      	mov	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004810:	fb02 f201 	mul.w	r2, r2, r1
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	69f9      	ldr	r1, [r7, #28]
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f7ff feec 	bl	80045fc <W25qxx_ReadPage>
		StartPage++;
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	3301      	adds	r3, #1
 8004828:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 800482a:	4b0f      	ldr	r3, [pc, #60]	; (8004868 <W25qxx_ReadSector+0xe8>)
 800482c:	895b      	ldrh	r3, [r3, #10]
 800482e:	461a      	mov	r2, r3
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	1a9a      	subs	r2, r3, r2
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	4413      	add	r3, r2
 8004838:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800483a:	4b0b      	ldr	r3, [pc, #44]	; (8004868 <W25qxx_ReadSector+0xe8>)
 800483c:	895b      	ldrh	r3, [r3, #10]
 800483e:	461a      	mov	r2, r3
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	4413      	add	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800484a:	2300      	movs	r3, #0
 800484c:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	2b00      	cmp	r3, #0
 8004852:	dce1      	bgt.n	8004818 <W25qxx_ReadSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
 8004854:	4807      	ldr	r0, [pc, #28]	; (8004874 <W25qxx_ReadSector+0xf4>)
 8004856:	f016 fa3b 	bl	801acd0 <puts>
	W25qxx_Delay(100);
 800485a:	2064      	movs	r0, #100	; 0x64
 800485c:	f010 f9d3 	bl	8014c06 <osDelay>
#endif
}
 8004860:	3720      	adds	r7, #32
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	20006da0 	.word	0x20006da0
 800486c:	0801f8f0 	.word	0x0801f8f0
 8004870:	0801f930 	.word	0x0801f930
 8004874:	0801f950 	.word	0x0801f950

08004878 <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	b2d2      	uxtb	r2, r2
 800488c:	4611      	mov	r1, r2
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	4798      	blx	r3
 8004892:	4603      	mov	r3, r0
 8004894:	4618      	mov	r0, r3
 8004896:	3708      	adds	r7, #8
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <_Z17ISBDDiagsCallbackP10IridiumSBDc>:
void ISBDConsoleCallback(IridiumSBD *device, char c) __attribute__((weak));
void ISBDDiagsCallback(IridiumSBD *device, char c) __attribute__((weak));

bool ISBDCallback() { return true; }
void ISBDConsoleCallback(IridiumSBD *device, char c) { }
void ISBDDiagsCallback(IridiumSBD *device, char c) { }
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	460b      	mov	r3, r1
 80048a6:	70fb      	strb	r3, [r7, #3]
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <_ZN10IridiumSBD5sleepEv>:
   return ret;
}

// Gracefully put device to lower power mode (if sleep pin provided)
int IridiumSBD::sleep()
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <_ZN10IridiumSBD5sleepEv+0x16>
      return ISBD_REENTRANT;
 80048c6:	2309      	movs	r3, #9
 80048c8:	e028      	b.n	800491c <_ZN10IridiumSBD5sleepEv+0x68>

   if (this->useSerial && (this->sleepPin == -1))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d007      	beq.n	80048e4 <_ZN10IridiumSBD5sleepEv+0x30>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80048da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048de:	d101      	bne.n	80048e4 <_ZN10IridiumSBD5sleepEv+0x30>
      return ISBD_NO_SLEEP_PIN;
 80048e0:	230b      	movs	r3, #11
 80048e2:	e01b      	b.n	800491c <_ZN10IridiumSBD5sleepEv+0x68>

   this->reentrant = true;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   int ret = internalSleep();
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 f8d3 	bl	8004a98 <_ZN10IridiumSBD13internalSleepEv>
 80048f2:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

   if (ret == ISBD_SUCCESS)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10b      	bne.n	800491a <_ZN10IridiumSBD5sleepEv+0x66>
   {
      if (this->useSerial)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <_ZN10IridiumSBD5sleepEv+0x5e>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f979 	bl	8004c04 <_ZN10IridiumSBD13endSerialPortEv>
      power(false); // power off
 8004912:	2100      	movs	r1, #0
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 f8d1 	bl	8004abc <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 800491a:	68fb      	ldr	r3, [r7, #12]
}
 800491c:	4618      	mov	r0, r3
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <_ZN10IridiumSBD21enableSuperCapChargerEb>:

   return ISBD_SUCCESS;
}

void IridiumSBD::enableSuperCapCharger(bool enable)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	460b      	mov	r3, r1
 800492e:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the charger manually)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004936:	2b00      	cmp	r3, #0
 8004938:	d004      	beq.n	8004944 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x20>
  {
    diagprint(F("enableSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 800493a:	4918      	ldr	r1, [pc, #96]	; (800499c <_ZN10IridiumSBD21enableSuperCapChargerEb+0x78>)
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 f96f 	bl	8004c20 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8004942:	e028      	b.n	8004996 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x72>
  }

  // Enable/disable the supercapacitor charger by pulling its SHDN pin high/low
  check9603pins(); // Update IO_REGISTER
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f991 	bl	8004c6c <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 800494a:	78fb      	ldrb	r3, [r7, #3]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00b      	beq.n	8004968 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x44>
  {
    IO_REGISTER |= IO_SHDN; // Set the SHDN bit
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800495c:	4313      	orrs	r3, r2
 800495e:	b2da      	uxtb	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8004966:	e00f      	b.n	8004988 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_SHDN; // Clear the SHDN bit
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800496e:	b25a      	sxtb	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8004976:	b25b      	sxtb	r3, r3
 8004978:	43db      	mvns	r3, r3
 800497a:	b25b      	sxtb	r3, r3
 800497c:	4013      	ands	r3, r2
 800497e:	b25b      	sxtb	r3, r3
 8004980:	b2da      	uxtb	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800498e:	4619      	mov	r1, r3
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f9a6 	bl	8004ce2 <_ZN10IridiumSBD11set9603pinsEh>
}
 8004996:	3708      	adds	r7, #8
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	0801fa54 	.word	0x0801fa54

080049a0 <_ZN10IridiumSBD16enable9603NpowerEb>:
    return(false);
  }
}

void IridiumSBD::enable9603Npower(bool enable)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	460b      	mov	r3, r1
 80049aa:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N power manually)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d004      	beq.n	80049c0 <_ZN10IridiumSBD16enable9603NpowerEb+0x20>
  {
    diagprint(F("enable9603Npower is only valid when using I2C on the Qwiic Iridium\r\n"));
 80049b6:	4918      	ldr	r1, [pc, #96]	; (8004a18 <_ZN10IridiumSBD16enable9603NpowerEb+0x78>)
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 f931 	bl	8004c20 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 80049be:	e028      	b.n	8004a12 <_ZN10IridiumSBD16enable9603NpowerEb+0x72>
  }

  // Enable/disable power to the 9603N by pulling PWR_EN high/low
  check9603pins(); // Update IO_REGISTER
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f953 	bl	8004c6c <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 80049c6:	78fb      	ldrb	r3, [r7, #3]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00b      	beq.n	80049e4 <_ZN10IridiumSBD16enable9603NpowerEb+0x44>
  {
    IO_REGISTER |= IO_PWR_EN; // Set the PWR_EN bit
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 80049d8:	4313      	orrs	r3, r2
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 80049e2:	e00f      	b.n	8004a04 <_ZN10IridiumSBD16enable9603NpowerEb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_PWR_EN; // Clear the PWR_EN bit
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80049ea:	b25a      	sxtb	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 80049f2:	b25b      	sxtb	r3, r3
 80049f4:	43db      	mvns	r3, r3
 80049f6:	b25b      	sxtb	r3, r3
 80049f8:	4013      	ands	r3, r2
 80049fa:	b25b      	sxtb	r3, r3
 80049fc:	b2da      	uxtb	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f968 	bl	8004ce2 <_ZN10IridiumSBD11set9603pinsEh>
}
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	0801faec 	.word	0x0801faec

08004a1c <_ZN10IridiumSBD10enable9603Eb>:

void IridiumSBD::enable9603(bool enable)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	460b      	mov	r3, r1
 8004a26:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N manually)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d004      	beq.n	8004a3c <_ZN10IridiumSBD10enable9603Eb+0x20>
  {
    diagprint(F("enable9603 is only valid when using I2C on the Qwiic Iridium\r\n"));
 8004a32:	4918      	ldr	r1, [pc, #96]	; (8004a94 <_ZN10IridiumSBD10enable9603Eb+0x78>)
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f8f3 	bl	8004c20 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8004a3a:	e028      	b.n	8004a8e <_ZN10IridiumSBD10enable9603Eb+0x72>
  }

  // Enable/disable the 9603 by pulling ON_OFF high/low
  check9603pins(); // Update IO_REGISTER
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f915 	bl	8004c6c <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8004a42:	78fb      	ldrb	r3, [r7, #3]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00b      	beq.n	8004a60 <_ZN10IridiumSBD10enable9603Eb+0x44>
  {
    IO_REGISTER |= IO_ON_OFF; // Set the ON_OFF bit
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8004a54:	4313      	orrs	r3, r2
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8004a5e:	e00f      	b.n	8004a80 <_ZN10IridiumSBD10enable9603Eb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_ON_OFF; // Clear the ON_OFF bit
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004a66:	b25a      	sxtb	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8004a6e:	b25b      	sxtb	r3, r3
 8004a70:	43db      	mvns	r3, r3
 8004a72:	b25b      	sxtb	r3, r3
 8004a74:	4013      	ands	r3, r2
 8004a76:	b25b      	sxtb	r3, r3
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004a86:	4619      	mov	r1, r3
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 f92a 	bl	8004ce2 <_ZN10IridiumSBD11set9603pinsEh>
}
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	0801fb34 	.word	0x0801fb34

08004a98 <_ZN10IridiumSBD13internalSleepEv>:
   okToProceed = isxdigit(msstmResponseBuf[0]);
   return ISBD_SUCCESS;
}

int IridiumSBD::internalSleep()
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
   if (this->asleep)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <_ZN10IridiumSBD13internalSleepEv+0x16>
      return ISBD_IS_ASLEEP;
 8004aaa:	230a      	movs	r3, #10
 8004aac:	e000      	b.n	8004ab0 <_ZN10IridiumSBD13internalSleepEv+0x18>

   if (!waitForATResponse())
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
#endif

   return ISBD_SUCCESS;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <_ZN10IridiumSBD5powerEb>:

   return rxOverflow ? ISBD_RX_OVERFLOW : ISBD_SUCCESS;
}

void IridiumSBD::power(bool on)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	70fb      	strb	r3, [r7, #3]
   this->asleep = !on;
 8004ac8:	78fb      	ldrb	r3, [r7, #3]
 8004aca:	f083 0301 	eor.w	r3, r3, #1
 8004ace:	b2da      	uxtb	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

   if (this->useSerial)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d011      	beq.n	8004b04 <_ZN10IridiumSBD5powerEb+0x48>
   {
      if (this->sleepPin == -1)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004ae6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004aea:	d04c      	beq.n	8004b86 <_ZN10IridiumSBD5powerEb+0xca>
      {
         return;
      }
      else
      {
          if (this->sleepPinConfigured == false)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d106      	bne.n	8004b04 <_ZN10IridiumSBD5powerEb+0x48>
          {
             configureSleepPin();
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f84e 	bl	8004b98 <_ZN10IridiumSBD17configureSleepPinEv>
             this->sleepPinConfigured = true;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
          }
      }
   }

   if (on)
 8004b04:	78fb      	ldrb	r3, [r7, #3]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d018      	beq.n	8004b3c <_ZN10IridiumSBD5powerEb+0x80>
   {
      diagprint(F("Powering on modem...\r\n"));
 8004b0a:	4921      	ldr	r1, [pc, #132]	; (8004b90 <_ZN10IridiumSBD5powerEb+0xd4>)
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f887 	bl	8004c20 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d004      	beq.n	8004b26 <_ZN10IridiumSBD5powerEb+0x6a>
      {
         setSleepPin(HIGH); // HIGH = awake
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f848 	bl	8004bb4 <_ZN10IridiumSBD11setSleepPinEh>
 8004b24:	e003      	b.n	8004b2e <_ZN10IridiumSBD5powerEb+0x72>
      }
      else
      {
         enable9603(true);
 8004b26:	2101      	movs	r1, #1
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f7ff ff77 	bl	8004a1c <_ZN10IridiumSBD10enable9603Eb>
      }
      lastPowerOnTime = millis();
 8004b2e:	f002 f9e1 	bl	8006ef4 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8004b3a:	e025      	b.n	8004b88 <_ZN10IridiumSBD5powerEb+0xcc>
   }
   else
   {
      // Best Practices Guide suggests waiting at least 2 seconds
      // before powering off again
      unsigned long elapsed = millis() - lastPowerOnTime;
 8004b3c:	f002 f9da 	bl	8006ef4 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	60fb      	str	r3, [r7, #12]
      if (elapsed < 2000UL)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004b52:	d205      	bcs.n	8004b60 <_ZN10IridiumSBD5powerEb+0xa4>
         //delay(2000UL - elapsed); TODO
    	  HAL_Delay(2000UL - elapsed);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f002 f9d6 	bl	8006f0c <HAL_Delay>

      diagprint(F("Powering off modem...\r\n"));
 8004b60:	490c      	ldr	r1, [pc, #48]	; (8004b94 <_ZN10IridiumSBD5powerEb+0xd8>)
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f85c 	bl	8004c20 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d004      	beq.n	8004b7c <_ZN10IridiumSBD5powerEb+0xc0>
      {
         setSleepPin(LOW); // LOW = asleep
 8004b72:	2100      	movs	r1, #0
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 f81d 	bl	8004bb4 <_ZN10IridiumSBD11setSleepPinEh>
 8004b7a:	e005      	b.n	8004b88 <_ZN10IridiumSBD5powerEb+0xcc>
      }
      else
      {
         enable9603(false);
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7ff ff4c 	bl	8004a1c <_ZN10IridiumSBD10enable9603Eb>
 8004b84:	e000      	b.n	8004b88 <_ZN10IridiumSBD5powerEb+0xcc>
         return;
 8004b86:	bf00      	nop
      }
   }
}
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	0801ffc4 	.word	0x0801ffc4
 8004b94:	0801ffdc 	.word	0x0801ffdc

08004b98 <_ZN10IridiumSBD17configureSleepPinEv>:

void IridiumSBD::configureSleepPin()
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
	//pinMode(sleepPin, OUTPUT); // Make the sleep pin an output TODO (doesnt work with this)
   //pinMode(sleepPin, OUTPUT_PP); // Make the sleep pin an output
   diagprint(F("configureSleepPin: sleepPin configured\r\n"));
 8004ba0:	4903      	ldr	r1, [pc, #12]	; (8004bb0 <_ZN10IridiumSBD17configureSleepPinEv+0x18>)
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f83c 	bl	8004c20 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8004ba8:	bf00      	nop
 8004baa:	3708      	adds	r7, #8
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	0801fff4 	.word	0x0801fff4

08004bb4 <_ZN10IridiumSBD11setSleepPinEh>:

void IridiumSBD::setSleepPin(uint8_t enable)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(sleepPin_GPIO_Port,sleepPin_Pin,GPIO_PIN_SET);
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	2108      	movs	r1, #8
 8004bc4:	480b      	ldr	r0, [pc, #44]	; (8004bf4 <_ZN10IridiumSBD11setSleepPinEh+0x40>)
 8004bc6:	f002 ff0f 	bl	80079e8 <HAL_GPIO_WritePin>
   //digitalWrite(this->sleepPin, enable); // HIGH = awake, LOW = asleep TODO
   diagprint(F("setSleepPin: sleepPin set "));
 8004bca:	490b      	ldr	r1, [pc, #44]	; (8004bf8 <_ZN10IridiumSBD11setSleepPinEh+0x44>)
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 f827 	bl	8004c20 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   if (enable == HIGH)
 8004bd2:	78fb      	ldrb	r3, [r7, #3]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d104      	bne.n	8004be2 <_ZN10IridiumSBD11setSleepPinEh+0x2e>
      diagprint(F("HIGH\r\n"));
 8004bd8:	4908      	ldr	r1, [pc, #32]	; (8004bfc <_ZN10IridiumSBD11setSleepPinEh+0x48>)
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f820 	bl	8004c20 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   else
      diagprint(F("LOW\r\n"));
}
 8004be0:	e003      	b.n	8004bea <_ZN10IridiumSBD11setSleepPinEh+0x36>
      diagprint(F("LOW\r\n"));
 8004be2:	4907      	ldr	r1, [pc, #28]	; (8004c00 <_ZN10IridiumSBD11setSleepPinEh+0x4c>)
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f81b 	bl	8004c20 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8004bea:	bf00      	nop
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	40020800 	.word	0x40020800
 8004bf8:	08020020 	.word	0x08020020
 8004bfc:	0802003c 	.word	0x0802003c
 8004c00:	08020044 	.word	0x08020044

08004c04 <_ZN10IridiumSBD13endSerialPortEv>:
{
   diagprint(F("IridiumSBD::beginSerialPort\r\n"));
}

void IridiumSBD::endSerialPort()
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::endSerialPort\r\n"));
 8004c0c:	4903      	ldr	r1, [pc, #12]	; (8004c1c <_ZN10IridiumSBD13endSerialPortEv+0x18>)
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f806 	bl	8004c20 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8004c14:	bf00      	nop
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	0802006c 	.word	0x0802006c

08004c20 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>:
         diagprint(F("I2C write was not successful!\r\n"));
   }
}

void IridiumSBD::diagprint(FlashString str)
{
 8004c20:	b590      	push	{r4, r7, lr}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	1c5a      	adds	r2, r3, #1
 8004c32:	60fa      	str	r2, [r7, #12]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 8004c38:	7afb      	ldrb	r3, [r7, #11]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d005      	beq.n	8004c4a <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0x2a>
      ISBDDiagsCallback(this, c);
 8004c3e:	7afb      	ldrb	r3, [r7, #11]
 8004c40:	4619      	mov	r1, r3
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7ff fe2a 	bl	800489c <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   }
 8004c48:	e7f1      	b.n	8004c2e <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 8004c4a:	bf00      	nop

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen((const char*)str), HAL_MAX_DELAY);
 8004c4c:	687c      	ldr	r4, [r7, #4]
 8004c4e:	6838      	ldr	r0, [r7, #0]
 8004c50:	f7fb face 	bl	80001f0 <strlen>
 8004c54:	4603      	mov	r3, r0
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c5c:	6839      	ldr	r1, [r7, #0]
 8004c5e:	4620      	mov	r0, r4
 8004c60:	f008 f93b 	bl	800ceda <HAL_UART_Transmit>
}
 8004c64:	bf00      	nop
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd90      	pop	{r4, r7, pc}

08004c6c <_ZN10IridiumSBD13check9603pinsEv>:
  }
}

//Reads the IO pins and update IO_REGISTER
void IridiumSBD::check9603pins()
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  //Read the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c7e:	4619      	mov	r1, r3
 8004c80:	4610      	mov	r0, r2
 8004c82:	f000 f9c9 	bl	8005018 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c8a:	2110      	movs	r1, #16
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7ff fdf3 	bl	8004878 <_ZN7TwoWire5writeEi>
  wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 fa08 	bl	80050ac <_ZN7TwoWire15endTransmissionEv>
  if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)1) == 1) // Request one byte from the IO register
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	4619      	mov	r1, r3
 8004caa:	f000 f9a2 	bl	8004ff2 <_ZN7TwoWire11requestFromEhh>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	bf0c      	ite	eq
 8004cb4:	2301      	moveq	r3, #1
 8004cb6:	2300      	movne	r3, #0
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00d      	beq.n	8004cda <_ZN10IridiumSBD13check9603pinsEv+0x6e>
  {
    IO_REGISTER = wireport->read(); // Read the IO register
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	330c      	adds	r3, #12
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4610      	mov	r0, r2
 8004cce:	4798      	blx	r3
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	b2da      	uxtb	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
}
 8004cda:	bf00      	nop
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <_ZN10IridiumSBD11set9603pinsEh>:

//Set the IO pins
void IridiumSBD::set9603pins(uint8_t pins)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b082      	sub	sp, #8
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
 8004cea:	460b      	mov	r3, r1
 8004cec:	70fb      	strb	r3, [r7, #3]
  //Write to the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	4610      	mov	r0, r2
 8004cfc:	f000 f98c 	bl	8005018 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d04:	2110      	movs	r1, #16
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7ff fdb6 	bl	8004878 <_ZN7TwoWire5writeEi>
  wireport->write(pins); // Set the pins
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	78f9      	ldrb	r1, [r7, #3]
 8004d1a:	4610      	mov	r0, r2
 8004d1c:	4798      	blx	r3
  wireport->endTransmission(); // Send data and surrender the bus
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 f9c2 	bl	80050ac <_ZN7TwoWire15endTransmissionEv>
}
 8004d28:	bf00      	nop
 8004d2a:	3708      	adds	r7, #8
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>:

	return HAL_OK;
}


boolean IridiumSBD::MRT_Iridium_shutdown(void){
 8004d30:	b590      	push	{r4, r7, lr}
 8004d32:	b08b      	sub	sp, #44	; 0x2c
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nShutting down the Iridium\r\n", 29, HAL_MAX_DELAY);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d3e:	221d      	movs	r2, #29
 8004d40:	492f      	ldr	r1, [pc, #188]	; (8004e00 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd0>)
 8004d42:	f008 f8ca 	bl	800ceda <HAL_UART_Transmit>

	// Power down the modem
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Putting the 9603N to sleep...", 29, HAL_MAX_DELAY);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d4c:	221d      	movs	r2, #29
 8004d4e:	492d      	ldr	r1, [pc, #180]	; (8004e04 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd4>)
 8004d50:	f008 f8c3 	bl	800ceda <HAL_UART_Transmit>
	int err = this->sleep();
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f7ff fdad 	bl	80048b4 <_ZN10IridiumSBD5sleepEv>
 8004d5a:	6278      	str	r0, [r7, #36]	; 0x24
	if (err != ISBD_SUCCESS)
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d017      	beq.n	8004d92 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x62>
	{
		char str[24+sizeof(int)];
		sprintf(str, "sleep failed: error  %i\r\n", err);
 8004d62:	f107 0308 	add.w	r3, r7, #8
 8004d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d68:	4927      	ldr	r1, [pc, #156]	; (8004e08 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd8>)
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f016 f87c 	bl	801ae68 <siprintf>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8004d70:	687c      	ldr	r4, [r7, #4]
 8004d72:	f107 0308 	add.w	r3, r7, #8
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fb fa3a 	bl	80001f0 <strlen>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	f107 0108 	add.w	r1, r7, #8
 8004d84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d88:	4620      	mov	r0, r4
 8004d8a:	f008 f8a6 	bl	800ceda <HAL_UART_Transmit>
		return false;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	e032      	b.n	8004df8 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xc8>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d98:	2204      	movs	r2, #4
 8004d9a:	491c      	ldr	r1, [pc, #112]	; (8004e0c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8004d9c:	f008 f89d 	bl	800ceda <HAL_UART_Transmit>

	// Disable 9603N power
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Disabling 9603N power...", 24, HAL_MAX_DELAY);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004da6:	2218      	movs	r2, #24
 8004da8:	4919      	ldr	r1, [pc, #100]	; (8004e10 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe0>)
 8004daa:	f008 f896 	bl	800ceda <HAL_UART_Transmit>
	this->enable9603Npower(false);
 8004dae:	2100      	movs	r1, #0
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7ff fdf5 	bl	80049a0 <_ZN10IridiumSBD16enable9603NpowerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004dbc:	2204      	movs	r2, #4
 8004dbe:	4913      	ldr	r1, [pc, #76]	; (8004e0c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8004dc0:	f008 f88b 	bl	800ceda <HAL_UART_Transmit>

	// Disable the supercapacitor charger
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Disabling the supercapacitor charger...", 39, HAL_MAX_DELAY);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004dca:	2227      	movs	r2, #39	; 0x27
 8004dcc:	4911      	ldr	r1, [pc, #68]	; (8004e14 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe4>)
 8004dce:	f008 f884 	bl	800ceda <HAL_UART_Transmit>
	this->enableSuperCapCharger(false);
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f7ff fda5 	bl	8004924 <_ZN10IridiumSBD21enableSuperCapChargerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004de0:	2204      	movs	r2, #4
 8004de2:	490a      	ldr	r1, [pc, #40]	; (8004e0c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8004de4:	f008 f879 	bl	800ceda <HAL_UART_Transmit>

	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Iridium successfully shutdown\r\n", 32, HAL_MAX_DELAY);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004dee:	2220      	movs	r2, #32
 8004df0:	4909      	ldr	r1, [pc, #36]	; (8004e18 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe8>)
 8004df2:	f008 f872 	bl	800ceda <HAL_UART_Transmit>
	return true;
 8004df6:	2301      	movs	r3, #1
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	372c      	adds	r7, #44	; 0x2c
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd90      	pop	{r4, r7, pc}
 8004e00:	08020248 	.word	0x08020248
 8004e04:	08020268 	.word	0x08020268
 8004e08:	08020288 	.word	0x08020288
 8004e0c:	0801fa24 	.word	0x0801fa24
 8004e10:	080202a4 	.word	0x080202a4
 8004e14:	080202c0 	.word	0x080202c0
 8004e18:	080202e8 	.word	0x080202e8

08004e1c <MRT_Static_Iridium_Destructor>:
	if (E_T==NULL){
		E_T = new IridiumSBD();
	}
}

void MRT_Static_Iridium_Destructor(){
 8004e1c:	b480      	push	{r7}
 8004e1e:	af00      	add	r7, sp, #0
	if (E_T!=NULL){
 8004e20:	4b05      	ldr	r3, [pc, #20]	; (8004e38 <MRT_Static_Iridium_Destructor+0x1c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <MRT_Static_Iridium_Destructor+0x12>
		E_T = NULL;
 8004e28:	4b03      	ldr	r3, [pc, #12]	; (8004e38 <MRT_Static_Iridium_Destructor+0x1c>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	601a      	str	r2, [r3, #0]
	}
}
 8004e2e:	bf00      	nop
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	2000041c 	.word	0x2000041c

08004e3c <MRT_Static_Iridium_Shutdown>:
uint8_t MRT_Static_Iridium_Setup(UART_HandleTypeDef huart){
	MRT_Static_Iridium_Constructor();
	return E_T->MRT_Iridium_setup(huart);
}

bool MRT_Static_Iridium_Shutdown(void){
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
	bool b = E_T->MRT_Iridium_shutdown();
 8004e42:	4b09      	ldr	r3, [pc, #36]	; (8004e68 <MRT_Static_Iridium_Shutdown+0x2c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7ff ff72 	bl	8004d30 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	bf14      	ite	ne
 8004e52:	2301      	movne	r3, #1
 8004e54:	2300      	moveq	r3, #0
 8004e56:	71fb      	strb	r3, [r7, #7]
	MRT_Static_Iridium_Destructor();
 8004e58:	f7ff ffe0 	bl	8004e1c <MRT_Static_Iridium_Destructor>
	return b;
 8004e5c:	79fb      	ldrb	r3, [r7, #7]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	2000041c 	.word	0x2000041c

08004e6c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	617b      	str	r3, [r7, #20]
  while (size--) {
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	1e5a      	subs	r2, r3, #1
 8004e80:	607a      	str	r2, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	bf14      	ite	ne
 8004e86:	2301      	movne	r3, #1
 8004e88:	2300      	moveq	r3, #0
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00e      	beq.n	8004eae <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	1c59      	adds	r1, r3, #1
 8004e9a:	60b9      	str	r1, [r7, #8]
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	4790      	blx	r2
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	617b      	str	r3, [r7, #20]
  while (size--) {
 8004eac:	e7e6      	b.n	8004e7c <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8004eae:	697b      	ldr	r3, [r7, #20]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3718      	adds	r7, #24
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	4a06      	ldr	r2, [pc, #24]	; (8004edc <_ZN5PrintC1Ev+0x24>)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	605a      	str	r2, [r3, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	08020c08 	.word	0x08020c08

08004ee0 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7ff ffe4 	bl	8004eb8 <_ZN5PrintC1Ev>
 8004ef0:	4a05      	ldr	r2, [pc, #20]	; (8004f08 <_ZN6StreamC1Ev+0x28>)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	601a      	str	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004efc:	609a      	str	r2, [r3, #8]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4618      	mov	r0, r3
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	08020c38 	.word	0x08020c38

08004f0c <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7ff ffe1 	bl	8004ee0 <_ZN6StreamC1Ev>
 8004f1e:	4a16      	ldr	r2, [pc, #88]	; (8004f78 <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	683a      	ldr	r2, [r7, #0]
 8004f28:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	3390      	adds	r3, #144	; 0x90
 8004f2e:	2220      	movs	r2, #32
 8004f30:	2100      	movs	r1, #0
 8004f32:	4618      	mov	r0, r3
 8004f34:	f014 ff1a 	bl	8019d6c <memset>
  rxBufferIndex = 0;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4618      	mov	r0, r3
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	08020c18 	.word	0x08020c18

08004f7c <_ZN7TwoWire11requestFromEhhh>:
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
  HAL_I2C_Init(&I2cHandle);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af02      	add	r7, sp, #8
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	4608      	mov	r0, r1
 8004f86:	4611      	mov	r1, r2
 8004f88:	461a      	mov	r2, r3
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	70fb      	strb	r3, [r7, #3]
 8004f8e:	460b      	mov	r3, r1
 8004f90:	70bb      	strb	r3, [r7, #2]
 8004f92:	4613      	mov	r3, r2
 8004f94:	707b      	strb	r3, [r7, #1]
  uint8_t ret_val;

  disableInterrupt();
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 fc24 	bl	80057e4 <_ZN7TwoWire16disableInterruptEv>

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
 8004f9c:	78bb      	ldrb	r3, [r7, #2]
 8004f9e:	2b20      	cmp	r3, #32
 8004fa0:	d901      	bls.n	8004fa6 <_ZN7TwoWire11requestFromEhhh+0x2a>
    quantity = BUFFER_LENGTH;
 8004fa2:	2320      	movs	r3, #32
 8004fa4:	70bb      	strb	r3, [r7, #2]
  }
  // perform blocking read into buffer
  int read = i2c_master_read((address << 1), (char *)rxBuffer, quantity, sendStop);
 8004fa6:	78fb      	ldrb	r3, [r7, #3]
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	b2d9      	uxtb	r1, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8004fb2:	78b8      	ldrb	r0, [r7, #2]
 8004fb4:	787b      	ldrb	r3, [r7, #1]
 8004fb6:	9300      	str	r3, [sp, #0]
 8004fb8:	4603      	mov	r3, r0
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f9cf 	bl	800535e <_ZN7TwoWire15i2c_master_readEhPchh>
 8004fc0:	60b8      	str	r0, [r7, #8]

  if(read < 0)
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	da02      	bge.n	8004fce <_ZN7TwoWire11requestFromEhhh+0x52>
  {
    ret_val = 0;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	73fb      	strb	r3, [r7, #15]
 8004fcc:	e001      	b.n	8004fd2 <_ZN7TwoWire11requestFromEhhh+0x56>
  }else
  {
    ret_val = read;
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	73fb      	strb	r3, [r7, #15]
  }

  // set rx buffer iterator vars
  rxBufferIndex = 0;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = ret_val;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	7bfa      	ldrb	r2, [r7, #15]
 8004fde:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

  enableInterrupt();
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 fbcc 	bl	8005780 <_ZN7TwoWire15enableInterruptEv>

  return ret_val;
 8004fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b082      	sub	sp, #8
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	70fb      	strb	r3, [r7, #3]
 8004ffe:	4613      	mov	r3, r2
 8005000:	70bb      	strb	r3, [r7, #2]
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 8005002:	78ba      	ldrb	r2, [r7, #2]
 8005004:	78f9      	ldrb	r1, [r7, #3]
 8005006:	2301      	movs	r3, #1
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f7ff ffb7 	bl	8004f7c <_ZN7TwoWire11requestFromEhhh>
 800500e:	4603      	mov	r3, r0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <_ZN7TwoWire17beginTransmissionEh>:
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	460b      	mov	r3, r1
 8005022:	70fb      	strb	r3, [r7, #3]
  // indicate that we are transmitting
  transmitting = 1;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  // set address of targeted slave
  txAddress = address;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	78fa      	ldrb	r2, [r7, #3]
 8005030:	741a      	strb	r2, [r3, #16]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8005042:	bf00      	nop
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <_ZN7TwoWire15endTransmissionEh>:
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b086      	sub	sp, #24
 8005052:	af02      	add	r7, sp, #8
 8005054:	6078      	str	r0, [r7, #4]
 8005056:	460b      	mov	r3, r1
 8005058:	70fb      	strb	r3, [r7, #3]
  // transmit buffer (blocking)
  disableInterrupt();
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 fbc2 	bl	80057e4 <_ZN7TwoWire16disableInterruptEv>

  int8_t ret = i2c_master_write((txAddress << 1), (const char *)txBuffer, txBufferLength, sendStop);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	7c1b      	ldrb	r3, [r3, #16]
 8005064:	0059      	lsls	r1, r3, #1
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f103 0211 	add.w	r2, r3, #17
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005072:	4618      	mov	r0, r3
 8005074:	78fb      	ldrb	r3, [r7, #3]
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	4603      	mov	r3, r0
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 fa00 	bl	8005480 <_ZN7TwoWire16i2c_master_writeEiPKcii>
 8005080:	4603      	mov	r3, r0
 8005082:	73fb      	strb	r3, [r7, #15]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  // indicate that we are done transmitting
  transmitting = 0;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  enableInterrupt();
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 fb6f 	bl	8005780 <_ZN7TwoWire15enableInterruptEv>

  return ret;
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <_ZN7TwoWire15endTransmissionEv>:

//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  return endTransmission(true);
 80050b4:	2101      	movs	r1, #1
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7ff ffc9 	bl	800504e <_ZN7TwoWire15endTransmissionEh>
 80050bc:	4603      	mov	r3, r0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b082      	sub	sp, #8
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
 80050ce:	460b      	mov	r3, r1
 80050d0:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d01d      	beq.n	8005118 <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80050e2:	2b1f      	cmp	r3, #31
 80050e4:	d901      	bls.n	80050ea <_ZN7TwoWire5writeEh+0x24>
      return 0;
 80050e6:	2300      	movs	r3, #0
 80050e8:	e028      	b.n	800513c <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80050f0:	4619      	mov	r1, r3
 80050f2:	78fa      	ldrb	r2, [r7, #3]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	440b      	add	r3, r1
 80050f8:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005100:	3301      	adds	r3, #1
 8005102:	b2da      	uxtb	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8005116:	e010      	b.n	800513a <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 fb63 	bl	80057e4 <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 800511e:	1cfb      	adds	r3, r7, #3
 8005120:	2201      	movs	r2, #1
 8005122:	4619      	mov	r1, r3
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 fa95 	bl	8005654 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 fb28 	bl	8005780 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	333c      	adds	r3, #60	; 0x3c
 8005134:	4618      	mov	r0, r3
 8005136:	f003 f8ed 	bl	8008314 <HAL_I2C_EnableListen_IT>
  }
  return 1;
 800513a:	2301      	movs	r3, #1
}
 800513c:	4618      	mov	r0, r3
 800513e:	3708      	adds	r7, #8
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
  if(transmitting){
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8005156:	2b00      	cmp	r3, #0
 8005158:	d013      	beq.n	8005182 <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 800515a:	2300      	movs	r3, #0
 800515c:	617b      	str	r3, [r7, #20]
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	429a      	cmp	r2, r3
 8005164:	d21e      	bcs.n	80051a4 <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68b9      	ldr	r1, [r7, #8]
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	440a      	add	r2, r1
 8005172:	7812      	ldrb	r2, [r2, #0]
 8005174:	4611      	mov	r1, r2
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	3301      	adds	r3, #1
 800517e:	617b      	str	r3, [r7, #20]
 8005180:	e7ed      	b.n	800515e <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f000 fb2e 	bl	80057e4 <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	461a      	mov	r2, r3
 800518c:	68b9      	ldr	r1, [r7, #8]
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 fa60 	bl	8005654 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f000 faf3 	bl	8005780 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	333c      	adds	r3, #60	; 0x3c
 800519e:	4618      	mov	r0, r3
 80051a0:	f003 f8b8 	bl	8008314 <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 80051a4:	687b      	ldr	r3, [r7, #4]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3718      	adds	r7, #24
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b083      	sub	sp, #12
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	461a      	mov	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	1ad3      	subs	r3, r2, r3
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b085      	sub	sp, #20
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  int value = -1;
 80051de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051e2:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80051ea:	b2da      	uxtb	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	429a      	cmp	r2, r3
 80051f6:	bf34      	ite	cc
 80051f8:	2301      	movcc	r3, #1
 80051fa:	2300      	movcs	r3, #0
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d012      	beq.n	8005228 <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005208:	b2db      	uxtb	r3, r3
 800520a:	461a      	mov	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4413      	add	r3, r2
 8005210:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8005214:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800521c:	b2db      	uxtb	r3, r3
 800521e:	3301      	adds	r3, #1
 8005220:	b2da      	uxtb	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 8005228:	68fb      	ldr	r3, [r7, #12]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3714      	adds	r7, #20
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 8005236:	b480      	push	{r7}
 8005238:	b085      	sub	sp, #20
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  int value = -1;
 800523e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005242:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800524a:	b2da      	uxtb	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005252:	b2db      	uxtb	r3, r3
 8005254:	429a      	cmp	r2, r3
 8005256:	bf34      	ite	cc
 8005258:	2301      	movcc	r3, #1
 800525a:	2300      	movcs	r3, #0
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d009      	beq.n	8005276 <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005268:	b2db      	uxtb	r3, r3
 800526a:	461a      	mov	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4413      	add	r3, r2
 8005270:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8005274:	60fb      	str	r3, [r7, #12]
  }

  return value;
 8005276:	68fb      	ldr	r3, [r7, #12]
}
 8005278:	4618      	mov	r0, r3
 800527a:	3714      	adds	r7, #20
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <_ZN7TwoWire16i2c_master_startEv>:
{
  user_onRequest = function;
}

int TwoWire::i2c_master_start()
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a4:	60bb      	str	r3, [r7, #8]

    int timeout;

    // Clear Acknowledge failure flag
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052ae:	615a      	str	r2, [r3, #20]

    // Wait the STOP condition has been previously correctly sent
  // This timeout can be avoid in some specific cases by simply clearing the STOP bit
    timeout = FLAG_TIMEOUT;
 80052b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052b4:	60fb      	str	r3, [r7, #12]
    while ((i2c->CR1 & I2C_CR1_STOP) == I2C_CR1_STOP) {
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052c2:	bf0c      	ite	eq
 80052c4:	2301      	moveq	r3, #1
 80052c6:	2300      	movne	r3, #0
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00b      	beq.n	80052e6 <_ZN7TwoWire16i2c_master_startEv+0x4e>
        if ((timeout--) == 0) {
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	1e5a      	subs	r2, r3, #1
 80052d2:	60fa      	str	r2, [r7, #12]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	bf0c      	ite	eq
 80052d8:	2301      	moveq	r3, #1
 80052da:	2300      	movne	r3, #0
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d0e9      	beq.n	80052b6 <_ZN7TwoWire16i2c_master_startEv+0x1e>
            return 1;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e021      	b.n	800532a <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    // Generate the START condition
    i2c->CR1 |= I2C_CR1_START;
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	601a      	str	r2, [r3, #0]

    // Wait the START condition has been correctly sent
    timeout = FLAG_TIMEOUT;
 80052f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052f6:	60fb      	str	r3, [r7, #12]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b01      	cmp	r3, #1
 8005304:	bf14      	ite	ne
 8005306:	2301      	movne	r3, #1
 8005308:	2300      	moveq	r3, #0
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00b      	beq.n	8005328 <_ZN7TwoWire16i2c_master_startEv+0x90>
        if ((timeout--) == 0) {
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	1e5a      	subs	r2, r3, #1
 8005314:	60fa      	str	r2, [r7, #12]
 8005316:	2b00      	cmp	r3, #0
 8005318:	bf0c      	ite	eq
 800531a:	2301      	moveq	r3, #1
 800531c:	2300      	movne	r3, #0
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b00      	cmp	r3, #0
 8005322:	d0e9      	beq.n	80052f8 <_ZN7TwoWire16i2c_master_startEv+0x60>
            return 1;
 8005324:	2301      	movs	r3, #1
 8005326:	e000      	b.n	800532a <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    return 0;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3714      	adds	r7, #20
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <_ZN7TwoWire15i2c_master_stopEv>:

int TwoWire::i2c_master_stop()
{
 8005336:	b480      	push	{r7}
 8005338:	b085      	sub	sp, #20
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005342:	60fb      	str	r3, [r7, #12]

    // Generate the STOP condition
    i2c->CR1 |= I2C_CR1_STOP;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	601a      	str	r2, [r3, #0]

    return 0;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <_ZN7TwoWire15i2c_master_readEhPchh>:

int TwoWire::i2c_master_read(uint8_t address, char *data, uint8_t length, uint8_t stop)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b08a      	sub	sp, #40	; 0x28
 8005362:	af00      	add	r7, sp, #0
 8005364:	60f8      	str	r0, [r7, #12]
 8005366:	607a      	str	r2, [r7, #4]
 8005368:	461a      	mov	r2, r3
 800536a:	460b      	mov	r3, r1
 800536c:	72fb      	strb	r3, [r7, #11]
 800536e:	4613      	mov	r3, r2
 8005370:	72bb      	strb	r3, [r7, #10]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005376:	61fb      	str	r3, [r7, #28]
    int timeout;
    int count;
    int value;
    int ret;

    i2c_master_start();
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f7ff ff8d 	bl	8005298 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 800537e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005382:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b01      	cmp	r3, #1
 8005390:	bf14      	ite	ne
 8005392:	2301      	movne	r3, #1
 8005394:	2300      	moveq	r3, #0
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b00      	cmp	r3, #0
 800539a:	d008      	beq.n	80053ae <_ZN7TwoWire15i2c_master_readEhPchh+0x50>
        timeout--;
 800539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539e:	3b01      	subs	r3, #1
 80053a0:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1ed      	bne.n	8005384 <_ZN7TwoWire15i2c_master_readEhPchh+0x26>
            return -1;
 80053a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053ac:	e064      	b.n	8005478 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_READ(address);
 80053ae:	7afb      	ldrb	r3, [r7, #11]
 80053b0:	f043 0301 	orr.w	r3, r3, #1
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	461a      	mov	r2, r3
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 80053bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053c0:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	bf14      	ite	ne
 80053d0:	2301      	movne	r3, #1
 80053d2:	2300      	moveq	r3, #0
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d008      	beq.n	80053ec <_ZN7TwoWire15i2c_master_readEhPchh+0x8e>
        timeout--;
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	3b01      	subs	r3, #1
 80053de:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1ed      	bne.n	80053c2 <_ZN7TwoWire15i2c_master_readEhPchh+0x64>
            return -1;
 80053e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053ea:	e045      	b.n	8005478 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 80053ec:	2300      	movs	r3, #0
 80053ee:	613b      	str	r3, [r7, #16]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	613b      	str	r3, [r7, #16]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	613b      	str	r3, [r7, #16]
 8005400:	693b      	ldr	r3, [r7, #16]

    // Read all bytes except last one
    for (count = 0; count < (length - 1); count++) {
 8005402:	2300      	movs	r3, #0
 8005404:	623b      	str	r3, [r7, #32]
 8005406:	7abb      	ldrb	r3, [r7, #10]
 8005408:	3b01      	subs	r3, #1
 800540a:	6a3a      	ldr	r2, [r7, #32]
 800540c:	429a      	cmp	r2, r3
 800540e:	da17      	bge.n	8005440 <_ZN7TwoWire15i2c_master_readEhPchh+0xe2>
        ret = i2c_master_byte_read(&value, 0);
 8005410:	f107 0314 	add.w	r3, r7, #20
 8005414:	2200      	movs	r2, #0
 8005416:	4619      	mov	r1, r3
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 f8a4 	bl	8005566 <_ZN7TwoWire20i2c_master_byte_readEPii>
 800541e:	61b8      	str	r0, [r7, #24]
        if(ret)
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d002      	beq.n	800542c <_ZN7TwoWire15i2c_master_readEhPchh+0xce>
        {
          return -1;
 8005426:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800542a:	e025      	b.n	8005478 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
        data[count] = (char)value;
 800542c:	6979      	ldr	r1, [r7, #20]
 800542e:	6a3b      	ldr	r3, [r7, #32]
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	4413      	add	r3, r2
 8005434:	b2ca      	uxtb	r2, r1
 8005436:	701a      	strb	r2, [r3, #0]
    for (count = 0; count < (length - 1); count++) {
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	3301      	adds	r3, #1
 800543c:	623b      	str	r3, [r7, #32]
 800543e:	e7e2      	b.n	8005406 <_ZN7TwoWire15i2c_master_readEhPchh+0xa8>
    }

    // If not repeated start, send stop.
    // Warning: must be done BEFORE the data is read.
    if (stop) {
 8005440:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005444:	2b00      	cmp	r3, #0
 8005446:	d002      	beq.n	800544e <_ZN7TwoWire15i2c_master_readEhPchh+0xf0>
        i2c_master_stop();
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f7ff ff74 	bl	8005336 <_ZN7TwoWire15i2c_master_stopEv>
    }

    // Read the last byte
    ret = i2c_master_byte_read(&value, 1);
 800544e:	f107 0314 	add.w	r3, r7, #20
 8005452:	2201      	movs	r2, #1
 8005454:	4619      	mov	r1, r3
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f000 f885 	bl	8005566 <_ZN7TwoWire20i2c_master_byte_readEPii>
 800545c:	61b8      	str	r0, [r7, #24]
    if(ret)
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d002      	beq.n	800546a <_ZN7TwoWire15i2c_master_readEhPchh+0x10c>
    {
      return -1;
 8005464:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005468:	e006      	b.n	8005478 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
    }
    data[count] = (char)value;
 800546a:	6979      	ldr	r1, [r7, #20]
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	4413      	add	r3, r2
 8005472:	b2ca      	uxtb	r2, r1
 8005474:	701a      	strb	r2, [r3, #0]

    return length;
 8005476:	7abb      	ldrb	r3, [r7, #10]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3728      	adds	r7, #40	; 0x28
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <_ZN7TwoWire16i2c_master_writeEiPKcii>:

int TwoWire::i2c_master_write(int address, const char *data, int length, int stop)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b088      	sub	sp, #32
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
 800548c:	603b      	str	r3, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005492:	617b      	str	r3, [r7, #20]
    int timeout;
    int count;

    i2c_master_start();
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f7ff feff 	bl	8005298 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 800549a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800549e:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	bf14      	ite	ne
 80054ae:	2301      	movne	r3, #1
 80054b0:	2300      	moveq	r3, #0
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d007      	beq.n	80054c8 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x48>
        timeout--;
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	3b01      	subs	r3, #1
 80054bc:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1ed      	bne.n	80054a0 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x20>
            return 4;
 80054c4:	2304      	movs	r3, #4
 80054c6:	e04a      	b.n	800555e <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_WRITE(address);
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 80054d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054d8:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	f003 0302 	and.w	r3, r3, #2
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	bf14      	ite	ne
 80054e8:	2301      	movne	r3, #1
 80054ea:	2300      	moveq	r3, #0
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d007      	beq.n	8005502 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x82>
        timeout--;
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	3b01      	subs	r3, #1
 80054f6:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1ed      	bne.n	80054da <_ZN7TwoWire16i2c_master_writeEiPKcii+0x5a>
            return 2;
 80054fe:	2302      	movs	r3, #2
 8005500:	e02d      	b.n	800555e <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 8005502:	2300      	movs	r3, #0
 8005504:	613b      	str	r3, [r7, #16]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	613b      	str	r3, [r7, #16]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	613b      	str	r3, [r7, #16]
 8005516:	693b      	ldr	r3, [r7, #16]

    for (count = 0; count < length; count++) {
 8005518:	2300      	movs	r3, #0
 800551a:	61bb      	str	r3, [r7, #24]
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	429a      	cmp	r2, r3
 8005522:	da15      	bge.n	8005550 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xd0>
        if (i2c_master_byte_write(data[count]) != 1) {
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	4413      	add	r3, r2
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	4619      	mov	r1, r3
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f000 f85a 	bl	80055e8 <_ZN7TwoWire21i2c_master_byte_writeEi>
 8005534:	4603      	mov	r3, r0
 8005536:	2b01      	cmp	r3, #1
 8005538:	bf14      	ite	ne
 800553a:	2301      	movne	r3, #1
 800553c:	2300      	moveq	r3, #0
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b00      	cmp	r3, #0
 8005542:	d001      	beq.n	8005548 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xc8>
            return 3;
 8005544:	2303      	movs	r3, #3
 8005546:	e00a      	b.n	800555e <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
    for (count = 0; count < length; count++) {
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	3301      	adds	r3, #1
 800554c:	61bb      	str	r3, [r7, #24]
 800554e:	e7e5      	b.n	800551c <_ZN7TwoWire16i2c_master_writeEiPKcii+0x9c>
        }
    }

    // If not repeated start, send stop.
    if (stop) {
 8005550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005552:	2b00      	cmp	r3, #0
 8005554:	d002      	beq.n	800555c <_ZN7TwoWire16i2c_master_writeEiPKcii+0xdc>
        i2c_master_stop();
 8005556:	68f8      	ldr	r0, [r7, #12]
 8005558:	f7ff feed 	bl	8005336 <_ZN7TwoWire15i2c_master_stopEv>
    }

    return 0;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3720      	adds	r7, #32
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <_ZN7TwoWire20i2c_master_byte_readEPii>:

int TwoWire::i2c_master_byte_read(int *value, int last)
{
 8005566:	b480      	push	{r7}
 8005568:	b087      	sub	sp, #28
 800556a:	af00      	add	r7, sp, #0
 800556c:	60f8      	str	r0, [r7, #12]
 800556e:	60b9      	str	r1, [r7, #8]
 8005570:	607a      	str	r2, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005576:	613b      	str	r3, [r7, #16]
    int timeout;

    if (last) {
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d006      	beq.n	800558c <_ZN7TwoWire20i2c_master_byte_readEPii+0x26>
        // Don't acknowledge the last byte
        i2c->CR1 &= ~I2C_CR1_ACK;
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	601a      	str	r2, [r3, #0]
 800558a:	e005      	b.n	8005598 <_ZN7TwoWire20i2c_master_byte_readEPii+0x32>
    } else {
        // Acknowledge the byte
        i2c->CR1 |= I2C_CR1_ACK;
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	601a      	str	r2, [r3, #0]
    }

    // Wait until the byte is received
    timeout = FLAG_TIMEOUT;
 8005598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800559c:	617b      	str	r3, [r7, #20]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_RXNE) == RESET) {
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a2:	695b      	ldr	r3, [r3, #20]
 80055a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a8:	2b40      	cmp	r3, #64	; 0x40
 80055aa:	bf14      	ite	ne
 80055ac:	2301      	movne	r3, #1
 80055ae:	2300      	moveq	r3, #0
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00c      	beq.n	80055d0 <_ZN7TwoWire20i2c_master_byte_readEPii+0x6a>
        if ((timeout--) == 0) {
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	1e5a      	subs	r2, r3, #1
 80055ba:	617a      	str	r2, [r7, #20]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	bf0c      	ite	eq
 80055c0:	2301      	moveq	r3, #1
 80055c2:	2300      	movne	r3, #0
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d0e9      	beq.n	800559e <_ZN7TwoWire20i2c_master_byte_readEPii+0x38>
            return -1;
 80055ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055ce:	e005      	b.n	80055dc <_ZN7TwoWire20i2c_master_byte_readEPii+0x76>
        }
    }

    *value = (int)i2c->DR;
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	461a      	mov	r2, r3
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	601a      	str	r2, [r3, #0]

    return 0;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	371c      	adds	r7, #28
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <_ZN7TwoWire21i2c_master_byte_writeEi>:

int TwoWire::i2c_master_byte_write(int data)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f6:	60bb      	str	r3, [r7, #8]
    int timeout;

    i2c->DR = (uint8_t)data;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	461a      	mov	r2, r3
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	611a      	str	r2, [r3, #16]

    // Wait until the byte is transmitted
    timeout = FLAG_TIMEOUT;
 8005602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005606:	60fb      	str	r3, [r7, #12]
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005612:	2b80      	cmp	r3, #128	; 0x80
 8005614:	d008      	beq.n	8005628 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
            (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == RESET)) {
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	f003 0304 	and.w	r3, r3, #4
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8005620:	2b04      	cmp	r3, #4
 8005622:	d001      	beq.n	8005628 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
 8005624:	2301      	movs	r3, #1
 8005626:	e000      	b.n	800562a <_ZN7TwoWire21i2c_master_byte_writeEi+0x42>
 8005628:	2300      	movs	r3, #0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00b      	beq.n	8005646 <_ZN7TwoWire21i2c_master_byte_writeEi+0x5e>
        if ((timeout--) == 0) {
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	1e5a      	subs	r2, r3, #1
 8005632:	60fa      	str	r2, [r7, #12]
 8005634:	2b00      	cmp	r3, #0
 8005636:	bf0c      	ite	eq
 8005638:	2301      	moveq	r3, #1
 800563a:	2300      	movne	r3, #0
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d0e2      	beq.n	8005608 <_ZN7TwoWire21i2c_master_byte_writeEi+0x20>
            return 0;
 8005642:	2300      	movs	r3, #0
 8005644:	e000      	b.n	8005648 <_ZN7TwoWire21i2c_master_byte_writeEi+0x60>
        }
    }

    return 1;
 8005646:	2301      	movs	r3, #1
}
 8005648:	4618      	mov	r0, r3
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <_ZN7TwoWire15i2c_slave_writeEPKci>:

int TwoWire::i2c_slave_write(const char *data, int length)
{
 8005654:	b480      	push	{r7}
 8005656:	b089      	sub	sp, #36	; 0x24
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 8005660:	2300      	movs	r3, #0
 8005662:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005668:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	dd41      	ble.n	80056f4 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 8005670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005674:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005680:	2b80      	cmp	r3, #128	; 0x80
 8005682:	bf14      	ite	ne
 8005684:	2301      	movne	r3, #1
 8005686:	2300      	moveq	r3, #0
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d008      	beq.n	80056a0 <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	3b01      	subs	r3, #1
 8005692:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1ed      	bne.n	8005676 <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 800569a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800569e:	e068      	b.n	8005772 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	1c5a      	adds	r2, r3, #1
 80056a4:	60ba      	str	r2, [r7, #8]
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	461a      	mov	r2, r3
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	611a      	str	r2, [r3, #16]
        length--;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	3b01      	subs	r3, #1
 80056b2:	607b      	str	r3, [r7, #4]
        size++;
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	3301      	adds	r3, #1
 80056b8:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	f003 0304 	and.w	r3, r3, #4
 80056c4:	2b04      	cmp	r3, #4
 80056c6:	d104      	bne.n	80056d2 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 80056ce:	2301      	movs	r3, #1
 80056d0:	e000      	b.n	80056d4 <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 80056d2:	2300      	movs	r3, #0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0c8      	beq.n	800566a <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	1c5a      	adds	r2, r3, #1
 80056dc:	60ba      	str	r2, [r7, #8]
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	461a      	mov	r2, r3
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	611a      	str	r2, [r3, #16]
            length--;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	3b01      	subs	r3, #1
 80056ea:	607b      	str	r3, [r7, #4]
            size++;
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	3301      	adds	r3, #1
 80056f0:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 80056f2:	e7ba      	b.n	800566a <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 80056f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056f8:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005708:	bf14      	ite	ne
 800570a:	2301      	movne	r3, #1
 800570c:	2300      	moveq	r3, #0
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	d008      	beq.n	8005726 <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	3b01      	subs	r3, #1
 8005718:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1ec      	bne.n	80056fa <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 8005720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005724:	e025      	b.n	8005772 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800572a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800572e:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 8005730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005734:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b02      	cmp	r3, #2
 8005742:	bf0c      	ite	eq
 8005744:	2301      	moveq	r3, #1
 8005746:	2300      	movne	r3, #0
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d008      	beq.n	8005760 <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	3b01      	subs	r3, #1
 8005752:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1ed      	bne.n	8005736 <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 800575a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800575e:	e008      	b.n	8005772 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2220      	movs	r2, #32
 8005764:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 8005770:	69bb      	ldr	r3, [r7, #24]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3724      	adds	r7, #36	; 0x24
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
	...

08005780 <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800578c:	4a12      	ldr	r2, [pc, #72]	; (80057d8 <_ZN7TwoWire15enableInterruptEv+0x58>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d106      	bne.n	80057a0 <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8005792:	2049      	movs	r0, #73	; 0x49
 8005794:	f001 ff48 	bl	8007628 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8005798:	2048      	movs	r0, #72	; 0x48
 800579a:	f001 ff45 	bl	8007628 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 800579e:	e016      	b.n	80057ce <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a4:	4a0d      	ldr	r2, [pc, #52]	; (80057dc <_ZN7TwoWire15enableInterruptEv+0x5c>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d106      	bne.n	80057b8 <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80057aa:	2022      	movs	r0, #34	; 0x22
 80057ac:	f001 ff3c 	bl	8007628 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80057b0:	2021      	movs	r0, #33	; 0x21
 80057b2:	f001 ff39 	bl	8007628 <HAL_NVIC_EnableIRQ>
}
 80057b6:	e00a      	b.n	80057ce <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057bc:	4a08      	ldr	r2, [pc, #32]	; (80057e0 <_ZN7TwoWire15enableInterruptEv+0x60>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d105      	bne.n	80057ce <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80057c2:	2020      	movs	r0, #32
 80057c4:	f001 ff30 	bl	8007628 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80057c8:	201f      	movs	r0, #31
 80057ca:	f001 ff2d 	bl	8007628 <HAL_NVIC_EnableIRQ>
}
 80057ce:	bf00      	nop
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	40005c00 	.word	0x40005c00
 80057dc:	40005800 	.word	0x40005800
 80057e0:	40005400 	.word	0x40005400

080057e4 <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f0:	4a12      	ldr	r2, [pc, #72]	; (800583c <_ZN7TwoWire16disableInterruptEv+0x58>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d106      	bne.n	8005804 <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 80057f6:	2049      	movs	r0, #73	; 0x49
 80057f8:	f001 ff24 	bl	8007644 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 80057fc:	2048      	movs	r0, #72	; 0x48
 80057fe:	f001 ff21 	bl	8007644 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8005802:	e016      	b.n	8005832 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005808:	4a0d      	ldr	r2, [pc, #52]	; (8005840 <_ZN7TwoWire16disableInterruptEv+0x5c>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d106      	bne.n	800581c <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 800580e:	2022      	movs	r0, #34	; 0x22
 8005810:	f001 ff18 	bl	8007644 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8005814:	2021      	movs	r0, #33	; 0x21
 8005816:	f001 ff15 	bl	8007644 <HAL_NVIC_DisableIRQ>
}
 800581a:	e00a      	b.n	8005832 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005820:	4a08      	ldr	r2, [pc, #32]	; (8005844 <_ZN7TwoWire16disableInterruptEv+0x60>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d105      	bne.n	8005832 <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8005826:	2020      	movs	r0, #32
 8005828:	f001 ff0c 	bl	8007644 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800582c:	201f      	movs	r0, #31
 800582e:	f001 ff09 	bl	8007644 <HAL_NVIC_DisableIRQ>
}
 8005832:	bf00      	nop
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	40005c00 	.word	0x40005c00
 8005840:	40005800 	.word	0x40005800
 8005844:	40005400 	.word	0x40005400

08005848 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d110      	bne.n	800587a <_Z41__static_initialization_and_destruction_0ii+0x32>
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800585e:	4293      	cmp	r3, r2
 8005860:	d10b      	bne.n	800587a <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 8005862:	4908      	ldr	r1, [pc, #32]	; (8005884 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8005864:	4808      	ldr	r0, [pc, #32]	; (8005888 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8005866:	f7ff fb51 	bl	8004f0c <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 800586a:	4908      	ldr	r1, [pc, #32]	; (800588c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800586c:	4808      	ldr	r0, [pc, #32]	; (8005890 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800586e:	f7ff fb4d 	bl	8004f0c <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 8005872:	4908      	ldr	r1, [pc, #32]	; (8005894 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8005874:	4808      	ldr	r0, [pc, #32]	; (8005898 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8005876:	f7ff fb49 	bl	8004f0c <_ZN7TwoWireC1EP11I2C_TypeDef>
 800587a:	bf00      	nop
 800587c:	3708      	adds	r7, #8
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	40005400 	.word	0x40005400
 8005888:	20000420 	.word	0x20000420
 800588c:	40005800 	.word	0x40005800
 8005890:	200004d8 	.word	0x200004d8
 8005894:	40005c00 	.word	0x40005c00
 8005898:	20000590 	.word	0x20000590

0800589c <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 800589c:	b580      	push	{r7, lr}
 800589e:	af00      	add	r7, sp, #0
 80058a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80058a4:	2001      	movs	r0, #1
 80058a6:	f7ff ffcf 	bl	8005848 <_Z41__static_initialization_and_destruction_0ii>
 80058aa:	bd80      	pop	{r7, pc}

080058ac <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80058ac:	b590      	push	{r4, r7, lr}
 80058ae:	b087      	sub	sp, #28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	607a      	str	r2, [r7, #4]
 80058b6:	461a      	mov	r2, r3
 80058b8:	460b      	mov	r3, r1
 80058ba:	72fb      	strb	r3, [r7, #11]
 80058bc:	4613      	mov	r3, r2
 80058be:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	685c      	ldr	r4, [r3, #4]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6898      	ldr	r0, [r3, #8]
 80058c8:	893b      	ldrh	r3, [r7, #8]
 80058ca:	7af9      	ldrb	r1, [r7, #11]
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	47a0      	blx	r4
 80058d0:	6178      	str	r0, [r7, #20]

  return ret;
 80058d2:	697b      	ldr	r3, [r7, #20]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	371c      	adds	r7, #28
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd90      	pop	{r4, r7, pc}

080058dc <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80058dc:	b590      	push	{r4, r7, lr}
 80058de:	b087      	sub	sp, #28
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	607a      	str	r2, [r7, #4]
 80058e6:	461a      	mov	r2, r3
 80058e8:	460b      	mov	r3, r1
 80058ea:	72fb      	strb	r3, [r7, #11]
 80058ec:	4613      	mov	r3, r2
 80058ee:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681c      	ldr	r4, [r3, #0]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6898      	ldr	r0, [r3, #8]
 80058f8:	893b      	ldrh	r3, [r7, #8]
 80058fa:	7af9      	ldrb	r1, [r7, #11]
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	47a0      	blx	r4
 8005900:	6178      	str	r0, [r7, #20]

  return ret;
 8005902:	697b      	ldr	r3, [r7, #20]
}
 8005904:	4618      	mov	r0, r3
 8005906:	371c      	adds	r7, #28
 8005908:	46bd      	mov	sp, r7
 800590a:	bd90      	pop	{r4, r7, pc}

0800590c <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	ee07 3a90 	vmov	s15, r3
 800591a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800591e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005938 <lps22hh_from_lsb_to_hpa+0x2c>
 8005922:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005926:	eef0 7a66 	vmov.f32	s15, s13
}
 800592a:	eeb0 0a67 	vmov.f32	s0, s15
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	49800000 	.word	0x49800000

0800593c <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	4603      	mov	r3, r0
 8005944:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8005946:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800594a:	ee07 3a90 	vmov	s15, r3
 800594e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005952:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800596c <lps22hh_from_lsb_to_celsius+0x30>
 8005956:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800595a:	eef0 7a66 	vmov.f32	s15, s13
}
 800595e:	eeb0 0a67 	vmov.f32	s0, s15
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	42c80000 	.word	0x42c80000

08005970 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	460b      	mov	r3, r1
 800597a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800597c:	f107 0208 	add.w	r2, r7, #8
 8005980:	2301      	movs	r3, #1
 8005982:	2110      	movs	r1, #16
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f7ff ff91 	bl	80058ac <lps22hh_read_reg>
 800598a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10f      	bne.n	80059b2 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8005992:	78fb      	ldrb	r3, [r7, #3]
 8005994:	f003 0301 	and.w	r3, r3, #1
 8005998:	b2da      	uxtb	r2, r3
 800599a:	7a3b      	ldrb	r3, [r7, #8]
 800599c:	f362 0341 	bfi	r3, r2, #1, #1
 80059a0:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80059a2:	f107 0208 	add.w	r2, r7, #8
 80059a6:	2301      	movs	r3, #1
 80059a8:	2110      	movs	r1, #16
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7ff ff96 	bl	80058dc <lps22hh_write_reg>
 80059b0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80059b2:	68fb      	ldr	r3, [r7, #12]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	460b      	mov	r3, r1
 80059c6:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80059c8:	f107 0210 	add.w	r2, r7, #16
 80059cc:	2301      	movs	r3, #1
 80059ce:	2110      	movs	r1, #16
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f7ff ff6b 	bl	80058ac <lps22hh_read_reg>
 80059d6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d107      	bne.n	80059ee <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80059de:	f107 020c 	add.w	r2, r7, #12
 80059e2:	2301      	movs	r3, #1
 80059e4:	2111      	movs	r1, #17
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7ff ff60 	bl	80058ac <lps22hh_read_reg>
 80059ec:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10f      	bne.n	8005a14 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 80059f4:	78fb      	ldrb	r3, [r7, #3]
 80059f6:	f003 0307 	and.w	r3, r3, #7
 80059fa:	b2da      	uxtb	r2, r3
 80059fc:	7c3b      	ldrb	r3, [r7, #16]
 80059fe:	f362 1306 	bfi	r3, r2, #4, #3
 8005a02:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005a04:	f107 0210 	add.w	r2, r7, #16
 8005a08:	2301      	movs	r3, #1
 8005a0a:	2110      	movs	r1, #16
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f7ff ff65 	bl	80058dc <lps22hh_write_reg>
 8005a12:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d119      	bne.n	8005a4e <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8005a1a:	78fb      	ldrb	r3, [r7, #3]
 8005a1c:	091b      	lsrs	r3, r3, #4
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	b2da      	uxtb	r2, r3
 8005a24:	7b3b      	ldrb	r3, [r7, #12]
 8005a26:	f362 0341 	bfi	r3, r2, #1, #1
 8005a2a:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8005a2c:	78fb      	ldrb	r3, [r7, #3]
 8005a2e:	08db      	lsrs	r3, r3, #3
 8005a30:	f003 0301 	and.w	r3, r3, #1
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	7b3b      	ldrb	r3, [r7, #12]
 8005a38:	f362 0300 	bfi	r3, r2, #0, #1
 8005a3c:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005a3e:	f107 020c 	add.w	r2, r7, #12
 8005a42:	2301      	movs	r3, #1
 8005a44:	2111      	movs	r1, #17
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f7ff ff48 	bl	80058dc <lps22hh_write_reg>
 8005a4c:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8005a4e:	697b      	ldr	r3, [r7, #20]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3718      	adds	r7, #24
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <lps22hh_temp_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8005a62:	f107 0208 	add.w	r2, r7, #8
 8005a66:	2301      	movs	r3, #1
 8005a68:	2127      	movs	r1, #39	; 0x27
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f7ff ff1e 	bl	80058ac <lps22hh_read_reg>
 8005a70:	60f8      	str	r0, [r7, #12]
  *val = reg.t_da;
 8005a72:	7a3b      	ldrb	r3, [r7, #8]
 8005a74:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	701a      	strb	r2, [r3, #0]

  return ret;
 8005a80:	68fb      	ldr	r3, [r7, #12]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b084      	sub	sp, #16
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
 8005a92:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8005a94:	f107 0208 	add.w	r2, r7, #8
 8005a98:	2303      	movs	r3, #3
 8005a9a:	2128      	movs	r1, #40	; 0x28
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f7ff ff05 	bl	80058ac <lps22hh_read_reg>
 8005aa2:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8005aa4:	7abb      	ldrb	r3, [r7, #10]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	021b      	lsls	r3, r3, #8
 8005ab2:	7a7a      	ldrb	r2, [r7, #9]
 8005ab4:	441a      	add	r2, r3
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	021b      	lsls	r3, r3, #8
 8005ac0:	7a3a      	ldrb	r2, [r7, #8]
 8005ac2:	441a      	add	r2, r3
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	021a      	lsls	r2, r3, #8
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	601a      	str	r2, [r3, #0]

  return ret;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8005ae6:	f107 0208 	add.w	r2, r7, #8
 8005aea:	2302      	movs	r3, #2
 8005aec:	212b      	movs	r1, #43	; 0x2b
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7ff fedc 	bl	80058ac <lps22hh_read_reg>
 8005af4:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8005af6:	7a7b      	ldrb	r3, [r7, #9]
 8005af8:	b21a      	sxth	r2, r3
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	021b      	lsls	r3, r3, #8
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	7a3b      	ldrb	r3, [r7, #8]
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	4413      	add	r3, r2
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	b21a      	sxth	r2, r3
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	801a      	strh	r2, [r3, #0]

  return ret;
 8005b18:	68fb      	ldr	r3, [r7, #12]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b084      	sub	sp, #16
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
 8005b2a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	683a      	ldr	r2, [r7, #0]
 8005b30:	210f      	movs	r1, #15
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7ff feba 	bl	80058ac <lps22hh_read_reg>
 8005b38:	60f8      	str	r0, [r7, #12]

  return ret;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005b50:	f107 0208 	add.w	r2, r7, #8
 8005b54:	2301      	movs	r3, #1
 8005b56:	2111      	movs	r1, #17
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f7ff fea7 	bl	80058ac <lps22hh_read_reg>
 8005b5e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10f      	bne.n	8005b86 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8005b66:	78fb      	ldrb	r3, [r7, #3]
 8005b68:	f003 0301 	and.w	r3, r3, #1
 8005b6c:	b2da      	uxtb	r2, r3
 8005b6e:	7a3b      	ldrb	r3, [r7, #8]
 8005b70:	f362 0382 	bfi	r3, r2, #2, #1
 8005b74:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005b76:	f107 0208 	add.w	r2, r7, #8
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	2111      	movs	r1, #17
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f7ff feac 	bl	80058dc <lps22hh_write_reg>
 8005b84:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005b86:	68fb      	ldr	r3, [r7, #12]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005b9a:	f107 0208 	add.w	r2, r7, #8
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	2111      	movs	r1, #17
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7ff fe82 	bl	80058ac <lps22hh_read_reg>
 8005ba8:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8005baa:	7a3b      	ldrb	r3, [r7, #8]
 8005bac:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	701a      	strb	r2, [r3, #0]

  return ret;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005bc2:	b590      	push	{r4, r7, lr}
 8005bc4:	b087      	sub	sp, #28
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	60f8      	str	r0, [r7, #12]
 8005bca:	607a      	str	r2, [r7, #4]
 8005bcc:	461a      	mov	r2, r3
 8005bce:	460b      	mov	r3, r1
 8005bd0:	72fb      	strb	r3, [r7, #11]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	685c      	ldr	r4, [r3, #4]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6898      	ldr	r0, [r3, #8]
 8005bde:	893b      	ldrh	r3, [r7, #8]
 8005be0:	7af9      	ldrb	r1, [r7, #11]
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	47a0      	blx	r4
 8005be6:	6178      	str	r0, [r7, #20]

  return ret;
 8005be8:	697b      	ldr	r3, [r7, #20]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	371c      	adds	r7, #28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd90      	pop	{r4, r7, pc}

08005bf2 <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005bf2:	b590      	push	{r4, r7, lr}
 8005bf4:	b087      	sub	sp, #28
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	60f8      	str	r0, [r7, #12]
 8005bfa:	607a      	str	r2, [r7, #4]
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	460b      	mov	r3, r1
 8005c00:	72fb      	strb	r3, [r7, #11]
 8005c02:	4613      	mov	r3, r2
 8005c04:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681c      	ldr	r4, [r3, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6898      	ldr	r0, [r3, #8]
 8005c0e:	893b      	ldrh	r3, [r7, #8]
 8005c10:	7af9      	ldrb	r1, [r7, #11]
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	47a0      	blx	r4
 8005c16:	6178      	str	r0, [r7, #20]

  return ret;
 8005c18:	697b      	ldr	r3, [r7, #20]
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	371c      	adds	r7, #28
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd90      	pop	{r4, r7, pc}
	...

08005c24 <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8005c2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c32:	ee07 3a90 	vmov	s15, r3
 8005c36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c3a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005c50 <lsm6dsr_from_fs2g_to_mg+0x2c>
 8005c3e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8005c42:	eeb0 0a67 	vmov.f32	s0, s15
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr
 8005c50:	3d79db23 	.word	0x3d79db23

08005c54 <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8005c5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c62:	ee07 3a90 	vmov	s15, r3
 8005c66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c6a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005c80 <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 8005c6e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8005c72:	eeb0 0a67 	vmov.f32	s0, s15
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	428c0000 	.word	0x428c0000

08005c84 <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 8005c8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c92:	ee07 3a90 	vmov	s15, r3
 8005c96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c9a:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005cb8 <lsm6dsr_from_lsb_to_celsius+0x34>
 8005c9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ca2:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005ca6:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8005caa:	eeb0 0a67 	vmov.f32	s0, s15
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr
 8005cb8:	43800000 	.word	0x43800000

08005cbc <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005cc8:	f107 0208 	add.w	r2, r7, #8
 8005ccc:	2301      	movs	r3, #1
 8005cce:	2110      	movs	r1, #16
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f7ff ff76 	bl	8005bc2 <lsm6dsr_read_reg>
 8005cd6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10f      	bne.n	8005cfe <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8005cde:	78fb      	ldrb	r3, [r7, #3]
 8005ce0:	f003 0303 	and.w	r3, r3, #3
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	7a3b      	ldrb	r3, [r7, #8]
 8005ce8:	f362 0383 	bfi	r3, r2, #2, #2
 8005cec:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8005cee:	f107 0208 	add.w	r2, r7, #8
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	2110      	movs	r1, #16
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7ff ff7b 	bl	8005bf2 <lsm6dsr_write_reg>
 8005cfc:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	460b      	mov	r3, r1
 8005d12:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 8005d14:	78fb      	ldrb	r3, [r7, #3]
 8005d16:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8005d18:	f107 030c 	add.w	r3, r7, #12
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 fbb0 	bl	8006484 <lsm6dsr_fsm_enable_get>
 8005d24:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f040 80c4 	bne.w	8005eb6 <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005d2e:	7b3b      	ldrb	r3, [r7, #12]
 8005d30:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005d34:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005d36:	7b3b      	ldrb	r3, [r7, #12]
 8005d38:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005d3c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005d42:	7b3b      	ldrb	r3, [r7, #12]
 8005d44:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005d48:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005d4e:	7b3b      	ldrb	r3, [r7, #12]
 8005d50:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005d54:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005d56:	4313      	orrs	r3, r2
 8005d58:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005d5a:	7b3b      	ldrb	r3, [r7, #12]
 8005d5c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005d60:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005d62:	4313      	orrs	r3, r2
 8005d64:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005d66:	7b3b      	ldrb	r3, [r7, #12]
 8005d68:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005d6c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005d72:	7b3b      	ldrb	r3, [r7, #12]
 8005d74:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005d78:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005d7e:	7b3b      	ldrb	r3, [r7, #12]
 8005d80:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005d84:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005d86:	4313      	orrs	r3, r2
 8005d88:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005d8a:	7b7b      	ldrb	r3, [r7, #13]
 8005d8c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005d90:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005d92:	4313      	orrs	r3, r2
 8005d94:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005d96:	7b7b      	ldrb	r3, [r7, #13]
 8005d98:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005d9c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005da2:	7b7b      	ldrb	r3, [r7, #13]
 8005da4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005da8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005daa:	4313      	orrs	r3, r2
 8005dac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005dae:	7b7b      	ldrb	r3, [r7, #13]
 8005db0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005db4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005db6:	4313      	orrs	r3, r2
 8005db8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005dba:	7b7b      	ldrb	r3, [r7, #13]
 8005dbc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005dc0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005dc6:	7b7b      	ldrb	r3, [r7, #13]
 8005dc8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005dcc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005dd2:	7b7b      	ldrb	r3, [r7, #13]
 8005dd4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005dd8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8005dde:	7b7b      	ldrb	r3, [r7, #13]
 8005de0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005de4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005de6:	4313      	orrs	r3, r2
 8005de8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d163      	bne.n	8005eb6 <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8005dee:	f107 030b 	add.w	r3, r7, #11
 8005df2:	4619      	mov	r1, r3
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 fb71 	bl	80064dc <lsm6dsr_fsm_data_rate_get>
 8005dfa:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d159      	bne.n	8005eb6 <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8005e02:	7afb      	ldrb	r3, [r7, #11]
 8005e04:	2b03      	cmp	r3, #3
 8005e06:	d853      	bhi.n	8005eb0 <lsm6dsr_xl_data_rate_set+0x1a8>
 8005e08:	a201      	add	r2, pc, #4	; (adr r2, 8005e10 <lsm6dsr_xl_data_rate_set+0x108>)
 8005e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0e:	bf00      	nop
 8005e10:	08005e21 	.word	0x08005e21
 8005e14:	08005e33 	.word	0x08005e33
 8005e18:	08005e51 	.word	0x08005e51
 8005e1c:	08005e7b 	.word	0x08005e7b
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 8005e20:	78fb      	ldrb	r3, [r7, #3]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d102      	bne.n	8005e2c <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 8005e26:	2301      	movs	r3, #1
 8005e28:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005e2a:	e045      	b.n	8005eb8 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005e2c:	78fb      	ldrb	r3, [r7, #3]
 8005e2e:	75fb      	strb	r3, [r7, #23]
            break;
 8005e30:	e042      	b.n	8005eb8 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8005e32:	78fb      	ldrb	r3, [r7, #3]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d102      	bne.n	8005e3e <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8005e38:	2302      	movs	r3, #2
 8005e3a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005e3c:	e03c      	b.n	8005eb8 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8005e3e:	78fb      	ldrb	r3, [r7, #3]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d102      	bne.n	8005e4a <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8005e44:	2302      	movs	r3, #2
 8005e46:	75fb      	strb	r3, [r7, #23]
            break;
 8005e48:	e036      	b.n	8005eb8 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005e4a:	78fb      	ldrb	r3, [r7, #3]
 8005e4c:	75fb      	strb	r3, [r7, #23]
            break;
 8005e4e:	e033      	b.n	8005eb8 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8005e50:	78fb      	ldrb	r3, [r7, #3]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d102      	bne.n	8005e5c <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8005e56:	2303      	movs	r3, #3
 8005e58:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005e5a:	e02d      	b.n	8005eb8 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8005e5c:	78fb      	ldrb	r3, [r7, #3]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d102      	bne.n	8005e68 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8005e62:	2303      	movs	r3, #3
 8005e64:	75fb      	strb	r3, [r7, #23]
            break;
 8005e66:	e027      	b.n	8005eb8 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8005e68:	78fb      	ldrb	r3, [r7, #3]
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d102      	bne.n	8005e74 <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	75fb      	strb	r3, [r7, #23]
            break;
 8005e72:	e021      	b.n	8005eb8 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005e74:	78fb      	ldrb	r3, [r7, #3]
 8005e76:	75fb      	strb	r3, [r7, #23]
            break;
 8005e78:	e01e      	b.n	8005eb8 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8005e7a:	78fb      	ldrb	r3, [r7, #3]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d102      	bne.n	8005e86 <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8005e80:	2304      	movs	r3, #4
 8005e82:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005e84:	e018      	b.n	8005eb8 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8005e86:	78fb      	ldrb	r3, [r7, #3]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d102      	bne.n	8005e92 <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8005e8c:	2304      	movs	r3, #4
 8005e8e:	75fb      	strb	r3, [r7, #23]
            break;
 8005e90:	e012      	b.n	8005eb8 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8005e92:	78fb      	ldrb	r3, [r7, #3]
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d102      	bne.n	8005e9e <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8005e98:	2304      	movs	r3, #4
 8005e9a:	75fb      	strb	r3, [r7, #23]
            break;
 8005e9c:	e00c      	b.n	8005eb8 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 8005e9e:	78fb      	ldrb	r3, [r7, #3]
 8005ea0:	2b03      	cmp	r3, #3
 8005ea2:	d102      	bne.n	8005eaa <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8005ea4:	2304      	movs	r3, #4
 8005ea6:	75fb      	strb	r3, [r7, #23]
            break;
 8005ea8:	e006      	b.n	8005eb8 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005eaa:	78fb      	ldrb	r3, [r7, #3]
 8005eac:	75fb      	strb	r3, [r7, #23]
            break;
 8005eae:	e003      	b.n	8005eb8 <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8005eb0:	78fb      	ldrb	r3, [r7, #3]
 8005eb2:	75fb      	strb	r3, [r7, #23]
            break;
 8005eb4:	e000      	b.n	8005eb8 <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 8005eb6:	bf00      	nop
    }
  }

  if (ret == 0)
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d107      	bne.n	8005ece <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005ebe:	f107 0208 	add.w	r2, r7, #8
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	2110      	movs	r1, #16
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7ff fe7b 	bl	8005bc2 <lsm6dsr_read_reg>
 8005ecc:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d10f      	bne.n	8005ef4 <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8005ed4:	7dfb      	ldrb	r3, [r7, #23]
 8005ed6:	f003 030f 	and.w	r3, r3, #15
 8005eda:	b2da      	uxtb	r2, r3
 8005edc:	7a3b      	ldrb	r3, [r7, #8]
 8005ede:	f362 1307 	bfi	r3, r2, #4, #4
 8005ee2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8005ee4:	f107 0208 	add.w	r2, r7, #8
 8005ee8:	2301      	movs	r3, #1
 8005eea:	2110      	movs	r1, #16
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f7ff fe80 	bl	8005bf2 <lsm6dsr_write_reg>
 8005ef2:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8005ef4:	693b      	ldr	r3, [r7, #16]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop

08005f00 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	460b      	mov	r3, r1
 8005f0a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005f0c:	f107 0208 	add.w	r2, r7, #8
 8005f10:	2301      	movs	r3, #1
 8005f12:	2111      	movs	r1, #17
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f7ff fe54 	bl	8005bc2 <lsm6dsr_read_reg>
 8005f1a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10f      	bne.n	8005f42 <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8005f22:	78fb      	ldrb	r3, [r7, #3]
 8005f24:	f003 030f 	and.w	r3, r3, #15
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	7a3b      	ldrb	r3, [r7, #8]
 8005f2c:	f362 0303 	bfi	r3, r2, #0, #4
 8005f30:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005f32:	f107 0208 	add.w	r2, r7, #8
 8005f36:	2301      	movs	r3, #1
 8005f38:	2111      	movs	r1, #17
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f7ff fe59 	bl	8005bf2 <lsm6dsr_write_reg>
 8005f40:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005f42:	68fb      	ldr	r3, [r7, #12]
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b086      	sub	sp, #24
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	460b      	mov	r3, r1
 8005f56:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 8005f58:	78fb      	ldrb	r3, [r7, #3]
 8005f5a:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8005f5c:	f107 030c 	add.w	r3, r7, #12
 8005f60:	4619      	mov	r1, r3
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 fa8e 	bl	8006484 <lsm6dsr_fsm_enable_get>
 8005f68:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f040 80c4 	bne.w	80060fa <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005f72:	7b3b      	ldrb	r3, [r7, #12]
 8005f74:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005f78:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005f7a:	7b3b      	ldrb	r3, [r7, #12]
 8005f7c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005f80:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005f82:	4313      	orrs	r3, r2
 8005f84:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005f86:	7b3b      	ldrb	r3, [r7, #12]
 8005f88:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005f8c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005f92:	7b3b      	ldrb	r3, [r7, #12]
 8005f94:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005f98:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005f9e:	7b3b      	ldrb	r3, [r7, #12]
 8005fa0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005fa4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005faa:	7b3b      	ldrb	r3, [r7, #12]
 8005fac:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005fb0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005fb6:	7b3b      	ldrb	r3, [r7, #12]
 8005fb8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005fbc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005fc2:	7b3b      	ldrb	r3, [r7, #12]
 8005fc4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005fc8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005fce:	7b7b      	ldrb	r3, [r7, #13]
 8005fd0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005fd4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005fda:	7b7b      	ldrb	r3, [r7, #13]
 8005fdc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005fe0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005fe6:	7b7b      	ldrb	r3, [r7, #13]
 8005fe8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005fec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005ff2:	7b7b      	ldrb	r3, [r7, #13]
 8005ff4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005ff8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005ffe:	7b7b      	ldrb	r3, [r7, #13]
 8006000:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006004:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006006:	4313      	orrs	r3, r2
 8006008:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800600a:	7b7b      	ldrb	r3, [r7, #13]
 800600c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006010:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006012:	4313      	orrs	r3, r2
 8006014:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006016:	7b7b      	ldrb	r3, [r7, #13]
 8006018:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800601c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800601e:	4313      	orrs	r3, r2
 8006020:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8006022:	7b7b      	ldrb	r3, [r7, #13]
 8006024:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006028:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800602a:	4313      	orrs	r3, r2
 800602c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800602e:	2b01      	cmp	r3, #1
 8006030:	d163      	bne.n	80060fa <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8006032:	f107 030b 	add.w	r3, r7, #11
 8006036:	4619      	mov	r1, r3
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 fa4f 	bl	80064dc <lsm6dsr_fsm_data_rate_get>
 800603e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d159      	bne.n	80060fa <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8006046:	7afb      	ldrb	r3, [r7, #11]
 8006048:	2b03      	cmp	r3, #3
 800604a:	d853      	bhi.n	80060f4 <lsm6dsr_gy_data_rate_set+0x1a8>
 800604c:	a201      	add	r2, pc, #4	; (adr r2, 8006054 <lsm6dsr_gy_data_rate_set+0x108>)
 800604e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006052:	bf00      	nop
 8006054:	08006065 	.word	0x08006065
 8006058:	08006077 	.word	0x08006077
 800605c:	08006095 	.word	0x08006095
 8006060:	080060bf 	.word	0x080060bf
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 8006064:	78fb      	ldrb	r3, [r7, #3]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d102      	bne.n	8006070 <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 800606a:	2301      	movs	r3, #1
 800606c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800606e:	e045      	b.n	80060fc <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006070:	78fb      	ldrb	r3, [r7, #3]
 8006072:	75fb      	strb	r3, [r7, #23]
            break;
 8006074:	e042      	b.n	80060fc <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8006076:	78fb      	ldrb	r3, [r7, #3]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d102      	bne.n	8006082 <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 800607c:	2302      	movs	r3, #2
 800607e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006080:	e03c      	b.n	80060fc <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8006082:	78fb      	ldrb	r3, [r7, #3]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d102      	bne.n	800608e <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8006088:	2302      	movs	r3, #2
 800608a:	75fb      	strb	r3, [r7, #23]
            break;
 800608c:	e036      	b.n	80060fc <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800608e:	78fb      	ldrb	r3, [r7, #3]
 8006090:	75fb      	strb	r3, [r7, #23]
            break;
 8006092:	e033      	b.n	80060fc <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8006094:	78fb      	ldrb	r3, [r7, #3]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d102      	bne.n	80060a0 <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800609a:	2303      	movs	r3, #3
 800609c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800609e:	e02d      	b.n	80060fc <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80060a0:	78fb      	ldrb	r3, [r7, #3]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d102      	bne.n	80060ac <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80060a6:	2303      	movs	r3, #3
 80060a8:	75fb      	strb	r3, [r7, #23]
            break;
 80060aa:	e027      	b.n	80060fc <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 80060ac:	78fb      	ldrb	r3, [r7, #3]
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d102      	bne.n	80060b8 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80060b2:	2303      	movs	r3, #3
 80060b4:	75fb      	strb	r3, [r7, #23]
            break;
 80060b6:	e021      	b.n	80060fc <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80060b8:	78fb      	ldrb	r3, [r7, #3]
 80060ba:	75fb      	strb	r3, [r7, #23]
            break;
 80060bc:	e01e      	b.n	80060fc <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80060be:	78fb      	ldrb	r3, [r7, #3]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d102      	bne.n	80060ca <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80060c4:	2304      	movs	r3, #4
 80060c6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80060c8:	e018      	b.n	80060fc <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80060ca:	78fb      	ldrb	r3, [r7, #3]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d102      	bne.n	80060d6 <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80060d0:	2304      	movs	r3, #4
 80060d2:	75fb      	strb	r3, [r7, #23]
            break;
 80060d4:	e012      	b.n	80060fc <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 80060d6:	78fb      	ldrb	r3, [r7, #3]
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d102      	bne.n	80060e2 <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80060dc:	2304      	movs	r3, #4
 80060de:	75fb      	strb	r3, [r7, #23]
            break;
 80060e0:	e00c      	b.n	80060fc <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 80060e2:	78fb      	ldrb	r3, [r7, #3]
 80060e4:	2b03      	cmp	r3, #3
 80060e6:	d102      	bne.n	80060ee <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80060e8:	2304      	movs	r3, #4
 80060ea:	75fb      	strb	r3, [r7, #23]
            break;
 80060ec:	e006      	b.n	80060fc <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80060ee:	78fb      	ldrb	r3, [r7, #3]
 80060f0:	75fb      	strb	r3, [r7, #23]
            break;
 80060f2:	e003      	b.n	80060fc <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 80060f4:	78fb      	ldrb	r3, [r7, #3]
 80060f6:	75fb      	strb	r3, [r7, #23]
            break;
 80060f8:	e000      	b.n	80060fc <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 80060fa:	bf00      	nop
    }
  }

  if (ret == 0)
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d107      	bne.n	8006112 <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006102:	f107 0208 	add.w	r2, r7, #8
 8006106:	2301      	movs	r3, #1
 8006108:	2111      	movs	r1, #17
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7ff fd59 	bl	8005bc2 <lsm6dsr_read_reg>
 8006110:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10f      	bne.n	8006138 <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8006118:	7dfb      	ldrb	r3, [r7, #23]
 800611a:	f003 030f 	and.w	r3, r3, #15
 800611e:	b2da      	uxtb	r2, r3
 8006120:	7a3b      	ldrb	r3, [r7, #8]
 8006122:	f362 1307 	bfi	r3, r2, #4, #4
 8006126:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006128:	f107 0208 	add.w	r2, r7, #8
 800612c:	2301      	movs	r3, #1
 800612e:	2111      	movs	r1, #17
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7ff fd5e 	bl	8005bf2 <lsm6dsr_write_reg>
 8006136:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8006138:	693b      	ldr	r3, [r7, #16]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3718      	adds	r7, #24
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop

08006144 <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	460b      	mov	r3, r1
 800614e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006150:	f107 0208 	add.w	r2, r7, #8
 8006154:	2301      	movs	r3, #1
 8006156:	2112      	movs	r1, #18
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f7ff fd32 	bl	8005bc2 <lsm6dsr_read_reg>
 800615e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10f      	bne.n	8006186 <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 8006166:	78fb      	ldrb	r3, [r7, #3]
 8006168:	f003 0301 	and.w	r3, r3, #1
 800616c:	b2da      	uxtb	r2, r3
 800616e:	7a3b      	ldrb	r3, [r7, #8]
 8006170:	f362 1386 	bfi	r3, r2, #6, #1
 8006174:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006176:	f107 0208 	add.w	r2, r7, #8
 800617a:	2301      	movs	r3, #1
 800617c:	2112      	movs	r1, #18
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7ff fd37 	bl	8005bf2 <lsm6dsr_write_reg>
 8006184:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006186:	68fb      	ldr	r3, [r7, #12]
}
 8006188:	4618      	mov	r0, r3
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 800619a:	f107 0208 	add.w	r2, r7, #8
 800619e:	2301      	movs	r3, #1
 80061a0:	211e      	movs	r1, #30
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7ff fd0d 	bl	8005bc2 <lsm6dsr_read_reg>
 80061a8:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 80061aa:	7a3b      	ldrb	r3, [r7, #8]
 80061ac:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	461a      	mov	r2, r3
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	701a      	strb	r2, [r3, #0]

  return ret;
 80061b8:	68fb      	ldr	r3, [r7, #12]
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b084      	sub	sp, #16
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 80061cc:	f107 0208 	add.w	r2, r7, #8
 80061d0:	2301      	movs	r3, #1
 80061d2:	211e      	movs	r1, #30
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f7ff fcf4 	bl	8005bc2 <lsm6dsr_read_reg>
 80061da:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 80061dc:	7a3b      	ldrb	r3, [r7, #8]
 80061de:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	461a      	mov	r2, r3
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	701a      	strb	r2, [r3, #0]

  return ret;
 80061ea:	68fb      	ldr	r3, [r7, #12]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 80061fe:	f107 0208 	add.w	r2, r7, #8
 8006202:	2301      	movs	r3, #1
 8006204:	211e      	movs	r1, #30
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f7ff fcdb 	bl	8005bc2 <lsm6dsr_read_reg>
 800620c:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 800620e:	7a3b      	ldrb	r3, [r7, #8]
 8006210:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006214:	b2db      	uxtb	r3, r3
 8006216:	461a      	mov	r2, r3
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	701a      	strb	r2, [r3, #0]

  return ret;
 800621c:	68fb      	ldr	r3, [r7, #12]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b084      	sub	sp, #16
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 8006230:	f107 0208 	add.w	r2, r7, #8
 8006234:	2302      	movs	r3, #2
 8006236:	2120      	movs	r1, #32
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f7ff fcc2 	bl	8005bc2 <lsm6dsr_read_reg>
 800623e:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 8006240:	7a7b      	ldrb	r3, [r7, #9]
 8006242:	b21a      	sxth	r2, r3
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800624e:	b29b      	uxth	r3, r3
 8006250:	021b      	lsls	r3, r3, #8
 8006252:	b29a      	uxth	r2, r3
 8006254:	7a3b      	ldrb	r3, [r7, #8]
 8006256:	b29b      	uxth	r3, r3
 8006258:	4413      	add	r3, r2
 800625a:	b29b      	uxth	r3, r3
 800625c:	b21a      	sxth	r2, r3
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	801a      	strh	r2, [r3, #0]

  return ret;
 8006262:	68fb      	ldr	r3, [r7, #12]
}
 8006264:	4618      	mov	r0, r3
 8006266:	3710      	adds	r7, #16
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b086      	sub	sp, #24
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 8006276:	f107 020c 	add.w	r2, r7, #12
 800627a:	2306      	movs	r3, #6
 800627c:	2122      	movs	r1, #34	; 0x22
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f7ff fc9f 	bl	8005bc2 <lsm6dsr_read_reg>
 8006284:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006286:	7b7b      	ldrb	r3, [r7, #13]
 8006288:	b21a      	sxth	r2, r3
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006294:	b29b      	uxth	r3, r3
 8006296:	021b      	lsls	r3, r3, #8
 8006298:	b29a      	uxth	r2, r3
 800629a:	7b3b      	ldrb	r3, [r7, #12]
 800629c:	b29b      	uxth	r3, r3
 800629e:	4413      	add	r3, r2
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	b21a      	sxth	r2, r3
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80062a8:	7bfa      	ldrb	r2, [r7, #15]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	3302      	adds	r3, #2
 80062ae:	b212      	sxth	r2, r2
 80062b0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	3302      	adds	r3, #2
 80062b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	021b      	lsls	r3, r3, #8
 80062be:	b29a      	uxth	r2, r3
 80062c0:	7bbb      	ldrb	r3, [r7, #14]
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	4413      	add	r3, r2
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	3302      	adds	r3, #2
 80062cc:	b212      	sxth	r2, r2
 80062ce:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80062d0:	7c7a      	ldrb	r2, [r7, #17]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	3304      	adds	r3, #4
 80062d6:	b212      	sxth	r2, r2
 80062d8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	3304      	adds	r3, #4
 80062de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	021b      	lsls	r3, r3, #8
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	7c3b      	ldrb	r3, [r7, #16]
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	4413      	add	r3, r2
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	3304      	adds	r3, #4
 80062f4:	b212      	sxth	r2, r2
 80062f6:	801a      	strh	r2, [r3, #0]

  return ret;
 80062f8:	697b      	ldr	r3, [r7, #20]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3718      	adds	r7, #24
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b086      	sub	sp, #24
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
 800630a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 800630c:	f107 020c 	add.w	r2, r7, #12
 8006310:	2306      	movs	r3, #6
 8006312:	2128      	movs	r1, #40	; 0x28
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f7ff fc54 	bl	8005bc2 <lsm6dsr_read_reg>
 800631a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800631c:	7b7b      	ldrb	r3, [r7, #13]
 800631e:	b21a      	sxth	r2, r3
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	f9b3 3000 	ldrsh.w	r3, [r3]
 800632a:	b29b      	uxth	r3, r3
 800632c:	021b      	lsls	r3, r3, #8
 800632e:	b29a      	uxth	r2, r3
 8006330:	7b3b      	ldrb	r3, [r7, #12]
 8006332:	b29b      	uxth	r3, r3
 8006334:	4413      	add	r3, r2
 8006336:	b29b      	uxth	r3, r3
 8006338:	b21a      	sxth	r2, r3
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800633e:	7bfa      	ldrb	r2, [r7, #15]
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	3302      	adds	r3, #2
 8006344:	b212      	sxth	r2, r2
 8006346:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	3302      	adds	r3, #2
 800634c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006350:	b29b      	uxth	r3, r3
 8006352:	021b      	lsls	r3, r3, #8
 8006354:	b29a      	uxth	r2, r3
 8006356:	7bbb      	ldrb	r3, [r7, #14]
 8006358:	b29b      	uxth	r3, r3
 800635a:	4413      	add	r3, r2
 800635c:	b29a      	uxth	r2, r3
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	3302      	adds	r3, #2
 8006362:	b212      	sxth	r2, r2
 8006364:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006366:	7c7a      	ldrb	r2, [r7, #17]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	3304      	adds	r3, #4
 800636c:	b212      	sxth	r2, r2
 800636e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	3304      	adds	r3, #4
 8006374:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006378:	b29b      	uxth	r3, r3
 800637a:	021b      	lsls	r3, r3, #8
 800637c:	b29a      	uxth	r2, r3
 800637e:	7c3b      	ldrb	r3, [r7, #16]
 8006380:	b29b      	uxth	r3, r3
 8006382:	4413      	add	r3, r2
 8006384:	b29a      	uxth	r2, r3
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	3304      	adds	r3, #4
 800638a:	b212      	sxth	r2, r2
 800638c:	801a      	strh	r2, [r3, #0]

  return ret;
 800638e:	697b      	ldr	r3, [r7, #20]
}
 8006390:	4618      	mov	r0, r3
 8006392:	3718      	adds	r7, #24
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	460b      	mov	r3, r1
 80063a2:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 80063a4:	f107 0208 	add.w	r2, r7, #8
 80063a8:	2301      	movs	r3, #1
 80063aa:	2101      	movs	r1, #1
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7ff fc08 	bl	8005bc2 <lsm6dsr_read_reg>
 80063b2:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d10f      	bne.n	80063da <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 80063ba:	78fb      	ldrb	r3, [r7, #3]
 80063bc:	f003 0303 	and.w	r3, r3, #3
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	7a3b      	ldrb	r3, [r7, #8]
 80063c4:	f362 1387 	bfi	r3, r2, #6, #2
 80063c8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 80063ca:	f107 0208 	add.w	r2, r7, #8
 80063ce:	2301      	movs	r3, #1
 80063d0:	2101      	movs	r1, #1
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f7ff fc0d 	bl	8005bf2 <lsm6dsr_write_reg>
 80063d8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 80063da:	68fb      	ldr	r3, [r7, #12]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 80063ee:	2301      	movs	r3, #1
 80063f0:	683a      	ldr	r2, [r7, #0]
 80063f2:	210f      	movs	r1, #15
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f7ff fbe4 	bl	8005bc2 <lsm6dsr_read_reg>
 80063fa:	60f8      	str	r0, [r7, #12]

  return ret;
 80063fc:	68fb      	ldr	r3, [r7, #12]
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b084      	sub	sp, #16
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
 800640e:	460b      	mov	r3, r1
 8006410:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006412:	f107 0208 	add.w	r2, r7, #8
 8006416:	2301      	movs	r3, #1
 8006418:	2112      	movs	r1, #18
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f7ff fbd1 	bl	8005bc2 <lsm6dsr_read_reg>
 8006420:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10f      	bne.n	8006448 <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8006428:	78fb      	ldrb	r3, [r7, #3]
 800642a:	f003 0301 	and.w	r3, r3, #1
 800642e:	b2da      	uxtb	r2, r3
 8006430:	7a3b      	ldrb	r3, [r7, #8]
 8006432:	f362 0300 	bfi	r3, r2, #0, #1
 8006436:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006438:	f107 0208 	add.w	r2, r7, #8
 800643c:	2301      	movs	r3, #1
 800643e:	2112      	movs	r1, #18
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f7ff fbd6 	bl	8005bf2 <lsm6dsr_write_reg>
 8006446:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006448:	68fb      	ldr	r3, [r7, #12]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b084      	sub	sp, #16
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
 800645a:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800645c:	f107 0208 	add.w	r2, r7, #8
 8006460:	2301      	movs	r3, #1
 8006462:	2112      	movs	r1, #18
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f7ff fbac 	bl	8005bc2 <lsm6dsr_read_reg>
 800646a:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 800646c:	7a3b      	ldrb	r3, [r7, #8]
 800646e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006472:	b2db      	uxtb	r3, r3
 8006474:	461a      	mov	r2, r3
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	701a      	strb	r2, [r3, #0]

  return ret;
 800647a:	68fb      	ldr	r3, [r7, #12]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800648e:	2102      	movs	r1, #2
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f7ff ff81 	bl	8006398 <lsm6dsr_mem_bank_set>
 8006496:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d106      	bne.n	80064ac <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 800649e:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 80064a0:	2301      	movs	r3, #1
 80064a2:	2146      	movs	r1, #70	; 0x46
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f7ff fb8c 	bl	8005bc2 <lsm6dsr_read_reg>
 80064aa:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d107      	bne.n	80064c2 <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 80064b6:	2301      	movs	r3, #1
 80064b8:	2147      	movs	r1, #71	; 0x47
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7ff fb81 	bl	8005bc2 <lsm6dsr_read_reg>
 80064c0:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d104      	bne.n	80064d2 <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 80064c8:	2100      	movs	r1, #0
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7ff ff64 	bl	8006398 <lsm6dsr_mem_bank_set>
 80064d0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80064d2:	68fb      	ldr	r3, [r7, #12]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 80064e6:	2102      	movs	r1, #2
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f7ff ff55 	bl	8006398 <lsm6dsr_mem_bank_set>
 80064ee:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d107      	bne.n	8006506 <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 80064f6:	f107 0208 	add.w	r2, r7, #8
 80064fa:	2301      	movs	r3, #1
 80064fc:	215f      	movs	r1, #95	; 0x5f
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f7ff fb5f 	bl	8005bc2 <lsm6dsr_read_reg>
 8006504:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d104      	bne.n	8006516 <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 800650c:	2100      	movs	r1, #0
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f7ff ff42 	bl	8006398 <lsm6dsr_mem_bank_set>
 8006514:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 8006516:	7a3b      	ldrb	r3, [r7, #8]
 8006518:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b03      	cmp	r3, #3
 8006520:	d81a      	bhi.n	8006558 <lsm6dsr_fsm_data_rate_get+0x7c>
 8006522:	a201      	add	r2, pc, #4	; (adr r2, 8006528 <lsm6dsr_fsm_data_rate_get+0x4c>)
 8006524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006528:	08006539 	.word	0x08006539
 800652c:	08006541 	.word	0x08006541
 8006530:	08006549 	.word	0x08006549
 8006534:	08006551 	.word	0x08006551
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	2200      	movs	r2, #0
 800653c:	701a      	strb	r2, [r3, #0]
      break;
 800653e:	e00f      	b.n	8006560 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	2201      	movs	r2, #1
 8006544:	701a      	strb	r2, [r3, #0]
      break;
 8006546:	e00b      	b.n	8006560 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	2202      	movs	r2, #2
 800654c:	701a      	strb	r2, [r3, #0]
      break;
 800654e:	e007      	b.n	8006560 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	2203      	movs	r2, #3
 8006554:	701a      	strb	r2, [r3, #0]
      break;
 8006556:	e003      	b.n	8006560 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	2200      	movs	r2, #0
 800655c:	701a      	strb	r2, [r3, #0]
      break;
 800655e:	bf00      	nop
  }

  return ret;
 8006560:	68fb      	ldr	r3, [r7, #12]
}
 8006562:	4618      	mov	r0, r3
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop

0800656c <HAL_RTC_AlarmAEventCallback>:
RTC_TimeTypeDef sTime = {0};
RTC_DateTypeDef sDate = {0};
RTC_AlarmTypeDef sAlarm = {0};

/*You cannot put these in the user callbacks section and I don't know why (can put in user begin 4)*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),(uint8_t*)"AlarmA\r\n", 8, HAL_MAX_DELAY);
 8006574:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006578:	2208      	movs	r2, #8
 800657a:	4905      	ldr	r1, [pc, #20]	; (8006590 <HAL_RTC_AlarmAEventCallback+0x24>)
 800657c:	4805      	ldr	r0, [pc, #20]	; (8006594 <HAL_RTC_AlarmAEventCallback+0x28>)
 800657e:	f006 fcac 	bl	800ceda <HAL_UART_Transmit>
	flagA = 1;
 8006582:	4b05      	ldr	r3, [pc, #20]	; (8006598 <HAL_RTC_AlarmAEventCallback+0x2c>)
 8006584:	2201      	movs	r2, #1
 8006586:	701a      	strb	r2, [r3, #0]
}
 8006588:	bf00      	nop
 800658a:	3708      	adds	r7, #8
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	08020800 	.word	0x08020800
 8006594:	20006dc8 	.word	0x20006dc8
 8006598:	20000648 	.word	0x20000648

0800659c <MRT_SetupRTOS>:
}




void MRT_SetupRTOS(UART_HandleTypeDef uart,uint8_t sleepT){
 800659c:	b084      	sub	sp, #16
 800659e:	b580      	push	{r7, lr}
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	f107 0c08 	add.w	ip, r7, #8
 80065a6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	rtos.huart = uart;
 80065aa:	4b0d      	ldr	r3, [pc, #52]	; (80065e0 <MRT_SetupRTOS+0x44>)
 80065ac:	4618      	mov	r0, r3
 80065ae:	f107 0308 	add.w	r3, r7, #8
 80065b2:	2244      	movs	r2, #68	; 0x44
 80065b4:	4619      	mov	r1, r3
 80065b6:	f013 fbb1 	bl	8019d1c <memcpy>
	rtos.sleepTime = sleepT;
 80065ba:	4a09      	ldr	r2, [pc, #36]	; (80065e0 <MRT_SetupRTOS+0x44>)
 80065bc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80065c0:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTOS\r\n", 17, HAL_MAX_DELAY);
 80065c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065c8:	2211      	movs	r2, #17
 80065ca:	4906      	ldr	r1, [pc, #24]	; (80065e4 <MRT_SetupRTOS+0x48>)
 80065cc:	4804      	ldr	r0, [pc, #16]	; (80065e0 <MRT_SetupRTOS+0x44>)
 80065ce:	f006 fc84 	bl	800ceda <HAL_UART_Transmit>
}
 80065d2:	bf00      	nop
 80065d4:	46bd      	mov	sp, r7
 80065d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065da:	b004      	add	sp, #16
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	20006dc8 	.word	0x20006dc8
 80065e4:	08020818 	.word	0x08020818

080065e8 <MRT_WUProcedure>:



void MRT_WUProcedure(void){
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0

	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 80065ee:	4b14      	ldr	r3, [pc, #80]	; (8006640 <MRT_WUProcedure+0x58>)
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f003 0302 	and.w	r3, r3, #2
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d11c      	bne.n	8006634 <MRT_WUProcedure+0x4c>
	{

		wu_flag = 1;
 80065fa:	4b12      	ldr	r3, [pc, #72]	; (8006644 <MRT_WUProcedure+0x5c>)
 80065fc:	2201      	movs	r2, #1
 80065fe:	701a      	strb	r2, [r3, #0]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 8006600:	4b0f      	ldr	r3, [pc, #60]	; (8006640 <MRT_WUProcedure+0x58>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a0e      	ldr	r2, [pc, #56]	; (8006640 <MRT_WUProcedure+0x58>)
 8006606:	f043 0308 	orr.w	r3, r3, #8
 800660a:	6013      	str	r3, [r2, #0]

		/** display  the string **/
		char *str = "Wakeup from the STANDBY MODE\r\n";
 800660c:	4b0e      	ldr	r3, [pc, #56]	; (8006648 <MRT_WUProcedure+0x60>)
 800660e:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit(&(rtos.huart), (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f7f9 fded 	bl	80001f0 <strlen>
 8006616:	4603      	mov	r3, r0
 8006618:	b29a      	uxth	r2, r3
 800661a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800661e:	6879      	ldr	r1, [r7, #4]
 8006620:	480a      	ldr	r0, [pc, #40]	; (800664c <MRT_WUProcedure+0x64>)
 8006622:	f006 fc5a 	bl	800ceda <HAL_UART_Transmit>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 8006626:	f44f 7080 	mov.w	r0, #256	; 0x100
 800662a:	f003 fc15 	bl	8009e58 <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800662e:	4808      	ldr	r0, [pc, #32]	; (8006650 <MRT_WUProcedure+0x68>)
 8006630:	f005 f810 	bl	800b654 <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_ClearFlags();
 8006634:	f000 f80e 	bl	8006654 <MRT_ClearFlags>
}
 8006638:	bf00      	nop
 800663a:	3708      	adds	r7, #8
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	40007000 	.word	0x40007000
 8006644:	20000649 	.word	0x20000649
 8006648:	0802082c 	.word	0x0802082c
 800664c:	20006dc8 	.word	0x20006dc8
 8006650:	20006908 	.word	0x20006908

08006654 <MRT_ClearFlags>:


void MRT_ClearFlags(void){
 8006654:	b580      	push	{r7, lr}
 8006656:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	HAL_UART_Transmit(&(rtos.huart),"Clearing the flags\r\n", 20, HAL_MAX_DELAY);
 8006658:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800665c:	2214      	movs	r2, #20
 800665e:	4932      	ldr	r1, [pc, #200]	; (8006728 <MRT_ClearFlags+0xd4>)
 8006660:	4832      	ldr	r0, [pc, #200]	; (800672c <MRT_ClearFlags+0xd8>)
 8006662:	f006 fc3a 	bl	800ceda <HAL_UART_Transmit>
	  	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8006666:	4b32      	ldr	r3, [pc, #200]	; (8006730 <MRT_ClearFlags+0xdc>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	22ca      	movs	r2, #202	; 0xca
 800666c:	625a      	str	r2, [r3, #36]	; 0x24
 800666e:	4b30      	ldr	r3, [pc, #192]	; (8006730 <MRT_ClearFlags+0xdc>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2253      	movs	r2, #83	; 0x53
 8006674:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8006676:	e00f      	b.n	8006698 <MRT_ClearFlags+0x44>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm A flag\r\n", 23, HAL_MAX_DELAY);
 8006678:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800667c:	2217      	movs	r2, #23
 800667e:	492d      	ldr	r1, [pc, #180]	; (8006734 <MRT_ClearFlags+0xe0>)
 8006680:	482a      	ldr	r0, [pc, #168]	; (800672c <MRT_ClearFlags+0xd8>)
 8006682:	f006 fc2a 	bl	800ceda <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8006686:	4b2a      	ldr	r3, [pc, #168]	; (8006730 <MRT_ClearFlags+0xdc>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	b2da      	uxtb	r2, r3
 800668e:	4b28      	ldr	r3, [pc, #160]	; (8006730 <MRT_ClearFlags+0xdc>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8006696:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8006698:	4b25      	ldr	r3, [pc, #148]	; (8006730 <MRT_ClearFlags+0xdc>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1e8      	bne.n	8006678 <MRT_ClearFlags+0x24>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 80066a6:	4b22      	ldr	r3, [pc, #136]	; (8006730 <MRT_ClearFlags+0xdc>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	22ff      	movs	r2, #255	; 0xff
 80066ac:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80066ae:	4b22      	ldr	r3, [pc, #136]	; (8006738 <MRT_ClearFlags+0xe4>)
 80066b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80066b4:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 80066b6:	4b1e      	ldr	r3, [pc, #120]	; (8006730 <MRT_ClearFlags+0xdc>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	22ca      	movs	r2, #202	; 0xca
 80066bc:	625a      	str	r2, [r3, #36]	; 0x24
 80066be:	4b1c      	ldr	r3, [pc, #112]	; (8006730 <MRT_ClearFlags+0xdc>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2253      	movs	r2, #83	; 0x53
 80066c4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 80066c6:	e00f      	b.n	80066e8 <MRT_ClearFlags+0x94>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm B flag\r\n", 23, HAL_MAX_DELAY);
 80066c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066cc:	2217      	movs	r2, #23
 80066ce:	491b      	ldr	r1, [pc, #108]	; (800673c <MRT_ClearFlags+0xe8>)
 80066d0:	4816      	ldr	r0, [pc, #88]	; (800672c <MRT_ClearFlags+0xd8>)
 80066d2:	f006 fc02 	bl	800ceda <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRBF);
 80066d6:	4b16      	ldr	r3, [pc, #88]	; (8006730 <MRT_ClearFlags+0xdc>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	b2da      	uxtb	r2, r3
 80066de:	4b14      	ldr	r3, [pc, #80]	; (8006730 <MRT_ClearFlags+0xdc>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f462 7220 	orn	r2, r2, #640	; 0x280
 80066e6:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 80066e8:	4b11      	ldr	r3, [pc, #68]	; (8006730 <MRT_ClearFlags+0xdc>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1e8      	bne.n	80066c8 <MRT_ClearFlags+0x74>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 80066f6:	4b0e      	ldr	r3, [pc, #56]	; (8006730 <MRT_ClearFlags+0xdc>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	22ff      	movs	r2, #255	; 0xff
 80066fc:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80066fe:	4b0e      	ldr	r3, [pc, #56]	; (8006738 <MRT_ClearFlags+0xe4>)
 8006700:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006704:	615a      	str	r2, [r3, #20]


	/* Clear the WU FLAG */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing WU flag\r\n", 18, HAL_MAX_DELAY);
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8006706:	4b0e      	ldr	r3, [pc, #56]	; (8006740 <MRT_ClearFlags+0xec>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a0d      	ldr	r2, [pc, #52]	; (8006740 <MRT_ClearFlags+0xec>)
 800670c:	f043 0304 	orr.w	r3, r3, #4
 8006710:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing RTC WU flag\r\n", 22, HAL_MAX_DELAY);
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8006712:	4b07      	ldr	r3, [pc, #28]	; (8006730 <MRT_ClearFlags+0xdc>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	b2da      	uxtb	r2, r3
 800671a:	4b05      	ldr	r3, [pc, #20]	; (8006730 <MRT_ClearFlags+0xdc>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006722:	60da      	str	r2, [r3, #12]
}
 8006724:	bf00      	nop
 8006726:	bd80      	pop	{r7, pc}
 8006728:	0802084c 	.word	0x0802084c
 800672c:	20006dc8 	.word	0x20006dc8
 8006730:	20006908 	.word	0x20006908
 8006734:	08020864 	.word	0x08020864
 8006738:	40013c00 	.word	0x40013c00
 800673c:	0802087c 	.word	0x0802087c
 8006740:	40007000 	.word	0x40007000

08006744 <MRT_StandByMode>:

/*
 * This function is called to enter standby mode
 * @param seconds: time before it wakes up (max of 36 hours)
 */
void MRT_StandByMode( uint32_t seconds){
 8006744:	b580      	push	{r7, lr}
 8006746:	b0a4      	sub	sp, #144	; 0x90
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),"\r\nStandByMode\r\n", 15, HAL_MAX_DELAY);
 800674c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006750:	220f      	movs	r2, #15
 8006752:	491b      	ldr	r1, [pc, #108]	; (80067c0 <MRT_StandByMode+0x7c>)
 8006754:	481b      	ldr	r0, [pc, #108]	; (80067c4 <MRT_StandByMode+0x80>)
 8006756:	f006 fbc0 	bl	800ceda <HAL_UART_Transmit>

	/* Enable the WAKEUP PIN
	 * (Needs to be placed BEFORE clearing up the flags or else it wakes up as soon as we enter standby mode)*/
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 800675a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800675e:	f003 fb69 	bl	8009e34 <HAL_PWR_EnableWakeUpPin>

	/*Clear the flags so it doesn't wake up as soon as it goes to sleep*/
	MRT_ClearFlags();
 8006762:	f7ff ff77 	bl	8006654 <MRT_ClearFlags>

	//Setup RTC wake up timer
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTCW\r\n", 17, HAL_MAX_DELAY);
 8006766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800676a:	2211      	movs	r2, #17
 800676c:	4916      	ldr	r1, [pc, #88]	; (80067c8 <MRT_StandByMode+0x84>)
 800676e:	4815      	ldr	r0, [pc, #84]	; (80067c4 <MRT_StandByMode+0x80>)
 8006770:	f006 fbb3 	bl	800ceda <HAL_UART_Transmit>
	  Error_Handler();
	}
	*/

	char* msg[30+sizeof(uint32_t)];
	sprintf(msg,"Going to sleep for %i seconds\r\n",seconds);
 8006774:	f107 0308 	add.w	r3, r7, #8
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	4914      	ldr	r1, [pc, #80]	; (80067cc <MRT_StandByMode+0x88>)
 800677c:	4618      	mov	r0, r3
 800677e:	f014 fb73 	bl	801ae68 <siprintf>
	HAL_UART_Transmit(&(rtos.huart), msg,strlen(msg),HAL_MAX_DELAY);
 8006782:	f107 0308 	add.w	r3, r7, #8
 8006786:	4618      	mov	r0, r3
 8006788:	f7f9 fd32 	bl	80001f0 <strlen>
 800678c:	4603      	mov	r3, r0
 800678e:	b29a      	uxth	r2, r3
 8006790:	f107 0108 	add.w	r1, r7, #8
 8006794:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006798:	480a      	ldr	r0, [pc, #40]	; (80067c4 <MRT_StandByMode+0x80>)
 800679a:	f006 fb9e 	bl	800ceda <HAL_UART_Transmit>

	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 800679e:	2204      	movs	r2, #4
 80067a0:	6879      	ldr	r1, [r7, #4]
 80067a2:	480b      	ldr	r0, [pc, #44]	; (80067d0 <MRT_StandByMode+0x8c>)
 80067a4:	f004 fe96 	bl	800b4d4 <HAL_RTCEx_SetWakeUpTimer_IT>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d001      	beq.n	80067b2 <MRT_StandByMode+0x6e>
	{
	  Error_Handler();
 80067ae:	f7fc f8f1 	bl	8002994 <Error_Handler>
	}

	HAL_PWR_EnterSTANDBYMode();
 80067b2:	f003 fb65 	bl	8009e80 <HAL_PWR_EnterSTANDBYMode>
}
 80067b6:	bf00      	nop
 80067b8:	3790      	adds	r7, #144	; 0x90
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	08020894 	.word	0x08020894
 80067c4:	20006dc8 	.word	0x20006dc8
 80067c8:	080208a4 	.word	0x080208a4
 80067cc:	080208b8 	.word	0x080208b8
 80067d0:	20006908 	.word	0x20006908

080067d4 <MRT_setAlarmA>:
	  }
}



void MRT_setAlarmA(uint8_t h, uint8_t m, uint8_t s){
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	4603      	mov	r3, r0
 80067dc:	71fb      	strb	r3, [r7, #7]
 80067de:	460b      	mov	r3, r1
 80067e0:	71bb      	strb	r3, [r7, #6]
 80067e2:	4613      	mov	r3, r2
 80067e4:	717b      	strb	r3, [r7, #5]
	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = h;
 80067e6:	4a18      	ldr	r2, [pc, #96]	; (8006848 <MRT_setAlarmA+0x74>)
 80067e8:	79fb      	ldrb	r3, [r7, #7]
 80067ea:	7013      	strb	r3, [r2, #0]
	  sAlarm.AlarmTime.Minutes = m;
 80067ec:	4a16      	ldr	r2, [pc, #88]	; (8006848 <MRT_setAlarmA+0x74>)
 80067ee:	79bb      	ldrb	r3, [r7, #6]
 80067f0:	7053      	strb	r3, [r2, #1]
	  sAlarm.AlarmTime.Seconds = s;
 80067f2:	4a15      	ldr	r2, [pc, #84]	; (8006848 <MRT_setAlarmA+0x74>)
 80067f4:	797b      	ldrb	r3, [r7, #5]
 80067f6:	7093      	strb	r3, [r2, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 80067f8:	4b13      	ldr	r3, [pc, #76]	; (8006848 <MRT_setAlarmA+0x74>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80067fe:	4b12      	ldr	r3, [pc, #72]	; (8006848 <MRT_setAlarmA+0x74>)
 8006800:	2200      	movs	r2, #0
 8006802:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006804:	4b10      	ldr	r3, [pc, #64]	; (8006848 <MRT_setAlarmA+0x74>)
 8006806:	2200      	movs	r2, #0
 8006808:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800680a:	4b0f      	ldr	r3, [pc, #60]	; (8006848 <MRT_setAlarmA+0x74>)
 800680c:	2200      	movs	r2, #0
 800680e:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8006810:	4b0d      	ldr	r3, [pc, #52]	; (8006848 <MRT_setAlarmA+0x74>)
 8006812:	2200      	movs	r2, #0
 8006814:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8006816:	4b0c      	ldr	r3, [pc, #48]	; (8006848 <MRT_setAlarmA+0x74>)
 8006818:	2200      	movs	r2, #0
 800681a:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 800681c:	4b0a      	ldr	r3, [pc, #40]	; (8006848 <MRT_setAlarmA+0x74>)
 800681e:	2201      	movs	r2, #1
 8006820:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 8006824:	4b08      	ldr	r3, [pc, #32]	; (8006848 <MRT_setAlarmA+0x74>)
 8006826:	f44f 7280 	mov.w	r2, #256	; 0x100
 800682a:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800682c:	2201      	movs	r2, #1
 800682e:	4906      	ldr	r1, [pc, #24]	; (8006848 <MRT_setAlarmA+0x74>)
 8006830:	4806      	ldr	r0, [pc, #24]	; (800684c <MRT_setAlarmA+0x78>)
 8006832:	f004 fc41 	bl	800b0b8 <HAL_RTC_SetAlarm_IT>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d001      	beq.n	8006840 <MRT_setAlarmA+0x6c>
	  {
	    Error_Handler();
 800683c:	f7fc f8aa 	bl	8002994 <Error_Handler>
	  }
}
 8006840:	bf00      	nop
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	20000664 	.word	0x20000664
 800684c:	20006908 	.word	0x20006908

08006850 <MRT_setRTC>:


void MRT_setRTC(uint8_t h, uint8_t m, uint8_t s){
 8006850:	b580      	push	{r7, lr}
 8006852:	b088      	sub	sp, #32
 8006854:	af00      	add	r7, sp, #0
 8006856:	4603      	mov	r3, r0
 8006858:	71fb      	strb	r3, [r7, #7]
 800685a:	460b      	mov	r3, r1
 800685c:	71bb      	strb	r3, [r7, #6]
 800685e:	4613      	mov	r3, r2
 8006860:	717b      	strb	r3, [r7, #5]
	  /** Initialize RTC and set the Time and Date
	  */
	  RTC_TimeTypeDef sTime;

	  sTime.Hours = h;
 8006862:	79fb      	ldrb	r3, [r7, #7]
 8006864:	733b      	strb	r3, [r7, #12]
	  sTime.Minutes = m;
 8006866:	79bb      	ldrb	r3, [r7, #6]
 8006868:	737b      	strb	r3, [r7, #13]
	  sTime.Seconds = s;
 800686a:	797b      	ldrb	r3, [r7, #5]
 800686c:	73bb      	strb	r3, [r7, #14]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800686e:	2300      	movs	r3, #0
 8006870:	61bb      	str	r3, [r7, #24]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006872:	2300      	movs	r3, #0
 8006874:	61fb      	str	r3, [r7, #28]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8006876:	f107 030c 	add.w	r3, r7, #12
 800687a:	2201      	movs	r2, #1
 800687c:	4619      	mov	r1, r3
 800687e:	4811      	ldr	r0, [pc, #68]	; (80068c4 <MRT_setRTC+0x74>)
 8006880:	f004 fa09 	bl	800ac96 <HAL_RTC_SetTime>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d001      	beq.n	800688e <MRT_setRTC+0x3e>
	  {
	    Error_Handler();
 800688a:	f7fc f883 	bl	8002994 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800688e:	4b0e      	ldr	r3, [pc, #56]	; (80068c8 <MRT_setRTC+0x78>)
 8006890:	2201      	movs	r2, #1
 8006892:	701a      	strb	r2, [r3, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 8006894:	4b0c      	ldr	r3, [pc, #48]	; (80068c8 <MRT_setRTC+0x78>)
 8006896:	2201      	movs	r2, #1
 8006898:	705a      	strb	r2, [r3, #1]
	  sDate.Date = 0x1;
 800689a:	4b0b      	ldr	r3, [pc, #44]	; (80068c8 <MRT_setRTC+0x78>)
 800689c:	2201      	movs	r2, #1
 800689e:	709a      	strb	r2, [r3, #2]
	  sDate.Year = 0x0;
 80068a0:	4b09      	ldr	r3, [pc, #36]	; (80068c8 <MRT_setRTC+0x78>)
 80068a2:	2200      	movs	r2, #0
 80068a4:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80068a6:	2201      	movs	r2, #1
 80068a8:	4907      	ldr	r1, [pc, #28]	; (80068c8 <MRT_setRTC+0x78>)
 80068aa:	4806      	ldr	r0, [pc, #24]	; (80068c4 <MRT_setRTC+0x74>)
 80068ac:	f004 fb0e 	bl	800aecc <HAL_RTC_SetDate>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d001      	beq.n	80068ba <MRT_setRTC+0x6a>
	  {
	    Error_Handler();
 80068b6:	f7fc f86d 	bl	8002994 <Error_Handler>
	  }
}
 80068ba:	bf00      	nop
 80068bc:	3720      	adds	r7, #32
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	20006908 	.word	0x20006908
 80068c8:	20000660 	.word	0x20000660

080068cc <Max31855_Read_Temp>:
uint32_t sign=0;									  // Sign bit
uint8_t DATARX[4];                                    // Raw Data from MAX6675
//uint8_t DATATX = {0xFF, 0xFF, 0xFF, 0xFF};                                    // Raw Data from MAX6675

// ------------------- Functions ----------------
void Max31855_Read_Temp(void) {
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
	int Temp = 0;                                        // Temperature Variable
 80068d2:	2300      	movs	r3, #0
 80068d4:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_RESET); // Low State for SPI Communication
 80068d6:	2200      	movs	r2, #0
 80068d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80068dc:	483f      	ldr	r0, [pc, #252]	; (80069dc <Max31855_Read_Temp+0x110>)
 80068de:	f001 f883 	bl	80079e8 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi4, DATARX, 4, 1000);                // DATA Transfer
 80068e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80068e6:	2204      	movs	r2, #4
 80068e8:	493d      	ldr	r1, [pc, #244]	; (80069e0 <Max31855_Read_Temp+0x114>)
 80068ea:	483e      	ldr	r0, [pc, #248]	; (80069e4 <Max31855_Read_Temp+0x118>)
 80068ec:	f005 f8d9 	bl	800baa2 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_SET); // High State for SPI Communication
 80068f0:	2201      	movs	r2, #1
 80068f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80068f6:	4839      	ldr	r0, [pc, #228]	; (80069dc <Max31855_Read_Temp+0x110>)
 80068f8:	f001 f876 	bl	80079e8 <HAL_GPIO_WritePin>


	uint32_t v = DATARX[3] | (DATARX[2] << 8) | (DATARX[1] << 16) | (DATARX[0] << 24);
 80068fc:	4b38      	ldr	r3, [pc, #224]	; (80069e0 <Max31855_Read_Temp+0x114>)
 80068fe:	78db      	ldrb	r3, [r3, #3]
 8006900:	461a      	mov	r2, r3
 8006902:	4b37      	ldr	r3, [pc, #220]	; (80069e0 <Max31855_Read_Temp+0x114>)
 8006904:	789b      	ldrb	r3, [r3, #2]
 8006906:	021b      	lsls	r3, r3, #8
 8006908:	431a      	orrs	r2, r3
 800690a:	4b35      	ldr	r3, [pc, #212]	; (80069e0 <Max31855_Read_Temp+0x114>)
 800690c:	785b      	ldrb	r3, [r3, #1]
 800690e:	041b      	lsls	r3, r3, #16
 8006910:	431a      	orrs	r2, r3
 8006912:	4b33      	ldr	r3, [pc, #204]	; (80069e0 <Max31855_Read_Temp+0x114>)
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	061b      	lsls	r3, r3, #24
 8006918:	4313      	orrs	r3, r2
 800691a:	603b      	str	r3, [r7, #0]

	Error = v & 0x07;								  // Error Detection
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	b2db      	uxtb	r3, r3
 8006920:	f003 0307 	and.w	r3, r3, #7
 8006924:	b2da      	uxtb	r2, r3
 8006926:	4b30      	ldr	r3, [pc, #192]	; (80069e8 <Max31855_Read_Temp+0x11c>)
 8006928:	701a      	strb	r2, [r3, #0]



		sign = (DATARX[0] & (0x80)) >> 7;					// Sign Bit calculation
 800692a:	4b2d      	ldr	r3, [pc, #180]	; (80069e0 <Max31855_Read_Temp+0x114>)
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	09db      	lsrs	r3, r3, #7
 8006930:	b2db      	uxtb	r3, r3
 8006932:	461a      	mov	r2, r3
 8006934:	4b2d      	ldr	r3, [pc, #180]	; (80069ec <Max31855_Read_Temp+0x120>)
 8006936:	601a      	str	r2, [r3, #0]

		if (DATARX[3] & 0x07)								 // Returns Error Number
 8006938:	4b29      	ldr	r3, [pc, #164]	; (80069e0 <Max31855_Read_Temp+0x114>)
 800693a:	78db      	ldrb	r3, [r3, #3]
 800693c:	f003 0307 	and.w	r3, r3, #7
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00c      	beq.n	800695e <Max31855_Read_Temp+0x92>
			THERMO_TEMP = (-1 * (DATARX[3] & 0x07));
 8006944:	4b26      	ldr	r3, [pc, #152]	; (80069e0 <Max31855_Read_Temp+0x114>)
 8006946:	78db      	ldrb	r3, [r3, #3]
 8006948:	f003 0307 	and.w	r3, r3, #7
 800694c:	425b      	negs	r3, r3
 800694e:	ee07 3a90 	vmov	s15, r3
 8006952:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006956:	4b26      	ldr	r3, [pc, #152]	; (80069f0 <Max31855_Read_Temp+0x124>)
 8006958:	edc3 7a00 	vstr	s15, [r3]

	// LSB = 0.25 degrees C
	centigrade *= 0.25;
	return centigrade;
	*/
}
 800695c:	e039      	b.n	80069d2 <Max31855_Read_Temp+0x106>
		else if (sign == 1) {								// Negative Temperature
 800695e:	4b23      	ldr	r3, [pc, #140]	; (80069ec <Max31855_Read_Temp+0x120>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d120      	bne.n	80069a8 <Max31855_Read_Temp+0xdc>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8006966:	4b1e      	ldr	r3, [pc, #120]	; (80069e0 <Max31855_Read_Temp+0x114>)
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	019b      	lsls	r3, r3, #6
 800696c:	4a1c      	ldr	r2, [pc, #112]	; (80069e0 <Max31855_Read_Temp+0x114>)
 800696e:	7852      	ldrb	r2, [r2, #1]
 8006970:	0892      	lsrs	r2, r2, #2
 8006972:	b2d2      	uxtb	r2, r2
 8006974:	4313      	orrs	r3, r2
 8006976:	607b      	str	r3, [r7, #4]
			Temp &= 0b01111111111111;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800697e:	607b      	str	r3, [r7, #4]
			Temp ^= 0b01111111111111;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f483 53ff 	eor.w	r3, r3, #8160	; 0x1fe0
 8006986:	f083 031f 	eor.w	r3, r3, #31
 800698a:	607b      	str	r3, [r7, #4]
			THERMO_TEMP = ((float) -Temp / 4);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	425b      	negs	r3, r3
 8006990:	ee07 3a90 	vmov	s15, r3
 8006994:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006998:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800699c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80069a0:	4b13      	ldr	r3, [pc, #76]	; (80069f0 <Max31855_Read_Temp+0x124>)
 80069a2:	edc3 7a00 	vstr	s15, [r3]
}
 80069a6:	e014      	b.n	80069d2 <Max31855_Read_Temp+0x106>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 80069a8:	4b0d      	ldr	r3, [pc, #52]	; (80069e0 <Max31855_Read_Temp+0x114>)
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	019b      	lsls	r3, r3, #6
 80069ae:	4a0c      	ldr	r2, [pc, #48]	; (80069e0 <Max31855_Read_Temp+0x114>)
 80069b0:	7852      	ldrb	r2, [r2, #1]
 80069b2:	0892      	lsrs	r2, r2, #2
 80069b4:	b2d2      	uxtb	r2, r2
 80069b6:	4313      	orrs	r3, r2
 80069b8:	607b      	str	r3, [r7, #4]
			THERMO_TEMP = ((float) Temp / 4.0);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	ee07 3a90 	vmov	s15, r3
 80069c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069c4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80069c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80069cc:	4b08      	ldr	r3, [pc, #32]	; (80069f0 <Max31855_Read_Temp+0x124>)
 80069ce:	edc3 7a00 	vstr	s15, [r3]
}
 80069d2:	bf00      	nop
 80069d4:	3708      	adds	r7, #8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	40021000 	.word	0x40021000
 80069e0:	20006e10 	.word	0x20006e10
 80069e4:	200068ac 	.word	0x200068ac
 80069e8:	2000068c 	.word	0x2000068c
 80069ec:	20000690 	.word	0x20000690
 80069f0:	200069e8 	.word	0x200069e8

080069f4 <myprintf>:


uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value);
void str2upper(char* string, char* upper);

void myprintf(const char *fmt, ...) { // currently does nothing, was copied from a tutorial to make the code work
 80069f4:	b40f      	push	{r0, r1, r2, r3}
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b082      	sub	sp, #8
 80069fa:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80069fc:	f107 0314 	add.w	r3, r7, #20
 8006a00:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a0a:	480a      	ldr	r0, [pc, #40]	; (8006a34 <myprintf+0x40>)
 8006a0c:	f015 fa3e 	bl	801be8c <vsniprintf>
  va_end(args);

  //CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
  HAL_UART_Transmit(&DEBUG_UART, (uint8_t*)buffer, strlen(buffer), -1);
 8006a10:	4808      	ldr	r0, [pc, #32]	; (8006a34 <myprintf+0x40>)
 8006a12:	f7f9 fbed 	bl	80001f0 <strlen>
 8006a16:	4603      	mov	r3, r0
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a1e:	4905      	ldr	r1, [pc, #20]	; (8006a34 <myprintf+0x40>)
 8006a20:	4805      	ldr	r0, [pc, #20]	; (8006a38 <myprintf+0x44>)
 8006a22:	f006 fa5a 	bl	800ceda <HAL_UART_Transmit>

}
 8006a26:	bf00      	nop
 8006a28:	3708      	adds	r7, #8
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a30:	b004      	add	sp, #16
 8006a32:	4770      	bx	lr
 8006a34:	20000694 	.word	0x20000694
 8006a38:	20005eac 	.word	0x20005eac

08006a3c <sd_init_dynamic_filename>:
 * creates new file of form "[prefix][number].txt"
 * where the string composed of "[prefix][number]" is 8 characters long.
 *
 */
FRESULT sd_init_dynamic_filename(char *prefix, char *header_text, char* return_filename)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b08a      	sub	sp, #40	; 0x28
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
	FRESULT fres = f_mount(&FatFs, "", 1);
 8006a48:	2201      	movs	r2, #1
 8006a4a:	4932      	ldr	r1, [pc, #200]	; (8006b14 <sd_init_dynamic_filename+0xd8>)
 8006a4c:	4832      	ldr	r0, [pc, #200]	; (8006b18 <sd_init_dynamic_filename+0xdc>)
 8006a4e:	f00c ff47 	bl	80138e0 <f_mount>
 8006a52:	4603      	mov	r3, r0
 8006a54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (fres != FR_OK) {
 8006a58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d008      	beq.n	8006a72 <sd_init_dynamic_filename+0x36>
		myprintf("f_mount error (%i)\r\n", fres);
 8006a60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a64:	4619      	mov	r1, r3
 8006a66:	482d      	ldr	r0, [pc, #180]	; (8006b1c <sd_init_dynamic_filename+0xe0>)
 8006a68:	f7ff ffc4 	bl	80069f4 <myprintf>
		return fres;
 8006a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a70:	e04b      	b.n	8006b0a <sd_init_dynamic_filename+0xce>
	}

	// scan files on drive to figure out what suffix number is appropriate
	uint32_t max_used_value = 0;
 8006a72:	2300      	movs	r3, #0
 8006a74:	623b      	str	r3, [r7, #32]
	fres = scan_files("", prefix, &max_used_value);
 8006a76:	f107 0320 	add.w	r3, r7, #32
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	68f9      	ldr	r1, [r7, #12]
 8006a7e:	4825      	ldr	r0, [pc, #148]	; (8006b14 <sd_init_dynamic_filename+0xd8>)
 8006a80:	f000 f89c 	bl	8006bbc <scan_files>
 8006a84:	4603      	mov	r3, r0
 8006a86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// create filename (max filename length in char array is 13 without LFN)
	char filename[13];
	sprintf(filename, "fc%06lu.txt", max_used_value + 1);
 8006a8a:	6a3b      	ldr	r3, [r7, #32]
 8006a8c:	1c5a      	adds	r2, r3, #1
 8006a8e:	f107 0310 	add.w	r3, r7, #16
 8006a92:	4923      	ldr	r1, [pc, #140]	; (8006b20 <sd_init_dynamic_filename+0xe4>)
 8006a94:	4618      	mov	r0, r3
 8006a96:	f014 f9e7 	bl	801ae68 <siprintf>
	return_filename = strcpy(return_filename, filename); // needed so that other functions can open the file!
 8006a9a:	f107 0310 	add.w	r3, r7, #16
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f014 fa72 	bl	801af8a <strcpy>
 8006aa6:	6078      	str	r0, [r7, #4]

	// open file (create file) on SD card
	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8006aa8:	f107 0310 	add.w	r3, r7, #16
 8006aac:	221a      	movs	r2, #26
 8006aae:	4619      	mov	r1, r3
 8006ab0:	481c      	ldr	r0, [pc, #112]	; (8006b24 <sd_init_dynamic_filename+0xe8>)
 8006ab2:	f00c ff79 	bl	80139a8 <f_open>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (fres == FR_OK) {
 8006abc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d11a      	bne.n	8006afa <sd_init_dynamic_filename+0xbe>
		myprintf("I was able to open filename.txt for writing\r\n");
 8006ac4:	4818      	ldr	r0, [pc, #96]	; (8006b28 <sd_init_dynamic_filename+0xec>)
 8006ac6:	f7ff ff95 	bl	80069f4 <myprintf>
	} else {
		myprintf("f_open error (%i)\r\n", fres);
		return fres;
	}
	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8006aca:	4b16      	ldr	r3, [pc, #88]	; (8006b24 <sd_init_dynamic_filename+0xe8>)
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	4619      	mov	r1, r3
 8006ad0:	4814      	ldr	r0, [pc, #80]	; (8006b24 <sd_init_dynamic_filename+0xe8>)
 8006ad2:	f00d fb8a 	bl	80141ea <f_lseek>

	// save indicate start of new log session
	sprintf((char *)msg_buffer, "--- new logging session! ---\r\n");
 8006ad6:	4915      	ldr	r1, [pc, #84]	; (8006b2c <sd_init_dynamic_filename+0xf0>)
 8006ad8:	4815      	ldr	r0, [pc, #84]	; (8006b30 <sd_init_dynamic_filename+0xf4>)
 8006ada:	f014 f9c5 	bl	801ae68 <siprintf>
	sd_write(&fil, msg_buffer);
 8006ade:	4914      	ldr	r1, [pc, #80]	; (8006b30 <sd_init_dynamic_filename+0xf4>)
 8006ae0:	4810      	ldr	r0, [pc, #64]	; (8006b24 <sd_init_dynamic_filename+0xe8>)
 8006ae2:	f000 f841 	bl	8006b68 <sd_write>

	// save header row to indicate what the data is
	sd_write(&fil, (uint8_t *)header_text);
 8006ae6:	68b9      	ldr	r1, [r7, #8]
 8006ae8:	480e      	ldr	r0, [pc, #56]	; (8006b24 <sd_init_dynamic_filename+0xe8>)
 8006aea:	f000 f83d 	bl	8006b68 <sd_write>
	f_close(&fil);
 8006aee:	480d      	ldr	r0, [pc, #52]	; (8006b24 <sd_init_dynamic_filename+0xe8>)
 8006af0:	f00d fb4c 	bl	801418c <f_close>

	return fres;
 8006af4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006af8:	e007      	b.n	8006b0a <sd_init_dynamic_filename+0xce>
		myprintf("f_open error (%i)\r\n", fres);
 8006afa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006afe:	4619      	mov	r1, r3
 8006b00:	480c      	ldr	r0, [pc, #48]	; (8006b34 <sd_init_dynamic_filename+0xf8>)
 8006b02:	f7ff ff77 	bl	80069f4 <myprintf>
		return fres;
 8006b06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3728      	adds	r7, #40	; 0x28
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	080208f4 	.word	0x080208f4
 8006b18:	20006058 	.word	0x20006058
 8006b1c:	080208f8 	.word	0x080208f8
 8006b20:	08020974 	.word	0x08020974
 8006b24:	20006a5c 	.word	0x20006a5c
 8006b28:	08020910 	.word	0x08020910
 8006b2c:	08020954 	.word	0x08020954
 8006b30:	20006e14 	.word	0x20006e14
 8006b34:	08020940 	.word	0x08020940

08006b38 <sd_open_file>:

/*
 * always open in mode FA_WRITE | FA_OPEN_ALWAYS and then appends.
 */
FRESULT sd_open_file(char *filename)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
	// write start to SD card
	FRESULT fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS);
 8006b40:	2212      	movs	r2, #18
 8006b42:	6879      	ldr	r1, [r7, #4]
 8006b44:	4807      	ldr	r0, [pc, #28]	; (8006b64 <sd_open_file+0x2c>)
 8006b46:	f00c ff2f 	bl	80139a8 <f_open>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	73fb      	strb	r3, [r7, #15]

	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8006b4e:	4b05      	ldr	r3, [pc, #20]	; (8006b64 <sd_open_file+0x2c>)
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	4619      	mov	r1, r3
 8006b54:	4803      	ldr	r0, [pc, #12]	; (8006b64 <sd_open_file+0x2c>)
 8006b56:	f00d fb48 	bl	80141ea <f_lseek>

	return fres;
 8006b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	20006a5c 	.word	0x20006a5c

08006b68 <sd_write>:
 * @brief  write buffer to file on sd card.
 * @param  fp 		file to save to
 * @param  buffer	data to write to file
 */
int8_t sd_write(FIL* fp, uint8_t* buffer)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
	UINT bytesWrote;
	FRESULT fres = f_write(fp, buffer, strlen((char const *)buffer), &bytesWrote);
 8006b72:	6838      	ldr	r0, [r7, #0]
 8006b74:	f7f9 fb3c 	bl	80001f0 <strlen>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	f107 0308 	add.w	r3, r7, #8
 8006b7e:	6839      	ldr	r1, [r7, #0]
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f00d f8d6 	bl	8013d32 <f_write>
 8006b86:	4603      	mov	r3, r0
 8006b88:	73fb      	strb	r3, [r7, #15]
	if (fres == FR_OK) {
 8006b8a:	7bfb      	ldrb	r3, [r7, #15]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d107      	bne.n	8006ba0 <sd_write+0x38>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	4619      	mov	r1, r3
 8006b94:	4807      	ldr	r0, [pc, #28]	; (8006bb4 <sd_write+0x4c>)
 8006b96:	f7ff ff2d 	bl	80069f4 <myprintf>
		return bytesWrote;
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	b25b      	sxtb	r3, r3
 8006b9e:	e004      	b.n	8006baa <sd_write+0x42>
	} else {
		myprintf("f_write error (%i)\r\n");
 8006ba0:	4805      	ldr	r0, [pc, #20]	; (8006bb8 <sd_write+0x50>)
 8006ba2:	f7ff ff27 	bl	80069f4 <myprintf>
		return -1;
 8006ba6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	08020980 	.word	0x08020980
 8006bb8:	080209a4 	.word	0x080209a4

08006bbc <scan_files>:
FRESULT scan_files (
    char* path,        /* Start node to be scanned (***also used as work area***) */
	char* prefix,	   /* prefix in the filename for our datafiles */
	uint32_t* max_used_value
)
{
 8006bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bbe:	b099      	sub	sp, #100	; 0x64
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]
 8006bc8:	466b      	mov	r3, sp
 8006bca:	461d      	mov	r5, r3
    DIR dir;
//    UINT i;
    static FILINFO fno;

    // does not change so make it static
    uint8_t len_prefix = strlen(prefix);
 8006bcc:	68b8      	ldr	r0, [r7, #8]
 8006bce:	f7f9 fb0f 	bl	80001f0 <strlen>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    char prefix_upper[len_prefix];
 8006bd8:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 8006bdc:	4623      	mov	r3, r4
 8006bde:	3b01      	subs	r3, #1
 8006be0:	65bb      	str	r3, [r7, #88]	; 0x58
 8006be2:	b2e0      	uxtb	r0, r4
 8006be4:	f04f 0100 	mov.w	r1, #0
 8006be8:	f04f 0200 	mov.w	r2, #0
 8006bec:	f04f 0300 	mov.w	r3, #0
 8006bf0:	00cb      	lsls	r3, r1, #3
 8006bf2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006bf6:	00c2      	lsls	r2, r0, #3
 8006bf8:	b2e0      	uxtb	r0, r4
 8006bfa:	f04f 0100 	mov.w	r1, #0
 8006bfe:	f04f 0200 	mov.w	r2, #0
 8006c02:	f04f 0300 	mov.w	r3, #0
 8006c06:	00cb      	lsls	r3, r1, #3
 8006c08:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006c0c:	00c2      	lsls	r2, r0, #3
 8006c0e:	4623      	mov	r3, r4
 8006c10:	3307      	adds	r3, #7
 8006c12:	08db      	lsrs	r3, r3, #3
 8006c14:	00db      	lsls	r3, r3, #3
 8006c16:	ebad 0d03 	sub.w	sp, sp, r3
 8006c1a:	466b      	mov	r3, sp
 8006c1c:	3300      	adds	r3, #0
 8006c1e:	657b      	str	r3, [r7, #84]	; 0x54
	str2upper(prefix, prefix_upper);
 8006c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c22:	4619      	mov	r1, r3
 8006c24:	68b8      	ldr	r0, [r7, #8]
 8006c26:	f000 f8ff 	bl	8006e28 <str2upper>

	*max_used_value = 0; // initialize to known minimum value
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	601a      	str	r2, [r3, #0]
	uint32_t num_files_fc = 0; // suffix on the files containing fc data already on sd card
 8006c30:	2300      	movs	r3, #0
 8006c32:	617b      	str	r3, [r7, #20]

    res = f_opendir(&dir, path);                       /* Open the directory */
 8006c34:	f107 0318 	add.w	r3, r7, #24
 8006c38:	68f9      	ldr	r1, [r7, #12]
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f00d fd28 	bl	8014690 <f_opendir>
 8006c40:	4603      	mov	r3, r0
 8006c42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (res == FR_OK) {
 8006c46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d16c      	bne.n	8006d28 <scan_files+0x16c>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8006c4e:	f107 0318 	add.w	r3, r7, #24
 8006c52:	4939      	ldr	r1, [pc, #228]	; (8006d38 <scan_files+0x17c>)
 8006c54:	4618      	mov	r0, r3
 8006c56:	f00d fdbf 	bl	80147d8 <f_readdir>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8006c60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d15a      	bne.n	8006d1e <scan_files+0x162>
 8006c68:	4b33      	ldr	r3, [pc, #204]	; (8006d38 <scan_files+0x17c>)
 8006c6a:	7a5b      	ldrb	r3, [r3, #9]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d056      	beq.n	8006d1e <scan_files+0x162>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 8006c70:	4b31      	ldr	r3, [pc, #196]	; (8006d38 <scan_files+0x17c>)
 8006c72:	7a1b      	ldrb	r3, [r3, #8]
 8006c74:	f003 0310 	and.w	r3, r3, #16
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d14e      	bne.n	8006d1a <scan_files+0x15e>
//                i = strlen(path);
//                sprintf(&path[i], "/%s", fno.fname);
//                res = scan_files(path, prefix, max_used_value);    /* Enter the directory */
//                if (res != FR_OK) break;
//                path[i] = 0;
            } else {                                       /* It is a file. */
 8006c7c:	466b      	mov	r3, sp
 8006c7e:	461e      	mov	r6, r3
//                printf("%s/%s\n", path, fno.fname);

            	// check if filename contains parts of our standard prefix "FC000000.txt"
            	// but first convert to uppercase to make case insensitive

            	char fname_upper[strlen((char *)fno.fname)];
 8006c80:	482e      	ldr	r0, [pc, #184]	; (8006d3c <scan_files+0x180>)
 8006c82:	f7f9 fab5 	bl	80001f0 <strlen>
 8006c86:	4604      	mov	r4, r0
 8006c88:	4623      	mov	r3, r4
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	653b      	str	r3, [r7, #80]	; 0x50
 8006c8e:	4620      	mov	r0, r4
 8006c90:	f04f 0100 	mov.w	r1, #0
 8006c94:	f04f 0200 	mov.w	r2, #0
 8006c98:	f04f 0300 	mov.w	r3, #0
 8006c9c:	00cb      	lsls	r3, r1, #3
 8006c9e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006ca2:	00c2      	lsls	r2, r0, #3
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	f04f 0100 	mov.w	r1, #0
 8006caa:	f04f 0200 	mov.w	r2, #0
 8006cae:	f04f 0300 	mov.w	r3, #0
 8006cb2:	00cb      	lsls	r3, r1, #3
 8006cb4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006cb8:	00c2      	lsls	r2, r0, #3
 8006cba:	1de3      	adds	r3, r4, #7
 8006cbc:	08db      	lsrs	r3, r3, #3
 8006cbe:	00db      	lsls	r3, r3, #3
 8006cc0:	ebad 0d03 	sub.w	sp, sp, r3
 8006cc4:	466b      	mov	r3, sp
 8006cc6:	3300      	adds	r3, #0
 8006cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
            	str2upper((char *)fno.fname, fname_upper);
 8006cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ccc:	4619      	mov	r1, r3
 8006cce:	481b      	ldr	r0, [pc, #108]	; (8006d3c <scan_files+0x180>)
 8006cd0:	f000 f8aa 	bl	8006e28 <str2upper>

            	int8_t contains_prefix = strncmp(fno.fname, prefix_upper, len_prefix);
 8006cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cd6:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8006cda:	4619      	mov	r1, r3
 8006cdc:	4817      	ldr	r0, [pc, #92]	; (8006d3c <scan_files+0x180>)
 8006cde:	f014 f95c 	bl	801af9a <strncmp>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

            	if (contains_prefix == 0)
 8006ce8:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d112      	bne.n	8006d16 <scan_files+0x15a>
            	{
            		// can do error checking with status if desired
            		uint8_t status = extract_filename_suffix(fname_upper, len_prefix, &num_files_fc);
 8006cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cf2:	f107 0214 	add.w	r2, r7, #20
 8006cf6:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f000 f820 	bl	8006d40 <extract_filename_suffix>
 8006d00:	4603      	mov	r3, r0
 8006d02:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

            		if (num_files_fc > *max_used_value)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d202      	bcs.n	8006d16 <scan_files+0x15a>
            		{
            			*max_used_value = num_files_fc;
 8006d10:	697a      	ldr	r2, [r7, #20]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	601a      	str	r2, [r3, #0]
 8006d16:	46b5      	mov	sp, r6
 8006d18:	e799      	b.n	8006c4e <scan_files+0x92>
            	continue; // don't enter directory
 8006d1a:	bf00      	nop
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8006d1c:	e797      	b.n	8006c4e <scan_files+0x92>
            		}
            	}
            }
        }

        f_closedir(&dir);
 8006d1e:	f107 0318 	add.w	r3, r7, #24
 8006d22:	4618      	mov	r0, r3
 8006d24:	f00d fd2d 	bl	8014782 <f_closedir>
    }

    return res;
 8006d28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d2c:	46ad      	mov	sp, r5
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3764      	adds	r7, #100	; 0x64
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d36:	bf00      	nop
 8006d38:	20000794 	.word	0x20000794
 8006d3c:	2000079d 	.word	0x2000079d

08006d40 <extract_filename_suffix>:
 * which is assumed to be .txt. assumes that filename contains prefix.
 *
 * returns integer indicating success/fail: 0 = success, 1 = fail
 */
uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value)
{
 8006d40:	b5b0      	push	{r4, r5, r7, lr}
 8006d42:	b088      	sub	sp, #32
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	607a      	str	r2, [r7, #4]
 8006d4c:	72fb      	strb	r3, [r7, #11]
 8006d4e:	466b      	mov	r3, sp
 8006d50:	461d      	mov	r5, r3
	uint8_t len_filename = strlen(filename);
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f7f9 fa4c 	bl	80001f0 <strlen>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	77bb      	strb	r3, [r7, #30]

	// add characters between prefix and filename extension to buffer
	uint8_t len_buf = 8;
 8006d5c:	2308      	movs	r3, #8
 8006d5e:	777b      	strb	r3, [r7, #29]
	char buf[len_buf]; // filenames can't be longer than 8 characters total
 8006d60:	7f7c      	ldrb	r4, [r7, #29]
 8006d62:	4623      	mov	r3, r4
 8006d64:	3b01      	subs	r3, #1
 8006d66:	61bb      	str	r3, [r7, #24]
 8006d68:	b2e0      	uxtb	r0, r4
 8006d6a:	f04f 0100 	mov.w	r1, #0
 8006d6e:	f04f 0200 	mov.w	r2, #0
 8006d72:	f04f 0300 	mov.w	r3, #0
 8006d76:	00cb      	lsls	r3, r1, #3
 8006d78:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006d7c:	00c2      	lsls	r2, r0, #3
 8006d7e:	b2e0      	uxtb	r0, r4
 8006d80:	f04f 0100 	mov.w	r1, #0
 8006d84:	f04f 0200 	mov.w	r2, #0
 8006d88:	f04f 0300 	mov.w	r3, #0
 8006d8c:	00cb      	lsls	r3, r1, #3
 8006d8e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006d92:	00c2      	lsls	r2, r0, #3
 8006d94:	4623      	mov	r3, r4
 8006d96:	3307      	adds	r3, #7
 8006d98:	08db      	lsrs	r3, r3, #3
 8006d9a:	00db      	lsls	r3, r3, #3
 8006d9c:	ebad 0d03 	sub.w	sp, sp, r3
 8006da0:	466b      	mov	r3, sp
 8006da2:	3300      	adds	r3, #0
 8006da4:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len_buf; i++)
 8006da6:	2300      	movs	r3, #0
 8006da8:	77fb      	strb	r3, [r7, #31]
 8006daa:	e014      	b.n	8006dd6 <extract_filename_suffix+0x96>
	{
		if (len_prefix - 1 + i < len_filename - 1) // go to end of filename
 8006dac:	7afb      	ldrb	r3, [r7, #11]
 8006dae:	1e5a      	subs	r2, r3, #1
 8006db0:	7ffb      	ldrb	r3, [r7, #31]
 8006db2:	441a      	add	r2, r3
 8006db4:	7fbb      	ldrb	r3, [r7, #30]
 8006db6:	3b01      	subs	r3, #1
 8006db8:	429a      	cmp	r2, r3
 8006dba:	da11      	bge.n	8006de0 <extract_filename_suffix+0xa0>
		{
			buf[i] = filename[len_prefix + i];
 8006dbc:	7afa      	ldrb	r2, [r7, #11]
 8006dbe:	7ffb      	ldrb	r3, [r7, #31]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	441a      	add	r2, r3
 8006dc8:	7ffb      	ldrb	r3, [r7, #31]
 8006dca:	7811      	ldrb	r1, [r2, #0]
 8006dcc:	697a      	ldr	r2, [r7, #20]
 8006dce:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len_buf; i++)
 8006dd0:	7ffb      	ldrb	r3, [r7, #31]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	77fb      	strb	r3, [r7, #31]
 8006dd6:	7ffa      	ldrb	r2, [r7, #31]
 8006dd8:	7f7b      	ldrb	r3, [r7, #29]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d3e6      	bcc.n	8006dac <extract_filename_suffix+0x6c>
 8006dde:	e000      	b.n	8006de2 <extract_filename_suffix+0xa2>
		}
		else break;
 8006de0:	bf00      	nop
	}

	// change chars to integer, strtol will strip out the .txt
	char *ptr;
	*num_value = strtol(buf, &ptr, 10);
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	f107 0110 	add.w	r1, r7, #16
 8006de8:	220a      	movs	r2, #10
 8006dea:	4618      	mov	r0, r3
 8006dec:	f014 ff9a 	bl	801bd24 <strtol>
 8006df0:	4603      	mov	r3, r0
 8006df2:	461a      	mov	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	601a      	str	r2, [r3, #0]

	if (ptr == buf || *num_value == LONG_MIN || *num_value == LONG_MAX)
 8006df8:	697a      	ldr	r2, [r7, #20]
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d00a      	beq.n	8006e16 <extract_filename_suffix+0xd6>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e08:	d005      	beq.n	8006e16 <extract_filename_suffix+0xd6>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d101      	bne.n	8006e1a <extract_filename_suffix+0xda>
	{
		return 1;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e000      	b.n	8006e1c <extract_filename_suffix+0xdc>
	}

	return 0;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	46ad      	mov	sp, r5
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3720      	adds	r7, #32
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006e28 <str2upper>:
/**
 * assumes that upper has enough characters in the array
 * to store the uppercase version.
 */
void str2upper(char* string, char* upper)
{
 8006e28:	b590      	push	{r4, r7, lr}
 8006e2a:	b085      	sub	sp, #20
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 8006e32:	2300      	movs	r3, #0
 8006e34:	73fb      	strb	r3, [r7, #15]
 8006e36:	e019      	b.n	8006e6c <str2upper+0x44>
	{
		upper[i] = toupper(string[i]);
 8006e38:	7bfb      	ldrb	r3, [r7, #15]
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	73bb      	strb	r3, [r7, #14]
 8006e42:	7bbb      	ldrb	r3, [r7, #14]
 8006e44:	3301      	adds	r3, #1
 8006e46:	4a0f      	ldr	r2, [pc, #60]	; (8006e84 <str2upper+0x5c>)
 8006e48:	4413      	add	r3, r2
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	f003 0303 	and.w	r3, r3, #3
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d102      	bne.n	8006e5a <str2upper+0x32>
 8006e54:	7bbb      	ldrb	r3, [r7, #14]
 8006e56:	3b20      	subs	r3, #32
 8006e58:	e000      	b.n	8006e5c <str2upper+0x34>
 8006e5a:	7bbb      	ldrb	r3, [r7, #14]
 8006e5c:	7bfa      	ldrb	r2, [r7, #15]
 8006e5e:	6839      	ldr	r1, [r7, #0]
 8006e60:	440a      	add	r2, r1
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 8006e66:	7bfb      	ldrb	r3, [r7, #15]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	73fb      	strb	r3, [r7, #15]
 8006e6c:	7bfc      	ldrb	r4, [r7, #15]
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f7f9 f9be 	bl	80001f0 <strlen>
 8006e74:	4603      	mov	r3, r0
 8006e76:	429c      	cmp	r4, r3
 8006e78:	d3de      	bcc.n	8006e38 <str2upper+0x10>
	}
}
 8006e7a:	bf00      	nop
 8006e7c:	bf00      	nop
 8006e7e:	3714      	adds	r7, #20
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd90      	pop	{r4, r7, pc}
 8006e84:	08020d10 	.word	0x08020d10

08006e88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006e8c:	4b0e      	ldr	r3, [pc, #56]	; (8006ec8 <HAL_Init+0x40>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a0d      	ldr	r2, [pc, #52]	; (8006ec8 <HAL_Init+0x40>)
 8006e92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006e98:	4b0b      	ldr	r3, [pc, #44]	; (8006ec8 <HAL_Init+0x40>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a0a      	ldr	r2, [pc, #40]	; (8006ec8 <HAL_Init+0x40>)
 8006e9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006ea2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006ea4:	4b08      	ldr	r3, [pc, #32]	; (8006ec8 <HAL_Init+0x40>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a07      	ldr	r2, [pc, #28]	; (8006ec8 <HAL_Init+0x40>)
 8006eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006eae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006eb0:	2003      	movs	r0, #3
 8006eb2:	f000 fb92 	bl	80075da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006eb6:	2000      	movs	r0, #0
 8006eb8:	f7fc f8ae 	bl	8003018 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006ebc:	f7fb fd72 	bl	80029a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	40023c00 	.word	0x40023c00

08006ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006ed0:	4b06      	ldr	r3, [pc, #24]	; (8006eec <HAL_IncTick+0x20>)
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	4b06      	ldr	r3, [pc, #24]	; (8006ef0 <HAL_IncTick+0x24>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4413      	add	r3, r2
 8006edc:	4a04      	ldr	r2, [pc, #16]	; (8006ef0 <HAL_IncTick+0x24>)
 8006ede:	6013      	str	r3, [r2, #0]
}
 8006ee0:	bf00      	nop
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	20000020 	.word	0x20000020
 8006ef0:	200071fc 	.word	0x200071fc

08006ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8006ef8:	4b03      	ldr	r3, [pc, #12]	; (8006f08 <HAL_GetTick+0x14>)
 8006efa:	681b      	ldr	r3, [r3, #0]
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	200071fc 	.word	0x200071fc

08006f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006f14:	f7ff ffee 	bl	8006ef4 <HAL_GetTick>
 8006f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f24:	d005      	beq.n	8006f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006f26:	4b0a      	ldr	r3, [pc, #40]	; (8006f50 <HAL_Delay+0x44>)
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	4413      	add	r3, r2
 8006f30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006f32:	bf00      	nop
 8006f34:	f7ff ffde 	bl	8006ef4 <HAL_GetTick>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d8f7      	bhi.n	8006f34 <HAL_Delay+0x28>
  {
  }
}
 8006f44:	bf00      	nop
 8006f46:	bf00      	nop
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	20000020 	.word	0x20000020

08006f54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d101      	bne.n	8006f6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e033      	b.n	8006fd2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d109      	bne.n	8006f86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7fb fd42 	bl	80029fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8a:	f003 0310 	and.w	r3, r3, #16
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d118      	bne.n	8006fc4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006f9a:	f023 0302 	bic.w	r3, r3, #2
 8006f9e:	f043 0202 	orr.w	r2, r3, #2
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f94a 	bl	8007240 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb6:	f023 0303 	bic.w	r3, r3, #3
 8006fba:	f043 0201 	orr.w	r2, r3, #1
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	641a      	str	r2, [r3, #64]	; 0x40
 8006fc2:	e001      	b.n	8006fc8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
	...

08006fdc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d101      	bne.n	8006ff8 <HAL_ADC_ConfigChannel+0x1c>
 8006ff4:	2302      	movs	r3, #2
 8006ff6:	e113      	b.n	8007220 <HAL_ADC_ConfigChannel+0x244>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2b09      	cmp	r3, #9
 8007006:	d925      	bls.n	8007054 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68d9      	ldr	r1, [r3, #12]
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	b29b      	uxth	r3, r3
 8007014:	461a      	mov	r2, r3
 8007016:	4613      	mov	r3, r2
 8007018:	005b      	lsls	r3, r3, #1
 800701a:	4413      	add	r3, r2
 800701c:	3b1e      	subs	r3, #30
 800701e:	2207      	movs	r2, #7
 8007020:	fa02 f303 	lsl.w	r3, r2, r3
 8007024:	43da      	mvns	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	400a      	ands	r2, r1
 800702c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68d9      	ldr	r1, [r3, #12]
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	689a      	ldr	r2, [r3, #8]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	b29b      	uxth	r3, r3
 800703e:	4618      	mov	r0, r3
 8007040:	4603      	mov	r3, r0
 8007042:	005b      	lsls	r3, r3, #1
 8007044:	4403      	add	r3, r0
 8007046:	3b1e      	subs	r3, #30
 8007048:	409a      	lsls	r2, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	430a      	orrs	r2, r1
 8007050:	60da      	str	r2, [r3, #12]
 8007052:	e022      	b.n	800709a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	6919      	ldr	r1, [r3, #16]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	b29b      	uxth	r3, r3
 8007060:	461a      	mov	r2, r3
 8007062:	4613      	mov	r3, r2
 8007064:	005b      	lsls	r3, r3, #1
 8007066:	4413      	add	r3, r2
 8007068:	2207      	movs	r2, #7
 800706a:	fa02 f303 	lsl.w	r3, r2, r3
 800706e:	43da      	mvns	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	400a      	ands	r2, r1
 8007076:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	6919      	ldr	r1, [r3, #16]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	689a      	ldr	r2, [r3, #8]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	b29b      	uxth	r3, r3
 8007088:	4618      	mov	r0, r3
 800708a:	4603      	mov	r3, r0
 800708c:	005b      	lsls	r3, r3, #1
 800708e:	4403      	add	r3, r0
 8007090:	409a      	lsls	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	430a      	orrs	r2, r1
 8007098:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	2b06      	cmp	r3, #6
 80070a0:	d824      	bhi.n	80070ec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	685a      	ldr	r2, [r3, #4]
 80070ac:	4613      	mov	r3, r2
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	4413      	add	r3, r2
 80070b2:	3b05      	subs	r3, #5
 80070b4:	221f      	movs	r2, #31
 80070b6:	fa02 f303 	lsl.w	r3, r2, r3
 80070ba:	43da      	mvns	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	400a      	ands	r2, r1
 80070c2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	4618      	mov	r0, r3
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	685a      	ldr	r2, [r3, #4]
 80070d6:	4613      	mov	r3, r2
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	4413      	add	r3, r2
 80070dc:	3b05      	subs	r3, #5
 80070de:	fa00 f203 	lsl.w	r2, r0, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	430a      	orrs	r2, r1
 80070e8:	635a      	str	r2, [r3, #52]	; 0x34
 80070ea:	e04c      	b.n	8007186 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	2b0c      	cmp	r3, #12
 80070f2:	d824      	bhi.n	800713e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	685a      	ldr	r2, [r3, #4]
 80070fe:	4613      	mov	r3, r2
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	4413      	add	r3, r2
 8007104:	3b23      	subs	r3, #35	; 0x23
 8007106:	221f      	movs	r2, #31
 8007108:	fa02 f303 	lsl.w	r3, r2, r3
 800710c:	43da      	mvns	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	400a      	ands	r2, r1
 8007114:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	b29b      	uxth	r3, r3
 8007122:	4618      	mov	r0, r3
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	4613      	mov	r3, r2
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	4413      	add	r3, r2
 800712e:	3b23      	subs	r3, #35	; 0x23
 8007130:	fa00 f203 	lsl.w	r2, r0, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	430a      	orrs	r2, r1
 800713a:	631a      	str	r2, [r3, #48]	; 0x30
 800713c:	e023      	b.n	8007186 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	4613      	mov	r3, r2
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	4413      	add	r3, r2
 800714e:	3b41      	subs	r3, #65	; 0x41
 8007150:	221f      	movs	r2, #31
 8007152:	fa02 f303 	lsl.w	r3, r2, r3
 8007156:	43da      	mvns	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	400a      	ands	r2, r1
 800715e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	b29b      	uxth	r3, r3
 800716c:	4618      	mov	r0, r3
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	685a      	ldr	r2, [r3, #4]
 8007172:	4613      	mov	r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4413      	add	r3, r2
 8007178:	3b41      	subs	r3, #65	; 0x41
 800717a:	fa00 f203 	lsl.w	r2, r0, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	430a      	orrs	r2, r1
 8007184:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007186:	4b29      	ldr	r3, [pc, #164]	; (800722c <HAL_ADC_ConfigChannel+0x250>)
 8007188:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a28      	ldr	r2, [pc, #160]	; (8007230 <HAL_ADC_ConfigChannel+0x254>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d10f      	bne.n	80071b4 <HAL_ADC_ConfigChannel+0x1d8>
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2b12      	cmp	r3, #18
 800719a:	d10b      	bne.n	80071b4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a1d      	ldr	r2, [pc, #116]	; (8007230 <HAL_ADC_ConfigChannel+0x254>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d12b      	bne.n	8007216 <HAL_ADC_ConfigChannel+0x23a>
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a1c      	ldr	r2, [pc, #112]	; (8007234 <HAL_ADC_ConfigChannel+0x258>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d003      	beq.n	80071d0 <HAL_ADC_ConfigChannel+0x1f4>
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2b11      	cmp	r3, #17
 80071ce:	d122      	bne.n	8007216 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a11      	ldr	r2, [pc, #68]	; (8007234 <HAL_ADC_ConfigChannel+0x258>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d111      	bne.n	8007216 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80071f2:	4b11      	ldr	r3, [pc, #68]	; (8007238 <HAL_ADC_ConfigChannel+0x25c>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a11      	ldr	r2, [pc, #68]	; (800723c <HAL_ADC_ConfigChannel+0x260>)
 80071f8:	fba2 2303 	umull	r2, r3, r2, r3
 80071fc:	0c9a      	lsrs	r2, r3, #18
 80071fe:	4613      	mov	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4413      	add	r3, r2
 8007204:	005b      	lsls	r3, r3, #1
 8007206:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007208:	e002      	b.n	8007210 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	3b01      	subs	r3, #1
 800720e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1f9      	bne.n	800720a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3714      	adds	r7, #20
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr
 800722c:	40012300 	.word	0x40012300
 8007230:	40012000 	.word	0x40012000
 8007234:	10000012 	.word	0x10000012
 8007238:	20000000 	.word	0x20000000
 800723c:	431bde83 	.word	0x431bde83

08007240 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007248:	4b79      	ldr	r3, [pc, #484]	; (8007430 <ADC_Init+0x1f0>)
 800724a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	431a      	orrs	r2, r3
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007274:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	6859      	ldr	r1, [r3, #4]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	021a      	lsls	r2, r3, #8
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	430a      	orrs	r2, r1
 8007288:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	685a      	ldr	r2, [r3, #4]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007298:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	6859      	ldr	r1, [r3, #4]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	689a      	ldr	r2, [r3, #8]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	430a      	orrs	r2, r1
 80072aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	689a      	ldr	r2, [r3, #8]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6899      	ldr	r1, [r3, #8]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	68da      	ldr	r2, [r3, #12]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	430a      	orrs	r2, r1
 80072cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d2:	4a58      	ldr	r2, [pc, #352]	; (8007434 <ADC_Init+0x1f4>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d022      	beq.n	800731e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	689a      	ldr	r2, [r3, #8]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80072e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	6899      	ldr	r1, [r3, #8]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	430a      	orrs	r2, r1
 80072f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	689a      	ldr	r2, [r3, #8]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007308:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	6899      	ldr	r1, [r3, #8]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	430a      	orrs	r2, r1
 800731a:	609a      	str	r2, [r3, #8]
 800731c:	e00f      	b.n	800733e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	689a      	ldr	r2, [r3, #8]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800732c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	689a      	ldr	r2, [r3, #8]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800733c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	689a      	ldr	r2, [r3, #8]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f022 0202 	bic.w	r2, r2, #2
 800734c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	6899      	ldr	r1, [r3, #8]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	7e1b      	ldrb	r3, [r3, #24]
 8007358:	005a      	lsls	r2, r3, #1
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	430a      	orrs	r2, r1
 8007360:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d01b      	beq.n	80073a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	685a      	ldr	r2, [r3, #4]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800737a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	685a      	ldr	r2, [r3, #4]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800738a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	6859      	ldr	r1, [r3, #4]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007396:	3b01      	subs	r3, #1
 8007398:	035a      	lsls	r2, r3, #13
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	430a      	orrs	r2, r1
 80073a0:	605a      	str	r2, [r3, #4]
 80073a2:	e007      	b.n	80073b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	685a      	ldr	r2, [r3, #4]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80073c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	69db      	ldr	r3, [r3, #28]
 80073ce:	3b01      	subs	r3, #1
 80073d0:	051a      	lsls	r2, r3, #20
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	430a      	orrs	r2, r1
 80073d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	689a      	ldr	r2, [r3, #8]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80073e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	6899      	ldr	r1, [r3, #8]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80073f6:	025a      	lsls	r2, r3, #9
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	430a      	orrs	r2, r1
 80073fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	689a      	ldr	r2, [r3, #8]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800740e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	6899      	ldr	r1, [r3, #8]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	029a      	lsls	r2, r3, #10
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	430a      	orrs	r2, r1
 8007422:	609a      	str	r2, [r3, #8]
}
 8007424:	bf00      	nop
 8007426:	3714      	adds	r7, #20
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr
 8007430:	40012300 	.word	0x40012300
 8007434:	0f000001 	.word	0x0f000001

08007438 <__NVIC_SetPriorityGrouping>:
{
 8007438:	b480      	push	{r7}
 800743a:	b085      	sub	sp, #20
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f003 0307 	and.w	r3, r3, #7
 8007446:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007448:	4b0c      	ldr	r3, [pc, #48]	; (800747c <__NVIC_SetPriorityGrouping+0x44>)
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007454:	4013      	ands	r3, r2
 8007456:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007460:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800746a:	4a04      	ldr	r2, [pc, #16]	; (800747c <__NVIC_SetPriorityGrouping+0x44>)
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	60d3      	str	r3, [r2, #12]
}
 8007470:	bf00      	nop
 8007472:	3714      	adds	r7, #20
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	e000ed00 	.word	0xe000ed00

08007480 <__NVIC_GetPriorityGrouping>:
{
 8007480:	b480      	push	{r7}
 8007482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007484:	4b04      	ldr	r3, [pc, #16]	; (8007498 <__NVIC_GetPriorityGrouping+0x18>)
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	0a1b      	lsrs	r3, r3, #8
 800748a:	f003 0307 	and.w	r3, r3, #7
}
 800748e:	4618      	mov	r0, r3
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr
 8007498:	e000ed00 	.word	0xe000ed00

0800749c <__NVIC_EnableIRQ>:
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	4603      	mov	r3, r0
 80074a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	db0b      	blt.n	80074c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80074ae:	79fb      	ldrb	r3, [r7, #7]
 80074b0:	f003 021f 	and.w	r2, r3, #31
 80074b4:	4907      	ldr	r1, [pc, #28]	; (80074d4 <__NVIC_EnableIRQ+0x38>)
 80074b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074ba:	095b      	lsrs	r3, r3, #5
 80074bc:	2001      	movs	r0, #1
 80074be:	fa00 f202 	lsl.w	r2, r0, r2
 80074c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80074c6:	bf00      	nop
 80074c8:	370c      	adds	r7, #12
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	e000e100 	.word	0xe000e100

080074d8 <__NVIC_DisableIRQ>:
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	4603      	mov	r3, r0
 80074e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	db12      	blt.n	8007510 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80074ea:	79fb      	ldrb	r3, [r7, #7]
 80074ec:	f003 021f 	and.w	r2, r3, #31
 80074f0:	490a      	ldr	r1, [pc, #40]	; (800751c <__NVIC_DisableIRQ+0x44>)
 80074f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074f6:	095b      	lsrs	r3, r3, #5
 80074f8:	2001      	movs	r0, #1
 80074fa:	fa00 f202 	lsl.w	r2, r0, r2
 80074fe:	3320      	adds	r3, #32
 8007500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007504:	f3bf 8f4f 	dsb	sy
}
 8007508:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800750a:	f3bf 8f6f 	isb	sy
}
 800750e:	bf00      	nop
}
 8007510:	bf00      	nop
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr
 800751c:	e000e100 	.word	0xe000e100

08007520 <__NVIC_SetPriority>:
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	4603      	mov	r3, r0
 8007528:	6039      	str	r1, [r7, #0]
 800752a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800752c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007530:	2b00      	cmp	r3, #0
 8007532:	db0a      	blt.n	800754a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	b2da      	uxtb	r2, r3
 8007538:	490c      	ldr	r1, [pc, #48]	; (800756c <__NVIC_SetPriority+0x4c>)
 800753a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800753e:	0112      	lsls	r2, r2, #4
 8007540:	b2d2      	uxtb	r2, r2
 8007542:	440b      	add	r3, r1
 8007544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007548:	e00a      	b.n	8007560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	b2da      	uxtb	r2, r3
 800754e:	4908      	ldr	r1, [pc, #32]	; (8007570 <__NVIC_SetPriority+0x50>)
 8007550:	79fb      	ldrb	r3, [r7, #7]
 8007552:	f003 030f 	and.w	r3, r3, #15
 8007556:	3b04      	subs	r3, #4
 8007558:	0112      	lsls	r2, r2, #4
 800755a:	b2d2      	uxtb	r2, r2
 800755c:	440b      	add	r3, r1
 800755e:	761a      	strb	r2, [r3, #24]
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr
 800756c:	e000e100 	.word	0xe000e100
 8007570:	e000ed00 	.word	0xe000ed00

08007574 <NVIC_EncodePriority>:
{
 8007574:	b480      	push	{r7}
 8007576:	b089      	sub	sp, #36	; 0x24
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f003 0307 	and.w	r3, r3, #7
 8007586:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	f1c3 0307 	rsb	r3, r3, #7
 800758e:	2b04      	cmp	r3, #4
 8007590:	bf28      	it	cs
 8007592:	2304      	movcs	r3, #4
 8007594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	3304      	adds	r3, #4
 800759a:	2b06      	cmp	r3, #6
 800759c:	d902      	bls.n	80075a4 <NVIC_EncodePriority+0x30>
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	3b03      	subs	r3, #3
 80075a2:	e000      	b.n	80075a6 <NVIC_EncodePriority+0x32>
 80075a4:	2300      	movs	r3, #0
 80075a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	fa02 f303 	lsl.w	r3, r2, r3
 80075b2:	43da      	mvns	r2, r3
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	401a      	ands	r2, r3
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80075bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	fa01 f303 	lsl.w	r3, r1, r3
 80075c6:	43d9      	mvns	r1, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075cc:	4313      	orrs	r3, r2
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3724      	adds	r7, #36	; 0x24
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b082      	sub	sp, #8
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f7ff ff28 	bl	8007438 <__NVIC_SetPriorityGrouping>
}
 80075e8:	bf00      	nop
 80075ea:	3708      	adds	r7, #8
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b086      	sub	sp, #24
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	4603      	mov	r3, r0
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	607a      	str	r2, [r7, #4]
 80075fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80075fe:	2300      	movs	r3, #0
 8007600:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007602:	f7ff ff3d 	bl	8007480 <__NVIC_GetPriorityGrouping>
 8007606:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	68b9      	ldr	r1, [r7, #8]
 800760c:	6978      	ldr	r0, [r7, #20]
 800760e:	f7ff ffb1 	bl	8007574 <NVIC_EncodePriority>
 8007612:	4602      	mov	r2, r0
 8007614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007618:	4611      	mov	r1, r2
 800761a:	4618      	mov	r0, r3
 800761c:	f7ff ff80 	bl	8007520 <__NVIC_SetPriority>
}
 8007620:	bf00      	nop
 8007622:	3718      	adds	r7, #24
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	4603      	mov	r3, r0
 8007630:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007636:	4618      	mov	r0, r3
 8007638:	f7ff ff30 	bl	800749c <__NVIC_EnableIRQ>
}
 800763c:	bf00      	nop
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	4603      	mov	r3, r0
 800764c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800764e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007652:	4618      	mov	r0, r3
 8007654:	f7ff ff40 	bl	80074d8 <__NVIC_DisableIRQ>
}
 8007658:	bf00      	nop
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007660:	b480      	push	{r7}
 8007662:	b089      	sub	sp, #36	; 0x24
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800766a:	2300      	movs	r3, #0
 800766c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800766e:	2300      	movs	r3, #0
 8007670:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007672:	2300      	movs	r3, #0
 8007674:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007676:	2300      	movs	r3, #0
 8007678:	61fb      	str	r3, [r7, #28]
 800767a:	e177      	b.n	800796c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800767c:	2201      	movs	r2, #1
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	fa02 f303 	lsl.w	r3, r2, r3
 8007684:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	697a      	ldr	r2, [r7, #20]
 800768c:	4013      	ands	r3, r2
 800768e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007690:	693a      	ldr	r2, [r7, #16]
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	429a      	cmp	r2, r3
 8007696:	f040 8166 	bne.w	8007966 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	f003 0303 	and.w	r3, r3, #3
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d005      	beq.n	80076b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d130      	bne.n	8007714 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	005b      	lsls	r3, r3, #1
 80076bc:	2203      	movs	r2, #3
 80076be:	fa02 f303 	lsl.w	r3, r2, r3
 80076c2:	43db      	mvns	r3, r3
 80076c4:	69ba      	ldr	r2, [r7, #24]
 80076c6:	4013      	ands	r3, r2
 80076c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	68da      	ldr	r2, [r3, #12]
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	005b      	lsls	r3, r3, #1
 80076d2:	fa02 f303 	lsl.w	r3, r2, r3
 80076d6:	69ba      	ldr	r2, [r7, #24]
 80076d8:	4313      	orrs	r3, r2
 80076da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	69ba      	ldr	r2, [r7, #24]
 80076e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80076e8:	2201      	movs	r2, #1
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	fa02 f303 	lsl.w	r3, r2, r3
 80076f0:	43db      	mvns	r3, r3
 80076f2:	69ba      	ldr	r2, [r7, #24]
 80076f4:	4013      	ands	r3, r2
 80076f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	091b      	lsrs	r3, r3, #4
 80076fe:	f003 0201 	and.w	r2, r3, #1
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	fa02 f303 	lsl.w	r3, r2, r3
 8007708:	69ba      	ldr	r2, [r7, #24]
 800770a:	4313      	orrs	r3, r2
 800770c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	69ba      	ldr	r2, [r7, #24]
 8007712:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	f003 0303 	and.w	r3, r3, #3
 800771c:	2b03      	cmp	r3, #3
 800771e:	d017      	beq.n	8007750 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	005b      	lsls	r3, r3, #1
 800772a:	2203      	movs	r2, #3
 800772c:	fa02 f303 	lsl.w	r3, r2, r3
 8007730:	43db      	mvns	r3, r3
 8007732:	69ba      	ldr	r2, [r7, #24]
 8007734:	4013      	ands	r3, r2
 8007736:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	689a      	ldr	r2, [r3, #8]
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	005b      	lsls	r3, r3, #1
 8007740:	fa02 f303 	lsl.w	r3, r2, r3
 8007744:	69ba      	ldr	r2, [r7, #24]
 8007746:	4313      	orrs	r3, r2
 8007748:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	69ba      	ldr	r2, [r7, #24]
 800774e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	f003 0303 	and.w	r3, r3, #3
 8007758:	2b02      	cmp	r3, #2
 800775a:	d123      	bne.n	80077a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	08da      	lsrs	r2, r3, #3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	3208      	adds	r2, #8
 8007764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007768:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	f003 0307 	and.w	r3, r3, #7
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	220f      	movs	r2, #15
 8007774:	fa02 f303 	lsl.w	r3, r2, r3
 8007778:	43db      	mvns	r3, r3
 800777a:	69ba      	ldr	r2, [r7, #24]
 800777c:	4013      	ands	r3, r2
 800777e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	691a      	ldr	r2, [r3, #16]
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	f003 0307 	and.w	r3, r3, #7
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	fa02 f303 	lsl.w	r3, r2, r3
 8007790:	69ba      	ldr	r2, [r7, #24]
 8007792:	4313      	orrs	r3, r2
 8007794:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	08da      	lsrs	r2, r3, #3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	3208      	adds	r2, #8
 800779e:	69b9      	ldr	r1, [r7, #24]
 80077a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	005b      	lsls	r3, r3, #1
 80077ae:	2203      	movs	r2, #3
 80077b0:	fa02 f303 	lsl.w	r3, r2, r3
 80077b4:	43db      	mvns	r3, r3
 80077b6:	69ba      	ldr	r2, [r7, #24]
 80077b8:	4013      	ands	r3, r2
 80077ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	f003 0203 	and.w	r2, r3, #3
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	005b      	lsls	r3, r3, #1
 80077c8:	fa02 f303 	lsl.w	r3, r2, r3
 80077cc:	69ba      	ldr	r2, [r7, #24]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	69ba      	ldr	r2, [r7, #24]
 80077d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f000 80c0 	beq.w	8007966 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80077e6:	2300      	movs	r3, #0
 80077e8:	60fb      	str	r3, [r7, #12]
 80077ea:	4b66      	ldr	r3, [pc, #408]	; (8007984 <HAL_GPIO_Init+0x324>)
 80077ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ee:	4a65      	ldr	r2, [pc, #404]	; (8007984 <HAL_GPIO_Init+0x324>)
 80077f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80077f4:	6453      	str	r3, [r2, #68]	; 0x44
 80077f6:	4b63      	ldr	r3, [pc, #396]	; (8007984 <HAL_GPIO_Init+0x324>)
 80077f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077fe:	60fb      	str	r3, [r7, #12]
 8007800:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007802:	4a61      	ldr	r2, [pc, #388]	; (8007988 <HAL_GPIO_Init+0x328>)
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	089b      	lsrs	r3, r3, #2
 8007808:	3302      	adds	r3, #2
 800780a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800780e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	f003 0303 	and.w	r3, r3, #3
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	220f      	movs	r2, #15
 800781a:	fa02 f303 	lsl.w	r3, r2, r3
 800781e:	43db      	mvns	r3, r3
 8007820:	69ba      	ldr	r2, [r7, #24]
 8007822:	4013      	ands	r3, r2
 8007824:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4a58      	ldr	r2, [pc, #352]	; (800798c <HAL_GPIO_Init+0x32c>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d037      	beq.n	800789e <HAL_GPIO_Init+0x23e>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a57      	ldr	r2, [pc, #348]	; (8007990 <HAL_GPIO_Init+0x330>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d031      	beq.n	800789a <HAL_GPIO_Init+0x23a>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a56      	ldr	r2, [pc, #344]	; (8007994 <HAL_GPIO_Init+0x334>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d02b      	beq.n	8007896 <HAL_GPIO_Init+0x236>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4a55      	ldr	r2, [pc, #340]	; (8007998 <HAL_GPIO_Init+0x338>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d025      	beq.n	8007892 <HAL_GPIO_Init+0x232>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4a54      	ldr	r2, [pc, #336]	; (800799c <HAL_GPIO_Init+0x33c>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d01f      	beq.n	800788e <HAL_GPIO_Init+0x22e>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a53      	ldr	r2, [pc, #332]	; (80079a0 <HAL_GPIO_Init+0x340>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d019      	beq.n	800788a <HAL_GPIO_Init+0x22a>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a52      	ldr	r2, [pc, #328]	; (80079a4 <HAL_GPIO_Init+0x344>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d013      	beq.n	8007886 <HAL_GPIO_Init+0x226>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a51      	ldr	r2, [pc, #324]	; (80079a8 <HAL_GPIO_Init+0x348>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d00d      	beq.n	8007882 <HAL_GPIO_Init+0x222>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a50      	ldr	r2, [pc, #320]	; (80079ac <HAL_GPIO_Init+0x34c>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d007      	beq.n	800787e <HAL_GPIO_Init+0x21e>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a4f      	ldr	r2, [pc, #316]	; (80079b0 <HAL_GPIO_Init+0x350>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d101      	bne.n	800787a <HAL_GPIO_Init+0x21a>
 8007876:	2309      	movs	r3, #9
 8007878:	e012      	b.n	80078a0 <HAL_GPIO_Init+0x240>
 800787a:	230a      	movs	r3, #10
 800787c:	e010      	b.n	80078a0 <HAL_GPIO_Init+0x240>
 800787e:	2308      	movs	r3, #8
 8007880:	e00e      	b.n	80078a0 <HAL_GPIO_Init+0x240>
 8007882:	2307      	movs	r3, #7
 8007884:	e00c      	b.n	80078a0 <HAL_GPIO_Init+0x240>
 8007886:	2306      	movs	r3, #6
 8007888:	e00a      	b.n	80078a0 <HAL_GPIO_Init+0x240>
 800788a:	2305      	movs	r3, #5
 800788c:	e008      	b.n	80078a0 <HAL_GPIO_Init+0x240>
 800788e:	2304      	movs	r3, #4
 8007890:	e006      	b.n	80078a0 <HAL_GPIO_Init+0x240>
 8007892:	2303      	movs	r3, #3
 8007894:	e004      	b.n	80078a0 <HAL_GPIO_Init+0x240>
 8007896:	2302      	movs	r3, #2
 8007898:	e002      	b.n	80078a0 <HAL_GPIO_Init+0x240>
 800789a:	2301      	movs	r3, #1
 800789c:	e000      	b.n	80078a0 <HAL_GPIO_Init+0x240>
 800789e:	2300      	movs	r3, #0
 80078a0:	69fa      	ldr	r2, [r7, #28]
 80078a2:	f002 0203 	and.w	r2, r2, #3
 80078a6:	0092      	lsls	r2, r2, #2
 80078a8:	4093      	lsls	r3, r2
 80078aa:	69ba      	ldr	r2, [r7, #24]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80078b0:	4935      	ldr	r1, [pc, #212]	; (8007988 <HAL_GPIO_Init+0x328>)
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	089b      	lsrs	r3, r3, #2
 80078b6:	3302      	adds	r3, #2
 80078b8:	69ba      	ldr	r2, [r7, #24]
 80078ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80078be:	4b3d      	ldr	r3, [pc, #244]	; (80079b4 <HAL_GPIO_Init+0x354>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	43db      	mvns	r3, r3
 80078c8:	69ba      	ldr	r2, [r7, #24]
 80078ca:	4013      	ands	r3, r2
 80078cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d003      	beq.n	80078e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80078da:	69ba      	ldr	r2, [r7, #24]
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	4313      	orrs	r3, r2
 80078e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80078e2:	4a34      	ldr	r2, [pc, #208]	; (80079b4 <HAL_GPIO_Init+0x354>)
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80078e8:	4b32      	ldr	r3, [pc, #200]	; (80079b4 <HAL_GPIO_Init+0x354>)
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	43db      	mvns	r3, r3
 80078f2:	69ba      	ldr	r2, [r7, #24]
 80078f4:	4013      	ands	r3, r2
 80078f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007900:	2b00      	cmp	r3, #0
 8007902:	d003      	beq.n	800790c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007904:	69ba      	ldr	r2, [r7, #24]
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	4313      	orrs	r3, r2
 800790a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800790c:	4a29      	ldr	r2, [pc, #164]	; (80079b4 <HAL_GPIO_Init+0x354>)
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007912:	4b28      	ldr	r3, [pc, #160]	; (80079b4 <HAL_GPIO_Init+0x354>)
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	43db      	mvns	r3, r3
 800791c:	69ba      	ldr	r2, [r7, #24]
 800791e:	4013      	ands	r3, r2
 8007920:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800792a:	2b00      	cmp	r3, #0
 800792c:	d003      	beq.n	8007936 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800792e:	69ba      	ldr	r2, [r7, #24]
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	4313      	orrs	r3, r2
 8007934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007936:	4a1f      	ldr	r2, [pc, #124]	; (80079b4 <HAL_GPIO_Init+0x354>)
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800793c:	4b1d      	ldr	r3, [pc, #116]	; (80079b4 <HAL_GPIO_Init+0x354>)
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	43db      	mvns	r3, r3
 8007946:	69ba      	ldr	r2, [r7, #24]
 8007948:	4013      	ands	r3, r2
 800794a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007954:	2b00      	cmp	r3, #0
 8007956:	d003      	beq.n	8007960 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007958:	69ba      	ldr	r2, [r7, #24]
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	4313      	orrs	r3, r2
 800795e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007960:	4a14      	ldr	r2, [pc, #80]	; (80079b4 <HAL_GPIO_Init+0x354>)
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	3301      	adds	r3, #1
 800796a:	61fb      	str	r3, [r7, #28]
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	2b0f      	cmp	r3, #15
 8007970:	f67f ae84 	bls.w	800767c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007974:	bf00      	nop
 8007976:	bf00      	nop
 8007978:	3724      	adds	r7, #36	; 0x24
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	40023800 	.word	0x40023800
 8007988:	40013800 	.word	0x40013800
 800798c:	40020000 	.word	0x40020000
 8007990:	40020400 	.word	0x40020400
 8007994:	40020800 	.word	0x40020800
 8007998:	40020c00 	.word	0x40020c00
 800799c:	40021000 	.word	0x40021000
 80079a0:	40021400 	.word	0x40021400
 80079a4:	40021800 	.word	0x40021800
 80079a8:	40021c00 	.word	0x40021c00
 80079ac:	40022000 	.word	0x40022000
 80079b0:	40022400 	.word	0x40022400
 80079b4:	40013c00 	.word	0x40013c00

080079b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	460b      	mov	r3, r1
 80079c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	691a      	ldr	r2, [r3, #16]
 80079c8:	887b      	ldrh	r3, [r7, #2]
 80079ca:	4013      	ands	r3, r2
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d002      	beq.n	80079d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80079d0:	2301      	movs	r3, #1
 80079d2:	73fb      	strb	r3, [r7, #15]
 80079d4:	e001      	b.n	80079da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80079d6:	2300      	movs	r3, #0
 80079d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80079da:	7bfb      	ldrb	r3, [r7, #15]
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3714      	adds	r7, #20
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	460b      	mov	r3, r1
 80079f2:	807b      	strh	r3, [r7, #2]
 80079f4:	4613      	mov	r3, r2
 80079f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80079f8:	787b      	ldrb	r3, [r7, #1]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d003      	beq.n	8007a06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80079fe:	887a      	ldrh	r2, [r7, #2]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007a04:	e003      	b.n	8007a0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007a06:	887b      	ldrh	r3, [r7, #2]
 8007a08:	041a      	lsls	r2, r3, #16
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	619a      	str	r2, [r3, #24]
}
 8007a0e:	bf00      	nop
 8007a10:	370c      	adds	r7, #12
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
	...

08007a1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	4603      	mov	r3, r0
 8007a24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007a26:	4b08      	ldr	r3, [pc, #32]	; (8007a48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007a28:	695a      	ldr	r2, [r3, #20]
 8007a2a:	88fb      	ldrh	r3, [r7, #6]
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d006      	beq.n	8007a40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007a32:	4a05      	ldr	r2, [pc, #20]	; (8007a48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007a34:	88fb      	ldrh	r3, [r7, #6]
 8007a36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007a38:	88fb      	ldrh	r3, [r7, #6]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f7fb ff4c 	bl	80038d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8007a40:	bf00      	nop
 8007a42:	3708      	adds	r7, #8
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	40013c00 	.word	0x40013c00

08007a4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d101      	bne.n	8007a5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e12b      	b.n	8007cb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d106      	bne.n	8007a78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f7fb f806 	bl	8002a84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2224      	movs	r2, #36	; 0x24
 8007a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f022 0201 	bic.w	r2, r2, #1
 8007a8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007aae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007ab0:	f002 fe48 	bl	800a744 <HAL_RCC_GetPCLK1Freq>
 8007ab4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	4a81      	ldr	r2, [pc, #516]	; (8007cc0 <HAL_I2C_Init+0x274>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d807      	bhi.n	8007ad0 <HAL_I2C_Init+0x84>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	4a80      	ldr	r2, [pc, #512]	; (8007cc4 <HAL_I2C_Init+0x278>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	bf94      	ite	ls
 8007ac8:	2301      	movls	r3, #1
 8007aca:	2300      	movhi	r3, #0
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	e006      	b.n	8007ade <HAL_I2C_Init+0x92>
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	4a7d      	ldr	r2, [pc, #500]	; (8007cc8 <HAL_I2C_Init+0x27c>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	bf94      	ite	ls
 8007ad8:	2301      	movls	r3, #1
 8007ada:	2300      	movhi	r3, #0
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d001      	beq.n	8007ae6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e0e7      	b.n	8007cb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	4a78      	ldr	r2, [pc, #480]	; (8007ccc <HAL_I2C_Init+0x280>)
 8007aea:	fba2 2303 	umull	r2, r3, r2, r3
 8007aee:	0c9b      	lsrs	r3, r3, #18
 8007af0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68ba      	ldr	r2, [r7, #8]
 8007b02:	430a      	orrs	r2, r1
 8007b04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	6a1b      	ldr	r3, [r3, #32]
 8007b0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	4a6a      	ldr	r2, [pc, #424]	; (8007cc0 <HAL_I2C_Init+0x274>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d802      	bhi.n	8007b20 <HAL_I2C_Init+0xd4>
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	e009      	b.n	8007b34 <HAL_I2C_Init+0xe8>
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007b26:	fb02 f303 	mul.w	r3, r2, r3
 8007b2a:	4a69      	ldr	r2, [pc, #420]	; (8007cd0 <HAL_I2C_Init+0x284>)
 8007b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b30:	099b      	lsrs	r3, r3, #6
 8007b32:	3301      	adds	r3, #1
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	6812      	ldr	r2, [r2, #0]
 8007b38:	430b      	orrs	r3, r1
 8007b3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	69db      	ldr	r3, [r3, #28]
 8007b42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007b46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	495c      	ldr	r1, [pc, #368]	; (8007cc0 <HAL_I2C_Init+0x274>)
 8007b50:	428b      	cmp	r3, r1
 8007b52:	d819      	bhi.n	8007b88 <HAL_I2C_Init+0x13c>
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	1e59      	subs	r1, r3, #1
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	005b      	lsls	r3, r3, #1
 8007b5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007b62:	1c59      	adds	r1, r3, #1
 8007b64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007b68:	400b      	ands	r3, r1
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00a      	beq.n	8007b84 <HAL_I2C_Init+0x138>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	1e59      	subs	r1, r3, #1
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	005b      	lsls	r3, r3, #1
 8007b78:	fbb1 f3f3 	udiv	r3, r1, r3
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b82:	e051      	b.n	8007c28 <HAL_I2C_Init+0x1dc>
 8007b84:	2304      	movs	r3, #4
 8007b86:	e04f      	b.n	8007c28 <HAL_I2C_Init+0x1dc>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d111      	bne.n	8007bb4 <HAL_I2C_Init+0x168>
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	1e58      	subs	r0, r3, #1
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6859      	ldr	r1, [r3, #4]
 8007b98:	460b      	mov	r3, r1
 8007b9a:	005b      	lsls	r3, r3, #1
 8007b9c:	440b      	add	r3, r1
 8007b9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	bf0c      	ite	eq
 8007bac:	2301      	moveq	r3, #1
 8007bae:	2300      	movne	r3, #0
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	e012      	b.n	8007bda <HAL_I2C_Init+0x18e>
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	1e58      	subs	r0, r3, #1
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6859      	ldr	r1, [r3, #4]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	440b      	add	r3, r1
 8007bc2:	0099      	lsls	r1, r3, #2
 8007bc4:	440b      	add	r3, r1
 8007bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8007bca:	3301      	adds	r3, #1
 8007bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	bf0c      	ite	eq
 8007bd4:	2301      	moveq	r3, #1
 8007bd6:	2300      	movne	r3, #0
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d001      	beq.n	8007be2 <HAL_I2C_Init+0x196>
 8007bde:	2301      	movs	r3, #1
 8007be0:	e022      	b.n	8007c28 <HAL_I2C_Init+0x1dc>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d10e      	bne.n	8007c08 <HAL_I2C_Init+0x1bc>
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	1e58      	subs	r0, r3, #1
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6859      	ldr	r1, [r3, #4]
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	005b      	lsls	r3, r3, #1
 8007bf6:	440b      	add	r3, r1
 8007bf8:	fbb0 f3f3 	udiv	r3, r0, r3
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c06:	e00f      	b.n	8007c28 <HAL_I2C_Init+0x1dc>
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	1e58      	subs	r0, r3, #1
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6859      	ldr	r1, [r3, #4]
 8007c10:	460b      	mov	r3, r1
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	440b      	add	r3, r1
 8007c16:	0099      	lsls	r1, r3, #2
 8007c18:	440b      	add	r3, r1
 8007c1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c1e:	3301      	adds	r3, #1
 8007c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c28:	6879      	ldr	r1, [r7, #4]
 8007c2a:	6809      	ldr	r1, [r1, #0]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	69da      	ldr	r2, [r3, #28]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a1b      	ldr	r3, [r3, #32]
 8007c42:	431a      	orrs	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	430a      	orrs	r2, r1
 8007c4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007c56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	6911      	ldr	r1, [r2, #16]
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	68d2      	ldr	r2, [r2, #12]
 8007c62:	4311      	orrs	r1, r2
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	6812      	ldr	r2, [r2, #0]
 8007c68:	430b      	orrs	r3, r1
 8007c6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	695a      	ldr	r2, [r3, #20]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	699b      	ldr	r3, [r3, #24]
 8007c7e:	431a      	orrs	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	430a      	orrs	r2, r1
 8007c86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f042 0201 	orr.w	r2, r2, #1
 8007c96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2220      	movs	r2, #32
 8007ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	000186a0 	.word	0x000186a0
 8007cc4:	001e847f 	.word	0x001e847f
 8007cc8:	003d08ff 	.word	0x003d08ff
 8007ccc:	431bde83 	.word	0x431bde83
 8007cd0:	10624dd3 	.word	0x10624dd3

08007cd4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b088      	sub	sp, #32
 8007cd8:	af02      	add	r7, sp, #8
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	4608      	mov	r0, r1
 8007cde:	4611      	mov	r1, r2
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	817b      	strh	r3, [r7, #10]
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	813b      	strh	r3, [r7, #8]
 8007cea:	4613      	mov	r3, r2
 8007cec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007cee:	f7ff f901 	bl	8006ef4 <HAL_GetTick>
 8007cf2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	2b20      	cmp	r3, #32
 8007cfe:	f040 80d9 	bne.w	8007eb4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	9300      	str	r3, [sp, #0]
 8007d06:	2319      	movs	r3, #25
 8007d08:	2201      	movs	r2, #1
 8007d0a:	496d      	ldr	r1, [pc, #436]	; (8007ec0 <HAL_I2C_Mem_Write+0x1ec>)
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f000 fcb5 	bl	800867c <I2C_WaitOnFlagUntilTimeout>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d001      	beq.n	8007d1c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007d18:	2302      	movs	r3, #2
 8007d1a:	e0cc      	b.n	8007eb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d101      	bne.n	8007d2a <HAL_I2C_Mem_Write+0x56>
 8007d26:	2302      	movs	r3, #2
 8007d28:	e0c5      	b.n	8007eb6 <HAL_I2C_Mem_Write+0x1e2>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 0301 	and.w	r3, r3, #1
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d007      	beq.n	8007d50 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f042 0201 	orr.w	r2, r2, #1
 8007d4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2221      	movs	r2, #33	; 0x21
 8007d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2240      	movs	r2, #64	; 0x40
 8007d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2200      	movs	r2, #0
 8007d74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6a3a      	ldr	r2, [r7, #32]
 8007d7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007d80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	4a4d      	ldr	r2, [pc, #308]	; (8007ec4 <HAL_I2C_Mem_Write+0x1f0>)
 8007d90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007d92:	88f8      	ldrh	r0, [r7, #6]
 8007d94:	893a      	ldrh	r2, [r7, #8]
 8007d96:	8979      	ldrh	r1, [r7, #10]
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	9301      	str	r3, [sp, #4]
 8007d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9e:	9300      	str	r3, [sp, #0]
 8007da0:	4603      	mov	r3, r0
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f000 faec 	bl	8008380 <I2C_RequestMemoryWrite>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d052      	beq.n	8007e54 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	e081      	b.n	8007eb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007db2:	697a      	ldr	r2, [r7, #20]
 8007db4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f000 fd36 	bl	8008828 <I2C_WaitOnTXEFlagUntilTimeout>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00d      	beq.n	8007dde <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc6:	2b04      	cmp	r3, #4
 8007dc8:	d107      	bne.n	8007dda <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dd8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e06b      	b.n	8007eb6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de2:	781a      	ldrb	r2, [r3, #0]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dee:	1c5a      	adds	r2, r3, #1
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	3b01      	subs	r3, #1
 8007e08:	b29a      	uxth	r2, r3
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	695b      	ldr	r3, [r3, #20]
 8007e14:	f003 0304 	and.w	r3, r3, #4
 8007e18:	2b04      	cmp	r3, #4
 8007e1a:	d11b      	bne.n	8007e54 <HAL_I2C_Mem_Write+0x180>
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d017      	beq.n	8007e54 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e28:	781a      	ldrb	r2, [r3, #0]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e34:	1c5a      	adds	r2, r3, #1
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e3e:	3b01      	subs	r3, #1
 8007e40:	b29a      	uxth	r2, r3
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d1aa      	bne.n	8007db2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e5c:	697a      	ldr	r2, [r7, #20]
 8007e5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e60:	68f8      	ldr	r0, [r7, #12]
 8007e62:	f000 fd22 	bl	80088aa <I2C_WaitOnBTFFlagUntilTimeout>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d00d      	beq.n	8007e88 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e70:	2b04      	cmp	r3, #4
 8007e72:	d107      	bne.n	8007e84 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e82:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	e016      	b.n	8007eb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2220      	movs	r2, #32
 8007e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	e000      	b.n	8007eb6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007eb4:	2302      	movs	r3, #2
  }
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3718      	adds	r7, #24
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	00100002 	.word	0x00100002
 8007ec4:	ffff0000 	.word	0xffff0000

08007ec8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b08c      	sub	sp, #48	; 0x30
 8007ecc:	af02      	add	r7, sp, #8
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	4608      	mov	r0, r1
 8007ed2:	4611      	mov	r1, r2
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	817b      	strh	r3, [r7, #10]
 8007eda:	460b      	mov	r3, r1
 8007edc:	813b      	strh	r3, [r7, #8]
 8007ede:	4613      	mov	r3, r2
 8007ee0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007ee2:	f7ff f807 	bl	8006ef4 <HAL_GetTick>
 8007ee6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	2b20      	cmp	r3, #32
 8007ef2:	f040 8208 	bne.w	8008306 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	2319      	movs	r3, #25
 8007efc:	2201      	movs	r2, #1
 8007efe:	497b      	ldr	r1, [pc, #492]	; (80080ec <HAL_I2C_Mem_Read+0x224>)
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f000 fbbb 	bl	800867c <I2C_WaitOnFlagUntilTimeout>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d001      	beq.n	8007f10 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007f0c:	2302      	movs	r3, #2
 8007f0e:	e1fb      	b.n	8008308 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d101      	bne.n	8007f1e <HAL_I2C_Mem_Read+0x56>
 8007f1a:	2302      	movs	r3, #2
 8007f1c:	e1f4      	b.n	8008308 <HAL_I2C_Mem_Read+0x440>
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2201      	movs	r2, #1
 8007f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f003 0301 	and.w	r3, r3, #1
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d007      	beq.n	8007f44 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f042 0201 	orr.w	r2, r2, #1
 8007f42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2222      	movs	r2, #34	; 0x22
 8007f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2240      	movs	r2, #64	; 0x40
 8007f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2200      	movs	r2, #0
 8007f68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007f74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	4a5b      	ldr	r2, [pc, #364]	; (80080f0 <HAL_I2C_Mem_Read+0x228>)
 8007f84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007f86:	88f8      	ldrh	r0, [r7, #6]
 8007f88:	893a      	ldrh	r2, [r7, #8]
 8007f8a:	8979      	ldrh	r1, [r7, #10]
 8007f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8e:	9301      	str	r3, [sp, #4]
 8007f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	4603      	mov	r3, r0
 8007f96:	68f8      	ldr	r0, [r7, #12]
 8007f98:	f000 fa88 	bl	80084ac <I2C_RequestMemoryRead>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d001      	beq.n	8007fa6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e1b0      	b.n	8008308 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d113      	bne.n	8007fd6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fae:	2300      	movs	r3, #0
 8007fb0:	623b      	str	r3, [r7, #32]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	695b      	ldr	r3, [r3, #20]
 8007fb8:	623b      	str	r3, [r7, #32]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	699b      	ldr	r3, [r3, #24]
 8007fc0:	623b      	str	r3, [r7, #32]
 8007fc2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fd2:	601a      	str	r2, [r3, #0]
 8007fd4:	e184      	b.n	80082e0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d11b      	bne.n	8008016 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fee:	2300      	movs	r3, #0
 8007ff0:	61fb      	str	r3, [r7, #28]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	695b      	ldr	r3, [r3, #20]
 8007ff8:	61fb      	str	r3, [r7, #28]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	699b      	ldr	r3, [r3, #24]
 8008000:	61fb      	str	r3, [r7, #28]
 8008002:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008012:	601a      	str	r2, [r3, #0]
 8008014:	e164      	b.n	80082e0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800801a:	2b02      	cmp	r3, #2
 800801c:	d11b      	bne.n	8008056 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800802c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800803c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800803e:	2300      	movs	r3, #0
 8008040:	61bb      	str	r3, [r7, #24]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	695b      	ldr	r3, [r3, #20]
 8008048:	61bb      	str	r3, [r7, #24]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	699b      	ldr	r3, [r3, #24]
 8008050:	61bb      	str	r3, [r7, #24]
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	e144      	b.n	80082e0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008056:	2300      	movs	r3, #0
 8008058:	617b      	str	r3, [r7, #20]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	695b      	ldr	r3, [r3, #20]
 8008060:	617b      	str	r3, [r7, #20]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	699b      	ldr	r3, [r3, #24]
 8008068:	617b      	str	r3, [r7, #20]
 800806a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800806c:	e138      	b.n	80082e0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008072:	2b03      	cmp	r3, #3
 8008074:	f200 80f1 	bhi.w	800825a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800807c:	2b01      	cmp	r3, #1
 800807e:	d123      	bne.n	80080c8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008082:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f000 fc51 	bl	800892c <I2C_WaitOnRXNEFlagUntilTimeout>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d001      	beq.n	8008094 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e139      	b.n	8008308 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	691a      	ldr	r2, [r3, #16]
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809e:	b2d2      	uxtb	r2, r2
 80080a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a6:	1c5a      	adds	r2, r3, #1
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080b0:	3b01      	subs	r3, #1
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080bc:	b29b      	uxth	r3, r3
 80080be:	3b01      	subs	r3, #1
 80080c0:	b29a      	uxth	r2, r3
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80080c6:	e10b      	b.n	80082e0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d14e      	bne.n	800816e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80080d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d2:	9300      	str	r3, [sp, #0]
 80080d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d6:	2200      	movs	r2, #0
 80080d8:	4906      	ldr	r1, [pc, #24]	; (80080f4 <HAL_I2C_Mem_Read+0x22c>)
 80080da:	68f8      	ldr	r0, [r7, #12]
 80080dc:	f000 face 	bl	800867c <I2C_WaitOnFlagUntilTimeout>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d008      	beq.n	80080f8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	e10e      	b.n	8008308 <HAL_I2C_Mem_Read+0x440>
 80080ea:	bf00      	nop
 80080ec:	00100002 	.word	0x00100002
 80080f0:	ffff0000 	.word	0xffff0000
 80080f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008106:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	691a      	ldr	r2, [r3, #16]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008112:	b2d2      	uxtb	r2, r2
 8008114:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811a:	1c5a      	adds	r2, r3, #1
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008124:	3b01      	subs	r3, #1
 8008126:	b29a      	uxth	r2, r3
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008130:	b29b      	uxth	r3, r3
 8008132:	3b01      	subs	r3, #1
 8008134:	b29a      	uxth	r2, r3
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	691a      	ldr	r2, [r3, #16]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008144:	b2d2      	uxtb	r2, r2
 8008146:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814c:	1c5a      	adds	r2, r3, #1
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008156:	3b01      	subs	r3, #1
 8008158:	b29a      	uxth	r2, r3
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008162:	b29b      	uxth	r3, r3
 8008164:	3b01      	subs	r3, #1
 8008166:	b29a      	uxth	r2, r3
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800816c:	e0b8      	b.n	80082e0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800816e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008170:	9300      	str	r3, [sp, #0]
 8008172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008174:	2200      	movs	r2, #0
 8008176:	4966      	ldr	r1, [pc, #408]	; (8008310 <HAL_I2C_Mem_Read+0x448>)
 8008178:	68f8      	ldr	r0, [r7, #12]
 800817a:	f000 fa7f 	bl	800867c <I2C_WaitOnFlagUntilTimeout>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d001      	beq.n	8008188 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	e0bf      	b.n	8008308 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008196:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	691a      	ldr	r2, [r3, #16]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a2:	b2d2      	uxtb	r2, r2
 80081a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081aa:	1c5a      	adds	r2, r3, #1
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081b4:	3b01      	subs	r3, #1
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	3b01      	subs	r3, #1
 80081c4:	b29a      	uxth	r2, r3
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80081ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081cc:	9300      	str	r3, [sp, #0]
 80081ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d0:	2200      	movs	r2, #0
 80081d2:	494f      	ldr	r1, [pc, #316]	; (8008310 <HAL_I2C_Mem_Read+0x448>)
 80081d4:	68f8      	ldr	r0, [r7, #12]
 80081d6:	f000 fa51 	bl	800867c <I2C_WaitOnFlagUntilTimeout>
 80081da:	4603      	mov	r3, r0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d001      	beq.n	80081e4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	e091      	b.n	8008308 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	691a      	ldr	r2, [r3, #16]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fe:	b2d2      	uxtb	r2, r2
 8008200:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008206:	1c5a      	adds	r2, r3, #1
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008210:	3b01      	subs	r3, #1
 8008212:	b29a      	uxth	r2, r3
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800821c:	b29b      	uxth	r3, r3
 800821e:	3b01      	subs	r3, #1
 8008220:	b29a      	uxth	r2, r3
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	691a      	ldr	r2, [r3, #16]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008230:	b2d2      	uxtb	r2, r2
 8008232:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008238:	1c5a      	adds	r2, r3, #1
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008242:	3b01      	subs	r3, #1
 8008244:	b29a      	uxth	r2, r3
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800824e:	b29b      	uxth	r3, r3
 8008250:	3b01      	subs	r3, #1
 8008252:	b29a      	uxth	r2, r3
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008258:	e042      	b.n	80082e0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800825a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800825c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f000 fb64 	bl	800892c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d001      	beq.n	800826e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	e04c      	b.n	8008308 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	691a      	ldr	r2, [r3, #16]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008278:	b2d2      	uxtb	r2, r2
 800827a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008280:	1c5a      	adds	r2, r3, #1
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800828a:	3b01      	subs	r3, #1
 800828c:	b29a      	uxth	r2, r3
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008296:	b29b      	uxth	r3, r3
 8008298:	3b01      	subs	r3, #1
 800829a:	b29a      	uxth	r2, r3
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	695b      	ldr	r3, [r3, #20]
 80082a6:	f003 0304 	and.w	r3, r3, #4
 80082aa:	2b04      	cmp	r3, #4
 80082ac:	d118      	bne.n	80082e0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	691a      	ldr	r2, [r3, #16]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b8:	b2d2      	uxtb	r2, r2
 80082ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c0:	1c5a      	adds	r2, r3, #1
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082ca:	3b01      	subs	r3, #1
 80082cc:	b29a      	uxth	r2, r3
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	3b01      	subs	r3, #1
 80082da:	b29a      	uxth	r2, r3
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	f47f aec2 	bne.w	800806e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2220      	movs	r2, #32
 80082ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008302:	2300      	movs	r3, #0
 8008304:	e000      	b.n	8008308 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008306:	2302      	movs	r3, #2
  }
}
 8008308:	4618      	mov	r0, r3
 800830a:	3728      	adds	r7, #40	; 0x28
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	00010004 	.word	0x00010004

08008314 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008322:	b2db      	uxtb	r3, r3
 8008324:	2b20      	cmp	r3, #32
 8008326:	d124      	bne.n	8008372 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2228      	movs	r2, #40	; 0x28
 800832c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f003 0301 	and.w	r3, r3, #1
 800833a:	2b01      	cmp	r3, #1
 800833c:	d007      	beq.n	800834e <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f042 0201 	orr.w	r2, r2, #1
 800834c:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800835c:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	685a      	ldr	r2, [r3, #4]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800836c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800836e:	2300      	movs	r3, #0
 8008370:	e000      	b.n	8008374 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8008372:	2302      	movs	r3, #2
  }
}
 8008374:	4618      	mov	r0, r3
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b088      	sub	sp, #32
 8008384:	af02      	add	r7, sp, #8
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	4608      	mov	r0, r1
 800838a:	4611      	mov	r1, r2
 800838c:	461a      	mov	r2, r3
 800838e:	4603      	mov	r3, r0
 8008390:	817b      	strh	r3, [r7, #10]
 8008392:	460b      	mov	r3, r1
 8008394:	813b      	strh	r3, [r7, #8]
 8008396:	4613      	mov	r3, r2
 8008398:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80083aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ac:	9300      	str	r3, [sp, #0]
 80083ae:	6a3b      	ldr	r3, [r7, #32]
 80083b0:	2200      	movs	r2, #0
 80083b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80083b6:	68f8      	ldr	r0, [r7, #12]
 80083b8:	f000 f960 	bl	800867c <I2C_WaitOnFlagUntilTimeout>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d00d      	beq.n	80083de <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083d0:	d103      	bne.n	80083da <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80083da:	2303      	movs	r3, #3
 80083dc:	e05f      	b.n	800849e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80083de:	897b      	ldrh	r3, [r7, #10]
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	461a      	mov	r2, r3
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80083ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80083ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f0:	6a3a      	ldr	r2, [r7, #32]
 80083f2:	492d      	ldr	r1, [pc, #180]	; (80084a8 <I2C_RequestMemoryWrite+0x128>)
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	f000 f998 	bl	800872a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d001      	beq.n	8008404 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	e04c      	b.n	800849e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008404:	2300      	movs	r3, #0
 8008406:	617b      	str	r3, [r7, #20]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	695b      	ldr	r3, [r3, #20]
 800840e:	617b      	str	r3, [r7, #20]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	699b      	ldr	r3, [r3, #24]
 8008416:	617b      	str	r3, [r7, #20]
 8008418:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800841a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800841c:	6a39      	ldr	r1, [r7, #32]
 800841e:	68f8      	ldr	r0, [r7, #12]
 8008420:	f000 fa02 	bl	8008828 <I2C_WaitOnTXEFlagUntilTimeout>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00d      	beq.n	8008446 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800842e:	2b04      	cmp	r3, #4
 8008430:	d107      	bne.n	8008442 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008440:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	e02b      	b.n	800849e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008446:	88fb      	ldrh	r3, [r7, #6]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d105      	bne.n	8008458 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800844c:	893b      	ldrh	r3, [r7, #8]
 800844e:	b2da      	uxtb	r2, r3
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	611a      	str	r2, [r3, #16]
 8008456:	e021      	b.n	800849c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008458:	893b      	ldrh	r3, [r7, #8]
 800845a:	0a1b      	lsrs	r3, r3, #8
 800845c:	b29b      	uxth	r3, r3
 800845e:	b2da      	uxtb	r2, r3
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008468:	6a39      	ldr	r1, [r7, #32]
 800846a:	68f8      	ldr	r0, [r7, #12]
 800846c:	f000 f9dc 	bl	8008828 <I2C_WaitOnTXEFlagUntilTimeout>
 8008470:	4603      	mov	r3, r0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00d      	beq.n	8008492 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847a:	2b04      	cmp	r3, #4
 800847c:	d107      	bne.n	800848e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800848c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	e005      	b.n	800849e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008492:	893b      	ldrh	r3, [r7, #8]
 8008494:	b2da      	uxtb	r2, r3
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3718      	adds	r7, #24
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	00010002 	.word	0x00010002

080084ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b088      	sub	sp, #32
 80084b0:	af02      	add	r7, sp, #8
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	4608      	mov	r0, r1
 80084b6:	4611      	mov	r1, r2
 80084b8:	461a      	mov	r2, r3
 80084ba:	4603      	mov	r3, r0
 80084bc:	817b      	strh	r3, [r7, #10]
 80084be:	460b      	mov	r3, r1
 80084c0:	813b      	strh	r3, [r7, #8]
 80084c2:	4613      	mov	r3, r2
 80084c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80084d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80084e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e8:	9300      	str	r3, [sp, #0]
 80084ea:	6a3b      	ldr	r3, [r7, #32]
 80084ec:	2200      	movs	r2, #0
 80084ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80084f2:	68f8      	ldr	r0, [r7, #12]
 80084f4:	f000 f8c2 	bl	800867c <I2C_WaitOnFlagUntilTimeout>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00d      	beq.n	800851a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008508:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800850c:	d103      	bne.n	8008516 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008514:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008516:	2303      	movs	r3, #3
 8008518:	e0aa      	b.n	8008670 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800851a:	897b      	ldrh	r3, [r7, #10]
 800851c:	b2db      	uxtb	r3, r3
 800851e:	461a      	mov	r2, r3
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008528:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800852a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852c:	6a3a      	ldr	r2, [r7, #32]
 800852e:	4952      	ldr	r1, [pc, #328]	; (8008678 <I2C_RequestMemoryRead+0x1cc>)
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	f000 f8fa 	bl	800872a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d001      	beq.n	8008540 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	e097      	b.n	8008670 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008540:	2300      	movs	r3, #0
 8008542:	617b      	str	r3, [r7, #20]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	695b      	ldr	r3, [r3, #20]
 800854a:	617b      	str	r3, [r7, #20]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	699b      	ldr	r3, [r3, #24]
 8008552:	617b      	str	r3, [r7, #20]
 8008554:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008558:	6a39      	ldr	r1, [r7, #32]
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	f000 f964 	bl	8008828 <I2C_WaitOnTXEFlagUntilTimeout>
 8008560:	4603      	mov	r3, r0
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00d      	beq.n	8008582 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856a:	2b04      	cmp	r3, #4
 800856c:	d107      	bne.n	800857e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800857c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e076      	b.n	8008670 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008582:	88fb      	ldrh	r3, [r7, #6]
 8008584:	2b01      	cmp	r3, #1
 8008586:	d105      	bne.n	8008594 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008588:	893b      	ldrh	r3, [r7, #8]
 800858a:	b2da      	uxtb	r2, r3
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	611a      	str	r2, [r3, #16]
 8008592:	e021      	b.n	80085d8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008594:	893b      	ldrh	r3, [r7, #8]
 8008596:	0a1b      	lsrs	r3, r3, #8
 8008598:	b29b      	uxth	r3, r3
 800859a:	b2da      	uxtb	r2, r3
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085a4:	6a39      	ldr	r1, [r7, #32]
 80085a6:	68f8      	ldr	r0, [r7, #12]
 80085a8:	f000 f93e 	bl	8008828 <I2C_WaitOnTXEFlagUntilTimeout>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d00d      	beq.n	80085ce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b6:	2b04      	cmp	r3, #4
 80085b8:	d107      	bne.n	80085ca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80085ca:	2301      	movs	r3, #1
 80085cc:	e050      	b.n	8008670 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80085ce:	893b      	ldrh	r3, [r7, #8]
 80085d0:	b2da      	uxtb	r2, r3
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085da:	6a39      	ldr	r1, [r7, #32]
 80085dc:	68f8      	ldr	r0, [r7, #12]
 80085de:	f000 f923 	bl	8008828 <I2C_WaitOnTXEFlagUntilTimeout>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00d      	beq.n	8008604 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ec:	2b04      	cmp	r3, #4
 80085ee:	d107      	bne.n	8008600 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085fe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	e035      	b.n	8008670 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008612:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008616:	9300      	str	r3, [sp, #0]
 8008618:	6a3b      	ldr	r3, [r7, #32]
 800861a:	2200      	movs	r2, #0
 800861c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f000 f82b 	bl	800867c <I2C_WaitOnFlagUntilTimeout>
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00d      	beq.n	8008648 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800863a:	d103      	bne.n	8008644 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008642:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008644:	2303      	movs	r3, #3
 8008646:	e013      	b.n	8008670 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008648:	897b      	ldrh	r3, [r7, #10]
 800864a:	b2db      	uxtb	r3, r3
 800864c:	f043 0301 	orr.w	r3, r3, #1
 8008650:	b2da      	uxtb	r2, r3
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865a:	6a3a      	ldr	r2, [r7, #32]
 800865c:	4906      	ldr	r1, [pc, #24]	; (8008678 <I2C_RequestMemoryRead+0x1cc>)
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f000 f863 	bl	800872a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d001      	beq.n	800866e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e000      	b.n	8008670 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	3718      	adds	r7, #24
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	00010002 	.word	0x00010002

0800867c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	603b      	str	r3, [r7, #0]
 8008688:	4613      	mov	r3, r2
 800868a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800868c:	e025      	b.n	80086da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008694:	d021      	beq.n	80086da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008696:	f7fe fc2d 	bl	8006ef4 <HAL_GetTick>
 800869a:	4602      	mov	r2, r0
 800869c:	69bb      	ldr	r3, [r7, #24]
 800869e:	1ad3      	subs	r3, r2, r3
 80086a0:	683a      	ldr	r2, [r7, #0]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d302      	bcc.n	80086ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d116      	bne.n	80086da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2200      	movs	r2, #0
 80086b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2220      	movs	r2, #32
 80086b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2200      	movs	r2, #0
 80086be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c6:	f043 0220 	orr.w	r2, r3, #32
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	e023      	b.n	8008722 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	0c1b      	lsrs	r3, r3, #16
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d10d      	bne.n	8008700 <I2C_WaitOnFlagUntilTimeout+0x84>
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	695b      	ldr	r3, [r3, #20]
 80086ea:	43da      	mvns	r2, r3
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	4013      	ands	r3, r2
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	bf0c      	ite	eq
 80086f6:	2301      	moveq	r3, #1
 80086f8:	2300      	movne	r3, #0
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	461a      	mov	r2, r3
 80086fe:	e00c      	b.n	800871a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	699b      	ldr	r3, [r3, #24]
 8008706:	43da      	mvns	r2, r3
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	4013      	ands	r3, r2
 800870c:	b29b      	uxth	r3, r3
 800870e:	2b00      	cmp	r3, #0
 8008710:	bf0c      	ite	eq
 8008712:	2301      	moveq	r3, #1
 8008714:	2300      	movne	r3, #0
 8008716:	b2db      	uxtb	r3, r3
 8008718:	461a      	mov	r2, r3
 800871a:	79fb      	ldrb	r3, [r7, #7]
 800871c:	429a      	cmp	r2, r3
 800871e:	d0b6      	beq.n	800868e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008720:	2300      	movs	r3, #0
}
 8008722:	4618      	mov	r0, r3
 8008724:	3710      	adds	r7, #16
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}

0800872a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b084      	sub	sp, #16
 800872e:	af00      	add	r7, sp, #0
 8008730:	60f8      	str	r0, [r7, #12]
 8008732:	60b9      	str	r1, [r7, #8]
 8008734:	607a      	str	r2, [r7, #4]
 8008736:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008738:	e051      	b.n	80087de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	695b      	ldr	r3, [r3, #20]
 8008740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008748:	d123      	bne.n	8008792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008758:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008762:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2200      	movs	r2, #0
 8008768:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2220      	movs	r2, #32
 800876e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2200      	movs	r2, #0
 8008776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800877e:	f043 0204 	orr.w	r2, r3, #4
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2200      	movs	r2, #0
 800878a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	e046      	b.n	8008820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008798:	d021      	beq.n	80087de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800879a:	f7fe fbab 	bl	8006ef4 <HAL_GetTick>
 800879e:	4602      	mov	r2, r0
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	1ad3      	subs	r3, r2, r3
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d302      	bcc.n	80087b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d116      	bne.n	80087de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2200      	movs	r2, #0
 80087b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2220      	movs	r2, #32
 80087ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ca:	f043 0220 	orr.w	r2, r3, #32
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2200      	movs	r2, #0
 80087d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	e020      	b.n	8008820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	0c1b      	lsrs	r3, r3, #16
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d10c      	bne.n	8008802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	695b      	ldr	r3, [r3, #20]
 80087ee:	43da      	mvns	r2, r3
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	4013      	ands	r3, r2
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	bf14      	ite	ne
 80087fa:	2301      	movne	r3, #1
 80087fc:	2300      	moveq	r3, #0
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	e00b      	b.n	800881a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	699b      	ldr	r3, [r3, #24]
 8008808:	43da      	mvns	r2, r3
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	4013      	ands	r3, r2
 800880e:	b29b      	uxth	r3, r3
 8008810:	2b00      	cmp	r3, #0
 8008812:	bf14      	ite	ne
 8008814:	2301      	movne	r3, #1
 8008816:	2300      	moveq	r3, #0
 8008818:	b2db      	uxtb	r3, r3
 800881a:	2b00      	cmp	r3, #0
 800881c:	d18d      	bne.n	800873a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800881e:	2300      	movs	r3, #0
}
 8008820:	4618      	mov	r0, r3
 8008822:	3710      	adds	r7, #16
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008834:	e02d      	b.n	8008892 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	f000 f8ce 	bl	80089d8 <I2C_IsAcknowledgeFailed>
 800883c:	4603      	mov	r3, r0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d001      	beq.n	8008846 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008842:	2301      	movs	r3, #1
 8008844:	e02d      	b.n	80088a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800884c:	d021      	beq.n	8008892 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800884e:	f7fe fb51 	bl	8006ef4 <HAL_GetTick>
 8008852:	4602      	mov	r2, r0
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	1ad3      	subs	r3, r2, r3
 8008858:	68ba      	ldr	r2, [r7, #8]
 800885a:	429a      	cmp	r2, r3
 800885c:	d302      	bcc.n	8008864 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d116      	bne.n	8008892 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2200      	movs	r2, #0
 8008868:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2220      	movs	r2, #32
 800886e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2200      	movs	r2, #0
 8008876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800887e:	f043 0220 	orr.w	r2, r3, #32
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e007      	b.n	80088a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	695b      	ldr	r3, [r3, #20]
 8008898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800889c:	2b80      	cmp	r3, #128	; 0x80
 800889e:	d1ca      	bne.n	8008836 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b084      	sub	sp, #16
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	60f8      	str	r0, [r7, #12]
 80088b2:	60b9      	str	r1, [r7, #8]
 80088b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80088b6:	e02d      	b.n	8008914 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80088b8:	68f8      	ldr	r0, [r7, #12]
 80088ba:	f000 f88d 	bl	80089d8 <I2C_IsAcknowledgeFailed>
 80088be:	4603      	mov	r3, r0
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d001      	beq.n	80088c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	e02d      	b.n	8008924 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088ce:	d021      	beq.n	8008914 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088d0:	f7fe fb10 	bl	8006ef4 <HAL_GetTick>
 80088d4:	4602      	mov	r2, r0
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	1ad3      	subs	r3, r2, r3
 80088da:	68ba      	ldr	r2, [r7, #8]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d302      	bcc.n	80088e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d116      	bne.n	8008914 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2200      	movs	r2, #0
 80088ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2220      	movs	r2, #32
 80088f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008900:	f043 0220 	orr.w	r2, r3, #32
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	e007      	b.n	8008924 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	695b      	ldr	r3, [r3, #20]
 800891a:	f003 0304 	and.w	r3, r3, #4
 800891e:	2b04      	cmp	r3, #4
 8008920:	d1ca      	bne.n	80088b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008922:	2300      	movs	r3, #0
}
 8008924:	4618      	mov	r0, r3
 8008926:	3710      	adds	r7, #16
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008938:	e042      	b.n	80089c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	695b      	ldr	r3, [r3, #20]
 8008940:	f003 0310 	and.w	r3, r3, #16
 8008944:	2b10      	cmp	r3, #16
 8008946:	d119      	bne.n	800897c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f06f 0210 	mvn.w	r2, #16
 8008950:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2200      	movs	r2, #0
 8008956:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2220      	movs	r2, #32
 800895c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2200      	movs	r2, #0
 8008964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2200      	movs	r2, #0
 8008974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008978:	2301      	movs	r3, #1
 800897a:	e029      	b.n	80089d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800897c:	f7fe faba 	bl	8006ef4 <HAL_GetTick>
 8008980:	4602      	mov	r2, r0
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	1ad3      	subs	r3, r2, r3
 8008986:	68ba      	ldr	r2, [r7, #8]
 8008988:	429a      	cmp	r2, r3
 800898a:	d302      	bcc.n	8008992 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d116      	bne.n	80089c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2200      	movs	r2, #0
 8008996:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2220      	movs	r2, #32
 800899c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ac:	f043 0220 	orr.w	r2, r3, #32
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	e007      	b.n	80089d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	695b      	ldr	r3, [r3, #20]
 80089c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ca:	2b40      	cmp	r3, #64	; 0x40
 80089cc:	d1b5      	bne.n	800893a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3710      	adds	r7, #16
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	695b      	ldr	r3, [r3, #20]
 80089e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089ee:	d11b      	bne.n	8008a28 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80089f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2220      	movs	r2, #32
 8008a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a14:	f043 0204 	orr.w	r2, r3, #4
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008a24:	2301      	movs	r3, #1
 8008a26:	e000      	b.n	8008a2a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008a28:	2300      	movs	r3, #0
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	370c      	adds	r7, #12
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr

08008a36 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008a36:	b480      	push	{r7}
 8008a38:	b083      	sub	sp, #12
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
 8008a3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	2b20      	cmp	r3, #32
 8008a4a:	d129      	bne.n	8008aa0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2224      	movs	r2, #36	; 0x24
 8008a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f022 0201 	bic.w	r2, r2, #1
 8008a62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f022 0210 	bic.w	r2, r2, #16
 8008a72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	683a      	ldr	r2, [r7, #0]
 8008a80:	430a      	orrs	r2, r1
 8008a82:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f042 0201 	orr.w	r2, r2, #1
 8008a92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2220      	movs	r2, #32
 8008a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	e000      	b.n	8008aa2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8008aa0:	2302      	movs	r3, #2
  }
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	370c      	adds	r7, #12
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr

08008aae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008aae:	b480      	push	{r7}
 8008ab0:	b085      	sub	sp, #20
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
 8008ab6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	2b20      	cmp	r3, #32
 8008ac6:	d12a      	bne.n	8008b1e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2224      	movs	r2, #36	; 0x24
 8008acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f022 0201 	bic.w	r2, r2, #1
 8008ade:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae6:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8008ae8:	89fb      	ldrh	r3, [r7, #14]
 8008aea:	f023 030f 	bic.w	r3, r3, #15
 8008aee:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	b29a      	uxth	r2, r3
 8008af4:	89fb      	ldrh	r3, [r7, #14]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	89fa      	ldrh	r2, [r7, #14]
 8008b00:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f042 0201 	orr.w	r2, r2, #1
 8008b10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2220      	movs	r2, #32
 8008b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	e000      	b.n	8008b20 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8008b1e:	2302      	movs	r3, #2
  }
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3714      	adds	r7, #20
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b2e:	b08f      	sub	sp, #60	; 0x3c
 8008b30:	af0a      	add	r7, sp, #40	; 0x28
 8008b32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d101      	bne.n	8008b3e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e10f      	b.n	8008d5e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d106      	bne.n	8008b5e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f00f fcb7 	bl	80184cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2203      	movs	r2, #3
 8008b62:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d102      	bne.n	8008b78 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f004 fe2c 	bl	800d7da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	603b      	str	r3, [r7, #0]
 8008b88:	687e      	ldr	r6, [r7, #4]
 8008b8a:	466d      	mov	r5, sp
 8008b8c:	f106 0410 	add.w	r4, r6, #16
 8008b90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008b92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008b94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008b96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008b98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008b9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8008ba0:	1d33      	adds	r3, r6, #4
 8008ba2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008ba4:	6838      	ldr	r0, [r7, #0]
 8008ba6:	f004 fd03 	bl	800d5b0 <USB_CoreInit>
 8008baa:	4603      	mov	r3, r0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d005      	beq.n	8008bbc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2202      	movs	r2, #2
 8008bb4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e0d0      	b.n	8008d5e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2100      	movs	r1, #0
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f004 fe1a 	bl	800d7fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008bc8:	2300      	movs	r3, #0
 8008bca:	73fb      	strb	r3, [r7, #15]
 8008bcc:	e04a      	b.n	8008c64 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008bce:	7bfa      	ldrb	r2, [r7, #15]
 8008bd0:	6879      	ldr	r1, [r7, #4]
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	00db      	lsls	r3, r3, #3
 8008bd6:	1a9b      	subs	r3, r3, r2
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	440b      	add	r3, r1
 8008bdc:	333d      	adds	r3, #61	; 0x3d
 8008bde:	2201      	movs	r2, #1
 8008be0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008be2:	7bfa      	ldrb	r2, [r7, #15]
 8008be4:	6879      	ldr	r1, [r7, #4]
 8008be6:	4613      	mov	r3, r2
 8008be8:	00db      	lsls	r3, r3, #3
 8008bea:	1a9b      	subs	r3, r3, r2
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	440b      	add	r3, r1
 8008bf0:	333c      	adds	r3, #60	; 0x3c
 8008bf2:	7bfa      	ldrb	r2, [r7, #15]
 8008bf4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008bf6:	7bfa      	ldrb	r2, [r7, #15]
 8008bf8:	7bfb      	ldrb	r3, [r7, #15]
 8008bfa:	b298      	uxth	r0, r3
 8008bfc:	6879      	ldr	r1, [r7, #4]
 8008bfe:	4613      	mov	r3, r2
 8008c00:	00db      	lsls	r3, r3, #3
 8008c02:	1a9b      	subs	r3, r3, r2
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	440b      	add	r3, r1
 8008c08:	3342      	adds	r3, #66	; 0x42
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008c0e:	7bfa      	ldrb	r2, [r7, #15]
 8008c10:	6879      	ldr	r1, [r7, #4]
 8008c12:	4613      	mov	r3, r2
 8008c14:	00db      	lsls	r3, r3, #3
 8008c16:	1a9b      	subs	r3, r3, r2
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	440b      	add	r3, r1
 8008c1c:	333f      	adds	r3, #63	; 0x3f
 8008c1e:	2200      	movs	r2, #0
 8008c20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008c22:	7bfa      	ldrb	r2, [r7, #15]
 8008c24:	6879      	ldr	r1, [r7, #4]
 8008c26:	4613      	mov	r3, r2
 8008c28:	00db      	lsls	r3, r3, #3
 8008c2a:	1a9b      	subs	r3, r3, r2
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	440b      	add	r3, r1
 8008c30:	3344      	adds	r3, #68	; 0x44
 8008c32:	2200      	movs	r2, #0
 8008c34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008c36:	7bfa      	ldrb	r2, [r7, #15]
 8008c38:	6879      	ldr	r1, [r7, #4]
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	00db      	lsls	r3, r3, #3
 8008c3e:	1a9b      	subs	r3, r3, r2
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	440b      	add	r3, r1
 8008c44:	3348      	adds	r3, #72	; 0x48
 8008c46:	2200      	movs	r2, #0
 8008c48:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008c4a:	7bfa      	ldrb	r2, [r7, #15]
 8008c4c:	6879      	ldr	r1, [r7, #4]
 8008c4e:	4613      	mov	r3, r2
 8008c50:	00db      	lsls	r3, r3, #3
 8008c52:	1a9b      	subs	r3, r3, r2
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	440b      	add	r3, r1
 8008c58:	3350      	adds	r3, #80	; 0x50
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c5e:	7bfb      	ldrb	r3, [r7, #15]
 8008c60:	3301      	adds	r3, #1
 8008c62:	73fb      	strb	r3, [r7, #15]
 8008c64:	7bfa      	ldrb	r2, [r7, #15]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d3af      	bcc.n	8008bce <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c6e:	2300      	movs	r3, #0
 8008c70:	73fb      	strb	r3, [r7, #15]
 8008c72:	e044      	b.n	8008cfe <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008c74:	7bfa      	ldrb	r2, [r7, #15]
 8008c76:	6879      	ldr	r1, [r7, #4]
 8008c78:	4613      	mov	r3, r2
 8008c7a:	00db      	lsls	r3, r3, #3
 8008c7c:	1a9b      	subs	r3, r3, r2
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	440b      	add	r3, r1
 8008c82:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8008c86:	2200      	movs	r2, #0
 8008c88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008c8a:	7bfa      	ldrb	r2, [r7, #15]
 8008c8c:	6879      	ldr	r1, [r7, #4]
 8008c8e:	4613      	mov	r3, r2
 8008c90:	00db      	lsls	r3, r3, #3
 8008c92:	1a9b      	subs	r3, r3, r2
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	440b      	add	r3, r1
 8008c98:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8008c9c:	7bfa      	ldrb	r2, [r7, #15]
 8008c9e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008ca0:	7bfa      	ldrb	r2, [r7, #15]
 8008ca2:	6879      	ldr	r1, [r7, #4]
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	00db      	lsls	r3, r3, #3
 8008ca8:	1a9b      	subs	r3, r3, r2
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	440b      	add	r3, r1
 8008cae:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008cb6:	7bfa      	ldrb	r2, [r7, #15]
 8008cb8:	6879      	ldr	r1, [r7, #4]
 8008cba:	4613      	mov	r3, r2
 8008cbc:	00db      	lsls	r3, r3, #3
 8008cbe:	1a9b      	subs	r3, r3, r2
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	440b      	add	r3, r1
 8008cc4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008cc8:	2200      	movs	r2, #0
 8008cca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008ccc:	7bfa      	ldrb	r2, [r7, #15]
 8008cce:	6879      	ldr	r1, [r7, #4]
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	00db      	lsls	r3, r3, #3
 8008cd4:	1a9b      	subs	r3, r3, r2
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	440b      	add	r3, r1
 8008cda:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008cde:	2200      	movs	r2, #0
 8008ce0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008ce2:	7bfa      	ldrb	r2, [r7, #15]
 8008ce4:	6879      	ldr	r1, [r7, #4]
 8008ce6:	4613      	mov	r3, r2
 8008ce8:	00db      	lsls	r3, r3, #3
 8008cea:	1a9b      	subs	r3, r3, r2
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	440b      	add	r3, r1
 8008cf0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008cf8:	7bfb      	ldrb	r3, [r7, #15]
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	73fb      	strb	r3, [r7, #15]
 8008cfe:	7bfa      	ldrb	r2, [r7, #15]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d3b5      	bcc.n	8008c74 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	603b      	str	r3, [r7, #0]
 8008d0e:	687e      	ldr	r6, [r7, #4]
 8008d10:	466d      	mov	r5, sp
 8008d12:	f106 0410 	add.w	r4, r6, #16
 8008d16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008d1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008d1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008d22:	e885 0003 	stmia.w	r5, {r0, r1}
 8008d26:	1d33      	adds	r3, r6, #4
 8008d28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008d2a:	6838      	ldr	r0, [r7, #0]
 8008d2c:	f004 fdb2 	bl	800d894 <USB_DevInit>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d005      	beq.n	8008d42 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2202      	movs	r2, #2
 8008d3a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e00d      	b.n	8008d5e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4618      	mov	r0, r3
 8008d58:	f005 fe2e 	bl	800e9b8 <USB_DevDisconnect>

  return HAL_OK;
 8008d5c:	2300      	movs	r3, #0
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3714      	adds	r7, #20
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008d66 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b084      	sub	sp, #16
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d101      	bne.n	8008d82 <HAL_PCD_Start+0x1c>
 8008d7e:	2302      	movs	r3, #2
 8008d80:	e020      	b.n	8008dc4 <HAL_PCD_Start+0x5e>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2201      	movs	r2, #1
 8008d86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d109      	bne.n	8008da6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d005      	beq.n	8008da6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4618      	mov	r0, r3
 8008dac:	f004 fd04 	bl	800d7b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4618      	mov	r0, r3
 8008db6:	f005 fdde 	bl	800e976 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3710      	adds	r7, #16
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008dcc:	b590      	push	{r4, r7, lr}
 8008dce:	b08d      	sub	sp, #52	; 0x34
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dda:	6a3b      	ldr	r3, [r7, #32]
 8008ddc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4618      	mov	r0, r3
 8008de4:	f005 fe9c 	bl	800eb20 <USB_GetMode>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	f040 839d 	bne.w	800952a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4618      	mov	r0, r3
 8008df6:	f005 fe00 	bl	800e9fa <USB_ReadInterrupts>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f000 8393 	beq.w	8009528 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4618      	mov	r0, r3
 8008e08:	f005 fdf7 	bl	800e9fa <USB_ReadInterrupts>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	f003 0302 	and.w	r3, r3, #2
 8008e12:	2b02      	cmp	r3, #2
 8008e14:	d107      	bne.n	8008e26 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	695a      	ldr	r2, [r3, #20]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f002 0202 	and.w	r2, r2, #2
 8008e24:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f005 fde5 	bl	800e9fa <USB_ReadInterrupts>
 8008e30:	4603      	mov	r3, r0
 8008e32:	f003 0310 	and.w	r3, r3, #16
 8008e36:	2b10      	cmp	r3, #16
 8008e38:	d161      	bne.n	8008efe <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	699a      	ldr	r2, [r3, #24]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f022 0210 	bic.w	r2, r2, #16
 8008e48:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8008e4a:	6a3b      	ldr	r3, [r7, #32]
 8008e4c:	6a1b      	ldr	r3, [r3, #32]
 8008e4e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	f003 020f 	and.w	r2, r3, #15
 8008e56:	4613      	mov	r3, r2
 8008e58:	00db      	lsls	r3, r3, #3
 8008e5a:	1a9b      	subs	r3, r3, r2
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	4413      	add	r3, r2
 8008e66:	3304      	adds	r3, #4
 8008e68:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	0c5b      	lsrs	r3, r3, #17
 8008e6e:	f003 030f 	and.w	r3, r3, #15
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	d124      	bne.n	8008ec0 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008e76:	69ba      	ldr	r2, [r7, #24]
 8008e78:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008e7c:	4013      	ands	r3, r2
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d035      	beq.n	8008eee <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008e86:	69bb      	ldr	r3, [r7, #24]
 8008e88:	091b      	lsrs	r3, r3, #4
 8008e8a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008e8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	461a      	mov	r2, r3
 8008e94:	6a38      	ldr	r0, [r7, #32]
 8008e96:	f005 fc1c 	bl	800e6d2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	68da      	ldr	r2, [r3, #12]
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	091b      	lsrs	r3, r3, #4
 8008ea2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008ea6:	441a      	add	r2, r3
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	699a      	ldr	r2, [r3, #24]
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	091b      	lsrs	r3, r3, #4
 8008eb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008eb8:	441a      	add	r2, r3
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	619a      	str	r2, [r3, #24]
 8008ebe:	e016      	b.n	8008eee <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8008ec0:	69bb      	ldr	r3, [r7, #24]
 8008ec2:	0c5b      	lsrs	r3, r3, #17
 8008ec4:	f003 030f 	and.w	r3, r3, #15
 8008ec8:	2b06      	cmp	r3, #6
 8008eca:	d110      	bne.n	8008eee <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008ed2:	2208      	movs	r2, #8
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	6a38      	ldr	r0, [r7, #32]
 8008ed8:	f005 fbfb 	bl	800e6d2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	699a      	ldr	r2, [r3, #24]
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	091b      	lsrs	r3, r3, #4
 8008ee4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008ee8:	441a      	add	r2, r3
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	699a      	ldr	r2, [r3, #24]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f042 0210 	orr.w	r2, r2, #16
 8008efc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4618      	mov	r0, r3
 8008f04:	f005 fd79 	bl	800e9fa <USB_ReadInterrupts>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008f0e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008f12:	d16e      	bne.n	8008ff2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8008f14:	2300      	movs	r3, #0
 8008f16:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f005 fd7f 	bl	800ea20 <USB_ReadDevAllOutEpInterrupt>
 8008f22:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008f24:	e062      	b.n	8008fec <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f28:	f003 0301 	and.w	r3, r3, #1
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d057      	beq.n	8008fe0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f36:	b2d2      	uxtb	r2, r2
 8008f38:	4611      	mov	r1, r2
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f005 fda4 	bl	800ea88 <USB_ReadDevOutEPInterrupt>
 8008f40:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	f003 0301 	and.w	r3, r3, #1
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00c      	beq.n	8008f66 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4e:	015a      	lsls	r2, r3, #5
 8008f50:	69fb      	ldr	r3, [r7, #28]
 8008f52:	4413      	add	r3, r2
 8008f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f58:	461a      	mov	r2, r3
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008f5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 fdb1 	bl	8009ac8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	f003 0308 	and.w	r3, r3, #8
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d00c      	beq.n	8008f8a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f72:	015a      	lsls	r2, r3, #5
 8008f74:	69fb      	ldr	r3, [r7, #28]
 8008f76:	4413      	add	r3, r2
 8008f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	2308      	movs	r3, #8
 8008f80:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008f82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 feab 	bl	8009ce0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	f003 0310 	and.w	r3, r3, #16
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d008      	beq.n	8008fa6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f96:	015a      	lsls	r2, r3, #5
 8008f98:	69fb      	ldr	r3, [r7, #28]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	2310      	movs	r3, #16
 8008fa4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	f003 0320 	and.w	r3, r3, #32
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d008      	beq.n	8008fc2 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb2:	015a      	lsls	r2, r3, #5
 8008fb4:	69fb      	ldr	r3, [r7, #28]
 8008fb6:	4413      	add	r3, r2
 8008fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	2320      	movs	r3, #32
 8008fc0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d009      	beq.n	8008fe0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fce:	015a      	lsls	r2, r3, #5
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	4413      	add	r3, r2
 8008fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fd8:	461a      	mov	r2, r3
 8008fda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008fde:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe8:	085b      	lsrs	r3, r3, #1
 8008fea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d199      	bne.n	8008f26 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f005 fcff 	bl	800e9fa <USB_ReadInterrupts>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009002:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009006:	f040 80c0 	bne.w	800918a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4618      	mov	r0, r3
 8009010:	f005 fd20 	bl	800ea54 <USB_ReadDevAllInEpInterrupt>
 8009014:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009016:	2300      	movs	r3, #0
 8009018:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800901a:	e0b2      	b.n	8009182 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800901c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901e:	f003 0301 	and.w	r3, r3, #1
 8009022:	2b00      	cmp	r3, #0
 8009024:	f000 80a7 	beq.w	8009176 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800902e:	b2d2      	uxtb	r2, r2
 8009030:	4611      	mov	r1, r2
 8009032:	4618      	mov	r0, r3
 8009034:	f005 fd46 	bl	800eac4 <USB_ReadDevInEPInterrupt>
 8009038:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	f003 0301 	and.w	r3, r3, #1
 8009040:	2b00      	cmp	r3, #0
 8009042:	d057      	beq.n	80090f4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009046:	f003 030f 	and.w	r3, r3, #15
 800904a:	2201      	movs	r2, #1
 800904c:	fa02 f303 	lsl.w	r3, r2, r3
 8009050:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	43db      	mvns	r3, r3
 800905e:	69f9      	ldr	r1, [r7, #28]
 8009060:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009064:	4013      	ands	r3, r2
 8009066:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906a:	015a      	lsls	r2, r3, #5
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	4413      	add	r3, r2
 8009070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009074:	461a      	mov	r2, r3
 8009076:	2301      	movs	r3, #1
 8009078:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	691b      	ldr	r3, [r3, #16]
 800907e:	2b01      	cmp	r3, #1
 8009080:	d132      	bne.n	80090e8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009082:	6879      	ldr	r1, [r7, #4]
 8009084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009086:	4613      	mov	r3, r2
 8009088:	00db      	lsls	r3, r3, #3
 800908a:	1a9b      	subs	r3, r3, r2
 800908c:	009b      	lsls	r3, r3, #2
 800908e:	440b      	add	r3, r1
 8009090:	3348      	adds	r3, #72	; 0x48
 8009092:	6819      	ldr	r1, [r3, #0]
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009098:	4613      	mov	r3, r2
 800909a:	00db      	lsls	r3, r3, #3
 800909c:	1a9b      	subs	r3, r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	4403      	add	r3, r0
 80090a2:	3344      	adds	r3, #68	; 0x44
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4419      	add	r1, r3
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090ac:	4613      	mov	r3, r2
 80090ae:	00db      	lsls	r3, r3, #3
 80090b0:	1a9b      	subs	r3, r3, r2
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	4403      	add	r3, r0
 80090b6:	3348      	adds	r3, #72	; 0x48
 80090b8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80090ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d113      	bne.n	80090e8 <HAL_PCD_IRQHandler+0x31c>
 80090c0:	6879      	ldr	r1, [r7, #4]
 80090c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090c4:	4613      	mov	r3, r2
 80090c6:	00db      	lsls	r3, r3, #3
 80090c8:	1a9b      	subs	r3, r3, r2
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	440b      	add	r3, r1
 80090ce:	3350      	adds	r3, #80	; 0x50
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d108      	bne.n	80090e8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6818      	ldr	r0, [r3, #0]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80090e0:	461a      	mov	r2, r3
 80090e2:	2101      	movs	r1, #1
 80090e4:	f005 fd4e 	bl	800eb84 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80090e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ea:	b2db      	uxtb	r3, r3
 80090ec:	4619      	mov	r1, r3
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f00f fa7b 	bl	80185ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	f003 0308 	and.w	r3, r3, #8
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d008      	beq.n	8009110 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80090fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009100:	015a      	lsls	r2, r3, #5
 8009102:	69fb      	ldr	r3, [r7, #28]
 8009104:	4413      	add	r3, r2
 8009106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800910a:	461a      	mov	r2, r3
 800910c:	2308      	movs	r3, #8
 800910e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	f003 0310 	and.w	r3, r3, #16
 8009116:	2b00      	cmp	r3, #0
 8009118:	d008      	beq.n	800912c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800911a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911c:	015a      	lsls	r2, r3, #5
 800911e:	69fb      	ldr	r3, [r7, #28]
 8009120:	4413      	add	r3, r2
 8009122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009126:	461a      	mov	r2, r3
 8009128:	2310      	movs	r3, #16
 800912a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009132:	2b00      	cmp	r3, #0
 8009134:	d008      	beq.n	8009148 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009138:	015a      	lsls	r2, r3, #5
 800913a:	69fb      	ldr	r3, [r7, #28]
 800913c:	4413      	add	r3, r2
 800913e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009142:	461a      	mov	r2, r3
 8009144:	2340      	movs	r3, #64	; 0x40
 8009146:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	f003 0302 	and.w	r3, r3, #2
 800914e:	2b00      	cmp	r3, #0
 8009150:	d008      	beq.n	8009164 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009154:	015a      	lsls	r2, r3, #5
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	4413      	add	r3, r2
 800915a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800915e:	461a      	mov	r2, r3
 8009160:	2302      	movs	r3, #2
 8009162:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800916a:	2b00      	cmp	r3, #0
 800916c:	d003      	beq.n	8009176 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800916e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 fc1b 	bl	80099ac <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009178:	3301      	adds	r3, #1
 800917a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800917c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917e:	085b      	lsrs	r3, r3, #1
 8009180:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009184:	2b00      	cmp	r3, #0
 8009186:	f47f af49 	bne.w	800901c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4618      	mov	r0, r3
 8009190:	f005 fc33 	bl	800e9fa <USB_ReadInterrupts>
 8009194:	4603      	mov	r3, r0
 8009196:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800919a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800919e:	d122      	bne.n	80091e6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80091a0:	69fb      	ldr	r3, [r7, #28]
 80091a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	69fa      	ldr	r2, [r7, #28]
 80091aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091ae:	f023 0301 	bic.w	r3, r3, #1
 80091b2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d108      	bne.n	80091d0 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2200      	movs	r2, #0
 80091c2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80091c6:	2100      	movs	r1, #0
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 fe27 	bl	8009e1c <HAL_PCDEx_LPM_Callback>
 80091ce:	e002      	b.n	80091d6 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f00f fa81 	bl	80186d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	695a      	ldr	r2, [r3, #20]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80091e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4618      	mov	r0, r3
 80091ec:	f005 fc05 	bl	800e9fa <USB_ReadInterrupts>
 80091f0:	4603      	mov	r3, r0
 80091f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091fa:	d112      	bne.n	8009222 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	f003 0301 	and.w	r3, r3, #1
 8009208:	2b01      	cmp	r3, #1
 800920a:	d102      	bne.n	8009212 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f00f fa3d 	bl	801868c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	695a      	ldr	r2, [r3, #20]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009220:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4618      	mov	r0, r3
 8009228:	f005 fbe7 	bl	800e9fa <USB_ReadInterrupts>
 800922c:	4603      	mov	r3, r0
 800922e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009236:	f040 80c7 	bne.w	80093c8 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800923a:	69fb      	ldr	r3, [r7, #28]
 800923c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	69fa      	ldr	r2, [r7, #28]
 8009244:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009248:	f023 0301 	bic.w	r3, r3, #1
 800924c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2110      	movs	r1, #16
 8009254:	4618      	mov	r0, r3
 8009256:	f004 fc81 	bl	800db5c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800925a:	2300      	movs	r3, #0
 800925c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800925e:	e056      	b.n	800930e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009262:	015a      	lsls	r2, r3, #5
 8009264:	69fb      	ldr	r3, [r7, #28]
 8009266:	4413      	add	r3, r2
 8009268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800926c:	461a      	mov	r2, r3
 800926e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009272:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009276:	015a      	lsls	r2, r3, #5
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	4413      	add	r3, r2
 800927c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009284:	0151      	lsls	r1, r2, #5
 8009286:	69fa      	ldr	r2, [r7, #28]
 8009288:	440a      	add	r2, r1
 800928a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800928e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009292:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009296:	015a      	lsls	r2, r3, #5
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	4413      	add	r3, r2
 800929c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092a4:	0151      	lsls	r1, r2, #5
 80092a6:	69fa      	ldr	r2, [r7, #28]
 80092a8:	440a      	add	r2, r1
 80092aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80092b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80092b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b6:	015a      	lsls	r2, r3, #5
 80092b8:	69fb      	ldr	r3, [r7, #28]
 80092ba:	4413      	add	r3, r2
 80092bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092c0:	461a      	mov	r2, r3
 80092c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80092c6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80092c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ca:	015a      	lsls	r2, r3, #5
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	4413      	add	r3, r2
 80092d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092d8:	0151      	lsls	r1, r2, #5
 80092da:	69fa      	ldr	r2, [r7, #28]
 80092dc:	440a      	add	r2, r1
 80092de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80092e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80092e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ea:	015a      	lsls	r2, r3, #5
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	4413      	add	r3, r2
 80092f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092f8:	0151      	lsls	r1, r2, #5
 80092fa:	69fa      	ldr	r2, [r7, #28]
 80092fc:	440a      	add	r2, r1
 80092fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009302:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009306:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800930a:	3301      	adds	r3, #1
 800930c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009314:	429a      	cmp	r2, r3
 8009316:	d3a3      	bcc.n	8009260 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800931e:	69db      	ldr	r3, [r3, #28]
 8009320:	69fa      	ldr	r2, [r7, #28]
 8009322:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009326:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800932a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009330:	2b00      	cmp	r3, #0
 8009332:	d016      	beq.n	8009362 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800933a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800933e:	69fa      	ldr	r2, [r7, #28]
 8009340:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009344:	f043 030b 	orr.w	r3, r3, #11
 8009348:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009354:	69fa      	ldr	r2, [r7, #28]
 8009356:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800935a:	f043 030b 	orr.w	r3, r3, #11
 800935e:	6453      	str	r3, [r2, #68]	; 0x44
 8009360:	e015      	b.n	800938e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009368:	695b      	ldr	r3, [r3, #20]
 800936a:	69fa      	ldr	r2, [r7, #28]
 800936c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009370:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009374:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8009378:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800937a:	69fb      	ldr	r3, [r7, #28]
 800937c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009380:	691b      	ldr	r3, [r3, #16]
 8009382:	69fa      	ldr	r2, [r7, #28]
 8009384:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009388:	f043 030b 	orr.w	r3, r3, #11
 800938c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	69fa      	ldr	r2, [r7, #28]
 8009398:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800939c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80093a0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6818      	ldr	r0, [r3, #0]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	691b      	ldr	r3, [r3, #16]
 80093aa:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80093b2:	461a      	mov	r2, r3
 80093b4:	f005 fbe6 	bl	800eb84 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	695a      	ldr	r2, [r3, #20]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80093c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4618      	mov	r0, r3
 80093ce:	f005 fb14 	bl	800e9fa <USB_ReadInterrupts>
 80093d2:	4603      	mov	r3, r0
 80093d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80093d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093dc:	d124      	bne.n	8009428 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4618      	mov	r0, r3
 80093e4:	f005 fbaa 	bl	800eb3c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4618      	mov	r0, r3
 80093ee:	f004 fc12 	bl	800dc16 <USB_GetDevSpeed>
 80093f2:	4603      	mov	r3, r0
 80093f4:	461a      	mov	r2, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681c      	ldr	r4, [r3, #0]
 80093fe:	f001 f995 	bl	800a72c <HAL_RCC_GetHCLKFreq>
 8009402:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009408:	b2db      	uxtb	r3, r3
 800940a:	461a      	mov	r2, r3
 800940c:	4620      	mov	r0, r4
 800940e:	f004 f931 	bl	800d674 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f00f f911 	bl	801863a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	695a      	ldr	r2, [r3, #20]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009426:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4618      	mov	r0, r3
 800942e:	f005 fae4 	bl	800e9fa <USB_ReadInterrupts>
 8009432:	4603      	mov	r3, r0
 8009434:	f003 0308 	and.w	r3, r3, #8
 8009438:	2b08      	cmp	r3, #8
 800943a:	d10a      	bne.n	8009452 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f00f f8ee 	bl	801861e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	695a      	ldr	r2, [r3, #20]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f002 0208 	and.w	r2, r2, #8
 8009450:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4618      	mov	r0, r3
 8009458:	f005 facf 	bl	800e9fa <USB_ReadInterrupts>
 800945c:	4603      	mov	r3, r0
 800945e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009462:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009466:	d10f      	bne.n	8009488 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8009468:	2300      	movs	r3, #0
 800946a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800946c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946e:	b2db      	uxtb	r3, r3
 8009470:	4619      	mov	r1, r3
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f00f f950 	bl	8018718 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	695a      	ldr	r2, [r3, #20]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009486:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4618      	mov	r0, r3
 800948e:	f005 fab4 	bl	800e9fa <USB_ReadInterrupts>
 8009492:	4603      	mov	r3, r0
 8009494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009498:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800949c:	d10f      	bne.n	80094be <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800949e:	2300      	movs	r3, #0
 80094a0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80094a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	4619      	mov	r1, r3
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f00f f923 	bl	80186f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	695a      	ldr	r2, [r3, #20]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80094bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4618      	mov	r0, r3
 80094c4:	f005 fa99 	bl	800e9fa <USB_ReadInterrupts>
 80094c8:	4603      	mov	r3, r0
 80094ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80094ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094d2:	d10a      	bne.n	80094ea <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f00f f931 	bl	801873c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	695a      	ldr	r2, [r3, #20]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80094e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4618      	mov	r0, r3
 80094f0:	f005 fa83 	bl	800e9fa <USB_ReadInterrupts>
 80094f4:	4603      	mov	r3, r0
 80094f6:	f003 0304 	and.w	r3, r3, #4
 80094fa:	2b04      	cmp	r3, #4
 80094fc:	d115      	bne.n	800952a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009506:	69bb      	ldr	r3, [r7, #24]
 8009508:	f003 0304 	and.w	r3, r3, #4
 800950c:	2b00      	cmp	r3, #0
 800950e:	d002      	beq.n	8009516 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f00f f921 	bl	8018758 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	6859      	ldr	r1, [r3, #4]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	69ba      	ldr	r2, [r7, #24]
 8009522:	430a      	orrs	r2, r1
 8009524:	605a      	str	r2, [r3, #4]
 8009526:	e000      	b.n	800952a <HAL_PCD_IRQHandler+0x75e>
      return;
 8009528:	bf00      	nop
    }
  }
}
 800952a:	3734      	adds	r7, #52	; 0x34
 800952c:	46bd      	mov	sp, r7
 800952e:	bd90      	pop	{r4, r7, pc}

08009530 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b082      	sub	sp, #8
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	460b      	mov	r3, r1
 800953a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009542:	2b01      	cmp	r3, #1
 8009544:	d101      	bne.n	800954a <HAL_PCD_SetAddress+0x1a>
 8009546:	2302      	movs	r3, #2
 8009548:	e013      	b.n	8009572 <HAL_PCD_SetAddress+0x42>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2201      	movs	r2, #1
 800954e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	78fa      	ldrb	r2, [r7, #3]
 8009556:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	78fa      	ldrb	r2, [r7, #3]
 8009560:	4611      	mov	r1, r2
 8009562:	4618      	mov	r0, r3
 8009564:	f005 f9e1 	bl	800e92a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009570:	2300      	movs	r3, #0
}
 8009572:	4618      	mov	r0, r3
 8009574:	3708      	adds	r7, #8
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}

0800957a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800957a:	b580      	push	{r7, lr}
 800957c:	b084      	sub	sp, #16
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
 8009582:	4608      	mov	r0, r1
 8009584:	4611      	mov	r1, r2
 8009586:	461a      	mov	r2, r3
 8009588:	4603      	mov	r3, r0
 800958a:	70fb      	strb	r3, [r7, #3]
 800958c:	460b      	mov	r3, r1
 800958e:	803b      	strh	r3, [r7, #0]
 8009590:	4613      	mov	r3, r2
 8009592:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009594:	2300      	movs	r3, #0
 8009596:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009598:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800959c:	2b00      	cmp	r3, #0
 800959e:	da0f      	bge.n	80095c0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80095a0:	78fb      	ldrb	r3, [r7, #3]
 80095a2:	f003 020f 	and.w	r2, r3, #15
 80095a6:	4613      	mov	r3, r2
 80095a8:	00db      	lsls	r3, r3, #3
 80095aa:	1a9b      	subs	r3, r3, r2
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	3338      	adds	r3, #56	; 0x38
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	4413      	add	r3, r2
 80095b4:	3304      	adds	r3, #4
 80095b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2201      	movs	r2, #1
 80095bc:	705a      	strb	r2, [r3, #1]
 80095be:	e00f      	b.n	80095e0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80095c0:	78fb      	ldrb	r3, [r7, #3]
 80095c2:	f003 020f 	and.w	r2, r3, #15
 80095c6:	4613      	mov	r3, r2
 80095c8:	00db      	lsls	r3, r3, #3
 80095ca:	1a9b      	subs	r3, r3, r2
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	4413      	add	r3, r2
 80095d6:	3304      	adds	r3, #4
 80095d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2200      	movs	r2, #0
 80095de:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80095e0:	78fb      	ldrb	r3, [r7, #3]
 80095e2:	f003 030f 	and.w	r3, r3, #15
 80095e6:	b2da      	uxtb	r2, r3
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80095ec:	883a      	ldrh	r2, [r7, #0]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	78ba      	ldrb	r2, [r7, #2]
 80095f6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	785b      	ldrb	r3, [r3, #1]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d004      	beq.n	800960a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	b29a      	uxth	r2, r3
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800960a:	78bb      	ldrb	r3, [r7, #2]
 800960c:	2b02      	cmp	r3, #2
 800960e:	d102      	bne.n	8009616 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2200      	movs	r2, #0
 8009614:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800961c:	2b01      	cmp	r3, #1
 800961e:	d101      	bne.n	8009624 <HAL_PCD_EP_Open+0xaa>
 8009620:	2302      	movs	r3, #2
 8009622:	e00e      	b.n	8009642 <HAL_PCD_EP_Open+0xc8>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2201      	movs	r2, #1
 8009628:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	68f9      	ldr	r1, [r7, #12]
 8009632:	4618      	mov	r0, r3
 8009634:	f004 fb14 	bl	800dc60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8009640:	7afb      	ldrb	r3, [r7, #11]
}
 8009642:	4618      	mov	r0, r3
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b084      	sub	sp, #16
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
 8009652:	460b      	mov	r3, r1
 8009654:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009656:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800965a:	2b00      	cmp	r3, #0
 800965c:	da0f      	bge.n	800967e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800965e:	78fb      	ldrb	r3, [r7, #3]
 8009660:	f003 020f 	and.w	r2, r3, #15
 8009664:	4613      	mov	r3, r2
 8009666:	00db      	lsls	r3, r3, #3
 8009668:	1a9b      	subs	r3, r3, r2
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	3338      	adds	r3, #56	; 0x38
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	4413      	add	r3, r2
 8009672:	3304      	adds	r3, #4
 8009674:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2201      	movs	r2, #1
 800967a:	705a      	strb	r2, [r3, #1]
 800967c:	e00f      	b.n	800969e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800967e:	78fb      	ldrb	r3, [r7, #3]
 8009680:	f003 020f 	and.w	r2, r3, #15
 8009684:	4613      	mov	r3, r2
 8009686:	00db      	lsls	r3, r3, #3
 8009688:	1a9b      	subs	r3, r3, r2
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	4413      	add	r3, r2
 8009694:	3304      	adds	r3, #4
 8009696:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2200      	movs	r2, #0
 800969c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800969e:	78fb      	ldrb	r3, [r7, #3]
 80096a0:	f003 030f 	and.w	r3, r3, #15
 80096a4:	b2da      	uxtb	r2, r3
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d101      	bne.n	80096b8 <HAL_PCD_EP_Close+0x6e>
 80096b4:	2302      	movs	r3, #2
 80096b6:	e00e      	b.n	80096d6 <HAL_PCD_EP_Close+0x8c>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2201      	movs	r2, #1
 80096bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	68f9      	ldr	r1, [r7, #12]
 80096c6:	4618      	mov	r0, r3
 80096c8:	f004 fb52 	bl	800dd70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3710      	adds	r7, #16
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80096de:	b580      	push	{r7, lr}
 80096e0:	b086      	sub	sp, #24
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	60f8      	str	r0, [r7, #12]
 80096e6:	607a      	str	r2, [r7, #4]
 80096e8:	603b      	str	r3, [r7, #0]
 80096ea:	460b      	mov	r3, r1
 80096ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80096ee:	7afb      	ldrb	r3, [r7, #11]
 80096f0:	f003 020f 	and.w	r2, r3, #15
 80096f4:	4613      	mov	r3, r2
 80096f6:	00db      	lsls	r3, r3, #3
 80096f8:	1a9b      	subs	r3, r3, r2
 80096fa:	009b      	lsls	r3, r3, #2
 80096fc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009700:	68fa      	ldr	r2, [r7, #12]
 8009702:	4413      	add	r3, r2
 8009704:	3304      	adds	r3, #4
 8009706:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	687a      	ldr	r2, [r7, #4]
 800970c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	683a      	ldr	r2, [r7, #0]
 8009712:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	2200      	movs	r2, #0
 8009718:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	2200      	movs	r2, #0
 800971e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009720:	7afb      	ldrb	r3, [r7, #11]
 8009722:	f003 030f 	and.w	r3, r3, #15
 8009726:	b2da      	uxtb	r2, r3
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	691b      	ldr	r3, [r3, #16]
 8009730:	2b01      	cmp	r3, #1
 8009732:	d102      	bne.n	800973a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800973a:	7afb      	ldrb	r3, [r7, #11]
 800973c:	f003 030f 	and.w	r3, r3, #15
 8009740:	2b00      	cmp	r3, #0
 8009742:	d109      	bne.n	8009758 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	6818      	ldr	r0, [r3, #0]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	691b      	ldr	r3, [r3, #16]
 800974c:	b2db      	uxtb	r3, r3
 800974e:	461a      	mov	r2, r3
 8009750:	6979      	ldr	r1, [r7, #20]
 8009752:	f004 fe2d 	bl	800e3b0 <USB_EP0StartXfer>
 8009756:	e008      	b.n	800976a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	6818      	ldr	r0, [r3, #0]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	691b      	ldr	r3, [r3, #16]
 8009760:	b2db      	uxtb	r3, r3
 8009762:	461a      	mov	r2, r3
 8009764:	6979      	ldr	r1, [r7, #20]
 8009766:	f004 fbdf 	bl	800df28 <USB_EPStartXfer>
  }

  return HAL_OK;
 800976a:	2300      	movs	r3, #0
}
 800976c:	4618      	mov	r0, r3
 800976e:	3718      	adds	r7, #24
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	460b      	mov	r3, r1
 800977e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009780:	78fb      	ldrb	r3, [r7, #3]
 8009782:	f003 020f 	and.w	r2, r3, #15
 8009786:	6879      	ldr	r1, [r7, #4]
 8009788:	4613      	mov	r3, r2
 800978a:	00db      	lsls	r3, r3, #3
 800978c:	1a9b      	subs	r3, r3, r2
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	440b      	add	r3, r1
 8009792:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009796:	681b      	ldr	r3, [r3, #0]
}
 8009798:	4618      	mov	r0, r3
 800979a:	370c      	adds	r7, #12
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b086      	sub	sp, #24
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	60f8      	str	r0, [r7, #12]
 80097ac:	607a      	str	r2, [r7, #4]
 80097ae:	603b      	str	r3, [r7, #0]
 80097b0:	460b      	mov	r3, r1
 80097b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80097b4:	7afb      	ldrb	r3, [r7, #11]
 80097b6:	f003 020f 	and.w	r2, r3, #15
 80097ba:	4613      	mov	r3, r2
 80097bc:	00db      	lsls	r3, r3, #3
 80097be:	1a9b      	subs	r3, r3, r2
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	3338      	adds	r3, #56	; 0x38
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	4413      	add	r3, r2
 80097c8:	3304      	adds	r3, #4
 80097ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	683a      	ldr	r2, [r7, #0]
 80097d6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	2200      	movs	r2, #0
 80097dc:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	2201      	movs	r2, #1
 80097e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80097e4:	7afb      	ldrb	r3, [r7, #11]
 80097e6:	f003 030f 	and.w	r3, r3, #15
 80097ea:	b2da      	uxtb	r2, r3
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	691b      	ldr	r3, [r3, #16]
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d102      	bne.n	80097fe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80097fe:	7afb      	ldrb	r3, [r7, #11]
 8009800:	f003 030f 	and.w	r3, r3, #15
 8009804:	2b00      	cmp	r3, #0
 8009806:	d109      	bne.n	800981c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6818      	ldr	r0, [r3, #0]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	691b      	ldr	r3, [r3, #16]
 8009810:	b2db      	uxtb	r3, r3
 8009812:	461a      	mov	r2, r3
 8009814:	6979      	ldr	r1, [r7, #20]
 8009816:	f004 fdcb 	bl	800e3b0 <USB_EP0StartXfer>
 800981a:	e008      	b.n	800982e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6818      	ldr	r0, [r3, #0]
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	691b      	ldr	r3, [r3, #16]
 8009824:	b2db      	uxtb	r3, r3
 8009826:	461a      	mov	r2, r3
 8009828:	6979      	ldr	r1, [r7, #20]
 800982a:	f004 fb7d 	bl	800df28 <USB_EPStartXfer>
  }

  return HAL_OK;
 800982e:	2300      	movs	r3, #0
}
 8009830:	4618      	mov	r0, r3
 8009832:	3718      	adds	r7, #24
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b084      	sub	sp, #16
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	460b      	mov	r3, r1
 8009842:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009844:	78fb      	ldrb	r3, [r7, #3]
 8009846:	f003 020f 	and.w	r2, r3, #15
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	429a      	cmp	r2, r3
 8009850:	d901      	bls.n	8009856 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009852:	2301      	movs	r3, #1
 8009854:	e050      	b.n	80098f8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009856:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800985a:	2b00      	cmp	r3, #0
 800985c:	da0f      	bge.n	800987e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800985e:	78fb      	ldrb	r3, [r7, #3]
 8009860:	f003 020f 	and.w	r2, r3, #15
 8009864:	4613      	mov	r3, r2
 8009866:	00db      	lsls	r3, r3, #3
 8009868:	1a9b      	subs	r3, r3, r2
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	3338      	adds	r3, #56	; 0x38
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	4413      	add	r3, r2
 8009872:	3304      	adds	r3, #4
 8009874:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2201      	movs	r2, #1
 800987a:	705a      	strb	r2, [r3, #1]
 800987c:	e00d      	b.n	800989a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800987e:	78fa      	ldrb	r2, [r7, #3]
 8009880:	4613      	mov	r3, r2
 8009882:	00db      	lsls	r3, r3, #3
 8009884:	1a9b      	subs	r3, r3, r2
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	4413      	add	r3, r2
 8009890:	3304      	adds	r3, #4
 8009892:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2200      	movs	r2, #0
 8009898:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2201      	movs	r2, #1
 800989e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80098a0:	78fb      	ldrb	r3, [r7, #3]
 80098a2:	f003 030f 	and.w	r3, r3, #15
 80098a6:	b2da      	uxtb	r2, r3
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d101      	bne.n	80098ba <HAL_PCD_EP_SetStall+0x82>
 80098b6:	2302      	movs	r3, #2
 80098b8:	e01e      	b.n	80098f8 <HAL_PCD_EP_SetStall+0xc0>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2201      	movs	r2, #1
 80098be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	68f9      	ldr	r1, [r7, #12]
 80098c8:	4618      	mov	r0, r3
 80098ca:	f004 ff5a 	bl	800e782 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80098ce:	78fb      	ldrb	r3, [r7, #3]
 80098d0:	f003 030f 	and.w	r3, r3, #15
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d10a      	bne.n	80098ee <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6818      	ldr	r0, [r3, #0]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	691b      	ldr	r3, [r3, #16]
 80098e0:	b2d9      	uxtb	r1, r3
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80098e8:	461a      	mov	r2, r3
 80098ea:	f005 f94b 	bl	800eb84 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2200      	movs	r2, #0
 80098f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80098f6:	2300      	movs	r3, #0
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3710      	adds	r7, #16
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b084      	sub	sp, #16
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	460b      	mov	r3, r1
 800990a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800990c:	78fb      	ldrb	r3, [r7, #3]
 800990e:	f003 020f 	and.w	r2, r3, #15
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	429a      	cmp	r2, r3
 8009918:	d901      	bls.n	800991e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800991a:	2301      	movs	r3, #1
 800991c:	e042      	b.n	80099a4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800991e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009922:	2b00      	cmp	r3, #0
 8009924:	da0f      	bge.n	8009946 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009926:	78fb      	ldrb	r3, [r7, #3]
 8009928:	f003 020f 	and.w	r2, r3, #15
 800992c:	4613      	mov	r3, r2
 800992e:	00db      	lsls	r3, r3, #3
 8009930:	1a9b      	subs	r3, r3, r2
 8009932:	009b      	lsls	r3, r3, #2
 8009934:	3338      	adds	r3, #56	; 0x38
 8009936:	687a      	ldr	r2, [r7, #4]
 8009938:	4413      	add	r3, r2
 800993a:	3304      	adds	r3, #4
 800993c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2201      	movs	r2, #1
 8009942:	705a      	strb	r2, [r3, #1]
 8009944:	e00f      	b.n	8009966 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009946:	78fb      	ldrb	r3, [r7, #3]
 8009948:	f003 020f 	and.w	r2, r3, #15
 800994c:	4613      	mov	r3, r2
 800994e:	00db      	lsls	r3, r3, #3
 8009950:	1a9b      	subs	r3, r3, r2
 8009952:	009b      	lsls	r3, r3, #2
 8009954:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	4413      	add	r3, r2
 800995c:	3304      	adds	r3, #4
 800995e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2200      	movs	r2, #0
 8009964:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2200      	movs	r2, #0
 800996a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800996c:	78fb      	ldrb	r3, [r7, #3]
 800996e:	f003 030f 	and.w	r3, r3, #15
 8009972:	b2da      	uxtb	r2, r3
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800997e:	2b01      	cmp	r3, #1
 8009980:	d101      	bne.n	8009986 <HAL_PCD_EP_ClrStall+0x86>
 8009982:	2302      	movs	r3, #2
 8009984:	e00e      	b.n	80099a4 <HAL_PCD_EP_ClrStall+0xa4>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2201      	movs	r2, #1
 800998a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	68f9      	ldr	r1, [r7, #12]
 8009994:	4618      	mov	r0, r3
 8009996:	f004 ff62 	bl	800e85e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2200      	movs	r2, #0
 800999e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80099a2:	2300      	movs	r3, #0
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3710      	adds	r7, #16
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b08a      	sub	sp, #40	; 0x28
 80099b0:	af02      	add	r7, sp, #8
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80099c0:	683a      	ldr	r2, [r7, #0]
 80099c2:	4613      	mov	r3, r2
 80099c4:	00db      	lsls	r3, r3, #3
 80099c6:	1a9b      	subs	r3, r3, r2
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	3338      	adds	r3, #56	; 0x38
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	4413      	add	r3, r2
 80099d0:	3304      	adds	r3, #4
 80099d2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	699a      	ldr	r2, [r3, #24]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	695b      	ldr	r3, [r3, #20]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d901      	bls.n	80099e4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80099e0:	2301      	movs	r3, #1
 80099e2:	e06c      	b.n	8009abe <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	695a      	ldr	r2, [r3, #20]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	699b      	ldr	r3, [r3, #24]
 80099ec:	1ad3      	subs	r3, r2, r3
 80099ee:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	69fa      	ldr	r2, [r7, #28]
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d902      	bls.n	8009a00 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	689b      	ldr	r3, [r3, #8]
 80099fe:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009a00:	69fb      	ldr	r3, [r7, #28]
 8009a02:	3303      	adds	r3, #3
 8009a04:	089b      	lsrs	r3, r3, #2
 8009a06:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009a08:	e02b      	b.n	8009a62 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	695a      	ldr	r2, [r3, #20]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	699b      	ldr	r3, [r3, #24]
 8009a12:	1ad3      	subs	r3, r2, r3
 8009a14:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	69fa      	ldr	r2, [r7, #28]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d902      	bls.n	8009a26 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009a26:	69fb      	ldr	r3, [r7, #28]
 8009a28:	3303      	adds	r3, #3
 8009a2a:	089b      	lsrs	r3, r3, #2
 8009a2c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	68d9      	ldr	r1, [r3, #12]
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	b2da      	uxtb	r2, r3
 8009a36:	69fb      	ldr	r3, [r7, #28]
 8009a38:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	9300      	str	r3, [sp, #0]
 8009a42:	4603      	mov	r3, r0
 8009a44:	6978      	ldr	r0, [r7, #20]
 8009a46:	f004 fe06 	bl	800e656 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	68da      	ldr	r2, [r3, #12]
 8009a4e:	69fb      	ldr	r3, [r7, #28]
 8009a50:	441a      	add	r2, r3
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	699a      	ldr	r2, [r3, #24]
 8009a5a:	69fb      	ldr	r3, [r7, #28]
 8009a5c:	441a      	add	r2, r3
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	015a      	lsls	r2, r3, #5
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	4413      	add	r3, r2
 8009a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a6e:	699b      	ldr	r3, [r3, #24]
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	69ba      	ldr	r2, [r7, #24]
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d809      	bhi.n	8009a8c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	699a      	ldr	r2, [r3, #24]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d203      	bcs.n	8009a8c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	695b      	ldr	r3, [r3, #20]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d1be      	bne.n	8009a0a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	695a      	ldr	r2, [r3, #20]
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	699b      	ldr	r3, [r3, #24]
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d811      	bhi.n	8009abc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	f003 030f 	and.w	r3, r3, #15
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8009aa4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	43db      	mvns	r3, r3
 8009ab2:	6939      	ldr	r1, [r7, #16]
 8009ab4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ab8:	4013      	ands	r3, r2
 8009aba:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3720      	adds	r7, #32
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
	...

08009ac8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b086      	sub	sp, #24
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	333c      	adds	r3, #60	; 0x3c
 8009ae0:	3304      	adds	r3, #4
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	015a      	lsls	r2, r3, #5
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	4413      	add	r3, r2
 8009aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	691b      	ldr	r3, [r3, #16]
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	f040 80a0 	bne.w	8009c40 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	f003 0308 	and.w	r3, r3, #8
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d015      	beq.n	8009b36 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	4a72      	ldr	r2, [pc, #456]	; (8009cd8 <PCD_EP_OutXfrComplete_int+0x210>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	f240 80dd 	bls.w	8009cce <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	f000 80d7 	beq.w	8009cce <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	015a      	lsls	r2, r3, #5
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	4413      	add	r3, r2
 8009b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b32:	6093      	str	r3, [r2, #8]
 8009b34:	e0cb      	b.n	8009cce <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	f003 0320 	and.w	r3, r3, #32
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d009      	beq.n	8009b54 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	015a      	lsls	r2, r3, #5
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	4413      	add	r3, r2
 8009b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	2320      	movs	r3, #32
 8009b50:	6093      	str	r3, [r2, #8]
 8009b52:	e0bc      	b.n	8009cce <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	f040 80b7 	bne.w	8009cce <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	4a5d      	ldr	r2, [pc, #372]	; (8009cd8 <PCD_EP_OutXfrComplete_int+0x210>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d90f      	bls.n	8009b88 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d00a      	beq.n	8009b88 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	015a      	lsls	r2, r3, #5
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	4413      	add	r3, r2
 8009b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b7e:	461a      	mov	r2, r3
 8009b80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b84:	6093      	str	r3, [r2, #8]
 8009b86:	e0a2      	b.n	8009cce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8009b88:	6879      	ldr	r1, [r7, #4]
 8009b8a:	683a      	ldr	r2, [r7, #0]
 8009b8c:	4613      	mov	r3, r2
 8009b8e:	00db      	lsls	r3, r3, #3
 8009b90:	1a9b      	subs	r3, r3, r2
 8009b92:	009b      	lsls	r3, r3, #2
 8009b94:	440b      	add	r3, r1
 8009b96:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009b9a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	0159      	lsls	r1, r3, #5
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	440b      	add	r3, r1
 8009ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ba8:	691b      	ldr	r3, [r3, #16]
 8009baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8009bae:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	683a      	ldr	r2, [r7, #0]
 8009bb4:	4613      	mov	r3, r2
 8009bb6:	00db      	lsls	r3, r3, #3
 8009bb8:	1a9b      	subs	r3, r3, r2
 8009bba:	009b      	lsls	r3, r3, #2
 8009bbc:	4403      	add	r3, r0
 8009bbe:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009bc2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8009bc4:	6879      	ldr	r1, [r7, #4]
 8009bc6:	683a      	ldr	r2, [r7, #0]
 8009bc8:	4613      	mov	r3, r2
 8009bca:	00db      	lsls	r3, r3, #3
 8009bcc:	1a9b      	subs	r3, r3, r2
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	440b      	add	r3, r1
 8009bd2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009bd6:	6819      	ldr	r1, [r3, #0]
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	683a      	ldr	r2, [r7, #0]
 8009bdc:	4613      	mov	r3, r2
 8009bde:	00db      	lsls	r3, r3, #3
 8009be0:	1a9b      	subs	r3, r3, r2
 8009be2:	009b      	lsls	r3, r3, #2
 8009be4:	4403      	add	r3, r0
 8009be6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4419      	add	r1, r3
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	683a      	ldr	r2, [r7, #0]
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	00db      	lsls	r3, r3, #3
 8009bf6:	1a9b      	subs	r3, r3, r2
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	4403      	add	r3, r0
 8009bfc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009c00:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d114      	bne.n	8009c32 <PCD_EP_OutXfrComplete_int+0x16a>
 8009c08:	6879      	ldr	r1, [r7, #4]
 8009c0a:	683a      	ldr	r2, [r7, #0]
 8009c0c:	4613      	mov	r3, r2
 8009c0e:	00db      	lsls	r3, r3, #3
 8009c10:	1a9b      	subs	r3, r3, r2
 8009c12:	009b      	lsls	r3, r3, #2
 8009c14:	440b      	add	r3, r1
 8009c16:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d108      	bne.n	8009c32 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6818      	ldr	r0, [r3, #0]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	2101      	movs	r1, #1
 8009c2e:	f004 ffa9 	bl	800eb84 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	b2db      	uxtb	r3, r3
 8009c36:	4619      	mov	r1, r3
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f00e fcbb 	bl	80185b4 <HAL_PCD_DataOutStageCallback>
 8009c3e:	e046      	b.n	8009cce <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	4a26      	ldr	r2, [pc, #152]	; (8009cdc <PCD_EP_OutXfrComplete_int+0x214>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d124      	bne.n	8009c92 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d00a      	beq.n	8009c68 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	015a      	lsls	r2, r3, #5
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	4413      	add	r3, r2
 8009c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c5e:	461a      	mov	r2, r3
 8009c60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c64:	6093      	str	r3, [r2, #8]
 8009c66:	e032      	b.n	8009cce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	f003 0320 	and.w	r3, r3, #32
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d008      	beq.n	8009c84 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	015a      	lsls	r2, r3, #5
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	4413      	add	r3, r2
 8009c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c7e:	461a      	mov	r2, r3
 8009c80:	2320      	movs	r3, #32
 8009c82:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	b2db      	uxtb	r3, r3
 8009c88:	4619      	mov	r1, r3
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f00e fc92 	bl	80185b4 <HAL_PCD_DataOutStageCallback>
 8009c90:	e01d      	b.n	8009cce <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d114      	bne.n	8009cc2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8009c98:	6879      	ldr	r1, [r7, #4]
 8009c9a:	683a      	ldr	r2, [r7, #0]
 8009c9c:	4613      	mov	r3, r2
 8009c9e:	00db      	lsls	r3, r3, #3
 8009ca0:	1a9b      	subs	r3, r3, r2
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	440b      	add	r3, r1
 8009ca6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d108      	bne.n	8009cc2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6818      	ldr	r0, [r3, #0]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009cba:	461a      	mov	r2, r3
 8009cbc:	2100      	movs	r1, #0
 8009cbe:	f004 ff61 	bl	800eb84 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f00e fc73 	bl	80185b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009cce:	2300      	movs	r3, #0
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3718      	adds	r7, #24
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}
 8009cd8:	4f54300a 	.word	0x4f54300a
 8009cdc:	4f54310a 	.word	0x4f54310a

08009ce0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b086      	sub	sp, #24
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	333c      	adds	r3, #60	; 0x3c
 8009cf8:	3304      	adds	r3, #4
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	015a      	lsls	r2, r3, #5
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	4413      	add	r3, r2
 8009d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d0a:	689b      	ldr	r3, [r3, #8]
 8009d0c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	4a15      	ldr	r2, [pc, #84]	; (8009d68 <PCD_EP_OutSetupPacket_int+0x88>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d90e      	bls.n	8009d34 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d009      	beq.n	8009d34 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	015a      	lsls	r2, r3, #5
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	4413      	add	r3, r2
 8009d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d32:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f00e fc2b 	bl	8018590 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	4a0a      	ldr	r2, [pc, #40]	; (8009d68 <PCD_EP_OutSetupPacket_int+0x88>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d90c      	bls.n	8009d5c <PCD_EP_OutSetupPacket_int+0x7c>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	691b      	ldr	r3, [r3, #16]
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d108      	bne.n	8009d5c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6818      	ldr	r0, [r3, #0]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009d54:	461a      	mov	r2, r3
 8009d56:	2101      	movs	r1, #1
 8009d58:	f004 ff14 	bl	800eb84 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009d5c:	2300      	movs	r3, #0
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3718      	adds	r7, #24
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
 8009d66:	bf00      	nop
 8009d68:	4f54300a 	.word	0x4f54300a

08009d6c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b085      	sub	sp, #20
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	460b      	mov	r3, r1
 8009d76:	70fb      	strb	r3, [r7, #3]
 8009d78:	4613      	mov	r3, r2
 8009d7a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d82:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009d84:	78fb      	ldrb	r3, [r7, #3]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d107      	bne.n	8009d9a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009d8a:	883b      	ldrh	r3, [r7, #0]
 8009d8c:	0419      	lsls	r1, r3, #16
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	68ba      	ldr	r2, [r7, #8]
 8009d94:	430a      	orrs	r2, r1
 8009d96:	629a      	str	r2, [r3, #40]	; 0x28
 8009d98:	e028      	b.n	8009dec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009da0:	0c1b      	lsrs	r3, r3, #16
 8009da2:	68ba      	ldr	r2, [r7, #8]
 8009da4:	4413      	add	r3, r2
 8009da6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009da8:	2300      	movs	r3, #0
 8009daa:	73fb      	strb	r3, [r7, #15]
 8009dac:	e00d      	b.n	8009dca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681a      	ldr	r2, [r3, #0]
 8009db2:	7bfb      	ldrb	r3, [r7, #15]
 8009db4:	3340      	adds	r3, #64	; 0x40
 8009db6:	009b      	lsls	r3, r3, #2
 8009db8:	4413      	add	r3, r2
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	0c1b      	lsrs	r3, r3, #16
 8009dbe:	68ba      	ldr	r2, [r7, #8]
 8009dc0:	4413      	add	r3, r2
 8009dc2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009dc4:	7bfb      	ldrb	r3, [r7, #15]
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	73fb      	strb	r3, [r7, #15]
 8009dca:	7bfa      	ldrb	r2, [r7, #15]
 8009dcc:	78fb      	ldrb	r3, [r7, #3]
 8009dce:	3b01      	subs	r3, #1
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d3ec      	bcc.n	8009dae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009dd4:	883b      	ldrh	r3, [r7, #0]
 8009dd6:	0418      	lsls	r0, r3, #16
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6819      	ldr	r1, [r3, #0]
 8009ddc:	78fb      	ldrb	r3, [r7, #3]
 8009dde:	3b01      	subs	r3, #1
 8009de0:	68ba      	ldr	r2, [r7, #8]
 8009de2:	4302      	orrs	r2, r0
 8009de4:	3340      	adds	r3, #64	; 0x40
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	440b      	add	r3, r1
 8009dea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009dec:	2300      	movs	r3, #0
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3714      	adds	r7, #20
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr

08009dfa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009dfa:	b480      	push	{r7}
 8009dfc:	b083      	sub	sp, #12
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
 8009e02:	460b      	mov	r3, r1
 8009e04:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	887a      	ldrh	r2, [r7, #2]
 8009e0c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009e0e:	2300      	movs	r3, #0
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	370c      	adds	r7, #12
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	460b      	mov	r3, r1
 8009e26:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009e28:	bf00      	nop
 8009e2a:	370c      	adds	r7, #12
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8009e3c:	4b05      	ldr	r3, [pc, #20]	; (8009e54 <HAL_PWR_EnableWakeUpPin+0x20>)
 8009e3e:	685a      	ldr	r2, [r3, #4]
 8009e40:	4904      	ldr	r1, [pc, #16]	; (8009e54 <HAL_PWR_EnableWakeUpPin+0x20>)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	4313      	orrs	r3, r2
 8009e46:	604b      	str	r3, [r1, #4]
}
 8009e48:	bf00      	nop
 8009e4a:	370c      	adds	r7, #12
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr
 8009e54:	40007000 	.word	0x40007000

08009e58 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b083      	sub	sp, #12
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8009e60:	4b06      	ldr	r3, [pc, #24]	; (8009e7c <HAL_PWR_DisableWakeUpPin+0x24>)
 8009e62:	685a      	ldr	r2, [r3, #4]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	43db      	mvns	r3, r3
 8009e68:	4904      	ldr	r1, [pc, #16]	; (8009e7c <HAL_PWR_DisableWakeUpPin+0x24>)
 8009e6a:	4013      	ands	r3, r2
 8009e6c:	604b      	str	r3, [r1, #4]
}
 8009e6e:	bf00      	nop
 8009e70:	370c      	adds	r7, #12
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr
 8009e7a:	bf00      	nop
 8009e7c:	40007000 	.word	0x40007000

08009e80 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8009e80:	b480      	push	{r7}
 8009e82:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8009e84:	4b08      	ldr	r3, [pc, #32]	; (8009ea8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4a07      	ldr	r2, [pc, #28]	; (8009ea8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8009e8a:	f043 0302 	orr.w	r3, r3, #2
 8009e8e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009e90:	4b06      	ldr	r3, [pc, #24]	; (8009eac <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8009e92:	691b      	ldr	r3, [r3, #16]
 8009e94:	4a05      	ldr	r2, [pc, #20]	; (8009eac <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8009e96:	f043 0304 	orr.w	r3, r3, #4
 8009e9a:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8009e9c:	bf30      	wfi
}
 8009e9e:	bf00      	nop
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr
 8009ea8:	40007000 	.word	0x40007000
 8009eac:	e000ed00 	.word	0xe000ed00

08009eb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b086      	sub	sp, #24
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d101      	bne.n	8009ec2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e264      	b.n	800a38c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f003 0301 	and.w	r3, r3, #1
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d075      	beq.n	8009fba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009ece:	4ba3      	ldr	r3, [pc, #652]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009ed0:	689b      	ldr	r3, [r3, #8]
 8009ed2:	f003 030c 	and.w	r3, r3, #12
 8009ed6:	2b04      	cmp	r3, #4
 8009ed8:	d00c      	beq.n	8009ef4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009eda:	4ba0      	ldr	r3, [pc, #640]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009edc:	689b      	ldr	r3, [r3, #8]
 8009ede:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009ee2:	2b08      	cmp	r3, #8
 8009ee4:	d112      	bne.n	8009f0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009ee6:	4b9d      	ldr	r3, [pc, #628]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009eee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ef2:	d10b      	bne.n	8009f0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ef4:	4b99      	ldr	r3, [pc, #612]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d05b      	beq.n	8009fb8 <HAL_RCC_OscConfig+0x108>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d157      	bne.n	8009fb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	e23f      	b.n	800a38c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f14:	d106      	bne.n	8009f24 <HAL_RCC_OscConfig+0x74>
 8009f16:	4b91      	ldr	r3, [pc, #580]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a90      	ldr	r2, [pc, #576]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f20:	6013      	str	r3, [r2, #0]
 8009f22:	e01d      	b.n	8009f60 <HAL_RCC_OscConfig+0xb0>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009f2c:	d10c      	bne.n	8009f48 <HAL_RCC_OscConfig+0x98>
 8009f2e:	4b8b      	ldr	r3, [pc, #556]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a8a      	ldr	r2, [pc, #552]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009f38:	6013      	str	r3, [r2, #0]
 8009f3a:	4b88      	ldr	r3, [pc, #544]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4a87      	ldr	r2, [pc, #540]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f44:	6013      	str	r3, [r2, #0]
 8009f46:	e00b      	b.n	8009f60 <HAL_RCC_OscConfig+0xb0>
 8009f48:	4b84      	ldr	r3, [pc, #528]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a83      	ldr	r2, [pc, #524]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f52:	6013      	str	r3, [r2, #0]
 8009f54:	4b81      	ldr	r3, [pc, #516]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a80      	ldr	r2, [pc, #512]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d013      	beq.n	8009f90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f68:	f7fc ffc4 	bl	8006ef4 <HAL_GetTick>
 8009f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f6e:	e008      	b.n	8009f82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009f70:	f7fc ffc0 	bl	8006ef4 <HAL_GetTick>
 8009f74:	4602      	mov	r2, r0
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	1ad3      	subs	r3, r2, r3
 8009f7a:	2b64      	cmp	r3, #100	; 0x64
 8009f7c:	d901      	bls.n	8009f82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009f7e:	2303      	movs	r3, #3
 8009f80:	e204      	b.n	800a38c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f82:	4b76      	ldr	r3, [pc, #472]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d0f0      	beq.n	8009f70 <HAL_RCC_OscConfig+0xc0>
 8009f8e:	e014      	b.n	8009fba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f90:	f7fc ffb0 	bl	8006ef4 <HAL_GetTick>
 8009f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009f96:	e008      	b.n	8009faa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009f98:	f7fc ffac 	bl	8006ef4 <HAL_GetTick>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	1ad3      	subs	r3, r2, r3
 8009fa2:	2b64      	cmp	r3, #100	; 0x64
 8009fa4:	d901      	bls.n	8009faa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009fa6:	2303      	movs	r3, #3
 8009fa8:	e1f0      	b.n	800a38c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009faa:	4b6c      	ldr	r3, [pc, #432]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d1f0      	bne.n	8009f98 <HAL_RCC_OscConfig+0xe8>
 8009fb6:	e000      	b.n	8009fba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f003 0302 	and.w	r3, r3, #2
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d063      	beq.n	800a08e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009fc6:	4b65      	ldr	r3, [pc, #404]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009fc8:	689b      	ldr	r3, [r3, #8]
 8009fca:	f003 030c 	and.w	r3, r3, #12
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d00b      	beq.n	8009fea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009fd2:	4b62      	ldr	r3, [pc, #392]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009fda:	2b08      	cmp	r3, #8
 8009fdc:	d11c      	bne.n	800a018 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009fde:	4b5f      	ldr	r3, [pc, #380]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d116      	bne.n	800a018 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009fea:	4b5c      	ldr	r3, [pc, #368]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f003 0302 	and.w	r3, r3, #2
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d005      	beq.n	800a002 <HAL_RCC_OscConfig+0x152>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	d001      	beq.n	800a002 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009ffe:	2301      	movs	r3, #1
 800a000:	e1c4      	b.n	800a38c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a002:	4b56      	ldr	r3, [pc, #344]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	691b      	ldr	r3, [r3, #16]
 800a00e:	00db      	lsls	r3, r3, #3
 800a010:	4952      	ldr	r1, [pc, #328]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 800a012:	4313      	orrs	r3, r2
 800a014:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a016:	e03a      	b.n	800a08e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	68db      	ldr	r3, [r3, #12]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d020      	beq.n	800a062 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a020:	4b4f      	ldr	r3, [pc, #316]	; (800a160 <HAL_RCC_OscConfig+0x2b0>)
 800a022:	2201      	movs	r2, #1
 800a024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a026:	f7fc ff65 	bl	8006ef4 <HAL_GetTick>
 800a02a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a02c:	e008      	b.n	800a040 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a02e:	f7fc ff61 	bl	8006ef4 <HAL_GetTick>
 800a032:	4602      	mov	r2, r0
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	1ad3      	subs	r3, r2, r3
 800a038:	2b02      	cmp	r3, #2
 800a03a:	d901      	bls.n	800a040 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a03c:	2303      	movs	r3, #3
 800a03e:	e1a5      	b.n	800a38c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a040:	4b46      	ldr	r3, [pc, #280]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f003 0302 	and.w	r3, r3, #2
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d0f0      	beq.n	800a02e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a04c:	4b43      	ldr	r3, [pc, #268]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	691b      	ldr	r3, [r3, #16]
 800a058:	00db      	lsls	r3, r3, #3
 800a05a:	4940      	ldr	r1, [pc, #256]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 800a05c:	4313      	orrs	r3, r2
 800a05e:	600b      	str	r3, [r1, #0]
 800a060:	e015      	b.n	800a08e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a062:	4b3f      	ldr	r3, [pc, #252]	; (800a160 <HAL_RCC_OscConfig+0x2b0>)
 800a064:	2200      	movs	r2, #0
 800a066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a068:	f7fc ff44 	bl	8006ef4 <HAL_GetTick>
 800a06c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a06e:	e008      	b.n	800a082 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a070:	f7fc ff40 	bl	8006ef4 <HAL_GetTick>
 800a074:	4602      	mov	r2, r0
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	1ad3      	subs	r3, r2, r3
 800a07a:	2b02      	cmp	r3, #2
 800a07c:	d901      	bls.n	800a082 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a07e:	2303      	movs	r3, #3
 800a080:	e184      	b.n	800a38c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a082:	4b36      	ldr	r3, [pc, #216]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f003 0302 	and.w	r3, r3, #2
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d1f0      	bne.n	800a070 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f003 0308 	and.w	r3, r3, #8
 800a096:	2b00      	cmp	r3, #0
 800a098:	d030      	beq.n	800a0fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	695b      	ldr	r3, [r3, #20]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d016      	beq.n	800a0d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a0a2:	4b30      	ldr	r3, [pc, #192]	; (800a164 <HAL_RCC_OscConfig+0x2b4>)
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0a8:	f7fc ff24 	bl	8006ef4 <HAL_GetTick>
 800a0ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a0ae:	e008      	b.n	800a0c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a0b0:	f7fc ff20 	bl	8006ef4 <HAL_GetTick>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	1ad3      	subs	r3, r2, r3
 800a0ba:	2b02      	cmp	r3, #2
 800a0bc:	d901      	bls.n	800a0c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a0be:	2303      	movs	r3, #3
 800a0c0:	e164      	b.n	800a38c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a0c2:	4b26      	ldr	r3, [pc, #152]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 800a0c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0c6:	f003 0302 	and.w	r3, r3, #2
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d0f0      	beq.n	800a0b0 <HAL_RCC_OscConfig+0x200>
 800a0ce:	e015      	b.n	800a0fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a0d0:	4b24      	ldr	r3, [pc, #144]	; (800a164 <HAL_RCC_OscConfig+0x2b4>)
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a0d6:	f7fc ff0d 	bl	8006ef4 <HAL_GetTick>
 800a0da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a0dc:	e008      	b.n	800a0f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a0de:	f7fc ff09 	bl	8006ef4 <HAL_GetTick>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	1ad3      	subs	r3, r2, r3
 800a0e8:	2b02      	cmp	r3, #2
 800a0ea:	d901      	bls.n	800a0f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a0ec:	2303      	movs	r3, #3
 800a0ee:	e14d      	b.n	800a38c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a0f0:	4b1a      	ldr	r3, [pc, #104]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 800a0f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0f4:	f003 0302 	and.w	r3, r3, #2
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d1f0      	bne.n	800a0de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f003 0304 	and.w	r3, r3, #4
 800a104:	2b00      	cmp	r3, #0
 800a106:	f000 80a0 	beq.w	800a24a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a10a:	2300      	movs	r3, #0
 800a10c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a10e:	4b13      	ldr	r3, [pc, #76]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 800a110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a116:	2b00      	cmp	r3, #0
 800a118:	d10f      	bne.n	800a13a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a11a:	2300      	movs	r3, #0
 800a11c:	60bb      	str	r3, [r7, #8]
 800a11e:	4b0f      	ldr	r3, [pc, #60]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 800a120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a122:	4a0e      	ldr	r2, [pc, #56]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 800a124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a128:	6413      	str	r3, [r2, #64]	; 0x40
 800a12a:	4b0c      	ldr	r3, [pc, #48]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 800a12c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a12e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a132:	60bb      	str	r3, [r7, #8]
 800a134:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a136:	2301      	movs	r3, #1
 800a138:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a13a:	4b0b      	ldr	r3, [pc, #44]	; (800a168 <HAL_RCC_OscConfig+0x2b8>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a142:	2b00      	cmp	r3, #0
 800a144:	d121      	bne.n	800a18a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a146:	4b08      	ldr	r3, [pc, #32]	; (800a168 <HAL_RCC_OscConfig+0x2b8>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a07      	ldr	r2, [pc, #28]	; (800a168 <HAL_RCC_OscConfig+0x2b8>)
 800a14c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a150:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a152:	f7fc fecf 	bl	8006ef4 <HAL_GetTick>
 800a156:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a158:	e011      	b.n	800a17e <HAL_RCC_OscConfig+0x2ce>
 800a15a:	bf00      	nop
 800a15c:	40023800 	.word	0x40023800
 800a160:	42470000 	.word	0x42470000
 800a164:	42470e80 	.word	0x42470e80
 800a168:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a16c:	f7fc fec2 	bl	8006ef4 <HAL_GetTick>
 800a170:	4602      	mov	r2, r0
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	1ad3      	subs	r3, r2, r3
 800a176:	2b02      	cmp	r3, #2
 800a178:	d901      	bls.n	800a17e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800a17a:	2303      	movs	r3, #3
 800a17c:	e106      	b.n	800a38c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a17e:	4b85      	ldr	r3, [pc, #532]	; (800a394 <HAL_RCC_OscConfig+0x4e4>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a186:	2b00      	cmp	r3, #0
 800a188:	d0f0      	beq.n	800a16c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d106      	bne.n	800a1a0 <HAL_RCC_OscConfig+0x2f0>
 800a192:	4b81      	ldr	r3, [pc, #516]	; (800a398 <HAL_RCC_OscConfig+0x4e8>)
 800a194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a196:	4a80      	ldr	r2, [pc, #512]	; (800a398 <HAL_RCC_OscConfig+0x4e8>)
 800a198:	f043 0301 	orr.w	r3, r3, #1
 800a19c:	6713      	str	r3, [r2, #112]	; 0x70
 800a19e:	e01c      	b.n	800a1da <HAL_RCC_OscConfig+0x32a>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	689b      	ldr	r3, [r3, #8]
 800a1a4:	2b05      	cmp	r3, #5
 800a1a6:	d10c      	bne.n	800a1c2 <HAL_RCC_OscConfig+0x312>
 800a1a8:	4b7b      	ldr	r3, [pc, #492]	; (800a398 <HAL_RCC_OscConfig+0x4e8>)
 800a1aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ac:	4a7a      	ldr	r2, [pc, #488]	; (800a398 <HAL_RCC_OscConfig+0x4e8>)
 800a1ae:	f043 0304 	orr.w	r3, r3, #4
 800a1b2:	6713      	str	r3, [r2, #112]	; 0x70
 800a1b4:	4b78      	ldr	r3, [pc, #480]	; (800a398 <HAL_RCC_OscConfig+0x4e8>)
 800a1b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1b8:	4a77      	ldr	r2, [pc, #476]	; (800a398 <HAL_RCC_OscConfig+0x4e8>)
 800a1ba:	f043 0301 	orr.w	r3, r3, #1
 800a1be:	6713      	str	r3, [r2, #112]	; 0x70
 800a1c0:	e00b      	b.n	800a1da <HAL_RCC_OscConfig+0x32a>
 800a1c2:	4b75      	ldr	r3, [pc, #468]	; (800a398 <HAL_RCC_OscConfig+0x4e8>)
 800a1c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1c6:	4a74      	ldr	r2, [pc, #464]	; (800a398 <HAL_RCC_OscConfig+0x4e8>)
 800a1c8:	f023 0301 	bic.w	r3, r3, #1
 800a1cc:	6713      	str	r3, [r2, #112]	; 0x70
 800a1ce:	4b72      	ldr	r3, [pc, #456]	; (800a398 <HAL_RCC_OscConfig+0x4e8>)
 800a1d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1d2:	4a71      	ldr	r2, [pc, #452]	; (800a398 <HAL_RCC_OscConfig+0x4e8>)
 800a1d4:	f023 0304 	bic.w	r3, r3, #4
 800a1d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d015      	beq.n	800a20e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1e2:	f7fc fe87 	bl	8006ef4 <HAL_GetTick>
 800a1e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a1e8:	e00a      	b.n	800a200 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a1ea:	f7fc fe83 	bl	8006ef4 <HAL_GetTick>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	1ad3      	subs	r3, r2, r3
 800a1f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d901      	bls.n	800a200 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800a1fc:	2303      	movs	r3, #3
 800a1fe:	e0c5      	b.n	800a38c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a200:	4b65      	ldr	r3, [pc, #404]	; (800a398 <HAL_RCC_OscConfig+0x4e8>)
 800a202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a204:	f003 0302 	and.w	r3, r3, #2
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d0ee      	beq.n	800a1ea <HAL_RCC_OscConfig+0x33a>
 800a20c:	e014      	b.n	800a238 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a20e:	f7fc fe71 	bl	8006ef4 <HAL_GetTick>
 800a212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a214:	e00a      	b.n	800a22c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a216:	f7fc fe6d 	bl	8006ef4 <HAL_GetTick>
 800a21a:	4602      	mov	r2, r0
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	1ad3      	subs	r3, r2, r3
 800a220:	f241 3288 	movw	r2, #5000	; 0x1388
 800a224:	4293      	cmp	r3, r2
 800a226:	d901      	bls.n	800a22c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800a228:	2303      	movs	r3, #3
 800a22a:	e0af      	b.n	800a38c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a22c:	4b5a      	ldr	r3, [pc, #360]	; (800a398 <HAL_RCC_OscConfig+0x4e8>)
 800a22e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a230:	f003 0302 	and.w	r3, r3, #2
 800a234:	2b00      	cmp	r3, #0
 800a236:	d1ee      	bne.n	800a216 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a238:	7dfb      	ldrb	r3, [r7, #23]
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d105      	bne.n	800a24a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a23e:	4b56      	ldr	r3, [pc, #344]	; (800a398 <HAL_RCC_OscConfig+0x4e8>)
 800a240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a242:	4a55      	ldr	r2, [pc, #340]	; (800a398 <HAL_RCC_OscConfig+0x4e8>)
 800a244:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a248:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	699b      	ldr	r3, [r3, #24]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	f000 809b 	beq.w	800a38a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a254:	4b50      	ldr	r3, [pc, #320]	; (800a398 <HAL_RCC_OscConfig+0x4e8>)
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	f003 030c 	and.w	r3, r3, #12
 800a25c:	2b08      	cmp	r3, #8
 800a25e:	d05c      	beq.n	800a31a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	699b      	ldr	r3, [r3, #24]
 800a264:	2b02      	cmp	r3, #2
 800a266:	d141      	bne.n	800a2ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a268:	4b4c      	ldr	r3, [pc, #304]	; (800a39c <HAL_RCC_OscConfig+0x4ec>)
 800a26a:	2200      	movs	r2, #0
 800a26c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a26e:	f7fc fe41 	bl	8006ef4 <HAL_GetTick>
 800a272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a274:	e008      	b.n	800a288 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a276:	f7fc fe3d 	bl	8006ef4 <HAL_GetTick>
 800a27a:	4602      	mov	r2, r0
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	1ad3      	subs	r3, r2, r3
 800a280:	2b02      	cmp	r3, #2
 800a282:	d901      	bls.n	800a288 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800a284:	2303      	movs	r3, #3
 800a286:	e081      	b.n	800a38c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a288:	4b43      	ldr	r3, [pc, #268]	; (800a398 <HAL_RCC_OscConfig+0x4e8>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a290:	2b00      	cmp	r3, #0
 800a292:	d1f0      	bne.n	800a276 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	69da      	ldr	r2, [r3, #28]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6a1b      	ldr	r3, [r3, #32]
 800a29c:	431a      	orrs	r2, r3
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a2:	019b      	lsls	r3, r3, #6
 800a2a4:	431a      	orrs	r2, r3
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2aa:	085b      	lsrs	r3, r3, #1
 800a2ac:	3b01      	subs	r3, #1
 800a2ae:	041b      	lsls	r3, r3, #16
 800a2b0:	431a      	orrs	r2, r3
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b6:	061b      	lsls	r3, r3, #24
 800a2b8:	4937      	ldr	r1, [pc, #220]	; (800a398 <HAL_RCC_OscConfig+0x4e8>)
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a2be:	4b37      	ldr	r3, [pc, #220]	; (800a39c <HAL_RCC_OscConfig+0x4ec>)
 800a2c0:	2201      	movs	r2, #1
 800a2c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a2c4:	f7fc fe16 	bl	8006ef4 <HAL_GetTick>
 800a2c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a2ca:	e008      	b.n	800a2de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a2cc:	f7fc fe12 	bl	8006ef4 <HAL_GetTick>
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	1ad3      	subs	r3, r2, r3
 800a2d6:	2b02      	cmp	r3, #2
 800a2d8:	d901      	bls.n	800a2de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800a2da:	2303      	movs	r3, #3
 800a2dc:	e056      	b.n	800a38c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a2de:	4b2e      	ldr	r3, [pc, #184]	; (800a398 <HAL_RCC_OscConfig+0x4e8>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d0f0      	beq.n	800a2cc <HAL_RCC_OscConfig+0x41c>
 800a2ea:	e04e      	b.n	800a38a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a2ec:	4b2b      	ldr	r3, [pc, #172]	; (800a39c <HAL_RCC_OscConfig+0x4ec>)
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a2f2:	f7fc fdff 	bl	8006ef4 <HAL_GetTick>
 800a2f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a2f8:	e008      	b.n	800a30c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a2fa:	f7fc fdfb 	bl	8006ef4 <HAL_GetTick>
 800a2fe:	4602      	mov	r2, r0
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	1ad3      	subs	r3, r2, r3
 800a304:	2b02      	cmp	r3, #2
 800a306:	d901      	bls.n	800a30c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800a308:	2303      	movs	r3, #3
 800a30a:	e03f      	b.n	800a38c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a30c:	4b22      	ldr	r3, [pc, #136]	; (800a398 <HAL_RCC_OscConfig+0x4e8>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a314:	2b00      	cmp	r3, #0
 800a316:	d1f0      	bne.n	800a2fa <HAL_RCC_OscConfig+0x44a>
 800a318:	e037      	b.n	800a38a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	699b      	ldr	r3, [r3, #24]
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d101      	bne.n	800a326 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800a322:	2301      	movs	r3, #1
 800a324:	e032      	b.n	800a38c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a326:	4b1c      	ldr	r3, [pc, #112]	; (800a398 <HAL_RCC_OscConfig+0x4e8>)
 800a328:	685b      	ldr	r3, [r3, #4]
 800a32a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	699b      	ldr	r3, [r3, #24]
 800a330:	2b01      	cmp	r3, #1
 800a332:	d028      	beq.n	800a386 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a33e:	429a      	cmp	r2, r3
 800a340:	d121      	bne.n	800a386 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d11a      	bne.n	800a386 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a350:	68fa      	ldr	r2, [r7, #12]
 800a352:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a356:	4013      	ands	r3, r2
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a35c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a35e:	4293      	cmp	r3, r2
 800a360:	d111      	bne.n	800a386 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a36c:	085b      	lsrs	r3, r3, #1
 800a36e:	3b01      	subs	r3, #1
 800a370:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a372:	429a      	cmp	r2, r3
 800a374:	d107      	bne.n	800a386 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a380:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a382:	429a      	cmp	r2, r3
 800a384:	d001      	beq.n	800a38a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800a386:	2301      	movs	r3, #1
 800a388:	e000      	b.n	800a38c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800a38a:	2300      	movs	r3, #0
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3718      	adds	r7, #24
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}
 800a394:	40007000 	.word	0x40007000
 800a398:	40023800 	.word	0x40023800
 800a39c:	42470060 	.word	0x42470060

0800a3a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d101      	bne.n	800a3b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	e0cc      	b.n	800a54e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a3b4:	4b68      	ldr	r3, [pc, #416]	; (800a558 <HAL_RCC_ClockConfig+0x1b8>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f003 030f 	and.w	r3, r3, #15
 800a3bc:	683a      	ldr	r2, [r7, #0]
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d90c      	bls.n	800a3dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3c2:	4b65      	ldr	r3, [pc, #404]	; (800a558 <HAL_RCC_ClockConfig+0x1b8>)
 800a3c4:	683a      	ldr	r2, [r7, #0]
 800a3c6:	b2d2      	uxtb	r2, r2
 800a3c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a3ca:	4b63      	ldr	r3, [pc, #396]	; (800a558 <HAL_RCC_ClockConfig+0x1b8>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f003 030f 	and.w	r3, r3, #15
 800a3d2:	683a      	ldr	r2, [r7, #0]
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d001      	beq.n	800a3dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	e0b8      	b.n	800a54e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f003 0302 	and.w	r3, r3, #2
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d020      	beq.n	800a42a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f003 0304 	and.w	r3, r3, #4
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d005      	beq.n	800a400 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a3f4:	4b59      	ldr	r3, [pc, #356]	; (800a55c <HAL_RCC_ClockConfig+0x1bc>)
 800a3f6:	689b      	ldr	r3, [r3, #8]
 800a3f8:	4a58      	ldr	r2, [pc, #352]	; (800a55c <HAL_RCC_ClockConfig+0x1bc>)
 800a3fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a3fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f003 0308 	and.w	r3, r3, #8
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d005      	beq.n	800a418 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a40c:	4b53      	ldr	r3, [pc, #332]	; (800a55c <HAL_RCC_ClockConfig+0x1bc>)
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	4a52      	ldr	r2, [pc, #328]	; (800a55c <HAL_RCC_ClockConfig+0x1bc>)
 800a412:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a416:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a418:	4b50      	ldr	r3, [pc, #320]	; (800a55c <HAL_RCC_ClockConfig+0x1bc>)
 800a41a:	689b      	ldr	r3, [r3, #8]
 800a41c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	689b      	ldr	r3, [r3, #8]
 800a424:	494d      	ldr	r1, [pc, #308]	; (800a55c <HAL_RCC_ClockConfig+0x1bc>)
 800a426:	4313      	orrs	r3, r2
 800a428:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f003 0301 	and.w	r3, r3, #1
 800a432:	2b00      	cmp	r3, #0
 800a434:	d044      	beq.n	800a4c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d107      	bne.n	800a44e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a43e:	4b47      	ldr	r3, [pc, #284]	; (800a55c <HAL_RCC_ClockConfig+0x1bc>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a446:	2b00      	cmp	r3, #0
 800a448:	d119      	bne.n	800a47e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a44a:	2301      	movs	r3, #1
 800a44c:	e07f      	b.n	800a54e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	2b02      	cmp	r3, #2
 800a454:	d003      	beq.n	800a45e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a45a:	2b03      	cmp	r3, #3
 800a45c:	d107      	bne.n	800a46e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a45e:	4b3f      	ldr	r3, [pc, #252]	; (800a55c <HAL_RCC_ClockConfig+0x1bc>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a466:	2b00      	cmp	r3, #0
 800a468:	d109      	bne.n	800a47e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a46a:	2301      	movs	r3, #1
 800a46c:	e06f      	b.n	800a54e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a46e:	4b3b      	ldr	r3, [pc, #236]	; (800a55c <HAL_RCC_ClockConfig+0x1bc>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f003 0302 	and.w	r3, r3, #2
 800a476:	2b00      	cmp	r3, #0
 800a478:	d101      	bne.n	800a47e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a47a:	2301      	movs	r3, #1
 800a47c:	e067      	b.n	800a54e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a47e:	4b37      	ldr	r3, [pc, #220]	; (800a55c <HAL_RCC_ClockConfig+0x1bc>)
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	f023 0203 	bic.w	r2, r3, #3
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	4934      	ldr	r1, [pc, #208]	; (800a55c <HAL_RCC_ClockConfig+0x1bc>)
 800a48c:	4313      	orrs	r3, r2
 800a48e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a490:	f7fc fd30 	bl	8006ef4 <HAL_GetTick>
 800a494:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a496:	e00a      	b.n	800a4ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a498:	f7fc fd2c 	bl	8006ef4 <HAL_GetTick>
 800a49c:	4602      	mov	r2, r0
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	1ad3      	subs	r3, r2, r3
 800a4a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d901      	bls.n	800a4ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a4aa:	2303      	movs	r3, #3
 800a4ac:	e04f      	b.n	800a54e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a4ae:	4b2b      	ldr	r3, [pc, #172]	; (800a55c <HAL_RCC_ClockConfig+0x1bc>)
 800a4b0:	689b      	ldr	r3, [r3, #8]
 800a4b2:	f003 020c 	and.w	r2, r3, #12
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	009b      	lsls	r3, r3, #2
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d1eb      	bne.n	800a498 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a4c0:	4b25      	ldr	r3, [pc, #148]	; (800a558 <HAL_RCC_ClockConfig+0x1b8>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f003 030f 	and.w	r3, r3, #15
 800a4c8:	683a      	ldr	r2, [r7, #0]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d20c      	bcs.n	800a4e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a4ce:	4b22      	ldr	r3, [pc, #136]	; (800a558 <HAL_RCC_ClockConfig+0x1b8>)
 800a4d0:	683a      	ldr	r2, [r7, #0]
 800a4d2:	b2d2      	uxtb	r2, r2
 800a4d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a4d6:	4b20      	ldr	r3, [pc, #128]	; (800a558 <HAL_RCC_ClockConfig+0x1b8>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f003 030f 	and.w	r3, r3, #15
 800a4de:	683a      	ldr	r2, [r7, #0]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d001      	beq.n	800a4e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	e032      	b.n	800a54e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f003 0304 	and.w	r3, r3, #4
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d008      	beq.n	800a506 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a4f4:	4b19      	ldr	r3, [pc, #100]	; (800a55c <HAL_RCC_ClockConfig+0x1bc>)
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	68db      	ldr	r3, [r3, #12]
 800a500:	4916      	ldr	r1, [pc, #88]	; (800a55c <HAL_RCC_ClockConfig+0x1bc>)
 800a502:	4313      	orrs	r3, r2
 800a504:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f003 0308 	and.w	r3, r3, #8
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d009      	beq.n	800a526 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a512:	4b12      	ldr	r3, [pc, #72]	; (800a55c <HAL_RCC_ClockConfig+0x1bc>)
 800a514:	689b      	ldr	r3, [r3, #8]
 800a516:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	691b      	ldr	r3, [r3, #16]
 800a51e:	00db      	lsls	r3, r3, #3
 800a520:	490e      	ldr	r1, [pc, #56]	; (800a55c <HAL_RCC_ClockConfig+0x1bc>)
 800a522:	4313      	orrs	r3, r2
 800a524:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a526:	f000 f821 	bl	800a56c <HAL_RCC_GetSysClockFreq>
 800a52a:	4602      	mov	r2, r0
 800a52c:	4b0b      	ldr	r3, [pc, #44]	; (800a55c <HAL_RCC_ClockConfig+0x1bc>)
 800a52e:	689b      	ldr	r3, [r3, #8]
 800a530:	091b      	lsrs	r3, r3, #4
 800a532:	f003 030f 	and.w	r3, r3, #15
 800a536:	490a      	ldr	r1, [pc, #40]	; (800a560 <HAL_RCC_ClockConfig+0x1c0>)
 800a538:	5ccb      	ldrb	r3, [r1, r3]
 800a53a:	fa22 f303 	lsr.w	r3, r2, r3
 800a53e:	4a09      	ldr	r2, [pc, #36]	; (800a564 <HAL_RCC_ClockConfig+0x1c4>)
 800a540:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a542:	4b09      	ldr	r3, [pc, #36]	; (800a568 <HAL_RCC_ClockConfig+0x1c8>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4618      	mov	r0, r3
 800a548:	f7f8 fd66 	bl	8003018 <HAL_InitTick>

  return HAL_OK;
 800a54c:	2300      	movs	r3, #0
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3710      	adds	r7, #16
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
 800a556:	bf00      	nop
 800a558:	40023c00 	.word	0x40023c00
 800a55c:	40023800 	.word	0x40023800
 800a560:	08020be8 	.word	0x08020be8
 800a564:	20000000 	.word	0x20000000
 800a568:	2000001c 	.word	0x2000001c

0800a56c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a56c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a570:	b084      	sub	sp, #16
 800a572:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a574:	2300      	movs	r3, #0
 800a576:	607b      	str	r3, [r7, #4]
 800a578:	2300      	movs	r3, #0
 800a57a:	60fb      	str	r3, [r7, #12]
 800a57c:	2300      	movs	r3, #0
 800a57e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a580:	2300      	movs	r3, #0
 800a582:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a584:	4b67      	ldr	r3, [pc, #412]	; (800a724 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a586:	689b      	ldr	r3, [r3, #8]
 800a588:	f003 030c 	and.w	r3, r3, #12
 800a58c:	2b08      	cmp	r3, #8
 800a58e:	d00d      	beq.n	800a5ac <HAL_RCC_GetSysClockFreq+0x40>
 800a590:	2b08      	cmp	r3, #8
 800a592:	f200 80bd 	bhi.w	800a710 <HAL_RCC_GetSysClockFreq+0x1a4>
 800a596:	2b00      	cmp	r3, #0
 800a598:	d002      	beq.n	800a5a0 <HAL_RCC_GetSysClockFreq+0x34>
 800a59a:	2b04      	cmp	r3, #4
 800a59c:	d003      	beq.n	800a5a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800a59e:	e0b7      	b.n	800a710 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a5a0:	4b61      	ldr	r3, [pc, #388]	; (800a728 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800a5a2:	60bb      	str	r3, [r7, #8]
       break;
 800a5a4:	e0b7      	b.n	800a716 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a5a6:	4b60      	ldr	r3, [pc, #384]	; (800a728 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800a5a8:	60bb      	str	r3, [r7, #8]
      break;
 800a5aa:	e0b4      	b.n	800a716 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a5ac:	4b5d      	ldr	r3, [pc, #372]	; (800a724 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a5b4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a5b6:	4b5b      	ldr	r3, [pc, #364]	; (800a724 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a5b8:	685b      	ldr	r3, [r3, #4]
 800a5ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d04d      	beq.n	800a65e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a5c2:	4b58      	ldr	r3, [pc, #352]	; (800a724 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	099b      	lsrs	r3, r3, #6
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	f04f 0300 	mov.w	r3, #0
 800a5ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a5d2:	f04f 0100 	mov.w	r1, #0
 800a5d6:	ea02 0800 	and.w	r8, r2, r0
 800a5da:	ea03 0901 	and.w	r9, r3, r1
 800a5de:	4640      	mov	r0, r8
 800a5e0:	4649      	mov	r1, r9
 800a5e2:	f04f 0200 	mov.w	r2, #0
 800a5e6:	f04f 0300 	mov.w	r3, #0
 800a5ea:	014b      	lsls	r3, r1, #5
 800a5ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a5f0:	0142      	lsls	r2, r0, #5
 800a5f2:	4610      	mov	r0, r2
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	ebb0 0008 	subs.w	r0, r0, r8
 800a5fa:	eb61 0109 	sbc.w	r1, r1, r9
 800a5fe:	f04f 0200 	mov.w	r2, #0
 800a602:	f04f 0300 	mov.w	r3, #0
 800a606:	018b      	lsls	r3, r1, #6
 800a608:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a60c:	0182      	lsls	r2, r0, #6
 800a60e:	1a12      	subs	r2, r2, r0
 800a610:	eb63 0301 	sbc.w	r3, r3, r1
 800a614:	f04f 0000 	mov.w	r0, #0
 800a618:	f04f 0100 	mov.w	r1, #0
 800a61c:	00d9      	lsls	r1, r3, #3
 800a61e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a622:	00d0      	lsls	r0, r2, #3
 800a624:	4602      	mov	r2, r0
 800a626:	460b      	mov	r3, r1
 800a628:	eb12 0208 	adds.w	r2, r2, r8
 800a62c:	eb43 0309 	adc.w	r3, r3, r9
 800a630:	f04f 0000 	mov.w	r0, #0
 800a634:	f04f 0100 	mov.w	r1, #0
 800a638:	0299      	lsls	r1, r3, #10
 800a63a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a63e:	0290      	lsls	r0, r2, #10
 800a640:	4602      	mov	r2, r0
 800a642:	460b      	mov	r3, r1
 800a644:	4610      	mov	r0, r2
 800a646:	4619      	mov	r1, r3
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	461a      	mov	r2, r3
 800a64c:	f04f 0300 	mov.w	r3, #0
 800a650:	f7f6 fb2a 	bl	8000ca8 <__aeabi_uldivmod>
 800a654:	4602      	mov	r2, r0
 800a656:	460b      	mov	r3, r1
 800a658:	4613      	mov	r3, r2
 800a65a:	60fb      	str	r3, [r7, #12]
 800a65c:	e04a      	b.n	800a6f4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a65e:	4b31      	ldr	r3, [pc, #196]	; (800a724 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	099b      	lsrs	r3, r3, #6
 800a664:	461a      	mov	r2, r3
 800a666:	f04f 0300 	mov.w	r3, #0
 800a66a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a66e:	f04f 0100 	mov.w	r1, #0
 800a672:	ea02 0400 	and.w	r4, r2, r0
 800a676:	ea03 0501 	and.w	r5, r3, r1
 800a67a:	4620      	mov	r0, r4
 800a67c:	4629      	mov	r1, r5
 800a67e:	f04f 0200 	mov.w	r2, #0
 800a682:	f04f 0300 	mov.w	r3, #0
 800a686:	014b      	lsls	r3, r1, #5
 800a688:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a68c:	0142      	lsls	r2, r0, #5
 800a68e:	4610      	mov	r0, r2
 800a690:	4619      	mov	r1, r3
 800a692:	1b00      	subs	r0, r0, r4
 800a694:	eb61 0105 	sbc.w	r1, r1, r5
 800a698:	f04f 0200 	mov.w	r2, #0
 800a69c:	f04f 0300 	mov.w	r3, #0
 800a6a0:	018b      	lsls	r3, r1, #6
 800a6a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a6a6:	0182      	lsls	r2, r0, #6
 800a6a8:	1a12      	subs	r2, r2, r0
 800a6aa:	eb63 0301 	sbc.w	r3, r3, r1
 800a6ae:	f04f 0000 	mov.w	r0, #0
 800a6b2:	f04f 0100 	mov.w	r1, #0
 800a6b6:	00d9      	lsls	r1, r3, #3
 800a6b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a6bc:	00d0      	lsls	r0, r2, #3
 800a6be:	4602      	mov	r2, r0
 800a6c0:	460b      	mov	r3, r1
 800a6c2:	1912      	adds	r2, r2, r4
 800a6c4:	eb45 0303 	adc.w	r3, r5, r3
 800a6c8:	f04f 0000 	mov.w	r0, #0
 800a6cc:	f04f 0100 	mov.w	r1, #0
 800a6d0:	0299      	lsls	r1, r3, #10
 800a6d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a6d6:	0290      	lsls	r0, r2, #10
 800a6d8:	4602      	mov	r2, r0
 800a6da:	460b      	mov	r3, r1
 800a6dc:	4610      	mov	r0, r2
 800a6de:	4619      	mov	r1, r3
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	f04f 0300 	mov.w	r3, #0
 800a6e8:	f7f6 fade 	bl	8000ca8 <__aeabi_uldivmod>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	460b      	mov	r3, r1
 800a6f0:	4613      	mov	r3, r2
 800a6f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a6f4:	4b0b      	ldr	r3, [pc, #44]	; (800a724 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	0c1b      	lsrs	r3, r3, #16
 800a6fa:	f003 0303 	and.w	r3, r3, #3
 800a6fe:	3301      	adds	r3, #1
 800a700:	005b      	lsls	r3, r3, #1
 800a702:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a704:	68fa      	ldr	r2, [r7, #12]
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	fbb2 f3f3 	udiv	r3, r2, r3
 800a70c:	60bb      	str	r3, [r7, #8]
      break;
 800a70e:	e002      	b.n	800a716 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a710:	4b05      	ldr	r3, [pc, #20]	; (800a728 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800a712:	60bb      	str	r3, [r7, #8]
      break;
 800a714:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a716:	68bb      	ldr	r3, [r7, #8]
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3710      	adds	r7, #16
 800a71c:	46bd      	mov	sp, r7
 800a71e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a722:	bf00      	nop
 800a724:	40023800 	.word	0x40023800
 800a728:	00f42400 	.word	0x00f42400

0800a72c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a72c:	b480      	push	{r7}
 800a72e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a730:	4b03      	ldr	r3, [pc, #12]	; (800a740 <HAL_RCC_GetHCLKFreq+0x14>)
 800a732:	681b      	ldr	r3, [r3, #0]
}
 800a734:	4618      	mov	r0, r3
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr
 800a73e:	bf00      	nop
 800a740:	20000000 	.word	0x20000000

0800a744 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a748:	f7ff fff0 	bl	800a72c <HAL_RCC_GetHCLKFreq>
 800a74c:	4602      	mov	r2, r0
 800a74e:	4b05      	ldr	r3, [pc, #20]	; (800a764 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a750:	689b      	ldr	r3, [r3, #8]
 800a752:	0a9b      	lsrs	r3, r3, #10
 800a754:	f003 0307 	and.w	r3, r3, #7
 800a758:	4903      	ldr	r1, [pc, #12]	; (800a768 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a75a:	5ccb      	ldrb	r3, [r1, r3]
 800a75c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a760:	4618      	mov	r0, r3
 800a762:	bd80      	pop	{r7, pc}
 800a764:	40023800 	.word	0x40023800
 800a768:	08020bf8 	.word	0x08020bf8

0800a76c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a770:	f7ff ffdc 	bl	800a72c <HAL_RCC_GetHCLKFreq>
 800a774:	4602      	mov	r2, r0
 800a776:	4b05      	ldr	r3, [pc, #20]	; (800a78c <HAL_RCC_GetPCLK2Freq+0x20>)
 800a778:	689b      	ldr	r3, [r3, #8]
 800a77a:	0b5b      	lsrs	r3, r3, #13
 800a77c:	f003 0307 	and.w	r3, r3, #7
 800a780:	4903      	ldr	r1, [pc, #12]	; (800a790 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a782:	5ccb      	ldrb	r3, [r1, r3]
 800a784:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a788:	4618      	mov	r0, r3
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	40023800 	.word	0x40023800
 800a790:	08020bf8 	.word	0x08020bf8

0800a794 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	220f      	movs	r2, #15
 800a7a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a7a4:	4b12      	ldr	r3, [pc, #72]	; (800a7f0 <HAL_RCC_GetClockConfig+0x5c>)
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	f003 0203 	and.w	r2, r3, #3
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a7b0:	4b0f      	ldr	r3, [pc, #60]	; (800a7f0 <HAL_RCC_GetClockConfig+0x5c>)
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a7bc:	4b0c      	ldr	r3, [pc, #48]	; (800a7f0 <HAL_RCC_GetClockConfig+0x5c>)
 800a7be:	689b      	ldr	r3, [r3, #8]
 800a7c0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a7c8:	4b09      	ldr	r3, [pc, #36]	; (800a7f0 <HAL_RCC_GetClockConfig+0x5c>)
 800a7ca:	689b      	ldr	r3, [r3, #8]
 800a7cc:	08db      	lsrs	r3, r3, #3
 800a7ce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a7d6:	4b07      	ldr	r3, [pc, #28]	; (800a7f4 <HAL_RCC_GetClockConfig+0x60>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f003 020f 	and.w	r2, r3, #15
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	601a      	str	r2, [r3, #0]
}
 800a7e2:	bf00      	nop
 800a7e4:	370c      	adds	r7, #12
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr
 800a7ee:	bf00      	nop
 800a7f0:	40023800 	.word	0x40023800
 800a7f4:	40023c00 	.word	0x40023c00

0800a7f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b086      	sub	sp, #24
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a800:	2300      	movs	r3, #0
 800a802:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800a804:	2300      	movs	r3, #0
 800a806:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f003 0301 	and.w	r3, r3, #1
 800a810:	2b00      	cmp	r3, #0
 800a812:	d10b      	bne.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d105      	bne.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d075      	beq.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a82c:	4bad      	ldr	r3, [pc, #692]	; (800aae4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800a82e:	2200      	movs	r2, #0
 800a830:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a832:	f7fc fb5f 	bl	8006ef4 <HAL_GetTick>
 800a836:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a838:	e008      	b.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a83a:	f7fc fb5b 	bl	8006ef4 <HAL_GetTick>
 800a83e:	4602      	mov	r2, r0
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	1ad3      	subs	r3, r2, r3
 800a844:	2b02      	cmp	r3, #2
 800a846:	d901      	bls.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a848:	2303      	movs	r3, #3
 800a84a:	e18b      	b.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a84c:	4ba6      	ldr	r3, [pc, #664]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a854:	2b00      	cmp	r3, #0
 800a856:	d1f0      	bne.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f003 0301 	and.w	r3, r3, #1
 800a860:	2b00      	cmp	r3, #0
 800a862:	d009      	beq.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	019a      	lsls	r2, r3, #6
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	689b      	ldr	r3, [r3, #8]
 800a86e:	071b      	lsls	r3, r3, #28
 800a870:	499d      	ldr	r1, [pc, #628]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a872:	4313      	orrs	r3, r2
 800a874:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f003 0302 	and.w	r3, r3, #2
 800a880:	2b00      	cmp	r3, #0
 800a882:	d01f      	beq.n	800a8c4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a884:	4b98      	ldr	r3, [pc, #608]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a88a:	0f1b      	lsrs	r3, r3, #28
 800a88c:	f003 0307 	and.w	r3, r3, #7
 800a890:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	019a      	lsls	r2, r3, #6
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	68db      	ldr	r3, [r3, #12]
 800a89c:	061b      	lsls	r3, r3, #24
 800a89e:	431a      	orrs	r2, r3
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	071b      	lsls	r3, r3, #28
 800a8a4:	4990      	ldr	r1, [pc, #576]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a8ac:	4b8e      	ldr	r3, [pc, #568]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a8ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a8b2:	f023 021f 	bic.w	r2, r3, #31
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	69db      	ldr	r3, [r3, #28]
 800a8ba:	3b01      	subs	r3, #1
 800a8bc:	498a      	ldr	r1, [pc, #552]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d00d      	beq.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	019a      	lsls	r2, r3, #6
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	68db      	ldr	r3, [r3, #12]
 800a8da:	061b      	lsls	r3, r3, #24
 800a8dc:	431a      	orrs	r2, r3
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	689b      	ldr	r3, [r3, #8]
 800a8e2:	071b      	lsls	r3, r3, #28
 800a8e4:	4980      	ldr	r1, [pc, #512]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a8e6:	4313      	orrs	r3, r2
 800a8e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a8ec:	4b7d      	ldr	r3, [pc, #500]	; (800aae4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a8f2:	f7fc faff 	bl	8006ef4 <HAL_GetTick>
 800a8f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a8f8:	e008      	b.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a8fa:	f7fc fafb 	bl	8006ef4 <HAL_GetTick>
 800a8fe:	4602      	mov	r2, r0
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	1ad3      	subs	r3, r2, r3
 800a904:	2b02      	cmp	r3, #2
 800a906:	d901      	bls.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a908:	2303      	movs	r3, #3
 800a90a:	e12b      	b.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a90c:	4b76      	ldr	r3, [pc, #472]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a914:	2b00      	cmp	r3, #0
 800a916:	d0f0      	beq.n	800a8fa <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f003 0304 	and.w	r3, r3, #4
 800a920:	2b00      	cmp	r3, #0
 800a922:	d105      	bne.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d079      	beq.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a930:	4b6e      	ldr	r3, [pc, #440]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a932:	2200      	movs	r2, #0
 800a934:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a936:	f7fc fadd 	bl	8006ef4 <HAL_GetTick>
 800a93a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a93c:	e008      	b.n	800a950 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a93e:	f7fc fad9 	bl	8006ef4 <HAL_GetTick>
 800a942:	4602      	mov	r2, r0
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	1ad3      	subs	r3, r2, r3
 800a948:	2b02      	cmp	r3, #2
 800a94a:	d901      	bls.n	800a950 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a94c:	2303      	movs	r3, #3
 800a94e:	e109      	b.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a950:	4b65      	ldr	r3, [pc, #404]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a958:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a95c:	d0ef      	beq.n	800a93e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f003 0304 	and.w	r3, r3, #4
 800a966:	2b00      	cmp	r3, #0
 800a968:	d020      	beq.n	800a9ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a96a:	4b5f      	ldr	r3, [pc, #380]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a96c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a970:	0f1b      	lsrs	r3, r3, #28
 800a972:	f003 0307 	and.w	r3, r3, #7
 800a976:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	691b      	ldr	r3, [r3, #16]
 800a97c:	019a      	lsls	r2, r3, #6
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	695b      	ldr	r3, [r3, #20]
 800a982:	061b      	lsls	r3, r3, #24
 800a984:	431a      	orrs	r2, r3
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	071b      	lsls	r3, r3, #28
 800a98a:	4957      	ldr	r1, [pc, #348]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a98c:	4313      	orrs	r3, r2
 800a98e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a992:	4b55      	ldr	r3, [pc, #340]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a998:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6a1b      	ldr	r3, [r3, #32]
 800a9a0:	3b01      	subs	r3, #1
 800a9a2:	021b      	lsls	r3, r3, #8
 800a9a4:	4950      	ldr	r1, [pc, #320]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f003 0308 	and.w	r3, r3, #8
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d01e      	beq.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a9b8:	4b4b      	ldr	r3, [pc, #300]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a9ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9be:	0e1b      	lsrs	r3, r3, #24
 800a9c0:	f003 030f 	and.w	r3, r3, #15
 800a9c4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	691b      	ldr	r3, [r3, #16]
 800a9ca:	019a      	lsls	r2, r3, #6
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	061b      	lsls	r3, r3, #24
 800a9d0:	431a      	orrs	r2, r3
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	699b      	ldr	r3, [r3, #24]
 800a9d6:	071b      	lsls	r3, r3, #28
 800a9d8:	4943      	ldr	r1, [pc, #268]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a9da:	4313      	orrs	r3, r2
 800a9dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a9e0:	4b41      	ldr	r3, [pc, #260]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a9e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ee:	493e      	ldr	r1, [pc, #248]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a9f6:	4b3d      	ldr	r3, [pc, #244]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a9fc:	f7fc fa7a 	bl	8006ef4 <HAL_GetTick>
 800aa00:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800aa02:	e008      	b.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800aa04:	f7fc fa76 	bl	8006ef4 <HAL_GetTick>
 800aa08:	4602      	mov	r2, r0
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	1ad3      	subs	r3, r2, r3
 800aa0e:	2b02      	cmp	r3, #2
 800aa10:	d901      	bls.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800aa12:	2303      	movs	r3, #3
 800aa14:	e0a6      	b.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800aa16:	4b34      	ldr	r3, [pc, #208]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa22:	d1ef      	bne.n	800aa04 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f003 0320 	and.w	r3, r3, #32
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	f000 808d 	beq.w	800ab4c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800aa32:	2300      	movs	r3, #0
 800aa34:	60fb      	str	r3, [r7, #12]
 800aa36:	4b2c      	ldr	r3, [pc, #176]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800aa38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa3a:	4a2b      	ldr	r2, [pc, #172]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800aa3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa40:	6413      	str	r3, [r2, #64]	; 0x40
 800aa42:	4b29      	ldr	r3, [pc, #164]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800aa44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa4a:	60fb      	str	r3, [r7, #12]
 800aa4c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800aa4e:	4b28      	ldr	r3, [pc, #160]	; (800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	4a27      	ldr	r2, [pc, #156]	; (800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800aa54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa58:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800aa5a:	f7fc fa4b 	bl	8006ef4 <HAL_GetTick>
 800aa5e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800aa60:	e008      	b.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800aa62:	f7fc fa47 	bl	8006ef4 <HAL_GetTick>
 800aa66:	4602      	mov	r2, r0
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	1ad3      	subs	r3, r2, r3
 800aa6c:	2b02      	cmp	r3, #2
 800aa6e:	d901      	bls.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800aa70:	2303      	movs	r3, #3
 800aa72:	e077      	b.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800aa74:	4b1e      	ldr	r3, [pc, #120]	; (800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d0f0      	beq.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800aa80:	4b19      	ldr	r3, [pc, #100]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800aa82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa88:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d039      	beq.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa98:	693a      	ldr	r2, [r7, #16]
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	d032      	beq.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800aa9e:	4b12      	ldr	r3, [pc, #72]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800aaa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aaa6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800aaa8:	4b12      	ldr	r3, [pc, #72]	; (800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800aaaa:	2201      	movs	r2, #1
 800aaac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800aaae:	4b11      	ldr	r3, [pc, #68]	; (800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800aab0:	2200      	movs	r2, #0
 800aab2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800aab4:	4a0c      	ldr	r2, [pc, #48]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800aaba:	4b0b      	ldr	r3, [pc, #44]	; (800aae8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800aabc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aabe:	f003 0301 	and.w	r3, r3, #1
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	d11e      	bne.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800aac6:	f7fc fa15 	bl	8006ef4 <HAL_GetTick>
 800aaca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aacc:	e014      	b.n	800aaf8 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aace:	f7fc fa11 	bl	8006ef4 <HAL_GetTick>
 800aad2:	4602      	mov	r2, r0
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	1ad3      	subs	r3, r2, r3
 800aad8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aadc:	4293      	cmp	r3, r2
 800aade:	d90b      	bls.n	800aaf8 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800aae0:	2303      	movs	r3, #3
 800aae2:	e03f      	b.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800aae4:	42470068 	.word	0x42470068
 800aae8:	40023800 	.word	0x40023800
 800aaec:	42470070 	.word	0x42470070
 800aaf0:	40007000 	.word	0x40007000
 800aaf4:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aaf8:	4b1c      	ldr	r3, [pc, #112]	; (800ab6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800aafa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aafc:	f003 0302 	and.w	r3, r3, #2
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d0e4      	beq.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab10:	d10d      	bne.n	800ab2e <HAL_RCCEx_PeriphCLKConfig+0x336>
 800ab12:	4b16      	ldr	r3, [pc, #88]	; (800ab6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ab14:	689b      	ldr	r3, [r3, #8]
 800ab16:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab1e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ab22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab26:	4911      	ldr	r1, [pc, #68]	; (800ab6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	608b      	str	r3, [r1, #8]
 800ab2c:	e005      	b.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800ab2e:	4b0f      	ldr	r3, [pc, #60]	; (800ab6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ab30:	689b      	ldr	r3, [r3, #8]
 800ab32:	4a0e      	ldr	r2, [pc, #56]	; (800ab6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ab34:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800ab38:	6093      	str	r3, [r2, #8]
 800ab3a:	4b0c      	ldr	r3, [pc, #48]	; (800ab6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ab3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab46:	4909      	ldr	r1, [pc, #36]	; (800ab6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f003 0310 	and.w	r3, r3, #16
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d004      	beq.n	800ab62 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800ab5e:	4b04      	ldr	r3, [pc, #16]	; (800ab70 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800ab60:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800ab62:	2300      	movs	r3, #0
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3718      	adds	r7, #24
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}
 800ab6c:	40023800 	.word	0x40023800
 800ab70:	424711e0 	.word	0x424711e0

0800ab74 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b082      	sub	sp, #8
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d101      	bne.n	800ab86 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800ab82:	2301      	movs	r3, #1
 800ab84:	e083      	b.n	800ac8e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	7f5b      	ldrb	r3, [r3, #29]
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d105      	bne.n	800ab9c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2200      	movs	r2, #0
 800ab94:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f7f8 f84a 	bl	8002c30 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2202      	movs	r2, #2
 800aba0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	22ca      	movs	r2, #202	; 0xca
 800aba8:	625a      	str	r2, [r3, #36]	; 0x24
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	2253      	movs	r2, #83	; 0x53
 800abb0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 fc26 	bl	800b404 <RTC_EnterInitMode>
 800abb8:	4603      	mov	r3, r0
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d008      	beq.n	800abd0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	22ff      	movs	r2, #255	; 0xff
 800abc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2204      	movs	r2, #4
 800abca:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800abcc:	2301      	movs	r3, #1
 800abce:	e05e      	b.n	800ac8e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	689b      	ldr	r3, [r3, #8]
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	6812      	ldr	r2, [r2, #0]
 800abda:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800abde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abe2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	6899      	ldr	r1, [r3, #8]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	685a      	ldr	r2, [r3, #4]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	691b      	ldr	r3, [r3, #16]
 800abf2:	431a      	orrs	r2, r3
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	695b      	ldr	r3, [r3, #20]
 800abf8:	431a      	orrs	r2, r3
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	430a      	orrs	r2, r1
 800ac00:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	68d2      	ldr	r2, [r2, #12]
 800ac0a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	6919      	ldr	r1, [r3, #16]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	689b      	ldr	r3, [r3, #8]
 800ac16:	041a      	lsls	r2, r3, #16
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	430a      	orrs	r2, r1
 800ac1e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	68da      	ldr	r2, [r3, #12]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ac2e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	689b      	ldr	r3, [r3, #8]
 800ac36:	f003 0320 	and.w	r3, r3, #32
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d10e      	bne.n	800ac5c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f000 fbb8 	bl	800b3b4 <HAL_RTC_WaitForSynchro>
 800ac44:	4603      	mov	r3, r0
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d008      	beq.n	800ac5c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	22ff      	movs	r2, #255	; 0xff
 800ac50:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2204      	movs	r2, #4
 800ac56:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	e018      	b.n	800ac8e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ac6a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	699a      	ldr	r2, [r3, #24]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	430a      	orrs	r2, r1
 800ac7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	22ff      	movs	r2, #255	; 0xff
 800ac84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2201      	movs	r2, #1
 800ac8a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800ac8c:	2300      	movs	r3, #0
  }
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3708      	adds	r7, #8
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}

0800ac96 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ac96:	b590      	push	{r4, r7, lr}
 800ac98:	b087      	sub	sp, #28
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	60f8      	str	r0, [r7, #12]
 800ac9e:	60b9      	str	r1, [r7, #8]
 800aca0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800aca2:	2300      	movs	r3, #0
 800aca4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	7f1b      	ldrb	r3, [r3, #28]
 800acaa:	2b01      	cmp	r3, #1
 800acac:	d101      	bne.n	800acb2 <HAL_RTC_SetTime+0x1c>
 800acae:	2302      	movs	r3, #2
 800acb0:	e0aa      	b.n	800ae08 <HAL_RTC_SetTime+0x172>
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2201      	movs	r2, #1
 800acb6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2202      	movs	r2, #2
 800acbc:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d126      	bne.n	800ad12 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	689b      	ldr	r3, [r3, #8]
 800acca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d102      	bne.n	800acd8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	2200      	movs	r2, #0
 800acd6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	4618      	mov	r0, r3
 800acde:	f000 fbbd 	bl	800b45c <RTC_ByteToBcd2>
 800ace2:	4603      	mov	r3, r0
 800ace4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	785b      	ldrb	r3, [r3, #1]
 800acea:	4618      	mov	r0, r3
 800acec:	f000 fbb6 	bl	800b45c <RTC_ByteToBcd2>
 800acf0:	4603      	mov	r3, r0
 800acf2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800acf4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	789b      	ldrb	r3, [r3, #2]
 800acfa:	4618      	mov	r0, r3
 800acfc:	f000 fbae 	bl	800b45c <RTC_ByteToBcd2>
 800ad00:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800ad02:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	78db      	ldrb	r3, [r3, #3]
 800ad0a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	617b      	str	r3, [r7, #20]
 800ad10:	e018      	b.n	800ad44 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	689b      	ldr	r3, [r3, #8]
 800ad18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d102      	bne.n	800ad26 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	2200      	movs	r2, #0
 800ad24:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	785b      	ldrb	r3, [r3, #1]
 800ad30:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800ad32:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800ad34:	68ba      	ldr	r2, [r7, #8]
 800ad36:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800ad38:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	78db      	ldrb	r3, [r3, #3]
 800ad3e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800ad40:	4313      	orrs	r3, r2
 800ad42:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	22ca      	movs	r2, #202	; 0xca
 800ad4a:	625a      	str	r2, [r3, #36]	; 0x24
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	2253      	movs	r2, #83	; 0x53
 800ad52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800ad54:	68f8      	ldr	r0, [r7, #12]
 800ad56:	f000 fb55 	bl	800b404 <RTC_EnterInitMode>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d00b      	beq.n	800ad78 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	22ff      	movs	r2, #255	; 0xff
 800ad66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2204      	movs	r2, #4
 800ad6c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2200      	movs	r2, #0
 800ad72:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800ad74:	2301      	movs	r3, #1
 800ad76:	e047      	b.n	800ae08 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681a      	ldr	r2, [r3, #0]
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800ad82:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ad86:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	689a      	ldr	r2, [r3, #8]
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ad96:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	6899      	ldr	r1, [r3, #8]
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	68da      	ldr	r2, [r3, #12]
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	691b      	ldr	r3, [r3, #16]
 800ada6:	431a      	orrs	r2, r3
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	430a      	orrs	r2, r1
 800adae:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	68da      	ldr	r2, [r3, #12]
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800adbe:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	689b      	ldr	r3, [r3, #8]
 800adc6:	f003 0320 	and.w	r3, r3, #32
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d111      	bne.n	800adf2 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800adce:	68f8      	ldr	r0, [r7, #12]
 800add0:	f000 faf0 	bl	800b3b4 <HAL_RTC_WaitForSynchro>
 800add4:	4603      	mov	r3, r0
 800add6:	2b00      	cmp	r3, #0
 800add8:	d00b      	beq.n	800adf2 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	22ff      	movs	r2, #255	; 0xff
 800ade0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	2204      	movs	r2, #4
 800ade6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2200      	movs	r2, #0
 800adec:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800adee:	2301      	movs	r3, #1
 800adf0:	e00a      	b.n	800ae08 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	22ff      	movs	r2, #255	; 0xff
 800adf8:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	2201      	movs	r2, #1
 800adfe:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2200      	movs	r2, #0
 800ae04:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800ae06:	2300      	movs	r3, #0
  }
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	371c      	adds	r7, #28
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd90      	pop	{r4, r7, pc}

0800ae10 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b086      	sub	sp, #24
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	60f8      	str	r0, [r7, #12]
 800ae18:	60b9      	str	r1, [r7, #8]
 800ae1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	691b      	ldr	r3, [r3, #16]
 800ae30:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800ae42:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ae46:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	0c1b      	lsrs	r3, r3, #16
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae52:	b2da      	uxtb	r2, r3
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	0a1b      	lsrs	r3, r3, #8
 800ae5c:	b2db      	uxtb	r3, r3
 800ae5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae62:	b2da      	uxtb	r2, r3
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	b2db      	uxtb	r3, r3
 800ae6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae70:	b2da      	uxtb	r2, r3
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	0c1b      	lsrs	r3, r3, #16
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae80:	b2da      	uxtb	r2, r3
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d11a      	bne.n	800aec2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	4618      	mov	r0, r3
 800ae92:	f000 fb01 	bl	800b498 <RTC_Bcd2ToByte>
 800ae96:	4603      	mov	r3, r0
 800ae98:	461a      	mov	r2, r3
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	785b      	ldrb	r3, [r3, #1]
 800aea2:	4618      	mov	r0, r3
 800aea4:	f000 faf8 	bl	800b498 <RTC_Bcd2ToByte>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	461a      	mov	r2, r3
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	789b      	ldrb	r3, [r3, #2]
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f000 faef 	bl	800b498 <RTC_Bcd2ToByte>
 800aeba:	4603      	mov	r3, r0
 800aebc:	461a      	mov	r2, r3
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800aec2:	2300      	movs	r3, #0
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3718      	adds	r7, #24
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800aecc:	b590      	push	{r4, r7, lr}
 800aece:	b087      	sub	sp, #28
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	60f8      	str	r0, [r7, #12]
 800aed4:	60b9      	str	r1, [r7, #8]
 800aed6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800aed8:	2300      	movs	r3, #0
 800aeda:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	7f1b      	ldrb	r3, [r3, #28]
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d101      	bne.n	800aee8 <HAL_RTC_SetDate+0x1c>
 800aee4:	2302      	movs	r3, #2
 800aee6:	e094      	b.n	800b012 <HAL_RTC_SetDate+0x146>
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2201      	movs	r2, #1
 800aeec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	2202      	movs	r2, #2
 800aef2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d10e      	bne.n	800af18 <HAL_RTC_SetDate+0x4c>
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	785b      	ldrb	r3, [r3, #1]
 800aefe:	f003 0310 	and.w	r3, r3, #16
 800af02:	2b00      	cmp	r3, #0
 800af04:	d008      	beq.n	800af18 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	785b      	ldrb	r3, [r3, #1]
 800af0a:	f023 0310 	bic.w	r3, r3, #16
 800af0e:	b2db      	uxtb	r3, r3
 800af10:	330a      	adds	r3, #10
 800af12:	b2da      	uxtb	r2, r3
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d11c      	bne.n	800af58 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	78db      	ldrb	r3, [r3, #3]
 800af22:	4618      	mov	r0, r3
 800af24:	f000 fa9a 	bl	800b45c <RTC_ByteToBcd2>
 800af28:	4603      	mov	r3, r0
 800af2a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	785b      	ldrb	r3, [r3, #1]
 800af30:	4618      	mov	r0, r3
 800af32:	f000 fa93 	bl	800b45c <RTC_ByteToBcd2>
 800af36:	4603      	mov	r3, r0
 800af38:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800af3a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	789b      	ldrb	r3, [r3, #2]
 800af40:	4618      	mov	r0, r3
 800af42:	f000 fa8b 	bl	800b45c <RTC_ByteToBcd2>
 800af46:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800af48:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	781b      	ldrb	r3, [r3, #0]
 800af50:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800af52:	4313      	orrs	r3, r2
 800af54:	617b      	str	r3, [r7, #20]
 800af56:	e00e      	b.n	800af76 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	78db      	ldrb	r3, [r3, #3]
 800af5c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	785b      	ldrb	r3, [r3, #1]
 800af62:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800af64:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800af66:	68ba      	ldr	r2, [r7, #8]
 800af68:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800af6a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	781b      	ldrb	r3, [r3, #0]
 800af70:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800af72:	4313      	orrs	r3, r2
 800af74:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	22ca      	movs	r2, #202	; 0xca
 800af7c:	625a      	str	r2, [r3, #36]	; 0x24
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	2253      	movs	r2, #83	; 0x53
 800af84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800af86:	68f8      	ldr	r0, [r7, #12]
 800af88:	f000 fa3c 	bl	800b404 <RTC_EnterInitMode>
 800af8c:	4603      	mov	r3, r0
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d00b      	beq.n	800afaa <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	22ff      	movs	r2, #255	; 0xff
 800af98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2204      	movs	r2, #4
 800af9e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2200      	movs	r2, #0
 800afa4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800afa6:	2301      	movs	r3, #1
 800afa8:	e033      	b.n	800b012 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800afb4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800afb8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	68da      	ldr	r2, [r3, #12]
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800afc8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	f003 0320 	and.w	r3, r3, #32
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d111      	bne.n	800affc <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800afd8:	68f8      	ldr	r0, [r7, #12]
 800afda:	f000 f9eb 	bl	800b3b4 <HAL_RTC_WaitForSynchro>
 800afde:	4603      	mov	r3, r0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d00b      	beq.n	800affc <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	22ff      	movs	r2, #255	; 0xff
 800afea:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2204      	movs	r2, #4
 800aff0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	2200      	movs	r2, #0
 800aff6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800aff8:	2301      	movs	r3, #1
 800affa:	e00a      	b.n	800b012 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	22ff      	movs	r2, #255	; 0xff
 800b002:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2201      	movs	r2, #1
 800b008:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	2200      	movs	r2, #0
 800b00e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800b010:	2300      	movs	r3, #0
  }
}
 800b012:	4618      	mov	r0, r3
 800b014:	371c      	adds	r7, #28
 800b016:	46bd      	mov	sp, r7
 800b018:	bd90      	pop	{r4, r7, pc}

0800b01a <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b01a:	b580      	push	{r7, lr}
 800b01c:	b086      	sub	sp, #24
 800b01e:	af00      	add	r7, sp, #0
 800b020:	60f8      	str	r0, [r7, #12]
 800b022:	60b9      	str	r1, [r7, #8]
 800b024:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800b026:	2300      	movs	r3, #0
 800b028:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b034:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b038:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	0c1b      	lsrs	r3, r3, #16
 800b03e:	b2da      	uxtb	r2, r3
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	0a1b      	lsrs	r3, r3, #8
 800b048:	b2db      	uxtb	r3, r3
 800b04a:	f003 031f 	and.w	r3, r3, #31
 800b04e:	b2da      	uxtb	r2, r3
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	b2db      	uxtb	r3, r3
 800b058:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b05c:	b2da      	uxtb	r2, r3
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	0b5b      	lsrs	r3, r3, #13
 800b066:	b2db      	uxtb	r3, r3
 800b068:	f003 0307 	and.w	r3, r3, #7
 800b06c:	b2da      	uxtb	r2, r3
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d11a      	bne.n	800b0ae <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	78db      	ldrb	r3, [r3, #3]
 800b07c:	4618      	mov	r0, r3
 800b07e:	f000 fa0b 	bl	800b498 <RTC_Bcd2ToByte>
 800b082:	4603      	mov	r3, r0
 800b084:	461a      	mov	r2, r3
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	785b      	ldrb	r3, [r3, #1]
 800b08e:	4618      	mov	r0, r3
 800b090:	f000 fa02 	bl	800b498 <RTC_Bcd2ToByte>
 800b094:	4603      	mov	r3, r0
 800b096:	461a      	mov	r2, r3
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	789b      	ldrb	r3, [r3, #2]
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f000 f9f9 	bl	800b498 <RTC_Bcd2ToByte>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800b0ae:	2300      	movs	r3, #0
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3718      	adds	r7, #24
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800b0b8:	b590      	push	{r4, r7, lr}
 800b0ba:	b089      	sub	sp, #36	; 0x24
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	60b9      	str	r1, [r7, #8]
 800b0c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	61fb      	str	r3, [r7, #28]
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 800b0cc:	4b93      	ldr	r3, [pc, #588]	; (800b31c <HAL_RTC_SetAlarm_IT+0x264>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4a93      	ldr	r2, [pc, #588]	; (800b320 <HAL_RTC_SetAlarm_IT+0x268>)
 800b0d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b0d6:	0adb      	lsrs	r3, r3, #11
 800b0d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b0dc:	fb02 f303 	mul.w	r3, r2, r3
 800b0e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	7f1b      	ldrb	r3, [r3, #28]
 800b0e6:	2b01      	cmp	r3, #1
 800b0e8:	d101      	bne.n	800b0ee <HAL_RTC_SetAlarm_IT+0x36>
 800b0ea:	2302      	movs	r3, #2
 800b0ec:	e111      	b.n	800b312 <HAL_RTC_SetAlarm_IT+0x25a>
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	2201      	movs	r2, #1
 800b0f2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	2202      	movs	r2, #2
 800b0f8:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d137      	bne.n	800b170 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	689b      	ldr	r3, [r3, #8]
 800b106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d102      	bne.n	800b114 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	2200      	movs	r2, #0
 800b112:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	4618      	mov	r0, r3
 800b11a:	f000 f99f 	bl	800b45c <RTC_ByteToBcd2>
 800b11e:	4603      	mov	r3, r0
 800b120:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	785b      	ldrb	r3, [r3, #1]
 800b126:	4618      	mov	r0, r3
 800b128:	f000 f998 	bl	800b45c <RTC_ByteToBcd2>
 800b12c:	4603      	mov	r3, r0
 800b12e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800b130:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	789b      	ldrb	r3, [r3, #2]
 800b136:	4618      	mov	r0, r3
 800b138:	f000 f990 	bl	800b45c <RTC_ByteToBcd2>
 800b13c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800b13e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	78db      	ldrb	r3, [r3, #3]
 800b146:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800b148:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b152:	4618      	mov	r0, r3
 800b154:	f000 f982 	bl	800b45c <RTC_ByteToBcd2>
 800b158:	4603      	mov	r3, r0
 800b15a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800b15c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800b164:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800b16a:	4313      	orrs	r3, r2
 800b16c:	61fb      	str	r3, [r7, #28]
 800b16e:	e023      	b.n	800b1b8 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d102      	bne.n	800b184 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	2200      	movs	r2, #0
 800b182:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	785b      	ldrb	r3, [r3, #1]
 800b18e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800b190:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800b192:	68ba      	ldr	r2, [r7, #8]
 800b194:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800b196:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	78db      	ldrb	r3, [r3, #3]
 800b19c:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800b19e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b1a6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800b1a8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800b1ae:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	685a      	ldr	r2, [r3, #4]
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	699b      	ldr	r3, [r3, #24]
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	22ca      	movs	r2, #202	; 0xca
 800b1ca:	625a      	str	r2, [r3, #36]	; 0x24
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	2253      	movs	r2, #83	; 0x53
 800b1d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1dc:	d141      	bne.n	800b262 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	689a      	ldr	r2, [r3, #8]
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b1ec:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	68db      	ldr	r3, [r3, #12]
 800b1f4:	b2da      	uxtb	r2, r3
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800b1fe:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	1e5a      	subs	r2, r3, #1
 800b204:	617a      	str	r2, [r7, #20]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d10b      	bne.n	800b222 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	22ff      	movs	r2, #255	; 0xff
 800b210:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2203      	movs	r2, #3
 800b216:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2200      	movs	r2, #0
 800b21c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800b21e:	2303      	movs	r3, #3
 800b220:	e077      	b.n	800b312 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	68db      	ldr	r3, [r3, #12]
 800b228:	f003 0301 	and.w	r3, r3, #1
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d0e7      	beq.n	800b200 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	69fa      	ldr	r2, [r7, #28]
 800b236:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	69ba      	ldr	r2, [r7, #24]
 800b23e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	689a      	ldr	r2, [r3, #8]
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b24e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	689a      	ldr	r2, [r3, #8]
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b25e:	609a      	str	r2, [r3, #8]
 800b260:	e040      	b.n	800b2e4 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	689a      	ldr	r2, [r3, #8]
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b270:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	68db      	ldr	r3, [r3, #12]
 800b278:	b2da      	uxtb	r2, r3
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f462 7220 	orn	r2, r2, #640	; 0x280
 800b282:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	1e5a      	subs	r2, r3, #1
 800b288:	617a      	str	r2, [r7, #20]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d10b      	bne.n	800b2a6 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	22ff      	movs	r2, #255	; 0xff
 800b294:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2203      	movs	r2, #3
 800b29a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800b2a2:	2303      	movs	r3, #3
 800b2a4:	e035      	b.n	800b312 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	68db      	ldr	r3, [r3, #12]
 800b2ac:	f003 0302 	and.w	r3, r3, #2
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d0e7      	beq.n	800b284 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	69fa      	ldr	r2, [r7, #28]
 800b2ba:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	69ba      	ldr	r2, [r7, #24]
 800b2c2:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	689a      	ldr	r2, [r3, #8]
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2d2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	689a      	ldr	r2, [r3, #8]
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b2e2:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800b2e4:	4b0f      	ldr	r3, [pc, #60]	; (800b324 <HAL_RTC_SetAlarm_IT+0x26c>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4a0e      	ldr	r2, [pc, #56]	; (800b324 <HAL_RTC_SetAlarm_IT+0x26c>)
 800b2ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2ee:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 800b2f0:	4b0c      	ldr	r3, [pc, #48]	; (800b324 <HAL_RTC_SetAlarm_IT+0x26c>)
 800b2f2:	689b      	ldr	r3, [r3, #8]
 800b2f4:	4a0b      	ldr	r2, [pc, #44]	; (800b324 <HAL_RTC_SetAlarm_IT+0x26c>)
 800b2f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2fa:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	22ff      	movs	r2, #255	; 0xff
 800b302:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2201      	movs	r2, #1
 800b308:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2200      	movs	r2, #0
 800b30e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800b310:	2300      	movs	r3, #0
}
 800b312:	4618      	mov	r0, r3
 800b314:	3724      	adds	r7, #36	; 0x24
 800b316:	46bd      	mov	sp, r7
 800b318:	bd90      	pop	{r4, r7, pc}
 800b31a:	bf00      	nop
 800b31c:	20000000 	.word	0x20000000
 800b320:	10624dd3 	.word	0x10624dd3
 800b324:	40013c00 	.word	0x40013c00

0800b328 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b082      	sub	sp, #8
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	689b      	ldr	r3, [r3, #8]
 800b336:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d012      	beq.n	800b364 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	68db      	ldr	r3, [r3, #12]
 800b344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d00b      	beq.n	800b364 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f7fb f90d 	bl	800656c <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	68db      	ldr	r3, [r3, #12]
 800b358:	b2da      	uxtb	r2, r3
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800b362:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	689b      	ldr	r3, [r3, #8]
 800b36a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d012      	beq.n	800b398 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	68db      	ldr	r3, [r3, #12]
 800b378:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d00b      	beq.n	800b398 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f000 f9bf 	bl	800b704 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	68db      	ldr	r3, [r3, #12]
 800b38c:	b2da      	uxtb	r2, r3
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f462 7220 	orn	r2, r2, #640	; 0x280
 800b396:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800b398:	4b05      	ldr	r3, [pc, #20]	; (800b3b0 <HAL_RTC_AlarmIRQHandler+0x88>)
 800b39a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800b39e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	775a      	strb	r2, [r3, #29]
}
 800b3a6:	bf00      	nop
 800b3a8:	3708      	adds	r7, #8
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	40013c00 	.word	0x40013c00

0800b3b4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b084      	sub	sp, #16
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	68da      	ldr	r2, [r3, #12]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b3ce:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b3d0:	f7fb fd90 	bl	8006ef4 <HAL_GetTick>
 800b3d4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800b3d6:	e009      	b.n	800b3ec <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b3d8:	f7fb fd8c 	bl	8006ef4 <HAL_GetTick>
 800b3dc:	4602      	mov	r2, r0
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	1ad3      	subs	r3, r2, r3
 800b3e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b3e6:	d901      	bls.n	800b3ec <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800b3e8:	2303      	movs	r3, #3
 800b3ea:	e007      	b.n	800b3fc <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	68db      	ldr	r3, [r3, #12]
 800b3f2:	f003 0320 	and.w	r3, r3, #32
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d0ee      	beq.n	800b3d8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800b3fa:	2300      	movs	r3, #0
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3710      	adds	r7, #16
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}

0800b404 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b40c:	2300      	movs	r3, #0
 800b40e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	68db      	ldr	r3, [r3, #12]
 800b416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d119      	bne.n	800b452 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b426:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b428:	f7fb fd64 	bl	8006ef4 <HAL_GetTick>
 800b42c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b42e:	e009      	b.n	800b444 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b430:	f7fb fd60 	bl	8006ef4 <HAL_GetTick>
 800b434:	4602      	mov	r2, r0
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	1ad3      	subs	r3, r2, r3
 800b43a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b43e:	d901      	bls.n	800b444 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800b440:	2303      	movs	r3, #3
 800b442:	e007      	b.n	800b454 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	68db      	ldr	r3, [r3, #12]
 800b44a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d0ee      	beq.n	800b430 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800b452:	2300      	movs	r3, #0
}
 800b454:	4618      	mov	r0, r3
 800b456:	3710      	adds	r7, #16
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b085      	sub	sp, #20
 800b460:	af00      	add	r7, sp, #0
 800b462:	4603      	mov	r3, r0
 800b464:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800b466:	2300      	movs	r3, #0
 800b468:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800b46a:	e005      	b.n	800b478 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	3301      	adds	r3, #1
 800b470:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800b472:	79fb      	ldrb	r3, [r7, #7]
 800b474:	3b0a      	subs	r3, #10
 800b476:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800b478:	79fb      	ldrb	r3, [r7, #7]
 800b47a:	2b09      	cmp	r3, #9
 800b47c:	d8f6      	bhi.n	800b46c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	b2db      	uxtb	r3, r3
 800b482:	011b      	lsls	r3, r3, #4
 800b484:	b2da      	uxtb	r2, r3
 800b486:	79fb      	ldrb	r3, [r7, #7]
 800b488:	4313      	orrs	r3, r2
 800b48a:	b2db      	uxtb	r3, r3
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3714      	adds	r7, #20
 800b490:	46bd      	mov	sp, r7
 800b492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b496:	4770      	bx	lr

0800b498 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800b498:	b480      	push	{r7}
 800b49a:	b085      	sub	sp, #20
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	4603      	mov	r3, r0
 800b4a0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800b4a6:	79fb      	ldrb	r3, [r7, #7]
 800b4a8:	091b      	lsrs	r3, r3, #4
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	461a      	mov	r2, r3
 800b4ae:	4613      	mov	r3, r2
 800b4b0:	009b      	lsls	r3, r3, #2
 800b4b2:	4413      	add	r3, r2
 800b4b4:	005b      	lsls	r3, r3, #1
 800b4b6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800b4b8:	79fb      	ldrb	r3, [r7, #7]
 800b4ba:	f003 030f 	and.w	r3, r3, #15
 800b4be:	b2da      	uxtb	r2, r3
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	b2db      	uxtb	r3, r3
 800b4c4:	4413      	add	r3, r2
 800b4c6:	b2db      	uxtb	r3, r3
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3714      	adds	r7, #20
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d2:	4770      	bx	lr

0800b4d4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b087      	sub	sp, #28
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	60f8      	str	r0, [r7, #12]
 800b4dc:	60b9      	str	r1, [r7, #8]
 800b4de:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	7f1b      	ldrb	r3, [r3, #28]
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d101      	bne.n	800b4ec <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 800b4e8:	2302      	movs	r3, #2
 800b4ea:	e0a6      	b.n	800b63a <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	2202      	movs	r2, #2
 800b4f6:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	22ca      	movs	r2, #202	; 0xca
 800b4fe:	625a      	str	r2, [r3, #36]	; 0x24
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	2253      	movs	r2, #83	; 0x53
 800b506:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	689b      	ldr	r3, [r3, #8]
 800b50e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b512:	2b00      	cmp	r3, #0
 800b514:	d022      	beq.n	800b55c <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800b516:	4b4c      	ldr	r3, [pc, #304]	; (800b648 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	4a4c      	ldr	r2, [pc, #304]	; (800b64c <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800b51c:	fba2 2303 	umull	r2, r3, r2, r3
 800b520:	0adb      	lsrs	r3, r3, #11
 800b522:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b526:	fb02 f303 	mul.w	r3, r2, r3
 800b52a:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	1e5a      	subs	r2, r3, #1
 800b530:	617a      	str	r2, [r7, #20]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d10b      	bne.n	800b54e <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	22ff      	movs	r2, #255	; 0xff
 800b53c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	2203      	movs	r2, #3
 800b542:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	2200      	movs	r2, #0
 800b548:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800b54a:	2303      	movs	r3, #3
 800b54c:	e075      	b.n	800b63a <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	68db      	ldr	r3, [r3, #12]
 800b554:	f003 0304 	and.w	r3, r3, #4
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d1e7      	bne.n	800b52c <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	689a      	ldr	r2, [r3, #8]
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b56a:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800b56c:	4b36      	ldr	r3, [pc, #216]	; (800b648 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4a36      	ldr	r2, [pc, #216]	; (800b64c <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800b572:	fba2 2303 	umull	r2, r3, r2, r3
 800b576:	0adb      	lsrs	r3, r3, #11
 800b578:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b57c:	fb02 f303 	mul.w	r3, r2, r3
 800b580:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	1e5a      	subs	r2, r3, #1
 800b586:	617a      	str	r2, [r7, #20]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d10b      	bne.n	800b5a4 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	22ff      	movs	r2, #255	; 0xff
 800b592:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2203      	movs	r2, #3
 800b598:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2200      	movs	r2, #0
 800b59e:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800b5a0:	2303      	movs	r3, #3
 800b5a2:	e04a      	b.n	800b63a <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	68db      	ldr	r3, [r3, #12]
 800b5aa:	f003 0304 	and.w	r3, r3, #4
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d0e7      	beq.n	800b582 <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	68ba      	ldr	r2, [r7, #8]
 800b5b8:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	689a      	ldr	r2, [r3, #8]
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f022 0207 	bic.w	r2, r2, #7
 800b5c8:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	6899      	ldr	r1, [r3, #8]
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	687a      	ldr	r2, [r7, #4]
 800b5d6:	430a      	orrs	r2, r1
 800b5d8:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800b5da:	4b1d      	ldr	r3, [pc, #116]	; (800b650 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	4a1c      	ldr	r2, [pc, #112]	; (800b650 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800b5e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b5e4:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800b5e6:	4b1a      	ldr	r3, [pc, #104]	; (800b650 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800b5e8:	689b      	ldr	r3, [r3, #8]
 800b5ea:	4a19      	ldr	r2, [pc, #100]	; (800b650 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800b5ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b5f0:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	68db      	ldr	r3, [r3, #12]
 800b5f8:	b2da      	uxtb	r2, r3
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800b602:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	689a      	ldr	r2, [r3, #8]
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b612:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	689a      	ldr	r2, [r3, #8]
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b622:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	22ff      	movs	r2, #255	; 0xff
 800b62a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	2201      	movs	r2, #1
 800b630:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	2200      	movs	r2, #0
 800b636:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800b638:	2300      	movs	r3, #0
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	371c      	adds	r7, #28
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr
 800b646:	bf00      	nop
 800b648:	20000000 	.word	0x20000000
 800b64c:	10624dd3 	.word	0x10624dd3
 800b650:	40013c00 	.word	0x40013c00

0800b654 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b084      	sub	sp, #16
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b65c:	2300      	movs	r3, #0
 800b65e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	7f1b      	ldrb	r3, [r3, #28]
 800b664:	2b01      	cmp	r3, #1
 800b666:	d101      	bne.n	800b66c <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 800b668:	2302      	movs	r3, #2
 800b66a:	e047      	b.n	800b6fc <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2201      	movs	r2, #1
 800b670:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2202      	movs	r2, #2
 800b676:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	22ca      	movs	r2, #202	; 0xca
 800b67e:	625a      	str	r2, [r3, #36]	; 0x24
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	2253      	movs	r2, #83	; 0x53
 800b686:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	689a      	ldr	r2, [r3, #8]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b696:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	689a      	ldr	r2, [r3, #8]
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b6a6:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b6a8:	f7fb fc24 	bl	8006ef4 <HAL_GetTick>
 800b6ac:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800b6ae:	e013      	b.n	800b6d8 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b6b0:	f7fb fc20 	bl	8006ef4 <HAL_GetTick>
 800b6b4:	4602      	mov	r2, r0
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	1ad3      	subs	r3, r2, r3
 800b6ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b6be:	d90b      	bls.n	800b6d8 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	22ff      	movs	r2, #255	; 0xff
 800b6c6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2203      	movs	r2, #3
 800b6cc:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800b6d4:	2303      	movs	r3, #3
 800b6d6:	e011      	b.n	800b6fc <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	68db      	ldr	r3, [r3, #12]
 800b6de:	f003 0304 	and.w	r3, r3, #4
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d0e4      	beq.n	800b6b0 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	22ff      	movs	r2, #255	; 0xff
 800b6ec:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800b6fa:	2300      	movs	r3, #0
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	3710      	adds	r7, #16
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}

0800b704 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800b704:	b480      	push	{r7}
 800b706:	b083      	sub	sp, #12
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 800b70c:	bf00      	nop
 800b70e:	370c      	adds	r7, #12
 800b710:	46bd      	mov	sp, r7
 800b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b716:	4770      	bx	lr

0800b718 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b082      	sub	sp, #8
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d101      	bne.n	800b72a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b726:	2301      	movs	r3, #1
 800b728:	e07b      	b.n	800b822 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d108      	bne.n	800b744 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	685b      	ldr	r3, [r3, #4]
 800b736:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b73a:	d009      	beq.n	800b750 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2200      	movs	r2, #0
 800b740:	61da      	str	r2, [r3, #28]
 800b742:	e005      	b.n	800b750 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2200      	movs	r2, #0
 800b748:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2200      	movs	r2, #0
 800b74e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2200      	movs	r2, #0
 800b754:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b75c:	b2db      	uxtb	r3, r3
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d106      	bne.n	800b770 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2200      	movs	r2, #0
 800b766:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f7f7 fa92 	bl	8002c94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2202      	movs	r2, #2
 800b774:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	681a      	ldr	r2, [r3, #0]
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b786:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	689b      	ldr	r3, [r3, #8]
 800b794:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b798:	431a      	orrs	r2, r3
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	68db      	ldr	r3, [r3, #12]
 800b79e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b7a2:	431a      	orrs	r2, r3
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	691b      	ldr	r3, [r3, #16]
 800b7a8:	f003 0302 	and.w	r3, r3, #2
 800b7ac:	431a      	orrs	r2, r3
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	695b      	ldr	r3, [r3, #20]
 800b7b2:	f003 0301 	and.w	r3, r3, #1
 800b7b6:	431a      	orrs	r2, r3
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	699b      	ldr	r3, [r3, #24]
 800b7bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b7c0:	431a      	orrs	r2, r3
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	69db      	ldr	r3, [r3, #28]
 800b7c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b7ca:	431a      	orrs	r2, r3
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6a1b      	ldr	r3, [r3, #32]
 800b7d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7d4:	ea42 0103 	orr.w	r1, r2, r3
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	430a      	orrs	r2, r1
 800b7e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	699b      	ldr	r3, [r3, #24]
 800b7ec:	0c1b      	lsrs	r3, r3, #16
 800b7ee:	f003 0104 	and.w	r1, r3, #4
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f6:	f003 0210 	and.w	r2, r3, #16
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	430a      	orrs	r2, r1
 800b800:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	69da      	ldr	r2, [r3, #28]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b810:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2200      	movs	r2, #0
 800b816:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2201      	movs	r2, #1
 800b81c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b820:	2300      	movs	r3, #0
}
 800b822:	4618      	mov	r0, r3
 800b824:	3708      	adds	r7, #8
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}

0800b82a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b82a:	b580      	push	{r7, lr}
 800b82c:	b088      	sub	sp, #32
 800b82e:	af00      	add	r7, sp, #0
 800b830:	60f8      	str	r0, [r7, #12]
 800b832:	60b9      	str	r1, [r7, #8]
 800b834:	603b      	str	r3, [r7, #0]
 800b836:	4613      	mov	r3, r2
 800b838:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b83a:	2300      	movs	r3, #0
 800b83c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b844:	2b01      	cmp	r3, #1
 800b846:	d101      	bne.n	800b84c <HAL_SPI_Transmit+0x22>
 800b848:	2302      	movs	r3, #2
 800b84a:	e126      	b.n	800ba9a <HAL_SPI_Transmit+0x270>
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2201      	movs	r2, #1
 800b850:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b854:	f7fb fb4e 	bl	8006ef4 <HAL_GetTick>
 800b858:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b85a:	88fb      	ldrh	r3, [r7, #6]
 800b85c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b864:	b2db      	uxtb	r3, r3
 800b866:	2b01      	cmp	r3, #1
 800b868:	d002      	beq.n	800b870 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b86a:	2302      	movs	r3, #2
 800b86c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b86e:	e10b      	b.n	800ba88 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d002      	beq.n	800b87c <HAL_SPI_Transmit+0x52>
 800b876:	88fb      	ldrh	r3, [r7, #6]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d102      	bne.n	800b882 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b87c:	2301      	movs	r3, #1
 800b87e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b880:	e102      	b.n	800ba88 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	2203      	movs	r2, #3
 800b886:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2200      	movs	r2, #0
 800b88e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	68ba      	ldr	r2, [r7, #8]
 800b894:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	88fa      	ldrh	r2, [r7, #6]
 800b89a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	88fa      	ldrh	r2, [r7, #6]
 800b8a0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	689b      	ldr	r3, [r3, #8]
 800b8c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8c8:	d10f      	bne.n	800b8ea <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	681a      	ldr	r2, [r3, #0]
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b8d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	681a      	ldr	r2, [r3, #0]
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b8e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8f4:	2b40      	cmp	r3, #64	; 0x40
 800b8f6:	d007      	beq.n	800b908 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	681a      	ldr	r2, [r3, #0]
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b906:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	68db      	ldr	r3, [r3, #12]
 800b90c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b910:	d14b      	bne.n	800b9aa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d002      	beq.n	800b920 <HAL_SPI_Transmit+0xf6>
 800b91a:	8afb      	ldrh	r3, [r7, #22]
 800b91c:	2b01      	cmp	r3, #1
 800b91e:	d13e      	bne.n	800b99e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b924:	881a      	ldrh	r2, [r3, #0]
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b930:	1c9a      	adds	r2, r3, #2
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b93a:	b29b      	uxth	r3, r3
 800b93c:	3b01      	subs	r3, #1
 800b93e:	b29a      	uxth	r2, r3
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b944:	e02b      	b.n	800b99e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	689b      	ldr	r3, [r3, #8]
 800b94c:	f003 0302 	and.w	r3, r3, #2
 800b950:	2b02      	cmp	r3, #2
 800b952:	d112      	bne.n	800b97a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b958:	881a      	ldrh	r2, [r3, #0]
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b964:	1c9a      	adds	r2, r3, #2
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b96e:	b29b      	uxth	r3, r3
 800b970:	3b01      	subs	r3, #1
 800b972:	b29a      	uxth	r2, r3
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	86da      	strh	r2, [r3, #54]	; 0x36
 800b978:	e011      	b.n	800b99e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b97a:	f7fb fabb 	bl	8006ef4 <HAL_GetTick>
 800b97e:	4602      	mov	r2, r0
 800b980:	69bb      	ldr	r3, [r7, #24]
 800b982:	1ad3      	subs	r3, r2, r3
 800b984:	683a      	ldr	r2, [r7, #0]
 800b986:	429a      	cmp	r2, r3
 800b988:	d803      	bhi.n	800b992 <HAL_SPI_Transmit+0x168>
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b990:	d102      	bne.n	800b998 <HAL_SPI_Transmit+0x16e>
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d102      	bne.n	800b99e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800b998:	2303      	movs	r3, #3
 800b99a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b99c:	e074      	b.n	800ba88 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9a2:	b29b      	uxth	r3, r3
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d1ce      	bne.n	800b946 <HAL_SPI_Transmit+0x11c>
 800b9a8:	e04c      	b.n	800ba44 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d002      	beq.n	800b9b8 <HAL_SPI_Transmit+0x18e>
 800b9b2:	8afb      	ldrh	r3, [r7, #22]
 800b9b4:	2b01      	cmp	r3, #1
 800b9b6:	d140      	bne.n	800ba3a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	330c      	adds	r3, #12
 800b9c2:	7812      	ldrb	r2, [r2, #0]
 800b9c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9ca:	1c5a      	adds	r2, r3, #1
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9d4:	b29b      	uxth	r3, r3
 800b9d6:	3b01      	subs	r3, #1
 800b9d8:	b29a      	uxth	r2, r3
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b9de:	e02c      	b.n	800ba3a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	689b      	ldr	r3, [r3, #8]
 800b9e6:	f003 0302 	and.w	r3, r3, #2
 800b9ea:	2b02      	cmp	r3, #2
 800b9ec:	d113      	bne.n	800ba16 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	330c      	adds	r3, #12
 800b9f8:	7812      	ldrb	r2, [r2, #0]
 800b9fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba00:	1c5a      	adds	r2, r3, #1
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba0a:	b29b      	uxth	r3, r3
 800ba0c:	3b01      	subs	r3, #1
 800ba0e:	b29a      	uxth	r2, r3
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	86da      	strh	r2, [r3, #54]	; 0x36
 800ba14:	e011      	b.n	800ba3a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba16:	f7fb fa6d 	bl	8006ef4 <HAL_GetTick>
 800ba1a:	4602      	mov	r2, r0
 800ba1c:	69bb      	ldr	r3, [r7, #24]
 800ba1e:	1ad3      	subs	r3, r2, r3
 800ba20:	683a      	ldr	r2, [r7, #0]
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d803      	bhi.n	800ba2e <HAL_SPI_Transmit+0x204>
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba2c:	d102      	bne.n	800ba34 <HAL_SPI_Transmit+0x20a>
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d102      	bne.n	800ba3a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800ba34:	2303      	movs	r3, #3
 800ba36:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ba38:	e026      	b.n	800ba88 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba3e:	b29b      	uxth	r3, r3
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d1cd      	bne.n	800b9e0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ba44:	69ba      	ldr	r2, [r7, #24]
 800ba46:	6839      	ldr	r1, [r7, #0]
 800ba48:	68f8      	ldr	r0, [r7, #12]
 800ba4a:	f000 fbcb 	bl	800c1e4 <SPI_EndRxTxTransaction>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d002      	beq.n	800ba5a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2220      	movs	r2, #32
 800ba58:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	689b      	ldr	r3, [r3, #8]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d10a      	bne.n	800ba78 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ba62:	2300      	movs	r3, #0
 800ba64:	613b      	str	r3, [r7, #16]
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	68db      	ldr	r3, [r3, #12]
 800ba6c:	613b      	str	r3, [r7, #16]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	689b      	ldr	r3, [r3, #8]
 800ba74:	613b      	str	r3, [r7, #16]
 800ba76:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d002      	beq.n	800ba86 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800ba80:	2301      	movs	r3, #1
 800ba82:	77fb      	strb	r3, [r7, #31]
 800ba84:	e000      	b.n	800ba88 <HAL_SPI_Transmit+0x25e>
  }

error:
 800ba86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2200      	movs	r2, #0
 800ba94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ba98:	7ffb      	ldrb	r3, [r7, #31]
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3720      	adds	r7, #32
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}

0800baa2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800baa2:	b580      	push	{r7, lr}
 800baa4:	b088      	sub	sp, #32
 800baa6:	af02      	add	r7, sp, #8
 800baa8:	60f8      	str	r0, [r7, #12]
 800baaa:	60b9      	str	r1, [r7, #8]
 800baac:	603b      	str	r3, [r7, #0]
 800baae:	4613      	mov	r3, r2
 800bab0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bab2:	2300      	movs	r3, #0
 800bab4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	685b      	ldr	r3, [r3, #4]
 800baba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800babe:	d112      	bne.n	800bae6 <HAL_SPI_Receive+0x44>
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	689b      	ldr	r3, [r3, #8]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d10e      	bne.n	800bae6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	2204      	movs	r2, #4
 800bacc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800bad0:	88fa      	ldrh	r2, [r7, #6]
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	9300      	str	r3, [sp, #0]
 800bad6:	4613      	mov	r3, r2
 800bad8:	68ba      	ldr	r2, [r7, #8]
 800bada:	68b9      	ldr	r1, [r7, #8]
 800badc:	68f8      	ldr	r0, [r7, #12]
 800bade:	f000 f8f1 	bl	800bcc4 <HAL_SPI_TransmitReceive>
 800bae2:	4603      	mov	r3, r0
 800bae4:	e0ea      	b.n	800bcbc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800baec:	2b01      	cmp	r3, #1
 800baee:	d101      	bne.n	800baf4 <HAL_SPI_Receive+0x52>
 800baf0:	2302      	movs	r3, #2
 800baf2:	e0e3      	b.n	800bcbc <HAL_SPI_Receive+0x21a>
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2201      	movs	r2, #1
 800baf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bafc:	f7fb f9fa 	bl	8006ef4 <HAL_GetTick>
 800bb00:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bb08:	b2db      	uxtb	r3, r3
 800bb0a:	2b01      	cmp	r3, #1
 800bb0c:	d002      	beq.n	800bb14 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800bb0e:	2302      	movs	r3, #2
 800bb10:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bb12:	e0ca      	b.n	800bcaa <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d002      	beq.n	800bb20 <HAL_SPI_Receive+0x7e>
 800bb1a:	88fb      	ldrh	r3, [r7, #6]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d102      	bne.n	800bb26 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800bb20:	2301      	movs	r3, #1
 800bb22:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bb24:	e0c1      	b.n	800bcaa <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	2204      	movs	r2, #4
 800bb2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	2200      	movs	r2, #0
 800bb32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	68ba      	ldr	r2, [r7, #8]
 800bb38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	88fa      	ldrh	r2, [r7, #6]
 800bb3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	88fa      	ldrh	r2, [r7, #6]
 800bb44:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	2200      	movs	r2, #0
 800bb56:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	2200      	movs	r2, #0
 800bb62:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	689b      	ldr	r3, [r3, #8]
 800bb68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb6c:	d10f      	bne.n	800bb8e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	681a      	ldr	r2, [r3, #0]
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb7c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	681a      	ldr	r2, [r3, #0]
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bb8c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb98:	2b40      	cmp	r3, #64	; 0x40
 800bb9a:	d007      	beq.n	800bbac <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bbaa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	68db      	ldr	r3, [r3, #12]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d162      	bne.n	800bc7a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800bbb4:	e02e      	b.n	800bc14 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	689b      	ldr	r3, [r3, #8]
 800bbbc:	f003 0301 	and.w	r3, r3, #1
 800bbc0:	2b01      	cmp	r3, #1
 800bbc2:	d115      	bne.n	800bbf0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f103 020c 	add.w	r2, r3, #12
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbd0:	7812      	ldrb	r2, [r2, #0]
 800bbd2:	b2d2      	uxtb	r2, r2
 800bbd4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbda:	1c5a      	adds	r2, r3, #1
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bbe4:	b29b      	uxth	r3, r3
 800bbe6:	3b01      	subs	r3, #1
 800bbe8:	b29a      	uxth	r2, r3
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bbee:	e011      	b.n	800bc14 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bbf0:	f7fb f980 	bl	8006ef4 <HAL_GetTick>
 800bbf4:	4602      	mov	r2, r0
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	1ad3      	subs	r3, r2, r3
 800bbfa:	683a      	ldr	r2, [r7, #0]
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	d803      	bhi.n	800bc08 <HAL_SPI_Receive+0x166>
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc06:	d102      	bne.n	800bc0e <HAL_SPI_Receive+0x16c>
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d102      	bne.n	800bc14 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800bc0e:	2303      	movs	r3, #3
 800bc10:	75fb      	strb	r3, [r7, #23]
          goto error;
 800bc12:	e04a      	b.n	800bcaa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc18:	b29b      	uxth	r3, r3
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d1cb      	bne.n	800bbb6 <HAL_SPI_Receive+0x114>
 800bc1e:	e031      	b.n	800bc84 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	689b      	ldr	r3, [r3, #8]
 800bc26:	f003 0301 	and.w	r3, r3, #1
 800bc2a:	2b01      	cmp	r3, #1
 800bc2c:	d113      	bne.n	800bc56 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	68da      	ldr	r2, [r3, #12]
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc38:	b292      	uxth	r2, r2
 800bc3a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc40:	1c9a      	adds	r2, r3, #2
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc4a:	b29b      	uxth	r3, r3
 800bc4c:	3b01      	subs	r3, #1
 800bc4e:	b29a      	uxth	r2, r3
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bc54:	e011      	b.n	800bc7a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bc56:	f7fb f94d 	bl	8006ef4 <HAL_GetTick>
 800bc5a:	4602      	mov	r2, r0
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	1ad3      	subs	r3, r2, r3
 800bc60:	683a      	ldr	r2, [r7, #0]
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d803      	bhi.n	800bc6e <HAL_SPI_Receive+0x1cc>
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc6c:	d102      	bne.n	800bc74 <HAL_SPI_Receive+0x1d2>
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d102      	bne.n	800bc7a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800bc74:	2303      	movs	r3, #3
 800bc76:	75fb      	strb	r3, [r7, #23]
          goto error;
 800bc78:	e017      	b.n	800bcaa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc7e:	b29b      	uxth	r3, r3
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d1cd      	bne.n	800bc20 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bc84:	693a      	ldr	r2, [r7, #16]
 800bc86:	6839      	ldr	r1, [r7, #0]
 800bc88:	68f8      	ldr	r0, [r7, #12]
 800bc8a:	f000 fa45 	bl	800c118 <SPI_EndRxTransaction>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d002      	beq.n	800bc9a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	2220      	movs	r2, #32
 800bc98:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d002      	beq.n	800bca8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800bca2:	2301      	movs	r3, #1
 800bca4:	75fb      	strb	r3, [r7, #23]
 800bca6:	e000      	b.n	800bcaa <HAL_SPI_Receive+0x208>
  }

error :
 800bca8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	2201      	movs	r2, #1
 800bcae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bcba:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3718      	adds	r7, #24
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b08c      	sub	sp, #48	; 0x30
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	60f8      	str	r0, [r7, #12]
 800bccc:	60b9      	str	r1, [r7, #8]
 800bcce:	607a      	str	r2, [r7, #4]
 800bcd0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bce2:	2b01      	cmp	r3, #1
 800bce4:	d101      	bne.n	800bcea <HAL_SPI_TransmitReceive+0x26>
 800bce6:	2302      	movs	r3, #2
 800bce8:	e18a      	b.n	800c000 <HAL_SPI_TransmitReceive+0x33c>
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	2201      	movs	r2, #1
 800bcee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bcf2:	f7fb f8ff 	bl	8006ef4 <HAL_GetTick>
 800bcf6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bcfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800bd08:	887b      	ldrh	r3, [r7, #2]
 800bd0a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bd0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bd10:	2b01      	cmp	r3, #1
 800bd12:	d00f      	beq.n	800bd34 <HAL_SPI_TransmitReceive+0x70>
 800bd14:	69fb      	ldr	r3, [r7, #28]
 800bd16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bd1a:	d107      	bne.n	800bd2c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	689b      	ldr	r3, [r3, #8]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d103      	bne.n	800bd2c <HAL_SPI_TransmitReceive+0x68>
 800bd24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bd28:	2b04      	cmp	r3, #4
 800bd2a:	d003      	beq.n	800bd34 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800bd2c:	2302      	movs	r3, #2
 800bd2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800bd32:	e15b      	b.n	800bfec <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d005      	beq.n	800bd46 <HAL_SPI_TransmitReceive+0x82>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d002      	beq.n	800bd46 <HAL_SPI_TransmitReceive+0x82>
 800bd40:	887b      	ldrh	r3, [r7, #2]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d103      	bne.n	800bd4e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800bd46:	2301      	movs	r3, #1
 800bd48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800bd4c:	e14e      	b.n	800bfec <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bd54:	b2db      	uxtb	r3, r3
 800bd56:	2b04      	cmp	r3, #4
 800bd58:	d003      	beq.n	800bd62 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	2205      	movs	r2, #5
 800bd5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	2200      	movs	r2, #0
 800bd66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	687a      	ldr	r2, [r7, #4]
 800bd6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	887a      	ldrh	r2, [r7, #2]
 800bd72:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	887a      	ldrh	r2, [r7, #2]
 800bd78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	68ba      	ldr	r2, [r7, #8]
 800bd7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	887a      	ldrh	r2, [r7, #2]
 800bd84:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	887a      	ldrh	r2, [r7, #2]
 800bd8a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	2200      	movs	r2, #0
 800bd96:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bda2:	2b40      	cmp	r3, #64	; 0x40
 800bda4:	d007      	beq.n	800bdb6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	681a      	ldr	r2, [r3, #0]
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bdb4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	68db      	ldr	r3, [r3, #12]
 800bdba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bdbe:	d178      	bne.n	800beb2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	685b      	ldr	r3, [r3, #4]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d002      	beq.n	800bdce <HAL_SPI_TransmitReceive+0x10a>
 800bdc8:	8b7b      	ldrh	r3, [r7, #26]
 800bdca:	2b01      	cmp	r3, #1
 800bdcc:	d166      	bne.n	800be9c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdd2:	881a      	ldrh	r2, [r3, #0]
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdde:	1c9a      	adds	r2, r3, #2
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bde8:	b29b      	uxth	r3, r3
 800bdea:	3b01      	subs	r3, #1
 800bdec:	b29a      	uxth	r2, r3
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bdf2:	e053      	b.n	800be9c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	689b      	ldr	r3, [r3, #8]
 800bdfa:	f003 0302 	and.w	r3, r3, #2
 800bdfe:	2b02      	cmp	r3, #2
 800be00:	d11b      	bne.n	800be3a <HAL_SPI_TransmitReceive+0x176>
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800be06:	b29b      	uxth	r3, r3
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d016      	beq.n	800be3a <HAL_SPI_TransmitReceive+0x176>
 800be0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be0e:	2b01      	cmp	r3, #1
 800be10:	d113      	bne.n	800be3a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be16:	881a      	ldrh	r2, [r3, #0]
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be22:	1c9a      	adds	r2, r3, #2
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800be2c:	b29b      	uxth	r3, r3
 800be2e:	3b01      	subs	r3, #1
 800be30:	b29a      	uxth	r2, r3
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800be36:	2300      	movs	r3, #0
 800be38:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	689b      	ldr	r3, [r3, #8]
 800be40:	f003 0301 	and.w	r3, r3, #1
 800be44:	2b01      	cmp	r3, #1
 800be46:	d119      	bne.n	800be7c <HAL_SPI_TransmitReceive+0x1b8>
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be4c:	b29b      	uxth	r3, r3
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d014      	beq.n	800be7c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	68da      	ldr	r2, [r3, #12]
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be5c:	b292      	uxth	r2, r2
 800be5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be64:	1c9a      	adds	r2, r3, #2
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be6e:	b29b      	uxth	r3, r3
 800be70:	3b01      	subs	r3, #1
 800be72:	b29a      	uxth	r2, r3
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800be78:	2301      	movs	r3, #1
 800be7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800be7c:	f7fb f83a 	bl	8006ef4 <HAL_GetTick>
 800be80:	4602      	mov	r2, r0
 800be82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be84:	1ad3      	subs	r3, r2, r3
 800be86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be88:	429a      	cmp	r2, r3
 800be8a:	d807      	bhi.n	800be9c <HAL_SPI_TransmitReceive+0x1d8>
 800be8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be92:	d003      	beq.n	800be9c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800be94:	2303      	movs	r3, #3
 800be96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800be9a:	e0a7      	b.n	800bfec <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bea0:	b29b      	uxth	r3, r3
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d1a6      	bne.n	800bdf4 <HAL_SPI_TransmitReceive+0x130>
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800beaa:	b29b      	uxth	r3, r3
 800beac:	2b00      	cmp	r3, #0
 800beae:	d1a1      	bne.n	800bdf4 <HAL_SPI_TransmitReceive+0x130>
 800beb0:	e07c      	b.n	800bfac <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d002      	beq.n	800bec0 <HAL_SPI_TransmitReceive+0x1fc>
 800beba:	8b7b      	ldrh	r3, [r7, #26]
 800bebc:	2b01      	cmp	r3, #1
 800bebe:	d16b      	bne.n	800bf98 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	330c      	adds	r3, #12
 800beca:	7812      	ldrb	r2, [r2, #0]
 800becc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bed2:	1c5a      	adds	r2, r3, #1
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bedc:	b29b      	uxth	r3, r3
 800bede:	3b01      	subs	r3, #1
 800bee0:	b29a      	uxth	r2, r3
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bee6:	e057      	b.n	800bf98 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	689b      	ldr	r3, [r3, #8]
 800beee:	f003 0302 	and.w	r3, r3, #2
 800bef2:	2b02      	cmp	r3, #2
 800bef4:	d11c      	bne.n	800bf30 <HAL_SPI_TransmitReceive+0x26c>
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800befa:	b29b      	uxth	r3, r3
 800befc:	2b00      	cmp	r3, #0
 800befe:	d017      	beq.n	800bf30 <HAL_SPI_TransmitReceive+0x26c>
 800bf00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf02:	2b01      	cmp	r3, #1
 800bf04:	d114      	bne.n	800bf30 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	330c      	adds	r3, #12
 800bf10:	7812      	ldrb	r2, [r2, #0]
 800bf12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf18:	1c5a      	adds	r2, r3, #1
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf22:	b29b      	uxth	r3, r3
 800bf24:	3b01      	subs	r3, #1
 800bf26:	b29a      	uxth	r2, r3
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	689b      	ldr	r3, [r3, #8]
 800bf36:	f003 0301 	and.w	r3, r3, #1
 800bf3a:	2b01      	cmp	r3, #1
 800bf3c:	d119      	bne.n	800bf72 <HAL_SPI_TransmitReceive+0x2ae>
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf42:	b29b      	uxth	r3, r3
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d014      	beq.n	800bf72 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	68da      	ldr	r2, [r3, #12]
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf52:	b2d2      	uxtb	r2, r2
 800bf54:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf5a:	1c5a      	adds	r2, r3, #1
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf64:	b29b      	uxth	r3, r3
 800bf66:	3b01      	subs	r3, #1
 800bf68:	b29a      	uxth	r2, r3
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bf6e:	2301      	movs	r3, #1
 800bf70:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bf72:	f7fa ffbf 	bl	8006ef4 <HAL_GetTick>
 800bf76:	4602      	mov	r2, r0
 800bf78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf7a:	1ad3      	subs	r3, r2, r3
 800bf7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	d803      	bhi.n	800bf8a <HAL_SPI_TransmitReceive+0x2c6>
 800bf82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf88:	d102      	bne.n	800bf90 <HAL_SPI_TransmitReceive+0x2cc>
 800bf8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d103      	bne.n	800bf98 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800bf90:	2303      	movs	r3, #3
 800bf92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800bf96:	e029      	b.n	800bfec <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf9c:	b29b      	uxth	r3, r3
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d1a2      	bne.n	800bee8 <HAL_SPI_TransmitReceive+0x224>
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfa6:	b29b      	uxth	r3, r3
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d19d      	bne.n	800bee8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bfac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bfb0:	68f8      	ldr	r0, [r7, #12]
 800bfb2:	f000 f917 	bl	800c1e4 <SPI_EndRxTxTransaction>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d006      	beq.n	800bfca <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	2220      	movs	r2, #32
 800bfc6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800bfc8:	e010      	b.n	800bfec <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	689b      	ldr	r3, [r3, #8]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d10b      	bne.n	800bfea <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	617b      	str	r3, [r7, #20]
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	68db      	ldr	r3, [r3, #12]
 800bfdc:	617b      	str	r3, [r7, #20]
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	689b      	ldr	r3, [r3, #8]
 800bfe4:	617b      	str	r3, [r7, #20]
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	e000      	b.n	800bfec <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800bfea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	2201      	movs	r2, #1
 800bff0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	2200      	movs	r2, #0
 800bff8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bffc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c000:	4618      	mov	r0, r3
 800c002:	3730      	adds	r7, #48	; 0x30
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}

0800c008 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b088      	sub	sp, #32
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	60f8      	str	r0, [r7, #12]
 800c010:	60b9      	str	r1, [r7, #8]
 800c012:	603b      	str	r3, [r7, #0]
 800c014:	4613      	mov	r3, r2
 800c016:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c018:	f7fa ff6c 	bl	8006ef4 <HAL_GetTick>
 800c01c:	4602      	mov	r2, r0
 800c01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c020:	1a9b      	subs	r3, r3, r2
 800c022:	683a      	ldr	r2, [r7, #0]
 800c024:	4413      	add	r3, r2
 800c026:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c028:	f7fa ff64 	bl	8006ef4 <HAL_GetTick>
 800c02c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c02e:	4b39      	ldr	r3, [pc, #228]	; (800c114 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	015b      	lsls	r3, r3, #5
 800c034:	0d1b      	lsrs	r3, r3, #20
 800c036:	69fa      	ldr	r2, [r7, #28]
 800c038:	fb02 f303 	mul.w	r3, r2, r3
 800c03c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c03e:	e054      	b.n	800c0ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c046:	d050      	beq.n	800c0ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c048:	f7fa ff54 	bl	8006ef4 <HAL_GetTick>
 800c04c:	4602      	mov	r2, r0
 800c04e:	69bb      	ldr	r3, [r7, #24]
 800c050:	1ad3      	subs	r3, r2, r3
 800c052:	69fa      	ldr	r2, [r7, #28]
 800c054:	429a      	cmp	r2, r3
 800c056:	d902      	bls.n	800c05e <SPI_WaitFlagStateUntilTimeout+0x56>
 800c058:	69fb      	ldr	r3, [r7, #28]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d13d      	bne.n	800c0da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	685a      	ldr	r2, [r3, #4]
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c06c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	685b      	ldr	r3, [r3, #4]
 800c072:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c076:	d111      	bne.n	800c09c <SPI_WaitFlagStateUntilTimeout+0x94>
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	689b      	ldr	r3, [r3, #8]
 800c07c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c080:	d004      	beq.n	800c08c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	689b      	ldr	r3, [r3, #8]
 800c086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c08a:	d107      	bne.n	800c09c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	681a      	ldr	r2, [r3, #0]
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c09a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0a4:	d10f      	bne.n	800c0c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	681a      	ldr	r2, [r3, #0]
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c0b4:	601a      	str	r2, [r3, #0]
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	681a      	ldr	r2, [r3, #0]
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c0c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c0d6:	2303      	movs	r3, #3
 800c0d8:	e017      	b.n	800c10a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d101      	bne.n	800c0e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c0e4:	697b      	ldr	r3, [r7, #20]
 800c0e6:	3b01      	subs	r3, #1
 800c0e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	689a      	ldr	r2, [r3, #8]
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	4013      	ands	r3, r2
 800c0f4:	68ba      	ldr	r2, [r7, #8]
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	bf0c      	ite	eq
 800c0fa:	2301      	moveq	r3, #1
 800c0fc:	2300      	movne	r3, #0
 800c0fe:	b2db      	uxtb	r3, r3
 800c100:	461a      	mov	r2, r3
 800c102:	79fb      	ldrb	r3, [r7, #7]
 800c104:	429a      	cmp	r2, r3
 800c106:	d19b      	bne.n	800c040 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c108:	2300      	movs	r3, #0
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3720      	adds	r7, #32
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}
 800c112:	bf00      	nop
 800c114:	20000000 	.word	0x20000000

0800c118 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b086      	sub	sp, #24
 800c11c:	af02      	add	r7, sp, #8
 800c11e:	60f8      	str	r0, [r7, #12]
 800c120:	60b9      	str	r1, [r7, #8]
 800c122:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	685b      	ldr	r3, [r3, #4]
 800c128:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c12c:	d111      	bne.n	800c152 <SPI_EndRxTransaction+0x3a>
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	689b      	ldr	r3, [r3, #8]
 800c132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c136:	d004      	beq.n	800c142 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	689b      	ldr	r3, [r3, #8]
 800c13c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c140:	d107      	bne.n	800c152 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	681a      	ldr	r2, [r3, #0]
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c150:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	685b      	ldr	r3, [r3, #4]
 800c156:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c15a:	d12a      	bne.n	800c1b2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	689b      	ldr	r3, [r3, #8]
 800c160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c164:	d012      	beq.n	800c18c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	9300      	str	r3, [sp, #0]
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	2200      	movs	r2, #0
 800c16e:	2180      	movs	r1, #128	; 0x80
 800c170:	68f8      	ldr	r0, [r7, #12]
 800c172:	f7ff ff49 	bl	800c008 <SPI_WaitFlagStateUntilTimeout>
 800c176:	4603      	mov	r3, r0
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d02d      	beq.n	800c1d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c180:	f043 0220 	orr.w	r2, r3, #32
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c188:	2303      	movs	r3, #3
 800c18a:	e026      	b.n	800c1da <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	9300      	str	r3, [sp, #0]
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	2200      	movs	r2, #0
 800c194:	2101      	movs	r1, #1
 800c196:	68f8      	ldr	r0, [r7, #12]
 800c198:	f7ff ff36 	bl	800c008 <SPI_WaitFlagStateUntilTimeout>
 800c19c:	4603      	mov	r3, r0
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d01a      	beq.n	800c1d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1a6:	f043 0220 	orr.w	r2, r3, #32
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c1ae:	2303      	movs	r3, #3
 800c1b0:	e013      	b.n	800c1da <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	9300      	str	r3, [sp, #0]
 800c1b6:	68bb      	ldr	r3, [r7, #8]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	2101      	movs	r1, #1
 800c1bc:	68f8      	ldr	r0, [r7, #12]
 800c1be:	f7ff ff23 	bl	800c008 <SPI_WaitFlagStateUntilTimeout>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d007      	beq.n	800c1d8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1cc:	f043 0220 	orr.w	r2, r3, #32
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c1d4:	2303      	movs	r3, #3
 800c1d6:	e000      	b.n	800c1da <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800c1d8:	2300      	movs	r3, #0
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3710      	adds	r7, #16
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}
	...

0800c1e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b088      	sub	sp, #32
 800c1e8:	af02      	add	r7, sp, #8
 800c1ea:	60f8      	str	r0, [r7, #12]
 800c1ec:	60b9      	str	r1, [r7, #8]
 800c1ee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c1f0:	4b1b      	ldr	r3, [pc, #108]	; (800c260 <SPI_EndRxTxTransaction+0x7c>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	4a1b      	ldr	r2, [pc, #108]	; (800c264 <SPI_EndRxTxTransaction+0x80>)
 800c1f6:	fba2 2303 	umull	r2, r3, r2, r3
 800c1fa:	0d5b      	lsrs	r3, r3, #21
 800c1fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c200:	fb02 f303 	mul.w	r3, r2, r3
 800c204:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c20e:	d112      	bne.n	800c236 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	9300      	str	r3, [sp, #0]
 800c214:	68bb      	ldr	r3, [r7, #8]
 800c216:	2200      	movs	r2, #0
 800c218:	2180      	movs	r1, #128	; 0x80
 800c21a:	68f8      	ldr	r0, [r7, #12]
 800c21c:	f7ff fef4 	bl	800c008 <SPI_WaitFlagStateUntilTimeout>
 800c220:	4603      	mov	r3, r0
 800c222:	2b00      	cmp	r3, #0
 800c224:	d016      	beq.n	800c254 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c22a:	f043 0220 	orr.w	r2, r3, #32
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c232:	2303      	movs	r3, #3
 800c234:	e00f      	b.n	800c256 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c236:	697b      	ldr	r3, [r7, #20]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d00a      	beq.n	800c252 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	3b01      	subs	r3, #1
 800c240:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	689b      	ldr	r3, [r3, #8]
 800c248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c24c:	2b80      	cmp	r3, #128	; 0x80
 800c24e:	d0f2      	beq.n	800c236 <SPI_EndRxTxTransaction+0x52>
 800c250:	e000      	b.n	800c254 <SPI_EndRxTxTransaction+0x70>
        break;
 800c252:	bf00      	nop
  }

  return HAL_OK;
 800c254:	2300      	movs	r3, #0
}
 800c256:	4618      	mov	r0, r3
 800c258:	3718      	adds	r7, #24
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop
 800c260:	20000000 	.word	0x20000000
 800c264:	165e9f81 	.word	0x165e9f81

0800c268 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b082      	sub	sp, #8
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d101      	bne.n	800c27a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c276:	2301      	movs	r3, #1
 800c278:	e041      	b.n	800c2fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c280:	b2db      	uxtb	r3, r3
 800c282:	2b00      	cmp	r3, #0
 800c284:	d106      	bne.n	800c294 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2200      	movs	r2, #0
 800c28a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f000 f839 	bl	800c306 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2202      	movs	r2, #2
 800c298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681a      	ldr	r2, [r3, #0]
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	3304      	adds	r3, #4
 800c2a4:	4619      	mov	r1, r3
 800c2a6:	4610      	mov	r0, r2
 800c2a8:	f000 faea 	bl	800c880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2201      	movs	r2, #1
 800c2b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2201      	movs	r2, #1
 800c2b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2201      	movs	r2, #1
 800c2c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2201      	movs	r2, #1
 800c2e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c2fc:	2300      	movs	r3, #0
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3708      	adds	r7, #8
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}

0800c306 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800c306:	b480      	push	{r7}
 800c308:	b083      	sub	sp, #12
 800c30a:	af00      	add	r7, sp, #0
 800c30c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800c30e:	bf00      	nop
 800c310:	370c      	adds	r7, #12
 800c312:	46bd      	mov	sp, r7
 800c314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c318:	4770      	bx	lr
	...

0800c31c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b085      	sub	sp, #20
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c32a:	b2db      	uxtb	r3, r3
 800c32c:	2b01      	cmp	r3, #1
 800c32e:	d001      	beq.n	800c334 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c330:	2301      	movs	r3, #1
 800c332:	e04e      	b.n	800c3d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2202      	movs	r2, #2
 800c338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	68da      	ldr	r2, [r3, #12]
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f042 0201 	orr.w	r2, r2, #1
 800c34a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4a23      	ldr	r2, [pc, #140]	; (800c3e0 <HAL_TIM_Base_Start_IT+0xc4>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d022      	beq.n	800c39c <HAL_TIM_Base_Start_IT+0x80>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c35e:	d01d      	beq.n	800c39c <HAL_TIM_Base_Start_IT+0x80>
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	4a1f      	ldr	r2, [pc, #124]	; (800c3e4 <HAL_TIM_Base_Start_IT+0xc8>)
 800c366:	4293      	cmp	r3, r2
 800c368:	d018      	beq.n	800c39c <HAL_TIM_Base_Start_IT+0x80>
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	4a1e      	ldr	r2, [pc, #120]	; (800c3e8 <HAL_TIM_Base_Start_IT+0xcc>)
 800c370:	4293      	cmp	r3, r2
 800c372:	d013      	beq.n	800c39c <HAL_TIM_Base_Start_IT+0x80>
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	4a1c      	ldr	r2, [pc, #112]	; (800c3ec <HAL_TIM_Base_Start_IT+0xd0>)
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d00e      	beq.n	800c39c <HAL_TIM_Base_Start_IT+0x80>
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	4a1b      	ldr	r2, [pc, #108]	; (800c3f0 <HAL_TIM_Base_Start_IT+0xd4>)
 800c384:	4293      	cmp	r3, r2
 800c386:	d009      	beq.n	800c39c <HAL_TIM_Base_Start_IT+0x80>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	4a19      	ldr	r2, [pc, #100]	; (800c3f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800c38e:	4293      	cmp	r3, r2
 800c390:	d004      	beq.n	800c39c <HAL_TIM_Base_Start_IT+0x80>
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	4a18      	ldr	r2, [pc, #96]	; (800c3f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800c398:	4293      	cmp	r3, r2
 800c39a:	d111      	bne.n	800c3c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	689b      	ldr	r3, [r3, #8]
 800c3a2:	f003 0307 	and.w	r3, r3, #7
 800c3a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	2b06      	cmp	r3, #6
 800c3ac:	d010      	beq.n	800c3d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	681a      	ldr	r2, [r3, #0]
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f042 0201 	orr.w	r2, r2, #1
 800c3bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3be:	e007      	b.n	800c3d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	681a      	ldr	r2, [r3, #0]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f042 0201 	orr.w	r2, r2, #1
 800c3ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c3d0:	2300      	movs	r3, #0
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3714      	adds	r7, #20
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3dc:	4770      	bx	lr
 800c3de:	bf00      	nop
 800c3e0:	40010000 	.word	0x40010000
 800c3e4:	40000400 	.word	0x40000400
 800c3e8:	40000800 	.word	0x40000800
 800c3ec:	40000c00 	.word	0x40000c00
 800c3f0:	40010400 	.word	0x40010400
 800c3f4:	40014000 	.word	0x40014000
 800c3f8:	40001800 	.word	0x40001800

0800c3fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b082      	sub	sp, #8
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d101      	bne.n	800c40e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c40a:	2301      	movs	r3, #1
 800c40c:	e041      	b.n	800c492 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c414:	b2db      	uxtb	r3, r3
 800c416:	2b00      	cmp	r3, #0
 800c418:	d106      	bne.n	800c428 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2200      	movs	r2, #0
 800c41e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f7f6 fcec 	bl	8002e00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2202      	movs	r2, #2
 800c42c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681a      	ldr	r2, [r3, #0]
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	3304      	adds	r3, #4
 800c438:	4619      	mov	r1, r3
 800c43a:	4610      	mov	r0, r2
 800c43c:	f000 fa20 	bl	800c880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2201      	movs	r2, #1
 800c444:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2201      	movs	r2, #1
 800c44c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2201      	movs	r2, #1
 800c454:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2201      	movs	r2, #1
 800c45c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2201      	movs	r2, #1
 800c464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2201      	movs	r2, #1
 800c46c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2201      	movs	r2, #1
 800c474:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2201      	movs	r2, #1
 800c47c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2201      	movs	r2, #1
 800c484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2201      	movs	r2, #1
 800c48c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c490:	2300      	movs	r3, #0
}
 800c492:	4618      	mov	r0, r3
 800c494:	3708      	adds	r7, #8
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}

0800c49a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c49a:	b580      	push	{r7, lr}
 800c49c:	b082      	sub	sp, #8
 800c49e:	af00      	add	r7, sp, #0
 800c4a0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	691b      	ldr	r3, [r3, #16]
 800c4a8:	f003 0302 	and.w	r3, r3, #2
 800c4ac:	2b02      	cmp	r3, #2
 800c4ae:	d122      	bne.n	800c4f6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	68db      	ldr	r3, [r3, #12]
 800c4b6:	f003 0302 	and.w	r3, r3, #2
 800c4ba:	2b02      	cmp	r3, #2
 800c4bc:	d11b      	bne.n	800c4f6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f06f 0202 	mvn.w	r2, #2
 800c4c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2201      	movs	r2, #1
 800c4cc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	699b      	ldr	r3, [r3, #24]
 800c4d4:	f003 0303 	and.w	r3, r3, #3
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d003      	beq.n	800c4e4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f000 f9b1 	bl	800c844 <HAL_TIM_IC_CaptureCallback>
 800c4e2:	e005      	b.n	800c4f0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f000 f9a3 	bl	800c830 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f000 f9b4 	bl	800c858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	691b      	ldr	r3, [r3, #16]
 800c4fc:	f003 0304 	and.w	r3, r3, #4
 800c500:	2b04      	cmp	r3, #4
 800c502:	d122      	bne.n	800c54a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	68db      	ldr	r3, [r3, #12]
 800c50a:	f003 0304 	and.w	r3, r3, #4
 800c50e:	2b04      	cmp	r3, #4
 800c510:	d11b      	bne.n	800c54a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f06f 0204 	mvn.w	r2, #4
 800c51a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2202      	movs	r2, #2
 800c520:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	699b      	ldr	r3, [r3, #24]
 800c528:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d003      	beq.n	800c538 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f000 f987 	bl	800c844 <HAL_TIM_IC_CaptureCallback>
 800c536:	e005      	b.n	800c544 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f000 f979 	bl	800c830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f000 f98a 	bl	800c858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2200      	movs	r2, #0
 800c548:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	691b      	ldr	r3, [r3, #16]
 800c550:	f003 0308 	and.w	r3, r3, #8
 800c554:	2b08      	cmp	r3, #8
 800c556:	d122      	bne.n	800c59e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	68db      	ldr	r3, [r3, #12]
 800c55e:	f003 0308 	and.w	r3, r3, #8
 800c562:	2b08      	cmp	r3, #8
 800c564:	d11b      	bne.n	800c59e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f06f 0208 	mvn.w	r2, #8
 800c56e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2204      	movs	r2, #4
 800c574:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	69db      	ldr	r3, [r3, #28]
 800c57c:	f003 0303 	and.w	r3, r3, #3
 800c580:	2b00      	cmp	r3, #0
 800c582:	d003      	beq.n	800c58c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f000 f95d 	bl	800c844 <HAL_TIM_IC_CaptureCallback>
 800c58a:	e005      	b.n	800c598 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f000 f94f 	bl	800c830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f000 f960 	bl	800c858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2200      	movs	r2, #0
 800c59c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	691b      	ldr	r3, [r3, #16]
 800c5a4:	f003 0310 	and.w	r3, r3, #16
 800c5a8:	2b10      	cmp	r3, #16
 800c5aa:	d122      	bne.n	800c5f2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	68db      	ldr	r3, [r3, #12]
 800c5b2:	f003 0310 	and.w	r3, r3, #16
 800c5b6:	2b10      	cmp	r3, #16
 800c5b8:	d11b      	bne.n	800c5f2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	f06f 0210 	mvn.w	r2, #16
 800c5c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2208      	movs	r2, #8
 800c5c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	69db      	ldr	r3, [r3, #28]
 800c5d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d003      	beq.n	800c5e0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f000 f933 	bl	800c844 <HAL_TIM_IC_CaptureCallback>
 800c5de:	e005      	b.n	800c5ec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f000 f925 	bl	800c830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 f936 	bl	800c858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	691b      	ldr	r3, [r3, #16]
 800c5f8:	f003 0301 	and.w	r3, r3, #1
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	d10e      	bne.n	800c61e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	68db      	ldr	r3, [r3, #12]
 800c606:	f003 0301 	and.w	r3, r3, #1
 800c60a:	2b01      	cmp	r3, #1
 800c60c:	d107      	bne.n	800c61e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	f06f 0201 	mvn.w	r2, #1
 800c616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f7f6 f9a9 	bl	8002970 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	691b      	ldr	r3, [r3, #16]
 800c624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c628:	2b80      	cmp	r3, #128	; 0x80
 800c62a:	d10e      	bne.n	800c64a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	68db      	ldr	r3, [r3, #12]
 800c632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c636:	2b80      	cmp	r3, #128	; 0x80
 800c638:	d107      	bne.n	800c64a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f000 fbf1 	bl	800ce2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	691b      	ldr	r3, [r3, #16]
 800c650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c654:	2b40      	cmp	r3, #64	; 0x40
 800c656:	d10e      	bne.n	800c676 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	68db      	ldr	r3, [r3, #12]
 800c65e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c662:	2b40      	cmp	r3, #64	; 0x40
 800c664:	d107      	bne.n	800c676 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c66e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f000 f8fb 	bl	800c86c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	691b      	ldr	r3, [r3, #16]
 800c67c:	f003 0320 	and.w	r3, r3, #32
 800c680:	2b20      	cmp	r3, #32
 800c682:	d10e      	bne.n	800c6a2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	68db      	ldr	r3, [r3, #12]
 800c68a:	f003 0320 	and.w	r3, r3, #32
 800c68e:	2b20      	cmp	r3, #32
 800c690:	d107      	bne.n	800c6a2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f06f 0220 	mvn.w	r2, #32
 800c69a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f000 fbbb 	bl	800ce18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c6a2:	bf00      	nop
 800c6a4:	3708      	adds	r7, #8
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}
	...

0800c6ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b086      	sub	sp, #24
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	60f8      	str	r0, [r7, #12]
 800c6b4:	60b9      	str	r1, [r7, #8]
 800c6b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c6c2:	2b01      	cmp	r3, #1
 800c6c4:	d101      	bne.n	800c6ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c6c6:	2302      	movs	r3, #2
 800c6c8:	e0ae      	b.n	800c828 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	2201      	movs	r2, #1
 800c6ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2b0c      	cmp	r3, #12
 800c6d6:	f200 809f 	bhi.w	800c818 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c6da:	a201      	add	r2, pc, #4	; (adr r2, 800c6e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6e0:	0800c715 	.word	0x0800c715
 800c6e4:	0800c819 	.word	0x0800c819
 800c6e8:	0800c819 	.word	0x0800c819
 800c6ec:	0800c819 	.word	0x0800c819
 800c6f0:	0800c755 	.word	0x0800c755
 800c6f4:	0800c819 	.word	0x0800c819
 800c6f8:	0800c819 	.word	0x0800c819
 800c6fc:	0800c819 	.word	0x0800c819
 800c700:	0800c797 	.word	0x0800c797
 800c704:	0800c819 	.word	0x0800c819
 800c708:	0800c819 	.word	0x0800c819
 800c70c:	0800c819 	.word	0x0800c819
 800c710:	0800c7d7 	.word	0x0800c7d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	68b9      	ldr	r1, [r7, #8]
 800c71a:	4618      	mov	r0, r3
 800c71c:	f000 f950 	bl	800c9c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	699a      	ldr	r2, [r3, #24]
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f042 0208 	orr.w	r2, r2, #8
 800c72e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	699a      	ldr	r2, [r3, #24]
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f022 0204 	bic.w	r2, r2, #4
 800c73e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	6999      	ldr	r1, [r3, #24]
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	691a      	ldr	r2, [r3, #16]
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	430a      	orrs	r2, r1
 800c750:	619a      	str	r2, [r3, #24]
      break;
 800c752:	e064      	b.n	800c81e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	68b9      	ldr	r1, [r7, #8]
 800c75a:	4618      	mov	r0, r3
 800c75c:	f000 f9a0 	bl	800caa0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	699a      	ldr	r2, [r3, #24]
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c76e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	699a      	ldr	r2, [r3, #24]
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c77e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	6999      	ldr	r1, [r3, #24]
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	691b      	ldr	r3, [r3, #16]
 800c78a:	021a      	lsls	r2, r3, #8
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	430a      	orrs	r2, r1
 800c792:	619a      	str	r2, [r3, #24]
      break;
 800c794:	e043      	b.n	800c81e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	68b9      	ldr	r1, [r7, #8]
 800c79c:	4618      	mov	r0, r3
 800c79e:	f000 f9f5 	bl	800cb8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	69da      	ldr	r2, [r3, #28]
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f042 0208 	orr.w	r2, r2, #8
 800c7b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	69da      	ldr	r2, [r3, #28]
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	f022 0204 	bic.w	r2, r2, #4
 800c7c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	69d9      	ldr	r1, [r3, #28]
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	691a      	ldr	r2, [r3, #16]
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	430a      	orrs	r2, r1
 800c7d2:	61da      	str	r2, [r3, #28]
      break;
 800c7d4:	e023      	b.n	800c81e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	68b9      	ldr	r1, [r7, #8]
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f000 fa49 	bl	800cc74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	69da      	ldr	r2, [r3, #28]
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c7f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	69da      	ldr	r2, [r3, #28]
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c800:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	69d9      	ldr	r1, [r3, #28]
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	691b      	ldr	r3, [r3, #16]
 800c80c:	021a      	lsls	r2, r3, #8
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	430a      	orrs	r2, r1
 800c814:	61da      	str	r2, [r3, #28]
      break;
 800c816:	e002      	b.n	800c81e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c818:	2301      	movs	r3, #1
 800c81a:	75fb      	strb	r3, [r7, #23]
      break;
 800c81c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	2200      	movs	r2, #0
 800c822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c826:	7dfb      	ldrb	r3, [r7, #23]
}
 800c828:	4618      	mov	r0, r3
 800c82a:	3718      	adds	r7, #24
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}

0800c830 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c830:	b480      	push	{r7}
 800c832:	b083      	sub	sp, #12
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c838:	bf00      	nop
 800c83a:	370c      	adds	r7, #12
 800c83c:	46bd      	mov	sp, r7
 800c83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c842:	4770      	bx	lr

0800c844 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c844:	b480      	push	{r7}
 800c846:	b083      	sub	sp, #12
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c84c:	bf00      	nop
 800c84e:	370c      	adds	r7, #12
 800c850:	46bd      	mov	sp, r7
 800c852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c856:	4770      	bx	lr

0800c858 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c858:	b480      	push	{r7}
 800c85a:	b083      	sub	sp, #12
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c860:	bf00      	nop
 800c862:	370c      	adds	r7, #12
 800c864:	46bd      	mov	sp, r7
 800c866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86a:	4770      	bx	lr

0800c86c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b083      	sub	sp, #12
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c874:	bf00      	nop
 800c876:	370c      	adds	r7, #12
 800c878:	46bd      	mov	sp, r7
 800c87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87e:	4770      	bx	lr

0800c880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c880:	b480      	push	{r7}
 800c882:	b085      	sub	sp, #20
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	4a40      	ldr	r2, [pc, #256]	; (800c994 <TIM_Base_SetConfig+0x114>)
 800c894:	4293      	cmp	r3, r2
 800c896:	d013      	beq.n	800c8c0 <TIM_Base_SetConfig+0x40>
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c89e:	d00f      	beq.n	800c8c0 <TIM_Base_SetConfig+0x40>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	4a3d      	ldr	r2, [pc, #244]	; (800c998 <TIM_Base_SetConfig+0x118>)
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d00b      	beq.n	800c8c0 <TIM_Base_SetConfig+0x40>
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	4a3c      	ldr	r2, [pc, #240]	; (800c99c <TIM_Base_SetConfig+0x11c>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d007      	beq.n	800c8c0 <TIM_Base_SetConfig+0x40>
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	4a3b      	ldr	r2, [pc, #236]	; (800c9a0 <TIM_Base_SetConfig+0x120>)
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d003      	beq.n	800c8c0 <TIM_Base_SetConfig+0x40>
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	4a3a      	ldr	r2, [pc, #232]	; (800c9a4 <TIM_Base_SetConfig+0x124>)
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d108      	bne.n	800c8d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	685b      	ldr	r3, [r3, #4]
 800c8cc:	68fa      	ldr	r2, [r7, #12]
 800c8ce:	4313      	orrs	r3, r2
 800c8d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	4a2f      	ldr	r2, [pc, #188]	; (800c994 <TIM_Base_SetConfig+0x114>)
 800c8d6:	4293      	cmp	r3, r2
 800c8d8:	d02b      	beq.n	800c932 <TIM_Base_SetConfig+0xb2>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8e0:	d027      	beq.n	800c932 <TIM_Base_SetConfig+0xb2>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	4a2c      	ldr	r2, [pc, #176]	; (800c998 <TIM_Base_SetConfig+0x118>)
 800c8e6:	4293      	cmp	r3, r2
 800c8e8:	d023      	beq.n	800c932 <TIM_Base_SetConfig+0xb2>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	4a2b      	ldr	r2, [pc, #172]	; (800c99c <TIM_Base_SetConfig+0x11c>)
 800c8ee:	4293      	cmp	r3, r2
 800c8f0:	d01f      	beq.n	800c932 <TIM_Base_SetConfig+0xb2>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	4a2a      	ldr	r2, [pc, #168]	; (800c9a0 <TIM_Base_SetConfig+0x120>)
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d01b      	beq.n	800c932 <TIM_Base_SetConfig+0xb2>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	4a29      	ldr	r2, [pc, #164]	; (800c9a4 <TIM_Base_SetConfig+0x124>)
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d017      	beq.n	800c932 <TIM_Base_SetConfig+0xb2>
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	4a28      	ldr	r2, [pc, #160]	; (800c9a8 <TIM_Base_SetConfig+0x128>)
 800c906:	4293      	cmp	r3, r2
 800c908:	d013      	beq.n	800c932 <TIM_Base_SetConfig+0xb2>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	4a27      	ldr	r2, [pc, #156]	; (800c9ac <TIM_Base_SetConfig+0x12c>)
 800c90e:	4293      	cmp	r3, r2
 800c910:	d00f      	beq.n	800c932 <TIM_Base_SetConfig+0xb2>
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	4a26      	ldr	r2, [pc, #152]	; (800c9b0 <TIM_Base_SetConfig+0x130>)
 800c916:	4293      	cmp	r3, r2
 800c918:	d00b      	beq.n	800c932 <TIM_Base_SetConfig+0xb2>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	4a25      	ldr	r2, [pc, #148]	; (800c9b4 <TIM_Base_SetConfig+0x134>)
 800c91e:	4293      	cmp	r3, r2
 800c920:	d007      	beq.n	800c932 <TIM_Base_SetConfig+0xb2>
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	4a24      	ldr	r2, [pc, #144]	; (800c9b8 <TIM_Base_SetConfig+0x138>)
 800c926:	4293      	cmp	r3, r2
 800c928:	d003      	beq.n	800c932 <TIM_Base_SetConfig+0xb2>
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	4a23      	ldr	r2, [pc, #140]	; (800c9bc <TIM_Base_SetConfig+0x13c>)
 800c92e:	4293      	cmp	r3, r2
 800c930:	d108      	bne.n	800c944 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	68db      	ldr	r3, [r3, #12]
 800c93e:	68fa      	ldr	r2, [r7, #12]
 800c940:	4313      	orrs	r3, r2
 800c942:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	695b      	ldr	r3, [r3, #20]
 800c94e:	4313      	orrs	r3, r2
 800c950:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	68fa      	ldr	r2, [r7, #12]
 800c956:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	689a      	ldr	r2, [r3, #8]
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	681a      	ldr	r2, [r3, #0]
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	4a0a      	ldr	r2, [pc, #40]	; (800c994 <TIM_Base_SetConfig+0x114>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d003      	beq.n	800c978 <TIM_Base_SetConfig+0xf8>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	4a0c      	ldr	r2, [pc, #48]	; (800c9a4 <TIM_Base_SetConfig+0x124>)
 800c974:	4293      	cmp	r3, r2
 800c976:	d103      	bne.n	800c980 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	691a      	ldr	r2, [r3, #16]
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2201      	movs	r2, #1
 800c984:	615a      	str	r2, [r3, #20]
}
 800c986:	bf00      	nop
 800c988:	3714      	adds	r7, #20
 800c98a:	46bd      	mov	sp, r7
 800c98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c990:	4770      	bx	lr
 800c992:	bf00      	nop
 800c994:	40010000 	.word	0x40010000
 800c998:	40000400 	.word	0x40000400
 800c99c:	40000800 	.word	0x40000800
 800c9a0:	40000c00 	.word	0x40000c00
 800c9a4:	40010400 	.word	0x40010400
 800c9a8:	40014000 	.word	0x40014000
 800c9ac:	40014400 	.word	0x40014400
 800c9b0:	40014800 	.word	0x40014800
 800c9b4:	40001800 	.word	0x40001800
 800c9b8:	40001c00 	.word	0x40001c00
 800c9bc:	40002000 	.word	0x40002000

0800c9c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b087      	sub	sp, #28
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6a1b      	ldr	r3, [r3, #32]
 800c9ce:	f023 0201 	bic.w	r2, r3, #1
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6a1b      	ldr	r3, [r3, #32]
 800c9da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	699b      	ldr	r3, [r3, #24]
 800c9e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	f023 0303 	bic.w	r3, r3, #3
 800c9f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	68fa      	ldr	r2, [r7, #12]
 800c9fe:	4313      	orrs	r3, r2
 800ca00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	f023 0302 	bic.w	r3, r3, #2
 800ca08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	689b      	ldr	r3, [r3, #8]
 800ca0e:	697a      	ldr	r2, [r7, #20]
 800ca10:	4313      	orrs	r3, r2
 800ca12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	4a20      	ldr	r2, [pc, #128]	; (800ca98 <TIM_OC1_SetConfig+0xd8>)
 800ca18:	4293      	cmp	r3, r2
 800ca1a:	d003      	beq.n	800ca24 <TIM_OC1_SetConfig+0x64>
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	4a1f      	ldr	r2, [pc, #124]	; (800ca9c <TIM_OC1_SetConfig+0xdc>)
 800ca20:	4293      	cmp	r3, r2
 800ca22:	d10c      	bne.n	800ca3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	f023 0308 	bic.w	r3, r3, #8
 800ca2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	68db      	ldr	r3, [r3, #12]
 800ca30:	697a      	ldr	r2, [r7, #20]
 800ca32:	4313      	orrs	r3, r2
 800ca34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ca36:	697b      	ldr	r3, [r7, #20]
 800ca38:	f023 0304 	bic.w	r3, r3, #4
 800ca3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	4a15      	ldr	r2, [pc, #84]	; (800ca98 <TIM_OC1_SetConfig+0xd8>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d003      	beq.n	800ca4e <TIM_OC1_SetConfig+0x8e>
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	4a14      	ldr	r2, [pc, #80]	; (800ca9c <TIM_OC1_SetConfig+0xdc>)
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	d111      	bne.n	800ca72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ca54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ca56:	693b      	ldr	r3, [r7, #16]
 800ca58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ca5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	695b      	ldr	r3, [r3, #20]
 800ca62:	693a      	ldr	r2, [r7, #16]
 800ca64:	4313      	orrs	r3, r2
 800ca66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	699b      	ldr	r3, [r3, #24]
 800ca6c:	693a      	ldr	r2, [r7, #16]
 800ca6e:	4313      	orrs	r3, r2
 800ca70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	693a      	ldr	r2, [r7, #16]
 800ca76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	68fa      	ldr	r2, [r7, #12]
 800ca7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	685a      	ldr	r2, [r3, #4]
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	697a      	ldr	r2, [r7, #20]
 800ca8a:	621a      	str	r2, [r3, #32]
}
 800ca8c:	bf00      	nop
 800ca8e:	371c      	adds	r7, #28
 800ca90:	46bd      	mov	sp, r7
 800ca92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca96:	4770      	bx	lr
 800ca98:	40010000 	.word	0x40010000
 800ca9c:	40010400 	.word	0x40010400

0800caa0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800caa0:	b480      	push	{r7}
 800caa2:	b087      	sub	sp, #28
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
 800caa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6a1b      	ldr	r3, [r3, #32]
 800caae:	f023 0210 	bic.w	r2, r3, #16
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6a1b      	ldr	r3, [r3, #32]
 800caba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	685b      	ldr	r3, [r3, #4]
 800cac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	699b      	ldr	r3, [r3, #24]
 800cac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	021b      	lsls	r3, r3, #8
 800cade:	68fa      	ldr	r2, [r7, #12]
 800cae0:	4313      	orrs	r3, r2
 800cae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	f023 0320 	bic.w	r3, r3, #32
 800caea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	689b      	ldr	r3, [r3, #8]
 800caf0:	011b      	lsls	r3, r3, #4
 800caf2:	697a      	ldr	r2, [r7, #20]
 800caf4:	4313      	orrs	r3, r2
 800caf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	4a22      	ldr	r2, [pc, #136]	; (800cb84 <TIM_OC2_SetConfig+0xe4>)
 800cafc:	4293      	cmp	r3, r2
 800cafe:	d003      	beq.n	800cb08 <TIM_OC2_SetConfig+0x68>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	4a21      	ldr	r2, [pc, #132]	; (800cb88 <TIM_OC2_SetConfig+0xe8>)
 800cb04:	4293      	cmp	r3, r2
 800cb06:	d10d      	bne.n	800cb24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	68db      	ldr	r3, [r3, #12]
 800cb14:	011b      	lsls	r3, r3, #4
 800cb16:	697a      	ldr	r2, [r7, #20]
 800cb18:	4313      	orrs	r3, r2
 800cb1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	4a17      	ldr	r2, [pc, #92]	; (800cb84 <TIM_OC2_SetConfig+0xe4>)
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	d003      	beq.n	800cb34 <TIM_OC2_SetConfig+0x94>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	4a16      	ldr	r2, [pc, #88]	; (800cb88 <TIM_OC2_SetConfig+0xe8>)
 800cb30:	4293      	cmp	r3, r2
 800cb32:	d113      	bne.n	800cb5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cb3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cb42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	695b      	ldr	r3, [r3, #20]
 800cb48:	009b      	lsls	r3, r3, #2
 800cb4a:	693a      	ldr	r2, [r7, #16]
 800cb4c:	4313      	orrs	r3, r2
 800cb4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	699b      	ldr	r3, [r3, #24]
 800cb54:	009b      	lsls	r3, r3, #2
 800cb56:	693a      	ldr	r2, [r7, #16]
 800cb58:	4313      	orrs	r3, r2
 800cb5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	693a      	ldr	r2, [r7, #16]
 800cb60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	68fa      	ldr	r2, [r7, #12]
 800cb66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	685a      	ldr	r2, [r3, #4]
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	697a      	ldr	r2, [r7, #20]
 800cb74:	621a      	str	r2, [r3, #32]
}
 800cb76:	bf00      	nop
 800cb78:	371c      	adds	r7, #28
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb80:	4770      	bx	lr
 800cb82:	bf00      	nop
 800cb84:	40010000 	.word	0x40010000
 800cb88:	40010400 	.word	0x40010400

0800cb8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b087      	sub	sp, #28
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
 800cb94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6a1b      	ldr	r3, [r3, #32]
 800cb9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6a1b      	ldr	r3, [r3, #32]
 800cba6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	69db      	ldr	r3, [r3, #28]
 800cbb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	f023 0303 	bic.w	r3, r3, #3
 800cbc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	68fa      	ldr	r2, [r7, #12]
 800cbca:	4313      	orrs	r3, r2
 800cbcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cbd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	689b      	ldr	r3, [r3, #8]
 800cbda:	021b      	lsls	r3, r3, #8
 800cbdc:	697a      	ldr	r2, [r7, #20]
 800cbde:	4313      	orrs	r3, r2
 800cbe0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	4a21      	ldr	r2, [pc, #132]	; (800cc6c <TIM_OC3_SetConfig+0xe0>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d003      	beq.n	800cbf2 <TIM_OC3_SetConfig+0x66>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	4a20      	ldr	r2, [pc, #128]	; (800cc70 <TIM_OC3_SetConfig+0xe4>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d10d      	bne.n	800cc0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cbf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	68db      	ldr	r3, [r3, #12]
 800cbfe:	021b      	lsls	r3, r3, #8
 800cc00:	697a      	ldr	r2, [r7, #20]
 800cc02:	4313      	orrs	r3, r2
 800cc04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cc0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	4a16      	ldr	r2, [pc, #88]	; (800cc6c <TIM_OC3_SetConfig+0xe0>)
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d003      	beq.n	800cc1e <TIM_OC3_SetConfig+0x92>
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	4a15      	ldr	r2, [pc, #84]	; (800cc70 <TIM_OC3_SetConfig+0xe4>)
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d113      	bne.n	800cc46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cc1e:	693b      	ldr	r3, [r7, #16]
 800cc20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cc2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	695b      	ldr	r3, [r3, #20]
 800cc32:	011b      	lsls	r3, r3, #4
 800cc34:	693a      	ldr	r2, [r7, #16]
 800cc36:	4313      	orrs	r3, r2
 800cc38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	699b      	ldr	r3, [r3, #24]
 800cc3e:	011b      	lsls	r3, r3, #4
 800cc40:	693a      	ldr	r2, [r7, #16]
 800cc42:	4313      	orrs	r3, r2
 800cc44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	693a      	ldr	r2, [r7, #16]
 800cc4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	68fa      	ldr	r2, [r7, #12]
 800cc50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	685a      	ldr	r2, [r3, #4]
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	697a      	ldr	r2, [r7, #20]
 800cc5e:	621a      	str	r2, [r3, #32]
}
 800cc60:	bf00      	nop
 800cc62:	371c      	adds	r7, #28
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr
 800cc6c:	40010000 	.word	0x40010000
 800cc70:	40010400 	.word	0x40010400

0800cc74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cc74:	b480      	push	{r7}
 800cc76:	b087      	sub	sp, #28
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6a1b      	ldr	r3, [r3, #32]
 800cc82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	6a1b      	ldr	r3, [r3, #32]
 800cc8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	69db      	ldr	r3, [r3, #28]
 800cc9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ccaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	021b      	lsls	r3, r3, #8
 800ccb2:	68fa      	ldr	r2, [r7, #12]
 800ccb4:	4313      	orrs	r3, r2
 800ccb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ccbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	689b      	ldr	r3, [r3, #8]
 800ccc4:	031b      	lsls	r3, r3, #12
 800ccc6:	693a      	ldr	r2, [r7, #16]
 800ccc8:	4313      	orrs	r3, r2
 800ccca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	4a12      	ldr	r2, [pc, #72]	; (800cd18 <TIM_OC4_SetConfig+0xa4>)
 800ccd0:	4293      	cmp	r3, r2
 800ccd2:	d003      	beq.n	800ccdc <TIM_OC4_SetConfig+0x68>
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	4a11      	ldr	r2, [pc, #68]	; (800cd1c <TIM_OC4_SetConfig+0xa8>)
 800ccd8:	4293      	cmp	r3, r2
 800ccda:	d109      	bne.n	800ccf0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cce2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	695b      	ldr	r3, [r3, #20]
 800cce8:	019b      	lsls	r3, r3, #6
 800ccea:	697a      	ldr	r2, [r7, #20]
 800ccec:	4313      	orrs	r3, r2
 800ccee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	697a      	ldr	r2, [r7, #20]
 800ccf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	68fa      	ldr	r2, [r7, #12]
 800ccfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	685a      	ldr	r2, [r3, #4]
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	693a      	ldr	r2, [r7, #16]
 800cd08:	621a      	str	r2, [r3, #32]
}
 800cd0a:	bf00      	nop
 800cd0c:	371c      	adds	r7, #28
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd14:	4770      	bx	lr
 800cd16:	bf00      	nop
 800cd18:	40010000 	.word	0x40010000
 800cd1c:	40010400 	.word	0x40010400

0800cd20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cd20:	b480      	push	{r7}
 800cd22:	b085      	sub	sp, #20
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd30:	2b01      	cmp	r3, #1
 800cd32:	d101      	bne.n	800cd38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cd34:	2302      	movs	r3, #2
 800cd36:	e05a      	b.n	800cdee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2201      	movs	r2, #1
 800cd3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2202      	movs	r2, #2
 800cd44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	685b      	ldr	r3, [r3, #4]
 800cd4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	689b      	ldr	r3, [r3, #8]
 800cd56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	68fa      	ldr	r2, [r7, #12]
 800cd66:	4313      	orrs	r3, r2
 800cd68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	68fa      	ldr	r2, [r7, #12]
 800cd70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	4a21      	ldr	r2, [pc, #132]	; (800cdfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800cd78:	4293      	cmp	r3, r2
 800cd7a:	d022      	beq.n	800cdc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd84:	d01d      	beq.n	800cdc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	4a1d      	ldr	r2, [pc, #116]	; (800ce00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	d018      	beq.n	800cdc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	4a1b      	ldr	r2, [pc, #108]	; (800ce04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800cd96:	4293      	cmp	r3, r2
 800cd98:	d013      	beq.n	800cdc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	4a1a      	ldr	r2, [pc, #104]	; (800ce08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800cda0:	4293      	cmp	r3, r2
 800cda2:	d00e      	beq.n	800cdc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	4a18      	ldr	r2, [pc, #96]	; (800ce0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800cdaa:	4293      	cmp	r3, r2
 800cdac:	d009      	beq.n	800cdc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	4a17      	ldr	r2, [pc, #92]	; (800ce10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800cdb4:	4293      	cmp	r3, r2
 800cdb6:	d004      	beq.n	800cdc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	4a15      	ldr	r2, [pc, #84]	; (800ce14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	d10c      	bne.n	800cddc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cdc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	685b      	ldr	r3, [r3, #4]
 800cdce:	68ba      	ldr	r2, [r7, #8]
 800cdd0:	4313      	orrs	r3, r2
 800cdd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	68ba      	ldr	r2, [r7, #8]
 800cdda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2201      	movs	r2, #1
 800cde0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2200      	movs	r2, #0
 800cde8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cdec:	2300      	movs	r3, #0
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3714      	adds	r7, #20
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr
 800cdfa:	bf00      	nop
 800cdfc:	40010000 	.word	0x40010000
 800ce00:	40000400 	.word	0x40000400
 800ce04:	40000800 	.word	0x40000800
 800ce08:	40000c00 	.word	0x40000c00
 800ce0c:	40010400 	.word	0x40010400
 800ce10:	40014000 	.word	0x40014000
 800ce14:	40001800 	.word	0x40001800

0800ce18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ce18:	b480      	push	{r7}
 800ce1a:	b083      	sub	sp, #12
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ce20:	bf00      	nop
 800ce22:	370c      	adds	r7, #12
 800ce24:	46bd      	mov	sp, r7
 800ce26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2a:	4770      	bx	lr

0800ce2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	b083      	sub	sp, #12
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ce34:	bf00      	nop
 800ce36:	370c      	adds	r7, #12
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3e:	4770      	bx	lr

0800ce40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b082      	sub	sp, #8
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d101      	bne.n	800ce52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ce4e:	2301      	movs	r3, #1
 800ce50:	e03f      	b.n	800ced2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce58:	b2db      	uxtb	r3, r3
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d106      	bne.n	800ce6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2200      	movs	r2, #0
 800ce62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f7f6 f822 	bl	8002eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2224      	movs	r2, #36	; 0x24
 800ce70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	68da      	ldr	r2, [r3, #12]
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ce82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f000 f9cb 	bl	800d220 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	691a      	ldr	r2, [r3, #16]
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ce98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	695a      	ldr	r2, [r3, #20]
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cea8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	68da      	ldr	r2, [r3, #12]
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ceb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2200      	movs	r2, #0
 800cebe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2220      	movs	r2, #32
 800cec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2220      	movs	r2, #32
 800cecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ced0:	2300      	movs	r3, #0
}
 800ced2:	4618      	mov	r0, r3
 800ced4:	3708      	adds	r7, #8
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}

0800ceda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ceda:	b580      	push	{r7, lr}
 800cedc:	b08a      	sub	sp, #40	; 0x28
 800cede:	af02      	add	r7, sp, #8
 800cee0:	60f8      	str	r0, [r7, #12]
 800cee2:	60b9      	str	r1, [r7, #8]
 800cee4:	603b      	str	r3, [r7, #0]
 800cee6:	4613      	mov	r3, r2
 800cee8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ceea:	2300      	movs	r3, #0
 800ceec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cef4:	b2db      	uxtb	r3, r3
 800cef6:	2b20      	cmp	r3, #32
 800cef8:	d17c      	bne.n	800cff4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800cefa:	68bb      	ldr	r3, [r7, #8]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d002      	beq.n	800cf06 <HAL_UART_Transmit+0x2c>
 800cf00:	88fb      	ldrh	r3, [r7, #6]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d101      	bne.n	800cf0a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800cf06:	2301      	movs	r3, #1
 800cf08:	e075      	b.n	800cff6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf10:	2b01      	cmp	r3, #1
 800cf12:	d101      	bne.n	800cf18 <HAL_UART_Transmit+0x3e>
 800cf14:	2302      	movs	r3, #2
 800cf16:	e06e      	b.n	800cff6 <HAL_UART_Transmit+0x11c>
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	2200      	movs	r2, #0
 800cf24:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	2221      	movs	r2, #33	; 0x21
 800cf2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cf2e:	f7f9 ffe1 	bl	8006ef4 <HAL_GetTick>
 800cf32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	88fa      	ldrh	r2, [r7, #6]
 800cf38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	88fa      	ldrh	r2, [r7, #6]
 800cf3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	689b      	ldr	r3, [r3, #8]
 800cf44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf48:	d108      	bne.n	800cf5c <HAL_UART_Transmit+0x82>
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	691b      	ldr	r3, [r3, #16]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d104      	bne.n	800cf5c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800cf52:	2300      	movs	r3, #0
 800cf54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	61bb      	str	r3, [r7, #24]
 800cf5a:	e003      	b.n	800cf64 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cf60:	2300      	movs	r3, #0
 800cf62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	2200      	movs	r2, #0
 800cf68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800cf6c:	e02a      	b.n	800cfc4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	9300      	str	r3, [sp, #0]
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	2200      	movs	r2, #0
 800cf76:	2180      	movs	r1, #128	; 0x80
 800cf78:	68f8      	ldr	r0, [r7, #12]
 800cf7a:	f000 f8e2 	bl	800d142 <UART_WaitOnFlagUntilTimeout>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d001      	beq.n	800cf88 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800cf84:	2303      	movs	r3, #3
 800cf86:	e036      	b.n	800cff6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800cf88:	69fb      	ldr	r3, [r7, #28]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d10b      	bne.n	800cfa6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cf8e:	69bb      	ldr	r3, [r7, #24]
 800cf90:	881b      	ldrh	r3, [r3, #0]
 800cf92:	461a      	mov	r2, r3
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cf9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800cf9e:	69bb      	ldr	r3, [r7, #24]
 800cfa0:	3302      	adds	r3, #2
 800cfa2:	61bb      	str	r3, [r7, #24]
 800cfa4:	e007      	b.n	800cfb6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800cfa6:	69fb      	ldr	r3, [r7, #28]
 800cfa8:	781a      	ldrb	r2, [r3, #0]
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800cfb0:	69fb      	ldr	r3, [r7, #28]
 800cfb2:	3301      	adds	r3, #1
 800cfb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cfba:	b29b      	uxth	r3, r3
 800cfbc:	3b01      	subs	r3, #1
 800cfbe:	b29a      	uxth	r2, r3
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cfc8:	b29b      	uxth	r3, r3
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d1cf      	bne.n	800cf6e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	9300      	str	r3, [sp, #0]
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	2140      	movs	r1, #64	; 0x40
 800cfd8:	68f8      	ldr	r0, [r7, #12]
 800cfda:	f000 f8b2 	bl	800d142 <UART_WaitOnFlagUntilTimeout>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d001      	beq.n	800cfe8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800cfe4:	2303      	movs	r3, #3
 800cfe6:	e006      	b.n	800cff6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	2220      	movs	r2, #32
 800cfec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800cff0:	2300      	movs	r3, #0
 800cff2:	e000      	b.n	800cff6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800cff4:	2302      	movs	r3, #2
  }
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3720      	adds	r7, #32
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}

0800cffe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cffe:	b580      	push	{r7, lr}
 800d000:	b08a      	sub	sp, #40	; 0x28
 800d002:	af02      	add	r7, sp, #8
 800d004:	60f8      	str	r0, [r7, #12]
 800d006:	60b9      	str	r1, [r7, #8]
 800d008:	603b      	str	r3, [r7, #0]
 800d00a:	4613      	mov	r3, r2
 800d00c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800d00e:	2300      	movs	r3, #0
 800d010:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d018:	b2db      	uxtb	r3, r3
 800d01a:	2b20      	cmp	r3, #32
 800d01c:	f040 808c 	bne.w	800d138 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d002      	beq.n	800d02c <HAL_UART_Receive+0x2e>
 800d026:	88fb      	ldrh	r3, [r7, #6]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d101      	bne.n	800d030 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800d02c:	2301      	movs	r3, #1
 800d02e:	e084      	b.n	800d13a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d036:	2b01      	cmp	r3, #1
 800d038:	d101      	bne.n	800d03e <HAL_UART_Receive+0x40>
 800d03a:	2302      	movs	r3, #2
 800d03c:	e07d      	b.n	800d13a <HAL_UART_Receive+0x13c>
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	2201      	movs	r2, #1
 800d042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	2200      	movs	r2, #0
 800d04a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	2222      	movs	r2, #34	; 0x22
 800d050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	2200      	movs	r2, #0
 800d058:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d05a:	f7f9 ff4b 	bl	8006ef4 <HAL_GetTick>
 800d05e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	88fa      	ldrh	r2, [r7, #6]
 800d064:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	88fa      	ldrh	r2, [r7, #6]
 800d06a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	689b      	ldr	r3, [r3, #8]
 800d070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d074:	d108      	bne.n	800d088 <HAL_UART_Receive+0x8a>
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	691b      	ldr	r3, [r3, #16]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d104      	bne.n	800d088 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800d07e:	2300      	movs	r3, #0
 800d080:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	61bb      	str	r3, [r7, #24]
 800d086:	e003      	b.n	800d090 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d08c:	2300      	movs	r3, #0
 800d08e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	2200      	movs	r2, #0
 800d094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800d098:	e043      	b.n	800d122 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	9300      	str	r3, [sp, #0]
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	2120      	movs	r1, #32
 800d0a4:	68f8      	ldr	r0, [r7, #12]
 800d0a6:	f000 f84c 	bl	800d142 <UART_WaitOnFlagUntilTimeout>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d001      	beq.n	800d0b4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800d0b0:	2303      	movs	r3, #3
 800d0b2:	e042      	b.n	800d13a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800d0b4:	69fb      	ldr	r3, [r7, #28]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d10c      	bne.n	800d0d4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	685b      	ldr	r3, [r3, #4]
 800d0c0:	b29b      	uxth	r3, r3
 800d0c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0c6:	b29a      	uxth	r2, r3
 800d0c8:	69bb      	ldr	r3, [r7, #24]
 800d0ca:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d0cc:	69bb      	ldr	r3, [r7, #24]
 800d0ce:	3302      	adds	r3, #2
 800d0d0:	61bb      	str	r3, [r7, #24]
 800d0d2:	e01f      	b.n	800d114 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	689b      	ldr	r3, [r3, #8]
 800d0d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0dc:	d007      	beq.n	800d0ee <HAL_UART_Receive+0xf0>
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	689b      	ldr	r3, [r3, #8]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d10a      	bne.n	800d0fc <HAL_UART_Receive+0xfe>
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	691b      	ldr	r3, [r3, #16]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d106      	bne.n	800d0fc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	685b      	ldr	r3, [r3, #4]
 800d0f4:	b2da      	uxtb	r2, r3
 800d0f6:	69fb      	ldr	r3, [r7, #28]
 800d0f8:	701a      	strb	r2, [r3, #0]
 800d0fa:	e008      	b.n	800d10e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	685b      	ldr	r3, [r3, #4]
 800d102:	b2db      	uxtb	r3, r3
 800d104:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d108:	b2da      	uxtb	r2, r3
 800d10a:	69fb      	ldr	r3, [r7, #28]
 800d10c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800d10e:	69fb      	ldr	r3, [r7, #28]
 800d110:	3301      	adds	r3, #1
 800d112:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d118:	b29b      	uxth	r3, r3
 800d11a:	3b01      	subs	r3, #1
 800d11c:	b29a      	uxth	r2, r3
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d126:	b29b      	uxth	r3, r3
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d1b6      	bne.n	800d09a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2220      	movs	r2, #32
 800d130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800d134:	2300      	movs	r3, #0
 800d136:	e000      	b.n	800d13a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800d138:	2302      	movs	r3, #2
  }
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	3720      	adds	r7, #32
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}

0800d142 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800d142:	b580      	push	{r7, lr}
 800d144:	b090      	sub	sp, #64	; 0x40
 800d146:	af00      	add	r7, sp, #0
 800d148:	60f8      	str	r0, [r7, #12]
 800d14a:	60b9      	str	r1, [r7, #8]
 800d14c:	603b      	str	r3, [r7, #0]
 800d14e:	4613      	mov	r3, r2
 800d150:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d152:	e050      	b.n	800d1f6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d156:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d15a:	d04c      	beq.n	800d1f6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800d15c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d007      	beq.n	800d172 <UART_WaitOnFlagUntilTimeout+0x30>
 800d162:	f7f9 fec7 	bl	8006ef4 <HAL_GetTick>
 800d166:	4602      	mov	r2, r0
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	1ad3      	subs	r3, r2, r3
 800d16c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d16e:	429a      	cmp	r2, r3
 800d170:	d241      	bcs.n	800d1f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	330c      	adds	r3, #12
 800d178:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d17c:	e853 3f00 	ldrex	r3, [r3]
 800d180:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d184:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d188:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	330c      	adds	r3, #12
 800d190:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d192:	637a      	str	r2, [r7, #52]	; 0x34
 800d194:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d196:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d198:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d19a:	e841 2300 	strex	r3, r2, [r1]
 800d19e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d1e5      	bne.n	800d172 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	3314      	adds	r3, #20
 800d1ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	e853 3f00 	ldrex	r3, [r3]
 800d1b4:	613b      	str	r3, [r7, #16]
   return(result);
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	f023 0301 	bic.w	r3, r3, #1
 800d1bc:	63bb      	str	r3, [r7, #56]	; 0x38
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	3314      	adds	r3, #20
 800d1c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d1c6:	623a      	str	r2, [r7, #32]
 800d1c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1ca:	69f9      	ldr	r1, [r7, #28]
 800d1cc:	6a3a      	ldr	r2, [r7, #32]
 800d1ce:	e841 2300 	strex	r3, r2, [r1]
 800d1d2:	61bb      	str	r3, [r7, #24]
   return(result);
 800d1d4:	69bb      	ldr	r3, [r7, #24]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d1e5      	bne.n	800d1a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	2220      	movs	r2, #32
 800d1de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	2220      	movs	r2, #32
 800d1e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800d1f2:	2303      	movs	r3, #3
 800d1f4:	e00f      	b.n	800d216 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	681a      	ldr	r2, [r3, #0]
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	4013      	ands	r3, r2
 800d200:	68ba      	ldr	r2, [r7, #8]
 800d202:	429a      	cmp	r2, r3
 800d204:	bf0c      	ite	eq
 800d206:	2301      	moveq	r3, #1
 800d208:	2300      	movne	r3, #0
 800d20a:	b2db      	uxtb	r3, r3
 800d20c:	461a      	mov	r2, r3
 800d20e:	79fb      	ldrb	r3, [r7, #7]
 800d210:	429a      	cmp	r2, r3
 800d212:	d09f      	beq.n	800d154 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d214:	2300      	movs	r3, #0
}
 800d216:	4618      	mov	r0, r3
 800d218:	3740      	adds	r7, #64	; 0x40
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}
	...

0800d220 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d224:	b09f      	sub	sp, #124	; 0x7c
 800d226:	af00      	add	r7, sp, #0
 800d228:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d22a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	691b      	ldr	r3, [r3, #16]
 800d230:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d236:	68d9      	ldr	r1, [r3, #12]
 800d238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d23a:	681a      	ldr	r2, [r3, #0]
 800d23c:	ea40 0301 	orr.w	r3, r0, r1
 800d240:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d244:	689a      	ldr	r2, [r3, #8]
 800d246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d248:	691b      	ldr	r3, [r3, #16]
 800d24a:	431a      	orrs	r2, r3
 800d24c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d24e:	695b      	ldr	r3, [r3, #20]
 800d250:	431a      	orrs	r2, r3
 800d252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d254:	69db      	ldr	r3, [r3, #28]
 800d256:	4313      	orrs	r3, r2
 800d258:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800d25a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	68db      	ldr	r3, [r3, #12]
 800d260:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800d264:	f021 010c 	bic.w	r1, r1, #12
 800d268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d26a:	681a      	ldr	r2, [r3, #0]
 800d26c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d26e:	430b      	orrs	r3, r1
 800d270:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	695b      	ldr	r3, [r3, #20]
 800d278:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800d27c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d27e:	6999      	ldr	r1, [r3, #24]
 800d280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d282:	681a      	ldr	r2, [r3, #0]
 800d284:	ea40 0301 	orr.w	r3, r0, r1
 800d288:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d28a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d28c:	681a      	ldr	r2, [r3, #0]
 800d28e:	4bc5      	ldr	r3, [pc, #788]	; (800d5a4 <UART_SetConfig+0x384>)
 800d290:	429a      	cmp	r2, r3
 800d292:	d004      	beq.n	800d29e <UART_SetConfig+0x7e>
 800d294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d296:	681a      	ldr	r2, [r3, #0]
 800d298:	4bc3      	ldr	r3, [pc, #780]	; (800d5a8 <UART_SetConfig+0x388>)
 800d29a:	429a      	cmp	r2, r3
 800d29c:	d103      	bne.n	800d2a6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d29e:	f7fd fa65 	bl	800a76c <HAL_RCC_GetPCLK2Freq>
 800d2a2:	6778      	str	r0, [r7, #116]	; 0x74
 800d2a4:	e002      	b.n	800d2ac <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d2a6:	f7fd fa4d 	bl	800a744 <HAL_RCC_GetPCLK1Freq>
 800d2aa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d2ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2ae:	69db      	ldr	r3, [r3, #28]
 800d2b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d2b4:	f040 80b6 	bne.w	800d424 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d2b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d2ba:	461c      	mov	r4, r3
 800d2bc:	f04f 0500 	mov.w	r5, #0
 800d2c0:	4622      	mov	r2, r4
 800d2c2:	462b      	mov	r3, r5
 800d2c4:	1891      	adds	r1, r2, r2
 800d2c6:	6439      	str	r1, [r7, #64]	; 0x40
 800d2c8:	415b      	adcs	r3, r3
 800d2ca:	647b      	str	r3, [r7, #68]	; 0x44
 800d2cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d2d0:	1912      	adds	r2, r2, r4
 800d2d2:	eb45 0303 	adc.w	r3, r5, r3
 800d2d6:	f04f 0000 	mov.w	r0, #0
 800d2da:	f04f 0100 	mov.w	r1, #0
 800d2de:	00d9      	lsls	r1, r3, #3
 800d2e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d2e4:	00d0      	lsls	r0, r2, #3
 800d2e6:	4602      	mov	r2, r0
 800d2e8:	460b      	mov	r3, r1
 800d2ea:	1911      	adds	r1, r2, r4
 800d2ec:	6639      	str	r1, [r7, #96]	; 0x60
 800d2ee:	416b      	adcs	r3, r5
 800d2f0:	667b      	str	r3, [r7, #100]	; 0x64
 800d2f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2f4:	685b      	ldr	r3, [r3, #4]
 800d2f6:	461a      	mov	r2, r3
 800d2f8:	f04f 0300 	mov.w	r3, #0
 800d2fc:	1891      	adds	r1, r2, r2
 800d2fe:	63b9      	str	r1, [r7, #56]	; 0x38
 800d300:	415b      	adcs	r3, r3
 800d302:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d304:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d308:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800d30c:	f7f3 fccc 	bl	8000ca8 <__aeabi_uldivmod>
 800d310:	4602      	mov	r2, r0
 800d312:	460b      	mov	r3, r1
 800d314:	4ba5      	ldr	r3, [pc, #660]	; (800d5ac <UART_SetConfig+0x38c>)
 800d316:	fba3 2302 	umull	r2, r3, r3, r2
 800d31a:	095b      	lsrs	r3, r3, #5
 800d31c:	011e      	lsls	r6, r3, #4
 800d31e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d320:	461c      	mov	r4, r3
 800d322:	f04f 0500 	mov.w	r5, #0
 800d326:	4622      	mov	r2, r4
 800d328:	462b      	mov	r3, r5
 800d32a:	1891      	adds	r1, r2, r2
 800d32c:	6339      	str	r1, [r7, #48]	; 0x30
 800d32e:	415b      	adcs	r3, r3
 800d330:	637b      	str	r3, [r7, #52]	; 0x34
 800d332:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d336:	1912      	adds	r2, r2, r4
 800d338:	eb45 0303 	adc.w	r3, r5, r3
 800d33c:	f04f 0000 	mov.w	r0, #0
 800d340:	f04f 0100 	mov.w	r1, #0
 800d344:	00d9      	lsls	r1, r3, #3
 800d346:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d34a:	00d0      	lsls	r0, r2, #3
 800d34c:	4602      	mov	r2, r0
 800d34e:	460b      	mov	r3, r1
 800d350:	1911      	adds	r1, r2, r4
 800d352:	65b9      	str	r1, [r7, #88]	; 0x58
 800d354:	416b      	adcs	r3, r5
 800d356:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d35a:	685b      	ldr	r3, [r3, #4]
 800d35c:	461a      	mov	r2, r3
 800d35e:	f04f 0300 	mov.w	r3, #0
 800d362:	1891      	adds	r1, r2, r2
 800d364:	62b9      	str	r1, [r7, #40]	; 0x28
 800d366:	415b      	adcs	r3, r3
 800d368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d36a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d36e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800d372:	f7f3 fc99 	bl	8000ca8 <__aeabi_uldivmod>
 800d376:	4602      	mov	r2, r0
 800d378:	460b      	mov	r3, r1
 800d37a:	4b8c      	ldr	r3, [pc, #560]	; (800d5ac <UART_SetConfig+0x38c>)
 800d37c:	fba3 1302 	umull	r1, r3, r3, r2
 800d380:	095b      	lsrs	r3, r3, #5
 800d382:	2164      	movs	r1, #100	; 0x64
 800d384:	fb01 f303 	mul.w	r3, r1, r3
 800d388:	1ad3      	subs	r3, r2, r3
 800d38a:	00db      	lsls	r3, r3, #3
 800d38c:	3332      	adds	r3, #50	; 0x32
 800d38e:	4a87      	ldr	r2, [pc, #540]	; (800d5ac <UART_SetConfig+0x38c>)
 800d390:	fba2 2303 	umull	r2, r3, r2, r3
 800d394:	095b      	lsrs	r3, r3, #5
 800d396:	005b      	lsls	r3, r3, #1
 800d398:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d39c:	441e      	add	r6, r3
 800d39e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f04f 0100 	mov.w	r1, #0
 800d3a6:	4602      	mov	r2, r0
 800d3a8:	460b      	mov	r3, r1
 800d3aa:	1894      	adds	r4, r2, r2
 800d3ac:	623c      	str	r4, [r7, #32]
 800d3ae:	415b      	adcs	r3, r3
 800d3b0:	627b      	str	r3, [r7, #36]	; 0x24
 800d3b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d3b6:	1812      	adds	r2, r2, r0
 800d3b8:	eb41 0303 	adc.w	r3, r1, r3
 800d3bc:	f04f 0400 	mov.w	r4, #0
 800d3c0:	f04f 0500 	mov.w	r5, #0
 800d3c4:	00dd      	lsls	r5, r3, #3
 800d3c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d3ca:	00d4      	lsls	r4, r2, #3
 800d3cc:	4622      	mov	r2, r4
 800d3ce:	462b      	mov	r3, r5
 800d3d0:	1814      	adds	r4, r2, r0
 800d3d2:	653c      	str	r4, [r7, #80]	; 0x50
 800d3d4:	414b      	adcs	r3, r1
 800d3d6:	657b      	str	r3, [r7, #84]	; 0x54
 800d3d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3da:	685b      	ldr	r3, [r3, #4]
 800d3dc:	461a      	mov	r2, r3
 800d3de:	f04f 0300 	mov.w	r3, #0
 800d3e2:	1891      	adds	r1, r2, r2
 800d3e4:	61b9      	str	r1, [r7, #24]
 800d3e6:	415b      	adcs	r3, r3
 800d3e8:	61fb      	str	r3, [r7, #28]
 800d3ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d3ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d3f2:	f7f3 fc59 	bl	8000ca8 <__aeabi_uldivmod>
 800d3f6:	4602      	mov	r2, r0
 800d3f8:	460b      	mov	r3, r1
 800d3fa:	4b6c      	ldr	r3, [pc, #432]	; (800d5ac <UART_SetConfig+0x38c>)
 800d3fc:	fba3 1302 	umull	r1, r3, r3, r2
 800d400:	095b      	lsrs	r3, r3, #5
 800d402:	2164      	movs	r1, #100	; 0x64
 800d404:	fb01 f303 	mul.w	r3, r1, r3
 800d408:	1ad3      	subs	r3, r2, r3
 800d40a:	00db      	lsls	r3, r3, #3
 800d40c:	3332      	adds	r3, #50	; 0x32
 800d40e:	4a67      	ldr	r2, [pc, #412]	; (800d5ac <UART_SetConfig+0x38c>)
 800d410:	fba2 2303 	umull	r2, r3, r2, r3
 800d414:	095b      	lsrs	r3, r3, #5
 800d416:	f003 0207 	and.w	r2, r3, #7
 800d41a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	4432      	add	r2, r6
 800d420:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d422:	e0b9      	b.n	800d598 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d424:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d426:	461c      	mov	r4, r3
 800d428:	f04f 0500 	mov.w	r5, #0
 800d42c:	4622      	mov	r2, r4
 800d42e:	462b      	mov	r3, r5
 800d430:	1891      	adds	r1, r2, r2
 800d432:	6139      	str	r1, [r7, #16]
 800d434:	415b      	adcs	r3, r3
 800d436:	617b      	str	r3, [r7, #20]
 800d438:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d43c:	1912      	adds	r2, r2, r4
 800d43e:	eb45 0303 	adc.w	r3, r5, r3
 800d442:	f04f 0000 	mov.w	r0, #0
 800d446:	f04f 0100 	mov.w	r1, #0
 800d44a:	00d9      	lsls	r1, r3, #3
 800d44c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d450:	00d0      	lsls	r0, r2, #3
 800d452:	4602      	mov	r2, r0
 800d454:	460b      	mov	r3, r1
 800d456:	eb12 0804 	adds.w	r8, r2, r4
 800d45a:	eb43 0905 	adc.w	r9, r3, r5
 800d45e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d460:	685b      	ldr	r3, [r3, #4]
 800d462:	4618      	mov	r0, r3
 800d464:	f04f 0100 	mov.w	r1, #0
 800d468:	f04f 0200 	mov.w	r2, #0
 800d46c:	f04f 0300 	mov.w	r3, #0
 800d470:	008b      	lsls	r3, r1, #2
 800d472:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d476:	0082      	lsls	r2, r0, #2
 800d478:	4640      	mov	r0, r8
 800d47a:	4649      	mov	r1, r9
 800d47c:	f7f3 fc14 	bl	8000ca8 <__aeabi_uldivmod>
 800d480:	4602      	mov	r2, r0
 800d482:	460b      	mov	r3, r1
 800d484:	4b49      	ldr	r3, [pc, #292]	; (800d5ac <UART_SetConfig+0x38c>)
 800d486:	fba3 2302 	umull	r2, r3, r3, r2
 800d48a:	095b      	lsrs	r3, r3, #5
 800d48c:	011e      	lsls	r6, r3, #4
 800d48e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d490:	4618      	mov	r0, r3
 800d492:	f04f 0100 	mov.w	r1, #0
 800d496:	4602      	mov	r2, r0
 800d498:	460b      	mov	r3, r1
 800d49a:	1894      	adds	r4, r2, r2
 800d49c:	60bc      	str	r4, [r7, #8]
 800d49e:	415b      	adcs	r3, r3
 800d4a0:	60fb      	str	r3, [r7, #12]
 800d4a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d4a6:	1812      	adds	r2, r2, r0
 800d4a8:	eb41 0303 	adc.w	r3, r1, r3
 800d4ac:	f04f 0400 	mov.w	r4, #0
 800d4b0:	f04f 0500 	mov.w	r5, #0
 800d4b4:	00dd      	lsls	r5, r3, #3
 800d4b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d4ba:	00d4      	lsls	r4, r2, #3
 800d4bc:	4622      	mov	r2, r4
 800d4be:	462b      	mov	r3, r5
 800d4c0:	1814      	adds	r4, r2, r0
 800d4c2:	64bc      	str	r4, [r7, #72]	; 0x48
 800d4c4:	414b      	adcs	r3, r1
 800d4c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d4c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4ca:	685b      	ldr	r3, [r3, #4]
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f04f 0100 	mov.w	r1, #0
 800d4d2:	f04f 0200 	mov.w	r2, #0
 800d4d6:	f04f 0300 	mov.w	r3, #0
 800d4da:	008b      	lsls	r3, r1, #2
 800d4dc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d4e0:	0082      	lsls	r2, r0, #2
 800d4e2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800d4e6:	f7f3 fbdf 	bl	8000ca8 <__aeabi_uldivmod>
 800d4ea:	4602      	mov	r2, r0
 800d4ec:	460b      	mov	r3, r1
 800d4ee:	4b2f      	ldr	r3, [pc, #188]	; (800d5ac <UART_SetConfig+0x38c>)
 800d4f0:	fba3 1302 	umull	r1, r3, r3, r2
 800d4f4:	095b      	lsrs	r3, r3, #5
 800d4f6:	2164      	movs	r1, #100	; 0x64
 800d4f8:	fb01 f303 	mul.w	r3, r1, r3
 800d4fc:	1ad3      	subs	r3, r2, r3
 800d4fe:	011b      	lsls	r3, r3, #4
 800d500:	3332      	adds	r3, #50	; 0x32
 800d502:	4a2a      	ldr	r2, [pc, #168]	; (800d5ac <UART_SetConfig+0x38c>)
 800d504:	fba2 2303 	umull	r2, r3, r2, r3
 800d508:	095b      	lsrs	r3, r3, #5
 800d50a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d50e:	441e      	add	r6, r3
 800d510:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d512:	4618      	mov	r0, r3
 800d514:	f04f 0100 	mov.w	r1, #0
 800d518:	4602      	mov	r2, r0
 800d51a:	460b      	mov	r3, r1
 800d51c:	1894      	adds	r4, r2, r2
 800d51e:	603c      	str	r4, [r7, #0]
 800d520:	415b      	adcs	r3, r3
 800d522:	607b      	str	r3, [r7, #4]
 800d524:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d528:	1812      	adds	r2, r2, r0
 800d52a:	eb41 0303 	adc.w	r3, r1, r3
 800d52e:	f04f 0400 	mov.w	r4, #0
 800d532:	f04f 0500 	mov.w	r5, #0
 800d536:	00dd      	lsls	r5, r3, #3
 800d538:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d53c:	00d4      	lsls	r4, r2, #3
 800d53e:	4622      	mov	r2, r4
 800d540:	462b      	mov	r3, r5
 800d542:	eb12 0a00 	adds.w	sl, r2, r0
 800d546:	eb43 0b01 	adc.w	fp, r3, r1
 800d54a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d54c:	685b      	ldr	r3, [r3, #4]
 800d54e:	4618      	mov	r0, r3
 800d550:	f04f 0100 	mov.w	r1, #0
 800d554:	f04f 0200 	mov.w	r2, #0
 800d558:	f04f 0300 	mov.w	r3, #0
 800d55c:	008b      	lsls	r3, r1, #2
 800d55e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d562:	0082      	lsls	r2, r0, #2
 800d564:	4650      	mov	r0, sl
 800d566:	4659      	mov	r1, fp
 800d568:	f7f3 fb9e 	bl	8000ca8 <__aeabi_uldivmod>
 800d56c:	4602      	mov	r2, r0
 800d56e:	460b      	mov	r3, r1
 800d570:	4b0e      	ldr	r3, [pc, #56]	; (800d5ac <UART_SetConfig+0x38c>)
 800d572:	fba3 1302 	umull	r1, r3, r3, r2
 800d576:	095b      	lsrs	r3, r3, #5
 800d578:	2164      	movs	r1, #100	; 0x64
 800d57a:	fb01 f303 	mul.w	r3, r1, r3
 800d57e:	1ad3      	subs	r3, r2, r3
 800d580:	011b      	lsls	r3, r3, #4
 800d582:	3332      	adds	r3, #50	; 0x32
 800d584:	4a09      	ldr	r2, [pc, #36]	; (800d5ac <UART_SetConfig+0x38c>)
 800d586:	fba2 2303 	umull	r2, r3, r2, r3
 800d58a:	095b      	lsrs	r3, r3, #5
 800d58c:	f003 020f 	and.w	r2, r3, #15
 800d590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	4432      	add	r2, r6
 800d596:	609a      	str	r2, [r3, #8]
}
 800d598:	bf00      	nop
 800d59a:	377c      	adds	r7, #124	; 0x7c
 800d59c:	46bd      	mov	sp, r7
 800d59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5a2:	bf00      	nop
 800d5a4:	40011000 	.word	0x40011000
 800d5a8:	40011400 	.word	0x40011400
 800d5ac:	51eb851f 	.word	0x51eb851f

0800d5b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d5b0:	b084      	sub	sp, #16
 800d5b2:	b580      	push	{r7, lr}
 800d5b4:	b084      	sub	sp, #16
 800d5b6:	af00      	add	r7, sp, #0
 800d5b8:	6078      	str	r0, [r7, #4]
 800d5ba:	f107 001c 	add.w	r0, r7, #28
 800d5be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5c4:	2b01      	cmp	r3, #1
 800d5c6:	d122      	bne.n	800d60e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	68db      	ldr	r3, [r3, #12]
 800d5d8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800d5dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d5e0:	687a      	ldr	r2, [r7, #4]
 800d5e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	68db      	ldr	r3, [r3, #12]
 800d5e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d5f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5f2:	2b01      	cmp	r3, #1
 800d5f4:	d105      	bne.n	800d602 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	68db      	ldr	r3, [r3, #12]
 800d5fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f001 fb1c 	bl	800ec40 <USB_CoreReset>
 800d608:	4603      	mov	r3, r0
 800d60a:	73fb      	strb	r3, [r7, #15]
 800d60c:	e01a      	b.n	800d644 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	68db      	ldr	r3, [r3, #12]
 800d612:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f001 fb10 	bl	800ec40 <USB_CoreReset>
 800d620:	4603      	mov	r3, r0
 800d622:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d626:	2b00      	cmp	r3, #0
 800d628:	d106      	bne.n	800d638 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d62e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	639a      	str	r2, [r3, #56]	; 0x38
 800d636:	e005      	b.n	800d644 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d63c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d646:	2b01      	cmp	r3, #1
 800d648:	d10b      	bne.n	800d662 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	689b      	ldr	r3, [r3, #8]
 800d64e:	f043 0206 	orr.w	r2, r3, #6
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	689b      	ldr	r3, [r3, #8]
 800d65a:	f043 0220 	orr.w	r2, r3, #32
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d662:	7bfb      	ldrb	r3, [r7, #15]
}
 800d664:	4618      	mov	r0, r3
 800d666:	3710      	adds	r7, #16
 800d668:	46bd      	mov	sp, r7
 800d66a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d66e:	b004      	add	sp, #16
 800d670:	4770      	bx	lr
	...

0800d674 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d674:	b480      	push	{r7}
 800d676:	b087      	sub	sp, #28
 800d678:	af00      	add	r7, sp, #0
 800d67a:	60f8      	str	r0, [r7, #12]
 800d67c:	60b9      	str	r1, [r7, #8]
 800d67e:	4613      	mov	r3, r2
 800d680:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d682:	79fb      	ldrb	r3, [r7, #7]
 800d684:	2b02      	cmp	r3, #2
 800d686:	d165      	bne.n	800d754 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d688:	68bb      	ldr	r3, [r7, #8]
 800d68a:	4a41      	ldr	r2, [pc, #260]	; (800d790 <USB_SetTurnaroundTime+0x11c>)
 800d68c:	4293      	cmp	r3, r2
 800d68e:	d906      	bls.n	800d69e <USB_SetTurnaroundTime+0x2a>
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	4a40      	ldr	r2, [pc, #256]	; (800d794 <USB_SetTurnaroundTime+0x120>)
 800d694:	4293      	cmp	r3, r2
 800d696:	d202      	bcs.n	800d69e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d698:	230f      	movs	r3, #15
 800d69a:	617b      	str	r3, [r7, #20]
 800d69c:	e062      	b.n	800d764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	4a3c      	ldr	r2, [pc, #240]	; (800d794 <USB_SetTurnaroundTime+0x120>)
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	d306      	bcc.n	800d6b4 <USB_SetTurnaroundTime+0x40>
 800d6a6:	68bb      	ldr	r3, [r7, #8]
 800d6a8:	4a3b      	ldr	r2, [pc, #236]	; (800d798 <USB_SetTurnaroundTime+0x124>)
 800d6aa:	4293      	cmp	r3, r2
 800d6ac:	d202      	bcs.n	800d6b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d6ae:	230e      	movs	r3, #14
 800d6b0:	617b      	str	r3, [r7, #20]
 800d6b2:	e057      	b.n	800d764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	4a38      	ldr	r2, [pc, #224]	; (800d798 <USB_SetTurnaroundTime+0x124>)
 800d6b8:	4293      	cmp	r3, r2
 800d6ba:	d306      	bcc.n	800d6ca <USB_SetTurnaroundTime+0x56>
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	4a37      	ldr	r2, [pc, #220]	; (800d79c <USB_SetTurnaroundTime+0x128>)
 800d6c0:	4293      	cmp	r3, r2
 800d6c2:	d202      	bcs.n	800d6ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d6c4:	230d      	movs	r3, #13
 800d6c6:	617b      	str	r3, [r7, #20]
 800d6c8:	e04c      	b.n	800d764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	4a33      	ldr	r2, [pc, #204]	; (800d79c <USB_SetTurnaroundTime+0x128>)
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d306      	bcc.n	800d6e0 <USB_SetTurnaroundTime+0x6c>
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	4a32      	ldr	r2, [pc, #200]	; (800d7a0 <USB_SetTurnaroundTime+0x12c>)
 800d6d6:	4293      	cmp	r3, r2
 800d6d8:	d802      	bhi.n	800d6e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d6da:	230c      	movs	r3, #12
 800d6dc:	617b      	str	r3, [r7, #20]
 800d6de:	e041      	b.n	800d764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	4a2f      	ldr	r2, [pc, #188]	; (800d7a0 <USB_SetTurnaroundTime+0x12c>)
 800d6e4:	4293      	cmp	r3, r2
 800d6e6:	d906      	bls.n	800d6f6 <USB_SetTurnaroundTime+0x82>
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	4a2e      	ldr	r2, [pc, #184]	; (800d7a4 <USB_SetTurnaroundTime+0x130>)
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d802      	bhi.n	800d6f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d6f0:	230b      	movs	r3, #11
 800d6f2:	617b      	str	r3, [r7, #20]
 800d6f4:	e036      	b.n	800d764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	4a2a      	ldr	r2, [pc, #168]	; (800d7a4 <USB_SetTurnaroundTime+0x130>)
 800d6fa:	4293      	cmp	r3, r2
 800d6fc:	d906      	bls.n	800d70c <USB_SetTurnaroundTime+0x98>
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	4a29      	ldr	r2, [pc, #164]	; (800d7a8 <USB_SetTurnaroundTime+0x134>)
 800d702:	4293      	cmp	r3, r2
 800d704:	d802      	bhi.n	800d70c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d706:	230a      	movs	r3, #10
 800d708:	617b      	str	r3, [r7, #20]
 800d70a:	e02b      	b.n	800d764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	4a26      	ldr	r2, [pc, #152]	; (800d7a8 <USB_SetTurnaroundTime+0x134>)
 800d710:	4293      	cmp	r3, r2
 800d712:	d906      	bls.n	800d722 <USB_SetTurnaroundTime+0xae>
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	4a25      	ldr	r2, [pc, #148]	; (800d7ac <USB_SetTurnaroundTime+0x138>)
 800d718:	4293      	cmp	r3, r2
 800d71a:	d202      	bcs.n	800d722 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d71c:	2309      	movs	r3, #9
 800d71e:	617b      	str	r3, [r7, #20]
 800d720:	e020      	b.n	800d764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	4a21      	ldr	r2, [pc, #132]	; (800d7ac <USB_SetTurnaroundTime+0x138>)
 800d726:	4293      	cmp	r3, r2
 800d728:	d306      	bcc.n	800d738 <USB_SetTurnaroundTime+0xc4>
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	4a20      	ldr	r2, [pc, #128]	; (800d7b0 <USB_SetTurnaroundTime+0x13c>)
 800d72e:	4293      	cmp	r3, r2
 800d730:	d802      	bhi.n	800d738 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d732:	2308      	movs	r3, #8
 800d734:	617b      	str	r3, [r7, #20]
 800d736:	e015      	b.n	800d764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	4a1d      	ldr	r2, [pc, #116]	; (800d7b0 <USB_SetTurnaroundTime+0x13c>)
 800d73c:	4293      	cmp	r3, r2
 800d73e:	d906      	bls.n	800d74e <USB_SetTurnaroundTime+0xda>
 800d740:	68bb      	ldr	r3, [r7, #8]
 800d742:	4a1c      	ldr	r2, [pc, #112]	; (800d7b4 <USB_SetTurnaroundTime+0x140>)
 800d744:	4293      	cmp	r3, r2
 800d746:	d202      	bcs.n	800d74e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d748:	2307      	movs	r3, #7
 800d74a:	617b      	str	r3, [r7, #20]
 800d74c:	e00a      	b.n	800d764 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d74e:	2306      	movs	r3, #6
 800d750:	617b      	str	r3, [r7, #20]
 800d752:	e007      	b.n	800d764 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d754:	79fb      	ldrb	r3, [r7, #7]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d102      	bne.n	800d760 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d75a:	2309      	movs	r3, #9
 800d75c:	617b      	str	r3, [r7, #20]
 800d75e:	e001      	b.n	800d764 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d760:	2309      	movs	r3, #9
 800d762:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	68db      	ldr	r3, [r3, #12]
 800d768:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	68da      	ldr	r2, [r3, #12]
 800d774:	697b      	ldr	r3, [r7, #20]
 800d776:	029b      	lsls	r3, r3, #10
 800d778:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800d77c:	431a      	orrs	r2, r3
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d782:	2300      	movs	r3, #0
}
 800d784:	4618      	mov	r0, r3
 800d786:	371c      	adds	r7, #28
 800d788:	46bd      	mov	sp, r7
 800d78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78e:	4770      	bx	lr
 800d790:	00d8acbf 	.word	0x00d8acbf
 800d794:	00e4e1c0 	.word	0x00e4e1c0
 800d798:	00f42400 	.word	0x00f42400
 800d79c:	01067380 	.word	0x01067380
 800d7a0:	011a499f 	.word	0x011a499f
 800d7a4:	01312cff 	.word	0x01312cff
 800d7a8:	014ca43f 	.word	0x014ca43f
 800d7ac:	016e3600 	.word	0x016e3600
 800d7b0:	01a6ab1f 	.word	0x01a6ab1f
 800d7b4:	01e84800 	.word	0x01e84800

0800d7b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d7b8:	b480      	push	{r7}
 800d7ba:	b083      	sub	sp, #12
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	689b      	ldr	r3, [r3, #8]
 800d7c4:	f043 0201 	orr.w	r2, r3, #1
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d7cc:	2300      	movs	r3, #0
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	370c      	adds	r7, #12
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d8:	4770      	bx	lr

0800d7da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d7da:	b480      	push	{r7}
 800d7dc:	b083      	sub	sp, #12
 800d7de:	af00      	add	r7, sp, #0
 800d7e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	689b      	ldr	r3, [r3, #8]
 800d7e6:	f023 0201 	bic.w	r2, r3, #1
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d7ee:	2300      	movs	r3, #0
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	370c      	adds	r7, #12
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fa:	4770      	bx	lr

0800d7fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b084      	sub	sp, #16
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
 800d804:	460b      	mov	r3, r1
 800d806:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d808:	2300      	movs	r3, #0
 800d80a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	68db      	ldr	r3, [r3, #12]
 800d810:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d818:	78fb      	ldrb	r3, [r7, #3]
 800d81a:	2b01      	cmp	r3, #1
 800d81c:	d115      	bne.n	800d84a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	68db      	ldr	r3, [r3, #12]
 800d822:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d82a:	2001      	movs	r0, #1
 800d82c:	f7f9 fb6e 	bl	8006f0c <HAL_Delay>
      ms++;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	3301      	adds	r3, #1
 800d834:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d836:	6878      	ldr	r0, [r7, #4]
 800d838:	f001 f972 	bl	800eb20 <USB_GetMode>
 800d83c:	4603      	mov	r3, r0
 800d83e:	2b01      	cmp	r3, #1
 800d840:	d01e      	beq.n	800d880 <USB_SetCurrentMode+0x84>
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	2b31      	cmp	r3, #49	; 0x31
 800d846:	d9f0      	bls.n	800d82a <USB_SetCurrentMode+0x2e>
 800d848:	e01a      	b.n	800d880 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d84a:	78fb      	ldrb	r3, [r7, #3]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d115      	bne.n	800d87c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	68db      	ldr	r3, [r3, #12]
 800d854:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d85c:	2001      	movs	r0, #1
 800d85e:	f7f9 fb55 	bl	8006f0c <HAL_Delay>
      ms++;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	3301      	adds	r3, #1
 800d866:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f001 f959 	bl	800eb20 <USB_GetMode>
 800d86e:	4603      	mov	r3, r0
 800d870:	2b00      	cmp	r3, #0
 800d872:	d005      	beq.n	800d880 <USB_SetCurrentMode+0x84>
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	2b31      	cmp	r3, #49	; 0x31
 800d878:	d9f0      	bls.n	800d85c <USB_SetCurrentMode+0x60>
 800d87a:	e001      	b.n	800d880 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d87c:	2301      	movs	r3, #1
 800d87e:	e005      	b.n	800d88c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	2b32      	cmp	r3, #50	; 0x32
 800d884:	d101      	bne.n	800d88a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d886:	2301      	movs	r3, #1
 800d888:	e000      	b.n	800d88c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d88a:	2300      	movs	r3, #0
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	3710      	adds	r7, #16
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}

0800d894 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d894:	b084      	sub	sp, #16
 800d896:	b580      	push	{r7, lr}
 800d898:	b086      	sub	sp, #24
 800d89a:	af00      	add	r7, sp, #0
 800d89c:	6078      	str	r0, [r7, #4]
 800d89e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d8a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	613b      	str	r3, [r7, #16]
 800d8b2:	e009      	b.n	800d8c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d8b4:	687a      	ldr	r2, [r7, #4]
 800d8b6:	693b      	ldr	r3, [r7, #16]
 800d8b8:	3340      	adds	r3, #64	; 0x40
 800d8ba:	009b      	lsls	r3, r3, #2
 800d8bc:	4413      	add	r3, r2
 800d8be:	2200      	movs	r2, #0
 800d8c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d8c2:	693b      	ldr	r3, [r7, #16]
 800d8c4:	3301      	adds	r3, #1
 800d8c6:	613b      	str	r3, [r7, #16]
 800d8c8:	693b      	ldr	r3, [r7, #16]
 800d8ca:	2b0e      	cmp	r3, #14
 800d8cc:	d9f2      	bls.n	800d8b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d8ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d11c      	bne.n	800d90e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8da:	685b      	ldr	r3, [r3, #4]
 800d8dc:	68fa      	ldr	r2, [r7, #12]
 800d8de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d8e2:	f043 0302 	orr.w	r3, r3, #2
 800d8e6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8f8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d904:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	639a      	str	r2, [r3, #56]	; 0x38
 800d90c:	e00b      	b.n	800d926 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d912:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d91e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d92c:	461a      	mov	r2, r3
 800d92e:	2300      	movs	r3, #0
 800d930:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d938:	4619      	mov	r1, r3
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d940:	461a      	mov	r2, r3
 800d942:	680b      	ldr	r3, [r1, #0]
 800d944:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d948:	2b01      	cmp	r3, #1
 800d94a:	d10c      	bne.n	800d966 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d104      	bne.n	800d95c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d952:	2100      	movs	r1, #0
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f000 f945 	bl	800dbe4 <USB_SetDevSpeed>
 800d95a:	e008      	b.n	800d96e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d95c:	2101      	movs	r1, #1
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f000 f940 	bl	800dbe4 <USB_SetDevSpeed>
 800d964:	e003      	b.n	800d96e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d966:	2103      	movs	r1, #3
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f000 f93b 	bl	800dbe4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d96e:	2110      	movs	r1, #16
 800d970:	6878      	ldr	r0, [r7, #4]
 800d972:	f000 f8f3 	bl	800db5c <USB_FlushTxFifo>
 800d976:	4603      	mov	r3, r0
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d001      	beq.n	800d980 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800d97c:	2301      	movs	r3, #1
 800d97e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f000 f90f 	bl	800dba4 <USB_FlushRxFifo>
 800d986:	4603      	mov	r3, r0
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d001      	beq.n	800d990 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800d98c:	2301      	movs	r3, #1
 800d98e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d996:	461a      	mov	r2, r3
 800d998:	2300      	movs	r3, #0
 800d99a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9a2:	461a      	mov	r2, r3
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9ae:	461a      	mov	r2, r3
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	613b      	str	r3, [r7, #16]
 800d9b8:	e043      	b.n	800da42 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	015a      	lsls	r2, r3, #5
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	4413      	add	r3, r2
 800d9c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d9cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d9d0:	d118      	bne.n	800da04 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800d9d2:	693b      	ldr	r3, [r7, #16]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d10a      	bne.n	800d9ee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d9d8:	693b      	ldr	r3, [r7, #16]
 800d9da:	015a      	lsls	r2, r3, #5
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	4413      	add	r3, r2
 800d9e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9e4:	461a      	mov	r2, r3
 800d9e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d9ea:	6013      	str	r3, [r2, #0]
 800d9ec:	e013      	b.n	800da16 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d9ee:	693b      	ldr	r3, [r7, #16]
 800d9f0:	015a      	lsls	r2, r3, #5
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	4413      	add	r3, r2
 800d9f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9fa:	461a      	mov	r2, r3
 800d9fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800da00:	6013      	str	r3, [r2, #0]
 800da02:	e008      	b.n	800da16 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800da04:	693b      	ldr	r3, [r7, #16]
 800da06:	015a      	lsls	r2, r3, #5
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	4413      	add	r3, r2
 800da0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da10:	461a      	mov	r2, r3
 800da12:	2300      	movs	r3, #0
 800da14:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800da16:	693b      	ldr	r3, [r7, #16]
 800da18:	015a      	lsls	r2, r3, #5
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	4413      	add	r3, r2
 800da1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da22:	461a      	mov	r2, r3
 800da24:	2300      	movs	r3, #0
 800da26:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800da28:	693b      	ldr	r3, [r7, #16]
 800da2a:	015a      	lsls	r2, r3, #5
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	4413      	add	r3, r2
 800da30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da34:	461a      	mov	r2, r3
 800da36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800da3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800da3c:	693b      	ldr	r3, [r7, #16]
 800da3e:	3301      	adds	r3, #1
 800da40:	613b      	str	r3, [r7, #16]
 800da42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da44:	693a      	ldr	r2, [r7, #16]
 800da46:	429a      	cmp	r2, r3
 800da48:	d3b7      	bcc.n	800d9ba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800da4a:	2300      	movs	r3, #0
 800da4c:	613b      	str	r3, [r7, #16]
 800da4e:	e043      	b.n	800dad8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800da50:	693b      	ldr	r3, [r7, #16]
 800da52:	015a      	lsls	r2, r3, #5
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	4413      	add	r3, r2
 800da58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800da62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800da66:	d118      	bne.n	800da9a <USB_DevInit+0x206>
    {
      if (i == 0U)
 800da68:	693b      	ldr	r3, [r7, #16]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d10a      	bne.n	800da84 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	015a      	lsls	r2, r3, #5
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	4413      	add	r3, r2
 800da76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da7a:	461a      	mov	r2, r3
 800da7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800da80:	6013      	str	r3, [r2, #0]
 800da82:	e013      	b.n	800daac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800da84:	693b      	ldr	r3, [r7, #16]
 800da86:	015a      	lsls	r2, r3, #5
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	4413      	add	r3, r2
 800da8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da90:	461a      	mov	r2, r3
 800da92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800da96:	6013      	str	r3, [r2, #0]
 800da98:	e008      	b.n	800daac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800da9a:	693b      	ldr	r3, [r7, #16]
 800da9c:	015a      	lsls	r2, r3, #5
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	4413      	add	r3, r2
 800daa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800daa6:	461a      	mov	r2, r3
 800daa8:	2300      	movs	r3, #0
 800daaa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800daac:	693b      	ldr	r3, [r7, #16]
 800daae:	015a      	lsls	r2, r3, #5
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	4413      	add	r3, r2
 800dab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dab8:	461a      	mov	r2, r3
 800daba:	2300      	movs	r3, #0
 800dabc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800dabe:	693b      	ldr	r3, [r7, #16]
 800dac0:	015a      	lsls	r2, r3, #5
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	4413      	add	r3, r2
 800dac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800daca:	461a      	mov	r2, r3
 800dacc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800dad0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dad2:	693b      	ldr	r3, [r7, #16]
 800dad4:	3301      	adds	r3, #1
 800dad6:	613b      	str	r3, [r7, #16]
 800dad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dada:	693a      	ldr	r2, [r7, #16]
 800dadc:	429a      	cmp	r2, r3
 800dade:	d3b7      	bcc.n	800da50 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dae6:	691b      	ldr	r3, [r3, #16]
 800dae8:	68fa      	ldr	r2, [r7, #12]
 800daea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800daee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800daf2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2200      	movs	r2, #0
 800daf8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800db00:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800db02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db04:	2b00      	cmp	r3, #0
 800db06:	d105      	bne.n	800db14 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	699b      	ldr	r3, [r3, #24]
 800db0c:	f043 0210 	orr.w	r2, r3, #16
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	699a      	ldr	r2, [r3, #24]
 800db18:	4b0f      	ldr	r3, [pc, #60]	; (800db58 <USB_DevInit+0x2c4>)
 800db1a:	4313      	orrs	r3, r2
 800db1c:	687a      	ldr	r2, [r7, #4]
 800db1e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800db20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db22:	2b00      	cmp	r3, #0
 800db24:	d005      	beq.n	800db32 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	699b      	ldr	r3, [r3, #24]
 800db2a:	f043 0208 	orr.w	r2, r3, #8
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800db32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db34:	2b01      	cmp	r3, #1
 800db36:	d107      	bne.n	800db48 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	699b      	ldr	r3, [r3, #24]
 800db3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800db40:	f043 0304 	orr.w	r3, r3, #4
 800db44:	687a      	ldr	r2, [r7, #4]
 800db46:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800db48:	7dfb      	ldrb	r3, [r7, #23]
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	3718      	adds	r7, #24
 800db4e:	46bd      	mov	sp, r7
 800db50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800db54:	b004      	add	sp, #16
 800db56:	4770      	bx	lr
 800db58:	803c3800 	.word	0x803c3800

0800db5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800db5c:	b480      	push	{r7}
 800db5e:	b085      	sub	sp, #20
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
 800db64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800db66:	2300      	movs	r3, #0
 800db68:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	019b      	lsls	r3, r3, #6
 800db6e:	f043 0220 	orr.w	r2, r3, #32
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	3301      	adds	r3, #1
 800db7a:	60fb      	str	r3, [r7, #12]
 800db7c:	4a08      	ldr	r2, [pc, #32]	; (800dba0 <USB_FlushTxFifo+0x44>)
 800db7e:	4293      	cmp	r3, r2
 800db80:	d901      	bls.n	800db86 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800db82:	2303      	movs	r3, #3
 800db84:	e006      	b.n	800db94 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	691b      	ldr	r3, [r3, #16]
 800db8a:	f003 0320 	and.w	r3, r3, #32
 800db8e:	2b20      	cmp	r3, #32
 800db90:	d0f1      	beq.n	800db76 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800db92:	2300      	movs	r3, #0
}
 800db94:	4618      	mov	r0, r3
 800db96:	3714      	adds	r7, #20
 800db98:	46bd      	mov	sp, r7
 800db9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9e:	4770      	bx	lr
 800dba0:	00030d40 	.word	0x00030d40

0800dba4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800dba4:	b480      	push	{r7}
 800dba6:	b085      	sub	sp, #20
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dbac:	2300      	movs	r3, #0
 800dbae:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2210      	movs	r2, #16
 800dbb4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	3301      	adds	r3, #1
 800dbba:	60fb      	str	r3, [r7, #12]
 800dbbc:	4a08      	ldr	r2, [pc, #32]	; (800dbe0 <USB_FlushRxFifo+0x3c>)
 800dbbe:	4293      	cmp	r3, r2
 800dbc0:	d901      	bls.n	800dbc6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800dbc2:	2303      	movs	r3, #3
 800dbc4:	e006      	b.n	800dbd4 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	691b      	ldr	r3, [r3, #16]
 800dbca:	f003 0310 	and.w	r3, r3, #16
 800dbce:	2b10      	cmp	r3, #16
 800dbd0:	d0f1      	beq.n	800dbb6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800dbd2:	2300      	movs	r3, #0
}
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	3714      	adds	r7, #20
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbde:	4770      	bx	lr
 800dbe0:	00030d40 	.word	0x00030d40

0800dbe4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800dbe4:	b480      	push	{r7}
 800dbe6:	b085      	sub	sp, #20
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
 800dbec:	460b      	mov	r3, r1
 800dbee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbfa:	681a      	ldr	r2, [r3, #0]
 800dbfc:	78fb      	ldrb	r3, [r7, #3]
 800dbfe:	68f9      	ldr	r1, [r7, #12]
 800dc00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dc04:	4313      	orrs	r3, r2
 800dc06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800dc08:	2300      	movs	r3, #0
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3714      	adds	r7, #20
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc14:	4770      	bx	lr

0800dc16 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800dc16:	b480      	push	{r7}
 800dc18:	b087      	sub	sp, #28
 800dc1a:	af00      	add	r7, sp, #0
 800dc1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800dc22:	693b      	ldr	r3, [r7, #16]
 800dc24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc28:	689b      	ldr	r3, [r3, #8]
 800dc2a:	f003 0306 	and.w	r3, r3, #6
 800dc2e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d102      	bne.n	800dc3c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800dc36:	2300      	movs	r3, #0
 800dc38:	75fb      	strb	r3, [r7, #23]
 800dc3a:	e00a      	b.n	800dc52 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	2b02      	cmp	r3, #2
 800dc40:	d002      	beq.n	800dc48 <USB_GetDevSpeed+0x32>
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	2b06      	cmp	r3, #6
 800dc46:	d102      	bne.n	800dc4e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800dc48:	2302      	movs	r3, #2
 800dc4a:	75fb      	strb	r3, [r7, #23]
 800dc4c:	e001      	b.n	800dc52 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800dc4e:	230f      	movs	r3, #15
 800dc50:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800dc52:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc54:	4618      	mov	r0, r3
 800dc56:	371c      	adds	r7, #28
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5e:	4770      	bx	lr

0800dc60 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dc60:	b480      	push	{r7}
 800dc62:	b085      	sub	sp, #20
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
 800dc68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	781b      	ldrb	r3, [r3, #0]
 800dc72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	785b      	ldrb	r3, [r3, #1]
 800dc78:	2b01      	cmp	r3, #1
 800dc7a:	d13a      	bne.n	800dcf2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc82:	69da      	ldr	r2, [r3, #28]
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	781b      	ldrb	r3, [r3, #0]
 800dc88:	f003 030f 	and.w	r3, r3, #15
 800dc8c:	2101      	movs	r1, #1
 800dc8e:	fa01 f303 	lsl.w	r3, r1, r3
 800dc92:	b29b      	uxth	r3, r3
 800dc94:	68f9      	ldr	r1, [r7, #12]
 800dc96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dc9a:	4313      	orrs	r3, r2
 800dc9c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	015a      	lsls	r2, r3, #5
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	4413      	add	r3, r2
 800dca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d155      	bne.n	800dd60 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	015a      	lsls	r2, r3, #5
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	4413      	add	r3, r2
 800dcbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcc0:	681a      	ldr	r2, [r3, #0]
 800dcc2:	683b      	ldr	r3, [r7, #0]
 800dcc4:	689b      	ldr	r3, [r3, #8]
 800dcc6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	78db      	ldrb	r3, [r3, #3]
 800dcce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dcd0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800dcd2:	68bb      	ldr	r3, [r7, #8]
 800dcd4:	059b      	lsls	r3, r3, #22
 800dcd6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dcd8:	4313      	orrs	r3, r2
 800dcda:	68ba      	ldr	r2, [r7, #8]
 800dcdc:	0151      	lsls	r1, r2, #5
 800dcde:	68fa      	ldr	r2, [r7, #12]
 800dce0:	440a      	add	r2, r1
 800dce2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dcea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dcee:	6013      	str	r3, [r2, #0]
 800dcf0:	e036      	b.n	800dd60 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dcf8:	69da      	ldr	r2, [r3, #28]
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	781b      	ldrb	r3, [r3, #0]
 800dcfe:	f003 030f 	and.w	r3, r3, #15
 800dd02:	2101      	movs	r1, #1
 800dd04:	fa01 f303 	lsl.w	r3, r1, r3
 800dd08:	041b      	lsls	r3, r3, #16
 800dd0a:	68f9      	ldr	r1, [r7, #12]
 800dd0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dd10:	4313      	orrs	r3, r2
 800dd12:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800dd14:	68bb      	ldr	r3, [r7, #8]
 800dd16:	015a      	lsls	r2, r3, #5
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	4413      	add	r3, r2
 800dd1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d11a      	bne.n	800dd60 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	015a      	lsls	r2, r3, #5
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	4413      	add	r3, r2
 800dd32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd36:	681a      	ldr	r2, [r3, #0]
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	689b      	ldr	r3, [r3, #8]
 800dd3c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	78db      	ldrb	r3, [r3, #3]
 800dd44:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dd46:	430b      	orrs	r3, r1
 800dd48:	4313      	orrs	r3, r2
 800dd4a:	68ba      	ldr	r2, [r7, #8]
 800dd4c:	0151      	lsls	r1, r2, #5
 800dd4e:	68fa      	ldr	r2, [r7, #12]
 800dd50:	440a      	add	r2, r1
 800dd52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dd5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dd5e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800dd60:	2300      	movs	r3, #0
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3714      	adds	r7, #20
 800dd66:	46bd      	mov	sp, r7
 800dd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6c:	4770      	bx	lr
	...

0800dd70 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dd70:	b480      	push	{r7}
 800dd72:	b085      	sub	sp, #20
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
 800dd78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	781b      	ldrb	r3, [r3, #0]
 800dd82:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	785b      	ldrb	r3, [r3, #1]
 800dd88:	2b01      	cmp	r3, #1
 800dd8a:	d161      	bne.n	800de50 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	015a      	lsls	r2, r3, #5
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	4413      	add	r3, r2
 800dd94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dd9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dda2:	d11f      	bne.n	800dde4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	015a      	lsls	r2, r3, #5
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	4413      	add	r3, r2
 800ddac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	68ba      	ldr	r2, [r7, #8]
 800ddb4:	0151      	lsls	r1, r2, #5
 800ddb6:	68fa      	ldr	r2, [r7, #12]
 800ddb8:	440a      	add	r2, r1
 800ddba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ddbe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ddc2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	015a      	lsls	r2, r3, #5
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	4413      	add	r3, r2
 800ddcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	68ba      	ldr	r2, [r7, #8]
 800ddd4:	0151      	lsls	r1, r2, #5
 800ddd6:	68fa      	ldr	r2, [r7, #12]
 800ddd8:	440a      	add	r2, r1
 800ddda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ddde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dde2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ddec:	683b      	ldr	r3, [r7, #0]
 800ddee:	781b      	ldrb	r3, [r3, #0]
 800ddf0:	f003 030f 	and.w	r3, r3, #15
 800ddf4:	2101      	movs	r1, #1
 800ddf6:	fa01 f303 	lsl.w	r3, r1, r3
 800ddfa:	b29b      	uxth	r3, r3
 800ddfc:	43db      	mvns	r3, r3
 800ddfe:	68f9      	ldr	r1, [r7, #12]
 800de00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800de04:	4013      	ands	r3, r2
 800de06:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de0e:	69da      	ldr	r2, [r3, #28]
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	781b      	ldrb	r3, [r3, #0]
 800de14:	f003 030f 	and.w	r3, r3, #15
 800de18:	2101      	movs	r1, #1
 800de1a:	fa01 f303 	lsl.w	r3, r1, r3
 800de1e:	b29b      	uxth	r3, r3
 800de20:	43db      	mvns	r3, r3
 800de22:	68f9      	ldr	r1, [r7, #12]
 800de24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800de28:	4013      	ands	r3, r2
 800de2a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	015a      	lsls	r2, r3, #5
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	4413      	add	r3, r2
 800de34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de38:	681a      	ldr	r2, [r3, #0]
 800de3a:	68bb      	ldr	r3, [r7, #8]
 800de3c:	0159      	lsls	r1, r3, #5
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	440b      	add	r3, r1
 800de42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de46:	4619      	mov	r1, r3
 800de48:	4b35      	ldr	r3, [pc, #212]	; (800df20 <USB_DeactivateEndpoint+0x1b0>)
 800de4a:	4013      	ands	r3, r2
 800de4c:	600b      	str	r3, [r1, #0]
 800de4e:	e060      	b.n	800df12 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800de50:	68bb      	ldr	r3, [r7, #8]
 800de52:	015a      	lsls	r2, r3, #5
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	4413      	add	r3, r2
 800de58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800de62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de66:	d11f      	bne.n	800dea8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	015a      	lsls	r2, r3, #5
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	4413      	add	r3, r2
 800de70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	68ba      	ldr	r2, [r7, #8]
 800de78:	0151      	lsls	r1, r2, #5
 800de7a:	68fa      	ldr	r2, [r7, #12]
 800de7c:	440a      	add	r2, r1
 800de7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800de86:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	015a      	lsls	r2, r3, #5
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	4413      	add	r3, r2
 800de90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	68ba      	ldr	r2, [r7, #8]
 800de98:	0151      	lsls	r1, r2, #5
 800de9a:	68fa      	ldr	r2, [r7, #12]
 800de9c:	440a      	add	r2, r1
 800de9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dea2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dea6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800deae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	781b      	ldrb	r3, [r3, #0]
 800deb4:	f003 030f 	and.w	r3, r3, #15
 800deb8:	2101      	movs	r1, #1
 800deba:	fa01 f303 	lsl.w	r3, r1, r3
 800debe:	041b      	lsls	r3, r3, #16
 800dec0:	43db      	mvns	r3, r3
 800dec2:	68f9      	ldr	r1, [r7, #12]
 800dec4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dec8:	4013      	ands	r3, r2
 800deca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ded2:	69da      	ldr	r2, [r3, #28]
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	781b      	ldrb	r3, [r3, #0]
 800ded8:	f003 030f 	and.w	r3, r3, #15
 800dedc:	2101      	movs	r1, #1
 800dede:	fa01 f303 	lsl.w	r3, r1, r3
 800dee2:	041b      	lsls	r3, r3, #16
 800dee4:	43db      	mvns	r3, r3
 800dee6:	68f9      	ldr	r1, [r7, #12]
 800dee8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800deec:	4013      	ands	r3, r2
 800deee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	015a      	lsls	r2, r3, #5
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	4413      	add	r3, r2
 800def8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800defc:	681a      	ldr	r2, [r3, #0]
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	0159      	lsls	r1, r3, #5
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	440b      	add	r3, r1
 800df06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df0a:	4619      	mov	r1, r3
 800df0c:	4b05      	ldr	r3, [pc, #20]	; (800df24 <USB_DeactivateEndpoint+0x1b4>)
 800df0e:	4013      	ands	r3, r2
 800df10:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800df12:	2300      	movs	r3, #0
}
 800df14:	4618      	mov	r0, r3
 800df16:	3714      	adds	r7, #20
 800df18:	46bd      	mov	sp, r7
 800df1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1e:	4770      	bx	lr
 800df20:	ec337800 	.word	0xec337800
 800df24:	eff37800 	.word	0xeff37800

0800df28 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b08a      	sub	sp, #40	; 0x28
 800df2c:	af02      	add	r7, sp, #8
 800df2e:	60f8      	str	r0, [r7, #12]
 800df30:	60b9      	str	r1, [r7, #8]
 800df32:	4613      	mov	r3, r2
 800df34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800df3a:	68bb      	ldr	r3, [r7, #8]
 800df3c:	781b      	ldrb	r3, [r3, #0]
 800df3e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	785b      	ldrb	r3, [r3, #1]
 800df44:	2b01      	cmp	r3, #1
 800df46:	f040 815c 	bne.w	800e202 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800df4a:	68bb      	ldr	r3, [r7, #8]
 800df4c:	695b      	ldr	r3, [r3, #20]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d132      	bne.n	800dfb8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800df52:	69bb      	ldr	r3, [r7, #24]
 800df54:	015a      	lsls	r2, r3, #5
 800df56:	69fb      	ldr	r3, [r7, #28]
 800df58:	4413      	add	r3, r2
 800df5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df5e:	691b      	ldr	r3, [r3, #16]
 800df60:	69ba      	ldr	r2, [r7, #24]
 800df62:	0151      	lsls	r1, r2, #5
 800df64:	69fa      	ldr	r2, [r7, #28]
 800df66:	440a      	add	r2, r1
 800df68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800df70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800df74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800df76:	69bb      	ldr	r3, [r7, #24]
 800df78:	015a      	lsls	r2, r3, #5
 800df7a:	69fb      	ldr	r3, [r7, #28]
 800df7c:	4413      	add	r3, r2
 800df7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df82:	691b      	ldr	r3, [r3, #16]
 800df84:	69ba      	ldr	r2, [r7, #24]
 800df86:	0151      	lsls	r1, r2, #5
 800df88:	69fa      	ldr	r2, [r7, #28]
 800df8a:	440a      	add	r2, r1
 800df8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800df94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800df96:	69bb      	ldr	r3, [r7, #24]
 800df98:	015a      	lsls	r2, r3, #5
 800df9a:	69fb      	ldr	r3, [r7, #28]
 800df9c:	4413      	add	r3, r2
 800df9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfa2:	691b      	ldr	r3, [r3, #16]
 800dfa4:	69ba      	ldr	r2, [r7, #24]
 800dfa6:	0151      	lsls	r1, r2, #5
 800dfa8:	69fa      	ldr	r2, [r7, #28]
 800dfaa:	440a      	add	r2, r1
 800dfac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dfb0:	0cdb      	lsrs	r3, r3, #19
 800dfb2:	04db      	lsls	r3, r3, #19
 800dfb4:	6113      	str	r3, [r2, #16]
 800dfb6:	e074      	b.n	800e0a2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dfb8:	69bb      	ldr	r3, [r7, #24]
 800dfba:	015a      	lsls	r2, r3, #5
 800dfbc:	69fb      	ldr	r3, [r7, #28]
 800dfbe:	4413      	add	r3, r2
 800dfc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfc4:	691b      	ldr	r3, [r3, #16]
 800dfc6:	69ba      	ldr	r2, [r7, #24]
 800dfc8:	0151      	lsls	r1, r2, #5
 800dfca:	69fa      	ldr	r2, [r7, #28]
 800dfcc:	440a      	add	r2, r1
 800dfce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dfd2:	0cdb      	lsrs	r3, r3, #19
 800dfd4:	04db      	lsls	r3, r3, #19
 800dfd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dfd8:	69bb      	ldr	r3, [r7, #24]
 800dfda:	015a      	lsls	r2, r3, #5
 800dfdc:	69fb      	ldr	r3, [r7, #28]
 800dfde:	4413      	add	r3, r2
 800dfe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfe4:	691b      	ldr	r3, [r3, #16]
 800dfe6:	69ba      	ldr	r2, [r7, #24]
 800dfe8:	0151      	lsls	r1, r2, #5
 800dfea:	69fa      	ldr	r2, [r7, #28]
 800dfec:	440a      	add	r2, r1
 800dfee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dff2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dff6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dffa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800dffc:	69bb      	ldr	r3, [r7, #24]
 800dffe:	015a      	lsls	r2, r3, #5
 800e000:	69fb      	ldr	r3, [r7, #28]
 800e002:	4413      	add	r3, r2
 800e004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e008:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e00a:	68bb      	ldr	r3, [r7, #8]
 800e00c:	6959      	ldr	r1, [r3, #20]
 800e00e:	68bb      	ldr	r3, [r7, #8]
 800e010:	689b      	ldr	r3, [r3, #8]
 800e012:	440b      	add	r3, r1
 800e014:	1e59      	subs	r1, r3, #1
 800e016:	68bb      	ldr	r3, [r7, #8]
 800e018:	689b      	ldr	r3, [r3, #8]
 800e01a:	fbb1 f3f3 	udiv	r3, r1, r3
 800e01e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e020:	4b9d      	ldr	r3, [pc, #628]	; (800e298 <USB_EPStartXfer+0x370>)
 800e022:	400b      	ands	r3, r1
 800e024:	69b9      	ldr	r1, [r7, #24]
 800e026:	0148      	lsls	r0, r1, #5
 800e028:	69f9      	ldr	r1, [r7, #28]
 800e02a:	4401      	add	r1, r0
 800e02c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e030:	4313      	orrs	r3, r2
 800e032:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e034:	69bb      	ldr	r3, [r7, #24]
 800e036:	015a      	lsls	r2, r3, #5
 800e038:	69fb      	ldr	r3, [r7, #28]
 800e03a:	4413      	add	r3, r2
 800e03c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e040:	691a      	ldr	r2, [r3, #16]
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	695b      	ldr	r3, [r3, #20]
 800e046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e04a:	69b9      	ldr	r1, [r7, #24]
 800e04c:	0148      	lsls	r0, r1, #5
 800e04e:	69f9      	ldr	r1, [r7, #28]
 800e050:	4401      	add	r1, r0
 800e052:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e056:	4313      	orrs	r3, r2
 800e058:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e05a:	68bb      	ldr	r3, [r7, #8]
 800e05c:	78db      	ldrb	r3, [r3, #3]
 800e05e:	2b01      	cmp	r3, #1
 800e060:	d11f      	bne.n	800e0a2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e062:	69bb      	ldr	r3, [r7, #24]
 800e064:	015a      	lsls	r2, r3, #5
 800e066:	69fb      	ldr	r3, [r7, #28]
 800e068:	4413      	add	r3, r2
 800e06a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e06e:	691b      	ldr	r3, [r3, #16]
 800e070:	69ba      	ldr	r2, [r7, #24]
 800e072:	0151      	lsls	r1, r2, #5
 800e074:	69fa      	ldr	r2, [r7, #28]
 800e076:	440a      	add	r2, r1
 800e078:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e07c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e080:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e082:	69bb      	ldr	r3, [r7, #24]
 800e084:	015a      	lsls	r2, r3, #5
 800e086:	69fb      	ldr	r3, [r7, #28]
 800e088:	4413      	add	r3, r2
 800e08a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e08e:	691b      	ldr	r3, [r3, #16]
 800e090:	69ba      	ldr	r2, [r7, #24]
 800e092:	0151      	lsls	r1, r2, #5
 800e094:	69fa      	ldr	r2, [r7, #28]
 800e096:	440a      	add	r2, r1
 800e098:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e09c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e0a0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e0a2:	79fb      	ldrb	r3, [r7, #7]
 800e0a4:	2b01      	cmp	r3, #1
 800e0a6:	d14b      	bne.n	800e140 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e0a8:	68bb      	ldr	r3, [r7, #8]
 800e0aa:	691b      	ldr	r3, [r3, #16]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d009      	beq.n	800e0c4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e0b0:	69bb      	ldr	r3, [r7, #24]
 800e0b2:	015a      	lsls	r2, r3, #5
 800e0b4:	69fb      	ldr	r3, [r7, #28]
 800e0b6:	4413      	add	r3, r2
 800e0b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0bc:	461a      	mov	r2, r3
 800e0be:	68bb      	ldr	r3, [r7, #8]
 800e0c0:	691b      	ldr	r3, [r3, #16]
 800e0c2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	78db      	ldrb	r3, [r3, #3]
 800e0c8:	2b01      	cmp	r3, #1
 800e0ca:	d128      	bne.n	800e11e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e0cc:	69fb      	ldr	r3, [r7, #28]
 800e0ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0d2:	689b      	ldr	r3, [r3, #8]
 800e0d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d110      	bne.n	800e0fe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e0dc:	69bb      	ldr	r3, [r7, #24]
 800e0de:	015a      	lsls	r2, r3, #5
 800e0e0:	69fb      	ldr	r3, [r7, #28]
 800e0e2:	4413      	add	r3, r2
 800e0e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	69ba      	ldr	r2, [r7, #24]
 800e0ec:	0151      	lsls	r1, r2, #5
 800e0ee:	69fa      	ldr	r2, [r7, #28]
 800e0f0:	440a      	add	r2, r1
 800e0f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e0f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e0fa:	6013      	str	r3, [r2, #0]
 800e0fc:	e00f      	b.n	800e11e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e0fe:	69bb      	ldr	r3, [r7, #24]
 800e100:	015a      	lsls	r2, r3, #5
 800e102:	69fb      	ldr	r3, [r7, #28]
 800e104:	4413      	add	r3, r2
 800e106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	69ba      	ldr	r2, [r7, #24]
 800e10e:	0151      	lsls	r1, r2, #5
 800e110:	69fa      	ldr	r2, [r7, #28]
 800e112:	440a      	add	r2, r1
 800e114:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e11c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e11e:	69bb      	ldr	r3, [r7, #24]
 800e120:	015a      	lsls	r2, r3, #5
 800e122:	69fb      	ldr	r3, [r7, #28]
 800e124:	4413      	add	r3, r2
 800e126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	69ba      	ldr	r2, [r7, #24]
 800e12e:	0151      	lsls	r1, r2, #5
 800e130:	69fa      	ldr	r2, [r7, #28]
 800e132:	440a      	add	r2, r1
 800e134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e138:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e13c:	6013      	str	r3, [r2, #0]
 800e13e:	e12f      	b.n	800e3a0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e140:	69bb      	ldr	r3, [r7, #24]
 800e142:	015a      	lsls	r2, r3, #5
 800e144:	69fb      	ldr	r3, [r7, #28]
 800e146:	4413      	add	r3, r2
 800e148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	69ba      	ldr	r2, [r7, #24]
 800e150:	0151      	lsls	r1, r2, #5
 800e152:	69fa      	ldr	r2, [r7, #28]
 800e154:	440a      	add	r2, r1
 800e156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e15a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e15e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	78db      	ldrb	r3, [r3, #3]
 800e164:	2b01      	cmp	r3, #1
 800e166:	d015      	beq.n	800e194 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	695b      	ldr	r3, [r3, #20]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	f000 8117 	beq.w	800e3a0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e172:	69fb      	ldr	r3, [r7, #28]
 800e174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	781b      	ldrb	r3, [r3, #0]
 800e17e:	f003 030f 	and.w	r3, r3, #15
 800e182:	2101      	movs	r1, #1
 800e184:	fa01 f303 	lsl.w	r3, r1, r3
 800e188:	69f9      	ldr	r1, [r7, #28]
 800e18a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e18e:	4313      	orrs	r3, r2
 800e190:	634b      	str	r3, [r1, #52]	; 0x34
 800e192:	e105      	b.n	800e3a0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e194:	69fb      	ldr	r3, [r7, #28]
 800e196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e19a:	689b      	ldr	r3, [r3, #8]
 800e19c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d110      	bne.n	800e1c6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e1a4:	69bb      	ldr	r3, [r7, #24]
 800e1a6:	015a      	lsls	r2, r3, #5
 800e1a8:	69fb      	ldr	r3, [r7, #28]
 800e1aa:	4413      	add	r3, r2
 800e1ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	69ba      	ldr	r2, [r7, #24]
 800e1b4:	0151      	lsls	r1, r2, #5
 800e1b6:	69fa      	ldr	r2, [r7, #28]
 800e1b8:	440a      	add	r2, r1
 800e1ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e1be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e1c2:	6013      	str	r3, [r2, #0]
 800e1c4:	e00f      	b.n	800e1e6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e1c6:	69bb      	ldr	r3, [r7, #24]
 800e1c8:	015a      	lsls	r2, r3, #5
 800e1ca:	69fb      	ldr	r3, [r7, #28]
 800e1cc:	4413      	add	r3, r2
 800e1ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	69ba      	ldr	r2, [r7, #24]
 800e1d6:	0151      	lsls	r1, r2, #5
 800e1d8:	69fa      	ldr	r2, [r7, #28]
 800e1da:	440a      	add	r2, r1
 800e1dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e1e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e1e4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	68d9      	ldr	r1, [r3, #12]
 800e1ea:	68bb      	ldr	r3, [r7, #8]
 800e1ec:	781a      	ldrb	r2, [r3, #0]
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	695b      	ldr	r3, [r3, #20]
 800e1f2:	b298      	uxth	r0, r3
 800e1f4:	79fb      	ldrb	r3, [r7, #7]
 800e1f6:	9300      	str	r3, [sp, #0]
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	68f8      	ldr	r0, [r7, #12]
 800e1fc:	f000 fa2b 	bl	800e656 <USB_WritePacket>
 800e200:	e0ce      	b.n	800e3a0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e202:	69bb      	ldr	r3, [r7, #24]
 800e204:	015a      	lsls	r2, r3, #5
 800e206:	69fb      	ldr	r3, [r7, #28]
 800e208:	4413      	add	r3, r2
 800e20a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e20e:	691b      	ldr	r3, [r3, #16]
 800e210:	69ba      	ldr	r2, [r7, #24]
 800e212:	0151      	lsls	r1, r2, #5
 800e214:	69fa      	ldr	r2, [r7, #28]
 800e216:	440a      	add	r2, r1
 800e218:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e21c:	0cdb      	lsrs	r3, r3, #19
 800e21e:	04db      	lsls	r3, r3, #19
 800e220:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e222:	69bb      	ldr	r3, [r7, #24]
 800e224:	015a      	lsls	r2, r3, #5
 800e226:	69fb      	ldr	r3, [r7, #28]
 800e228:	4413      	add	r3, r2
 800e22a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e22e:	691b      	ldr	r3, [r3, #16]
 800e230:	69ba      	ldr	r2, [r7, #24]
 800e232:	0151      	lsls	r1, r2, #5
 800e234:	69fa      	ldr	r2, [r7, #28]
 800e236:	440a      	add	r2, r1
 800e238:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e23c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e240:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e244:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	695b      	ldr	r3, [r3, #20]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d126      	bne.n	800e29c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e24e:	69bb      	ldr	r3, [r7, #24]
 800e250:	015a      	lsls	r2, r3, #5
 800e252:	69fb      	ldr	r3, [r7, #28]
 800e254:	4413      	add	r3, r2
 800e256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e25a:	691a      	ldr	r2, [r3, #16]
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	689b      	ldr	r3, [r3, #8]
 800e260:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e264:	69b9      	ldr	r1, [r7, #24]
 800e266:	0148      	lsls	r0, r1, #5
 800e268:	69f9      	ldr	r1, [r7, #28]
 800e26a:	4401      	add	r1, r0
 800e26c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e270:	4313      	orrs	r3, r2
 800e272:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e274:	69bb      	ldr	r3, [r7, #24]
 800e276:	015a      	lsls	r2, r3, #5
 800e278:	69fb      	ldr	r3, [r7, #28]
 800e27a:	4413      	add	r3, r2
 800e27c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e280:	691b      	ldr	r3, [r3, #16]
 800e282:	69ba      	ldr	r2, [r7, #24]
 800e284:	0151      	lsls	r1, r2, #5
 800e286:	69fa      	ldr	r2, [r7, #28]
 800e288:	440a      	add	r2, r1
 800e28a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e28e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e292:	6113      	str	r3, [r2, #16]
 800e294:	e036      	b.n	800e304 <USB_EPStartXfer+0x3dc>
 800e296:	bf00      	nop
 800e298:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e29c:	68bb      	ldr	r3, [r7, #8]
 800e29e:	695a      	ldr	r2, [r3, #20]
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	689b      	ldr	r3, [r3, #8]
 800e2a4:	4413      	add	r3, r2
 800e2a6:	1e5a      	subs	r2, r3, #1
 800e2a8:	68bb      	ldr	r3, [r7, #8]
 800e2aa:	689b      	ldr	r3, [r3, #8]
 800e2ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2b0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e2b2:	69bb      	ldr	r3, [r7, #24]
 800e2b4:	015a      	lsls	r2, r3, #5
 800e2b6:	69fb      	ldr	r3, [r7, #28]
 800e2b8:	4413      	add	r3, r2
 800e2ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2be:	691a      	ldr	r2, [r3, #16]
 800e2c0:	8afb      	ldrh	r3, [r7, #22]
 800e2c2:	04d9      	lsls	r1, r3, #19
 800e2c4:	4b39      	ldr	r3, [pc, #228]	; (800e3ac <USB_EPStartXfer+0x484>)
 800e2c6:	400b      	ands	r3, r1
 800e2c8:	69b9      	ldr	r1, [r7, #24]
 800e2ca:	0148      	lsls	r0, r1, #5
 800e2cc:	69f9      	ldr	r1, [r7, #28]
 800e2ce:	4401      	add	r1, r0
 800e2d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e2d4:	4313      	orrs	r3, r2
 800e2d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800e2d8:	69bb      	ldr	r3, [r7, #24]
 800e2da:	015a      	lsls	r2, r3, #5
 800e2dc:	69fb      	ldr	r3, [r7, #28]
 800e2de:	4413      	add	r3, r2
 800e2e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2e4:	691a      	ldr	r2, [r3, #16]
 800e2e6:	68bb      	ldr	r3, [r7, #8]
 800e2e8:	689b      	ldr	r3, [r3, #8]
 800e2ea:	8af9      	ldrh	r1, [r7, #22]
 800e2ec:	fb01 f303 	mul.w	r3, r1, r3
 800e2f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e2f4:	69b9      	ldr	r1, [r7, #24]
 800e2f6:	0148      	lsls	r0, r1, #5
 800e2f8:	69f9      	ldr	r1, [r7, #28]
 800e2fa:	4401      	add	r1, r0
 800e2fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e300:	4313      	orrs	r3, r2
 800e302:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e304:	79fb      	ldrb	r3, [r7, #7]
 800e306:	2b01      	cmp	r3, #1
 800e308:	d10d      	bne.n	800e326 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	68db      	ldr	r3, [r3, #12]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d009      	beq.n	800e326 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e312:	68bb      	ldr	r3, [r7, #8]
 800e314:	68d9      	ldr	r1, [r3, #12]
 800e316:	69bb      	ldr	r3, [r7, #24]
 800e318:	015a      	lsls	r2, r3, #5
 800e31a:	69fb      	ldr	r3, [r7, #28]
 800e31c:	4413      	add	r3, r2
 800e31e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e322:	460a      	mov	r2, r1
 800e324:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	78db      	ldrb	r3, [r3, #3]
 800e32a:	2b01      	cmp	r3, #1
 800e32c:	d128      	bne.n	800e380 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e32e:	69fb      	ldr	r3, [r7, #28]
 800e330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e334:	689b      	ldr	r3, [r3, #8]
 800e336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d110      	bne.n	800e360 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e33e:	69bb      	ldr	r3, [r7, #24]
 800e340:	015a      	lsls	r2, r3, #5
 800e342:	69fb      	ldr	r3, [r7, #28]
 800e344:	4413      	add	r3, r2
 800e346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	69ba      	ldr	r2, [r7, #24]
 800e34e:	0151      	lsls	r1, r2, #5
 800e350:	69fa      	ldr	r2, [r7, #28]
 800e352:	440a      	add	r2, r1
 800e354:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e358:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e35c:	6013      	str	r3, [r2, #0]
 800e35e:	e00f      	b.n	800e380 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e360:	69bb      	ldr	r3, [r7, #24]
 800e362:	015a      	lsls	r2, r3, #5
 800e364:	69fb      	ldr	r3, [r7, #28]
 800e366:	4413      	add	r3, r2
 800e368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	69ba      	ldr	r2, [r7, #24]
 800e370:	0151      	lsls	r1, r2, #5
 800e372:	69fa      	ldr	r2, [r7, #28]
 800e374:	440a      	add	r2, r1
 800e376:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e37a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e37e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e380:	69bb      	ldr	r3, [r7, #24]
 800e382:	015a      	lsls	r2, r3, #5
 800e384:	69fb      	ldr	r3, [r7, #28]
 800e386:	4413      	add	r3, r2
 800e388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	69ba      	ldr	r2, [r7, #24]
 800e390:	0151      	lsls	r1, r2, #5
 800e392:	69fa      	ldr	r2, [r7, #28]
 800e394:	440a      	add	r2, r1
 800e396:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e39a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e39e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e3a0:	2300      	movs	r3, #0
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3720      	adds	r7, #32
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}
 800e3aa:	bf00      	nop
 800e3ac:	1ff80000 	.word	0x1ff80000

0800e3b0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e3b0:	b480      	push	{r7}
 800e3b2:	b087      	sub	sp, #28
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	60f8      	str	r0, [r7, #12]
 800e3b8:	60b9      	str	r1, [r7, #8]
 800e3ba:	4613      	mov	r3, r2
 800e3bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	781b      	ldrb	r3, [r3, #0]
 800e3c6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e3c8:	68bb      	ldr	r3, [r7, #8]
 800e3ca:	785b      	ldrb	r3, [r3, #1]
 800e3cc:	2b01      	cmp	r3, #1
 800e3ce:	f040 80cd 	bne.w	800e56c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e3d2:	68bb      	ldr	r3, [r7, #8]
 800e3d4:	695b      	ldr	r3, [r3, #20]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d132      	bne.n	800e440 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e3da:	693b      	ldr	r3, [r7, #16]
 800e3dc:	015a      	lsls	r2, r3, #5
 800e3de:	697b      	ldr	r3, [r7, #20]
 800e3e0:	4413      	add	r3, r2
 800e3e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3e6:	691b      	ldr	r3, [r3, #16]
 800e3e8:	693a      	ldr	r2, [r7, #16]
 800e3ea:	0151      	lsls	r1, r2, #5
 800e3ec:	697a      	ldr	r2, [r7, #20]
 800e3ee:	440a      	add	r2, r1
 800e3f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e3f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e3f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e3fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e3fe:	693b      	ldr	r3, [r7, #16]
 800e400:	015a      	lsls	r2, r3, #5
 800e402:	697b      	ldr	r3, [r7, #20]
 800e404:	4413      	add	r3, r2
 800e406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e40a:	691b      	ldr	r3, [r3, #16]
 800e40c:	693a      	ldr	r2, [r7, #16]
 800e40e:	0151      	lsls	r1, r2, #5
 800e410:	697a      	ldr	r2, [r7, #20]
 800e412:	440a      	add	r2, r1
 800e414:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e418:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e41c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e41e:	693b      	ldr	r3, [r7, #16]
 800e420:	015a      	lsls	r2, r3, #5
 800e422:	697b      	ldr	r3, [r7, #20]
 800e424:	4413      	add	r3, r2
 800e426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e42a:	691b      	ldr	r3, [r3, #16]
 800e42c:	693a      	ldr	r2, [r7, #16]
 800e42e:	0151      	lsls	r1, r2, #5
 800e430:	697a      	ldr	r2, [r7, #20]
 800e432:	440a      	add	r2, r1
 800e434:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e438:	0cdb      	lsrs	r3, r3, #19
 800e43a:	04db      	lsls	r3, r3, #19
 800e43c:	6113      	str	r3, [r2, #16]
 800e43e:	e04e      	b.n	800e4de <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e440:	693b      	ldr	r3, [r7, #16]
 800e442:	015a      	lsls	r2, r3, #5
 800e444:	697b      	ldr	r3, [r7, #20]
 800e446:	4413      	add	r3, r2
 800e448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e44c:	691b      	ldr	r3, [r3, #16]
 800e44e:	693a      	ldr	r2, [r7, #16]
 800e450:	0151      	lsls	r1, r2, #5
 800e452:	697a      	ldr	r2, [r7, #20]
 800e454:	440a      	add	r2, r1
 800e456:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e45a:	0cdb      	lsrs	r3, r3, #19
 800e45c:	04db      	lsls	r3, r3, #19
 800e45e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e460:	693b      	ldr	r3, [r7, #16]
 800e462:	015a      	lsls	r2, r3, #5
 800e464:	697b      	ldr	r3, [r7, #20]
 800e466:	4413      	add	r3, r2
 800e468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e46c:	691b      	ldr	r3, [r3, #16]
 800e46e:	693a      	ldr	r2, [r7, #16]
 800e470:	0151      	lsls	r1, r2, #5
 800e472:	697a      	ldr	r2, [r7, #20]
 800e474:	440a      	add	r2, r1
 800e476:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e47a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e47e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e482:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	695a      	ldr	r2, [r3, #20]
 800e488:	68bb      	ldr	r3, [r7, #8]
 800e48a:	689b      	ldr	r3, [r3, #8]
 800e48c:	429a      	cmp	r2, r3
 800e48e:	d903      	bls.n	800e498 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	689a      	ldr	r2, [r3, #8]
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e498:	693b      	ldr	r3, [r7, #16]
 800e49a:	015a      	lsls	r2, r3, #5
 800e49c:	697b      	ldr	r3, [r7, #20]
 800e49e:	4413      	add	r3, r2
 800e4a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4a4:	691b      	ldr	r3, [r3, #16]
 800e4a6:	693a      	ldr	r2, [r7, #16]
 800e4a8:	0151      	lsls	r1, r2, #5
 800e4aa:	697a      	ldr	r2, [r7, #20]
 800e4ac:	440a      	add	r2, r1
 800e4ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e4b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e4b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e4b8:	693b      	ldr	r3, [r7, #16]
 800e4ba:	015a      	lsls	r2, r3, #5
 800e4bc:	697b      	ldr	r3, [r7, #20]
 800e4be:	4413      	add	r3, r2
 800e4c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4c4:	691a      	ldr	r2, [r3, #16]
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	695b      	ldr	r3, [r3, #20]
 800e4ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e4ce:	6939      	ldr	r1, [r7, #16]
 800e4d0:	0148      	lsls	r0, r1, #5
 800e4d2:	6979      	ldr	r1, [r7, #20]
 800e4d4:	4401      	add	r1, r0
 800e4d6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e4da:	4313      	orrs	r3, r2
 800e4dc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e4de:	79fb      	ldrb	r3, [r7, #7]
 800e4e0:	2b01      	cmp	r3, #1
 800e4e2:	d11e      	bne.n	800e522 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e4e4:	68bb      	ldr	r3, [r7, #8]
 800e4e6:	691b      	ldr	r3, [r3, #16]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d009      	beq.n	800e500 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e4ec:	693b      	ldr	r3, [r7, #16]
 800e4ee:	015a      	lsls	r2, r3, #5
 800e4f0:	697b      	ldr	r3, [r7, #20]
 800e4f2:	4413      	add	r3, r2
 800e4f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4f8:	461a      	mov	r2, r3
 800e4fa:	68bb      	ldr	r3, [r7, #8]
 800e4fc:	691b      	ldr	r3, [r3, #16]
 800e4fe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e500:	693b      	ldr	r3, [r7, #16]
 800e502:	015a      	lsls	r2, r3, #5
 800e504:	697b      	ldr	r3, [r7, #20]
 800e506:	4413      	add	r3, r2
 800e508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	693a      	ldr	r2, [r7, #16]
 800e510:	0151      	lsls	r1, r2, #5
 800e512:	697a      	ldr	r2, [r7, #20]
 800e514:	440a      	add	r2, r1
 800e516:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e51a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e51e:	6013      	str	r3, [r2, #0]
 800e520:	e092      	b.n	800e648 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e522:	693b      	ldr	r3, [r7, #16]
 800e524:	015a      	lsls	r2, r3, #5
 800e526:	697b      	ldr	r3, [r7, #20]
 800e528:	4413      	add	r3, r2
 800e52a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	693a      	ldr	r2, [r7, #16]
 800e532:	0151      	lsls	r1, r2, #5
 800e534:	697a      	ldr	r2, [r7, #20]
 800e536:	440a      	add	r2, r1
 800e538:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e53c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e540:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800e542:	68bb      	ldr	r3, [r7, #8]
 800e544:	695b      	ldr	r3, [r3, #20]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d07e      	beq.n	800e648 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e54a:	697b      	ldr	r3, [r7, #20]
 800e54c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e550:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e552:	68bb      	ldr	r3, [r7, #8]
 800e554:	781b      	ldrb	r3, [r3, #0]
 800e556:	f003 030f 	and.w	r3, r3, #15
 800e55a:	2101      	movs	r1, #1
 800e55c:	fa01 f303 	lsl.w	r3, r1, r3
 800e560:	6979      	ldr	r1, [r7, #20]
 800e562:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e566:	4313      	orrs	r3, r2
 800e568:	634b      	str	r3, [r1, #52]	; 0x34
 800e56a:	e06d      	b.n	800e648 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e56c:	693b      	ldr	r3, [r7, #16]
 800e56e:	015a      	lsls	r2, r3, #5
 800e570:	697b      	ldr	r3, [r7, #20]
 800e572:	4413      	add	r3, r2
 800e574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e578:	691b      	ldr	r3, [r3, #16]
 800e57a:	693a      	ldr	r2, [r7, #16]
 800e57c:	0151      	lsls	r1, r2, #5
 800e57e:	697a      	ldr	r2, [r7, #20]
 800e580:	440a      	add	r2, r1
 800e582:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e586:	0cdb      	lsrs	r3, r3, #19
 800e588:	04db      	lsls	r3, r3, #19
 800e58a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	015a      	lsls	r2, r3, #5
 800e590:	697b      	ldr	r3, [r7, #20]
 800e592:	4413      	add	r3, r2
 800e594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e598:	691b      	ldr	r3, [r3, #16]
 800e59a:	693a      	ldr	r2, [r7, #16]
 800e59c:	0151      	lsls	r1, r2, #5
 800e59e:	697a      	ldr	r2, [r7, #20]
 800e5a0:	440a      	add	r2, r1
 800e5a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e5a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e5aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e5ae:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800e5b0:	68bb      	ldr	r3, [r7, #8]
 800e5b2:	695b      	ldr	r3, [r3, #20]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d003      	beq.n	800e5c0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	689a      	ldr	r2, [r3, #8]
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e5c0:	693b      	ldr	r3, [r7, #16]
 800e5c2:	015a      	lsls	r2, r3, #5
 800e5c4:	697b      	ldr	r3, [r7, #20]
 800e5c6:	4413      	add	r3, r2
 800e5c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5cc:	691b      	ldr	r3, [r3, #16]
 800e5ce:	693a      	ldr	r2, [r7, #16]
 800e5d0:	0151      	lsls	r1, r2, #5
 800e5d2:	697a      	ldr	r2, [r7, #20]
 800e5d4:	440a      	add	r2, r1
 800e5d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e5da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e5de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800e5e0:	693b      	ldr	r3, [r7, #16]
 800e5e2:	015a      	lsls	r2, r3, #5
 800e5e4:	697b      	ldr	r3, [r7, #20]
 800e5e6:	4413      	add	r3, r2
 800e5e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5ec:	691a      	ldr	r2, [r3, #16]
 800e5ee:	68bb      	ldr	r3, [r7, #8]
 800e5f0:	689b      	ldr	r3, [r3, #8]
 800e5f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e5f6:	6939      	ldr	r1, [r7, #16]
 800e5f8:	0148      	lsls	r0, r1, #5
 800e5fa:	6979      	ldr	r1, [r7, #20]
 800e5fc:	4401      	add	r1, r0
 800e5fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e602:	4313      	orrs	r3, r2
 800e604:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800e606:	79fb      	ldrb	r3, [r7, #7]
 800e608:	2b01      	cmp	r3, #1
 800e60a:	d10d      	bne.n	800e628 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e60c:	68bb      	ldr	r3, [r7, #8]
 800e60e:	68db      	ldr	r3, [r3, #12]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d009      	beq.n	800e628 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	68d9      	ldr	r1, [r3, #12]
 800e618:	693b      	ldr	r3, [r7, #16]
 800e61a:	015a      	lsls	r2, r3, #5
 800e61c:	697b      	ldr	r3, [r7, #20]
 800e61e:	4413      	add	r3, r2
 800e620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e624:	460a      	mov	r2, r1
 800e626:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e628:	693b      	ldr	r3, [r7, #16]
 800e62a:	015a      	lsls	r2, r3, #5
 800e62c:	697b      	ldr	r3, [r7, #20]
 800e62e:	4413      	add	r3, r2
 800e630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	693a      	ldr	r2, [r7, #16]
 800e638:	0151      	lsls	r1, r2, #5
 800e63a:	697a      	ldr	r2, [r7, #20]
 800e63c:	440a      	add	r2, r1
 800e63e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e642:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e646:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e648:	2300      	movs	r3, #0
}
 800e64a:	4618      	mov	r0, r3
 800e64c:	371c      	adds	r7, #28
 800e64e:	46bd      	mov	sp, r7
 800e650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e654:	4770      	bx	lr

0800e656 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e656:	b480      	push	{r7}
 800e658:	b089      	sub	sp, #36	; 0x24
 800e65a:	af00      	add	r7, sp, #0
 800e65c:	60f8      	str	r0, [r7, #12]
 800e65e:	60b9      	str	r1, [r7, #8]
 800e660:	4611      	mov	r1, r2
 800e662:	461a      	mov	r2, r3
 800e664:	460b      	mov	r3, r1
 800e666:	71fb      	strb	r3, [r7, #7]
 800e668:	4613      	mov	r3, r2
 800e66a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e670:	68bb      	ldr	r3, [r7, #8]
 800e672:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e674:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d123      	bne.n	800e6c4 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e67c:	88bb      	ldrh	r3, [r7, #4]
 800e67e:	3303      	adds	r3, #3
 800e680:	089b      	lsrs	r3, r3, #2
 800e682:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e684:	2300      	movs	r3, #0
 800e686:	61bb      	str	r3, [r7, #24]
 800e688:	e018      	b.n	800e6bc <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e68a:	79fb      	ldrb	r3, [r7, #7]
 800e68c:	031a      	lsls	r2, r3, #12
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	4413      	add	r3, r2
 800e692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e696:	461a      	mov	r2, r3
 800e698:	69fb      	ldr	r3, [r7, #28]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e69e:	69fb      	ldr	r3, [r7, #28]
 800e6a0:	3301      	adds	r3, #1
 800e6a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e6a4:	69fb      	ldr	r3, [r7, #28]
 800e6a6:	3301      	adds	r3, #1
 800e6a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e6aa:	69fb      	ldr	r3, [r7, #28]
 800e6ac:	3301      	adds	r3, #1
 800e6ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e6b0:	69fb      	ldr	r3, [r7, #28]
 800e6b2:	3301      	adds	r3, #1
 800e6b4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e6b6:	69bb      	ldr	r3, [r7, #24]
 800e6b8:	3301      	adds	r3, #1
 800e6ba:	61bb      	str	r3, [r7, #24]
 800e6bc:	69ba      	ldr	r2, [r7, #24]
 800e6be:	693b      	ldr	r3, [r7, #16]
 800e6c0:	429a      	cmp	r2, r3
 800e6c2:	d3e2      	bcc.n	800e68a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e6c4:	2300      	movs	r3, #0
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	3724      	adds	r7, #36	; 0x24
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d0:	4770      	bx	lr

0800e6d2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e6d2:	b480      	push	{r7}
 800e6d4:	b08b      	sub	sp, #44	; 0x2c
 800e6d6:	af00      	add	r7, sp, #0
 800e6d8:	60f8      	str	r0, [r7, #12]
 800e6da:	60b9      	str	r1, [r7, #8]
 800e6dc:	4613      	mov	r3, r2
 800e6de:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e6e4:	68bb      	ldr	r3, [r7, #8]
 800e6e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e6e8:	88fb      	ldrh	r3, [r7, #6]
 800e6ea:	089b      	lsrs	r3, r3, #2
 800e6ec:	b29b      	uxth	r3, r3
 800e6ee:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e6f0:	88fb      	ldrh	r3, [r7, #6]
 800e6f2:	f003 0303 	and.w	r3, r3, #3
 800e6f6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	623b      	str	r3, [r7, #32]
 800e6fc:	e014      	b.n	800e728 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e6fe:	69bb      	ldr	r3, [r7, #24]
 800e700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e704:	681a      	ldr	r2, [r3, #0]
 800e706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e708:	601a      	str	r2, [r3, #0]
    pDest++;
 800e70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e70c:	3301      	adds	r3, #1
 800e70e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e712:	3301      	adds	r3, #1
 800e714:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e718:	3301      	adds	r3, #1
 800e71a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e71e:	3301      	adds	r3, #1
 800e720:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800e722:	6a3b      	ldr	r3, [r7, #32]
 800e724:	3301      	adds	r3, #1
 800e726:	623b      	str	r3, [r7, #32]
 800e728:	6a3a      	ldr	r2, [r7, #32]
 800e72a:	697b      	ldr	r3, [r7, #20]
 800e72c:	429a      	cmp	r2, r3
 800e72e:	d3e6      	bcc.n	800e6fe <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e730:	8bfb      	ldrh	r3, [r7, #30]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d01e      	beq.n	800e774 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e736:	2300      	movs	r3, #0
 800e738:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e73a:	69bb      	ldr	r3, [r7, #24]
 800e73c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e740:	461a      	mov	r2, r3
 800e742:	f107 0310 	add.w	r3, r7, #16
 800e746:	6812      	ldr	r2, [r2, #0]
 800e748:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e74a:	693a      	ldr	r2, [r7, #16]
 800e74c:	6a3b      	ldr	r3, [r7, #32]
 800e74e:	b2db      	uxtb	r3, r3
 800e750:	00db      	lsls	r3, r3, #3
 800e752:	fa22 f303 	lsr.w	r3, r2, r3
 800e756:	b2da      	uxtb	r2, r3
 800e758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e75a:	701a      	strb	r2, [r3, #0]
      i++;
 800e75c:	6a3b      	ldr	r3, [r7, #32]
 800e75e:	3301      	adds	r3, #1
 800e760:	623b      	str	r3, [r7, #32]
      pDest++;
 800e762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e764:	3301      	adds	r3, #1
 800e766:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800e768:	8bfb      	ldrh	r3, [r7, #30]
 800e76a:	3b01      	subs	r3, #1
 800e76c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e76e:	8bfb      	ldrh	r3, [r7, #30]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d1ea      	bne.n	800e74a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e776:	4618      	mov	r0, r3
 800e778:	372c      	adds	r7, #44	; 0x2c
 800e77a:	46bd      	mov	sp, r7
 800e77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e780:	4770      	bx	lr

0800e782 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e782:	b480      	push	{r7}
 800e784:	b085      	sub	sp, #20
 800e786:	af00      	add	r7, sp, #0
 800e788:	6078      	str	r0, [r7, #4]
 800e78a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	781b      	ldrb	r3, [r3, #0]
 800e794:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e796:	683b      	ldr	r3, [r7, #0]
 800e798:	785b      	ldrb	r3, [r3, #1]
 800e79a:	2b01      	cmp	r3, #1
 800e79c:	d12c      	bne.n	800e7f8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	015a      	lsls	r2, r3, #5
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	4413      	add	r3, r2
 800e7a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	db12      	blt.n	800e7d6 <USB_EPSetStall+0x54>
 800e7b0:	68bb      	ldr	r3, [r7, #8]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d00f      	beq.n	800e7d6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	015a      	lsls	r2, r3, #5
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	4413      	add	r3, r2
 800e7be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	68ba      	ldr	r2, [r7, #8]
 800e7c6:	0151      	lsls	r1, r2, #5
 800e7c8:	68fa      	ldr	r2, [r7, #12]
 800e7ca:	440a      	add	r2, r1
 800e7cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e7d4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e7d6:	68bb      	ldr	r3, [r7, #8]
 800e7d8:	015a      	lsls	r2, r3, #5
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	4413      	add	r3, r2
 800e7de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	68ba      	ldr	r2, [r7, #8]
 800e7e6:	0151      	lsls	r1, r2, #5
 800e7e8:	68fa      	ldr	r2, [r7, #12]
 800e7ea:	440a      	add	r2, r1
 800e7ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e7f4:	6013      	str	r3, [r2, #0]
 800e7f6:	e02b      	b.n	800e850 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e7f8:	68bb      	ldr	r3, [r7, #8]
 800e7fa:	015a      	lsls	r2, r3, #5
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	4413      	add	r3, r2
 800e800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	2b00      	cmp	r3, #0
 800e808:	db12      	blt.n	800e830 <USB_EPSetStall+0xae>
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d00f      	beq.n	800e830 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	015a      	lsls	r2, r3, #5
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	4413      	add	r3, r2
 800e818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	68ba      	ldr	r2, [r7, #8]
 800e820:	0151      	lsls	r1, r2, #5
 800e822:	68fa      	ldr	r2, [r7, #12]
 800e824:	440a      	add	r2, r1
 800e826:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e82a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e82e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	015a      	lsls	r2, r3, #5
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	4413      	add	r3, r2
 800e838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	68ba      	ldr	r2, [r7, #8]
 800e840:	0151      	lsls	r1, r2, #5
 800e842:	68fa      	ldr	r2, [r7, #12]
 800e844:	440a      	add	r2, r1
 800e846:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e84a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e84e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e850:	2300      	movs	r3, #0
}
 800e852:	4618      	mov	r0, r3
 800e854:	3714      	adds	r7, #20
 800e856:	46bd      	mov	sp, r7
 800e858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85c:	4770      	bx	lr

0800e85e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e85e:	b480      	push	{r7}
 800e860:	b085      	sub	sp, #20
 800e862:	af00      	add	r7, sp, #0
 800e864:	6078      	str	r0, [r7, #4]
 800e866:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	781b      	ldrb	r3, [r3, #0]
 800e870:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	785b      	ldrb	r3, [r3, #1]
 800e876:	2b01      	cmp	r3, #1
 800e878:	d128      	bne.n	800e8cc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e87a:	68bb      	ldr	r3, [r7, #8]
 800e87c:	015a      	lsls	r2, r3, #5
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	4413      	add	r3, r2
 800e882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	68ba      	ldr	r2, [r7, #8]
 800e88a:	0151      	lsls	r1, r2, #5
 800e88c:	68fa      	ldr	r2, [r7, #12]
 800e88e:	440a      	add	r2, r1
 800e890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e894:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e898:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	78db      	ldrb	r3, [r3, #3]
 800e89e:	2b03      	cmp	r3, #3
 800e8a0:	d003      	beq.n	800e8aa <USB_EPClearStall+0x4c>
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	78db      	ldrb	r3, [r3, #3]
 800e8a6:	2b02      	cmp	r3, #2
 800e8a8:	d138      	bne.n	800e91c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e8aa:	68bb      	ldr	r3, [r7, #8]
 800e8ac:	015a      	lsls	r2, r3, #5
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	4413      	add	r3, r2
 800e8b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	68ba      	ldr	r2, [r7, #8]
 800e8ba:	0151      	lsls	r1, r2, #5
 800e8bc:	68fa      	ldr	r2, [r7, #12]
 800e8be:	440a      	add	r2, r1
 800e8c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e8c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e8c8:	6013      	str	r3, [r2, #0]
 800e8ca:	e027      	b.n	800e91c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	015a      	lsls	r2, r3, #5
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	4413      	add	r3, r2
 800e8d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	68ba      	ldr	r2, [r7, #8]
 800e8dc:	0151      	lsls	r1, r2, #5
 800e8de:	68fa      	ldr	r2, [r7, #12]
 800e8e0:	440a      	add	r2, r1
 800e8e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e8e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e8ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	78db      	ldrb	r3, [r3, #3]
 800e8f0:	2b03      	cmp	r3, #3
 800e8f2:	d003      	beq.n	800e8fc <USB_EPClearStall+0x9e>
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	78db      	ldrb	r3, [r3, #3]
 800e8f8:	2b02      	cmp	r3, #2
 800e8fa:	d10f      	bne.n	800e91c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	015a      	lsls	r2, r3, #5
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	4413      	add	r3, r2
 800e904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	68ba      	ldr	r2, [r7, #8]
 800e90c:	0151      	lsls	r1, r2, #5
 800e90e:	68fa      	ldr	r2, [r7, #12]
 800e910:	440a      	add	r2, r1
 800e912:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e91a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e91c:	2300      	movs	r3, #0
}
 800e91e:	4618      	mov	r0, r3
 800e920:	3714      	adds	r7, #20
 800e922:	46bd      	mov	sp, r7
 800e924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e928:	4770      	bx	lr

0800e92a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e92a:	b480      	push	{r7}
 800e92c:	b085      	sub	sp, #20
 800e92e:	af00      	add	r7, sp, #0
 800e930:	6078      	str	r0, [r7, #4]
 800e932:	460b      	mov	r3, r1
 800e934:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	68fa      	ldr	r2, [r7, #12]
 800e944:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e948:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e94c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e954:	681a      	ldr	r2, [r3, #0]
 800e956:	78fb      	ldrb	r3, [r7, #3]
 800e958:	011b      	lsls	r3, r3, #4
 800e95a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e95e:	68f9      	ldr	r1, [r7, #12]
 800e960:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e964:	4313      	orrs	r3, r2
 800e966:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e968:	2300      	movs	r3, #0
}
 800e96a:	4618      	mov	r0, r3
 800e96c:	3714      	adds	r7, #20
 800e96e:	46bd      	mov	sp, r7
 800e970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e974:	4770      	bx	lr

0800e976 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e976:	b480      	push	{r7}
 800e978:	b085      	sub	sp, #20
 800e97a:	af00      	add	r7, sp, #0
 800e97c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	68fa      	ldr	r2, [r7, #12]
 800e98c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e990:	f023 0303 	bic.w	r3, r3, #3
 800e994:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e99c:	685b      	ldr	r3, [r3, #4]
 800e99e:	68fa      	ldr	r2, [r7, #12]
 800e9a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e9a4:	f023 0302 	bic.w	r3, r3, #2
 800e9a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e9aa:	2300      	movs	r3, #0
}
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	3714      	adds	r7, #20
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b6:	4770      	bx	lr

0800e9b8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e9b8:	b480      	push	{r7}
 800e9ba:	b085      	sub	sp, #20
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	68fa      	ldr	r2, [r7, #12]
 800e9ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e9d2:	f023 0303 	bic.w	r3, r3, #3
 800e9d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9de:	685b      	ldr	r3, [r3, #4]
 800e9e0:	68fa      	ldr	r2, [r7, #12]
 800e9e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e9e6:	f043 0302 	orr.w	r3, r3, #2
 800e9ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e9ec:	2300      	movs	r3, #0
}
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	3714      	adds	r7, #20
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f8:	4770      	bx	lr

0800e9fa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e9fa:	b480      	push	{r7}
 800e9fc:	b085      	sub	sp, #20
 800e9fe:	af00      	add	r7, sp, #0
 800ea00:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	695b      	ldr	r3, [r3, #20]
 800ea06:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	699b      	ldr	r3, [r3, #24]
 800ea0c:	68fa      	ldr	r2, [r7, #12]
 800ea0e:	4013      	ands	r3, r2
 800ea10:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ea12:	68fb      	ldr	r3, [r7, #12]
}
 800ea14:	4618      	mov	r0, r3
 800ea16:	3714      	adds	r7, #20
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1e:	4770      	bx	lr

0800ea20 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ea20:	b480      	push	{r7}
 800ea22:	b085      	sub	sp, #20
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea32:	699b      	ldr	r3, [r3, #24]
 800ea34:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea3c:	69db      	ldr	r3, [r3, #28]
 800ea3e:	68ba      	ldr	r2, [r7, #8]
 800ea40:	4013      	ands	r3, r2
 800ea42:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ea44:	68bb      	ldr	r3, [r7, #8]
 800ea46:	0c1b      	lsrs	r3, r3, #16
}
 800ea48:	4618      	mov	r0, r3
 800ea4a:	3714      	adds	r7, #20
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea52:	4770      	bx	lr

0800ea54 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ea54:	b480      	push	{r7}
 800ea56:	b085      	sub	sp, #20
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea66:	699b      	ldr	r3, [r3, #24]
 800ea68:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea70:	69db      	ldr	r3, [r3, #28]
 800ea72:	68ba      	ldr	r2, [r7, #8]
 800ea74:	4013      	ands	r3, r2
 800ea76:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ea78:	68bb      	ldr	r3, [r7, #8]
 800ea7a:	b29b      	uxth	r3, r3
}
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	3714      	adds	r7, #20
 800ea80:	46bd      	mov	sp, r7
 800ea82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea86:	4770      	bx	lr

0800ea88 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ea88:	b480      	push	{r7}
 800ea8a:	b085      	sub	sp, #20
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
 800ea90:	460b      	mov	r3, r1
 800ea92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ea98:	78fb      	ldrb	r3, [r7, #3]
 800ea9a:	015a      	lsls	r2, r3, #5
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	4413      	add	r3, r2
 800eaa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eaa4:	689b      	ldr	r3, [r3, #8]
 800eaa6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eaae:	695b      	ldr	r3, [r3, #20]
 800eab0:	68ba      	ldr	r2, [r7, #8]
 800eab2:	4013      	ands	r3, r2
 800eab4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800eab6:	68bb      	ldr	r3, [r7, #8]
}
 800eab8:	4618      	mov	r0, r3
 800eaba:	3714      	adds	r7, #20
 800eabc:	46bd      	mov	sp, r7
 800eabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac2:	4770      	bx	lr

0800eac4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800eac4:	b480      	push	{r7}
 800eac6:	b087      	sub	sp, #28
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
 800eacc:	460b      	mov	r3, r1
 800eace:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ead4:	697b      	ldr	r3, [r7, #20]
 800ead6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eada:	691b      	ldr	r3, [r3, #16]
 800eadc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800eade:	697b      	ldr	r3, [r7, #20]
 800eae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eae6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800eae8:	78fb      	ldrb	r3, [r7, #3]
 800eaea:	f003 030f 	and.w	r3, r3, #15
 800eaee:	68fa      	ldr	r2, [r7, #12]
 800eaf0:	fa22 f303 	lsr.w	r3, r2, r3
 800eaf4:	01db      	lsls	r3, r3, #7
 800eaf6:	b2db      	uxtb	r3, r3
 800eaf8:	693a      	ldr	r2, [r7, #16]
 800eafa:	4313      	orrs	r3, r2
 800eafc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800eafe:	78fb      	ldrb	r3, [r7, #3]
 800eb00:	015a      	lsls	r2, r3, #5
 800eb02:	697b      	ldr	r3, [r7, #20]
 800eb04:	4413      	add	r3, r2
 800eb06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb0a:	689b      	ldr	r3, [r3, #8]
 800eb0c:	693a      	ldr	r2, [r7, #16]
 800eb0e:	4013      	ands	r3, r2
 800eb10:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800eb12:	68bb      	ldr	r3, [r7, #8]
}
 800eb14:	4618      	mov	r0, r3
 800eb16:	371c      	adds	r7, #28
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1e:	4770      	bx	lr

0800eb20 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800eb20:	b480      	push	{r7}
 800eb22:	b083      	sub	sp, #12
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	695b      	ldr	r3, [r3, #20]
 800eb2c:	f003 0301 	and.w	r3, r3, #1
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	370c      	adds	r7, #12
 800eb34:	46bd      	mov	sp, r7
 800eb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3a:	4770      	bx	lr

0800eb3c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800eb3c:	b480      	push	{r7}
 800eb3e:	b085      	sub	sp, #20
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	68fa      	ldr	r2, [r7, #12]
 800eb52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb56:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800eb5a:	f023 0307 	bic.w	r3, r3, #7
 800eb5e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb66:	685b      	ldr	r3, [r3, #4]
 800eb68:	68fa      	ldr	r2, [r7, #12]
 800eb6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eb6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eb72:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800eb74:	2300      	movs	r3, #0
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	3714      	adds	r7, #20
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb80:	4770      	bx	lr
	...

0800eb84 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800eb84:	b480      	push	{r7}
 800eb86:	b087      	sub	sp, #28
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	60f8      	str	r0, [r7, #12]
 800eb8c:	460b      	mov	r3, r1
 800eb8e:	607a      	str	r2, [r7, #4]
 800eb90:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	333c      	adds	r3, #60	; 0x3c
 800eb9a:	3304      	adds	r3, #4
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800eba0:	693b      	ldr	r3, [r7, #16]
 800eba2:	4a26      	ldr	r2, [pc, #152]	; (800ec3c <USB_EP0_OutStart+0xb8>)
 800eba4:	4293      	cmp	r3, r2
 800eba6:	d90a      	bls.n	800ebbe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800eba8:	697b      	ldr	r3, [r7, #20]
 800ebaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ebb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ebb8:	d101      	bne.n	800ebbe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	e037      	b.n	800ec2e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ebbe:	697b      	ldr	r3, [r7, #20]
 800ebc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebc4:	461a      	mov	r2, r3
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ebca:	697b      	ldr	r3, [r7, #20]
 800ebcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebd0:	691b      	ldr	r3, [r3, #16]
 800ebd2:	697a      	ldr	r2, [r7, #20]
 800ebd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ebd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ebdc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ebde:	697b      	ldr	r3, [r7, #20]
 800ebe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebe4:	691b      	ldr	r3, [r3, #16]
 800ebe6:	697a      	ldr	r2, [r7, #20]
 800ebe8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ebec:	f043 0318 	orr.w	r3, r3, #24
 800ebf0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebf8:	691b      	ldr	r3, [r3, #16]
 800ebfa:	697a      	ldr	r2, [r7, #20]
 800ebfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec00:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ec04:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ec06:	7afb      	ldrb	r3, [r7, #11]
 800ec08:	2b01      	cmp	r3, #1
 800ec0a:	d10f      	bne.n	800ec2c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ec0c:	697b      	ldr	r3, [r7, #20]
 800ec0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec12:	461a      	mov	r2, r3
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ec18:	697b      	ldr	r3, [r7, #20]
 800ec1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	697a      	ldr	r2, [r7, #20]
 800ec22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec26:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ec2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ec2c:	2300      	movs	r3, #0
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	371c      	adds	r7, #28
 800ec32:	46bd      	mov	sp, r7
 800ec34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec38:	4770      	bx	lr
 800ec3a:	bf00      	nop
 800ec3c:	4f54300a 	.word	0x4f54300a

0800ec40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ec40:	b480      	push	{r7}
 800ec42:	b085      	sub	sp, #20
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ec48:	2300      	movs	r3, #0
 800ec4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	3301      	adds	r3, #1
 800ec50:	60fb      	str	r3, [r7, #12]
 800ec52:	4a13      	ldr	r2, [pc, #76]	; (800eca0 <USB_CoreReset+0x60>)
 800ec54:	4293      	cmp	r3, r2
 800ec56:	d901      	bls.n	800ec5c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800ec58:	2303      	movs	r3, #3
 800ec5a:	e01a      	b.n	800ec92 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	691b      	ldr	r3, [r3, #16]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	daf3      	bge.n	800ec4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ec64:	2300      	movs	r3, #0
 800ec66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	691b      	ldr	r3, [r3, #16]
 800ec6c:	f043 0201 	orr.w	r2, r3, #1
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	3301      	adds	r3, #1
 800ec78:	60fb      	str	r3, [r7, #12]
 800ec7a:	4a09      	ldr	r2, [pc, #36]	; (800eca0 <USB_CoreReset+0x60>)
 800ec7c:	4293      	cmp	r3, r2
 800ec7e:	d901      	bls.n	800ec84 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800ec80:	2303      	movs	r3, #3
 800ec82:	e006      	b.n	800ec92 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	691b      	ldr	r3, [r3, #16]
 800ec88:	f003 0301 	and.w	r3, r3, #1
 800ec8c:	2b01      	cmp	r3, #1
 800ec8e:	d0f1      	beq.n	800ec74 <USB_CoreReset+0x34>

  return HAL_OK;
 800ec90:	2300      	movs	r3, #0
}
 800ec92:	4618      	mov	r0, r3
 800ec94:	3714      	adds	r7, #20
 800ec96:	46bd      	mov	sp, r7
 800ec98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9c:	4770      	bx	lr
 800ec9e:	bf00      	nop
 800eca0:	00030d40 	.word	0x00030d40

0800eca4 <sx126x_hal_write>:
 * @returns Operation status
 */


sx126x_hal_status_t sx126x_hal_write( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                      const uint8_t* data, const uint16_t data_length ){
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b086      	sub	sp, #24
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	60f8      	str	r0, [r7, #12]
 800ecac:	60b9      	str	r1, [r7, #8]
 800ecae:	603b      	str	r3, [r7, #0]
 800ecb0:	4613      	mov	r3, r2
 800ecb2:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO,BUSY) == GPIO_PIN_SET);
 800ecb4:	bf00      	nop
 800ecb6:	4b18      	ldr	r3, [pc, #96]	; (800ed18 <sx126x_hal_write+0x74>)
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	4a18      	ldr	r2, [pc, #96]	; (800ed1c <sx126x_hal_write+0x78>)
 800ecbc:	8812      	ldrh	r2, [r2, #0]
 800ecbe:	4611      	mov	r1, r2
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	f7f8 fe79 	bl	80079b8 <HAL_GPIO_ReadPin>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	2b01      	cmp	r3, #1
 800ecca:	d0f4      	beq.n	800ecb6 <sx126x_hal_write+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 800eccc:	4b14      	ldr	r3, [pc, #80]	; (800ed20 <sx126x_hal_write+0x7c>)
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	4a14      	ldr	r2, [pc, #80]	; (800ed24 <sx126x_hal_write+0x80>)
 800ecd2:	8811      	ldrh	r1, [r2, #0]
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	f7f8 fe86 	bl	80079e8 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, command_length, 100);
 800ecdc:	88fa      	ldrh	r2, [r7, #6]
 800ecde:	2364      	movs	r3, #100	; 0x64
 800ece0:	68b9      	ldr	r1, [r7, #8]
 800ece2:	68f8      	ldr	r0, [r7, #12]
 800ece4:	f7fc fda1 	bl	800b82a <HAL_SPI_Transmit>
 800ece8:	4603      	mov	r3, r0
 800ecea:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_Transmit(hspi, data, data_length, 100);
 800ecec:	8c3a      	ldrh	r2, [r7, #32]
 800ecee:	2364      	movs	r3, #100	; 0x64
 800ecf0:	6839      	ldr	r1, [r7, #0]
 800ecf2:	68f8      	ldr	r0, [r7, #12]
 800ecf4:	f7fc fd99 	bl	800b82a <HAL_SPI_Transmit>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 800ecfc:	4b08      	ldr	r3, [pc, #32]	; (800ed20 <sx126x_hal_write+0x7c>)
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	4a08      	ldr	r2, [pc, #32]	; (800ed24 <sx126x_hal_write+0x80>)
 800ed02:	8811      	ldrh	r1, [r2, #0]
 800ed04:	2201      	movs	r2, #1
 800ed06:	4618      	mov	r0, r3
 800ed08:	f7f8 fe6e 	bl	80079e8 <HAL_GPIO_WritePin>
    return status;
 800ed0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed0e:	4618      	mov	r0, r3
 800ed10:	3718      	adds	r7, #24
 800ed12:	46bd      	mov	sp, r7
 800ed14:	bd80      	pop	{r7, pc}
 800ed16:	bf00      	nop
 800ed18:	200007c0 	.word	0x200007c0
 800ed1c:	200007bc 	.word	0x200007bc
 800ed20:	200007b0 	.word	0x200007b0
 800ed24:	200007ac 	.word	0x200007ac

0800ed28 <sx126x_hal_read>:
 * @param [in] data_length      Buffer size to be received
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_read( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                     uint8_t* data, const uint8_t offset ){
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b088      	sub	sp, #32
 800ed2c:	af02      	add	r7, sp, #8
 800ed2e:	60f8      	str	r0, [r7, #12]
 800ed30:	60b9      	str	r1, [r7, #8]
 800ed32:	603b      	str	r3, [r7, #0]
 800ed34:	4613      	mov	r3, r2
 800ed36:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO, BUSY) == GPIO_PIN_SET);
 800ed38:	bf00      	nop
 800ed3a:	4b1e      	ldr	r3, [pc, #120]	; (800edb4 <sx126x_hal_read+0x8c>)
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	4a1e      	ldr	r2, [pc, #120]	; (800edb8 <sx126x_hal_read+0x90>)
 800ed40:	8812      	ldrh	r2, [r2, #0]
 800ed42:	4611      	mov	r1, r2
 800ed44:	4618      	mov	r0, r3
 800ed46:	f7f8 fe37 	bl	80079b8 <HAL_GPIO_ReadPin>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	2b01      	cmp	r3, #1
 800ed4e:	d0f4      	beq.n	800ed3a <sx126x_hal_read+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 800ed50:	4b1a      	ldr	r3, [pc, #104]	; (800edbc <sx126x_hal_read+0x94>)
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	4a1a      	ldr	r2, [pc, #104]	; (800edc0 <sx126x_hal_read+0x98>)
 800ed56:	8811      	ldrh	r1, [r2, #0]
 800ed58:	2200      	movs	r2, #0
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f7f8 fe44 	bl	80079e8 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, offset, 100);
 800ed60:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ed64:	b29a      	uxth	r2, r3
 800ed66:	2364      	movs	r3, #100	; 0x64
 800ed68:	68b9      	ldr	r1, [r7, #8]
 800ed6a:	68f8      	ldr	r0, [r7, #12]
 800ed6c:	f7fc fd5d 	bl	800b82a <HAL_SPI_Transmit>
 800ed70:	4603      	mov	r3, r0
 800ed72:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_TransmitReceive(hspi, command+offset, data, command_length-offset, 100);
 800ed74:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ed78:	68ba      	ldr	r2, [r7, #8]
 800ed7a:	18d1      	adds	r1, r2, r3
 800ed7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ed80:	b29b      	uxth	r3, r3
 800ed82:	88fa      	ldrh	r2, [r7, #6]
 800ed84:	1ad3      	subs	r3, r2, r3
 800ed86:	b29b      	uxth	r3, r3
 800ed88:	2264      	movs	r2, #100	; 0x64
 800ed8a:	9200      	str	r2, [sp, #0]
 800ed8c:	683a      	ldr	r2, [r7, #0]
 800ed8e:	68f8      	ldr	r0, [r7, #12]
 800ed90:	f7fc ff98 	bl	800bcc4 <HAL_SPI_TransmitReceive>
 800ed94:	4603      	mov	r3, r0
 800ed96:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 800ed98:	4b08      	ldr	r3, [pc, #32]	; (800edbc <sx126x_hal_read+0x94>)
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	4a08      	ldr	r2, [pc, #32]	; (800edc0 <sx126x_hal_read+0x98>)
 800ed9e:	8811      	ldrh	r1, [r2, #0]
 800eda0:	2201      	movs	r2, #1
 800eda2:	4618      	mov	r0, r3
 800eda4:	f7f8 fe20 	bl	80079e8 <HAL_GPIO_WritePin>
    return status;
 800eda8:	7dfb      	ldrb	r3, [r7, #23]
}
 800edaa:	4618      	mov	r0, r3
 800edac:	3718      	adds	r7, #24
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}
 800edb2:	bf00      	nop
 800edb4:	200007c0 	.word	0x200007c0
 800edb8:	200007bc 	.word	0x200007bc
 800edbc:	200007b0 	.word	0x200007b0
 800edc0:	200007ac 	.word	0x200007ac

0800edc4 <set_NSS_pin>:
    status = HAL_SPI_TransmitReceive(&hspi, (uint8_t*)params, (uint8_t*)response, numOfParams, 100);
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
    return status;
}

void set_NSS_pin(GPIO_TypeDef* _NSS_GPIO, uint16_t _NSS){
 800edc4:	b480      	push	{r7}
 800edc6:	b083      	sub	sp, #12
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
 800edcc:	460b      	mov	r3, r1
 800edce:	807b      	strh	r3, [r7, #2]
    NSS = _NSS;
 800edd0:	4a05      	ldr	r2, [pc, #20]	; (800ede8 <set_NSS_pin+0x24>)
 800edd2:	887b      	ldrh	r3, [r7, #2]
 800edd4:	8013      	strh	r3, [r2, #0]
    NSS_GPIO = _NSS_GPIO;
 800edd6:	4a05      	ldr	r2, [pc, #20]	; (800edec <set_NSS_pin+0x28>)
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	6013      	str	r3, [r2, #0]
}
 800eddc:	bf00      	nop
 800edde:	370c      	adds	r7, #12
 800ede0:	46bd      	mov	sp, r7
 800ede2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede6:	4770      	bx	lr
 800ede8:	200007ac 	.word	0x200007ac
 800edec:	200007b0 	.word	0x200007b0

0800edf0 <set_BUSY_pin>:

void set_BUSY_pin(GPIO_TypeDef* _BUSY_GPIO, uint16_t _BUSY){
 800edf0:	b480      	push	{r7}
 800edf2:	b083      	sub	sp, #12
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	460b      	mov	r3, r1
 800edfa:	807b      	strh	r3, [r7, #2]
    BUSY = _BUSY;
 800edfc:	4a05      	ldr	r2, [pc, #20]	; (800ee14 <set_BUSY_pin+0x24>)
 800edfe:	887b      	ldrh	r3, [r7, #2]
 800ee00:	8013      	strh	r3, [r2, #0]
    BUSY_GPIO = _BUSY_GPIO;
 800ee02:	4a05      	ldr	r2, [pc, #20]	; (800ee18 <set_BUSY_pin+0x28>)
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	6013      	str	r3, [r2, #0]
}
 800ee08:	bf00      	nop
 800ee0a:	370c      	adds	r7, #12
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee12:	4770      	bx	lr
 800ee14:	200007bc 	.word	0x200007bc
 800ee18:	200007c0 	.word	0x200007c0

0800ee1c <set_NRESET_pin>:

void set_NRESET_pin(GPIO_TypeDef* _NRESET_GPIO, uint16_t _NRESET){
 800ee1c:	b480      	push	{r7}
 800ee1e:	b083      	sub	sp, #12
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
 800ee24:	460b      	mov	r3, r1
 800ee26:	807b      	strh	r3, [r7, #2]
    NRESET = _NRESET;
 800ee28:	4a05      	ldr	r2, [pc, #20]	; (800ee40 <set_NRESET_pin+0x24>)
 800ee2a:	887b      	ldrh	r3, [r7, #2]
 800ee2c:	8013      	strh	r3, [r2, #0]
    NRESET_GPIO = _NRESET_GPIO;
 800ee2e:	4a05      	ldr	r2, [pc, #20]	; (800ee44 <set_NRESET_pin+0x28>)
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	6013      	str	r3, [r2, #0]
}
 800ee34:	bf00      	nop
 800ee36:	370c      	adds	r7, #12
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3e:	4770      	bx	lr
 800ee40:	200007b4 	.word	0x200007b4
 800ee44:	200007b8 	.word	0x200007b8

0800ee48 <set_DIO1_pin>:

void set_DIO1_pin(GPIO_TypeDef* _DIO1_GPIO, uint16_t _DIO1){
 800ee48:	b480      	push	{r7}
 800ee4a:	b083      	sub	sp, #12
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
 800ee50:	460b      	mov	r3, r1
 800ee52:	807b      	strh	r3, [r7, #2]
    DIO1 = _DIO1;
 800ee54:	4a05      	ldr	r2, [pc, #20]	; (800ee6c <set_DIO1_pin+0x24>)
 800ee56:	887b      	ldrh	r3, [r7, #2]
 800ee58:	8013      	strh	r3, [r2, #0]
    DIO1_GPIO = _DIO1_GPIO;
 800ee5a:	4a05      	ldr	r2, [pc, #20]	; (800ee70 <set_DIO1_pin+0x28>)
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	6013      	str	r3, [r2, #0]
}
 800ee60:	bf00      	nop
 800ee62:	370c      	adds	r7, #12
 800ee64:	46bd      	mov	sp, r7
 800ee66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6a:	4770      	bx	lr
 800ee6c:	200007c4 	.word	0x200007c4
 800ee70:	200007c8 	.word	0x200007c8

0800ee74 <set_hspi>:
void set_DIO3_pin(GPIO_TypeDef* _DIO3_GPIO, uint16_t _DIO3){
    DIO3 = _DIO3;
    DIO3_GPIO = _DIO3_GPIO;
}

void set_hspi(SPI_HandleTypeDef _hspi){
 800ee74:	b084      	sub	sp, #16
 800ee76:	b580      	push	{r7, lr}
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	f107 0c08 	add.w	ip, r7, #8
 800ee7e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    hspi = _hspi;
 800ee82:	4b07      	ldr	r3, [pc, #28]	; (800eea0 <set_hspi+0x2c>)
 800ee84:	4618      	mov	r0, r3
 800ee86:	f107 0308 	add.w	r3, r7, #8
 800ee8a:	2258      	movs	r2, #88	; 0x58
 800ee8c:	4619      	mov	r1, r3
 800ee8e:	f00a ff45 	bl	8019d1c <memcpy>
}
 800ee92:	bf00      	nop
 800ee94:	46bd      	mov	sp, r7
 800ee96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ee9a:	b004      	add	sp, #16
 800ee9c:	4770      	bx	lr
 800ee9e:	bf00      	nop
 800eea0:	200007cc 	.word	0x200007cc

0800eea4 <Tx_setup>:

void Tx_setup(){
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b086      	sub	sp, #24
 800eea8:	af02      	add	r7, sp, #8
    //NEED TO ADD COMMAND ERROR HANDLING
    HAL_GPIO_WritePin(NRESET_GPIO, NRESET, GPIO_PIN_SET);
 800eeaa:	4b66      	ldr	r3, [pc, #408]	; (800f044 <Tx_setup+0x1a0>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	4a66      	ldr	r2, [pc, #408]	; (800f048 <Tx_setup+0x1a4>)
 800eeb0:	8811      	ldrh	r1, [r2, #0]
 800eeb2:	2201      	movs	r2, #1
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	f7f8 fd97 	bl	80079e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 800eeba:	4b64      	ldr	r3, [pc, #400]	; (800f04c <Tx_setup+0x1a8>)
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	4a64      	ldr	r2, [pc, #400]	; (800f050 <Tx_setup+0x1ac>)
 800eec0:	8811      	ldrh	r1, [r2, #0]
 800eec2:	2200      	movs	r2, #0
 800eec4:	4618      	mov	r0, r3
 800eec6:	f7f8 fd8f 	bl	80079e8 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800eeca:	2032      	movs	r0, #50	; 0x32
 800eecc:	f7f8 f81e 	bl	8006f0c <HAL_Delay>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);             //make sure chip select is off
 800eed0:	4b5e      	ldr	r3, [pc, #376]	; (800f04c <Tx_setup+0x1a8>)
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	4a5e      	ldr	r2, [pc, #376]	; (800f050 <Tx_setup+0x1ac>)
 800eed6:	8811      	ldrh	r1, [r2, #0]
 800eed8:	2201      	movs	r2, #1
 800eeda:	4618      	mov	r0, r3
 800eedc:	f7f8 fd84 	bl	80079e8 <HAL_GPIO_WritePin>

    //set to standby for setup
    sx126x_set_standby(&hspi, 0);
 800eee0:	2100      	movs	r1, #0
 800eee2:	485c      	ldr	r0, [pc, #368]	; (800f054 <Tx_setup+0x1b0>)
 800eee4:	f000 f92e 	bl	800f144 <sx126x_set_standby>

    //set general parameters
    sx126x_set_rf_freq(&hspi, frequency);                       //set rf frequency
 800eee8:	4b5b      	ldr	r3, [pc, #364]	; (800f058 <Tx_setup+0x1b4>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	4619      	mov	r1, r3
 800eeee:	4859      	ldr	r0, [pc, #356]	; (800f054 <Tx_setup+0x1b0>)
 800eef0:	f000 fb96 	bl	800f620 <sx126x_set_rf_freq>
    sx126x_set_pkt_type(&hspi, packet_type);                    //set packet type
 800eef4:	4b59      	ldr	r3, [pc, #356]	; (800f05c <Tx_setup+0x1b8>)
 800eef6:	781b      	ldrb	r3, [r3, #0]
 800eef8:	4619      	mov	r1, r3
 800eefa:	4856      	ldr	r0, [pc, #344]	; (800f054 <Tx_setup+0x1b0>)
 800eefc:	f000 fbca 	bl	800f694 <sx126x_set_pkt_type>
    sx126x_set_rx_tx_fallback_mode(&hspi, fallback_mode);       //set rx tx fallback mode
 800ef00:	4b57      	ldr	r3, [pc, #348]	; (800f060 <Tx_setup+0x1bc>)
 800ef02:	781b      	ldrb	r3, [r3, #0]
 800ef04:	4619      	mov	r1, r3
 800ef06:	4853      	ldr	r0, [pc, #332]	; (800f054 <Tx_setup+0x1b0>)
 800ef08:	f000 fa1f 	bl	800f34a <sx126x_set_rx_tx_fallback_mode>
    sx126x_set_dio2_as_rf_sw_ctrl(&hspi, 1);                    //set dio2 as rf sw -> 1 is to activate it 0 would be to have it as regular irq
 800ef0c:	2101      	movs	r1, #1
 800ef0e:	4851      	ldr	r0, [pc, #324]	; (800f054 <Tx_setup+0x1b0>)
 800ef10:	f000 fb44 	bl	800f59c <sx126x_set_dio2_as_rf_sw_ctrl>
    sx126x_set_dio3_as_tcxo_ctrl(&hspi, tcxo_voltage_ctrl, 100);//set dio3 as tcxo ctrl, 100 is for the delay in ms
 800ef14:	4b53      	ldr	r3, [pc, #332]	; (800f064 <Tx_setup+0x1c0>)
 800ef16:	781b      	ldrb	r3, [r3, #0]
 800ef18:	2264      	movs	r2, #100	; 0x64
 800ef1a:	4619      	mov	r1, r3
 800ef1c:	484d      	ldr	r0, [pc, #308]	; (800f054 <Tx_setup+0x1b0>)
 800ef1e:	f000 fb57 	bl	800f5d0 <sx126x_set_dio3_as_tcxo_ctrl>

    //calibrate functions
    sx126x_cal(&hspi, cal_mask);                                //calibrate radio, mask chooses what to calibrate
 800ef22:	4b51      	ldr	r3, [pc, #324]	; (800f068 <Tx_setup+0x1c4>)
 800ef24:	781b      	ldrb	r3, [r3, #0]
 800ef26:	4619      	mov	r1, r3
 800ef28:	484a      	ldr	r0, [pc, #296]	; (800f054 <Tx_setup+0x1b0>)
 800ef2a:	f000 f9ab 	bl	800f284 <sx126x_cal>
    HAL_Delay(50);
 800ef2e:	2032      	movs	r0, #50	; 0x32
 800ef30:	f7f7 ffec 	bl	8006f0c <HAL_Delay>
    sx126x_set_reg_mode(&hspi, regulator_mode);                 //ldo or dc-dc
 800ef34:	4b4d      	ldr	r3, [pc, #308]	; (800f06c <Tx_setup+0x1c8>)
 800ef36:	781b      	ldrb	r3, [r3, #0]
 800ef38:	4619      	mov	r1, r3
 800ef3a:	4846      	ldr	r0, [pc, #280]	; (800f054 <Tx_setup+0x1b0>)
 800ef3c:	f000 f988 	bl	800f250 <sx126x_set_reg_mode>
    sx126x_cal_img_hex(&hspi, cal_low_freq, cal_hi_freq);       //image calibration frequencies
 800ef40:	4b4b      	ldr	r3, [pc, #300]	; (800f070 <Tx_setup+0x1cc>)
 800ef42:	781b      	ldrb	r3, [r3, #0]
 800ef44:	4a4b      	ldr	r2, [pc, #300]	; (800f074 <Tx_setup+0x1d0>)
 800ef46:	7812      	ldrb	r2, [r2, #0]
 800ef48:	4619      	mov	r1, r3
 800ef4a:	4842      	ldr	r0, [pc, #264]	; (800f054 <Tx_setup+0x1b0>)
 800ef4c:	f000 f9b4 	bl	800f2b8 <sx126x_cal_img_hex>

    //set pa config
    struct sx126x_pa_cfg_params_s *params = malloc(sizeof(sx126x_pa_cfg_params_t));
 800ef50:	2004      	movs	r0, #4
 800ef52:	f00a fed3 	bl	8019cfc <malloc>
 800ef56:	4603      	mov	r3, r0
 800ef58:	60fb      	str	r3, [r7, #12]
    params->pa_duty_cycle=pa_duty_cyc;
 800ef5a:	4b47      	ldr	r3, [pc, #284]	; (800f078 <Tx_setup+0x1d4>)
 800ef5c:	781a      	ldrb	r2, [r3, #0]
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	701a      	strb	r2, [r3, #0]
    params->hp_max=pa_hp_max;
 800ef62:	4b46      	ldr	r3, [pc, #280]	; (800f07c <Tx_setup+0x1d8>)
 800ef64:	781a      	ldrb	r2, [r3, #0]
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	705a      	strb	r2, [r3, #1]
    params->device_sel=pa_device_sel;
 800ef6a:	4b45      	ldr	r3, [pc, #276]	; (800f080 <Tx_setup+0x1dc>)
 800ef6c:	781a      	ldrb	r2, [r3, #0]
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	709a      	strb	r2, [r3, #2]
    params->pa_lut=pa_lut;
 800ef72:	4b44      	ldr	r3, [pc, #272]	; (800f084 <Tx_setup+0x1e0>)
 800ef74:	781a      	ldrb	r2, [r3, #0]
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	70da      	strb	r2, [r3, #3]
    sx126x_set_pa_cfg(&hspi, params);
 800ef7a:	68f9      	ldr	r1, [r7, #12]
 800ef7c:	4835      	ldr	r0, [pc, #212]	; (800f054 <Tx_setup+0x1b0>)
 800ef7e:	f000 f9bf 	bl	800f300 <sx126x_set_pa_cfg>
    free(params);
 800ef82:	68f8      	ldr	r0, [r7, #12]
 800ef84:	f00a fec2 	bl	8019d0c <free>

    //set transmission parameters
    sx126x_set_tx_params(&hspi, tx_power, ramp_time);
 800ef88:	4b3f      	ldr	r3, [pc, #252]	; (800f088 <Tx_setup+0x1e4>)
 800ef8a:	781b      	ldrb	r3, [r3, #0]
 800ef8c:	b25b      	sxtb	r3, r3
 800ef8e:	4a3f      	ldr	r2, [pc, #252]	; (800f08c <Tx_setup+0x1e8>)
 800ef90:	7812      	ldrb	r2, [r2, #0]
 800ef92:	4619      	mov	r1, r3
 800ef94:	482f      	ldr	r0, [pc, #188]	; (800f054 <Tx_setup+0x1b0>)
 800ef96:	f000 fb97 	bl	800f6c8 <sx126x_set_tx_params>
    sx126x_set_buffer_base_address(&hspi, tx_address_base, rx_address_base);
 800ef9a:	4b3d      	ldr	r3, [pc, #244]	; (800f090 <Tx_setup+0x1ec>)
 800ef9c:	781b      	ldrb	r3, [r3, #0]
 800ef9e:	4a3d      	ldr	r2, [pc, #244]	; (800f094 <Tx_setup+0x1f0>)
 800efa0:	7812      	ldrb	r2, [r2, #0]
 800efa2:	4619      	mov	r1, r3
 800efa4:	482b      	ldr	r0, [pc, #172]	; (800f054 <Tx_setup+0x1b0>)
 800efa6:	f000 fc4d 	bl	800f844 <sx126x_set_buffer_base_address>

    //set modulation parameters
    struct sx126x_mod_params_lora_s *mod_params = malloc(sizeof(sx126x_mod_params_lora_t));
 800efaa:	2004      	movs	r0, #4
 800efac:	f00a fea6 	bl	8019cfc <malloc>
 800efb0:	4603      	mov	r3, r0
 800efb2:	60bb      	str	r3, [r7, #8]
    mod_params->sf=lora_sf;
 800efb4:	4b38      	ldr	r3, [pc, #224]	; (800f098 <Tx_setup+0x1f4>)
 800efb6:	781a      	ldrb	r2, [r3, #0]
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	701a      	strb	r2, [r3, #0]
    mod_params->bw=lora_bw;
 800efbc:	4b37      	ldr	r3, [pc, #220]	; (800f09c <Tx_setup+0x1f8>)
 800efbe:	781a      	ldrb	r2, [r3, #0]
 800efc0:	68bb      	ldr	r3, [r7, #8]
 800efc2:	705a      	strb	r2, [r3, #1]
    mod_params->cr=lora_cr;
 800efc4:	4b36      	ldr	r3, [pc, #216]	; (800f0a0 <Tx_setup+0x1fc>)
 800efc6:	781a      	ldrb	r2, [r3, #0]
 800efc8:	68bb      	ldr	r3, [r7, #8]
 800efca:	709a      	strb	r2, [r3, #2]
    mod_params->ldro=lora_ldro;
 800efcc:	4b35      	ldr	r3, [pc, #212]	; (800f0a4 <Tx_setup+0x200>)
 800efce:	781a      	ldrb	r2, [r3, #0]
 800efd0:	68bb      	ldr	r3, [r7, #8]
 800efd2:	70da      	strb	r2, [r3, #3]
    sx126x_set_lora_mod_params(&hspi, mod_params);
 800efd4:	68b9      	ldr	r1, [r7, #8]
 800efd6:	481f      	ldr	r0, [pc, #124]	; (800f054 <Tx_setup+0x1b0>)
 800efd8:	f000 fb9a 	bl	800f710 <sx126x_set_lora_mod_params>
    free(mod_params);
 800efdc:	68b8      	ldr	r0, [r7, #8]
 800efde:	f00a fe95 	bl	8019d0c <free>

    //set lora packet params
    struct sx126x_pkt_params_lora_s *lora_params = malloc(sizeof(sx126x_pkt_params_lora_t));
 800efe2:	2006      	movs	r0, #6
 800efe4:	f00a fe8a 	bl	8019cfc <malloc>
 800efe8:	4603      	mov	r3, r0
 800efea:	607b      	str	r3, [r7, #4]
    lora_params->preamble_len_in_symb=pkt_preamble_len;
 800efec:	4b2e      	ldr	r3, [pc, #184]	; (800f0a8 <Tx_setup+0x204>)
 800efee:	881a      	ldrh	r2, [r3, #0]
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	801a      	strh	r2, [r3, #0]
    lora_params->header_type=header_type;
 800eff4:	4b2d      	ldr	r3, [pc, #180]	; (800f0ac <Tx_setup+0x208>)
 800eff6:	781a      	ldrb	r2, [r3, #0]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	709a      	strb	r2, [r3, #2]
    lora_params->pld_len_in_bytes=payload_len;
 800effc:	4b2c      	ldr	r3, [pc, #176]	; (800f0b0 <Tx_setup+0x20c>)
 800effe:	781a      	ldrb	r2, [r3, #0]
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	70da      	strb	r2, [r3, #3]
    lora_params->crc_is_on=crc_is_on;
 800f004:	4b2b      	ldr	r3, [pc, #172]	; (800f0b4 <Tx_setup+0x210>)
 800f006:	781a      	ldrb	r2, [r3, #0]
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	711a      	strb	r2, [r3, #4]
    lora_params->invert_iq_is_on=invert_iq_is_on;
 800f00c:	4b2a      	ldr	r3, [pc, #168]	; (800f0b8 <Tx_setup+0x214>)
 800f00e:	781a      	ldrb	r2, [r3, #0]
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	715a      	strb	r2, [r3, #5]
    sx126x_set_lora_pkt_params(&hspi, lora_params);
 800f014:	6879      	ldr	r1, [r7, #4]
 800f016:	480f      	ldr	r0, [pc, #60]	; (800f054 <Tx_setup+0x1b0>)
 800f018:	f000 fba6 	bl	800f768 <sx126x_set_lora_pkt_params>
    free(lora_params);
 800f01c:	6878      	ldr	r0, [r7, #4]
 800f01e:	f00a fe75 	bl	8019d0c <free>

    //set dio and irq parameters
    sx126x_set_dio_irq_params(&hspi, irq_mask, dio1_mask, dio2_mask, dio3_mask);
 800f022:	4b26      	ldr	r3, [pc, #152]	; (800f0bc <Tx_setup+0x218>)
 800f024:	8819      	ldrh	r1, [r3, #0]
 800f026:	4b26      	ldr	r3, [pc, #152]	; (800f0c0 <Tx_setup+0x21c>)
 800f028:	881a      	ldrh	r2, [r3, #0]
 800f02a:	4b26      	ldr	r3, [pc, #152]	; (800f0c4 <Tx_setup+0x220>)
 800f02c:	8818      	ldrh	r0, [r3, #0]
 800f02e:	4b26      	ldr	r3, [pc, #152]	; (800f0c8 <Tx_setup+0x224>)
 800f030:	881b      	ldrh	r3, [r3, #0]
 800f032:	9300      	str	r3, [sp, #0]
 800f034:	4603      	mov	r3, r0
 800f036:	4807      	ldr	r0, [pc, #28]	; (800f054 <Tx_setup+0x1b0>)
 800f038:	f000 fa13 	bl	800f462 <sx126x_set_dio_irq_params>

}
 800f03c:	bf00      	nop
 800f03e:	3710      	adds	r7, #16
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}
 800f044:	200007b8 	.word	0x200007b8
 800f048:	200007b4 	.word	0x200007b4
 800f04c:	200007b0 	.word	0x200007b0
 800f050:	200007ac 	.word	0x200007ac
 800f054:	200007cc 	.word	0x200007cc
 800f058:	20000024 	.word	0x20000024
 800f05c:	20000028 	.word	0x20000028
 800f060:	20000029 	.word	0x20000029
 800f064:	2000002a 	.word	0x2000002a
 800f068:	2000002c 	.word	0x2000002c
 800f06c:	2000002b 	.word	0x2000002b
 800f070:	2000002d 	.word	0x2000002d
 800f074:	2000002e 	.word	0x2000002e
 800f078:	2000002f 	.word	0x2000002f
 800f07c:	20000030 	.word	0x20000030
 800f080:	20000824 	.word	0x20000824
 800f084:	20000031 	.word	0x20000031
 800f088:	20000032 	.word	0x20000032
 800f08c:	20000033 	.word	0x20000033
 800f090:	20000825 	.word	0x20000825
 800f094:	20000826 	.word	0x20000826
 800f098:	20000034 	.word	0x20000034
 800f09c:	20000035 	.word	0x20000035
 800f0a0:	20000036 	.word	0x20000036
 800f0a4:	20000827 	.word	0x20000827
 800f0a8:	20000038 	.word	0x20000038
 800f0ac:	20000828 	.word	0x20000828
 800f0b0:	2000003a 	.word	0x2000003a
 800f0b4:	2000003b 	.word	0x2000003b
 800f0b8:	20000829 	.word	0x20000829
 800f0bc:	2000003c 	.word	0x2000003c
 800f0c0:	2000003e 	.word	0x2000003e
 800f0c4:	2000082a 	.word	0x2000082a
 800f0c8:	2000082c 	.word	0x2000082c

0800f0cc <TxProtocol>:

void TxProtocol(uint8_t data[], uint8_t data_length){
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b084      	sub	sp, #16
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
 800f0d4:	460b      	mov	r3, r1
 800f0d6:	70fb      	strb	r3, [r7, #3]

    HAL_StatusTypeDef command_status;
    command_status = sx126x_clear_irq_status(&hspi, dio1_mask);
 800f0d8:	4b18      	ldr	r3, [pc, #96]	; (800f13c <TxProtocol+0x70>)
 800f0da:	881b      	ldrh	r3, [r3, #0]
 800f0dc:	4619      	mov	r1, r3
 800f0de:	4818      	ldr	r0, [pc, #96]	; (800f140 <TxProtocol+0x74>)
 800f0e0:	f000 fa36 	bl	800f550 <sx126x_clear_irq_status>
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	73fb      	strb	r3, [r7, #15]
    command_status = sx126x_write_buffer(&hspi, 0, data, data_length); // 0 is the offset
 800f0e8:	78fb      	ldrb	r3, [r7, #3]
 800f0ea:	687a      	ldr	r2, [r7, #4]
 800f0ec:	2100      	movs	r1, #0
 800f0ee:	4814      	ldr	r0, [pc, #80]	; (800f140 <TxProtocol+0x74>)
 800f0f0:	f000 f998 	bl	800f424 <sx126x_write_buffer>
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	73fb      	strb	r3, [r7, #15]
    command_status = sx126x_set_tx(&hspi, 6000, data_length);
 800f0f8:	78fb      	ldrb	r3, [r7, #3]
 800f0fa:	461a      	mov	r2, r3
 800f0fc:	f241 7170 	movw	r1, #6000	; 0x1770
 800f100:	480f      	ldr	r0, [pc, #60]	; (800f140 <TxProtocol+0x74>)
 800f102:	f000 f839 	bl	800f178 <sx126x_set_tx>
 800f106:	4603      	mov	r3, r0
 800f108:	73fb      	strb	r3, [r7, #15]
    osDelay(100);
 800f10a:	2064      	movs	r0, #100	; 0x64
 800f10c:	f005 fd7b 	bl	8014c06 <osDelay>

    sx126x_irq_mask_t irq;
    do {
        command_status = sx126x_get_irq_status(&hspi, &irq); //reading the irq into irq
 800f110:	f107 030c 	add.w	r3, r7, #12
 800f114:	4619      	mov	r1, r3
 800f116:	480a      	ldr	r0, [pc, #40]	; (800f140 <TxProtocol+0x74>)
 800f118:	f000 f9e8 	bl	800f4ec <sx126x_get_irq_status>
 800f11c:	4603      	mov	r3, r0
 800f11e:	73fb      	strb	r3, [r7, #15]
    } while ( (!(irq & SX126X_IRQ_TX_DONE)) && (!(irq & SX126X_IRQ_TIMEOUT)) );
 800f120:	89bb      	ldrh	r3, [r7, #12]
 800f122:	f003 0301 	and.w	r3, r3, #1
 800f126:	2b00      	cmp	r3, #0
 800f128:	d104      	bne.n	800f134 <TxProtocol+0x68>
 800f12a:	89bb      	ldrh	r3, [r7, #12]
 800f12c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f130:	2b00      	cmp	r3, #0
 800f132:	d0ed      	beq.n	800f110 <TxProtocol+0x44>
}
 800f134:	bf00      	nop
 800f136:	3710      	adds	r7, #16
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd80      	pop	{r7, pc}
 800f13c:	2000003e 	.word	0x2000003e
 800f140:	200007cc 	.word	0x200007cc

0800f144 <sx126x_set_standby>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_SLEEP, 0, 0 );
}

sx126x_status_t sx126x_set_standby( const void* context, const sx126x_standby_cfg_t cfg )
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b086      	sub	sp, #24
 800f148:	af02      	add	r7, sp, #8
 800f14a:	6078      	str	r0, [r7, #4]
 800f14c:	460b      	mov	r3, r1
 800f14e:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_STANDBY] = { 0 };
 800f150:	2300      	movs	r3, #0
 800f152:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_STANDBY;
 800f154:	2380      	movs	r3, #128	; 0x80
 800f156:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) cfg;
 800f158:	78fb      	ldrb	r3, [r7, #3]
 800f15a:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_STANDBY, 0, 0 );
 800f15c:	f107 010c 	add.w	r1, r7, #12
 800f160:	2300      	movs	r3, #0
 800f162:	9300      	str	r3, [sp, #0]
 800f164:	2300      	movs	r3, #0
 800f166:	2202      	movs	r2, #2
 800f168:	6878      	ldr	r0, [r7, #4]
 800f16a:	f7ff fd9b 	bl	800eca4 <sx126x_hal_write>
 800f16e:	4603      	mov	r3, r0
}
 800f170:	4618      	mov	r0, r3
 800f172:	3710      	adds	r7, #16
 800f174:	46bd      	mov	sp, r7
 800f176:	bd80      	pop	{r7, pc}

0800f178 <sx126x_set_tx>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_FS, 0, 0 );
}

sx126x_status_t sx126x_set_tx( const void* context, const uint32_t timeout_in_ms , uint8_t lora_data_length)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b086      	sub	sp, #24
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	60f8      	str	r0, [r7, #12]
 800f180:	60b9      	str	r1, [r7, #8]
 800f182:	4613      	mov	r3, r2
 800f184:	71fb      	strb	r3, [r7, #7]
    if (packet_type == SX126X_PKT_TYPE_LORA) {
 800f186:	4b1b      	ldr	r3, [pc, #108]	; (800f1f4 <sx126x_set_tx+0x7c>)
 800f188:	781b      	ldrb	r3, [r3, #0]
 800f18a:	2b01      	cmp	r3, #1
 800f18c:	d11e      	bne.n	800f1cc <sx126x_set_tx+0x54>
        struct sx126x_pkt_params_lora_s *lora_params = malloc(sizeof(sx126x_pkt_params_lora_t));
 800f18e:	2006      	movs	r0, #6
 800f190:	f00a fdb4 	bl	8019cfc <malloc>
 800f194:	4603      	mov	r3, r0
 800f196:	617b      	str	r3, [r7, #20]
        lora_params->preamble_len_in_symb=pkt_preamble_len;
 800f198:	4b17      	ldr	r3, [pc, #92]	; (800f1f8 <sx126x_set_tx+0x80>)
 800f19a:	881a      	ldrh	r2, [r3, #0]
 800f19c:	697b      	ldr	r3, [r7, #20]
 800f19e:	801a      	strh	r2, [r3, #0]
        lora_params->header_type=header_type;
 800f1a0:	4b16      	ldr	r3, [pc, #88]	; (800f1fc <sx126x_set_tx+0x84>)
 800f1a2:	781a      	ldrb	r2, [r3, #0]
 800f1a4:	697b      	ldr	r3, [r7, #20]
 800f1a6:	709a      	strb	r2, [r3, #2]
        lora_params->pld_len_in_bytes=lora_data_length;
 800f1a8:	697b      	ldr	r3, [r7, #20]
 800f1aa:	79fa      	ldrb	r2, [r7, #7]
 800f1ac:	70da      	strb	r2, [r3, #3]
        lora_params->crc_is_on=crc_is_on;
 800f1ae:	4b14      	ldr	r3, [pc, #80]	; (800f200 <sx126x_set_tx+0x88>)
 800f1b0:	781a      	ldrb	r2, [r3, #0]
 800f1b2:	697b      	ldr	r3, [r7, #20]
 800f1b4:	711a      	strb	r2, [r3, #4]
        lora_params->invert_iq_is_on=invert_iq_is_on;
 800f1b6:	4b13      	ldr	r3, [pc, #76]	; (800f204 <sx126x_set_tx+0x8c>)
 800f1b8:	781a      	ldrb	r2, [r3, #0]
 800f1ba:	697b      	ldr	r3, [r7, #20]
 800f1bc:	715a      	strb	r2, [r3, #5]
        sx126x_set_lora_pkt_params(&hspi, lora_params);
 800f1be:	6979      	ldr	r1, [r7, #20]
 800f1c0:	4811      	ldr	r0, [pc, #68]	; (800f208 <sx126x_set_tx+0x90>)
 800f1c2:	f000 fad1 	bl	800f768 <sx126x_set_lora_pkt_params>
        free(lora_params);
 800f1c6:	6978      	ldr	r0, [r7, #20]
 800f1c8:	f00a fda0 	bl	8019d0c <free>
    }

    if( timeout_in_ms > SX126X_MAX_TIMEOUT_IN_MS )
 800f1cc:	68bb      	ldr	r3, [r7, #8]
 800f1ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f1d2:	d301      	bcc.n	800f1d8 <sx126x_set_tx+0x60>
    {
        return SX126X_STATUS_UNKNOWN_VALUE;
 800f1d4:	2302      	movs	r3, #2
 800f1d6:	e008      	b.n	800f1ea <sx126x_set_tx+0x72>
    }

    const uint32_t timeout_in_rtc_step = sx126x_convert_timeout_in_ms_to_rtc_step( timeout_in_ms );
 800f1d8:	68b8      	ldr	r0, [r7, #8]
 800f1da:	f000 fb7d 	bl	800f8d8 <sx126x_convert_timeout_in_ms_to_rtc_step>
 800f1de:	6138      	str	r0, [r7, #16]

    return sx126x_set_tx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
 800f1e0:	6939      	ldr	r1, [r7, #16]
 800f1e2:	68f8      	ldr	r0, [r7, #12]
 800f1e4:	f000 f812 	bl	800f20c <sx126x_set_tx_with_timeout_in_rtc_step>
 800f1e8:	4603      	mov	r3, r0
}
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	3718      	adds	r7, #24
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	bd80      	pop	{r7, pc}
 800f1f2:	bf00      	nop
 800f1f4:	20000028 	.word	0x20000028
 800f1f8:	20000038 	.word	0x20000038
 800f1fc:	20000828 	.word	0x20000828
 800f200:	2000003b 	.word	0x2000003b
 800f204:	20000829 	.word	0x20000829
 800f208:	200007cc 	.word	0x200007cc

0800f20c <sx126x_set_tx_with_timeout_in_rtc_step>:

sx126x_status_t sx126x_set_tx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout_in_rtc_step )
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b086      	sub	sp, #24
 800f210:	af02      	add	r7, sp, #8
 800f212:	6078      	str	r0, [r7, #4]
 800f214:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_TX] = { 0 };
 800f216:	2300      	movs	r3, #0
 800f218:	60fb      	str	r3, [r7, #12]

    buf[0] = SX126X_SET_TX;
 800f21a:	2383      	movs	r3, #131	; 0x83
 800f21c:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t )( timeout_in_rtc_step >> 16 );
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	0c1b      	lsrs	r3, r3, #16
 800f222:	b2db      	uxtb	r3, r3
 800f224:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout_in_rtc_step >> 8 );
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	0a1b      	lsrs	r3, r3, #8
 800f22a:	b2db      	uxtb	r3, r3
 800f22c:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout_in_rtc_step >> 0 );
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	b2db      	uxtb	r3, r3
 800f232:	73fb      	strb	r3, [r7, #15]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX, 0, 0 );
 800f234:	f107 010c 	add.w	r1, r7, #12
 800f238:	2300      	movs	r3, #0
 800f23a:	9300      	str	r3, [sp, #0]
 800f23c:	2300      	movs	r3, #0
 800f23e:	2204      	movs	r2, #4
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f7ff fd2f 	bl	800eca4 <sx126x_hal_write>
 800f246:	4603      	mov	r3, r0
}
 800f248:	4618      	mov	r0, r3
 800f24a:	3710      	adds	r7, #16
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}

0800f250 <sx126x_set_reg_mode>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_INFINITE_PREAMBLE, 0, 0 );
}

sx126x_status_t sx126x_set_reg_mode( const void* context, const sx126x_reg_mod_t mode )
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b086      	sub	sp, #24
 800f254:	af02      	add	r7, sp, #8
 800f256:	6078      	str	r0, [r7, #4]
 800f258:	460b      	mov	r3, r1
 800f25a:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_REGULATOR_MODE] = { 0 };
 800f25c:	2300      	movs	r3, #0
 800f25e:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_REGULATOR_MODE;
 800f260:	2396      	movs	r3, #150	; 0x96
 800f262:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) mode;
 800f264:	78fb      	ldrb	r3, [r7, #3]
 800f266:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_REGULATOR_MODE, 0, 0 );
 800f268:	f107 010c 	add.w	r1, r7, #12
 800f26c:	2300      	movs	r3, #0
 800f26e:	9300      	str	r3, [sp, #0]
 800f270:	2300      	movs	r3, #0
 800f272:	2202      	movs	r2, #2
 800f274:	6878      	ldr	r0, [r7, #4]
 800f276:	f7ff fd15 	bl	800eca4 <sx126x_hal_write>
 800f27a:	4603      	mov	r3, r0
}
 800f27c:	4618      	mov	r0, r3
 800f27e:	3710      	adds	r7, #16
 800f280:	46bd      	mov	sp, r7
 800f282:	bd80      	pop	{r7, pc}

0800f284 <sx126x_cal>:

sx126x_status_t sx126x_cal( const void* context, const sx126x_cal_mask_t param )
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b086      	sub	sp, #24
 800f288:	af02      	add	r7, sp, #8
 800f28a:	6078      	str	r0, [r7, #4]
 800f28c:	460b      	mov	r3, r1
 800f28e:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_CALIBRATE] = { 0 };
 800f290:	2300      	movs	r3, #0
 800f292:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_CALIBRATE;
 800f294:	2389      	movs	r3, #137	; 0x89
 800f296:	733b      	strb	r3, [r7, #12]

    buf[1] = param;
 800f298:	78fb      	ldrb	r3, [r7, #3]
 800f29a:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE, 0, 0 );
 800f29c:	f107 010c 	add.w	r1, r7, #12
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	9300      	str	r3, [sp, #0]
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	2202      	movs	r2, #2
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f7ff fcfb 	bl	800eca4 <sx126x_hal_write>
 800f2ae:	4603      	mov	r3, r0
}
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	3710      	adds	r7, #16
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	bd80      	pop	{r7, pc}

0800f2b8 <sx126x_cal_img_hex>:

sx126x_status_t sx126x_cal_img_hex( const void* context, const uint8_t low_freq, const uint8_t high_freq)
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b086      	sub	sp, #24
 800f2bc:	af02      	add	r7, sp, #8
 800f2be:	6078      	str	r0, [r7, #4]
 800f2c0:	460b      	mov	r3, r1
 800f2c2:	70fb      	strb	r3, [r7, #3]
 800f2c4:	4613      	mov	r3, r2
 800f2c6:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_CALIBRATE_IMAGE] = { 0 };
 800f2c8:	4b0c      	ldr	r3, [pc, #48]	; (800f2fc <sx126x_cal_img_hex+0x44>)
 800f2ca:	881b      	ldrh	r3, [r3, #0]
 800f2cc:	81bb      	strh	r3, [r7, #12]
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_CALIBRATE_IMAGE;
 800f2d2:	2398      	movs	r3, #152	; 0x98
 800f2d4:	733b      	strb	r3, [r7, #12]
    buf[1] = low_freq;
 800f2d6:	78fb      	ldrb	r3, [r7, #3]
 800f2d8:	737b      	strb	r3, [r7, #13]
    buf[2] = high_freq;
 800f2da:	78bb      	ldrb	r3, [r7, #2]
 800f2dc:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
 800f2de:	f107 010c 	add.w	r1, r7, #12
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	9300      	str	r3, [sp, #0]
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	2203      	movs	r2, #3
 800f2ea:	6878      	ldr	r0, [r7, #4]
 800f2ec:	f7ff fcda 	bl	800eca4 <sx126x_hal_write>
 800f2f0:	4603      	mov	r3, r0
}
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	3710      	adds	r7, #16
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bd80      	pop	{r7, pc}
 800f2fa:	bf00      	nop
 800f2fc:	08020a38 	.word	0x08020a38

0800f300 <sx126x_set_pa_cfg>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
}

sx126x_status_t sx126x_set_pa_cfg( const void* context, const sx126x_pa_cfg_params_t* params )
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b086      	sub	sp, #24
 800f304:	af02      	add	r7, sp, #8
 800f306:	6078      	str	r0, [r7, #4]
 800f308:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_PA_CFG] = { 0 };
 800f30a:	2300      	movs	r3, #0
 800f30c:	60bb      	str	r3, [r7, #8]
 800f30e:	2300      	movs	r3, #0
 800f310:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_PA_CFG;
 800f312:	2395      	movs	r3, #149	; 0x95
 800f314:	723b      	strb	r3, [r7, #8]
    buf[1] = params->pa_duty_cycle;
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	781b      	ldrb	r3, [r3, #0]
 800f31a:	727b      	strb	r3, [r7, #9]
    buf[2] = params->hp_max;
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	785b      	ldrb	r3, [r3, #1]
 800f320:	72bb      	strb	r3, [r7, #10]
    buf[3] = params->device_sel;
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	789b      	ldrb	r3, [r3, #2]
 800f326:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->pa_lut;
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	78db      	ldrb	r3, [r3, #3]
 800f32c:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PA_CFG, 0, 0 );
 800f32e:	f107 0108 	add.w	r1, r7, #8
 800f332:	2300      	movs	r3, #0
 800f334:	9300      	str	r3, [sp, #0]
 800f336:	2300      	movs	r3, #0
 800f338:	2205      	movs	r2, #5
 800f33a:	6878      	ldr	r0, [r7, #4]
 800f33c:	f7ff fcb2 	bl	800eca4 <sx126x_hal_write>
 800f340:	4603      	mov	r3, r0
}
 800f342:	4618      	mov	r0, r3
 800f344:	3710      	adds	r7, #16
 800f346:	46bd      	mov	sp, r7
 800f348:	bd80      	pop	{r7, pc}

0800f34a <sx126x_set_rx_tx_fallback_mode>:

sx126x_status_t sx126x_set_rx_tx_fallback_mode( const void* context, const sx126x_fallback_modes_t fallback_mode )
{
 800f34a:	b580      	push	{r7, lr}
 800f34c:	b086      	sub	sp, #24
 800f34e:	af02      	add	r7, sp, #8
 800f350:	6078      	str	r0, [r7, #4]
 800f352:	460b      	mov	r3, r1
 800f354:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_RX_TX_FALLBACK_MODE] = { 0 };
 800f356:	2300      	movs	r3, #0
 800f358:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_RX_TX_FALLBACK_MODE;
 800f35a:	2393      	movs	r3, #147	; 0x93
 800f35c:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) fallback_mode;
 800f35e:	78fb      	ldrb	r3, [r7, #3]
 800f360:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RX_TX_FALLBACK_MODE, 0, 0 );
 800f362:	f107 010c 	add.w	r1, r7, #12
 800f366:	2300      	movs	r3, #0
 800f368:	9300      	str	r3, [sp, #0]
 800f36a:	2300      	movs	r3, #0
 800f36c:	2202      	movs	r2, #2
 800f36e:	6878      	ldr	r0, [r7, #4]
 800f370:	f7ff fc98 	bl	800eca4 <sx126x_hal_write>
 800f374:	4603      	mov	r3, r0
}
 800f376:	4618      	mov	r0, r3
 800f378:	3710      	adds	r7, #16
 800f37a:	46bd      	mov	sp, r7
 800f37c:	bd80      	pop	{r7, pc}
	...

0800f380 <sx126x_write_register>:
// Registers and buffer Access
//

sx126x_status_t sx126x_write_register( const void* context, const uint16_t address, const uint8_t* buffer,
                                       const uint8_t size )
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b088      	sub	sp, #32
 800f384:	af02      	add	r7, sp, #8
 800f386:	60f8      	str	r0, [r7, #12]
 800f388:	607a      	str	r2, [r7, #4]
 800f38a:	461a      	mov	r2, r3
 800f38c:	460b      	mov	r3, r1
 800f38e:	817b      	strh	r3, [r7, #10]
 800f390:	4613      	mov	r3, r2
 800f392:	727b      	strb	r3, [r7, #9]
    uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = { 0 };
 800f394:	4b0e      	ldr	r3, [pc, #56]	; (800f3d0 <sx126x_write_register+0x50>)
 800f396:	881b      	ldrh	r3, [r3, #0]
 800f398:	82bb      	strh	r3, [r7, #20]
 800f39a:	2300      	movs	r3, #0
 800f39c:	75bb      	strb	r3, [r7, #22]

    buf[0] = SX126X_WRITE_REGISTER;
 800f39e:	230d      	movs	r3, #13
 800f3a0:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( address >> 8 );
 800f3a2:	897b      	ldrh	r3, [r7, #10]
 800f3a4:	0a1b      	lsrs	r3, r3, #8
 800f3a6:	b29b      	uxth	r3, r3
 800f3a8:	b2db      	uxtb	r3, r3
 800f3aa:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( address >> 0 );
 800f3ac:	897b      	ldrh	r3, [r7, #10]
 800f3ae:	b2db      	uxtb	r3, r3
 800f3b0:	75bb      	strb	r3, [r7, #22]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_REGISTER, buffer, size );
 800f3b2:	7a7b      	ldrb	r3, [r7, #9]
 800f3b4:	b29b      	uxth	r3, r3
 800f3b6:	f107 0114 	add.w	r1, r7, #20
 800f3ba:	9300      	str	r3, [sp, #0]
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	2203      	movs	r2, #3
 800f3c0:	68f8      	ldr	r0, [r7, #12]
 800f3c2:	f7ff fc6f 	bl	800eca4 <sx126x_hal_write>
 800f3c6:	4603      	mov	r3, r0
}
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	3718      	adds	r7, #24
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	bd80      	pop	{r7, pc}
 800f3d0:	08020a38 	.word	0x08020a38

0800f3d4 <sx126x_read_register>:

sx126x_status_t sx126x_read_register( const void* context, const uint16_t address, uint8_t* buffer, const uint8_t size )
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b088      	sub	sp, #32
 800f3d8:	af02      	add	r7, sp, #8
 800f3da:	60f8      	str	r0, [r7, #12]
 800f3dc:	607a      	str	r2, [r7, #4]
 800f3de:	461a      	mov	r2, r3
 800f3e0:	460b      	mov	r3, r1
 800f3e2:	817b      	strh	r3, [r7, #10]
 800f3e4:	4613      	mov	r3, r2
 800f3e6:	727b      	strb	r3, [r7, #9]
    uint8_t         buf[SX126X_SIZE_READ_REGISTER] = { 0 };
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	613b      	str	r3, [r7, #16]
    sx126x_status_t status                         = SX126X_STATUS_ERROR;
 800f3ec:	2303      	movs	r3, #3
 800f3ee:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_READ_REGISTER;
 800f3f0:	231d      	movs	r3, #29
 800f3f2:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( address >> 8 );
 800f3f4:	897b      	ldrh	r3, [r7, #10]
 800f3f6:	0a1b      	lsrs	r3, r3, #8
 800f3f8:	b29b      	uxth	r3, r3
 800f3fa:	b2db      	uxtb	r3, r3
 800f3fc:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( address >> 0 );
 800f3fe:	897b      	ldrh	r3, [r7, #10]
 800f400:	b2db      	uxtb	r3, r3
 800f402:	74bb      	strb	r3, [r7, #18]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_READ_REGISTER, buffer, size );
 800f404:	f107 0110 	add.w	r1, r7, #16
 800f408:	7a7b      	ldrb	r3, [r7, #9]
 800f40a:	9300      	str	r3, [sp, #0]
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	2204      	movs	r2, #4
 800f410:	68f8      	ldr	r0, [r7, #12]
 800f412:	f7ff fc89 	bl	800ed28 <sx126x_hal_read>
 800f416:	4603      	mov	r3, r0
 800f418:	75fb      	strb	r3, [r7, #23]

    return status;
 800f41a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f41c:	4618      	mov	r0, r3
 800f41e:	3718      	adds	r7, #24
 800f420:	46bd      	mov	sp, r7
 800f422:	bd80      	pop	{r7, pc}

0800f424 <sx126x_write_buffer>:

sx126x_status_t sx126x_write_buffer( const void* context, const uint8_t buffer_offset, const uint8_t* buffer,
                                     const uint8_t size )
{
 800f424:	b580      	push	{r7, lr}
 800f426:	b088      	sub	sp, #32
 800f428:	af02      	add	r7, sp, #8
 800f42a:	60f8      	str	r0, [r7, #12]
 800f42c:	607a      	str	r2, [r7, #4]
 800f42e:	461a      	mov	r2, r3
 800f430:	460b      	mov	r3, r1
 800f432:	72fb      	strb	r3, [r7, #11]
 800f434:	4613      	mov	r3, r2
 800f436:	72bb      	strb	r3, [r7, #10]
    uint8_t buf[SX126X_SIZE_WRITE_BUFFER] = { 0 };
 800f438:	2300      	movs	r3, #0
 800f43a:	82bb      	strh	r3, [r7, #20]

    buf[0] = SX126X_WRITE_BUFFER;
 800f43c:	230e      	movs	r3, #14
 800f43e:	753b      	strb	r3, [r7, #20]

    buf[1] = buffer_offset;
 800f440:	7afb      	ldrb	r3, [r7, #11]
 800f442:	757b      	strb	r3, [r7, #21]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_BUFFER, buffer, size );
 800f444:	7abb      	ldrb	r3, [r7, #10]
 800f446:	b29b      	uxth	r3, r3
 800f448:	f107 0114 	add.w	r1, r7, #20
 800f44c:	9300      	str	r3, [sp, #0]
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	2202      	movs	r2, #2
 800f452:	68f8      	ldr	r0, [r7, #12]
 800f454:	f7ff fc26 	bl	800eca4 <sx126x_hal_write>
 800f458:	4603      	mov	r3, r0
}
 800f45a:	4618      	mov	r0, r3
 800f45c:	3718      	adds	r7, #24
 800f45e:	46bd      	mov	sp, r7
 800f460:	bd80      	pop	{r7, pc}

0800f462 <sx126x_set_dio_irq_params>:
//
// DIO and IRQ Control Functions
//
sx126x_status_t sx126x_set_dio_irq_params( const void* context, const uint16_t irq_mask, const uint16_t dio1_mask,
                                           const uint16_t dio2_mask, const uint16_t dio3_mask )
{
 800f462:	b580      	push	{r7, lr}
 800f464:	b08a      	sub	sp, #40	; 0x28
 800f466:	af02      	add	r7, sp, #8
 800f468:	60f8      	str	r0, [r7, #12]
 800f46a:	4608      	mov	r0, r1
 800f46c:	4611      	mov	r1, r2
 800f46e:	461a      	mov	r2, r3
 800f470:	4603      	mov	r3, r0
 800f472:	817b      	strh	r3, [r7, #10]
 800f474:	460b      	mov	r3, r1
 800f476:	813b      	strh	r3, [r7, #8]
 800f478:	4613      	mov	r3, r2
 800f47a:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = { 0 };
 800f47c:	2300      	movs	r3, #0
 800f47e:	617b      	str	r3, [r7, #20]
 800f480:	f107 0318 	add.w	r3, r7, #24
 800f484:	2200      	movs	r2, #0
 800f486:	601a      	str	r2, [r3, #0]
 800f488:	711a      	strb	r2, [r3, #4]

    buf[0] = SX126X_SET_DIO_IRQ_PARAMS;
 800f48a:	2308      	movs	r3, #8
 800f48c:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( irq_mask >> 8 );
 800f48e:	897b      	ldrh	r3, [r7, #10]
 800f490:	0a1b      	lsrs	r3, r3, #8
 800f492:	b29b      	uxth	r3, r3
 800f494:	b2db      	uxtb	r3, r3
 800f496:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( irq_mask >> 0 );
 800f498:	897b      	ldrh	r3, [r7, #10]
 800f49a:	b2db      	uxtb	r3, r3
 800f49c:	75bb      	strb	r3, [r7, #22]

    buf[3] = ( uint8_t )( dio1_mask >> 8 );
 800f49e:	893b      	ldrh	r3, [r7, #8]
 800f4a0:	0a1b      	lsrs	r3, r3, #8
 800f4a2:	b29b      	uxth	r3, r3
 800f4a4:	b2db      	uxtb	r3, r3
 800f4a6:	75fb      	strb	r3, [r7, #23]
    buf[4] = ( uint8_t )( dio1_mask >> 0 );
 800f4a8:	893b      	ldrh	r3, [r7, #8]
 800f4aa:	b2db      	uxtb	r3, r3
 800f4ac:	763b      	strb	r3, [r7, #24]

    buf[5] = ( uint8_t )( dio2_mask >> 8 );
 800f4ae:	88fb      	ldrh	r3, [r7, #6]
 800f4b0:	0a1b      	lsrs	r3, r3, #8
 800f4b2:	b29b      	uxth	r3, r3
 800f4b4:	b2db      	uxtb	r3, r3
 800f4b6:	767b      	strb	r3, [r7, #25]
    buf[6] = ( uint8_t )( dio2_mask >> 0 );
 800f4b8:	88fb      	ldrh	r3, [r7, #6]
 800f4ba:	b2db      	uxtb	r3, r3
 800f4bc:	76bb      	strb	r3, [r7, #26]

    buf[7] = ( uint8_t )( dio3_mask >> 8 );
 800f4be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f4c0:	0a1b      	lsrs	r3, r3, #8
 800f4c2:	b29b      	uxth	r3, r3
 800f4c4:	b2db      	uxtb	r3, r3
 800f4c6:	76fb      	strb	r3, [r7, #27]
    buf[8] = ( uint8_t )( dio3_mask >> 0 );
 800f4c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f4ca:	b2db      	uxtb	r3, r3
 800f4cc:	773b      	strb	r3, [r7, #28]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO_IRQ_PARAMS, 0, 0 );
 800f4ce:	f107 0114 	add.w	r1, r7, #20
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	9300      	str	r3, [sp, #0]
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	2209      	movs	r2, #9
 800f4da:	68f8      	ldr	r0, [r7, #12]
 800f4dc:	f7ff fbe2 	bl	800eca4 <sx126x_hal_write>
 800f4e0:	4603      	mov	r3, r0
}
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	3720      	adds	r7, #32
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	bd80      	pop	{r7, pc}
	...

0800f4ec <sx126x_get_irq_status>:

sx126x_status_t sx126x_get_irq_status( const void* context, sx126x_irq_mask_t* irq )
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b088      	sub	sp, #32
 800f4f0:	af02      	add	r7, sp, #8
 800f4f2:	6078      	str	r0, [r7, #4]
 800f4f4:	6039      	str	r1, [r7, #0]
    uint8_t         buf[SX126X_SIZE_GET_IRQ_STATUS]             = { 0x00 }; //0x00 is no operational, its just so that theyre equal
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	613b      	str	r3, [r7, #16]
    uint8_t         received_buf[sizeof( sx126x_irq_mask_t )+1] = { 0x00 };
 800f4fa:	4b14      	ldr	r3, [pc, #80]	; (800f54c <sx126x_get_irq_status+0x60>)
 800f4fc:	881b      	ldrh	r3, [r3, #0]
 800f4fe:	81bb      	strh	r3, [r7, #12]
 800f500:	2300      	movs	r3, #0
 800f502:	73bb      	strb	r3, [r7, #14]
    sx126x_status_t status                                      = SX126X_STATUS_ERROR;
 800f504:	2303      	movs	r3, #3
 800f506:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_GET_IRQ_STATUS;
 800f508:	2312      	movs	r3, #18
 800f50a:	743b      	strb	r3, [r7, #16]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_GET_IRQ_STATUS, received_buf,
 800f50c:	f107 030c 	add.w	r3, r7, #12
 800f510:	f107 0110 	add.w	r1, r7, #16
 800f514:	2201      	movs	r2, #1
 800f516:	9200      	str	r2, [sp, #0]
 800f518:	2204      	movs	r2, #4
 800f51a:	6878      	ldr	r0, [r7, #4]
 800f51c:	f7ff fc04 	bl	800ed28 <sx126x_hal_read>
 800f520:	4603      	mov	r3, r0
 800f522:	75fb      	strb	r3, [r7, #23]
                                                  SX126X_OFFSET_GET_IRQ_STATUS );

    if( status == SX126X_STATUS_OK )
 800f524:	7dfb      	ldrb	r3, [r7, #23]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d10b      	bne.n	800f542 <sx126x_get_irq_status+0x56>
    {
        *irq = ( ( sx126x_irq_mask_t ) received_buf[1] << 8 ) | ( ( sx126x_irq_mask_t ) received_buf[2] << 0 );
 800f52a:	7b7b      	ldrb	r3, [r7, #13]
 800f52c:	021b      	lsls	r3, r3, #8
 800f52e:	b21a      	sxth	r2, r3
 800f530:	7bbb      	ldrb	r3, [r7, #14]
 800f532:	b21b      	sxth	r3, r3
 800f534:	4313      	orrs	r3, r2
 800f536:	b21b      	sxth	r3, r3
 800f538:	b29a      	uxth	r2, r3
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	801a      	strh	r2, [r3, #0]
        status = received_buf[0]; //its the status
 800f53e:	7b3b      	ldrb	r3, [r7, #12]
 800f540:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 800f542:	7dfb      	ldrb	r3, [r7, #23]
}
 800f544:	4618      	mov	r0, r3
 800f546:	3718      	adds	r7, #24
 800f548:	46bd      	mov	sp, r7
 800f54a:	bd80      	pop	{r7, pc}
 800f54c:	08020a38 	.word	0x08020a38

0800f550 <sx126x_clear_irq_status>:

sx126x_status_t sx126x_clear_irq_status( const void* context, const sx126x_irq_mask_t irq_mask )
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b086      	sub	sp, #24
 800f554:	af02      	add	r7, sp, #8
 800f556:	6078      	str	r0, [r7, #4]
 800f558:	460b      	mov	r3, r1
 800f55a:	807b      	strh	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_CLR_IRQ_STATUS] = { 0 };
 800f55c:	4b0e      	ldr	r3, [pc, #56]	; (800f598 <sx126x_clear_irq_status+0x48>)
 800f55e:	881b      	ldrh	r3, [r3, #0]
 800f560:	81bb      	strh	r3, [r7, #12]
 800f562:	2300      	movs	r3, #0
 800f564:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_CLR_IRQ_STATUS;
 800f566:	2302      	movs	r3, #2
 800f568:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t )( irq_mask >> 8 );
 800f56a:	887b      	ldrh	r3, [r7, #2]
 800f56c:	0a1b      	lsrs	r3, r3, #8
 800f56e:	b29b      	uxth	r3, r3
 800f570:	b2db      	uxtb	r3, r3
 800f572:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( irq_mask >> 0 );
 800f574:	887b      	ldrh	r3, [r7, #2]
 800f576:	b2db      	uxtb	r3, r3
 800f578:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CLR_IRQ_STATUS, 0, 0 );
 800f57a:	f107 010c 	add.w	r1, r7, #12
 800f57e:	2300      	movs	r3, #0
 800f580:	9300      	str	r3, [sp, #0]
 800f582:	2300      	movs	r3, #0
 800f584:	2203      	movs	r2, #3
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	f7ff fb8c 	bl	800eca4 <sx126x_hal_write>
 800f58c:	4603      	mov	r3, r0
}
 800f58e:	4618      	mov	r0, r3
 800f590:	3710      	adds	r7, #16
 800f592:	46bd      	mov	sp, r7
 800f594:	bd80      	pop	{r7, pc}
 800f596:	bf00      	nop
 800f598:	08020a38 	.word	0x08020a38

0800f59c <sx126x_set_dio2_as_rf_sw_ctrl>:
    }
    return status;
}

sx126x_status_t sx126x_set_dio2_as_rf_sw_ctrl( const void* context, const bool enable )
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b086      	sub	sp, #24
 800f5a0:	af02      	add	r7, sp, #8
 800f5a2:	6078      	str	r0, [r7, #4]
 800f5a4:	460b      	mov	r3, r1
 800f5a6:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL] = { 0 };
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_DIO2_AS_RF_SWITCH_CTRL;
 800f5ac:	239d      	movs	r3, #157	; 0x9d
 800f5ae:	733b      	strb	r3, [r7, #12]

    buf[1] = ( enable == true ) ? 1 : 0;
 800f5b0:	78fb      	ldrb	r3, [r7, #3]
 800f5b2:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL, 0, 0 );
 800f5b4:	f107 010c 	add.w	r1, r7, #12
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	9300      	str	r3, [sp, #0]
 800f5bc:	2300      	movs	r3, #0
 800f5be:	2202      	movs	r2, #2
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	f7ff fb6f 	bl	800eca4 <sx126x_hal_write>
 800f5c6:	4603      	mov	r3, r0
}
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	3710      	adds	r7, #16
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	bd80      	pop	{r7, pc}

0800f5d0 <sx126x_set_dio3_as_tcxo_ctrl>:

sx126x_status_t sx126x_set_dio3_as_tcxo_ctrl( const void* context, const sx126x_tcxo_ctrl_voltages_t tcxo_voltage,
                                              const uint32_t timeout )
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b088      	sub	sp, #32
 800f5d4:	af02      	add	r7, sp, #8
 800f5d6:	60f8      	str	r0, [r7, #12]
 800f5d8:	460b      	mov	r3, r1
 800f5da:	607a      	str	r2, [r7, #4]
 800f5dc:	72fb      	strb	r3, [r7, #11]
    uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = { 0 };
 800f5de:	2300      	movs	r3, #0
 800f5e0:	613b      	str	r3, [r7, #16]
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	753b      	strb	r3, [r7, #20]

    buf[0] = SX126X_SET_DIO3_AS_TCXO_CTRL;
 800f5e6:	2397      	movs	r3, #151	; 0x97
 800f5e8:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t ) tcxo_voltage;
 800f5ea:	7afb      	ldrb	r3, [r7, #11]
 800f5ec:	747b      	strb	r3, [r7, #17]

    buf[2] = ( uint8_t )( timeout >> 16 );
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	0c1b      	lsrs	r3, r3, #16
 800f5f2:	b2db      	uxtb	r3, r3
 800f5f4:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( timeout >> 8 );
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	0a1b      	lsrs	r3, r3, #8
 800f5fa:	b2db      	uxtb	r3, r3
 800f5fc:	74fb      	strb	r3, [r7, #19]
    buf[4] = ( uint8_t )( timeout >> 0 );
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	b2db      	uxtb	r3, r3
 800f602:	753b      	strb	r3, [r7, #20]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL, 0, 0 );
 800f604:	f107 0110 	add.w	r1, r7, #16
 800f608:	2300      	movs	r3, #0
 800f60a:	9300      	str	r3, [sp, #0]
 800f60c:	2300      	movs	r3, #0
 800f60e:	2205      	movs	r2, #5
 800f610:	68f8      	ldr	r0, [r7, #12]
 800f612:	f7ff fb47 	bl	800eca4 <sx126x_hal_write>
 800f616:	4603      	mov	r3, r0
}
 800f618:	4618      	mov	r0, r3
 800f61a:	3718      	adds	r7, #24
 800f61c:	46bd      	mov	sp, r7
 800f61e:	bd80      	pop	{r7, pc}

0800f620 <sx126x_set_rf_freq>:
//
// RF Modulation and Packet-Related Functions
//

sx126x_status_t sx126x_set_rf_freq( const void* context, const uint32_t freq_in_hz )
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b084      	sub	sp, #16
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
 800f628:	6039      	str	r1, [r7, #0]
    const uint32_t freq = sx126x_convert_freq_in_hz_to_pll_step( freq_in_hz );
 800f62a:	6838      	ldr	r0, [r7, #0]
 800f62c:	f000 f92e 	bl	800f88c <sx126x_convert_freq_in_hz_to_pll_step>
 800f630:	60f8      	str	r0, [r7, #12]

    return sx126x_set_rf_freq_in_pll_steps( context, freq );
 800f632:	68f9      	ldr	r1, [r7, #12]
 800f634:	6878      	ldr	r0, [r7, #4]
 800f636:	f000 f805 	bl	800f644 <sx126x_set_rf_freq_in_pll_steps>
 800f63a:	4603      	mov	r3, r0
}
 800f63c:	4618      	mov	r0, r3
 800f63e:	3710      	adds	r7, #16
 800f640:	46bd      	mov	sp, r7
 800f642:	bd80      	pop	{r7, pc}

0800f644 <sx126x_set_rf_freq_in_pll_steps>:

sx126x_status_t sx126x_set_rf_freq_in_pll_steps( const void* context, const uint32_t freq )
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b086      	sub	sp, #24
 800f648:	af02      	add	r7, sp, #8
 800f64a:	6078      	str	r0, [r7, #4]
 800f64c:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = { 0 };
 800f64e:	2300      	movs	r3, #0
 800f650:	60bb      	str	r3, [r7, #8]
 800f652:	2300      	movs	r3, #0
 800f654:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_RF_FREQUENCY;
 800f656:	2386      	movs	r3, #134	; 0x86
 800f658:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( freq >> 24 );
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	0e1b      	lsrs	r3, r3, #24
 800f65e:	b2db      	uxtb	r3, r3
 800f660:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( freq >> 16 );
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	0c1b      	lsrs	r3, r3, #16
 800f666:	b2db      	uxtb	r3, r3
 800f668:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( freq >> 8 );
 800f66a:	683b      	ldr	r3, [r7, #0]
 800f66c:	0a1b      	lsrs	r3, r3, #8
 800f66e:	b2db      	uxtb	r3, r3
 800f670:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( freq >> 0 );
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	b2db      	uxtb	r3, r3
 800f676:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RF_FREQUENCY, 0, 0 );
 800f678:	f107 0108 	add.w	r1, r7, #8
 800f67c:	2300      	movs	r3, #0
 800f67e:	9300      	str	r3, [sp, #0]
 800f680:	2300      	movs	r3, #0
 800f682:	2205      	movs	r2, #5
 800f684:	6878      	ldr	r0, [r7, #4]
 800f686:	f7ff fb0d 	bl	800eca4 <sx126x_hal_write>
 800f68a:	4603      	mov	r3, r0
}
 800f68c:	4618      	mov	r0, r3
 800f68e:	3710      	adds	r7, #16
 800f690:	46bd      	mov	sp, r7
 800f692:	bd80      	pop	{r7, pc}

0800f694 <sx126x_set_pkt_type>:

sx126x_status_t sx126x_set_pkt_type( const void* context, const sx126x_pkt_type_t pkt_type )
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b086      	sub	sp, #24
 800f698:	af02      	add	r7, sp, #8
 800f69a:	6078      	str	r0, [r7, #4]
 800f69c:	460b      	mov	r3, r1
 800f69e:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_PKT_TYPE] = { 0 };
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_PKT_TYPE;
 800f6a4:	238a      	movs	r3, #138	; 0x8a
 800f6a6:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pkt_type;
 800f6a8:	78fb      	ldrb	r3, [r7, #3]
 800f6aa:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_TYPE, 0, 0 );
 800f6ac:	f107 010c 	add.w	r1, r7, #12
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	9300      	str	r3, [sp, #0]
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	2202      	movs	r2, #2
 800f6b8:	6878      	ldr	r0, [r7, #4]
 800f6ba:	f7ff faf3 	bl	800eca4 <sx126x_hal_write>
 800f6be:	4603      	mov	r3, r0
}
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	3710      	adds	r7, #16
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd80      	pop	{r7, pc}

0800f6c8 <sx126x_set_tx_params>:

    return status;
}

sx126x_status_t sx126x_set_tx_params( const void* context, const int8_t pwr_in_dbm, const sx126x_ramp_time_t ramp_time )
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b086      	sub	sp, #24
 800f6cc:	af02      	add	r7, sp, #8
 800f6ce:	6078      	str	r0, [r7, #4]
 800f6d0:	460b      	mov	r3, r1
 800f6d2:	70fb      	strb	r3, [r7, #3]
 800f6d4:	4613      	mov	r3, r2
 800f6d6:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = { 0 };
 800f6d8:	4b0c      	ldr	r3, [pc, #48]	; (800f70c <sx126x_set_tx_params+0x44>)
 800f6da:	881b      	ldrh	r3, [r3, #0]
 800f6dc:	81bb      	strh	r3, [r7, #12]
 800f6de:	2300      	movs	r3, #0
 800f6e0:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_TX_PARAMS;
 800f6e2:	238e      	movs	r3, #142	; 0x8e
 800f6e4:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pwr_in_dbm;
 800f6e6:	78fb      	ldrb	r3, [r7, #3]
 800f6e8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t ) ramp_time;
 800f6ea:	78bb      	ldrb	r3, [r7, #2]
 800f6ec:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_PARAMS, 0, 0 );
 800f6ee:	f107 010c 	add.w	r1, r7, #12
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	9300      	str	r3, [sp, #0]
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	2203      	movs	r2, #3
 800f6fa:	6878      	ldr	r0, [r7, #4]
 800f6fc:	f7ff fad2 	bl	800eca4 <sx126x_hal_write>
 800f700:	4603      	mov	r3, r0
}
 800f702:	4618      	mov	r0, r3
 800f704:	3710      	adds	r7, #16
 800f706:	46bd      	mov	sp, r7
 800f708:	bd80      	pop	{r7, pc}
 800f70a:	bf00      	nop
 800f70c:	08020a38 	.word	0x08020a38

0800f710 <sx126x_set_lora_mod_params>:
    }
    return status;
}

sx126x_status_t sx126x_set_lora_mod_params( const void* context, const sx126x_mod_params_lora_t* params )
{
 800f710:	b580      	push	{r7, lr}
 800f712:	b086      	sub	sp, #24
 800f714:	af02      	add	r7, sp, #8
 800f716:	6078      	str	r0, [r7, #4]
 800f718:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 800f71a:	2303      	movs	r3, #3
 800f71c:	73fb      	strb	r3, [r7, #15]

    uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = { 0 };
 800f71e:	2300      	movs	r3, #0
 800f720:	60bb      	str	r3, [r7, #8]
 800f722:	2300      	movs	r3, #0
 800f724:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_MODULATION_PARAMS;
 800f726:	238b      	movs	r3, #139	; 0x8b
 800f728:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( params->sf );
 800f72a:	683b      	ldr	r3, [r7, #0]
 800f72c:	781b      	ldrb	r3, [r3, #0]
 800f72e:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( params->bw );
 800f730:	683b      	ldr	r3, [r7, #0]
 800f732:	785b      	ldrb	r3, [r3, #1]
 800f734:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( params->cr );
 800f736:	683b      	ldr	r3, [r7, #0]
 800f738:	789b      	ldrb	r3, [r3, #2]
 800f73a:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->ldro & 0x01;
 800f73c:	683b      	ldr	r3, [r7, #0]
 800f73e:	78db      	ldrb	r3, [r3, #3]
 800f740:	f003 0301 	and.w	r3, r3, #1
 800f744:	b2db      	uxtb	r3, r3
 800f746:	733b      	strb	r3, [r7, #12]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_LORA, 0, 0 );
 800f748:	f107 0108 	add.w	r1, r7, #8
 800f74c:	2300      	movs	r3, #0
 800f74e:	9300      	str	r3, [sp, #0]
 800f750:	2300      	movs	r3, #0
 800f752:	2205      	movs	r2, #5
 800f754:	6878      	ldr	r0, [r7, #4]
 800f756:	f7ff faa5 	bl	800eca4 <sx126x_hal_write>
 800f75a:	4603      	mov	r3, r0
 800f75c:	73fb      	strb	r3, [r7, #15]
        status = sx126x_tx_modulation_workaround( context, SX126X_PKT_TYPE_LORA, params->bw );
        // WORKAROUND END
    }
    */

    return status;
 800f75e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f760:	4618      	mov	r0, r3
 800f762:	3710      	adds	r7, #16
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}

0800f768 <sx126x_set_lora_pkt_params>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_GFSK, 0, 0 );
}

sx126x_status_t sx126x_set_lora_pkt_params( const void* context, const sx126x_pkt_params_lora_t* params )
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b088      	sub	sp, #32
 800f76c:	af02      	add	r7, sp, #8
 800f76e:	6078      	str	r0, [r7, #4]
 800f770:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 800f772:	2303      	movs	r3, #3
 800f774:	75fb      	strb	r3, [r7, #23]

    uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = { 0 };
 800f776:	2300      	movs	r3, #0
 800f778:	613b      	str	r3, [r7, #16]
 800f77a:	f107 0314 	add.w	r3, r7, #20
 800f77e:	2100      	movs	r1, #0
 800f780:	460a      	mov	r2, r1
 800f782:	801a      	strh	r2, [r3, #0]
 800f784:	460a      	mov	r2, r1
 800f786:	709a      	strb	r2, [r3, #2]

    buf[0] = SX126X_SET_PKT_PARAMS;
 800f788:	238c      	movs	r3, #140	; 0x8c
 800f78a:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( params->preamble_len_in_symb >> 8 );
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	881b      	ldrh	r3, [r3, #0]
 800f790:	0a1b      	lsrs	r3, r3, #8
 800f792:	b29b      	uxth	r3, r3
 800f794:	b2db      	uxtb	r3, r3
 800f796:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( params->preamble_len_in_symb >> 0 );
 800f798:	683b      	ldr	r3, [r7, #0]
 800f79a:	881b      	ldrh	r3, [r3, #0]
 800f79c:	b2db      	uxtb	r3, r3
 800f79e:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( params->header_type );
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	789b      	ldrb	r3, [r3, #2]
 800f7a4:	74fb      	strb	r3, [r7, #19]
    buf[4] = params->pld_len_in_bytes;
 800f7a6:	683b      	ldr	r3, [r7, #0]
 800f7a8:	78db      	ldrb	r3, [r3, #3]
 800f7aa:	753b      	strb	r3, [r7, #20]
    buf[5] = ( uint8_t )( params->crc_is_on ? 1 : 0 );
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	791b      	ldrb	r3, [r3, #4]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d001      	beq.n	800f7b8 <sx126x_set_lora_pkt_params+0x50>
 800f7b4:	2301      	movs	r3, #1
 800f7b6:	e000      	b.n	800f7ba <sx126x_set_lora_pkt_params+0x52>
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	757b      	strb	r3, [r7, #21]
    buf[6] = ( uint8_t )( params->invert_iq_is_on ? 1 : 0 );
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	795b      	ldrb	r3, [r3, #5]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d001      	beq.n	800f7c8 <sx126x_set_lora_pkt_params+0x60>
 800f7c4:	2301      	movs	r3, #1
 800f7c6:	e000      	b.n	800f7ca <sx126x_set_lora_pkt_params+0x62>
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	75bb      	strb	r3, [r7, #22]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_LORA, 0, 0 );
 800f7cc:	f107 0110 	add.w	r1, r7, #16
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	9300      	str	r3, [sp, #0]
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	2207      	movs	r2, #7
 800f7d8:	6878      	ldr	r0, [r7, #4]
 800f7da:	f7ff fa63 	bl	800eca4 <sx126x_hal_write>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	75fb      	strb	r3, [r7, #23]

    // WORKAROUND - Optimizing the Inverted IQ Operation, see datasheet DS_SX1261-2_V1.2 §15.4
    if( status == SX126X_STATUS_OK )
 800f7e2:	7dfb      	ldrb	r3, [r7, #23]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d127      	bne.n	800f838 <sx126x_set_lora_pkt_params+0xd0>
    {
        uint8_t reg_value = 0;
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	73fb      	strb	r3, [r7, #15]

        status = sx126x_read_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 800f7ec:	f107 020f 	add.w	r2, r7, #15
 800f7f0:	2301      	movs	r3, #1
 800f7f2:	f240 7136 	movw	r1, #1846	; 0x736
 800f7f6:	6878      	ldr	r0, [r7, #4]
 800f7f8:	f7ff fdec 	bl	800f3d4 <sx126x_read_register>
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	75fb      	strb	r3, [r7, #23]
        if( status == SX126X_STATUS_OK )
 800f800:	7dfb      	ldrb	r3, [r7, #23]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d118      	bne.n	800f838 <sx126x_set_lora_pkt_params+0xd0>
        {
            if( params->invert_iq_is_on == true )
 800f806:	683b      	ldr	r3, [r7, #0]
 800f808:	795b      	ldrb	r3, [r3, #5]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d005      	beq.n	800f81a <sx126x_set_lora_pkt_params+0xb2>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 when using inverted IQ polarity
 800f80e:	7bfb      	ldrb	r3, [r7, #15]
 800f810:	f023 0304 	bic.w	r3, r3, #4
 800f814:	b2db      	uxtb	r3, r3
 800f816:	73fb      	strb	r3, [r7, #15]
 800f818:	e004      	b.n	800f824 <sx126x_set_lora_pkt_params+0xbc>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 when using standard IQ polarity
 800f81a:	7bfb      	ldrb	r3, [r7, #15]
 800f81c:	f043 0304 	orr.w	r3, r3, #4
 800f820:	b2db      	uxtb	r3, r3
 800f822:	73fb      	strb	r3, [r7, #15]
            }
            status = sx126x_write_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 800f824:	f107 020f 	add.w	r2, r7, #15
 800f828:	2301      	movs	r3, #1
 800f82a:	f240 7136 	movw	r1, #1846	; 0x736
 800f82e:	6878      	ldr	r0, [r7, #4]
 800f830:	f7ff fda6 	bl	800f380 <sx126x_write_register>
 800f834:	4603      	mov	r3, r0
 800f836:	75fb      	strb	r3, [r7, #23]
        }
    }
    // WORKAROUND END

    return status;
 800f838:	7dfb      	ldrb	r3, [r7, #23]
}
 800f83a:	4618      	mov	r0, r3
 800f83c:	3718      	adds	r7, #24
 800f83e:	46bd      	mov	sp, r7
 800f840:	bd80      	pop	{r7, pc}
	...

0800f844 <sx126x_set_buffer_base_address>:
    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_CAD_PARAMS, 0, 0 );
}

sx126x_status_t sx126x_set_buffer_base_address( const void* context, const uint8_t tx_base_address,
                                                const uint8_t rx_base_address )
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b086      	sub	sp, #24
 800f848:	af02      	add	r7, sp, #8
 800f84a:	6078      	str	r0, [r7, #4]
 800f84c:	460b      	mov	r3, r1
 800f84e:	70fb      	strb	r3, [r7, #3]
 800f850:	4613      	mov	r3, r2
 800f852:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_BUFFER_BASE_ADDRESS] = { 0 };
 800f854:	4b0c      	ldr	r3, [pc, #48]	; (800f888 <sx126x_set_buffer_base_address+0x44>)
 800f856:	881b      	ldrh	r3, [r3, #0]
 800f858:	81bb      	strh	r3, [r7, #12]
 800f85a:	2300      	movs	r3, #0
 800f85c:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_BUFFER_BASE_ADDRESS;
 800f85e:	238f      	movs	r3, #143	; 0x8f
 800f860:	733b      	strb	r3, [r7, #12]

    buf[1] = tx_base_address;
 800f862:	78fb      	ldrb	r3, [r7, #3]
 800f864:	737b      	strb	r3, [r7, #13]
    buf[2] = rx_base_address;
 800f866:	78bb      	ldrb	r3, [r7, #2]
 800f868:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_BUFFER_BASE_ADDRESS, 0, 0 );
 800f86a:	f107 010c 	add.w	r1, r7, #12
 800f86e:	2300      	movs	r3, #0
 800f870:	9300      	str	r3, [sp, #0]
 800f872:	2300      	movs	r3, #0
 800f874:	2203      	movs	r2, #3
 800f876:	6878      	ldr	r0, [r7, #4]
 800f878:	f7ff fa14 	bl	800eca4 <sx126x_hal_write>
 800f87c:	4603      	mov	r3, r0
}
 800f87e:	4618      	mov	r0, r3
 800f880:	3710      	adds	r7, #16
 800f882:	46bd      	mov	sp, r7
 800f884:	bd80      	pop	{r7, pc}
 800f886:	bf00      	nop
 800f888:	08020a38 	.word	0x08020a38

0800f88c <sx126x_convert_freq_in_hz_to_pll_step>:

    return status;
}

uint32_t sx126x_convert_freq_in_hz_to_pll_step( uint32_t freq_in_hz )
{
 800f88c:	b480      	push	{r7}
 800f88e:	b085      	sub	sp, #20
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
    uint32_t steps_int;
    uint32_t steps_frac;

    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    steps_int  = freq_in_hz / SX126X_PLL_STEP_SCALED;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	4a0f      	ldr	r2, [pc, #60]	; (800f8d4 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800f898:	fba2 2303 	umull	r2, r3, r2, r3
 800f89c:	0b1b      	lsrs	r3, r3, #12
 800f89e:	60fb      	str	r3, [r7, #12]
    steps_frac = freq_in_hz - ( steps_int * SX126X_PLL_STEP_SCALED );
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	f643 5209 	movw	r2, #15625	; 0x3d09
 800f8a6:	fb02 f303 	mul.w	r3, r2, r3
 800f8aa:	687a      	ldr	r2, [r7, #4]
 800f8ac:	1ad3      	subs	r3, r2, r3
 800f8ae:	60bb      	str	r3, [r7, #8]

    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	039a      	lsls	r2, r3, #14
           ( ( ( steps_frac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 800f8b4:	68bb      	ldr	r3, [r7, #8]
 800f8b6:	039b      	lsls	r3, r3, #14
 800f8b8:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 800f8bc:	3304      	adds	r3, #4
 800f8be:	4905      	ldr	r1, [pc, #20]	; (800f8d4 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800f8c0:	fba1 1303 	umull	r1, r3, r1, r3
 800f8c4:	0b1b      	lsrs	r3, r3, #12
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800f8c6:	4413      	add	r3, r2
             SX126X_PLL_STEP_SCALED );
}
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	3714      	adds	r7, #20
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d2:	4770      	bx	lr
 800f8d4:	431bde83 	.word	0x431bde83

0800f8d8 <sx126x_convert_timeout_in_ms_to_rtc_step>:

uint32_t sx126x_convert_timeout_in_ms_to_rtc_step( uint32_t timeout_in_ms )
{
 800f8d8:	b480      	push	{r7}
 800f8da:	b083      	sub	sp, #12
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
    return ( uint32_t )( timeout_in_ms * ( SX126X_RTC_FREQ_IN_HZ / 1000 ) );
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	019b      	lsls	r3, r3, #6
}
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	370c      	adds	r7, #12
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ee:	4770      	bx	lr

0800f8f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800f8f4:	4904      	ldr	r1, [pc, #16]	; (800f908 <MX_FATFS_Init+0x18>)
 800f8f6:	4805      	ldr	r0, [pc, #20]	; (800f90c <MX_FATFS_Init+0x1c>)
 800f8f8:	f004 fffe 	bl	80148f8 <FATFS_LinkDriver>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	461a      	mov	r2, r3
 800f900:	4b03      	ldr	r3, [pc, #12]	; (800f910 <MX_FATFS_Init+0x20>)
 800f902:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f904:	bf00      	nop
 800f906:	bd80      	pop	{r7, pc}
 800f908:	20007200 	.word	0x20007200
 800f90c:	20000040 	.word	0x20000040
 800f910:	20007204 	.word	0x20007204

0800f914 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800f914:	b480      	push	{r7}
 800f916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800f918:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800f91a:	4618      	mov	r0, r3
 800f91c:	46bd      	mov	sp, r7
 800f91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f922:	4770      	bx	lr

0800f924 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b082      	sub	sp, #8
 800f928:	af00      	add	r7, sp, #0
 800f92a:	4603      	mov	r3, r0
 800f92c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800f92e:	79fb      	ldrb	r3, [r7, #7]
 800f930:	4618      	mov	r0, r3
 800f932:	f000 f9dd 	bl	800fcf0 <USER_SPI_initialize>
 800f936:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800f938:	4618      	mov	r0, r3
 800f93a:	3708      	adds	r7, #8
 800f93c:	46bd      	mov	sp, r7
 800f93e:	bd80      	pop	{r7, pc}

0800f940 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b082      	sub	sp, #8
 800f944:	af00      	add	r7, sp, #0
 800f946:	4603      	mov	r3, r0
 800f948:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800f94a:	79fb      	ldrb	r3, [r7, #7]
 800f94c:	4618      	mov	r0, r3
 800f94e:	f000 fab9 	bl	800fec4 <USER_SPI_status>
 800f952:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800f954:	4618      	mov	r0, r3
 800f956:	3708      	adds	r7, #8
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd80      	pop	{r7, pc}

0800f95c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b084      	sub	sp, #16
 800f960:	af00      	add	r7, sp, #0
 800f962:	60b9      	str	r1, [r7, #8]
 800f964:	607a      	str	r2, [r7, #4]
 800f966:	603b      	str	r3, [r7, #0]
 800f968:	4603      	mov	r3, r0
 800f96a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800f96c:	7bf8      	ldrb	r0, [r7, #15]
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	687a      	ldr	r2, [r7, #4]
 800f972:	68b9      	ldr	r1, [r7, #8]
 800f974:	f000 fabc 	bl	800fef0 <USER_SPI_read>
 800f978:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800f97a:	4618      	mov	r0, r3
 800f97c:	3710      	adds	r7, #16
 800f97e:	46bd      	mov	sp, r7
 800f980:	bd80      	pop	{r7, pc}

0800f982 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800f982:	b580      	push	{r7, lr}
 800f984:	b084      	sub	sp, #16
 800f986:	af00      	add	r7, sp, #0
 800f988:	60b9      	str	r1, [r7, #8]
 800f98a:	607a      	str	r2, [r7, #4]
 800f98c:	603b      	str	r3, [r7, #0]
 800f98e:	4603      	mov	r3, r0
 800f990:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800f992:	7bf8      	ldrb	r0, [r7, #15]
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	687a      	ldr	r2, [r7, #4]
 800f998:	68b9      	ldr	r1, [r7, #8]
 800f99a:	f000 fb0f 	bl	800ffbc <USER_SPI_write>
 800f99e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	3710      	adds	r7, #16
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	bd80      	pop	{r7, pc}

0800f9a8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b082      	sub	sp, #8
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	603a      	str	r2, [r7, #0]
 800f9b2:	71fb      	strb	r3, [r7, #7]
 800f9b4:	460b      	mov	r3, r1
 800f9b6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800f9b8:	79b9      	ldrb	r1, [r7, #6]
 800f9ba:	79fb      	ldrb	r3, [r7, #7]
 800f9bc:	683a      	ldr	r2, [r7, #0]
 800f9be:	4618      	mov	r0, r3
 800f9c0:	f000 fb78 	bl	80100b4 <USER_SPI_ioctl>
 800f9c4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	3708      	adds	r7, #8
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	bd80      	pop	{r7, pc}
	...

0800f9d0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	b082      	sub	sp, #8
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800f9d8:	f7f7 fa8c 	bl	8006ef4 <HAL_GetTick>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	4a04      	ldr	r2, [pc, #16]	; (800f9f0 <SPI_Timer_On+0x20>)
 800f9e0:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800f9e2:	4a04      	ldr	r2, [pc, #16]	; (800f9f4 <SPI_Timer_On+0x24>)
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	6013      	str	r3, [r2, #0]
}
 800f9e8:	bf00      	nop
 800f9ea:	3708      	adds	r7, #8
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}
 800f9f0:	2000766c 	.word	0x2000766c
 800f9f4:	20007670 	.word	0x20007670

0800f9f8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800f9fc:	f7f7 fa7a 	bl	8006ef4 <HAL_GetTick>
 800fa00:	4602      	mov	r2, r0
 800fa02:	4b06      	ldr	r3, [pc, #24]	; (800fa1c <SPI_Timer_Status+0x24>)
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	1ad2      	subs	r2, r2, r3
 800fa08:	4b05      	ldr	r3, [pc, #20]	; (800fa20 <SPI_Timer_Status+0x28>)
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	429a      	cmp	r2, r3
 800fa0e:	bf34      	ite	cc
 800fa10:	2301      	movcc	r3, #1
 800fa12:	2300      	movcs	r3, #0
 800fa14:	b2db      	uxtb	r3, r3
}
 800fa16:	4618      	mov	r0, r3
 800fa18:	bd80      	pop	{r7, pc}
 800fa1a:	bf00      	nop
 800fa1c:	2000766c 	.word	0x2000766c
 800fa20:	20007670 	.word	0x20007670

0800fa24 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b086      	sub	sp, #24
 800fa28:	af02      	add	r7, sp, #8
 800fa2a:	4603      	mov	r3, r0
 800fa2c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800fa2e:	f107 020f 	add.w	r2, r7, #15
 800fa32:	1df9      	adds	r1, r7, #7
 800fa34:	2332      	movs	r3, #50	; 0x32
 800fa36:	9300      	str	r3, [sp, #0]
 800fa38:	2301      	movs	r3, #1
 800fa3a:	4804      	ldr	r0, [pc, #16]	; (800fa4c <xchg_spi+0x28>)
 800fa3c:	f7fc f942 	bl	800bcc4 <HAL_SPI_TransmitReceive>
    return rxDat;
 800fa40:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa42:	4618      	mov	r0, r3
 800fa44:	3710      	adds	r7, #16
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}
 800fa4a:	bf00      	nop
 800fa4c:	20005fa4 	.word	0x20005fa4

0800fa50 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800fa50:	b590      	push	{r4, r7, lr}
 800fa52:	b085      	sub	sp, #20
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
 800fa58:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	60fb      	str	r3, [r7, #12]
 800fa5e:	e00a      	b.n	800fa76 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800fa60:	687a      	ldr	r2, [r7, #4]
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	18d4      	adds	r4, r2, r3
 800fa66:	20ff      	movs	r0, #255	; 0xff
 800fa68:	f7ff ffdc 	bl	800fa24 <xchg_spi>
 800fa6c:	4603      	mov	r3, r0
 800fa6e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	3301      	adds	r3, #1
 800fa74:	60fb      	str	r3, [r7, #12]
 800fa76:	68fa      	ldr	r2, [r7, #12]
 800fa78:	683b      	ldr	r3, [r7, #0]
 800fa7a:	429a      	cmp	r2, r3
 800fa7c:	d3f0      	bcc.n	800fa60 <rcvr_spi_multi+0x10>
	}
}
 800fa7e:	bf00      	nop
 800fa80:	bf00      	nop
 800fa82:	3714      	adds	r7, #20
 800fa84:	46bd      	mov	sp, r7
 800fa86:	bd90      	pop	{r4, r7, pc}

0800fa88 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b084      	sub	sp, #16
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
 800fa90:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800fa92:	2300      	movs	r3, #0
 800fa94:	60fb      	str	r3, [r7, #12]
 800fa96:	e009      	b.n	800faac <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800fa98:	687a      	ldr	r2, [r7, #4]
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	4413      	add	r3, r2
 800fa9e:	781b      	ldrb	r3, [r3, #0]
 800faa0:	4618      	mov	r0, r3
 800faa2:	f7ff ffbf 	bl	800fa24 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	3301      	adds	r3, #1
 800faaa:	60fb      	str	r3, [r7, #12]
 800faac:	68fa      	ldr	r2, [r7, #12]
 800faae:	683b      	ldr	r3, [r7, #0]
 800fab0:	429a      	cmp	r2, r3
 800fab2:	d3f1      	bcc.n	800fa98 <xmit_spi_multi+0x10>
	}
}
 800fab4:	bf00      	nop
 800fab6:	bf00      	nop
 800fab8:	3710      	adds	r7, #16
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}

0800fabe <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800fabe:	b580      	push	{r7, lr}
 800fac0:	b086      	sub	sp, #24
 800fac2:	af00      	add	r7, sp, #0
 800fac4:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800fac6:	f7f7 fa15 	bl	8006ef4 <HAL_GetTick>
 800faca:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800fad0:	20ff      	movs	r0, #255	; 0xff
 800fad2:	f7ff ffa7 	bl	800fa24 <xchg_spi>
 800fad6:	4603      	mov	r3, r0
 800fad8:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800fada:	7bfb      	ldrb	r3, [r7, #15]
 800fadc:	2bff      	cmp	r3, #255	; 0xff
 800fade:	d007      	beq.n	800faf0 <wait_ready+0x32>
 800fae0:	f7f7 fa08 	bl	8006ef4 <HAL_GetTick>
 800fae4:	4602      	mov	r2, r0
 800fae6:	697b      	ldr	r3, [r7, #20]
 800fae8:	1ad3      	subs	r3, r2, r3
 800faea:	693a      	ldr	r2, [r7, #16]
 800faec:	429a      	cmp	r2, r3
 800faee:	d8ef      	bhi.n	800fad0 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800faf0:	7bfb      	ldrb	r3, [r7, #15]
 800faf2:	2bff      	cmp	r3, #255	; 0xff
 800faf4:	bf0c      	ite	eq
 800faf6:	2301      	moveq	r3, #1
 800faf8:	2300      	movne	r3, #0
 800fafa:	b2db      	uxtb	r3, r3
}
 800fafc:	4618      	mov	r0, r3
 800fafe:	3718      	adds	r7, #24
 800fb00:	46bd      	mov	sp, r7
 800fb02:	bd80      	pop	{r7, pc}

0800fb04 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800fb08:	2201      	movs	r2, #1
 800fb0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fb0e:	4804      	ldr	r0, [pc, #16]	; (800fb20 <despiselect+0x1c>)
 800fb10:	f7f7 ff6a 	bl	80079e8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800fb14:	20ff      	movs	r0, #255	; 0xff
 800fb16:	f7ff ff85 	bl	800fa24 <xchg_spi>

}
 800fb1a:	bf00      	nop
 800fb1c:	bd80      	pop	{r7, pc}
 800fb1e:	bf00      	nop
 800fb20:	40021400 	.word	0x40021400

0800fb24 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800fb28:	2200      	movs	r2, #0
 800fb2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fb2e:	480a      	ldr	r0, [pc, #40]	; (800fb58 <spiselect+0x34>)
 800fb30:	f7f7 ff5a 	bl	80079e8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800fb34:	20ff      	movs	r0, #255	; 0xff
 800fb36:	f7ff ff75 	bl	800fa24 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800fb3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fb3e:	f7ff ffbe 	bl	800fabe <wait_ready>
 800fb42:	4603      	mov	r3, r0
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d001      	beq.n	800fb4c <spiselect+0x28>
 800fb48:	2301      	movs	r3, #1
 800fb4a:	e002      	b.n	800fb52 <spiselect+0x2e>

	despiselect();
 800fb4c:	f7ff ffda 	bl	800fb04 <despiselect>
	return 0;	/* Timeout */
 800fb50:	2300      	movs	r3, #0
}
 800fb52:	4618      	mov	r0, r3
 800fb54:	bd80      	pop	{r7, pc}
 800fb56:	bf00      	nop
 800fb58:	40021400 	.word	0x40021400

0800fb5c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b084      	sub	sp, #16
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
 800fb64:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800fb66:	20c8      	movs	r0, #200	; 0xc8
 800fb68:	f7ff ff32 	bl	800f9d0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800fb6c:	20ff      	movs	r0, #255	; 0xff
 800fb6e:	f7ff ff59 	bl	800fa24 <xchg_spi>
 800fb72:	4603      	mov	r3, r0
 800fb74:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800fb76:	7bfb      	ldrb	r3, [r7, #15]
 800fb78:	2bff      	cmp	r3, #255	; 0xff
 800fb7a:	d104      	bne.n	800fb86 <rcvr_datablock+0x2a>
 800fb7c:	f7ff ff3c 	bl	800f9f8 <SPI_Timer_Status>
 800fb80:	4603      	mov	r3, r0
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d1f2      	bne.n	800fb6c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800fb86:	7bfb      	ldrb	r3, [r7, #15]
 800fb88:	2bfe      	cmp	r3, #254	; 0xfe
 800fb8a:	d001      	beq.n	800fb90 <rcvr_datablock+0x34>
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	e00a      	b.n	800fba6 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800fb90:	6839      	ldr	r1, [r7, #0]
 800fb92:	6878      	ldr	r0, [r7, #4]
 800fb94:	f7ff ff5c 	bl	800fa50 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800fb98:	20ff      	movs	r0, #255	; 0xff
 800fb9a:	f7ff ff43 	bl	800fa24 <xchg_spi>
 800fb9e:	20ff      	movs	r0, #255	; 0xff
 800fba0:	f7ff ff40 	bl	800fa24 <xchg_spi>

	return 1;						/* Function succeeded */
 800fba4:	2301      	movs	r3, #1
}
 800fba6:	4618      	mov	r0, r3
 800fba8:	3710      	adds	r7, #16
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bd80      	pop	{r7, pc}

0800fbae <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800fbae:	b580      	push	{r7, lr}
 800fbb0:	b084      	sub	sp, #16
 800fbb2:	af00      	add	r7, sp, #0
 800fbb4:	6078      	str	r0, [r7, #4]
 800fbb6:	460b      	mov	r3, r1
 800fbb8:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800fbba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fbbe:	f7ff ff7e 	bl	800fabe <wait_ready>
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d101      	bne.n	800fbcc <xmit_datablock+0x1e>
 800fbc8:	2300      	movs	r3, #0
 800fbca:	e01e      	b.n	800fc0a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800fbcc:	78fb      	ldrb	r3, [r7, #3]
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f7ff ff28 	bl	800fa24 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800fbd4:	78fb      	ldrb	r3, [r7, #3]
 800fbd6:	2bfd      	cmp	r3, #253	; 0xfd
 800fbd8:	d016      	beq.n	800fc08 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800fbda:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fbde:	6878      	ldr	r0, [r7, #4]
 800fbe0:	f7ff ff52 	bl	800fa88 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800fbe4:	20ff      	movs	r0, #255	; 0xff
 800fbe6:	f7ff ff1d 	bl	800fa24 <xchg_spi>
 800fbea:	20ff      	movs	r0, #255	; 0xff
 800fbec:	f7ff ff1a 	bl	800fa24 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800fbf0:	20ff      	movs	r0, #255	; 0xff
 800fbf2:	f7ff ff17 	bl	800fa24 <xchg_spi>
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800fbfa:	7bfb      	ldrb	r3, [r7, #15]
 800fbfc:	f003 031f 	and.w	r3, r3, #31
 800fc00:	2b05      	cmp	r3, #5
 800fc02:	d001      	beq.n	800fc08 <xmit_datablock+0x5a>
 800fc04:	2300      	movs	r3, #0
 800fc06:	e000      	b.n	800fc0a <xmit_datablock+0x5c>
	}
	return 1;
 800fc08:	2301      	movs	r3, #1
}
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	3710      	adds	r7, #16
 800fc0e:	46bd      	mov	sp, r7
 800fc10:	bd80      	pop	{r7, pc}

0800fc12 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800fc12:	b580      	push	{r7, lr}
 800fc14:	b084      	sub	sp, #16
 800fc16:	af00      	add	r7, sp, #0
 800fc18:	4603      	mov	r3, r0
 800fc1a:	6039      	str	r1, [r7, #0]
 800fc1c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800fc1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	da0e      	bge.n	800fc44 <send_cmd+0x32>
		cmd &= 0x7F;
 800fc26:	79fb      	ldrb	r3, [r7, #7]
 800fc28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fc2c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800fc2e:	2100      	movs	r1, #0
 800fc30:	2037      	movs	r0, #55	; 0x37
 800fc32:	f7ff ffee 	bl	800fc12 <send_cmd>
 800fc36:	4603      	mov	r3, r0
 800fc38:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800fc3a:	7bbb      	ldrb	r3, [r7, #14]
 800fc3c:	2b01      	cmp	r3, #1
 800fc3e:	d901      	bls.n	800fc44 <send_cmd+0x32>
 800fc40:	7bbb      	ldrb	r3, [r7, #14]
 800fc42:	e051      	b.n	800fce8 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800fc44:	79fb      	ldrb	r3, [r7, #7]
 800fc46:	2b0c      	cmp	r3, #12
 800fc48:	d008      	beq.n	800fc5c <send_cmd+0x4a>
		despiselect();
 800fc4a:	f7ff ff5b 	bl	800fb04 <despiselect>
		if (!spiselect()) return 0xFF;
 800fc4e:	f7ff ff69 	bl	800fb24 <spiselect>
 800fc52:	4603      	mov	r3, r0
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d101      	bne.n	800fc5c <send_cmd+0x4a>
 800fc58:	23ff      	movs	r3, #255	; 0xff
 800fc5a:	e045      	b.n	800fce8 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800fc5c:	79fb      	ldrb	r3, [r7, #7]
 800fc5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc62:	b2db      	uxtb	r3, r3
 800fc64:	4618      	mov	r0, r3
 800fc66:	f7ff fedd 	bl	800fa24 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	0e1b      	lsrs	r3, r3, #24
 800fc6e:	b2db      	uxtb	r3, r3
 800fc70:	4618      	mov	r0, r3
 800fc72:	f7ff fed7 	bl	800fa24 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800fc76:	683b      	ldr	r3, [r7, #0]
 800fc78:	0c1b      	lsrs	r3, r3, #16
 800fc7a:	b2db      	uxtb	r3, r3
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	f7ff fed1 	bl	800fa24 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	0a1b      	lsrs	r3, r3, #8
 800fc86:	b2db      	uxtb	r3, r3
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f7ff fecb 	bl	800fa24 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800fc8e:	683b      	ldr	r3, [r7, #0]
 800fc90:	b2db      	uxtb	r3, r3
 800fc92:	4618      	mov	r0, r3
 800fc94:	f7ff fec6 	bl	800fa24 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800fc98:	2301      	movs	r3, #1
 800fc9a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800fc9c:	79fb      	ldrb	r3, [r7, #7]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d101      	bne.n	800fca6 <send_cmd+0x94>
 800fca2:	2395      	movs	r3, #149	; 0x95
 800fca4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800fca6:	79fb      	ldrb	r3, [r7, #7]
 800fca8:	2b08      	cmp	r3, #8
 800fcaa:	d101      	bne.n	800fcb0 <send_cmd+0x9e>
 800fcac:	2387      	movs	r3, #135	; 0x87
 800fcae:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800fcb0:	7bfb      	ldrb	r3, [r7, #15]
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f7ff feb6 	bl	800fa24 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800fcb8:	79fb      	ldrb	r3, [r7, #7]
 800fcba:	2b0c      	cmp	r3, #12
 800fcbc:	d102      	bne.n	800fcc4 <send_cmd+0xb2>
 800fcbe:	20ff      	movs	r0, #255	; 0xff
 800fcc0:	f7ff feb0 	bl	800fa24 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800fcc4:	230a      	movs	r3, #10
 800fcc6:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800fcc8:	20ff      	movs	r0, #255	; 0xff
 800fcca:	f7ff feab 	bl	800fa24 <xchg_spi>
 800fcce:	4603      	mov	r3, r0
 800fcd0:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800fcd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	da05      	bge.n	800fce6 <send_cmd+0xd4>
 800fcda:	7bfb      	ldrb	r3, [r7, #15]
 800fcdc:	3b01      	subs	r3, #1
 800fcde:	73fb      	strb	r3, [r7, #15]
 800fce0:	7bfb      	ldrb	r3, [r7, #15]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d1f0      	bne.n	800fcc8 <send_cmd+0xb6>

	return res;							/* Return received response */
 800fce6:	7bbb      	ldrb	r3, [r7, #14]
}
 800fce8:	4618      	mov	r0, r3
 800fcea:	3710      	adds	r7, #16
 800fcec:	46bd      	mov	sp, r7
 800fcee:	bd80      	pop	{r7, pc}

0800fcf0 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800fcf0:	b590      	push	{r4, r7, lr}
 800fcf2:	b085      	sub	sp, #20
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800fcfa:	79fb      	ldrb	r3, [r7, #7]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d001      	beq.n	800fd04 <USER_SPI_initialize+0x14>
 800fd00:	2301      	movs	r3, #1
 800fd02:	e0d4      	b.n	800feae <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800fd04:	4b6c      	ldr	r3, [pc, #432]	; (800feb8 <USER_SPI_initialize+0x1c8>)
 800fd06:	781b      	ldrb	r3, [r3, #0]
 800fd08:	b2db      	uxtb	r3, r3
 800fd0a:	f003 0302 	and.w	r3, r3, #2
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d003      	beq.n	800fd1a <USER_SPI_initialize+0x2a>
 800fd12:	4b69      	ldr	r3, [pc, #420]	; (800feb8 <USER_SPI_initialize+0x1c8>)
 800fd14:	781b      	ldrb	r3, [r3, #0]
 800fd16:	b2db      	uxtb	r3, r3
 800fd18:	e0c9      	b.n	800feae <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 800fd1a:	4b68      	ldr	r3, [pc, #416]	; (800febc <USER_SPI_initialize+0x1cc>)
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	681a      	ldr	r2, [r3, #0]
 800fd20:	4b66      	ldr	r3, [pc, #408]	; (800febc <USER_SPI_initialize+0x1cc>)
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800fd28:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800fd2a:	230a      	movs	r3, #10
 800fd2c:	73fb      	strb	r3, [r7, #15]
 800fd2e:	e005      	b.n	800fd3c <USER_SPI_initialize+0x4c>
 800fd30:	20ff      	movs	r0, #255	; 0xff
 800fd32:	f7ff fe77 	bl	800fa24 <xchg_spi>
 800fd36:	7bfb      	ldrb	r3, [r7, #15]
 800fd38:	3b01      	subs	r3, #1
 800fd3a:	73fb      	strb	r3, [r7, #15]
 800fd3c:	7bfb      	ldrb	r3, [r7, #15]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d1f6      	bne.n	800fd30 <USER_SPI_initialize+0x40>

	ty = 0;
 800fd42:	2300      	movs	r3, #0
 800fd44:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800fd46:	2100      	movs	r1, #0
 800fd48:	2000      	movs	r0, #0
 800fd4a:	f7ff ff62 	bl	800fc12 <send_cmd>
 800fd4e:	4603      	mov	r3, r0
 800fd50:	2b01      	cmp	r3, #1
 800fd52:	f040 808b 	bne.w	800fe6c <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800fd56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800fd5a:	f7ff fe39 	bl	800f9d0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800fd5e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fd62:	2008      	movs	r0, #8
 800fd64:	f7ff ff55 	bl	800fc12 <send_cmd>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	2b01      	cmp	r3, #1
 800fd6c:	d151      	bne.n	800fe12 <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800fd6e:	2300      	movs	r3, #0
 800fd70:	73fb      	strb	r3, [r7, #15]
 800fd72:	e00d      	b.n	800fd90 <USER_SPI_initialize+0xa0>
 800fd74:	7bfc      	ldrb	r4, [r7, #15]
 800fd76:	20ff      	movs	r0, #255	; 0xff
 800fd78:	f7ff fe54 	bl	800fa24 <xchg_spi>
 800fd7c:	4603      	mov	r3, r0
 800fd7e:	461a      	mov	r2, r3
 800fd80:	f107 0310 	add.w	r3, r7, #16
 800fd84:	4423      	add	r3, r4
 800fd86:	f803 2c08 	strb.w	r2, [r3, #-8]
 800fd8a:	7bfb      	ldrb	r3, [r7, #15]
 800fd8c:	3301      	adds	r3, #1
 800fd8e:	73fb      	strb	r3, [r7, #15]
 800fd90:	7bfb      	ldrb	r3, [r7, #15]
 800fd92:	2b03      	cmp	r3, #3
 800fd94:	d9ee      	bls.n	800fd74 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800fd96:	7abb      	ldrb	r3, [r7, #10]
 800fd98:	2b01      	cmp	r3, #1
 800fd9a:	d167      	bne.n	800fe6c <USER_SPI_initialize+0x17c>
 800fd9c:	7afb      	ldrb	r3, [r7, #11]
 800fd9e:	2baa      	cmp	r3, #170	; 0xaa
 800fda0:	d164      	bne.n	800fe6c <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800fda2:	bf00      	nop
 800fda4:	f7ff fe28 	bl	800f9f8 <SPI_Timer_Status>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d007      	beq.n	800fdbe <USER_SPI_initialize+0xce>
 800fdae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800fdb2:	20a9      	movs	r0, #169	; 0xa9
 800fdb4:	f7ff ff2d 	bl	800fc12 <send_cmd>
 800fdb8:	4603      	mov	r3, r0
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d1f2      	bne.n	800fda4 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800fdbe:	f7ff fe1b 	bl	800f9f8 <SPI_Timer_Status>
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d051      	beq.n	800fe6c <USER_SPI_initialize+0x17c>
 800fdc8:	2100      	movs	r1, #0
 800fdca:	203a      	movs	r0, #58	; 0x3a
 800fdcc:	f7ff ff21 	bl	800fc12 <send_cmd>
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d14a      	bne.n	800fe6c <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	73fb      	strb	r3, [r7, #15]
 800fdda:	e00d      	b.n	800fdf8 <USER_SPI_initialize+0x108>
 800fddc:	7bfc      	ldrb	r4, [r7, #15]
 800fdde:	20ff      	movs	r0, #255	; 0xff
 800fde0:	f7ff fe20 	bl	800fa24 <xchg_spi>
 800fde4:	4603      	mov	r3, r0
 800fde6:	461a      	mov	r2, r3
 800fde8:	f107 0310 	add.w	r3, r7, #16
 800fdec:	4423      	add	r3, r4
 800fdee:	f803 2c08 	strb.w	r2, [r3, #-8]
 800fdf2:	7bfb      	ldrb	r3, [r7, #15]
 800fdf4:	3301      	adds	r3, #1
 800fdf6:	73fb      	strb	r3, [r7, #15]
 800fdf8:	7bfb      	ldrb	r3, [r7, #15]
 800fdfa:	2b03      	cmp	r3, #3
 800fdfc:	d9ee      	bls.n	800fddc <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800fdfe:	7a3b      	ldrb	r3, [r7, #8]
 800fe00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d001      	beq.n	800fe0c <USER_SPI_initialize+0x11c>
 800fe08:	230c      	movs	r3, #12
 800fe0a:	e000      	b.n	800fe0e <USER_SPI_initialize+0x11e>
 800fe0c:	2304      	movs	r3, #4
 800fe0e:	737b      	strb	r3, [r7, #13]
 800fe10:	e02c      	b.n	800fe6c <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800fe12:	2100      	movs	r1, #0
 800fe14:	20a9      	movs	r0, #169	; 0xa9
 800fe16:	f7ff fefc 	bl	800fc12 <send_cmd>
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	2b01      	cmp	r3, #1
 800fe1e:	d804      	bhi.n	800fe2a <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800fe20:	2302      	movs	r3, #2
 800fe22:	737b      	strb	r3, [r7, #13]
 800fe24:	23a9      	movs	r3, #169	; 0xa9
 800fe26:	73bb      	strb	r3, [r7, #14]
 800fe28:	e003      	b.n	800fe32 <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800fe2a:	2301      	movs	r3, #1
 800fe2c:	737b      	strb	r3, [r7, #13]
 800fe2e:	2301      	movs	r3, #1
 800fe30:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800fe32:	bf00      	nop
 800fe34:	f7ff fde0 	bl	800f9f8 <SPI_Timer_Status>
 800fe38:	4603      	mov	r3, r0
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d007      	beq.n	800fe4e <USER_SPI_initialize+0x15e>
 800fe3e:	7bbb      	ldrb	r3, [r7, #14]
 800fe40:	2100      	movs	r1, #0
 800fe42:	4618      	mov	r0, r3
 800fe44:	f7ff fee5 	bl	800fc12 <send_cmd>
 800fe48:	4603      	mov	r3, r0
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d1f2      	bne.n	800fe34 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800fe4e:	f7ff fdd3 	bl	800f9f8 <SPI_Timer_Status>
 800fe52:	4603      	mov	r3, r0
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d007      	beq.n	800fe68 <USER_SPI_initialize+0x178>
 800fe58:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fe5c:	2010      	movs	r0, #16
 800fe5e:	f7ff fed8 	bl	800fc12 <send_cmd>
 800fe62:	4603      	mov	r3, r0
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d001      	beq.n	800fe6c <USER_SPI_initialize+0x17c>
				ty = 0;
 800fe68:	2300      	movs	r3, #0
 800fe6a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800fe6c:	4a14      	ldr	r2, [pc, #80]	; (800fec0 <USER_SPI_initialize+0x1d0>)
 800fe6e:	7b7b      	ldrb	r3, [r7, #13]
 800fe70:	7013      	strb	r3, [r2, #0]
	despiselect();
 800fe72:	f7ff fe47 	bl	800fb04 <despiselect>

	if (ty) {			/* OK */
 800fe76:	7b7b      	ldrb	r3, [r7, #13]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d012      	beq.n	800fea2 <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 800fe7c:	4b0f      	ldr	r3, [pc, #60]	; (800febc <USER_SPI_initialize+0x1cc>)
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800fe86:	4b0d      	ldr	r3, [pc, #52]	; (800febc <USER_SPI_initialize+0x1cc>)
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	f042 0218 	orr.w	r2, r2, #24
 800fe8e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800fe90:	4b09      	ldr	r3, [pc, #36]	; (800feb8 <USER_SPI_initialize+0x1c8>)
 800fe92:	781b      	ldrb	r3, [r3, #0]
 800fe94:	b2db      	uxtb	r3, r3
 800fe96:	f023 0301 	bic.w	r3, r3, #1
 800fe9a:	b2da      	uxtb	r2, r3
 800fe9c:	4b06      	ldr	r3, [pc, #24]	; (800feb8 <USER_SPI_initialize+0x1c8>)
 800fe9e:	701a      	strb	r2, [r3, #0]
 800fea0:	e002      	b.n	800fea8 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800fea2:	4b05      	ldr	r3, [pc, #20]	; (800feb8 <USER_SPI_initialize+0x1c8>)
 800fea4:	2201      	movs	r2, #1
 800fea6:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800fea8:	4b03      	ldr	r3, [pc, #12]	; (800feb8 <USER_SPI_initialize+0x1c8>)
 800feaa:	781b      	ldrb	r3, [r3, #0]
 800feac:	b2db      	uxtb	r3, r3
}
 800feae:	4618      	mov	r0, r3
 800feb0:	3714      	adds	r7, #20
 800feb2:	46bd      	mov	sp, r7
 800feb4:	bd90      	pop	{r4, r7, pc}
 800feb6:	bf00      	nop
 800feb8:	20000054 	.word	0x20000054
 800febc:	20005fa4 	.word	0x20005fa4
 800fec0:	2000082e 	.word	0x2000082e

0800fec4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800fec4:	b480      	push	{r7}
 800fec6:	b083      	sub	sp, #12
 800fec8:	af00      	add	r7, sp, #0
 800feca:	4603      	mov	r3, r0
 800fecc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800fece:	79fb      	ldrb	r3, [r7, #7]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d001      	beq.n	800fed8 <USER_SPI_status+0x14>
 800fed4:	2301      	movs	r3, #1
 800fed6:	e002      	b.n	800fede <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800fed8:	4b04      	ldr	r3, [pc, #16]	; (800feec <USER_SPI_status+0x28>)
 800feda:	781b      	ldrb	r3, [r3, #0]
 800fedc:	b2db      	uxtb	r3, r3
}
 800fede:	4618      	mov	r0, r3
 800fee0:	370c      	adds	r7, #12
 800fee2:	46bd      	mov	sp, r7
 800fee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee8:	4770      	bx	lr
 800feea:	bf00      	nop
 800feec:	20000054 	.word	0x20000054

0800fef0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b084      	sub	sp, #16
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	60b9      	str	r1, [r7, #8]
 800fef8:	607a      	str	r2, [r7, #4]
 800fefa:	603b      	str	r3, [r7, #0]
 800fefc:	4603      	mov	r3, r0
 800fefe:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800ff00:	7bfb      	ldrb	r3, [r7, #15]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d102      	bne.n	800ff0c <USER_SPI_read+0x1c>
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d101      	bne.n	800ff10 <USER_SPI_read+0x20>
 800ff0c:	2304      	movs	r3, #4
 800ff0e:	e04d      	b.n	800ffac <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800ff10:	4b28      	ldr	r3, [pc, #160]	; (800ffb4 <USER_SPI_read+0xc4>)
 800ff12:	781b      	ldrb	r3, [r3, #0]
 800ff14:	b2db      	uxtb	r3, r3
 800ff16:	f003 0301 	and.w	r3, r3, #1
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d001      	beq.n	800ff22 <USER_SPI_read+0x32>
 800ff1e:	2303      	movs	r3, #3
 800ff20:	e044      	b.n	800ffac <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800ff22:	4b25      	ldr	r3, [pc, #148]	; (800ffb8 <USER_SPI_read+0xc8>)
 800ff24:	781b      	ldrb	r3, [r3, #0]
 800ff26:	f003 0308 	and.w	r3, r3, #8
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d102      	bne.n	800ff34 <USER_SPI_read+0x44>
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	025b      	lsls	r3, r3, #9
 800ff32:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	2b01      	cmp	r3, #1
 800ff38:	d111      	bne.n	800ff5e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800ff3a:	6879      	ldr	r1, [r7, #4]
 800ff3c:	2011      	movs	r0, #17
 800ff3e:	f7ff fe68 	bl	800fc12 <send_cmd>
 800ff42:	4603      	mov	r3, r0
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d129      	bne.n	800ff9c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800ff48:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ff4c:	68b8      	ldr	r0, [r7, #8]
 800ff4e:	f7ff fe05 	bl	800fb5c <rcvr_datablock>
 800ff52:	4603      	mov	r3, r0
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d021      	beq.n	800ff9c <USER_SPI_read+0xac>
			count = 0;
 800ff58:	2300      	movs	r3, #0
 800ff5a:	603b      	str	r3, [r7, #0]
 800ff5c:	e01e      	b.n	800ff9c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800ff5e:	6879      	ldr	r1, [r7, #4]
 800ff60:	2012      	movs	r0, #18
 800ff62:	f7ff fe56 	bl	800fc12 <send_cmd>
 800ff66:	4603      	mov	r3, r0
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d117      	bne.n	800ff9c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800ff6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ff70:	68b8      	ldr	r0, [r7, #8]
 800ff72:	f7ff fdf3 	bl	800fb5c <rcvr_datablock>
 800ff76:	4603      	mov	r3, r0
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d00a      	beq.n	800ff92 <USER_SPI_read+0xa2>
				buff += 512;
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ff82:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800ff84:	683b      	ldr	r3, [r7, #0]
 800ff86:	3b01      	subs	r3, #1
 800ff88:	603b      	str	r3, [r7, #0]
 800ff8a:	683b      	ldr	r3, [r7, #0]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d1ed      	bne.n	800ff6c <USER_SPI_read+0x7c>
 800ff90:	e000      	b.n	800ff94 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800ff92:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800ff94:	2100      	movs	r1, #0
 800ff96:	200c      	movs	r0, #12
 800ff98:	f7ff fe3b 	bl	800fc12 <send_cmd>
		}
	}
	despiselect();
 800ff9c:	f7ff fdb2 	bl	800fb04 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	bf14      	ite	ne
 800ffa6:	2301      	movne	r3, #1
 800ffa8:	2300      	moveq	r3, #0
 800ffaa:	b2db      	uxtb	r3, r3
}
 800ffac:	4618      	mov	r0, r3
 800ffae:	3710      	adds	r7, #16
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	bd80      	pop	{r7, pc}
 800ffb4:	20000054 	.word	0x20000054
 800ffb8:	2000082e 	.word	0x2000082e

0800ffbc <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b084      	sub	sp, #16
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	60b9      	str	r1, [r7, #8]
 800ffc4:	607a      	str	r2, [r7, #4]
 800ffc6:	603b      	str	r3, [r7, #0]
 800ffc8:	4603      	mov	r3, r0
 800ffca:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800ffcc:	7bfb      	ldrb	r3, [r7, #15]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d102      	bne.n	800ffd8 <USER_SPI_write+0x1c>
 800ffd2:	683b      	ldr	r3, [r7, #0]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d101      	bne.n	800ffdc <USER_SPI_write+0x20>
 800ffd8:	2304      	movs	r3, #4
 800ffda:	e063      	b.n	80100a4 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800ffdc:	4b33      	ldr	r3, [pc, #204]	; (80100ac <USER_SPI_write+0xf0>)
 800ffde:	781b      	ldrb	r3, [r3, #0]
 800ffe0:	b2db      	uxtb	r3, r3
 800ffe2:	f003 0301 	and.w	r3, r3, #1
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d001      	beq.n	800ffee <USER_SPI_write+0x32>
 800ffea:	2303      	movs	r3, #3
 800ffec:	e05a      	b.n	80100a4 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800ffee:	4b2f      	ldr	r3, [pc, #188]	; (80100ac <USER_SPI_write+0xf0>)
 800fff0:	781b      	ldrb	r3, [r3, #0]
 800fff2:	b2db      	uxtb	r3, r3
 800fff4:	f003 0304 	and.w	r3, r3, #4
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d001      	beq.n	8010000 <USER_SPI_write+0x44>
 800fffc:	2302      	movs	r3, #2
 800fffe:	e051      	b.n	80100a4 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8010000:	4b2b      	ldr	r3, [pc, #172]	; (80100b0 <USER_SPI_write+0xf4>)
 8010002:	781b      	ldrb	r3, [r3, #0]
 8010004:	f003 0308 	and.w	r3, r3, #8
 8010008:	2b00      	cmp	r3, #0
 801000a:	d102      	bne.n	8010012 <USER_SPI_write+0x56>
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	025b      	lsls	r3, r3, #9
 8010010:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8010012:	683b      	ldr	r3, [r7, #0]
 8010014:	2b01      	cmp	r3, #1
 8010016:	d110      	bne.n	801003a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8010018:	6879      	ldr	r1, [r7, #4]
 801001a:	2018      	movs	r0, #24
 801001c:	f7ff fdf9 	bl	800fc12 <send_cmd>
 8010020:	4603      	mov	r3, r0
 8010022:	2b00      	cmp	r3, #0
 8010024:	d136      	bne.n	8010094 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8010026:	21fe      	movs	r1, #254	; 0xfe
 8010028:	68b8      	ldr	r0, [r7, #8]
 801002a:	f7ff fdc0 	bl	800fbae <xmit_datablock>
 801002e:	4603      	mov	r3, r0
 8010030:	2b00      	cmp	r3, #0
 8010032:	d02f      	beq.n	8010094 <USER_SPI_write+0xd8>
			count = 0;
 8010034:	2300      	movs	r3, #0
 8010036:	603b      	str	r3, [r7, #0]
 8010038:	e02c      	b.n	8010094 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 801003a:	4b1d      	ldr	r3, [pc, #116]	; (80100b0 <USER_SPI_write+0xf4>)
 801003c:	781b      	ldrb	r3, [r3, #0]
 801003e:	f003 0306 	and.w	r3, r3, #6
 8010042:	2b00      	cmp	r3, #0
 8010044:	d003      	beq.n	801004e <USER_SPI_write+0x92>
 8010046:	6839      	ldr	r1, [r7, #0]
 8010048:	2097      	movs	r0, #151	; 0x97
 801004a:	f7ff fde2 	bl	800fc12 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 801004e:	6879      	ldr	r1, [r7, #4]
 8010050:	2019      	movs	r0, #25
 8010052:	f7ff fdde 	bl	800fc12 <send_cmd>
 8010056:	4603      	mov	r3, r0
 8010058:	2b00      	cmp	r3, #0
 801005a:	d11b      	bne.n	8010094 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 801005c:	21fc      	movs	r1, #252	; 0xfc
 801005e:	68b8      	ldr	r0, [r7, #8]
 8010060:	f7ff fda5 	bl	800fbae <xmit_datablock>
 8010064:	4603      	mov	r3, r0
 8010066:	2b00      	cmp	r3, #0
 8010068:	d00a      	beq.n	8010080 <USER_SPI_write+0xc4>
				buff += 512;
 801006a:	68bb      	ldr	r3, [r7, #8]
 801006c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8010070:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	3b01      	subs	r3, #1
 8010076:	603b      	str	r3, [r7, #0]
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d1ee      	bne.n	801005c <USER_SPI_write+0xa0>
 801007e:	e000      	b.n	8010082 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8010080:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8010082:	21fd      	movs	r1, #253	; 0xfd
 8010084:	2000      	movs	r0, #0
 8010086:	f7ff fd92 	bl	800fbae <xmit_datablock>
 801008a:	4603      	mov	r3, r0
 801008c:	2b00      	cmp	r3, #0
 801008e:	d101      	bne.n	8010094 <USER_SPI_write+0xd8>
 8010090:	2301      	movs	r3, #1
 8010092:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8010094:	f7ff fd36 	bl	800fb04 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8010098:	683b      	ldr	r3, [r7, #0]
 801009a:	2b00      	cmp	r3, #0
 801009c:	bf14      	ite	ne
 801009e:	2301      	movne	r3, #1
 80100a0:	2300      	moveq	r3, #0
 80100a2:	b2db      	uxtb	r3, r3
}
 80100a4:	4618      	mov	r0, r3
 80100a6:	3710      	adds	r7, #16
 80100a8:	46bd      	mov	sp, r7
 80100aa:	bd80      	pop	{r7, pc}
 80100ac:	20000054 	.word	0x20000054
 80100b0:	2000082e 	.word	0x2000082e

080100b4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b08c      	sub	sp, #48	; 0x30
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	4603      	mov	r3, r0
 80100bc:	603a      	str	r2, [r7, #0]
 80100be:	71fb      	strb	r3, [r7, #7]
 80100c0:	460b      	mov	r3, r1
 80100c2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80100c4:	79fb      	ldrb	r3, [r7, #7]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d001      	beq.n	80100ce <USER_SPI_ioctl+0x1a>
 80100ca:	2304      	movs	r3, #4
 80100cc:	e15a      	b.n	8010384 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80100ce:	4baf      	ldr	r3, [pc, #700]	; (801038c <USER_SPI_ioctl+0x2d8>)
 80100d0:	781b      	ldrb	r3, [r3, #0]
 80100d2:	b2db      	uxtb	r3, r3
 80100d4:	f003 0301 	and.w	r3, r3, #1
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d001      	beq.n	80100e0 <USER_SPI_ioctl+0x2c>
 80100dc:	2303      	movs	r3, #3
 80100de:	e151      	b.n	8010384 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80100e0:	2301      	movs	r3, #1
 80100e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80100e6:	79bb      	ldrb	r3, [r7, #6]
 80100e8:	2b04      	cmp	r3, #4
 80100ea:	f200 8136 	bhi.w	801035a <USER_SPI_ioctl+0x2a6>
 80100ee:	a201      	add	r2, pc, #4	; (adr r2, 80100f4 <USER_SPI_ioctl+0x40>)
 80100f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100f4:	08010109 	.word	0x08010109
 80100f8:	0801011d 	.word	0x0801011d
 80100fc:	0801035b 	.word	0x0801035b
 8010100:	080101c9 	.word	0x080101c9
 8010104:	080102bf 	.word	0x080102bf
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8010108:	f7ff fd0c 	bl	800fb24 <spiselect>
 801010c:	4603      	mov	r3, r0
 801010e:	2b00      	cmp	r3, #0
 8010110:	f000 8127 	beq.w	8010362 <USER_SPI_ioctl+0x2ae>
 8010114:	2300      	movs	r3, #0
 8010116:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 801011a:	e122      	b.n	8010362 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 801011c:	2100      	movs	r1, #0
 801011e:	2009      	movs	r0, #9
 8010120:	f7ff fd77 	bl	800fc12 <send_cmd>
 8010124:	4603      	mov	r3, r0
 8010126:	2b00      	cmp	r3, #0
 8010128:	f040 811d 	bne.w	8010366 <USER_SPI_ioctl+0x2b2>
 801012c:	f107 030c 	add.w	r3, r7, #12
 8010130:	2110      	movs	r1, #16
 8010132:	4618      	mov	r0, r3
 8010134:	f7ff fd12 	bl	800fb5c <rcvr_datablock>
 8010138:	4603      	mov	r3, r0
 801013a:	2b00      	cmp	r3, #0
 801013c:	f000 8113 	beq.w	8010366 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8010140:	7b3b      	ldrb	r3, [r7, #12]
 8010142:	099b      	lsrs	r3, r3, #6
 8010144:	b2db      	uxtb	r3, r3
 8010146:	2b01      	cmp	r3, #1
 8010148:	d111      	bne.n	801016e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 801014a:	7d7b      	ldrb	r3, [r7, #21]
 801014c:	461a      	mov	r2, r3
 801014e:	7d3b      	ldrb	r3, [r7, #20]
 8010150:	021b      	lsls	r3, r3, #8
 8010152:	4413      	add	r3, r2
 8010154:	461a      	mov	r2, r3
 8010156:	7cfb      	ldrb	r3, [r7, #19]
 8010158:	041b      	lsls	r3, r3, #16
 801015a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 801015e:	4413      	add	r3, r2
 8010160:	3301      	adds	r3, #1
 8010162:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8010164:	69fb      	ldr	r3, [r7, #28]
 8010166:	029a      	lsls	r2, r3, #10
 8010168:	683b      	ldr	r3, [r7, #0]
 801016a:	601a      	str	r2, [r3, #0]
 801016c:	e028      	b.n	80101c0 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 801016e:	7c7b      	ldrb	r3, [r7, #17]
 8010170:	f003 030f 	and.w	r3, r3, #15
 8010174:	b2da      	uxtb	r2, r3
 8010176:	7dbb      	ldrb	r3, [r7, #22]
 8010178:	09db      	lsrs	r3, r3, #7
 801017a:	b2db      	uxtb	r3, r3
 801017c:	4413      	add	r3, r2
 801017e:	b2da      	uxtb	r2, r3
 8010180:	7d7b      	ldrb	r3, [r7, #21]
 8010182:	005b      	lsls	r3, r3, #1
 8010184:	b2db      	uxtb	r3, r3
 8010186:	f003 0306 	and.w	r3, r3, #6
 801018a:	b2db      	uxtb	r3, r3
 801018c:	4413      	add	r3, r2
 801018e:	b2db      	uxtb	r3, r3
 8010190:	3302      	adds	r3, #2
 8010192:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8010196:	7d3b      	ldrb	r3, [r7, #20]
 8010198:	099b      	lsrs	r3, r3, #6
 801019a:	b2db      	uxtb	r3, r3
 801019c:	461a      	mov	r2, r3
 801019e:	7cfb      	ldrb	r3, [r7, #19]
 80101a0:	009b      	lsls	r3, r3, #2
 80101a2:	441a      	add	r2, r3
 80101a4:	7cbb      	ldrb	r3, [r7, #18]
 80101a6:	029b      	lsls	r3, r3, #10
 80101a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80101ac:	4413      	add	r3, r2
 80101ae:	3301      	adds	r3, #1
 80101b0:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80101b2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80101b6:	3b09      	subs	r3, #9
 80101b8:	69fa      	ldr	r2, [r7, #28]
 80101ba:	409a      	lsls	r2, r3
 80101bc:	683b      	ldr	r3, [r7, #0]
 80101be:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80101c0:	2300      	movs	r3, #0
 80101c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80101c6:	e0ce      	b.n	8010366 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80101c8:	4b71      	ldr	r3, [pc, #452]	; (8010390 <USER_SPI_ioctl+0x2dc>)
 80101ca:	781b      	ldrb	r3, [r3, #0]
 80101cc:	f003 0304 	and.w	r3, r3, #4
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d031      	beq.n	8010238 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80101d4:	2100      	movs	r1, #0
 80101d6:	208d      	movs	r0, #141	; 0x8d
 80101d8:	f7ff fd1b 	bl	800fc12 <send_cmd>
 80101dc:	4603      	mov	r3, r0
 80101de:	2b00      	cmp	r3, #0
 80101e0:	f040 80c3 	bne.w	801036a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80101e4:	20ff      	movs	r0, #255	; 0xff
 80101e6:	f7ff fc1d 	bl	800fa24 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80101ea:	f107 030c 	add.w	r3, r7, #12
 80101ee:	2110      	movs	r1, #16
 80101f0:	4618      	mov	r0, r3
 80101f2:	f7ff fcb3 	bl	800fb5c <rcvr_datablock>
 80101f6:	4603      	mov	r3, r0
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	f000 80b6 	beq.w	801036a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80101fe:	2330      	movs	r3, #48	; 0x30
 8010200:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8010204:	e007      	b.n	8010216 <USER_SPI_ioctl+0x162>
 8010206:	20ff      	movs	r0, #255	; 0xff
 8010208:	f7ff fc0c 	bl	800fa24 <xchg_spi>
 801020c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010210:	3b01      	subs	r3, #1
 8010212:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8010216:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801021a:	2b00      	cmp	r3, #0
 801021c:	d1f3      	bne.n	8010206 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 801021e:	7dbb      	ldrb	r3, [r7, #22]
 8010220:	091b      	lsrs	r3, r3, #4
 8010222:	b2db      	uxtb	r3, r3
 8010224:	461a      	mov	r2, r3
 8010226:	2310      	movs	r3, #16
 8010228:	fa03 f202 	lsl.w	r2, r3, r2
 801022c:	683b      	ldr	r3, [r7, #0]
 801022e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8010230:	2300      	movs	r3, #0
 8010232:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8010236:	e098      	b.n	801036a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8010238:	2100      	movs	r1, #0
 801023a:	2009      	movs	r0, #9
 801023c:	f7ff fce9 	bl	800fc12 <send_cmd>
 8010240:	4603      	mov	r3, r0
 8010242:	2b00      	cmp	r3, #0
 8010244:	f040 8091 	bne.w	801036a <USER_SPI_ioctl+0x2b6>
 8010248:	f107 030c 	add.w	r3, r7, #12
 801024c:	2110      	movs	r1, #16
 801024e:	4618      	mov	r0, r3
 8010250:	f7ff fc84 	bl	800fb5c <rcvr_datablock>
 8010254:	4603      	mov	r3, r0
 8010256:	2b00      	cmp	r3, #0
 8010258:	f000 8087 	beq.w	801036a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 801025c:	4b4c      	ldr	r3, [pc, #304]	; (8010390 <USER_SPI_ioctl+0x2dc>)
 801025e:	781b      	ldrb	r3, [r3, #0]
 8010260:	f003 0302 	and.w	r3, r3, #2
 8010264:	2b00      	cmp	r3, #0
 8010266:	d012      	beq.n	801028e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8010268:	7dbb      	ldrb	r3, [r7, #22]
 801026a:	005b      	lsls	r3, r3, #1
 801026c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8010270:	7dfa      	ldrb	r2, [r7, #23]
 8010272:	09d2      	lsrs	r2, r2, #7
 8010274:	b2d2      	uxtb	r2, r2
 8010276:	4413      	add	r3, r2
 8010278:	1c5a      	adds	r2, r3, #1
 801027a:	7e7b      	ldrb	r3, [r7, #25]
 801027c:	099b      	lsrs	r3, r3, #6
 801027e:	b2db      	uxtb	r3, r3
 8010280:	3b01      	subs	r3, #1
 8010282:	fa02 f303 	lsl.w	r3, r2, r3
 8010286:	461a      	mov	r2, r3
 8010288:	683b      	ldr	r3, [r7, #0]
 801028a:	601a      	str	r2, [r3, #0]
 801028c:	e013      	b.n	80102b6 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 801028e:	7dbb      	ldrb	r3, [r7, #22]
 8010290:	109b      	asrs	r3, r3, #2
 8010292:	b29b      	uxth	r3, r3
 8010294:	f003 031f 	and.w	r3, r3, #31
 8010298:	3301      	adds	r3, #1
 801029a:	7dfa      	ldrb	r2, [r7, #23]
 801029c:	00d2      	lsls	r2, r2, #3
 801029e:	f002 0218 	and.w	r2, r2, #24
 80102a2:	7df9      	ldrb	r1, [r7, #23]
 80102a4:	0949      	lsrs	r1, r1, #5
 80102a6:	b2c9      	uxtb	r1, r1
 80102a8:	440a      	add	r2, r1
 80102aa:	3201      	adds	r2, #1
 80102ac:	fb02 f303 	mul.w	r3, r2, r3
 80102b0:	461a      	mov	r2, r3
 80102b2:	683b      	ldr	r3, [r7, #0]
 80102b4:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80102b6:	2300      	movs	r3, #0
 80102b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80102bc:	e055      	b.n	801036a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80102be:	4b34      	ldr	r3, [pc, #208]	; (8010390 <USER_SPI_ioctl+0x2dc>)
 80102c0:	781b      	ldrb	r3, [r3, #0]
 80102c2:	f003 0306 	and.w	r3, r3, #6
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d051      	beq.n	801036e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80102ca:	f107 020c 	add.w	r2, r7, #12
 80102ce:	79fb      	ldrb	r3, [r7, #7]
 80102d0:	210b      	movs	r1, #11
 80102d2:	4618      	mov	r0, r3
 80102d4:	f7ff feee 	bl	80100b4 <USER_SPI_ioctl>
 80102d8:	4603      	mov	r3, r0
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d149      	bne.n	8010372 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80102de:	7b3b      	ldrb	r3, [r7, #12]
 80102e0:	099b      	lsrs	r3, r3, #6
 80102e2:	b2db      	uxtb	r3, r3
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d104      	bne.n	80102f2 <USER_SPI_ioctl+0x23e>
 80102e8:	7dbb      	ldrb	r3, [r7, #22]
 80102ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d041      	beq.n	8010376 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80102f2:	683b      	ldr	r3, [r7, #0]
 80102f4:	623b      	str	r3, [r7, #32]
 80102f6:	6a3b      	ldr	r3, [r7, #32]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80102fc:	6a3b      	ldr	r3, [r7, #32]
 80102fe:	685b      	ldr	r3, [r3, #4]
 8010300:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8010302:	4b23      	ldr	r3, [pc, #140]	; (8010390 <USER_SPI_ioctl+0x2dc>)
 8010304:	781b      	ldrb	r3, [r3, #0]
 8010306:	f003 0308 	and.w	r3, r3, #8
 801030a:	2b00      	cmp	r3, #0
 801030c:	d105      	bne.n	801031a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 801030e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010310:	025b      	lsls	r3, r3, #9
 8010312:	62bb      	str	r3, [r7, #40]	; 0x28
 8010314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010316:	025b      	lsls	r3, r3, #9
 8010318:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 801031a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801031c:	2020      	movs	r0, #32
 801031e:	f7ff fc78 	bl	800fc12 <send_cmd>
 8010322:	4603      	mov	r3, r0
 8010324:	2b00      	cmp	r3, #0
 8010326:	d128      	bne.n	801037a <USER_SPI_ioctl+0x2c6>
 8010328:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801032a:	2021      	movs	r0, #33	; 0x21
 801032c:	f7ff fc71 	bl	800fc12 <send_cmd>
 8010330:	4603      	mov	r3, r0
 8010332:	2b00      	cmp	r3, #0
 8010334:	d121      	bne.n	801037a <USER_SPI_ioctl+0x2c6>
 8010336:	2100      	movs	r1, #0
 8010338:	2026      	movs	r0, #38	; 0x26
 801033a:	f7ff fc6a 	bl	800fc12 <send_cmd>
 801033e:	4603      	mov	r3, r0
 8010340:	2b00      	cmp	r3, #0
 8010342:	d11a      	bne.n	801037a <USER_SPI_ioctl+0x2c6>
 8010344:	f247 5030 	movw	r0, #30000	; 0x7530
 8010348:	f7ff fbb9 	bl	800fabe <wait_ready>
 801034c:	4603      	mov	r3, r0
 801034e:	2b00      	cmp	r3, #0
 8010350:	d013      	beq.n	801037a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8010352:	2300      	movs	r3, #0
 8010354:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8010358:	e00f      	b.n	801037a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 801035a:	2304      	movs	r3, #4
 801035c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010360:	e00c      	b.n	801037c <USER_SPI_ioctl+0x2c8>
		break;
 8010362:	bf00      	nop
 8010364:	e00a      	b.n	801037c <USER_SPI_ioctl+0x2c8>
		break;
 8010366:	bf00      	nop
 8010368:	e008      	b.n	801037c <USER_SPI_ioctl+0x2c8>
		break;
 801036a:	bf00      	nop
 801036c:	e006      	b.n	801037c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 801036e:	bf00      	nop
 8010370:	e004      	b.n	801037c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8010372:	bf00      	nop
 8010374:	e002      	b.n	801037c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8010376:	bf00      	nop
 8010378:	e000      	b.n	801037c <USER_SPI_ioctl+0x2c8>
		break;
 801037a:	bf00      	nop
	}

	despiselect();
 801037c:	f7ff fbc2 	bl	800fb04 <despiselect>

	return res;
 8010380:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010384:	4618      	mov	r0, r3
 8010386:	3730      	adds	r7, #48	; 0x30
 8010388:	46bd      	mov	sp, r7
 801038a:	bd80      	pop	{r7, pc}
 801038c:	20000054 	.word	0x20000054
 8010390:	2000082e 	.word	0x2000082e

08010394 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010394:	b580      	push	{r7, lr}
 8010396:	b084      	sub	sp, #16
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
 801039c:	460b      	mov	r3, r1
 801039e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80103a0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80103a4:	f008 fb70 	bl	8018a88 <USBD_static_malloc>
 80103a8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d105      	bne.n	80103bc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	2200      	movs	r2, #0
 80103b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80103b8:	2302      	movs	r3, #2
 80103ba:	e066      	b.n	801048a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	68fa      	ldr	r2, [r7, #12]
 80103c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	7c1b      	ldrb	r3, [r3, #16]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d119      	bne.n	8010400 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80103cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80103d0:	2202      	movs	r2, #2
 80103d2:	2181      	movs	r1, #129	; 0x81
 80103d4:	6878      	ldr	r0, [r7, #4]
 80103d6:	f008 fa34 	bl	8018842 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	2201      	movs	r2, #1
 80103de:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80103e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80103e4:	2202      	movs	r2, #2
 80103e6:	2101      	movs	r1, #1
 80103e8:	6878      	ldr	r0, [r7, #4]
 80103ea:	f008 fa2a 	bl	8018842 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	2201      	movs	r2, #1
 80103f2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	2210      	movs	r2, #16
 80103fa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80103fe:	e016      	b.n	801042e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010400:	2340      	movs	r3, #64	; 0x40
 8010402:	2202      	movs	r2, #2
 8010404:	2181      	movs	r1, #129	; 0x81
 8010406:	6878      	ldr	r0, [r7, #4]
 8010408:	f008 fa1b 	bl	8018842 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2201      	movs	r2, #1
 8010410:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010412:	2340      	movs	r3, #64	; 0x40
 8010414:	2202      	movs	r2, #2
 8010416:	2101      	movs	r1, #1
 8010418:	6878      	ldr	r0, [r7, #4]
 801041a:	f008 fa12 	bl	8018842 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	2201      	movs	r2, #1
 8010422:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	2210      	movs	r2, #16
 801042a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801042e:	2308      	movs	r3, #8
 8010430:	2203      	movs	r2, #3
 8010432:	2182      	movs	r1, #130	; 0x82
 8010434:	6878      	ldr	r0, [r7, #4]
 8010436:	f008 fa04 	bl	8018842 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	2201      	movs	r2, #1
 801043e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	2200      	movs	r2, #0
 8010450:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	2200      	movs	r2, #0
 8010458:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	7c1b      	ldrb	r3, [r3, #16]
 8010460:	2b00      	cmp	r3, #0
 8010462:	d109      	bne.n	8010478 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801046a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801046e:	2101      	movs	r1, #1
 8010470:	6878      	ldr	r0, [r7, #4]
 8010472:	f008 fad5 	bl	8018a20 <USBD_LL_PrepareReceive>
 8010476:	e007      	b.n	8010488 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801047e:	2340      	movs	r3, #64	; 0x40
 8010480:	2101      	movs	r1, #1
 8010482:	6878      	ldr	r0, [r7, #4]
 8010484:	f008 facc 	bl	8018a20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010488:	2300      	movs	r3, #0
}
 801048a:	4618      	mov	r0, r3
 801048c:	3710      	adds	r7, #16
 801048e:	46bd      	mov	sp, r7
 8010490:	bd80      	pop	{r7, pc}

08010492 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010492:	b580      	push	{r7, lr}
 8010494:	b082      	sub	sp, #8
 8010496:	af00      	add	r7, sp, #0
 8010498:	6078      	str	r0, [r7, #4]
 801049a:	460b      	mov	r3, r1
 801049c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801049e:	2181      	movs	r1, #129	; 0x81
 80104a0:	6878      	ldr	r0, [r7, #4]
 80104a2:	f008 f9f4 	bl	801888e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	2200      	movs	r2, #0
 80104aa:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80104ac:	2101      	movs	r1, #1
 80104ae:	6878      	ldr	r0, [r7, #4]
 80104b0:	f008 f9ed 	bl	801888e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	2200      	movs	r2, #0
 80104b8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80104bc:	2182      	movs	r1, #130	; 0x82
 80104be:	6878      	ldr	r0, [r7, #4]
 80104c0:	f008 f9e5 	bl	801888e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	2200      	movs	r2, #0
 80104c8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	2200      	movs	r2, #0
 80104d0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d00e      	beq.n	80104fc <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80104e4:	685b      	ldr	r3, [r3, #4]
 80104e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80104ee:	4618      	mov	r0, r3
 80104f0:	f008 fad8 	bl	8018aa4 <USBD_static_free>
    pdev->pClassData = NULL;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	2200      	movs	r2, #0
 80104f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80104fc:	2300      	movs	r3, #0
}
 80104fe:	4618      	mov	r0, r3
 8010500:	3708      	adds	r7, #8
 8010502:	46bd      	mov	sp, r7
 8010504:	bd80      	pop	{r7, pc}
	...

08010508 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b086      	sub	sp, #24
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
 8010510:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010518:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801051a:	2300      	movs	r3, #0
 801051c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801051e:	2300      	movs	r3, #0
 8010520:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8010522:	2300      	movs	r3, #0
 8010524:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8010526:	693b      	ldr	r3, [r7, #16]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d101      	bne.n	8010530 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 801052c:	2303      	movs	r3, #3
 801052e:	e0af      	b.n	8010690 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010530:	683b      	ldr	r3, [r7, #0]
 8010532:	781b      	ldrb	r3, [r3, #0]
 8010534:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010538:	2b00      	cmp	r3, #0
 801053a:	d03f      	beq.n	80105bc <USBD_CDC_Setup+0xb4>
 801053c:	2b20      	cmp	r3, #32
 801053e:	f040 809f 	bne.w	8010680 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8010542:	683b      	ldr	r3, [r7, #0]
 8010544:	88db      	ldrh	r3, [r3, #6]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d02e      	beq.n	80105a8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801054a:	683b      	ldr	r3, [r7, #0]
 801054c:	781b      	ldrb	r3, [r3, #0]
 801054e:	b25b      	sxtb	r3, r3
 8010550:	2b00      	cmp	r3, #0
 8010552:	da16      	bge.n	8010582 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801055a:	689b      	ldr	r3, [r3, #8]
 801055c:	683a      	ldr	r2, [r7, #0]
 801055e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8010560:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010562:	683a      	ldr	r2, [r7, #0]
 8010564:	88d2      	ldrh	r2, [r2, #6]
 8010566:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8010568:	683b      	ldr	r3, [r7, #0]
 801056a:	88db      	ldrh	r3, [r3, #6]
 801056c:	2b07      	cmp	r3, #7
 801056e:	bf28      	it	cs
 8010570:	2307      	movcs	r3, #7
 8010572:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8010574:	693b      	ldr	r3, [r7, #16]
 8010576:	89fa      	ldrh	r2, [r7, #14]
 8010578:	4619      	mov	r1, r3
 801057a:	6878      	ldr	r0, [r7, #4]
 801057c:	f001 fae9 	bl	8011b52 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8010580:	e085      	b.n	801068e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8010582:	683b      	ldr	r3, [r7, #0]
 8010584:	785a      	ldrb	r2, [r3, #1]
 8010586:	693b      	ldr	r3, [r7, #16]
 8010588:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 801058c:	683b      	ldr	r3, [r7, #0]
 801058e:	88db      	ldrh	r3, [r3, #6]
 8010590:	b2da      	uxtb	r2, r3
 8010592:	693b      	ldr	r3, [r7, #16]
 8010594:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010598:	6939      	ldr	r1, [r7, #16]
 801059a:	683b      	ldr	r3, [r7, #0]
 801059c:	88db      	ldrh	r3, [r3, #6]
 801059e:	461a      	mov	r2, r3
 80105a0:	6878      	ldr	r0, [r7, #4]
 80105a2:	f001 fb02 	bl	8011baa <USBD_CtlPrepareRx>
      break;
 80105a6:	e072      	b.n	801068e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80105ae:	689b      	ldr	r3, [r3, #8]
 80105b0:	683a      	ldr	r2, [r7, #0]
 80105b2:	7850      	ldrb	r0, [r2, #1]
 80105b4:	2200      	movs	r2, #0
 80105b6:	6839      	ldr	r1, [r7, #0]
 80105b8:	4798      	blx	r3
      break;
 80105ba:	e068      	b.n	801068e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80105bc:	683b      	ldr	r3, [r7, #0]
 80105be:	785b      	ldrb	r3, [r3, #1]
 80105c0:	2b0b      	cmp	r3, #11
 80105c2:	d852      	bhi.n	801066a <USBD_CDC_Setup+0x162>
 80105c4:	a201      	add	r2, pc, #4	; (adr r2, 80105cc <USBD_CDC_Setup+0xc4>)
 80105c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105ca:	bf00      	nop
 80105cc:	080105fd 	.word	0x080105fd
 80105d0:	08010679 	.word	0x08010679
 80105d4:	0801066b 	.word	0x0801066b
 80105d8:	0801066b 	.word	0x0801066b
 80105dc:	0801066b 	.word	0x0801066b
 80105e0:	0801066b 	.word	0x0801066b
 80105e4:	0801066b 	.word	0x0801066b
 80105e8:	0801066b 	.word	0x0801066b
 80105ec:	0801066b 	.word	0x0801066b
 80105f0:	0801066b 	.word	0x0801066b
 80105f4:	08010627 	.word	0x08010627
 80105f8:	08010651 	.word	0x08010651
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010602:	b2db      	uxtb	r3, r3
 8010604:	2b03      	cmp	r3, #3
 8010606:	d107      	bne.n	8010618 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010608:	f107 030a 	add.w	r3, r7, #10
 801060c:	2202      	movs	r2, #2
 801060e:	4619      	mov	r1, r3
 8010610:	6878      	ldr	r0, [r7, #4]
 8010612:	f001 fa9e 	bl	8011b52 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010616:	e032      	b.n	801067e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8010618:	6839      	ldr	r1, [r7, #0]
 801061a:	6878      	ldr	r0, [r7, #4]
 801061c:	f001 fa28 	bl	8011a70 <USBD_CtlError>
            ret = USBD_FAIL;
 8010620:	2303      	movs	r3, #3
 8010622:	75fb      	strb	r3, [r7, #23]
          break;
 8010624:	e02b      	b.n	801067e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801062c:	b2db      	uxtb	r3, r3
 801062e:	2b03      	cmp	r3, #3
 8010630:	d107      	bne.n	8010642 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010632:	f107 030d 	add.w	r3, r7, #13
 8010636:	2201      	movs	r2, #1
 8010638:	4619      	mov	r1, r3
 801063a:	6878      	ldr	r0, [r7, #4]
 801063c:	f001 fa89 	bl	8011b52 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010640:	e01d      	b.n	801067e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8010642:	6839      	ldr	r1, [r7, #0]
 8010644:	6878      	ldr	r0, [r7, #4]
 8010646:	f001 fa13 	bl	8011a70 <USBD_CtlError>
            ret = USBD_FAIL;
 801064a:	2303      	movs	r3, #3
 801064c:	75fb      	strb	r3, [r7, #23]
          break;
 801064e:	e016      	b.n	801067e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010656:	b2db      	uxtb	r3, r3
 8010658:	2b03      	cmp	r3, #3
 801065a:	d00f      	beq.n	801067c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 801065c:	6839      	ldr	r1, [r7, #0]
 801065e:	6878      	ldr	r0, [r7, #4]
 8010660:	f001 fa06 	bl	8011a70 <USBD_CtlError>
            ret = USBD_FAIL;
 8010664:	2303      	movs	r3, #3
 8010666:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010668:	e008      	b.n	801067c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801066a:	6839      	ldr	r1, [r7, #0]
 801066c:	6878      	ldr	r0, [r7, #4]
 801066e:	f001 f9ff 	bl	8011a70 <USBD_CtlError>
          ret = USBD_FAIL;
 8010672:	2303      	movs	r3, #3
 8010674:	75fb      	strb	r3, [r7, #23]
          break;
 8010676:	e002      	b.n	801067e <USBD_CDC_Setup+0x176>
          break;
 8010678:	bf00      	nop
 801067a:	e008      	b.n	801068e <USBD_CDC_Setup+0x186>
          break;
 801067c:	bf00      	nop
      }
      break;
 801067e:	e006      	b.n	801068e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8010680:	6839      	ldr	r1, [r7, #0]
 8010682:	6878      	ldr	r0, [r7, #4]
 8010684:	f001 f9f4 	bl	8011a70 <USBD_CtlError>
      ret = USBD_FAIL;
 8010688:	2303      	movs	r3, #3
 801068a:	75fb      	strb	r3, [r7, #23]
      break;
 801068c:	bf00      	nop
  }

  return (uint8_t)ret;
 801068e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010690:	4618      	mov	r0, r3
 8010692:	3718      	adds	r7, #24
 8010694:	46bd      	mov	sp, r7
 8010696:	bd80      	pop	{r7, pc}

08010698 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010698:	b580      	push	{r7, lr}
 801069a:	b084      	sub	sp, #16
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
 80106a0:	460b      	mov	r3, r1
 80106a2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80106aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d101      	bne.n	80106ba <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80106b6:	2303      	movs	r3, #3
 80106b8:	e04f      	b.n	801075a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80106c0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80106c2:	78fa      	ldrb	r2, [r7, #3]
 80106c4:	6879      	ldr	r1, [r7, #4]
 80106c6:	4613      	mov	r3, r2
 80106c8:	009b      	lsls	r3, r3, #2
 80106ca:	4413      	add	r3, r2
 80106cc:	009b      	lsls	r3, r3, #2
 80106ce:	440b      	add	r3, r1
 80106d0:	3318      	adds	r3, #24
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d029      	beq.n	801072c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80106d8:	78fa      	ldrb	r2, [r7, #3]
 80106da:	6879      	ldr	r1, [r7, #4]
 80106dc:	4613      	mov	r3, r2
 80106de:	009b      	lsls	r3, r3, #2
 80106e0:	4413      	add	r3, r2
 80106e2:	009b      	lsls	r3, r3, #2
 80106e4:	440b      	add	r3, r1
 80106e6:	3318      	adds	r3, #24
 80106e8:	681a      	ldr	r2, [r3, #0]
 80106ea:	78f9      	ldrb	r1, [r7, #3]
 80106ec:	68f8      	ldr	r0, [r7, #12]
 80106ee:	460b      	mov	r3, r1
 80106f0:	00db      	lsls	r3, r3, #3
 80106f2:	1a5b      	subs	r3, r3, r1
 80106f4:	009b      	lsls	r3, r3, #2
 80106f6:	4403      	add	r3, r0
 80106f8:	3344      	adds	r3, #68	; 0x44
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	fbb2 f1f3 	udiv	r1, r2, r3
 8010700:	fb03 f301 	mul.w	r3, r3, r1
 8010704:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010706:	2b00      	cmp	r3, #0
 8010708:	d110      	bne.n	801072c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801070a:	78fa      	ldrb	r2, [r7, #3]
 801070c:	6879      	ldr	r1, [r7, #4]
 801070e:	4613      	mov	r3, r2
 8010710:	009b      	lsls	r3, r3, #2
 8010712:	4413      	add	r3, r2
 8010714:	009b      	lsls	r3, r3, #2
 8010716:	440b      	add	r3, r1
 8010718:	3318      	adds	r3, #24
 801071a:	2200      	movs	r2, #0
 801071c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801071e:	78f9      	ldrb	r1, [r7, #3]
 8010720:	2300      	movs	r3, #0
 8010722:	2200      	movs	r2, #0
 8010724:	6878      	ldr	r0, [r7, #4]
 8010726:	f008 f95a 	bl	80189de <USBD_LL_Transmit>
 801072a:	e015      	b.n	8010758 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 801072c:	68bb      	ldr	r3, [r7, #8]
 801072e:	2200      	movs	r2, #0
 8010730:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801073a:	691b      	ldr	r3, [r3, #16]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d00b      	beq.n	8010758 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010746:	691b      	ldr	r3, [r3, #16]
 8010748:	68ba      	ldr	r2, [r7, #8]
 801074a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801074e:	68ba      	ldr	r2, [r7, #8]
 8010750:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8010754:	78fa      	ldrb	r2, [r7, #3]
 8010756:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010758:	2300      	movs	r3, #0
}
 801075a:	4618      	mov	r0, r3
 801075c:	3710      	adds	r7, #16
 801075e:	46bd      	mov	sp, r7
 8010760:	bd80      	pop	{r7, pc}

08010762 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010762:	b580      	push	{r7, lr}
 8010764:	b084      	sub	sp, #16
 8010766:	af00      	add	r7, sp, #0
 8010768:	6078      	str	r0, [r7, #4]
 801076a:	460b      	mov	r3, r1
 801076c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010774:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801077c:	2b00      	cmp	r3, #0
 801077e:	d101      	bne.n	8010784 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010780:	2303      	movs	r3, #3
 8010782:	e015      	b.n	80107b0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010784:	78fb      	ldrb	r3, [r7, #3]
 8010786:	4619      	mov	r1, r3
 8010788:	6878      	ldr	r0, [r7, #4]
 801078a:	f008 f96a 	bl	8018a62 <USBD_LL_GetRxDataSize>
 801078e:	4602      	mov	r2, r0
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801079c:	68db      	ldr	r3, [r3, #12]
 801079e:	68fa      	ldr	r2, [r7, #12]
 80107a0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80107a4:	68fa      	ldr	r2, [r7, #12]
 80107a6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80107aa:	4611      	mov	r1, r2
 80107ac:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80107ae:	2300      	movs	r3, #0
}
 80107b0:	4618      	mov	r0, r3
 80107b2:	3710      	adds	r7, #16
 80107b4:	46bd      	mov	sp, r7
 80107b6:	bd80      	pop	{r7, pc}

080107b8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80107b8:	b580      	push	{r7, lr}
 80107ba:	b084      	sub	sp, #16
 80107bc:	af00      	add	r7, sp, #0
 80107be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80107c6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d101      	bne.n	80107d2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80107ce:	2303      	movs	r3, #3
 80107d0:	e01b      	b.n	801080a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d015      	beq.n	8010808 <USBD_CDC_EP0_RxReady+0x50>
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80107e2:	2bff      	cmp	r3, #255	; 0xff
 80107e4:	d010      	beq.n	8010808 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80107ec:	689b      	ldr	r3, [r3, #8]
 80107ee:	68fa      	ldr	r2, [r7, #12]
 80107f0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80107f4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80107f6:	68fa      	ldr	r2, [r7, #12]
 80107f8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80107fc:	b292      	uxth	r2, r2
 80107fe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	22ff      	movs	r2, #255	; 0xff
 8010804:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8010808:	2300      	movs	r3, #0
}
 801080a:	4618      	mov	r0, r3
 801080c:	3710      	adds	r7, #16
 801080e:	46bd      	mov	sp, r7
 8010810:	bd80      	pop	{r7, pc}
	...

08010814 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010814:	b480      	push	{r7}
 8010816:	b083      	sub	sp, #12
 8010818:	af00      	add	r7, sp, #0
 801081a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	2243      	movs	r2, #67	; 0x43
 8010820:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8010822:	4b03      	ldr	r3, [pc, #12]	; (8010830 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8010824:	4618      	mov	r0, r3
 8010826:	370c      	adds	r7, #12
 8010828:	46bd      	mov	sp, r7
 801082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082e:	4770      	bx	lr
 8010830:	200000e0 	.word	0x200000e0

08010834 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010834:	b480      	push	{r7}
 8010836:	b083      	sub	sp, #12
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	2243      	movs	r2, #67	; 0x43
 8010840:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8010842:	4b03      	ldr	r3, [pc, #12]	; (8010850 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8010844:	4618      	mov	r0, r3
 8010846:	370c      	adds	r7, #12
 8010848:	46bd      	mov	sp, r7
 801084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084e:	4770      	bx	lr
 8010850:	2000009c 	.word	0x2000009c

08010854 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010854:	b480      	push	{r7}
 8010856:	b083      	sub	sp, #12
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	2243      	movs	r2, #67	; 0x43
 8010860:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8010862:	4b03      	ldr	r3, [pc, #12]	; (8010870 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8010864:	4618      	mov	r0, r3
 8010866:	370c      	adds	r7, #12
 8010868:	46bd      	mov	sp, r7
 801086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086e:	4770      	bx	lr
 8010870:	20000124 	.word	0x20000124

08010874 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010874:	b480      	push	{r7}
 8010876:	b083      	sub	sp, #12
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	220a      	movs	r2, #10
 8010880:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8010882:	4b03      	ldr	r3, [pc, #12]	; (8010890 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010884:	4618      	mov	r0, r3
 8010886:	370c      	adds	r7, #12
 8010888:	46bd      	mov	sp, r7
 801088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088e:	4770      	bx	lr
 8010890:	20000058 	.word	0x20000058

08010894 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010894:	b480      	push	{r7}
 8010896:	b083      	sub	sp, #12
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
 801089c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801089e:	683b      	ldr	r3, [r7, #0]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d101      	bne.n	80108a8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80108a4:	2303      	movs	r3, #3
 80108a6:	e004      	b.n	80108b2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	683a      	ldr	r2, [r7, #0]
 80108ac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80108b0:	2300      	movs	r3, #0
}
 80108b2:	4618      	mov	r0, r3
 80108b4:	370c      	adds	r7, #12
 80108b6:	46bd      	mov	sp, r7
 80108b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108bc:	4770      	bx	lr

080108be <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80108be:	b480      	push	{r7}
 80108c0:	b087      	sub	sp, #28
 80108c2:	af00      	add	r7, sp, #0
 80108c4:	60f8      	str	r0, [r7, #12]
 80108c6:	60b9      	str	r1, [r7, #8]
 80108c8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80108d0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80108d2:	697b      	ldr	r3, [r7, #20]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d101      	bne.n	80108dc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80108d8:	2303      	movs	r3, #3
 80108da:	e008      	b.n	80108ee <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80108dc:	697b      	ldr	r3, [r7, #20]
 80108de:	68ba      	ldr	r2, [r7, #8]
 80108e0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80108e4:	697b      	ldr	r3, [r7, #20]
 80108e6:	687a      	ldr	r2, [r7, #4]
 80108e8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80108ec:	2300      	movs	r3, #0
}
 80108ee:	4618      	mov	r0, r3
 80108f0:	371c      	adds	r7, #28
 80108f2:	46bd      	mov	sp, r7
 80108f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f8:	4770      	bx	lr

080108fa <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80108fa:	b480      	push	{r7}
 80108fc:	b085      	sub	sp, #20
 80108fe:	af00      	add	r7, sp, #0
 8010900:	6078      	str	r0, [r7, #4]
 8010902:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801090a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d101      	bne.n	8010916 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8010912:	2303      	movs	r3, #3
 8010914:	e004      	b.n	8010920 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	683a      	ldr	r2, [r7, #0]
 801091a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801091e:	2300      	movs	r3, #0
}
 8010920:	4618      	mov	r0, r3
 8010922:	3714      	adds	r7, #20
 8010924:	46bd      	mov	sp, r7
 8010926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092a:	4770      	bx	lr

0801092c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b084      	sub	sp, #16
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801093a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010942:	2b00      	cmp	r3, #0
 8010944:	d101      	bne.n	801094a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8010946:	2303      	movs	r3, #3
 8010948:	e016      	b.n	8010978 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	7c1b      	ldrb	r3, [r3, #16]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d109      	bne.n	8010966 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010958:	f44f 7300 	mov.w	r3, #512	; 0x200
 801095c:	2101      	movs	r1, #1
 801095e:	6878      	ldr	r0, [r7, #4]
 8010960:	f008 f85e 	bl	8018a20 <USBD_LL_PrepareReceive>
 8010964:	e007      	b.n	8010976 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801096c:	2340      	movs	r3, #64	; 0x40
 801096e:	2101      	movs	r1, #1
 8010970:	6878      	ldr	r0, [r7, #4]
 8010972:	f008 f855 	bl	8018a20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010976:	2300      	movs	r3, #0
}
 8010978:	4618      	mov	r0, r3
 801097a:	3710      	adds	r7, #16
 801097c:	46bd      	mov	sp, r7
 801097e:	bd80      	pop	{r7, pc}

08010980 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b086      	sub	sp, #24
 8010984:	af00      	add	r7, sp, #0
 8010986:	60f8      	str	r0, [r7, #12]
 8010988:	60b9      	str	r1, [r7, #8]
 801098a:	4613      	mov	r3, r2
 801098c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	2b00      	cmp	r3, #0
 8010992:	d101      	bne.n	8010998 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8010994:	2303      	movs	r3, #3
 8010996:	e01f      	b.n	80109d8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	2200      	movs	r2, #0
 801099c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	2200      	movs	r2, #0
 80109a4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	2200      	movs	r2, #0
 80109ac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80109b0:	68bb      	ldr	r3, [r7, #8]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d003      	beq.n	80109be <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	68ba      	ldr	r2, [r7, #8]
 80109ba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	2201      	movs	r2, #1
 80109c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	79fa      	ldrb	r2, [r7, #7]
 80109ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80109cc:	68f8      	ldr	r0, [r7, #12]
 80109ce:	f007 fed1 	bl	8018774 <USBD_LL_Init>
 80109d2:	4603      	mov	r3, r0
 80109d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80109d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80109d8:	4618      	mov	r0, r3
 80109da:	3718      	adds	r7, #24
 80109dc:	46bd      	mov	sp, r7
 80109de:	bd80      	pop	{r7, pc}

080109e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b084      	sub	sp, #16
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
 80109e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80109ea:	2300      	movs	r3, #0
 80109ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80109ee:	683b      	ldr	r3, [r7, #0]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d101      	bne.n	80109f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80109f4:	2303      	movs	r3, #3
 80109f6:	e016      	b.n	8010a26 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	683a      	ldr	r2, [r7, #0]
 80109fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d00b      	beq.n	8010a24 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a14:	f107 020e 	add.w	r2, r7, #14
 8010a18:	4610      	mov	r0, r2
 8010a1a:	4798      	blx	r3
 8010a1c:	4602      	mov	r2, r0
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8010a24:	2300      	movs	r3, #0
}
 8010a26:	4618      	mov	r0, r3
 8010a28:	3710      	adds	r7, #16
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	bd80      	pop	{r7, pc}

08010a2e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010a2e:	b580      	push	{r7, lr}
 8010a30:	b082      	sub	sp, #8
 8010a32:	af00      	add	r7, sp, #0
 8010a34:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010a36:	6878      	ldr	r0, [r7, #4]
 8010a38:	f007 fee8 	bl	801880c <USBD_LL_Start>
 8010a3c:	4603      	mov	r3, r0
}
 8010a3e:	4618      	mov	r0, r3
 8010a40:	3708      	adds	r7, #8
 8010a42:	46bd      	mov	sp, r7
 8010a44:	bd80      	pop	{r7, pc}

08010a46 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8010a46:	b480      	push	{r7}
 8010a48:	b083      	sub	sp, #12
 8010a4a:	af00      	add	r7, sp, #0
 8010a4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010a4e:	2300      	movs	r3, #0
}
 8010a50:	4618      	mov	r0, r3
 8010a52:	370c      	adds	r7, #12
 8010a54:	46bd      	mov	sp, r7
 8010a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a5a:	4770      	bx	lr

08010a5c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b084      	sub	sp, #16
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
 8010a64:	460b      	mov	r3, r1
 8010a66:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8010a68:	2303      	movs	r3, #3
 8010a6a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d009      	beq.n	8010a8a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	78fa      	ldrb	r2, [r7, #3]
 8010a80:	4611      	mov	r1, r2
 8010a82:	6878      	ldr	r0, [r7, #4]
 8010a84:	4798      	blx	r3
 8010a86:	4603      	mov	r3, r0
 8010a88:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8010a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	3710      	adds	r7, #16
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bd80      	pop	{r7, pc}

08010a94 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b082      	sub	sp, #8
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
 8010a9c:	460b      	mov	r3, r1
 8010a9e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d007      	beq.n	8010aba <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ab0:	685b      	ldr	r3, [r3, #4]
 8010ab2:	78fa      	ldrb	r2, [r7, #3]
 8010ab4:	4611      	mov	r1, r2
 8010ab6:	6878      	ldr	r0, [r7, #4]
 8010ab8:	4798      	blx	r3
  }

  return USBD_OK;
 8010aba:	2300      	movs	r3, #0
}
 8010abc:	4618      	mov	r0, r3
 8010abe:	3708      	adds	r7, #8
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	bd80      	pop	{r7, pc}

08010ac4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b084      	sub	sp, #16
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
 8010acc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010ad4:	6839      	ldr	r1, [r7, #0]
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	f000 ff90 	bl	80119fc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2201      	movs	r2, #1
 8010ae0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8010aea:	461a      	mov	r2, r3
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010af8:	f003 031f 	and.w	r3, r3, #31
 8010afc:	2b02      	cmp	r3, #2
 8010afe:	d01a      	beq.n	8010b36 <USBD_LL_SetupStage+0x72>
 8010b00:	2b02      	cmp	r3, #2
 8010b02:	d822      	bhi.n	8010b4a <USBD_LL_SetupStage+0x86>
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d002      	beq.n	8010b0e <USBD_LL_SetupStage+0x4a>
 8010b08:	2b01      	cmp	r3, #1
 8010b0a:	d00a      	beq.n	8010b22 <USBD_LL_SetupStage+0x5e>
 8010b0c:	e01d      	b.n	8010b4a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010b14:	4619      	mov	r1, r3
 8010b16:	6878      	ldr	r0, [r7, #4]
 8010b18:	f000 fa62 	bl	8010fe0 <USBD_StdDevReq>
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8010b20:	e020      	b.n	8010b64 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010b28:	4619      	mov	r1, r3
 8010b2a:	6878      	ldr	r0, [r7, #4]
 8010b2c:	f000 fac6 	bl	80110bc <USBD_StdItfReq>
 8010b30:	4603      	mov	r3, r0
 8010b32:	73fb      	strb	r3, [r7, #15]
      break;
 8010b34:	e016      	b.n	8010b64 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010b3c:	4619      	mov	r1, r3
 8010b3e:	6878      	ldr	r0, [r7, #4]
 8010b40:	f000 fb05 	bl	801114e <USBD_StdEPReq>
 8010b44:	4603      	mov	r3, r0
 8010b46:	73fb      	strb	r3, [r7, #15]
      break;
 8010b48:	e00c      	b.n	8010b64 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010b50:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010b54:	b2db      	uxtb	r3, r3
 8010b56:	4619      	mov	r1, r3
 8010b58:	6878      	ldr	r0, [r7, #4]
 8010b5a:	f007 feb7 	bl	80188cc <USBD_LL_StallEP>
 8010b5e:	4603      	mov	r3, r0
 8010b60:	73fb      	strb	r3, [r7, #15]
      break;
 8010b62:	bf00      	nop
  }

  return ret;
 8010b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b66:	4618      	mov	r0, r3
 8010b68:	3710      	adds	r7, #16
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	bd80      	pop	{r7, pc}

08010b6e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010b6e:	b580      	push	{r7, lr}
 8010b70:	b086      	sub	sp, #24
 8010b72:	af00      	add	r7, sp, #0
 8010b74:	60f8      	str	r0, [r7, #12]
 8010b76:	460b      	mov	r3, r1
 8010b78:	607a      	str	r2, [r7, #4]
 8010b7a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010b7c:	7afb      	ldrb	r3, [r7, #11]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d138      	bne.n	8010bf4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8010b88:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010b90:	2b03      	cmp	r3, #3
 8010b92:	d14a      	bne.n	8010c2a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8010b94:	693b      	ldr	r3, [r7, #16]
 8010b96:	689a      	ldr	r2, [r3, #8]
 8010b98:	693b      	ldr	r3, [r7, #16]
 8010b9a:	68db      	ldr	r3, [r3, #12]
 8010b9c:	429a      	cmp	r2, r3
 8010b9e:	d913      	bls.n	8010bc8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010ba0:	693b      	ldr	r3, [r7, #16]
 8010ba2:	689a      	ldr	r2, [r3, #8]
 8010ba4:	693b      	ldr	r3, [r7, #16]
 8010ba6:	68db      	ldr	r3, [r3, #12]
 8010ba8:	1ad2      	subs	r2, r2, r3
 8010baa:	693b      	ldr	r3, [r7, #16]
 8010bac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010bae:	693b      	ldr	r3, [r7, #16]
 8010bb0:	68da      	ldr	r2, [r3, #12]
 8010bb2:	693b      	ldr	r3, [r7, #16]
 8010bb4:	689b      	ldr	r3, [r3, #8]
 8010bb6:	4293      	cmp	r3, r2
 8010bb8:	bf28      	it	cs
 8010bba:	4613      	movcs	r3, r2
 8010bbc:	461a      	mov	r2, r3
 8010bbe:	6879      	ldr	r1, [r7, #4]
 8010bc0:	68f8      	ldr	r0, [r7, #12]
 8010bc2:	f001 f80f 	bl	8011be4 <USBD_CtlContinueRx>
 8010bc6:	e030      	b.n	8010c2a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010bce:	b2db      	uxtb	r3, r3
 8010bd0:	2b03      	cmp	r3, #3
 8010bd2:	d10b      	bne.n	8010bec <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010bda:	691b      	ldr	r3, [r3, #16]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d005      	beq.n	8010bec <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010be6:	691b      	ldr	r3, [r3, #16]
 8010be8:	68f8      	ldr	r0, [r7, #12]
 8010bea:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010bec:	68f8      	ldr	r0, [r7, #12]
 8010bee:	f001 f80a 	bl	8011c06 <USBD_CtlSendStatus>
 8010bf2:	e01a      	b.n	8010c2a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010bfa:	b2db      	uxtb	r3, r3
 8010bfc:	2b03      	cmp	r3, #3
 8010bfe:	d114      	bne.n	8010c2a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c06:	699b      	ldr	r3, [r3, #24]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d00e      	beq.n	8010c2a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c12:	699b      	ldr	r3, [r3, #24]
 8010c14:	7afa      	ldrb	r2, [r7, #11]
 8010c16:	4611      	mov	r1, r2
 8010c18:	68f8      	ldr	r0, [r7, #12]
 8010c1a:	4798      	blx	r3
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010c20:	7dfb      	ldrb	r3, [r7, #23]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d001      	beq.n	8010c2a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8010c26:	7dfb      	ldrb	r3, [r7, #23]
 8010c28:	e000      	b.n	8010c2c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8010c2a:	2300      	movs	r3, #0
}
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	3718      	adds	r7, #24
 8010c30:	46bd      	mov	sp, r7
 8010c32:	bd80      	pop	{r7, pc}

08010c34 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b086      	sub	sp, #24
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	60f8      	str	r0, [r7, #12]
 8010c3c:	460b      	mov	r3, r1
 8010c3e:	607a      	str	r2, [r7, #4]
 8010c40:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010c42:	7afb      	ldrb	r3, [r7, #11]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d16b      	bne.n	8010d20 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	3314      	adds	r3, #20
 8010c4c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010c54:	2b02      	cmp	r3, #2
 8010c56:	d156      	bne.n	8010d06 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8010c58:	693b      	ldr	r3, [r7, #16]
 8010c5a:	689a      	ldr	r2, [r3, #8]
 8010c5c:	693b      	ldr	r3, [r7, #16]
 8010c5e:	68db      	ldr	r3, [r3, #12]
 8010c60:	429a      	cmp	r2, r3
 8010c62:	d914      	bls.n	8010c8e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010c64:	693b      	ldr	r3, [r7, #16]
 8010c66:	689a      	ldr	r2, [r3, #8]
 8010c68:	693b      	ldr	r3, [r7, #16]
 8010c6a:	68db      	ldr	r3, [r3, #12]
 8010c6c:	1ad2      	subs	r2, r2, r3
 8010c6e:	693b      	ldr	r3, [r7, #16]
 8010c70:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010c72:	693b      	ldr	r3, [r7, #16]
 8010c74:	689b      	ldr	r3, [r3, #8]
 8010c76:	461a      	mov	r2, r3
 8010c78:	6879      	ldr	r1, [r7, #4]
 8010c7a:	68f8      	ldr	r0, [r7, #12]
 8010c7c:	f000 ff84 	bl	8011b88 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010c80:	2300      	movs	r3, #0
 8010c82:	2200      	movs	r2, #0
 8010c84:	2100      	movs	r1, #0
 8010c86:	68f8      	ldr	r0, [r7, #12]
 8010c88:	f007 feca 	bl	8018a20 <USBD_LL_PrepareReceive>
 8010c8c:	e03b      	b.n	8010d06 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010c8e:	693b      	ldr	r3, [r7, #16]
 8010c90:	68da      	ldr	r2, [r3, #12]
 8010c92:	693b      	ldr	r3, [r7, #16]
 8010c94:	689b      	ldr	r3, [r3, #8]
 8010c96:	429a      	cmp	r2, r3
 8010c98:	d11c      	bne.n	8010cd4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010c9a:	693b      	ldr	r3, [r7, #16]
 8010c9c:	685a      	ldr	r2, [r3, #4]
 8010c9e:	693b      	ldr	r3, [r7, #16]
 8010ca0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010ca2:	429a      	cmp	r2, r3
 8010ca4:	d316      	bcc.n	8010cd4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010ca6:	693b      	ldr	r3, [r7, #16]
 8010ca8:	685a      	ldr	r2, [r3, #4]
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010cb0:	429a      	cmp	r2, r3
 8010cb2:	d20f      	bcs.n	8010cd4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010cb4:	2200      	movs	r2, #0
 8010cb6:	2100      	movs	r1, #0
 8010cb8:	68f8      	ldr	r0, [r7, #12]
 8010cba:	f000 ff65 	bl	8011b88 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	2200      	movs	r2, #0
 8010cc2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	2200      	movs	r2, #0
 8010cca:	2100      	movs	r1, #0
 8010ccc:	68f8      	ldr	r0, [r7, #12]
 8010cce:	f007 fea7 	bl	8018a20 <USBD_LL_PrepareReceive>
 8010cd2:	e018      	b.n	8010d06 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010cda:	b2db      	uxtb	r3, r3
 8010cdc:	2b03      	cmp	r3, #3
 8010cde:	d10b      	bne.n	8010cf8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ce6:	68db      	ldr	r3, [r3, #12]
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d005      	beq.n	8010cf8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010cf2:	68db      	ldr	r3, [r3, #12]
 8010cf4:	68f8      	ldr	r0, [r7, #12]
 8010cf6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010cf8:	2180      	movs	r1, #128	; 0x80
 8010cfa:	68f8      	ldr	r0, [r7, #12]
 8010cfc:	f007 fde6 	bl	80188cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010d00:	68f8      	ldr	r0, [r7, #12]
 8010d02:	f000 ff93 	bl	8011c2c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010d0c:	2b01      	cmp	r3, #1
 8010d0e:	d122      	bne.n	8010d56 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8010d10:	68f8      	ldr	r0, [r7, #12]
 8010d12:	f7ff fe98 	bl	8010a46 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	2200      	movs	r2, #0
 8010d1a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8010d1e:	e01a      	b.n	8010d56 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d26:	b2db      	uxtb	r3, r3
 8010d28:	2b03      	cmp	r3, #3
 8010d2a:	d114      	bne.n	8010d56 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010d32:	695b      	ldr	r3, [r3, #20]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d00e      	beq.n	8010d56 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010d3e:	695b      	ldr	r3, [r3, #20]
 8010d40:	7afa      	ldrb	r2, [r7, #11]
 8010d42:	4611      	mov	r1, r2
 8010d44:	68f8      	ldr	r0, [r7, #12]
 8010d46:	4798      	blx	r3
 8010d48:	4603      	mov	r3, r0
 8010d4a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010d4c:	7dfb      	ldrb	r3, [r7, #23]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d001      	beq.n	8010d56 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8010d52:	7dfb      	ldrb	r3, [r7, #23]
 8010d54:	e000      	b.n	8010d58 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8010d56:	2300      	movs	r3, #0
}
 8010d58:	4618      	mov	r0, r3
 8010d5a:	3718      	adds	r7, #24
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	bd80      	pop	{r7, pc}

08010d60 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	b082      	sub	sp, #8
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	2201      	movs	r2, #1
 8010d6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	2200      	movs	r2, #0
 8010d74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	2200      	movs	r2, #0
 8010d7c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	2200      	movs	r2, #0
 8010d82:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d101      	bne.n	8010d94 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8010d90:	2303      	movs	r3, #3
 8010d92:	e02f      	b.n	8010df4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d00f      	beq.n	8010dbe <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010da4:	685b      	ldr	r3, [r3, #4]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d009      	beq.n	8010dbe <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010db0:	685b      	ldr	r3, [r3, #4]
 8010db2:	687a      	ldr	r2, [r7, #4]
 8010db4:	6852      	ldr	r2, [r2, #4]
 8010db6:	b2d2      	uxtb	r2, r2
 8010db8:	4611      	mov	r1, r2
 8010dba:	6878      	ldr	r0, [r7, #4]
 8010dbc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010dbe:	2340      	movs	r3, #64	; 0x40
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	2100      	movs	r1, #0
 8010dc4:	6878      	ldr	r0, [r7, #4]
 8010dc6:	f007 fd3c 	bl	8018842 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	2201      	movs	r2, #1
 8010dce:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	2240      	movs	r2, #64	; 0x40
 8010dd6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010dda:	2340      	movs	r3, #64	; 0x40
 8010ddc:	2200      	movs	r2, #0
 8010dde:	2180      	movs	r1, #128	; 0x80
 8010de0:	6878      	ldr	r0, [r7, #4]
 8010de2:	f007 fd2e 	bl	8018842 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	2201      	movs	r2, #1
 8010dea:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	2240      	movs	r2, #64	; 0x40
 8010df0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8010df2:	2300      	movs	r3, #0
}
 8010df4:	4618      	mov	r0, r3
 8010df6:	3708      	adds	r7, #8
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bd80      	pop	{r7, pc}

08010dfc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010dfc:	b480      	push	{r7}
 8010dfe:	b083      	sub	sp, #12
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
 8010e04:	460b      	mov	r3, r1
 8010e06:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	78fa      	ldrb	r2, [r7, #3]
 8010e0c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010e0e:	2300      	movs	r3, #0
}
 8010e10:	4618      	mov	r0, r3
 8010e12:	370c      	adds	r7, #12
 8010e14:	46bd      	mov	sp, r7
 8010e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1a:	4770      	bx	lr

08010e1c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010e1c:	b480      	push	{r7}
 8010e1e:	b083      	sub	sp, #12
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e2a:	b2da      	uxtb	r2, r3
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	2204      	movs	r2, #4
 8010e36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8010e3a:	2300      	movs	r3, #0
}
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	370c      	adds	r7, #12
 8010e40:	46bd      	mov	sp, r7
 8010e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e46:	4770      	bx	lr

08010e48 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010e48:	b480      	push	{r7}
 8010e4a:	b083      	sub	sp, #12
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e56:	b2db      	uxtb	r3, r3
 8010e58:	2b04      	cmp	r3, #4
 8010e5a:	d106      	bne.n	8010e6a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8010e62:	b2da      	uxtb	r2, r3
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8010e6a:	2300      	movs	r3, #0
}
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	370c      	adds	r7, #12
 8010e70:	46bd      	mov	sp, r7
 8010e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e76:	4770      	bx	lr

08010e78 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b082      	sub	sp, #8
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d101      	bne.n	8010e8e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8010e8a:	2303      	movs	r3, #3
 8010e8c:	e012      	b.n	8010eb4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e94:	b2db      	uxtb	r3, r3
 8010e96:	2b03      	cmp	r3, #3
 8010e98:	d10b      	bne.n	8010eb2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ea0:	69db      	ldr	r3, [r3, #28]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d005      	beq.n	8010eb2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010eac:	69db      	ldr	r3, [r3, #28]
 8010eae:	6878      	ldr	r0, [r7, #4]
 8010eb0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010eb2:	2300      	movs	r3, #0
}
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	3708      	adds	r7, #8
 8010eb8:	46bd      	mov	sp, r7
 8010eba:	bd80      	pop	{r7, pc}

08010ebc <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010ebc:	b580      	push	{r7, lr}
 8010ebe:	b082      	sub	sp, #8
 8010ec0:	af00      	add	r7, sp, #0
 8010ec2:	6078      	str	r0, [r7, #4]
 8010ec4:	460b      	mov	r3, r1
 8010ec6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d101      	bne.n	8010ed6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8010ed2:	2303      	movs	r3, #3
 8010ed4:	e014      	b.n	8010f00 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010edc:	b2db      	uxtb	r3, r3
 8010ede:	2b03      	cmp	r3, #3
 8010ee0:	d10d      	bne.n	8010efe <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ee8:	6a1b      	ldr	r3, [r3, #32]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d007      	beq.n	8010efe <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ef4:	6a1b      	ldr	r3, [r3, #32]
 8010ef6:	78fa      	ldrb	r2, [r7, #3]
 8010ef8:	4611      	mov	r1, r2
 8010efa:	6878      	ldr	r0, [r7, #4]
 8010efc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010efe:	2300      	movs	r3, #0
}
 8010f00:	4618      	mov	r0, r3
 8010f02:	3708      	adds	r7, #8
 8010f04:	46bd      	mov	sp, r7
 8010f06:	bd80      	pop	{r7, pc}

08010f08 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b082      	sub	sp, #8
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
 8010f10:	460b      	mov	r3, r1
 8010f12:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d101      	bne.n	8010f22 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8010f1e:	2303      	movs	r3, #3
 8010f20:	e014      	b.n	8010f4c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f28:	b2db      	uxtb	r3, r3
 8010f2a:	2b03      	cmp	r3, #3
 8010f2c:	d10d      	bne.n	8010f4a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d007      	beq.n	8010f4a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f42:	78fa      	ldrb	r2, [r7, #3]
 8010f44:	4611      	mov	r1, r2
 8010f46:	6878      	ldr	r0, [r7, #4]
 8010f48:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010f4a:	2300      	movs	r3, #0
}
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	3708      	adds	r7, #8
 8010f50:	46bd      	mov	sp, r7
 8010f52:	bd80      	pop	{r7, pc}

08010f54 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8010f54:	b480      	push	{r7}
 8010f56:	b083      	sub	sp, #12
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010f5c:	2300      	movs	r3, #0
}
 8010f5e:	4618      	mov	r0, r3
 8010f60:	370c      	adds	r7, #12
 8010f62:	46bd      	mov	sp, r7
 8010f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f68:	4770      	bx	lr

08010f6a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010f6a:	b580      	push	{r7, lr}
 8010f6c:	b082      	sub	sp, #8
 8010f6e:	af00      	add	r7, sp, #0
 8010f70:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	2201      	movs	r2, #1
 8010f76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d009      	beq.n	8010f98 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f8a:	685b      	ldr	r3, [r3, #4]
 8010f8c:	687a      	ldr	r2, [r7, #4]
 8010f8e:	6852      	ldr	r2, [r2, #4]
 8010f90:	b2d2      	uxtb	r2, r2
 8010f92:	4611      	mov	r1, r2
 8010f94:	6878      	ldr	r0, [r7, #4]
 8010f96:	4798      	blx	r3
  }

  return USBD_OK;
 8010f98:	2300      	movs	r3, #0
}
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	3708      	adds	r7, #8
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	bd80      	pop	{r7, pc}

08010fa2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010fa2:	b480      	push	{r7}
 8010fa4:	b087      	sub	sp, #28
 8010fa6:	af00      	add	r7, sp, #0
 8010fa8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010fae:	697b      	ldr	r3, [r7, #20]
 8010fb0:	781b      	ldrb	r3, [r3, #0]
 8010fb2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010fb4:	697b      	ldr	r3, [r7, #20]
 8010fb6:	3301      	adds	r3, #1
 8010fb8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010fba:	697b      	ldr	r3, [r7, #20]
 8010fbc:	781b      	ldrb	r3, [r3, #0]
 8010fbe:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010fc0:	8a3b      	ldrh	r3, [r7, #16]
 8010fc2:	021b      	lsls	r3, r3, #8
 8010fc4:	b21a      	sxth	r2, r3
 8010fc6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010fca:	4313      	orrs	r3, r2
 8010fcc:	b21b      	sxth	r3, r3
 8010fce:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010fd0:	89fb      	ldrh	r3, [r7, #14]
}
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	371c      	adds	r7, #28
 8010fd6:	46bd      	mov	sp, r7
 8010fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fdc:	4770      	bx	lr
	...

08010fe0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	b084      	sub	sp, #16
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
 8010fe8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010fea:	2300      	movs	r3, #0
 8010fec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010fee:	683b      	ldr	r3, [r7, #0]
 8010ff0:	781b      	ldrb	r3, [r3, #0]
 8010ff2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010ff6:	2b40      	cmp	r3, #64	; 0x40
 8010ff8:	d005      	beq.n	8011006 <USBD_StdDevReq+0x26>
 8010ffa:	2b40      	cmp	r3, #64	; 0x40
 8010ffc:	d853      	bhi.n	80110a6 <USBD_StdDevReq+0xc6>
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d00b      	beq.n	801101a <USBD_StdDevReq+0x3a>
 8011002:	2b20      	cmp	r3, #32
 8011004:	d14f      	bne.n	80110a6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801100c:	689b      	ldr	r3, [r3, #8]
 801100e:	6839      	ldr	r1, [r7, #0]
 8011010:	6878      	ldr	r0, [r7, #4]
 8011012:	4798      	blx	r3
 8011014:	4603      	mov	r3, r0
 8011016:	73fb      	strb	r3, [r7, #15]
      break;
 8011018:	e04a      	b.n	80110b0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801101a:	683b      	ldr	r3, [r7, #0]
 801101c:	785b      	ldrb	r3, [r3, #1]
 801101e:	2b09      	cmp	r3, #9
 8011020:	d83b      	bhi.n	801109a <USBD_StdDevReq+0xba>
 8011022:	a201      	add	r2, pc, #4	; (adr r2, 8011028 <USBD_StdDevReq+0x48>)
 8011024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011028:	0801107d 	.word	0x0801107d
 801102c:	08011091 	.word	0x08011091
 8011030:	0801109b 	.word	0x0801109b
 8011034:	08011087 	.word	0x08011087
 8011038:	0801109b 	.word	0x0801109b
 801103c:	0801105b 	.word	0x0801105b
 8011040:	08011051 	.word	0x08011051
 8011044:	0801109b 	.word	0x0801109b
 8011048:	08011073 	.word	0x08011073
 801104c:	08011065 	.word	0x08011065
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011050:	6839      	ldr	r1, [r7, #0]
 8011052:	6878      	ldr	r0, [r7, #4]
 8011054:	f000 f9de 	bl	8011414 <USBD_GetDescriptor>
          break;
 8011058:	e024      	b.n	80110a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801105a:	6839      	ldr	r1, [r7, #0]
 801105c:	6878      	ldr	r0, [r7, #4]
 801105e:	f000 fb43 	bl	80116e8 <USBD_SetAddress>
          break;
 8011062:	e01f      	b.n	80110a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011064:	6839      	ldr	r1, [r7, #0]
 8011066:	6878      	ldr	r0, [r7, #4]
 8011068:	f000 fb82 	bl	8011770 <USBD_SetConfig>
 801106c:	4603      	mov	r3, r0
 801106e:	73fb      	strb	r3, [r7, #15]
          break;
 8011070:	e018      	b.n	80110a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011072:	6839      	ldr	r1, [r7, #0]
 8011074:	6878      	ldr	r0, [r7, #4]
 8011076:	f000 fc21 	bl	80118bc <USBD_GetConfig>
          break;
 801107a:	e013      	b.n	80110a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801107c:	6839      	ldr	r1, [r7, #0]
 801107e:	6878      	ldr	r0, [r7, #4]
 8011080:	f000 fc52 	bl	8011928 <USBD_GetStatus>
          break;
 8011084:	e00e      	b.n	80110a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011086:	6839      	ldr	r1, [r7, #0]
 8011088:	6878      	ldr	r0, [r7, #4]
 801108a:	f000 fc81 	bl	8011990 <USBD_SetFeature>
          break;
 801108e:	e009      	b.n	80110a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011090:	6839      	ldr	r1, [r7, #0]
 8011092:	6878      	ldr	r0, [r7, #4]
 8011094:	f000 fc90 	bl	80119b8 <USBD_ClrFeature>
          break;
 8011098:	e004      	b.n	80110a4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801109a:	6839      	ldr	r1, [r7, #0]
 801109c:	6878      	ldr	r0, [r7, #4]
 801109e:	f000 fce7 	bl	8011a70 <USBD_CtlError>
          break;
 80110a2:	bf00      	nop
      }
      break;
 80110a4:	e004      	b.n	80110b0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80110a6:	6839      	ldr	r1, [r7, #0]
 80110a8:	6878      	ldr	r0, [r7, #4]
 80110aa:	f000 fce1 	bl	8011a70 <USBD_CtlError>
      break;
 80110ae:	bf00      	nop
  }

  return ret;
 80110b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80110b2:	4618      	mov	r0, r3
 80110b4:	3710      	adds	r7, #16
 80110b6:	46bd      	mov	sp, r7
 80110b8:	bd80      	pop	{r7, pc}
 80110ba:	bf00      	nop

080110bc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80110bc:	b580      	push	{r7, lr}
 80110be:	b084      	sub	sp, #16
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
 80110c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80110c6:	2300      	movs	r3, #0
 80110c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80110ca:	683b      	ldr	r3, [r7, #0]
 80110cc:	781b      	ldrb	r3, [r3, #0]
 80110ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80110d2:	2b40      	cmp	r3, #64	; 0x40
 80110d4:	d005      	beq.n	80110e2 <USBD_StdItfReq+0x26>
 80110d6:	2b40      	cmp	r3, #64	; 0x40
 80110d8:	d82f      	bhi.n	801113a <USBD_StdItfReq+0x7e>
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d001      	beq.n	80110e2 <USBD_StdItfReq+0x26>
 80110de:	2b20      	cmp	r3, #32
 80110e0:	d12b      	bne.n	801113a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80110e8:	b2db      	uxtb	r3, r3
 80110ea:	3b01      	subs	r3, #1
 80110ec:	2b02      	cmp	r3, #2
 80110ee:	d81d      	bhi.n	801112c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80110f0:	683b      	ldr	r3, [r7, #0]
 80110f2:	889b      	ldrh	r3, [r3, #4]
 80110f4:	b2db      	uxtb	r3, r3
 80110f6:	2b01      	cmp	r3, #1
 80110f8:	d813      	bhi.n	8011122 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011100:	689b      	ldr	r3, [r3, #8]
 8011102:	6839      	ldr	r1, [r7, #0]
 8011104:	6878      	ldr	r0, [r7, #4]
 8011106:	4798      	blx	r3
 8011108:	4603      	mov	r3, r0
 801110a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801110c:	683b      	ldr	r3, [r7, #0]
 801110e:	88db      	ldrh	r3, [r3, #6]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d110      	bne.n	8011136 <USBD_StdItfReq+0x7a>
 8011114:	7bfb      	ldrb	r3, [r7, #15]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d10d      	bne.n	8011136 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801111a:	6878      	ldr	r0, [r7, #4]
 801111c:	f000 fd73 	bl	8011c06 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011120:	e009      	b.n	8011136 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8011122:	6839      	ldr	r1, [r7, #0]
 8011124:	6878      	ldr	r0, [r7, #4]
 8011126:	f000 fca3 	bl	8011a70 <USBD_CtlError>
          break;
 801112a:	e004      	b.n	8011136 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 801112c:	6839      	ldr	r1, [r7, #0]
 801112e:	6878      	ldr	r0, [r7, #4]
 8011130:	f000 fc9e 	bl	8011a70 <USBD_CtlError>
          break;
 8011134:	e000      	b.n	8011138 <USBD_StdItfReq+0x7c>
          break;
 8011136:	bf00      	nop
      }
      break;
 8011138:	e004      	b.n	8011144 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801113a:	6839      	ldr	r1, [r7, #0]
 801113c:	6878      	ldr	r0, [r7, #4]
 801113e:	f000 fc97 	bl	8011a70 <USBD_CtlError>
      break;
 8011142:	bf00      	nop
  }

  return ret;
 8011144:	7bfb      	ldrb	r3, [r7, #15]
}
 8011146:	4618      	mov	r0, r3
 8011148:	3710      	adds	r7, #16
 801114a:	46bd      	mov	sp, r7
 801114c:	bd80      	pop	{r7, pc}

0801114e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801114e:	b580      	push	{r7, lr}
 8011150:	b084      	sub	sp, #16
 8011152:	af00      	add	r7, sp, #0
 8011154:	6078      	str	r0, [r7, #4]
 8011156:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8011158:	2300      	movs	r3, #0
 801115a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801115c:	683b      	ldr	r3, [r7, #0]
 801115e:	889b      	ldrh	r3, [r3, #4]
 8011160:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011162:	683b      	ldr	r3, [r7, #0]
 8011164:	781b      	ldrb	r3, [r3, #0]
 8011166:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801116a:	2b40      	cmp	r3, #64	; 0x40
 801116c:	d007      	beq.n	801117e <USBD_StdEPReq+0x30>
 801116e:	2b40      	cmp	r3, #64	; 0x40
 8011170:	f200 8145 	bhi.w	80113fe <USBD_StdEPReq+0x2b0>
 8011174:	2b00      	cmp	r3, #0
 8011176:	d00c      	beq.n	8011192 <USBD_StdEPReq+0x44>
 8011178:	2b20      	cmp	r3, #32
 801117a:	f040 8140 	bne.w	80113fe <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011184:	689b      	ldr	r3, [r3, #8]
 8011186:	6839      	ldr	r1, [r7, #0]
 8011188:	6878      	ldr	r0, [r7, #4]
 801118a:	4798      	blx	r3
 801118c:	4603      	mov	r3, r0
 801118e:	73fb      	strb	r3, [r7, #15]
      break;
 8011190:	e13a      	b.n	8011408 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011192:	683b      	ldr	r3, [r7, #0]
 8011194:	785b      	ldrb	r3, [r3, #1]
 8011196:	2b03      	cmp	r3, #3
 8011198:	d007      	beq.n	80111aa <USBD_StdEPReq+0x5c>
 801119a:	2b03      	cmp	r3, #3
 801119c:	f300 8129 	bgt.w	80113f2 <USBD_StdEPReq+0x2a4>
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d07f      	beq.n	80112a4 <USBD_StdEPReq+0x156>
 80111a4:	2b01      	cmp	r3, #1
 80111a6:	d03c      	beq.n	8011222 <USBD_StdEPReq+0xd4>
 80111a8:	e123      	b.n	80113f2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80111b0:	b2db      	uxtb	r3, r3
 80111b2:	2b02      	cmp	r3, #2
 80111b4:	d002      	beq.n	80111bc <USBD_StdEPReq+0x6e>
 80111b6:	2b03      	cmp	r3, #3
 80111b8:	d016      	beq.n	80111e8 <USBD_StdEPReq+0x9a>
 80111ba:	e02c      	b.n	8011216 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80111bc:	7bbb      	ldrb	r3, [r7, #14]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d00d      	beq.n	80111de <USBD_StdEPReq+0x90>
 80111c2:	7bbb      	ldrb	r3, [r7, #14]
 80111c4:	2b80      	cmp	r3, #128	; 0x80
 80111c6:	d00a      	beq.n	80111de <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80111c8:	7bbb      	ldrb	r3, [r7, #14]
 80111ca:	4619      	mov	r1, r3
 80111cc:	6878      	ldr	r0, [r7, #4]
 80111ce:	f007 fb7d 	bl	80188cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80111d2:	2180      	movs	r1, #128	; 0x80
 80111d4:	6878      	ldr	r0, [r7, #4]
 80111d6:	f007 fb79 	bl	80188cc <USBD_LL_StallEP>
 80111da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80111dc:	e020      	b.n	8011220 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80111de:	6839      	ldr	r1, [r7, #0]
 80111e0:	6878      	ldr	r0, [r7, #4]
 80111e2:	f000 fc45 	bl	8011a70 <USBD_CtlError>
              break;
 80111e6:	e01b      	b.n	8011220 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80111e8:	683b      	ldr	r3, [r7, #0]
 80111ea:	885b      	ldrh	r3, [r3, #2]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d10e      	bne.n	801120e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80111f0:	7bbb      	ldrb	r3, [r7, #14]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d00b      	beq.n	801120e <USBD_StdEPReq+0xc0>
 80111f6:	7bbb      	ldrb	r3, [r7, #14]
 80111f8:	2b80      	cmp	r3, #128	; 0x80
 80111fa:	d008      	beq.n	801120e <USBD_StdEPReq+0xc0>
 80111fc:	683b      	ldr	r3, [r7, #0]
 80111fe:	88db      	ldrh	r3, [r3, #6]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d104      	bne.n	801120e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011204:	7bbb      	ldrb	r3, [r7, #14]
 8011206:	4619      	mov	r1, r3
 8011208:	6878      	ldr	r0, [r7, #4]
 801120a:	f007 fb5f 	bl	80188cc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801120e:	6878      	ldr	r0, [r7, #4]
 8011210:	f000 fcf9 	bl	8011c06 <USBD_CtlSendStatus>

              break;
 8011214:	e004      	b.n	8011220 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8011216:	6839      	ldr	r1, [r7, #0]
 8011218:	6878      	ldr	r0, [r7, #4]
 801121a:	f000 fc29 	bl	8011a70 <USBD_CtlError>
              break;
 801121e:	bf00      	nop
          }
          break;
 8011220:	e0ec      	b.n	80113fc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011228:	b2db      	uxtb	r3, r3
 801122a:	2b02      	cmp	r3, #2
 801122c:	d002      	beq.n	8011234 <USBD_StdEPReq+0xe6>
 801122e:	2b03      	cmp	r3, #3
 8011230:	d016      	beq.n	8011260 <USBD_StdEPReq+0x112>
 8011232:	e030      	b.n	8011296 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011234:	7bbb      	ldrb	r3, [r7, #14]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d00d      	beq.n	8011256 <USBD_StdEPReq+0x108>
 801123a:	7bbb      	ldrb	r3, [r7, #14]
 801123c:	2b80      	cmp	r3, #128	; 0x80
 801123e:	d00a      	beq.n	8011256 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011240:	7bbb      	ldrb	r3, [r7, #14]
 8011242:	4619      	mov	r1, r3
 8011244:	6878      	ldr	r0, [r7, #4]
 8011246:	f007 fb41 	bl	80188cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801124a:	2180      	movs	r1, #128	; 0x80
 801124c:	6878      	ldr	r0, [r7, #4]
 801124e:	f007 fb3d 	bl	80188cc <USBD_LL_StallEP>
 8011252:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011254:	e025      	b.n	80112a2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8011256:	6839      	ldr	r1, [r7, #0]
 8011258:	6878      	ldr	r0, [r7, #4]
 801125a:	f000 fc09 	bl	8011a70 <USBD_CtlError>
              break;
 801125e:	e020      	b.n	80112a2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011260:	683b      	ldr	r3, [r7, #0]
 8011262:	885b      	ldrh	r3, [r3, #2]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d11b      	bne.n	80112a0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011268:	7bbb      	ldrb	r3, [r7, #14]
 801126a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801126e:	2b00      	cmp	r3, #0
 8011270:	d004      	beq.n	801127c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011272:	7bbb      	ldrb	r3, [r7, #14]
 8011274:	4619      	mov	r1, r3
 8011276:	6878      	ldr	r0, [r7, #4]
 8011278:	f007 fb47 	bl	801890a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801127c:	6878      	ldr	r0, [r7, #4]
 801127e:	f000 fcc2 	bl	8011c06 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011288:	689b      	ldr	r3, [r3, #8]
 801128a:	6839      	ldr	r1, [r7, #0]
 801128c:	6878      	ldr	r0, [r7, #4]
 801128e:	4798      	blx	r3
 8011290:	4603      	mov	r3, r0
 8011292:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8011294:	e004      	b.n	80112a0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8011296:	6839      	ldr	r1, [r7, #0]
 8011298:	6878      	ldr	r0, [r7, #4]
 801129a:	f000 fbe9 	bl	8011a70 <USBD_CtlError>
              break;
 801129e:	e000      	b.n	80112a2 <USBD_StdEPReq+0x154>
              break;
 80112a0:	bf00      	nop
          }
          break;
 80112a2:	e0ab      	b.n	80113fc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80112aa:	b2db      	uxtb	r3, r3
 80112ac:	2b02      	cmp	r3, #2
 80112ae:	d002      	beq.n	80112b6 <USBD_StdEPReq+0x168>
 80112b0:	2b03      	cmp	r3, #3
 80112b2:	d032      	beq.n	801131a <USBD_StdEPReq+0x1cc>
 80112b4:	e097      	b.n	80113e6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80112b6:	7bbb      	ldrb	r3, [r7, #14]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d007      	beq.n	80112cc <USBD_StdEPReq+0x17e>
 80112bc:	7bbb      	ldrb	r3, [r7, #14]
 80112be:	2b80      	cmp	r3, #128	; 0x80
 80112c0:	d004      	beq.n	80112cc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80112c2:	6839      	ldr	r1, [r7, #0]
 80112c4:	6878      	ldr	r0, [r7, #4]
 80112c6:	f000 fbd3 	bl	8011a70 <USBD_CtlError>
                break;
 80112ca:	e091      	b.n	80113f0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80112cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	da0b      	bge.n	80112ec <USBD_StdEPReq+0x19e>
 80112d4:	7bbb      	ldrb	r3, [r7, #14]
 80112d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80112da:	4613      	mov	r3, r2
 80112dc:	009b      	lsls	r3, r3, #2
 80112de:	4413      	add	r3, r2
 80112e0:	009b      	lsls	r3, r3, #2
 80112e2:	3310      	adds	r3, #16
 80112e4:	687a      	ldr	r2, [r7, #4]
 80112e6:	4413      	add	r3, r2
 80112e8:	3304      	adds	r3, #4
 80112ea:	e00b      	b.n	8011304 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80112ec:	7bbb      	ldrb	r3, [r7, #14]
 80112ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80112f2:	4613      	mov	r3, r2
 80112f4:	009b      	lsls	r3, r3, #2
 80112f6:	4413      	add	r3, r2
 80112f8:	009b      	lsls	r3, r3, #2
 80112fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80112fe:	687a      	ldr	r2, [r7, #4]
 8011300:	4413      	add	r3, r2
 8011302:	3304      	adds	r3, #4
 8011304:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011306:	68bb      	ldr	r3, [r7, #8]
 8011308:	2200      	movs	r2, #0
 801130a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801130c:	68bb      	ldr	r3, [r7, #8]
 801130e:	2202      	movs	r2, #2
 8011310:	4619      	mov	r1, r3
 8011312:	6878      	ldr	r0, [r7, #4]
 8011314:	f000 fc1d 	bl	8011b52 <USBD_CtlSendData>
              break;
 8011318:	e06a      	b.n	80113f0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801131a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801131e:	2b00      	cmp	r3, #0
 8011320:	da11      	bge.n	8011346 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011322:	7bbb      	ldrb	r3, [r7, #14]
 8011324:	f003 020f 	and.w	r2, r3, #15
 8011328:	6879      	ldr	r1, [r7, #4]
 801132a:	4613      	mov	r3, r2
 801132c:	009b      	lsls	r3, r3, #2
 801132e:	4413      	add	r3, r2
 8011330:	009b      	lsls	r3, r3, #2
 8011332:	440b      	add	r3, r1
 8011334:	3324      	adds	r3, #36	; 0x24
 8011336:	881b      	ldrh	r3, [r3, #0]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d117      	bne.n	801136c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801133c:	6839      	ldr	r1, [r7, #0]
 801133e:	6878      	ldr	r0, [r7, #4]
 8011340:	f000 fb96 	bl	8011a70 <USBD_CtlError>
                  break;
 8011344:	e054      	b.n	80113f0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011346:	7bbb      	ldrb	r3, [r7, #14]
 8011348:	f003 020f 	and.w	r2, r3, #15
 801134c:	6879      	ldr	r1, [r7, #4]
 801134e:	4613      	mov	r3, r2
 8011350:	009b      	lsls	r3, r3, #2
 8011352:	4413      	add	r3, r2
 8011354:	009b      	lsls	r3, r3, #2
 8011356:	440b      	add	r3, r1
 8011358:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801135c:	881b      	ldrh	r3, [r3, #0]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d104      	bne.n	801136c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8011362:	6839      	ldr	r1, [r7, #0]
 8011364:	6878      	ldr	r0, [r7, #4]
 8011366:	f000 fb83 	bl	8011a70 <USBD_CtlError>
                  break;
 801136a:	e041      	b.n	80113f0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801136c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011370:	2b00      	cmp	r3, #0
 8011372:	da0b      	bge.n	801138c <USBD_StdEPReq+0x23e>
 8011374:	7bbb      	ldrb	r3, [r7, #14]
 8011376:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801137a:	4613      	mov	r3, r2
 801137c:	009b      	lsls	r3, r3, #2
 801137e:	4413      	add	r3, r2
 8011380:	009b      	lsls	r3, r3, #2
 8011382:	3310      	adds	r3, #16
 8011384:	687a      	ldr	r2, [r7, #4]
 8011386:	4413      	add	r3, r2
 8011388:	3304      	adds	r3, #4
 801138a:	e00b      	b.n	80113a4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801138c:	7bbb      	ldrb	r3, [r7, #14]
 801138e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011392:	4613      	mov	r3, r2
 8011394:	009b      	lsls	r3, r3, #2
 8011396:	4413      	add	r3, r2
 8011398:	009b      	lsls	r3, r3, #2
 801139a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801139e:	687a      	ldr	r2, [r7, #4]
 80113a0:	4413      	add	r3, r2
 80113a2:	3304      	adds	r3, #4
 80113a4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80113a6:	7bbb      	ldrb	r3, [r7, #14]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d002      	beq.n	80113b2 <USBD_StdEPReq+0x264>
 80113ac:	7bbb      	ldrb	r3, [r7, #14]
 80113ae:	2b80      	cmp	r3, #128	; 0x80
 80113b0:	d103      	bne.n	80113ba <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80113b2:	68bb      	ldr	r3, [r7, #8]
 80113b4:	2200      	movs	r2, #0
 80113b6:	601a      	str	r2, [r3, #0]
 80113b8:	e00e      	b.n	80113d8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80113ba:	7bbb      	ldrb	r3, [r7, #14]
 80113bc:	4619      	mov	r1, r3
 80113be:	6878      	ldr	r0, [r7, #4]
 80113c0:	f007 fac2 	bl	8018948 <USBD_LL_IsStallEP>
 80113c4:	4603      	mov	r3, r0
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d003      	beq.n	80113d2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80113ca:	68bb      	ldr	r3, [r7, #8]
 80113cc:	2201      	movs	r2, #1
 80113ce:	601a      	str	r2, [r3, #0]
 80113d0:	e002      	b.n	80113d8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80113d2:	68bb      	ldr	r3, [r7, #8]
 80113d4:	2200      	movs	r2, #0
 80113d6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80113d8:	68bb      	ldr	r3, [r7, #8]
 80113da:	2202      	movs	r2, #2
 80113dc:	4619      	mov	r1, r3
 80113de:	6878      	ldr	r0, [r7, #4]
 80113e0:	f000 fbb7 	bl	8011b52 <USBD_CtlSendData>
              break;
 80113e4:	e004      	b.n	80113f0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80113e6:	6839      	ldr	r1, [r7, #0]
 80113e8:	6878      	ldr	r0, [r7, #4]
 80113ea:	f000 fb41 	bl	8011a70 <USBD_CtlError>
              break;
 80113ee:	bf00      	nop
          }
          break;
 80113f0:	e004      	b.n	80113fc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80113f2:	6839      	ldr	r1, [r7, #0]
 80113f4:	6878      	ldr	r0, [r7, #4]
 80113f6:	f000 fb3b 	bl	8011a70 <USBD_CtlError>
          break;
 80113fa:	bf00      	nop
      }
      break;
 80113fc:	e004      	b.n	8011408 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80113fe:	6839      	ldr	r1, [r7, #0]
 8011400:	6878      	ldr	r0, [r7, #4]
 8011402:	f000 fb35 	bl	8011a70 <USBD_CtlError>
      break;
 8011406:	bf00      	nop
  }

  return ret;
 8011408:	7bfb      	ldrb	r3, [r7, #15]
}
 801140a:	4618      	mov	r0, r3
 801140c:	3710      	adds	r7, #16
 801140e:	46bd      	mov	sp, r7
 8011410:	bd80      	pop	{r7, pc}
	...

08011414 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b084      	sub	sp, #16
 8011418:	af00      	add	r7, sp, #0
 801141a:	6078      	str	r0, [r7, #4]
 801141c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801141e:	2300      	movs	r3, #0
 8011420:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011422:	2300      	movs	r3, #0
 8011424:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011426:	2300      	movs	r3, #0
 8011428:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801142a:	683b      	ldr	r3, [r7, #0]
 801142c:	885b      	ldrh	r3, [r3, #2]
 801142e:	0a1b      	lsrs	r3, r3, #8
 8011430:	b29b      	uxth	r3, r3
 8011432:	3b01      	subs	r3, #1
 8011434:	2b06      	cmp	r3, #6
 8011436:	f200 8128 	bhi.w	801168a <USBD_GetDescriptor+0x276>
 801143a:	a201      	add	r2, pc, #4	; (adr r2, 8011440 <USBD_GetDescriptor+0x2c>)
 801143c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011440:	0801145d 	.word	0x0801145d
 8011444:	08011475 	.word	0x08011475
 8011448:	080114b5 	.word	0x080114b5
 801144c:	0801168b 	.word	0x0801168b
 8011450:	0801168b 	.word	0x0801168b
 8011454:	0801162b 	.word	0x0801162b
 8011458:	08011657 	.word	0x08011657
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	687a      	ldr	r2, [r7, #4]
 8011466:	7c12      	ldrb	r2, [r2, #16]
 8011468:	f107 0108 	add.w	r1, r7, #8
 801146c:	4610      	mov	r0, r2
 801146e:	4798      	blx	r3
 8011470:	60f8      	str	r0, [r7, #12]
      break;
 8011472:	e112      	b.n	801169a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	7c1b      	ldrb	r3, [r3, #16]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d10d      	bne.n	8011498 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011484:	f107 0208 	add.w	r2, r7, #8
 8011488:	4610      	mov	r0, r2
 801148a:	4798      	blx	r3
 801148c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	3301      	adds	r3, #1
 8011492:	2202      	movs	r2, #2
 8011494:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011496:	e100      	b.n	801169a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801149e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114a0:	f107 0208 	add.w	r2, r7, #8
 80114a4:	4610      	mov	r0, r2
 80114a6:	4798      	blx	r3
 80114a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	3301      	adds	r3, #1
 80114ae:	2202      	movs	r2, #2
 80114b0:	701a      	strb	r2, [r3, #0]
      break;
 80114b2:	e0f2      	b.n	801169a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80114b4:	683b      	ldr	r3, [r7, #0]
 80114b6:	885b      	ldrh	r3, [r3, #2]
 80114b8:	b2db      	uxtb	r3, r3
 80114ba:	2b05      	cmp	r3, #5
 80114bc:	f200 80ac 	bhi.w	8011618 <USBD_GetDescriptor+0x204>
 80114c0:	a201      	add	r2, pc, #4	; (adr r2, 80114c8 <USBD_GetDescriptor+0xb4>)
 80114c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114c6:	bf00      	nop
 80114c8:	080114e1 	.word	0x080114e1
 80114cc:	08011515 	.word	0x08011515
 80114d0:	08011549 	.word	0x08011549
 80114d4:	0801157d 	.word	0x0801157d
 80114d8:	080115b1 	.word	0x080115b1
 80114dc:	080115e5 	.word	0x080115e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80114e6:	685b      	ldr	r3, [r3, #4]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d00b      	beq.n	8011504 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80114f2:	685b      	ldr	r3, [r3, #4]
 80114f4:	687a      	ldr	r2, [r7, #4]
 80114f6:	7c12      	ldrb	r2, [r2, #16]
 80114f8:	f107 0108 	add.w	r1, r7, #8
 80114fc:	4610      	mov	r0, r2
 80114fe:	4798      	blx	r3
 8011500:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011502:	e091      	b.n	8011628 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011504:	6839      	ldr	r1, [r7, #0]
 8011506:	6878      	ldr	r0, [r7, #4]
 8011508:	f000 fab2 	bl	8011a70 <USBD_CtlError>
            err++;
 801150c:	7afb      	ldrb	r3, [r7, #11]
 801150e:	3301      	adds	r3, #1
 8011510:	72fb      	strb	r3, [r7, #11]
          break;
 8011512:	e089      	b.n	8011628 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801151a:	689b      	ldr	r3, [r3, #8]
 801151c:	2b00      	cmp	r3, #0
 801151e:	d00b      	beq.n	8011538 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011526:	689b      	ldr	r3, [r3, #8]
 8011528:	687a      	ldr	r2, [r7, #4]
 801152a:	7c12      	ldrb	r2, [r2, #16]
 801152c:	f107 0108 	add.w	r1, r7, #8
 8011530:	4610      	mov	r0, r2
 8011532:	4798      	blx	r3
 8011534:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011536:	e077      	b.n	8011628 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011538:	6839      	ldr	r1, [r7, #0]
 801153a:	6878      	ldr	r0, [r7, #4]
 801153c:	f000 fa98 	bl	8011a70 <USBD_CtlError>
            err++;
 8011540:	7afb      	ldrb	r3, [r7, #11]
 8011542:	3301      	adds	r3, #1
 8011544:	72fb      	strb	r3, [r7, #11]
          break;
 8011546:	e06f      	b.n	8011628 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801154e:	68db      	ldr	r3, [r3, #12]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d00b      	beq.n	801156c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801155a:	68db      	ldr	r3, [r3, #12]
 801155c:	687a      	ldr	r2, [r7, #4]
 801155e:	7c12      	ldrb	r2, [r2, #16]
 8011560:	f107 0108 	add.w	r1, r7, #8
 8011564:	4610      	mov	r0, r2
 8011566:	4798      	blx	r3
 8011568:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801156a:	e05d      	b.n	8011628 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801156c:	6839      	ldr	r1, [r7, #0]
 801156e:	6878      	ldr	r0, [r7, #4]
 8011570:	f000 fa7e 	bl	8011a70 <USBD_CtlError>
            err++;
 8011574:	7afb      	ldrb	r3, [r7, #11]
 8011576:	3301      	adds	r3, #1
 8011578:	72fb      	strb	r3, [r7, #11]
          break;
 801157a:	e055      	b.n	8011628 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011582:	691b      	ldr	r3, [r3, #16]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d00b      	beq.n	80115a0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801158e:	691b      	ldr	r3, [r3, #16]
 8011590:	687a      	ldr	r2, [r7, #4]
 8011592:	7c12      	ldrb	r2, [r2, #16]
 8011594:	f107 0108 	add.w	r1, r7, #8
 8011598:	4610      	mov	r0, r2
 801159a:	4798      	blx	r3
 801159c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801159e:	e043      	b.n	8011628 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80115a0:	6839      	ldr	r1, [r7, #0]
 80115a2:	6878      	ldr	r0, [r7, #4]
 80115a4:	f000 fa64 	bl	8011a70 <USBD_CtlError>
            err++;
 80115a8:	7afb      	ldrb	r3, [r7, #11]
 80115aa:	3301      	adds	r3, #1
 80115ac:	72fb      	strb	r3, [r7, #11]
          break;
 80115ae:	e03b      	b.n	8011628 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80115b6:	695b      	ldr	r3, [r3, #20]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d00b      	beq.n	80115d4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80115c2:	695b      	ldr	r3, [r3, #20]
 80115c4:	687a      	ldr	r2, [r7, #4]
 80115c6:	7c12      	ldrb	r2, [r2, #16]
 80115c8:	f107 0108 	add.w	r1, r7, #8
 80115cc:	4610      	mov	r0, r2
 80115ce:	4798      	blx	r3
 80115d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80115d2:	e029      	b.n	8011628 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80115d4:	6839      	ldr	r1, [r7, #0]
 80115d6:	6878      	ldr	r0, [r7, #4]
 80115d8:	f000 fa4a 	bl	8011a70 <USBD_CtlError>
            err++;
 80115dc:	7afb      	ldrb	r3, [r7, #11]
 80115de:	3301      	adds	r3, #1
 80115e0:	72fb      	strb	r3, [r7, #11]
          break;
 80115e2:	e021      	b.n	8011628 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80115ea:	699b      	ldr	r3, [r3, #24]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d00b      	beq.n	8011608 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80115f6:	699b      	ldr	r3, [r3, #24]
 80115f8:	687a      	ldr	r2, [r7, #4]
 80115fa:	7c12      	ldrb	r2, [r2, #16]
 80115fc:	f107 0108 	add.w	r1, r7, #8
 8011600:	4610      	mov	r0, r2
 8011602:	4798      	blx	r3
 8011604:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011606:	e00f      	b.n	8011628 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011608:	6839      	ldr	r1, [r7, #0]
 801160a:	6878      	ldr	r0, [r7, #4]
 801160c:	f000 fa30 	bl	8011a70 <USBD_CtlError>
            err++;
 8011610:	7afb      	ldrb	r3, [r7, #11]
 8011612:	3301      	adds	r3, #1
 8011614:	72fb      	strb	r3, [r7, #11]
          break;
 8011616:	e007      	b.n	8011628 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011618:	6839      	ldr	r1, [r7, #0]
 801161a:	6878      	ldr	r0, [r7, #4]
 801161c:	f000 fa28 	bl	8011a70 <USBD_CtlError>
          err++;
 8011620:	7afb      	ldrb	r3, [r7, #11]
 8011622:	3301      	adds	r3, #1
 8011624:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8011626:	bf00      	nop
      }
      break;
 8011628:	e037      	b.n	801169a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	7c1b      	ldrb	r3, [r3, #16]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d109      	bne.n	8011646 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801163a:	f107 0208 	add.w	r2, r7, #8
 801163e:	4610      	mov	r0, r2
 8011640:	4798      	blx	r3
 8011642:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011644:	e029      	b.n	801169a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011646:	6839      	ldr	r1, [r7, #0]
 8011648:	6878      	ldr	r0, [r7, #4]
 801164a:	f000 fa11 	bl	8011a70 <USBD_CtlError>
        err++;
 801164e:	7afb      	ldrb	r3, [r7, #11]
 8011650:	3301      	adds	r3, #1
 8011652:	72fb      	strb	r3, [r7, #11]
      break;
 8011654:	e021      	b.n	801169a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	7c1b      	ldrb	r3, [r3, #16]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d10d      	bne.n	801167a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011666:	f107 0208 	add.w	r2, r7, #8
 801166a:	4610      	mov	r0, r2
 801166c:	4798      	blx	r3
 801166e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	3301      	adds	r3, #1
 8011674:	2207      	movs	r2, #7
 8011676:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011678:	e00f      	b.n	801169a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801167a:	6839      	ldr	r1, [r7, #0]
 801167c:	6878      	ldr	r0, [r7, #4]
 801167e:	f000 f9f7 	bl	8011a70 <USBD_CtlError>
        err++;
 8011682:	7afb      	ldrb	r3, [r7, #11]
 8011684:	3301      	adds	r3, #1
 8011686:	72fb      	strb	r3, [r7, #11]
      break;
 8011688:	e007      	b.n	801169a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801168a:	6839      	ldr	r1, [r7, #0]
 801168c:	6878      	ldr	r0, [r7, #4]
 801168e:	f000 f9ef 	bl	8011a70 <USBD_CtlError>
      err++;
 8011692:	7afb      	ldrb	r3, [r7, #11]
 8011694:	3301      	adds	r3, #1
 8011696:	72fb      	strb	r3, [r7, #11]
      break;
 8011698:	bf00      	nop
  }

  if (err != 0U)
 801169a:	7afb      	ldrb	r3, [r7, #11]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d11e      	bne.n	80116de <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80116a0:	683b      	ldr	r3, [r7, #0]
 80116a2:	88db      	ldrh	r3, [r3, #6]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d016      	beq.n	80116d6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80116a8:	893b      	ldrh	r3, [r7, #8]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d00e      	beq.n	80116cc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80116ae:	683b      	ldr	r3, [r7, #0]
 80116b0:	88da      	ldrh	r2, [r3, #6]
 80116b2:	893b      	ldrh	r3, [r7, #8]
 80116b4:	4293      	cmp	r3, r2
 80116b6:	bf28      	it	cs
 80116b8:	4613      	movcs	r3, r2
 80116ba:	b29b      	uxth	r3, r3
 80116bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80116be:	893b      	ldrh	r3, [r7, #8]
 80116c0:	461a      	mov	r2, r3
 80116c2:	68f9      	ldr	r1, [r7, #12]
 80116c4:	6878      	ldr	r0, [r7, #4]
 80116c6:	f000 fa44 	bl	8011b52 <USBD_CtlSendData>
 80116ca:	e009      	b.n	80116e0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80116cc:	6839      	ldr	r1, [r7, #0]
 80116ce:	6878      	ldr	r0, [r7, #4]
 80116d0:	f000 f9ce 	bl	8011a70 <USBD_CtlError>
 80116d4:	e004      	b.n	80116e0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80116d6:	6878      	ldr	r0, [r7, #4]
 80116d8:	f000 fa95 	bl	8011c06 <USBD_CtlSendStatus>
 80116dc:	e000      	b.n	80116e0 <USBD_GetDescriptor+0x2cc>
    return;
 80116de:	bf00      	nop
  }
}
 80116e0:	3710      	adds	r7, #16
 80116e2:	46bd      	mov	sp, r7
 80116e4:	bd80      	pop	{r7, pc}
 80116e6:	bf00      	nop

080116e8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80116e8:	b580      	push	{r7, lr}
 80116ea:	b084      	sub	sp, #16
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	6078      	str	r0, [r7, #4]
 80116f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80116f2:	683b      	ldr	r3, [r7, #0]
 80116f4:	889b      	ldrh	r3, [r3, #4]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d131      	bne.n	801175e <USBD_SetAddress+0x76>
 80116fa:	683b      	ldr	r3, [r7, #0]
 80116fc:	88db      	ldrh	r3, [r3, #6]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d12d      	bne.n	801175e <USBD_SetAddress+0x76>
 8011702:	683b      	ldr	r3, [r7, #0]
 8011704:	885b      	ldrh	r3, [r3, #2]
 8011706:	2b7f      	cmp	r3, #127	; 0x7f
 8011708:	d829      	bhi.n	801175e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801170a:	683b      	ldr	r3, [r7, #0]
 801170c:	885b      	ldrh	r3, [r3, #2]
 801170e:	b2db      	uxtb	r3, r3
 8011710:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011714:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801171c:	b2db      	uxtb	r3, r3
 801171e:	2b03      	cmp	r3, #3
 8011720:	d104      	bne.n	801172c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011722:	6839      	ldr	r1, [r7, #0]
 8011724:	6878      	ldr	r0, [r7, #4]
 8011726:	f000 f9a3 	bl	8011a70 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801172a:	e01d      	b.n	8011768 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	7bfa      	ldrb	r2, [r7, #15]
 8011730:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011734:	7bfb      	ldrb	r3, [r7, #15]
 8011736:	4619      	mov	r1, r3
 8011738:	6878      	ldr	r0, [r7, #4]
 801173a:	f007 f931 	bl	80189a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801173e:	6878      	ldr	r0, [r7, #4]
 8011740:	f000 fa61 	bl	8011c06 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011744:	7bfb      	ldrb	r3, [r7, #15]
 8011746:	2b00      	cmp	r3, #0
 8011748:	d004      	beq.n	8011754 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	2202      	movs	r2, #2
 801174e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011752:	e009      	b.n	8011768 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	2201      	movs	r2, #1
 8011758:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801175c:	e004      	b.n	8011768 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801175e:	6839      	ldr	r1, [r7, #0]
 8011760:	6878      	ldr	r0, [r7, #4]
 8011762:	f000 f985 	bl	8011a70 <USBD_CtlError>
  }
}
 8011766:	bf00      	nop
 8011768:	bf00      	nop
 801176a:	3710      	adds	r7, #16
 801176c:	46bd      	mov	sp, r7
 801176e:	bd80      	pop	{r7, pc}

08011770 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011770:	b580      	push	{r7, lr}
 8011772:	b084      	sub	sp, #16
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
 8011778:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801177a:	2300      	movs	r3, #0
 801177c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801177e:	683b      	ldr	r3, [r7, #0]
 8011780:	885b      	ldrh	r3, [r3, #2]
 8011782:	b2da      	uxtb	r2, r3
 8011784:	4b4c      	ldr	r3, [pc, #304]	; (80118b8 <USBD_SetConfig+0x148>)
 8011786:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011788:	4b4b      	ldr	r3, [pc, #300]	; (80118b8 <USBD_SetConfig+0x148>)
 801178a:	781b      	ldrb	r3, [r3, #0]
 801178c:	2b01      	cmp	r3, #1
 801178e:	d905      	bls.n	801179c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011790:	6839      	ldr	r1, [r7, #0]
 8011792:	6878      	ldr	r0, [r7, #4]
 8011794:	f000 f96c 	bl	8011a70 <USBD_CtlError>
    return USBD_FAIL;
 8011798:	2303      	movs	r3, #3
 801179a:	e088      	b.n	80118ae <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80117a2:	b2db      	uxtb	r3, r3
 80117a4:	2b02      	cmp	r3, #2
 80117a6:	d002      	beq.n	80117ae <USBD_SetConfig+0x3e>
 80117a8:	2b03      	cmp	r3, #3
 80117aa:	d025      	beq.n	80117f8 <USBD_SetConfig+0x88>
 80117ac:	e071      	b.n	8011892 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80117ae:	4b42      	ldr	r3, [pc, #264]	; (80118b8 <USBD_SetConfig+0x148>)
 80117b0:	781b      	ldrb	r3, [r3, #0]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d01c      	beq.n	80117f0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80117b6:	4b40      	ldr	r3, [pc, #256]	; (80118b8 <USBD_SetConfig+0x148>)
 80117b8:	781b      	ldrb	r3, [r3, #0]
 80117ba:	461a      	mov	r2, r3
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80117c0:	4b3d      	ldr	r3, [pc, #244]	; (80118b8 <USBD_SetConfig+0x148>)
 80117c2:	781b      	ldrb	r3, [r3, #0]
 80117c4:	4619      	mov	r1, r3
 80117c6:	6878      	ldr	r0, [r7, #4]
 80117c8:	f7ff f948 	bl	8010a5c <USBD_SetClassConfig>
 80117cc:	4603      	mov	r3, r0
 80117ce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80117d0:	7bfb      	ldrb	r3, [r7, #15]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d004      	beq.n	80117e0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80117d6:	6839      	ldr	r1, [r7, #0]
 80117d8:	6878      	ldr	r0, [r7, #4]
 80117da:	f000 f949 	bl	8011a70 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80117de:	e065      	b.n	80118ac <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80117e0:	6878      	ldr	r0, [r7, #4]
 80117e2:	f000 fa10 	bl	8011c06 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	2203      	movs	r2, #3
 80117ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80117ee:	e05d      	b.n	80118ac <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80117f0:	6878      	ldr	r0, [r7, #4]
 80117f2:	f000 fa08 	bl	8011c06 <USBD_CtlSendStatus>
      break;
 80117f6:	e059      	b.n	80118ac <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80117f8:	4b2f      	ldr	r3, [pc, #188]	; (80118b8 <USBD_SetConfig+0x148>)
 80117fa:	781b      	ldrb	r3, [r3, #0]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d112      	bne.n	8011826 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	2202      	movs	r2, #2
 8011804:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8011808:	4b2b      	ldr	r3, [pc, #172]	; (80118b8 <USBD_SetConfig+0x148>)
 801180a:	781b      	ldrb	r3, [r3, #0]
 801180c:	461a      	mov	r2, r3
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011812:	4b29      	ldr	r3, [pc, #164]	; (80118b8 <USBD_SetConfig+0x148>)
 8011814:	781b      	ldrb	r3, [r3, #0]
 8011816:	4619      	mov	r1, r3
 8011818:	6878      	ldr	r0, [r7, #4]
 801181a:	f7ff f93b 	bl	8010a94 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801181e:	6878      	ldr	r0, [r7, #4]
 8011820:	f000 f9f1 	bl	8011c06 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011824:	e042      	b.n	80118ac <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8011826:	4b24      	ldr	r3, [pc, #144]	; (80118b8 <USBD_SetConfig+0x148>)
 8011828:	781b      	ldrb	r3, [r3, #0]
 801182a:	461a      	mov	r2, r3
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	685b      	ldr	r3, [r3, #4]
 8011830:	429a      	cmp	r2, r3
 8011832:	d02a      	beq.n	801188a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	685b      	ldr	r3, [r3, #4]
 8011838:	b2db      	uxtb	r3, r3
 801183a:	4619      	mov	r1, r3
 801183c:	6878      	ldr	r0, [r7, #4]
 801183e:	f7ff f929 	bl	8010a94 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011842:	4b1d      	ldr	r3, [pc, #116]	; (80118b8 <USBD_SetConfig+0x148>)
 8011844:	781b      	ldrb	r3, [r3, #0]
 8011846:	461a      	mov	r2, r3
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801184c:	4b1a      	ldr	r3, [pc, #104]	; (80118b8 <USBD_SetConfig+0x148>)
 801184e:	781b      	ldrb	r3, [r3, #0]
 8011850:	4619      	mov	r1, r3
 8011852:	6878      	ldr	r0, [r7, #4]
 8011854:	f7ff f902 	bl	8010a5c <USBD_SetClassConfig>
 8011858:	4603      	mov	r3, r0
 801185a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801185c:	7bfb      	ldrb	r3, [r7, #15]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d00f      	beq.n	8011882 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8011862:	6839      	ldr	r1, [r7, #0]
 8011864:	6878      	ldr	r0, [r7, #4]
 8011866:	f000 f903 	bl	8011a70 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	685b      	ldr	r3, [r3, #4]
 801186e:	b2db      	uxtb	r3, r3
 8011870:	4619      	mov	r1, r3
 8011872:	6878      	ldr	r0, [r7, #4]
 8011874:	f7ff f90e 	bl	8010a94 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	2202      	movs	r2, #2
 801187c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8011880:	e014      	b.n	80118ac <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8011882:	6878      	ldr	r0, [r7, #4]
 8011884:	f000 f9bf 	bl	8011c06 <USBD_CtlSendStatus>
      break;
 8011888:	e010      	b.n	80118ac <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801188a:	6878      	ldr	r0, [r7, #4]
 801188c:	f000 f9bb 	bl	8011c06 <USBD_CtlSendStatus>
      break;
 8011890:	e00c      	b.n	80118ac <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8011892:	6839      	ldr	r1, [r7, #0]
 8011894:	6878      	ldr	r0, [r7, #4]
 8011896:	f000 f8eb 	bl	8011a70 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801189a:	4b07      	ldr	r3, [pc, #28]	; (80118b8 <USBD_SetConfig+0x148>)
 801189c:	781b      	ldrb	r3, [r3, #0]
 801189e:	4619      	mov	r1, r3
 80118a0:	6878      	ldr	r0, [r7, #4]
 80118a2:	f7ff f8f7 	bl	8010a94 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80118a6:	2303      	movs	r3, #3
 80118a8:	73fb      	strb	r3, [r7, #15]
      break;
 80118aa:	bf00      	nop
  }

  return ret;
 80118ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80118ae:	4618      	mov	r0, r3
 80118b0:	3710      	adds	r7, #16
 80118b2:	46bd      	mov	sp, r7
 80118b4:	bd80      	pop	{r7, pc}
 80118b6:	bf00      	nop
 80118b8:	2000082f 	.word	0x2000082f

080118bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80118bc:	b580      	push	{r7, lr}
 80118be:	b082      	sub	sp, #8
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]
 80118c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80118c6:	683b      	ldr	r3, [r7, #0]
 80118c8:	88db      	ldrh	r3, [r3, #6]
 80118ca:	2b01      	cmp	r3, #1
 80118cc:	d004      	beq.n	80118d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80118ce:	6839      	ldr	r1, [r7, #0]
 80118d0:	6878      	ldr	r0, [r7, #4]
 80118d2:	f000 f8cd 	bl	8011a70 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80118d6:	e023      	b.n	8011920 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80118de:	b2db      	uxtb	r3, r3
 80118e0:	2b02      	cmp	r3, #2
 80118e2:	dc02      	bgt.n	80118ea <USBD_GetConfig+0x2e>
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	dc03      	bgt.n	80118f0 <USBD_GetConfig+0x34>
 80118e8:	e015      	b.n	8011916 <USBD_GetConfig+0x5a>
 80118ea:	2b03      	cmp	r3, #3
 80118ec:	d00b      	beq.n	8011906 <USBD_GetConfig+0x4a>
 80118ee:	e012      	b.n	8011916 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	2200      	movs	r2, #0
 80118f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	3308      	adds	r3, #8
 80118fa:	2201      	movs	r2, #1
 80118fc:	4619      	mov	r1, r3
 80118fe:	6878      	ldr	r0, [r7, #4]
 8011900:	f000 f927 	bl	8011b52 <USBD_CtlSendData>
        break;
 8011904:	e00c      	b.n	8011920 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	3304      	adds	r3, #4
 801190a:	2201      	movs	r2, #1
 801190c:	4619      	mov	r1, r3
 801190e:	6878      	ldr	r0, [r7, #4]
 8011910:	f000 f91f 	bl	8011b52 <USBD_CtlSendData>
        break;
 8011914:	e004      	b.n	8011920 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8011916:	6839      	ldr	r1, [r7, #0]
 8011918:	6878      	ldr	r0, [r7, #4]
 801191a:	f000 f8a9 	bl	8011a70 <USBD_CtlError>
        break;
 801191e:	bf00      	nop
}
 8011920:	bf00      	nop
 8011922:	3708      	adds	r7, #8
 8011924:	46bd      	mov	sp, r7
 8011926:	bd80      	pop	{r7, pc}

08011928 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011928:	b580      	push	{r7, lr}
 801192a:	b082      	sub	sp, #8
 801192c:	af00      	add	r7, sp, #0
 801192e:	6078      	str	r0, [r7, #4]
 8011930:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011938:	b2db      	uxtb	r3, r3
 801193a:	3b01      	subs	r3, #1
 801193c:	2b02      	cmp	r3, #2
 801193e:	d81e      	bhi.n	801197e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011940:	683b      	ldr	r3, [r7, #0]
 8011942:	88db      	ldrh	r3, [r3, #6]
 8011944:	2b02      	cmp	r3, #2
 8011946:	d004      	beq.n	8011952 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011948:	6839      	ldr	r1, [r7, #0]
 801194a:	6878      	ldr	r0, [r7, #4]
 801194c:	f000 f890 	bl	8011a70 <USBD_CtlError>
        break;
 8011950:	e01a      	b.n	8011988 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	2201      	movs	r2, #1
 8011956:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801195e:	2b00      	cmp	r3, #0
 8011960:	d005      	beq.n	801196e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	68db      	ldr	r3, [r3, #12]
 8011966:	f043 0202 	orr.w	r2, r3, #2
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	330c      	adds	r3, #12
 8011972:	2202      	movs	r2, #2
 8011974:	4619      	mov	r1, r3
 8011976:	6878      	ldr	r0, [r7, #4]
 8011978:	f000 f8eb 	bl	8011b52 <USBD_CtlSendData>
      break;
 801197c:	e004      	b.n	8011988 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801197e:	6839      	ldr	r1, [r7, #0]
 8011980:	6878      	ldr	r0, [r7, #4]
 8011982:	f000 f875 	bl	8011a70 <USBD_CtlError>
      break;
 8011986:	bf00      	nop
  }
}
 8011988:	bf00      	nop
 801198a:	3708      	adds	r7, #8
 801198c:	46bd      	mov	sp, r7
 801198e:	bd80      	pop	{r7, pc}

08011990 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011990:	b580      	push	{r7, lr}
 8011992:	b082      	sub	sp, #8
 8011994:	af00      	add	r7, sp, #0
 8011996:	6078      	str	r0, [r7, #4]
 8011998:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801199a:	683b      	ldr	r3, [r7, #0]
 801199c:	885b      	ldrh	r3, [r3, #2]
 801199e:	2b01      	cmp	r3, #1
 80119a0:	d106      	bne.n	80119b0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	2201      	movs	r2, #1
 80119a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80119aa:	6878      	ldr	r0, [r7, #4]
 80119ac:	f000 f92b 	bl	8011c06 <USBD_CtlSendStatus>
  }
}
 80119b0:	bf00      	nop
 80119b2:	3708      	adds	r7, #8
 80119b4:	46bd      	mov	sp, r7
 80119b6:	bd80      	pop	{r7, pc}

080119b8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80119b8:	b580      	push	{r7, lr}
 80119ba:	b082      	sub	sp, #8
 80119bc:	af00      	add	r7, sp, #0
 80119be:	6078      	str	r0, [r7, #4]
 80119c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80119c8:	b2db      	uxtb	r3, r3
 80119ca:	3b01      	subs	r3, #1
 80119cc:	2b02      	cmp	r3, #2
 80119ce:	d80b      	bhi.n	80119e8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80119d0:	683b      	ldr	r3, [r7, #0]
 80119d2:	885b      	ldrh	r3, [r3, #2]
 80119d4:	2b01      	cmp	r3, #1
 80119d6:	d10c      	bne.n	80119f2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	2200      	movs	r2, #0
 80119dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80119e0:	6878      	ldr	r0, [r7, #4]
 80119e2:	f000 f910 	bl	8011c06 <USBD_CtlSendStatus>
      }
      break;
 80119e6:	e004      	b.n	80119f2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80119e8:	6839      	ldr	r1, [r7, #0]
 80119ea:	6878      	ldr	r0, [r7, #4]
 80119ec:	f000 f840 	bl	8011a70 <USBD_CtlError>
      break;
 80119f0:	e000      	b.n	80119f4 <USBD_ClrFeature+0x3c>
      break;
 80119f2:	bf00      	nop
  }
}
 80119f4:	bf00      	nop
 80119f6:	3708      	adds	r7, #8
 80119f8:	46bd      	mov	sp, r7
 80119fa:	bd80      	pop	{r7, pc}

080119fc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b084      	sub	sp, #16
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	6078      	str	r0, [r7, #4]
 8011a04:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011a06:	683b      	ldr	r3, [r7, #0]
 8011a08:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	781a      	ldrb	r2, [r3, #0]
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	3301      	adds	r3, #1
 8011a16:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	781a      	ldrb	r2, [r3, #0]
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	3301      	adds	r3, #1
 8011a24:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011a26:	68f8      	ldr	r0, [r7, #12]
 8011a28:	f7ff fabb 	bl	8010fa2 <SWAPBYTE>
 8011a2c:	4603      	mov	r3, r0
 8011a2e:	461a      	mov	r2, r3
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	3301      	adds	r3, #1
 8011a38:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	3301      	adds	r3, #1
 8011a3e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011a40:	68f8      	ldr	r0, [r7, #12]
 8011a42:	f7ff faae 	bl	8010fa2 <SWAPBYTE>
 8011a46:	4603      	mov	r3, r0
 8011a48:	461a      	mov	r2, r3
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	3301      	adds	r3, #1
 8011a52:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	3301      	adds	r3, #1
 8011a58:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011a5a:	68f8      	ldr	r0, [r7, #12]
 8011a5c:	f7ff faa1 	bl	8010fa2 <SWAPBYTE>
 8011a60:	4603      	mov	r3, r0
 8011a62:	461a      	mov	r2, r3
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	80da      	strh	r2, [r3, #6]
}
 8011a68:	bf00      	nop
 8011a6a:	3710      	adds	r7, #16
 8011a6c:	46bd      	mov	sp, r7
 8011a6e:	bd80      	pop	{r7, pc}

08011a70 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011a70:	b580      	push	{r7, lr}
 8011a72:	b082      	sub	sp, #8
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	6078      	str	r0, [r7, #4]
 8011a78:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011a7a:	2180      	movs	r1, #128	; 0x80
 8011a7c:	6878      	ldr	r0, [r7, #4]
 8011a7e:	f006 ff25 	bl	80188cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011a82:	2100      	movs	r1, #0
 8011a84:	6878      	ldr	r0, [r7, #4]
 8011a86:	f006 ff21 	bl	80188cc <USBD_LL_StallEP>
}
 8011a8a:	bf00      	nop
 8011a8c:	3708      	adds	r7, #8
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	bd80      	pop	{r7, pc}

08011a92 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011a92:	b580      	push	{r7, lr}
 8011a94:	b086      	sub	sp, #24
 8011a96:	af00      	add	r7, sp, #0
 8011a98:	60f8      	str	r0, [r7, #12]
 8011a9a:	60b9      	str	r1, [r7, #8]
 8011a9c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d036      	beq.n	8011b16 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8011aac:	6938      	ldr	r0, [r7, #16]
 8011aae:	f000 f836 	bl	8011b1e <USBD_GetLen>
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	3301      	adds	r3, #1
 8011ab6:	b29b      	uxth	r3, r3
 8011ab8:	005b      	lsls	r3, r3, #1
 8011aba:	b29a      	uxth	r2, r3
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011ac0:	7dfb      	ldrb	r3, [r7, #23]
 8011ac2:	68ba      	ldr	r2, [r7, #8]
 8011ac4:	4413      	add	r3, r2
 8011ac6:	687a      	ldr	r2, [r7, #4]
 8011ac8:	7812      	ldrb	r2, [r2, #0]
 8011aca:	701a      	strb	r2, [r3, #0]
  idx++;
 8011acc:	7dfb      	ldrb	r3, [r7, #23]
 8011ace:	3301      	adds	r3, #1
 8011ad0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011ad2:	7dfb      	ldrb	r3, [r7, #23]
 8011ad4:	68ba      	ldr	r2, [r7, #8]
 8011ad6:	4413      	add	r3, r2
 8011ad8:	2203      	movs	r2, #3
 8011ada:	701a      	strb	r2, [r3, #0]
  idx++;
 8011adc:	7dfb      	ldrb	r3, [r7, #23]
 8011ade:	3301      	adds	r3, #1
 8011ae0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011ae2:	e013      	b.n	8011b0c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8011ae4:	7dfb      	ldrb	r3, [r7, #23]
 8011ae6:	68ba      	ldr	r2, [r7, #8]
 8011ae8:	4413      	add	r3, r2
 8011aea:	693a      	ldr	r2, [r7, #16]
 8011aec:	7812      	ldrb	r2, [r2, #0]
 8011aee:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011af0:	693b      	ldr	r3, [r7, #16]
 8011af2:	3301      	adds	r3, #1
 8011af4:	613b      	str	r3, [r7, #16]
    idx++;
 8011af6:	7dfb      	ldrb	r3, [r7, #23]
 8011af8:	3301      	adds	r3, #1
 8011afa:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011afc:	7dfb      	ldrb	r3, [r7, #23]
 8011afe:	68ba      	ldr	r2, [r7, #8]
 8011b00:	4413      	add	r3, r2
 8011b02:	2200      	movs	r2, #0
 8011b04:	701a      	strb	r2, [r3, #0]
    idx++;
 8011b06:	7dfb      	ldrb	r3, [r7, #23]
 8011b08:	3301      	adds	r3, #1
 8011b0a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011b0c:	693b      	ldr	r3, [r7, #16]
 8011b0e:	781b      	ldrb	r3, [r3, #0]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d1e7      	bne.n	8011ae4 <USBD_GetString+0x52>
 8011b14:	e000      	b.n	8011b18 <USBD_GetString+0x86>
    return;
 8011b16:	bf00      	nop
  }
}
 8011b18:	3718      	adds	r7, #24
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	bd80      	pop	{r7, pc}

08011b1e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011b1e:	b480      	push	{r7}
 8011b20:	b085      	sub	sp, #20
 8011b22:	af00      	add	r7, sp, #0
 8011b24:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011b26:	2300      	movs	r3, #0
 8011b28:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011b2e:	e005      	b.n	8011b3c <USBD_GetLen+0x1e>
  {
    len++;
 8011b30:	7bfb      	ldrb	r3, [r7, #15]
 8011b32:	3301      	adds	r3, #1
 8011b34:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011b36:	68bb      	ldr	r3, [r7, #8]
 8011b38:	3301      	adds	r3, #1
 8011b3a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011b3c:	68bb      	ldr	r3, [r7, #8]
 8011b3e:	781b      	ldrb	r3, [r3, #0]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d1f5      	bne.n	8011b30 <USBD_GetLen+0x12>
  }

  return len;
 8011b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b46:	4618      	mov	r0, r3
 8011b48:	3714      	adds	r7, #20
 8011b4a:	46bd      	mov	sp, r7
 8011b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b50:	4770      	bx	lr

08011b52 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011b52:	b580      	push	{r7, lr}
 8011b54:	b084      	sub	sp, #16
 8011b56:	af00      	add	r7, sp, #0
 8011b58:	60f8      	str	r0, [r7, #12]
 8011b5a:	60b9      	str	r1, [r7, #8]
 8011b5c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	2202      	movs	r2, #2
 8011b62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	687a      	ldr	r2, [r7, #4]
 8011b6a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	687a      	ldr	r2, [r7, #4]
 8011b70:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	68ba      	ldr	r2, [r7, #8]
 8011b76:	2100      	movs	r1, #0
 8011b78:	68f8      	ldr	r0, [r7, #12]
 8011b7a:	f006 ff30 	bl	80189de <USBD_LL_Transmit>

  return USBD_OK;
 8011b7e:	2300      	movs	r3, #0
}
 8011b80:	4618      	mov	r0, r3
 8011b82:	3710      	adds	r7, #16
 8011b84:	46bd      	mov	sp, r7
 8011b86:	bd80      	pop	{r7, pc}

08011b88 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b084      	sub	sp, #16
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	60f8      	str	r0, [r7, #12]
 8011b90:	60b9      	str	r1, [r7, #8]
 8011b92:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	68ba      	ldr	r2, [r7, #8]
 8011b98:	2100      	movs	r1, #0
 8011b9a:	68f8      	ldr	r0, [r7, #12]
 8011b9c:	f006 ff1f 	bl	80189de <USBD_LL_Transmit>

  return USBD_OK;
 8011ba0:	2300      	movs	r3, #0
}
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	3710      	adds	r7, #16
 8011ba6:	46bd      	mov	sp, r7
 8011ba8:	bd80      	pop	{r7, pc}

08011baa <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011baa:	b580      	push	{r7, lr}
 8011bac:	b084      	sub	sp, #16
 8011bae:	af00      	add	r7, sp, #0
 8011bb0:	60f8      	str	r0, [r7, #12]
 8011bb2:	60b9      	str	r1, [r7, #8]
 8011bb4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	2203      	movs	r2, #3
 8011bba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	687a      	ldr	r2, [r7, #4]
 8011bc2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	687a      	ldr	r2, [r7, #4]
 8011bca:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	68ba      	ldr	r2, [r7, #8]
 8011bd2:	2100      	movs	r1, #0
 8011bd4:	68f8      	ldr	r0, [r7, #12]
 8011bd6:	f006 ff23 	bl	8018a20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011bda:	2300      	movs	r3, #0
}
 8011bdc:	4618      	mov	r0, r3
 8011bde:	3710      	adds	r7, #16
 8011be0:	46bd      	mov	sp, r7
 8011be2:	bd80      	pop	{r7, pc}

08011be4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b084      	sub	sp, #16
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	60f8      	str	r0, [r7, #12]
 8011bec:	60b9      	str	r1, [r7, #8]
 8011bee:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	68ba      	ldr	r2, [r7, #8]
 8011bf4:	2100      	movs	r1, #0
 8011bf6:	68f8      	ldr	r0, [r7, #12]
 8011bf8:	f006 ff12 	bl	8018a20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011bfc:	2300      	movs	r3, #0
}
 8011bfe:	4618      	mov	r0, r3
 8011c00:	3710      	adds	r7, #16
 8011c02:	46bd      	mov	sp, r7
 8011c04:	bd80      	pop	{r7, pc}

08011c06 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011c06:	b580      	push	{r7, lr}
 8011c08:	b082      	sub	sp, #8
 8011c0a:	af00      	add	r7, sp, #0
 8011c0c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	2204      	movs	r2, #4
 8011c12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011c16:	2300      	movs	r3, #0
 8011c18:	2200      	movs	r2, #0
 8011c1a:	2100      	movs	r1, #0
 8011c1c:	6878      	ldr	r0, [r7, #4]
 8011c1e:	f006 fede 	bl	80189de <USBD_LL_Transmit>

  return USBD_OK;
 8011c22:	2300      	movs	r3, #0
}
 8011c24:	4618      	mov	r0, r3
 8011c26:	3708      	adds	r7, #8
 8011c28:	46bd      	mov	sp, r7
 8011c2a:	bd80      	pop	{r7, pc}

08011c2c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b082      	sub	sp, #8
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	2205      	movs	r2, #5
 8011c38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	2200      	movs	r2, #0
 8011c40:	2100      	movs	r1, #0
 8011c42:	6878      	ldr	r0, [r7, #4]
 8011c44:	f006 feec 	bl	8018a20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011c48:	2300      	movs	r3, #0
}
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	3708      	adds	r7, #8
 8011c4e:	46bd      	mov	sp, r7
 8011c50:	bd80      	pop	{r7, pc}
	...

08011c54 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b084      	sub	sp, #16
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011c5e:	79fb      	ldrb	r3, [r7, #7]
 8011c60:	4a08      	ldr	r2, [pc, #32]	; (8011c84 <disk_status+0x30>)
 8011c62:	009b      	lsls	r3, r3, #2
 8011c64:	4413      	add	r3, r2
 8011c66:	685b      	ldr	r3, [r3, #4]
 8011c68:	685b      	ldr	r3, [r3, #4]
 8011c6a:	79fa      	ldrb	r2, [r7, #7]
 8011c6c:	4905      	ldr	r1, [pc, #20]	; (8011c84 <disk_status+0x30>)
 8011c6e:	440a      	add	r2, r1
 8011c70:	7a12      	ldrb	r2, [r2, #8]
 8011c72:	4610      	mov	r0, r2
 8011c74:	4798      	blx	r3
 8011c76:	4603      	mov	r3, r0
 8011c78:	73fb      	strb	r3, [r7, #15]
  return stat;
 8011c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	3710      	adds	r7, #16
 8011c80:	46bd      	mov	sp, r7
 8011c82:	bd80      	pop	{r7, pc}
 8011c84:	20000858 	.word	0x20000858

08011c88 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b084      	sub	sp, #16
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	4603      	mov	r3, r0
 8011c90:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011c92:	2300      	movs	r3, #0
 8011c94:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8011c96:	79fb      	ldrb	r3, [r7, #7]
 8011c98:	4a0d      	ldr	r2, [pc, #52]	; (8011cd0 <disk_initialize+0x48>)
 8011c9a:	5cd3      	ldrb	r3, [r2, r3]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d111      	bne.n	8011cc4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011ca0:	79fb      	ldrb	r3, [r7, #7]
 8011ca2:	4a0b      	ldr	r2, [pc, #44]	; (8011cd0 <disk_initialize+0x48>)
 8011ca4:	2101      	movs	r1, #1
 8011ca6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011ca8:	79fb      	ldrb	r3, [r7, #7]
 8011caa:	4a09      	ldr	r2, [pc, #36]	; (8011cd0 <disk_initialize+0x48>)
 8011cac:	009b      	lsls	r3, r3, #2
 8011cae:	4413      	add	r3, r2
 8011cb0:	685b      	ldr	r3, [r3, #4]
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	79fa      	ldrb	r2, [r7, #7]
 8011cb6:	4906      	ldr	r1, [pc, #24]	; (8011cd0 <disk_initialize+0x48>)
 8011cb8:	440a      	add	r2, r1
 8011cba:	7a12      	ldrb	r2, [r2, #8]
 8011cbc:	4610      	mov	r0, r2
 8011cbe:	4798      	blx	r3
 8011cc0:	4603      	mov	r3, r0
 8011cc2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8011cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	3710      	adds	r7, #16
 8011cca:	46bd      	mov	sp, r7
 8011ccc:	bd80      	pop	{r7, pc}
 8011cce:	bf00      	nop
 8011cd0:	20000858 	.word	0x20000858

08011cd4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8011cd4:	b590      	push	{r4, r7, lr}
 8011cd6:	b087      	sub	sp, #28
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	60b9      	str	r1, [r7, #8]
 8011cdc:	607a      	str	r2, [r7, #4]
 8011cde:	603b      	str	r3, [r7, #0]
 8011ce0:	4603      	mov	r3, r0
 8011ce2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8011ce4:	7bfb      	ldrb	r3, [r7, #15]
 8011ce6:	4a0a      	ldr	r2, [pc, #40]	; (8011d10 <disk_read+0x3c>)
 8011ce8:	009b      	lsls	r3, r3, #2
 8011cea:	4413      	add	r3, r2
 8011cec:	685b      	ldr	r3, [r3, #4]
 8011cee:	689c      	ldr	r4, [r3, #8]
 8011cf0:	7bfb      	ldrb	r3, [r7, #15]
 8011cf2:	4a07      	ldr	r2, [pc, #28]	; (8011d10 <disk_read+0x3c>)
 8011cf4:	4413      	add	r3, r2
 8011cf6:	7a18      	ldrb	r0, [r3, #8]
 8011cf8:	683b      	ldr	r3, [r7, #0]
 8011cfa:	687a      	ldr	r2, [r7, #4]
 8011cfc:	68b9      	ldr	r1, [r7, #8]
 8011cfe:	47a0      	blx	r4
 8011d00:	4603      	mov	r3, r0
 8011d02:	75fb      	strb	r3, [r7, #23]
  return res;
 8011d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d06:	4618      	mov	r0, r3
 8011d08:	371c      	adds	r7, #28
 8011d0a:	46bd      	mov	sp, r7
 8011d0c:	bd90      	pop	{r4, r7, pc}
 8011d0e:	bf00      	nop
 8011d10:	20000858 	.word	0x20000858

08011d14 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011d14:	b590      	push	{r4, r7, lr}
 8011d16:	b087      	sub	sp, #28
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	60b9      	str	r1, [r7, #8]
 8011d1c:	607a      	str	r2, [r7, #4]
 8011d1e:	603b      	str	r3, [r7, #0]
 8011d20:	4603      	mov	r3, r0
 8011d22:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011d24:	7bfb      	ldrb	r3, [r7, #15]
 8011d26:	4a0a      	ldr	r2, [pc, #40]	; (8011d50 <disk_write+0x3c>)
 8011d28:	009b      	lsls	r3, r3, #2
 8011d2a:	4413      	add	r3, r2
 8011d2c:	685b      	ldr	r3, [r3, #4]
 8011d2e:	68dc      	ldr	r4, [r3, #12]
 8011d30:	7bfb      	ldrb	r3, [r7, #15]
 8011d32:	4a07      	ldr	r2, [pc, #28]	; (8011d50 <disk_write+0x3c>)
 8011d34:	4413      	add	r3, r2
 8011d36:	7a18      	ldrb	r0, [r3, #8]
 8011d38:	683b      	ldr	r3, [r7, #0]
 8011d3a:	687a      	ldr	r2, [r7, #4]
 8011d3c:	68b9      	ldr	r1, [r7, #8]
 8011d3e:	47a0      	blx	r4
 8011d40:	4603      	mov	r3, r0
 8011d42:	75fb      	strb	r3, [r7, #23]
  return res;
 8011d44:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d46:	4618      	mov	r0, r3
 8011d48:	371c      	adds	r7, #28
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	bd90      	pop	{r4, r7, pc}
 8011d4e:	bf00      	nop
 8011d50:	20000858 	.word	0x20000858

08011d54 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011d54:	b580      	push	{r7, lr}
 8011d56:	b084      	sub	sp, #16
 8011d58:	af00      	add	r7, sp, #0
 8011d5a:	4603      	mov	r3, r0
 8011d5c:	603a      	str	r2, [r7, #0]
 8011d5e:	71fb      	strb	r3, [r7, #7]
 8011d60:	460b      	mov	r3, r1
 8011d62:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011d64:	79fb      	ldrb	r3, [r7, #7]
 8011d66:	4a09      	ldr	r2, [pc, #36]	; (8011d8c <disk_ioctl+0x38>)
 8011d68:	009b      	lsls	r3, r3, #2
 8011d6a:	4413      	add	r3, r2
 8011d6c:	685b      	ldr	r3, [r3, #4]
 8011d6e:	691b      	ldr	r3, [r3, #16]
 8011d70:	79fa      	ldrb	r2, [r7, #7]
 8011d72:	4906      	ldr	r1, [pc, #24]	; (8011d8c <disk_ioctl+0x38>)
 8011d74:	440a      	add	r2, r1
 8011d76:	7a10      	ldrb	r0, [r2, #8]
 8011d78:	79b9      	ldrb	r1, [r7, #6]
 8011d7a:	683a      	ldr	r2, [r7, #0]
 8011d7c:	4798      	blx	r3
 8011d7e:	4603      	mov	r3, r0
 8011d80:	73fb      	strb	r3, [r7, #15]
  return res;
 8011d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d84:	4618      	mov	r0, r3
 8011d86:	3710      	adds	r7, #16
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	bd80      	pop	{r7, pc}
 8011d8c:	20000858 	.word	0x20000858

08011d90 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011d90:	b480      	push	{r7}
 8011d92:	b085      	sub	sp, #20
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	3301      	adds	r3, #1
 8011d9c:	781b      	ldrb	r3, [r3, #0]
 8011d9e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011da0:	89fb      	ldrh	r3, [r7, #14]
 8011da2:	021b      	lsls	r3, r3, #8
 8011da4:	b21a      	sxth	r2, r3
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	781b      	ldrb	r3, [r3, #0]
 8011daa:	b21b      	sxth	r3, r3
 8011dac:	4313      	orrs	r3, r2
 8011dae:	b21b      	sxth	r3, r3
 8011db0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8011db2:	89fb      	ldrh	r3, [r7, #14]
}
 8011db4:	4618      	mov	r0, r3
 8011db6:	3714      	adds	r7, #20
 8011db8:	46bd      	mov	sp, r7
 8011dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dbe:	4770      	bx	lr

08011dc0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011dc0:	b480      	push	{r7}
 8011dc2:	b085      	sub	sp, #20
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	3303      	adds	r3, #3
 8011dcc:	781b      	ldrb	r3, [r3, #0]
 8011dce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	021b      	lsls	r3, r3, #8
 8011dd4:	687a      	ldr	r2, [r7, #4]
 8011dd6:	3202      	adds	r2, #2
 8011dd8:	7812      	ldrb	r2, [r2, #0]
 8011dda:	4313      	orrs	r3, r2
 8011ddc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	021b      	lsls	r3, r3, #8
 8011de2:	687a      	ldr	r2, [r7, #4]
 8011de4:	3201      	adds	r2, #1
 8011de6:	7812      	ldrb	r2, [r2, #0]
 8011de8:	4313      	orrs	r3, r2
 8011dea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	021b      	lsls	r3, r3, #8
 8011df0:	687a      	ldr	r2, [r7, #4]
 8011df2:	7812      	ldrb	r2, [r2, #0]
 8011df4:	4313      	orrs	r3, r2
 8011df6:	60fb      	str	r3, [r7, #12]
	return rv;
 8011df8:	68fb      	ldr	r3, [r7, #12]
}
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	3714      	adds	r7, #20
 8011dfe:	46bd      	mov	sp, r7
 8011e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e04:	4770      	bx	lr

08011e06 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8011e06:	b480      	push	{r7}
 8011e08:	b083      	sub	sp, #12
 8011e0a:	af00      	add	r7, sp, #0
 8011e0c:	6078      	str	r0, [r7, #4]
 8011e0e:	460b      	mov	r3, r1
 8011e10:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	1c5a      	adds	r2, r3, #1
 8011e16:	607a      	str	r2, [r7, #4]
 8011e18:	887a      	ldrh	r2, [r7, #2]
 8011e1a:	b2d2      	uxtb	r2, r2
 8011e1c:	701a      	strb	r2, [r3, #0]
 8011e1e:	887b      	ldrh	r3, [r7, #2]
 8011e20:	0a1b      	lsrs	r3, r3, #8
 8011e22:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	1c5a      	adds	r2, r3, #1
 8011e28:	607a      	str	r2, [r7, #4]
 8011e2a:	887a      	ldrh	r2, [r7, #2]
 8011e2c:	b2d2      	uxtb	r2, r2
 8011e2e:	701a      	strb	r2, [r3, #0]
}
 8011e30:	bf00      	nop
 8011e32:	370c      	adds	r7, #12
 8011e34:	46bd      	mov	sp, r7
 8011e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e3a:	4770      	bx	lr

08011e3c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011e3c:	b480      	push	{r7}
 8011e3e:	b083      	sub	sp, #12
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
 8011e44:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	1c5a      	adds	r2, r3, #1
 8011e4a:	607a      	str	r2, [r7, #4]
 8011e4c:	683a      	ldr	r2, [r7, #0]
 8011e4e:	b2d2      	uxtb	r2, r2
 8011e50:	701a      	strb	r2, [r3, #0]
 8011e52:	683b      	ldr	r3, [r7, #0]
 8011e54:	0a1b      	lsrs	r3, r3, #8
 8011e56:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	1c5a      	adds	r2, r3, #1
 8011e5c:	607a      	str	r2, [r7, #4]
 8011e5e:	683a      	ldr	r2, [r7, #0]
 8011e60:	b2d2      	uxtb	r2, r2
 8011e62:	701a      	strb	r2, [r3, #0]
 8011e64:	683b      	ldr	r3, [r7, #0]
 8011e66:	0a1b      	lsrs	r3, r3, #8
 8011e68:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	1c5a      	adds	r2, r3, #1
 8011e6e:	607a      	str	r2, [r7, #4]
 8011e70:	683a      	ldr	r2, [r7, #0]
 8011e72:	b2d2      	uxtb	r2, r2
 8011e74:	701a      	strb	r2, [r3, #0]
 8011e76:	683b      	ldr	r3, [r7, #0]
 8011e78:	0a1b      	lsrs	r3, r3, #8
 8011e7a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	1c5a      	adds	r2, r3, #1
 8011e80:	607a      	str	r2, [r7, #4]
 8011e82:	683a      	ldr	r2, [r7, #0]
 8011e84:	b2d2      	uxtb	r2, r2
 8011e86:	701a      	strb	r2, [r3, #0]
}
 8011e88:	bf00      	nop
 8011e8a:	370c      	adds	r7, #12
 8011e8c:	46bd      	mov	sp, r7
 8011e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e92:	4770      	bx	lr

08011e94 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011e94:	b480      	push	{r7}
 8011e96:	b087      	sub	sp, #28
 8011e98:	af00      	add	r7, sp, #0
 8011e9a:	60f8      	str	r0, [r7, #12]
 8011e9c:	60b9      	str	r1, [r7, #8]
 8011e9e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011ea4:	68bb      	ldr	r3, [r7, #8]
 8011ea6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d00d      	beq.n	8011eca <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011eae:	693a      	ldr	r2, [r7, #16]
 8011eb0:	1c53      	adds	r3, r2, #1
 8011eb2:	613b      	str	r3, [r7, #16]
 8011eb4:	697b      	ldr	r3, [r7, #20]
 8011eb6:	1c59      	adds	r1, r3, #1
 8011eb8:	6179      	str	r1, [r7, #20]
 8011eba:	7812      	ldrb	r2, [r2, #0]
 8011ebc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	3b01      	subs	r3, #1
 8011ec2:	607b      	str	r3, [r7, #4]
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d1f1      	bne.n	8011eae <mem_cpy+0x1a>
	}
}
 8011eca:	bf00      	nop
 8011ecc:	371c      	adds	r7, #28
 8011ece:	46bd      	mov	sp, r7
 8011ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed4:	4770      	bx	lr

08011ed6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011ed6:	b480      	push	{r7}
 8011ed8:	b087      	sub	sp, #28
 8011eda:	af00      	add	r7, sp, #0
 8011edc:	60f8      	str	r0, [r7, #12]
 8011ede:	60b9      	str	r1, [r7, #8]
 8011ee0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011ee6:	697b      	ldr	r3, [r7, #20]
 8011ee8:	1c5a      	adds	r2, r3, #1
 8011eea:	617a      	str	r2, [r7, #20]
 8011eec:	68ba      	ldr	r2, [r7, #8]
 8011eee:	b2d2      	uxtb	r2, r2
 8011ef0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	3b01      	subs	r3, #1
 8011ef6:	607b      	str	r3, [r7, #4]
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d1f3      	bne.n	8011ee6 <mem_set+0x10>
}
 8011efe:	bf00      	nop
 8011f00:	bf00      	nop
 8011f02:	371c      	adds	r7, #28
 8011f04:	46bd      	mov	sp, r7
 8011f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f0a:	4770      	bx	lr

08011f0c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011f0c:	b480      	push	{r7}
 8011f0e:	b089      	sub	sp, #36	; 0x24
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	60f8      	str	r0, [r7, #12]
 8011f14:	60b9      	str	r1, [r7, #8]
 8011f16:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	61fb      	str	r3, [r7, #28]
 8011f1c:	68bb      	ldr	r3, [r7, #8]
 8011f1e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8011f20:	2300      	movs	r3, #0
 8011f22:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011f24:	69fb      	ldr	r3, [r7, #28]
 8011f26:	1c5a      	adds	r2, r3, #1
 8011f28:	61fa      	str	r2, [r7, #28]
 8011f2a:	781b      	ldrb	r3, [r3, #0]
 8011f2c:	4619      	mov	r1, r3
 8011f2e:	69bb      	ldr	r3, [r7, #24]
 8011f30:	1c5a      	adds	r2, r3, #1
 8011f32:	61ba      	str	r2, [r7, #24]
 8011f34:	781b      	ldrb	r3, [r3, #0]
 8011f36:	1acb      	subs	r3, r1, r3
 8011f38:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	3b01      	subs	r3, #1
 8011f3e:	607b      	str	r3, [r7, #4]
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d002      	beq.n	8011f4c <mem_cmp+0x40>
 8011f46:	697b      	ldr	r3, [r7, #20]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d0eb      	beq.n	8011f24 <mem_cmp+0x18>

	return r;
 8011f4c:	697b      	ldr	r3, [r7, #20]
}
 8011f4e:	4618      	mov	r0, r3
 8011f50:	3724      	adds	r7, #36	; 0x24
 8011f52:	46bd      	mov	sp, r7
 8011f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f58:	4770      	bx	lr

08011f5a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011f5a:	b480      	push	{r7}
 8011f5c:	b083      	sub	sp, #12
 8011f5e:	af00      	add	r7, sp, #0
 8011f60:	6078      	str	r0, [r7, #4]
 8011f62:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011f64:	e002      	b.n	8011f6c <chk_chr+0x12>
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	3301      	adds	r3, #1
 8011f6a:	607b      	str	r3, [r7, #4]
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	781b      	ldrb	r3, [r3, #0]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d005      	beq.n	8011f80 <chk_chr+0x26>
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	781b      	ldrb	r3, [r3, #0]
 8011f78:	461a      	mov	r2, r3
 8011f7a:	683b      	ldr	r3, [r7, #0]
 8011f7c:	4293      	cmp	r3, r2
 8011f7e:	d1f2      	bne.n	8011f66 <chk_chr+0xc>
	return *str;
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	781b      	ldrb	r3, [r3, #0]
}
 8011f84:	4618      	mov	r0, r3
 8011f86:	370c      	adds	r7, #12
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f8e:	4770      	bx	lr

08011f90 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b082      	sub	sp, #8
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d009      	beq.n	8011fb2 <lock_fs+0x22>
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	68db      	ldr	r3, [r3, #12]
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	f002 fcde 	bl	8014964 <ff_req_grant>
 8011fa8:	4603      	mov	r3, r0
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d001      	beq.n	8011fb2 <lock_fs+0x22>
 8011fae:	2301      	movs	r3, #1
 8011fb0:	e000      	b.n	8011fb4 <lock_fs+0x24>
 8011fb2:	2300      	movs	r3, #0
}
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	3708      	adds	r7, #8
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	bd80      	pop	{r7, pc}

08011fbc <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	b082      	sub	sp, #8
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	6078      	str	r0, [r7, #4]
 8011fc4:	460b      	mov	r3, r1
 8011fc6:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d00d      	beq.n	8011fea <unlock_fs+0x2e>
 8011fce:	78fb      	ldrb	r3, [r7, #3]
 8011fd0:	2b0c      	cmp	r3, #12
 8011fd2:	d00a      	beq.n	8011fea <unlock_fs+0x2e>
 8011fd4:	78fb      	ldrb	r3, [r7, #3]
 8011fd6:	2b0b      	cmp	r3, #11
 8011fd8:	d007      	beq.n	8011fea <unlock_fs+0x2e>
 8011fda:	78fb      	ldrb	r3, [r7, #3]
 8011fdc:	2b0f      	cmp	r3, #15
 8011fde:	d004      	beq.n	8011fea <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	68db      	ldr	r3, [r3, #12]
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	f002 fcd2 	bl	801498e <ff_rel_grant>
	}
}
 8011fea:	bf00      	nop
 8011fec:	3708      	adds	r7, #8
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	bd80      	pop	{r7, pc}
	...

08011ff4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011ff4:	b480      	push	{r7}
 8011ff6:	b085      	sub	sp, #20
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
 8011ffc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011ffe:	2300      	movs	r3, #0
 8012000:	60bb      	str	r3, [r7, #8]
 8012002:	68bb      	ldr	r3, [r7, #8]
 8012004:	60fb      	str	r3, [r7, #12]
 8012006:	e029      	b.n	801205c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8012008:	4a27      	ldr	r2, [pc, #156]	; (80120a8 <chk_lock+0xb4>)
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	011b      	lsls	r3, r3, #4
 801200e:	4413      	add	r3, r2
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d01d      	beq.n	8012052 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012016:	4a24      	ldr	r2, [pc, #144]	; (80120a8 <chk_lock+0xb4>)
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	011b      	lsls	r3, r3, #4
 801201c:	4413      	add	r3, r2
 801201e:	681a      	ldr	r2, [r3, #0]
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	429a      	cmp	r2, r3
 8012026:	d116      	bne.n	8012056 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8012028:	4a1f      	ldr	r2, [pc, #124]	; (80120a8 <chk_lock+0xb4>)
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	011b      	lsls	r3, r3, #4
 801202e:	4413      	add	r3, r2
 8012030:	3304      	adds	r3, #4
 8012032:	681a      	ldr	r2, [r3, #0]
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012038:	429a      	cmp	r2, r3
 801203a:	d10c      	bne.n	8012056 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801203c:	4a1a      	ldr	r2, [pc, #104]	; (80120a8 <chk_lock+0xb4>)
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	011b      	lsls	r3, r3, #4
 8012042:	4413      	add	r3, r2
 8012044:	3308      	adds	r3, #8
 8012046:	681a      	ldr	r2, [r3, #0]
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801204c:	429a      	cmp	r2, r3
 801204e:	d102      	bne.n	8012056 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012050:	e007      	b.n	8012062 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8012052:	2301      	movs	r3, #1
 8012054:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	3301      	adds	r3, #1
 801205a:	60fb      	str	r3, [r7, #12]
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	2b01      	cmp	r3, #1
 8012060:	d9d2      	bls.n	8012008 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	2b02      	cmp	r3, #2
 8012066:	d109      	bne.n	801207c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8012068:	68bb      	ldr	r3, [r7, #8]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d102      	bne.n	8012074 <chk_lock+0x80>
 801206e:	683b      	ldr	r3, [r7, #0]
 8012070:	2b02      	cmp	r3, #2
 8012072:	d101      	bne.n	8012078 <chk_lock+0x84>
 8012074:	2300      	movs	r3, #0
 8012076:	e010      	b.n	801209a <chk_lock+0xa6>
 8012078:	2312      	movs	r3, #18
 801207a:	e00e      	b.n	801209a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801207c:	683b      	ldr	r3, [r7, #0]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d108      	bne.n	8012094 <chk_lock+0xa0>
 8012082:	4a09      	ldr	r2, [pc, #36]	; (80120a8 <chk_lock+0xb4>)
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	011b      	lsls	r3, r3, #4
 8012088:	4413      	add	r3, r2
 801208a:	330c      	adds	r3, #12
 801208c:	881b      	ldrh	r3, [r3, #0]
 801208e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012092:	d101      	bne.n	8012098 <chk_lock+0xa4>
 8012094:	2310      	movs	r3, #16
 8012096:	e000      	b.n	801209a <chk_lock+0xa6>
 8012098:	2300      	movs	r3, #0
}
 801209a:	4618      	mov	r0, r3
 801209c:	3714      	adds	r7, #20
 801209e:	46bd      	mov	sp, r7
 80120a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a4:	4770      	bx	lr
 80120a6:	bf00      	nop
 80120a8:	20000838 	.word	0x20000838

080120ac <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80120ac:	b480      	push	{r7}
 80120ae:	b083      	sub	sp, #12
 80120b0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80120b2:	2300      	movs	r3, #0
 80120b4:	607b      	str	r3, [r7, #4]
 80120b6:	e002      	b.n	80120be <enq_lock+0x12>
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	3301      	adds	r3, #1
 80120bc:	607b      	str	r3, [r7, #4]
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	2b01      	cmp	r3, #1
 80120c2:	d806      	bhi.n	80120d2 <enq_lock+0x26>
 80120c4:	4a09      	ldr	r2, [pc, #36]	; (80120ec <enq_lock+0x40>)
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	011b      	lsls	r3, r3, #4
 80120ca:	4413      	add	r3, r2
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d1f2      	bne.n	80120b8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	2b02      	cmp	r3, #2
 80120d6:	bf14      	ite	ne
 80120d8:	2301      	movne	r3, #1
 80120da:	2300      	moveq	r3, #0
 80120dc:	b2db      	uxtb	r3, r3
}
 80120de:	4618      	mov	r0, r3
 80120e0:	370c      	adds	r7, #12
 80120e2:	46bd      	mov	sp, r7
 80120e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e8:	4770      	bx	lr
 80120ea:	bf00      	nop
 80120ec:	20000838 	.word	0x20000838

080120f0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80120f0:	b480      	push	{r7}
 80120f2:	b085      	sub	sp, #20
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	6078      	str	r0, [r7, #4]
 80120f8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80120fa:	2300      	movs	r3, #0
 80120fc:	60fb      	str	r3, [r7, #12]
 80120fe:	e01f      	b.n	8012140 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8012100:	4a41      	ldr	r2, [pc, #260]	; (8012208 <inc_lock+0x118>)
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	011b      	lsls	r3, r3, #4
 8012106:	4413      	add	r3, r2
 8012108:	681a      	ldr	r2, [r3, #0]
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	429a      	cmp	r2, r3
 8012110:	d113      	bne.n	801213a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8012112:	4a3d      	ldr	r2, [pc, #244]	; (8012208 <inc_lock+0x118>)
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	011b      	lsls	r3, r3, #4
 8012118:	4413      	add	r3, r2
 801211a:	3304      	adds	r3, #4
 801211c:	681a      	ldr	r2, [r3, #0]
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8012122:	429a      	cmp	r2, r3
 8012124:	d109      	bne.n	801213a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8012126:	4a38      	ldr	r2, [pc, #224]	; (8012208 <inc_lock+0x118>)
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	011b      	lsls	r3, r3, #4
 801212c:	4413      	add	r3, r2
 801212e:	3308      	adds	r3, #8
 8012130:	681a      	ldr	r2, [r3, #0]
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8012136:	429a      	cmp	r2, r3
 8012138:	d006      	beq.n	8012148 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	3301      	adds	r3, #1
 801213e:	60fb      	str	r3, [r7, #12]
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	2b01      	cmp	r3, #1
 8012144:	d9dc      	bls.n	8012100 <inc_lock+0x10>
 8012146:	e000      	b.n	801214a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8012148:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	2b02      	cmp	r3, #2
 801214e:	d132      	bne.n	80121b6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012150:	2300      	movs	r3, #0
 8012152:	60fb      	str	r3, [r7, #12]
 8012154:	e002      	b.n	801215c <inc_lock+0x6c>
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	3301      	adds	r3, #1
 801215a:	60fb      	str	r3, [r7, #12]
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	2b01      	cmp	r3, #1
 8012160:	d806      	bhi.n	8012170 <inc_lock+0x80>
 8012162:	4a29      	ldr	r2, [pc, #164]	; (8012208 <inc_lock+0x118>)
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	011b      	lsls	r3, r3, #4
 8012168:	4413      	add	r3, r2
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d1f2      	bne.n	8012156 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	2b02      	cmp	r3, #2
 8012174:	d101      	bne.n	801217a <inc_lock+0x8a>
 8012176:	2300      	movs	r3, #0
 8012178:	e040      	b.n	80121fc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	681a      	ldr	r2, [r3, #0]
 801217e:	4922      	ldr	r1, [pc, #136]	; (8012208 <inc_lock+0x118>)
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	011b      	lsls	r3, r3, #4
 8012184:	440b      	add	r3, r1
 8012186:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	689a      	ldr	r2, [r3, #8]
 801218c:	491e      	ldr	r1, [pc, #120]	; (8012208 <inc_lock+0x118>)
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	011b      	lsls	r3, r3, #4
 8012192:	440b      	add	r3, r1
 8012194:	3304      	adds	r3, #4
 8012196:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	695a      	ldr	r2, [r3, #20]
 801219c:	491a      	ldr	r1, [pc, #104]	; (8012208 <inc_lock+0x118>)
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	011b      	lsls	r3, r3, #4
 80121a2:	440b      	add	r3, r1
 80121a4:	3308      	adds	r3, #8
 80121a6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80121a8:	4a17      	ldr	r2, [pc, #92]	; (8012208 <inc_lock+0x118>)
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	011b      	lsls	r3, r3, #4
 80121ae:	4413      	add	r3, r2
 80121b0:	330c      	adds	r3, #12
 80121b2:	2200      	movs	r2, #0
 80121b4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80121b6:	683b      	ldr	r3, [r7, #0]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d009      	beq.n	80121d0 <inc_lock+0xe0>
 80121bc:	4a12      	ldr	r2, [pc, #72]	; (8012208 <inc_lock+0x118>)
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	011b      	lsls	r3, r3, #4
 80121c2:	4413      	add	r3, r2
 80121c4:	330c      	adds	r3, #12
 80121c6:	881b      	ldrh	r3, [r3, #0]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d001      	beq.n	80121d0 <inc_lock+0xe0>
 80121cc:	2300      	movs	r3, #0
 80121ce:	e015      	b.n	80121fc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80121d0:	683b      	ldr	r3, [r7, #0]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d108      	bne.n	80121e8 <inc_lock+0xf8>
 80121d6:	4a0c      	ldr	r2, [pc, #48]	; (8012208 <inc_lock+0x118>)
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	011b      	lsls	r3, r3, #4
 80121dc:	4413      	add	r3, r2
 80121de:	330c      	adds	r3, #12
 80121e0:	881b      	ldrh	r3, [r3, #0]
 80121e2:	3301      	adds	r3, #1
 80121e4:	b29a      	uxth	r2, r3
 80121e6:	e001      	b.n	80121ec <inc_lock+0xfc>
 80121e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80121ec:	4906      	ldr	r1, [pc, #24]	; (8012208 <inc_lock+0x118>)
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	011b      	lsls	r3, r3, #4
 80121f2:	440b      	add	r3, r1
 80121f4:	330c      	adds	r3, #12
 80121f6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	3301      	adds	r3, #1
}
 80121fc:	4618      	mov	r0, r3
 80121fe:	3714      	adds	r7, #20
 8012200:	46bd      	mov	sp, r7
 8012202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012206:	4770      	bx	lr
 8012208:	20000838 	.word	0x20000838

0801220c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801220c:	b480      	push	{r7}
 801220e:	b085      	sub	sp, #20
 8012210:	af00      	add	r7, sp, #0
 8012212:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	3b01      	subs	r3, #1
 8012218:	607b      	str	r3, [r7, #4]
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	2b01      	cmp	r3, #1
 801221e:	d825      	bhi.n	801226c <dec_lock+0x60>
		n = Files[i].ctr;
 8012220:	4a17      	ldr	r2, [pc, #92]	; (8012280 <dec_lock+0x74>)
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	011b      	lsls	r3, r3, #4
 8012226:	4413      	add	r3, r2
 8012228:	330c      	adds	r3, #12
 801222a:	881b      	ldrh	r3, [r3, #0]
 801222c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801222e:	89fb      	ldrh	r3, [r7, #14]
 8012230:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012234:	d101      	bne.n	801223a <dec_lock+0x2e>
 8012236:	2300      	movs	r3, #0
 8012238:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801223a:	89fb      	ldrh	r3, [r7, #14]
 801223c:	2b00      	cmp	r3, #0
 801223e:	d002      	beq.n	8012246 <dec_lock+0x3a>
 8012240:	89fb      	ldrh	r3, [r7, #14]
 8012242:	3b01      	subs	r3, #1
 8012244:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8012246:	4a0e      	ldr	r2, [pc, #56]	; (8012280 <dec_lock+0x74>)
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	011b      	lsls	r3, r3, #4
 801224c:	4413      	add	r3, r2
 801224e:	330c      	adds	r3, #12
 8012250:	89fa      	ldrh	r2, [r7, #14]
 8012252:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8012254:	89fb      	ldrh	r3, [r7, #14]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d105      	bne.n	8012266 <dec_lock+0x5a>
 801225a:	4a09      	ldr	r2, [pc, #36]	; (8012280 <dec_lock+0x74>)
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	011b      	lsls	r3, r3, #4
 8012260:	4413      	add	r3, r2
 8012262:	2200      	movs	r2, #0
 8012264:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8012266:	2300      	movs	r3, #0
 8012268:	737b      	strb	r3, [r7, #13]
 801226a:	e001      	b.n	8012270 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801226c:	2302      	movs	r3, #2
 801226e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8012270:	7b7b      	ldrb	r3, [r7, #13]
}
 8012272:	4618      	mov	r0, r3
 8012274:	3714      	adds	r7, #20
 8012276:	46bd      	mov	sp, r7
 8012278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801227c:	4770      	bx	lr
 801227e:	bf00      	nop
 8012280:	20000838 	.word	0x20000838

08012284 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8012284:	b480      	push	{r7}
 8012286:	b085      	sub	sp, #20
 8012288:	af00      	add	r7, sp, #0
 801228a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801228c:	2300      	movs	r3, #0
 801228e:	60fb      	str	r3, [r7, #12]
 8012290:	e010      	b.n	80122b4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8012292:	4a0d      	ldr	r2, [pc, #52]	; (80122c8 <clear_lock+0x44>)
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	011b      	lsls	r3, r3, #4
 8012298:	4413      	add	r3, r2
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	687a      	ldr	r2, [r7, #4]
 801229e:	429a      	cmp	r2, r3
 80122a0:	d105      	bne.n	80122ae <clear_lock+0x2a>
 80122a2:	4a09      	ldr	r2, [pc, #36]	; (80122c8 <clear_lock+0x44>)
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	011b      	lsls	r3, r3, #4
 80122a8:	4413      	add	r3, r2
 80122aa:	2200      	movs	r2, #0
 80122ac:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	3301      	adds	r3, #1
 80122b2:	60fb      	str	r3, [r7, #12]
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	2b01      	cmp	r3, #1
 80122b8:	d9eb      	bls.n	8012292 <clear_lock+0xe>
	}
}
 80122ba:	bf00      	nop
 80122bc:	bf00      	nop
 80122be:	3714      	adds	r7, #20
 80122c0:	46bd      	mov	sp, r7
 80122c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c6:	4770      	bx	lr
 80122c8:	20000838 	.word	0x20000838

080122cc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80122cc:	b580      	push	{r7, lr}
 80122ce:	b086      	sub	sp, #24
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80122d4:	2300      	movs	r3, #0
 80122d6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	78db      	ldrb	r3, [r3, #3]
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d034      	beq.n	801234a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122e4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	7858      	ldrb	r0, [r3, #1]
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80122f0:	2301      	movs	r3, #1
 80122f2:	697a      	ldr	r2, [r7, #20]
 80122f4:	f7ff fd0e 	bl	8011d14 <disk_write>
 80122f8:	4603      	mov	r3, r0
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d002      	beq.n	8012304 <sync_window+0x38>
			res = FR_DISK_ERR;
 80122fe:	2301      	movs	r3, #1
 8012300:	73fb      	strb	r3, [r7, #15]
 8012302:	e022      	b.n	801234a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	2200      	movs	r2, #0
 8012308:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801230e:	697a      	ldr	r2, [r7, #20]
 8012310:	1ad2      	subs	r2, r2, r3
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	69db      	ldr	r3, [r3, #28]
 8012316:	429a      	cmp	r2, r3
 8012318:	d217      	bcs.n	801234a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	789b      	ldrb	r3, [r3, #2]
 801231e:	613b      	str	r3, [r7, #16]
 8012320:	e010      	b.n	8012344 <sync_window+0x78>
					wsect += fs->fsize;
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	69db      	ldr	r3, [r3, #28]
 8012326:	697a      	ldr	r2, [r7, #20]
 8012328:	4413      	add	r3, r2
 801232a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	7858      	ldrb	r0, [r3, #1]
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8012336:	2301      	movs	r3, #1
 8012338:	697a      	ldr	r2, [r7, #20]
 801233a:	f7ff fceb 	bl	8011d14 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801233e:	693b      	ldr	r3, [r7, #16]
 8012340:	3b01      	subs	r3, #1
 8012342:	613b      	str	r3, [r7, #16]
 8012344:	693b      	ldr	r3, [r7, #16]
 8012346:	2b01      	cmp	r3, #1
 8012348:	d8eb      	bhi.n	8012322 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801234a:	7bfb      	ldrb	r3, [r7, #15]
}
 801234c:	4618      	mov	r0, r3
 801234e:	3718      	adds	r7, #24
 8012350:	46bd      	mov	sp, r7
 8012352:	bd80      	pop	{r7, pc}

08012354 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8012354:	b580      	push	{r7, lr}
 8012356:	b084      	sub	sp, #16
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
 801235c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801235e:	2300      	movs	r3, #0
 8012360:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012366:	683a      	ldr	r2, [r7, #0]
 8012368:	429a      	cmp	r2, r3
 801236a:	d01b      	beq.n	80123a4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801236c:	6878      	ldr	r0, [r7, #4]
 801236e:	f7ff ffad 	bl	80122cc <sync_window>
 8012372:	4603      	mov	r3, r0
 8012374:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8012376:	7bfb      	ldrb	r3, [r7, #15]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d113      	bne.n	80123a4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	7858      	ldrb	r0, [r3, #1]
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8012386:	2301      	movs	r3, #1
 8012388:	683a      	ldr	r2, [r7, #0]
 801238a:	f7ff fca3 	bl	8011cd4 <disk_read>
 801238e:	4603      	mov	r3, r0
 8012390:	2b00      	cmp	r3, #0
 8012392:	d004      	beq.n	801239e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8012394:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012398:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801239a:	2301      	movs	r3, #1
 801239c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	683a      	ldr	r2, [r7, #0]
 80123a2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80123a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80123a6:	4618      	mov	r0, r3
 80123a8:	3710      	adds	r7, #16
 80123aa:	46bd      	mov	sp, r7
 80123ac:	bd80      	pop	{r7, pc}
	...

080123b0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b084      	sub	sp, #16
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80123b8:	6878      	ldr	r0, [r7, #4]
 80123ba:	f7ff ff87 	bl	80122cc <sync_window>
 80123be:	4603      	mov	r3, r0
 80123c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80123c2:	7bfb      	ldrb	r3, [r7, #15]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d158      	bne.n	801247a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	781b      	ldrb	r3, [r3, #0]
 80123cc:	2b03      	cmp	r3, #3
 80123ce:	d148      	bne.n	8012462 <sync_fs+0xb2>
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	791b      	ldrb	r3, [r3, #4]
 80123d4:	2b01      	cmp	r3, #1
 80123d6:	d144      	bne.n	8012462 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	3334      	adds	r3, #52	; 0x34
 80123dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80123e0:	2100      	movs	r1, #0
 80123e2:	4618      	mov	r0, r3
 80123e4:	f7ff fd77 	bl	8011ed6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	3334      	adds	r3, #52	; 0x34
 80123ec:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80123f0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80123f4:	4618      	mov	r0, r3
 80123f6:	f7ff fd06 	bl	8011e06 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	3334      	adds	r3, #52	; 0x34
 80123fe:	4921      	ldr	r1, [pc, #132]	; (8012484 <sync_fs+0xd4>)
 8012400:	4618      	mov	r0, r3
 8012402:	f7ff fd1b 	bl	8011e3c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	3334      	adds	r3, #52	; 0x34
 801240a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801240e:	491e      	ldr	r1, [pc, #120]	; (8012488 <sync_fs+0xd8>)
 8012410:	4618      	mov	r0, r3
 8012412:	f7ff fd13 	bl	8011e3c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	3334      	adds	r3, #52	; 0x34
 801241a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	695b      	ldr	r3, [r3, #20]
 8012422:	4619      	mov	r1, r3
 8012424:	4610      	mov	r0, r2
 8012426:	f7ff fd09 	bl	8011e3c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	3334      	adds	r3, #52	; 0x34
 801242e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	691b      	ldr	r3, [r3, #16]
 8012436:	4619      	mov	r1, r3
 8012438:	4610      	mov	r0, r2
 801243a:	f7ff fcff 	bl	8011e3c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	6a1b      	ldr	r3, [r3, #32]
 8012442:	1c5a      	adds	r2, r3, #1
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	7858      	ldrb	r0, [r3, #1]
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012456:	2301      	movs	r3, #1
 8012458:	f7ff fc5c 	bl	8011d14 <disk_write>
			fs->fsi_flag = 0;
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	2200      	movs	r2, #0
 8012460:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	785b      	ldrb	r3, [r3, #1]
 8012466:	2200      	movs	r2, #0
 8012468:	2100      	movs	r1, #0
 801246a:	4618      	mov	r0, r3
 801246c:	f7ff fc72 	bl	8011d54 <disk_ioctl>
 8012470:	4603      	mov	r3, r0
 8012472:	2b00      	cmp	r3, #0
 8012474:	d001      	beq.n	801247a <sync_fs+0xca>
 8012476:	2301      	movs	r3, #1
 8012478:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801247a:	7bfb      	ldrb	r3, [r7, #15]
}
 801247c:	4618      	mov	r0, r3
 801247e:	3710      	adds	r7, #16
 8012480:	46bd      	mov	sp, r7
 8012482:	bd80      	pop	{r7, pc}
 8012484:	41615252 	.word	0x41615252
 8012488:	61417272 	.word	0x61417272

0801248c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801248c:	b480      	push	{r7}
 801248e:	b083      	sub	sp, #12
 8012490:	af00      	add	r7, sp, #0
 8012492:	6078      	str	r0, [r7, #4]
 8012494:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8012496:	683b      	ldr	r3, [r7, #0]
 8012498:	3b02      	subs	r3, #2
 801249a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	699b      	ldr	r3, [r3, #24]
 80124a0:	3b02      	subs	r3, #2
 80124a2:	683a      	ldr	r2, [r7, #0]
 80124a4:	429a      	cmp	r2, r3
 80124a6:	d301      	bcc.n	80124ac <clust2sect+0x20>
 80124a8:	2300      	movs	r3, #0
 80124aa:	e008      	b.n	80124be <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	895b      	ldrh	r3, [r3, #10]
 80124b0:	461a      	mov	r2, r3
 80124b2:	683b      	ldr	r3, [r7, #0]
 80124b4:	fb03 f202 	mul.w	r2, r3, r2
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124bc:	4413      	add	r3, r2
}
 80124be:	4618      	mov	r0, r3
 80124c0:	370c      	adds	r7, #12
 80124c2:	46bd      	mov	sp, r7
 80124c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c8:	4770      	bx	lr

080124ca <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80124ca:	b580      	push	{r7, lr}
 80124cc:	b086      	sub	sp, #24
 80124ce:	af00      	add	r7, sp, #0
 80124d0:	6078      	str	r0, [r7, #4]
 80124d2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80124da:	683b      	ldr	r3, [r7, #0]
 80124dc:	2b01      	cmp	r3, #1
 80124de:	d904      	bls.n	80124ea <get_fat+0x20>
 80124e0:	693b      	ldr	r3, [r7, #16]
 80124e2:	699b      	ldr	r3, [r3, #24]
 80124e4:	683a      	ldr	r2, [r7, #0]
 80124e6:	429a      	cmp	r2, r3
 80124e8:	d302      	bcc.n	80124f0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80124ea:	2301      	movs	r3, #1
 80124ec:	617b      	str	r3, [r7, #20]
 80124ee:	e08f      	b.n	8012610 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80124f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80124f4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80124f6:	693b      	ldr	r3, [r7, #16]
 80124f8:	781b      	ldrb	r3, [r3, #0]
 80124fa:	2b03      	cmp	r3, #3
 80124fc:	d062      	beq.n	80125c4 <get_fat+0xfa>
 80124fe:	2b03      	cmp	r3, #3
 8012500:	dc7c      	bgt.n	80125fc <get_fat+0x132>
 8012502:	2b01      	cmp	r3, #1
 8012504:	d002      	beq.n	801250c <get_fat+0x42>
 8012506:	2b02      	cmp	r3, #2
 8012508:	d042      	beq.n	8012590 <get_fat+0xc6>
 801250a:	e077      	b.n	80125fc <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801250c:	683b      	ldr	r3, [r7, #0]
 801250e:	60fb      	str	r3, [r7, #12]
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	085b      	lsrs	r3, r3, #1
 8012514:	68fa      	ldr	r2, [r7, #12]
 8012516:	4413      	add	r3, r2
 8012518:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801251a:	693b      	ldr	r3, [r7, #16]
 801251c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	0a5b      	lsrs	r3, r3, #9
 8012522:	4413      	add	r3, r2
 8012524:	4619      	mov	r1, r3
 8012526:	6938      	ldr	r0, [r7, #16]
 8012528:	f7ff ff14 	bl	8012354 <move_window>
 801252c:	4603      	mov	r3, r0
 801252e:	2b00      	cmp	r3, #0
 8012530:	d167      	bne.n	8012602 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	1c5a      	adds	r2, r3, #1
 8012536:	60fa      	str	r2, [r7, #12]
 8012538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801253c:	693a      	ldr	r2, [r7, #16]
 801253e:	4413      	add	r3, r2
 8012540:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012544:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012546:	693b      	ldr	r3, [r7, #16]
 8012548:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	0a5b      	lsrs	r3, r3, #9
 801254e:	4413      	add	r3, r2
 8012550:	4619      	mov	r1, r3
 8012552:	6938      	ldr	r0, [r7, #16]
 8012554:	f7ff fefe 	bl	8012354 <move_window>
 8012558:	4603      	mov	r3, r0
 801255a:	2b00      	cmp	r3, #0
 801255c:	d153      	bne.n	8012606 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012564:	693a      	ldr	r2, [r7, #16]
 8012566:	4413      	add	r3, r2
 8012568:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801256c:	021b      	lsls	r3, r3, #8
 801256e:	461a      	mov	r2, r3
 8012570:	68bb      	ldr	r3, [r7, #8]
 8012572:	4313      	orrs	r3, r2
 8012574:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012576:	683b      	ldr	r3, [r7, #0]
 8012578:	f003 0301 	and.w	r3, r3, #1
 801257c:	2b00      	cmp	r3, #0
 801257e:	d002      	beq.n	8012586 <get_fat+0xbc>
 8012580:	68bb      	ldr	r3, [r7, #8]
 8012582:	091b      	lsrs	r3, r3, #4
 8012584:	e002      	b.n	801258c <get_fat+0xc2>
 8012586:	68bb      	ldr	r3, [r7, #8]
 8012588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801258c:	617b      	str	r3, [r7, #20]
			break;
 801258e:	e03f      	b.n	8012610 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012590:	693b      	ldr	r3, [r7, #16]
 8012592:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012594:	683b      	ldr	r3, [r7, #0]
 8012596:	0a1b      	lsrs	r3, r3, #8
 8012598:	4413      	add	r3, r2
 801259a:	4619      	mov	r1, r3
 801259c:	6938      	ldr	r0, [r7, #16]
 801259e:	f7ff fed9 	bl	8012354 <move_window>
 80125a2:	4603      	mov	r3, r0
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d130      	bne.n	801260a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80125a8:	693b      	ldr	r3, [r7, #16]
 80125aa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80125ae:	683b      	ldr	r3, [r7, #0]
 80125b0:	005b      	lsls	r3, r3, #1
 80125b2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80125b6:	4413      	add	r3, r2
 80125b8:	4618      	mov	r0, r3
 80125ba:	f7ff fbe9 	bl	8011d90 <ld_word>
 80125be:	4603      	mov	r3, r0
 80125c0:	617b      	str	r3, [r7, #20]
			break;
 80125c2:	e025      	b.n	8012610 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80125c4:	693b      	ldr	r3, [r7, #16]
 80125c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80125c8:	683b      	ldr	r3, [r7, #0]
 80125ca:	09db      	lsrs	r3, r3, #7
 80125cc:	4413      	add	r3, r2
 80125ce:	4619      	mov	r1, r3
 80125d0:	6938      	ldr	r0, [r7, #16]
 80125d2:	f7ff febf 	bl	8012354 <move_window>
 80125d6:	4603      	mov	r3, r0
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d118      	bne.n	801260e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80125dc:	693b      	ldr	r3, [r7, #16]
 80125de:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80125e2:	683b      	ldr	r3, [r7, #0]
 80125e4:	009b      	lsls	r3, r3, #2
 80125e6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80125ea:	4413      	add	r3, r2
 80125ec:	4618      	mov	r0, r3
 80125ee:	f7ff fbe7 	bl	8011dc0 <ld_dword>
 80125f2:	4603      	mov	r3, r0
 80125f4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80125f8:	617b      	str	r3, [r7, #20]
			break;
 80125fa:	e009      	b.n	8012610 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80125fc:	2301      	movs	r3, #1
 80125fe:	617b      	str	r3, [r7, #20]
 8012600:	e006      	b.n	8012610 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012602:	bf00      	nop
 8012604:	e004      	b.n	8012610 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012606:	bf00      	nop
 8012608:	e002      	b.n	8012610 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801260a:	bf00      	nop
 801260c:	e000      	b.n	8012610 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801260e:	bf00      	nop
		}
	}

	return val;
 8012610:	697b      	ldr	r3, [r7, #20]
}
 8012612:	4618      	mov	r0, r3
 8012614:	3718      	adds	r7, #24
 8012616:	46bd      	mov	sp, r7
 8012618:	bd80      	pop	{r7, pc}

0801261a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801261a:	b590      	push	{r4, r7, lr}
 801261c:	b089      	sub	sp, #36	; 0x24
 801261e:	af00      	add	r7, sp, #0
 8012620:	60f8      	str	r0, [r7, #12]
 8012622:	60b9      	str	r1, [r7, #8]
 8012624:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8012626:	2302      	movs	r3, #2
 8012628:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801262a:	68bb      	ldr	r3, [r7, #8]
 801262c:	2b01      	cmp	r3, #1
 801262e:	f240 80d2 	bls.w	80127d6 <put_fat+0x1bc>
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	699b      	ldr	r3, [r3, #24]
 8012636:	68ba      	ldr	r2, [r7, #8]
 8012638:	429a      	cmp	r2, r3
 801263a:	f080 80cc 	bcs.w	80127d6 <put_fat+0x1bc>
		switch (fs->fs_type) {
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	781b      	ldrb	r3, [r3, #0]
 8012642:	2b03      	cmp	r3, #3
 8012644:	f000 8096 	beq.w	8012774 <put_fat+0x15a>
 8012648:	2b03      	cmp	r3, #3
 801264a:	f300 80cd 	bgt.w	80127e8 <put_fat+0x1ce>
 801264e:	2b01      	cmp	r3, #1
 8012650:	d002      	beq.n	8012658 <put_fat+0x3e>
 8012652:	2b02      	cmp	r3, #2
 8012654:	d06e      	beq.n	8012734 <put_fat+0x11a>
 8012656:	e0c7      	b.n	80127e8 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012658:	68bb      	ldr	r3, [r7, #8]
 801265a:	61bb      	str	r3, [r7, #24]
 801265c:	69bb      	ldr	r3, [r7, #24]
 801265e:	085b      	lsrs	r3, r3, #1
 8012660:	69ba      	ldr	r2, [r7, #24]
 8012662:	4413      	add	r3, r2
 8012664:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801266a:	69bb      	ldr	r3, [r7, #24]
 801266c:	0a5b      	lsrs	r3, r3, #9
 801266e:	4413      	add	r3, r2
 8012670:	4619      	mov	r1, r3
 8012672:	68f8      	ldr	r0, [r7, #12]
 8012674:	f7ff fe6e 	bl	8012354 <move_window>
 8012678:	4603      	mov	r3, r0
 801267a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801267c:	7ffb      	ldrb	r3, [r7, #31]
 801267e:	2b00      	cmp	r3, #0
 8012680:	f040 80ab 	bne.w	80127da <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801268a:	69bb      	ldr	r3, [r7, #24]
 801268c:	1c59      	adds	r1, r3, #1
 801268e:	61b9      	str	r1, [r7, #24]
 8012690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012694:	4413      	add	r3, r2
 8012696:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012698:	68bb      	ldr	r3, [r7, #8]
 801269a:	f003 0301 	and.w	r3, r3, #1
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d00d      	beq.n	80126be <put_fat+0xa4>
 80126a2:	697b      	ldr	r3, [r7, #20]
 80126a4:	781b      	ldrb	r3, [r3, #0]
 80126a6:	b25b      	sxtb	r3, r3
 80126a8:	f003 030f 	and.w	r3, r3, #15
 80126ac:	b25a      	sxtb	r2, r3
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	b2db      	uxtb	r3, r3
 80126b2:	011b      	lsls	r3, r3, #4
 80126b4:	b25b      	sxtb	r3, r3
 80126b6:	4313      	orrs	r3, r2
 80126b8:	b25b      	sxtb	r3, r3
 80126ba:	b2db      	uxtb	r3, r3
 80126bc:	e001      	b.n	80126c2 <put_fat+0xa8>
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	b2db      	uxtb	r3, r3
 80126c2:	697a      	ldr	r2, [r7, #20]
 80126c4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	2201      	movs	r2, #1
 80126ca:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80126d0:	69bb      	ldr	r3, [r7, #24]
 80126d2:	0a5b      	lsrs	r3, r3, #9
 80126d4:	4413      	add	r3, r2
 80126d6:	4619      	mov	r1, r3
 80126d8:	68f8      	ldr	r0, [r7, #12]
 80126da:	f7ff fe3b 	bl	8012354 <move_window>
 80126de:	4603      	mov	r3, r0
 80126e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80126e2:	7ffb      	ldrb	r3, [r7, #31]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d17a      	bne.n	80127de <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80126ee:	69bb      	ldr	r3, [r7, #24]
 80126f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80126f4:	4413      	add	r3, r2
 80126f6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80126f8:	68bb      	ldr	r3, [r7, #8]
 80126fa:	f003 0301 	and.w	r3, r3, #1
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d003      	beq.n	801270a <put_fat+0xf0>
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	091b      	lsrs	r3, r3, #4
 8012706:	b2db      	uxtb	r3, r3
 8012708:	e00e      	b.n	8012728 <put_fat+0x10e>
 801270a:	697b      	ldr	r3, [r7, #20]
 801270c:	781b      	ldrb	r3, [r3, #0]
 801270e:	b25b      	sxtb	r3, r3
 8012710:	f023 030f 	bic.w	r3, r3, #15
 8012714:	b25a      	sxtb	r2, r3
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	0a1b      	lsrs	r3, r3, #8
 801271a:	b25b      	sxtb	r3, r3
 801271c:	f003 030f 	and.w	r3, r3, #15
 8012720:	b25b      	sxtb	r3, r3
 8012722:	4313      	orrs	r3, r2
 8012724:	b25b      	sxtb	r3, r3
 8012726:	b2db      	uxtb	r3, r3
 8012728:	697a      	ldr	r2, [r7, #20]
 801272a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	2201      	movs	r2, #1
 8012730:	70da      	strb	r2, [r3, #3]
			break;
 8012732:	e059      	b.n	80127e8 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012738:	68bb      	ldr	r3, [r7, #8]
 801273a:	0a1b      	lsrs	r3, r3, #8
 801273c:	4413      	add	r3, r2
 801273e:	4619      	mov	r1, r3
 8012740:	68f8      	ldr	r0, [r7, #12]
 8012742:	f7ff fe07 	bl	8012354 <move_window>
 8012746:	4603      	mov	r3, r0
 8012748:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801274a:	7ffb      	ldrb	r3, [r7, #31]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d148      	bne.n	80127e2 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012756:	68bb      	ldr	r3, [r7, #8]
 8012758:	005b      	lsls	r3, r3, #1
 801275a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801275e:	4413      	add	r3, r2
 8012760:	687a      	ldr	r2, [r7, #4]
 8012762:	b292      	uxth	r2, r2
 8012764:	4611      	mov	r1, r2
 8012766:	4618      	mov	r0, r3
 8012768:	f7ff fb4d 	bl	8011e06 <st_word>
			fs->wflag = 1;
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	2201      	movs	r2, #1
 8012770:	70da      	strb	r2, [r3, #3]
			break;
 8012772:	e039      	b.n	80127e8 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012778:	68bb      	ldr	r3, [r7, #8]
 801277a:	09db      	lsrs	r3, r3, #7
 801277c:	4413      	add	r3, r2
 801277e:	4619      	mov	r1, r3
 8012780:	68f8      	ldr	r0, [r7, #12]
 8012782:	f7ff fde7 	bl	8012354 <move_window>
 8012786:	4603      	mov	r3, r0
 8012788:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801278a:	7ffb      	ldrb	r3, [r7, #31]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d12a      	bne.n	80127e6 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801279c:	68bb      	ldr	r3, [r7, #8]
 801279e:	009b      	lsls	r3, r3, #2
 80127a0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80127a4:	4413      	add	r3, r2
 80127a6:	4618      	mov	r0, r3
 80127a8:	f7ff fb0a 	bl	8011dc0 <ld_dword>
 80127ac:	4603      	mov	r3, r0
 80127ae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80127b2:	4323      	orrs	r3, r4
 80127b4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80127bc:	68bb      	ldr	r3, [r7, #8]
 80127be:	009b      	lsls	r3, r3, #2
 80127c0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80127c4:	4413      	add	r3, r2
 80127c6:	6879      	ldr	r1, [r7, #4]
 80127c8:	4618      	mov	r0, r3
 80127ca:	f7ff fb37 	bl	8011e3c <st_dword>
			fs->wflag = 1;
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	2201      	movs	r2, #1
 80127d2:	70da      	strb	r2, [r3, #3]
			break;
 80127d4:	e008      	b.n	80127e8 <put_fat+0x1ce>
		}
	}
 80127d6:	bf00      	nop
 80127d8:	e006      	b.n	80127e8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80127da:	bf00      	nop
 80127dc:	e004      	b.n	80127e8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80127de:	bf00      	nop
 80127e0:	e002      	b.n	80127e8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80127e2:	bf00      	nop
 80127e4:	e000      	b.n	80127e8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80127e6:	bf00      	nop
	return res;
 80127e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80127ea:	4618      	mov	r0, r3
 80127ec:	3724      	adds	r7, #36	; 0x24
 80127ee:	46bd      	mov	sp, r7
 80127f0:	bd90      	pop	{r4, r7, pc}

080127f2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80127f2:	b580      	push	{r7, lr}
 80127f4:	b088      	sub	sp, #32
 80127f6:	af00      	add	r7, sp, #0
 80127f8:	60f8      	str	r0, [r7, #12]
 80127fa:	60b9      	str	r1, [r7, #8]
 80127fc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80127fe:	2300      	movs	r3, #0
 8012800:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012808:	68bb      	ldr	r3, [r7, #8]
 801280a:	2b01      	cmp	r3, #1
 801280c:	d904      	bls.n	8012818 <remove_chain+0x26>
 801280e:	69bb      	ldr	r3, [r7, #24]
 8012810:	699b      	ldr	r3, [r3, #24]
 8012812:	68ba      	ldr	r2, [r7, #8]
 8012814:	429a      	cmp	r2, r3
 8012816:	d301      	bcc.n	801281c <remove_chain+0x2a>
 8012818:	2302      	movs	r3, #2
 801281a:	e04b      	b.n	80128b4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d00c      	beq.n	801283c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012822:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012826:	6879      	ldr	r1, [r7, #4]
 8012828:	69b8      	ldr	r0, [r7, #24]
 801282a:	f7ff fef6 	bl	801261a <put_fat>
 801282e:	4603      	mov	r3, r0
 8012830:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012832:	7ffb      	ldrb	r3, [r7, #31]
 8012834:	2b00      	cmp	r3, #0
 8012836:	d001      	beq.n	801283c <remove_chain+0x4a>
 8012838:	7ffb      	ldrb	r3, [r7, #31]
 801283a:	e03b      	b.n	80128b4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801283c:	68b9      	ldr	r1, [r7, #8]
 801283e:	68f8      	ldr	r0, [r7, #12]
 8012840:	f7ff fe43 	bl	80124ca <get_fat>
 8012844:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012846:	697b      	ldr	r3, [r7, #20]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d031      	beq.n	80128b0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801284c:	697b      	ldr	r3, [r7, #20]
 801284e:	2b01      	cmp	r3, #1
 8012850:	d101      	bne.n	8012856 <remove_chain+0x64>
 8012852:	2302      	movs	r3, #2
 8012854:	e02e      	b.n	80128b4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8012856:	697b      	ldr	r3, [r7, #20]
 8012858:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801285c:	d101      	bne.n	8012862 <remove_chain+0x70>
 801285e:	2301      	movs	r3, #1
 8012860:	e028      	b.n	80128b4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012862:	2200      	movs	r2, #0
 8012864:	68b9      	ldr	r1, [r7, #8]
 8012866:	69b8      	ldr	r0, [r7, #24]
 8012868:	f7ff fed7 	bl	801261a <put_fat>
 801286c:	4603      	mov	r3, r0
 801286e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8012870:	7ffb      	ldrb	r3, [r7, #31]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d001      	beq.n	801287a <remove_chain+0x88>
 8012876:	7ffb      	ldrb	r3, [r7, #31]
 8012878:	e01c      	b.n	80128b4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801287a:	69bb      	ldr	r3, [r7, #24]
 801287c:	695a      	ldr	r2, [r3, #20]
 801287e:	69bb      	ldr	r3, [r7, #24]
 8012880:	699b      	ldr	r3, [r3, #24]
 8012882:	3b02      	subs	r3, #2
 8012884:	429a      	cmp	r2, r3
 8012886:	d20b      	bcs.n	80128a0 <remove_chain+0xae>
			fs->free_clst++;
 8012888:	69bb      	ldr	r3, [r7, #24]
 801288a:	695b      	ldr	r3, [r3, #20]
 801288c:	1c5a      	adds	r2, r3, #1
 801288e:	69bb      	ldr	r3, [r7, #24]
 8012890:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8012892:	69bb      	ldr	r3, [r7, #24]
 8012894:	791b      	ldrb	r3, [r3, #4]
 8012896:	f043 0301 	orr.w	r3, r3, #1
 801289a:	b2da      	uxtb	r2, r3
 801289c:	69bb      	ldr	r3, [r7, #24]
 801289e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80128a0:	697b      	ldr	r3, [r7, #20]
 80128a2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80128a4:	69bb      	ldr	r3, [r7, #24]
 80128a6:	699b      	ldr	r3, [r3, #24]
 80128a8:	68ba      	ldr	r2, [r7, #8]
 80128aa:	429a      	cmp	r2, r3
 80128ac:	d3c6      	bcc.n	801283c <remove_chain+0x4a>
 80128ae:	e000      	b.n	80128b2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80128b0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80128b2:	2300      	movs	r3, #0
}
 80128b4:	4618      	mov	r0, r3
 80128b6:	3720      	adds	r7, #32
 80128b8:	46bd      	mov	sp, r7
 80128ba:	bd80      	pop	{r7, pc}

080128bc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b088      	sub	sp, #32
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
 80128c4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80128cc:	683b      	ldr	r3, [r7, #0]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d10d      	bne.n	80128ee <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80128d2:	693b      	ldr	r3, [r7, #16]
 80128d4:	691b      	ldr	r3, [r3, #16]
 80128d6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80128d8:	69bb      	ldr	r3, [r7, #24]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d004      	beq.n	80128e8 <create_chain+0x2c>
 80128de:	693b      	ldr	r3, [r7, #16]
 80128e0:	699b      	ldr	r3, [r3, #24]
 80128e2:	69ba      	ldr	r2, [r7, #24]
 80128e4:	429a      	cmp	r2, r3
 80128e6:	d31b      	bcc.n	8012920 <create_chain+0x64>
 80128e8:	2301      	movs	r3, #1
 80128ea:	61bb      	str	r3, [r7, #24]
 80128ec:	e018      	b.n	8012920 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80128ee:	6839      	ldr	r1, [r7, #0]
 80128f0:	6878      	ldr	r0, [r7, #4]
 80128f2:	f7ff fdea 	bl	80124ca <get_fat>
 80128f6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	2b01      	cmp	r3, #1
 80128fc:	d801      	bhi.n	8012902 <create_chain+0x46>
 80128fe:	2301      	movs	r3, #1
 8012900:	e070      	b.n	80129e4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012908:	d101      	bne.n	801290e <create_chain+0x52>
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	e06a      	b.n	80129e4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801290e:	693b      	ldr	r3, [r7, #16]
 8012910:	699b      	ldr	r3, [r3, #24]
 8012912:	68fa      	ldr	r2, [r7, #12]
 8012914:	429a      	cmp	r2, r3
 8012916:	d201      	bcs.n	801291c <create_chain+0x60>
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	e063      	b.n	80129e4 <create_chain+0x128>
		scl = clst;
 801291c:	683b      	ldr	r3, [r7, #0]
 801291e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012920:	69bb      	ldr	r3, [r7, #24]
 8012922:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012924:	69fb      	ldr	r3, [r7, #28]
 8012926:	3301      	adds	r3, #1
 8012928:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801292a:	693b      	ldr	r3, [r7, #16]
 801292c:	699b      	ldr	r3, [r3, #24]
 801292e:	69fa      	ldr	r2, [r7, #28]
 8012930:	429a      	cmp	r2, r3
 8012932:	d307      	bcc.n	8012944 <create_chain+0x88>
				ncl = 2;
 8012934:	2302      	movs	r3, #2
 8012936:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012938:	69fa      	ldr	r2, [r7, #28]
 801293a:	69bb      	ldr	r3, [r7, #24]
 801293c:	429a      	cmp	r2, r3
 801293e:	d901      	bls.n	8012944 <create_chain+0x88>
 8012940:	2300      	movs	r3, #0
 8012942:	e04f      	b.n	80129e4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012944:	69f9      	ldr	r1, [r7, #28]
 8012946:	6878      	ldr	r0, [r7, #4]
 8012948:	f7ff fdbf 	bl	80124ca <get_fat>
 801294c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d00e      	beq.n	8012972 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	2b01      	cmp	r3, #1
 8012958:	d003      	beq.n	8012962 <create_chain+0xa6>
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012960:	d101      	bne.n	8012966 <create_chain+0xaa>
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	e03e      	b.n	80129e4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012966:	69fa      	ldr	r2, [r7, #28]
 8012968:	69bb      	ldr	r3, [r7, #24]
 801296a:	429a      	cmp	r2, r3
 801296c:	d1da      	bne.n	8012924 <create_chain+0x68>
 801296e:	2300      	movs	r3, #0
 8012970:	e038      	b.n	80129e4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012972:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8012974:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012978:	69f9      	ldr	r1, [r7, #28]
 801297a:	6938      	ldr	r0, [r7, #16]
 801297c:	f7ff fe4d 	bl	801261a <put_fat>
 8012980:	4603      	mov	r3, r0
 8012982:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012984:	7dfb      	ldrb	r3, [r7, #23]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d109      	bne.n	801299e <create_chain+0xe2>
 801298a:	683b      	ldr	r3, [r7, #0]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d006      	beq.n	801299e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012990:	69fa      	ldr	r2, [r7, #28]
 8012992:	6839      	ldr	r1, [r7, #0]
 8012994:	6938      	ldr	r0, [r7, #16]
 8012996:	f7ff fe40 	bl	801261a <put_fat>
 801299a:	4603      	mov	r3, r0
 801299c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801299e:	7dfb      	ldrb	r3, [r7, #23]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d116      	bne.n	80129d2 <create_chain+0x116>
		fs->last_clst = ncl;
 80129a4:	693b      	ldr	r3, [r7, #16]
 80129a6:	69fa      	ldr	r2, [r7, #28]
 80129a8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80129aa:	693b      	ldr	r3, [r7, #16]
 80129ac:	695a      	ldr	r2, [r3, #20]
 80129ae:	693b      	ldr	r3, [r7, #16]
 80129b0:	699b      	ldr	r3, [r3, #24]
 80129b2:	3b02      	subs	r3, #2
 80129b4:	429a      	cmp	r2, r3
 80129b6:	d804      	bhi.n	80129c2 <create_chain+0x106>
 80129b8:	693b      	ldr	r3, [r7, #16]
 80129ba:	695b      	ldr	r3, [r3, #20]
 80129bc:	1e5a      	subs	r2, r3, #1
 80129be:	693b      	ldr	r3, [r7, #16]
 80129c0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80129c2:	693b      	ldr	r3, [r7, #16]
 80129c4:	791b      	ldrb	r3, [r3, #4]
 80129c6:	f043 0301 	orr.w	r3, r3, #1
 80129ca:	b2da      	uxtb	r2, r3
 80129cc:	693b      	ldr	r3, [r7, #16]
 80129ce:	711a      	strb	r2, [r3, #4]
 80129d0:	e007      	b.n	80129e2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80129d2:	7dfb      	ldrb	r3, [r7, #23]
 80129d4:	2b01      	cmp	r3, #1
 80129d6:	d102      	bne.n	80129de <create_chain+0x122>
 80129d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80129dc:	e000      	b.n	80129e0 <create_chain+0x124>
 80129de:	2301      	movs	r3, #1
 80129e0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80129e2:	69fb      	ldr	r3, [r7, #28]
}
 80129e4:	4618      	mov	r0, r3
 80129e6:	3720      	adds	r7, #32
 80129e8:	46bd      	mov	sp, r7
 80129ea:	bd80      	pop	{r7, pc}

080129ec <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80129ec:	b480      	push	{r7}
 80129ee:	b087      	sub	sp, #28
 80129f0:	af00      	add	r7, sp, #0
 80129f2:	6078      	str	r0, [r7, #4]
 80129f4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a00:	3304      	adds	r3, #4
 8012a02:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012a04:	683b      	ldr	r3, [r7, #0]
 8012a06:	0a5b      	lsrs	r3, r3, #9
 8012a08:	68fa      	ldr	r2, [r7, #12]
 8012a0a:	8952      	ldrh	r2, [r2, #10]
 8012a0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012a10:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012a12:	693b      	ldr	r3, [r7, #16]
 8012a14:	1d1a      	adds	r2, r3, #4
 8012a16:	613a      	str	r2, [r7, #16]
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012a1c:	68bb      	ldr	r3, [r7, #8]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d101      	bne.n	8012a26 <clmt_clust+0x3a>
 8012a22:	2300      	movs	r3, #0
 8012a24:	e010      	b.n	8012a48 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8012a26:	697a      	ldr	r2, [r7, #20]
 8012a28:	68bb      	ldr	r3, [r7, #8]
 8012a2a:	429a      	cmp	r2, r3
 8012a2c:	d307      	bcc.n	8012a3e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8012a2e:	697a      	ldr	r2, [r7, #20]
 8012a30:	68bb      	ldr	r3, [r7, #8]
 8012a32:	1ad3      	subs	r3, r2, r3
 8012a34:	617b      	str	r3, [r7, #20]
 8012a36:	693b      	ldr	r3, [r7, #16]
 8012a38:	3304      	adds	r3, #4
 8012a3a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012a3c:	e7e9      	b.n	8012a12 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8012a3e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012a40:	693b      	ldr	r3, [r7, #16]
 8012a42:	681a      	ldr	r2, [r3, #0]
 8012a44:	697b      	ldr	r3, [r7, #20]
 8012a46:	4413      	add	r3, r2
}
 8012a48:	4618      	mov	r0, r3
 8012a4a:	371c      	adds	r7, #28
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a52:	4770      	bx	lr

08012a54 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8012a54:	b580      	push	{r7, lr}
 8012a56:	b086      	sub	sp, #24
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	6078      	str	r0, [r7, #4]
 8012a5c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8012a64:	683b      	ldr	r3, [r7, #0]
 8012a66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012a6a:	d204      	bcs.n	8012a76 <dir_sdi+0x22>
 8012a6c:	683b      	ldr	r3, [r7, #0]
 8012a6e:	f003 031f 	and.w	r3, r3, #31
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d001      	beq.n	8012a7a <dir_sdi+0x26>
		return FR_INT_ERR;
 8012a76:	2302      	movs	r3, #2
 8012a78:	e063      	b.n	8012b42 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	683a      	ldr	r2, [r7, #0]
 8012a7e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	689b      	ldr	r3, [r3, #8]
 8012a84:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8012a86:	697b      	ldr	r3, [r7, #20]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d106      	bne.n	8012a9a <dir_sdi+0x46>
 8012a8c:	693b      	ldr	r3, [r7, #16]
 8012a8e:	781b      	ldrb	r3, [r3, #0]
 8012a90:	2b02      	cmp	r3, #2
 8012a92:	d902      	bls.n	8012a9a <dir_sdi+0x46>
		clst = fs->dirbase;
 8012a94:	693b      	ldr	r3, [r7, #16]
 8012a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a98:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012a9a:	697b      	ldr	r3, [r7, #20]
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d10c      	bne.n	8012aba <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8012aa0:	683b      	ldr	r3, [r7, #0]
 8012aa2:	095b      	lsrs	r3, r3, #5
 8012aa4:	693a      	ldr	r2, [r7, #16]
 8012aa6:	8912      	ldrh	r2, [r2, #8]
 8012aa8:	4293      	cmp	r3, r2
 8012aaa:	d301      	bcc.n	8012ab0 <dir_sdi+0x5c>
 8012aac:	2302      	movs	r3, #2
 8012aae:	e048      	b.n	8012b42 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8012ab0:	693b      	ldr	r3, [r7, #16]
 8012ab2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	61da      	str	r2, [r3, #28]
 8012ab8:	e029      	b.n	8012b0e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012aba:	693b      	ldr	r3, [r7, #16]
 8012abc:	895b      	ldrh	r3, [r3, #10]
 8012abe:	025b      	lsls	r3, r3, #9
 8012ac0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012ac2:	e019      	b.n	8012af8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	6979      	ldr	r1, [r7, #20]
 8012ac8:	4618      	mov	r0, r3
 8012aca:	f7ff fcfe 	bl	80124ca <get_fat>
 8012ace:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012ad0:	697b      	ldr	r3, [r7, #20]
 8012ad2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012ad6:	d101      	bne.n	8012adc <dir_sdi+0x88>
 8012ad8:	2301      	movs	r3, #1
 8012ada:	e032      	b.n	8012b42 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012adc:	697b      	ldr	r3, [r7, #20]
 8012ade:	2b01      	cmp	r3, #1
 8012ae0:	d904      	bls.n	8012aec <dir_sdi+0x98>
 8012ae2:	693b      	ldr	r3, [r7, #16]
 8012ae4:	699b      	ldr	r3, [r3, #24]
 8012ae6:	697a      	ldr	r2, [r7, #20]
 8012ae8:	429a      	cmp	r2, r3
 8012aea:	d301      	bcc.n	8012af0 <dir_sdi+0x9c>
 8012aec:	2302      	movs	r3, #2
 8012aee:	e028      	b.n	8012b42 <dir_sdi+0xee>
			ofs -= csz;
 8012af0:	683a      	ldr	r2, [r7, #0]
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	1ad3      	subs	r3, r2, r3
 8012af6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012af8:	683a      	ldr	r2, [r7, #0]
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	429a      	cmp	r2, r3
 8012afe:	d2e1      	bcs.n	8012ac4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8012b00:	6979      	ldr	r1, [r7, #20]
 8012b02:	6938      	ldr	r0, [r7, #16]
 8012b04:	f7ff fcc2 	bl	801248c <clust2sect>
 8012b08:	4602      	mov	r2, r0
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	697a      	ldr	r2, [r7, #20]
 8012b12:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	69db      	ldr	r3, [r3, #28]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d101      	bne.n	8012b20 <dir_sdi+0xcc>
 8012b1c:	2302      	movs	r3, #2
 8012b1e:	e010      	b.n	8012b42 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	69da      	ldr	r2, [r3, #28]
 8012b24:	683b      	ldr	r3, [r7, #0]
 8012b26:	0a5b      	lsrs	r3, r3, #9
 8012b28:	441a      	add	r2, r3
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012b2e:	693b      	ldr	r3, [r7, #16]
 8012b30:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012b34:	683b      	ldr	r3, [r7, #0]
 8012b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012b3a:	441a      	add	r2, r3
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012b40:	2300      	movs	r3, #0
}
 8012b42:	4618      	mov	r0, r3
 8012b44:	3718      	adds	r7, #24
 8012b46:	46bd      	mov	sp, r7
 8012b48:	bd80      	pop	{r7, pc}

08012b4a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8012b4a:	b580      	push	{r7, lr}
 8012b4c:	b086      	sub	sp, #24
 8012b4e:	af00      	add	r7, sp, #0
 8012b50:	6078      	str	r0, [r7, #4]
 8012b52:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	695b      	ldr	r3, [r3, #20]
 8012b5e:	3320      	adds	r3, #32
 8012b60:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	69db      	ldr	r3, [r3, #28]
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d003      	beq.n	8012b72 <dir_next+0x28>
 8012b6a:	68bb      	ldr	r3, [r7, #8]
 8012b6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012b70:	d301      	bcc.n	8012b76 <dir_next+0x2c>
 8012b72:	2304      	movs	r3, #4
 8012b74:	e0aa      	b.n	8012ccc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012b76:	68bb      	ldr	r3, [r7, #8]
 8012b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	f040 8098 	bne.w	8012cb2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	69db      	ldr	r3, [r3, #28]
 8012b86:	1c5a      	adds	r2, r3, #1
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	699b      	ldr	r3, [r3, #24]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d10b      	bne.n	8012bac <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8012b94:	68bb      	ldr	r3, [r7, #8]
 8012b96:	095b      	lsrs	r3, r3, #5
 8012b98:	68fa      	ldr	r2, [r7, #12]
 8012b9a:	8912      	ldrh	r2, [r2, #8]
 8012b9c:	4293      	cmp	r3, r2
 8012b9e:	f0c0 8088 	bcc.w	8012cb2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	2200      	movs	r2, #0
 8012ba6:	61da      	str	r2, [r3, #28]
 8012ba8:	2304      	movs	r3, #4
 8012baa:	e08f      	b.n	8012ccc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012bac:	68bb      	ldr	r3, [r7, #8]
 8012bae:	0a5b      	lsrs	r3, r3, #9
 8012bb0:	68fa      	ldr	r2, [r7, #12]
 8012bb2:	8952      	ldrh	r2, [r2, #10]
 8012bb4:	3a01      	subs	r2, #1
 8012bb6:	4013      	ands	r3, r2
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d17a      	bne.n	8012cb2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012bbc:	687a      	ldr	r2, [r7, #4]
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	699b      	ldr	r3, [r3, #24]
 8012bc2:	4619      	mov	r1, r3
 8012bc4:	4610      	mov	r0, r2
 8012bc6:	f7ff fc80 	bl	80124ca <get_fat>
 8012bca:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012bcc:	697b      	ldr	r3, [r7, #20]
 8012bce:	2b01      	cmp	r3, #1
 8012bd0:	d801      	bhi.n	8012bd6 <dir_next+0x8c>
 8012bd2:	2302      	movs	r3, #2
 8012bd4:	e07a      	b.n	8012ccc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012bd6:	697b      	ldr	r3, [r7, #20]
 8012bd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012bdc:	d101      	bne.n	8012be2 <dir_next+0x98>
 8012bde:	2301      	movs	r3, #1
 8012be0:	e074      	b.n	8012ccc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	699b      	ldr	r3, [r3, #24]
 8012be6:	697a      	ldr	r2, [r7, #20]
 8012be8:	429a      	cmp	r2, r3
 8012bea:	d358      	bcc.n	8012c9e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012bec:	683b      	ldr	r3, [r7, #0]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d104      	bne.n	8012bfc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	2200      	movs	r2, #0
 8012bf6:	61da      	str	r2, [r3, #28]
 8012bf8:	2304      	movs	r3, #4
 8012bfa:	e067      	b.n	8012ccc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012bfc:	687a      	ldr	r2, [r7, #4]
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	699b      	ldr	r3, [r3, #24]
 8012c02:	4619      	mov	r1, r3
 8012c04:	4610      	mov	r0, r2
 8012c06:	f7ff fe59 	bl	80128bc <create_chain>
 8012c0a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012c0c:	697b      	ldr	r3, [r7, #20]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d101      	bne.n	8012c16 <dir_next+0xcc>
 8012c12:	2307      	movs	r3, #7
 8012c14:	e05a      	b.n	8012ccc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012c16:	697b      	ldr	r3, [r7, #20]
 8012c18:	2b01      	cmp	r3, #1
 8012c1a:	d101      	bne.n	8012c20 <dir_next+0xd6>
 8012c1c:	2302      	movs	r3, #2
 8012c1e:	e055      	b.n	8012ccc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012c20:	697b      	ldr	r3, [r7, #20]
 8012c22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012c26:	d101      	bne.n	8012c2c <dir_next+0xe2>
 8012c28:	2301      	movs	r3, #1
 8012c2a:	e04f      	b.n	8012ccc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8012c2c:	68f8      	ldr	r0, [r7, #12]
 8012c2e:	f7ff fb4d 	bl	80122cc <sync_window>
 8012c32:	4603      	mov	r3, r0
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d001      	beq.n	8012c3c <dir_next+0xf2>
 8012c38:	2301      	movs	r3, #1
 8012c3a:	e047      	b.n	8012ccc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	3334      	adds	r3, #52	; 0x34
 8012c40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012c44:	2100      	movs	r1, #0
 8012c46:	4618      	mov	r0, r3
 8012c48:	f7ff f945 	bl	8011ed6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012c4c:	2300      	movs	r3, #0
 8012c4e:	613b      	str	r3, [r7, #16]
 8012c50:	6979      	ldr	r1, [r7, #20]
 8012c52:	68f8      	ldr	r0, [r7, #12]
 8012c54:	f7ff fc1a 	bl	801248c <clust2sect>
 8012c58:	4602      	mov	r2, r0
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	631a      	str	r2, [r3, #48]	; 0x30
 8012c5e:	e012      	b.n	8012c86 <dir_next+0x13c>
						fs->wflag = 1;
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	2201      	movs	r2, #1
 8012c64:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8012c66:	68f8      	ldr	r0, [r7, #12]
 8012c68:	f7ff fb30 	bl	80122cc <sync_window>
 8012c6c:	4603      	mov	r3, r0
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d001      	beq.n	8012c76 <dir_next+0x12c>
 8012c72:	2301      	movs	r3, #1
 8012c74:	e02a      	b.n	8012ccc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012c76:	693b      	ldr	r3, [r7, #16]
 8012c78:	3301      	adds	r3, #1
 8012c7a:	613b      	str	r3, [r7, #16]
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c80:	1c5a      	adds	r2, r3, #1
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	631a      	str	r2, [r3, #48]	; 0x30
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	895b      	ldrh	r3, [r3, #10]
 8012c8a:	461a      	mov	r2, r3
 8012c8c:	693b      	ldr	r3, [r7, #16]
 8012c8e:	4293      	cmp	r3, r2
 8012c90:	d3e6      	bcc.n	8012c60 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012c96:	693b      	ldr	r3, [r7, #16]
 8012c98:	1ad2      	subs	r2, r2, r3
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	697a      	ldr	r2, [r7, #20]
 8012ca2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8012ca4:	6979      	ldr	r1, [r7, #20]
 8012ca6:	68f8      	ldr	r0, [r7, #12]
 8012ca8:	f7ff fbf0 	bl	801248c <clust2sect>
 8012cac:	4602      	mov	r2, r0
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	68ba      	ldr	r2, [r7, #8]
 8012cb6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012cbe:	68bb      	ldr	r3, [r7, #8]
 8012cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012cc4:	441a      	add	r2, r3
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012cca:	2300      	movs	r3, #0
}
 8012ccc:	4618      	mov	r0, r3
 8012cce:	3718      	adds	r7, #24
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	bd80      	pop	{r7, pc}

08012cd4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012cd4:	b580      	push	{r7, lr}
 8012cd6:	b086      	sub	sp, #24
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	6078      	str	r0, [r7, #4]
 8012cdc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012ce4:	2100      	movs	r1, #0
 8012ce6:	6878      	ldr	r0, [r7, #4]
 8012ce8:	f7ff feb4 	bl	8012a54 <dir_sdi>
 8012cec:	4603      	mov	r3, r0
 8012cee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012cf0:	7dfb      	ldrb	r3, [r7, #23]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d12b      	bne.n	8012d4e <dir_alloc+0x7a>
		n = 0;
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	69db      	ldr	r3, [r3, #28]
 8012cfe:	4619      	mov	r1, r3
 8012d00:	68f8      	ldr	r0, [r7, #12]
 8012d02:	f7ff fb27 	bl	8012354 <move_window>
 8012d06:	4603      	mov	r3, r0
 8012d08:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012d0a:	7dfb      	ldrb	r3, [r7, #23]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d11d      	bne.n	8012d4c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	6a1b      	ldr	r3, [r3, #32]
 8012d14:	781b      	ldrb	r3, [r3, #0]
 8012d16:	2be5      	cmp	r3, #229	; 0xe5
 8012d18:	d004      	beq.n	8012d24 <dir_alloc+0x50>
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	6a1b      	ldr	r3, [r3, #32]
 8012d1e:	781b      	ldrb	r3, [r3, #0]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d107      	bne.n	8012d34 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012d24:	693b      	ldr	r3, [r7, #16]
 8012d26:	3301      	adds	r3, #1
 8012d28:	613b      	str	r3, [r7, #16]
 8012d2a:	693a      	ldr	r2, [r7, #16]
 8012d2c:	683b      	ldr	r3, [r7, #0]
 8012d2e:	429a      	cmp	r2, r3
 8012d30:	d102      	bne.n	8012d38 <dir_alloc+0x64>
 8012d32:	e00c      	b.n	8012d4e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012d34:	2300      	movs	r3, #0
 8012d36:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012d38:	2101      	movs	r1, #1
 8012d3a:	6878      	ldr	r0, [r7, #4]
 8012d3c:	f7ff ff05 	bl	8012b4a <dir_next>
 8012d40:	4603      	mov	r3, r0
 8012d42:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012d44:	7dfb      	ldrb	r3, [r7, #23]
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d0d7      	beq.n	8012cfa <dir_alloc+0x26>
 8012d4a:	e000      	b.n	8012d4e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012d4c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012d4e:	7dfb      	ldrb	r3, [r7, #23]
 8012d50:	2b04      	cmp	r3, #4
 8012d52:	d101      	bne.n	8012d58 <dir_alloc+0x84>
 8012d54:	2307      	movs	r3, #7
 8012d56:	75fb      	strb	r3, [r7, #23]
	return res;
 8012d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	3718      	adds	r7, #24
 8012d5e:	46bd      	mov	sp, r7
 8012d60:	bd80      	pop	{r7, pc}

08012d62 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8012d62:	b580      	push	{r7, lr}
 8012d64:	b084      	sub	sp, #16
 8012d66:	af00      	add	r7, sp, #0
 8012d68:	6078      	str	r0, [r7, #4]
 8012d6a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012d6c:	683b      	ldr	r3, [r7, #0]
 8012d6e:	331a      	adds	r3, #26
 8012d70:	4618      	mov	r0, r3
 8012d72:	f7ff f80d 	bl	8011d90 <ld_word>
 8012d76:	4603      	mov	r3, r0
 8012d78:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	781b      	ldrb	r3, [r3, #0]
 8012d7e:	2b03      	cmp	r3, #3
 8012d80:	d109      	bne.n	8012d96 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012d82:	683b      	ldr	r3, [r7, #0]
 8012d84:	3314      	adds	r3, #20
 8012d86:	4618      	mov	r0, r3
 8012d88:	f7ff f802 	bl	8011d90 <ld_word>
 8012d8c:	4603      	mov	r3, r0
 8012d8e:	041b      	lsls	r3, r3, #16
 8012d90:	68fa      	ldr	r2, [r7, #12]
 8012d92:	4313      	orrs	r3, r2
 8012d94:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012d96:	68fb      	ldr	r3, [r7, #12]
}
 8012d98:	4618      	mov	r0, r3
 8012d9a:	3710      	adds	r7, #16
 8012d9c:	46bd      	mov	sp, r7
 8012d9e:	bd80      	pop	{r7, pc}

08012da0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012da0:	b580      	push	{r7, lr}
 8012da2:	b084      	sub	sp, #16
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	60f8      	str	r0, [r7, #12]
 8012da8:	60b9      	str	r1, [r7, #8]
 8012daa:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012dac:	68bb      	ldr	r3, [r7, #8]
 8012dae:	331a      	adds	r3, #26
 8012db0:	687a      	ldr	r2, [r7, #4]
 8012db2:	b292      	uxth	r2, r2
 8012db4:	4611      	mov	r1, r2
 8012db6:	4618      	mov	r0, r3
 8012db8:	f7ff f825 	bl	8011e06 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	781b      	ldrb	r3, [r3, #0]
 8012dc0:	2b03      	cmp	r3, #3
 8012dc2:	d109      	bne.n	8012dd8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012dc4:	68bb      	ldr	r3, [r7, #8]
 8012dc6:	f103 0214 	add.w	r2, r3, #20
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	0c1b      	lsrs	r3, r3, #16
 8012dce:	b29b      	uxth	r3, r3
 8012dd0:	4619      	mov	r1, r3
 8012dd2:	4610      	mov	r0, r2
 8012dd4:	f7ff f817 	bl	8011e06 <st_word>
	}
}
 8012dd8:	bf00      	nop
 8012dda:	3710      	adds	r7, #16
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	bd80      	pop	{r7, pc}

08012de0 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b086      	sub	sp, #24
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
 8012de8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8012dea:	2304      	movs	r3, #4
 8012dec:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8012df4:	e03c      	b.n	8012e70 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	69db      	ldr	r3, [r3, #28]
 8012dfa:	4619      	mov	r1, r3
 8012dfc:	6938      	ldr	r0, [r7, #16]
 8012dfe:	f7ff faa9 	bl	8012354 <move_window>
 8012e02:	4603      	mov	r3, r0
 8012e04:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012e06:	7dfb      	ldrb	r3, [r7, #23]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d136      	bne.n	8012e7a <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	6a1b      	ldr	r3, [r3, #32]
 8012e10:	781b      	ldrb	r3, [r3, #0]
 8012e12:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8012e14:	7bfb      	ldrb	r3, [r7, #15]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d102      	bne.n	8012e20 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8012e1a:	2304      	movs	r3, #4
 8012e1c:	75fb      	strb	r3, [r7, #23]
 8012e1e:	e031      	b.n	8012e84 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	6a1b      	ldr	r3, [r3, #32]
 8012e24:	330b      	adds	r3, #11
 8012e26:	781b      	ldrb	r3, [r3, #0]
 8012e28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012e2c:	73bb      	strb	r3, [r7, #14]
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	7bba      	ldrb	r2, [r7, #14]
 8012e32:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8012e34:	7bfb      	ldrb	r3, [r7, #15]
 8012e36:	2be5      	cmp	r3, #229	; 0xe5
 8012e38:	d011      	beq.n	8012e5e <dir_read+0x7e>
 8012e3a:	7bfb      	ldrb	r3, [r7, #15]
 8012e3c:	2b2e      	cmp	r3, #46	; 0x2e
 8012e3e:	d00e      	beq.n	8012e5e <dir_read+0x7e>
 8012e40:	7bbb      	ldrb	r3, [r7, #14]
 8012e42:	2b0f      	cmp	r3, #15
 8012e44:	d00b      	beq.n	8012e5e <dir_read+0x7e>
 8012e46:	7bbb      	ldrb	r3, [r7, #14]
 8012e48:	f023 0320 	bic.w	r3, r3, #32
 8012e4c:	2b08      	cmp	r3, #8
 8012e4e:	bf0c      	ite	eq
 8012e50:	2301      	moveq	r3, #1
 8012e52:	2300      	movne	r3, #0
 8012e54:	b2db      	uxtb	r3, r3
 8012e56:	461a      	mov	r2, r3
 8012e58:	683b      	ldr	r3, [r7, #0]
 8012e5a:	4293      	cmp	r3, r2
 8012e5c:	d00f      	beq.n	8012e7e <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8012e5e:	2100      	movs	r1, #0
 8012e60:	6878      	ldr	r0, [r7, #4]
 8012e62:	f7ff fe72 	bl	8012b4a <dir_next>
 8012e66:	4603      	mov	r3, r0
 8012e68:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012e6a:	7dfb      	ldrb	r3, [r7, #23]
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d108      	bne.n	8012e82 <dir_read+0xa2>
	while (dp->sect) {
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	69db      	ldr	r3, [r3, #28]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d1be      	bne.n	8012df6 <dir_read+0x16>
 8012e78:	e004      	b.n	8012e84 <dir_read+0xa4>
		if (res != FR_OK) break;
 8012e7a:	bf00      	nop
 8012e7c:	e002      	b.n	8012e84 <dir_read+0xa4>
				break;
 8012e7e:	bf00      	nop
 8012e80:	e000      	b.n	8012e84 <dir_read+0xa4>
		if (res != FR_OK) break;
 8012e82:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012e84:	7dfb      	ldrb	r3, [r7, #23]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d002      	beq.n	8012e90 <dir_read+0xb0>
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	2200      	movs	r2, #0
 8012e8e:	61da      	str	r2, [r3, #28]
	return res;
 8012e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e92:	4618      	mov	r0, r3
 8012e94:	3718      	adds	r7, #24
 8012e96:	46bd      	mov	sp, r7
 8012e98:	bd80      	pop	{r7, pc}

08012e9a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012e9a:	b580      	push	{r7, lr}
 8012e9c:	b086      	sub	sp, #24
 8012e9e:	af00      	add	r7, sp, #0
 8012ea0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012ea8:	2100      	movs	r1, #0
 8012eaa:	6878      	ldr	r0, [r7, #4]
 8012eac:	f7ff fdd2 	bl	8012a54 <dir_sdi>
 8012eb0:	4603      	mov	r3, r0
 8012eb2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012eb4:	7dfb      	ldrb	r3, [r7, #23]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d001      	beq.n	8012ebe <dir_find+0x24>
 8012eba:	7dfb      	ldrb	r3, [r7, #23]
 8012ebc:	e03e      	b.n	8012f3c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	69db      	ldr	r3, [r3, #28]
 8012ec2:	4619      	mov	r1, r3
 8012ec4:	6938      	ldr	r0, [r7, #16]
 8012ec6:	f7ff fa45 	bl	8012354 <move_window>
 8012eca:	4603      	mov	r3, r0
 8012ecc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012ece:	7dfb      	ldrb	r3, [r7, #23]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d12f      	bne.n	8012f34 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	6a1b      	ldr	r3, [r3, #32]
 8012ed8:	781b      	ldrb	r3, [r3, #0]
 8012eda:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012edc:	7bfb      	ldrb	r3, [r7, #15]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d102      	bne.n	8012ee8 <dir_find+0x4e>
 8012ee2:	2304      	movs	r3, #4
 8012ee4:	75fb      	strb	r3, [r7, #23]
 8012ee6:	e028      	b.n	8012f3a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	6a1b      	ldr	r3, [r3, #32]
 8012eec:	330b      	adds	r3, #11
 8012eee:	781b      	ldrb	r3, [r3, #0]
 8012ef0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012ef4:	b2da      	uxtb	r2, r3
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	6a1b      	ldr	r3, [r3, #32]
 8012efe:	330b      	adds	r3, #11
 8012f00:	781b      	ldrb	r3, [r3, #0]
 8012f02:	f003 0308 	and.w	r3, r3, #8
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d10a      	bne.n	8012f20 <dir_find+0x86>
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	6a18      	ldr	r0, [r3, #32]
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	3324      	adds	r3, #36	; 0x24
 8012f12:	220b      	movs	r2, #11
 8012f14:	4619      	mov	r1, r3
 8012f16:	f7fe fff9 	bl	8011f0c <mem_cmp>
 8012f1a:	4603      	mov	r3, r0
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d00b      	beq.n	8012f38 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012f20:	2100      	movs	r1, #0
 8012f22:	6878      	ldr	r0, [r7, #4]
 8012f24:	f7ff fe11 	bl	8012b4a <dir_next>
 8012f28:	4603      	mov	r3, r0
 8012f2a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012f2c:	7dfb      	ldrb	r3, [r7, #23]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d0c5      	beq.n	8012ebe <dir_find+0x24>
 8012f32:	e002      	b.n	8012f3a <dir_find+0xa0>
		if (res != FR_OK) break;
 8012f34:	bf00      	nop
 8012f36:	e000      	b.n	8012f3a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012f38:	bf00      	nop

	return res;
 8012f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f3c:	4618      	mov	r0, r3
 8012f3e:	3718      	adds	r7, #24
 8012f40:	46bd      	mov	sp, r7
 8012f42:	bd80      	pop	{r7, pc}

08012f44 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012f44:	b580      	push	{r7, lr}
 8012f46:	b084      	sub	sp, #16
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8012f52:	2101      	movs	r1, #1
 8012f54:	6878      	ldr	r0, [r7, #4]
 8012f56:	f7ff febd 	bl	8012cd4 <dir_alloc>
 8012f5a:	4603      	mov	r3, r0
 8012f5c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012f5e:	7bfb      	ldrb	r3, [r7, #15]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d11c      	bne.n	8012f9e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	69db      	ldr	r3, [r3, #28]
 8012f68:	4619      	mov	r1, r3
 8012f6a:	68b8      	ldr	r0, [r7, #8]
 8012f6c:	f7ff f9f2 	bl	8012354 <move_window>
 8012f70:	4603      	mov	r3, r0
 8012f72:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012f74:	7bfb      	ldrb	r3, [r7, #15]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d111      	bne.n	8012f9e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	6a1b      	ldr	r3, [r3, #32]
 8012f7e:	2220      	movs	r2, #32
 8012f80:	2100      	movs	r1, #0
 8012f82:	4618      	mov	r0, r3
 8012f84:	f7fe ffa7 	bl	8011ed6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	6a18      	ldr	r0, [r3, #32]
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	3324      	adds	r3, #36	; 0x24
 8012f90:	220b      	movs	r2, #11
 8012f92:	4619      	mov	r1, r3
 8012f94:	f7fe ff7e 	bl	8011e94 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012f98:	68bb      	ldr	r3, [r7, #8]
 8012f9a:	2201      	movs	r2, #1
 8012f9c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	3710      	adds	r7, #16
 8012fa4:	46bd      	mov	sp, r7
 8012fa6:	bd80      	pop	{r7, pc}

08012fa8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	b086      	sub	sp, #24
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	6078      	str	r0, [r7, #4]
 8012fb0:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8012fb2:	683b      	ldr	r3, [r7, #0]
 8012fb4:	2200      	movs	r2, #0
 8012fb6:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	69db      	ldr	r3, [r3, #28]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d04e      	beq.n	801305e <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	613b      	str	r3, [r7, #16]
 8012fc4:	693b      	ldr	r3, [r7, #16]
 8012fc6:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8012fc8:	e021      	b.n	801300e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	6a1a      	ldr	r2, [r3, #32]
 8012fce:	697b      	ldr	r3, [r7, #20]
 8012fd0:	1c59      	adds	r1, r3, #1
 8012fd2:	6179      	str	r1, [r7, #20]
 8012fd4:	4413      	add	r3, r2
 8012fd6:	781b      	ldrb	r3, [r3, #0]
 8012fd8:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8012fda:	7bfb      	ldrb	r3, [r7, #15]
 8012fdc:	2b20      	cmp	r3, #32
 8012fde:	d100      	bne.n	8012fe2 <get_fileinfo+0x3a>
 8012fe0:	e015      	b.n	801300e <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8012fe2:	7bfb      	ldrb	r3, [r7, #15]
 8012fe4:	2b05      	cmp	r3, #5
 8012fe6:	d101      	bne.n	8012fec <get_fileinfo+0x44>
 8012fe8:	23e5      	movs	r3, #229	; 0xe5
 8012fea:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8012fec:	697b      	ldr	r3, [r7, #20]
 8012fee:	2b09      	cmp	r3, #9
 8012ff0:	d106      	bne.n	8013000 <get_fileinfo+0x58>
 8012ff2:	693b      	ldr	r3, [r7, #16]
 8012ff4:	1c5a      	adds	r2, r3, #1
 8012ff6:	613a      	str	r2, [r7, #16]
 8012ff8:	683a      	ldr	r2, [r7, #0]
 8012ffa:	4413      	add	r3, r2
 8012ffc:	222e      	movs	r2, #46	; 0x2e
 8012ffe:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8013000:	693b      	ldr	r3, [r7, #16]
 8013002:	1c5a      	adds	r2, r3, #1
 8013004:	613a      	str	r2, [r7, #16]
 8013006:	683a      	ldr	r2, [r7, #0]
 8013008:	4413      	add	r3, r2
 801300a:	7bfa      	ldrb	r2, [r7, #15]
 801300c:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 801300e:	697b      	ldr	r3, [r7, #20]
 8013010:	2b0a      	cmp	r3, #10
 8013012:	d9da      	bls.n	8012fca <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8013014:	683a      	ldr	r2, [r7, #0]
 8013016:	693b      	ldr	r3, [r7, #16]
 8013018:	4413      	add	r3, r2
 801301a:	3309      	adds	r3, #9
 801301c:	2200      	movs	r2, #0
 801301e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	6a1b      	ldr	r3, [r3, #32]
 8013024:	7ada      	ldrb	r2, [r3, #11]
 8013026:	683b      	ldr	r3, [r7, #0]
 8013028:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	6a1b      	ldr	r3, [r3, #32]
 801302e:	331c      	adds	r3, #28
 8013030:	4618      	mov	r0, r3
 8013032:	f7fe fec5 	bl	8011dc0 <ld_dword>
 8013036:	4602      	mov	r2, r0
 8013038:	683b      	ldr	r3, [r7, #0]
 801303a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	6a1b      	ldr	r3, [r3, #32]
 8013040:	3316      	adds	r3, #22
 8013042:	4618      	mov	r0, r3
 8013044:	f7fe febc 	bl	8011dc0 <ld_dword>
 8013048:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801304a:	68bb      	ldr	r3, [r7, #8]
 801304c:	b29a      	uxth	r2, r3
 801304e:	683b      	ldr	r3, [r7, #0]
 8013050:	80da      	strh	r2, [r3, #6]
 8013052:	68bb      	ldr	r3, [r7, #8]
 8013054:	0c1b      	lsrs	r3, r3, #16
 8013056:	b29a      	uxth	r2, r3
 8013058:	683b      	ldr	r3, [r7, #0]
 801305a:	809a      	strh	r2, [r3, #4]
 801305c:	e000      	b.n	8013060 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801305e:	bf00      	nop
}
 8013060:	3718      	adds	r7, #24
 8013062:	46bd      	mov	sp, r7
 8013064:	bd80      	pop	{r7, pc}
	...

08013068 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013068:	b580      	push	{r7, lr}
 801306a:	b088      	sub	sp, #32
 801306c:	af00      	add	r7, sp, #0
 801306e:	6078      	str	r0, [r7, #4]
 8013070:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8013072:	683b      	ldr	r3, [r7, #0]
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	60fb      	str	r3, [r7, #12]
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	3324      	adds	r3, #36	; 0x24
 801307c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801307e:	220b      	movs	r2, #11
 8013080:	2120      	movs	r1, #32
 8013082:	68b8      	ldr	r0, [r7, #8]
 8013084:	f7fe ff27 	bl	8011ed6 <mem_set>
	si = i = 0; ni = 8;
 8013088:	2300      	movs	r3, #0
 801308a:	613b      	str	r3, [r7, #16]
 801308c:	693b      	ldr	r3, [r7, #16]
 801308e:	61fb      	str	r3, [r7, #28]
 8013090:	2308      	movs	r3, #8
 8013092:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8013094:	69fb      	ldr	r3, [r7, #28]
 8013096:	1c5a      	adds	r2, r3, #1
 8013098:	61fa      	str	r2, [r7, #28]
 801309a:	68fa      	ldr	r2, [r7, #12]
 801309c:	4413      	add	r3, r2
 801309e:	781b      	ldrb	r3, [r3, #0]
 80130a0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80130a2:	7efb      	ldrb	r3, [r7, #27]
 80130a4:	2b20      	cmp	r3, #32
 80130a6:	d94e      	bls.n	8013146 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80130a8:	7efb      	ldrb	r3, [r7, #27]
 80130aa:	2b2f      	cmp	r3, #47	; 0x2f
 80130ac:	d006      	beq.n	80130bc <create_name+0x54>
 80130ae:	7efb      	ldrb	r3, [r7, #27]
 80130b0:	2b5c      	cmp	r3, #92	; 0x5c
 80130b2:	d110      	bne.n	80130d6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80130b4:	e002      	b.n	80130bc <create_name+0x54>
 80130b6:	69fb      	ldr	r3, [r7, #28]
 80130b8:	3301      	adds	r3, #1
 80130ba:	61fb      	str	r3, [r7, #28]
 80130bc:	68fa      	ldr	r2, [r7, #12]
 80130be:	69fb      	ldr	r3, [r7, #28]
 80130c0:	4413      	add	r3, r2
 80130c2:	781b      	ldrb	r3, [r3, #0]
 80130c4:	2b2f      	cmp	r3, #47	; 0x2f
 80130c6:	d0f6      	beq.n	80130b6 <create_name+0x4e>
 80130c8:	68fa      	ldr	r2, [r7, #12]
 80130ca:	69fb      	ldr	r3, [r7, #28]
 80130cc:	4413      	add	r3, r2
 80130ce:	781b      	ldrb	r3, [r3, #0]
 80130d0:	2b5c      	cmp	r3, #92	; 0x5c
 80130d2:	d0f0      	beq.n	80130b6 <create_name+0x4e>
			break;
 80130d4:	e038      	b.n	8013148 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80130d6:	7efb      	ldrb	r3, [r7, #27]
 80130d8:	2b2e      	cmp	r3, #46	; 0x2e
 80130da:	d003      	beq.n	80130e4 <create_name+0x7c>
 80130dc:	693a      	ldr	r2, [r7, #16]
 80130de:	697b      	ldr	r3, [r7, #20]
 80130e0:	429a      	cmp	r2, r3
 80130e2:	d30c      	bcc.n	80130fe <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80130e4:	697b      	ldr	r3, [r7, #20]
 80130e6:	2b0b      	cmp	r3, #11
 80130e8:	d002      	beq.n	80130f0 <create_name+0x88>
 80130ea:	7efb      	ldrb	r3, [r7, #27]
 80130ec:	2b2e      	cmp	r3, #46	; 0x2e
 80130ee:	d001      	beq.n	80130f4 <create_name+0x8c>
 80130f0:	2306      	movs	r3, #6
 80130f2:	e044      	b.n	801317e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80130f4:	2308      	movs	r3, #8
 80130f6:	613b      	str	r3, [r7, #16]
 80130f8:	230b      	movs	r3, #11
 80130fa:	617b      	str	r3, [r7, #20]
			continue;
 80130fc:	e022      	b.n	8013144 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80130fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013102:	2b00      	cmp	r3, #0
 8013104:	da04      	bge.n	8013110 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8013106:	7efb      	ldrb	r3, [r7, #27]
 8013108:	3b80      	subs	r3, #128	; 0x80
 801310a:	4a1f      	ldr	r2, [pc, #124]	; (8013188 <create_name+0x120>)
 801310c:	5cd3      	ldrb	r3, [r2, r3]
 801310e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8013110:	7efb      	ldrb	r3, [r7, #27]
 8013112:	4619      	mov	r1, r3
 8013114:	481d      	ldr	r0, [pc, #116]	; (801318c <create_name+0x124>)
 8013116:	f7fe ff20 	bl	8011f5a <chk_chr>
 801311a:	4603      	mov	r3, r0
 801311c:	2b00      	cmp	r3, #0
 801311e:	d001      	beq.n	8013124 <create_name+0xbc>
 8013120:	2306      	movs	r3, #6
 8013122:	e02c      	b.n	801317e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8013124:	7efb      	ldrb	r3, [r7, #27]
 8013126:	2b60      	cmp	r3, #96	; 0x60
 8013128:	d905      	bls.n	8013136 <create_name+0xce>
 801312a:	7efb      	ldrb	r3, [r7, #27]
 801312c:	2b7a      	cmp	r3, #122	; 0x7a
 801312e:	d802      	bhi.n	8013136 <create_name+0xce>
 8013130:	7efb      	ldrb	r3, [r7, #27]
 8013132:	3b20      	subs	r3, #32
 8013134:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8013136:	693b      	ldr	r3, [r7, #16]
 8013138:	1c5a      	adds	r2, r3, #1
 801313a:	613a      	str	r2, [r7, #16]
 801313c:	68ba      	ldr	r2, [r7, #8]
 801313e:	4413      	add	r3, r2
 8013140:	7efa      	ldrb	r2, [r7, #27]
 8013142:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8013144:	e7a6      	b.n	8013094 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8013146:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8013148:	68fa      	ldr	r2, [r7, #12]
 801314a:	69fb      	ldr	r3, [r7, #28]
 801314c:	441a      	add	r2, r3
 801314e:	683b      	ldr	r3, [r7, #0]
 8013150:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8013152:	693b      	ldr	r3, [r7, #16]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d101      	bne.n	801315c <create_name+0xf4>
 8013158:	2306      	movs	r3, #6
 801315a:	e010      	b.n	801317e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801315c:	68bb      	ldr	r3, [r7, #8]
 801315e:	781b      	ldrb	r3, [r3, #0]
 8013160:	2be5      	cmp	r3, #229	; 0xe5
 8013162:	d102      	bne.n	801316a <create_name+0x102>
 8013164:	68bb      	ldr	r3, [r7, #8]
 8013166:	2205      	movs	r2, #5
 8013168:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801316a:	7efb      	ldrb	r3, [r7, #27]
 801316c:	2b20      	cmp	r3, #32
 801316e:	d801      	bhi.n	8013174 <create_name+0x10c>
 8013170:	2204      	movs	r2, #4
 8013172:	e000      	b.n	8013176 <create_name+0x10e>
 8013174:	2200      	movs	r2, #0
 8013176:	68bb      	ldr	r3, [r7, #8]
 8013178:	330b      	adds	r3, #11
 801317a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801317c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801317e:	4618      	mov	r0, r3
 8013180:	3720      	adds	r7, #32
 8013182:	46bd      	mov	sp, r7
 8013184:	bd80      	pop	{r7, pc}
 8013186:	bf00      	nop
 8013188:	08020c50 	.word	0x08020c50
 801318c:	08020a3c 	.word	0x08020a3c

08013190 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8013190:	b580      	push	{r7, lr}
 8013192:	b086      	sub	sp, #24
 8013194:	af00      	add	r7, sp, #0
 8013196:	6078      	str	r0, [r7, #4]
 8013198:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801319e:	693b      	ldr	r3, [r7, #16]
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80131a4:	e002      	b.n	80131ac <follow_path+0x1c>
 80131a6:	683b      	ldr	r3, [r7, #0]
 80131a8:	3301      	adds	r3, #1
 80131aa:	603b      	str	r3, [r7, #0]
 80131ac:	683b      	ldr	r3, [r7, #0]
 80131ae:	781b      	ldrb	r3, [r3, #0]
 80131b0:	2b2f      	cmp	r3, #47	; 0x2f
 80131b2:	d0f8      	beq.n	80131a6 <follow_path+0x16>
 80131b4:	683b      	ldr	r3, [r7, #0]
 80131b6:	781b      	ldrb	r3, [r3, #0]
 80131b8:	2b5c      	cmp	r3, #92	; 0x5c
 80131ba:	d0f4      	beq.n	80131a6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80131bc:	693b      	ldr	r3, [r7, #16]
 80131be:	2200      	movs	r2, #0
 80131c0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80131c2:	683b      	ldr	r3, [r7, #0]
 80131c4:	781b      	ldrb	r3, [r3, #0]
 80131c6:	2b1f      	cmp	r3, #31
 80131c8:	d80a      	bhi.n	80131e0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	2280      	movs	r2, #128	; 0x80
 80131ce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80131d2:	2100      	movs	r1, #0
 80131d4:	6878      	ldr	r0, [r7, #4]
 80131d6:	f7ff fc3d 	bl	8012a54 <dir_sdi>
 80131da:	4603      	mov	r3, r0
 80131dc:	75fb      	strb	r3, [r7, #23]
 80131de:	e043      	b.n	8013268 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80131e0:	463b      	mov	r3, r7
 80131e2:	4619      	mov	r1, r3
 80131e4:	6878      	ldr	r0, [r7, #4]
 80131e6:	f7ff ff3f 	bl	8013068 <create_name>
 80131ea:	4603      	mov	r3, r0
 80131ec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80131ee:	7dfb      	ldrb	r3, [r7, #23]
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d134      	bne.n	801325e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80131f4:	6878      	ldr	r0, [r7, #4]
 80131f6:	f7ff fe50 	bl	8012e9a <dir_find>
 80131fa:	4603      	mov	r3, r0
 80131fc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013204:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8013206:	7dfb      	ldrb	r3, [r7, #23]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d00a      	beq.n	8013222 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801320c:	7dfb      	ldrb	r3, [r7, #23]
 801320e:	2b04      	cmp	r3, #4
 8013210:	d127      	bne.n	8013262 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8013212:	7afb      	ldrb	r3, [r7, #11]
 8013214:	f003 0304 	and.w	r3, r3, #4
 8013218:	2b00      	cmp	r3, #0
 801321a:	d122      	bne.n	8013262 <follow_path+0xd2>
 801321c:	2305      	movs	r3, #5
 801321e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8013220:	e01f      	b.n	8013262 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013222:	7afb      	ldrb	r3, [r7, #11]
 8013224:	f003 0304 	and.w	r3, r3, #4
 8013228:	2b00      	cmp	r3, #0
 801322a:	d11c      	bne.n	8013266 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801322c:	693b      	ldr	r3, [r7, #16]
 801322e:	799b      	ldrb	r3, [r3, #6]
 8013230:	f003 0310 	and.w	r3, r3, #16
 8013234:	2b00      	cmp	r3, #0
 8013236:	d102      	bne.n	801323e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8013238:	2305      	movs	r3, #5
 801323a:	75fb      	strb	r3, [r7, #23]
 801323c:	e014      	b.n	8013268 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	695b      	ldr	r3, [r3, #20]
 8013248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801324c:	4413      	add	r3, r2
 801324e:	4619      	mov	r1, r3
 8013250:	68f8      	ldr	r0, [r7, #12]
 8013252:	f7ff fd86 	bl	8012d62 <ld_clust>
 8013256:	4602      	mov	r2, r0
 8013258:	693b      	ldr	r3, [r7, #16]
 801325a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801325c:	e7c0      	b.n	80131e0 <follow_path+0x50>
			if (res != FR_OK) break;
 801325e:	bf00      	nop
 8013260:	e002      	b.n	8013268 <follow_path+0xd8>
				break;
 8013262:	bf00      	nop
 8013264:	e000      	b.n	8013268 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013266:	bf00      	nop
			}
		}
	}

	return res;
 8013268:	7dfb      	ldrb	r3, [r7, #23]
}
 801326a:	4618      	mov	r0, r3
 801326c:	3718      	adds	r7, #24
 801326e:	46bd      	mov	sp, r7
 8013270:	bd80      	pop	{r7, pc}

08013272 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8013272:	b480      	push	{r7}
 8013274:	b087      	sub	sp, #28
 8013276:	af00      	add	r7, sp, #0
 8013278:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801327a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801327e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	2b00      	cmp	r3, #0
 8013286:	d031      	beq.n	80132ec <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	617b      	str	r3, [r7, #20]
 801328e:	e002      	b.n	8013296 <get_ldnumber+0x24>
 8013290:	697b      	ldr	r3, [r7, #20]
 8013292:	3301      	adds	r3, #1
 8013294:	617b      	str	r3, [r7, #20]
 8013296:	697b      	ldr	r3, [r7, #20]
 8013298:	781b      	ldrb	r3, [r3, #0]
 801329a:	2b20      	cmp	r3, #32
 801329c:	d903      	bls.n	80132a6 <get_ldnumber+0x34>
 801329e:	697b      	ldr	r3, [r7, #20]
 80132a0:	781b      	ldrb	r3, [r3, #0]
 80132a2:	2b3a      	cmp	r3, #58	; 0x3a
 80132a4:	d1f4      	bne.n	8013290 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80132a6:	697b      	ldr	r3, [r7, #20]
 80132a8:	781b      	ldrb	r3, [r3, #0]
 80132aa:	2b3a      	cmp	r3, #58	; 0x3a
 80132ac:	d11c      	bne.n	80132e8 <get_ldnumber+0x76>
			tp = *path;
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	1c5a      	adds	r2, r3, #1
 80132b8:	60fa      	str	r2, [r7, #12]
 80132ba:	781b      	ldrb	r3, [r3, #0]
 80132bc:	3b30      	subs	r3, #48	; 0x30
 80132be:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80132c0:	68bb      	ldr	r3, [r7, #8]
 80132c2:	2b09      	cmp	r3, #9
 80132c4:	d80e      	bhi.n	80132e4 <get_ldnumber+0x72>
 80132c6:	68fa      	ldr	r2, [r7, #12]
 80132c8:	697b      	ldr	r3, [r7, #20]
 80132ca:	429a      	cmp	r2, r3
 80132cc:	d10a      	bne.n	80132e4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80132ce:	68bb      	ldr	r3, [r7, #8]
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d107      	bne.n	80132e4 <get_ldnumber+0x72>
					vol = (int)i;
 80132d4:	68bb      	ldr	r3, [r7, #8]
 80132d6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80132d8:	697b      	ldr	r3, [r7, #20]
 80132da:	3301      	adds	r3, #1
 80132dc:	617b      	str	r3, [r7, #20]
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	697a      	ldr	r2, [r7, #20]
 80132e2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80132e4:	693b      	ldr	r3, [r7, #16]
 80132e6:	e002      	b.n	80132ee <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80132e8:	2300      	movs	r3, #0
 80132ea:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80132ec:	693b      	ldr	r3, [r7, #16]
}
 80132ee:	4618      	mov	r0, r3
 80132f0:	371c      	adds	r7, #28
 80132f2:	46bd      	mov	sp, r7
 80132f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f8:	4770      	bx	lr
	...

080132fc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80132fc:	b580      	push	{r7, lr}
 80132fe:	b082      	sub	sp, #8
 8013300:	af00      	add	r7, sp, #0
 8013302:	6078      	str	r0, [r7, #4]
 8013304:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	2200      	movs	r2, #0
 801330a:	70da      	strb	r2, [r3, #3]
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013312:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8013314:	6839      	ldr	r1, [r7, #0]
 8013316:	6878      	ldr	r0, [r7, #4]
 8013318:	f7ff f81c 	bl	8012354 <move_window>
 801331c:	4603      	mov	r3, r0
 801331e:	2b00      	cmp	r3, #0
 8013320:	d001      	beq.n	8013326 <check_fs+0x2a>
 8013322:	2304      	movs	r3, #4
 8013324:	e038      	b.n	8013398 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	3334      	adds	r3, #52	; 0x34
 801332a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801332e:	4618      	mov	r0, r3
 8013330:	f7fe fd2e 	bl	8011d90 <ld_word>
 8013334:	4603      	mov	r3, r0
 8013336:	461a      	mov	r2, r3
 8013338:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801333c:	429a      	cmp	r2, r3
 801333e:	d001      	beq.n	8013344 <check_fs+0x48>
 8013340:	2303      	movs	r3, #3
 8013342:	e029      	b.n	8013398 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801334a:	2be9      	cmp	r3, #233	; 0xe9
 801334c:	d009      	beq.n	8013362 <check_fs+0x66>
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013354:	2beb      	cmp	r3, #235	; 0xeb
 8013356:	d11e      	bne.n	8013396 <check_fs+0x9a>
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801335e:	2b90      	cmp	r3, #144	; 0x90
 8013360:	d119      	bne.n	8013396 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	3334      	adds	r3, #52	; 0x34
 8013366:	3336      	adds	r3, #54	; 0x36
 8013368:	4618      	mov	r0, r3
 801336a:	f7fe fd29 	bl	8011dc0 <ld_dword>
 801336e:	4603      	mov	r3, r0
 8013370:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013374:	4a0a      	ldr	r2, [pc, #40]	; (80133a0 <check_fs+0xa4>)
 8013376:	4293      	cmp	r3, r2
 8013378:	d101      	bne.n	801337e <check_fs+0x82>
 801337a:	2300      	movs	r3, #0
 801337c:	e00c      	b.n	8013398 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	3334      	adds	r3, #52	; 0x34
 8013382:	3352      	adds	r3, #82	; 0x52
 8013384:	4618      	mov	r0, r3
 8013386:	f7fe fd1b 	bl	8011dc0 <ld_dword>
 801338a:	4603      	mov	r3, r0
 801338c:	4a05      	ldr	r2, [pc, #20]	; (80133a4 <check_fs+0xa8>)
 801338e:	4293      	cmp	r3, r2
 8013390:	d101      	bne.n	8013396 <check_fs+0x9a>
 8013392:	2300      	movs	r3, #0
 8013394:	e000      	b.n	8013398 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8013396:	2302      	movs	r3, #2
}
 8013398:	4618      	mov	r0, r3
 801339a:	3708      	adds	r7, #8
 801339c:	46bd      	mov	sp, r7
 801339e:	bd80      	pop	{r7, pc}
 80133a0:	00544146 	.word	0x00544146
 80133a4:	33544146 	.word	0x33544146

080133a8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b096      	sub	sp, #88	; 0x58
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	60f8      	str	r0, [r7, #12]
 80133b0:	60b9      	str	r1, [r7, #8]
 80133b2:	4613      	mov	r3, r2
 80133b4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80133b6:	68bb      	ldr	r3, [r7, #8]
 80133b8:	2200      	movs	r2, #0
 80133ba:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80133bc:	68f8      	ldr	r0, [r7, #12]
 80133be:	f7ff ff58 	bl	8013272 <get_ldnumber>
 80133c2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80133c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	da01      	bge.n	80133ce <find_volume+0x26>
 80133ca:	230b      	movs	r3, #11
 80133cc:	e236      	b.n	801383c <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80133ce:	4aac      	ldr	r2, [pc, #688]	; (8013680 <find_volume+0x2d8>)
 80133d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80133d6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80133d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d101      	bne.n	80133e2 <find_volume+0x3a>
 80133de:	230c      	movs	r3, #12
 80133e0:	e22c      	b.n	801383c <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 80133e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80133e4:	f7fe fdd4 	bl	8011f90 <lock_fs>
 80133e8:	4603      	mov	r3, r0
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d101      	bne.n	80133f2 <find_volume+0x4a>
 80133ee:	230f      	movs	r3, #15
 80133f0:	e224      	b.n	801383c <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 80133f2:	68bb      	ldr	r3, [r7, #8]
 80133f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80133f6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80133f8:	79fb      	ldrb	r3, [r7, #7]
 80133fa:	f023 0301 	bic.w	r3, r3, #1
 80133fe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013402:	781b      	ldrb	r3, [r3, #0]
 8013404:	2b00      	cmp	r3, #0
 8013406:	d01a      	beq.n	801343e <find_volume+0x96>
		stat = disk_status(fs->drv);
 8013408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801340a:	785b      	ldrb	r3, [r3, #1]
 801340c:	4618      	mov	r0, r3
 801340e:	f7fe fc21 	bl	8011c54 <disk_status>
 8013412:	4603      	mov	r3, r0
 8013414:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013418:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801341c:	f003 0301 	and.w	r3, r3, #1
 8013420:	2b00      	cmp	r3, #0
 8013422:	d10c      	bne.n	801343e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013424:	79fb      	ldrb	r3, [r7, #7]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d007      	beq.n	801343a <find_volume+0x92>
 801342a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801342e:	f003 0304 	and.w	r3, r3, #4
 8013432:	2b00      	cmp	r3, #0
 8013434:	d001      	beq.n	801343a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8013436:	230a      	movs	r3, #10
 8013438:	e200      	b.n	801383c <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 801343a:	2300      	movs	r3, #0
 801343c:	e1fe      	b.n	801383c <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801343e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013440:	2200      	movs	r2, #0
 8013442:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013446:	b2da      	uxtb	r2, r3
 8013448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801344a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801344c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801344e:	785b      	ldrb	r3, [r3, #1]
 8013450:	4618      	mov	r0, r3
 8013452:	f7fe fc19 	bl	8011c88 <disk_initialize>
 8013456:	4603      	mov	r3, r0
 8013458:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801345c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013460:	f003 0301 	and.w	r3, r3, #1
 8013464:	2b00      	cmp	r3, #0
 8013466:	d001      	beq.n	801346c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013468:	2303      	movs	r3, #3
 801346a:	e1e7      	b.n	801383c <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801346c:	79fb      	ldrb	r3, [r7, #7]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d007      	beq.n	8013482 <find_volume+0xda>
 8013472:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013476:	f003 0304 	and.w	r3, r3, #4
 801347a:	2b00      	cmp	r3, #0
 801347c:	d001      	beq.n	8013482 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 801347e:	230a      	movs	r3, #10
 8013480:	e1dc      	b.n	801383c <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8013482:	2300      	movs	r3, #0
 8013484:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8013486:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013488:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801348a:	f7ff ff37 	bl	80132fc <check_fs>
 801348e:	4603      	mov	r3, r0
 8013490:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013494:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013498:	2b02      	cmp	r3, #2
 801349a:	d14b      	bne.n	8013534 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801349c:	2300      	movs	r3, #0
 801349e:	643b      	str	r3, [r7, #64]	; 0x40
 80134a0:	e01f      	b.n	80134e2 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80134a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134a4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80134a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80134aa:	011b      	lsls	r3, r3, #4
 80134ac:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80134b0:	4413      	add	r3, r2
 80134b2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80134b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134b6:	3304      	adds	r3, #4
 80134b8:	781b      	ldrb	r3, [r3, #0]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d006      	beq.n	80134cc <find_volume+0x124>
 80134be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134c0:	3308      	adds	r3, #8
 80134c2:	4618      	mov	r0, r3
 80134c4:	f7fe fc7c 	bl	8011dc0 <ld_dword>
 80134c8:	4602      	mov	r2, r0
 80134ca:	e000      	b.n	80134ce <find_volume+0x126>
 80134cc:	2200      	movs	r2, #0
 80134ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80134d0:	009b      	lsls	r3, r3, #2
 80134d2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80134d6:	440b      	add	r3, r1
 80134d8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80134dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80134de:	3301      	adds	r3, #1
 80134e0:	643b      	str	r3, [r7, #64]	; 0x40
 80134e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80134e4:	2b03      	cmp	r3, #3
 80134e6:	d9dc      	bls.n	80134a2 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80134e8:	2300      	movs	r3, #0
 80134ea:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80134ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d002      	beq.n	80134f8 <find_volume+0x150>
 80134f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80134f4:	3b01      	subs	r3, #1
 80134f6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80134f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80134fa:	009b      	lsls	r3, r3, #2
 80134fc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8013500:	4413      	add	r3, r2
 8013502:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8013506:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801350a:	2b00      	cmp	r3, #0
 801350c:	d005      	beq.n	801351a <find_volume+0x172>
 801350e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013510:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013512:	f7ff fef3 	bl	80132fc <check_fs>
 8013516:	4603      	mov	r3, r0
 8013518:	e000      	b.n	801351c <find_volume+0x174>
 801351a:	2303      	movs	r3, #3
 801351c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013520:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013524:	2b01      	cmp	r3, #1
 8013526:	d905      	bls.n	8013534 <find_volume+0x18c>
 8013528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801352a:	3301      	adds	r3, #1
 801352c:	643b      	str	r3, [r7, #64]	; 0x40
 801352e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013530:	2b03      	cmp	r3, #3
 8013532:	d9e1      	bls.n	80134f8 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8013534:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013538:	2b04      	cmp	r3, #4
 801353a:	d101      	bne.n	8013540 <find_volume+0x198>
 801353c:	2301      	movs	r3, #1
 801353e:	e17d      	b.n	801383c <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013540:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013544:	2b01      	cmp	r3, #1
 8013546:	d901      	bls.n	801354c <find_volume+0x1a4>
 8013548:	230d      	movs	r3, #13
 801354a:	e177      	b.n	801383c <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801354c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801354e:	3334      	adds	r3, #52	; 0x34
 8013550:	330b      	adds	r3, #11
 8013552:	4618      	mov	r0, r3
 8013554:	f7fe fc1c 	bl	8011d90 <ld_word>
 8013558:	4603      	mov	r3, r0
 801355a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801355e:	d001      	beq.n	8013564 <find_volume+0x1bc>
 8013560:	230d      	movs	r3, #13
 8013562:	e16b      	b.n	801383c <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013566:	3334      	adds	r3, #52	; 0x34
 8013568:	3316      	adds	r3, #22
 801356a:	4618      	mov	r0, r3
 801356c:	f7fe fc10 	bl	8011d90 <ld_word>
 8013570:	4603      	mov	r3, r0
 8013572:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013576:	2b00      	cmp	r3, #0
 8013578:	d106      	bne.n	8013588 <find_volume+0x1e0>
 801357a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801357c:	3334      	adds	r3, #52	; 0x34
 801357e:	3324      	adds	r3, #36	; 0x24
 8013580:	4618      	mov	r0, r3
 8013582:	f7fe fc1d 	bl	8011dc0 <ld_dword>
 8013586:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8013588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801358a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801358c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801358e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013590:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8013594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013596:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801359a:	789b      	ldrb	r3, [r3, #2]
 801359c:	2b01      	cmp	r3, #1
 801359e:	d005      	beq.n	80135ac <find_volume+0x204>
 80135a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135a2:	789b      	ldrb	r3, [r3, #2]
 80135a4:	2b02      	cmp	r3, #2
 80135a6:	d001      	beq.n	80135ac <find_volume+0x204>
 80135a8:	230d      	movs	r3, #13
 80135aa:	e147      	b.n	801383c <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80135ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135ae:	789b      	ldrb	r3, [r3, #2]
 80135b0:	461a      	mov	r2, r3
 80135b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135b4:	fb02 f303 	mul.w	r3, r2, r3
 80135b8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80135ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80135c0:	b29a      	uxth	r2, r3
 80135c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135c4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80135c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135c8:	895b      	ldrh	r3, [r3, #10]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d008      	beq.n	80135e0 <find_volume+0x238>
 80135ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135d0:	895b      	ldrh	r3, [r3, #10]
 80135d2:	461a      	mov	r2, r3
 80135d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135d6:	895b      	ldrh	r3, [r3, #10]
 80135d8:	3b01      	subs	r3, #1
 80135da:	4013      	ands	r3, r2
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d001      	beq.n	80135e4 <find_volume+0x23c>
 80135e0:	230d      	movs	r3, #13
 80135e2:	e12b      	b.n	801383c <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80135e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135e6:	3334      	adds	r3, #52	; 0x34
 80135e8:	3311      	adds	r3, #17
 80135ea:	4618      	mov	r0, r3
 80135ec:	f7fe fbd0 	bl	8011d90 <ld_word>
 80135f0:	4603      	mov	r3, r0
 80135f2:	461a      	mov	r2, r3
 80135f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135f6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80135f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135fa:	891b      	ldrh	r3, [r3, #8]
 80135fc:	f003 030f 	and.w	r3, r3, #15
 8013600:	b29b      	uxth	r3, r3
 8013602:	2b00      	cmp	r3, #0
 8013604:	d001      	beq.n	801360a <find_volume+0x262>
 8013606:	230d      	movs	r3, #13
 8013608:	e118      	b.n	801383c <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801360a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801360c:	3334      	adds	r3, #52	; 0x34
 801360e:	3313      	adds	r3, #19
 8013610:	4618      	mov	r0, r3
 8013612:	f7fe fbbd 	bl	8011d90 <ld_word>
 8013616:	4603      	mov	r3, r0
 8013618:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801361a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801361c:	2b00      	cmp	r3, #0
 801361e:	d106      	bne.n	801362e <find_volume+0x286>
 8013620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013622:	3334      	adds	r3, #52	; 0x34
 8013624:	3320      	adds	r3, #32
 8013626:	4618      	mov	r0, r3
 8013628:	f7fe fbca 	bl	8011dc0 <ld_dword>
 801362c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801362e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013630:	3334      	adds	r3, #52	; 0x34
 8013632:	330e      	adds	r3, #14
 8013634:	4618      	mov	r0, r3
 8013636:	f7fe fbab 	bl	8011d90 <ld_word>
 801363a:	4603      	mov	r3, r0
 801363c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801363e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013640:	2b00      	cmp	r3, #0
 8013642:	d101      	bne.n	8013648 <find_volume+0x2a0>
 8013644:	230d      	movs	r3, #13
 8013646:	e0f9      	b.n	801383c <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013648:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801364a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801364c:	4413      	add	r3, r2
 801364e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013650:	8912      	ldrh	r2, [r2, #8]
 8013652:	0912      	lsrs	r2, r2, #4
 8013654:	b292      	uxth	r2, r2
 8013656:	4413      	add	r3, r2
 8013658:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801365a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801365c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801365e:	429a      	cmp	r2, r3
 8013660:	d201      	bcs.n	8013666 <find_volume+0x2be>
 8013662:	230d      	movs	r3, #13
 8013664:	e0ea      	b.n	801383c <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013666:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801366a:	1ad3      	subs	r3, r2, r3
 801366c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801366e:	8952      	ldrh	r2, [r2, #10]
 8013670:	fbb3 f3f2 	udiv	r3, r3, r2
 8013674:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013678:	2b00      	cmp	r3, #0
 801367a:	d103      	bne.n	8013684 <find_volume+0x2dc>
 801367c:	230d      	movs	r3, #13
 801367e:	e0dd      	b.n	801383c <find_volume+0x494>
 8013680:	20000830 	.word	0x20000830
		fmt = FS_FAT32;
 8013684:	2303      	movs	r3, #3
 8013686:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801368c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013690:	4293      	cmp	r3, r2
 8013692:	d802      	bhi.n	801369a <find_volume+0x2f2>
 8013694:	2302      	movs	r3, #2
 8013696:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801369c:	f640 72f5 	movw	r2, #4085	; 0xff5
 80136a0:	4293      	cmp	r3, r2
 80136a2:	d802      	bhi.n	80136aa <find_volume+0x302>
 80136a4:	2301      	movs	r3, #1
 80136a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80136aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136ac:	1c9a      	adds	r2, r3, #2
 80136ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136b0:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80136b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80136b6:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80136b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80136ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80136bc:	441a      	add	r2, r3
 80136be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136c0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80136c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80136c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136c6:	441a      	add	r2, r3
 80136c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136ca:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80136cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80136d0:	2b03      	cmp	r3, #3
 80136d2:	d11e      	bne.n	8013712 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80136d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136d6:	3334      	adds	r3, #52	; 0x34
 80136d8:	332a      	adds	r3, #42	; 0x2a
 80136da:	4618      	mov	r0, r3
 80136dc:	f7fe fb58 	bl	8011d90 <ld_word>
 80136e0:	4603      	mov	r3, r0
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d001      	beq.n	80136ea <find_volume+0x342>
 80136e6:	230d      	movs	r3, #13
 80136e8:	e0a8      	b.n	801383c <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80136ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136ec:	891b      	ldrh	r3, [r3, #8]
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d001      	beq.n	80136f6 <find_volume+0x34e>
 80136f2:	230d      	movs	r3, #13
 80136f4:	e0a2      	b.n	801383c <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80136f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136f8:	3334      	adds	r3, #52	; 0x34
 80136fa:	332c      	adds	r3, #44	; 0x2c
 80136fc:	4618      	mov	r0, r3
 80136fe:	f7fe fb5f 	bl	8011dc0 <ld_dword>
 8013702:	4602      	mov	r2, r0
 8013704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013706:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801370a:	699b      	ldr	r3, [r3, #24]
 801370c:	009b      	lsls	r3, r3, #2
 801370e:	647b      	str	r3, [r7, #68]	; 0x44
 8013710:	e01f      	b.n	8013752 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013714:	891b      	ldrh	r3, [r3, #8]
 8013716:	2b00      	cmp	r3, #0
 8013718:	d101      	bne.n	801371e <find_volume+0x376>
 801371a:	230d      	movs	r3, #13
 801371c:	e08e      	b.n	801383c <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801371e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013720:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013724:	441a      	add	r2, r3
 8013726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013728:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801372a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801372e:	2b02      	cmp	r3, #2
 8013730:	d103      	bne.n	801373a <find_volume+0x392>
 8013732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013734:	699b      	ldr	r3, [r3, #24]
 8013736:	005b      	lsls	r3, r3, #1
 8013738:	e00a      	b.n	8013750 <find_volume+0x3a8>
 801373a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801373c:	699a      	ldr	r2, [r3, #24]
 801373e:	4613      	mov	r3, r2
 8013740:	005b      	lsls	r3, r3, #1
 8013742:	4413      	add	r3, r2
 8013744:	085a      	lsrs	r2, r3, #1
 8013746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013748:	699b      	ldr	r3, [r3, #24]
 801374a:	f003 0301 	and.w	r3, r3, #1
 801374e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013750:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013754:	69da      	ldr	r2, [r3, #28]
 8013756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013758:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801375c:	0a5b      	lsrs	r3, r3, #9
 801375e:	429a      	cmp	r2, r3
 8013760:	d201      	bcs.n	8013766 <find_volume+0x3be>
 8013762:	230d      	movs	r3, #13
 8013764:	e06a      	b.n	801383c <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013768:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801376c:	615a      	str	r2, [r3, #20]
 801376e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013770:	695a      	ldr	r2, [r3, #20]
 8013772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013774:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8013776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013778:	2280      	movs	r2, #128	; 0x80
 801377a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801377c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013780:	2b03      	cmp	r3, #3
 8013782:	d149      	bne.n	8013818 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013786:	3334      	adds	r3, #52	; 0x34
 8013788:	3330      	adds	r3, #48	; 0x30
 801378a:	4618      	mov	r0, r3
 801378c:	f7fe fb00 	bl	8011d90 <ld_word>
 8013790:	4603      	mov	r3, r0
 8013792:	2b01      	cmp	r3, #1
 8013794:	d140      	bne.n	8013818 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013798:	3301      	adds	r3, #1
 801379a:	4619      	mov	r1, r3
 801379c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801379e:	f7fe fdd9 	bl	8012354 <move_window>
 80137a2:	4603      	mov	r3, r0
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d137      	bne.n	8013818 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 80137a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137aa:	2200      	movs	r2, #0
 80137ac:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80137ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137b0:	3334      	adds	r3, #52	; 0x34
 80137b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80137b6:	4618      	mov	r0, r3
 80137b8:	f7fe faea 	bl	8011d90 <ld_word>
 80137bc:	4603      	mov	r3, r0
 80137be:	461a      	mov	r2, r3
 80137c0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80137c4:	429a      	cmp	r2, r3
 80137c6:	d127      	bne.n	8013818 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80137c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137ca:	3334      	adds	r3, #52	; 0x34
 80137cc:	4618      	mov	r0, r3
 80137ce:	f7fe faf7 	bl	8011dc0 <ld_dword>
 80137d2:	4603      	mov	r3, r0
 80137d4:	4a1b      	ldr	r2, [pc, #108]	; (8013844 <find_volume+0x49c>)
 80137d6:	4293      	cmp	r3, r2
 80137d8:	d11e      	bne.n	8013818 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80137da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137dc:	3334      	adds	r3, #52	; 0x34
 80137de:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80137e2:	4618      	mov	r0, r3
 80137e4:	f7fe faec 	bl	8011dc0 <ld_dword>
 80137e8:	4603      	mov	r3, r0
 80137ea:	4a17      	ldr	r2, [pc, #92]	; (8013848 <find_volume+0x4a0>)
 80137ec:	4293      	cmp	r3, r2
 80137ee:	d113      	bne.n	8013818 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80137f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137f2:	3334      	adds	r3, #52	; 0x34
 80137f4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80137f8:	4618      	mov	r0, r3
 80137fa:	f7fe fae1 	bl	8011dc0 <ld_dword>
 80137fe:	4602      	mov	r2, r0
 8013800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013802:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013806:	3334      	adds	r3, #52	; 0x34
 8013808:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801380c:	4618      	mov	r0, r3
 801380e:	f7fe fad7 	bl	8011dc0 <ld_dword>
 8013812:	4602      	mov	r2, r0
 8013814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013816:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801381a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801381e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013820:	4b0a      	ldr	r3, [pc, #40]	; (801384c <find_volume+0x4a4>)
 8013822:	881b      	ldrh	r3, [r3, #0]
 8013824:	3301      	adds	r3, #1
 8013826:	b29a      	uxth	r2, r3
 8013828:	4b08      	ldr	r3, [pc, #32]	; (801384c <find_volume+0x4a4>)
 801382a:	801a      	strh	r2, [r3, #0]
 801382c:	4b07      	ldr	r3, [pc, #28]	; (801384c <find_volume+0x4a4>)
 801382e:	881a      	ldrh	r2, [r3, #0]
 8013830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013832:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013834:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013836:	f7fe fd25 	bl	8012284 <clear_lock>
#endif
	return FR_OK;
 801383a:	2300      	movs	r3, #0
}
 801383c:	4618      	mov	r0, r3
 801383e:	3758      	adds	r7, #88	; 0x58
 8013840:	46bd      	mov	sp, r7
 8013842:	bd80      	pop	{r7, pc}
 8013844:	41615252 	.word	0x41615252
 8013848:	61417272 	.word	0x61417272
 801384c:	20000834 	.word	0x20000834

08013850 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013850:	b580      	push	{r7, lr}
 8013852:	b084      	sub	sp, #16
 8013854:	af00      	add	r7, sp, #0
 8013856:	6078      	str	r0, [r7, #4]
 8013858:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801385a:	2309      	movs	r3, #9
 801385c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d02e      	beq.n	80138c2 <validate+0x72>
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	2b00      	cmp	r3, #0
 801386a:	d02a      	beq.n	80138c2 <validate+0x72>
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	781b      	ldrb	r3, [r3, #0]
 8013872:	2b00      	cmp	r3, #0
 8013874:	d025      	beq.n	80138c2 <validate+0x72>
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	889a      	ldrh	r2, [r3, #4]
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	88db      	ldrh	r3, [r3, #6]
 8013880:	429a      	cmp	r2, r3
 8013882:	d11e      	bne.n	80138c2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	4618      	mov	r0, r3
 801388a:	f7fe fb81 	bl	8011f90 <lock_fs>
 801388e:	4603      	mov	r3, r0
 8013890:	2b00      	cmp	r3, #0
 8013892:	d014      	beq.n	80138be <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	785b      	ldrb	r3, [r3, #1]
 801389a:	4618      	mov	r0, r3
 801389c:	f7fe f9da 	bl	8011c54 <disk_status>
 80138a0:	4603      	mov	r3, r0
 80138a2:	f003 0301 	and.w	r3, r3, #1
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d102      	bne.n	80138b0 <validate+0x60>
				res = FR_OK;
 80138aa:	2300      	movs	r3, #0
 80138ac:	73fb      	strb	r3, [r7, #15]
 80138ae:	e008      	b.n	80138c2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	2100      	movs	r1, #0
 80138b6:	4618      	mov	r0, r3
 80138b8:	f7fe fb80 	bl	8011fbc <unlock_fs>
 80138bc:	e001      	b.n	80138c2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80138be:	230f      	movs	r3, #15
 80138c0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80138c2:	7bfb      	ldrb	r3, [r7, #15]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d102      	bne.n	80138ce <validate+0x7e>
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	e000      	b.n	80138d0 <validate+0x80>
 80138ce:	2300      	movs	r3, #0
 80138d0:	683a      	ldr	r2, [r7, #0]
 80138d2:	6013      	str	r3, [r2, #0]
	return res;
 80138d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80138d6:	4618      	mov	r0, r3
 80138d8:	3710      	adds	r7, #16
 80138da:	46bd      	mov	sp, r7
 80138dc:	bd80      	pop	{r7, pc}
	...

080138e0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80138e0:	b580      	push	{r7, lr}
 80138e2:	b088      	sub	sp, #32
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	60f8      	str	r0, [r7, #12]
 80138e8:	60b9      	str	r1, [r7, #8]
 80138ea:	4613      	mov	r3, r2
 80138ec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80138ee:	68bb      	ldr	r3, [r7, #8]
 80138f0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80138f2:	f107 0310 	add.w	r3, r7, #16
 80138f6:	4618      	mov	r0, r3
 80138f8:	f7ff fcbb 	bl	8013272 <get_ldnumber>
 80138fc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80138fe:	69fb      	ldr	r3, [r7, #28]
 8013900:	2b00      	cmp	r3, #0
 8013902:	da01      	bge.n	8013908 <f_mount+0x28>
 8013904:	230b      	movs	r3, #11
 8013906:	e048      	b.n	801399a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013908:	4a26      	ldr	r2, [pc, #152]	; (80139a4 <f_mount+0xc4>)
 801390a:	69fb      	ldr	r3, [r7, #28]
 801390c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013910:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013912:	69bb      	ldr	r3, [r7, #24]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d00f      	beq.n	8013938 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013918:	69b8      	ldr	r0, [r7, #24]
 801391a:	f7fe fcb3 	bl	8012284 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 801391e:	69bb      	ldr	r3, [r7, #24]
 8013920:	68db      	ldr	r3, [r3, #12]
 8013922:	4618      	mov	r0, r3
 8013924:	f001 f812 	bl	801494c <ff_del_syncobj>
 8013928:	4603      	mov	r3, r0
 801392a:	2b00      	cmp	r3, #0
 801392c:	d101      	bne.n	8013932 <f_mount+0x52>
 801392e:	2302      	movs	r3, #2
 8013930:	e033      	b.n	801399a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013932:	69bb      	ldr	r3, [r7, #24]
 8013934:	2200      	movs	r2, #0
 8013936:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d00f      	beq.n	801395e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	2200      	movs	r2, #0
 8013942:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8013944:	69fb      	ldr	r3, [r7, #28]
 8013946:	b2da      	uxtb	r2, r3
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	330c      	adds	r3, #12
 801394c:	4619      	mov	r1, r3
 801394e:	4610      	mov	r0, r2
 8013950:	f000 ffe1 	bl	8014916 <ff_cre_syncobj>
 8013954:	4603      	mov	r3, r0
 8013956:	2b00      	cmp	r3, #0
 8013958:	d101      	bne.n	801395e <f_mount+0x7e>
 801395a:	2302      	movs	r3, #2
 801395c:	e01d      	b.n	801399a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801395e:	68fa      	ldr	r2, [r7, #12]
 8013960:	4910      	ldr	r1, [pc, #64]	; (80139a4 <f_mount+0xc4>)
 8013962:	69fb      	ldr	r3, [r7, #28]
 8013964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	2b00      	cmp	r3, #0
 801396c:	d002      	beq.n	8013974 <f_mount+0x94>
 801396e:	79fb      	ldrb	r3, [r7, #7]
 8013970:	2b01      	cmp	r3, #1
 8013972:	d001      	beq.n	8013978 <f_mount+0x98>
 8013974:	2300      	movs	r3, #0
 8013976:	e010      	b.n	801399a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013978:	f107 010c 	add.w	r1, r7, #12
 801397c:	f107 0308 	add.w	r3, r7, #8
 8013980:	2200      	movs	r2, #0
 8013982:	4618      	mov	r0, r3
 8013984:	f7ff fd10 	bl	80133a8 <find_volume>
 8013988:	4603      	mov	r3, r0
 801398a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	7dfa      	ldrb	r2, [r7, #23]
 8013990:	4611      	mov	r1, r2
 8013992:	4618      	mov	r0, r3
 8013994:	f7fe fb12 	bl	8011fbc <unlock_fs>
 8013998:	7dfb      	ldrb	r3, [r7, #23]
}
 801399a:	4618      	mov	r0, r3
 801399c:	3720      	adds	r7, #32
 801399e:	46bd      	mov	sp, r7
 80139a0:	bd80      	pop	{r7, pc}
 80139a2:	bf00      	nop
 80139a4:	20000830 	.word	0x20000830

080139a8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80139a8:	b580      	push	{r7, lr}
 80139aa:	b098      	sub	sp, #96	; 0x60
 80139ac:	af00      	add	r7, sp, #0
 80139ae:	60f8      	str	r0, [r7, #12]
 80139b0:	60b9      	str	r1, [r7, #8]
 80139b2:	4613      	mov	r3, r2
 80139b4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d101      	bne.n	80139c0 <f_open+0x18>
 80139bc:	2309      	movs	r3, #9
 80139be:	e1b4      	b.n	8013d2a <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80139c0:	79fb      	ldrb	r3, [r7, #7]
 80139c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80139c6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80139c8:	79fa      	ldrb	r2, [r7, #7]
 80139ca:	f107 0110 	add.w	r1, r7, #16
 80139ce:	f107 0308 	add.w	r3, r7, #8
 80139d2:	4618      	mov	r0, r3
 80139d4:	f7ff fce8 	bl	80133a8 <find_volume>
 80139d8:	4603      	mov	r3, r0
 80139da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80139de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	f040 8191 	bne.w	8013d0a <f_open+0x362>
		dj.obj.fs = fs;
 80139e8:	693b      	ldr	r3, [r7, #16]
 80139ea:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80139ec:	68ba      	ldr	r2, [r7, #8]
 80139ee:	f107 0314 	add.w	r3, r7, #20
 80139f2:	4611      	mov	r1, r2
 80139f4:	4618      	mov	r0, r3
 80139f6:	f7ff fbcb 	bl	8013190 <follow_path>
 80139fa:	4603      	mov	r3, r0
 80139fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013a00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d11a      	bne.n	8013a3e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013a08:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013a0c:	b25b      	sxtb	r3, r3
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	da03      	bge.n	8013a1a <f_open+0x72>
				res = FR_INVALID_NAME;
 8013a12:	2306      	movs	r3, #6
 8013a14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013a18:	e011      	b.n	8013a3e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013a1a:	79fb      	ldrb	r3, [r7, #7]
 8013a1c:	f023 0301 	bic.w	r3, r3, #1
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	bf14      	ite	ne
 8013a24:	2301      	movne	r3, #1
 8013a26:	2300      	moveq	r3, #0
 8013a28:	b2db      	uxtb	r3, r3
 8013a2a:	461a      	mov	r2, r3
 8013a2c:	f107 0314 	add.w	r3, r7, #20
 8013a30:	4611      	mov	r1, r2
 8013a32:	4618      	mov	r0, r3
 8013a34:	f7fe fade 	bl	8011ff4 <chk_lock>
 8013a38:	4603      	mov	r3, r0
 8013a3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013a3e:	79fb      	ldrb	r3, [r7, #7]
 8013a40:	f003 031c 	and.w	r3, r3, #28
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d07f      	beq.n	8013b48 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8013a48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d017      	beq.n	8013a80 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013a50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013a54:	2b04      	cmp	r3, #4
 8013a56:	d10e      	bne.n	8013a76 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013a58:	f7fe fb28 	bl	80120ac <enq_lock>
 8013a5c:	4603      	mov	r3, r0
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d006      	beq.n	8013a70 <f_open+0xc8>
 8013a62:	f107 0314 	add.w	r3, r7, #20
 8013a66:	4618      	mov	r0, r3
 8013a68:	f7ff fa6c 	bl	8012f44 <dir_register>
 8013a6c:	4603      	mov	r3, r0
 8013a6e:	e000      	b.n	8013a72 <f_open+0xca>
 8013a70:	2312      	movs	r3, #18
 8013a72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013a76:	79fb      	ldrb	r3, [r7, #7]
 8013a78:	f043 0308 	orr.w	r3, r3, #8
 8013a7c:	71fb      	strb	r3, [r7, #7]
 8013a7e:	e010      	b.n	8013aa2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013a80:	7ebb      	ldrb	r3, [r7, #26]
 8013a82:	f003 0311 	and.w	r3, r3, #17
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d003      	beq.n	8013a92 <f_open+0xea>
					res = FR_DENIED;
 8013a8a:	2307      	movs	r3, #7
 8013a8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013a90:	e007      	b.n	8013aa2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013a92:	79fb      	ldrb	r3, [r7, #7]
 8013a94:	f003 0304 	and.w	r3, r3, #4
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d002      	beq.n	8013aa2 <f_open+0xfa>
 8013a9c:	2308      	movs	r3, #8
 8013a9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013aa2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d168      	bne.n	8013b7c <f_open+0x1d4>
 8013aaa:	79fb      	ldrb	r3, [r7, #7]
 8013aac:	f003 0308 	and.w	r3, r3, #8
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d063      	beq.n	8013b7c <f_open+0x1d4>
				dw = GET_FATTIME();
 8013ab4:	f7fb ff2e 	bl	800f914 <get_fattime>
 8013ab8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013abc:	330e      	adds	r3, #14
 8013abe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013ac0:	4618      	mov	r0, r3
 8013ac2:	f7fe f9bb 	bl	8011e3c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ac8:	3316      	adds	r3, #22
 8013aca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013acc:	4618      	mov	r0, r3
 8013ace:	f7fe f9b5 	bl	8011e3c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ad4:	330b      	adds	r3, #11
 8013ad6:	2220      	movs	r2, #32
 8013ad8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013ada:	693b      	ldr	r3, [r7, #16]
 8013adc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013ade:	4611      	mov	r1, r2
 8013ae0:	4618      	mov	r0, r3
 8013ae2:	f7ff f93e 	bl	8012d62 <ld_clust>
 8013ae6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013ae8:	693b      	ldr	r3, [r7, #16]
 8013aea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013aec:	2200      	movs	r2, #0
 8013aee:	4618      	mov	r0, r3
 8013af0:	f7ff f956 	bl	8012da0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013af6:	331c      	adds	r3, #28
 8013af8:	2100      	movs	r1, #0
 8013afa:	4618      	mov	r0, r3
 8013afc:	f7fe f99e 	bl	8011e3c <st_dword>
					fs->wflag = 1;
 8013b00:	693b      	ldr	r3, [r7, #16]
 8013b02:	2201      	movs	r2, #1
 8013b04:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d037      	beq.n	8013b7c <f_open+0x1d4>
						dw = fs->winsect;
 8013b0c:	693b      	ldr	r3, [r7, #16]
 8013b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b10:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8013b12:	f107 0314 	add.w	r3, r7, #20
 8013b16:	2200      	movs	r2, #0
 8013b18:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8013b1a:	4618      	mov	r0, r3
 8013b1c:	f7fe fe69 	bl	80127f2 <remove_chain>
 8013b20:	4603      	mov	r3, r0
 8013b22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8013b26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d126      	bne.n	8013b7c <f_open+0x1d4>
							res = move_window(fs, dw);
 8013b2e:	693b      	ldr	r3, [r7, #16]
 8013b30:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013b32:	4618      	mov	r0, r3
 8013b34:	f7fe fc0e 	bl	8012354 <move_window>
 8013b38:	4603      	mov	r3, r0
 8013b3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013b3e:	693b      	ldr	r3, [r7, #16]
 8013b40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013b42:	3a01      	subs	r2, #1
 8013b44:	611a      	str	r2, [r3, #16]
 8013b46:	e019      	b.n	8013b7c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013b48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d115      	bne.n	8013b7c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013b50:	7ebb      	ldrb	r3, [r7, #26]
 8013b52:	f003 0310 	and.w	r3, r3, #16
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d003      	beq.n	8013b62 <f_open+0x1ba>
					res = FR_NO_FILE;
 8013b5a:	2304      	movs	r3, #4
 8013b5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013b60:	e00c      	b.n	8013b7c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013b62:	79fb      	ldrb	r3, [r7, #7]
 8013b64:	f003 0302 	and.w	r3, r3, #2
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d007      	beq.n	8013b7c <f_open+0x1d4>
 8013b6c:	7ebb      	ldrb	r3, [r7, #26]
 8013b6e:	f003 0301 	and.w	r3, r3, #1
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d002      	beq.n	8013b7c <f_open+0x1d4>
						res = FR_DENIED;
 8013b76:	2307      	movs	r3, #7
 8013b78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8013b7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d128      	bne.n	8013bd6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013b84:	79fb      	ldrb	r3, [r7, #7]
 8013b86:	f003 0308 	and.w	r3, r3, #8
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d003      	beq.n	8013b96 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8013b8e:	79fb      	ldrb	r3, [r7, #7]
 8013b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b94:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013b96:	693b      	ldr	r3, [r7, #16]
 8013b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8013b9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013ba4:	79fb      	ldrb	r3, [r7, #7]
 8013ba6:	f023 0301 	bic.w	r3, r3, #1
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	bf14      	ite	ne
 8013bae:	2301      	movne	r3, #1
 8013bb0:	2300      	moveq	r3, #0
 8013bb2:	b2db      	uxtb	r3, r3
 8013bb4:	461a      	mov	r2, r3
 8013bb6:	f107 0314 	add.w	r3, r7, #20
 8013bba:	4611      	mov	r1, r2
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	f7fe fa97 	bl	80120f0 <inc_lock>
 8013bc2:	4602      	mov	r2, r0
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	691b      	ldr	r3, [r3, #16]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d102      	bne.n	8013bd6 <f_open+0x22e>
 8013bd0:	2302      	movs	r3, #2
 8013bd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013bd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	f040 8095 	bne.w	8013d0a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013be0:	693b      	ldr	r3, [r7, #16]
 8013be2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013be4:	4611      	mov	r1, r2
 8013be6:	4618      	mov	r0, r3
 8013be8:	f7ff f8bb 	bl	8012d62 <ld_clust>
 8013bec:	4602      	mov	r2, r0
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bf4:	331c      	adds	r3, #28
 8013bf6:	4618      	mov	r0, r3
 8013bf8:	f7fe f8e2 	bl	8011dc0 <ld_dword>
 8013bfc:	4602      	mov	r2, r0
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	2200      	movs	r2, #0
 8013c06:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013c08:	693a      	ldr	r2, [r7, #16]
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013c0e:	693b      	ldr	r3, [r7, #16]
 8013c10:	88da      	ldrh	r2, [r3, #6]
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	79fa      	ldrb	r2, [r7, #7]
 8013c1a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	2200      	movs	r2, #0
 8013c20:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	2200      	movs	r2, #0
 8013c26:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	2200      	movs	r2, #0
 8013c2c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	3330      	adds	r3, #48	; 0x30
 8013c32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013c36:	2100      	movs	r1, #0
 8013c38:	4618      	mov	r0, r3
 8013c3a:	f7fe f94c 	bl	8011ed6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013c3e:	79fb      	ldrb	r3, [r7, #7]
 8013c40:	f003 0320 	and.w	r3, r3, #32
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d060      	beq.n	8013d0a <f_open+0x362>
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	68db      	ldr	r3, [r3, #12]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d05c      	beq.n	8013d0a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	68da      	ldr	r2, [r3, #12]
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013c58:	693b      	ldr	r3, [r7, #16]
 8013c5a:	895b      	ldrh	r3, [r3, #10]
 8013c5c:	025b      	lsls	r3, r3, #9
 8013c5e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	689b      	ldr	r3, [r3, #8]
 8013c64:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	68db      	ldr	r3, [r3, #12]
 8013c6a:	657b      	str	r3, [r7, #84]	; 0x54
 8013c6c:	e016      	b.n	8013c9c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013c72:	4618      	mov	r0, r3
 8013c74:	f7fe fc29 	bl	80124ca <get_fat>
 8013c78:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8013c7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013c7c:	2b01      	cmp	r3, #1
 8013c7e:	d802      	bhi.n	8013c86 <f_open+0x2de>
 8013c80:	2302      	movs	r3, #2
 8013c82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013c86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013c88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013c8c:	d102      	bne.n	8013c94 <f_open+0x2ec>
 8013c8e:	2301      	movs	r3, #1
 8013c90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013c94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013c98:	1ad3      	subs	r3, r2, r3
 8013c9a:	657b      	str	r3, [r7, #84]	; 0x54
 8013c9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d103      	bne.n	8013cac <f_open+0x304>
 8013ca4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013ca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013ca8:	429a      	cmp	r2, r3
 8013caa:	d8e0      	bhi.n	8013c6e <f_open+0x2c6>
				}
				fp->clust = clst;
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013cb0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013cb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d127      	bne.n	8013d0a <f_open+0x362>
 8013cba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d022      	beq.n	8013d0a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013cc4:	693b      	ldr	r3, [r7, #16]
 8013cc6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013cc8:	4618      	mov	r0, r3
 8013cca:	f7fe fbdf 	bl	801248c <clust2sect>
 8013cce:	6478      	str	r0, [r7, #68]	; 0x44
 8013cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d103      	bne.n	8013cde <f_open+0x336>
						res = FR_INT_ERR;
 8013cd6:	2302      	movs	r3, #2
 8013cd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013cdc:	e015      	b.n	8013d0a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013cde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013ce0:	0a5a      	lsrs	r2, r3, #9
 8013ce2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ce4:	441a      	add	r2, r3
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013cea:	693b      	ldr	r3, [r7, #16]
 8013cec:	7858      	ldrb	r0, [r3, #1]
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	6a1a      	ldr	r2, [r3, #32]
 8013cf8:	2301      	movs	r3, #1
 8013cfa:	f7fd ffeb 	bl	8011cd4 <disk_read>
 8013cfe:	4603      	mov	r3, r0
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d002      	beq.n	8013d0a <f_open+0x362>
 8013d04:	2301      	movs	r3, #1
 8013d06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013d0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d002      	beq.n	8013d18 <f_open+0x370>
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	2200      	movs	r2, #0
 8013d16:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013d18:	693b      	ldr	r3, [r7, #16]
 8013d1a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8013d1e:	4611      	mov	r1, r2
 8013d20:	4618      	mov	r0, r3
 8013d22:	f7fe f94b 	bl	8011fbc <unlock_fs>
 8013d26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	3760      	adds	r7, #96	; 0x60
 8013d2e:	46bd      	mov	sp, r7
 8013d30:	bd80      	pop	{r7, pc}

08013d32 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013d32:	b580      	push	{r7, lr}
 8013d34:	b08c      	sub	sp, #48	; 0x30
 8013d36:	af00      	add	r7, sp, #0
 8013d38:	60f8      	str	r0, [r7, #12]
 8013d3a:	60b9      	str	r1, [r7, #8]
 8013d3c:	607a      	str	r2, [r7, #4]
 8013d3e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013d40:	68bb      	ldr	r3, [r7, #8]
 8013d42:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013d44:	683b      	ldr	r3, [r7, #0]
 8013d46:	2200      	movs	r2, #0
 8013d48:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	f107 0210 	add.w	r2, r7, #16
 8013d50:	4611      	mov	r1, r2
 8013d52:	4618      	mov	r0, r3
 8013d54:	f7ff fd7c 	bl	8013850 <validate>
 8013d58:	4603      	mov	r3, r0
 8013d5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013d5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d107      	bne.n	8013d76 <f_write+0x44>
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	7d5b      	ldrb	r3, [r3, #21]
 8013d6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013d6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d009      	beq.n	8013d8a <f_write+0x58>
 8013d76:	693b      	ldr	r3, [r7, #16]
 8013d78:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8013d7c:	4611      	mov	r1, r2
 8013d7e:	4618      	mov	r0, r3
 8013d80:	f7fe f91c 	bl	8011fbc <unlock_fs>
 8013d84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013d88:	e173      	b.n	8014072 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	7d1b      	ldrb	r3, [r3, #20]
 8013d8e:	f003 0302 	and.w	r3, r3, #2
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d106      	bne.n	8013da4 <f_write+0x72>
 8013d96:	693b      	ldr	r3, [r7, #16]
 8013d98:	2107      	movs	r1, #7
 8013d9a:	4618      	mov	r0, r3
 8013d9c:	f7fe f90e 	bl	8011fbc <unlock_fs>
 8013da0:	2307      	movs	r3, #7
 8013da2:	e166      	b.n	8014072 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	699a      	ldr	r2, [r3, #24]
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	441a      	add	r2, r3
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	699b      	ldr	r3, [r3, #24]
 8013db0:	429a      	cmp	r2, r3
 8013db2:	f080 814b 	bcs.w	801404c <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	699b      	ldr	r3, [r3, #24]
 8013dba:	43db      	mvns	r3, r3
 8013dbc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013dbe:	e145      	b.n	801404c <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	699b      	ldr	r3, [r3, #24]
 8013dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	f040 8101 	bne.w	8013fd0 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	699b      	ldr	r3, [r3, #24]
 8013dd2:	0a5b      	lsrs	r3, r3, #9
 8013dd4:	693a      	ldr	r2, [r7, #16]
 8013dd6:	8952      	ldrh	r2, [r2, #10]
 8013dd8:	3a01      	subs	r2, #1
 8013dda:	4013      	ands	r3, r2
 8013ddc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013dde:	69bb      	ldr	r3, [r7, #24]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d14d      	bne.n	8013e80 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	699b      	ldr	r3, [r3, #24]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d10c      	bne.n	8013e06 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	689b      	ldr	r3, [r3, #8]
 8013df0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d11a      	bne.n	8013e2e <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	2100      	movs	r1, #0
 8013dfc:	4618      	mov	r0, r3
 8013dfe:	f7fe fd5d 	bl	80128bc <create_chain>
 8013e02:	62b8      	str	r0, [r7, #40]	; 0x28
 8013e04:	e013      	b.n	8013e2e <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d007      	beq.n	8013e1e <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	699b      	ldr	r3, [r3, #24]
 8013e12:	4619      	mov	r1, r3
 8013e14:	68f8      	ldr	r0, [r7, #12]
 8013e16:	f7fe fde9 	bl	80129ec <clmt_clust>
 8013e1a:	62b8      	str	r0, [r7, #40]	; 0x28
 8013e1c:	e007      	b.n	8013e2e <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013e1e:	68fa      	ldr	r2, [r7, #12]
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	69db      	ldr	r3, [r3, #28]
 8013e24:	4619      	mov	r1, r3
 8013e26:	4610      	mov	r0, r2
 8013e28:	f7fe fd48 	bl	80128bc <create_chain>
 8013e2c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	f000 8110 	beq.w	8014056 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e38:	2b01      	cmp	r3, #1
 8013e3a:	d109      	bne.n	8013e50 <f_write+0x11e>
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	2202      	movs	r2, #2
 8013e40:	755a      	strb	r2, [r3, #21]
 8013e42:	693b      	ldr	r3, [r7, #16]
 8013e44:	2102      	movs	r1, #2
 8013e46:	4618      	mov	r0, r3
 8013e48:	f7fe f8b8 	bl	8011fbc <unlock_fs>
 8013e4c:	2302      	movs	r3, #2
 8013e4e:	e110      	b.n	8014072 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013e56:	d109      	bne.n	8013e6c <f_write+0x13a>
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	2201      	movs	r2, #1
 8013e5c:	755a      	strb	r2, [r3, #21]
 8013e5e:	693b      	ldr	r3, [r7, #16]
 8013e60:	2101      	movs	r1, #1
 8013e62:	4618      	mov	r0, r3
 8013e64:	f7fe f8aa 	bl	8011fbc <unlock_fs>
 8013e68:	2301      	movs	r3, #1
 8013e6a:	e102      	b.n	8014072 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013e70:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	689b      	ldr	r3, [r3, #8]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d102      	bne.n	8013e80 <f_write+0x14e>
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013e7e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	7d1b      	ldrb	r3, [r3, #20]
 8013e84:	b25b      	sxtb	r3, r3
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	da1d      	bge.n	8013ec6 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013e8a:	693b      	ldr	r3, [r7, #16]
 8013e8c:	7858      	ldrb	r0, [r3, #1]
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	6a1a      	ldr	r2, [r3, #32]
 8013e98:	2301      	movs	r3, #1
 8013e9a:	f7fd ff3b 	bl	8011d14 <disk_write>
 8013e9e:	4603      	mov	r3, r0
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d009      	beq.n	8013eb8 <f_write+0x186>
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	2201      	movs	r2, #1
 8013ea8:	755a      	strb	r2, [r3, #21]
 8013eaa:	693b      	ldr	r3, [r7, #16]
 8013eac:	2101      	movs	r1, #1
 8013eae:	4618      	mov	r0, r3
 8013eb0:	f7fe f884 	bl	8011fbc <unlock_fs>
 8013eb4:	2301      	movs	r3, #1
 8013eb6:	e0dc      	b.n	8014072 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	7d1b      	ldrb	r3, [r3, #20]
 8013ebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013ec0:	b2da      	uxtb	r2, r3
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013ec6:	693a      	ldr	r2, [r7, #16]
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	69db      	ldr	r3, [r3, #28]
 8013ecc:	4619      	mov	r1, r3
 8013ece:	4610      	mov	r0, r2
 8013ed0:	f7fe fadc 	bl	801248c <clust2sect>
 8013ed4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013ed6:	697b      	ldr	r3, [r7, #20]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d109      	bne.n	8013ef0 <f_write+0x1be>
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	2202      	movs	r2, #2
 8013ee0:	755a      	strb	r2, [r3, #21]
 8013ee2:	693b      	ldr	r3, [r7, #16]
 8013ee4:	2102      	movs	r1, #2
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	f7fe f868 	bl	8011fbc <unlock_fs>
 8013eec:	2302      	movs	r3, #2
 8013eee:	e0c0      	b.n	8014072 <f_write+0x340>
			sect += csect;
 8013ef0:	697a      	ldr	r2, [r7, #20]
 8013ef2:	69bb      	ldr	r3, [r7, #24]
 8013ef4:	4413      	add	r3, r2
 8013ef6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	0a5b      	lsrs	r3, r3, #9
 8013efc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013efe:	6a3b      	ldr	r3, [r7, #32]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d041      	beq.n	8013f88 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013f04:	69ba      	ldr	r2, [r7, #24]
 8013f06:	6a3b      	ldr	r3, [r7, #32]
 8013f08:	4413      	add	r3, r2
 8013f0a:	693a      	ldr	r2, [r7, #16]
 8013f0c:	8952      	ldrh	r2, [r2, #10]
 8013f0e:	4293      	cmp	r3, r2
 8013f10:	d905      	bls.n	8013f1e <f_write+0x1ec>
					cc = fs->csize - csect;
 8013f12:	693b      	ldr	r3, [r7, #16]
 8013f14:	895b      	ldrh	r3, [r3, #10]
 8013f16:	461a      	mov	r2, r3
 8013f18:	69bb      	ldr	r3, [r7, #24]
 8013f1a:	1ad3      	subs	r3, r2, r3
 8013f1c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013f1e:	693b      	ldr	r3, [r7, #16]
 8013f20:	7858      	ldrb	r0, [r3, #1]
 8013f22:	6a3b      	ldr	r3, [r7, #32]
 8013f24:	697a      	ldr	r2, [r7, #20]
 8013f26:	69f9      	ldr	r1, [r7, #28]
 8013f28:	f7fd fef4 	bl	8011d14 <disk_write>
 8013f2c:	4603      	mov	r3, r0
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d009      	beq.n	8013f46 <f_write+0x214>
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	2201      	movs	r2, #1
 8013f36:	755a      	strb	r2, [r3, #21]
 8013f38:	693b      	ldr	r3, [r7, #16]
 8013f3a:	2101      	movs	r1, #1
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	f7fe f83d 	bl	8011fbc <unlock_fs>
 8013f42:	2301      	movs	r3, #1
 8013f44:	e095      	b.n	8014072 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	6a1a      	ldr	r2, [r3, #32]
 8013f4a:	697b      	ldr	r3, [r7, #20]
 8013f4c:	1ad3      	subs	r3, r2, r3
 8013f4e:	6a3a      	ldr	r2, [r7, #32]
 8013f50:	429a      	cmp	r2, r3
 8013f52:	d915      	bls.n	8013f80 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	6a1a      	ldr	r2, [r3, #32]
 8013f5e:	697b      	ldr	r3, [r7, #20]
 8013f60:	1ad3      	subs	r3, r2, r3
 8013f62:	025b      	lsls	r3, r3, #9
 8013f64:	69fa      	ldr	r2, [r7, #28]
 8013f66:	4413      	add	r3, r2
 8013f68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013f6c:	4619      	mov	r1, r3
 8013f6e:	f7fd ff91 	bl	8011e94 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	7d1b      	ldrb	r3, [r3, #20]
 8013f76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013f7a:	b2da      	uxtb	r2, r3
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013f80:	6a3b      	ldr	r3, [r7, #32]
 8013f82:	025b      	lsls	r3, r3, #9
 8013f84:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013f86:	e044      	b.n	8014012 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	6a1b      	ldr	r3, [r3, #32]
 8013f8c:	697a      	ldr	r2, [r7, #20]
 8013f8e:	429a      	cmp	r2, r3
 8013f90:	d01b      	beq.n	8013fca <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	699a      	ldr	r2, [r3, #24]
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013f9a:	429a      	cmp	r2, r3
 8013f9c:	d215      	bcs.n	8013fca <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013f9e:	693b      	ldr	r3, [r7, #16]
 8013fa0:	7858      	ldrb	r0, [r3, #1]
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013fa8:	2301      	movs	r3, #1
 8013faa:	697a      	ldr	r2, [r7, #20]
 8013fac:	f7fd fe92 	bl	8011cd4 <disk_read>
 8013fb0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d009      	beq.n	8013fca <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	2201      	movs	r2, #1
 8013fba:	755a      	strb	r2, [r3, #21]
 8013fbc:	693b      	ldr	r3, [r7, #16]
 8013fbe:	2101      	movs	r1, #1
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	f7fd fffb 	bl	8011fbc <unlock_fs>
 8013fc6:	2301      	movs	r3, #1
 8013fc8:	e053      	b.n	8014072 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	697a      	ldr	r2, [r7, #20]
 8013fce:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	699b      	ldr	r3, [r3, #24]
 8013fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013fd8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8013fdc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	429a      	cmp	r2, r3
 8013fe4:	d901      	bls.n	8013fea <f_write+0x2b8>
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	699b      	ldr	r3, [r3, #24]
 8013ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ff8:	4413      	add	r3, r2
 8013ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ffc:	69f9      	ldr	r1, [r7, #28]
 8013ffe:	4618      	mov	r0, r3
 8014000:	f7fd ff48 	bl	8011e94 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	7d1b      	ldrb	r3, [r3, #20]
 8014008:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801400c:	b2da      	uxtb	r2, r3
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8014012:	69fa      	ldr	r2, [r7, #28]
 8014014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014016:	4413      	add	r3, r2
 8014018:	61fb      	str	r3, [r7, #28]
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	699a      	ldr	r2, [r3, #24]
 801401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014020:	441a      	add	r2, r3
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	619a      	str	r2, [r3, #24]
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	68da      	ldr	r2, [r3, #12]
 801402a:	68fb      	ldr	r3, [r7, #12]
 801402c:	699b      	ldr	r3, [r3, #24]
 801402e:	429a      	cmp	r2, r3
 8014030:	bf38      	it	cc
 8014032:	461a      	movcc	r2, r3
 8014034:	68fb      	ldr	r3, [r7, #12]
 8014036:	60da      	str	r2, [r3, #12]
 8014038:	683b      	ldr	r3, [r7, #0]
 801403a:	681a      	ldr	r2, [r3, #0]
 801403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801403e:	441a      	add	r2, r3
 8014040:	683b      	ldr	r3, [r7, #0]
 8014042:	601a      	str	r2, [r3, #0]
 8014044:	687a      	ldr	r2, [r7, #4]
 8014046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014048:	1ad3      	subs	r3, r2, r3
 801404a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	2b00      	cmp	r3, #0
 8014050:	f47f aeb6 	bne.w	8013dc0 <f_write+0x8e>
 8014054:	e000      	b.n	8014058 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014056:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	7d1b      	ldrb	r3, [r3, #20]
 801405c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014060:	b2da      	uxtb	r2, r3
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8014066:	693b      	ldr	r3, [r7, #16]
 8014068:	2100      	movs	r1, #0
 801406a:	4618      	mov	r0, r3
 801406c:	f7fd ffa6 	bl	8011fbc <unlock_fs>
 8014070:	2300      	movs	r3, #0
}
 8014072:	4618      	mov	r0, r3
 8014074:	3730      	adds	r7, #48	; 0x30
 8014076:	46bd      	mov	sp, r7
 8014078:	bd80      	pop	{r7, pc}

0801407a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801407a:	b580      	push	{r7, lr}
 801407c:	b086      	sub	sp, #24
 801407e:	af00      	add	r7, sp, #0
 8014080:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	f107 0208 	add.w	r2, r7, #8
 8014088:	4611      	mov	r1, r2
 801408a:	4618      	mov	r0, r3
 801408c:	f7ff fbe0 	bl	8013850 <validate>
 8014090:	4603      	mov	r3, r0
 8014092:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014094:	7dfb      	ldrb	r3, [r7, #23]
 8014096:	2b00      	cmp	r3, #0
 8014098:	d16d      	bne.n	8014176 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	7d1b      	ldrb	r3, [r3, #20]
 801409e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d067      	beq.n	8014176 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	7d1b      	ldrb	r3, [r3, #20]
 80140aa:	b25b      	sxtb	r3, r3
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	da1a      	bge.n	80140e6 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80140b0:	68bb      	ldr	r3, [r7, #8]
 80140b2:	7858      	ldrb	r0, [r3, #1]
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	6a1a      	ldr	r2, [r3, #32]
 80140be:	2301      	movs	r3, #1
 80140c0:	f7fd fe28 	bl	8011d14 <disk_write>
 80140c4:	4603      	mov	r3, r0
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d006      	beq.n	80140d8 <f_sync+0x5e>
 80140ca:	68bb      	ldr	r3, [r7, #8]
 80140cc:	2101      	movs	r1, #1
 80140ce:	4618      	mov	r0, r3
 80140d0:	f7fd ff74 	bl	8011fbc <unlock_fs>
 80140d4:	2301      	movs	r3, #1
 80140d6:	e055      	b.n	8014184 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	7d1b      	ldrb	r3, [r3, #20]
 80140dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80140e0:	b2da      	uxtb	r2, r3
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80140e6:	f7fb fc15 	bl	800f914 <get_fattime>
 80140ea:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80140ec:	68ba      	ldr	r2, [r7, #8]
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140f2:	4619      	mov	r1, r3
 80140f4:	4610      	mov	r0, r2
 80140f6:	f7fe f92d 	bl	8012354 <move_window>
 80140fa:	4603      	mov	r3, r0
 80140fc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80140fe:	7dfb      	ldrb	r3, [r7, #23]
 8014100:	2b00      	cmp	r3, #0
 8014102:	d138      	bne.n	8014176 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014108:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	330b      	adds	r3, #11
 801410e:	781a      	ldrb	r2, [r3, #0]
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	330b      	adds	r3, #11
 8014114:	f042 0220 	orr.w	r2, r2, #32
 8014118:	b2d2      	uxtb	r2, r2
 801411a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	6818      	ldr	r0, [r3, #0]
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	689b      	ldr	r3, [r3, #8]
 8014124:	461a      	mov	r2, r3
 8014126:	68f9      	ldr	r1, [r7, #12]
 8014128:	f7fe fe3a 	bl	8012da0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	f103 021c 	add.w	r2, r3, #28
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	68db      	ldr	r3, [r3, #12]
 8014136:	4619      	mov	r1, r3
 8014138:	4610      	mov	r0, r2
 801413a:	f7fd fe7f 	bl	8011e3c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	3316      	adds	r3, #22
 8014142:	6939      	ldr	r1, [r7, #16]
 8014144:	4618      	mov	r0, r3
 8014146:	f7fd fe79 	bl	8011e3c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	3312      	adds	r3, #18
 801414e:	2100      	movs	r1, #0
 8014150:	4618      	mov	r0, r3
 8014152:	f7fd fe58 	bl	8011e06 <st_word>
					fs->wflag = 1;
 8014156:	68bb      	ldr	r3, [r7, #8]
 8014158:	2201      	movs	r2, #1
 801415a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801415c:	68bb      	ldr	r3, [r7, #8]
 801415e:	4618      	mov	r0, r3
 8014160:	f7fe f926 	bl	80123b0 <sync_fs>
 8014164:	4603      	mov	r3, r0
 8014166:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	7d1b      	ldrb	r3, [r3, #20]
 801416c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014170:	b2da      	uxtb	r2, r3
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8014176:	68bb      	ldr	r3, [r7, #8]
 8014178:	7dfa      	ldrb	r2, [r7, #23]
 801417a:	4611      	mov	r1, r2
 801417c:	4618      	mov	r0, r3
 801417e:	f7fd ff1d 	bl	8011fbc <unlock_fs>
 8014182:	7dfb      	ldrb	r3, [r7, #23]
}
 8014184:	4618      	mov	r0, r3
 8014186:	3718      	adds	r7, #24
 8014188:	46bd      	mov	sp, r7
 801418a:	bd80      	pop	{r7, pc}

0801418c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801418c:	b580      	push	{r7, lr}
 801418e:	b084      	sub	sp, #16
 8014190:	af00      	add	r7, sp, #0
 8014192:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8014194:	6878      	ldr	r0, [r7, #4]
 8014196:	f7ff ff70 	bl	801407a <f_sync>
 801419a:	4603      	mov	r3, r0
 801419c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801419e:	7bfb      	ldrb	r3, [r7, #15]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d11d      	bne.n	80141e0 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	f107 0208 	add.w	r2, r7, #8
 80141aa:	4611      	mov	r1, r2
 80141ac:	4618      	mov	r0, r3
 80141ae:	f7ff fb4f 	bl	8013850 <validate>
 80141b2:	4603      	mov	r3, r0
 80141b4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80141b6:	7bfb      	ldrb	r3, [r7, #15]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d111      	bne.n	80141e0 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	691b      	ldr	r3, [r3, #16]
 80141c0:	4618      	mov	r0, r3
 80141c2:	f7fe f823 	bl	801220c <dec_lock>
 80141c6:	4603      	mov	r3, r0
 80141c8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80141ca:	7bfb      	ldrb	r3, [r7, #15]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d102      	bne.n	80141d6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	2200      	movs	r2, #0
 80141d4:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80141d6:	68bb      	ldr	r3, [r7, #8]
 80141d8:	2100      	movs	r1, #0
 80141da:	4618      	mov	r0, r3
 80141dc:	f7fd feee 	bl	8011fbc <unlock_fs>
#endif
		}
	}
	return res;
 80141e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80141e2:	4618      	mov	r0, r3
 80141e4:	3710      	adds	r7, #16
 80141e6:	46bd      	mov	sp, r7
 80141e8:	bd80      	pop	{r7, pc}

080141ea <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80141ea:	b580      	push	{r7, lr}
 80141ec:	b090      	sub	sp, #64	; 0x40
 80141ee:	af00      	add	r7, sp, #0
 80141f0:	6078      	str	r0, [r7, #4]
 80141f2:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	f107 0208 	add.w	r2, r7, #8
 80141fa:	4611      	mov	r1, r2
 80141fc:	4618      	mov	r0, r3
 80141fe:	f7ff fb27 	bl	8013850 <validate>
 8014202:	4603      	mov	r3, r0
 8014204:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8014208:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801420c:	2b00      	cmp	r3, #0
 801420e:	d103      	bne.n	8014218 <f_lseek+0x2e>
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	7d5b      	ldrb	r3, [r3, #21]
 8014214:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8014218:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801421c:	2b00      	cmp	r3, #0
 801421e:	d009      	beq.n	8014234 <f_lseek+0x4a>
 8014220:	68bb      	ldr	r3, [r7, #8]
 8014222:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8014226:	4611      	mov	r1, r2
 8014228:	4618      	mov	r0, r3
 801422a:	f7fd fec7 	bl	8011fbc <unlock_fs>
 801422e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014232:	e229      	b.n	8014688 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014238:	2b00      	cmp	r3, #0
 801423a:	f000 80ea 	beq.w	8014412 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801423e:	683b      	ldr	r3, [r7, #0]
 8014240:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014244:	d164      	bne.n	8014310 <f_lseek+0x126>
			tbl = fp->cltbl;
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801424a:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801424e:	1d1a      	adds	r2, r3, #4
 8014250:	627a      	str	r2, [r7, #36]	; 0x24
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	617b      	str	r3, [r7, #20]
 8014256:	2302      	movs	r3, #2
 8014258:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	689b      	ldr	r3, [r3, #8]
 801425e:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8014260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014262:	2b00      	cmp	r3, #0
 8014264:	d044      	beq.n	80142f0 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8014266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014268:	613b      	str	r3, [r7, #16]
 801426a:	2300      	movs	r3, #0
 801426c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801426e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014270:	3302      	adds	r3, #2
 8014272:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8014274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014276:	60fb      	str	r3, [r7, #12]
 8014278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801427a:	3301      	adds	r3, #1
 801427c:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014282:	4618      	mov	r0, r3
 8014284:	f7fe f921 	bl	80124ca <get_fat>
 8014288:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801428a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801428c:	2b01      	cmp	r3, #1
 801428e:	d809      	bhi.n	80142a4 <f_lseek+0xba>
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	2202      	movs	r2, #2
 8014294:	755a      	strb	r2, [r3, #21]
 8014296:	68bb      	ldr	r3, [r7, #8]
 8014298:	2102      	movs	r1, #2
 801429a:	4618      	mov	r0, r3
 801429c:	f7fd fe8e 	bl	8011fbc <unlock_fs>
 80142a0:	2302      	movs	r3, #2
 80142a2:	e1f1      	b.n	8014688 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80142a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80142aa:	d109      	bne.n	80142c0 <f_lseek+0xd6>
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	2201      	movs	r2, #1
 80142b0:	755a      	strb	r2, [r3, #21]
 80142b2:	68bb      	ldr	r3, [r7, #8]
 80142b4:	2101      	movs	r1, #1
 80142b6:	4618      	mov	r0, r3
 80142b8:	f7fd fe80 	bl	8011fbc <unlock_fs>
 80142bc:	2301      	movs	r3, #1
 80142be:	e1e3      	b.n	8014688 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	3301      	adds	r3, #1
 80142c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80142c6:	429a      	cmp	r2, r3
 80142c8:	d0d4      	beq.n	8014274 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80142ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80142cc:	697b      	ldr	r3, [r7, #20]
 80142ce:	429a      	cmp	r2, r3
 80142d0:	d809      	bhi.n	80142e6 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 80142d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142d4:	1d1a      	adds	r2, r3, #4
 80142d6:	627a      	str	r2, [r7, #36]	; 0x24
 80142d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142da:	601a      	str	r2, [r3, #0]
 80142dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142de:	1d1a      	adds	r2, r3, #4
 80142e0:	627a      	str	r2, [r7, #36]	; 0x24
 80142e2:	693a      	ldr	r2, [r7, #16]
 80142e4:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80142e6:	68bb      	ldr	r3, [r7, #8]
 80142e8:	699b      	ldr	r3, [r3, #24]
 80142ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80142ec:	429a      	cmp	r2, r3
 80142ee:	d3ba      	bcc.n	8014266 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80142f6:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80142f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80142fa:	697b      	ldr	r3, [r7, #20]
 80142fc:	429a      	cmp	r2, r3
 80142fe:	d803      	bhi.n	8014308 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8014300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014302:	2200      	movs	r2, #0
 8014304:	601a      	str	r2, [r3, #0]
 8014306:	e1b6      	b.n	8014676 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8014308:	2311      	movs	r3, #17
 801430a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801430e:	e1b2      	b.n	8014676 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	68db      	ldr	r3, [r3, #12]
 8014314:	683a      	ldr	r2, [r7, #0]
 8014316:	429a      	cmp	r2, r3
 8014318:	d902      	bls.n	8014320 <f_lseek+0x136>
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	68db      	ldr	r3, [r3, #12]
 801431e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	683a      	ldr	r2, [r7, #0]
 8014324:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8014326:	683b      	ldr	r3, [r7, #0]
 8014328:	2b00      	cmp	r3, #0
 801432a:	f000 81a4 	beq.w	8014676 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 801432e:	683b      	ldr	r3, [r7, #0]
 8014330:	3b01      	subs	r3, #1
 8014332:	4619      	mov	r1, r3
 8014334:	6878      	ldr	r0, [r7, #4]
 8014336:	f7fe fb59 	bl	80129ec <clmt_clust>
 801433a:	4602      	mov	r2, r0
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8014340:	68ba      	ldr	r2, [r7, #8]
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	69db      	ldr	r3, [r3, #28]
 8014346:	4619      	mov	r1, r3
 8014348:	4610      	mov	r0, r2
 801434a:	f7fe f89f 	bl	801248c <clust2sect>
 801434e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8014350:	69bb      	ldr	r3, [r7, #24]
 8014352:	2b00      	cmp	r3, #0
 8014354:	d109      	bne.n	801436a <f_lseek+0x180>
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	2202      	movs	r2, #2
 801435a:	755a      	strb	r2, [r3, #21]
 801435c:	68bb      	ldr	r3, [r7, #8]
 801435e:	2102      	movs	r1, #2
 8014360:	4618      	mov	r0, r3
 8014362:	f7fd fe2b 	bl	8011fbc <unlock_fs>
 8014366:	2302      	movs	r3, #2
 8014368:	e18e      	b.n	8014688 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801436a:	683b      	ldr	r3, [r7, #0]
 801436c:	3b01      	subs	r3, #1
 801436e:	0a5b      	lsrs	r3, r3, #9
 8014370:	68ba      	ldr	r2, [r7, #8]
 8014372:	8952      	ldrh	r2, [r2, #10]
 8014374:	3a01      	subs	r2, #1
 8014376:	4013      	ands	r3, r2
 8014378:	69ba      	ldr	r2, [r7, #24]
 801437a:	4413      	add	r3, r2
 801437c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	699b      	ldr	r3, [r3, #24]
 8014382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014386:	2b00      	cmp	r3, #0
 8014388:	f000 8175 	beq.w	8014676 <f_lseek+0x48c>
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	6a1b      	ldr	r3, [r3, #32]
 8014390:	69ba      	ldr	r2, [r7, #24]
 8014392:	429a      	cmp	r2, r3
 8014394:	f000 816f 	beq.w	8014676 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	7d1b      	ldrb	r3, [r3, #20]
 801439c:	b25b      	sxtb	r3, r3
 801439e:	2b00      	cmp	r3, #0
 80143a0:	da1d      	bge.n	80143de <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80143a2:	68bb      	ldr	r3, [r7, #8]
 80143a4:	7858      	ldrb	r0, [r3, #1]
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	6a1a      	ldr	r2, [r3, #32]
 80143b0:	2301      	movs	r3, #1
 80143b2:	f7fd fcaf 	bl	8011d14 <disk_write>
 80143b6:	4603      	mov	r3, r0
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d009      	beq.n	80143d0 <f_lseek+0x1e6>
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	2201      	movs	r2, #1
 80143c0:	755a      	strb	r2, [r3, #21]
 80143c2:	68bb      	ldr	r3, [r7, #8]
 80143c4:	2101      	movs	r1, #1
 80143c6:	4618      	mov	r0, r3
 80143c8:	f7fd fdf8 	bl	8011fbc <unlock_fs>
 80143cc:	2301      	movs	r3, #1
 80143ce:	e15b      	b.n	8014688 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	7d1b      	ldrb	r3, [r3, #20]
 80143d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80143d8:	b2da      	uxtb	r2, r3
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80143de:	68bb      	ldr	r3, [r7, #8]
 80143e0:	7858      	ldrb	r0, [r3, #1]
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80143e8:	2301      	movs	r3, #1
 80143ea:	69ba      	ldr	r2, [r7, #24]
 80143ec:	f7fd fc72 	bl	8011cd4 <disk_read>
 80143f0:	4603      	mov	r3, r0
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d009      	beq.n	801440a <f_lseek+0x220>
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	2201      	movs	r2, #1
 80143fa:	755a      	strb	r2, [r3, #21]
 80143fc:	68bb      	ldr	r3, [r7, #8]
 80143fe:	2101      	movs	r1, #1
 8014400:	4618      	mov	r0, r3
 8014402:	f7fd fddb 	bl	8011fbc <unlock_fs>
 8014406:	2301      	movs	r3, #1
 8014408:	e13e      	b.n	8014688 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	69ba      	ldr	r2, [r7, #24]
 801440e:	621a      	str	r2, [r3, #32]
 8014410:	e131      	b.n	8014676 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	68db      	ldr	r3, [r3, #12]
 8014416:	683a      	ldr	r2, [r7, #0]
 8014418:	429a      	cmp	r2, r3
 801441a:	d908      	bls.n	801442e <f_lseek+0x244>
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	7d1b      	ldrb	r3, [r3, #20]
 8014420:	f003 0302 	and.w	r3, r3, #2
 8014424:	2b00      	cmp	r3, #0
 8014426:	d102      	bne.n	801442e <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	68db      	ldr	r3, [r3, #12]
 801442c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	699b      	ldr	r3, [r3, #24]
 8014432:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8014434:	2300      	movs	r3, #0
 8014436:	637b      	str	r3, [r7, #52]	; 0x34
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801443c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801443e:	683b      	ldr	r3, [r7, #0]
 8014440:	2b00      	cmp	r3, #0
 8014442:	f000 80c0 	beq.w	80145c6 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8014446:	68bb      	ldr	r3, [r7, #8]
 8014448:	895b      	ldrh	r3, [r3, #10]
 801444a:	025b      	lsls	r3, r3, #9
 801444c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801444e:	6a3b      	ldr	r3, [r7, #32]
 8014450:	2b00      	cmp	r3, #0
 8014452:	d01b      	beq.n	801448c <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8014454:	683b      	ldr	r3, [r7, #0]
 8014456:	1e5a      	subs	r2, r3, #1
 8014458:	69fb      	ldr	r3, [r7, #28]
 801445a:	fbb2 f2f3 	udiv	r2, r2, r3
 801445e:	6a3b      	ldr	r3, [r7, #32]
 8014460:	1e59      	subs	r1, r3, #1
 8014462:	69fb      	ldr	r3, [r7, #28]
 8014464:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8014468:	429a      	cmp	r2, r3
 801446a:	d30f      	bcc.n	801448c <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801446c:	6a3b      	ldr	r3, [r7, #32]
 801446e:	1e5a      	subs	r2, r3, #1
 8014470:	69fb      	ldr	r3, [r7, #28]
 8014472:	425b      	negs	r3, r3
 8014474:	401a      	ands	r2, r3
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	699b      	ldr	r3, [r3, #24]
 801447e:	683a      	ldr	r2, [r7, #0]
 8014480:	1ad3      	subs	r3, r2, r3
 8014482:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	69db      	ldr	r3, [r3, #28]
 8014488:	63bb      	str	r3, [r7, #56]	; 0x38
 801448a:	e02c      	b.n	80144e6 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	689b      	ldr	r3, [r3, #8]
 8014490:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8014492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014494:	2b00      	cmp	r3, #0
 8014496:	d123      	bne.n	80144e0 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	2100      	movs	r1, #0
 801449c:	4618      	mov	r0, r3
 801449e:	f7fe fa0d 	bl	80128bc <create_chain>
 80144a2:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80144a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144a6:	2b01      	cmp	r3, #1
 80144a8:	d109      	bne.n	80144be <f_lseek+0x2d4>
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	2202      	movs	r2, #2
 80144ae:	755a      	strb	r2, [r3, #21]
 80144b0:	68bb      	ldr	r3, [r7, #8]
 80144b2:	2102      	movs	r1, #2
 80144b4:	4618      	mov	r0, r3
 80144b6:	f7fd fd81 	bl	8011fbc <unlock_fs>
 80144ba:	2302      	movs	r3, #2
 80144bc:	e0e4      	b.n	8014688 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80144be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80144c4:	d109      	bne.n	80144da <f_lseek+0x2f0>
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	2201      	movs	r2, #1
 80144ca:	755a      	strb	r2, [r3, #21]
 80144cc:	68bb      	ldr	r3, [r7, #8]
 80144ce:	2101      	movs	r1, #1
 80144d0:	4618      	mov	r0, r3
 80144d2:	f7fd fd73 	bl	8011fbc <unlock_fs>
 80144d6:	2301      	movs	r3, #1
 80144d8:	e0d6      	b.n	8014688 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80144de:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80144e4:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80144e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d06c      	beq.n	80145c6 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 80144ec:	e044      	b.n	8014578 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 80144ee:	683a      	ldr	r2, [r7, #0]
 80144f0:	69fb      	ldr	r3, [r7, #28]
 80144f2:	1ad3      	subs	r3, r2, r3
 80144f4:	603b      	str	r3, [r7, #0]
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	699a      	ldr	r2, [r3, #24]
 80144fa:	69fb      	ldr	r3, [r7, #28]
 80144fc:	441a      	add	r2, r3
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	7d1b      	ldrb	r3, [r3, #20]
 8014506:	f003 0302 	and.w	r3, r3, #2
 801450a:	2b00      	cmp	r3, #0
 801450c:	d00b      	beq.n	8014526 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014512:	4618      	mov	r0, r3
 8014514:	f7fe f9d2 	bl	80128bc <create_chain>
 8014518:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 801451a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801451c:	2b00      	cmp	r3, #0
 801451e:	d108      	bne.n	8014532 <f_lseek+0x348>
							ofs = 0; break;
 8014520:	2300      	movs	r3, #0
 8014522:	603b      	str	r3, [r7, #0]
 8014524:	e02c      	b.n	8014580 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801452a:	4618      	mov	r0, r3
 801452c:	f7fd ffcd 	bl	80124ca <get_fat>
 8014530:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014534:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014538:	d109      	bne.n	801454e <f_lseek+0x364>
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	2201      	movs	r2, #1
 801453e:	755a      	strb	r2, [r3, #21]
 8014540:	68bb      	ldr	r3, [r7, #8]
 8014542:	2101      	movs	r1, #1
 8014544:	4618      	mov	r0, r3
 8014546:	f7fd fd39 	bl	8011fbc <unlock_fs>
 801454a:	2301      	movs	r3, #1
 801454c:	e09c      	b.n	8014688 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801454e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014550:	2b01      	cmp	r3, #1
 8014552:	d904      	bls.n	801455e <f_lseek+0x374>
 8014554:	68bb      	ldr	r3, [r7, #8]
 8014556:	699b      	ldr	r3, [r3, #24]
 8014558:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801455a:	429a      	cmp	r2, r3
 801455c:	d309      	bcc.n	8014572 <f_lseek+0x388>
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	2202      	movs	r2, #2
 8014562:	755a      	strb	r2, [r3, #21]
 8014564:	68bb      	ldr	r3, [r7, #8]
 8014566:	2102      	movs	r1, #2
 8014568:	4618      	mov	r0, r3
 801456a:	f7fd fd27 	bl	8011fbc <unlock_fs>
 801456e:	2302      	movs	r3, #2
 8014570:	e08a      	b.n	8014688 <f_lseek+0x49e>
					fp->clust = clst;
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014576:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8014578:	683a      	ldr	r2, [r7, #0]
 801457a:	69fb      	ldr	r3, [r7, #28]
 801457c:	429a      	cmp	r2, r3
 801457e:	d8b6      	bhi.n	80144ee <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	699a      	ldr	r2, [r3, #24]
 8014584:	683b      	ldr	r3, [r7, #0]
 8014586:	441a      	add	r2, r3
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801458c:	683b      	ldr	r3, [r7, #0]
 801458e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014592:	2b00      	cmp	r3, #0
 8014594:	d017      	beq.n	80145c6 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8014596:	68bb      	ldr	r3, [r7, #8]
 8014598:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801459a:	4618      	mov	r0, r3
 801459c:	f7fd ff76 	bl	801248c <clust2sect>
 80145a0:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80145a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d109      	bne.n	80145bc <f_lseek+0x3d2>
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	2202      	movs	r2, #2
 80145ac:	755a      	strb	r2, [r3, #21]
 80145ae:	68bb      	ldr	r3, [r7, #8]
 80145b0:	2102      	movs	r1, #2
 80145b2:	4618      	mov	r0, r3
 80145b4:	f7fd fd02 	bl	8011fbc <unlock_fs>
 80145b8:	2302      	movs	r3, #2
 80145ba:	e065      	b.n	8014688 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 80145bc:	683b      	ldr	r3, [r7, #0]
 80145be:	0a5b      	lsrs	r3, r3, #9
 80145c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80145c2:	4413      	add	r3, r2
 80145c4:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	699a      	ldr	r2, [r3, #24]
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	68db      	ldr	r3, [r3, #12]
 80145ce:	429a      	cmp	r2, r3
 80145d0:	d90a      	bls.n	80145e8 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	699a      	ldr	r2, [r3, #24]
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	7d1b      	ldrb	r3, [r3, #20]
 80145de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80145e2:	b2da      	uxtb	r2, r3
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	699b      	ldr	r3, [r3, #24]
 80145ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d040      	beq.n	8014676 <f_lseek+0x48c>
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	6a1b      	ldr	r3, [r3, #32]
 80145f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80145fa:	429a      	cmp	r2, r3
 80145fc:	d03b      	beq.n	8014676 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	7d1b      	ldrb	r3, [r3, #20]
 8014602:	b25b      	sxtb	r3, r3
 8014604:	2b00      	cmp	r3, #0
 8014606:	da1d      	bge.n	8014644 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014608:	68bb      	ldr	r3, [r7, #8]
 801460a:	7858      	ldrb	r0, [r3, #1]
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	6a1a      	ldr	r2, [r3, #32]
 8014616:	2301      	movs	r3, #1
 8014618:	f7fd fb7c 	bl	8011d14 <disk_write>
 801461c:	4603      	mov	r3, r0
 801461e:	2b00      	cmp	r3, #0
 8014620:	d009      	beq.n	8014636 <f_lseek+0x44c>
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	2201      	movs	r2, #1
 8014626:	755a      	strb	r2, [r3, #21]
 8014628:	68bb      	ldr	r3, [r7, #8]
 801462a:	2101      	movs	r1, #1
 801462c:	4618      	mov	r0, r3
 801462e:	f7fd fcc5 	bl	8011fbc <unlock_fs>
 8014632:	2301      	movs	r3, #1
 8014634:	e028      	b.n	8014688 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	7d1b      	ldrb	r3, [r3, #20]
 801463a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801463e:	b2da      	uxtb	r2, r3
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014644:	68bb      	ldr	r3, [r7, #8]
 8014646:	7858      	ldrb	r0, [r3, #1]
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801464e:	2301      	movs	r3, #1
 8014650:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014652:	f7fd fb3f 	bl	8011cd4 <disk_read>
 8014656:	4603      	mov	r3, r0
 8014658:	2b00      	cmp	r3, #0
 801465a:	d009      	beq.n	8014670 <f_lseek+0x486>
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	2201      	movs	r2, #1
 8014660:	755a      	strb	r2, [r3, #21]
 8014662:	68bb      	ldr	r3, [r7, #8]
 8014664:	2101      	movs	r1, #1
 8014666:	4618      	mov	r0, r3
 8014668:	f7fd fca8 	bl	8011fbc <unlock_fs>
 801466c:	2301      	movs	r3, #1
 801466e:	e00b      	b.n	8014688 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014674:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8014676:	68bb      	ldr	r3, [r7, #8]
 8014678:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801467c:	4611      	mov	r1, r2
 801467e:	4618      	mov	r0, r3
 8014680:	f7fd fc9c 	bl	8011fbc <unlock_fs>
 8014684:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8014688:	4618      	mov	r0, r3
 801468a:	3740      	adds	r7, #64	; 0x40
 801468c:	46bd      	mov	sp, r7
 801468e:	bd80      	pop	{r7, pc}

08014690 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8014690:	b580      	push	{r7, lr}
 8014692:	b086      	sub	sp, #24
 8014694:	af00      	add	r7, sp, #0
 8014696:	6078      	str	r0, [r7, #4]
 8014698:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	2b00      	cmp	r3, #0
 801469e:	d101      	bne.n	80146a4 <f_opendir+0x14>
 80146a0:	2309      	movs	r3, #9
 80146a2:	e06a      	b.n	801477a <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80146a8:	f107 010c 	add.w	r1, r7, #12
 80146ac:	463b      	mov	r3, r7
 80146ae:	2200      	movs	r2, #0
 80146b0:	4618      	mov	r0, r3
 80146b2:	f7fe fe79 	bl	80133a8 <find_volume>
 80146b6:	4603      	mov	r3, r0
 80146b8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80146ba:	7dfb      	ldrb	r3, [r7, #23]
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d14f      	bne.n	8014760 <f_opendir+0xd0>
		obj->fs = fs;
 80146c0:	68fa      	ldr	r2, [r7, #12]
 80146c2:	693b      	ldr	r3, [r7, #16]
 80146c4:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80146c6:	683b      	ldr	r3, [r7, #0]
 80146c8:	4619      	mov	r1, r3
 80146ca:	6878      	ldr	r0, [r7, #4]
 80146cc:	f7fe fd60 	bl	8013190 <follow_path>
 80146d0:	4603      	mov	r3, r0
 80146d2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80146d4:	7dfb      	ldrb	r3, [r7, #23]
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d13d      	bne.n	8014756 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80146e0:	b25b      	sxtb	r3, r3
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	db12      	blt.n	801470c <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80146e6:	693b      	ldr	r3, [r7, #16]
 80146e8:	799b      	ldrb	r3, [r3, #6]
 80146ea:	f003 0310 	and.w	r3, r3, #16
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d00a      	beq.n	8014708 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80146f2:	68fa      	ldr	r2, [r7, #12]
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	6a1b      	ldr	r3, [r3, #32]
 80146f8:	4619      	mov	r1, r3
 80146fa:	4610      	mov	r0, r2
 80146fc:	f7fe fb31 	bl	8012d62 <ld_clust>
 8014700:	4602      	mov	r2, r0
 8014702:	693b      	ldr	r3, [r7, #16]
 8014704:	609a      	str	r2, [r3, #8]
 8014706:	e001      	b.n	801470c <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8014708:	2305      	movs	r3, #5
 801470a:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 801470c:	7dfb      	ldrb	r3, [r7, #23]
 801470e:	2b00      	cmp	r3, #0
 8014710:	d121      	bne.n	8014756 <f_opendir+0xc6>
				obj->id = fs->id;
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	88da      	ldrh	r2, [r3, #6]
 8014716:	693b      	ldr	r3, [r7, #16]
 8014718:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801471a:	2100      	movs	r1, #0
 801471c:	6878      	ldr	r0, [r7, #4]
 801471e:	f7fe f999 	bl	8012a54 <dir_sdi>
 8014722:	4603      	mov	r3, r0
 8014724:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8014726:	7dfb      	ldrb	r3, [r7, #23]
 8014728:	2b00      	cmp	r3, #0
 801472a:	d114      	bne.n	8014756 <f_opendir+0xc6>
					if (obj->sclust) {
 801472c:	693b      	ldr	r3, [r7, #16]
 801472e:	689b      	ldr	r3, [r3, #8]
 8014730:	2b00      	cmp	r3, #0
 8014732:	d00d      	beq.n	8014750 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8014734:	2100      	movs	r1, #0
 8014736:	6878      	ldr	r0, [r7, #4]
 8014738:	f7fd fcda 	bl	80120f0 <inc_lock>
 801473c:	4602      	mov	r2, r0
 801473e:	693b      	ldr	r3, [r7, #16]
 8014740:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8014742:	693b      	ldr	r3, [r7, #16]
 8014744:	691b      	ldr	r3, [r3, #16]
 8014746:	2b00      	cmp	r3, #0
 8014748:	d105      	bne.n	8014756 <f_opendir+0xc6>
 801474a:	2312      	movs	r3, #18
 801474c:	75fb      	strb	r3, [r7, #23]
 801474e:	e002      	b.n	8014756 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8014750:	693b      	ldr	r3, [r7, #16]
 8014752:	2200      	movs	r2, #0
 8014754:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8014756:	7dfb      	ldrb	r3, [r7, #23]
 8014758:	2b04      	cmp	r3, #4
 801475a:	d101      	bne.n	8014760 <f_opendir+0xd0>
 801475c:	2305      	movs	r3, #5
 801475e:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8014760:	7dfb      	ldrb	r3, [r7, #23]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d002      	beq.n	801476c <f_opendir+0xdc>
 8014766:	693b      	ldr	r3, [r7, #16]
 8014768:	2200      	movs	r2, #0
 801476a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	7dfa      	ldrb	r2, [r7, #23]
 8014770:	4611      	mov	r1, r2
 8014772:	4618      	mov	r0, r3
 8014774:	f7fd fc22 	bl	8011fbc <unlock_fs>
 8014778:	7dfb      	ldrb	r3, [r7, #23]
}
 801477a:	4618      	mov	r0, r3
 801477c:	3718      	adds	r7, #24
 801477e:	46bd      	mov	sp, r7
 8014780:	bd80      	pop	{r7, pc}

08014782 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8014782:	b580      	push	{r7, lr}
 8014784:	b084      	sub	sp, #16
 8014786:	af00      	add	r7, sp, #0
 8014788:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	f107 0208 	add.w	r2, r7, #8
 8014790:	4611      	mov	r1, r2
 8014792:	4618      	mov	r0, r3
 8014794:	f7ff f85c 	bl	8013850 <validate>
 8014798:	4603      	mov	r3, r0
 801479a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801479c:	7bfb      	ldrb	r3, [r7, #15]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d115      	bne.n	80147ce <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	691b      	ldr	r3, [r3, #16]
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d006      	beq.n	80147b8 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	691b      	ldr	r3, [r3, #16]
 80147ae:	4618      	mov	r0, r3
 80147b0:	f7fd fd2c 	bl	801220c <dec_lock>
 80147b4:	4603      	mov	r3, r0
 80147b6:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80147b8:	7bfb      	ldrb	r3, [r7, #15]
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d102      	bne.n	80147c4 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	2200      	movs	r2, #0
 80147c2:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 80147c4:	68bb      	ldr	r3, [r7, #8]
 80147c6:	2100      	movs	r1, #0
 80147c8:	4618      	mov	r0, r3
 80147ca:	f7fd fbf7 	bl	8011fbc <unlock_fs>
#endif
	}
	return res;
 80147ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80147d0:	4618      	mov	r0, r3
 80147d2:	3710      	adds	r7, #16
 80147d4:	46bd      	mov	sp, r7
 80147d6:	bd80      	pop	{r7, pc}

080147d8 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80147d8:	b580      	push	{r7, lr}
 80147da:	b084      	sub	sp, #16
 80147dc:	af00      	add	r7, sp, #0
 80147de:	6078      	str	r0, [r7, #4]
 80147e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	f107 0208 	add.w	r2, r7, #8
 80147e8:	4611      	mov	r1, r2
 80147ea:	4618      	mov	r0, r3
 80147ec:	f7ff f830 	bl	8013850 <validate>
 80147f0:	4603      	mov	r3, r0
 80147f2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80147f4:	7bfb      	ldrb	r3, [r7, #15]
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d126      	bne.n	8014848 <f_readdir+0x70>
		if (!fno) {
 80147fa:	683b      	ldr	r3, [r7, #0]
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d106      	bne.n	801480e <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8014800:	2100      	movs	r1, #0
 8014802:	6878      	ldr	r0, [r7, #4]
 8014804:	f7fe f926 	bl	8012a54 <dir_sdi>
 8014808:	4603      	mov	r3, r0
 801480a:	73fb      	strb	r3, [r7, #15]
 801480c:	e01c      	b.n	8014848 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 801480e:	2100      	movs	r1, #0
 8014810:	6878      	ldr	r0, [r7, #4]
 8014812:	f7fe fae5 	bl	8012de0 <dir_read>
 8014816:	4603      	mov	r3, r0
 8014818:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 801481a:	7bfb      	ldrb	r3, [r7, #15]
 801481c:	2b04      	cmp	r3, #4
 801481e:	d101      	bne.n	8014824 <f_readdir+0x4c>
 8014820:	2300      	movs	r3, #0
 8014822:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8014824:	7bfb      	ldrb	r3, [r7, #15]
 8014826:	2b00      	cmp	r3, #0
 8014828:	d10e      	bne.n	8014848 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 801482a:	6839      	ldr	r1, [r7, #0]
 801482c:	6878      	ldr	r0, [r7, #4]
 801482e:	f7fe fbbb 	bl	8012fa8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8014832:	2100      	movs	r1, #0
 8014834:	6878      	ldr	r0, [r7, #4]
 8014836:	f7fe f988 	bl	8012b4a <dir_next>
 801483a:	4603      	mov	r3, r0
 801483c:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801483e:	7bfb      	ldrb	r3, [r7, #15]
 8014840:	2b04      	cmp	r3, #4
 8014842:	d101      	bne.n	8014848 <f_readdir+0x70>
 8014844:	2300      	movs	r3, #0
 8014846:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8014848:	68bb      	ldr	r3, [r7, #8]
 801484a:	7bfa      	ldrb	r2, [r7, #15]
 801484c:	4611      	mov	r1, r2
 801484e:	4618      	mov	r0, r3
 8014850:	f7fd fbb4 	bl	8011fbc <unlock_fs>
 8014854:	7bfb      	ldrb	r3, [r7, #15]
}
 8014856:	4618      	mov	r0, r3
 8014858:	3710      	adds	r7, #16
 801485a:	46bd      	mov	sp, r7
 801485c:	bd80      	pop	{r7, pc}
	...

08014860 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014860:	b480      	push	{r7}
 8014862:	b087      	sub	sp, #28
 8014864:	af00      	add	r7, sp, #0
 8014866:	60f8      	str	r0, [r7, #12]
 8014868:	60b9      	str	r1, [r7, #8]
 801486a:	4613      	mov	r3, r2
 801486c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801486e:	2301      	movs	r3, #1
 8014870:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014872:	2300      	movs	r3, #0
 8014874:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014876:	4b1f      	ldr	r3, [pc, #124]	; (80148f4 <FATFS_LinkDriverEx+0x94>)
 8014878:	7a5b      	ldrb	r3, [r3, #9]
 801487a:	b2db      	uxtb	r3, r3
 801487c:	2b00      	cmp	r3, #0
 801487e:	d131      	bne.n	80148e4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014880:	4b1c      	ldr	r3, [pc, #112]	; (80148f4 <FATFS_LinkDriverEx+0x94>)
 8014882:	7a5b      	ldrb	r3, [r3, #9]
 8014884:	b2db      	uxtb	r3, r3
 8014886:	461a      	mov	r2, r3
 8014888:	4b1a      	ldr	r3, [pc, #104]	; (80148f4 <FATFS_LinkDriverEx+0x94>)
 801488a:	2100      	movs	r1, #0
 801488c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801488e:	4b19      	ldr	r3, [pc, #100]	; (80148f4 <FATFS_LinkDriverEx+0x94>)
 8014890:	7a5b      	ldrb	r3, [r3, #9]
 8014892:	b2db      	uxtb	r3, r3
 8014894:	4a17      	ldr	r2, [pc, #92]	; (80148f4 <FATFS_LinkDriverEx+0x94>)
 8014896:	009b      	lsls	r3, r3, #2
 8014898:	4413      	add	r3, r2
 801489a:	68fa      	ldr	r2, [r7, #12]
 801489c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801489e:	4b15      	ldr	r3, [pc, #84]	; (80148f4 <FATFS_LinkDriverEx+0x94>)
 80148a0:	7a5b      	ldrb	r3, [r3, #9]
 80148a2:	b2db      	uxtb	r3, r3
 80148a4:	461a      	mov	r2, r3
 80148a6:	4b13      	ldr	r3, [pc, #76]	; (80148f4 <FATFS_LinkDriverEx+0x94>)
 80148a8:	4413      	add	r3, r2
 80148aa:	79fa      	ldrb	r2, [r7, #7]
 80148ac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80148ae:	4b11      	ldr	r3, [pc, #68]	; (80148f4 <FATFS_LinkDriverEx+0x94>)
 80148b0:	7a5b      	ldrb	r3, [r3, #9]
 80148b2:	b2db      	uxtb	r3, r3
 80148b4:	1c5a      	adds	r2, r3, #1
 80148b6:	b2d1      	uxtb	r1, r2
 80148b8:	4a0e      	ldr	r2, [pc, #56]	; (80148f4 <FATFS_LinkDriverEx+0x94>)
 80148ba:	7251      	strb	r1, [r2, #9]
 80148bc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80148be:	7dbb      	ldrb	r3, [r7, #22]
 80148c0:	3330      	adds	r3, #48	; 0x30
 80148c2:	b2da      	uxtb	r2, r3
 80148c4:	68bb      	ldr	r3, [r7, #8]
 80148c6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80148c8:	68bb      	ldr	r3, [r7, #8]
 80148ca:	3301      	adds	r3, #1
 80148cc:	223a      	movs	r2, #58	; 0x3a
 80148ce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80148d0:	68bb      	ldr	r3, [r7, #8]
 80148d2:	3302      	adds	r3, #2
 80148d4:	222f      	movs	r2, #47	; 0x2f
 80148d6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80148d8:	68bb      	ldr	r3, [r7, #8]
 80148da:	3303      	adds	r3, #3
 80148dc:	2200      	movs	r2, #0
 80148de:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80148e0:	2300      	movs	r3, #0
 80148e2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80148e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80148e6:	4618      	mov	r0, r3
 80148e8:	371c      	adds	r7, #28
 80148ea:	46bd      	mov	sp, r7
 80148ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148f0:	4770      	bx	lr
 80148f2:	bf00      	nop
 80148f4:	20000858 	.word	0x20000858

080148f8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80148f8:	b580      	push	{r7, lr}
 80148fa:	b082      	sub	sp, #8
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	6078      	str	r0, [r7, #4]
 8014900:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014902:	2200      	movs	r2, #0
 8014904:	6839      	ldr	r1, [r7, #0]
 8014906:	6878      	ldr	r0, [r7, #4]
 8014908:	f7ff ffaa 	bl	8014860 <FATFS_LinkDriverEx>
 801490c:	4603      	mov	r3, r0
}
 801490e:	4618      	mov	r0, r3
 8014910:	3708      	adds	r7, #8
 8014912:	46bd      	mov	sp, r7
 8014914:	bd80      	pop	{r7, pc}

08014916 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8014916:	b580      	push	{r7, lr}
 8014918:	b084      	sub	sp, #16
 801491a:	af00      	add	r7, sp, #0
 801491c:	4603      	mov	r3, r0
 801491e:	6039      	str	r1, [r7, #0]
 8014920:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8014922:	2200      	movs	r2, #0
 8014924:	2101      	movs	r1, #1
 8014926:	2001      	movs	r0, #1
 8014928:	f000 f988 	bl	8014c3c <osSemaphoreNew>
 801492c:	4602      	mov	r2, r0
 801492e:	683b      	ldr	r3, [r7, #0]
 8014930:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8014932:	683b      	ldr	r3, [r7, #0]
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	2b00      	cmp	r3, #0
 8014938:	bf14      	ite	ne
 801493a:	2301      	movne	r3, #1
 801493c:	2300      	moveq	r3, #0
 801493e:	b2db      	uxtb	r3, r3
 8014940:	60fb      	str	r3, [r7, #12]

    return ret;
 8014942:	68fb      	ldr	r3, [r7, #12]
}
 8014944:	4618      	mov	r0, r3
 8014946:	3710      	adds	r7, #16
 8014948:	46bd      	mov	sp, r7
 801494a:	bd80      	pop	{r7, pc}

0801494c <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 801494c:	b580      	push	{r7, lr}
 801494e:	b082      	sub	sp, #8
 8014950:	af00      	add	r7, sp, #0
 8014952:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8014954:	6878      	ldr	r0, [r7, #4]
 8014956:	f000 fa91 	bl	8014e7c <osSemaphoreDelete>
#endif
    return 1;
 801495a:	2301      	movs	r3, #1
}
 801495c:	4618      	mov	r0, r3
 801495e:	3708      	adds	r7, #8
 8014960:	46bd      	mov	sp, r7
 8014962:	bd80      	pop	{r7, pc}

08014964 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8014964:	b580      	push	{r7, lr}
 8014966:	b084      	sub	sp, #16
 8014968:	af00      	add	r7, sp, #0
 801496a:	6078      	str	r0, [r7, #4]
  int ret = 0;
 801496c:	2300      	movs	r3, #0
 801496e:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8014970:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014974:	6878      	ldr	r0, [r7, #4]
 8014976:	f000 f9eb 	bl	8014d50 <osSemaphoreAcquire>
 801497a:	4603      	mov	r3, r0
 801497c:	2b00      	cmp	r3, #0
 801497e:	d101      	bne.n	8014984 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8014980:	2301      	movs	r3, #1
 8014982:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014984:	68fb      	ldr	r3, [r7, #12]
}
 8014986:	4618      	mov	r0, r3
 8014988:	3710      	adds	r7, #16
 801498a:	46bd      	mov	sp, r7
 801498c:	bd80      	pop	{r7, pc}

0801498e <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 801498e:	b580      	push	{r7, lr}
 8014990:	b082      	sub	sp, #8
 8014992:	af00      	add	r7, sp, #0
 8014994:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8014996:	6878      	ldr	r0, [r7, #4]
 8014998:	f000 fa2c 	bl	8014df4 <osSemaphoreRelease>
#endif
}
 801499c:	bf00      	nop
 801499e:	3708      	adds	r7, #8
 80149a0:	46bd      	mov	sp, r7
 80149a2:	bd80      	pop	{r7, pc}

080149a4 <__NVIC_SetPriority>:
{
 80149a4:	b480      	push	{r7}
 80149a6:	b083      	sub	sp, #12
 80149a8:	af00      	add	r7, sp, #0
 80149aa:	4603      	mov	r3, r0
 80149ac:	6039      	str	r1, [r7, #0]
 80149ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80149b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	db0a      	blt.n	80149ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80149b8:	683b      	ldr	r3, [r7, #0]
 80149ba:	b2da      	uxtb	r2, r3
 80149bc:	490c      	ldr	r1, [pc, #48]	; (80149f0 <__NVIC_SetPriority+0x4c>)
 80149be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80149c2:	0112      	lsls	r2, r2, #4
 80149c4:	b2d2      	uxtb	r2, r2
 80149c6:	440b      	add	r3, r1
 80149c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80149cc:	e00a      	b.n	80149e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80149ce:	683b      	ldr	r3, [r7, #0]
 80149d0:	b2da      	uxtb	r2, r3
 80149d2:	4908      	ldr	r1, [pc, #32]	; (80149f4 <__NVIC_SetPriority+0x50>)
 80149d4:	79fb      	ldrb	r3, [r7, #7]
 80149d6:	f003 030f 	and.w	r3, r3, #15
 80149da:	3b04      	subs	r3, #4
 80149dc:	0112      	lsls	r2, r2, #4
 80149de:	b2d2      	uxtb	r2, r2
 80149e0:	440b      	add	r3, r1
 80149e2:	761a      	strb	r2, [r3, #24]
}
 80149e4:	bf00      	nop
 80149e6:	370c      	adds	r7, #12
 80149e8:	46bd      	mov	sp, r7
 80149ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ee:	4770      	bx	lr
 80149f0:	e000e100 	.word	0xe000e100
 80149f4:	e000ed00 	.word	0xe000ed00

080149f8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80149f8:	b580      	push	{r7, lr}
 80149fa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80149fc:	4b05      	ldr	r3, [pc, #20]	; (8014a14 <SysTick_Handler+0x1c>)
 80149fe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8014a00:	f002 fa20 	bl	8016e44 <xTaskGetSchedulerState>
 8014a04:	4603      	mov	r3, r0
 8014a06:	2b01      	cmp	r3, #1
 8014a08:	d001      	beq.n	8014a0e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8014a0a:	f003 f905 	bl	8017c18 <xPortSysTickHandler>
  }
}
 8014a0e:	bf00      	nop
 8014a10:	bd80      	pop	{r7, pc}
 8014a12:	bf00      	nop
 8014a14:	e000e010 	.word	0xe000e010

08014a18 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8014a18:	b580      	push	{r7, lr}
 8014a1a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8014a1c:	2100      	movs	r1, #0
 8014a1e:	f06f 0004 	mvn.w	r0, #4
 8014a22:	f7ff ffbf 	bl	80149a4 <__NVIC_SetPriority>
#endif
}
 8014a26:	bf00      	nop
 8014a28:	bd80      	pop	{r7, pc}
	...

08014a2c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8014a2c:	b480      	push	{r7}
 8014a2e:	b083      	sub	sp, #12
 8014a30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014a32:	f3ef 8305 	mrs	r3, IPSR
 8014a36:	603b      	str	r3, [r7, #0]
  return(result);
 8014a38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d003      	beq.n	8014a46 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8014a3e:	f06f 0305 	mvn.w	r3, #5
 8014a42:	607b      	str	r3, [r7, #4]
 8014a44:	e00c      	b.n	8014a60 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8014a46:	4b0a      	ldr	r3, [pc, #40]	; (8014a70 <osKernelInitialize+0x44>)
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d105      	bne.n	8014a5a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8014a4e:	4b08      	ldr	r3, [pc, #32]	; (8014a70 <osKernelInitialize+0x44>)
 8014a50:	2201      	movs	r2, #1
 8014a52:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8014a54:	2300      	movs	r3, #0
 8014a56:	607b      	str	r3, [r7, #4]
 8014a58:	e002      	b.n	8014a60 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8014a5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014a5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8014a60:	687b      	ldr	r3, [r7, #4]
}
 8014a62:	4618      	mov	r0, r3
 8014a64:	370c      	adds	r7, #12
 8014a66:	46bd      	mov	sp, r7
 8014a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a6c:	4770      	bx	lr
 8014a6e:	bf00      	nop
 8014a70:	20000864 	.word	0x20000864

08014a74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8014a74:	b580      	push	{r7, lr}
 8014a76:	b082      	sub	sp, #8
 8014a78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014a7a:	f3ef 8305 	mrs	r3, IPSR
 8014a7e:	603b      	str	r3, [r7, #0]
  return(result);
 8014a80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d003      	beq.n	8014a8e <osKernelStart+0x1a>
    stat = osErrorISR;
 8014a86:	f06f 0305 	mvn.w	r3, #5
 8014a8a:	607b      	str	r3, [r7, #4]
 8014a8c:	e010      	b.n	8014ab0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8014a8e:	4b0b      	ldr	r3, [pc, #44]	; (8014abc <osKernelStart+0x48>)
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	2b01      	cmp	r3, #1
 8014a94:	d109      	bne.n	8014aaa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8014a96:	f7ff ffbf 	bl	8014a18 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8014a9a:	4b08      	ldr	r3, [pc, #32]	; (8014abc <osKernelStart+0x48>)
 8014a9c:	2202      	movs	r2, #2
 8014a9e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8014aa0:	f001 fd64 	bl	801656c <vTaskStartScheduler>
      stat = osOK;
 8014aa4:	2300      	movs	r3, #0
 8014aa6:	607b      	str	r3, [r7, #4]
 8014aa8:	e002      	b.n	8014ab0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8014aaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014aae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8014ab0:	687b      	ldr	r3, [r7, #4]
}
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	3708      	adds	r7, #8
 8014ab6:	46bd      	mov	sp, r7
 8014ab8:	bd80      	pop	{r7, pc}
 8014aba:	bf00      	nop
 8014abc:	20000864 	.word	0x20000864

08014ac0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8014ac0:	b580      	push	{r7, lr}
 8014ac2:	b08e      	sub	sp, #56	; 0x38
 8014ac4:	af04      	add	r7, sp, #16
 8014ac6:	60f8      	str	r0, [r7, #12]
 8014ac8:	60b9      	str	r1, [r7, #8]
 8014aca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8014acc:	2300      	movs	r3, #0
 8014ace:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014ad0:	f3ef 8305 	mrs	r3, IPSR
 8014ad4:	617b      	str	r3, [r7, #20]
  return(result);
 8014ad6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d17e      	bne.n	8014bda <osThreadNew+0x11a>
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d07b      	beq.n	8014bda <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8014ae2:	2380      	movs	r3, #128	; 0x80
 8014ae4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8014ae6:	2318      	movs	r3, #24
 8014ae8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8014aea:	2300      	movs	r3, #0
 8014aec:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8014aee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014af2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d045      	beq.n	8014b86 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d002      	beq.n	8014b08 <osThreadNew+0x48>
        name = attr->name;
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	699b      	ldr	r3, [r3, #24]
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d002      	beq.n	8014b16 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	699b      	ldr	r3, [r3, #24]
 8014b14:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8014b16:	69fb      	ldr	r3, [r7, #28]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d008      	beq.n	8014b2e <osThreadNew+0x6e>
 8014b1c:	69fb      	ldr	r3, [r7, #28]
 8014b1e:	2b38      	cmp	r3, #56	; 0x38
 8014b20:	d805      	bhi.n	8014b2e <osThreadNew+0x6e>
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	685b      	ldr	r3, [r3, #4]
 8014b26:	f003 0301 	and.w	r3, r3, #1
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d001      	beq.n	8014b32 <osThreadNew+0x72>
        return (NULL);
 8014b2e:	2300      	movs	r3, #0
 8014b30:	e054      	b.n	8014bdc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	695b      	ldr	r3, [r3, #20]
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d003      	beq.n	8014b42 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	695b      	ldr	r3, [r3, #20]
 8014b3e:	089b      	lsrs	r3, r3, #2
 8014b40:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	689b      	ldr	r3, [r3, #8]
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d00e      	beq.n	8014b68 <osThreadNew+0xa8>
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	68db      	ldr	r3, [r3, #12]
 8014b4e:	2bbb      	cmp	r3, #187	; 0xbb
 8014b50:	d90a      	bls.n	8014b68 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d006      	beq.n	8014b68 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	695b      	ldr	r3, [r3, #20]
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d002      	beq.n	8014b68 <osThreadNew+0xa8>
        mem = 1;
 8014b62:	2301      	movs	r3, #1
 8014b64:	61bb      	str	r3, [r7, #24]
 8014b66:	e010      	b.n	8014b8a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	689b      	ldr	r3, [r3, #8]
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d10c      	bne.n	8014b8a <osThreadNew+0xca>
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	68db      	ldr	r3, [r3, #12]
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d108      	bne.n	8014b8a <osThreadNew+0xca>
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	691b      	ldr	r3, [r3, #16]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d104      	bne.n	8014b8a <osThreadNew+0xca>
          mem = 0;
 8014b80:	2300      	movs	r3, #0
 8014b82:	61bb      	str	r3, [r7, #24]
 8014b84:	e001      	b.n	8014b8a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8014b86:	2300      	movs	r3, #0
 8014b88:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8014b8a:	69bb      	ldr	r3, [r7, #24]
 8014b8c:	2b01      	cmp	r3, #1
 8014b8e:	d110      	bne.n	8014bb2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8014b94:	687a      	ldr	r2, [r7, #4]
 8014b96:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8014b98:	9202      	str	r2, [sp, #8]
 8014b9a:	9301      	str	r3, [sp, #4]
 8014b9c:	69fb      	ldr	r3, [r7, #28]
 8014b9e:	9300      	str	r3, [sp, #0]
 8014ba0:	68bb      	ldr	r3, [r7, #8]
 8014ba2:	6a3a      	ldr	r2, [r7, #32]
 8014ba4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014ba6:	68f8      	ldr	r0, [r7, #12]
 8014ba8:	f001 fa82 	bl	80160b0 <xTaskCreateStatic>
 8014bac:	4603      	mov	r3, r0
 8014bae:	613b      	str	r3, [r7, #16]
 8014bb0:	e013      	b.n	8014bda <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8014bb2:	69bb      	ldr	r3, [r7, #24]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d110      	bne.n	8014bda <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8014bb8:	6a3b      	ldr	r3, [r7, #32]
 8014bba:	b29a      	uxth	r2, r3
 8014bbc:	f107 0310 	add.w	r3, r7, #16
 8014bc0:	9301      	str	r3, [sp, #4]
 8014bc2:	69fb      	ldr	r3, [r7, #28]
 8014bc4:	9300      	str	r3, [sp, #0]
 8014bc6:	68bb      	ldr	r3, [r7, #8]
 8014bc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014bca:	68f8      	ldr	r0, [r7, #12]
 8014bcc:	f001 facd 	bl	801616a <xTaskCreate>
 8014bd0:	4603      	mov	r3, r0
 8014bd2:	2b01      	cmp	r3, #1
 8014bd4:	d001      	beq.n	8014bda <osThreadNew+0x11a>
            hTask = NULL;
 8014bd6:	2300      	movs	r3, #0
 8014bd8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8014bda:	693b      	ldr	r3, [r7, #16]
}
 8014bdc:	4618      	mov	r0, r3
 8014bde:	3728      	adds	r7, #40	; 0x28
 8014be0:	46bd      	mov	sp, r7
 8014be2:	bd80      	pop	{r7, pc}

08014be4 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8014be4:	b580      	push	{r7, lr}
 8014be6:	b082      	sub	sp, #8
 8014be8:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8014bea:	f002 f91b 	bl	8016e24 <xTaskGetCurrentTaskHandle>
 8014bee:	6078      	str	r0, [r7, #4]

  return (id);
 8014bf0:	687b      	ldr	r3, [r7, #4]
}
 8014bf2:	4618      	mov	r0, r3
 8014bf4:	3708      	adds	r7, #8
 8014bf6:	46bd      	mov	sp, r7
 8014bf8:	bd80      	pop	{r7, pc}

08014bfa <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 8014bfa:	b580      	push	{r7, lr}
 8014bfc:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8014bfe:	2000      	movs	r0, #0
 8014c00:	f001 fc0e 	bl	8016420 <vTaskDelete>
#endif
  for (;;);
 8014c04:	e7fe      	b.n	8014c04 <osThreadExit+0xa>

08014c06 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8014c06:	b580      	push	{r7, lr}
 8014c08:	b084      	sub	sp, #16
 8014c0a:	af00      	add	r7, sp, #0
 8014c0c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014c0e:	f3ef 8305 	mrs	r3, IPSR
 8014c12:	60bb      	str	r3, [r7, #8]
  return(result);
 8014c14:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d003      	beq.n	8014c22 <osDelay+0x1c>
    stat = osErrorISR;
 8014c1a:	f06f 0305 	mvn.w	r3, #5
 8014c1e:	60fb      	str	r3, [r7, #12]
 8014c20:	e007      	b.n	8014c32 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8014c22:	2300      	movs	r3, #0
 8014c24:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d002      	beq.n	8014c32 <osDelay+0x2c>
      vTaskDelay(ticks);
 8014c2c:	6878      	ldr	r0, [r7, #4]
 8014c2e:	f001 fc69 	bl	8016504 <vTaskDelay>
    }
  }

  return (stat);
 8014c32:	68fb      	ldr	r3, [r7, #12]
}
 8014c34:	4618      	mov	r0, r3
 8014c36:	3710      	adds	r7, #16
 8014c38:	46bd      	mov	sp, r7
 8014c3a:	bd80      	pop	{r7, pc}

08014c3c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8014c3c:	b580      	push	{r7, lr}
 8014c3e:	b08a      	sub	sp, #40	; 0x28
 8014c40:	af02      	add	r7, sp, #8
 8014c42:	60f8      	str	r0, [r7, #12]
 8014c44:	60b9      	str	r1, [r7, #8]
 8014c46:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8014c48:	2300      	movs	r3, #0
 8014c4a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014c4c:	f3ef 8305 	mrs	r3, IPSR
 8014c50:	613b      	str	r3, [r7, #16]
  return(result);
 8014c52:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d175      	bne.n	8014d44 <osSemaphoreNew+0x108>
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d072      	beq.n	8014d44 <osSemaphoreNew+0x108>
 8014c5e:	68ba      	ldr	r2, [r7, #8]
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	429a      	cmp	r2, r3
 8014c64:	d86e      	bhi.n	8014d44 <osSemaphoreNew+0x108>
    mem = -1;
 8014c66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014c6a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d015      	beq.n	8014c9e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	689b      	ldr	r3, [r3, #8]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d006      	beq.n	8014c88 <osSemaphoreNew+0x4c>
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	68db      	ldr	r3, [r3, #12]
 8014c7e:	2b4f      	cmp	r3, #79	; 0x4f
 8014c80:	d902      	bls.n	8014c88 <osSemaphoreNew+0x4c>
        mem = 1;
 8014c82:	2301      	movs	r3, #1
 8014c84:	61bb      	str	r3, [r7, #24]
 8014c86:	e00c      	b.n	8014ca2 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	689b      	ldr	r3, [r3, #8]
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d108      	bne.n	8014ca2 <osSemaphoreNew+0x66>
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	68db      	ldr	r3, [r3, #12]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d104      	bne.n	8014ca2 <osSemaphoreNew+0x66>
          mem = 0;
 8014c98:	2300      	movs	r3, #0
 8014c9a:	61bb      	str	r3, [r7, #24]
 8014c9c:	e001      	b.n	8014ca2 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8014c9e:	2300      	movs	r3, #0
 8014ca0:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8014ca2:	69bb      	ldr	r3, [r7, #24]
 8014ca4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014ca8:	d04c      	beq.n	8014d44 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	2b01      	cmp	r3, #1
 8014cae:	d128      	bne.n	8014d02 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8014cb0:	69bb      	ldr	r3, [r7, #24]
 8014cb2:	2b01      	cmp	r3, #1
 8014cb4:	d10a      	bne.n	8014ccc <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	689b      	ldr	r3, [r3, #8]
 8014cba:	2203      	movs	r2, #3
 8014cbc:	9200      	str	r2, [sp, #0]
 8014cbe:	2200      	movs	r2, #0
 8014cc0:	2100      	movs	r1, #0
 8014cc2:	2001      	movs	r0, #1
 8014cc4:	f000 fa4e 	bl	8015164 <xQueueGenericCreateStatic>
 8014cc8:	61f8      	str	r0, [r7, #28]
 8014cca:	e005      	b.n	8014cd8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8014ccc:	2203      	movs	r2, #3
 8014cce:	2100      	movs	r1, #0
 8014cd0:	2001      	movs	r0, #1
 8014cd2:	f000 fabf 	bl	8015254 <xQueueGenericCreate>
 8014cd6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8014cd8:	69fb      	ldr	r3, [r7, #28]
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d022      	beq.n	8014d24 <osSemaphoreNew+0xe8>
 8014cde:	68bb      	ldr	r3, [r7, #8]
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d01f      	beq.n	8014d24 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8014ce4:	2300      	movs	r3, #0
 8014ce6:	2200      	movs	r2, #0
 8014ce8:	2100      	movs	r1, #0
 8014cea:	69f8      	ldr	r0, [r7, #28]
 8014cec:	f000 fb7a 	bl	80153e4 <xQueueGenericSend>
 8014cf0:	4603      	mov	r3, r0
 8014cf2:	2b01      	cmp	r3, #1
 8014cf4:	d016      	beq.n	8014d24 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8014cf6:	69f8      	ldr	r0, [r7, #28]
 8014cf8:	f001 f806 	bl	8015d08 <vQueueDelete>
            hSemaphore = NULL;
 8014cfc:	2300      	movs	r3, #0
 8014cfe:	61fb      	str	r3, [r7, #28]
 8014d00:	e010      	b.n	8014d24 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8014d02:	69bb      	ldr	r3, [r7, #24]
 8014d04:	2b01      	cmp	r3, #1
 8014d06:	d108      	bne.n	8014d1a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	689b      	ldr	r3, [r3, #8]
 8014d0c:	461a      	mov	r2, r3
 8014d0e:	68b9      	ldr	r1, [r7, #8]
 8014d10:	68f8      	ldr	r0, [r7, #12]
 8014d12:	f000 fafc 	bl	801530e <xQueueCreateCountingSemaphoreStatic>
 8014d16:	61f8      	str	r0, [r7, #28]
 8014d18:	e004      	b.n	8014d24 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8014d1a:	68b9      	ldr	r1, [r7, #8]
 8014d1c:	68f8      	ldr	r0, [r7, #12]
 8014d1e:	f000 fb2d 	bl	801537c <xQueueCreateCountingSemaphore>
 8014d22:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8014d24:	69fb      	ldr	r3, [r7, #28]
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d00c      	beq.n	8014d44 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d003      	beq.n	8014d38 <osSemaphoreNew+0xfc>
          name = attr->name;
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	617b      	str	r3, [r7, #20]
 8014d36:	e001      	b.n	8014d3c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8014d38:	2300      	movs	r3, #0
 8014d3a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8014d3c:	6979      	ldr	r1, [r7, #20]
 8014d3e:	69f8      	ldr	r0, [r7, #28]
 8014d40:	f001 f92e 	bl	8015fa0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8014d44:	69fb      	ldr	r3, [r7, #28]
}
 8014d46:	4618      	mov	r0, r3
 8014d48:	3720      	adds	r7, #32
 8014d4a:	46bd      	mov	sp, r7
 8014d4c:	bd80      	pop	{r7, pc}
	...

08014d50 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8014d50:	b580      	push	{r7, lr}
 8014d52:	b086      	sub	sp, #24
 8014d54:	af00      	add	r7, sp, #0
 8014d56:	6078      	str	r0, [r7, #4]
 8014d58:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8014d5e:	2300      	movs	r3, #0
 8014d60:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8014d62:	693b      	ldr	r3, [r7, #16]
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d103      	bne.n	8014d70 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8014d68:	f06f 0303 	mvn.w	r3, #3
 8014d6c:	617b      	str	r3, [r7, #20]
 8014d6e:	e039      	b.n	8014de4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014d70:	f3ef 8305 	mrs	r3, IPSR
 8014d74:	60fb      	str	r3, [r7, #12]
  return(result);
 8014d76:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d022      	beq.n	8014dc2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8014d7c:	683b      	ldr	r3, [r7, #0]
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d003      	beq.n	8014d8a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8014d82:	f06f 0303 	mvn.w	r3, #3
 8014d86:	617b      	str	r3, [r7, #20]
 8014d88:	e02c      	b.n	8014de4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8014d8a:	2300      	movs	r3, #0
 8014d8c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8014d8e:	f107 0308 	add.w	r3, r7, #8
 8014d92:	461a      	mov	r2, r3
 8014d94:	2100      	movs	r1, #0
 8014d96:	6938      	ldr	r0, [r7, #16]
 8014d98:	f000 ff36 	bl	8015c08 <xQueueReceiveFromISR>
 8014d9c:	4603      	mov	r3, r0
 8014d9e:	2b01      	cmp	r3, #1
 8014da0:	d003      	beq.n	8014daa <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8014da2:	f06f 0302 	mvn.w	r3, #2
 8014da6:	617b      	str	r3, [r7, #20]
 8014da8:	e01c      	b.n	8014de4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8014daa:	68bb      	ldr	r3, [r7, #8]
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d019      	beq.n	8014de4 <osSemaphoreAcquire+0x94>
 8014db0:	4b0f      	ldr	r3, [pc, #60]	; (8014df0 <osSemaphoreAcquire+0xa0>)
 8014db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014db6:	601a      	str	r2, [r3, #0]
 8014db8:	f3bf 8f4f 	dsb	sy
 8014dbc:	f3bf 8f6f 	isb	sy
 8014dc0:	e010      	b.n	8014de4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8014dc2:	6839      	ldr	r1, [r7, #0]
 8014dc4:	6938      	ldr	r0, [r7, #16]
 8014dc6:	f000 fe13 	bl	80159f0 <xQueueSemaphoreTake>
 8014dca:	4603      	mov	r3, r0
 8014dcc:	2b01      	cmp	r3, #1
 8014dce:	d009      	beq.n	8014de4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8014dd0:	683b      	ldr	r3, [r7, #0]
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d003      	beq.n	8014dde <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8014dd6:	f06f 0301 	mvn.w	r3, #1
 8014dda:	617b      	str	r3, [r7, #20]
 8014ddc:	e002      	b.n	8014de4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8014dde:	f06f 0302 	mvn.w	r3, #2
 8014de2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8014de4:	697b      	ldr	r3, [r7, #20]
}
 8014de6:	4618      	mov	r0, r3
 8014de8:	3718      	adds	r7, #24
 8014dea:	46bd      	mov	sp, r7
 8014dec:	bd80      	pop	{r7, pc}
 8014dee:	bf00      	nop
 8014df0:	e000ed04 	.word	0xe000ed04

08014df4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8014df4:	b580      	push	{r7, lr}
 8014df6:	b086      	sub	sp, #24
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8014e00:	2300      	movs	r3, #0
 8014e02:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8014e04:	693b      	ldr	r3, [r7, #16]
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d103      	bne.n	8014e12 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8014e0a:	f06f 0303 	mvn.w	r3, #3
 8014e0e:	617b      	str	r3, [r7, #20]
 8014e10:	e02c      	b.n	8014e6c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014e12:	f3ef 8305 	mrs	r3, IPSR
 8014e16:	60fb      	str	r3, [r7, #12]
  return(result);
 8014e18:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d01a      	beq.n	8014e54 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8014e1e:	2300      	movs	r3, #0
 8014e20:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8014e22:	f107 0308 	add.w	r3, r7, #8
 8014e26:	4619      	mov	r1, r3
 8014e28:	6938      	ldr	r0, [r7, #16]
 8014e2a:	f000 fc74 	bl	8015716 <xQueueGiveFromISR>
 8014e2e:	4603      	mov	r3, r0
 8014e30:	2b01      	cmp	r3, #1
 8014e32:	d003      	beq.n	8014e3c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8014e34:	f06f 0302 	mvn.w	r3, #2
 8014e38:	617b      	str	r3, [r7, #20]
 8014e3a:	e017      	b.n	8014e6c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8014e3c:	68bb      	ldr	r3, [r7, #8]
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d014      	beq.n	8014e6c <osSemaphoreRelease+0x78>
 8014e42:	4b0d      	ldr	r3, [pc, #52]	; (8014e78 <osSemaphoreRelease+0x84>)
 8014e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e48:	601a      	str	r2, [r3, #0]
 8014e4a:	f3bf 8f4f 	dsb	sy
 8014e4e:	f3bf 8f6f 	isb	sy
 8014e52:	e00b      	b.n	8014e6c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8014e54:	2300      	movs	r3, #0
 8014e56:	2200      	movs	r2, #0
 8014e58:	2100      	movs	r1, #0
 8014e5a:	6938      	ldr	r0, [r7, #16]
 8014e5c:	f000 fac2 	bl	80153e4 <xQueueGenericSend>
 8014e60:	4603      	mov	r3, r0
 8014e62:	2b01      	cmp	r3, #1
 8014e64:	d002      	beq.n	8014e6c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8014e66:	f06f 0302 	mvn.w	r3, #2
 8014e6a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8014e6c:	697b      	ldr	r3, [r7, #20]
}
 8014e6e:	4618      	mov	r0, r3
 8014e70:	3718      	adds	r7, #24
 8014e72:	46bd      	mov	sp, r7
 8014e74:	bd80      	pop	{r7, pc}
 8014e76:	bf00      	nop
 8014e78:	e000ed04 	.word	0xe000ed04

08014e7c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8014e7c:	b580      	push	{r7, lr}
 8014e7e:	b086      	sub	sp, #24
 8014e80:	af00      	add	r7, sp, #0
 8014e82:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014e88:	f3ef 8305 	mrs	r3, IPSR
 8014e8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8014e8e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d003      	beq.n	8014e9c <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8014e94:	f06f 0305 	mvn.w	r3, #5
 8014e98:	617b      	str	r3, [r7, #20]
 8014e9a:	e00e      	b.n	8014eba <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8014e9c:	693b      	ldr	r3, [r7, #16]
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d103      	bne.n	8014eaa <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8014ea2:	f06f 0303 	mvn.w	r3, #3
 8014ea6:	617b      	str	r3, [r7, #20]
 8014ea8:	e007      	b.n	8014eba <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8014eaa:	6938      	ldr	r0, [r7, #16]
 8014eac:	f001 f8a2 	bl	8015ff4 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8014eb0:	2300      	movs	r3, #0
 8014eb2:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8014eb4:	6938      	ldr	r0, [r7, #16]
 8014eb6:	f000 ff27 	bl	8015d08 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8014eba:	697b      	ldr	r3, [r7, #20]
}
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	3718      	adds	r7, #24
 8014ec0:	46bd      	mov	sp, r7
 8014ec2:	bd80      	pop	{r7, pc}

08014ec4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8014ec4:	b480      	push	{r7}
 8014ec6:	b085      	sub	sp, #20
 8014ec8:	af00      	add	r7, sp, #0
 8014eca:	60f8      	str	r0, [r7, #12]
 8014ecc:	60b9      	str	r1, [r7, #8]
 8014ece:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8014ed0:	68fb      	ldr	r3, [r7, #12]
 8014ed2:	4a07      	ldr	r2, [pc, #28]	; (8014ef0 <vApplicationGetIdleTaskMemory+0x2c>)
 8014ed4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8014ed6:	68bb      	ldr	r3, [r7, #8]
 8014ed8:	4a06      	ldr	r2, [pc, #24]	; (8014ef4 <vApplicationGetIdleTaskMemory+0x30>)
 8014eda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	2280      	movs	r2, #128	; 0x80
 8014ee0:	601a      	str	r2, [r3, #0]
}
 8014ee2:	bf00      	nop
 8014ee4:	3714      	adds	r7, #20
 8014ee6:	46bd      	mov	sp, r7
 8014ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eec:	4770      	bx	lr
 8014eee:	bf00      	nop
 8014ef0:	20000868 	.word	0x20000868
 8014ef4:	20000924 	.word	0x20000924

08014ef8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8014ef8:	b480      	push	{r7}
 8014efa:	b085      	sub	sp, #20
 8014efc:	af00      	add	r7, sp, #0
 8014efe:	60f8      	str	r0, [r7, #12]
 8014f00:	60b9      	str	r1, [r7, #8]
 8014f02:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	4a07      	ldr	r2, [pc, #28]	; (8014f24 <vApplicationGetTimerTaskMemory+0x2c>)
 8014f08:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8014f0a:	68bb      	ldr	r3, [r7, #8]
 8014f0c:	4a06      	ldr	r2, [pc, #24]	; (8014f28 <vApplicationGetTimerTaskMemory+0x30>)
 8014f0e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014f16:	601a      	str	r2, [r3, #0]
}
 8014f18:	bf00      	nop
 8014f1a:	3714      	adds	r7, #20
 8014f1c:	46bd      	mov	sp, r7
 8014f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f22:	4770      	bx	lr
 8014f24:	20000b24 	.word	0x20000b24
 8014f28:	20000be0 	.word	0x20000be0

08014f2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014f2c:	b480      	push	{r7}
 8014f2e:	b083      	sub	sp, #12
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	f103 0208 	add.w	r2, r3, #8
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014f44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	f103 0208 	add.w	r2, r3, #8
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	f103 0208 	add.w	r2, r3, #8
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	2200      	movs	r2, #0
 8014f5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014f60:	bf00      	nop
 8014f62:	370c      	adds	r7, #12
 8014f64:	46bd      	mov	sp, r7
 8014f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f6a:	4770      	bx	lr

08014f6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014f6c:	b480      	push	{r7}
 8014f6e:	b083      	sub	sp, #12
 8014f70:	af00      	add	r7, sp, #0
 8014f72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	2200      	movs	r2, #0
 8014f78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014f7a:	bf00      	nop
 8014f7c:	370c      	adds	r7, #12
 8014f7e:	46bd      	mov	sp, r7
 8014f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f84:	4770      	bx	lr

08014f86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014f86:	b480      	push	{r7}
 8014f88:	b085      	sub	sp, #20
 8014f8a:	af00      	add	r7, sp, #0
 8014f8c:	6078      	str	r0, [r7, #4]
 8014f8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	685b      	ldr	r3, [r3, #4]
 8014f94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8014f96:	683b      	ldr	r3, [r7, #0]
 8014f98:	68fa      	ldr	r2, [r7, #12]
 8014f9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	689a      	ldr	r2, [r3, #8]
 8014fa0:	683b      	ldr	r3, [r7, #0]
 8014fa2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	689b      	ldr	r3, [r3, #8]
 8014fa8:	683a      	ldr	r2, [r7, #0]
 8014faa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	683a      	ldr	r2, [r7, #0]
 8014fb0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8014fb2:	683b      	ldr	r3, [r7, #0]
 8014fb4:	687a      	ldr	r2, [r7, #4]
 8014fb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	1c5a      	adds	r2, r3, #1
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	601a      	str	r2, [r3, #0]
}
 8014fc2:	bf00      	nop
 8014fc4:	3714      	adds	r7, #20
 8014fc6:	46bd      	mov	sp, r7
 8014fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fcc:	4770      	bx	lr

08014fce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014fce:	b480      	push	{r7}
 8014fd0:	b085      	sub	sp, #20
 8014fd2:	af00      	add	r7, sp, #0
 8014fd4:	6078      	str	r0, [r7, #4]
 8014fd6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014fd8:	683b      	ldr	r3, [r7, #0]
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014fde:	68bb      	ldr	r3, [r7, #8]
 8014fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014fe4:	d103      	bne.n	8014fee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	691b      	ldr	r3, [r3, #16]
 8014fea:	60fb      	str	r3, [r7, #12]
 8014fec:	e00c      	b.n	8015008 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	3308      	adds	r3, #8
 8014ff2:	60fb      	str	r3, [r7, #12]
 8014ff4:	e002      	b.n	8014ffc <vListInsert+0x2e>
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	685b      	ldr	r3, [r3, #4]
 8014ffa:	60fb      	str	r3, [r7, #12]
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	685b      	ldr	r3, [r3, #4]
 8015000:	681b      	ldr	r3, [r3, #0]
 8015002:	68ba      	ldr	r2, [r7, #8]
 8015004:	429a      	cmp	r2, r3
 8015006:	d2f6      	bcs.n	8014ff6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	685a      	ldr	r2, [r3, #4]
 801500c:	683b      	ldr	r3, [r7, #0]
 801500e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8015010:	683b      	ldr	r3, [r7, #0]
 8015012:	685b      	ldr	r3, [r3, #4]
 8015014:	683a      	ldr	r2, [r7, #0]
 8015016:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8015018:	683b      	ldr	r3, [r7, #0]
 801501a:	68fa      	ldr	r2, [r7, #12]
 801501c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	683a      	ldr	r2, [r7, #0]
 8015022:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8015024:	683b      	ldr	r3, [r7, #0]
 8015026:	687a      	ldr	r2, [r7, #4]
 8015028:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	681b      	ldr	r3, [r3, #0]
 801502e:	1c5a      	adds	r2, r3, #1
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	601a      	str	r2, [r3, #0]
}
 8015034:	bf00      	nop
 8015036:	3714      	adds	r7, #20
 8015038:	46bd      	mov	sp, r7
 801503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801503e:	4770      	bx	lr

08015040 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8015040:	b480      	push	{r7}
 8015042:	b085      	sub	sp, #20
 8015044:	af00      	add	r7, sp, #0
 8015046:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	691b      	ldr	r3, [r3, #16]
 801504c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	685b      	ldr	r3, [r3, #4]
 8015052:	687a      	ldr	r2, [r7, #4]
 8015054:	6892      	ldr	r2, [r2, #8]
 8015056:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	689b      	ldr	r3, [r3, #8]
 801505c:	687a      	ldr	r2, [r7, #4]
 801505e:	6852      	ldr	r2, [r2, #4]
 8015060:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8015062:	68fb      	ldr	r3, [r7, #12]
 8015064:	685b      	ldr	r3, [r3, #4]
 8015066:	687a      	ldr	r2, [r7, #4]
 8015068:	429a      	cmp	r2, r3
 801506a:	d103      	bne.n	8015074 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	689a      	ldr	r2, [r3, #8]
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	2200      	movs	r2, #0
 8015078:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	1e5a      	subs	r2, r3, #1
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	681b      	ldr	r3, [r3, #0]
}
 8015088:	4618      	mov	r0, r3
 801508a:	3714      	adds	r7, #20
 801508c:	46bd      	mov	sp, r7
 801508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015092:	4770      	bx	lr

08015094 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015094:	b580      	push	{r7, lr}
 8015096:	b084      	sub	sp, #16
 8015098:	af00      	add	r7, sp, #0
 801509a:	6078      	str	r0, [r7, #4]
 801509c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d10a      	bne.n	80150be <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80150a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150ac:	f383 8811 	msr	BASEPRI, r3
 80150b0:	f3bf 8f6f 	isb	sy
 80150b4:	f3bf 8f4f 	dsb	sy
 80150b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80150ba:	bf00      	nop
 80150bc:	e7fe      	b.n	80150bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80150be:	f002 fd19 	bl	8017af4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	681a      	ldr	r2, [r3, #0]
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80150ca:	68f9      	ldr	r1, [r7, #12]
 80150cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80150ce:	fb01 f303 	mul.w	r3, r1, r3
 80150d2:	441a      	add	r2, r3
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	2200      	movs	r2, #0
 80150dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	681a      	ldr	r2, [r3, #0]
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	681a      	ldr	r2, [r3, #0]
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80150ee:	3b01      	subs	r3, #1
 80150f0:	68f9      	ldr	r1, [r7, #12]
 80150f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80150f4:	fb01 f303 	mul.w	r3, r1, r3
 80150f8:	441a      	add	r2, r3
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	22ff      	movs	r2, #255	; 0xff
 8015102:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	22ff      	movs	r2, #255	; 0xff
 801510a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801510e:	683b      	ldr	r3, [r7, #0]
 8015110:	2b00      	cmp	r3, #0
 8015112:	d114      	bne.n	801513e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	691b      	ldr	r3, [r3, #16]
 8015118:	2b00      	cmp	r3, #0
 801511a:	d01a      	beq.n	8015152 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	3310      	adds	r3, #16
 8015120:	4618      	mov	r0, r3
 8015122:	f001 fcbd 	bl	8016aa0 <xTaskRemoveFromEventList>
 8015126:	4603      	mov	r3, r0
 8015128:	2b00      	cmp	r3, #0
 801512a:	d012      	beq.n	8015152 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801512c:	4b0c      	ldr	r3, [pc, #48]	; (8015160 <xQueueGenericReset+0xcc>)
 801512e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015132:	601a      	str	r2, [r3, #0]
 8015134:	f3bf 8f4f 	dsb	sy
 8015138:	f3bf 8f6f 	isb	sy
 801513c:	e009      	b.n	8015152 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	3310      	adds	r3, #16
 8015142:	4618      	mov	r0, r3
 8015144:	f7ff fef2 	bl	8014f2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	3324      	adds	r3, #36	; 0x24
 801514c:	4618      	mov	r0, r3
 801514e:	f7ff feed 	bl	8014f2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8015152:	f002 fcff 	bl	8017b54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8015156:	2301      	movs	r3, #1
}
 8015158:	4618      	mov	r0, r3
 801515a:	3710      	adds	r7, #16
 801515c:	46bd      	mov	sp, r7
 801515e:	bd80      	pop	{r7, pc}
 8015160:	e000ed04 	.word	0xe000ed04

08015164 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8015164:	b580      	push	{r7, lr}
 8015166:	b08e      	sub	sp, #56	; 0x38
 8015168:	af02      	add	r7, sp, #8
 801516a:	60f8      	str	r0, [r7, #12]
 801516c:	60b9      	str	r1, [r7, #8]
 801516e:	607a      	str	r2, [r7, #4]
 8015170:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	2b00      	cmp	r3, #0
 8015176:	d10a      	bne.n	801518e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8015178:	f04f 0350 	mov.w	r3, #80	; 0x50
 801517c:	f383 8811 	msr	BASEPRI, r3
 8015180:	f3bf 8f6f 	isb	sy
 8015184:	f3bf 8f4f 	dsb	sy
 8015188:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801518a:	bf00      	nop
 801518c:	e7fe      	b.n	801518c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801518e:	683b      	ldr	r3, [r7, #0]
 8015190:	2b00      	cmp	r3, #0
 8015192:	d10a      	bne.n	80151aa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8015194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015198:	f383 8811 	msr	BASEPRI, r3
 801519c:	f3bf 8f6f 	isb	sy
 80151a0:	f3bf 8f4f 	dsb	sy
 80151a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80151a6:	bf00      	nop
 80151a8:	e7fe      	b.n	80151a8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d002      	beq.n	80151b6 <xQueueGenericCreateStatic+0x52>
 80151b0:	68bb      	ldr	r3, [r7, #8]
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d001      	beq.n	80151ba <xQueueGenericCreateStatic+0x56>
 80151b6:	2301      	movs	r3, #1
 80151b8:	e000      	b.n	80151bc <xQueueGenericCreateStatic+0x58>
 80151ba:	2300      	movs	r3, #0
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d10a      	bne.n	80151d6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80151c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151c4:	f383 8811 	msr	BASEPRI, r3
 80151c8:	f3bf 8f6f 	isb	sy
 80151cc:	f3bf 8f4f 	dsb	sy
 80151d0:	623b      	str	r3, [r7, #32]
}
 80151d2:	bf00      	nop
 80151d4:	e7fe      	b.n	80151d4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d102      	bne.n	80151e2 <xQueueGenericCreateStatic+0x7e>
 80151dc:	68bb      	ldr	r3, [r7, #8]
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d101      	bne.n	80151e6 <xQueueGenericCreateStatic+0x82>
 80151e2:	2301      	movs	r3, #1
 80151e4:	e000      	b.n	80151e8 <xQueueGenericCreateStatic+0x84>
 80151e6:	2300      	movs	r3, #0
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d10a      	bne.n	8015202 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80151ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151f0:	f383 8811 	msr	BASEPRI, r3
 80151f4:	f3bf 8f6f 	isb	sy
 80151f8:	f3bf 8f4f 	dsb	sy
 80151fc:	61fb      	str	r3, [r7, #28]
}
 80151fe:	bf00      	nop
 8015200:	e7fe      	b.n	8015200 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8015202:	2350      	movs	r3, #80	; 0x50
 8015204:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8015206:	697b      	ldr	r3, [r7, #20]
 8015208:	2b50      	cmp	r3, #80	; 0x50
 801520a:	d00a      	beq.n	8015222 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801520c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015210:	f383 8811 	msr	BASEPRI, r3
 8015214:	f3bf 8f6f 	isb	sy
 8015218:	f3bf 8f4f 	dsb	sy
 801521c:	61bb      	str	r3, [r7, #24]
}
 801521e:	bf00      	nop
 8015220:	e7fe      	b.n	8015220 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015222:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015224:	683b      	ldr	r3, [r7, #0]
 8015226:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8015228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801522a:	2b00      	cmp	r3, #0
 801522c:	d00d      	beq.n	801524a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801522e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015230:	2201      	movs	r2, #1
 8015232:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015236:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801523a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801523c:	9300      	str	r3, [sp, #0]
 801523e:	4613      	mov	r3, r2
 8015240:	687a      	ldr	r2, [r7, #4]
 8015242:	68b9      	ldr	r1, [r7, #8]
 8015244:	68f8      	ldr	r0, [r7, #12]
 8015246:	f000 f83f 	bl	80152c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801524a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801524c:	4618      	mov	r0, r3
 801524e:	3730      	adds	r7, #48	; 0x30
 8015250:	46bd      	mov	sp, r7
 8015252:	bd80      	pop	{r7, pc}

08015254 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8015254:	b580      	push	{r7, lr}
 8015256:	b08a      	sub	sp, #40	; 0x28
 8015258:	af02      	add	r7, sp, #8
 801525a:	60f8      	str	r0, [r7, #12]
 801525c:	60b9      	str	r1, [r7, #8]
 801525e:	4613      	mov	r3, r2
 8015260:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	2b00      	cmp	r3, #0
 8015266:	d10a      	bne.n	801527e <xQueueGenericCreate+0x2a>
	__asm volatile
 8015268:	f04f 0350 	mov.w	r3, #80	; 0x50
 801526c:	f383 8811 	msr	BASEPRI, r3
 8015270:	f3bf 8f6f 	isb	sy
 8015274:	f3bf 8f4f 	dsb	sy
 8015278:	613b      	str	r3, [r7, #16]
}
 801527a:	bf00      	nop
 801527c:	e7fe      	b.n	801527c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	68ba      	ldr	r2, [r7, #8]
 8015282:	fb02 f303 	mul.w	r3, r2, r3
 8015286:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015288:	69fb      	ldr	r3, [r7, #28]
 801528a:	3350      	adds	r3, #80	; 0x50
 801528c:	4618      	mov	r0, r3
 801528e:	f002 fd53 	bl	8017d38 <pvPortMalloc>
 8015292:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015294:	69bb      	ldr	r3, [r7, #24]
 8015296:	2b00      	cmp	r3, #0
 8015298:	d011      	beq.n	80152be <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801529a:	69bb      	ldr	r3, [r7, #24]
 801529c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801529e:	697b      	ldr	r3, [r7, #20]
 80152a0:	3350      	adds	r3, #80	; 0x50
 80152a2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80152a4:	69bb      	ldr	r3, [r7, #24]
 80152a6:	2200      	movs	r2, #0
 80152a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80152ac:	79fa      	ldrb	r2, [r7, #7]
 80152ae:	69bb      	ldr	r3, [r7, #24]
 80152b0:	9300      	str	r3, [sp, #0]
 80152b2:	4613      	mov	r3, r2
 80152b4:	697a      	ldr	r2, [r7, #20]
 80152b6:	68b9      	ldr	r1, [r7, #8]
 80152b8:	68f8      	ldr	r0, [r7, #12]
 80152ba:	f000 f805 	bl	80152c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80152be:	69bb      	ldr	r3, [r7, #24]
	}
 80152c0:	4618      	mov	r0, r3
 80152c2:	3720      	adds	r7, #32
 80152c4:	46bd      	mov	sp, r7
 80152c6:	bd80      	pop	{r7, pc}

080152c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80152c8:	b580      	push	{r7, lr}
 80152ca:	b084      	sub	sp, #16
 80152cc:	af00      	add	r7, sp, #0
 80152ce:	60f8      	str	r0, [r7, #12]
 80152d0:	60b9      	str	r1, [r7, #8]
 80152d2:	607a      	str	r2, [r7, #4]
 80152d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80152d6:	68bb      	ldr	r3, [r7, #8]
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d103      	bne.n	80152e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80152dc:	69bb      	ldr	r3, [r7, #24]
 80152de:	69ba      	ldr	r2, [r7, #24]
 80152e0:	601a      	str	r2, [r3, #0]
 80152e2:	e002      	b.n	80152ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80152e4:	69bb      	ldr	r3, [r7, #24]
 80152e6:	687a      	ldr	r2, [r7, #4]
 80152e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80152ea:	69bb      	ldr	r3, [r7, #24]
 80152ec:	68fa      	ldr	r2, [r7, #12]
 80152ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80152f0:	69bb      	ldr	r3, [r7, #24]
 80152f2:	68ba      	ldr	r2, [r7, #8]
 80152f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80152f6:	2101      	movs	r1, #1
 80152f8:	69b8      	ldr	r0, [r7, #24]
 80152fa:	f7ff fecb 	bl	8015094 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80152fe:	69bb      	ldr	r3, [r7, #24]
 8015300:	78fa      	ldrb	r2, [r7, #3]
 8015302:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8015306:	bf00      	nop
 8015308:	3710      	adds	r7, #16
 801530a:	46bd      	mov	sp, r7
 801530c:	bd80      	pop	{r7, pc}

0801530e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 801530e:	b580      	push	{r7, lr}
 8015310:	b08a      	sub	sp, #40	; 0x28
 8015312:	af02      	add	r7, sp, #8
 8015314:	60f8      	str	r0, [r7, #12]
 8015316:	60b9      	str	r1, [r7, #8]
 8015318:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	2b00      	cmp	r3, #0
 801531e:	d10a      	bne.n	8015336 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8015320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015324:	f383 8811 	msr	BASEPRI, r3
 8015328:	f3bf 8f6f 	isb	sy
 801532c:	f3bf 8f4f 	dsb	sy
 8015330:	61bb      	str	r3, [r7, #24]
}
 8015332:	bf00      	nop
 8015334:	e7fe      	b.n	8015334 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8015336:	68ba      	ldr	r2, [r7, #8]
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	429a      	cmp	r2, r3
 801533c:	d90a      	bls.n	8015354 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 801533e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015342:	f383 8811 	msr	BASEPRI, r3
 8015346:	f3bf 8f6f 	isb	sy
 801534a:	f3bf 8f4f 	dsb	sy
 801534e:	617b      	str	r3, [r7, #20]
}
 8015350:	bf00      	nop
 8015352:	e7fe      	b.n	8015352 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8015354:	2302      	movs	r3, #2
 8015356:	9300      	str	r3, [sp, #0]
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	2200      	movs	r2, #0
 801535c:	2100      	movs	r1, #0
 801535e:	68f8      	ldr	r0, [r7, #12]
 8015360:	f7ff ff00 	bl	8015164 <xQueueGenericCreateStatic>
 8015364:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8015366:	69fb      	ldr	r3, [r7, #28]
 8015368:	2b00      	cmp	r3, #0
 801536a:	d002      	beq.n	8015372 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801536c:	69fb      	ldr	r3, [r7, #28]
 801536e:	68ba      	ldr	r2, [r7, #8]
 8015370:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8015372:	69fb      	ldr	r3, [r7, #28]
	}
 8015374:	4618      	mov	r0, r3
 8015376:	3720      	adds	r7, #32
 8015378:	46bd      	mov	sp, r7
 801537a:	bd80      	pop	{r7, pc}

0801537c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 801537c:	b580      	push	{r7, lr}
 801537e:	b086      	sub	sp, #24
 8015380:	af00      	add	r7, sp, #0
 8015382:	6078      	str	r0, [r7, #4]
 8015384:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	2b00      	cmp	r3, #0
 801538a:	d10a      	bne.n	80153a2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 801538c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015390:	f383 8811 	msr	BASEPRI, r3
 8015394:	f3bf 8f6f 	isb	sy
 8015398:	f3bf 8f4f 	dsb	sy
 801539c:	613b      	str	r3, [r7, #16]
}
 801539e:	bf00      	nop
 80153a0:	e7fe      	b.n	80153a0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80153a2:	683a      	ldr	r2, [r7, #0]
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	429a      	cmp	r2, r3
 80153a8:	d90a      	bls.n	80153c0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80153aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153ae:	f383 8811 	msr	BASEPRI, r3
 80153b2:	f3bf 8f6f 	isb	sy
 80153b6:	f3bf 8f4f 	dsb	sy
 80153ba:	60fb      	str	r3, [r7, #12]
}
 80153bc:	bf00      	nop
 80153be:	e7fe      	b.n	80153be <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80153c0:	2202      	movs	r2, #2
 80153c2:	2100      	movs	r1, #0
 80153c4:	6878      	ldr	r0, [r7, #4]
 80153c6:	f7ff ff45 	bl	8015254 <xQueueGenericCreate>
 80153ca:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80153cc:	697b      	ldr	r3, [r7, #20]
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d002      	beq.n	80153d8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80153d2:	697b      	ldr	r3, [r7, #20]
 80153d4:	683a      	ldr	r2, [r7, #0]
 80153d6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80153d8:	697b      	ldr	r3, [r7, #20]
	}
 80153da:	4618      	mov	r0, r3
 80153dc:	3718      	adds	r7, #24
 80153de:	46bd      	mov	sp, r7
 80153e0:	bd80      	pop	{r7, pc}
	...

080153e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80153e4:	b580      	push	{r7, lr}
 80153e6:	b08e      	sub	sp, #56	; 0x38
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	60f8      	str	r0, [r7, #12]
 80153ec:	60b9      	str	r1, [r7, #8]
 80153ee:	607a      	str	r2, [r7, #4]
 80153f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80153f2:	2300      	movs	r3, #0
 80153f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80153f6:	68fb      	ldr	r3, [r7, #12]
 80153f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80153fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d10a      	bne.n	8015416 <xQueueGenericSend+0x32>
	__asm volatile
 8015400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015404:	f383 8811 	msr	BASEPRI, r3
 8015408:	f3bf 8f6f 	isb	sy
 801540c:	f3bf 8f4f 	dsb	sy
 8015410:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015412:	bf00      	nop
 8015414:	e7fe      	b.n	8015414 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015416:	68bb      	ldr	r3, [r7, #8]
 8015418:	2b00      	cmp	r3, #0
 801541a:	d103      	bne.n	8015424 <xQueueGenericSend+0x40>
 801541c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801541e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015420:	2b00      	cmp	r3, #0
 8015422:	d101      	bne.n	8015428 <xQueueGenericSend+0x44>
 8015424:	2301      	movs	r3, #1
 8015426:	e000      	b.n	801542a <xQueueGenericSend+0x46>
 8015428:	2300      	movs	r3, #0
 801542a:	2b00      	cmp	r3, #0
 801542c:	d10a      	bne.n	8015444 <xQueueGenericSend+0x60>
	__asm volatile
 801542e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015432:	f383 8811 	msr	BASEPRI, r3
 8015436:	f3bf 8f6f 	isb	sy
 801543a:	f3bf 8f4f 	dsb	sy
 801543e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015440:	bf00      	nop
 8015442:	e7fe      	b.n	8015442 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015444:	683b      	ldr	r3, [r7, #0]
 8015446:	2b02      	cmp	r3, #2
 8015448:	d103      	bne.n	8015452 <xQueueGenericSend+0x6e>
 801544a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801544c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801544e:	2b01      	cmp	r3, #1
 8015450:	d101      	bne.n	8015456 <xQueueGenericSend+0x72>
 8015452:	2301      	movs	r3, #1
 8015454:	e000      	b.n	8015458 <xQueueGenericSend+0x74>
 8015456:	2300      	movs	r3, #0
 8015458:	2b00      	cmp	r3, #0
 801545a:	d10a      	bne.n	8015472 <xQueueGenericSend+0x8e>
	__asm volatile
 801545c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015460:	f383 8811 	msr	BASEPRI, r3
 8015464:	f3bf 8f6f 	isb	sy
 8015468:	f3bf 8f4f 	dsb	sy
 801546c:	623b      	str	r3, [r7, #32]
}
 801546e:	bf00      	nop
 8015470:	e7fe      	b.n	8015470 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015472:	f001 fce7 	bl	8016e44 <xTaskGetSchedulerState>
 8015476:	4603      	mov	r3, r0
 8015478:	2b00      	cmp	r3, #0
 801547a:	d102      	bne.n	8015482 <xQueueGenericSend+0x9e>
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	2b00      	cmp	r3, #0
 8015480:	d101      	bne.n	8015486 <xQueueGenericSend+0xa2>
 8015482:	2301      	movs	r3, #1
 8015484:	e000      	b.n	8015488 <xQueueGenericSend+0xa4>
 8015486:	2300      	movs	r3, #0
 8015488:	2b00      	cmp	r3, #0
 801548a:	d10a      	bne.n	80154a2 <xQueueGenericSend+0xbe>
	__asm volatile
 801548c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015490:	f383 8811 	msr	BASEPRI, r3
 8015494:	f3bf 8f6f 	isb	sy
 8015498:	f3bf 8f4f 	dsb	sy
 801549c:	61fb      	str	r3, [r7, #28]
}
 801549e:	bf00      	nop
 80154a0:	e7fe      	b.n	80154a0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80154a2:	f002 fb27 	bl	8017af4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80154a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80154aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80154ae:	429a      	cmp	r2, r3
 80154b0:	d302      	bcc.n	80154b8 <xQueueGenericSend+0xd4>
 80154b2:	683b      	ldr	r3, [r7, #0]
 80154b4:	2b02      	cmp	r3, #2
 80154b6:	d129      	bne.n	801550c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80154b8:	683a      	ldr	r2, [r7, #0]
 80154ba:	68b9      	ldr	r1, [r7, #8]
 80154bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80154be:	f000 fc5e 	bl	8015d7e <prvCopyDataToQueue>
 80154c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80154c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d010      	beq.n	80154ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80154cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154ce:	3324      	adds	r3, #36	; 0x24
 80154d0:	4618      	mov	r0, r3
 80154d2:	f001 fae5 	bl	8016aa0 <xTaskRemoveFromEventList>
 80154d6:	4603      	mov	r3, r0
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d013      	beq.n	8015504 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80154dc:	4b3f      	ldr	r3, [pc, #252]	; (80155dc <xQueueGenericSend+0x1f8>)
 80154de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80154e2:	601a      	str	r2, [r3, #0]
 80154e4:	f3bf 8f4f 	dsb	sy
 80154e8:	f3bf 8f6f 	isb	sy
 80154ec:	e00a      	b.n	8015504 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80154ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d007      	beq.n	8015504 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80154f4:	4b39      	ldr	r3, [pc, #228]	; (80155dc <xQueueGenericSend+0x1f8>)
 80154f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80154fa:	601a      	str	r2, [r3, #0]
 80154fc:	f3bf 8f4f 	dsb	sy
 8015500:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015504:	f002 fb26 	bl	8017b54 <vPortExitCritical>
				return pdPASS;
 8015508:	2301      	movs	r3, #1
 801550a:	e063      	b.n	80155d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	2b00      	cmp	r3, #0
 8015510:	d103      	bne.n	801551a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015512:	f002 fb1f 	bl	8017b54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8015516:	2300      	movs	r3, #0
 8015518:	e05c      	b.n	80155d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801551a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801551c:	2b00      	cmp	r3, #0
 801551e:	d106      	bne.n	801552e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015520:	f107 0314 	add.w	r3, r7, #20
 8015524:	4618      	mov	r0, r3
 8015526:	f001 fb1f 	bl	8016b68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801552a:	2301      	movs	r3, #1
 801552c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801552e:	f002 fb11 	bl	8017b54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015532:	f001 f88b 	bl	801664c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015536:	f002 fadd 	bl	8017af4 <vPortEnterCritical>
 801553a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801553c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015540:	b25b      	sxtb	r3, r3
 8015542:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015546:	d103      	bne.n	8015550 <xQueueGenericSend+0x16c>
 8015548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801554a:	2200      	movs	r2, #0
 801554c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015552:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015556:	b25b      	sxtb	r3, r3
 8015558:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801555c:	d103      	bne.n	8015566 <xQueueGenericSend+0x182>
 801555e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015560:	2200      	movs	r2, #0
 8015562:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015566:	f002 faf5 	bl	8017b54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801556a:	1d3a      	adds	r2, r7, #4
 801556c:	f107 0314 	add.w	r3, r7, #20
 8015570:	4611      	mov	r1, r2
 8015572:	4618      	mov	r0, r3
 8015574:	f001 fb0e 	bl	8016b94 <xTaskCheckForTimeOut>
 8015578:	4603      	mov	r3, r0
 801557a:	2b00      	cmp	r3, #0
 801557c:	d124      	bne.n	80155c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801557e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015580:	f000 fcf5 	bl	8015f6e <prvIsQueueFull>
 8015584:	4603      	mov	r3, r0
 8015586:	2b00      	cmp	r3, #0
 8015588:	d018      	beq.n	80155bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801558a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801558c:	3310      	adds	r3, #16
 801558e:	687a      	ldr	r2, [r7, #4]
 8015590:	4611      	mov	r1, r2
 8015592:	4618      	mov	r0, r3
 8015594:	f001 fa34 	bl	8016a00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015598:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801559a:	f000 fc80 	bl	8015e9e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801559e:	f001 f863 	bl	8016668 <xTaskResumeAll>
 80155a2:	4603      	mov	r3, r0
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	f47f af7c 	bne.w	80154a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80155aa:	4b0c      	ldr	r3, [pc, #48]	; (80155dc <xQueueGenericSend+0x1f8>)
 80155ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80155b0:	601a      	str	r2, [r3, #0]
 80155b2:	f3bf 8f4f 	dsb	sy
 80155b6:	f3bf 8f6f 	isb	sy
 80155ba:	e772      	b.n	80154a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80155bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80155be:	f000 fc6e 	bl	8015e9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80155c2:	f001 f851 	bl	8016668 <xTaskResumeAll>
 80155c6:	e76c      	b.n	80154a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80155c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80155ca:	f000 fc68 	bl	8015e9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80155ce:	f001 f84b 	bl	8016668 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80155d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80155d4:	4618      	mov	r0, r3
 80155d6:	3738      	adds	r7, #56	; 0x38
 80155d8:	46bd      	mov	sp, r7
 80155da:	bd80      	pop	{r7, pc}
 80155dc:	e000ed04 	.word	0xe000ed04

080155e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b090      	sub	sp, #64	; 0x40
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	60f8      	str	r0, [r7, #12]
 80155e8:	60b9      	str	r1, [r7, #8]
 80155ea:	607a      	str	r2, [r7, #4]
 80155ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80155f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d10a      	bne.n	801560e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80155f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155fc:	f383 8811 	msr	BASEPRI, r3
 8015600:	f3bf 8f6f 	isb	sy
 8015604:	f3bf 8f4f 	dsb	sy
 8015608:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801560a:	bf00      	nop
 801560c:	e7fe      	b.n	801560c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801560e:	68bb      	ldr	r3, [r7, #8]
 8015610:	2b00      	cmp	r3, #0
 8015612:	d103      	bne.n	801561c <xQueueGenericSendFromISR+0x3c>
 8015614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015618:	2b00      	cmp	r3, #0
 801561a:	d101      	bne.n	8015620 <xQueueGenericSendFromISR+0x40>
 801561c:	2301      	movs	r3, #1
 801561e:	e000      	b.n	8015622 <xQueueGenericSendFromISR+0x42>
 8015620:	2300      	movs	r3, #0
 8015622:	2b00      	cmp	r3, #0
 8015624:	d10a      	bne.n	801563c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8015626:	f04f 0350 	mov.w	r3, #80	; 0x50
 801562a:	f383 8811 	msr	BASEPRI, r3
 801562e:	f3bf 8f6f 	isb	sy
 8015632:	f3bf 8f4f 	dsb	sy
 8015636:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015638:	bf00      	nop
 801563a:	e7fe      	b.n	801563a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801563c:	683b      	ldr	r3, [r7, #0]
 801563e:	2b02      	cmp	r3, #2
 8015640:	d103      	bne.n	801564a <xQueueGenericSendFromISR+0x6a>
 8015642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015646:	2b01      	cmp	r3, #1
 8015648:	d101      	bne.n	801564e <xQueueGenericSendFromISR+0x6e>
 801564a:	2301      	movs	r3, #1
 801564c:	e000      	b.n	8015650 <xQueueGenericSendFromISR+0x70>
 801564e:	2300      	movs	r3, #0
 8015650:	2b00      	cmp	r3, #0
 8015652:	d10a      	bne.n	801566a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8015654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015658:	f383 8811 	msr	BASEPRI, r3
 801565c:	f3bf 8f6f 	isb	sy
 8015660:	f3bf 8f4f 	dsb	sy
 8015664:	623b      	str	r3, [r7, #32]
}
 8015666:	bf00      	nop
 8015668:	e7fe      	b.n	8015668 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801566a:	f002 fb25 	bl	8017cb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801566e:	f3ef 8211 	mrs	r2, BASEPRI
 8015672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015676:	f383 8811 	msr	BASEPRI, r3
 801567a:	f3bf 8f6f 	isb	sy
 801567e:	f3bf 8f4f 	dsb	sy
 8015682:	61fa      	str	r2, [r7, #28]
 8015684:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8015686:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015688:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801568a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801568c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801568e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015692:	429a      	cmp	r2, r3
 8015694:	d302      	bcc.n	801569c <xQueueGenericSendFromISR+0xbc>
 8015696:	683b      	ldr	r3, [r7, #0]
 8015698:	2b02      	cmp	r3, #2
 801569a:	d12f      	bne.n	80156fc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801569c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801569e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80156a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80156a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80156aa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80156ac:	683a      	ldr	r2, [r7, #0]
 80156ae:	68b9      	ldr	r1, [r7, #8]
 80156b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80156b2:	f000 fb64 	bl	8015d7e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80156b6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80156ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80156be:	d112      	bne.n	80156e6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80156c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d016      	beq.n	80156f6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80156c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156ca:	3324      	adds	r3, #36	; 0x24
 80156cc:	4618      	mov	r0, r3
 80156ce:	f001 f9e7 	bl	8016aa0 <xTaskRemoveFromEventList>
 80156d2:	4603      	mov	r3, r0
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d00e      	beq.n	80156f6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d00b      	beq.n	80156f6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	2201      	movs	r2, #1
 80156e2:	601a      	str	r2, [r3, #0]
 80156e4:	e007      	b.n	80156f6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80156e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80156ea:	3301      	adds	r3, #1
 80156ec:	b2db      	uxtb	r3, r3
 80156ee:	b25a      	sxtb	r2, r3
 80156f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80156f6:	2301      	movs	r3, #1
 80156f8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80156fa:	e001      	b.n	8015700 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80156fc:	2300      	movs	r3, #0
 80156fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015702:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015704:	697b      	ldr	r3, [r7, #20]
 8015706:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801570a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801570c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801570e:	4618      	mov	r0, r3
 8015710:	3740      	adds	r7, #64	; 0x40
 8015712:	46bd      	mov	sp, r7
 8015714:	bd80      	pop	{r7, pc}

08015716 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015716:	b580      	push	{r7, lr}
 8015718:	b08e      	sub	sp, #56	; 0x38
 801571a:	af00      	add	r7, sp, #0
 801571c:	6078      	str	r0, [r7, #4]
 801571e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8015724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015726:	2b00      	cmp	r3, #0
 8015728:	d10a      	bne.n	8015740 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801572a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801572e:	f383 8811 	msr	BASEPRI, r3
 8015732:	f3bf 8f6f 	isb	sy
 8015736:	f3bf 8f4f 	dsb	sy
 801573a:	623b      	str	r3, [r7, #32]
}
 801573c:	bf00      	nop
 801573e:	e7fe      	b.n	801573e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015744:	2b00      	cmp	r3, #0
 8015746:	d00a      	beq.n	801575e <xQueueGiveFromISR+0x48>
	__asm volatile
 8015748:	f04f 0350 	mov.w	r3, #80	; 0x50
 801574c:	f383 8811 	msr	BASEPRI, r3
 8015750:	f3bf 8f6f 	isb	sy
 8015754:	f3bf 8f4f 	dsb	sy
 8015758:	61fb      	str	r3, [r7, #28]
}
 801575a:	bf00      	nop
 801575c:	e7fe      	b.n	801575c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801575e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015760:	681b      	ldr	r3, [r3, #0]
 8015762:	2b00      	cmp	r3, #0
 8015764:	d103      	bne.n	801576e <xQueueGiveFromISR+0x58>
 8015766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015768:	689b      	ldr	r3, [r3, #8]
 801576a:	2b00      	cmp	r3, #0
 801576c:	d101      	bne.n	8015772 <xQueueGiveFromISR+0x5c>
 801576e:	2301      	movs	r3, #1
 8015770:	e000      	b.n	8015774 <xQueueGiveFromISR+0x5e>
 8015772:	2300      	movs	r3, #0
 8015774:	2b00      	cmp	r3, #0
 8015776:	d10a      	bne.n	801578e <xQueueGiveFromISR+0x78>
	__asm volatile
 8015778:	f04f 0350 	mov.w	r3, #80	; 0x50
 801577c:	f383 8811 	msr	BASEPRI, r3
 8015780:	f3bf 8f6f 	isb	sy
 8015784:	f3bf 8f4f 	dsb	sy
 8015788:	61bb      	str	r3, [r7, #24]
}
 801578a:	bf00      	nop
 801578c:	e7fe      	b.n	801578c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801578e:	f002 fa93 	bl	8017cb8 <vPortValidateInterruptPriority>
	__asm volatile
 8015792:	f3ef 8211 	mrs	r2, BASEPRI
 8015796:	f04f 0350 	mov.w	r3, #80	; 0x50
 801579a:	f383 8811 	msr	BASEPRI, r3
 801579e:	f3bf 8f6f 	isb	sy
 80157a2:	f3bf 8f4f 	dsb	sy
 80157a6:	617a      	str	r2, [r7, #20]
 80157a8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80157aa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80157ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80157ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80157b2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80157b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80157b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80157ba:	429a      	cmp	r2, r3
 80157bc:	d22b      	bcs.n	8015816 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80157be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80157c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80157c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157ca:	1c5a      	adds	r2, r3, #1
 80157cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157ce:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80157d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80157d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80157d8:	d112      	bne.n	8015800 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80157da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d016      	beq.n	8015810 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80157e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157e4:	3324      	adds	r3, #36	; 0x24
 80157e6:	4618      	mov	r0, r3
 80157e8:	f001 f95a 	bl	8016aa0 <xTaskRemoveFromEventList>
 80157ec:	4603      	mov	r3, r0
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d00e      	beq.n	8015810 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80157f2:	683b      	ldr	r3, [r7, #0]
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d00b      	beq.n	8015810 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80157f8:	683b      	ldr	r3, [r7, #0]
 80157fa:	2201      	movs	r2, #1
 80157fc:	601a      	str	r2, [r3, #0]
 80157fe:	e007      	b.n	8015810 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015800:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015804:	3301      	adds	r3, #1
 8015806:	b2db      	uxtb	r3, r3
 8015808:	b25a      	sxtb	r2, r3
 801580a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801580c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015810:	2301      	movs	r3, #1
 8015812:	637b      	str	r3, [r7, #52]	; 0x34
 8015814:	e001      	b.n	801581a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015816:	2300      	movs	r3, #0
 8015818:	637b      	str	r3, [r7, #52]	; 0x34
 801581a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801581c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	f383 8811 	msr	BASEPRI, r3
}
 8015824:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015828:	4618      	mov	r0, r3
 801582a:	3738      	adds	r7, #56	; 0x38
 801582c:	46bd      	mov	sp, r7
 801582e:	bd80      	pop	{r7, pc}

08015830 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015830:	b580      	push	{r7, lr}
 8015832:	b08c      	sub	sp, #48	; 0x30
 8015834:	af00      	add	r7, sp, #0
 8015836:	60f8      	str	r0, [r7, #12]
 8015838:	60b9      	str	r1, [r7, #8]
 801583a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801583c:	2300      	movs	r3, #0
 801583e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015840:	68fb      	ldr	r3, [r7, #12]
 8015842:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015846:	2b00      	cmp	r3, #0
 8015848:	d10a      	bne.n	8015860 <xQueueReceive+0x30>
	__asm volatile
 801584a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801584e:	f383 8811 	msr	BASEPRI, r3
 8015852:	f3bf 8f6f 	isb	sy
 8015856:	f3bf 8f4f 	dsb	sy
 801585a:	623b      	str	r3, [r7, #32]
}
 801585c:	bf00      	nop
 801585e:	e7fe      	b.n	801585e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015860:	68bb      	ldr	r3, [r7, #8]
 8015862:	2b00      	cmp	r3, #0
 8015864:	d103      	bne.n	801586e <xQueueReceive+0x3e>
 8015866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801586a:	2b00      	cmp	r3, #0
 801586c:	d101      	bne.n	8015872 <xQueueReceive+0x42>
 801586e:	2301      	movs	r3, #1
 8015870:	e000      	b.n	8015874 <xQueueReceive+0x44>
 8015872:	2300      	movs	r3, #0
 8015874:	2b00      	cmp	r3, #0
 8015876:	d10a      	bne.n	801588e <xQueueReceive+0x5e>
	__asm volatile
 8015878:	f04f 0350 	mov.w	r3, #80	; 0x50
 801587c:	f383 8811 	msr	BASEPRI, r3
 8015880:	f3bf 8f6f 	isb	sy
 8015884:	f3bf 8f4f 	dsb	sy
 8015888:	61fb      	str	r3, [r7, #28]
}
 801588a:	bf00      	nop
 801588c:	e7fe      	b.n	801588c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801588e:	f001 fad9 	bl	8016e44 <xTaskGetSchedulerState>
 8015892:	4603      	mov	r3, r0
 8015894:	2b00      	cmp	r3, #0
 8015896:	d102      	bne.n	801589e <xQueueReceive+0x6e>
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	2b00      	cmp	r3, #0
 801589c:	d101      	bne.n	80158a2 <xQueueReceive+0x72>
 801589e:	2301      	movs	r3, #1
 80158a0:	e000      	b.n	80158a4 <xQueueReceive+0x74>
 80158a2:	2300      	movs	r3, #0
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d10a      	bne.n	80158be <xQueueReceive+0x8e>
	__asm volatile
 80158a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158ac:	f383 8811 	msr	BASEPRI, r3
 80158b0:	f3bf 8f6f 	isb	sy
 80158b4:	f3bf 8f4f 	dsb	sy
 80158b8:	61bb      	str	r3, [r7, #24]
}
 80158ba:	bf00      	nop
 80158bc:	e7fe      	b.n	80158bc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80158be:	f002 f919 	bl	8017af4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80158c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80158c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80158c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d01f      	beq.n	801590e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80158ce:	68b9      	ldr	r1, [r7, #8]
 80158d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80158d2:	f000 fabe 	bl	8015e52 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80158d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158d8:	1e5a      	subs	r2, r3, #1
 80158da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80158de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158e0:	691b      	ldr	r3, [r3, #16]
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d00f      	beq.n	8015906 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80158e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158e8:	3310      	adds	r3, #16
 80158ea:	4618      	mov	r0, r3
 80158ec:	f001 f8d8 	bl	8016aa0 <xTaskRemoveFromEventList>
 80158f0:	4603      	mov	r3, r0
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d007      	beq.n	8015906 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80158f6:	4b3d      	ldr	r3, [pc, #244]	; (80159ec <xQueueReceive+0x1bc>)
 80158f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80158fc:	601a      	str	r2, [r3, #0]
 80158fe:	f3bf 8f4f 	dsb	sy
 8015902:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015906:	f002 f925 	bl	8017b54 <vPortExitCritical>
				return pdPASS;
 801590a:	2301      	movs	r3, #1
 801590c:	e069      	b.n	80159e2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d103      	bne.n	801591c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015914:	f002 f91e 	bl	8017b54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015918:	2300      	movs	r3, #0
 801591a:	e062      	b.n	80159e2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801591c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801591e:	2b00      	cmp	r3, #0
 8015920:	d106      	bne.n	8015930 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015922:	f107 0310 	add.w	r3, r7, #16
 8015926:	4618      	mov	r0, r3
 8015928:	f001 f91e 	bl	8016b68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801592c:	2301      	movs	r3, #1
 801592e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015930:	f002 f910 	bl	8017b54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015934:	f000 fe8a 	bl	801664c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015938:	f002 f8dc 	bl	8017af4 <vPortEnterCritical>
 801593c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801593e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015942:	b25b      	sxtb	r3, r3
 8015944:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015948:	d103      	bne.n	8015952 <xQueueReceive+0x122>
 801594a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801594c:	2200      	movs	r2, #0
 801594e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015954:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015958:	b25b      	sxtb	r3, r3
 801595a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801595e:	d103      	bne.n	8015968 <xQueueReceive+0x138>
 8015960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015962:	2200      	movs	r2, #0
 8015964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015968:	f002 f8f4 	bl	8017b54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801596c:	1d3a      	adds	r2, r7, #4
 801596e:	f107 0310 	add.w	r3, r7, #16
 8015972:	4611      	mov	r1, r2
 8015974:	4618      	mov	r0, r3
 8015976:	f001 f90d 	bl	8016b94 <xTaskCheckForTimeOut>
 801597a:	4603      	mov	r3, r0
 801597c:	2b00      	cmp	r3, #0
 801597e:	d123      	bne.n	80159c8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015982:	f000 fade 	bl	8015f42 <prvIsQueueEmpty>
 8015986:	4603      	mov	r3, r0
 8015988:	2b00      	cmp	r3, #0
 801598a:	d017      	beq.n	80159bc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801598c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801598e:	3324      	adds	r3, #36	; 0x24
 8015990:	687a      	ldr	r2, [r7, #4]
 8015992:	4611      	mov	r1, r2
 8015994:	4618      	mov	r0, r3
 8015996:	f001 f833 	bl	8016a00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801599a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801599c:	f000 fa7f 	bl	8015e9e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80159a0:	f000 fe62 	bl	8016668 <xTaskResumeAll>
 80159a4:	4603      	mov	r3, r0
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d189      	bne.n	80158be <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80159aa:	4b10      	ldr	r3, [pc, #64]	; (80159ec <xQueueReceive+0x1bc>)
 80159ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80159b0:	601a      	str	r2, [r3, #0]
 80159b2:	f3bf 8f4f 	dsb	sy
 80159b6:	f3bf 8f6f 	isb	sy
 80159ba:	e780      	b.n	80158be <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80159bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80159be:	f000 fa6e 	bl	8015e9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80159c2:	f000 fe51 	bl	8016668 <xTaskResumeAll>
 80159c6:	e77a      	b.n	80158be <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80159c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80159ca:	f000 fa68 	bl	8015e9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80159ce:	f000 fe4b 	bl	8016668 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80159d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80159d4:	f000 fab5 	bl	8015f42 <prvIsQueueEmpty>
 80159d8:	4603      	mov	r3, r0
 80159da:	2b00      	cmp	r3, #0
 80159dc:	f43f af6f 	beq.w	80158be <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80159e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80159e2:	4618      	mov	r0, r3
 80159e4:	3730      	adds	r7, #48	; 0x30
 80159e6:	46bd      	mov	sp, r7
 80159e8:	bd80      	pop	{r7, pc}
 80159ea:	bf00      	nop
 80159ec:	e000ed04 	.word	0xe000ed04

080159f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80159f0:	b580      	push	{r7, lr}
 80159f2:	b08e      	sub	sp, #56	; 0x38
 80159f4:	af00      	add	r7, sp, #0
 80159f6:	6078      	str	r0, [r7, #4]
 80159f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80159fa:	2300      	movs	r3, #0
 80159fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8015a02:	2300      	movs	r3, #0
 8015a04:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d10a      	bne.n	8015a22 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8015a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a10:	f383 8811 	msr	BASEPRI, r3
 8015a14:	f3bf 8f6f 	isb	sy
 8015a18:	f3bf 8f4f 	dsb	sy
 8015a1c:	623b      	str	r3, [r7, #32]
}
 8015a1e:	bf00      	nop
 8015a20:	e7fe      	b.n	8015a20 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	d00a      	beq.n	8015a40 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8015a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a2e:	f383 8811 	msr	BASEPRI, r3
 8015a32:	f3bf 8f6f 	isb	sy
 8015a36:	f3bf 8f4f 	dsb	sy
 8015a3a:	61fb      	str	r3, [r7, #28]
}
 8015a3c:	bf00      	nop
 8015a3e:	e7fe      	b.n	8015a3e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015a40:	f001 fa00 	bl	8016e44 <xTaskGetSchedulerState>
 8015a44:	4603      	mov	r3, r0
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d102      	bne.n	8015a50 <xQueueSemaphoreTake+0x60>
 8015a4a:	683b      	ldr	r3, [r7, #0]
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d101      	bne.n	8015a54 <xQueueSemaphoreTake+0x64>
 8015a50:	2301      	movs	r3, #1
 8015a52:	e000      	b.n	8015a56 <xQueueSemaphoreTake+0x66>
 8015a54:	2300      	movs	r3, #0
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d10a      	bne.n	8015a70 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8015a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a5e:	f383 8811 	msr	BASEPRI, r3
 8015a62:	f3bf 8f6f 	isb	sy
 8015a66:	f3bf 8f4f 	dsb	sy
 8015a6a:	61bb      	str	r3, [r7, #24]
}
 8015a6c:	bf00      	nop
 8015a6e:	e7fe      	b.n	8015a6e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015a70:	f002 f840 	bl	8017af4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8015a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a78:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8015a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d024      	beq.n	8015aca <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8015a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a82:	1e5a      	subs	r2, r3, #1
 8015a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a86:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a8a:	681b      	ldr	r3, [r3, #0]
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d104      	bne.n	8015a9a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8015a90:	f001 fb4e 	bl	8017130 <pvTaskIncrementMutexHeldCount>
 8015a94:	4602      	mov	r2, r0
 8015a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a98:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a9c:	691b      	ldr	r3, [r3, #16]
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d00f      	beq.n	8015ac2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015aa4:	3310      	adds	r3, #16
 8015aa6:	4618      	mov	r0, r3
 8015aa8:	f000 fffa 	bl	8016aa0 <xTaskRemoveFromEventList>
 8015aac:	4603      	mov	r3, r0
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d007      	beq.n	8015ac2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015ab2:	4b54      	ldr	r3, [pc, #336]	; (8015c04 <xQueueSemaphoreTake+0x214>)
 8015ab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ab8:	601a      	str	r2, [r3, #0]
 8015aba:	f3bf 8f4f 	dsb	sy
 8015abe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015ac2:	f002 f847 	bl	8017b54 <vPortExitCritical>
				return pdPASS;
 8015ac6:	2301      	movs	r3, #1
 8015ac8:	e097      	b.n	8015bfa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015aca:	683b      	ldr	r3, [r7, #0]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d111      	bne.n	8015af4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8015ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d00a      	beq.n	8015aec <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8015ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ada:	f383 8811 	msr	BASEPRI, r3
 8015ade:	f3bf 8f6f 	isb	sy
 8015ae2:	f3bf 8f4f 	dsb	sy
 8015ae6:	617b      	str	r3, [r7, #20]
}
 8015ae8:	bf00      	nop
 8015aea:	e7fe      	b.n	8015aea <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8015aec:	f002 f832 	bl	8017b54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015af0:	2300      	movs	r3, #0
 8015af2:	e082      	b.n	8015bfa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d106      	bne.n	8015b08 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015afa:	f107 030c 	add.w	r3, r7, #12
 8015afe:	4618      	mov	r0, r3
 8015b00:	f001 f832 	bl	8016b68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015b04:	2301      	movs	r3, #1
 8015b06:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015b08:	f002 f824 	bl	8017b54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015b0c:	f000 fd9e 	bl	801664c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015b10:	f001 fff0 	bl	8017af4 <vPortEnterCritical>
 8015b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015b1a:	b25b      	sxtb	r3, r3
 8015b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015b20:	d103      	bne.n	8015b2a <xQueueSemaphoreTake+0x13a>
 8015b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b24:	2200      	movs	r2, #0
 8015b26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015b30:	b25b      	sxtb	r3, r3
 8015b32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015b36:	d103      	bne.n	8015b40 <xQueueSemaphoreTake+0x150>
 8015b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b3a:	2200      	movs	r2, #0
 8015b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015b40:	f002 f808 	bl	8017b54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015b44:	463a      	mov	r2, r7
 8015b46:	f107 030c 	add.w	r3, r7, #12
 8015b4a:	4611      	mov	r1, r2
 8015b4c:	4618      	mov	r0, r3
 8015b4e:	f001 f821 	bl	8016b94 <xTaskCheckForTimeOut>
 8015b52:	4603      	mov	r3, r0
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d132      	bne.n	8015bbe <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015b58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015b5a:	f000 f9f2 	bl	8015f42 <prvIsQueueEmpty>
 8015b5e:	4603      	mov	r3, r0
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d026      	beq.n	8015bb2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	d109      	bne.n	8015b80 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8015b6c:	f001 ffc2 	bl	8017af4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b72:	689b      	ldr	r3, [r3, #8]
 8015b74:	4618      	mov	r0, r3
 8015b76:	f001 f983 	bl	8016e80 <xTaskPriorityInherit>
 8015b7a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8015b7c:	f001 ffea 	bl	8017b54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b82:	3324      	adds	r3, #36	; 0x24
 8015b84:	683a      	ldr	r2, [r7, #0]
 8015b86:	4611      	mov	r1, r2
 8015b88:	4618      	mov	r0, r3
 8015b8a:	f000 ff39 	bl	8016a00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015b8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015b90:	f000 f985 	bl	8015e9e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015b94:	f000 fd68 	bl	8016668 <xTaskResumeAll>
 8015b98:	4603      	mov	r3, r0
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	f47f af68 	bne.w	8015a70 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8015ba0:	4b18      	ldr	r3, [pc, #96]	; (8015c04 <xQueueSemaphoreTake+0x214>)
 8015ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ba6:	601a      	str	r2, [r3, #0]
 8015ba8:	f3bf 8f4f 	dsb	sy
 8015bac:	f3bf 8f6f 	isb	sy
 8015bb0:	e75e      	b.n	8015a70 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8015bb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015bb4:	f000 f973 	bl	8015e9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015bb8:	f000 fd56 	bl	8016668 <xTaskResumeAll>
 8015bbc:	e758      	b.n	8015a70 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8015bbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015bc0:	f000 f96d 	bl	8015e9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015bc4:	f000 fd50 	bl	8016668 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015bc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015bca:	f000 f9ba 	bl	8015f42 <prvIsQueueEmpty>
 8015bce:	4603      	mov	r3, r0
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	f43f af4d 	beq.w	8015a70 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8015bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d00d      	beq.n	8015bf8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8015bdc:	f001 ff8a 	bl	8017af4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8015be0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015be2:	f000 f8b4 	bl	8015d4e <prvGetDisinheritPriorityAfterTimeout>
 8015be6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8015be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bea:	689b      	ldr	r3, [r3, #8]
 8015bec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015bee:	4618      	mov	r0, r3
 8015bf0:	f001 fa1c 	bl	801702c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8015bf4:	f001 ffae 	bl	8017b54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015bf8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	3738      	adds	r7, #56	; 0x38
 8015bfe:	46bd      	mov	sp, r7
 8015c00:	bd80      	pop	{r7, pc}
 8015c02:	bf00      	nop
 8015c04:	e000ed04 	.word	0xe000ed04

08015c08 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015c08:	b580      	push	{r7, lr}
 8015c0a:	b08e      	sub	sp, #56	; 0x38
 8015c0c:	af00      	add	r7, sp, #0
 8015c0e:	60f8      	str	r0, [r7, #12]
 8015c10:	60b9      	str	r1, [r7, #8]
 8015c12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015c14:	68fb      	ldr	r3, [r7, #12]
 8015c16:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d10a      	bne.n	8015c34 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8015c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c22:	f383 8811 	msr	BASEPRI, r3
 8015c26:	f3bf 8f6f 	isb	sy
 8015c2a:	f3bf 8f4f 	dsb	sy
 8015c2e:	623b      	str	r3, [r7, #32]
}
 8015c30:	bf00      	nop
 8015c32:	e7fe      	b.n	8015c32 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015c34:	68bb      	ldr	r3, [r7, #8]
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d103      	bne.n	8015c42 <xQueueReceiveFromISR+0x3a>
 8015c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d101      	bne.n	8015c46 <xQueueReceiveFromISR+0x3e>
 8015c42:	2301      	movs	r3, #1
 8015c44:	e000      	b.n	8015c48 <xQueueReceiveFromISR+0x40>
 8015c46:	2300      	movs	r3, #0
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d10a      	bne.n	8015c62 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8015c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c50:	f383 8811 	msr	BASEPRI, r3
 8015c54:	f3bf 8f6f 	isb	sy
 8015c58:	f3bf 8f4f 	dsb	sy
 8015c5c:	61fb      	str	r3, [r7, #28]
}
 8015c5e:	bf00      	nop
 8015c60:	e7fe      	b.n	8015c60 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015c62:	f002 f829 	bl	8017cb8 <vPortValidateInterruptPriority>
	__asm volatile
 8015c66:	f3ef 8211 	mrs	r2, BASEPRI
 8015c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c6e:	f383 8811 	msr	BASEPRI, r3
 8015c72:	f3bf 8f6f 	isb	sy
 8015c76:	f3bf 8f4f 	dsb	sy
 8015c7a:	61ba      	str	r2, [r7, #24]
 8015c7c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8015c7e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015c80:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015c86:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d02f      	beq.n	8015cee <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8015c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015c94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015c98:	68b9      	ldr	r1, [r7, #8]
 8015c9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c9c:	f000 f8d9 	bl	8015e52 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ca2:	1e5a      	subs	r2, r3, #1
 8015ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ca6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8015ca8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015cac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015cb0:	d112      	bne.n	8015cd8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cb4:	691b      	ldr	r3, [r3, #16]
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d016      	beq.n	8015ce8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cbc:	3310      	adds	r3, #16
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	f000 feee 	bl	8016aa0 <xTaskRemoveFromEventList>
 8015cc4:	4603      	mov	r3, r0
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d00e      	beq.n	8015ce8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d00b      	beq.n	8015ce8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	2201      	movs	r2, #1
 8015cd4:	601a      	str	r2, [r3, #0]
 8015cd6:	e007      	b.n	8015ce8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8015cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015cdc:	3301      	adds	r3, #1
 8015cde:	b2db      	uxtb	r3, r3
 8015ce0:	b25a      	sxtb	r2, r3
 8015ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8015ce8:	2301      	movs	r3, #1
 8015cea:	637b      	str	r3, [r7, #52]	; 0x34
 8015cec:	e001      	b.n	8015cf2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8015cee:	2300      	movs	r3, #0
 8015cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8015cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cf4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8015cf6:	693b      	ldr	r3, [r7, #16]
 8015cf8:	f383 8811 	msr	BASEPRI, r3
}
 8015cfc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015d00:	4618      	mov	r0, r3
 8015d02:	3738      	adds	r7, #56	; 0x38
 8015d04:	46bd      	mov	sp, r7
 8015d06:	bd80      	pop	{r7, pc}

08015d08 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8015d08:	b580      	push	{r7, lr}
 8015d0a:	b084      	sub	sp, #16
 8015d0c:	af00      	add	r7, sp, #0
 8015d0e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d10a      	bne.n	8015d30 <vQueueDelete+0x28>
	__asm volatile
 8015d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d1e:	f383 8811 	msr	BASEPRI, r3
 8015d22:	f3bf 8f6f 	isb	sy
 8015d26:	f3bf 8f4f 	dsb	sy
 8015d2a:	60bb      	str	r3, [r7, #8]
}
 8015d2c:	bf00      	nop
 8015d2e:	e7fe      	b.n	8015d2e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8015d30:	68f8      	ldr	r0, [r7, #12]
 8015d32:	f000 f95f 	bl	8015ff4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d102      	bne.n	8015d46 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8015d40:	68f8      	ldr	r0, [r7, #12]
 8015d42:	f002 f8c5 	bl	8017ed0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8015d46:	bf00      	nop
 8015d48:	3710      	adds	r7, #16
 8015d4a:	46bd      	mov	sp, r7
 8015d4c:	bd80      	pop	{r7, pc}

08015d4e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8015d4e:	b480      	push	{r7}
 8015d50:	b085      	sub	sp, #20
 8015d52:	af00      	add	r7, sp, #0
 8015d54:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d006      	beq.n	8015d6c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d62:	681b      	ldr	r3, [r3, #0]
 8015d64:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8015d68:	60fb      	str	r3, [r7, #12]
 8015d6a:	e001      	b.n	8015d70 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8015d6c:	2300      	movs	r3, #0
 8015d6e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8015d70:	68fb      	ldr	r3, [r7, #12]
	}
 8015d72:	4618      	mov	r0, r3
 8015d74:	3714      	adds	r7, #20
 8015d76:	46bd      	mov	sp, r7
 8015d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d7c:	4770      	bx	lr

08015d7e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015d7e:	b580      	push	{r7, lr}
 8015d80:	b086      	sub	sp, #24
 8015d82:	af00      	add	r7, sp, #0
 8015d84:	60f8      	str	r0, [r7, #12]
 8015d86:	60b9      	str	r1, [r7, #8]
 8015d88:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015d8a:	2300      	movs	r3, #0
 8015d8c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015d8e:	68fb      	ldr	r3, [r7, #12]
 8015d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d92:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015d94:	68fb      	ldr	r3, [r7, #12]
 8015d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d10d      	bne.n	8015db8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	681b      	ldr	r3, [r3, #0]
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d14d      	bne.n	8015e40 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015da4:	68fb      	ldr	r3, [r7, #12]
 8015da6:	689b      	ldr	r3, [r3, #8]
 8015da8:	4618      	mov	r0, r3
 8015daa:	f001 f8d1 	bl	8016f50 <xTaskPriorityDisinherit>
 8015dae:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8015db0:	68fb      	ldr	r3, [r7, #12]
 8015db2:	2200      	movs	r2, #0
 8015db4:	609a      	str	r2, [r3, #8]
 8015db6:	e043      	b.n	8015e40 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d119      	bne.n	8015df2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	6858      	ldr	r0, [r3, #4]
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015dc6:	461a      	mov	r2, r3
 8015dc8:	68b9      	ldr	r1, [r7, #8]
 8015dca:	f003 ffa7 	bl	8019d1c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015dce:	68fb      	ldr	r3, [r7, #12]
 8015dd0:	685a      	ldr	r2, [r3, #4]
 8015dd2:	68fb      	ldr	r3, [r7, #12]
 8015dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015dd6:	441a      	add	r2, r3
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015ddc:	68fb      	ldr	r3, [r7, #12]
 8015dde:	685a      	ldr	r2, [r3, #4]
 8015de0:	68fb      	ldr	r3, [r7, #12]
 8015de2:	689b      	ldr	r3, [r3, #8]
 8015de4:	429a      	cmp	r2, r3
 8015de6:	d32b      	bcc.n	8015e40 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	681a      	ldr	r2, [r3, #0]
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	605a      	str	r2, [r3, #4]
 8015df0:	e026      	b.n	8015e40 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015df2:	68fb      	ldr	r3, [r7, #12]
 8015df4:	68d8      	ldr	r0, [r3, #12]
 8015df6:	68fb      	ldr	r3, [r7, #12]
 8015df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015dfa:	461a      	mov	r2, r3
 8015dfc:	68b9      	ldr	r1, [r7, #8]
 8015dfe:	f003 ff8d 	bl	8019d1c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	68da      	ldr	r2, [r3, #12]
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e0a:	425b      	negs	r3, r3
 8015e0c:	441a      	add	r2, r3
 8015e0e:	68fb      	ldr	r3, [r7, #12]
 8015e10:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015e12:	68fb      	ldr	r3, [r7, #12]
 8015e14:	68da      	ldr	r2, [r3, #12]
 8015e16:	68fb      	ldr	r3, [r7, #12]
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	429a      	cmp	r2, r3
 8015e1c:	d207      	bcs.n	8015e2e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015e1e:	68fb      	ldr	r3, [r7, #12]
 8015e20:	689a      	ldr	r2, [r3, #8]
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e26:	425b      	negs	r3, r3
 8015e28:	441a      	add	r2, r3
 8015e2a:	68fb      	ldr	r3, [r7, #12]
 8015e2c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	2b02      	cmp	r3, #2
 8015e32:	d105      	bne.n	8015e40 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015e34:	693b      	ldr	r3, [r7, #16]
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d002      	beq.n	8015e40 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015e3a:	693b      	ldr	r3, [r7, #16]
 8015e3c:	3b01      	subs	r3, #1
 8015e3e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015e40:	693b      	ldr	r3, [r7, #16]
 8015e42:	1c5a      	adds	r2, r3, #1
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8015e48:	697b      	ldr	r3, [r7, #20]
}
 8015e4a:	4618      	mov	r0, r3
 8015e4c:	3718      	adds	r7, #24
 8015e4e:	46bd      	mov	sp, r7
 8015e50:	bd80      	pop	{r7, pc}

08015e52 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015e52:	b580      	push	{r7, lr}
 8015e54:	b082      	sub	sp, #8
 8015e56:	af00      	add	r7, sp, #0
 8015e58:	6078      	str	r0, [r7, #4]
 8015e5a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d018      	beq.n	8015e96 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	68da      	ldr	r2, [r3, #12]
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e6c:	441a      	add	r2, r3
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	68da      	ldr	r2, [r3, #12]
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	689b      	ldr	r3, [r3, #8]
 8015e7a:	429a      	cmp	r2, r3
 8015e7c:	d303      	bcc.n	8015e86 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	681a      	ldr	r2, [r3, #0]
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	68d9      	ldr	r1, [r3, #12]
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e8e:	461a      	mov	r2, r3
 8015e90:	6838      	ldr	r0, [r7, #0]
 8015e92:	f003 ff43 	bl	8019d1c <memcpy>
	}
}
 8015e96:	bf00      	nop
 8015e98:	3708      	adds	r7, #8
 8015e9a:	46bd      	mov	sp, r7
 8015e9c:	bd80      	pop	{r7, pc}

08015e9e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015e9e:	b580      	push	{r7, lr}
 8015ea0:	b084      	sub	sp, #16
 8015ea2:	af00      	add	r7, sp, #0
 8015ea4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015ea6:	f001 fe25 	bl	8017af4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015eb0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015eb2:	e011      	b.n	8015ed8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d012      	beq.n	8015ee2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	3324      	adds	r3, #36	; 0x24
 8015ec0:	4618      	mov	r0, r3
 8015ec2:	f000 fded 	bl	8016aa0 <xTaskRemoveFromEventList>
 8015ec6:	4603      	mov	r3, r0
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d001      	beq.n	8015ed0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015ecc:	f000 fec4 	bl	8016c58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015ed0:	7bfb      	ldrb	r3, [r7, #15]
 8015ed2:	3b01      	subs	r3, #1
 8015ed4:	b2db      	uxtb	r3, r3
 8015ed6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	dce9      	bgt.n	8015eb4 <prvUnlockQueue+0x16>
 8015ee0:	e000      	b.n	8015ee4 <prvUnlockQueue+0x46>
					break;
 8015ee2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	22ff      	movs	r2, #255	; 0xff
 8015ee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8015eec:	f001 fe32 	bl	8017b54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015ef0:	f001 fe00 	bl	8017af4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015efa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015efc:	e011      	b.n	8015f22 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	691b      	ldr	r3, [r3, #16]
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d012      	beq.n	8015f2c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	3310      	adds	r3, #16
 8015f0a:	4618      	mov	r0, r3
 8015f0c:	f000 fdc8 	bl	8016aa0 <xTaskRemoveFromEventList>
 8015f10:	4603      	mov	r3, r0
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d001      	beq.n	8015f1a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015f16:	f000 fe9f 	bl	8016c58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015f1a:	7bbb      	ldrb	r3, [r7, #14]
 8015f1c:	3b01      	subs	r3, #1
 8015f1e:	b2db      	uxtb	r3, r3
 8015f20:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015f22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	dce9      	bgt.n	8015efe <prvUnlockQueue+0x60>
 8015f2a:	e000      	b.n	8015f2e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8015f2c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	22ff      	movs	r2, #255	; 0xff
 8015f32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8015f36:	f001 fe0d 	bl	8017b54 <vPortExitCritical>
}
 8015f3a:	bf00      	nop
 8015f3c:	3710      	adds	r7, #16
 8015f3e:	46bd      	mov	sp, r7
 8015f40:	bd80      	pop	{r7, pc}

08015f42 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015f42:	b580      	push	{r7, lr}
 8015f44:	b084      	sub	sp, #16
 8015f46:	af00      	add	r7, sp, #0
 8015f48:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015f4a:	f001 fdd3 	bl	8017af4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d102      	bne.n	8015f5c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8015f56:	2301      	movs	r3, #1
 8015f58:	60fb      	str	r3, [r7, #12]
 8015f5a:	e001      	b.n	8015f60 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8015f5c:	2300      	movs	r3, #0
 8015f5e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015f60:	f001 fdf8 	bl	8017b54 <vPortExitCritical>

	return xReturn;
 8015f64:	68fb      	ldr	r3, [r7, #12]
}
 8015f66:	4618      	mov	r0, r3
 8015f68:	3710      	adds	r7, #16
 8015f6a:	46bd      	mov	sp, r7
 8015f6c:	bd80      	pop	{r7, pc}

08015f6e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8015f6e:	b580      	push	{r7, lr}
 8015f70:	b084      	sub	sp, #16
 8015f72:	af00      	add	r7, sp, #0
 8015f74:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015f76:	f001 fdbd 	bl	8017af4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015f82:	429a      	cmp	r2, r3
 8015f84:	d102      	bne.n	8015f8c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8015f86:	2301      	movs	r3, #1
 8015f88:	60fb      	str	r3, [r7, #12]
 8015f8a:	e001      	b.n	8015f90 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8015f8c:	2300      	movs	r3, #0
 8015f8e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015f90:	f001 fde0 	bl	8017b54 <vPortExitCritical>

	return xReturn;
 8015f94:	68fb      	ldr	r3, [r7, #12]
}
 8015f96:	4618      	mov	r0, r3
 8015f98:	3710      	adds	r7, #16
 8015f9a:	46bd      	mov	sp, r7
 8015f9c:	bd80      	pop	{r7, pc}
	...

08015fa0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8015fa0:	b480      	push	{r7}
 8015fa2:	b085      	sub	sp, #20
 8015fa4:	af00      	add	r7, sp, #0
 8015fa6:	6078      	str	r0, [r7, #4]
 8015fa8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015faa:	2300      	movs	r3, #0
 8015fac:	60fb      	str	r3, [r7, #12]
 8015fae:	e014      	b.n	8015fda <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8015fb0:	4a0f      	ldr	r2, [pc, #60]	; (8015ff0 <vQueueAddToRegistry+0x50>)
 8015fb2:	68fb      	ldr	r3, [r7, #12]
 8015fb4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d10b      	bne.n	8015fd4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8015fbc:	490c      	ldr	r1, [pc, #48]	; (8015ff0 <vQueueAddToRegistry+0x50>)
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	683a      	ldr	r2, [r7, #0]
 8015fc2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8015fc6:	4a0a      	ldr	r2, [pc, #40]	; (8015ff0 <vQueueAddToRegistry+0x50>)
 8015fc8:	68fb      	ldr	r3, [r7, #12]
 8015fca:	00db      	lsls	r3, r3, #3
 8015fcc:	4413      	add	r3, r2
 8015fce:	687a      	ldr	r2, [r7, #4]
 8015fd0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8015fd2:	e006      	b.n	8015fe2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	3301      	adds	r3, #1
 8015fd8:	60fb      	str	r3, [r7, #12]
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	2b07      	cmp	r3, #7
 8015fde:	d9e7      	bls.n	8015fb0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8015fe0:	bf00      	nop
 8015fe2:	bf00      	nop
 8015fe4:	3714      	adds	r7, #20
 8015fe6:	46bd      	mov	sp, r7
 8015fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fec:	4770      	bx	lr
 8015fee:	bf00      	nop
 8015ff0:	20007674 	.word	0x20007674

08015ff4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8015ff4:	b480      	push	{r7}
 8015ff6:	b085      	sub	sp, #20
 8015ff8:	af00      	add	r7, sp, #0
 8015ffa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015ffc:	2300      	movs	r3, #0
 8015ffe:	60fb      	str	r3, [r7, #12]
 8016000:	e016      	b.n	8016030 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8016002:	4a10      	ldr	r2, [pc, #64]	; (8016044 <vQueueUnregisterQueue+0x50>)
 8016004:	68fb      	ldr	r3, [r7, #12]
 8016006:	00db      	lsls	r3, r3, #3
 8016008:	4413      	add	r3, r2
 801600a:	685b      	ldr	r3, [r3, #4]
 801600c:	687a      	ldr	r2, [r7, #4]
 801600e:	429a      	cmp	r2, r3
 8016010:	d10b      	bne.n	801602a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8016012:	4a0c      	ldr	r2, [pc, #48]	; (8016044 <vQueueUnregisterQueue+0x50>)
 8016014:	68fb      	ldr	r3, [r7, #12]
 8016016:	2100      	movs	r1, #0
 8016018:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801601c:	4a09      	ldr	r2, [pc, #36]	; (8016044 <vQueueUnregisterQueue+0x50>)
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	00db      	lsls	r3, r3, #3
 8016022:	4413      	add	r3, r2
 8016024:	2200      	movs	r2, #0
 8016026:	605a      	str	r2, [r3, #4]
				break;
 8016028:	e006      	b.n	8016038 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801602a:	68fb      	ldr	r3, [r7, #12]
 801602c:	3301      	adds	r3, #1
 801602e:	60fb      	str	r3, [r7, #12]
 8016030:	68fb      	ldr	r3, [r7, #12]
 8016032:	2b07      	cmp	r3, #7
 8016034:	d9e5      	bls.n	8016002 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8016036:	bf00      	nop
 8016038:	bf00      	nop
 801603a:	3714      	adds	r7, #20
 801603c:	46bd      	mov	sp, r7
 801603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016042:	4770      	bx	lr
 8016044:	20007674 	.word	0x20007674

08016048 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016048:	b580      	push	{r7, lr}
 801604a:	b086      	sub	sp, #24
 801604c:	af00      	add	r7, sp, #0
 801604e:	60f8      	str	r0, [r7, #12]
 8016050:	60b9      	str	r1, [r7, #8]
 8016052:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8016054:	68fb      	ldr	r3, [r7, #12]
 8016056:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8016058:	f001 fd4c 	bl	8017af4 <vPortEnterCritical>
 801605c:	697b      	ldr	r3, [r7, #20]
 801605e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016062:	b25b      	sxtb	r3, r3
 8016064:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016068:	d103      	bne.n	8016072 <vQueueWaitForMessageRestricted+0x2a>
 801606a:	697b      	ldr	r3, [r7, #20]
 801606c:	2200      	movs	r2, #0
 801606e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016072:	697b      	ldr	r3, [r7, #20]
 8016074:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016078:	b25b      	sxtb	r3, r3
 801607a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801607e:	d103      	bne.n	8016088 <vQueueWaitForMessageRestricted+0x40>
 8016080:	697b      	ldr	r3, [r7, #20]
 8016082:	2200      	movs	r2, #0
 8016084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016088:	f001 fd64 	bl	8017b54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801608c:	697b      	ldr	r3, [r7, #20]
 801608e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016090:	2b00      	cmp	r3, #0
 8016092:	d106      	bne.n	80160a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8016094:	697b      	ldr	r3, [r7, #20]
 8016096:	3324      	adds	r3, #36	; 0x24
 8016098:	687a      	ldr	r2, [r7, #4]
 801609a:	68b9      	ldr	r1, [r7, #8]
 801609c:	4618      	mov	r0, r3
 801609e:	f000 fcd3 	bl	8016a48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80160a2:	6978      	ldr	r0, [r7, #20]
 80160a4:	f7ff fefb 	bl	8015e9e <prvUnlockQueue>
	}
 80160a8:	bf00      	nop
 80160aa:	3718      	adds	r7, #24
 80160ac:	46bd      	mov	sp, r7
 80160ae:	bd80      	pop	{r7, pc}

080160b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80160b0:	b580      	push	{r7, lr}
 80160b2:	b08e      	sub	sp, #56	; 0x38
 80160b4:	af04      	add	r7, sp, #16
 80160b6:	60f8      	str	r0, [r7, #12]
 80160b8:	60b9      	str	r1, [r7, #8]
 80160ba:	607a      	str	r2, [r7, #4]
 80160bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80160be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d10a      	bne.n	80160da <xTaskCreateStatic+0x2a>
	__asm volatile
 80160c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160c8:	f383 8811 	msr	BASEPRI, r3
 80160cc:	f3bf 8f6f 	isb	sy
 80160d0:	f3bf 8f4f 	dsb	sy
 80160d4:	623b      	str	r3, [r7, #32]
}
 80160d6:	bf00      	nop
 80160d8:	e7fe      	b.n	80160d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80160da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d10a      	bne.n	80160f6 <xTaskCreateStatic+0x46>
	__asm volatile
 80160e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160e4:	f383 8811 	msr	BASEPRI, r3
 80160e8:	f3bf 8f6f 	isb	sy
 80160ec:	f3bf 8f4f 	dsb	sy
 80160f0:	61fb      	str	r3, [r7, #28]
}
 80160f2:	bf00      	nop
 80160f4:	e7fe      	b.n	80160f4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80160f6:	23bc      	movs	r3, #188	; 0xbc
 80160f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80160fa:	693b      	ldr	r3, [r7, #16]
 80160fc:	2bbc      	cmp	r3, #188	; 0xbc
 80160fe:	d00a      	beq.n	8016116 <xTaskCreateStatic+0x66>
	__asm volatile
 8016100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016104:	f383 8811 	msr	BASEPRI, r3
 8016108:	f3bf 8f6f 	isb	sy
 801610c:	f3bf 8f4f 	dsb	sy
 8016110:	61bb      	str	r3, [r7, #24]
}
 8016112:	bf00      	nop
 8016114:	e7fe      	b.n	8016114 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8016116:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8016118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801611a:	2b00      	cmp	r3, #0
 801611c:	d01e      	beq.n	801615c <xTaskCreateStatic+0xac>
 801611e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016120:	2b00      	cmp	r3, #0
 8016122:	d01b      	beq.n	801615c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016126:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8016128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801612a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801612c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016130:	2202      	movs	r2, #2
 8016132:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8016136:	2300      	movs	r3, #0
 8016138:	9303      	str	r3, [sp, #12]
 801613a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801613c:	9302      	str	r3, [sp, #8]
 801613e:	f107 0314 	add.w	r3, r7, #20
 8016142:	9301      	str	r3, [sp, #4]
 8016144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016146:	9300      	str	r3, [sp, #0]
 8016148:	683b      	ldr	r3, [r7, #0]
 801614a:	687a      	ldr	r2, [r7, #4]
 801614c:	68b9      	ldr	r1, [r7, #8]
 801614e:	68f8      	ldr	r0, [r7, #12]
 8016150:	f000 f850 	bl	80161f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016154:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016156:	f000 f8f3 	bl	8016340 <prvAddNewTaskToReadyList>
 801615a:	e001      	b.n	8016160 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801615c:	2300      	movs	r3, #0
 801615e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8016160:	697b      	ldr	r3, [r7, #20]
	}
 8016162:	4618      	mov	r0, r3
 8016164:	3728      	adds	r7, #40	; 0x28
 8016166:	46bd      	mov	sp, r7
 8016168:	bd80      	pop	{r7, pc}

0801616a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801616a:	b580      	push	{r7, lr}
 801616c:	b08c      	sub	sp, #48	; 0x30
 801616e:	af04      	add	r7, sp, #16
 8016170:	60f8      	str	r0, [r7, #12]
 8016172:	60b9      	str	r1, [r7, #8]
 8016174:	603b      	str	r3, [r7, #0]
 8016176:	4613      	mov	r3, r2
 8016178:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801617a:	88fb      	ldrh	r3, [r7, #6]
 801617c:	009b      	lsls	r3, r3, #2
 801617e:	4618      	mov	r0, r3
 8016180:	f001 fdda 	bl	8017d38 <pvPortMalloc>
 8016184:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016186:	697b      	ldr	r3, [r7, #20]
 8016188:	2b00      	cmp	r3, #0
 801618a:	d00e      	beq.n	80161aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801618c:	20bc      	movs	r0, #188	; 0xbc
 801618e:	f001 fdd3 	bl	8017d38 <pvPortMalloc>
 8016192:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016194:	69fb      	ldr	r3, [r7, #28]
 8016196:	2b00      	cmp	r3, #0
 8016198:	d003      	beq.n	80161a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801619a:	69fb      	ldr	r3, [r7, #28]
 801619c:	697a      	ldr	r2, [r7, #20]
 801619e:	631a      	str	r2, [r3, #48]	; 0x30
 80161a0:	e005      	b.n	80161ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80161a2:	6978      	ldr	r0, [r7, #20]
 80161a4:	f001 fe94 	bl	8017ed0 <vPortFree>
 80161a8:	e001      	b.n	80161ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80161aa:	2300      	movs	r3, #0
 80161ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80161ae:	69fb      	ldr	r3, [r7, #28]
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d017      	beq.n	80161e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80161b4:	69fb      	ldr	r3, [r7, #28]
 80161b6:	2200      	movs	r2, #0
 80161b8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80161bc:	88fa      	ldrh	r2, [r7, #6]
 80161be:	2300      	movs	r3, #0
 80161c0:	9303      	str	r3, [sp, #12]
 80161c2:	69fb      	ldr	r3, [r7, #28]
 80161c4:	9302      	str	r3, [sp, #8]
 80161c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161c8:	9301      	str	r3, [sp, #4]
 80161ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161cc:	9300      	str	r3, [sp, #0]
 80161ce:	683b      	ldr	r3, [r7, #0]
 80161d0:	68b9      	ldr	r1, [r7, #8]
 80161d2:	68f8      	ldr	r0, [r7, #12]
 80161d4:	f000 f80e 	bl	80161f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80161d8:	69f8      	ldr	r0, [r7, #28]
 80161da:	f000 f8b1 	bl	8016340 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80161de:	2301      	movs	r3, #1
 80161e0:	61bb      	str	r3, [r7, #24]
 80161e2:	e002      	b.n	80161ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80161e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80161e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80161ea:	69bb      	ldr	r3, [r7, #24]
	}
 80161ec:	4618      	mov	r0, r3
 80161ee:	3720      	adds	r7, #32
 80161f0:	46bd      	mov	sp, r7
 80161f2:	bd80      	pop	{r7, pc}

080161f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80161f4:	b580      	push	{r7, lr}
 80161f6:	b088      	sub	sp, #32
 80161f8:	af00      	add	r7, sp, #0
 80161fa:	60f8      	str	r0, [r7, #12]
 80161fc:	60b9      	str	r1, [r7, #8]
 80161fe:	607a      	str	r2, [r7, #4]
 8016200:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8016202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016204:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	009b      	lsls	r3, r3, #2
 801620a:	461a      	mov	r2, r3
 801620c:	21a5      	movs	r1, #165	; 0xa5
 801620e:	f003 fdad 	bl	8019d6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8016212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016214:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801621c:	3b01      	subs	r3, #1
 801621e:	009b      	lsls	r3, r3, #2
 8016220:	4413      	add	r3, r2
 8016222:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8016224:	69bb      	ldr	r3, [r7, #24]
 8016226:	f023 0307 	bic.w	r3, r3, #7
 801622a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801622c:	69bb      	ldr	r3, [r7, #24]
 801622e:	f003 0307 	and.w	r3, r3, #7
 8016232:	2b00      	cmp	r3, #0
 8016234:	d00a      	beq.n	801624c <prvInitialiseNewTask+0x58>
	__asm volatile
 8016236:	f04f 0350 	mov.w	r3, #80	; 0x50
 801623a:	f383 8811 	msr	BASEPRI, r3
 801623e:	f3bf 8f6f 	isb	sy
 8016242:	f3bf 8f4f 	dsb	sy
 8016246:	617b      	str	r3, [r7, #20]
}
 8016248:	bf00      	nop
 801624a:	e7fe      	b.n	801624a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801624c:	68bb      	ldr	r3, [r7, #8]
 801624e:	2b00      	cmp	r3, #0
 8016250:	d01f      	beq.n	8016292 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016252:	2300      	movs	r3, #0
 8016254:	61fb      	str	r3, [r7, #28]
 8016256:	e012      	b.n	801627e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8016258:	68ba      	ldr	r2, [r7, #8]
 801625a:	69fb      	ldr	r3, [r7, #28]
 801625c:	4413      	add	r3, r2
 801625e:	7819      	ldrb	r1, [r3, #0]
 8016260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016262:	69fb      	ldr	r3, [r7, #28]
 8016264:	4413      	add	r3, r2
 8016266:	3334      	adds	r3, #52	; 0x34
 8016268:	460a      	mov	r2, r1
 801626a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801626c:	68ba      	ldr	r2, [r7, #8]
 801626e:	69fb      	ldr	r3, [r7, #28]
 8016270:	4413      	add	r3, r2
 8016272:	781b      	ldrb	r3, [r3, #0]
 8016274:	2b00      	cmp	r3, #0
 8016276:	d006      	beq.n	8016286 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016278:	69fb      	ldr	r3, [r7, #28]
 801627a:	3301      	adds	r3, #1
 801627c:	61fb      	str	r3, [r7, #28]
 801627e:	69fb      	ldr	r3, [r7, #28]
 8016280:	2b0f      	cmp	r3, #15
 8016282:	d9e9      	bls.n	8016258 <prvInitialiseNewTask+0x64>
 8016284:	e000      	b.n	8016288 <prvInitialiseNewTask+0x94>
			{
				break;
 8016286:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801628a:	2200      	movs	r2, #0
 801628c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8016290:	e003      	b.n	801629a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8016292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016294:	2200      	movs	r2, #0
 8016296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801629a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801629c:	2b37      	cmp	r3, #55	; 0x37
 801629e:	d901      	bls.n	80162a4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80162a0:	2337      	movs	r3, #55	; 0x37
 80162a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80162a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80162a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80162aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80162ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80162b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162b2:	2200      	movs	r2, #0
 80162b4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80162b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162b8:	3304      	adds	r3, #4
 80162ba:	4618      	mov	r0, r3
 80162bc:	f7fe fe56 	bl	8014f6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80162c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162c2:	3318      	adds	r3, #24
 80162c4:	4618      	mov	r0, r3
 80162c6:	f7fe fe51 	bl	8014f6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80162ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80162ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80162d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80162d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80162da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80162de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80162e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162e2:	2200      	movs	r2, #0
 80162e4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80162e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162ea:	2200      	movs	r2, #0
 80162ec:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80162f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162f2:	3354      	adds	r3, #84	; 0x54
 80162f4:	2260      	movs	r2, #96	; 0x60
 80162f6:	2100      	movs	r1, #0
 80162f8:	4618      	mov	r0, r3
 80162fa:	f003 fd37 	bl	8019d6c <memset>
 80162fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016300:	4a0c      	ldr	r2, [pc, #48]	; (8016334 <prvInitialiseNewTask+0x140>)
 8016302:	659a      	str	r2, [r3, #88]	; 0x58
 8016304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016306:	4a0c      	ldr	r2, [pc, #48]	; (8016338 <prvInitialiseNewTask+0x144>)
 8016308:	65da      	str	r2, [r3, #92]	; 0x5c
 801630a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801630c:	4a0b      	ldr	r2, [pc, #44]	; (801633c <prvInitialiseNewTask+0x148>)
 801630e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8016310:	683a      	ldr	r2, [r7, #0]
 8016312:	68f9      	ldr	r1, [r7, #12]
 8016314:	69b8      	ldr	r0, [r7, #24]
 8016316:	f001 fac1 	bl	801789c <pxPortInitialiseStack>
 801631a:	4602      	mov	r2, r0
 801631c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801631e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8016320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016322:	2b00      	cmp	r3, #0
 8016324:	d002      	beq.n	801632c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8016326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801632a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801632c:	bf00      	nop
 801632e:	3720      	adds	r7, #32
 8016330:	46bd      	mov	sp, r7
 8016332:	bd80      	pop	{r7, pc}
 8016334:	08020e34 	.word	0x08020e34
 8016338:	08020e54 	.word	0x08020e54
 801633c:	08020e14 	.word	0x08020e14

08016340 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8016340:	b580      	push	{r7, lr}
 8016342:	b082      	sub	sp, #8
 8016344:	af00      	add	r7, sp, #0
 8016346:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8016348:	f001 fbd4 	bl	8017af4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801634c:	4b2d      	ldr	r3, [pc, #180]	; (8016404 <prvAddNewTaskToReadyList+0xc4>)
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	3301      	adds	r3, #1
 8016352:	4a2c      	ldr	r2, [pc, #176]	; (8016404 <prvAddNewTaskToReadyList+0xc4>)
 8016354:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8016356:	4b2c      	ldr	r3, [pc, #176]	; (8016408 <prvAddNewTaskToReadyList+0xc8>)
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	2b00      	cmp	r3, #0
 801635c:	d109      	bne.n	8016372 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801635e:	4a2a      	ldr	r2, [pc, #168]	; (8016408 <prvAddNewTaskToReadyList+0xc8>)
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016364:	4b27      	ldr	r3, [pc, #156]	; (8016404 <prvAddNewTaskToReadyList+0xc4>)
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	2b01      	cmp	r3, #1
 801636a:	d110      	bne.n	801638e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801636c:	f000 fc98 	bl	8016ca0 <prvInitialiseTaskLists>
 8016370:	e00d      	b.n	801638e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8016372:	4b26      	ldr	r3, [pc, #152]	; (801640c <prvAddNewTaskToReadyList+0xcc>)
 8016374:	681b      	ldr	r3, [r3, #0]
 8016376:	2b00      	cmp	r3, #0
 8016378:	d109      	bne.n	801638e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801637a:	4b23      	ldr	r3, [pc, #140]	; (8016408 <prvAddNewTaskToReadyList+0xc8>)
 801637c:	681b      	ldr	r3, [r3, #0]
 801637e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016384:	429a      	cmp	r2, r3
 8016386:	d802      	bhi.n	801638e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8016388:	4a1f      	ldr	r2, [pc, #124]	; (8016408 <prvAddNewTaskToReadyList+0xc8>)
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801638e:	4b20      	ldr	r3, [pc, #128]	; (8016410 <prvAddNewTaskToReadyList+0xd0>)
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	3301      	adds	r3, #1
 8016394:	4a1e      	ldr	r2, [pc, #120]	; (8016410 <prvAddNewTaskToReadyList+0xd0>)
 8016396:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8016398:	4b1d      	ldr	r3, [pc, #116]	; (8016410 <prvAddNewTaskToReadyList+0xd0>)
 801639a:	681a      	ldr	r2, [r3, #0]
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80163a4:	4b1b      	ldr	r3, [pc, #108]	; (8016414 <prvAddNewTaskToReadyList+0xd4>)
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	429a      	cmp	r2, r3
 80163aa:	d903      	bls.n	80163b4 <prvAddNewTaskToReadyList+0x74>
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163b0:	4a18      	ldr	r2, [pc, #96]	; (8016414 <prvAddNewTaskToReadyList+0xd4>)
 80163b2:	6013      	str	r3, [r2, #0]
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80163b8:	4613      	mov	r3, r2
 80163ba:	009b      	lsls	r3, r3, #2
 80163bc:	4413      	add	r3, r2
 80163be:	009b      	lsls	r3, r3, #2
 80163c0:	4a15      	ldr	r2, [pc, #84]	; (8016418 <prvAddNewTaskToReadyList+0xd8>)
 80163c2:	441a      	add	r2, r3
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	3304      	adds	r3, #4
 80163c8:	4619      	mov	r1, r3
 80163ca:	4610      	mov	r0, r2
 80163cc:	f7fe fddb 	bl	8014f86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80163d0:	f001 fbc0 	bl	8017b54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80163d4:	4b0d      	ldr	r3, [pc, #52]	; (801640c <prvAddNewTaskToReadyList+0xcc>)
 80163d6:	681b      	ldr	r3, [r3, #0]
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d00e      	beq.n	80163fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80163dc:	4b0a      	ldr	r3, [pc, #40]	; (8016408 <prvAddNewTaskToReadyList+0xc8>)
 80163de:	681b      	ldr	r3, [r3, #0]
 80163e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163e6:	429a      	cmp	r2, r3
 80163e8:	d207      	bcs.n	80163fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80163ea:	4b0c      	ldr	r3, [pc, #48]	; (801641c <prvAddNewTaskToReadyList+0xdc>)
 80163ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80163f0:	601a      	str	r2, [r3, #0]
 80163f2:	f3bf 8f4f 	dsb	sy
 80163f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80163fa:	bf00      	nop
 80163fc:	3708      	adds	r7, #8
 80163fe:	46bd      	mov	sp, r7
 8016400:	bd80      	pop	{r7, pc}
 8016402:	bf00      	nop
 8016404:	200014b4 	.word	0x200014b4
 8016408:	20000fe0 	.word	0x20000fe0
 801640c:	200014c0 	.word	0x200014c0
 8016410:	200014d0 	.word	0x200014d0
 8016414:	200014bc 	.word	0x200014bc
 8016418:	20000fe4 	.word	0x20000fe4
 801641c:	e000ed04 	.word	0xe000ed04

08016420 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8016420:	b580      	push	{r7, lr}
 8016422:	b084      	sub	sp, #16
 8016424:	af00      	add	r7, sp, #0
 8016426:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8016428:	f001 fb64 	bl	8017af4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	2b00      	cmp	r3, #0
 8016430:	d102      	bne.n	8016438 <vTaskDelete+0x18>
 8016432:	4b2c      	ldr	r3, [pc, #176]	; (80164e4 <vTaskDelete+0xc4>)
 8016434:	681b      	ldr	r3, [r3, #0]
 8016436:	e000      	b.n	801643a <vTaskDelete+0x1a>
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801643c:	68fb      	ldr	r3, [r7, #12]
 801643e:	3304      	adds	r3, #4
 8016440:	4618      	mov	r0, r3
 8016442:	f7fe fdfd 	bl	8015040 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016446:	68fb      	ldr	r3, [r7, #12]
 8016448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801644a:	2b00      	cmp	r3, #0
 801644c:	d004      	beq.n	8016458 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801644e:	68fb      	ldr	r3, [r7, #12]
 8016450:	3318      	adds	r3, #24
 8016452:	4618      	mov	r0, r3
 8016454:	f7fe fdf4 	bl	8015040 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8016458:	4b23      	ldr	r3, [pc, #140]	; (80164e8 <vTaskDelete+0xc8>)
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	3301      	adds	r3, #1
 801645e:	4a22      	ldr	r2, [pc, #136]	; (80164e8 <vTaskDelete+0xc8>)
 8016460:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8016462:	4b20      	ldr	r3, [pc, #128]	; (80164e4 <vTaskDelete+0xc4>)
 8016464:	681b      	ldr	r3, [r3, #0]
 8016466:	68fa      	ldr	r2, [r7, #12]
 8016468:	429a      	cmp	r2, r3
 801646a:	d10b      	bne.n	8016484 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 801646c:	68fb      	ldr	r3, [r7, #12]
 801646e:	3304      	adds	r3, #4
 8016470:	4619      	mov	r1, r3
 8016472:	481e      	ldr	r0, [pc, #120]	; (80164ec <vTaskDelete+0xcc>)
 8016474:	f7fe fd87 	bl	8014f86 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8016478:	4b1d      	ldr	r3, [pc, #116]	; (80164f0 <vTaskDelete+0xd0>)
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	3301      	adds	r3, #1
 801647e:	4a1c      	ldr	r2, [pc, #112]	; (80164f0 <vTaskDelete+0xd0>)
 8016480:	6013      	str	r3, [r2, #0]
 8016482:	e009      	b.n	8016498 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8016484:	4b1b      	ldr	r3, [pc, #108]	; (80164f4 <vTaskDelete+0xd4>)
 8016486:	681b      	ldr	r3, [r3, #0]
 8016488:	3b01      	subs	r3, #1
 801648a:	4a1a      	ldr	r2, [pc, #104]	; (80164f4 <vTaskDelete+0xd4>)
 801648c:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 801648e:	68f8      	ldr	r0, [r7, #12]
 8016490:	f000 fc74 	bl	8016d7c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8016494:	f000 fca6 	bl	8016de4 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8016498:	f001 fb5c 	bl	8017b54 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 801649c:	4b16      	ldr	r3, [pc, #88]	; (80164f8 <vTaskDelete+0xd8>)
 801649e:	681b      	ldr	r3, [r3, #0]
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d01b      	beq.n	80164dc <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 80164a4:	4b0f      	ldr	r3, [pc, #60]	; (80164e4 <vTaskDelete+0xc4>)
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	68fa      	ldr	r2, [r7, #12]
 80164aa:	429a      	cmp	r2, r3
 80164ac:	d116      	bne.n	80164dc <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80164ae:	4b13      	ldr	r3, [pc, #76]	; (80164fc <vTaskDelete+0xdc>)
 80164b0:	681b      	ldr	r3, [r3, #0]
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d00a      	beq.n	80164cc <vTaskDelete+0xac>
	__asm volatile
 80164b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164ba:	f383 8811 	msr	BASEPRI, r3
 80164be:	f3bf 8f6f 	isb	sy
 80164c2:	f3bf 8f4f 	dsb	sy
 80164c6:	60bb      	str	r3, [r7, #8]
}
 80164c8:	bf00      	nop
 80164ca:	e7fe      	b.n	80164ca <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80164cc:	4b0c      	ldr	r3, [pc, #48]	; (8016500 <vTaskDelete+0xe0>)
 80164ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80164d2:	601a      	str	r2, [r3, #0]
 80164d4:	f3bf 8f4f 	dsb	sy
 80164d8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80164dc:	bf00      	nop
 80164de:	3710      	adds	r7, #16
 80164e0:	46bd      	mov	sp, r7
 80164e2:	bd80      	pop	{r7, pc}
 80164e4:	20000fe0 	.word	0x20000fe0
 80164e8:	200014d0 	.word	0x200014d0
 80164ec:	20001488 	.word	0x20001488
 80164f0:	2000149c 	.word	0x2000149c
 80164f4:	200014b4 	.word	0x200014b4
 80164f8:	200014c0 	.word	0x200014c0
 80164fc:	200014dc 	.word	0x200014dc
 8016500:	e000ed04 	.word	0xe000ed04

08016504 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8016504:	b580      	push	{r7, lr}
 8016506:	b084      	sub	sp, #16
 8016508:	af00      	add	r7, sp, #0
 801650a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801650c:	2300      	movs	r3, #0
 801650e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	2b00      	cmp	r3, #0
 8016514:	d017      	beq.n	8016546 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8016516:	4b13      	ldr	r3, [pc, #76]	; (8016564 <vTaskDelay+0x60>)
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	2b00      	cmp	r3, #0
 801651c:	d00a      	beq.n	8016534 <vTaskDelay+0x30>
	__asm volatile
 801651e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016522:	f383 8811 	msr	BASEPRI, r3
 8016526:	f3bf 8f6f 	isb	sy
 801652a:	f3bf 8f4f 	dsb	sy
 801652e:	60bb      	str	r3, [r7, #8]
}
 8016530:	bf00      	nop
 8016532:	e7fe      	b.n	8016532 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8016534:	f000 f88a 	bl	801664c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8016538:	2100      	movs	r1, #0
 801653a:	6878      	ldr	r0, [r7, #4]
 801653c:	f000 fe0c 	bl	8017158 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8016540:	f000 f892 	bl	8016668 <xTaskResumeAll>
 8016544:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8016546:	68fb      	ldr	r3, [r7, #12]
 8016548:	2b00      	cmp	r3, #0
 801654a:	d107      	bne.n	801655c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801654c:	4b06      	ldr	r3, [pc, #24]	; (8016568 <vTaskDelay+0x64>)
 801654e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016552:	601a      	str	r2, [r3, #0]
 8016554:	f3bf 8f4f 	dsb	sy
 8016558:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801655c:	bf00      	nop
 801655e:	3710      	adds	r7, #16
 8016560:	46bd      	mov	sp, r7
 8016562:	bd80      	pop	{r7, pc}
 8016564:	200014dc 	.word	0x200014dc
 8016568:	e000ed04 	.word	0xe000ed04

0801656c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801656c:	b580      	push	{r7, lr}
 801656e:	b08a      	sub	sp, #40	; 0x28
 8016570:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8016572:	2300      	movs	r3, #0
 8016574:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8016576:	2300      	movs	r3, #0
 8016578:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801657a:	463a      	mov	r2, r7
 801657c:	1d39      	adds	r1, r7, #4
 801657e:	f107 0308 	add.w	r3, r7, #8
 8016582:	4618      	mov	r0, r3
 8016584:	f7fe fc9e 	bl	8014ec4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016588:	6839      	ldr	r1, [r7, #0]
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	68ba      	ldr	r2, [r7, #8]
 801658e:	9202      	str	r2, [sp, #8]
 8016590:	9301      	str	r3, [sp, #4]
 8016592:	2300      	movs	r3, #0
 8016594:	9300      	str	r3, [sp, #0]
 8016596:	2300      	movs	r3, #0
 8016598:	460a      	mov	r2, r1
 801659a:	4924      	ldr	r1, [pc, #144]	; (801662c <vTaskStartScheduler+0xc0>)
 801659c:	4824      	ldr	r0, [pc, #144]	; (8016630 <vTaskStartScheduler+0xc4>)
 801659e:	f7ff fd87 	bl	80160b0 <xTaskCreateStatic>
 80165a2:	4603      	mov	r3, r0
 80165a4:	4a23      	ldr	r2, [pc, #140]	; (8016634 <vTaskStartScheduler+0xc8>)
 80165a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80165a8:	4b22      	ldr	r3, [pc, #136]	; (8016634 <vTaskStartScheduler+0xc8>)
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d002      	beq.n	80165b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80165b0:	2301      	movs	r3, #1
 80165b2:	617b      	str	r3, [r7, #20]
 80165b4:	e001      	b.n	80165ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80165b6:	2300      	movs	r3, #0
 80165b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80165ba:	697b      	ldr	r3, [r7, #20]
 80165bc:	2b01      	cmp	r3, #1
 80165be:	d102      	bne.n	80165c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80165c0:	f000 fe1e 	bl	8017200 <xTimerCreateTimerTask>
 80165c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80165c6:	697b      	ldr	r3, [r7, #20]
 80165c8:	2b01      	cmp	r3, #1
 80165ca:	d11b      	bne.n	8016604 <vTaskStartScheduler+0x98>
	__asm volatile
 80165cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165d0:	f383 8811 	msr	BASEPRI, r3
 80165d4:	f3bf 8f6f 	isb	sy
 80165d8:	f3bf 8f4f 	dsb	sy
 80165dc:	613b      	str	r3, [r7, #16]
}
 80165de:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80165e0:	4b15      	ldr	r3, [pc, #84]	; (8016638 <vTaskStartScheduler+0xcc>)
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	3354      	adds	r3, #84	; 0x54
 80165e6:	4a15      	ldr	r2, [pc, #84]	; (801663c <vTaskStartScheduler+0xd0>)
 80165e8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80165ea:	4b15      	ldr	r3, [pc, #84]	; (8016640 <vTaskStartScheduler+0xd4>)
 80165ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80165f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80165f2:	4b14      	ldr	r3, [pc, #80]	; (8016644 <vTaskStartScheduler+0xd8>)
 80165f4:	2201      	movs	r2, #1
 80165f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80165f8:	4b13      	ldr	r3, [pc, #76]	; (8016648 <vTaskStartScheduler+0xdc>)
 80165fa:	2200      	movs	r2, #0
 80165fc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80165fe:	f001 f9d7 	bl	80179b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8016602:	e00e      	b.n	8016622 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8016604:	697b      	ldr	r3, [r7, #20]
 8016606:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801660a:	d10a      	bne.n	8016622 <vTaskStartScheduler+0xb6>
	__asm volatile
 801660c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016610:	f383 8811 	msr	BASEPRI, r3
 8016614:	f3bf 8f6f 	isb	sy
 8016618:	f3bf 8f4f 	dsb	sy
 801661c:	60fb      	str	r3, [r7, #12]
}
 801661e:	bf00      	nop
 8016620:	e7fe      	b.n	8016620 <vTaskStartScheduler+0xb4>
}
 8016622:	bf00      	nop
 8016624:	3718      	adds	r7, #24
 8016626:	46bd      	mov	sp, r7
 8016628:	bd80      	pop	{r7, pc}
 801662a:	bf00      	nop
 801662c:	08020a80 	.word	0x08020a80
 8016630:	08016c71 	.word	0x08016c71
 8016634:	200014d8 	.word	0x200014d8
 8016638:	20000fe0 	.word	0x20000fe0
 801663c:	200001d8 	.word	0x200001d8
 8016640:	200014d4 	.word	0x200014d4
 8016644:	200014c0 	.word	0x200014c0
 8016648:	200014b8 	.word	0x200014b8

0801664c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801664c:	b480      	push	{r7}
 801664e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8016650:	4b04      	ldr	r3, [pc, #16]	; (8016664 <vTaskSuspendAll+0x18>)
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	3301      	adds	r3, #1
 8016656:	4a03      	ldr	r2, [pc, #12]	; (8016664 <vTaskSuspendAll+0x18>)
 8016658:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801665a:	bf00      	nop
 801665c:	46bd      	mov	sp, r7
 801665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016662:	4770      	bx	lr
 8016664:	200014dc 	.word	0x200014dc

08016668 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016668:	b580      	push	{r7, lr}
 801666a:	b084      	sub	sp, #16
 801666c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801666e:	2300      	movs	r3, #0
 8016670:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8016672:	2300      	movs	r3, #0
 8016674:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8016676:	4b42      	ldr	r3, [pc, #264]	; (8016780 <xTaskResumeAll+0x118>)
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	2b00      	cmp	r3, #0
 801667c:	d10a      	bne.n	8016694 <xTaskResumeAll+0x2c>
	__asm volatile
 801667e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016682:	f383 8811 	msr	BASEPRI, r3
 8016686:	f3bf 8f6f 	isb	sy
 801668a:	f3bf 8f4f 	dsb	sy
 801668e:	603b      	str	r3, [r7, #0]
}
 8016690:	bf00      	nop
 8016692:	e7fe      	b.n	8016692 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8016694:	f001 fa2e 	bl	8017af4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016698:	4b39      	ldr	r3, [pc, #228]	; (8016780 <xTaskResumeAll+0x118>)
 801669a:	681b      	ldr	r3, [r3, #0]
 801669c:	3b01      	subs	r3, #1
 801669e:	4a38      	ldr	r2, [pc, #224]	; (8016780 <xTaskResumeAll+0x118>)
 80166a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80166a2:	4b37      	ldr	r3, [pc, #220]	; (8016780 <xTaskResumeAll+0x118>)
 80166a4:	681b      	ldr	r3, [r3, #0]
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d162      	bne.n	8016770 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80166aa:	4b36      	ldr	r3, [pc, #216]	; (8016784 <xTaskResumeAll+0x11c>)
 80166ac:	681b      	ldr	r3, [r3, #0]
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d05e      	beq.n	8016770 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80166b2:	e02f      	b.n	8016714 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80166b4:	4b34      	ldr	r3, [pc, #208]	; (8016788 <xTaskResumeAll+0x120>)
 80166b6:	68db      	ldr	r3, [r3, #12]
 80166b8:	68db      	ldr	r3, [r3, #12]
 80166ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80166bc:	68fb      	ldr	r3, [r7, #12]
 80166be:	3318      	adds	r3, #24
 80166c0:	4618      	mov	r0, r3
 80166c2:	f7fe fcbd 	bl	8015040 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80166c6:	68fb      	ldr	r3, [r7, #12]
 80166c8:	3304      	adds	r3, #4
 80166ca:	4618      	mov	r0, r3
 80166cc:	f7fe fcb8 	bl	8015040 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80166d4:	4b2d      	ldr	r3, [pc, #180]	; (801678c <xTaskResumeAll+0x124>)
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	429a      	cmp	r2, r3
 80166da:	d903      	bls.n	80166e4 <xTaskResumeAll+0x7c>
 80166dc:	68fb      	ldr	r3, [r7, #12]
 80166de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80166e0:	4a2a      	ldr	r2, [pc, #168]	; (801678c <xTaskResumeAll+0x124>)
 80166e2:	6013      	str	r3, [r2, #0]
 80166e4:	68fb      	ldr	r3, [r7, #12]
 80166e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80166e8:	4613      	mov	r3, r2
 80166ea:	009b      	lsls	r3, r3, #2
 80166ec:	4413      	add	r3, r2
 80166ee:	009b      	lsls	r3, r3, #2
 80166f0:	4a27      	ldr	r2, [pc, #156]	; (8016790 <xTaskResumeAll+0x128>)
 80166f2:	441a      	add	r2, r3
 80166f4:	68fb      	ldr	r3, [r7, #12]
 80166f6:	3304      	adds	r3, #4
 80166f8:	4619      	mov	r1, r3
 80166fa:	4610      	mov	r0, r2
 80166fc:	f7fe fc43 	bl	8014f86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016700:	68fb      	ldr	r3, [r7, #12]
 8016702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016704:	4b23      	ldr	r3, [pc, #140]	; (8016794 <xTaskResumeAll+0x12c>)
 8016706:	681b      	ldr	r3, [r3, #0]
 8016708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801670a:	429a      	cmp	r2, r3
 801670c:	d302      	bcc.n	8016714 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801670e:	4b22      	ldr	r3, [pc, #136]	; (8016798 <xTaskResumeAll+0x130>)
 8016710:	2201      	movs	r2, #1
 8016712:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016714:	4b1c      	ldr	r3, [pc, #112]	; (8016788 <xTaskResumeAll+0x120>)
 8016716:	681b      	ldr	r3, [r3, #0]
 8016718:	2b00      	cmp	r3, #0
 801671a:	d1cb      	bne.n	80166b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801671c:	68fb      	ldr	r3, [r7, #12]
 801671e:	2b00      	cmp	r3, #0
 8016720:	d001      	beq.n	8016726 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8016722:	f000 fb5f 	bl	8016de4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8016726:	4b1d      	ldr	r3, [pc, #116]	; (801679c <xTaskResumeAll+0x134>)
 8016728:	681b      	ldr	r3, [r3, #0]
 801672a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	2b00      	cmp	r3, #0
 8016730:	d010      	beq.n	8016754 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8016732:	f000 f847 	bl	80167c4 <xTaskIncrementTick>
 8016736:	4603      	mov	r3, r0
 8016738:	2b00      	cmp	r3, #0
 801673a:	d002      	beq.n	8016742 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801673c:	4b16      	ldr	r3, [pc, #88]	; (8016798 <xTaskResumeAll+0x130>)
 801673e:	2201      	movs	r2, #1
 8016740:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	3b01      	subs	r3, #1
 8016746:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	2b00      	cmp	r3, #0
 801674c:	d1f1      	bne.n	8016732 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801674e:	4b13      	ldr	r3, [pc, #76]	; (801679c <xTaskResumeAll+0x134>)
 8016750:	2200      	movs	r2, #0
 8016752:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8016754:	4b10      	ldr	r3, [pc, #64]	; (8016798 <xTaskResumeAll+0x130>)
 8016756:	681b      	ldr	r3, [r3, #0]
 8016758:	2b00      	cmp	r3, #0
 801675a:	d009      	beq.n	8016770 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801675c:	2301      	movs	r3, #1
 801675e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8016760:	4b0f      	ldr	r3, [pc, #60]	; (80167a0 <xTaskResumeAll+0x138>)
 8016762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016766:	601a      	str	r2, [r3, #0]
 8016768:	f3bf 8f4f 	dsb	sy
 801676c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016770:	f001 f9f0 	bl	8017b54 <vPortExitCritical>

	return xAlreadyYielded;
 8016774:	68bb      	ldr	r3, [r7, #8]
}
 8016776:	4618      	mov	r0, r3
 8016778:	3710      	adds	r7, #16
 801677a:	46bd      	mov	sp, r7
 801677c:	bd80      	pop	{r7, pc}
 801677e:	bf00      	nop
 8016780:	200014dc 	.word	0x200014dc
 8016784:	200014b4 	.word	0x200014b4
 8016788:	20001474 	.word	0x20001474
 801678c:	200014bc 	.word	0x200014bc
 8016790:	20000fe4 	.word	0x20000fe4
 8016794:	20000fe0 	.word	0x20000fe0
 8016798:	200014c8 	.word	0x200014c8
 801679c:	200014c4 	.word	0x200014c4
 80167a0:	e000ed04 	.word	0xe000ed04

080167a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80167a4:	b480      	push	{r7}
 80167a6:	b083      	sub	sp, #12
 80167a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80167aa:	4b05      	ldr	r3, [pc, #20]	; (80167c0 <xTaskGetTickCount+0x1c>)
 80167ac:	681b      	ldr	r3, [r3, #0]
 80167ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80167b0:	687b      	ldr	r3, [r7, #4]
}
 80167b2:	4618      	mov	r0, r3
 80167b4:	370c      	adds	r7, #12
 80167b6:	46bd      	mov	sp, r7
 80167b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167bc:	4770      	bx	lr
 80167be:	bf00      	nop
 80167c0:	200014b8 	.word	0x200014b8

080167c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80167c4:	b580      	push	{r7, lr}
 80167c6:	b086      	sub	sp, #24
 80167c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80167ca:	2300      	movs	r3, #0
 80167cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80167ce:	4b4f      	ldr	r3, [pc, #316]	; (801690c <xTaskIncrementTick+0x148>)
 80167d0:	681b      	ldr	r3, [r3, #0]
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	f040 808f 	bne.w	80168f6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80167d8:	4b4d      	ldr	r3, [pc, #308]	; (8016910 <xTaskIncrementTick+0x14c>)
 80167da:	681b      	ldr	r3, [r3, #0]
 80167dc:	3301      	adds	r3, #1
 80167de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80167e0:	4a4b      	ldr	r2, [pc, #300]	; (8016910 <xTaskIncrementTick+0x14c>)
 80167e2:	693b      	ldr	r3, [r7, #16]
 80167e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80167e6:	693b      	ldr	r3, [r7, #16]
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d120      	bne.n	801682e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80167ec:	4b49      	ldr	r3, [pc, #292]	; (8016914 <xTaskIncrementTick+0x150>)
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	681b      	ldr	r3, [r3, #0]
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d00a      	beq.n	801680c <xTaskIncrementTick+0x48>
	__asm volatile
 80167f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167fa:	f383 8811 	msr	BASEPRI, r3
 80167fe:	f3bf 8f6f 	isb	sy
 8016802:	f3bf 8f4f 	dsb	sy
 8016806:	603b      	str	r3, [r7, #0]
}
 8016808:	bf00      	nop
 801680a:	e7fe      	b.n	801680a <xTaskIncrementTick+0x46>
 801680c:	4b41      	ldr	r3, [pc, #260]	; (8016914 <xTaskIncrementTick+0x150>)
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	60fb      	str	r3, [r7, #12]
 8016812:	4b41      	ldr	r3, [pc, #260]	; (8016918 <xTaskIncrementTick+0x154>)
 8016814:	681b      	ldr	r3, [r3, #0]
 8016816:	4a3f      	ldr	r2, [pc, #252]	; (8016914 <xTaskIncrementTick+0x150>)
 8016818:	6013      	str	r3, [r2, #0]
 801681a:	4a3f      	ldr	r2, [pc, #252]	; (8016918 <xTaskIncrementTick+0x154>)
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	6013      	str	r3, [r2, #0]
 8016820:	4b3e      	ldr	r3, [pc, #248]	; (801691c <xTaskIncrementTick+0x158>)
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	3301      	adds	r3, #1
 8016826:	4a3d      	ldr	r2, [pc, #244]	; (801691c <xTaskIncrementTick+0x158>)
 8016828:	6013      	str	r3, [r2, #0]
 801682a:	f000 fadb 	bl	8016de4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801682e:	4b3c      	ldr	r3, [pc, #240]	; (8016920 <xTaskIncrementTick+0x15c>)
 8016830:	681b      	ldr	r3, [r3, #0]
 8016832:	693a      	ldr	r2, [r7, #16]
 8016834:	429a      	cmp	r2, r3
 8016836:	d349      	bcc.n	80168cc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016838:	4b36      	ldr	r3, [pc, #216]	; (8016914 <xTaskIncrementTick+0x150>)
 801683a:	681b      	ldr	r3, [r3, #0]
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	2b00      	cmp	r3, #0
 8016840:	d104      	bne.n	801684c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016842:	4b37      	ldr	r3, [pc, #220]	; (8016920 <xTaskIncrementTick+0x15c>)
 8016844:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016848:	601a      	str	r2, [r3, #0]
					break;
 801684a:	e03f      	b.n	80168cc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801684c:	4b31      	ldr	r3, [pc, #196]	; (8016914 <xTaskIncrementTick+0x150>)
 801684e:	681b      	ldr	r3, [r3, #0]
 8016850:	68db      	ldr	r3, [r3, #12]
 8016852:	68db      	ldr	r3, [r3, #12]
 8016854:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8016856:	68bb      	ldr	r3, [r7, #8]
 8016858:	685b      	ldr	r3, [r3, #4]
 801685a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801685c:	693a      	ldr	r2, [r7, #16]
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	429a      	cmp	r2, r3
 8016862:	d203      	bcs.n	801686c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8016864:	4a2e      	ldr	r2, [pc, #184]	; (8016920 <xTaskIncrementTick+0x15c>)
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801686a:	e02f      	b.n	80168cc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801686c:	68bb      	ldr	r3, [r7, #8]
 801686e:	3304      	adds	r3, #4
 8016870:	4618      	mov	r0, r3
 8016872:	f7fe fbe5 	bl	8015040 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016876:	68bb      	ldr	r3, [r7, #8]
 8016878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801687a:	2b00      	cmp	r3, #0
 801687c:	d004      	beq.n	8016888 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801687e:	68bb      	ldr	r3, [r7, #8]
 8016880:	3318      	adds	r3, #24
 8016882:	4618      	mov	r0, r3
 8016884:	f7fe fbdc 	bl	8015040 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8016888:	68bb      	ldr	r3, [r7, #8]
 801688a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801688c:	4b25      	ldr	r3, [pc, #148]	; (8016924 <xTaskIncrementTick+0x160>)
 801688e:	681b      	ldr	r3, [r3, #0]
 8016890:	429a      	cmp	r2, r3
 8016892:	d903      	bls.n	801689c <xTaskIncrementTick+0xd8>
 8016894:	68bb      	ldr	r3, [r7, #8]
 8016896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016898:	4a22      	ldr	r2, [pc, #136]	; (8016924 <xTaskIncrementTick+0x160>)
 801689a:	6013      	str	r3, [r2, #0]
 801689c:	68bb      	ldr	r3, [r7, #8]
 801689e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80168a0:	4613      	mov	r3, r2
 80168a2:	009b      	lsls	r3, r3, #2
 80168a4:	4413      	add	r3, r2
 80168a6:	009b      	lsls	r3, r3, #2
 80168a8:	4a1f      	ldr	r2, [pc, #124]	; (8016928 <xTaskIncrementTick+0x164>)
 80168aa:	441a      	add	r2, r3
 80168ac:	68bb      	ldr	r3, [r7, #8]
 80168ae:	3304      	adds	r3, #4
 80168b0:	4619      	mov	r1, r3
 80168b2:	4610      	mov	r0, r2
 80168b4:	f7fe fb67 	bl	8014f86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80168b8:	68bb      	ldr	r3, [r7, #8]
 80168ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80168bc:	4b1b      	ldr	r3, [pc, #108]	; (801692c <xTaskIncrementTick+0x168>)
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80168c2:	429a      	cmp	r2, r3
 80168c4:	d3b8      	bcc.n	8016838 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80168c6:	2301      	movs	r3, #1
 80168c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80168ca:	e7b5      	b.n	8016838 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80168cc:	4b17      	ldr	r3, [pc, #92]	; (801692c <xTaskIncrementTick+0x168>)
 80168ce:	681b      	ldr	r3, [r3, #0]
 80168d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80168d2:	4915      	ldr	r1, [pc, #84]	; (8016928 <xTaskIncrementTick+0x164>)
 80168d4:	4613      	mov	r3, r2
 80168d6:	009b      	lsls	r3, r3, #2
 80168d8:	4413      	add	r3, r2
 80168da:	009b      	lsls	r3, r3, #2
 80168dc:	440b      	add	r3, r1
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	2b01      	cmp	r3, #1
 80168e2:	d901      	bls.n	80168e8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80168e4:	2301      	movs	r3, #1
 80168e6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80168e8:	4b11      	ldr	r3, [pc, #68]	; (8016930 <xTaskIncrementTick+0x16c>)
 80168ea:	681b      	ldr	r3, [r3, #0]
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d007      	beq.n	8016900 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80168f0:	2301      	movs	r3, #1
 80168f2:	617b      	str	r3, [r7, #20]
 80168f4:	e004      	b.n	8016900 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80168f6:	4b0f      	ldr	r3, [pc, #60]	; (8016934 <xTaskIncrementTick+0x170>)
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	3301      	adds	r3, #1
 80168fc:	4a0d      	ldr	r2, [pc, #52]	; (8016934 <xTaskIncrementTick+0x170>)
 80168fe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8016900:	697b      	ldr	r3, [r7, #20]
}
 8016902:	4618      	mov	r0, r3
 8016904:	3718      	adds	r7, #24
 8016906:	46bd      	mov	sp, r7
 8016908:	bd80      	pop	{r7, pc}
 801690a:	bf00      	nop
 801690c:	200014dc 	.word	0x200014dc
 8016910:	200014b8 	.word	0x200014b8
 8016914:	2000146c 	.word	0x2000146c
 8016918:	20001470 	.word	0x20001470
 801691c:	200014cc 	.word	0x200014cc
 8016920:	200014d4 	.word	0x200014d4
 8016924:	200014bc 	.word	0x200014bc
 8016928:	20000fe4 	.word	0x20000fe4
 801692c:	20000fe0 	.word	0x20000fe0
 8016930:	200014c8 	.word	0x200014c8
 8016934:	200014c4 	.word	0x200014c4

08016938 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8016938:	b480      	push	{r7}
 801693a:	b085      	sub	sp, #20
 801693c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801693e:	4b2a      	ldr	r3, [pc, #168]	; (80169e8 <vTaskSwitchContext+0xb0>)
 8016940:	681b      	ldr	r3, [r3, #0]
 8016942:	2b00      	cmp	r3, #0
 8016944:	d003      	beq.n	801694e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8016946:	4b29      	ldr	r3, [pc, #164]	; (80169ec <vTaskSwitchContext+0xb4>)
 8016948:	2201      	movs	r2, #1
 801694a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801694c:	e046      	b.n	80169dc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 801694e:	4b27      	ldr	r3, [pc, #156]	; (80169ec <vTaskSwitchContext+0xb4>)
 8016950:	2200      	movs	r2, #0
 8016952:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016954:	4b26      	ldr	r3, [pc, #152]	; (80169f0 <vTaskSwitchContext+0xb8>)
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	60fb      	str	r3, [r7, #12]
 801695a:	e010      	b.n	801697e <vTaskSwitchContext+0x46>
 801695c:	68fb      	ldr	r3, [r7, #12]
 801695e:	2b00      	cmp	r3, #0
 8016960:	d10a      	bne.n	8016978 <vTaskSwitchContext+0x40>
	__asm volatile
 8016962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016966:	f383 8811 	msr	BASEPRI, r3
 801696a:	f3bf 8f6f 	isb	sy
 801696e:	f3bf 8f4f 	dsb	sy
 8016972:	607b      	str	r3, [r7, #4]
}
 8016974:	bf00      	nop
 8016976:	e7fe      	b.n	8016976 <vTaskSwitchContext+0x3e>
 8016978:	68fb      	ldr	r3, [r7, #12]
 801697a:	3b01      	subs	r3, #1
 801697c:	60fb      	str	r3, [r7, #12]
 801697e:	491d      	ldr	r1, [pc, #116]	; (80169f4 <vTaskSwitchContext+0xbc>)
 8016980:	68fa      	ldr	r2, [r7, #12]
 8016982:	4613      	mov	r3, r2
 8016984:	009b      	lsls	r3, r3, #2
 8016986:	4413      	add	r3, r2
 8016988:	009b      	lsls	r3, r3, #2
 801698a:	440b      	add	r3, r1
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	2b00      	cmp	r3, #0
 8016990:	d0e4      	beq.n	801695c <vTaskSwitchContext+0x24>
 8016992:	68fa      	ldr	r2, [r7, #12]
 8016994:	4613      	mov	r3, r2
 8016996:	009b      	lsls	r3, r3, #2
 8016998:	4413      	add	r3, r2
 801699a:	009b      	lsls	r3, r3, #2
 801699c:	4a15      	ldr	r2, [pc, #84]	; (80169f4 <vTaskSwitchContext+0xbc>)
 801699e:	4413      	add	r3, r2
 80169a0:	60bb      	str	r3, [r7, #8]
 80169a2:	68bb      	ldr	r3, [r7, #8]
 80169a4:	685b      	ldr	r3, [r3, #4]
 80169a6:	685a      	ldr	r2, [r3, #4]
 80169a8:	68bb      	ldr	r3, [r7, #8]
 80169aa:	605a      	str	r2, [r3, #4]
 80169ac:	68bb      	ldr	r3, [r7, #8]
 80169ae:	685a      	ldr	r2, [r3, #4]
 80169b0:	68bb      	ldr	r3, [r7, #8]
 80169b2:	3308      	adds	r3, #8
 80169b4:	429a      	cmp	r2, r3
 80169b6:	d104      	bne.n	80169c2 <vTaskSwitchContext+0x8a>
 80169b8:	68bb      	ldr	r3, [r7, #8]
 80169ba:	685b      	ldr	r3, [r3, #4]
 80169bc:	685a      	ldr	r2, [r3, #4]
 80169be:	68bb      	ldr	r3, [r7, #8]
 80169c0:	605a      	str	r2, [r3, #4]
 80169c2:	68bb      	ldr	r3, [r7, #8]
 80169c4:	685b      	ldr	r3, [r3, #4]
 80169c6:	68db      	ldr	r3, [r3, #12]
 80169c8:	4a0b      	ldr	r2, [pc, #44]	; (80169f8 <vTaskSwitchContext+0xc0>)
 80169ca:	6013      	str	r3, [r2, #0]
 80169cc:	4a08      	ldr	r2, [pc, #32]	; (80169f0 <vTaskSwitchContext+0xb8>)
 80169ce:	68fb      	ldr	r3, [r7, #12]
 80169d0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80169d2:	4b09      	ldr	r3, [pc, #36]	; (80169f8 <vTaskSwitchContext+0xc0>)
 80169d4:	681b      	ldr	r3, [r3, #0]
 80169d6:	3354      	adds	r3, #84	; 0x54
 80169d8:	4a08      	ldr	r2, [pc, #32]	; (80169fc <vTaskSwitchContext+0xc4>)
 80169da:	6013      	str	r3, [r2, #0]
}
 80169dc:	bf00      	nop
 80169de:	3714      	adds	r7, #20
 80169e0:	46bd      	mov	sp, r7
 80169e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169e6:	4770      	bx	lr
 80169e8:	200014dc 	.word	0x200014dc
 80169ec:	200014c8 	.word	0x200014c8
 80169f0:	200014bc 	.word	0x200014bc
 80169f4:	20000fe4 	.word	0x20000fe4
 80169f8:	20000fe0 	.word	0x20000fe0
 80169fc:	200001d8 	.word	0x200001d8

08016a00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8016a00:	b580      	push	{r7, lr}
 8016a02:	b084      	sub	sp, #16
 8016a04:	af00      	add	r7, sp, #0
 8016a06:	6078      	str	r0, [r7, #4]
 8016a08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d10a      	bne.n	8016a26 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8016a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a14:	f383 8811 	msr	BASEPRI, r3
 8016a18:	f3bf 8f6f 	isb	sy
 8016a1c:	f3bf 8f4f 	dsb	sy
 8016a20:	60fb      	str	r3, [r7, #12]
}
 8016a22:	bf00      	nop
 8016a24:	e7fe      	b.n	8016a24 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016a26:	4b07      	ldr	r3, [pc, #28]	; (8016a44 <vTaskPlaceOnEventList+0x44>)
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	3318      	adds	r3, #24
 8016a2c:	4619      	mov	r1, r3
 8016a2e:	6878      	ldr	r0, [r7, #4]
 8016a30:	f7fe facd 	bl	8014fce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016a34:	2101      	movs	r1, #1
 8016a36:	6838      	ldr	r0, [r7, #0]
 8016a38:	f000 fb8e 	bl	8017158 <prvAddCurrentTaskToDelayedList>
}
 8016a3c:	bf00      	nop
 8016a3e:	3710      	adds	r7, #16
 8016a40:	46bd      	mov	sp, r7
 8016a42:	bd80      	pop	{r7, pc}
 8016a44:	20000fe0 	.word	0x20000fe0

08016a48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016a48:	b580      	push	{r7, lr}
 8016a4a:	b086      	sub	sp, #24
 8016a4c:	af00      	add	r7, sp, #0
 8016a4e:	60f8      	str	r0, [r7, #12]
 8016a50:	60b9      	str	r1, [r7, #8]
 8016a52:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8016a54:	68fb      	ldr	r3, [r7, #12]
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d10a      	bne.n	8016a70 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8016a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a5e:	f383 8811 	msr	BASEPRI, r3
 8016a62:	f3bf 8f6f 	isb	sy
 8016a66:	f3bf 8f4f 	dsb	sy
 8016a6a:	617b      	str	r3, [r7, #20]
}
 8016a6c:	bf00      	nop
 8016a6e:	e7fe      	b.n	8016a6e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016a70:	4b0a      	ldr	r3, [pc, #40]	; (8016a9c <vTaskPlaceOnEventListRestricted+0x54>)
 8016a72:	681b      	ldr	r3, [r3, #0]
 8016a74:	3318      	adds	r3, #24
 8016a76:	4619      	mov	r1, r3
 8016a78:	68f8      	ldr	r0, [r7, #12]
 8016a7a:	f7fe fa84 	bl	8014f86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d002      	beq.n	8016a8a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8016a84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016a88:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8016a8a:	6879      	ldr	r1, [r7, #4]
 8016a8c:	68b8      	ldr	r0, [r7, #8]
 8016a8e:	f000 fb63 	bl	8017158 <prvAddCurrentTaskToDelayedList>
	}
 8016a92:	bf00      	nop
 8016a94:	3718      	adds	r7, #24
 8016a96:	46bd      	mov	sp, r7
 8016a98:	bd80      	pop	{r7, pc}
 8016a9a:	bf00      	nop
 8016a9c:	20000fe0 	.word	0x20000fe0

08016aa0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016aa0:	b580      	push	{r7, lr}
 8016aa2:	b086      	sub	sp, #24
 8016aa4:	af00      	add	r7, sp, #0
 8016aa6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	68db      	ldr	r3, [r3, #12]
 8016aac:	68db      	ldr	r3, [r3, #12]
 8016aae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016ab0:	693b      	ldr	r3, [r7, #16]
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d10a      	bne.n	8016acc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8016ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016aba:	f383 8811 	msr	BASEPRI, r3
 8016abe:	f3bf 8f6f 	isb	sy
 8016ac2:	f3bf 8f4f 	dsb	sy
 8016ac6:	60fb      	str	r3, [r7, #12]
}
 8016ac8:	bf00      	nop
 8016aca:	e7fe      	b.n	8016aca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016acc:	693b      	ldr	r3, [r7, #16]
 8016ace:	3318      	adds	r3, #24
 8016ad0:	4618      	mov	r0, r3
 8016ad2:	f7fe fab5 	bl	8015040 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016ad6:	4b1e      	ldr	r3, [pc, #120]	; (8016b50 <xTaskRemoveFromEventList+0xb0>)
 8016ad8:	681b      	ldr	r3, [r3, #0]
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d11d      	bne.n	8016b1a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016ade:	693b      	ldr	r3, [r7, #16]
 8016ae0:	3304      	adds	r3, #4
 8016ae2:	4618      	mov	r0, r3
 8016ae4:	f7fe faac 	bl	8015040 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8016ae8:	693b      	ldr	r3, [r7, #16]
 8016aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016aec:	4b19      	ldr	r3, [pc, #100]	; (8016b54 <xTaskRemoveFromEventList+0xb4>)
 8016aee:	681b      	ldr	r3, [r3, #0]
 8016af0:	429a      	cmp	r2, r3
 8016af2:	d903      	bls.n	8016afc <xTaskRemoveFromEventList+0x5c>
 8016af4:	693b      	ldr	r3, [r7, #16]
 8016af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016af8:	4a16      	ldr	r2, [pc, #88]	; (8016b54 <xTaskRemoveFromEventList+0xb4>)
 8016afa:	6013      	str	r3, [r2, #0]
 8016afc:	693b      	ldr	r3, [r7, #16]
 8016afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b00:	4613      	mov	r3, r2
 8016b02:	009b      	lsls	r3, r3, #2
 8016b04:	4413      	add	r3, r2
 8016b06:	009b      	lsls	r3, r3, #2
 8016b08:	4a13      	ldr	r2, [pc, #76]	; (8016b58 <xTaskRemoveFromEventList+0xb8>)
 8016b0a:	441a      	add	r2, r3
 8016b0c:	693b      	ldr	r3, [r7, #16]
 8016b0e:	3304      	adds	r3, #4
 8016b10:	4619      	mov	r1, r3
 8016b12:	4610      	mov	r0, r2
 8016b14:	f7fe fa37 	bl	8014f86 <vListInsertEnd>
 8016b18:	e005      	b.n	8016b26 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8016b1a:	693b      	ldr	r3, [r7, #16]
 8016b1c:	3318      	adds	r3, #24
 8016b1e:	4619      	mov	r1, r3
 8016b20:	480e      	ldr	r0, [pc, #56]	; (8016b5c <xTaskRemoveFromEventList+0xbc>)
 8016b22:	f7fe fa30 	bl	8014f86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016b26:	693b      	ldr	r3, [r7, #16]
 8016b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b2a:	4b0d      	ldr	r3, [pc, #52]	; (8016b60 <xTaskRemoveFromEventList+0xc0>)
 8016b2c:	681b      	ldr	r3, [r3, #0]
 8016b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b30:	429a      	cmp	r2, r3
 8016b32:	d905      	bls.n	8016b40 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016b34:	2301      	movs	r3, #1
 8016b36:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016b38:	4b0a      	ldr	r3, [pc, #40]	; (8016b64 <xTaskRemoveFromEventList+0xc4>)
 8016b3a:	2201      	movs	r2, #1
 8016b3c:	601a      	str	r2, [r3, #0]
 8016b3e:	e001      	b.n	8016b44 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8016b40:	2300      	movs	r3, #0
 8016b42:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8016b44:	697b      	ldr	r3, [r7, #20]
}
 8016b46:	4618      	mov	r0, r3
 8016b48:	3718      	adds	r7, #24
 8016b4a:	46bd      	mov	sp, r7
 8016b4c:	bd80      	pop	{r7, pc}
 8016b4e:	bf00      	nop
 8016b50:	200014dc 	.word	0x200014dc
 8016b54:	200014bc 	.word	0x200014bc
 8016b58:	20000fe4 	.word	0x20000fe4
 8016b5c:	20001474 	.word	0x20001474
 8016b60:	20000fe0 	.word	0x20000fe0
 8016b64:	200014c8 	.word	0x200014c8

08016b68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016b68:	b480      	push	{r7}
 8016b6a:	b083      	sub	sp, #12
 8016b6c:	af00      	add	r7, sp, #0
 8016b6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016b70:	4b06      	ldr	r3, [pc, #24]	; (8016b8c <vTaskInternalSetTimeOutState+0x24>)
 8016b72:	681a      	ldr	r2, [r3, #0]
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016b78:	4b05      	ldr	r3, [pc, #20]	; (8016b90 <vTaskInternalSetTimeOutState+0x28>)
 8016b7a:	681a      	ldr	r2, [r3, #0]
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	605a      	str	r2, [r3, #4]
}
 8016b80:	bf00      	nop
 8016b82:	370c      	adds	r7, #12
 8016b84:	46bd      	mov	sp, r7
 8016b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b8a:	4770      	bx	lr
 8016b8c:	200014cc 	.word	0x200014cc
 8016b90:	200014b8 	.word	0x200014b8

08016b94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8016b94:	b580      	push	{r7, lr}
 8016b96:	b088      	sub	sp, #32
 8016b98:	af00      	add	r7, sp, #0
 8016b9a:	6078      	str	r0, [r7, #4]
 8016b9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	d10a      	bne.n	8016bba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8016ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ba8:	f383 8811 	msr	BASEPRI, r3
 8016bac:	f3bf 8f6f 	isb	sy
 8016bb0:	f3bf 8f4f 	dsb	sy
 8016bb4:	613b      	str	r3, [r7, #16]
}
 8016bb6:	bf00      	nop
 8016bb8:	e7fe      	b.n	8016bb8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8016bba:	683b      	ldr	r3, [r7, #0]
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d10a      	bne.n	8016bd6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8016bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bc4:	f383 8811 	msr	BASEPRI, r3
 8016bc8:	f3bf 8f6f 	isb	sy
 8016bcc:	f3bf 8f4f 	dsb	sy
 8016bd0:	60fb      	str	r3, [r7, #12]
}
 8016bd2:	bf00      	nop
 8016bd4:	e7fe      	b.n	8016bd4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8016bd6:	f000 ff8d 	bl	8017af4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8016bda:	4b1d      	ldr	r3, [pc, #116]	; (8016c50 <xTaskCheckForTimeOut+0xbc>)
 8016bdc:	681b      	ldr	r3, [r3, #0]
 8016bde:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	685b      	ldr	r3, [r3, #4]
 8016be4:	69ba      	ldr	r2, [r7, #24]
 8016be6:	1ad3      	subs	r3, r2, r3
 8016be8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8016bea:	683b      	ldr	r3, [r7, #0]
 8016bec:	681b      	ldr	r3, [r3, #0]
 8016bee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016bf2:	d102      	bne.n	8016bfa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8016bf4:	2300      	movs	r3, #0
 8016bf6:	61fb      	str	r3, [r7, #28]
 8016bf8:	e023      	b.n	8016c42 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	681a      	ldr	r2, [r3, #0]
 8016bfe:	4b15      	ldr	r3, [pc, #84]	; (8016c54 <xTaskCheckForTimeOut+0xc0>)
 8016c00:	681b      	ldr	r3, [r3, #0]
 8016c02:	429a      	cmp	r2, r3
 8016c04:	d007      	beq.n	8016c16 <xTaskCheckForTimeOut+0x82>
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	685b      	ldr	r3, [r3, #4]
 8016c0a:	69ba      	ldr	r2, [r7, #24]
 8016c0c:	429a      	cmp	r2, r3
 8016c0e:	d302      	bcc.n	8016c16 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016c10:	2301      	movs	r3, #1
 8016c12:	61fb      	str	r3, [r7, #28]
 8016c14:	e015      	b.n	8016c42 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016c16:	683b      	ldr	r3, [r7, #0]
 8016c18:	681b      	ldr	r3, [r3, #0]
 8016c1a:	697a      	ldr	r2, [r7, #20]
 8016c1c:	429a      	cmp	r2, r3
 8016c1e:	d20b      	bcs.n	8016c38 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8016c20:	683b      	ldr	r3, [r7, #0]
 8016c22:	681a      	ldr	r2, [r3, #0]
 8016c24:	697b      	ldr	r3, [r7, #20]
 8016c26:	1ad2      	subs	r2, r2, r3
 8016c28:	683b      	ldr	r3, [r7, #0]
 8016c2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8016c2c:	6878      	ldr	r0, [r7, #4]
 8016c2e:	f7ff ff9b 	bl	8016b68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8016c32:	2300      	movs	r3, #0
 8016c34:	61fb      	str	r3, [r7, #28]
 8016c36:	e004      	b.n	8016c42 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8016c38:	683b      	ldr	r3, [r7, #0]
 8016c3a:	2200      	movs	r2, #0
 8016c3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8016c3e:	2301      	movs	r3, #1
 8016c40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8016c42:	f000 ff87 	bl	8017b54 <vPortExitCritical>

	return xReturn;
 8016c46:	69fb      	ldr	r3, [r7, #28]
}
 8016c48:	4618      	mov	r0, r3
 8016c4a:	3720      	adds	r7, #32
 8016c4c:	46bd      	mov	sp, r7
 8016c4e:	bd80      	pop	{r7, pc}
 8016c50:	200014b8 	.word	0x200014b8
 8016c54:	200014cc 	.word	0x200014cc

08016c58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016c58:	b480      	push	{r7}
 8016c5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016c5c:	4b03      	ldr	r3, [pc, #12]	; (8016c6c <vTaskMissedYield+0x14>)
 8016c5e:	2201      	movs	r2, #1
 8016c60:	601a      	str	r2, [r3, #0]
}
 8016c62:	bf00      	nop
 8016c64:	46bd      	mov	sp, r7
 8016c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c6a:	4770      	bx	lr
 8016c6c:	200014c8 	.word	0x200014c8

08016c70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016c70:	b580      	push	{r7, lr}
 8016c72:	b082      	sub	sp, #8
 8016c74:	af00      	add	r7, sp, #0
 8016c76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016c78:	f000 f852 	bl	8016d20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016c7c:	4b06      	ldr	r3, [pc, #24]	; (8016c98 <prvIdleTask+0x28>)
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	2b01      	cmp	r3, #1
 8016c82:	d9f9      	bls.n	8016c78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8016c84:	4b05      	ldr	r3, [pc, #20]	; (8016c9c <prvIdleTask+0x2c>)
 8016c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016c8a:	601a      	str	r2, [r3, #0]
 8016c8c:	f3bf 8f4f 	dsb	sy
 8016c90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8016c94:	e7f0      	b.n	8016c78 <prvIdleTask+0x8>
 8016c96:	bf00      	nop
 8016c98:	20000fe4 	.word	0x20000fe4
 8016c9c:	e000ed04 	.word	0xe000ed04

08016ca0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016ca0:	b580      	push	{r7, lr}
 8016ca2:	b082      	sub	sp, #8
 8016ca4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016ca6:	2300      	movs	r3, #0
 8016ca8:	607b      	str	r3, [r7, #4]
 8016caa:	e00c      	b.n	8016cc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016cac:	687a      	ldr	r2, [r7, #4]
 8016cae:	4613      	mov	r3, r2
 8016cb0:	009b      	lsls	r3, r3, #2
 8016cb2:	4413      	add	r3, r2
 8016cb4:	009b      	lsls	r3, r3, #2
 8016cb6:	4a12      	ldr	r2, [pc, #72]	; (8016d00 <prvInitialiseTaskLists+0x60>)
 8016cb8:	4413      	add	r3, r2
 8016cba:	4618      	mov	r0, r3
 8016cbc:	f7fe f936 	bl	8014f2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	3301      	adds	r3, #1
 8016cc4:	607b      	str	r3, [r7, #4]
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	2b37      	cmp	r3, #55	; 0x37
 8016cca:	d9ef      	bls.n	8016cac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016ccc:	480d      	ldr	r0, [pc, #52]	; (8016d04 <prvInitialiseTaskLists+0x64>)
 8016cce:	f7fe f92d 	bl	8014f2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016cd2:	480d      	ldr	r0, [pc, #52]	; (8016d08 <prvInitialiseTaskLists+0x68>)
 8016cd4:	f7fe f92a 	bl	8014f2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016cd8:	480c      	ldr	r0, [pc, #48]	; (8016d0c <prvInitialiseTaskLists+0x6c>)
 8016cda:	f7fe f927 	bl	8014f2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016cde:	480c      	ldr	r0, [pc, #48]	; (8016d10 <prvInitialiseTaskLists+0x70>)
 8016ce0:	f7fe f924 	bl	8014f2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016ce4:	480b      	ldr	r0, [pc, #44]	; (8016d14 <prvInitialiseTaskLists+0x74>)
 8016ce6:	f7fe f921 	bl	8014f2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8016cea:	4b0b      	ldr	r3, [pc, #44]	; (8016d18 <prvInitialiseTaskLists+0x78>)
 8016cec:	4a05      	ldr	r2, [pc, #20]	; (8016d04 <prvInitialiseTaskLists+0x64>)
 8016cee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016cf0:	4b0a      	ldr	r3, [pc, #40]	; (8016d1c <prvInitialiseTaskLists+0x7c>)
 8016cf2:	4a05      	ldr	r2, [pc, #20]	; (8016d08 <prvInitialiseTaskLists+0x68>)
 8016cf4:	601a      	str	r2, [r3, #0]
}
 8016cf6:	bf00      	nop
 8016cf8:	3708      	adds	r7, #8
 8016cfa:	46bd      	mov	sp, r7
 8016cfc:	bd80      	pop	{r7, pc}
 8016cfe:	bf00      	nop
 8016d00:	20000fe4 	.word	0x20000fe4
 8016d04:	20001444 	.word	0x20001444
 8016d08:	20001458 	.word	0x20001458
 8016d0c:	20001474 	.word	0x20001474
 8016d10:	20001488 	.word	0x20001488
 8016d14:	200014a0 	.word	0x200014a0
 8016d18:	2000146c 	.word	0x2000146c
 8016d1c:	20001470 	.word	0x20001470

08016d20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016d20:	b580      	push	{r7, lr}
 8016d22:	b082      	sub	sp, #8
 8016d24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016d26:	e019      	b.n	8016d5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016d28:	f000 fee4 	bl	8017af4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016d2c:	4b10      	ldr	r3, [pc, #64]	; (8016d70 <prvCheckTasksWaitingTermination+0x50>)
 8016d2e:	68db      	ldr	r3, [r3, #12]
 8016d30:	68db      	ldr	r3, [r3, #12]
 8016d32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	3304      	adds	r3, #4
 8016d38:	4618      	mov	r0, r3
 8016d3a:	f7fe f981 	bl	8015040 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016d3e:	4b0d      	ldr	r3, [pc, #52]	; (8016d74 <prvCheckTasksWaitingTermination+0x54>)
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	3b01      	subs	r3, #1
 8016d44:	4a0b      	ldr	r2, [pc, #44]	; (8016d74 <prvCheckTasksWaitingTermination+0x54>)
 8016d46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016d48:	4b0b      	ldr	r3, [pc, #44]	; (8016d78 <prvCheckTasksWaitingTermination+0x58>)
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	3b01      	subs	r3, #1
 8016d4e:	4a0a      	ldr	r2, [pc, #40]	; (8016d78 <prvCheckTasksWaitingTermination+0x58>)
 8016d50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8016d52:	f000 feff 	bl	8017b54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8016d56:	6878      	ldr	r0, [r7, #4]
 8016d58:	f000 f810 	bl	8016d7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016d5c:	4b06      	ldr	r3, [pc, #24]	; (8016d78 <prvCheckTasksWaitingTermination+0x58>)
 8016d5e:	681b      	ldr	r3, [r3, #0]
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	d1e1      	bne.n	8016d28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016d64:	bf00      	nop
 8016d66:	bf00      	nop
 8016d68:	3708      	adds	r7, #8
 8016d6a:	46bd      	mov	sp, r7
 8016d6c:	bd80      	pop	{r7, pc}
 8016d6e:	bf00      	nop
 8016d70:	20001488 	.word	0x20001488
 8016d74:	200014b4 	.word	0x200014b4
 8016d78:	2000149c 	.word	0x2000149c

08016d7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016d7c:	b580      	push	{r7, lr}
 8016d7e:	b084      	sub	sp, #16
 8016d80:	af00      	add	r7, sp, #0
 8016d82:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	3354      	adds	r3, #84	; 0x54
 8016d88:	4618      	mov	r0, r3
 8016d8a:	f003 ffb7 	bl	801acfc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	d108      	bne.n	8016daa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016d9c:	4618      	mov	r0, r3
 8016d9e:	f001 f897 	bl	8017ed0 <vPortFree>
				vPortFree( pxTCB );
 8016da2:	6878      	ldr	r0, [r7, #4]
 8016da4:	f001 f894 	bl	8017ed0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016da8:	e018      	b.n	8016ddc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8016db0:	2b01      	cmp	r3, #1
 8016db2:	d103      	bne.n	8016dbc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8016db4:	6878      	ldr	r0, [r7, #4]
 8016db6:	f001 f88b 	bl	8017ed0 <vPortFree>
	}
 8016dba:	e00f      	b.n	8016ddc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8016dc2:	2b02      	cmp	r3, #2
 8016dc4:	d00a      	beq.n	8016ddc <prvDeleteTCB+0x60>
	__asm volatile
 8016dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dca:	f383 8811 	msr	BASEPRI, r3
 8016dce:	f3bf 8f6f 	isb	sy
 8016dd2:	f3bf 8f4f 	dsb	sy
 8016dd6:	60fb      	str	r3, [r7, #12]
}
 8016dd8:	bf00      	nop
 8016dda:	e7fe      	b.n	8016dda <prvDeleteTCB+0x5e>
	}
 8016ddc:	bf00      	nop
 8016dde:	3710      	adds	r7, #16
 8016de0:	46bd      	mov	sp, r7
 8016de2:	bd80      	pop	{r7, pc}

08016de4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016de4:	b480      	push	{r7}
 8016de6:	b083      	sub	sp, #12
 8016de8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016dea:	4b0c      	ldr	r3, [pc, #48]	; (8016e1c <prvResetNextTaskUnblockTime+0x38>)
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	681b      	ldr	r3, [r3, #0]
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d104      	bne.n	8016dfe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016df4:	4b0a      	ldr	r3, [pc, #40]	; (8016e20 <prvResetNextTaskUnblockTime+0x3c>)
 8016df6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016dfa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016dfc:	e008      	b.n	8016e10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016dfe:	4b07      	ldr	r3, [pc, #28]	; (8016e1c <prvResetNextTaskUnblockTime+0x38>)
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	68db      	ldr	r3, [r3, #12]
 8016e04:	68db      	ldr	r3, [r3, #12]
 8016e06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	685b      	ldr	r3, [r3, #4]
 8016e0c:	4a04      	ldr	r2, [pc, #16]	; (8016e20 <prvResetNextTaskUnblockTime+0x3c>)
 8016e0e:	6013      	str	r3, [r2, #0]
}
 8016e10:	bf00      	nop
 8016e12:	370c      	adds	r7, #12
 8016e14:	46bd      	mov	sp, r7
 8016e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e1a:	4770      	bx	lr
 8016e1c:	2000146c 	.word	0x2000146c
 8016e20:	200014d4 	.word	0x200014d4

08016e24 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8016e24:	b480      	push	{r7}
 8016e26:	b083      	sub	sp, #12
 8016e28:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8016e2a:	4b05      	ldr	r3, [pc, #20]	; (8016e40 <xTaskGetCurrentTaskHandle+0x1c>)
 8016e2c:	681b      	ldr	r3, [r3, #0]
 8016e2e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8016e30:	687b      	ldr	r3, [r7, #4]
	}
 8016e32:	4618      	mov	r0, r3
 8016e34:	370c      	adds	r7, #12
 8016e36:	46bd      	mov	sp, r7
 8016e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e3c:	4770      	bx	lr
 8016e3e:	bf00      	nop
 8016e40:	20000fe0 	.word	0x20000fe0

08016e44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8016e44:	b480      	push	{r7}
 8016e46:	b083      	sub	sp, #12
 8016e48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8016e4a:	4b0b      	ldr	r3, [pc, #44]	; (8016e78 <xTaskGetSchedulerState+0x34>)
 8016e4c:	681b      	ldr	r3, [r3, #0]
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d102      	bne.n	8016e58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8016e52:	2301      	movs	r3, #1
 8016e54:	607b      	str	r3, [r7, #4]
 8016e56:	e008      	b.n	8016e6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016e58:	4b08      	ldr	r3, [pc, #32]	; (8016e7c <xTaskGetSchedulerState+0x38>)
 8016e5a:	681b      	ldr	r3, [r3, #0]
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d102      	bne.n	8016e66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8016e60:	2302      	movs	r3, #2
 8016e62:	607b      	str	r3, [r7, #4]
 8016e64:	e001      	b.n	8016e6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8016e66:	2300      	movs	r3, #0
 8016e68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016e6a:	687b      	ldr	r3, [r7, #4]
	}
 8016e6c:	4618      	mov	r0, r3
 8016e6e:	370c      	adds	r7, #12
 8016e70:	46bd      	mov	sp, r7
 8016e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e76:	4770      	bx	lr
 8016e78:	200014c0 	.word	0x200014c0
 8016e7c:	200014dc 	.word	0x200014dc

08016e80 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8016e80:	b580      	push	{r7, lr}
 8016e82:	b084      	sub	sp, #16
 8016e84:	af00      	add	r7, sp, #0
 8016e86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8016e8c:	2300      	movs	r3, #0
 8016e8e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d051      	beq.n	8016f3a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8016e96:	68bb      	ldr	r3, [r7, #8]
 8016e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016e9a:	4b2a      	ldr	r3, [pc, #168]	; (8016f44 <xTaskPriorityInherit+0xc4>)
 8016e9c:	681b      	ldr	r3, [r3, #0]
 8016e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ea0:	429a      	cmp	r2, r3
 8016ea2:	d241      	bcs.n	8016f28 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016ea4:	68bb      	ldr	r3, [r7, #8]
 8016ea6:	699b      	ldr	r3, [r3, #24]
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	db06      	blt.n	8016eba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016eac:	4b25      	ldr	r3, [pc, #148]	; (8016f44 <xTaskPriorityInherit+0xc4>)
 8016eae:	681b      	ldr	r3, [r3, #0]
 8016eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016eb2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016eb6:	68bb      	ldr	r3, [r7, #8]
 8016eb8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8016eba:	68bb      	ldr	r3, [r7, #8]
 8016ebc:	6959      	ldr	r1, [r3, #20]
 8016ebe:	68bb      	ldr	r3, [r7, #8]
 8016ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ec2:	4613      	mov	r3, r2
 8016ec4:	009b      	lsls	r3, r3, #2
 8016ec6:	4413      	add	r3, r2
 8016ec8:	009b      	lsls	r3, r3, #2
 8016eca:	4a1f      	ldr	r2, [pc, #124]	; (8016f48 <xTaskPriorityInherit+0xc8>)
 8016ecc:	4413      	add	r3, r2
 8016ece:	4299      	cmp	r1, r3
 8016ed0:	d122      	bne.n	8016f18 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016ed2:	68bb      	ldr	r3, [r7, #8]
 8016ed4:	3304      	adds	r3, #4
 8016ed6:	4618      	mov	r0, r3
 8016ed8:	f7fe f8b2 	bl	8015040 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016edc:	4b19      	ldr	r3, [pc, #100]	; (8016f44 <xTaskPriorityInherit+0xc4>)
 8016ede:	681b      	ldr	r3, [r3, #0]
 8016ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ee2:	68bb      	ldr	r3, [r7, #8]
 8016ee4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8016ee6:	68bb      	ldr	r3, [r7, #8]
 8016ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016eea:	4b18      	ldr	r3, [pc, #96]	; (8016f4c <xTaskPriorityInherit+0xcc>)
 8016eec:	681b      	ldr	r3, [r3, #0]
 8016eee:	429a      	cmp	r2, r3
 8016ef0:	d903      	bls.n	8016efa <xTaskPriorityInherit+0x7a>
 8016ef2:	68bb      	ldr	r3, [r7, #8]
 8016ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ef6:	4a15      	ldr	r2, [pc, #84]	; (8016f4c <xTaskPriorityInherit+0xcc>)
 8016ef8:	6013      	str	r3, [r2, #0]
 8016efa:	68bb      	ldr	r3, [r7, #8]
 8016efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016efe:	4613      	mov	r3, r2
 8016f00:	009b      	lsls	r3, r3, #2
 8016f02:	4413      	add	r3, r2
 8016f04:	009b      	lsls	r3, r3, #2
 8016f06:	4a10      	ldr	r2, [pc, #64]	; (8016f48 <xTaskPriorityInherit+0xc8>)
 8016f08:	441a      	add	r2, r3
 8016f0a:	68bb      	ldr	r3, [r7, #8]
 8016f0c:	3304      	adds	r3, #4
 8016f0e:	4619      	mov	r1, r3
 8016f10:	4610      	mov	r0, r2
 8016f12:	f7fe f838 	bl	8014f86 <vListInsertEnd>
 8016f16:	e004      	b.n	8016f22 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016f18:	4b0a      	ldr	r3, [pc, #40]	; (8016f44 <xTaskPriorityInherit+0xc4>)
 8016f1a:	681b      	ldr	r3, [r3, #0]
 8016f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f1e:	68bb      	ldr	r3, [r7, #8]
 8016f20:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8016f22:	2301      	movs	r3, #1
 8016f24:	60fb      	str	r3, [r7, #12]
 8016f26:	e008      	b.n	8016f3a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8016f28:	68bb      	ldr	r3, [r7, #8]
 8016f2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016f2c:	4b05      	ldr	r3, [pc, #20]	; (8016f44 <xTaskPriorityInherit+0xc4>)
 8016f2e:	681b      	ldr	r3, [r3, #0]
 8016f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f32:	429a      	cmp	r2, r3
 8016f34:	d201      	bcs.n	8016f3a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8016f36:	2301      	movs	r3, #1
 8016f38:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016f3a:	68fb      	ldr	r3, [r7, #12]
	}
 8016f3c:	4618      	mov	r0, r3
 8016f3e:	3710      	adds	r7, #16
 8016f40:	46bd      	mov	sp, r7
 8016f42:	bd80      	pop	{r7, pc}
 8016f44:	20000fe0 	.word	0x20000fe0
 8016f48:	20000fe4 	.word	0x20000fe4
 8016f4c:	200014bc 	.word	0x200014bc

08016f50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016f50:	b580      	push	{r7, lr}
 8016f52:	b086      	sub	sp, #24
 8016f54:	af00      	add	r7, sp, #0
 8016f56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016f5c:	2300      	movs	r3, #0
 8016f5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d056      	beq.n	8017014 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8016f66:	4b2e      	ldr	r3, [pc, #184]	; (8017020 <xTaskPriorityDisinherit+0xd0>)
 8016f68:	681b      	ldr	r3, [r3, #0]
 8016f6a:	693a      	ldr	r2, [r7, #16]
 8016f6c:	429a      	cmp	r2, r3
 8016f6e:	d00a      	beq.n	8016f86 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8016f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f74:	f383 8811 	msr	BASEPRI, r3
 8016f78:	f3bf 8f6f 	isb	sy
 8016f7c:	f3bf 8f4f 	dsb	sy
 8016f80:	60fb      	str	r3, [r7, #12]
}
 8016f82:	bf00      	nop
 8016f84:	e7fe      	b.n	8016f84 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8016f86:	693b      	ldr	r3, [r7, #16]
 8016f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d10a      	bne.n	8016fa4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8016f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f92:	f383 8811 	msr	BASEPRI, r3
 8016f96:	f3bf 8f6f 	isb	sy
 8016f9a:	f3bf 8f4f 	dsb	sy
 8016f9e:	60bb      	str	r3, [r7, #8]
}
 8016fa0:	bf00      	nop
 8016fa2:	e7fe      	b.n	8016fa2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8016fa4:	693b      	ldr	r3, [r7, #16]
 8016fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016fa8:	1e5a      	subs	r2, r3, #1
 8016faa:	693b      	ldr	r3, [r7, #16]
 8016fac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016fae:	693b      	ldr	r3, [r7, #16]
 8016fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016fb2:	693b      	ldr	r3, [r7, #16]
 8016fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016fb6:	429a      	cmp	r2, r3
 8016fb8:	d02c      	beq.n	8017014 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016fba:	693b      	ldr	r3, [r7, #16]
 8016fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d128      	bne.n	8017014 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016fc2:	693b      	ldr	r3, [r7, #16]
 8016fc4:	3304      	adds	r3, #4
 8016fc6:	4618      	mov	r0, r3
 8016fc8:	f7fe f83a 	bl	8015040 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016fcc:	693b      	ldr	r3, [r7, #16]
 8016fce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016fd0:	693b      	ldr	r3, [r7, #16]
 8016fd2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016fd4:	693b      	ldr	r3, [r7, #16]
 8016fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016fd8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016fdc:	693b      	ldr	r3, [r7, #16]
 8016fde:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8016fe0:	693b      	ldr	r3, [r7, #16]
 8016fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016fe4:	4b0f      	ldr	r3, [pc, #60]	; (8017024 <xTaskPriorityDisinherit+0xd4>)
 8016fe6:	681b      	ldr	r3, [r3, #0]
 8016fe8:	429a      	cmp	r2, r3
 8016fea:	d903      	bls.n	8016ff4 <xTaskPriorityDisinherit+0xa4>
 8016fec:	693b      	ldr	r3, [r7, #16]
 8016fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ff0:	4a0c      	ldr	r2, [pc, #48]	; (8017024 <xTaskPriorityDisinherit+0xd4>)
 8016ff2:	6013      	str	r3, [r2, #0]
 8016ff4:	693b      	ldr	r3, [r7, #16]
 8016ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ff8:	4613      	mov	r3, r2
 8016ffa:	009b      	lsls	r3, r3, #2
 8016ffc:	4413      	add	r3, r2
 8016ffe:	009b      	lsls	r3, r3, #2
 8017000:	4a09      	ldr	r2, [pc, #36]	; (8017028 <xTaskPriorityDisinherit+0xd8>)
 8017002:	441a      	add	r2, r3
 8017004:	693b      	ldr	r3, [r7, #16]
 8017006:	3304      	adds	r3, #4
 8017008:	4619      	mov	r1, r3
 801700a:	4610      	mov	r0, r2
 801700c:	f7fd ffbb 	bl	8014f86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8017010:	2301      	movs	r3, #1
 8017012:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017014:	697b      	ldr	r3, [r7, #20]
	}
 8017016:	4618      	mov	r0, r3
 8017018:	3718      	adds	r7, #24
 801701a:	46bd      	mov	sp, r7
 801701c:	bd80      	pop	{r7, pc}
 801701e:	bf00      	nop
 8017020:	20000fe0 	.word	0x20000fe0
 8017024:	200014bc 	.word	0x200014bc
 8017028:	20000fe4 	.word	0x20000fe4

0801702c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801702c:	b580      	push	{r7, lr}
 801702e:	b088      	sub	sp, #32
 8017030:	af00      	add	r7, sp, #0
 8017032:	6078      	str	r0, [r7, #4]
 8017034:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801703a:	2301      	movs	r3, #1
 801703c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	2b00      	cmp	r3, #0
 8017042:	d06a      	beq.n	801711a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8017044:	69bb      	ldr	r3, [r7, #24]
 8017046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017048:	2b00      	cmp	r3, #0
 801704a:	d10a      	bne.n	8017062 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801704c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017050:	f383 8811 	msr	BASEPRI, r3
 8017054:	f3bf 8f6f 	isb	sy
 8017058:	f3bf 8f4f 	dsb	sy
 801705c:	60fb      	str	r3, [r7, #12]
}
 801705e:	bf00      	nop
 8017060:	e7fe      	b.n	8017060 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8017062:	69bb      	ldr	r3, [r7, #24]
 8017064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017066:	683a      	ldr	r2, [r7, #0]
 8017068:	429a      	cmp	r2, r3
 801706a:	d902      	bls.n	8017072 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801706c:	683b      	ldr	r3, [r7, #0]
 801706e:	61fb      	str	r3, [r7, #28]
 8017070:	e002      	b.n	8017078 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8017072:	69bb      	ldr	r3, [r7, #24]
 8017074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017076:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8017078:	69bb      	ldr	r3, [r7, #24]
 801707a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801707c:	69fa      	ldr	r2, [r7, #28]
 801707e:	429a      	cmp	r2, r3
 8017080:	d04b      	beq.n	801711a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8017082:	69bb      	ldr	r3, [r7, #24]
 8017084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017086:	697a      	ldr	r2, [r7, #20]
 8017088:	429a      	cmp	r2, r3
 801708a:	d146      	bne.n	801711a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801708c:	4b25      	ldr	r3, [pc, #148]	; (8017124 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801708e:	681b      	ldr	r3, [r3, #0]
 8017090:	69ba      	ldr	r2, [r7, #24]
 8017092:	429a      	cmp	r2, r3
 8017094:	d10a      	bne.n	80170ac <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8017096:	f04f 0350 	mov.w	r3, #80	; 0x50
 801709a:	f383 8811 	msr	BASEPRI, r3
 801709e:	f3bf 8f6f 	isb	sy
 80170a2:	f3bf 8f4f 	dsb	sy
 80170a6:	60bb      	str	r3, [r7, #8]
}
 80170a8:	bf00      	nop
 80170aa:	e7fe      	b.n	80170aa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80170ac:	69bb      	ldr	r3, [r7, #24]
 80170ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170b0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80170b2:	69bb      	ldr	r3, [r7, #24]
 80170b4:	69fa      	ldr	r2, [r7, #28]
 80170b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80170b8:	69bb      	ldr	r3, [r7, #24]
 80170ba:	699b      	ldr	r3, [r3, #24]
 80170bc:	2b00      	cmp	r3, #0
 80170be:	db04      	blt.n	80170ca <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80170c0:	69fb      	ldr	r3, [r7, #28]
 80170c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80170c6:	69bb      	ldr	r3, [r7, #24]
 80170c8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80170ca:	69bb      	ldr	r3, [r7, #24]
 80170cc:	6959      	ldr	r1, [r3, #20]
 80170ce:	693a      	ldr	r2, [r7, #16]
 80170d0:	4613      	mov	r3, r2
 80170d2:	009b      	lsls	r3, r3, #2
 80170d4:	4413      	add	r3, r2
 80170d6:	009b      	lsls	r3, r3, #2
 80170d8:	4a13      	ldr	r2, [pc, #76]	; (8017128 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80170da:	4413      	add	r3, r2
 80170dc:	4299      	cmp	r1, r3
 80170de:	d11c      	bne.n	801711a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80170e0:	69bb      	ldr	r3, [r7, #24]
 80170e2:	3304      	adds	r3, #4
 80170e4:	4618      	mov	r0, r3
 80170e6:	f7fd ffab 	bl	8015040 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80170ea:	69bb      	ldr	r3, [r7, #24]
 80170ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170ee:	4b0f      	ldr	r3, [pc, #60]	; (801712c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80170f0:	681b      	ldr	r3, [r3, #0]
 80170f2:	429a      	cmp	r2, r3
 80170f4:	d903      	bls.n	80170fe <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80170f6:	69bb      	ldr	r3, [r7, #24]
 80170f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170fa:	4a0c      	ldr	r2, [pc, #48]	; (801712c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80170fc:	6013      	str	r3, [r2, #0]
 80170fe:	69bb      	ldr	r3, [r7, #24]
 8017100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017102:	4613      	mov	r3, r2
 8017104:	009b      	lsls	r3, r3, #2
 8017106:	4413      	add	r3, r2
 8017108:	009b      	lsls	r3, r3, #2
 801710a:	4a07      	ldr	r2, [pc, #28]	; (8017128 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801710c:	441a      	add	r2, r3
 801710e:	69bb      	ldr	r3, [r7, #24]
 8017110:	3304      	adds	r3, #4
 8017112:	4619      	mov	r1, r3
 8017114:	4610      	mov	r0, r2
 8017116:	f7fd ff36 	bl	8014f86 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801711a:	bf00      	nop
 801711c:	3720      	adds	r7, #32
 801711e:	46bd      	mov	sp, r7
 8017120:	bd80      	pop	{r7, pc}
 8017122:	bf00      	nop
 8017124:	20000fe0 	.word	0x20000fe0
 8017128:	20000fe4 	.word	0x20000fe4
 801712c:	200014bc 	.word	0x200014bc

08017130 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8017130:	b480      	push	{r7}
 8017132:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8017134:	4b07      	ldr	r3, [pc, #28]	; (8017154 <pvTaskIncrementMutexHeldCount+0x24>)
 8017136:	681b      	ldr	r3, [r3, #0]
 8017138:	2b00      	cmp	r3, #0
 801713a:	d004      	beq.n	8017146 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801713c:	4b05      	ldr	r3, [pc, #20]	; (8017154 <pvTaskIncrementMutexHeldCount+0x24>)
 801713e:	681b      	ldr	r3, [r3, #0]
 8017140:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017142:	3201      	adds	r2, #1
 8017144:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8017146:	4b03      	ldr	r3, [pc, #12]	; (8017154 <pvTaskIncrementMutexHeldCount+0x24>)
 8017148:	681b      	ldr	r3, [r3, #0]
	}
 801714a:	4618      	mov	r0, r3
 801714c:	46bd      	mov	sp, r7
 801714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017152:	4770      	bx	lr
 8017154:	20000fe0 	.word	0x20000fe0

08017158 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8017158:	b580      	push	{r7, lr}
 801715a:	b084      	sub	sp, #16
 801715c:	af00      	add	r7, sp, #0
 801715e:	6078      	str	r0, [r7, #4]
 8017160:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8017162:	4b21      	ldr	r3, [pc, #132]	; (80171e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8017164:	681b      	ldr	r3, [r3, #0]
 8017166:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017168:	4b20      	ldr	r3, [pc, #128]	; (80171ec <prvAddCurrentTaskToDelayedList+0x94>)
 801716a:	681b      	ldr	r3, [r3, #0]
 801716c:	3304      	adds	r3, #4
 801716e:	4618      	mov	r0, r3
 8017170:	f7fd ff66 	bl	8015040 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801717a:	d10a      	bne.n	8017192 <prvAddCurrentTaskToDelayedList+0x3a>
 801717c:	683b      	ldr	r3, [r7, #0]
 801717e:	2b00      	cmp	r3, #0
 8017180:	d007      	beq.n	8017192 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017182:	4b1a      	ldr	r3, [pc, #104]	; (80171ec <prvAddCurrentTaskToDelayedList+0x94>)
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	3304      	adds	r3, #4
 8017188:	4619      	mov	r1, r3
 801718a:	4819      	ldr	r0, [pc, #100]	; (80171f0 <prvAddCurrentTaskToDelayedList+0x98>)
 801718c:	f7fd fefb 	bl	8014f86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8017190:	e026      	b.n	80171e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8017192:	68fa      	ldr	r2, [r7, #12]
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	4413      	add	r3, r2
 8017198:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801719a:	4b14      	ldr	r3, [pc, #80]	; (80171ec <prvAddCurrentTaskToDelayedList+0x94>)
 801719c:	681b      	ldr	r3, [r3, #0]
 801719e:	68ba      	ldr	r2, [r7, #8]
 80171a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80171a2:	68ba      	ldr	r2, [r7, #8]
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	429a      	cmp	r2, r3
 80171a8:	d209      	bcs.n	80171be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80171aa:	4b12      	ldr	r3, [pc, #72]	; (80171f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80171ac:	681a      	ldr	r2, [r3, #0]
 80171ae:	4b0f      	ldr	r3, [pc, #60]	; (80171ec <prvAddCurrentTaskToDelayedList+0x94>)
 80171b0:	681b      	ldr	r3, [r3, #0]
 80171b2:	3304      	adds	r3, #4
 80171b4:	4619      	mov	r1, r3
 80171b6:	4610      	mov	r0, r2
 80171b8:	f7fd ff09 	bl	8014fce <vListInsert>
}
 80171bc:	e010      	b.n	80171e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80171be:	4b0e      	ldr	r3, [pc, #56]	; (80171f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80171c0:	681a      	ldr	r2, [r3, #0]
 80171c2:	4b0a      	ldr	r3, [pc, #40]	; (80171ec <prvAddCurrentTaskToDelayedList+0x94>)
 80171c4:	681b      	ldr	r3, [r3, #0]
 80171c6:	3304      	adds	r3, #4
 80171c8:	4619      	mov	r1, r3
 80171ca:	4610      	mov	r0, r2
 80171cc:	f7fd feff 	bl	8014fce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80171d0:	4b0a      	ldr	r3, [pc, #40]	; (80171fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80171d2:	681b      	ldr	r3, [r3, #0]
 80171d4:	68ba      	ldr	r2, [r7, #8]
 80171d6:	429a      	cmp	r2, r3
 80171d8:	d202      	bcs.n	80171e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80171da:	4a08      	ldr	r2, [pc, #32]	; (80171fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80171dc:	68bb      	ldr	r3, [r7, #8]
 80171de:	6013      	str	r3, [r2, #0]
}
 80171e0:	bf00      	nop
 80171e2:	3710      	adds	r7, #16
 80171e4:	46bd      	mov	sp, r7
 80171e6:	bd80      	pop	{r7, pc}
 80171e8:	200014b8 	.word	0x200014b8
 80171ec:	20000fe0 	.word	0x20000fe0
 80171f0:	200014a0 	.word	0x200014a0
 80171f4:	20001470 	.word	0x20001470
 80171f8:	2000146c 	.word	0x2000146c
 80171fc:	200014d4 	.word	0x200014d4

08017200 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8017200:	b580      	push	{r7, lr}
 8017202:	b08a      	sub	sp, #40	; 0x28
 8017204:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8017206:	2300      	movs	r3, #0
 8017208:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801720a:	f000 fb07 	bl	801781c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801720e:	4b1c      	ldr	r3, [pc, #112]	; (8017280 <xTimerCreateTimerTask+0x80>)
 8017210:	681b      	ldr	r3, [r3, #0]
 8017212:	2b00      	cmp	r3, #0
 8017214:	d021      	beq.n	801725a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8017216:	2300      	movs	r3, #0
 8017218:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801721a:	2300      	movs	r3, #0
 801721c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801721e:	1d3a      	adds	r2, r7, #4
 8017220:	f107 0108 	add.w	r1, r7, #8
 8017224:	f107 030c 	add.w	r3, r7, #12
 8017228:	4618      	mov	r0, r3
 801722a:	f7fd fe65 	bl	8014ef8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801722e:	6879      	ldr	r1, [r7, #4]
 8017230:	68bb      	ldr	r3, [r7, #8]
 8017232:	68fa      	ldr	r2, [r7, #12]
 8017234:	9202      	str	r2, [sp, #8]
 8017236:	9301      	str	r3, [sp, #4]
 8017238:	2302      	movs	r3, #2
 801723a:	9300      	str	r3, [sp, #0]
 801723c:	2300      	movs	r3, #0
 801723e:	460a      	mov	r2, r1
 8017240:	4910      	ldr	r1, [pc, #64]	; (8017284 <xTimerCreateTimerTask+0x84>)
 8017242:	4811      	ldr	r0, [pc, #68]	; (8017288 <xTimerCreateTimerTask+0x88>)
 8017244:	f7fe ff34 	bl	80160b0 <xTaskCreateStatic>
 8017248:	4603      	mov	r3, r0
 801724a:	4a10      	ldr	r2, [pc, #64]	; (801728c <xTimerCreateTimerTask+0x8c>)
 801724c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801724e:	4b0f      	ldr	r3, [pc, #60]	; (801728c <xTimerCreateTimerTask+0x8c>)
 8017250:	681b      	ldr	r3, [r3, #0]
 8017252:	2b00      	cmp	r3, #0
 8017254:	d001      	beq.n	801725a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8017256:	2301      	movs	r3, #1
 8017258:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801725a:	697b      	ldr	r3, [r7, #20]
 801725c:	2b00      	cmp	r3, #0
 801725e:	d10a      	bne.n	8017276 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8017260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017264:	f383 8811 	msr	BASEPRI, r3
 8017268:	f3bf 8f6f 	isb	sy
 801726c:	f3bf 8f4f 	dsb	sy
 8017270:	613b      	str	r3, [r7, #16]
}
 8017272:	bf00      	nop
 8017274:	e7fe      	b.n	8017274 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8017276:	697b      	ldr	r3, [r7, #20]
}
 8017278:	4618      	mov	r0, r3
 801727a:	3718      	adds	r7, #24
 801727c:	46bd      	mov	sp, r7
 801727e:	bd80      	pop	{r7, pc}
 8017280:	20001510 	.word	0x20001510
 8017284:	08020a88 	.word	0x08020a88
 8017288:	080173c5 	.word	0x080173c5
 801728c:	20001514 	.word	0x20001514

08017290 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8017290:	b580      	push	{r7, lr}
 8017292:	b08a      	sub	sp, #40	; 0x28
 8017294:	af00      	add	r7, sp, #0
 8017296:	60f8      	str	r0, [r7, #12]
 8017298:	60b9      	str	r1, [r7, #8]
 801729a:	607a      	str	r2, [r7, #4]
 801729c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801729e:	2300      	movs	r3, #0
 80172a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80172a2:	68fb      	ldr	r3, [r7, #12]
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d10a      	bne.n	80172be <xTimerGenericCommand+0x2e>
	__asm volatile
 80172a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172ac:	f383 8811 	msr	BASEPRI, r3
 80172b0:	f3bf 8f6f 	isb	sy
 80172b4:	f3bf 8f4f 	dsb	sy
 80172b8:	623b      	str	r3, [r7, #32]
}
 80172ba:	bf00      	nop
 80172bc:	e7fe      	b.n	80172bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80172be:	4b1a      	ldr	r3, [pc, #104]	; (8017328 <xTimerGenericCommand+0x98>)
 80172c0:	681b      	ldr	r3, [r3, #0]
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d02a      	beq.n	801731c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80172c6:	68bb      	ldr	r3, [r7, #8]
 80172c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80172ce:	68fb      	ldr	r3, [r7, #12]
 80172d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80172d2:	68bb      	ldr	r3, [r7, #8]
 80172d4:	2b05      	cmp	r3, #5
 80172d6:	dc18      	bgt.n	801730a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80172d8:	f7ff fdb4 	bl	8016e44 <xTaskGetSchedulerState>
 80172dc:	4603      	mov	r3, r0
 80172de:	2b02      	cmp	r3, #2
 80172e0:	d109      	bne.n	80172f6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80172e2:	4b11      	ldr	r3, [pc, #68]	; (8017328 <xTimerGenericCommand+0x98>)
 80172e4:	6818      	ldr	r0, [r3, #0]
 80172e6:	f107 0110 	add.w	r1, r7, #16
 80172ea:	2300      	movs	r3, #0
 80172ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80172ee:	f7fe f879 	bl	80153e4 <xQueueGenericSend>
 80172f2:	6278      	str	r0, [r7, #36]	; 0x24
 80172f4:	e012      	b.n	801731c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80172f6:	4b0c      	ldr	r3, [pc, #48]	; (8017328 <xTimerGenericCommand+0x98>)
 80172f8:	6818      	ldr	r0, [r3, #0]
 80172fa:	f107 0110 	add.w	r1, r7, #16
 80172fe:	2300      	movs	r3, #0
 8017300:	2200      	movs	r2, #0
 8017302:	f7fe f86f 	bl	80153e4 <xQueueGenericSend>
 8017306:	6278      	str	r0, [r7, #36]	; 0x24
 8017308:	e008      	b.n	801731c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801730a:	4b07      	ldr	r3, [pc, #28]	; (8017328 <xTimerGenericCommand+0x98>)
 801730c:	6818      	ldr	r0, [r3, #0]
 801730e:	f107 0110 	add.w	r1, r7, #16
 8017312:	2300      	movs	r3, #0
 8017314:	683a      	ldr	r2, [r7, #0]
 8017316:	f7fe f963 	bl	80155e0 <xQueueGenericSendFromISR>
 801731a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801731c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801731e:	4618      	mov	r0, r3
 8017320:	3728      	adds	r7, #40	; 0x28
 8017322:	46bd      	mov	sp, r7
 8017324:	bd80      	pop	{r7, pc}
 8017326:	bf00      	nop
 8017328:	20001510 	.word	0x20001510

0801732c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801732c:	b580      	push	{r7, lr}
 801732e:	b088      	sub	sp, #32
 8017330:	af02      	add	r7, sp, #8
 8017332:	6078      	str	r0, [r7, #4]
 8017334:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017336:	4b22      	ldr	r3, [pc, #136]	; (80173c0 <prvProcessExpiredTimer+0x94>)
 8017338:	681b      	ldr	r3, [r3, #0]
 801733a:	68db      	ldr	r3, [r3, #12]
 801733c:	68db      	ldr	r3, [r3, #12]
 801733e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017340:	697b      	ldr	r3, [r7, #20]
 8017342:	3304      	adds	r3, #4
 8017344:	4618      	mov	r0, r3
 8017346:	f7fd fe7b 	bl	8015040 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801734a:	697b      	ldr	r3, [r7, #20]
 801734c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017350:	f003 0304 	and.w	r3, r3, #4
 8017354:	2b00      	cmp	r3, #0
 8017356:	d022      	beq.n	801739e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8017358:	697b      	ldr	r3, [r7, #20]
 801735a:	699a      	ldr	r2, [r3, #24]
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	18d1      	adds	r1, r2, r3
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	683a      	ldr	r2, [r7, #0]
 8017364:	6978      	ldr	r0, [r7, #20]
 8017366:	f000 f8d1 	bl	801750c <prvInsertTimerInActiveList>
 801736a:	4603      	mov	r3, r0
 801736c:	2b00      	cmp	r3, #0
 801736e:	d01f      	beq.n	80173b0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017370:	2300      	movs	r3, #0
 8017372:	9300      	str	r3, [sp, #0]
 8017374:	2300      	movs	r3, #0
 8017376:	687a      	ldr	r2, [r7, #4]
 8017378:	2100      	movs	r1, #0
 801737a:	6978      	ldr	r0, [r7, #20]
 801737c:	f7ff ff88 	bl	8017290 <xTimerGenericCommand>
 8017380:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8017382:	693b      	ldr	r3, [r7, #16]
 8017384:	2b00      	cmp	r3, #0
 8017386:	d113      	bne.n	80173b0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8017388:	f04f 0350 	mov.w	r3, #80	; 0x50
 801738c:	f383 8811 	msr	BASEPRI, r3
 8017390:	f3bf 8f6f 	isb	sy
 8017394:	f3bf 8f4f 	dsb	sy
 8017398:	60fb      	str	r3, [r7, #12]
}
 801739a:	bf00      	nop
 801739c:	e7fe      	b.n	801739c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801739e:	697b      	ldr	r3, [r7, #20]
 80173a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80173a4:	f023 0301 	bic.w	r3, r3, #1
 80173a8:	b2da      	uxtb	r2, r3
 80173aa:	697b      	ldr	r3, [r7, #20]
 80173ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80173b0:	697b      	ldr	r3, [r7, #20]
 80173b2:	6a1b      	ldr	r3, [r3, #32]
 80173b4:	6978      	ldr	r0, [r7, #20]
 80173b6:	4798      	blx	r3
}
 80173b8:	bf00      	nop
 80173ba:	3718      	adds	r7, #24
 80173bc:	46bd      	mov	sp, r7
 80173be:	bd80      	pop	{r7, pc}
 80173c0:	20001508 	.word	0x20001508

080173c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80173c4:	b580      	push	{r7, lr}
 80173c6:	b084      	sub	sp, #16
 80173c8:	af00      	add	r7, sp, #0
 80173ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80173cc:	f107 0308 	add.w	r3, r7, #8
 80173d0:	4618      	mov	r0, r3
 80173d2:	f000 f857 	bl	8017484 <prvGetNextExpireTime>
 80173d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80173d8:	68bb      	ldr	r3, [r7, #8]
 80173da:	4619      	mov	r1, r3
 80173dc:	68f8      	ldr	r0, [r7, #12]
 80173de:	f000 f803 	bl	80173e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80173e2:	f000 f8d5 	bl	8017590 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80173e6:	e7f1      	b.n	80173cc <prvTimerTask+0x8>

080173e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80173e8:	b580      	push	{r7, lr}
 80173ea:	b084      	sub	sp, #16
 80173ec:	af00      	add	r7, sp, #0
 80173ee:	6078      	str	r0, [r7, #4]
 80173f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80173f2:	f7ff f92b 	bl	801664c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80173f6:	f107 0308 	add.w	r3, r7, #8
 80173fa:	4618      	mov	r0, r3
 80173fc:	f000 f866 	bl	80174cc <prvSampleTimeNow>
 8017400:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8017402:	68bb      	ldr	r3, [r7, #8]
 8017404:	2b00      	cmp	r3, #0
 8017406:	d130      	bne.n	801746a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8017408:	683b      	ldr	r3, [r7, #0]
 801740a:	2b00      	cmp	r3, #0
 801740c:	d10a      	bne.n	8017424 <prvProcessTimerOrBlockTask+0x3c>
 801740e:	687a      	ldr	r2, [r7, #4]
 8017410:	68fb      	ldr	r3, [r7, #12]
 8017412:	429a      	cmp	r2, r3
 8017414:	d806      	bhi.n	8017424 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8017416:	f7ff f927 	bl	8016668 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801741a:	68f9      	ldr	r1, [r7, #12]
 801741c:	6878      	ldr	r0, [r7, #4]
 801741e:	f7ff ff85 	bl	801732c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8017422:	e024      	b.n	801746e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8017424:	683b      	ldr	r3, [r7, #0]
 8017426:	2b00      	cmp	r3, #0
 8017428:	d008      	beq.n	801743c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801742a:	4b13      	ldr	r3, [pc, #76]	; (8017478 <prvProcessTimerOrBlockTask+0x90>)
 801742c:	681b      	ldr	r3, [r3, #0]
 801742e:	681b      	ldr	r3, [r3, #0]
 8017430:	2b00      	cmp	r3, #0
 8017432:	d101      	bne.n	8017438 <prvProcessTimerOrBlockTask+0x50>
 8017434:	2301      	movs	r3, #1
 8017436:	e000      	b.n	801743a <prvProcessTimerOrBlockTask+0x52>
 8017438:	2300      	movs	r3, #0
 801743a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801743c:	4b0f      	ldr	r3, [pc, #60]	; (801747c <prvProcessTimerOrBlockTask+0x94>)
 801743e:	6818      	ldr	r0, [r3, #0]
 8017440:	687a      	ldr	r2, [r7, #4]
 8017442:	68fb      	ldr	r3, [r7, #12]
 8017444:	1ad3      	subs	r3, r2, r3
 8017446:	683a      	ldr	r2, [r7, #0]
 8017448:	4619      	mov	r1, r3
 801744a:	f7fe fdfd 	bl	8016048 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801744e:	f7ff f90b 	bl	8016668 <xTaskResumeAll>
 8017452:	4603      	mov	r3, r0
 8017454:	2b00      	cmp	r3, #0
 8017456:	d10a      	bne.n	801746e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8017458:	4b09      	ldr	r3, [pc, #36]	; (8017480 <prvProcessTimerOrBlockTask+0x98>)
 801745a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801745e:	601a      	str	r2, [r3, #0]
 8017460:	f3bf 8f4f 	dsb	sy
 8017464:	f3bf 8f6f 	isb	sy
}
 8017468:	e001      	b.n	801746e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801746a:	f7ff f8fd 	bl	8016668 <xTaskResumeAll>
}
 801746e:	bf00      	nop
 8017470:	3710      	adds	r7, #16
 8017472:	46bd      	mov	sp, r7
 8017474:	bd80      	pop	{r7, pc}
 8017476:	bf00      	nop
 8017478:	2000150c 	.word	0x2000150c
 801747c:	20001510 	.word	0x20001510
 8017480:	e000ed04 	.word	0xe000ed04

08017484 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8017484:	b480      	push	{r7}
 8017486:	b085      	sub	sp, #20
 8017488:	af00      	add	r7, sp, #0
 801748a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801748c:	4b0e      	ldr	r3, [pc, #56]	; (80174c8 <prvGetNextExpireTime+0x44>)
 801748e:	681b      	ldr	r3, [r3, #0]
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	2b00      	cmp	r3, #0
 8017494:	d101      	bne.n	801749a <prvGetNextExpireTime+0x16>
 8017496:	2201      	movs	r2, #1
 8017498:	e000      	b.n	801749c <prvGetNextExpireTime+0x18>
 801749a:	2200      	movs	r2, #0
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	681b      	ldr	r3, [r3, #0]
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	d105      	bne.n	80174b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80174a8:	4b07      	ldr	r3, [pc, #28]	; (80174c8 <prvGetNextExpireTime+0x44>)
 80174aa:	681b      	ldr	r3, [r3, #0]
 80174ac:	68db      	ldr	r3, [r3, #12]
 80174ae:	681b      	ldr	r3, [r3, #0]
 80174b0:	60fb      	str	r3, [r7, #12]
 80174b2:	e001      	b.n	80174b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80174b4:	2300      	movs	r3, #0
 80174b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80174b8:	68fb      	ldr	r3, [r7, #12]
}
 80174ba:	4618      	mov	r0, r3
 80174bc:	3714      	adds	r7, #20
 80174be:	46bd      	mov	sp, r7
 80174c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174c4:	4770      	bx	lr
 80174c6:	bf00      	nop
 80174c8:	20001508 	.word	0x20001508

080174cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80174cc:	b580      	push	{r7, lr}
 80174ce:	b084      	sub	sp, #16
 80174d0:	af00      	add	r7, sp, #0
 80174d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80174d4:	f7ff f966 	bl	80167a4 <xTaskGetTickCount>
 80174d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80174da:	4b0b      	ldr	r3, [pc, #44]	; (8017508 <prvSampleTimeNow+0x3c>)
 80174dc:	681b      	ldr	r3, [r3, #0]
 80174de:	68fa      	ldr	r2, [r7, #12]
 80174e0:	429a      	cmp	r2, r3
 80174e2:	d205      	bcs.n	80174f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80174e4:	f000 f936 	bl	8017754 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	2201      	movs	r2, #1
 80174ec:	601a      	str	r2, [r3, #0]
 80174ee:	e002      	b.n	80174f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	2200      	movs	r2, #0
 80174f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80174f6:	4a04      	ldr	r2, [pc, #16]	; (8017508 <prvSampleTimeNow+0x3c>)
 80174f8:	68fb      	ldr	r3, [r7, #12]
 80174fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80174fc:	68fb      	ldr	r3, [r7, #12]
}
 80174fe:	4618      	mov	r0, r3
 8017500:	3710      	adds	r7, #16
 8017502:	46bd      	mov	sp, r7
 8017504:	bd80      	pop	{r7, pc}
 8017506:	bf00      	nop
 8017508:	20001518 	.word	0x20001518

0801750c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801750c:	b580      	push	{r7, lr}
 801750e:	b086      	sub	sp, #24
 8017510:	af00      	add	r7, sp, #0
 8017512:	60f8      	str	r0, [r7, #12]
 8017514:	60b9      	str	r1, [r7, #8]
 8017516:	607a      	str	r2, [r7, #4]
 8017518:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801751a:	2300      	movs	r3, #0
 801751c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801751e:	68fb      	ldr	r3, [r7, #12]
 8017520:	68ba      	ldr	r2, [r7, #8]
 8017522:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017524:	68fb      	ldr	r3, [r7, #12]
 8017526:	68fa      	ldr	r2, [r7, #12]
 8017528:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801752a:	68ba      	ldr	r2, [r7, #8]
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	429a      	cmp	r2, r3
 8017530:	d812      	bhi.n	8017558 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017532:	687a      	ldr	r2, [r7, #4]
 8017534:	683b      	ldr	r3, [r7, #0]
 8017536:	1ad2      	subs	r2, r2, r3
 8017538:	68fb      	ldr	r3, [r7, #12]
 801753a:	699b      	ldr	r3, [r3, #24]
 801753c:	429a      	cmp	r2, r3
 801753e:	d302      	bcc.n	8017546 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8017540:	2301      	movs	r3, #1
 8017542:	617b      	str	r3, [r7, #20]
 8017544:	e01b      	b.n	801757e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8017546:	4b10      	ldr	r3, [pc, #64]	; (8017588 <prvInsertTimerInActiveList+0x7c>)
 8017548:	681a      	ldr	r2, [r3, #0]
 801754a:	68fb      	ldr	r3, [r7, #12]
 801754c:	3304      	adds	r3, #4
 801754e:	4619      	mov	r1, r3
 8017550:	4610      	mov	r0, r2
 8017552:	f7fd fd3c 	bl	8014fce <vListInsert>
 8017556:	e012      	b.n	801757e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8017558:	687a      	ldr	r2, [r7, #4]
 801755a:	683b      	ldr	r3, [r7, #0]
 801755c:	429a      	cmp	r2, r3
 801755e:	d206      	bcs.n	801756e <prvInsertTimerInActiveList+0x62>
 8017560:	68ba      	ldr	r2, [r7, #8]
 8017562:	683b      	ldr	r3, [r7, #0]
 8017564:	429a      	cmp	r2, r3
 8017566:	d302      	bcc.n	801756e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8017568:	2301      	movs	r3, #1
 801756a:	617b      	str	r3, [r7, #20]
 801756c:	e007      	b.n	801757e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801756e:	4b07      	ldr	r3, [pc, #28]	; (801758c <prvInsertTimerInActiveList+0x80>)
 8017570:	681a      	ldr	r2, [r3, #0]
 8017572:	68fb      	ldr	r3, [r7, #12]
 8017574:	3304      	adds	r3, #4
 8017576:	4619      	mov	r1, r3
 8017578:	4610      	mov	r0, r2
 801757a:	f7fd fd28 	bl	8014fce <vListInsert>
		}
	}

	return xProcessTimerNow;
 801757e:	697b      	ldr	r3, [r7, #20]
}
 8017580:	4618      	mov	r0, r3
 8017582:	3718      	adds	r7, #24
 8017584:	46bd      	mov	sp, r7
 8017586:	bd80      	pop	{r7, pc}
 8017588:	2000150c 	.word	0x2000150c
 801758c:	20001508 	.word	0x20001508

08017590 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8017590:	b580      	push	{r7, lr}
 8017592:	b08e      	sub	sp, #56	; 0x38
 8017594:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017596:	e0ca      	b.n	801772e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	2b00      	cmp	r3, #0
 801759c:	da18      	bge.n	80175d0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801759e:	1d3b      	adds	r3, r7, #4
 80175a0:	3304      	adds	r3, #4
 80175a2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80175a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d10a      	bne.n	80175c0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80175aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175ae:	f383 8811 	msr	BASEPRI, r3
 80175b2:	f3bf 8f6f 	isb	sy
 80175b6:	f3bf 8f4f 	dsb	sy
 80175ba:	61fb      	str	r3, [r7, #28]
}
 80175bc:	bf00      	nop
 80175be:	e7fe      	b.n	80175be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80175c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175c2:	681b      	ldr	r3, [r3, #0]
 80175c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80175c6:	6850      	ldr	r0, [r2, #4]
 80175c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80175ca:	6892      	ldr	r2, [r2, #8]
 80175cc:	4611      	mov	r1, r2
 80175ce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	f2c0 80aa 	blt.w	801772c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80175d8:	68fb      	ldr	r3, [r7, #12]
 80175da:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80175dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175de:	695b      	ldr	r3, [r3, #20]
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d004      	beq.n	80175ee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80175e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175e6:	3304      	adds	r3, #4
 80175e8:	4618      	mov	r0, r3
 80175ea:	f7fd fd29 	bl	8015040 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80175ee:	463b      	mov	r3, r7
 80175f0:	4618      	mov	r0, r3
 80175f2:	f7ff ff6b 	bl	80174cc <prvSampleTimeNow>
 80175f6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	2b09      	cmp	r3, #9
 80175fc:	f200 8097 	bhi.w	801772e <prvProcessReceivedCommands+0x19e>
 8017600:	a201      	add	r2, pc, #4	; (adr r2, 8017608 <prvProcessReceivedCommands+0x78>)
 8017602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017606:	bf00      	nop
 8017608:	08017631 	.word	0x08017631
 801760c:	08017631 	.word	0x08017631
 8017610:	08017631 	.word	0x08017631
 8017614:	080176a5 	.word	0x080176a5
 8017618:	080176b9 	.word	0x080176b9
 801761c:	08017703 	.word	0x08017703
 8017620:	08017631 	.word	0x08017631
 8017624:	08017631 	.word	0x08017631
 8017628:	080176a5 	.word	0x080176a5
 801762c:	080176b9 	.word	0x080176b9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017632:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017636:	f043 0301 	orr.w	r3, r3, #1
 801763a:	b2da      	uxtb	r2, r3
 801763c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801763e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8017642:	68ba      	ldr	r2, [r7, #8]
 8017644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017646:	699b      	ldr	r3, [r3, #24]
 8017648:	18d1      	adds	r1, r2, r3
 801764a:	68bb      	ldr	r3, [r7, #8]
 801764c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801764e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017650:	f7ff ff5c 	bl	801750c <prvInsertTimerInActiveList>
 8017654:	4603      	mov	r3, r0
 8017656:	2b00      	cmp	r3, #0
 8017658:	d069      	beq.n	801772e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801765a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801765c:	6a1b      	ldr	r3, [r3, #32]
 801765e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017660:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017664:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017668:	f003 0304 	and.w	r3, r3, #4
 801766c:	2b00      	cmp	r3, #0
 801766e:	d05e      	beq.n	801772e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8017670:	68ba      	ldr	r2, [r7, #8]
 8017672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017674:	699b      	ldr	r3, [r3, #24]
 8017676:	441a      	add	r2, r3
 8017678:	2300      	movs	r3, #0
 801767a:	9300      	str	r3, [sp, #0]
 801767c:	2300      	movs	r3, #0
 801767e:	2100      	movs	r1, #0
 8017680:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017682:	f7ff fe05 	bl	8017290 <xTimerGenericCommand>
 8017686:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8017688:	6a3b      	ldr	r3, [r7, #32]
 801768a:	2b00      	cmp	r3, #0
 801768c:	d14f      	bne.n	801772e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801768e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017692:	f383 8811 	msr	BASEPRI, r3
 8017696:	f3bf 8f6f 	isb	sy
 801769a:	f3bf 8f4f 	dsb	sy
 801769e:	61bb      	str	r3, [r7, #24]
}
 80176a0:	bf00      	nop
 80176a2:	e7fe      	b.n	80176a2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80176a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80176aa:	f023 0301 	bic.w	r3, r3, #1
 80176ae:	b2da      	uxtb	r2, r3
 80176b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80176b6:	e03a      	b.n	801772e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80176b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80176be:	f043 0301 	orr.w	r3, r3, #1
 80176c2:	b2da      	uxtb	r2, r3
 80176c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80176ca:	68ba      	ldr	r2, [r7, #8]
 80176cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176ce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80176d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176d2:	699b      	ldr	r3, [r3, #24]
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	d10a      	bne.n	80176ee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80176d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176dc:	f383 8811 	msr	BASEPRI, r3
 80176e0:	f3bf 8f6f 	isb	sy
 80176e4:	f3bf 8f4f 	dsb	sy
 80176e8:	617b      	str	r3, [r7, #20]
}
 80176ea:	bf00      	nop
 80176ec:	e7fe      	b.n	80176ec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80176ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176f0:	699a      	ldr	r2, [r3, #24]
 80176f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176f4:	18d1      	adds	r1, r2, r3
 80176f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80176fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80176fc:	f7ff ff06 	bl	801750c <prvInsertTimerInActiveList>
					break;
 8017700:	e015      	b.n	801772e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8017702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017704:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017708:	f003 0302 	and.w	r3, r3, #2
 801770c:	2b00      	cmp	r3, #0
 801770e:	d103      	bne.n	8017718 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8017710:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017712:	f000 fbdd 	bl	8017ed0 <vPortFree>
 8017716:	e00a      	b.n	801772e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801771a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801771e:	f023 0301 	bic.w	r3, r3, #1
 8017722:	b2da      	uxtb	r2, r3
 8017724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017726:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801772a:	e000      	b.n	801772e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801772c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801772e:	4b08      	ldr	r3, [pc, #32]	; (8017750 <prvProcessReceivedCommands+0x1c0>)
 8017730:	681b      	ldr	r3, [r3, #0]
 8017732:	1d39      	adds	r1, r7, #4
 8017734:	2200      	movs	r2, #0
 8017736:	4618      	mov	r0, r3
 8017738:	f7fe f87a 	bl	8015830 <xQueueReceive>
 801773c:	4603      	mov	r3, r0
 801773e:	2b00      	cmp	r3, #0
 8017740:	f47f af2a 	bne.w	8017598 <prvProcessReceivedCommands+0x8>
	}
}
 8017744:	bf00      	nop
 8017746:	bf00      	nop
 8017748:	3730      	adds	r7, #48	; 0x30
 801774a:	46bd      	mov	sp, r7
 801774c:	bd80      	pop	{r7, pc}
 801774e:	bf00      	nop
 8017750:	20001510 	.word	0x20001510

08017754 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8017754:	b580      	push	{r7, lr}
 8017756:	b088      	sub	sp, #32
 8017758:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801775a:	e048      	b.n	80177ee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801775c:	4b2d      	ldr	r3, [pc, #180]	; (8017814 <prvSwitchTimerLists+0xc0>)
 801775e:	681b      	ldr	r3, [r3, #0]
 8017760:	68db      	ldr	r3, [r3, #12]
 8017762:	681b      	ldr	r3, [r3, #0]
 8017764:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017766:	4b2b      	ldr	r3, [pc, #172]	; (8017814 <prvSwitchTimerLists+0xc0>)
 8017768:	681b      	ldr	r3, [r3, #0]
 801776a:	68db      	ldr	r3, [r3, #12]
 801776c:	68db      	ldr	r3, [r3, #12]
 801776e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017770:	68fb      	ldr	r3, [r7, #12]
 8017772:	3304      	adds	r3, #4
 8017774:	4618      	mov	r0, r3
 8017776:	f7fd fc63 	bl	8015040 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	6a1b      	ldr	r3, [r3, #32]
 801777e:	68f8      	ldr	r0, [r7, #12]
 8017780:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017782:	68fb      	ldr	r3, [r7, #12]
 8017784:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017788:	f003 0304 	and.w	r3, r3, #4
 801778c:	2b00      	cmp	r3, #0
 801778e:	d02e      	beq.n	80177ee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8017790:	68fb      	ldr	r3, [r7, #12]
 8017792:	699b      	ldr	r3, [r3, #24]
 8017794:	693a      	ldr	r2, [r7, #16]
 8017796:	4413      	add	r3, r2
 8017798:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801779a:	68ba      	ldr	r2, [r7, #8]
 801779c:	693b      	ldr	r3, [r7, #16]
 801779e:	429a      	cmp	r2, r3
 80177a0:	d90e      	bls.n	80177c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80177a2:	68fb      	ldr	r3, [r7, #12]
 80177a4:	68ba      	ldr	r2, [r7, #8]
 80177a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80177a8:	68fb      	ldr	r3, [r7, #12]
 80177aa:	68fa      	ldr	r2, [r7, #12]
 80177ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80177ae:	4b19      	ldr	r3, [pc, #100]	; (8017814 <prvSwitchTimerLists+0xc0>)
 80177b0:	681a      	ldr	r2, [r3, #0]
 80177b2:	68fb      	ldr	r3, [r7, #12]
 80177b4:	3304      	adds	r3, #4
 80177b6:	4619      	mov	r1, r3
 80177b8:	4610      	mov	r0, r2
 80177ba:	f7fd fc08 	bl	8014fce <vListInsert>
 80177be:	e016      	b.n	80177ee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80177c0:	2300      	movs	r3, #0
 80177c2:	9300      	str	r3, [sp, #0]
 80177c4:	2300      	movs	r3, #0
 80177c6:	693a      	ldr	r2, [r7, #16]
 80177c8:	2100      	movs	r1, #0
 80177ca:	68f8      	ldr	r0, [r7, #12]
 80177cc:	f7ff fd60 	bl	8017290 <xTimerGenericCommand>
 80177d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	d10a      	bne.n	80177ee <prvSwitchTimerLists+0x9a>
	__asm volatile
 80177d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177dc:	f383 8811 	msr	BASEPRI, r3
 80177e0:	f3bf 8f6f 	isb	sy
 80177e4:	f3bf 8f4f 	dsb	sy
 80177e8:	603b      	str	r3, [r7, #0]
}
 80177ea:	bf00      	nop
 80177ec:	e7fe      	b.n	80177ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80177ee:	4b09      	ldr	r3, [pc, #36]	; (8017814 <prvSwitchTimerLists+0xc0>)
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	681b      	ldr	r3, [r3, #0]
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	d1b1      	bne.n	801775c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80177f8:	4b06      	ldr	r3, [pc, #24]	; (8017814 <prvSwitchTimerLists+0xc0>)
 80177fa:	681b      	ldr	r3, [r3, #0]
 80177fc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80177fe:	4b06      	ldr	r3, [pc, #24]	; (8017818 <prvSwitchTimerLists+0xc4>)
 8017800:	681b      	ldr	r3, [r3, #0]
 8017802:	4a04      	ldr	r2, [pc, #16]	; (8017814 <prvSwitchTimerLists+0xc0>)
 8017804:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8017806:	4a04      	ldr	r2, [pc, #16]	; (8017818 <prvSwitchTimerLists+0xc4>)
 8017808:	697b      	ldr	r3, [r7, #20]
 801780a:	6013      	str	r3, [r2, #0]
}
 801780c:	bf00      	nop
 801780e:	3718      	adds	r7, #24
 8017810:	46bd      	mov	sp, r7
 8017812:	bd80      	pop	{r7, pc}
 8017814:	20001508 	.word	0x20001508
 8017818:	2000150c 	.word	0x2000150c

0801781c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801781c:	b580      	push	{r7, lr}
 801781e:	b082      	sub	sp, #8
 8017820:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8017822:	f000 f967 	bl	8017af4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8017826:	4b15      	ldr	r3, [pc, #84]	; (801787c <prvCheckForValidListAndQueue+0x60>)
 8017828:	681b      	ldr	r3, [r3, #0]
 801782a:	2b00      	cmp	r3, #0
 801782c:	d120      	bne.n	8017870 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801782e:	4814      	ldr	r0, [pc, #80]	; (8017880 <prvCheckForValidListAndQueue+0x64>)
 8017830:	f7fd fb7c 	bl	8014f2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8017834:	4813      	ldr	r0, [pc, #76]	; (8017884 <prvCheckForValidListAndQueue+0x68>)
 8017836:	f7fd fb79 	bl	8014f2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801783a:	4b13      	ldr	r3, [pc, #76]	; (8017888 <prvCheckForValidListAndQueue+0x6c>)
 801783c:	4a10      	ldr	r2, [pc, #64]	; (8017880 <prvCheckForValidListAndQueue+0x64>)
 801783e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8017840:	4b12      	ldr	r3, [pc, #72]	; (801788c <prvCheckForValidListAndQueue+0x70>)
 8017842:	4a10      	ldr	r2, [pc, #64]	; (8017884 <prvCheckForValidListAndQueue+0x68>)
 8017844:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8017846:	2300      	movs	r3, #0
 8017848:	9300      	str	r3, [sp, #0]
 801784a:	4b11      	ldr	r3, [pc, #68]	; (8017890 <prvCheckForValidListAndQueue+0x74>)
 801784c:	4a11      	ldr	r2, [pc, #68]	; (8017894 <prvCheckForValidListAndQueue+0x78>)
 801784e:	2110      	movs	r1, #16
 8017850:	200a      	movs	r0, #10
 8017852:	f7fd fc87 	bl	8015164 <xQueueGenericCreateStatic>
 8017856:	4603      	mov	r3, r0
 8017858:	4a08      	ldr	r2, [pc, #32]	; (801787c <prvCheckForValidListAndQueue+0x60>)
 801785a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801785c:	4b07      	ldr	r3, [pc, #28]	; (801787c <prvCheckForValidListAndQueue+0x60>)
 801785e:	681b      	ldr	r3, [r3, #0]
 8017860:	2b00      	cmp	r3, #0
 8017862:	d005      	beq.n	8017870 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8017864:	4b05      	ldr	r3, [pc, #20]	; (801787c <prvCheckForValidListAndQueue+0x60>)
 8017866:	681b      	ldr	r3, [r3, #0]
 8017868:	490b      	ldr	r1, [pc, #44]	; (8017898 <prvCheckForValidListAndQueue+0x7c>)
 801786a:	4618      	mov	r0, r3
 801786c:	f7fe fb98 	bl	8015fa0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017870:	f000 f970 	bl	8017b54 <vPortExitCritical>
}
 8017874:	bf00      	nop
 8017876:	46bd      	mov	sp, r7
 8017878:	bd80      	pop	{r7, pc}
 801787a:	bf00      	nop
 801787c:	20001510 	.word	0x20001510
 8017880:	200014e0 	.word	0x200014e0
 8017884:	200014f4 	.word	0x200014f4
 8017888:	20001508 	.word	0x20001508
 801788c:	2000150c 	.word	0x2000150c
 8017890:	200015bc 	.word	0x200015bc
 8017894:	2000151c 	.word	0x2000151c
 8017898:	08020a90 	.word	0x08020a90

0801789c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801789c:	b480      	push	{r7}
 801789e:	b085      	sub	sp, #20
 80178a0:	af00      	add	r7, sp, #0
 80178a2:	60f8      	str	r0, [r7, #12]
 80178a4:	60b9      	str	r1, [r7, #8]
 80178a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80178a8:	68fb      	ldr	r3, [r7, #12]
 80178aa:	3b04      	subs	r3, #4
 80178ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80178ae:	68fb      	ldr	r3, [r7, #12]
 80178b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80178b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80178b6:	68fb      	ldr	r3, [r7, #12]
 80178b8:	3b04      	subs	r3, #4
 80178ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80178bc:	68bb      	ldr	r3, [r7, #8]
 80178be:	f023 0201 	bic.w	r2, r3, #1
 80178c2:	68fb      	ldr	r3, [r7, #12]
 80178c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80178c6:	68fb      	ldr	r3, [r7, #12]
 80178c8:	3b04      	subs	r3, #4
 80178ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80178cc:	4a0c      	ldr	r2, [pc, #48]	; (8017900 <pxPortInitialiseStack+0x64>)
 80178ce:	68fb      	ldr	r3, [r7, #12]
 80178d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80178d2:	68fb      	ldr	r3, [r7, #12]
 80178d4:	3b14      	subs	r3, #20
 80178d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80178d8:	687a      	ldr	r2, [r7, #4]
 80178da:	68fb      	ldr	r3, [r7, #12]
 80178dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80178de:	68fb      	ldr	r3, [r7, #12]
 80178e0:	3b04      	subs	r3, #4
 80178e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80178e4:	68fb      	ldr	r3, [r7, #12]
 80178e6:	f06f 0202 	mvn.w	r2, #2
 80178ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	3b20      	subs	r3, #32
 80178f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80178f2:	68fb      	ldr	r3, [r7, #12]
}
 80178f4:	4618      	mov	r0, r3
 80178f6:	3714      	adds	r7, #20
 80178f8:	46bd      	mov	sp, r7
 80178fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178fe:	4770      	bx	lr
 8017900:	08017905 	.word	0x08017905

08017904 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8017904:	b480      	push	{r7}
 8017906:	b085      	sub	sp, #20
 8017908:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801790a:	2300      	movs	r3, #0
 801790c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801790e:	4b12      	ldr	r3, [pc, #72]	; (8017958 <prvTaskExitError+0x54>)
 8017910:	681b      	ldr	r3, [r3, #0]
 8017912:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017916:	d00a      	beq.n	801792e <prvTaskExitError+0x2a>
	__asm volatile
 8017918:	f04f 0350 	mov.w	r3, #80	; 0x50
 801791c:	f383 8811 	msr	BASEPRI, r3
 8017920:	f3bf 8f6f 	isb	sy
 8017924:	f3bf 8f4f 	dsb	sy
 8017928:	60fb      	str	r3, [r7, #12]
}
 801792a:	bf00      	nop
 801792c:	e7fe      	b.n	801792c <prvTaskExitError+0x28>
	__asm volatile
 801792e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017932:	f383 8811 	msr	BASEPRI, r3
 8017936:	f3bf 8f6f 	isb	sy
 801793a:	f3bf 8f4f 	dsb	sy
 801793e:	60bb      	str	r3, [r7, #8]
}
 8017940:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8017942:	bf00      	nop
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	2b00      	cmp	r3, #0
 8017948:	d0fc      	beq.n	8017944 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801794a:	bf00      	nop
 801794c:	bf00      	nop
 801794e:	3714      	adds	r7, #20
 8017950:	46bd      	mov	sp, r7
 8017952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017956:	4770      	bx	lr
 8017958:	20000168 	.word	0x20000168
 801795c:	00000000 	.word	0x00000000

08017960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8017960:	4b07      	ldr	r3, [pc, #28]	; (8017980 <pxCurrentTCBConst2>)
 8017962:	6819      	ldr	r1, [r3, #0]
 8017964:	6808      	ldr	r0, [r1, #0]
 8017966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801796a:	f380 8809 	msr	PSP, r0
 801796e:	f3bf 8f6f 	isb	sy
 8017972:	f04f 0000 	mov.w	r0, #0
 8017976:	f380 8811 	msr	BASEPRI, r0
 801797a:	4770      	bx	lr
 801797c:	f3af 8000 	nop.w

08017980 <pxCurrentTCBConst2>:
 8017980:	20000fe0 	.word	0x20000fe0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8017984:	bf00      	nop
 8017986:	bf00      	nop

08017988 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8017988:	4808      	ldr	r0, [pc, #32]	; (80179ac <prvPortStartFirstTask+0x24>)
 801798a:	6800      	ldr	r0, [r0, #0]
 801798c:	6800      	ldr	r0, [r0, #0]
 801798e:	f380 8808 	msr	MSP, r0
 8017992:	f04f 0000 	mov.w	r0, #0
 8017996:	f380 8814 	msr	CONTROL, r0
 801799a:	b662      	cpsie	i
 801799c:	b661      	cpsie	f
 801799e:	f3bf 8f4f 	dsb	sy
 80179a2:	f3bf 8f6f 	isb	sy
 80179a6:	df00      	svc	0
 80179a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80179aa:	bf00      	nop
 80179ac:	e000ed08 	.word	0xe000ed08

080179b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80179b0:	b580      	push	{r7, lr}
 80179b2:	b086      	sub	sp, #24
 80179b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80179b6:	4b46      	ldr	r3, [pc, #280]	; (8017ad0 <xPortStartScheduler+0x120>)
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	4a46      	ldr	r2, [pc, #280]	; (8017ad4 <xPortStartScheduler+0x124>)
 80179bc:	4293      	cmp	r3, r2
 80179be:	d10a      	bne.n	80179d6 <xPortStartScheduler+0x26>
	__asm volatile
 80179c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179c4:	f383 8811 	msr	BASEPRI, r3
 80179c8:	f3bf 8f6f 	isb	sy
 80179cc:	f3bf 8f4f 	dsb	sy
 80179d0:	613b      	str	r3, [r7, #16]
}
 80179d2:	bf00      	nop
 80179d4:	e7fe      	b.n	80179d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80179d6:	4b3e      	ldr	r3, [pc, #248]	; (8017ad0 <xPortStartScheduler+0x120>)
 80179d8:	681b      	ldr	r3, [r3, #0]
 80179da:	4a3f      	ldr	r2, [pc, #252]	; (8017ad8 <xPortStartScheduler+0x128>)
 80179dc:	4293      	cmp	r3, r2
 80179de:	d10a      	bne.n	80179f6 <xPortStartScheduler+0x46>
	__asm volatile
 80179e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179e4:	f383 8811 	msr	BASEPRI, r3
 80179e8:	f3bf 8f6f 	isb	sy
 80179ec:	f3bf 8f4f 	dsb	sy
 80179f0:	60fb      	str	r3, [r7, #12]
}
 80179f2:	bf00      	nop
 80179f4:	e7fe      	b.n	80179f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80179f6:	4b39      	ldr	r3, [pc, #228]	; (8017adc <xPortStartScheduler+0x12c>)
 80179f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80179fa:	697b      	ldr	r3, [r7, #20]
 80179fc:	781b      	ldrb	r3, [r3, #0]
 80179fe:	b2db      	uxtb	r3, r3
 8017a00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8017a02:	697b      	ldr	r3, [r7, #20]
 8017a04:	22ff      	movs	r2, #255	; 0xff
 8017a06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8017a08:	697b      	ldr	r3, [r7, #20]
 8017a0a:	781b      	ldrb	r3, [r3, #0]
 8017a0c:	b2db      	uxtb	r3, r3
 8017a0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017a10:	78fb      	ldrb	r3, [r7, #3]
 8017a12:	b2db      	uxtb	r3, r3
 8017a14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8017a18:	b2da      	uxtb	r2, r3
 8017a1a:	4b31      	ldr	r3, [pc, #196]	; (8017ae0 <xPortStartScheduler+0x130>)
 8017a1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8017a1e:	4b31      	ldr	r3, [pc, #196]	; (8017ae4 <xPortStartScheduler+0x134>)
 8017a20:	2207      	movs	r2, #7
 8017a22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017a24:	e009      	b.n	8017a3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8017a26:	4b2f      	ldr	r3, [pc, #188]	; (8017ae4 <xPortStartScheduler+0x134>)
 8017a28:	681b      	ldr	r3, [r3, #0]
 8017a2a:	3b01      	subs	r3, #1
 8017a2c:	4a2d      	ldr	r2, [pc, #180]	; (8017ae4 <xPortStartScheduler+0x134>)
 8017a2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8017a30:	78fb      	ldrb	r3, [r7, #3]
 8017a32:	b2db      	uxtb	r3, r3
 8017a34:	005b      	lsls	r3, r3, #1
 8017a36:	b2db      	uxtb	r3, r3
 8017a38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017a3a:	78fb      	ldrb	r3, [r7, #3]
 8017a3c:	b2db      	uxtb	r3, r3
 8017a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017a42:	2b80      	cmp	r3, #128	; 0x80
 8017a44:	d0ef      	beq.n	8017a26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8017a46:	4b27      	ldr	r3, [pc, #156]	; (8017ae4 <xPortStartScheduler+0x134>)
 8017a48:	681b      	ldr	r3, [r3, #0]
 8017a4a:	f1c3 0307 	rsb	r3, r3, #7
 8017a4e:	2b04      	cmp	r3, #4
 8017a50:	d00a      	beq.n	8017a68 <xPortStartScheduler+0xb8>
	__asm volatile
 8017a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a56:	f383 8811 	msr	BASEPRI, r3
 8017a5a:	f3bf 8f6f 	isb	sy
 8017a5e:	f3bf 8f4f 	dsb	sy
 8017a62:	60bb      	str	r3, [r7, #8]
}
 8017a64:	bf00      	nop
 8017a66:	e7fe      	b.n	8017a66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8017a68:	4b1e      	ldr	r3, [pc, #120]	; (8017ae4 <xPortStartScheduler+0x134>)
 8017a6a:	681b      	ldr	r3, [r3, #0]
 8017a6c:	021b      	lsls	r3, r3, #8
 8017a6e:	4a1d      	ldr	r2, [pc, #116]	; (8017ae4 <xPortStartScheduler+0x134>)
 8017a70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8017a72:	4b1c      	ldr	r3, [pc, #112]	; (8017ae4 <xPortStartScheduler+0x134>)
 8017a74:	681b      	ldr	r3, [r3, #0]
 8017a76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8017a7a:	4a1a      	ldr	r2, [pc, #104]	; (8017ae4 <xPortStartScheduler+0x134>)
 8017a7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	b2da      	uxtb	r2, r3
 8017a82:	697b      	ldr	r3, [r7, #20]
 8017a84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8017a86:	4b18      	ldr	r3, [pc, #96]	; (8017ae8 <xPortStartScheduler+0x138>)
 8017a88:	681b      	ldr	r3, [r3, #0]
 8017a8a:	4a17      	ldr	r2, [pc, #92]	; (8017ae8 <xPortStartScheduler+0x138>)
 8017a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8017a90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8017a92:	4b15      	ldr	r3, [pc, #84]	; (8017ae8 <xPortStartScheduler+0x138>)
 8017a94:	681b      	ldr	r3, [r3, #0]
 8017a96:	4a14      	ldr	r2, [pc, #80]	; (8017ae8 <xPortStartScheduler+0x138>)
 8017a98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8017a9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8017a9e:	f000 f8dd 	bl	8017c5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8017aa2:	4b12      	ldr	r3, [pc, #72]	; (8017aec <xPortStartScheduler+0x13c>)
 8017aa4:	2200      	movs	r2, #0
 8017aa6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8017aa8:	f000 f8fc 	bl	8017ca4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8017aac:	4b10      	ldr	r3, [pc, #64]	; (8017af0 <xPortStartScheduler+0x140>)
 8017aae:	681b      	ldr	r3, [r3, #0]
 8017ab0:	4a0f      	ldr	r2, [pc, #60]	; (8017af0 <xPortStartScheduler+0x140>)
 8017ab2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8017ab6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8017ab8:	f7ff ff66 	bl	8017988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8017abc:	f7fe ff3c 	bl	8016938 <vTaskSwitchContext>
	prvTaskExitError();
 8017ac0:	f7ff ff20 	bl	8017904 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8017ac4:	2300      	movs	r3, #0
}
 8017ac6:	4618      	mov	r0, r3
 8017ac8:	3718      	adds	r7, #24
 8017aca:	46bd      	mov	sp, r7
 8017acc:	bd80      	pop	{r7, pc}
 8017ace:	bf00      	nop
 8017ad0:	e000ed00 	.word	0xe000ed00
 8017ad4:	410fc271 	.word	0x410fc271
 8017ad8:	410fc270 	.word	0x410fc270
 8017adc:	e000e400 	.word	0xe000e400
 8017ae0:	2000160c 	.word	0x2000160c
 8017ae4:	20001610 	.word	0x20001610
 8017ae8:	e000ed20 	.word	0xe000ed20
 8017aec:	20000168 	.word	0x20000168
 8017af0:	e000ef34 	.word	0xe000ef34

08017af4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8017af4:	b480      	push	{r7}
 8017af6:	b083      	sub	sp, #12
 8017af8:	af00      	add	r7, sp, #0
	__asm volatile
 8017afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017afe:	f383 8811 	msr	BASEPRI, r3
 8017b02:	f3bf 8f6f 	isb	sy
 8017b06:	f3bf 8f4f 	dsb	sy
 8017b0a:	607b      	str	r3, [r7, #4]
}
 8017b0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8017b0e:	4b0f      	ldr	r3, [pc, #60]	; (8017b4c <vPortEnterCritical+0x58>)
 8017b10:	681b      	ldr	r3, [r3, #0]
 8017b12:	3301      	adds	r3, #1
 8017b14:	4a0d      	ldr	r2, [pc, #52]	; (8017b4c <vPortEnterCritical+0x58>)
 8017b16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8017b18:	4b0c      	ldr	r3, [pc, #48]	; (8017b4c <vPortEnterCritical+0x58>)
 8017b1a:	681b      	ldr	r3, [r3, #0]
 8017b1c:	2b01      	cmp	r3, #1
 8017b1e:	d10f      	bne.n	8017b40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8017b20:	4b0b      	ldr	r3, [pc, #44]	; (8017b50 <vPortEnterCritical+0x5c>)
 8017b22:	681b      	ldr	r3, [r3, #0]
 8017b24:	b2db      	uxtb	r3, r3
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	d00a      	beq.n	8017b40 <vPortEnterCritical+0x4c>
	__asm volatile
 8017b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b2e:	f383 8811 	msr	BASEPRI, r3
 8017b32:	f3bf 8f6f 	isb	sy
 8017b36:	f3bf 8f4f 	dsb	sy
 8017b3a:	603b      	str	r3, [r7, #0]
}
 8017b3c:	bf00      	nop
 8017b3e:	e7fe      	b.n	8017b3e <vPortEnterCritical+0x4a>
	}
}
 8017b40:	bf00      	nop
 8017b42:	370c      	adds	r7, #12
 8017b44:	46bd      	mov	sp, r7
 8017b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b4a:	4770      	bx	lr
 8017b4c:	20000168 	.word	0x20000168
 8017b50:	e000ed04 	.word	0xe000ed04

08017b54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8017b54:	b480      	push	{r7}
 8017b56:	b083      	sub	sp, #12
 8017b58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8017b5a:	4b12      	ldr	r3, [pc, #72]	; (8017ba4 <vPortExitCritical+0x50>)
 8017b5c:	681b      	ldr	r3, [r3, #0]
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	d10a      	bne.n	8017b78 <vPortExitCritical+0x24>
	__asm volatile
 8017b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b66:	f383 8811 	msr	BASEPRI, r3
 8017b6a:	f3bf 8f6f 	isb	sy
 8017b6e:	f3bf 8f4f 	dsb	sy
 8017b72:	607b      	str	r3, [r7, #4]
}
 8017b74:	bf00      	nop
 8017b76:	e7fe      	b.n	8017b76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8017b78:	4b0a      	ldr	r3, [pc, #40]	; (8017ba4 <vPortExitCritical+0x50>)
 8017b7a:	681b      	ldr	r3, [r3, #0]
 8017b7c:	3b01      	subs	r3, #1
 8017b7e:	4a09      	ldr	r2, [pc, #36]	; (8017ba4 <vPortExitCritical+0x50>)
 8017b80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8017b82:	4b08      	ldr	r3, [pc, #32]	; (8017ba4 <vPortExitCritical+0x50>)
 8017b84:	681b      	ldr	r3, [r3, #0]
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	d105      	bne.n	8017b96 <vPortExitCritical+0x42>
 8017b8a:	2300      	movs	r3, #0
 8017b8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017b8e:	683b      	ldr	r3, [r7, #0]
 8017b90:	f383 8811 	msr	BASEPRI, r3
}
 8017b94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8017b96:	bf00      	nop
 8017b98:	370c      	adds	r7, #12
 8017b9a:	46bd      	mov	sp, r7
 8017b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ba0:	4770      	bx	lr
 8017ba2:	bf00      	nop
 8017ba4:	20000168 	.word	0x20000168
	...

08017bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8017bb0:	f3ef 8009 	mrs	r0, PSP
 8017bb4:	f3bf 8f6f 	isb	sy
 8017bb8:	4b15      	ldr	r3, [pc, #84]	; (8017c10 <pxCurrentTCBConst>)
 8017bba:	681a      	ldr	r2, [r3, #0]
 8017bbc:	f01e 0f10 	tst.w	lr, #16
 8017bc0:	bf08      	it	eq
 8017bc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8017bc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bca:	6010      	str	r0, [r2, #0]
 8017bcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8017bd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8017bd4:	f380 8811 	msr	BASEPRI, r0
 8017bd8:	f3bf 8f4f 	dsb	sy
 8017bdc:	f3bf 8f6f 	isb	sy
 8017be0:	f7fe feaa 	bl	8016938 <vTaskSwitchContext>
 8017be4:	f04f 0000 	mov.w	r0, #0
 8017be8:	f380 8811 	msr	BASEPRI, r0
 8017bec:	bc09      	pop	{r0, r3}
 8017bee:	6819      	ldr	r1, [r3, #0]
 8017bf0:	6808      	ldr	r0, [r1, #0]
 8017bf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bf6:	f01e 0f10 	tst.w	lr, #16
 8017bfa:	bf08      	it	eq
 8017bfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8017c00:	f380 8809 	msr	PSP, r0
 8017c04:	f3bf 8f6f 	isb	sy
 8017c08:	4770      	bx	lr
 8017c0a:	bf00      	nop
 8017c0c:	f3af 8000 	nop.w

08017c10 <pxCurrentTCBConst>:
 8017c10:	20000fe0 	.word	0x20000fe0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8017c14:	bf00      	nop
 8017c16:	bf00      	nop

08017c18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8017c18:	b580      	push	{r7, lr}
 8017c1a:	b082      	sub	sp, #8
 8017c1c:	af00      	add	r7, sp, #0
	__asm volatile
 8017c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c22:	f383 8811 	msr	BASEPRI, r3
 8017c26:	f3bf 8f6f 	isb	sy
 8017c2a:	f3bf 8f4f 	dsb	sy
 8017c2e:	607b      	str	r3, [r7, #4]
}
 8017c30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8017c32:	f7fe fdc7 	bl	80167c4 <xTaskIncrementTick>
 8017c36:	4603      	mov	r3, r0
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d003      	beq.n	8017c44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8017c3c:	4b06      	ldr	r3, [pc, #24]	; (8017c58 <xPortSysTickHandler+0x40>)
 8017c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017c42:	601a      	str	r2, [r3, #0]
 8017c44:	2300      	movs	r3, #0
 8017c46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017c48:	683b      	ldr	r3, [r7, #0]
 8017c4a:	f383 8811 	msr	BASEPRI, r3
}
 8017c4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8017c50:	bf00      	nop
 8017c52:	3708      	adds	r7, #8
 8017c54:	46bd      	mov	sp, r7
 8017c56:	bd80      	pop	{r7, pc}
 8017c58:	e000ed04 	.word	0xe000ed04

08017c5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8017c5c:	b480      	push	{r7}
 8017c5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8017c60:	4b0b      	ldr	r3, [pc, #44]	; (8017c90 <vPortSetupTimerInterrupt+0x34>)
 8017c62:	2200      	movs	r2, #0
 8017c64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8017c66:	4b0b      	ldr	r3, [pc, #44]	; (8017c94 <vPortSetupTimerInterrupt+0x38>)
 8017c68:	2200      	movs	r2, #0
 8017c6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8017c6c:	4b0a      	ldr	r3, [pc, #40]	; (8017c98 <vPortSetupTimerInterrupt+0x3c>)
 8017c6e:	681b      	ldr	r3, [r3, #0]
 8017c70:	4a0a      	ldr	r2, [pc, #40]	; (8017c9c <vPortSetupTimerInterrupt+0x40>)
 8017c72:	fba2 2303 	umull	r2, r3, r2, r3
 8017c76:	099b      	lsrs	r3, r3, #6
 8017c78:	4a09      	ldr	r2, [pc, #36]	; (8017ca0 <vPortSetupTimerInterrupt+0x44>)
 8017c7a:	3b01      	subs	r3, #1
 8017c7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8017c7e:	4b04      	ldr	r3, [pc, #16]	; (8017c90 <vPortSetupTimerInterrupt+0x34>)
 8017c80:	2207      	movs	r2, #7
 8017c82:	601a      	str	r2, [r3, #0]
}
 8017c84:	bf00      	nop
 8017c86:	46bd      	mov	sp, r7
 8017c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c8c:	4770      	bx	lr
 8017c8e:	bf00      	nop
 8017c90:	e000e010 	.word	0xe000e010
 8017c94:	e000e018 	.word	0xe000e018
 8017c98:	20000000 	.word	0x20000000
 8017c9c:	10624dd3 	.word	0x10624dd3
 8017ca0:	e000e014 	.word	0xe000e014

08017ca4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8017ca4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8017cb4 <vPortEnableVFP+0x10>
 8017ca8:	6801      	ldr	r1, [r0, #0]
 8017caa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8017cae:	6001      	str	r1, [r0, #0]
 8017cb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8017cb2:	bf00      	nop
 8017cb4:	e000ed88 	.word	0xe000ed88

08017cb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8017cb8:	b480      	push	{r7}
 8017cba:	b085      	sub	sp, #20
 8017cbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8017cbe:	f3ef 8305 	mrs	r3, IPSR
 8017cc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8017cc4:	68fb      	ldr	r3, [r7, #12]
 8017cc6:	2b0f      	cmp	r3, #15
 8017cc8:	d914      	bls.n	8017cf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8017cca:	4a17      	ldr	r2, [pc, #92]	; (8017d28 <vPortValidateInterruptPriority+0x70>)
 8017ccc:	68fb      	ldr	r3, [r7, #12]
 8017cce:	4413      	add	r3, r2
 8017cd0:	781b      	ldrb	r3, [r3, #0]
 8017cd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8017cd4:	4b15      	ldr	r3, [pc, #84]	; (8017d2c <vPortValidateInterruptPriority+0x74>)
 8017cd6:	781b      	ldrb	r3, [r3, #0]
 8017cd8:	7afa      	ldrb	r2, [r7, #11]
 8017cda:	429a      	cmp	r2, r3
 8017cdc:	d20a      	bcs.n	8017cf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8017cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ce2:	f383 8811 	msr	BASEPRI, r3
 8017ce6:	f3bf 8f6f 	isb	sy
 8017cea:	f3bf 8f4f 	dsb	sy
 8017cee:	607b      	str	r3, [r7, #4]
}
 8017cf0:	bf00      	nop
 8017cf2:	e7fe      	b.n	8017cf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8017cf4:	4b0e      	ldr	r3, [pc, #56]	; (8017d30 <vPortValidateInterruptPriority+0x78>)
 8017cf6:	681b      	ldr	r3, [r3, #0]
 8017cf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8017cfc:	4b0d      	ldr	r3, [pc, #52]	; (8017d34 <vPortValidateInterruptPriority+0x7c>)
 8017cfe:	681b      	ldr	r3, [r3, #0]
 8017d00:	429a      	cmp	r2, r3
 8017d02:	d90a      	bls.n	8017d1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8017d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d08:	f383 8811 	msr	BASEPRI, r3
 8017d0c:	f3bf 8f6f 	isb	sy
 8017d10:	f3bf 8f4f 	dsb	sy
 8017d14:	603b      	str	r3, [r7, #0]
}
 8017d16:	bf00      	nop
 8017d18:	e7fe      	b.n	8017d18 <vPortValidateInterruptPriority+0x60>
	}
 8017d1a:	bf00      	nop
 8017d1c:	3714      	adds	r7, #20
 8017d1e:	46bd      	mov	sp, r7
 8017d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d24:	4770      	bx	lr
 8017d26:	bf00      	nop
 8017d28:	e000e3f0 	.word	0xe000e3f0
 8017d2c:	2000160c 	.word	0x2000160c
 8017d30:	e000ed0c 	.word	0xe000ed0c
 8017d34:	20001610 	.word	0x20001610

08017d38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8017d38:	b580      	push	{r7, lr}
 8017d3a:	b08a      	sub	sp, #40	; 0x28
 8017d3c:	af00      	add	r7, sp, #0
 8017d3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8017d40:	2300      	movs	r3, #0
 8017d42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8017d44:	f7fe fc82 	bl	801664c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8017d48:	4b5b      	ldr	r3, [pc, #364]	; (8017eb8 <pvPortMalloc+0x180>)
 8017d4a:	681b      	ldr	r3, [r3, #0]
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	d101      	bne.n	8017d54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8017d50:	f000 f920 	bl	8017f94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8017d54:	4b59      	ldr	r3, [pc, #356]	; (8017ebc <pvPortMalloc+0x184>)
 8017d56:	681a      	ldr	r2, [r3, #0]
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	4013      	ands	r3, r2
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	f040 8093 	bne.w	8017e88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8017d62:	687b      	ldr	r3, [r7, #4]
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	d01d      	beq.n	8017da4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8017d68:	2208      	movs	r2, #8
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	4413      	add	r3, r2
 8017d6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	f003 0307 	and.w	r3, r3, #7
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	d014      	beq.n	8017da4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	f023 0307 	bic.w	r3, r3, #7
 8017d80:	3308      	adds	r3, #8
 8017d82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	f003 0307 	and.w	r3, r3, #7
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	d00a      	beq.n	8017da4 <pvPortMalloc+0x6c>
	__asm volatile
 8017d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d92:	f383 8811 	msr	BASEPRI, r3
 8017d96:	f3bf 8f6f 	isb	sy
 8017d9a:	f3bf 8f4f 	dsb	sy
 8017d9e:	617b      	str	r3, [r7, #20]
}
 8017da0:	bf00      	nop
 8017da2:	e7fe      	b.n	8017da2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	2b00      	cmp	r3, #0
 8017da8:	d06e      	beq.n	8017e88 <pvPortMalloc+0x150>
 8017daa:	4b45      	ldr	r3, [pc, #276]	; (8017ec0 <pvPortMalloc+0x188>)
 8017dac:	681b      	ldr	r3, [r3, #0]
 8017dae:	687a      	ldr	r2, [r7, #4]
 8017db0:	429a      	cmp	r2, r3
 8017db2:	d869      	bhi.n	8017e88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8017db4:	4b43      	ldr	r3, [pc, #268]	; (8017ec4 <pvPortMalloc+0x18c>)
 8017db6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8017db8:	4b42      	ldr	r3, [pc, #264]	; (8017ec4 <pvPortMalloc+0x18c>)
 8017dba:	681b      	ldr	r3, [r3, #0]
 8017dbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017dbe:	e004      	b.n	8017dca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8017dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8017dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dc6:	681b      	ldr	r3, [r3, #0]
 8017dc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dcc:	685b      	ldr	r3, [r3, #4]
 8017dce:	687a      	ldr	r2, [r7, #4]
 8017dd0:	429a      	cmp	r2, r3
 8017dd2:	d903      	bls.n	8017ddc <pvPortMalloc+0xa4>
 8017dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dd6:	681b      	ldr	r3, [r3, #0]
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	d1f1      	bne.n	8017dc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8017ddc:	4b36      	ldr	r3, [pc, #216]	; (8017eb8 <pvPortMalloc+0x180>)
 8017dde:	681b      	ldr	r3, [r3, #0]
 8017de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017de2:	429a      	cmp	r2, r3
 8017de4:	d050      	beq.n	8017e88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8017de6:	6a3b      	ldr	r3, [r7, #32]
 8017de8:	681b      	ldr	r3, [r3, #0]
 8017dea:	2208      	movs	r2, #8
 8017dec:	4413      	add	r3, r2
 8017dee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017df2:	681a      	ldr	r2, [r3, #0]
 8017df4:	6a3b      	ldr	r3, [r7, #32]
 8017df6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8017df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dfa:	685a      	ldr	r2, [r3, #4]
 8017dfc:	687b      	ldr	r3, [r7, #4]
 8017dfe:	1ad2      	subs	r2, r2, r3
 8017e00:	2308      	movs	r3, #8
 8017e02:	005b      	lsls	r3, r3, #1
 8017e04:	429a      	cmp	r2, r3
 8017e06:	d91f      	bls.n	8017e48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8017e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	4413      	add	r3, r2
 8017e0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017e10:	69bb      	ldr	r3, [r7, #24]
 8017e12:	f003 0307 	and.w	r3, r3, #7
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	d00a      	beq.n	8017e30 <pvPortMalloc+0xf8>
	__asm volatile
 8017e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e1e:	f383 8811 	msr	BASEPRI, r3
 8017e22:	f3bf 8f6f 	isb	sy
 8017e26:	f3bf 8f4f 	dsb	sy
 8017e2a:	613b      	str	r3, [r7, #16]
}
 8017e2c:	bf00      	nop
 8017e2e:	e7fe      	b.n	8017e2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8017e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e32:	685a      	ldr	r2, [r3, #4]
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	1ad2      	subs	r2, r2, r3
 8017e38:	69bb      	ldr	r3, [r7, #24]
 8017e3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8017e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e3e:	687a      	ldr	r2, [r7, #4]
 8017e40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8017e42:	69b8      	ldr	r0, [r7, #24]
 8017e44:	f000 f908 	bl	8018058 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017e48:	4b1d      	ldr	r3, [pc, #116]	; (8017ec0 <pvPortMalloc+0x188>)
 8017e4a:	681a      	ldr	r2, [r3, #0]
 8017e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e4e:	685b      	ldr	r3, [r3, #4]
 8017e50:	1ad3      	subs	r3, r2, r3
 8017e52:	4a1b      	ldr	r2, [pc, #108]	; (8017ec0 <pvPortMalloc+0x188>)
 8017e54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8017e56:	4b1a      	ldr	r3, [pc, #104]	; (8017ec0 <pvPortMalloc+0x188>)
 8017e58:	681a      	ldr	r2, [r3, #0]
 8017e5a:	4b1b      	ldr	r3, [pc, #108]	; (8017ec8 <pvPortMalloc+0x190>)
 8017e5c:	681b      	ldr	r3, [r3, #0]
 8017e5e:	429a      	cmp	r2, r3
 8017e60:	d203      	bcs.n	8017e6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8017e62:	4b17      	ldr	r3, [pc, #92]	; (8017ec0 <pvPortMalloc+0x188>)
 8017e64:	681b      	ldr	r3, [r3, #0]
 8017e66:	4a18      	ldr	r2, [pc, #96]	; (8017ec8 <pvPortMalloc+0x190>)
 8017e68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8017e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e6c:	685a      	ldr	r2, [r3, #4]
 8017e6e:	4b13      	ldr	r3, [pc, #76]	; (8017ebc <pvPortMalloc+0x184>)
 8017e70:	681b      	ldr	r3, [r3, #0]
 8017e72:	431a      	orrs	r2, r3
 8017e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8017e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e7a:	2200      	movs	r2, #0
 8017e7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8017e7e:	4b13      	ldr	r3, [pc, #76]	; (8017ecc <pvPortMalloc+0x194>)
 8017e80:	681b      	ldr	r3, [r3, #0]
 8017e82:	3301      	adds	r3, #1
 8017e84:	4a11      	ldr	r2, [pc, #68]	; (8017ecc <pvPortMalloc+0x194>)
 8017e86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8017e88:	f7fe fbee 	bl	8016668 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8017e8c:	69fb      	ldr	r3, [r7, #28]
 8017e8e:	f003 0307 	and.w	r3, r3, #7
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	d00a      	beq.n	8017eac <pvPortMalloc+0x174>
	__asm volatile
 8017e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e9a:	f383 8811 	msr	BASEPRI, r3
 8017e9e:	f3bf 8f6f 	isb	sy
 8017ea2:	f3bf 8f4f 	dsb	sy
 8017ea6:	60fb      	str	r3, [r7, #12]
}
 8017ea8:	bf00      	nop
 8017eaa:	e7fe      	b.n	8017eaa <pvPortMalloc+0x172>
	return pvReturn;
 8017eac:	69fb      	ldr	r3, [r7, #28]
}
 8017eae:	4618      	mov	r0, r3
 8017eb0:	3728      	adds	r7, #40	; 0x28
 8017eb2:	46bd      	mov	sp, r7
 8017eb4:	bd80      	pop	{r7, pc}
 8017eb6:	bf00      	nop
 8017eb8:	20005c6c 	.word	0x20005c6c
 8017ebc:	20005c80 	.word	0x20005c80
 8017ec0:	20005c70 	.word	0x20005c70
 8017ec4:	20005c64 	.word	0x20005c64
 8017ec8:	20005c74 	.word	0x20005c74
 8017ecc:	20005c78 	.word	0x20005c78

08017ed0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8017ed0:	b580      	push	{r7, lr}
 8017ed2:	b086      	sub	sp, #24
 8017ed4:	af00      	add	r7, sp, #0
 8017ed6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	d04d      	beq.n	8017f7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8017ee2:	2308      	movs	r3, #8
 8017ee4:	425b      	negs	r3, r3
 8017ee6:	697a      	ldr	r2, [r7, #20]
 8017ee8:	4413      	add	r3, r2
 8017eea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8017eec:	697b      	ldr	r3, [r7, #20]
 8017eee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017ef0:	693b      	ldr	r3, [r7, #16]
 8017ef2:	685a      	ldr	r2, [r3, #4]
 8017ef4:	4b24      	ldr	r3, [pc, #144]	; (8017f88 <vPortFree+0xb8>)
 8017ef6:	681b      	ldr	r3, [r3, #0]
 8017ef8:	4013      	ands	r3, r2
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	d10a      	bne.n	8017f14 <vPortFree+0x44>
	__asm volatile
 8017efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f02:	f383 8811 	msr	BASEPRI, r3
 8017f06:	f3bf 8f6f 	isb	sy
 8017f0a:	f3bf 8f4f 	dsb	sy
 8017f0e:	60fb      	str	r3, [r7, #12]
}
 8017f10:	bf00      	nop
 8017f12:	e7fe      	b.n	8017f12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8017f14:	693b      	ldr	r3, [r7, #16]
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d00a      	beq.n	8017f32 <vPortFree+0x62>
	__asm volatile
 8017f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f20:	f383 8811 	msr	BASEPRI, r3
 8017f24:	f3bf 8f6f 	isb	sy
 8017f28:	f3bf 8f4f 	dsb	sy
 8017f2c:	60bb      	str	r3, [r7, #8]
}
 8017f2e:	bf00      	nop
 8017f30:	e7fe      	b.n	8017f30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8017f32:	693b      	ldr	r3, [r7, #16]
 8017f34:	685a      	ldr	r2, [r3, #4]
 8017f36:	4b14      	ldr	r3, [pc, #80]	; (8017f88 <vPortFree+0xb8>)
 8017f38:	681b      	ldr	r3, [r3, #0]
 8017f3a:	4013      	ands	r3, r2
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	d01e      	beq.n	8017f7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8017f40:	693b      	ldr	r3, [r7, #16]
 8017f42:	681b      	ldr	r3, [r3, #0]
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	d11a      	bne.n	8017f7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017f48:	693b      	ldr	r3, [r7, #16]
 8017f4a:	685a      	ldr	r2, [r3, #4]
 8017f4c:	4b0e      	ldr	r3, [pc, #56]	; (8017f88 <vPortFree+0xb8>)
 8017f4e:	681b      	ldr	r3, [r3, #0]
 8017f50:	43db      	mvns	r3, r3
 8017f52:	401a      	ands	r2, r3
 8017f54:	693b      	ldr	r3, [r7, #16]
 8017f56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8017f58:	f7fe fb78 	bl	801664c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017f5c:	693b      	ldr	r3, [r7, #16]
 8017f5e:	685a      	ldr	r2, [r3, #4]
 8017f60:	4b0a      	ldr	r3, [pc, #40]	; (8017f8c <vPortFree+0xbc>)
 8017f62:	681b      	ldr	r3, [r3, #0]
 8017f64:	4413      	add	r3, r2
 8017f66:	4a09      	ldr	r2, [pc, #36]	; (8017f8c <vPortFree+0xbc>)
 8017f68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017f6a:	6938      	ldr	r0, [r7, #16]
 8017f6c:	f000 f874 	bl	8018058 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8017f70:	4b07      	ldr	r3, [pc, #28]	; (8017f90 <vPortFree+0xc0>)
 8017f72:	681b      	ldr	r3, [r3, #0]
 8017f74:	3301      	adds	r3, #1
 8017f76:	4a06      	ldr	r2, [pc, #24]	; (8017f90 <vPortFree+0xc0>)
 8017f78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8017f7a:	f7fe fb75 	bl	8016668 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8017f7e:	bf00      	nop
 8017f80:	3718      	adds	r7, #24
 8017f82:	46bd      	mov	sp, r7
 8017f84:	bd80      	pop	{r7, pc}
 8017f86:	bf00      	nop
 8017f88:	20005c80 	.word	0x20005c80
 8017f8c:	20005c70 	.word	0x20005c70
 8017f90:	20005c7c 	.word	0x20005c7c

08017f94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8017f94:	b480      	push	{r7}
 8017f96:	b085      	sub	sp, #20
 8017f98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8017f9a:	f244 6350 	movw	r3, #18000	; 0x4650
 8017f9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8017fa0:	4b27      	ldr	r3, [pc, #156]	; (8018040 <prvHeapInit+0xac>)
 8017fa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8017fa4:	68fb      	ldr	r3, [r7, #12]
 8017fa6:	f003 0307 	and.w	r3, r3, #7
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	d00c      	beq.n	8017fc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8017fae:	68fb      	ldr	r3, [r7, #12]
 8017fb0:	3307      	adds	r3, #7
 8017fb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017fb4:	68fb      	ldr	r3, [r7, #12]
 8017fb6:	f023 0307 	bic.w	r3, r3, #7
 8017fba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8017fbc:	68ba      	ldr	r2, [r7, #8]
 8017fbe:	68fb      	ldr	r3, [r7, #12]
 8017fc0:	1ad3      	subs	r3, r2, r3
 8017fc2:	4a1f      	ldr	r2, [pc, #124]	; (8018040 <prvHeapInit+0xac>)
 8017fc4:	4413      	add	r3, r2
 8017fc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017fc8:	68fb      	ldr	r3, [r7, #12]
 8017fca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8017fcc:	4a1d      	ldr	r2, [pc, #116]	; (8018044 <prvHeapInit+0xb0>)
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8017fd2:	4b1c      	ldr	r3, [pc, #112]	; (8018044 <prvHeapInit+0xb0>)
 8017fd4:	2200      	movs	r2, #0
 8017fd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	68ba      	ldr	r2, [r7, #8]
 8017fdc:	4413      	add	r3, r2
 8017fde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8017fe0:	2208      	movs	r2, #8
 8017fe2:	68fb      	ldr	r3, [r7, #12]
 8017fe4:	1a9b      	subs	r3, r3, r2
 8017fe6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017fe8:	68fb      	ldr	r3, [r7, #12]
 8017fea:	f023 0307 	bic.w	r3, r3, #7
 8017fee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8017ff0:	68fb      	ldr	r3, [r7, #12]
 8017ff2:	4a15      	ldr	r2, [pc, #84]	; (8018048 <prvHeapInit+0xb4>)
 8017ff4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8017ff6:	4b14      	ldr	r3, [pc, #80]	; (8018048 <prvHeapInit+0xb4>)
 8017ff8:	681b      	ldr	r3, [r3, #0]
 8017ffa:	2200      	movs	r2, #0
 8017ffc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8017ffe:	4b12      	ldr	r3, [pc, #72]	; (8018048 <prvHeapInit+0xb4>)
 8018000:	681b      	ldr	r3, [r3, #0]
 8018002:	2200      	movs	r2, #0
 8018004:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801800a:	683b      	ldr	r3, [r7, #0]
 801800c:	68fa      	ldr	r2, [r7, #12]
 801800e:	1ad2      	subs	r2, r2, r3
 8018010:	683b      	ldr	r3, [r7, #0]
 8018012:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8018014:	4b0c      	ldr	r3, [pc, #48]	; (8018048 <prvHeapInit+0xb4>)
 8018016:	681a      	ldr	r2, [r3, #0]
 8018018:	683b      	ldr	r3, [r7, #0]
 801801a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801801c:	683b      	ldr	r3, [r7, #0]
 801801e:	685b      	ldr	r3, [r3, #4]
 8018020:	4a0a      	ldr	r2, [pc, #40]	; (801804c <prvHeapInit+0xb8>)
 8018022:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018024:	683b      	ldr	r3, [r7, #0]
 8018026:	685b      	ldr	r3, [r3, #4]
 8018028:	4a09      	ldr	r2, [pc, #36]	; (8018050 <prvHeapInit+0xbc>)
 801802a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801802c:	4b09      	ldr	r3, [pc, #36]	; (8018054 <prvHeapInit+0xc0>)
 801802e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8018032:	601a      	str	r2, [r3, #0]
}
 8018034:	bf00      	nop
 8018036:	3714      	adds	r7, #20
 8018038:	46bd      	mov	sp, r7
 801803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801803e:	4770      	bx	lr
 8018040:	20001614 	.word	0x20001614
 8018044:	20005c64 	.word	0x20005c64
 8018048:	20005c6c 	.word	0x20005c6c
 801804c:	20005c74 	.word	0x20005c74
 8018050:	20005c70 	.word	0x20005c70
 8018054:	20005c80 	.word	0x20005c80

08018058 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8018058:	b480      	push	{r7}
 801805a:	b085      	sub	sp, #20
 801805c:	af00      	add	r7, sp, #0
 801805e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018060:	4b28      	ldr	r3, [pc, #160]	; (8018104 <prvInsertBlockIntoFreeList+0xac>)
 8018062:	60fb      	str	r3, [r7, #12]
 8018064:	e002      	b.n	801806c <prvInsertBlockIntoFreeList+0x14>
 8018066:	68fb      	ldr	r3, [r7, #12]
 8018068:	681b      	ldr	r3, [r3, #0]
 801806a:	60fb      	str	r3, [r7, #12]
 801806c:	68fb      	ldr	r3, [r7, #12]
 801806e:	681b      	ldr	r3, [r3, #0]
 8018070:	687a      	ldr	r2, [r7, #4]
 8018072:	429a      	cmp	r2, r3
 8018074:	d8f7      	bhi.n	8018066 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8018076:	68fb      	ldr	r3, [r7, #12]
 8018078:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801807a:	68fb      	ldr	r3, [r7, #12]
 801807c:	685b      	ldr	r3, [r3, #4]
 801807e:	68ba      	ldr	r2, [r7, #8]
 8018080:	4413      	add	r3, r2
 8018082:	687a      	ldr	r2, [r7, #4]
 8018084:	429a      	cmp	r2, r3
 8018086:	d108      	bne.n	801809a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8018088:	68fb      	ldr	r3, [r7, #12]
 801808a:	685a      	ldr	r2, [r3, #4]
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	685b      	ldr	r3, [r3, #4]
 8018090:	441a      	add	r2, r3
 8018092:	68fb      	ldr	r3, [r7, #12]
 8018094:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8018096:	68fb      	ldr	r3, [r7, #12]
 8018098:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	685b      	ldr	r3, [r3, #4]
 80180a2:	68ba      	ldr	r2, [r7, #8]
 80180a4:	441a      	add	r2, r3
 80180a6:	68fb      	ldr	r3, [r7, #12]
 80180a8:	681b      	ldr	r3, [r3, #0]
 80180aa:	429a      	cmp	r2, r3
 80180ac:	d118      	bne.n	80180e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80180ae:	68fb      	ldr	r3, [r7, #12]
 80180b0:	681a      	ldr	r2, [r3, #0]
 80180b2:	4b15      	ldr	r3, [pc, #84]	; (8018108 <prvInsertBlockIntoFreeList+0xb0>)
 80180b4:	681b      	ldr	r3, [r3, #0]
 80180b6:	429a      	cmp	r2, r3
 80180b8:	d00d      	beq.n	80180d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	685a      	ldr	r2, [r3, #4]
 80180be:	68fb      	ldr	r3, [r7, #12]
 80180c0:	681b      	ldr	r3, [r3, #0]
 80180c2:	685b      	ldr	r3, [r3, #4]
 80180c4:	441a      	add	r2, r3
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80180ca:	68fb      	ldr	r3, [r7, #12]
 80180cc:	681b      	ldr	r3, [r3, #0]
 80180ce:	681a      	ldr	r2, [r3, #0]
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	601a      	str	r2, [r3, #0]
 80180d4:	e008      	b.n	80180e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80180d6:	4b0c      	ldr	r3, [pc, #48]	; (8018108 <prvInsertBlockIntoFreeList+0xb0>)
 80180d8:	681a      	ldr	r2, [r3, #0]
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	601a      	str	r2, [r3, #0]
 80180de:	e003      	b.n	80180e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80180e0:	68fb      	ldr	r3, [r7, #12]
 80180e2:	681a      	ldr	r2, [r3, #0]
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80180e8:	68fa      	ldr	r2, [r7, #12]
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	429a      	cmp	r2, r3
 80180ee:	d002      	beq.n	80180f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80180f0:	68fb      	ldr	r3, [r7, #12]
 80180f2:	687a      	ldr	r2, [r7, #4]
 80180f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80180f6:	bf00      	nop
 80180f8:	3714      	adds	r7, #20
 80180fa:	46bd      	mov	sp, r7
 80180fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018100:	4770      	bx	lr
 8018102:	bf00      	nop
 8018104:	20005c64 	.word	0x20005c64
 8018108:	20005c6c 	.word	0x20005c6c

0801810c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801810c:	b580      	push	{r7, lr}
 801810e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8018110:	2200      	movs	r2, #0
 8018112:	4912      	ldr	r1, [pc, #72]	; (801815c <MX_USB_DEVICE_Init+0x50>)
 8018114:	4812      	ldr	r0, [pc, #72]	; (8018160 <MX_USB_DEVICE_Init+0x54>)
 8018116:	f7f8 fc33 	bl	8010980 <USBD_Init>
 801811a:	4603      	mov	r3, r0
 801811c:	2b00      	cmp	r3, #0
 801811e:	d001      	beq.n	8018124 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8018120:	f7ea fc38 	bl	8002994 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8018124:	490f      	ldr	r1, [pc, #60]	; (8018164 <MX_USB_DEVICE_Init+0x58>)
 8018126:	480e      	ldr	r0, [pc, #56]	; (8018160 <MX_USB_DEVICE_Init+0x54>)
 8018128:	f7f8 fc5a 	bl	80109e0 <USBD_RegisterClass>
 801812c:	4603      	mov	r3, r0
 801812e:	2b00      	cmp	r3, #0
 8018130:	d001      	beq.n	8018136 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8018132:	f7ea fc2f 	bl	8002994 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8018136:	490c      	ldr	r1, [pc, #48]	; (8018168 <MX_USB_DEVICE_Init+0x5c>)
 8018138:	4809      	ldr	r0, [pc, #36]	; (8018160 <MX_USB_DEVICE_Init+0x54>)
 801813a:	f7f8 fbab 	bl	8010894 <USBD_CDC_RegisterInterface>
 801813e:	4603      	mov	r3, r0
 8018140:	2b00      	cmp	r3, #0
 8018142:	d001      	beq.n	8018148 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8018144:	f7ea fc26 	bl	8002994 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8018148:	4805      	ldr	r0, [pc, #20]	; (8018160 <MX_USB_DEVICE_Init+0x54>)
 801814a:	f7f8 fc70 	bl	8010a2e <USBD_Start>
 801814e:	4603      	mov	r3, r0
 8018150:	2b00      	cmp	r3, #0
 8018152:	d001      	beq.n	8018158 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018154:	f7ea fc1e 	bl	8002994 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8018158:	bf00      	nop
 801815a:	bd80      	pop	{r7, pc}
 801815c:	20000180 	.word	0x20000180
 8018160:	200076b4 	.word	0x200076b4
 8018164:	20000064 	.word	0x20000064
 8018168:	2000016c 	.word	0x2000016c

0801816c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801816c:	b580      	push	{r7, lr}
 801816e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8018170:	2200      	movs	r2, #0
 8018172:	4905      	ldr	r1, [pc, #20]	; (8018188 <CDC_Init_FS+0x1c>)
 8018174:	4805      	ldr	r0, [pc, #20]	; (801818c <CDC_Init_FS+0x20>)
 8018176:	f7f8 fba2 	bl	80108be <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801817a:	4905      	ldr	r1, [pc, #20]	; (8018190 <CDC_Init_FS+0x24>)
 801817c:	4803      	ldr	r0, [pc, #12]	; (801818c <CDC_Init_FS+0x20>)
 801817e:	f7f8 fbbc 	bl	80108fa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8018182:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8018184:	4618      	mov	r0, r3
 8018186:	bd80      	pop	{r7, pc}
 8018188:	20008184 	.word	0x20008184
 801818c:	200076b4 	.word	0x200076b4
 8018190:	20007984 	.word	0x20007984

08018194 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8018194:	b480      	push	{r7}
 8018196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8018198:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801819a:	4618      	mov	r0, r3
 801819c:	46bd      	mov	sp, r7
 801819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181a2:	4770      	bx	lr

080181a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80181a4:	b480      	push	{r7}
 80181a6:	b083      	sub	sp, #12
 80181a8:	af00      	add	r7, sp, #0
 80181aa:	4603      	mov	r3, r0
 80181ac:	6039      	str	r1, [r7, #0]
 80181ae:	71fb      	strb	r3, [r7, #7]
 80181b0:	4613      	mov	r3, r2
 80181b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80181b4:	79fb      	ldrb	r3, [r7, #7]
 80181b6:	2b23      	cmp	r3, #35	; 0x23
 80181b8:	d84a      	bhi.n	8018250 <CDC_Control_FS+0xac>
 80181ba:	a201      	add	r2, pc, #4	; (adr r2, 80181c0 <CDC_Control_FS+0x1c>)
 80181bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80181c0:	08018251 	.word	0x08018251
 80181c4:	08018251 	.word	0x08018251
 80181c8:	08018251 	.word	0x08018251
 80181cc:	08018251 	.word	0x08018251
 80181d0:	08018251 	.word	0x08018251
 80181d4:	08018251 	.word	0x08018251
 80181d8:	08018251 	.word	0x08018251
 80181dc:	08018251 	.word	0x08018251
 80181e0:	08018251 	.word	0x08018251
 80181e4:	08018251 	.word	0x08018251
 80181e8:	08018251 	.word	0x08018251
 80181ec:	08018251 	.word	0x08018251
 80181f0:	08018251 	.word	0x08018251
 80181f4:	08018251 	.word	0x08018251
 80181f8:	08018251 	.word	0x08018251
 80181fc:	08018251 	.word	0x08018251
 8018200:	08018251 	.word	0x08018251
 8018204:	08018251 	.word	0x08018251
 8018208:	08018251 	.word	0x08018251
 801820c:	08018251 	.word	0x08018251
 8018210:	08018251 	.word	0x08018251
 8018214:	08018251 	.word	0x08018251
 8018218:	08018251 	.word	0x08018251
 801821c:	08018251 	.word	0x08018251
 8018220:	08018251 	.word	0x08018251
 8018224:	08018251 	.word	0x08018251
 8018228:	08018251 	.word	0x08018251
 801822c:	08018251 	.word	0x08018251
 8018230:	08018251 	.word	0x08018251
 8018234:	08018251 	.word	0x08018251
 8018238:	08018251 	.word	0x08018251
 801823c:	08018251 	.word	0x08018251
 8018240:	08018251 	.word	0x08018251
 8018244:	08018251 	.word	0x08018251
 8018248:	08018251 	.word	0x08018251
 801824c:	08018251 	.word	0x08018251
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8018250:	bf00      	nop
  }

  return (USBD_OK);
 8018252:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018254:	4618      	mov	r0, r3
 8018256:	370c      	adds	r7, #12
 8018258:	46bd      	mov	sp, r7
 801825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801825e:	4770      	bx	lr

08018260 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8018260:	b580      	push	{r7, lr}
 8018262:	b082      	sub	sp, #8
 8018264:	af00      	add	r7, sp, #0
 8018266:	6078      	str	r0, [r7, #4]
 8018268:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801826a:	6879      	ldr	r1, [r7, #4]
 801826c:	4805      	ldr	r0, [pc, #20]	; (8018284 <CDC_Receive_FS+0x24>)
 801826e:	f7f8 fb44 	bl	80108fa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8018272:	4804      	ldr	r0, [pc, #16]	; (8018284 <CDC_Receive_FS+0x24>)
 8018274:	f7f8 fb5a 	bl	801092c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8018278:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801827a:	4618      	mov	r0, r3
 801827c:	3708      	adds	r7, #8
 801827e:	46bd      	mov	sp, r7
 8018280:	bd80      	pop	{r7, pc}
 8018282:	bf00      	nop
 8018284:	200076b4 	.word	0x200076b4

08018288 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8018288:	b480      	push	{r7}
 801828a:	b087      	sub	sp, #28
 801828c:	af00      	add	r7, sp, #0
 801828e:	60f8      	str	r0, [r7, #12]
 8018290:	60b9      	str	r1, [r7, #8]
 8018292:	4613      	mov	r3, r2
 8018294:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8018296:	2300      	movs	r3, #0
 8018298:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801829a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801829e:	4618      	mov	r0, r3
 80182a0:	371c      	adds	r7, #28
 80182a2:	46bd      	mov	sp, r7
 80182a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182a8:	4770      	bx	lr
	...

080182ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80182ac:	b480      	push	{r7}
 80182ae:	b083      	sub	sp, #12
 80182b0:	af00      	add	r7, sp, #0
 80182b2:	4603      	mov	r3, r0
 80182b4:	6039      	str	r1, [r7, #0]
 80182b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80182b8:	683b      	ldr	r3, [r7, #0]
 80182ba:	2212      	movs	r2, #18
 80182bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80182be:	4b03      	ldr	r3, [pc, #12]	; (80182cc <USBD_FS_DeviceDescriptor+0x20>)
}
 80182c0:	4618      	mov	r0, r3
 80182c2:	370c      	adds	r7, #12
 80182c4:	46bd      	mov	sp, r7
 80182c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182ca:	4770      	bx	lr
 80182cc:	2000019c 	.word	0x2000019c

080182d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80182d0:	b480      	push	{r7}
 80182d2:	b083      	sub	sp, #12
 80182d4:	af00      	add	r7, sp, #0
 80182d6:	4603      	mov	r3, r0
 80182d8:	6039      	str	r1, [r7, #0]
 80182da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80182dc:	683b      	ldr	r3, [r7, #0]
 80182de:	2204      	movs	r2, #4
 80182e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80182e2:	4b03      	ldr	r3, [pc, #12]	; (80182f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80182e4:	4618      	mov	r0, r3
 80182e6:	370c      	adds	r7, #12
 80182e8:	46bd      	mov	sp, r7
 80182ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182ee:	4770      	bx	lr
 80182f0:	200001b0 	.word	0x200001b0

080182f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80182f4:	b580      	push	{r7, lr}
 80182f6:	b082      	sub	sp, #8
 80182f8:	af00      	add	r7, sp, #0
 80182fa:	4603      	mov	r3, r0
 80182fc:	6039      	str	r1, [r7, #0]
 80182fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018300:	79fb      	ldrb	r3, [r7, #7]
 8018302:	2b00      	cmp	r3, #0
 8018304:	d105      	bne.n	8018312 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018306:	683a      	ldr	r2, [r7, #0]
 8018308:	4907      	ldr	r1, [pc, #28]	; (8018328 <USBD_FS_ProductStrDescriptor+0x34>)
 801830a:	4808      	ldr	r0, [pc, #32]	; (801832c <USBD_FS_ProductStrDescriptor+0x38>)
 801830c:	f7f9 fbc1 	bl	8011a92 <USBD_GetString>
 8018310:	e004      	b.n	801831c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018312:	683a      	ldr	r2, [r7, #0]
 8018314:	4904      	ldr	r1, [pc, #16]	; (8018328 <USBD_FS_ProductStrDescriptor+0x34>)
 8018316:	4805      	ldr	r0, [pc, #20]	; (801832c <USBD_FS_ProductStrDescriptor+0x38>)
 8018318:	f7f9 fbbb 	bl	8011a92 <USBD_GetString>
  }
  return USBD_StrDesc;
 801831c:	4b02      	ldr	r3, [pc, #8]	; (8018328 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801831e:	4618      	mov	r0, r3
 8018320:	3708      	adds	r7, #8
 8018322:	46bd      	mov	sp, r7
 8018324:	bd80      	pop	{r7, pc}
 8018326:	bf00      	nop
 8018328:	20008984 	.word	0x20008984
 801832c:	08020a98 	.word	0x08020a98

08018330 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018330:	b580      	push	{r7, lr}
 8018332:	b082      	sub	sp, #8
 8018334:	af00      	add	r7, sp, #0
 8018336:	4603      	mov	r3, r0
 8018338:	6039      	str	r1, [r7, #0]
 801833a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801833c:	683a      	ldr	r2, [r7, #0]
 801833e:	4904      	ldr	r1, [pc, #16]	; (8018350 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8018340:	4804      	ldr	r0, [pc, #16]	; (8018354 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8018342:	f7f9 fba6 	bl	8011a92 <USBD_GetString>
  return USBD_StrDesc;
 8018346:	4b02      	ldr	r3, [pc, #8]	; (8018350 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8018348:	4618      	mov	r0, r3
 801834a:	3708      	adds	r7, #8
 801834c:	46bd      	mov	sp, r7
 801834e:	bd80      	pop	{r7, pc}
 8018350:	20008984 	.word	0x20008984
 8018354:	08020ab0 	.word	0x08020ab0

08018358 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018358:	b580      	push	{r7, lr}
 801835a:	b082      	sub	sp, #8
 801835c:	af00      	add	r7, sp, #0
 801835e:	4603      	mov	r3, r0
 8018360:	6039      	str	r1, [r7, #0]
 8018362:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018364:	683b      	ldr	r3, [r7, #0]
 8018366:	221a      	movs	r2, #26
 8018368:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801836a:	f000 f843 	bl	80183f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801836e:	4b02      	ldr	r3, [pc, #8]	; (8018378 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8018370:	4618      	mov	r0, r3
 8018372:	3708      	adds	r7, #8
 8018374:	46bd      	mov	sp, r7
 8018376:	bd80      	pop	{r7, pc}
 8018378:	200001b4 	.word	0x200001b4

0801837c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801837c:	b580      	push	{r7, lr}
 801837e:	b082      	sub	sp, #8
 8018380:	af00      	add	r7, sp, #0
 8018382:	4603      	mov	r3, r0
 8018384:	6039      	str	r1, [r7, #0]
 8018386:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018388:	79fb      	ldrb	r3, [r7, #7]
 801838a:	2b00      	cmp	r3, #0
 801838c:	d105      	bne.n	801839a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801838e:	683a      	ldr	r2, [r7, #0]
 8018390:	4907      	ldr	r1, [pc, #28]	; (80183b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018392:	4808      	ldr	r0, [pc, #32]	; (80183b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018394:	f7f9 fb7d 	bl	8011a92 <USBD_GetString>
 8018398:	e004      	b.n	80183a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801839a:	683a      	ldr	r2, [r7, #0]
 801839c:	4904      	ldr	r1, [pc, #16]	; (80183b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 801839e:	4805      	ldr	r0, [pc, #20]	; (80183b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80183a0:	f7f9 fb77 	bl	8011a92 <USBD_GetString>
  }
  return USBD_StrDesc;
 80183a4:	4b02      	ldr	r3, [pc, #8]	; (80183b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80183a6:	4618      	mov	r0, r3
 80183a8:	3708      	adds	r7, #8
 80183aa:	46bd      	mov	sp, r7
 80183ac:	bd80      	pop	{r7, pc}
 80183ae:	bf00      	nop
 80183b0:	20008984 	.word	0x20008984
 80183b4:	08020ac4 	.word	0x08020ac4

080183b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80183b8:	b580      	push	{r7, lr}
 80183ba:	b082      	sub	sp, #8
 80183bc:	af00      	add	r7, sp, #0
 80183be:	4603      	mov	r3, r0
 80183c0:	6039      	str	r1, [r7, #0]
 80183c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80183c4:	79fb      	ldrb	r3, [r7, #7]
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	d105      	bne.n	80183d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80183ca:	683a      	ldr	r2, [r7, #0]
 80183cc:	4907      	ldr	r1, [pc, #28]	; (80183ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80183ce:	4808      	ldr	r0, [pc, #32]	; (80183f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80183d0:	f7f9 fb5f 	bl	8011a92 <USBD_GetString>
 80183d4:	e004      	b.n	80183e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80183d6:	683a      	ldr	r2, [r7, #0]
 80183d8:	4904      	ldr	r1, [pc, #16]	; (80183ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80183da:	4805      	ldr	r0, [pc, #20]	; (80183f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80183dc:	f7f9 fb59 	bl	8011a92 <USBD_GetString>
  }
  return USBD_StrDesc;
 80183e0:	4b02      	ldr	r3, [pc, #8]	; (80183ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80183e2:	4618      	mov	r0, r3
 80183e4:	3708      	adds	r7, #8
 80183e6:	46bd      	mov	sp, r7
 80183e8:	bd80      	pop	{r7, pc}
 80183ea:	bf00      	nop
 80183ec:	20008984 	.word	0x20008984
 80183f0:	08020ad0 	.word	0x08020ad0

080183f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80183f4:	b580      	push	{r7, lr}
 80183f6:	b084      	sub	sp, #16
 80183f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80183fa:	4b0f      	ldr	r3, [pc, #60]	; (8018438 <Get_SerialNum+0x44>)
 80183fc:	681b      	ldr	r3, [r3, #0]
 80183fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018400:	4b0e      	ldr	r3, [pc, #56]	; (801843c <Get_SerialNum+0x48>)
 8018402:	681b      	ldr	r3, [r3, #0]
 8018404:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018406:	4b0e      	ldr	r3, [pc, #56]	; (8018440 <Get_SerialNum+0x4c>)
 8018408:	681b      	ldr	r3, [r3, #0]
 801840a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801840c:	68fa      	ldr	r2, [r7, #12]
 801840e:	687b      	ldr	r3, [r7, #4]
 8018410:	4413      	add	r3, r2
 8018412:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018414:	68fb      	ldr	r3, [r7, #12]
 8018416:	2b00      	cmp	r3, #0
 8018418:	d009      	beq.n	801842e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801841a:	2208      	movs	r2, #8
 801841c:	4909      	ldr	r1, [pc, #36]	; (8018444 <Get_SerialNum+0x50>)
 801841e:	68f8      	ldr	r0, [r7, #12]
 8018420:	f000 f814 	bl	801844c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018424:	2204      	movs	r2, #4
 8018426:	4908      	ldr	r1, [pc, #32]	; (8018448 <Get_SerialNum+0x54>)
 8018428:	68b8      	ldr	r0, [r7, #8]
 801842a:	f000 f80f 	bl	801844c <IntToUnicode>
  }
}
 801842e:	bf00      	nop
 8018430:	3710      	adds	r7, #16
 8018432:	46bd      	mov	sp, r7
 8018434:	bd80      	pop	{r7, pc}
 8018436:	bf00      	nop
 8018438:	1fff7a10 	.word	0x1fff7a10
 801843c:	1fff7a14 	.word	0x1fff7a14
 8018440:	1fff7a18 	.word	0x1fff7a18
 8018444:	200001b6 	.word	0x200001b6
 8018448:	200001c6 	.word	0x200001c6

0801844c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801844c:	b480      	push	{r7}
 801844e:	b087      	sub	sp, #28
 8018450:	af00      	add	r7, sp, #0
 8018452:	60f8      	str	r0, [r7, #12]
 8018454:	60b9      	str	r1, [r7, #8]
 8018456:	4613      	mov	r3, r2
 8018458:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801845a:	2300      	movs	r3, #0
 801845c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801845e:	2300      	movs	r3, #0
 8018460:	75fb      	strb	r3, [r7, #23]
 8018462:	e027      	b.n	80184b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018464:	68fb      	ldr	r3, [r7, #12]
 8018466:	0f1b      	lsrs	r3, r3, #28
 8018468:	2b09      	cmp	r3, #9
 801846a:	d80b      	bhi.n	8018484 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801846c:	68fb      	ldr	r3, [r7, #12]
 801846e:	0f1b      	lsrs	r3, r3, #28
 8018470:	b2da      	uxtb	r2, r3
 8018472:	7dfb      	ldrb	r3, [r7, #23]
 8018474:	005b      	lsls	r3, r3, #1
 8018476:	4619      	mov	r1, r3
 8018478:	68bb      	ldr	r3, [r7, #8]
 801847a:	440b      	add	r3, r1
 801847c:	3230      	adds	r2, #48	; 0x30
 801847e:	b2d2      	uxtb	r2, r2
 8018480:	701a      	strb	r2, [r3, #0]
 8018482:	e00a      	b.n	801849a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018484:	68fb      	ldr	r3, [r7, #12]
 8018486:	0f1b      	lsrs	r3, r3, #28
 8018488:	b2da      	uxtb	r2, r3
 801848a:	7dfb      	ldrb	r3, [r7, #23]
 801848c:	005b      	lsls	r3, r3, #1
 801848e:	4619      	mov	r1, r3
 8018490:	68bb      	ldr	r3, [r7, #8]
 8018492:	440b      	add	r3, r1
 8018494:	3237      	adds	r2, #55	; 0x37
 8018496:	b2d2      	uxtb	r2, r2
 8018498:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801849a:	68fb      	ldr	r3, [r7, #12]
 801849c:	011b      	lsls	r3, r3, #4
 801849e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80184a0:	7dfb      	ldrb	r3, [r7, #23]
 80184a2:	005b      	lsls	r3, r3, #1
 80184a4:	3301      	adds	r3, #1
 80184a6:	68ba      	ldr	r2, [r7, #8]
 80184a8:	4413      	add	r3, r2
 80184aa:	2200      	movs	r2, #0
 80184ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80184ae:	7dfb      	ldrb	r3, [r7, #23]
 80184b0:	3301      	adds	r3, #1
 80184b2:	75fb      	strb	r3, [r7, #23]
 80184b4:	7dfa      	ldrb	r2, [r7, #23]
 80184b6:	79fb      	ldrb	r3, [r7, #7]
 80184b8:	429a      	cmp	r2, r3
 80184ba:	d3d3      	bcc.n	8018464 <IntToUnicode+0x18>
  }
}
 80184bc:	bf00      	nop
 80184be:	bf00      	nop
 80184c0:	371c      	adds	r7, #28
 80184c2:	46bd      	mov	sp, r7
 80184c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184c8:	4770      	bx	lr
	...

080184cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80184cc:	b580      	push	{r7, lr}
 80184ce:	b08a      	sub	sp, #40	; 0x28
 80184d0:	af00      	add	r7, sp, #0
 80184d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80184d4:	f107 0314 	add.w	r3, r7, #20
 80184d8:	2200      	movs	r2, #0
 80184da:	601a      	str	r2, [r3, #0]
 80184dc:	605a      	str	r2, [r3, #4]
 80184de:	609a      	str	r2, [r3, #8]
 80184e0:	60da      	str	r2, [r3, #12]
 80184e2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	681b      	ldr	r3, [r3, #0]
 80184e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80184ec:	d147      	bne.n	801857e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80184ee:	2300      	movs	r3, #0
 80184f0:	613b      	str	r3, [r7, #16]
 80184f2:	4b25      	ldr	r3, [pc, #148]	; (8018588 <HAL_PCD_MspInit+0xbc>)
 80184f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80184f6:	4a24      	ldr	r2, [pc, #144]	; (8018588 <HAL_PCD_MspInit+0xbc>)
 80184f8:	f043 0301 	orr.w	r3, r3, #1
 80184fc:	6313      	str	r3, [r2, #48]	; 0x30
 80184fe:	4b22      	ldr	r3, [pc, #136]	; (8018588 <HAL_PCD_MspInit+0xbc>)
 8018500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018502:	f003 0301 	and.w	r3, r3, #1
 8018506:	613b      	str	r3, [r7, #16]
 8018508:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801850a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801850e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8018510:	2300      	movs	r3, #0
 8018512:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018514:	2300      	movs	r3, #0
 8018516:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018518:	f107 0314 	add.w	r3, r7, #20
 801851c:	4619      	mov	r1, r3
 801851e:	481b      	ldr	r0, [pc, #108]	; (801858c <HAL_PCD_MspInit+0xc0>)
 8018520:	f7ef f89e 	bl	8007660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8018524:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8018528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801852a:	2302      	movs	r3, #2
 801852c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801852e:	2300      	movs	r3, #0
 8018530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018532:	2303      	movs	r3, #3
 8018534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8018536:	230a      	movs	r3, #10
 8018538:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801853a:	f107 0314 	add.w	r3, r7, #20
 801853e:	4619      	mov	r1, r3
 8018540:	4812      	ldr	r0, [pc, #72]	; (801858c <HAL_PCD_MspInit+0xc0>)
 8018542:	f7ef f88d 	bl	8007660 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018546:	4b10      	ldr	r3, [pc, #64]	; (8018588 <HAL_PCD_MspInit+0xbc>)
 8018548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801854a:	4a0f      	ldr	r2, [pc, #60]	; (8018588 <HAL_PCD_MspInit+0xbc>)
 801854c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018550:	6353      	str	r3, [r2, #52]	; 0x34
 8018552:	2300      	movs	r3, #0
 8018554:	60fb      	str	r3, [r7, #12]
 8018556:	4b0c      	ldr	r3, [pc, #48]	; (8018588 <HAL_PCD_MspInit+0xbc>)
 8018558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801855a:	4a0b      	ldr	r2, [pc, #44]	; (8018588 <HAL_PCD_MspInit+0xbc>)
 801855c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018560:	6453      	str	r3, [r2, #68]	; 0x44
 8018562:	4b09      	ldr	r3, [pc, #36]	; (8018588 <HAL_PCD_MspInit+0xbc>)
 8018564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801856a:	60fb      	str	r3, [r7, #12]
 801856c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801856e:	2200      	movs	r2, #0
 8018570:	2105      	movs	r1, #5
 8018572:	2043      	movs	r0, #67	; 0x43
 8018574:	f7ef f83c 	bl	80075f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018578:	2043      	movs	r0, #67	; 0x43
 801857a:	f7ef f855 	bl	8007628 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801857e:	bf00      	nop
 8018580:	3728      	adds	r7, #40	; 0x28
 8018582:	46bd      	mov	sp, r7
 8018584:	bd80      	pop	{r7, pc}
 8018586:	bf00      	nop
 8018588:	40023800 	.word	0x40023800
 801858c:	40020000 	.word	0x40020000

08018590 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018590:	b580      	push	{r7, lr}
 8018592:	b082      	sub	sp, #8
 8018594:	af00      	add	r7, sp, #0
 8018596:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801859e:	687b      	ldr	r3, [r7, #4]
 80185a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80185a4:	4619      	mov	r1, r3
 80185a6:	4610      	mov	r0, r2
 80185a8:	f7f8 fa8c 	bl	8010ac4 <USBD_LL_SetupStage>
}
 80185ac:	bf00      	nop
 80185ae:	3708      	adds	r7, #8
 80185b0:	46bd      	mov	sp, r7
 80185b2:	bd80      	pop	{r7, pc}

080185b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80185b4:	b580      	push	{r7, lr}
 80185b6:	b082      	sub	sp, #8
 80185b8:	af00      	add	r7, sp, #0
 80185ba:	6078      	str	r0, [r7, #4]
 80185bc:	460b      	mov	r3, r1
 80185be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80185c6:	78fa      	ldrb	r2, [r7, #3]
 80185c8:	6879      	ldr	r1, [r7, #4]
 80185ca:	4613      	mov	r3, r2
 80185cc:	00db      	lsls	r3, r3, #3
 80185ce:	1a9b      	subs	r3, r3, r2
 80185d0:	009b      	lsls	r3, r3, #2
 80185d2:	440b      	add	r3, r1
 80185d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80185d8:	681a      	ldr	r2, [r3, #0]
 80185da:	78fb      	ldrb	r3, [r7, #3]
 80185dc:	4619      	mov	r1, r3
 80185de:	f7f8 fac6 	bl	8010b6e <USBD_LL_DataOutStage>
}
 80185e2:	bf00      	nop
 80185e4:	3708      	adds	r7, #8
 80185e6:	46bd      	mov	sp, r7
 80185e8:	bd80      	pop	{r7, pc}

080185ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80185ea:	b580      	push	{r7, lr}
 80185ec:	b082      	sub	sp, #8
 80185ee:	af00      	add	r7, sp, #0
 80185f0:	6078      	str	r0, [r7, #4]
 80185f2:	460b      	mov	r3, r1
 80185f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80185fc:	78fa      	ldrb	r2, [r7, #3]
 80185fe:	6879      	ldr	r1, [r7, #4]
 8018600:	4613      	mov	r3, r2
 8018602:	00db      	lsls	r3, r3, #3
 8018604:	1a9b      	subs	r3, r3, r2
 8018606:	009b      	lsls	r3, r3, #2
 8018608:	440b      	add	r3, r1
 801860a:	3348      	adds	r3, #72	; 0x48
 801860c:	681a      	ldr	r2, [r3, #0]
 801860e:	78fb      	ldrb	r3, [r7, #3]
 8018610:	4619      	mov	r1, r3
 8018612:	f7f8 fb0f 	bl	8010c34 <USBD_LL_DataInStage>
}
 8018616:	bf00      	nop
 8018618:	3708      	adds	r7, #8
 801861a:	46bd      	mov	sp, r7
 801861c:	bd80      	pop	{r7, pc}

0801861e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801861e:	b580      	push	{r7, lr}
 8018620:	b082      	sub	sp, #8
 8018622:	af00      	add	r7, sp, #0
 8018624:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018626:	687b      	ldr	r3, [r7, #4]
 8018628:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801862c:	4618      	mov	r0, r3
 801862e:	f7f8 fc23 	bl	8010e78 <USBD_LL_SOF>
}
 8018632:	bf00      	nop
 8018634:	3708      	adds	r7, #8
 8018636:	46bd      	mov	sp, r7
 8018638:	bd80      	pop	{r7, pc}

0801863a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801863a:	b580      	push	{r7, lr}
 801863c:	b084      	sub	sp, #16
 801863e:	af00      	add	r7, sp, #0
 8018640:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018642:	2301      	movs	r3, #1
 8018644:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	68db      	ldr	r3, [r3, #12]
 801864a:	2b00      	cmp	r3, #0
 801864c:	d102      	bne.n	8018654 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801864e:	2300      	movs	r3, #0
 8018650:	73fb      	strb	r3, [r7, #15]
 8018652:	e008      	b.n	8018666 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	68db      	ldr	r3, [r3, #12]
 8018658:	2b02      	cmp	r3, #2
 801865a:	d102      	bne.n	8018662 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801865c:	2301      	movs	r3, #1
 801865e:	73fb      	strb	r3, [r7, #15]
 8018660:	e001      	b.n	8018666 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8018662:	f7ea f997 	bl	8002994 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801866c:	7bfa      	ldrb	r2, [r7, #15]
 801866e:	4611      	mov	r1, r2
 8018670:	4618      	mov	r0, r3
 8018672:	f7f8 fbc3 	bl	8010dfc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801867c:	4618      	mov	r0, r3
 801867e:	f7f8 fb6f 	bl	8010d60 <USBD_LL_Reset>
}
 8018682:	bf00      	nop
 8018684:	3710      	adds	r7, #16
 8018686:	46bd      	mov	sp, r7
 8018688:	bd80      	pop	{r7, pc}
	...

0801868c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801868c:	b580      	push	{r7, lr}
 801868e:	b082      	sub	sp, #8
 8018690:	af00      	add	r7, sp, #0
 8018692:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801869a:	4618      	mov	r0, r3
 801869c:	f7f8 fbbe 	bl	8010e1c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	681b      	ldr	r3, [r3, #0]
 80186a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80186a8:	681b      	ldr	r3, [r3, #0]
 80186aa:	687a      	ldr	r2, [r7, #4]
 80186ac:	6812      	ldr	r2, [r2, #0]
 80186ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80186b2:	f043 0301 	orr.w	r3, r3, #1
 80186b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	6a1b      	ldr	r3, [r3, #32]
 80186bc:	2b00      	cmp	r3, #0
 80186be:	d005      	beq.n	80186cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80186c0:	4b04      	ldr	r3, [pc, #16]	; (80186d4 <HAL_PCD_SuspendCallback+0x48>)
 80186c2:	691b      	ldr	r3, [r3, #16]
 80186c4:	4a03      	ldr	r2, [pc, #12]	; (80186d4 <HAL_PCD_SuspendCallback+0x48>)
 80186c6:	f043 0306 	orr.w	r3, r3, #6
 80186ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80186cc:	bf00      	nop
 80186ce:	3708      	adds	r7, #8
 80186d0:	46bd      	mov	sp, r7
 80186d2:	bd80      	pop	{r7, pc}
 80186d4:	e000ed00 	.word	0xe000ed00

080186d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80186d8:	b580      	push	{r7, lr}
 80186da:	b082      	sub	sp, #8
 80186dc:	af00      	add	r7, sp, #0
 80186de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80186e0:	687b      	ldr	r3, [r7, #4]
 80186e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80186e6:	4618      	mov	r0, r3
 80186e8:	f7f8 fbae 	bl	8010e48 <USBD_LL_Resume>
}
 80186ec:	bf00      	nop
 80186ee:	3708      	adds	r7, #8
 80186f0:	46bd      	mov	sp, r7
 80186f2:	bd80      	pop	{r7, pc}

080186f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80186f4:	b580      	push	{r7, lr}
 80186f6:	b082      	sub	sp, #8
 80186f8:	af00      	add	r7, sp, #0
 80186fa:	6078      	str	r0, [r7, #4]
 80186fc:	460b      	mov	r3, r1
 80186fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018706:	78fa      	ldrb	r2, [r7, #3]
 8018708:	4611      	mov	r1, r2
 801870a:	4618      	mov	r0, r3
 801870c:	f7f8 fbfc 	bl	8010f08 <USBD_LL_IsoOUTIncomplete>
}
 8018710:	bf00      	nop
 8018712:	3708      	adds	r7, #8
 8018714:	46bd      	mov	sp, r7
 8018716:	bd80      	pop	{r7, pc}

08018718 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018718:	b580      	push	{r7, lr}
 801871a:	b082      	sub	sp, #8
 801871c:	af00      	add	r7, sp, #0
 801871e:	6078      	str	r0, [r7, #4]
 8018720:	460b      	mov	r3, r1
 8018722:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801872a:	78fa      	ldrb	r2, [r7, #3]
 801872c:	4611      	mov	r1, r2
 801872e:	4618      	mov	r0, r3
 8018730:	f7f8 fbc4 	bl	8010ebc <USBD_LL_IsoINIncomplete>
}
 8018734:	bf00      	nop
 8018736:	3708      	adds	r7, #8
 8018738:	46bd      	mov	sp, r7
 801873a:	bd80      	pop	{r7, pc}

0801873c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801873c:	b580      	push	{r7, lr}
 801873e:	b082      	sub	sp, #8
 8018740:	af00      	add	r7, sp, #0
 8018742:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801874a:	4618      	mov	r0, r3
 801874c:	f7f8 fc02 	bl	8010f54 <USBD_LL_DevConnected>
}
 8018750:	bf00      	nop
 8018752:	3708      	adds	r7, #8
 8018754:	46bd      	mov	sp, r7
 8018756:	bd80      	pop	{r7, pc}

08018758 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018758:	b580      	push	{r7, lr}
 801875a:	b082      	sub	sp, #8
 801875c:	af00      	add	r7, sp, #0
 801875e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018766:	4618      	mov	r0, r3
 8018768:	f7f8 fbff 	bl	8010f6a <USBD_LL_DevDisconnected>
}
 801876c:	bf00      	nop
 801876e:	3708      	adds	r7, #8
 8018770:	46bd      	mov	sp, r7
 8018772:	bd80      	pop	{r7, pc}

08018774 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018774:	b580      	push	{r7, lr}
 8018776:	b082      	sub	sp, #8
 8018778:	af00      	add	r7, sp, #0
 801877a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	781b      	ldrb	r3, [r3, #0]
 8018780:	2b00      	cmp	r3, #0
 8018782:	d13c      	bne.n	80187fe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8018784:	4a20      	ldr	r2, [pc, #128]	; (8018808 <USBD_LL_Init+0x94>)
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	4a1e      	ldr	r2, [pc, #120]	; (8018808 <USBD_LL_Init+0x94>)
 8018790:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8018794:	4b1c      	ldr	r3, [pc, #112]	; (8018808 <USBD_LL_Init+0x94>)
 8018796:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801879a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801879c:	4b1a      	ldr	r3, [pc, #104]	; (8018808 <USBD_LL_Init+0x94>)
 801879e:	2204      	movs	r2, #4
 80187a0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80187a2:	4b19      	ldr	r3, [pc, #100]	; (8018808 <USBD_LL_Init+0x94>)
 80187a4:	2202      	movs	r2, #2
 80187a6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80187a8:	4b17      	ldr	r3, [pc, #92]	; (8018808 <USBD_LL_Init+0x94>)
 80187aa:	2200      	movs	r2, #0
 80187ac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80187ae:	4b16      	ldr	r3, [pc, #88]	; (8018808 <USBD_LL_Init+0x94>)
 80187b0:	2202      	movs	r2, #2
 80187b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80187b4:	4b14      	ldr	r3, [pc, #80]	; (8018808 <USBD_LL_Init+0x94>)
 80187b6:	2200      	movs	r2, #0
 80187b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80187ba:	4b13      	ldr	r3, [pc, #76]	; (8018808 <USBD_LL_Init+0x94>)
 80187bc:	2200      	movs	r2, #0
 80187be:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80187c0:	4b11      	ldr	r3, [pc, #68]	; (8018808 <USBD_LL_Init+0x94>)
 80187c2:	2200      	movs	r2, #0
 80187c4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80187c6:	4b10      	ldr	r3, [pc, #64]	; (8018808 <USBD_LL_Init+0x94>)
 80187c8:	2201      	movs	r2, #1
 80187ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80187cc:	4b0e      	ldr	r3, [pc, #56]	; (8018808 <USBD_LL_Init+0x94>)
 80187ce:	2200      	movs	r2, #0
 80187d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80187d2:	480d      	ldr	r0, [pc, #52]	; (8018808 <USBD_LL_Init+0x94>)
 80187d4:	f7f0 f9aa 	bl	8008b2c <HAL_PCD_Init>
 80187d8:	4603      	mov	r3, r0
 80187da:	2b00      	cmp	r3, #0
 80187dc:	d001      	beq.n	80187e2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80187de:	f7ea f8d9 	bl	8002994 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80187e2:	2180      	movs	r1, #128	; 0x80
 80187e4:	4808      	ldr	r0, [pc, #32]	; (8018808 <USBD_LL_Init+0x94>)
 80187e6:	f7f1 fb08 	bl	8009dfa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80187ea:	2240      	movs	r2, #64	; 0x40
 80187ec:	2100      	movs	r1, #0
 80187ee:	4806      	ldr	r0, [pc, #24]	; (8018808 <USBD_LL_Init+0x94>)
 80187f0:	f7f1 fabc 	bl	8009d6c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80187f4:	2280      	movs	r2, #128	; 0x80
 80187f6:	2101      	movs	r1, #1
 80187f8:	4803      	ldr	r0, [pc, #12]	; (8018808 <USBD_LL_Init+0x94>)
 80187fa:	f7f1 fab7 	bl	8009d6c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80187fe:	2300      	movs	r3, #0
}
 8018800:	4618      	mov	r0, r3
 8018802:	3708      	adds	r7, #8
 8018804:	46bd      	mov	sp, r7
 8018806:	bd80      	pop	{r7, pc}
 8018808:	20008b84 	.word	0x20008b84

0801880c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801880c:	b580      	push	{r7, lr}
 801880e:	b084      	sub	sp, #16
 8018810:	af00      	add	r7, sp, #0
 8018812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018814:	2300      	movs	r3, #0
 8018816:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018818:	2300      	movs	r3, #0
 801881a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018822:	4618      	mov	r0, r3
 8018824:	f7f0 fa9f 	bl	8008d66 <HAL_PCD_Start>
 8018828:	4603      	mov	r3, r0
 801882a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801882c:	7bfb      	ldrb	r3, [r7, #15]
 801882e:	4618      	mov	r0, r3
 8018830:	f000 f942 	bl	8018ab8 <USBD_Get_USB_Status>
 8018834:	4603      	mov	r3, r0
 8018836:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018838:	7bbb      	ldrb	r3, [r7, #14]
}
 801883a:	4618      	mov	r0, r3
 801883c:	3710      	adds	r7, #16
 801883e:	46bd      	mov	sp, r7
 8018840:	bd80      	pop	{r7, pc}

08018842 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018842:	b580      	push	{r7, lr}
 8018844:	b084      	sub	sp, #16
 8018846:	af00      	add	r7, sp, #0
 8018848:	6078      	str	r0, [r7, #4]
 801884a:	4608      	mov	r0, r1
 801884c:	4611      	mov	r1, r2
 801884e:	461a      	mov	r2, r3
 8018850:	4603      	mov	r3, r0
 8018852:	70fb      	strb	r3, [r7, #3]
 8018854:	460b      	mov	r3, r1
 8018856:	70bb      	strb	r3, [r7, #2]
 8018858:	4613      	mov	r3, r2
 801885a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801885c:	2300      	movs	r3, #0
 801885e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018860:	2300      	movs	r3, #0
 8018862:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801886a:	78bb      	ldrb	r3, [r7, #2]
 801886c:	883a      	ldrh	r2, [r7, #0]
 801886e:	78f9      	ldrb	r1, [r7, #3]
 8018870:	f7f0 fe83 	bl	800957a <HAL_PCD_EP_Open>
 8018874:	4603      	mov	r3, r0
 8018876:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018878:	7bfb      	ldrb	r3, [r7, #15]
 801887a:	4618      	mov	r0, r3
 801887c:	f000 f91c 	bl	8018ab8 <USBD_Get_USB_Status>
 8018880:	4603      	mov	r3, r0
 8018882:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018884:	7bbb      	ldrb	r3, [r7, #14]
}
 8018886:	4618      	mov	r0, r3
 8018888:	3710      	adds	r7, #16
 801888a:	46bd      	mov	sp, r7
 801888c:	bd80      	pop	{r7, pc}

0801888e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801888e:	b580      	push	{r7, lr}
 8018890:	b084      	sub	sp, #16
 8018892:	af00      	add	r7, sp, #0
 8018894:	6078      	str	r0, [r7, #4]
 8018896:	460b      	mov	r3, r1
 8018898:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801889a:	2300      	movs	r3, #0
 801889c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801889e:	2300      	movs	r3, #0
 80188a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80188a8:	78fa      	ldrb	r2, [r7, #3]
 80188aa:	4611      	mov	r1, r2
 80188ac:	4618      	mov	r0, r3
 80188ae:	f7f0 fecc 	bl	800964a <HAL_PCD_EP_Close>
 80188b2:	4603      	mov	r3, r0
 80188b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80188b6:	7bfb      	ldrb	r3, [r7, #15]
 80188b8:	4618      	mov	r0, r3
 80188ba:	f000 f8fd 	bl	8018ab8 <USBD_Get_USB_Status>
 80188be:	4603      	mov	r3, r0
 80188c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80188c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80188c4:	4618      	mov	r0, r3
 80188c6:	3710      	adds	r7, #16
 80188c8:	46bd      	mov	sp, r7
 80188ca:	bd80      	pop	{r7, pc}

080188cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80188cc:	b580      	push	{r7, lr}
 80188ce:	b084      	sub	sp, #16
 80188d0:	af00      	add	r7, sp, #0
 80188d2:	6078      	str	r0, [r7, #4]
 80188d4:	460b      	mov	r3, r1
 80188d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80188d8:	2300      	movs	r3, #0
 80188da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80188dc:	2300      	movs	r3, #0
 80188de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80188e6:	78fa      	ldrb	r2, [r7, #3]
 80188e8:	4611      	mov	r1, r2
 80188ea:	4618      	mov	r0, r3
 80188ec:	f7f0 ffa4 	bl	8009838 <HAL_PCD_EP_SetStall>
 80188f0:	4603      	mov	r3, r0
 80188f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80188f4:	7bfb      	ldrb	r3, [r7, #15]
 80188f6:	4618      	mov	r0, r3
 80188f8:	f000 f8de 	bl	8018ab8 <USBD_Get_USB_Status>
 80188fc:	4603      	mov	r3, r0
 80188fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018900:	7bbb      	ldrb	r3, [r7, #14]
}
 8018902:	4618      	mov	r0, r3
 8018904:	3710      	adds	r7, #16
 8018906:	46bd      	mov	sp, r7
 8018908:	bd80      	pop	{r7, pc}

0801890a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801890a:	b580      	push	{r7, lr}
 801890c:	b084      	sub	sp, #16
 801890e:	af00      	add	r7, sp, #0
 8018910:	6078      	str	r0, [r7, #4]
 8018912:	460b      	mov	r3, r1
 8018914:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018916:	2300      	movs	r3, #0
 8018918:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801891a:	2300      	movs	r3, #0
 801891c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018924:	78fa      	ldrb	r2, [r7, #3]
 8018926:	4611      	mov	r1, r2
 8018928:	4618      	mov	r0, r3
 801892a:	f7f0 ffe9 	bl	8009900 <HAL_PCD_EP_ClrStall>
 801892e:	4603      	mov	r3, r0
 8018930:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018932:	7bfb      	ldrb	r3, [r7, #15]
 8018934:	4618      	mov	r0, r3
 8018936:	f000 f8bf 	bl	8018ab8 <USBD_Get_USB_Status>
 801893a:	4603      	mov	r3, r0
 801893c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801893e:	7bbb      	ldrb	r3, [r7, #14]
}
 8018940:	4618      	mov	r0, r3
 8018942:	3710      	adds	r7, #16
 8018944:	46bd      	mov	sp, r7
 8018946:	bd80      	pop	{r7, pc}

08018948 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018948:	b480      	push	{r7}
 801894a:	b085      	sub	sp, #20
 801894c:	af00      	add	r7, sp, #0
 801894e:	6078      	str	r0, [r7, #4]
 8018950:	460b      	mov	r3, r1
 8018952:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801895a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801895c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018960:	2b00      	cmp	r3, #0
 8018962:	da0b      	bge.n	801897c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018964:	78fb      	ldrb	r3, [r7, #3]
 8018966:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801896a:	68f9      	ldr	r1, [r7, #12]
 801896c:	4613      	mov	r3, r2
 801896e:	00db      	lsls	r3, r3, #3
 8018970:	1a9b      	subs	r3, r3, r2
 8018972:	009b      	lsls	r3, r3, #2
 8018974:	440b      	add	r3, r1
 8018976:	333e      	adds	r3, #62	; 0x3e
 8018978:	781b      	ldrb	r3, [r3, #0]
 801897a:	e00b      	b.n	8018994 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801897c:	78fb      	ldrb	r3, [r7, #3]
 801897e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018982:	68f9      	ldr	r1, [r7, #12]
 8018984:	4613      	mov	r3, r2
 8018986:	00db      	lsls	r3, r3, #3
 8018988:	1a9b      	subs	r3, r3, r2
 801898a:	009b      	lsls	r3, r3, #2
 801898c:	440b      	add	r3, r1
 801898e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8018992:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018994:	4618      	mov	r0, r3
 8018996:	3714      	adds	r7, #20
 8018998:	46bd      	mov	sp, r7
 801899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801899e:	4770      	bx	lr

080189a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80189a0:	b580      	push	{r7, lr}
 80189a2:	b084      	sub	sp, #16
 80189a4:	af00      	add	r7, sp, #0
 80189a6:	6078      	str	r0, [r7, #4]
 80189a8:	460b      	mov	r3, r1
 80189aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80189ac:	2300      	movs	r3, #0
 80189ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80189b0:	2300      	movs	r3, #0
 80189b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80189ba:	78fa      	ldrb	r2, [r7, #3]
 80189bc:	4611      	mov	r1, r2
 80189be:	4618      	mov	r0, r3
 80189c0:	f7f0 fdb6 	bl	8009530 <HAL_PCD_SetAddress>
 80189c4:	4603      	mov	r3, r0
 80189c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80189c8:	7bfb      	ldrb	r3, [r7, #15]
 80189ca:	4618      	mov	r0, r3
 80189cc:	f000 f874 	bl	8018ab8 <USBD_Get_USB_Status>
 80189d0:	4603      	mov	r3, r0
 80189d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80189d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80189d6:	4618      	mov	r0, r3
 80189d8:	3710      	adds	r7, #16
 80189da:	46bd      	mov	sp, r7
 80189dc:	bd80      	pop	{r7, pc}

080189de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80189de:	b580      	push	{r7, lr}
 80189e0:	b086      	sub	sp, #24
 80189e2:	af00      	add	r7, sp, #0
 80189e4:	60f8      	str	r0, [r7, #12]
 80189e6:	607a      	str	r2, [r7, #4]
 80189e8:	603b      	str	r3, [r7, #0]
 80189ea:	460b      	mov	r3, r1
 80189ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80189ee:	2300      	movs	r3, #0
 80189f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80189f2:	2300      	movs	r3, #0
 80189f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80189f6:	68fb      	ldr	r3, [r7, #12]
 80189f8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80189fc:	7af9      	ldrb	r1, [r7, #11]
 80189fe:	683b      	ldr	r3, [r7, #0]
 8018a00:	687a      	ldr	r2, [r7, #4]
 8018a02:	f7f0 fecf 	bl	80097a4 <HAL_PCD_EP_Transmit>
 8018a06:	4603      	mov	r3, r0
 8018a08:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018a0a:	7dfb      	ldrb	r3, [r7, #23]
 8018a0c:	4618      	mov	r0, r3
 8018a0e:	f000 f853 	bl	8018ab8 <USBD_Get_USB_Status>
 8018a12:	4603      	mov	r3, r0
 8018a14:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018a16:	7dbb      	ldrb	r3, [r7, #22]
}
 8018a18:	4618      	mov	r0, r3
 8018a1a:	3718      	adds	r7, #24
 8018a1c:	46bd      	mov	sp, r7
 8018a1e:	bd80      	pop	{r7, pc}

08018a20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018a20:	b580      	push	{r7, lr}
 8018a22:	b086      	sub	sp, #24
 8018a24:	af00      	add	r7, sp, #0
 8018a26:	60f8      	str	r0, [r7, #12]
 8018a28:	607a      	str	r2, [r7, #4]
 8018a2a:	603b      	str	r3, [r7, #0]
 8018a2c:	460b      	mov	r3, r1
 8018a2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018a30:	2300      	movs	r3, #0
 8018a32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018a34:	2300      	movs	r3, #0
 8018a36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018a38:	68fb      	ldr	r3, [r7, #12]
 8018a3a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8018a3e:	7af9      	ldrb	r1, [r7, #11]
 8018a40:	683b      	ldr	r3, [r7, #0]
 8018a42:	687a      	ldr	r2, [r7, #4]
 8018a44:	f7f0 fe4b 	bl	80096de <HAL_PCD_EP_Receive>
 8018a48:	4603      	mov	r3, r0
 8018a4a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018a4c:	7dfb      	ldrb	r3, [r7, #23]
 8018a4e:	4618      	mov	r0, r3
 8018a50:	f000 f832 	bl	8018ab8 <USBD_Get_USB_Status>
 8018a54:	4603      	mov	r3, r0
 8018a56:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018a58:	7dbb      	ldrb	r3, [r7, #22]
}
 8018a5a:	4618      	mov	r0, r3
 8018a5c:	3718      	adds	r7, #24
 8018a5e:	46bd      	mov	sp, r7
 8018a60:	bd80      	pop	{r7, pc}

08018a62 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018a62:	b580      	push	{r7, lr}
 8018a64:	b082      	sub	sp, #8
 8018a66:	af00      	add	r7, sp, #0
 8018a68:	6078      	str	r0, [r7, #4]
 8018a6a:	460b      	mov	r3, r1
 8018a6c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018a74:	78fa      	ldrb	r2, [r7, #3]
 8018a76:	4611      	mov	r1, r2
 8018a78:	4618      	mov	r0, r3
 8018a7a:	f7f0 fe7b 	bl	8009774 <HAL_PCD_EP_GetRxCount>
 8018a7e:	4603      	mov	r3, r0
}
 8018a80:	4618      	mov	r0, r3
 8018a82:	3708      	adds	r7, #8
 8018a84:	46bd      	mov	sp, r7
 8018a86:	bd80      	pop	{r7, pc}

08018a88 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018a88:	b480      	push	{r7}
 8018a8a:	b083      	sub	sp, #12
 8018a8c:	af00      	add	r7, sp, #0
 8018a8e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018a90:	4b03      	ldr	r3, [pc, #12]	; (8018aa0 <USBD_static_malloc+0x18>)
}
 8018a92:	4618      	mov	r0, r3
 8018a94:	370c      	adds	r7, #12
 8018a96:	46bd      	mov	sp, r7
 8018a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a9c:	4770      	bx	lr
 8018a9e:	bf00      	nop
 8018aa0:	20005c84 	.word	0x20005c84

08018aa4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018aa4:	b480      	push	{r7}
 8018aa6:	b083      	sub	sp, #12
 8018aa8:	af00      	add	r7, sp, #0
 8018aaa:	6078      	str	r0, [r7, #4]

}
 8018aac:	bf00      	nop
 8018aae:	370c      	adds	r7, #12
 8018ab0:	46bd      	mov	sp, r7
 8018ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ab6:	4770      	bx	lr

08018ab8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018ab8:	b480      	push	{r7}
 8018aba:	b085      	sub	sp, #20
 8018abc:	af00      	add	r7, sp, #0
 8018abe:	4603      	mov	r3, r0
 8018ac0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018ac2:	2300      	movs	r3, #0
 8018ac4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018ac6:	79fb      	ldrb	r3, [r7, #7]
 8018ac8:	2b03      	cmp	r3, #3
 8018aca:	d817      	bhi.n	8018afc <USBD_Get_USB_Status+0x44>
 8018acc:	a201      	add	r2, pc, #4	; (adr r2, 8018ad4 <USBD_Get_USB_Status+0x1c>)
 8018ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ad2:	bf00      	nop
 8018ad4:	08018ae5 	.word	0x08018ae5
 8018ad8:	08018aeb 	.word	0x08018aeb
 8018adc:	08018af1 	.word	0x08018af1
 8018ae0:	08018af7 	.word	0x08018af7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018ae4:	2300      	movs	r3, #0
 8018ae6:	73fb      	strb	r3, [r7, #15]
    break;
 8018ae8:	e00b      	b.n	8018b02 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018aea:	2303      	movs	r3, #3
 8018aec:	73fb      	strb	r3, [r7, #15]
    break;
 8018aee:	e008      	b.n	8018b02 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018af0:	2301      	movs	r3, #1
 8018af2:	73fb      	strb	r3, [r7, #15]
    break;
 8018af4:	e005      	b.n	8018b02 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018af6:	2303      	movs	r3, #3
 8018af8:	73fb      	strb	r3, [r7, #15]
    break;
 8018afa:	e002      	b.n	8018b02 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8018afc:	2303      	movs	r3, #3
 8018afe:	73fb      	strb	r3, [r7, #15]
    break;
 8018b00:	bf00      	nop
  }
  return usb_status;
 8018b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8018b04:	4618      	mov	r0, r3
 8018b06:	3714      	adds	r7, #20
 8018b08:	46bd      	mov	sp, r7
 8018b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b0e:	4770      	bx	lr

08018b10 <__cxa_pure_virtual>:
 8018b10:	b508      	push	{r3, lr}
 8018b12:	f000 f80d 	bl	8018b30 <_ZSt9terminatev>

08018b16 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8018b16:	b508      	push	{r3, lr}
 8018b18:	4780      	blx	r0
 8018b1a:	f000 ffc3 	bl	8019aa4 <abort>
	...

08018b20 <_ZSt13get_terminatev>:
 8018b20:	4b02      	ldr	r3, [pc, #8]	; (8018b2c <_ZSt13get_terminatev+0xc>)
 8018b22:	6818      	ldr	r0, [r3, #0]
 8018b24:	f3bf 8f5b 	dmb	ish
 8018b28:	4770      	bx	lr
 8018b2a:	bf00      	nop
 8018b2c:	200001d0 	.word	0x200001d0

08018b30 <_ZSt9terminatev>:
 8018b30:	b508      	push	{r3, lr}
 8018b32:	f7ff fff5 	bl	8018b20 <_ZSt13get_terminatev>
 8018b36:	f7ff ffee 	bl	8018b16 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08018b3c <pow>:
 8018b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018b40:	ec59 8b10 	vmov	r8, r9, d0
 8018b44:	ec57 6b11 	vmov	r6, r7, d1
 8018b48:	f000 f8a6 	bl	8018c98 <__ieee754_pow>
 8018b4c:	4b4e      	ldr	r3, [pc, #312]	; (8018c88 <pow+0x14c>)
 8018b4e:	f993 3000 	ldrsb.w	r3, [r3]
 8018b52:	3301      	adds	r3, #1
 8018b54:	ec55 4b10 	vmov	r4, r5, d0
 8018b58:	d015      	beq.n	8018b86 <pow+0x4a>
 8018b5a:	4632      	mov	r2, r6
 8018b5c:	463b      	mov	r3, r7
 8018b5e:	4630      	mov	r0, r6
 8018b60:	4639      	mov	r1, r7
 8018b62:	f7e7 fff3 	bl	8000b4c <__aeabi_dcmpun>
 8018b66:	b970      	cbnz	r0, 8018b86 <pow+0x4a>
 8018b68:	4642      	mov	r2, r8
 8018b6a:	464b      	mov	r3, r9
 8018b6c:	4640      	mov	r0, r8
 8018b6e:	4649      	mov	r1, r9
 8018b70:	f7e7 ffec 	bl	8000b4c <__aeabi_dcmpun>
 8018b74:	2200      	movs	r2, #0
 8018b76:	2300      	movs	r3, #0
 8018b78:	b148      	cbz	r0, 8018b8e <pow+0x52>
 8018b7a:	4630      	mov	r0, r6
 8018b7c:	4639      	mov	r1, r7
 8018b7e:	f7e7 ffb3 	bl	8000ae8 <__aeabi_dcmpeq>
 8018b82:	2800      	cmp	r0, #0
 8018b84:	d17d      	bne.n	8018c82 <pow+0x146>
 8018b86:	ec45 4b10 	vmov	d0, r4, r5
 8018b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018b8e:	4640      	mov	r0, r8
 8018b90:	4649      	mov	r1, r9
 8018b92:	f7e7 ffa9 	bl	8000ae8 <__aeabi_dcmpeq>
 8018b96:	b1e0      	cbz	r0, 8018bd2 <pow+0x96>
 8018b98:	2200      	movs	r2, #0
 8018b9a:	2300      	movs	r3, #0
 8018b9c:	4630      	mov	r0, r6
 8018b9e:	4639      	mov	r1, r7
 8018ba0:	f7e7 ffa2 	bl	8000ae8 <__aeabi_dcmpeq>
 8018ba4:	2800      	cmp	r0, #0
 8018ba6:	d16c      	bne.n	8018c82 <pow+0x146>
 8018ba8:	ec47 6b10 	vmov	d0, r6, r7
 8018bac:	f000 fe53 	bl	8019856 <finite>
 8018bb0:	2800      	cmp	r0, #0
 8018bb2:	d0e8      	beq.n	8018b86 <pow+0x4a>
 8018bb4:	2200      	movs	r2, #0
 8018bb6:	2300      	movs	r3, #0
 8018bb8:	4630      	mov	r0, r6
 8018bba:	4639      	mov	r1, r7
 8018bbc:	f7e7 ff9e 	bl	8000afc <__aeabi_dcmplt>
 8018bc0:	2800      	cmp	r0, #0
 8018bc2:	d0e0      	beq.n	8018b86 <pow+0x4a>
 8018bc4:	f000 ff76 	bl	8019ab4 <__errno>
 8018bc8:	2321      	movs	r3, #33	; 0x21
 8018bca:	6003      	str	r3, [r0, #0]
 8018bcc:	2400      	movs	r4, #0
 8018bce:	4d2f      	ldr	r5, [pc, #188]	; (8018c8c <pow+0x150>)
 8018bd0:	e7d9      	b.n	8018b86 <pow+0x4a>
 8018bd2:	ec45 4b10 	vmov	d0, r4, r5
 8018bd6:	f000 fe3e 	bl	8019856 <finite>
 8018bda:	bbb8      	cbnz	r0, 8018c4c <pow+0x110>
 8018bdc:	ec49 8b10 	vmov	d0, r8, r9
 8018be0:	f000 fe39 	bl	8019856 <finite>
 8018be4:	b390      	cbz	r0, 8018c4c <pow+0x110>
 8018be6:	ec47 6b10 	vmov	d0, r6, r7
 8018bea:	f000 fe34 	bl	8019856 <finite>
 8018bee:	b368      	cbz	r0, 8018c4c <pow+0x110>
 8018bf0:	4622      	mov	r2, r4
 8018bf2:	462b      	mov	r3, r5
 8018bf4:	4620      	mov	r0, r4
 8018bf6:	4629      	mov	r1, r5
 8018bf8:	f7e7 ffa8 	bl	8000b4c <__aeabi_dcmpun>
 8018bfc:	b160      	cbz	r0, 8018c18 <pow+0xdc>
 8018bfe:	f000 ff59 	bl	8019ab4 <__errno>
 8018c02:	2321      	movs	r3, #33	; 0x21
 8018c04:	6003      	str	r3, [r0, #0]
 8018c06:	2200      	movs	r2, #0
 8018c08:	2300      	movs	r3, #0
 8018c0a:	4610      	mov	r0, r2
 8018c0c:	4619      	mov	r1, r3
 8018c0e:	f7e7 fe2d 	bl	800086c <__aeabi_ddiv>
 8018c12:	4604      	mov	r4, r0
 8018c14:	460d      	mov	r5, r1
 8018c16:	e7b6      	b.n	8018b86 <pow+0x4a>
 8018c18:	f000 ff4c 	bl	8019ab4 <__errno>
 8018c1c:	2322      	movs	r3, #34	; 0x22
 8018c1e:	6003      	str	r3, [r0, #0]
 8018c20:	2200      	movs	r2, #0
 8018c22:	2300      	movs	r3, #0
 8018c24:	4640      	mov	r0, r8
 8018c26:	4649      	mov	r1, r9
 8018c28:	f7e7 ff68 	bl	8000afc <__aeabi_dcmplt>
 8018c2c:	2400      	movs	r4, #0
 8018c2e:	b158      	cbz	r0, 8018c48 <pow+0x10c>
 8018c30:	ec47 6b10 	vmov	d0, r6, r7
 8018c34:	f000 fe24 	bl	8019880 <rint>
 8018c38:	4632      	mov	r2, r6
 8018c3a:	ec51 0b10 	vmov	r0, r1, d0
 8018c3e:	463b      	mov	r3, r7
 8018c40:	f7e7 ff52 	bl	8000ae8 <__aeabi_dcmpeq>
 8018c44:	2800      	cmp	r0, #0
 8018c46:	d0c2      	beq.n	8018bce <pow+0x92>
 8018c48:	4d11      	ldr	r5, [pc, #68]	; (8018c90 <pow+0x154>)
 8018c4a:	e79c      	b.n	8018b86 <pow+0x4a>
 8018c4c:	2200      	movs	r2, #0
 8018c4e:	2300      	movs	r3, #0
 8018c50:	4620      	mov	r0, r4
 8018c52:	4629      	mov	r1, r5
 8018c54:	f7e7 ff48 	bl	8000ae8 <__aeabi_dcmpeq>
 8018c58:	2800      	cmp	r0, #0
 8018c5a:	d094      	beq.n	8018b86 <pow+0x4a>
 8018c5c:	ec49 8b10 	vmov	d0, r8, r9
 8018c60:	f000 fdf9 	bl	8019856 <finite>
 8018c64:	2800      	cmp	r0, #0
 8018c66:	d08e      	beq.n	8018b86 <pow+0x4a>
 8018c68:	ec47 6b10 	vmov	d0, r6, r7
 8018c6c:	f000 fdf3 	bl	8019856 <finite>
 8018c70:	2800      	cmp	r0, #0
 8018c72:	d088      	beq.n	8018b86 <pow+0x4a>
 8018c74:	f000 ff1e 	bl	8019ab4 <__errno>
 8018c78:	2322      	movs	r3, #34	; 0x22
 8018c7a:	6003      	str	r3, [r0, #0]
 8018c7c:	2400      	movs	r4, #0
 8018c7e:	2500      	movs	r5, #0
 8018c80:	e781      	b.n	8018b86 <pow+0x4a>
 8018c82:	4d04      	ldr	r5, [pc, #16]	; (8018c94 <pow+0x158>)
 8018c84:	2400      	movs	r4, #0
 8018c86:	e77e      	b.n	8018b86 <pow+0x4a>
 8018c88:	200001d4 	.word	0x200001d4
 8018c8c:	fff00000 	.word	0xfff00000
 8018c90:	7ff00000 	.word	0x7ff00000
 8018c94:	3ff00000 	.word	0x3ff00000

08018c98 <__ieee754_pow>:
 8018c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c9c:	ed2d 8b06 	vpush	{d8-d10}
 8018ca0:	b08d      	sub	sp, #52	; 0x34
 8018ca2:	ed8d 1b02 	vstr	d1, [sp, #8]
 8018ca6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8018caa:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8018cae:	ea56 0100 	orrs.w	r1, r6, r0
 8018cb2:	ec53 2b10 	vmov	r2, r3, d0
 8018cb6:	f000 84d1 	beq.w	801965c <__ieee754_pow+0x9c4>
 8018cba:	497f      	ldr	r1, [pc, #508]	; (8018eb8 <__ieee754_pow+0x220>)
 8018cbc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8018cc0:	428c      	cmp	r4, r1
 8018cc2:	ee10 8a10 	vmov	r8, s0
 8018cc6:	4699      	mov	r9, r3
 8018cc8:	dc09      	bgt.n	8018cde <__ieee754_pow+0x46>
 8018cca:	d103      	bne.n	8018cd4 <__ieee754_pow+0x3c>
 8018ccc:	b97a      	cbnz	r2, 8018cee <__ieee754_pow+0x56>
 8018cce:	42a6      	cmp	r6, r4
 8018cd0:	dd02      	ble.n	8018cd8 <__ieee754_pow+0x40>
 8018cd2:	e00c      	b.n	8018cee <__ieee754_pow+0x56>
 8018cd4:	428e      	cmp	r6, r1
 8018cd6:	dc02      	bgt.n	8018cde <__ieee754_pow+0x46>
 8018cd8:	428e      	cmp	r6, r1
 8018cda:	d110      	bne.n	8018cfe <__ieee754_pow+0x66>
 8018cdc:	b178      	cbz	r0, 8018cfe <__ieee754_pow+0x66>
 8018cde:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8018ce2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8018ce6:	ea54 0308 	orrs.w	r3, r4, r8
 8018cea:	f000 84b7 	beq.w	801965c <__ieee754_pow+0x9c4>
 8018cee:	4873      	ldr	r0, [pc, #460]	; (8018ebc <__ieee754_pow+0x224>)
 8018cf0:	b00d      	add	sp, #52	; 0x34
 8018cf2:	ecbd 8b06 	vpop	{d8-d10}
 8018cf6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cfa:	f000 bdb9 	b.w	8019870 <nan>
 8018cfe:	f1b9 0f00 	cmp.w	r9, #0
 8018d02:	da36      	bge.n	8018d72 <__ieee754_pow+0xda>
 8018d04:	496e      	ldr	r1, [pc, #440]	; (8018ec0 <__ieee754_pow+0x228>)
 8018d06:	428e      	cmp	r6, r1
 8018d08:	dc51      	bgt.n	8018dae <__ieee754_pow+0x116>
 8018d0a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8018d0e:	428e      	cmp	r6, r1
 8018d10:	f340 84af 	ble.w	8019672 <__ieee754_pow+0x9da>
 8018d14:	1531      	asrs	r1, r6, #20
 8018d16:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8018d1a:	2914      	cmp	r1, #20
 8018d1c:	dd0f      	ble.n	8018d3e <__ieee754_pow+0xa6>
 8018d1e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8018d22:	fa20 fc01 	lsr.w	ip, r0, r1
 8018d26:	fa0c f101 	lsl.w	r1, ip, r1
 8018d2a:	4281      	cmp	r1, r0
 8018d2c:	f040 84a1 	bne.w	8019672 <__ieee754_pow+0x9da>
 8018d30:	f00c 0c01 	and.w	ip, ip, #1
 8018d34:	f1cc 0102 	rsb	r1, ip, #2
 8018d38:	9100      	str	r1, [sp, #0]
 8018d3a:	b180      	cbz	r0, 8018d5e <__ieee754_pow+0xc6>
 8018d3c:	e059      	b.n	8018df2 <__ieee754_pow+0x15a>
 8018d3e:	2800      	cmp	r0, #0
 8018d40:	d155      	bne.n	8018dee <__ieee754_pow+0x156>
 8018d42:	f1c1 0114 	rsb	r1, r1, #20
 8018d46:	fa46 fc01 	asr.w	ip, r6, r1
 8018d4a:	fa0c f101 	lsl.w	r1, ip, r1
 8018d4e:	42b1      	cmp	r1, r6
 8018d50:	f040 848c 	bne.w	801966c <__ieee754_pow+0x9d4>
 8018d54:	f00c 0c01 	and.w	ip, ip, #1
 8018d58:	f1cc 0102 	rsb	r1, ip, #2
 8018d5c:	9100      	str	r1, [sp, #0]
 8018d5e:	4959      	ldr	r1, [pc, #356]	; (8018ec4 <__ieee754_pow+0x22c>)
 8018d60:	428e      	cmp	r6, r1
 8018d62:	d12d      	bne.n	8018dc0 <__ieee754_pow+0x128>
 8018d64:	2f00      	cmp	r7, #0
 8018d66:	da79      	bge.n	8018e5c <__ieee754_pow+0x1c4>
 8018d68:	4956      	ldr	r1, [pc, #344]	; (8018ec4 <__ieee754_pow+0x22c>)
 8018d6a:	2000      	movs	r0, #0
 8018d6c:	f7e7 fd7e 	bl	800086c <__aeabi_ddiv>
 8018d70:	e016      	b.n	8018da0 <__ieee754_pow+0x108>
 8018d72:	2100      	movs	r1, #0
 8018d74:	9100      	str	r1, [sp, #0]
 8018d76:	2800      	cmp	r0, #0
 8018d78:	d13b      	bne.n	8018df2 <__ieee754_pow+0x15a>
 8018d7a:	494f      	ldr	r1, [pc, #316]	; (8018eb8 <__ieee754_pow+0x220>)
 8018d7c:	428e      	cmp	r6, r1
 8018d7e:	d1ee      	bne.n	8018d5e <__ieee754_pow+0xc6>
 8018d80:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8018d84:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8018d88:	ea53 0308 	orrs.w	r3, r3, r8
 8018d8c:	f000 8466 	beq.w	801965c <__ieee754_pow+0x9c4>
 8018d90:	4b4d      	ldr	r3, [pc, #308]	; (8018ec8 <__ieee754_pow+0x230>)
 8018d92:	429c      	cmp	r4, r3
 8018d94:	dd0d      	ble.n	8018db2 <__ieee754_pow+0x11a>
 8018d96:	2f00      	cmp	r7, #0
 8018d98:	f280 8464 	bge.w	8019664 <__ieee754_pow+0x9cc>
 8018d9c:	2000      	movs	r0, #0
 8018d9e:	2100      	movs	r1, #0
 8018da0:	ec41 0b10 	vmov	d0, r0, r1
 8018da4:	b00d      	add	sp, #52	; 0x34
 8018da6:	ecbd 8b06 	vpop	{d8-d10}
 8018daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018dae:	2102      	movs	r1, #2
 8018db0:	e7e0      	b.n	8018d74 <__ieee754_pow+0xdc>
 8018db2:	2f00      	cmp	r7, #0
 8018db4:	daf2      	bge.n	8018d9c <__ieee754_pow+0x104>
 8018db6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8018dba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8018dbe:	e7ef      	b.n	8018da0 <__ieee754_pow+0x108>
 8018dc0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8018dc4:	d104      	bne.n	8018dd0 <__ieee754_pow+0x138>
 8018dc6:	4610      	mov	r0, r2
 8018dc8:	4619      	mov	r1, r3
 8018dca:	f7e7 fc25 	bl	8000618 <__aeabi_dmul>
 8018dce:	e7e7      	b.n	8018da0 <__ieee754_pow+0x108>
 8018dd0:	493e      	ldr	r1, [pc, #248]	; (8018ecc <__ieee754_pow+0x234>)
 8018dd2:	428f      	cmp	r7, r1
 8018dd4:	d10d      	bne.n	8018df2 <__ieee754_pow+0x15a>
 8018dd6:	f1b9 0f00 	cmp.w	r9, #0
 8018dda:	db0a      	blt.n	8018df2 <__ieee754_pow+0x15a>
 8018ddc:	ec43 2b10 	vmov	d0, r2, r3
 8018de0:	b00d      	add	sp, #52	; 0x34
 8018de2:	ecbd 8b06 	vpop	{d8-d10}
 8018de6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018dea:	f000 bc77 	b.w	80196dc <__ieee754_sqrt>
 8018dee:	2100      	movs	r1, #0
 8018df0:	9100      	str	r1, [sp, #0]
 8018df2:	ec43 2b10 	vmov	d0, r2, r3
 8018df6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018dfa:	f000 fd23 	bl	8019844 <fabs>
 8018dfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018e02:	ec51 0b10 	vmov	r0, r1, d0
 8018e06:	f1b8 0f00 	cmp.w	r8, #0
 8018e0a:	d12a      	bne.n	8018e62 <__ieee754_pow+0x1ca>
 8018e0c:	b12c      	cbz	r4, 8018e1a <__ieee754_pow+0x182>
 8018e0e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8018ec4 <__ieee754_pow+0x22c>
 8018e12:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8018e16:	45e6      	cmp	lr, ip
 8018e18:	d123      	bne.n	8018e62 <__ieee754_pow+0x1ca>
 8018e1a:	2f00      	cmp	r7, #0
 8018e1c:	da05      	bge.n	8018e2a <__ieee754_pow+0x192>
 8018e1e:	4602      	mov	r2, r0
 8018e20:	460b      	mov	r3, r1
 8018e22:	2000      	movs	r0, #0
 8018e24:	4927      	ldr	r1, [pc, #156]	; (8018ec4 <__ieee754_pow+0x22c>)
 8018e26:	f7e7 fd21 	bl	800086c <__aeabi_ddiv>
 8018e2a:	f1b9 0f00 	cmp.w	r9, #0
 8018e2e:	dab7      	bge.n	8018da0 <__ieee754_pow+0x108>
 8018e30:	9b00      	ldr	r3, [sp, #0]
 8018e32:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8018e36:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8018e3a:	4323      	orrs	r3, r4
 8018e3c:	d108      	bne.n	8018e50 <__ieee754_pow+0x1b8>
 8018e3e:	4602      	mov	r2, r0
 8018e40:	460b      	mov	r3, r1
 8018e42:	4610      	mov	r0, r2
 8018e44:	4619      	mov	r1, r3
 8018e46:	f7e7 fa2f 	bl	80002a8 <__aeabi_dsub>
 8018e4a:	4602      	mov	r2, r0
 8018e4c:	460b      	mov	r3, r1
 8018e4e:	e78d      	b.n	8018d6c <__ieee754_pow+0xd4>
 8018e50:	9b00      	ldr	r3, [sp, #0]
 8018e52:	2b01      	cmp	r3, #1
 8018e54:	d1a4      	bne.n	8018da0 <__ieee754_pow+0x108>
 8018e56:	4602      	mov	r2, r0
 8018e58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018e5c:	4610      	mov	r0, r2
 8018e5e:	4619      	mov	r1, r3
 8018e60:	e79e      	b.n	8018da0 <__ieee754_pow+0x108>
 8018e62:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8018e66:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 8018e6a:	950a      	str	r5, [sp, #40]	; 0x28
 8018e6c:	9d00      	ldr	r5, [sp, #0]
 8018e6e:	46ac      	mov	ip, r5
 8018e70:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8018e72:	ea5c 0505 	orrs.w	r5, ip, r5
 8018e76:	d0e4      	beq.n	8018e42 <__ieee754_pow+0x1aa>
 8018e78:	4b15      	ldr	r3, [pc, #84]	; (8018ed0 <__ieee754_pow+0x238>)
 8018e7a:	429e      	cmp	r6, r3
 8018e7c:	f340 80fc 	ble.w	8019078 <__ieee754_pow+0x3e0>
 8018e80:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8018e84:	429e      	cmp	r6, r3
 8018e86:	4b10      	ldr	r3, [pc, #64]	; (8018ec8 <__ieee754_pow+0x230>)
 8018e88:	dd07      	ble.n	8018e9a <__ieee754_pow+0x202>
 8018e8a:	429c      	cmp	r4, r3
 8018e8c:	dc0a      	bgt.n	8018ea4 <__ieee754_pow+0x20c>
 8018e8e:	2f00      	cmp	r7, #0
 8018e90:	da84      	bge.n	8018d9c <__ieee754_pow+0x104>
 8018e92:	a307      	add	r3, pc, #28	; (adr r3, 8018eb0 <__ieee754_pow+0x218>)
 8018e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e98:	e795      	b.n	8018dc6 <__ieee754_pow+0x12e>
 8018e9a:	429c      	cmp	r4, r3
 8018e9c:	dbf7      	blt.n	8018e8e <__ieee754_pow+0x1f6>
 8018e9e:	4b09      	ldr	r3, [pc, #36]	; (8018ec4 <__ieee754_pow+0x22c>)
 8018ea0:	429c      	cmp	r4, r3
 8018ea2:	dd17      	ble.n	8018ed4 <__ieee754_pow+0x23c>
 8018ea4:	2f00      	cmp	r7, #0
 8018ea6:	dcf4      	bgt.n	8018e92 <__ieee754_pow+0x1fa>
 8018ea8:	e778      	b.n	8018d9c <__ieee754_pow+0x104>
 8018eaa:	bf00      	nop
 8018eac:	f3af 8000 	nop.w
 8018eb0:	8800759c 	.word	0x8800759c
 8018eb4:	7e37e43c 	.word	0x7e37e43c
 8018eb8:	7ff00000 	.word	0x7ff00000
 8018ebc:	08020f3b 	.word	0x08020f3b
 8018ec0:	433fffff 	.word	0x433fffff
 8018ec4:	3ff00000 	.word	0x3ff00000
 8018ec8:	3fefffff 	.word	0x3fefffff
 8018ecc:	3fe00000 	.word	0x3fe00000
 8018ed0:	41e00000 	.word	0x41e00000
 8018ed4:	4b64      	ldr	r3, [pc, #400]	; (8019068 <__ieee754_pow+0x3d0>)
 8018ed6:	2200      	movs	r2, #0
 8018ed8:	f7e7 f9e6 	bl	80002a8 <__aeabi_dsub>
 8018edc:	a356      	add	r3, pc, #344	; (adr r3, 8019038 <__ieee754_pow+0x3a0>)
 8018ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ee2:	4604      	mov	r4, r0
 8018ee4:	460d      	mov	r5, r1
 8018ee6:	f7e7 fb97 	bl	8000618 <__aeabi_dmul>
 8018eea:	a355      	add	r3, pc, #340	; (adr r3, 8019040 <__ieee754_pow+0x3a8>)
 8018eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ef0:	4606      	mov	r6, r0
 8018ef2:	460f      	mov	r7, r1
 8018ef4:	4620      	mov	r0, r4
 8018ef6:	4629      	mov	r1, r5
 8018ef8:	f7e7 fb8e 	bl	8000618 <__aeabi_dmul>
 8018efc:	4b5b      	ldr	r3, [pc, #364]	; (801906c <__ieee754_pow+0x3d4>)
 8018efe:	4682      	mov	sl, r0
 8018f00:	468b      	mov	fp, r1
 8018f02:	2200      	movs	r2, #0
 8018f04:	4620      	mov	r0, r4
 8018f06:	4629      	mov	r1, r5
 8018f08:	f7e7 fb86 	bl	8000618 <__aeabi_dmul>
 8018f0c:	4602      	mov	r2, r0
 8018f0e:	460b      	mov	r3, r1
 8018f10:	a14d      	add	r1, pc, #308	; (adr r1, 8019048 <__ieee754_pow+0x3b0>)
 8018f12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018f16:	f7e7 f9c7 	bl	80002a8 <__aeabi_dsub>
 8018f1a:	4622      	mov	r2, r4
 8018f1c:	462b      	mov	r3, r5
 8018f1e:	f7e7 fb7b 	bl	8000618 <__aeabi_dmul>
 8018f22:	4602      	mov	r2, r0
 8018f24:	460b      	mov	r3, r1
 8018f26:	2000      	movs	r0, #0
 8018f28:	4951      	ldr	r1, [pc, #324]	; (8019070 <__ieee754_pow+0x3d8>)
 8018f2a:	f7e7 f9bd 	bl	80002a8 <__aeabi_dsub>
 8018f2e:	4622      	mov	r2, r4
 8018f30:	4680      	mov	r8, r0
 8018f32:	4689      	mov	r9, r1
 8018f34:	462b      	mov	r3, r5
 8018f36:	4620      	mov	r0, r4
 8018f38:	4629      	mov	r1, r5
 8018f3a:	f7e7 fb6d 	bl	8000618 <__aeabi_dmul>
 8018f3e:	4602      	mov	r2, r0
 8018f40:	460b      	mov	r3, r1
 8018f42:	4640      	mov	r0, r8
 8018f44:	4649      	mov	r1, r9
 8018f46:	f7e7 fb67 	bl	8000618 <__aeabi_dmul>
 8018f4a:	a341      	add	r3, pc, #260	; (adr r3, 8019050 <__ieee754_pow+0x3b8>)
 8018f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f50:	f7e7 fb62 	bl	8000618 <__aeabi_dmul>
 8018f54:	4602      	mov	r2, r0
 8018f56:	460b      	mov	r3, r1
 8018f58:	4650      	mov	r0, sl
 8018f5a:	4659      	mov	r1, fp
 8018f5c:	f7e7 f9a4 	bl	80002a8 <__aeabi_dsub>
 8018f60:	4602      	mov	r2, r0
 8018f62:	460b      	mov	r3, r1
 8018f64:	4680      	mov	r8, r0
 8018f66:	4689      	mov	r9, r1
 8018f68:	4630      	mov	r0, r6
 8018f6a:	4639      	mov	r1, r7
 8018f6c:	f7e7 f99e 	bl	80002ac <__adddf3>
 8018f70:	2400      	movs	r4, #0
 8018f72:	4632      	mov	r2, r6
 8018f74:	463b      	mov	r3, r7
 8018f76:	4620      	mov	r0, r4
 8018f78:	460d      	mov	r5, r1
 8018f7a:	f7e7 f995 	bl	80002a8 <__aeabi_dsub>
 8018f7e:	4602      	mov	r2, r0
 8018f80:	460b      	mov	r3, r1
 8018f82:	4640      	mov	r0, r8
 8018f84:	4649      	mov	r1, r9
 8018f86:	f7e7 f98f 	bl	80002a8 <__aeabi_dsub>
 8018f8a:	9b00      	ldr	r3, [sp, #0]
 8018f8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018f8e:	3b01      	subs	r3, #1
 8018f90:	4313      	orrs	r3, r2
 8018f92:	4682      	mov	sl, r0
 8018f94:	468b      	mov	fp, r1
 8018f96:	f040 81f1 	bne.w	801937c <__ieee754_pow+0x6e4>
 8018f9a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8019058 <__ieee754_pow+0x3c0>
 8018f9e:	eeb0 8a47 	vmov.f32	s16, s14
 8018fa2:	eef0 8a67 	vmov.f32	s17, s15
 8018fa6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018faa:	2600      	movs	r6, #0
 8018fac:	4632      	mov	r2, r6
 8018fae:	463b      	mov	r3, r7
 8018fb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018fb4:	f7e7 f978 	bl	80002a8 <__aeabi_dsub>
 8018fb8:	4622      	mov	r2, r4
 8018fba:	462b      	mov	r3, r5
 8018fbc:	f7e7 fb2c 	bl	8000618 <__aeabi_dmul>
 8018fc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018fc4:	4680      	mov	r8, r0
 8018fc6:	4689      	mov	r9, r1
 8018fc8:	4650      	mov	r0, sl
 8018fca:	4659      	mov	r1, fp
 8018fcc:	f7e7 fb24 	bl	8000618 <__aeabi_dmul>
 8018fd0:	4602      	mov	r2, r0
 8018fd2:	460b      	mov	r3, r1
 8018fd4:	4640      	mov	r0, r8
 8018fd6:	4649      	mov	r1, r9
 8018fd8:	f7e7 f968 	bl	80002ac <__adddf3>
 8018fdc:	4632      	mov	r2, r6
 8018fde:	463b      	mov	r3, r7
 8018fe0:	4680      	mov	r8, r0
 8018fe2:	4689      	mov	r9, r1
 8018fe4:	4620      	mov	r0, r4
 8018fe6:	4629      	mov	r1, r5
 8018fe8:	f7e7 fb16 	bl	8000618 <__aeabi_dmul>
 8018fec:	460b      	mov	r3, r1
 8018fee:	4604      	mov	r4, r0
 8018ff0:	460d      	mov	r5, r1
 8018ff2:	4602      	mov	r2, r0
 8018ff4:	4649      	mov	r1, r9
 8018ff6:	4640      	mov	r0, r8
 8018ff8:	f7e7 f958 	bl	80002ac <__adddf3>
 8018ffc:	4b1d      	ldr	r3, [pc, #116]	; (8019074 <__ieee754_pow+0x3dc>)
 8018ffe:	4299      	cmp	r1, r3
 8019000:	ec45 4b19 	vmov	d9, r4, r5
 8019004:	4606      	mov	r6, r0
 8019006:	460f      	mov	r7, r1
 8019008:	468b      	mov	fp, r1
 801900a:	f340 82fe 	ble.w	801960a <__ieee754_pow+0x972>
 801900e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8019012:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8019016:	4303      	orrs	r3, r0
 8019018:	f000 81f0 	beq.w	80193fc <__ieee754_pow+0x764>
 801901c:	a310      	add	r3, pc, #64	; (adr r3, 8019060 <__ieee754_pow+0x3c8>)
 801901e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019022:	ec51 0b18 	vmov	r0, r1, d8
 8019026:	f7e7 faf7 	bl	8000618 <__aeabi_dmul>
 801902a:	a30d      	add	r3, pc, #52	; (adr r3, 8019060 <__ieee754_pow+0x3c8>)
 801902c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019030:	e6cb      	b.n	8018dca <__ieee754_pow+0x132>
 8019032:	bf00      	nop
 8019034:	f3af 8000 	nop.w
 8019038:	60000000 	.word	0x60000000
 801903c:	3ff71547 	.word	0x3ff71547
 8019040:	f85ddf44 	.word	0xf85ddf44
 8019044:	3e54ae0b 	.word	0x3e54ae0b
 8019048:	55555555 	.word	0x55555555
 801904c:	3fd55555 	.word	0x3fd55555
 8019050:	652b82fe 	.word	0x652b82fe
 8019054:	3ff71547 	.word	0x3ff71547
 8019058:	00000000 	.word	0x00000000
 801905c:	bff00000 	.word	0xbff00000
 8019060:	8800759c 	.word	0x8800759c
 8019064:	7e37e43c 	.word	0x7e37e43c
 8019068:	3ff00000 	.word	0x3ff00000
 801906c:	3fd00000 	.word	0x3fd00000
 8019070:	3fe00000 	.word	0x3fe00000
 8019074:	408fffff 	.word	0x408fffff
 8019078:	4bd7      	ldr	r3, [pc, #860]	; (80193d8 <__ieee754_pow+0x740>)
 801907a:	ea03 0309 	and.w	r3, r3, r9
 801907e:	2200      	movs	r2, #0
 8019080:	b92b      	cbnz	r3, 801908e <__ieee754_pow+0x3f6>
 8019082:	4bd6      	ldr	r3, [pc, #856]	; (80193dc <__ieee754_pow+0x744>)
 8019084:	f7e7 fac8 	bl	8000618 <__aeabi_dmul>
 8019088:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801908c:	460c      	mov	r4, r1
 801908e:	1523      	asrs	r3, r4, #20
 8019090:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019094:	4413      	add	r3, r2
 8019096:	9309      	str	r3, [sp, #36]	; 0x24
 8019098:	4bd1      	ldr	r3, [pc, #836]	; (80193e0 <__ieee754_pow+0x748>)
 801909a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801909e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80190a2:	429c      	cmp	r4, r3
 80190a4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80190a8:	dd08      	ble.n	80190bc <__ieee754_pow+0x424>
 80190aa:	4bce      	ldr	r3, [pc, #824]	; (80193e4 <__ieee754_pow+0x74c>)
 80190ac:	429c      	cmp	r4, r3
 80190ae:	f340 8163 	ble.w	8019378 <__ieee754_pow+0x6e0>
 80190b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80190b4:	3301      	adds	r3, #1
 80190b6:	9309      	str	r3, [sp, #36]	; 0x24
 80190b8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80190bc:	2400      	movs	r4, #0
 80190be:	00e3      	lsls	r3, r4, #3
 80190c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80190c2:	4bc9      	ldr	r3, [pc, #804]	; (80193e8 <__ieee754_pow+0x750>)
 80190c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80190c8:	ed93 7b00 	vldr	d7, [r3]
 80190cc:	4629      	mov	r1, r5
 80190ce:	ec53 2b17 	vmov	r2, r3, d7
 80190d2:	eeb0 8a47 	vmov.f32	s16, s14
 80190d6:	eef0 8a67 	vmov.f32	s17, s15
 80190da:	4682      	mov	sl, r0
 80190dc:	f7e7 f8e4 	bl	80002a8 <__aeabi_dsub>
 80190e0:	4652      	mov	r2, sl
 80190e2:	4606      	mov	r6, r0
 80190e4:	460f      	mov	r7, r1
 80190e6:	462b      	mov	r3, r5
 80190e8:	ec51 0b18 	vmov	r0, r1, d8
 80190ec:	f7e7 f8de 	bl	80002ac <__adddf3>
 80190f0:	4602      	mov	r2, r0
 80190f2:	460b      	mov	r3, r1
 80190f4:	2000      	movs	r0, #0
 80190f6:	49bd      	ldr	r1, [pc, #756]	; (80193ec <__ieee754_pow+0x754>)
 80190f8:	f7e7 fbb8 	bl	800086c <__aeabi_ddiv>
 80190fc:	ec41 0b19 	vmov	d9, r0, r1
 8019100:	4602      	mov	r2, r0
 8019102:	460b      	mov	r3, r1
 8019104:	4630      	mov	r0, r6
 8019106:	4639      	mov	r1, r7
 8019108:	f7e7 fa86 	bl	8000618 <__aeabi_dmul>
 801910c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8019110:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019114:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8019118:	2300      	movs	r3, #0
 801911a:	9304      	str	r3, [sp, #16]
 801911c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8019120:	46ab      	mov	fp, r5
 8019122:	106d      	asrs	r5, r5, #1
 8019124:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8019128:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801912c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8019130:	2200      	movs	r2, #0
 8019132:	4640      	mov	r0, r8
 8019134:	4649      	mov	r1, r9
 8019136:	4614      	mov	r4, r2
 8019138:	461d      	mov	r5, r3
 801913a:	f7e7 fa6d 	bl	8000618 <__aeabi_dmul>
 801913e:	4602      	mov	r2, r0
 8019140:	460b      	mov	r3, r1
 8019142:	4630      	mov	r0, r6
 8019144:	4639      	mov	r1, r7
 8019146:	f7e7 f8af 	bl	80002a8 <__aeabi_dsub>
 801914a:	ec53 2b18 	vmov	r2, r3, d8
 801914e:	4606      	mov	r6, r0
 8019150:	460f      	mov	r7, r1
 8019152:	4620      	mov	r0, r4
 8019154:	4629      	mov	r1, r5
 8019156:	f7e7 f8a7 	bl	80002a8 <__aeabi_dsub>
 801915a:	4602      	mov	r2, r0
 801915c:	460b      	mov	r3, r1
 801915e:	4650      	mov	r0, sl
 8019160:	4659      	mov	r1, fp
 8019162:	f7e7 f8a1 	bl	80002a8 <__aeabi_dsub>
 8019166:	4642      	mov	r2, r8
 8019168:	464b      	mov	r3, r9
 801916a:	f7e7 fa55 	bl	8000618 <__aeabi_dmul>
 801916e:	4602      	mov	r2, r0
 8019170:	460b      	mov	r3, r1
 8019172:	4630      	mov	r0, r6
 8019174:	4639      	mov	r1, r7
 8019176:	f7e7 f897 	bl	80002a8 <__aeabi_dsub>
 801917a:	ec53 2b19 	vmov	r2, r3, d9
 801917e:	f7e7 fa4b 	bl	8000618 <__aeabi_dmul>
 8019182:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019186:	ec41 0b18 	vmov	d8, r0, r1
 801918a:	4610      	mov	r0, r2
 801918c:	4619      	mov	r1, r3
 801918e:	f7e7 fa43 	bl	8000618 <__aeabi_dmul>
 8019192:	a37d      	add	r3, pc, #500	; (adr r3, 8019388 <__ieee754_pow+0x6f0>)
 8019194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019198:	4604      	mov	r4, r0
 801919a:	460d      	mov	r5, r1
 801919c:	f7e7 fa3c 	bl	8000618 <__aeabi_dmul>
 80191a0:	a37b      	add	r3, pc, #492	; (adr r3, 8019390 <__ieee754_pow+0x6f8>)
 80191a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191a6:	f7e7 f881 	bl	80002ac <__adddf3>
 80191aa:	4622      	mov	r2, r4
 80191ac:	462b      	mov	r3, r5
 80191ae:	f7e7 fa33 	bl	8000618 <__aeabi_dmul>
 80191b2:	a379      	add	r3, pc, #484	; (adr r3, 8019398 <__ieee754_pow+0x700>)
 80191b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191b8:	f7e7 f878 	bl	80002ac <__adddf3>
 80191bc:	4622      	mov	r2, r4
 80191be:	462b      	mov	r3, r5
 80191c0:	f7e7 fa2a 	bl	8000618 <__aeabi_dmul>
 80191c4:	a376      	add	r3, pc, #472	; (adr r3, 80193a0 <__ieee754_pow+0x708>)
 80191c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191ca:	f7e7 f86f 	bl	80002ac <__adddf3>
 80191ce:	4622      	mov	r2, r4
 80191d0:	462b      	mov	r3, r5
 80191d2:	f7e7 fa21 	bl	8000618 <__aeabi_dmul>
 80191d6:	a374      	add	r3, pc, #464	; (adr r3, 80193a8 <__ieee754_pow+0x710>)
 80191d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191dc:	f7e7 f866 	bl	80002ac <__adddf3>
 80191e0:	4622      	mov	r2, r4
 80191e2:	462b      	mov	r3, r5
 80191e4:	f7e7 fa18 	bl	8000618 <__aeabi_dmul>
 80191e8:	a371      	add	r3, pc, #452	; (adr r3, 80193b0 <__ieee754_pow+0x718>)
 80191ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191ee:	f7e7 f85d 	bl	80002ac <__adddf3>
 80191f2:	4622      	mov	r2, r4
 80191f4:	4606      	mov	r6, r0
 80191f6:	460f      	mov	r7, r1
 80191f8:	462b      	mov	r3, r5
 80191fa:	4620      	mov	r0, r4
 80191fc:	4629      	mov	r1, r5
 80191fe:	f7e7 fa0b 	bl	8000618 <__aeabi_dmul>
 8019202:	4602      	mov	r2, r0
 8019204:	460b      	mov	r3, r1
 8019206:	4630      	mov	r0, r6
 8019208:	4639      	mov	r1, r7
 801920a:	f7e7 fa05 	bl	8000618 <__aeabi_dmul>
 801920e:	4642      	mov	r2, r8
 8019210:	4604      	mov	r4, r0
 8019212:	460d      	mov	r5, r1
 8019214:	464b      	mov	r3, r9
 8019216:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801921a:	f7e7 f847 	bl	80002ac <__adddf3>
 801921e:	ec53 2b18 	vmov	r2, r3, d8
 8019222:	f7e7 f9f9 	bl	8000618 <__aeabi_dmul>
 8019226:	4622      	mov	r2, r4
 8019228:	462b      	mov	r3, r5
 801922a:	f7e7 f83f 	bl	80002ac <__adddf3>
 801922e:	4642      	mov	r2, r8
 8019230:	4682      	mov	sl, r0
 8019232:	468b      	mov	fp, r1
 8019234:	464b      	mov	r3, r9
 8019236:	4640      	mov	r0, r8
 8019238:	4649      	mov	r1, r9
 801923a:	f7e7 f9ed 	bl	8000618 <__aeabi_dmul>
 801923e:	4b6c      	ldr	r3, [pc, #432]	; (80193f0 <__ieee754_pow+0x758>)
 8019240:	2200      	movs	r2, #0
 8019242:	4606      	mov	r6, r0
 8019244:	460f      	mov	r7, r1
 8019246:	f7e7 f831 	bl	80002ac <__adddf3>
 801924a:	4652      	mov	r2, sl
 801924c:	465b      	mov	r3, fp
 801924e:	f7e7 f82d 	bl	80002ac <__adddf3>
 8019252:	9c04      	ldr	r4, [sp, #16]
 8019254:	460d      	mov	r5, r1
 8019256:	4622      	mov	r2, r4
 8019258:	460b      	mov	r3, r1
 801925a:	4640      	mov	r0, r8
 801925c:	4649      	mov	r1, r9
 801925e:	f7e7 f9db 	bl	8000618 <__aeabi_dmul>
 8019262:	4b63      	ldr	r3, [pc, #396]	; (80193f0 <__ieee754_pow+0x758>)
 8019264:	4680      	mov	r8, r0
 8019266:	4689      	mov	r9, r1
 8019268:	2200      	movs	r2, #0
 801926a:	4620      	mov	r0, r4
 801926c:	4629      	mov	r1, r5
 801926e:	f7e7 f81b 	bl	80002a8 <__aeabi_dsub>
 8019272:	4632      	mov	r2, r6
 8019274:	463b      	mov	r3, r7
 8019276:	f7e7 f817 	bl	80002a8 <__aeabi_dsub>
 801927a:	4602      	mov	r2, r0
 801927c:	460b      	mov	r3, r1
 801927e:	4650      	mov	r0, sl
 8019280:	4659      	mov	r1, fp
 8019282:	f7e7 f811 	bl	80002a8 <__aeabi_dsub>
 8019286:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801928a:	f7e7 f9c5 	bl	8000618 <__aeabi_dmul>
 801928e:	4622      	mov	r2, r4
 8019290:	4606      	mov	r6, r0
 8019292:	460f      	mov	r7, r1
 8019294:	462b      	mov	r3, r5
 8019296:	ec51 0b18 	vmov	r0, r1, d8
 801929a:	f7e7 f9bd 	bl	8000618 <__aeabi_dmul>
 801929e:	4602      	mov	r2, r0
 80192a0:	460b      	mov	r3, r1
 80192a2:	4630      	mov	r0, r6
 80192a4:	4639      	mov	r1, r7
 80192a6:	f7e7 f801 	bl	80002ac <__adddf3>
 80192aa:	4606      	mov	r6, r0
 80192ac:	460f      	mov	r7, r1
 80192ae:	4602      	mov	r2, r0
 80192b0:	460b      	mov	r3, r1
 80192b2:	4640      	mov	r0, r8
 80192b4:	4649      	mov	r1, r9
 80192b6:	f7e6 fff9 	bl	80002ac <__adddf3>
 80192ba:	9c04      	ldr	r4, [sp, #16]
 80192bc:	a33e      	add	r3, pc, #248	; (adr r3, 80193b8 <__ieee754_pow+0x720>)
 80192be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192c2:	4620      	mov	r0, r4
 80192c4:	460d      	mov	r5, r1
 80192c6:	f7e7 f9a7 	bl	8000618 <__aeabi_dmul>
 80192ca:	4642      	mov	r2, r8
 80192cc:	ec41 0b18 	vmov	d8, r0, r1
 80192d0:	464b      	mov	r3, r9
 80192d2:	4620      	mov	r0, r4
 80192d4:	4629      	mov	r1, r5
 80192d6:	f7e6 ffe7 	bl	80002a8 <__aeabi_dsub>
 80192da:	4602      	mov	r2, r0
 80192dc:	460b      	mov	r3, r1
 80192de:	4630      	mov	r0, r6
 80192e0:	4639      	mov	r1, r7
 80192e2:	f7e6 ffe1 	bl	80002a8 <__aeabi_dsub>
 80192e6:	a336      	add	r3, pc, #216	; (adr r3, 80193c0 <__ieee754_pow+0x728>)
 80192e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192ec:	f7e7 f994 	bl	8000618 <__aeabi_dmul>
 80192f0:	a335      	add	r3, pc, #212	; (adr r3, 80193c8 <__ieee754_pow+0x730>)
 80192f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192f6:	4606      	mov	r6, r0
 80192f8:	460f      	mov	r7, r1
 80192fa:	4620      	mov	r0, r4
 80192fc:	4629      	mov	r1, r5
 80192fe:	f7e7 f98b 	bl	8000618 <__aeabi_dmul>
 8019302:	4602      	mov	r2, r0
 8019304:	460b      	mov	r3, r1
 8019306:	4630      	mov	r0, r6
 8019308:	4639      	mov	r1, r7
 801930a:	f7e6 ffcf 	bl	80002ac <__adddf3>
 801930e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019310:	4b38      	ldr	r3, [pc, #224]	; (80193f4 <__ieee754_pow+0x75c>)
 8019312:	4413      	add	r3, r2
 8019314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019318:	f7e6 ffc8 	bl	80002ac <__adddf3>
 801931c:	4682      	mov	sl, r0
 801931e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019320:	468b      	mov	fp, r1
 8019322:	f7e7 f90f 	bl	8000544 <__aeabi_i2d>
 8019326:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019328:	4b33      	ldr	r3, [pc, #204]	; (80193f8 <__ieee754_pow+0x760>)
 801932a:	4413      	add	r3, r2
 801932c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019330:	4606      	mov	r6, r0
 8019332:	460f      	mov	r7, r1
 8019334:	4652      	mov	r2, sl
 8019336:	465b      	mov	r3, fp
 8019338:	ec51 0b18 	vmov	r0, r1, d8
 801933c:	f7e6 ffb6 	bl	80002ac <__adddf3>
 8019340:	4642      	mov	r2, r8
 8019342:	464b      	mov	r3, r9
 8019344:	f7e6 ffb2 	bl	80002ac <__adddf3>
 8019348:	4632      	mov	r2, r6
 801934a:	463b      	mov	r3, r7
 801934c:	f7e6 ffae 	bl	80002ac <__adddf3>
 8019350:	9c04      	ldr	r4, [sp, #16]
 8019352:	4632      	mov	r2, r6
 8019354:	463b      	mov	r3, r7
 8019356:	4620      	mov	r0, r4
 8019358:	460d      	mov	r5, r1
 801935a:	f7e6 ffa5 	bl	80002a8 <__aeabi_dsub>
 801935e:	4642      	mov	r2, r8
 8019360:	464b      	mov	r3, r9
 8019362:	f7e6 ffa1 	bl	80002a8 <__aeabi_dsub>
 8019366:	ec53 2b18 	vmov	r2, r3, d8
 801936a:	f7e6 ff9d 	bl	80002a8 <__aeabi_dsub>
 801936e:	4602      	mov	r2, r0
 8019370:	460b      	mov	r3, r1
 8019372:	4650      	mov	r0, sl
 8019374:	4659      	mov	r1, fp
 8019376:	e606      	b.n	8018f86 <__ieee754_pow+0x2ee>
 8019378:	2401      	movs	r4, #1
 801937a:	e6a0      	b.n	80190be <__ieee754_pow+0x426>
 801937c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80193d0 <__ieee754_pow+0x738>
 8019380:	e60d      	b.n	8018f9e <__ieee754_pow+0x306>
 8019382:	bf00      	nop
 8019384:	f3af 8000 	nop.w
 8019388:	4a454eef 	.word	0x4a454eef
 801938c:	3fca7e28 	.word	0x3fca7e28
 8019390:	93c9db65 	.word	0x93c9db65
 8019394:	3fcd864a 	.word	0x3fcd864a
 8019398:	a91d4101 	.word	0xa91d4101
 801939c:	3fd17460 	.word	0x3fd17460
 80193a0:	518f264d 	.word	0x518f264d
 80193a4:	3fd55555 	.word	0x3fd55555
 80193a8:	db6fabff 	.word	0xdb6fabff
 80193ac:	3fdb6db6 	.word	0x3fdb6db6
 80193b0:	33333303 	.word	0x33333303
 80193b4:	3fe33333 	.word	0x3fe33333
 80193b8:	e0000000 	.word	0xe0000000
 80193bc:	3feec709 	.word	0x3feec709
 80193c0:	dc3a03fd 	.word	0xdc3a03fd
 80193c4:	3feec709 	.word	0x3feec709
 80193c8:	145b01f5 	.word	0x145b01f5
 80193cc:	be3e2fe0 	.word	0xbe3e2fe0
 80193d0:	00000000 	.word	0x00000000
 80193d4:	3ff00000 	.word	0x3ff00000
 80193d8:	7ff00000 	.word	0x7ff00000
 80193dc:	43400000 	.word	0x43400000
 80193e0:	0003988e 	.word	0x0003988e
 80193e4:	000bb679 	.word	0x000bb679
 80193e8:	08020cd0 	.word	0x08020cd0
 80193ec:	3ff00000 	.word	0x3ff00000
 80193f0:	40080000 	.word	0x40080000
 80193f4:	08020cf0 	.word	0x08020cf0
 80193f8:	08020ce0 	.word	0x08020ce0
 80193fc:	a3b5      	add	r3, pc, #724	; (adr r3, 80196d4 <__ieee754_pow+0xa3c>)
 80193fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019402:	4640      	mov	r0, r8
 8019404:	4649      	mov	r1, r9
 8019406:	f7e6 ff51 	bl	80002ac <__adddf3>
 801940a:	4622      	mov	r2, r4
 801940c:	ec41 0b1a 	vmov	d10, r0, r1
 8019410:	462b      	mov	r3, r5
 8019412:	4630      	mov	r0, r6
 8019414:	4639      	mov	r1, r7
 8019416:	f7e6 ff47 	bl	80002a8 <__aeabi_dsub>
 801941a:	4602      	mov	r2, r0
 801941c:	460b      	mov	r3, r1
 801941e:	ec51 0b1a 	vmov	r0, r1, d10
 8019422:	f7e7 fb89 	bl	8000b38 <__aeabi_dcmpgt>
 8019426:	2800      	cmp	r0, #0
 8019428:	f47f adf8 	bne.w	801901c <__ieee754_pow+0x384>
 801942c:	4aa4      	ldr	r2, [pc, #656]	; (80196c0 <__ieee754_pow+0xa28>)
 801942e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8019432:	4293      	cmp	r3, r2
 8019434:	f340 810b 	ble.w	801964e <__ieee754_pow+0x9b6>
 8019438:	151b      	asrs	r3, r3, #20
 801943a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801943e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8019442:	fa4a f303 	asr.w	r3, sl, r3
 8019446:	445b      	add	r3, fp
 8019448:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801944c:	4e9d      	ldr	r6, [pc, #628]	; (80196c4 <__ieee754_pow+0xa2c>)
 801944e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8019452:	4116      	asrs	r6, r2
 8019454:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8019458:	2000      	movs	r0, #0
 801945a:	ea23 0106 	bic.w	r1, r3, r6
 801945e:	f1c2 0214 	rsb	r2, r2, #20
 8019462:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8019466:	fa4a fa02 	asr.w	sl, sl, r2
 801946a:	f1bb 0f00 	cmp.w	fp, #0
 801946e:	4602      	mov	r2, r0
 8019470:	460b      	mov	r3, r1
 8019472:	4620      	mov	r0, r4
 8019474:	4629      	mov	r1, r5
 8019476:	bfb8      	it	lt
 8019478:	f1ca 0a00 	rsblt	sl, sl, #0
 801947c:	f7e6 ff14 	bl	80002a8 <__aeabi_dsub>
 8019480:	ec41 0b19 	vmov	d9, r0, r1
 8019484:	4642      	mov	r2, r8
 8019486:	464b      	mov	r3, r9
 8019488:	ec51 0b19 	vmov	r0, r1, d9
 801948c:	f7e6 ff0e 	bl	80002ac <__adddf3>
 8019490:	2400      	movs	r4, #0
 8019492:	a379      	add	r3, pc, #484	; (adr r3, 8019678 <__ieee754_pow+0x9e0>)
 8019494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019498:	4620      	mov	r0, r4
 801949a:	460d      	mov	r5, r1
 801949c:	f7e7 f8bc 	bl	8000618 <__aeabi_dmul>
 80194a0:	ec53 2b19 	vmov	r2, r3, d9
 80194a4:	4606      	mov	r6, r0
 80194a6:	460f      	mov	r7, r1
 80194a8:	4620      	mov	r0, r4
 80194aa:	4629      	mov	r1, r5
 80194ac:	f7e6 fefc 	bl	80002a8 <__aeabi_dsub>
 80194b0:	4602      	mov	r2, r0
 80194b2:	460b      	mov	r3, r1
 80194b4:	4640      	mov	r0, r8
 80194b6:	4649      	mov	r1, r9
 80194b8:	f7e6 fef6 	bl	80002a8 <__aeabi_dsub>
 80194bc:	a370      	add	r3, pc, #448	; (adr r3, 8019680 <__ieee754_pow+0x9e8>)
 80194be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194c2:	f7e7 f8a9 	bl	8000618 <__aeabi_dmul>
 80194c6:	a370      	add	r3, pc, #448	; (adr r3, 8019688 <__ieee754_pow+0x9f0>)
 80194c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194cc:	4680      	mov	r8, r0
 80194ce:	4689      	mov	r9, r1
 80194d0:	4620      	mov	r0, r4
 80194d2:	4629      	mov	r1, r5
 80194d4:	f7e7 f8a0 	bl	8000618 <__aeabi_dmul>
 80194d8:	4602      	mov	r2, r0
 80194da:	460b      	mov	r3, r1
 80194dc:	4640      	mov	r0, r8
 80194de:	4649      	mov	r1, r9
 80194e0:	f7e6 fee4 	bl	80002ac <__adddf3>
 80194e4:	4604      	mov	r4, r0
 80194e6:	460d      	mov	r5, r1
 80194e8:	4602      	mov	r2, r0
 80194ea:	460b      	mov	r3, r1
 80194ec:	4630      	mov	r0, r6
 80194ee:	4639      	mov	r1, r7
 80194f0:	f7e6 fedc 	bl	80002ac <__adddf3>
 80194f4:	4632      	mov	r2, r6
 80194f6:	463b      	mov	r3, r7
 80194f8:	4680      	mov	r8, r0
 80194fa:	4689      	mov	r9, r1
 80194fc:	f7e6 fed4 	bl	80002a8 <__aeabi_dsub>
 8019500:	4602      	mov	r2, r0
 8019502:	460b      	mov	r3, r1
 8019504:	4620      	mov	r0, r4
 8019506:	4629      	mov	r1, r5
 8019508:	f7e6 fece 	bl	80002a8 <__aeabi_dsub>
 801950c:	4642      	mov	r2, r8
 801950e:	4606      	mov	r6, r0
 8019510:	460f      	mov	r7, r1
 8019512:	464b      	mov	r3, r9
 8019514:	4640      	mov	r0, r8
 8019516:	4649      	mov	r1, r9
 8019518:	f7e7 f87e 	bl	8000618 <__aeabi_dmul>
 801951c:	a35c      	add	r3, pc, #368	; (adr r3, 8019690 <__ieee754_pow+0x9f8>)
 801951e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019522:	4604      	mov	r4, r0
 8019524:	460d      	mov	r5, r1
 8019526:	f7e7 f877 	bl	8000618 <__aeabi_dmul>
 801952a:	a35b      	add	r3, pc, #364	; (adr r3, 8019698 <__ieee754_pow+0xa00>)
 801952c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019530:	f7e6 feba 	bl	80002a8 <__aeabi_dsub>
 8019534:	4622      	mov	r2, r4
 8019536:	462b      	mov	r3, r5
 8019538:	f7e7 f86e 	bl	8000618 <__aeabi_dmul>
 801953c:	a358      	add	r3, pc, #352	; (adr r3, 80196a0 <__ieee754_pow+0xa08>)
 801953e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019542:	f7e6 feb3 	bl	80002ac <__adddf3>
 8019546:	4622      	mov	r2, r4
 8019548:	462b      	mov	r3, r5
 801954a:	f7e7 f865 	bl	8000618 <__aeabi_dmul>
 801954e:	a356      	add	r3, pc, #344	; (adr r3, 80196a8 <__ieee754_pow+0xa10>)
 8019550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019554:	f7e6 fea8 	bl	80002a8 <__aeabi_dsub>
 8019558:	4622      	mov	r2, r4
 801955a:	462b      	mov	r3, r5
 801955c:	f7e7 f85c 	bl	8000618 <__aeabi_dmul>
 8019560:	a353      	add	r3, pc, #332	; (adr r3, 80196b0 <__ieee754_pow+0xa18>)
 8019562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019566:	f7e6 fea1 	bl	80002ac <__adddf3>
 801956a:	4622      	mov	r2, r4
 801956c:	462b      	mov	r3, r5
 801956e:	f7e7 f853 	bl	8000618 <__aeabi_dmul>
 8019572:	4602      	mov	r2, r0
 8019574:	460b      	mov	r3, r1
 8019576:	4640      	mov	r0, r8
 8019578:	4649      	mov	r1, r9
 801957a:	f7e6 fe95 	bl	80002a8 <__aeabi_dsub>
 801957e:	4604      	mov	r4, r0
 8019580:	460d      	mov	r5, r1
 8019582:	4602      	mov	r2, r0
 8019584:	460b      	mov	r3, r1
 8019586:	4640      	mov	r0, r8
 8019588:	4649      	mov	r1, r9
 801958a:	f7e7 f845 	bl	8000618 <__aeabi_dmul>
 801958e:	2200      	movs	r2, #0
 8019590:	ec41 0b19 	vmov	d9, r0, r1
 8019594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019598:	4620      	mov	r0, r4
 801959a:	4629      	mov	r1, r5
 801959c:	f7e6 fe84 	bl	80002a8 <__aeabi_dsub>
 80195a0:	4602      	mov	r2, r0
 80195a2:	460b      	mov	r3, r1
 80195a4:	ec51 0b19 	vmov	r0, r1, d9
 80195a8:	f7e7 f960 	bl	800086c <__aeabi_ddiv>
 80195ac:	4632      	mov	r2, r6
 80195ae:	4604      	mov	r4, r0
 80195b0:	460d      	mov	r5, r1
 80195b2:	463b      	mov	r3, r7
 80195b4:	4640      	mov	r0, r8
 80195b6:	4649      	mov	r1, r9
 80195b8:	f7e7 f82e 	bl	8000618 <__aeabi_dmul>
 80195bc:	4632      	mov	r2, r6
 80195be:	463b      	mov	r3, r7
 80195c0:	f7e6 fe74 	bl	80002ac <__adddf3>
 80195c4:	4602      	mov	r2, r0
 80195c6:	460b      	mov	r3, r1
 80195c8:	4620      	mov	r0, r4
 80195ca:	4629      	mov	r1, r5
 80195cc:	f7e6 fe6c 	bl	80002a8 <__aeabi_dsub>
 80195d0:	4642      	mov	r2, r8
 80195d2:	464b      	mov	r3, r9
 80195d4:	f7e6 fe68 	bl	80002a8 <__aeabi_dsub>
 80195d8:	460b      	mov	r3, r1
 80195da:	4602      	mov	r2, r0
 80195dc:	493a      	ldr	r1, [pc, #232]	; (80196c8 <__ieee754_pow+0xa30>)
 80195de:	2000      	movs	r0, #0
 80195e0:	f7e6 fe62 	bl	80002a8 <__aeabi_dsub>
 80195e4:	e9cd 0100 	strd	r0, r1, [sp]
 80195e8:	9b01      	ldr	r3, [sp, #4]
 80195ea:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80195ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80195f2:	da2f      	bge.n	8019654 <__ieee754_pow+0x9bc>
 80195f4:	4650      	mov	r0, sl
 80195f6:	ed9d 0b00 	vldr	d0, [sp]
 80195fa:	f000 f9cd 	bl	8019998 <scalbn>
 80195fe:	ec51 0b10 	vmov	r0, r1, d0
 8019602:	ec53 2b18 	vmov	r2, r3, d8
 8019606:	f7ff bbe0 	b.w	8018dca <__ieee754_pow+0x132>
 801960a:	4b30      	ldr	r3, [pc, #192]	; (80196cc <__ieee754_pow+0xa34>)
 801960c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8019610:	429e      	cmp	r6, r3
 8019612:	f77f af0b 	ble.w	801942c <__ieee754_pow+0x794>
 8019616:	4b2e      	ldr	r3, [pc, #184]	; (80196d0 <__ieee754_pow+0xa38>)
 8019618:	440b      	add	r3, r1
 801961a:	4303      	orrs	r3, r0
 801961c:	d00b      	beq.n	8019636 <__ieee754_pow+0x99e>
 801961e:	a326      	add	r3, pc, #152	; (adr r3, 80196b8 <__ieee754_pow+0xa20>)
 8019620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019624:	ec51 0b18 	vmov	r0, r1, d8
 8019628:	f7e6 fff6 	bl	8000618 <__aeabi_dmul>
 801962c:	a322      	add	r3, pc, #136	; (adr r3, 80196b8 <__ieee754_pow+0xa20>)
 801962e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019632:	f7ff bbca 	b.w	8018dca <__ieee754_pow+0x132>
 8019636:	4622      	mov	r2, r4
 8019638:	462b      	mov	r3, r5
 801963a:	f7e6 fe35 	bl	80002a8 <__aeabi_dsub>
 801963e:	4642      	mov	r2, r8
 8019640:	464b      	mov	r3, r9
 8019642:	f7e7 fa6f 	bl	8000b24 <__aeabi_dcmpge>
 8019646:	2800      	cmp	r0, #0
 8019648:	f43f aef0 	beq.w	801942c <__ieee754_pow+0x794>
 801964c:	e7e7      	b.n	801961e <__ieee754_pow+0x986>
 801964e:	f04f 0a00 	mov.w	sl, #0
 8019652:	e717      	b.n	8019484 <__ieee754_pow+0x7ec>
 8019654:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019658:	4619      	mov	r1, r3
 801965a:	e7d2      	b.n	8019602 <__ieee754_pow+0x96a>
 801965c:	491a      	ldr	r1, [pc, #104]	; (80196c8 <__ieee754_pow+0xa30>)
 801965e:	2000      	movs	r0, #0
 8019660:	f7ff bb9e 	b.w	8018da0 <__ieee754_pow+0x108>
 8019664:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019668:	f7ff bb9a 	b.w	8018da0 <__ieee754_pow+0x108>
 801966c:	9000      	str	r0, [sp, #0]
 801966e:	f7ff bb76 	b.w	8018d5e <__ieee754_pow+0xc6>
 8019672:	2100      	movs	r1, #0
 8019674:	f7ff bb60 	b.w	8018d38 <__ieee754_pow+0xa0>
 8019678:	00000000 	.word	0x00000000
 801967c:	3fe62e43 	.word	0x3fe62e43
 8019680:	fefa39ef 	.word	0xfefa39ef
 8019684:	3fe62e42 	.word	0x3fe62e42
 8019688:	0ca86c39 	.word	0x0ca86c39
 801968c:	be205c61 	.word	0xbe205c61
 8019690:	72bea4d0 	.word	0x72bea4d0
 8019694:	3e663769 	.word	0x3e663769
 8019698:	c5d26bf1 	.word	0xc5d26bf1
 801969c:	3ebbbd41 	.word	0x3ebbbd41
 80196a0:	af25de2c 	.word	0xaf25de2c
 80196a4:	3f11566a 	.word	0x3f11566a
 80196a8:	16bebd93 	.word	0x16bebd93
 80196ac:	3f66c16c 	.word	0x3f66c16c
 80196b0:	5555553e 	.word	0x5555553e
 80196b4:	3fc55555 	.word	0x3fc55555
 80196b8:	c2f8f359 	.word	0xc2f8f359
 80196bc:	01a56e1f 	.word	0x01a56e1f
 80196c0:	3fe00000 	.word	0x3fe00000
 80196c4:	000fffff 	.word	0x000fffff
 80196c8:	3ff00000 	.word	0x3ff00000
 80196cc:	4090cbff 	.word	0x4090cbff
 80196d0:	3f6f3400 	.word	0x3f6f3400
 80196d4:	652b82fe 	.word	0x652b82fe
 80196d8:	3c971547 	.word	0x3c971547

080196dc <__ieee754_sqrt>:
 80196dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196e0:	ec55 4b10 	vmov	r4, r5, d0
 80196e4:	4e56      	ldr	r6, [pc, #344]	; (8019840 <__ieee754_sqrt+0x164>)
 80196e6:	43ae      	bics	r6, r5
 80196e8:	ee10 0a10 	vmov	r0, s0
 80196ec:	ee10 3a10 	vmov	r3, s0
 80196f0:	4629      	mov	r1, r5
 80196f2:	462a      	mov	r2, r5
 80196f4:	d110      	bne.n	8019718 <__ieee754_sqrt+0x3c>
 80196f6:	ee10 2a10 	vmov	r2, s0
 80196fa:	462b      	mov	r3, r5
 80196fc:	f7e6 ff8c 	bl	8000618 <__aeabi_dmul>
 8019700:	4602      	mov	r2, r0
 8019702:	460b      	mov	r3, r1
 8019704:	4620      	mov	r0, r4
 8019706:	4629      	mov	r1, r5
 8019708:	f7e6 fdd0 	bl	80002ac <__adddf3>
 801970c:	4604      	mov	r4, r0
 801970e:	460d      	mov	r5, r1
 8019710:	ec45 4b10 	vmov	d0, r4, r5
 8019714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019718:	2d00      	cmp	r5, #0
 801971a:	dc10      	bgt.n	801973e <__ieee754_sqrt+0x62>
 801971c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019720:	4330      	orrs	r0, r6
 8019722:	d0f5      	beq.n	8019710 <__ieee754_sqrt+0x34>
 8019724:	b15d      	cbz	r5, 801973e <__ieee754_sqrt+0x62>
 8019726:	ee10 2a10 	vmov	r2, s0
 801972a:	462b      	mov	r3, r5
 801972c:	ee10 0a10 	vmov	r0, s0
 8019730:	f7e6 fdba 	bl	80002a8 <__aeabi_dsub>
 8019734:	4602      	mov	r2, r0
 8019736:	460b      	mov	r3, r1
 8019738:	f7e7 f898 	bl	800086c <__aeabi_ddiv>
 801973c:	e7e6      	b.n	801970c <__ieee754_sqrt+0x30>
 801973e:	1509      	asrs	r1, r1, #20
 8019740:	d076      	beq.n	8019830 <__ieee754_sqrt+0x154>
 8019742:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8019746:	07ce      	lsls	r6, r1, #31
 8019748:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801974c:	bf5e      	ittt	pl
 801974e:	0fda      	lsrpl	r2, r3, #31
 8019750:	005b      	lslpl	r3, r3, #1
 8019752:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8019756:	0fda      	lsrs	r2, r3, #31
 8019758:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801975c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8019760:	2000      	movs	r0, #0
 8019762:	106d      	asrs	r5, r5, #1
 8019764:	005b      	lsls	r3, r3, #1
 8019766:	f04f 0e16 	mov.w	lr, #22
 801976a:	4684      	mov	ip, r0
 801976c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8019770:	eb0c 0401 	add.w	r4, ip, r1
 8019774:	4294      	cmp	r4, r2
 8019776:	bfde      	ittt	le
 8019778:	1b12      	suble	r2, r2, r4
 801977a:	eb04 0c01 	addle.w	ip, r4, r1
 801977e:	1840      	addle	r0, r0, r1
 8019780:	0052      	lsls	r2, r2, #1
 8019782:	f1be 0e01 	subs.w	lr, lr, #1
 8019786:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801978a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801978e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019792:	d1ed      	bne.n	8019770 <__ieee754_sqrt+0x94>
 8019794:	4671      	mov	r1, lr
 8019796:	2720      	movs	r7, #32
 8019798:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801979c:	4562      	cmp	r2, ip
 801979e:	eb04 060e 	add.w	r6, r4, lr
 80197a2:	dc02      	bgt.n	80197aa <__ieee754_sqrt+0xce>
 80197a4:	d113      	bne.n	80197ce <__ieee754_sqrt+0xf2>
 80197a6:	429e      	cmp	r6, r3
 80197a8:	d811      	bhi.n	80197ce <__ieee754_sqrt+0xf2>
 80197aa:	2e00      	cmp	r6, #0
 80197ac:	eb06 0e04 	add.w	lr, r6, r4
 80197b0:	da43      	bge.n	801983a <__ieee754_sqrt+0x15e>
 80197b2:	f1be 0f00 	cmp.w	lr, #0
 80197b6:	db40      	blt.n	801983a <__ieee754_sqrt+0x15e>
 80197b8:	f10c 0801 	add.w	r8, ip, #1
 80197bc:	eba2 020c 	sub.w	r2, r2, ip
 80197c0:	429e      	cmp	r6, r3
 80197c2:	bf88      	it	hi
 80197c4:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 80197c8:	1b9b      	subs	r3, r3, r6
 80197ca:	4421      	add	r1, r4
 80197cc:	46c4      	mov	ip, r8
 80197ce:	0052      	lsls	r2, r2, #1
 80197d0:	3f01      	subs	r7, #1
 80197d2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80197d6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80197da:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80197de:	d1dd      	bne.n	801979c <__ieee754_sqrt+0xc0>
 80197e0:	4313      	orrs	r3, r2
 80197e2:	d006      	beq.n	80197f2 <__ieee754_sqrt+0x116>
 80197e4:	1c4c      	adds	r4, r1, #1
 80197e6:	bf13      	iteet	ne
 80197e8:	3101      	addne	r1, #1
 80197ea:	3001      	addeq	r0, #1
 80197ec:	4639      	moveq	r1, r7
 80197ee:	f021 0101 	bicne.w	r1, r1, #1
 80197f2:	1043      	asrs	r3, r0, #1
 80197f4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80197f8:	0849      	lsrs	r1, r1, #1
 80197fa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80197fe:	07c2      	lsls	r2, r0, #31
 8019800:	bf48      	it	mi
 8019802:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8019806:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801980a:	460c      	mov	r4, r1
 801980c:	463d      	mov	r5, r7
 801980e:	e77f      	b.n	8019710 <__ieee754_sqrt+0x34>
 8019810:	0ada      	lsrs	r2, r3, #11
 8019812:	3815      	subs	r0, #21
 8019814:	055b      	lsls	r3, r3, #21
 8019816:	2a00      	cmp	r2, #0
 8019818:	d0fa      	beq.n	8019810 <__ieee754_sqrt+0x134>
 801981a:	02d7      	lsls	r7, r2, #11
 801981c:	d50a      	bpl.n	8019834 <__ieee754_sqrt+0x158>
 801981e:	f1c1 0420 	rsb	r4, r1, #32
 8019822:	fa23 f404 	lsr.w	r4, r3, r4
 8019826:	1e4d      	subs	r5, r1, #1
 8019828:	408b      	lsls	r3, r1
 801982a:	4322      	orrs	r2, r4
 801982c:	1b41      	subs	r1, r0, r5
 801982e:	e788      	b.n	8019742 <__ieee754_sqrt+0x66>
 8019830:	4608      	mov	r0, r1
 8019832:	e7f0      	b.n	8019816 <__ieee754_sqrt+0x13a>
 8019834:	0052      	lsls	r2, r2, #1
 8019836:	3101      	adds	r1, #1
 8019838:	e7ef      	b.n	801981a <__ieee754_sqrt+0x13e>
 801983a:	46e0      	mov	r8, ip
 801983c:	e7be      	b.n	80197bc <__ieee754_sqrt+0xe0>
 801983e:	bf00      	nop
 8019840:	7ff00000 	.word	0x7ff00000

08019844 <fabs>:
 8019844:	ec51 0b10 	vmov	r0, r1, d0
 8019848:	ee10 2a10 	vmov	r2, s0
 801984c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019850:	ec43 2b10 	vmov	d0, r2, r3
 8019854:	4770      	bx	lr

08019856 <finite>:
 8019856:	b082      	sub	sp, #8
 8019858:	ed8d 0b00 	vstr	d0, [sp]
 801985c:	9801      	ldr	r0, [sp, #4]
 801985e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8019862:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8019866:	0fc0      	lsrs	r0, r0, #31
 8019868:	b002      	add	sp, #8
 801986a:	4770      	bx	lr
 801986c:	0000      	movs	r0, r0
	...

08019870 <nan>:
 8019870:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019878 <nan+0x8>
 8019874:	4770      	bx	lr
 8019876:	bf00      	nop
 8019878:	00000000 	.word	0x00000000
 801987c:	7ff80000 	.word	0x7ff80000

08019880 <rint>:
 8019880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019882:	ec51 0b10 	vmov	r0, r1, d0
 8019886:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801988a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801988e:	2e13      	cmp	r6, #19
 8019890:	ee10 4a10 	vmov	r4, s0
 8019894:	460b      	mov	r3, r1
 8019896:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801989a:	dc58      	bgt.n	801994e <rint+0xce>
 801989c:	2e00      	cmp	r6, #0
 801989e:	da2b      	bge.n	80198f8 <rint+0x78>
 80198a0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80198a4:	4302      	orrs	r2, r0
 80198a6:	d023      	beq.n	80198f0 <rint+0x70>
 80198a8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80198ac:	4302      	orrs	r2, r0
 80198ae:	4254      	negs	r4, r2
 80198b0:	4314      	orrs	r4, r2
 80198b2:	0c4b      	lsrs	r3, r1, #17
 80198b4:	0b24      	lsrs	r4, r4, #12
 80198b6:	045b      	lsls	r3, r3, #17
 80198b8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80198bc:	ea44 0103 	orr.w	r1, r4, r3
 80198c0:	4b32      	ldr	r3, [pc, #200]	; (801998c <rint+0x10c>)
 80198c2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80198c6:	e9d3 6700 	ldrd	r6, r7, [r3]
 80198ca:	4602      	mov	r2, r0
 80198cc:	460b      	mov	r3, r1
 80198ce:	4630      	mov	r0, r6
 80198d0:	4639      	mov	r1, r7
 80198d2:	f7e6 fceb 	bl	80002ac <__adddf3>
 80198d6:	e9cd 0100 	strd	r0, r1, [sp]
 80198da:	463b      	mov	r3, r7
 80198dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80198e0:	4632      	mov	r2, r6
 80198e2:	f7e6 fce1 	bl	80002a8 <__aeabi_dsub>
 80198e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80198ea:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80198ee:	4639      	mov	r1, r7
 80198f0:	ec41 0b10 	vmov	d0, r0, r1
 80198f4:	b003      	add	sp, #12
 80198f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80198f8:	4a25      	ldr	r2, [pc, #148]	; (8019990 <rint+0x110>)
 80198fa:	4132      	asrs	r2, r6
 80198fc:	ea01 0702 	and.w	r7, r1, r2
 8019900:	4307      	orrs	r7, r0
 8019902:	d0f5      	beq.n	80198f0 <rint+0x70>
 8019904:	0851      	lsrs	r1, r2, #1
 8019906:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801990a:	4314      	orrs	r4, r2
 801990c:	d00c      	beq.n	8019928 <rint+0xa8>
 801990e:	ea23 0201 	bic.w	r2, r3, r1
 8019912:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8019916:	2e13      	cmp	r6, #19
 8019918:	fa43 f606 	asr.w	r6, r3, r6
 801991c:	bf0c      	ite	eq
 801991e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8019922:	2400      	movne	r4, #0
 8019924:	ea42 0306 	orr.w	r3, r2, r6
 8019928:	4918      	ldr	r1, [pc, #96]	; (801998c <rint+0x10c>)
 801992a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801992e:	4622      	mov	r2, r4
 8019930:	e9d5 4500 	ldrd	r4, r5, [r5]
 8019934:	4620      	mov	r0, r4
 8019936:	4629      	mov	r1, r5
 8019938:	f7e6 fcb8 	bl	80002ac <__adddf3>
 801993c:	e9cd 0100 	strd	r0, r1, [sp]
 8019940:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019944:	4622      	mov	r2, r4
 8019946:	462b      	mov	r3, r5
 8019948:	f7e6 fcae 	bl	80002a8 <__aeabi_dsub>
 801994c:	e7d0      	b.n	80198f0 <rint+0x70>
 801994e:	2e33      	cmp	r6, #51	; 0x33
 8019950:	dd07      	ble.n	8019962 <rint+0xe2>
 8019952:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8019956:	d1cb      	bne.n	80198f0 <rint+0x70>
 8019958:	ee10 2a10 	vmov	r2, s0
 801995c:	f7e6 fca6 	bl	80002ac <__adddf3>
 8019960:	e7c6      	b.n	80198f0 <rint+0x70>
 8019962:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8019966:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801996a:	40d6      	lsrs	r6, r2
 801996c:	4230      	tst	r0, r6
 801996e:	d0bf      	beq.n	80198f0 <rint+0x70>
 8019970:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8019974:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8019978:	bf1f      	itttt	ne
 801997a:	ea24 0101 	bicne.w	r1, r4, r1
 801997e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8019982:	fa44 f202 	asrne.w	r2, r4, r2
 8019986:	ea41 0402 	orrne.w	r4, r1, r2
 801998a:	e7cd      	b.n	8019928 <rint+0xa8>
 801998c:	08020d00 	.word	0x08020d00
 8019990:	000fffff 	.word	0x000fffff
 8019994:	00000000 	.word	0x00000000

08019998 <scalbn>:
 8019998:	b570      	push	{r4, r5, r6, lr}
 801999a:	ec55 4b10 	vmov	r4, r5, d0
 801999e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80199a2:	4606      	mov	r6, r0
 80199a4:	462b      	mov	r3, r5
 80199a6:	b99a      	cbnz	r2, 80199d0 <scalbn+0x38>
 80199a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80199ac:	4323      	orrs	r3, r4
 80199ae:	d036      	beq.n	8019a1e <scalbn+0x86>
 80199b0:	4b39      	ldr	r3, [pc, #228]	; (8019a98 <scalbn+0x100>)
 80199b2:	4629      	mov	r1, r5
 80199b4:	ee10 0a10 	vmov	r0, s0
 80199b8:	2200      	movs	r2, #0
 80199ba:	f7e6 fe2d 	bl	8000618 <__aeabi_dmul>
 80199be:	4b37      	ldr	r3, [pc, #220]	; (8019a9c <scalbn+0x104>)
 80199c0:	429e      	cmp	r6, r3
 80199c2:	4604      	mov	r4, r0
 80199c4:	460d      	mov	r5, r1
 80199c6:	da10      	bge.n	80199ea <scalbn+0x52>
 80199c8:	a32b      	add	r3, pc, #172	; (adr r3, 8019a78 <scalbn+0xe0>)
 80199ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199ce:	e03a      	b.n	8019a46 <scalbn+0xae>
 80199d0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80199d4:	428a      	cmp	r2, r1
 80199d6:	d10c      	bne.n	80199f2 <scalbn+0x5a>
 80199d8:	ee10 2a10 	vmov	r2, s0
 80199dc:	4620      	mov	r0, r4
 80199de:	4629      	mov	r1, r5
 80199e0:	f7e6 fc64 	bl	80002ac <__adddf3>
 80199e4:	4604      	mov	r4, r0
 80199e6:	460d      	mov	r5, r1
 80199e8:	e019      	b.n	8019a1e <scalbn+0x86>
 80199ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80199ee:	460b      	mov	r3, r1
 80199f0:	3a36      	subs	r2, #54	; 0x36
 80199f2:	4432      	add	r2, r6
 80199f4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80199f8:	428a      	cmp	r2, r1
 80199fa:	dd08      	ble.n	8019a0e <scalbn+0x76>
 80199fc:	2d00      	cmp	r5, #0
 80199fe:	a120      	add	r1, pc, #128	; (adr r1, 8019a80 <scalbn+0xe8>)
 8019a00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019a04:	da1c      	bge.n	8019a40 <scalbn+0xa8>
 8019a06:	a120      	add	r1, pc, #128	; (adr r1, 8019a88 <scalbn+0xf0>)
 8019a08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019a0c:	e018      	b.n	8019a40 <scalbn+0xa8>
 8019a0e:	2a00      	cmp	r2, #0
 8019a10:	dd08      	ble.n	8019a24 <scalbn+0x8c>
 8019a12:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019a16:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019a1a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8019a1e:	ec45 4b10 	vmov	d0, r4, r5
 8019a22:	bd70      	pop	{r4, r5, r6, pc}
 8019a24:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8019a28:	da19      	bge.n	8019a5e <scalbn+0xc6>
 8019a2a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8019a2e:	429e      	cmp	r6, r3
 8019a30:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8019a34:	dd0a      	ble.n	8019a4c <scalbn+0xb4>
 8019a36:	a112      	add	r1, pc, #72	; (adr r1, 8019a80 <scalbn+0xe8>)
 8019a38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019a3c:	2b00      	cmp	r3, #0
 8019a3e:	d1e2      	bne.n	8019a06 <scalbn+0x6e>
 8019a40:	a30f      	add	r3, pc, #60	; (adr r3, 8019a80 <scalbn+0xe8>)
 8019a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a46:	f7e6 fde7 	bl	8000618 <__aeabi_dmul>
 8019a4a:	e7cb      	b.n	80199e4 <scalbn+0x4c>
 8019a4c:	a10a      	add	r1, pc, #40	; (adr r1, 8019a78 <scalbn+0xe0>)
 8019a4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019a52:	2b00      	cmp	r3, #0
 8019a54:	d0b8      	beq.n	80199c8 <scalbn+0x30>
 8019a56:	a10e      	add	r1, pc, #56	; (adr r1, 8019a90 <scalbn+0xf8>)
 8019a58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019a5c:	e7b4      	b.n	80199c8 <scalbn+0x30>
 8019a5e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019a62:	3236      	adds	r2, #54	; 0x36
 8019a64:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019a68:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8019a6c:	4620      	mov	r0, r4
 8019a6e:	4b0c      	ldr	r3, [pc, #48]	; (8019aa0 <scalbn+0x108>)
 8019a70:	2200      	movs	r2, #0
 8019a72:	e7e8      	b.n	8019a46 <scalbn+0xae>
 8019a74:	f3af 8000 	nop.w
 8019a78:	c2f8f359 	.word	0xc2f8f359
 8019a7c:	01a56e1f 	.word	0x01a56e1f
 8019a80:	8800759c 	.word	0x8800759c
 8019a84:	7e37e43c 	.word	0x7e37e43c
 8019a88:	8800759c 	.word	0x8800759c
 8019a8c:	fe37e43c 	.word	0xfe37e43c
 8019a90:	c2f8f359 	.word	0xc2f8f359
 8019a94:	81a56e1f 	.word	0x81a56e1f
 8019a98:	43500000 	.word	0x43500000
 8019a9c:	ffff3cb0 	.word	0xffff3cb0
 8019aa0:	3c900000 	.word	0x3c900000

08019aa4 <abort>:
 8019aa4:	b508      	push	{r3, lr}
 8019aa6:	2006      	movs	r0, #6
 8019aa8:	f001 f9c2 	bl	801ae30 <raise>
 8019aac:	2001      	movs	r0, #1
 8019aae:	f7e9 fb65 	bl	800317c <_exit>
	...

08019ab4 <__errno>:
 8019ab4:	4b01      	ldr	r3, [pc, #4]	; (8019abc <__errno+0x8>)
 8019ab6:	6818      	ldr	r0, [r3, #0]
 8019ab8:	4770      	bx	lr
 8019aba:	bf00      	nop
 8019abc:	200001d8 	.word	0x200001d8

08019ac0 <std>:
 8019ac0:	2300      	movs	r3, #0
 8019ac2:	b510      	push	{r4, lr}
 8019ac4:	4604      	mov	r4, r0
 8019ac6:	e9c0 3300 	strd	r3, r3, [r0]
 8019aca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019ace:	6083      	str	r3, [r0, #8]
 8019ad0:	8181      	strh	r1, [r0, #12]
 8019ad2:	6643      	str	r3, [r0, #100]	; 0x64
 8019ad4:	81c2      	strh	r2, [r0, #14]
 8019ad6:	6183      	str	r3, [r0, #24]
 8019ad8:	4619      	mov	r1, r3
 8019ada:	2208      	movs	r2, #8
 8019adc:	305c      	adds	r0, #92	; 0x5c
 8019ade:	f000 f945 	bl	8019d6c <memset>
 8019ae2:	4b05      	ldr	r3, [pc, #20]	; (8019af8 <std+0x38>)
 8019ae4:	6263      	str	r3, [r4, #36]	; 0x24
 8019ae6:	4b05      	ldr	r3, [pc, #20]	; (8019afc <std+0x3c>)
 8019ae8:	62a3      	str	r3, [r4, #40]	; 0x28
 8019aea:	4b05      	ldr	r3, [pc, #20]	; (8019b00 <std+0x40>)
 8019aec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019aee:	4b05      	ldr	r3, [pc, #20]	; (8019b04 <std+0x44>)
 8019af0:	6224      	str	r4, [r4, #32]
 8019af2:	6323      	str	r3, [r4, #48]	; 0x30
 8019af4:	bd10      	pop	{r4, pc}
 8019af6:	bf00      	nop
 8019af8:	0801af01 	.word	0x0801af01
 8019afc:	0801af27 	.word	0x0801af27
 8019b00:	0801af5f 	.word	0x0801af5f
 8019b04:	0801af83 	.word	0x0801af83

08019b08 <_cleanup_r>:
 8019b08:	4901      	ldr	r1, [pc, #4]	; (8019b10 <_cleanup_r+0x8>)
 8019b0a:	f000 b8af 	b.w	8019c6c <_fwalk_reent>
 8019b0e:	bf00      	nop
 8019b10:	0801cea5 	.word	0x0801cea5

08019b14 <__sfmoreglue>:
 8019b14:	b570      	push	{r4, r5, r6, lr}
 8019b16:	1e4a      	subs	r2, r1, #1
 8019b18:	2568      	movs	r5, #104	; 0x68
 8019b1a:	4355      	muls	r5, r2
 8019b1c:	460e      	mov	r6, r1
 8019b1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019b22:	f000 f97b 	bl	8019e1c <_malloc_r>
 8019b26:	4604      	mov	r4, r0
 8019b28:	b140      	cbz	r0, 8019b3c <__sfmoreglue+0x28>
 8019b2a:	2100      	movs	r1, #0
 8019b2c:	e9c0 1600 	strd	r1, r6, [r0]
 8019b30:	300c      	adds	r0, #12
 8019b32:	60a0      	str	r0, [r4, #8]
 8019b34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019b38:	f000 f918 	bl	8019d6c <memset>
 8019b3c:	4620      	mov	r0, r4
 8019b3e:	bd70      	pop	{r4, r5, r6, pc}

08019b40 <__sfp_lock_acquire>:
 8019b40:	4801      	ldr	r0, [pc, #4]	; (8019b48 <__sfp_lock_acquire+0x8>)
 8019b42:	f000 b8d8 	b.w	8019cf6 <__retarget_lock_acquire_recursive>
 8019b46:	bf00      	nop
 8019b48:	20008f94 	.word	0x20008f94

08019b4c <__sfp_lock_release>:
 8019b4c:	4801      	ldr	r0, [pc, #4]	; (8019b54 <__sfp_lock_release+0x8>)
 8019b4e:	f000 b8d3 	b.w	8019cf8 <__retarget_lock_release_recursive>
 8019b52:	bf00      	nop
 8019b54:	20008f94 	.word	0x20008f94

08019b58 <__sinit_lock_acquire>:
 8019b58:	4801      	ldr	r0, [pc, #4]	; (8019b60 <__sinit_lock_acquire+0x8>)
 8019b5a:	f000 b8cc 	b.w	8019cf6 <__retarget_lock_acquire_recursive>
 8019b5e:	bf00      	nop
 8019b60:	20008f8f 	.word	0x20008f8f

08019b64 <__sinit_lock_release>:
 8019b64:	4801      	ldr	r0, [pc, #4]	; (8019b6c <__sinit_lock_release+0x8>)
 8019b66:	f000 b8c7 	b.w	8019cf8 <__retarget_lock_release_recursive>
 8019b6a:	bf00      	nop
 8019b6c:	20008f8f 	.word	0x20008f8f

08019b70 <__sinit>:
 8019b70:	b510      	push	{r4, lr}
 8019b72:	4604      	mov	r4, r0
 8019b74:	f7ff fff0 	bl	8019b58 <__sinit_lock_acquire>
 8019b78:	69a3      	ldr	r3, [r4, #24]
 8019b7a:	b11b      	cbz	r3, 8019b84 <__sinit+0x14>
 8019b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019b80:	f7ff bff0 	b.w	8019b64 <__sinit_lock_release>
 8019b84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019b88:	6523      	str	r3, [r4, #80]	; 0x50
 8019b8a:	4b13      	ldr	r3, [pc, #76]	; (8019bd8 <__sinit+0x68>)
 8019b8c:	4a13      	ldr	r2, [pc, #76]	; (8019bdc <__sinit+0x6c>)
 8019b8e:	681b      	ldr	r3, [r3, #0]
 8019b90:	62a2      	str	r2, [r4, #40]	; 0x28
 8019b92:	42a3      	cmp	r3, r4
 8019b94:	bf04      	itt	eq
 8019b96:	2301      	moveq	r3, #1
 8019b98:	61a3      	streq	r3, [r4, #24]
 8019b9a:	4620      	mov	r0, r4
 8019b9c:	f000 f820 	bl	8019be0 <__sfp>
 8019ba0:	6060      	str	r0, [r4, #4]
 8019ba2:	4620      	mov	r0, r4
 8019ba4:	f000 f81c 	bl	8019be0 <__sfp>
 8019ba8:	60a0      	str	r0, [r4, #8]
 8019baa:	4620      	mov	r0, r4
 8019bac:	f000 f818 	bl	8019be0 <__sfp>
 8019bb0:	2200      	movs	r2, #0
 8019bb2:	60e0      	str	r0, [r4, #12]
 8019bb4:	2104      	movs	r1, #4
 8019bb6:	6860      	ldr	r0, [r4, #4]
 8019bb8:	f7ff ff82 	bl	8019ac0 <std>
 8019bbc:	68a0      	ldr	r0, [r4, #8]
 8019bbe:	2201      	movs	r2, #1
 8019bc0:	2109      	movs	r1, #9
 8019bc2:	f7ff ff7d 	bl	8019ac0 <std>
 8019bc6:	68e0      	ldr	r0, [r4, #12]
 8019bc8:	2202      	movs	r2, #2
 8019bca:	2112      	movs	r1, #18
 8019bcc:	f7ff ff78 	bl	8019ac0 <std>
 8019bd0:	2301      	movs	r3, #1
 8019bd2:	61a3      	str	r3, [r4, #24]
 8019bd4:	e7d2      	b.n	8019b7c <__sinit+0xc>
 8019bd6:	bf00      	nop
 8019bd8:	08020e74 	.word	0x08020e74
 8019bdc:	08019b09 	.word	0x08019b09

08019be0 <__sfp>:
 8019be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019be2:	4607      	mov	r7, r0
 8019be4:	f7ff ffac 	bl	8019b40 <__sfp_lock_acquire>
 8019be8:	4b1e      	ldr	r3, [pc, #120]	; (8019c64 <__sfp+0x84>)
 8019bea:	681e      	ldr	r6, [r3, #0]
 8019bec:	69b3      	ldr	r3, [r6, #24]
 8019bee:	b913      	cbnz	r3, 8019bf6 <__sfp+0x16>
 8019bf0:	4630      	mov	r0, r6
 8019bf2:	f7ff ffbd 	bl	8019b70 <__sinit>
 8019bf6:	3648      	adds	r6, #72	; 0x48
 8019bf8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019bfc:	3b01      	subs	r3, #1
 8019bfe:	d503      	bpl.n	8019c08 <__sfp+0x28>
 8019c00:	6833      	ldr	r3, [r6, #0]
 8019c02:	b30b      	cbz	r3, 8019c48 <__sfp+0x68>
 8019c04:	6836      	ldr	r6, [r6, #0]
 8019c06:	e7f7      	b.n	8019bf8 <__sfp+0x18>
 8019c08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019c0c:	b9d5      	cbnz	r5, 8019c44 <__sfp+0x64>
 8019c0e:	4b16      	ldr	r3, [pc, #88]	; (8019c68 <__sfp+0x88>)
 8019c10:	60e3      	str	r3, [r4, #12]
 8019c12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019c16:	6665      	str	r5, [r4, #100]	; 0x64
 8019c18:	f000 f86c 	bl	8019cf4 <__retarget_lock_init_recursive>
 8019c1c:	f7ff ff96 	bl	8019b4c <__sfp_lock_release>
 8019c20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019c24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019c28:	6025      	str	r5, [r4, #0]
 8019c2a:	61a5      	str	r5, [r4, #24]
 8019c2c:	2208      	movs	r2, #8
 8019c2e:	4629      	mov	r1, r5
 8019c30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019c34:	f000 f89a 	bl	8019d6c <memset>
 8019c38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019c3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019c40:	4620      	mov	r0, r4
 8019c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c44:	3468      	adds	r4, #104	; 0x68
 8019c46:	e7d9      	b.n	8019bfc <__sfp+0x1c>
 8019c48:	2104      	movs	r1, #4
 8019c4a:	4638      	mov	r0, r7
 8019c4c:	f7ff ff62 	bl	8019b14 <__sfmoreglue>
 8019c50:	4604      	mov	r4, r0
 8019c52:	6030      	str	r0, [r6, #0]
 8019c54:	2800      	cmp	r0, #0
 8019c56:	d1d5      	bne.n	8019c04 <__sfp+0x24>
 8019c58:	f7ff ff78 	bl	8019b4c <__sfp_lock_release>
 8019c5c:	230c      	movs	r3, #12
 8019c5e:	603b      	str	r3, [r7, #0]
 8019c60:	e7ee      	b.n	8019c40 <__sfp+0x60>
 8019c62:	bf00      	nop
 8019c64:	08020e74 	.word	0x08020e74
 8019c68:	ffff0001 	.word	0xffff0001

08019c6c <_fwalk_reent>:
 8019c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019c70:	4606      	mov	r6, r0
 8019c72:	4688      	mov	r8, r1
 8019c74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019c78:	2700      	movs	r7, #0
 8019c7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019c7e:	f1b9 0901 	subs.w	r9, r9, #1
 8019c82:	d505      	bpl.n	8019c90 <_fwalk_reent+0x24>
 8019c84:	6824      	ldr	r4, [r4, #0]
 8019c86:	2c00      	cmp	r4, #0
 8019c88:	d1f7      	bne.n	8019c7a <_fwalk_reent+0xe>
 8019c8a:	4638      	mov	r0, r7
 8019c8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019c90:	89ab      	ldrh	r3, [r5, #12]
 8019c92:	2b01      	cmp	r3, #1
 8019c94:	d907      	bls.n	8019ca6 <_fwalk_reent+0x3a>
 8019c96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019c9a:	3301      	adds	r3, #1
 8019c9c:	d003      	beq.n	8019ca6 <_fwalk_reent+0x3a>
 8019c9e:	4629      	mov	r1, r5
 8019ca0:	4630      	mov	r0, r6
 8019ca2:	47c0      	blx	r8
 8019ca4:	4307      	orrs	r7, r0
 8019ca6:	3568      	adds	r5, #104	; 0x68
 8019ca8:	e7e9      	b.n	8019c7e <_fwalk_reent+0x12>
	...

08019cac <__libc_init_array>:
 8019cac:	b570      	push	{r4, r5, r6, lr}
 8019cae:	4d0d      	ldr	r5, [pc, #52]	; (8019ce4 <__libc_init_array+0x38>)
 8019cb0:	4c0d      	ldr	r4, [pc, #52]	; (8019ce8 <__libc_init_array+0x3c>)
 8019cb2:	1b64      	subs	r4, r4, r5
 8019cb4:	10a4      	asrs	r4, r4, #2
 8019cb6:	2600      	movs	r6, #0
 8019cb8:	42a6      	cmp	r6, r4
 8019cba:	d109      	bne.n	8019cd0 <__libc_init_array+0x24>
 8019cbc:	4d0b      	ldr	r5, [pc, #44]	; (8019cec <__libc_init_array+0x40>)
 8019cbe:	4c0c      	ldr	r4, [pc, #48]	; (8019cf0 <__libc_init_array+0x44>)
 8019cc0:	f005 f8c8 	bl	801ee54 <_init>
 8019cc4:	1b64      	subs	r4, r4, r5
 8019cc6:	10a4      	asrs	r4, r4, #2
 8019cc8:	2600      	movs	r6, #0
 8019cca:	42a6      	cmp	r6, r4
 8019ccc:	d105      	bne.n	8019cda <__libc_init_array+0x2e>
 8019cce:	bd70      	pop	{r4, r5, r6, pc}
 8019cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8019cd4:	4798      	blx	r3
 8019cd6:	3601      	adds	r6, #1
 8019cd8:	e7ee      	b.n	8019cb8 <__libc_init_array+0xc>
 8019cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8019cde:	4798      	blx	r3
 8019ce0:	3601      	adds	r6, #1
 8019ce2:	e7f2      	b.n	8019cca <__libc_init_array+0x1e>
 8019ce4:	080211e0 	.word	0x080211e0
 8019ce8:	080211e0 	.word	0x080211e0
 8019cec:	080211e0 	.word	0x080211e0
 8019cf0:	080211e8 	.word	0x080211e8

08019cf4 <__retarget_lock_init_recursive>:
 8019cf4:	4770      	bx	lr

08019cf6 <__retarget_lock_acquire_recursive>:
 8019cf6:	4770      	bx	lr

08019cf8 <__retarget_lock_release_recursive>:
 8019cf8:	4770      	bx	lr
	...

08019cfc <malloc>:
 8019cfc:	4b02      	ldr	r3, [pc, #8]	; (8019d08 <malloc+0xc>)
 8019cfe:	4601      	mov	r1, r0
 8019d00:	6818      	ldr	r0, [r3, #0]
 8019d02:	f000 b88b 	b.w	8019e1c <_malloc_r>
 8019d06:	bf00      	nop
 8019d08:	200001d8 	.word	0x200001d8

08019d0c <free>:
 8019d0c:	4b02      	ldr	r3, [pc, #8]	; (8019d18 <free+0xc>)
 8019d0e:	4601      	mov	r1, r0
 8019d10:	6818      	ldr	r0, [r3, #0]
 8019d12:	f000 b833 	b.w	8019d7c <_free_r>
 8019d16:	bf00      	nop
 8019d18:	200001d8 	.word	0x200001d8

08019d1c <memcpy>:
 8019d1c:	440a      	add	r2, r1
 8019d1e:	4291      	cmp	r1, r2
 8019d20:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8019d24:	d100      	bne.n	8019d28 <memcpy+0xc>
 8019d26:	4770      	bx	lr
 8019d28:	b510      	push	{r4, lr}
 8019d2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019d2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019d32:	4291      	cmp	r1, r2
 8019d34:	d1f9      	bne.n	8019d2a <memcpy+0xe>
 8019d36:	bd10      	pop	{r4, pc}

08019d38 <memmove>:
 8019d38:	4288      	cmp	r0, r1
 8019d3a:	b510      	push	{r4, lr}
 8019d3c:	eb01 0402 	add.w	r4, r1, r2
 8019d40:	d902      	bls.n	8019d48 <memmove+0x10>
 8019d42:	4284      	cmp	r4, r0
 8019d44:	4623      	mov	r3, r4
 8019d46:	d807      	bhi.n	8019d58 <memmove+0x20>
 8019d48:	1e43      	subs	r3, r0, #1
 8019d4a:	42a1      	cmp	r1, r4
 8019d4c:	d008      	beq.n	8019d60 <memmove+0x28>
 8019d4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019d52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019d56:	e7f8      	b.n	8019d4a <memmove+0x12>
 8019d58:	4402      	add	r2, r0
 8019d5a:	4601      	mov	r1, r0
 8019d5c:	428a      	cmp	r2, r1
 8019d5e:	d100      	bne.n	8019d62 <memmove+0x2a>
 8019d60:	bd10      	pop	{r4, pc}
 8019d62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019d66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019d6a:	e7f7      	b.n	8019d5c <memmove+0x24>

08019d6c <memset>:
 8019d6c:	4402      	add	r2, r0
 8019d6e:	4603      	mov	r3, r0
 8019d70:	4293      	cmp	r3, r2
 8019d72:	d100      	bne.n	8019d76 <memset+0xa>
 8019d74:	4770      	bx	lr
 8019d76:	f803 1b01 	strb.w	r1, [r3], #1
 8019d7a:	e7f9      	b.n	8019d70 <memset+0x4>

08019d7c <_free_r>:
 8019d7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019d7e:	2900      	cmp	r1, #0
 8019d80:	d048      	beq.n	8019e14 <_free_r+0x98>
 8019d82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019d86:	9001      	str	r0, [sp, #4]
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	f1a1 0404 	sub.w	r4, r1, #4
 8019d8e:	bfb8      	it	lt
 8019d90:	18e4      	addlt	r4, r4, r3
 8019d92:	f003 fcd1 	bl	801d738 <__malloc_lock>
 8019d96:	4a20      	ldr	r2, [pc, #128]	; (8019e18 <_free_r+0x9c>)
 8019d98:	9801      	ldr	r0, [sp, #4]
 8019d9a:	6813      	ldr	r3, [r2, #0]
 8019d9c:	4615      	mov	r5, r2
 8019d9e:	b933      	cbnz	r3, 8019dae <_free_r+0x32>
 8019da0:	6063      	str	r3, [r4, #4]
 8019da2:	6014      	str	r4, [r2, #0]
 8019da4:	b003      	add	sp, #12
 8019da6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019daa:	f003 bccb 	b.w	801d744 <__malloc_unlock>
 8019dae:	42a3      	cmp	r3, r4
 8019db0:	d90b      	bls.n	8019dca <_free_r+0x4e>
 8019db2:	6821      	ldr	r1, [r4, #0]
 8019db4:	1862      	adds	r2, r4, r1
 8019db6:	4293      	cmp	r3, r2
 8019db8:	bf04      	itt	eq
 8019dba:	681a      	ldreq	r2, [r3, #0]
 8019dbc:	685b      	ldreq	r3, [r3, #4]
 8019dbe:	6063      	str	r3, [r4, #4]
 8019dc0:	bf04      	itt	eq
 8019dc2:	1852      	addeq	r2, r2, r1
 8019dc4:	6022      	streq	r2, [r4, #0]
 8019dc6:	602c      	str	r4, [r5, #0]
 8019dc8:	e7ec      	b.n	8019da4 <_free_r+0x28>
 8019dca:	461a      	mov	r2, r3
 8019dcc:	685b      	ldr	r3, [r3, #4]
 8019dce:	b10b      	cbz	r3, 8019dd4 <_free_r+0x58>
 8019dd0:	42a3      	cmp	r3, r4
 8019dd2:	d9fa      	bls.n	8019dca <_free_r+0x4e>
 8019dd4:	6811      	ldr	r1, [r2, #0]
 8019dd6:	1855      	adds	r5, r2, r1
 8019dd8:	42a5      	cmp	r5, r4
 8019dda:	d10b      	bne.n	8019df4 <_free_r+0x78>
 8019ddc:	6824      	ldr	r4, [r4, #0]
 8019dde:	4421      	add	r1, r4
 8019de0:	1854      	adds	r4, r2, r1
 8019de2:	42a3      	cmp	r3, r4
 8019de4:	6011      	str	r1, [r2, #0]
 8019de6:	d1dd      	bne.n	8019da4 <_free_r+0x28>
 8019de8:	681c      	ldr	r4, [r3, #0]
 8019dea:	685b      	ldr	r3, [r3, #4]
 8019dec:	6053      	str	r3, [r2, #4]
 8019dee:	4421      	add	r1, r4
 8019df0:	6011      	str	r1, [r2, #0]
 8019df2:	e7d7      	b.n	8019da4 <_free_r+0x28>
 8019df4:	d902      	bls.n	8019dfc <_free_r+0x80>
 8019df6:	230c      	movs	r3, #12
 8019df8:	6003      	str	r3, [r0, #0]
 8019dfa:	e7d3      	b.n	8019da4 <_free_r+0x28>
 8019dfc:	6825      	ldr	r5, [r4, #0]
 8019dfe:	1961      	adds	r1, r4, r5
 8019e00:	428b      	cmp	r3, r1
 8019e02:	bf04      	itt	eq
 8019e04:	6819      	ldreq	r1, [r3, #0]
 8019e06:	685b      	ldreq	r3, [r3, #4]
 8019e08:	6063      	str	r3, [r4, #4]
 8019e0a:	bf04      	itt	eq
 8019e0c:	1949      	addeq	r1, r1, r5
 8019e0e:	6021      	streq	r1, [r4, #0]
 8019e10:	6054      	str	r4, [r2, #4]
 8019e12:	e7c7      	b.n	8019da4 <_free_r+0x28>
 8019e14:	b003      	add	sp, #12
 8019e16:	bd30      	pop	{r4, r5, pc}
 8019e18:	20005ea4 	.word	0x20005ea4

08019e1c <_malloc_r>:
 8019e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e1e:	1ccd      	adds	r5, r1, #3
 8019e20:	f025 0503 	bic.w	r5, r5, #3
 8019e24:	3508      	adds	r5, #8
 8019e26:	2d0c      	cmp	r5, #12
 8019e28:	bf38      	it	cc
 8019e2a:	250c      	movcc	r5, #12
 8019e2c:	2d00      	cmp	r5, #0
 8019e2e:	4606      	mov	r6, r0
 8019e30:	db01      	blt.n	8019e36 <_malloc_r+0x1a>
 8019e32:	42a9      	cmp	r1, r5
 8019e34:	d903      	bls.n	8019e3e <_malloc_r+0x22>
 8019e36:	230c      	movs	r3, #12
 8019e38:	6033      	str	r3, [r6, #0]
 8019e3a:	2000      	movs	r0, #0
 8019e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e3e:	f003 fc7b 	bl	801d738 <__malloc_lock>
 8019e42:	4921      	ldr	r1, [pc, #132]	; (8019ec8 <_malloc_r+0xac>)
 8019e44:	680a      	ldr	r2, [r1, #0]
 8019e46:	4614      	mov	r4, r2
 8019e48:	b99c      	cbnz	r4, 8019e72 <_malloc_r+0x56>
 8019e4a:	4f20      	ldr	r7, [pc, #128]	; (8019ecc <_malloc_r+0xb0>)
 8019e4c:	683b      	ldr	r3, [r7, #0]
 8019e4e:	b923      	cbnz	r3, 8019e5a <_malloc_r+0x3e>
 8019e50:	4621      	mov	r1, r4
 8019e52:	4630      	mov	r0, r6
 8019e54:	f000 ffae 	bl	801adb4 <_sbrk_r>
 8019e58:	6038      	str	r0, [r7, #0]
 8019e5a:	4629      	mov	r1, r5
 8019e5c:	4630      	mov	r0, r6
 8019e5e:	f000 ffa9 	bl	801adb4 <_sbrk_r>
 8019e62:	1c43      	adds	r3, r0, #1
 8019e64:	d123      	bne.n	8019eae <_malloc_r+0x92>
 8019e66:	230c      	movs	r3, #12
 8019e68:	6033      	str	r3, [r6, #0]
 8019e6a:	4630      	mov	r0, r6
 8019e6c:	f003 fc6a 	bl	801d744 <__malloc_unlock>
 8019e70:	e7e3      	b.n	8019e3a <_malloc_r+0x1e>
 8019e72:	6823      	ldr	r3, [r4, #0]
 8019e74:	1b5b      	subs	r3, r3, r5
 8019e76:	d417      	bmi.n	8019ea8 <_malloc_r+0x8c>
 8019e78:	2b0b      	cmp	r3, #11
 8019e7a:	d903      	bls.n	8019e84 <_malloc_r+0x68>
 8019e7c:	6023      	str	r3, [r4, #0]
 8019e7e:	441c      	add	r4, r3
 8019e80:	6025      	str	r5, [r4, #0]
 8019e82:	e004      	b.n	8019e8e <_malloc_r+0x72>
 8019e84:	6863      	ldr	r3, [r4, #4]
 8019e86:	42a2      	cmp	r2, r4
 8019e88:	bf0c      	ite	eq
 8019e8a:	600b      	streq	r3, [r1, #0]
 8019e8c:	6053      	strne	r3, [r2, #4]
 8019e8e:	4630      	mov	r0, r6
 8019e90:	f003 fc58 	bl	801d744 <__malloc_unlock>
 8019e94:	f104 000b 	add.w	r0, r4, #11
 8019e98:	1d23      	adds	r3, r4, #4
 8019e9a:	f020 0007 	bic.w	r0, r0, #7
 8019e9e:	1ac2      	subs	r2, r0, r3
 8019ea0:	d0cc      	beq.n	8019e3c <_malloc_r+0x20>
 8019ea2:	1a1b      	subs	r3, r3, r0
 8019ea4:	50a3      	str	r3, [r4, r2]
 8019ea6:	e7c9      	b.n	8019e3c <_malloc_r+0x20>
 8019ea8:	4622      	mov	r2, r4
 8019eaa:	6864      	ldr	r4, [r4, #4]
 8019eac:	e7cc      	b.n	8019e48 <_malloc_r+0x2c>
 8019eae:	1cc4      	adds	r4, r0, #3
 8019eb0:	f024 0403 	bic.w	r4, r4, #3
 8019eb4:	42a0      	cmp	r0, r4
 8019eb6:	d0e3      	beq.n	8019e80 <_malloc_r+0x64>
 8019eb8:	1a21      	subs	r1, r4, r0
 8019eba:	4630      	mov	r0, r6
 8019ebc:	f000 ff7a 	bl	801adb4 <_sbrk_r>
 8019ec0:	3001      	adds	r0, #1
 8019ec2:	d1dd      	bne.n	8019e80 <_malloc_r+0x64>
 8019ec4:	e7cf      	b.n	8019e66 <_malloc_r+0x4a>
 8019ec6:	bf00      	nop
 8019ec8:	20005ea4 	.word	0x20005ea4
 8019ecc:	20005ea8 	.word	0x20005ea8

08019ed0 <__cvt>:
 8019ed0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019ed4:	ec55 4b10 	vmov	r4, r5, d0
 8019ed8:	2d00      	cmp	r5, #0
 8019eda:	460e      	mov	r6, r1
 8019edc:	4619      	mov	r1, r3
 8019ede:	462b      	mov	r3, r5
 8019ee0:	bfbb      	ittet	lt
 8019ee2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8019ee6:	461d      	movlt	r5, r3
 8019ee8:	2300      	movge	r3, #0
 8019eea:	232d      	movlt	r3, #45	; 0x2d
 8019eec:	700b      	strb	r3, [r1, #0]
 8019eee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019ef0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8019ef4:	4691      	mov	r9, r2
 8019ef6:	f023 0820 	bic.w	r8, r3, #32
 8019efa:	bfbc      	itt	lt
 8019efc:	4622      	movlt	r2, r4
 8019efe:	4614      	movlt	r4, r2
 8019f00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019f04:	d005      	beq.n	8019f12 <__cvt+0x42>
 8019f06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8019f0a:	d100      	bne.n	8019f0e <__cvt+0x3e>
 8019f0c:	3601      	adds	r6, #1
 8019f0e:	2102      	movs	r1, #2
 8019f10:	e000      	b.n	8019f14 <__cvt+0x44>
 8019f12:	2103      	movs	r1, #3
 8019f14:	ab03      	add	r3, sp, #12
 8019f16:	9301      	str	r3, [sp, #4]
 8019f18:	ab02      	add	r3, sp, #8
 8019f1a:	9300      	str	r3, [sp, #0]
 8019f1c:	ec45 4b10 	vmov	d0, r4, r5
 8019f20:	4653      	mov	r3, sl
 8019f22:	4632      	mov	r2, r6
 8019f24:	f002 f94c 	bl	801c1c0 <_dtoa_r>
 8019f28:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8019f2c:	4607      	mov	r7, r0
 8019f2e:	d102      	bne.n	8019f36 <__cvt+0x66>
 8019f30:	f019 0f01 	tst.w	r9, #1
 8019f34:	d022      	beq.n	8019f7c <__cvt+0xac>
 8019f36:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019f3a:	eb07 0906 	add.w	r9, r7, r6
 8019f3e:	d110      	bne.n	8019f62 <__cvt+0x92>
 8019f40:	783b      	ldrb	r3, [r7, #0]
 8019f42:	2b30      	cmp	r3, #48	; 0x30
 8019f44:	d10a      	bne.n	8019f5c <__cvt+0x8c>
 8019f46:	2200      	movs	r2, #0
 8019f48:	2300      	movs	r3, #0
 8019f4a:	4620      	mov	r0, r4
 8019f4c:	4629      	mov	r1, r5
 8019f4e:	f7e6 fdcb 	bl	8000ae8 <__aeabi_dcmpeq>
 8019f52:	b918      	cbnz	r0, 8019f5c <__cvt+0x8c>
 8019f54:	f1c6 0601 	rsb	r6, r6, #1
 8019f58:	f8ca 6000 	str.w	r6, [sl]
 8019f5c:	f8da 3000 	ldr.w	r3, [sl]
 8019f60:	4499      	add	r9, r3
 8019f62:	2200      	movs	r2, #0
 8019f64:	2300      	movs	r3, #0
 8019f66:	4620      	mov	r0, r4
 8019f68:	4629      	mov	r1, r5
 8019f6a:	f7e6 fdbd 	bl	8000ae8 <__aeabi_dcmpeq>
 8019f6e:	b108      	cbz	r0, 8019f74 <__cvt+0xa4>
 8019f70:	f8cd 900c 	str.w	r9, [sp, #12]
 8019f74:	2230      	movs	r2, #48	; 0x30
 8019f76:	9b03      	ldr	r3, [sp, #12]
 8019f78:	454b      	cmp	r3, r9
 8019f7a:	d307      	bcc.n	8019f8c <__cvt+0xbc>
 8019f7c:	9b03      	ldr	r3, [sp, #12]
 8019f7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019f80:	1bdb      	subs	r3, r3, r7
 8019f82:	4638      	mov	r0, r7
 8019f84:	6013      	str	r3, [r2, #0]
 8019f86:	b004      	add	sp, #16
 8019f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f8c:	1c59      	adds	r1, r3, #1
 8019f8e:	9103      	str	r1, [sp, #12]
 8019f90:	701a      	strb	r2, [r3, #0]
 8019f92:	e7f0      	b.n	8019f76 <__cvt+0xa6>

08019f94 <__exponent>:
 8019f94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019f96:	4603      	mov	r3, r0
 8019f98:	2900      	cmp	r1, #0
 8019f9a:	bfb8      	it	lt
 8019f9c:	4249      	neglt	r1, r1
 8019f9e:	f803 2b02 	strb.w	r2, [r3], #2
 8019fa2:	bfb4      	ite	lt
 8019fa4:	222d      	movlt	r2, #45	; 0x2d
 8019fa6:	222b      	movge	r2, #43	; 0x2b
 8019fa8:	2909      	cmp	r1, #9
 8019faa:	7042      	strb	r2, [r0, #1]
 8019fac:	dd2a      	ble.n	801a004 <__exponent+0x70>
 8019fae:	f10d 0407 	add.w	r4, sp, #7
 8019fb2:	46a4      	mov	ip, r4
 8019fb4:	270a      	movs	r7, #10
 8019fb6:	46a6      	mov	lr, r4
 8019fb8:	460a      	mov	r2, r1
 8019fba:	fb91 f6f7 	sdiv	r6, r1, r7
 8019fbe:	fb07 1516 	mls	r5, r7, r6, r1
 8019fc2:	3530      	adds	r5, #48	; 0x30
 8019fc4:	2a63      	cmp	r2, #99	; 0x63
 8019fc6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8019fca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8019fce:	4631      	mov	r1, r6
 8019fd0:	dcf1      	bgt.n	8019fb6 <__exponent+0x22>
 8019fd2:	3130      	adds	r1, #48	; 0x30
 8019fd4:	f1ae 0502 	sub.w	r5, lr, #2
 8019fd8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8019fdc:	1c44      	adds	r4, r0, #1
 8019fde:	4629      	mov	r1, r5
 8019fe0:	4561      	cmp	r1, ip
 8019fe2:	d30a      	bcc.n	8019ffa <__exponent+0x66>
 8019fe4:	f10d 0209 	add.w	r2, sp, #9
 8019fe8:	eba2 020e 	sub.w	r2, r2, lr
 8019fec:	4565      	cmp	r5, ip
 8019fee:	bf88      	it	hi
 8019ff0:	2200      	movhi	r2, #0
 8019ff2:	4413      	add	r3, r2
 8019ff4:	1a18      	subs	r0, r3, r0
 8019ff6:	b003      	add	sp, #12
 8019ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019ffa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019ffe:	f804 2f01 	strb.w	r2, [r4, #1]!
 801a002:	e7ed      	b.n	8019fe0 <__exponent+0x4c>
 801a004:	2330      	movs	r3, #48	; 0x30
 801a006:	3130      	adds	r1, #48	; 0x30
 801a008:	7083      	strb	r3, [r0, #2]
 801a00a:	70c1      	strb	r1, [r0, #3]
 801a00c:	1d03      	adds	r3, r0, #4
 801a00e:	e7f1      	b.n	8019ff4 <__exponent+0x60>

0801a010 <_printf_float>:
 801a010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a014:	ed2d 8b02 	vpush	{d8}
 801a018:	b08d      	sub	sp, #52	; 0x34
 801a01a:	460c      	mov	r4, r1
 801a01c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801a020:	4616      	mov	r6, r2
 801a022:	461f      	mov	r7, r3
 801a024:	4605      	mov	r5, r0
 801a026:	f003 fafb 	bl	801d620 <_localeconv_r>
 801a02a:	f8d0 a000 	ldr.w	sl, [r0]
 801a02e:	4650      	mov	r0, sl
 801a030:	f7e6 f8de 	bl	80001f0 <strlen>
 801a034:	2300      	movs	r3, #0
 801a036:	930a      	str	r3, [sp, #40]	; 0x28
 801a038:	6823      	ldr	r3, [r4, #0]
 801a03a:	9305      	str	r3, [sp, #20]
 801a03c:	f8d8 3000 	ldr.w	r3, [r8]
 801a040:	f894 b018 	ldrb.w	fp, [r4, #24]
 801a044:	3307      	adds	r3, #7
 801a046:	f023 0307 	bic.w	r3, r3, #7
 801a04a:	f103 0208 	add.w	r2, r3, #8
 801a04e:	f8c8 2000 	str.w	r2, [r8]
 801a052:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a056:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801a05a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801a05e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a062:	9307      	str	r3, [sp, #28]
 801a064:	f8cd 8018 	str.w	r8, [sp, #24]
 801a068:	ee08 0a10 	vmov	s16, r0
 801a06c:	4b9f      	ldr	r3, [pc, #636]	; (801a2ec <_printf_float+0x2dc>)
 801a06e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a072:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a076:	f7e6 fd69 	bl	8000b4c <__aeabi_dcmpun>
 801a07a:	bb88      	cbnz	r0, 801a0e0 <_printf_float+0xd0>
 801a07c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a080:	4b9a      	ldr	r3, [pc, #616]	; (801a2ec <_printf_float+0x2dc>)
 801a082:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a086:	f7e6 fd43 	bl	8000b10 <__aeabi_dcmple>
 801a08a:	bb48      	cbnz	r0, 801a0e0 <_printf_float+0xd0>
 801a08c:	2200      	movs	r2, #0
 801a08e:	2300      	movs	r3, #0
 801a090:	4640      	mov	r0, r8
 801a092:	4649      	mov	r1, r9
 801a094:	f7e6 fd32 	bl	8000afc <__aeabi_dcmplt>
 801a098:	b110      	cbz	r0, 801a0a0 <_printf_float+0x90>
 801a09a:	232d      	movs	r3, #45	; 0x2d
 801a09c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a0a0:	4b93      	ldr	r3, [pc, #588]	; (801a2f0 <_printf_float+0x2e0>)
 801a0a2:	4894      	ldr	r0, [pc, #592]	; (801a2f4 <_printf_float+0x2e4>)
 801a0a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801a0a8:	bf94      	ite	ls
 801a0aa:	4698      	movls	r8, r3
 801a0ac:	4680      	movhi	r8, r0
 801a0ae:	2303      	movs	r3, #3
 801a0b0:	6123      	str	r3, [r4, #16]
 801a0b2:	9b05      	ldr	r3, [sp, #20]
 801a0b4:	f023 0204 	bic.w	r2, r3, #4
 801a0b8:	6022      	str	r2, [r4, #0]
 801a0ba:	f04f 0900 	mov.w	r9, #0
 801a0be:	9700      	str	r7, [sp, #0]
 801a0c0:	4633      	mov	r3, r6
 801a0c2:	aa0b      	add	r2, sp, #44	; 0x2c
 801a0c4:	4621      	mov	r1, r4
 801a0c6:	4628      	mov	r0, r5
 801a0c8:	f000 f9d8 	bl	801a47c <_printf_common>
 801a0cc:	3001      	adds	r0, #1
 801a0ce:	f040 8090 	bne.w	801a1f2 <_printf_float+0x1e2>
 801a0d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a0d6:	b00d      	add	sp, #52	; 0x34
 801a0d8:	ecbd 8b02 	vpop	{d8}
 801a0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0e0:	4642      	mov	r2, r8
 801a0e2:	464b      	mov	r3, r9
 801a0e4:	4640      	mov	r0, r8
 801a0e6:	4649      	mov	r1, r9
 801a0e8:	f7e6 fd30 	bl	8000b4c <__aeabi_dcmpun>
 801a0ec:	b140      	cbz	r0, 801a100 <_printf_float+0xf0>
 801a0ee:	464b      	mov	r3, r9
 801a0f0:	2b00      	cmp	r3, #0
 801a0f2:	bfbc      	itt	lt
 801a0f4:	232d      	movlt	r3, #45	; 0x2d
 801a0f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801a0fa:	487f      	ldr	r0, [pc, #508]	; (801a2f8 <_printf_float+0x2e8>)
 801a0fc:	4b7f      	ldr	r3, [pc, #508]	; (801a2fc <_printf_float+0x2ec>)
 801a0fe:	e7d1      	b.n	801a0a4 <_printf_float+0x94>
 801a100:	6863      	ldr	r3, [r4, #4]
 801a102:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801a106:	9206      	str	r2, [sp, #24]
 801a108:	1c5a      	adds	r2, r3, #1
 801a10a:	d13f      	bne.n	801a18c <_printf_float+0x17c>
 801a10c:	2306      	movs	r3, #6
 801a10e:	6063      	str	r3, [r4, #4]
 801a110:	9b05      	ldr	r3, [sp, #20]
 801a112:	6861      	ldr	r1, [r4, #4]
 801a114:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801a118:	2300      	movs	r3, #0
 801a11a:	9303      	str	r3, [sp, #12]
 801a11c:	ab0a      	add	r3, sp, #40	; 0x28
 801a11e:	e9cd b301 	strd	fp, r3, [sp, #4]
 801a122:	ab09      	add	r3, sp, #36	; 0x24
 801a124:	ec49 8b10 	vmov	d0, r8, r9
 801a128:	9300      	str	r3, [sp, #0]
 801a12a:	6022      	str	r2, [r4, #0]
 801a12c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801a130:	4628      	mov	r0, r5
 801a132:	f7ff fecd 	bl	8019ed0 <__cvt>
 801a136:	9b06      	ldr	r3, [sp, #24]
 801a138:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a13a:	2b47      	cmp	r3, #71	; 0x47
 801a13c:	4680      	mov	r8, r0
 801a13e:	d108      	bne.n	801a152 <_printf_float+0x142>
 801a140:	1cc8      	adds	r0, r1, #3
 801a142:	db02      	blt.n	801a14a <_printf_float+0x13a>
 801a144:	6863      	ldr	r3, [r4, #4]
 801a146:	4299      	cmp	r1, r3
 801a148:	dd41      	ble.n	801a1ce <_printf_float+0x1be>
 801a14a:	f1ab 0b02 	sub.w	fp, fp, #2
 801a14e:	fa5f fb8b 	uxtb.w	fp, fp
 801a152:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a156:	d820      	bhi.n	801a19a <_printf_float+0x18a>
 801a158:	3901      	subs	r1, #1
 801a15a:	465a      	mov	r2, fp
 801a15c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801a160:	9109      	str	r1, [sp, #36]	; 0x24
 801a162:	f7ff ff17 	bl	8019f94 <__exponent>
 801a166:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a168:	1813      	adds	r3, r2, r0
 801a16a:	2a01      	cmp	r2, #1
 801a16c:	4681      	mov	r9, r0
 801a16e:	6123      	str	r3, [r4, #16]
 801a170:	dc02      	bgt.n	801a178 <_printf_float+0x168>
 801a172:	6822      	ldr	r2, [r4, #0]
 801a174:	07d2      	lsls	r2, r2, #31
 801a176:	d501      	bpl.n	801a17c <_printf_float+0x16c>
 801a178:	3301      	adds	r3, #1
 801a17a:	6123      	str	r3, [r4, #16]
 801a17c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801a180:	2b00      	cmp	r3, #0
 801a182:	d09c      	beq.n	801a0be <_printf_float+0xae>
 801a184:	232d      	movs	r3, #45	; 0x2d
 801a186:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a18a:	e798      	b.n	801a0be <_printf_float+0xae>
 801a18c:	9a06      	ldr	r2, [sp, #24]
 801a18e:	2a47      	cmp	r2, #71	; 0x47
 801a190:	d1be      	bne.n	801a110 <_printf_float+0x100>
 801a192:	2b00      	cmp	r3, #0
 801a194:	d1bc      	bne.n	801a110 <_printf_float+0x100>
 801a196:	2301      	movs	r3, #1
 801a198:	e7b9      	b.n	801a10e <_printf_float+0xfe>
 801a19a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801a19e:	d118      	bne.n	801a1d2 <_printf_float+0x1c2>
 801a1a0:	2900      	cmp	r1, #0
 801a1a2:	6863      	ldr	r3, [r4, #4]
 801a1a4:	dd0b      	ble.n	801a1be <_printf_float+0x1ae>
 801a1a6:	6121      	str	r1, [r4, #16]
 801a1a8:	b913      	cbnz	r3, 801a1b0 <_printf_float+0x1a0>
 801a1aa:	6822      	ldr	r2, [r4, #0]
 801a1ac:	07d0      	lsls	r0, r2, #31
 801a1ae:	d502      	bpl.n	801a1b6 <_printf_float+0x1a6>
 801a1b0:	3301      	adds	r3, #1
 801a1b2:	440b      	add	r3, r1
 801a1b4:	6123      	str	r3, [r4, #16]
 801a1b6:	65a1      	str	r1, [r4, #88]	; 0x58
 801a1b8:	f04f 0900 	mov.w	r9, #0
 801a1bc:	e7de      	b.n	801a17c <_printf_float+0x16c>
 801a1be:	b913      	cbnz	r3, 801a1c6 <_printf_float+0x1b6>
 801a1c0:	6822      	ldr	r2, [r4, #0]
 801a1c2:	07d2      	lsls	r2, r2, #31
 801a1c4:	d501      	bpl.n	801a1ca <_printf_float+0x1ba>
 801a1c6:	3302      	adds	r3, #2
 801a1c8:	e7f4      	b.n	801a1b4 <_printf_float+0x1a4>
 801a1ca:	2301      	movs	r3, #1
 801a1cc:	e7f2      	b.n	801a1b4 <_printf_float+0x1a4>
 801a1ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801a1d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a1d4:	4299      	cmp	r1, r3
 801a1d6:	db05      	blt.n	801a1e4 <_printf_float+0x1d4>
 801a1d8:	6823      	ldr	r3, [r4, #0]
 801a1da:	6121      	str	r1, [r4, #16]
 801a1dc:	07d8      	lsls	r0, r3, #31
 801a1de:	d5ea      	bpl.n	801a1b6 <_printf_float+0x1a6>
 801a1e0:	1c4b      	adds	r3, r1, #1
 801a1e2:	e7e7      	b.n	801a1b4 <_printf_float+0x1a4>
 801a1e4:	2900      	cmp	r1, #0
 801a1e6:	bfd4      	ite	le
 801a1e8:	f1c1 0202 	rsble	r2, r1, #2
 801a1ec:	2201      	movgt	r2, #1
 801a1ee:	4413      	add	r3, r2
 801a1f0:	e7e0      	b.n	801a1b4 <_printf_float+0x1a4>
 801a1f2:	6823      	ldr	r3, [r4, #0]
 801a1f4:	055a      	lsls	r2, r3, #21
 801a1f6:	d407      	bmi.n	801a208 <_printf_float+0x1f8>
 801a1f8:	6923      	ldr	r3, [r4, #16]
 801a1fa:	4642      	mov	r2, r8
 801a1fc:	4631      	mov	r1, r6
 801a1fe:	4628      	mov	r0, r5
 801a200:	47b8      	blx	r7
 801a202:	3001      	adds	r0, #1
 801a204:	d12c      	bne.n	801a260 <_printf_float+0x250>
 801a206:	e764      	b.n	801a0d2 <_printf_float+0xc2>
 801a208:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a20c:	f240 80e0 	bls.w	801a3d0 <_printf_float+0x3c0>
 801a210:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a214:	2200      	movs	r2, #0
 801a216:	2300      	movs	r3, #0
 801a218:	f7e6 fc66 	bl	8000ae8 <__aeabi_dcmpeq>
 801a21c:	2800      	cmp	r0, #0
 801a21e:	d034      	beq.n	801a28a <_printf_float+0x27a>
 801a220:	4a37      	ldr	r2, [pc, #220]	; (801a300 <_printf_float+0x2f0>)
 801a222:	2301      	movs	r3, #1
 801a224:	4631      	mov	r1, r6
 801a226:	4628      	mov	r0, r5
 801a228:	47b8      	blx	r7
 801a22a:	3001      	adds	r0, #1
 801a22c:	f43f af51 	beq.w	801a0d2 <_printf_float+0xc2>
 801a230:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a234:	429a      	cmp	r2, r3
 801a236:	db02      	blt.n	801a23e <_printf_float+0x22e>
 801a238:	6823      	ldr	r3, [r4, #0]
 801a23a:	07d8      	lsls	r0, r3, #31
 801a23c:	d510      	bpl.n	801a260 <_printf_float+0x250>
 801a23e:	ee18 3a10 	vmov	r3, s16
 801a242:	4652      	mov	r2, sl
 801a244:	4631      	mov	r1, r6
 801a246:	4628      	mov	r0, r5
 801a248:	47b8      	blx	r7
 801a24a:	3001      	adds	r0, #1
 801a24c:	f43f af41 	beq.w	801a0d2 <_printf_float+0xc2>
 801a250:	f04f 0800 	mov.w	r8, #0
 801a254:	f104 091a 	add.w	r9, r4, #26
 801a258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a25a:	3b01      	subs	r3, #1
 801a25c:	4543      	cmp	r3, r8
 801a25e:	dc09      	bgt.n	801a274 <_printf_float+0x264>
 801a260:	6823      	ldr	r3, [r4, #0]
 801a262:	079b      	lsls	r3, r3, #30
 801a264:	f100 8105 	bmi.w	801a472 <_printf_float+0x462>
 801a268:	68e0      	ldr	r0, [r4, #12]
 801a26a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a26c:	4298      	cmp	r0, r3
 801a26e:	bfb8      	it	lt
 801a270:	4618      	movlt	r0, r3
 801a272:	e730      	b.n	801a0d6 <_printf_float+0xc6>
 801a274:	2301      	movs	r3, #1
 801a276:	464a      	mov	r2, r9
 801a278:	4631      	mov	r1, r6
 801a27a:	4628      	mov	r0, r5
 801a27c:	47b8      	blx	r7
 801a27e:	3001      	adds	r0, #1
 801a280:	f43f af27 	beq.w	801a0d2 <_printf_float+0xc2>
 801a284:	f108 0801 	add.w	r8, r8, #1
 801a288:	e7e6      	b.n	801a258 <_printf_float+0x248>
 801a28a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a28c:	2b00      	cmp	r3, #0
 801a28e:	dc39      	bgt.n	801a304 <_printf_float+0x2f4>
 801a290:	4a1b      	ldr	r2, [pc, #108]	; (801a300 <_printf_float+0x2f0>)
 801a292:	2301      	movs	r3, #1
 801a294:	4631      	mov	r1, r6
 801a296:	4628      	mov	r0, r5
 801a298:	47b8      	blx	r7
 801a29a:	3001      	adds	r0, #1
 801a29c:	f43f af19 	beq.w	801a0d2 <_printf_float+0xc2>
 801a2a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a2a4:	4313      	orrs	r3, r2
 801a2a6:	d102      	bne.n	801a2ae <_printf_float+0x29e>
 801a2a8:	6823      	ldr	r3, [r4, #0]
 801a2aa:	07d9      	lsls	r1, r3, #31
 801a2ac:	d5d8      	bpl.n	801a260 <_printf_float+0x250>
 801a2ae:	ee18 3a10 	vmov	r3, s16
 801a2b2:	4652      	mov	r2, sl
 801a2b4:	4631      	mov	r1, r6
 801a2b6:	4628      	mov	r0, r5
 801a2b8:	47b8      	blx	r7
 801a2ba:	3001      	adds	r0, #1
 801a2bc:	f43f af09 	beq.w	801a0d2 <_printf_float+0xc2>
 801a2c0:	f04f 0900 	mov.w	r9, #0
 801a2c4:	f104 0a1a 	add.w	sl, r4, #26
 801a2c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a2ca:	425b      	negs	r3, r3
 801a2cc:	454b      	cmp	r3, r9
 801a2ce:	dc01      	bgt.n	801a2d4 <_printf_float+0x2c4>
 801a2d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a2d2:	e792      	b.n	801a1fa <_printf_float+0x1ea>
 801a2d4:	2301      	movs	r3, #1
 801a2d6:	4652      	mov	r2, sl
 801a2d8:	4631      	mov	r1, r6
 801a2da:	4628      	mov	r0, r5
 801a2dc:	47b8      	blx	r7
 801a2de:	3001      	adds	r0, #1
 801a2e0:	f43f aef7 	beq.w	801a0d2 <_printf_float+0xc2>
 801a2e4:	f109 0901 	add.w	r9, r9, #1
 801a2e8:	e7ee      	b.n	801a2c8 <_printf_float+0x2b8>
 801a2ea:	bf00      	nop
 801a2ec:	7fefffff 	.word	0x7fefffff
 801a2f0:	08020e78 	.word	0x08020e78
 801a2f4:	08020e7c 	.word	0x08020e7c
 801a2f8:	08020e84 	.word	0x08020e84
 801a2fc:	08020e80 	.word	0x08020e80
 801a300:	080211c1 	.word	0x080211c1
 801a304:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a306:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a308:	429a      	cmp	r2, r3
 801a30a:	bfa8      	it	ge
 801a30c:	461a      	movge	r2, r3
 801a30e:	2a00      	cmp	r2, #0
 801a310:	4691      	mov	r9, r2
 801a312:	dc37      	bgt.n	801a384 <_printf_float+0x374>
 801a314:	f04f 0b00 	mov.w	fp, #0
 801a318:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a31c:	f104 021a 	add.w	r2, r4, #26
 801a320:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a322:	9305      	str	r3, [sp, #20]
 801a324:	eba3 0309 	sub.w	r3, r3, r9
 801a328:	455b      	cmp	r3, fp
 801a32a:	dc33      	bgt.n	801a394 <_printf_float+0x384>
 801a32c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a330:	429a      	cmp	r2, r3
 801a332:	db3b      	blt.n	801a3ac <_printf_float+0x39c>
 801a334:	6823      	ldr	r3, [r4, #0]
 801a336:	07da      	lsls	r2, r3, #31
 801a338:	d438      	bmi.n	801a3ac <_printf_float+0x39c>
 801a33a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a33c:	9b05      	ldr	r3, [sp, #20]
 801a33e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a340:	1ad3      	subs	r3, r2, r3
 801a342:	eba2 0901 	sub.w	r9, r2, r1
 801a346:	4599      	cmp	r9, r3
 801a348:	bfa8      	it	ge
 801a34a:	4699      	movge	r9, r3
 801a34c:	f1b9 0f00 	cmp.w	r9, #0
 801a350:	dc35      	bgt.n	801a3be <_printf_float+0x3ae>
 801a352:	f04f 0800 	mov.w	r8, #0
 801a356:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a35a:	f104 0a1a 	add.w	sl, r4, #26
 801a35e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a362:	1a9b      	subs	r3, r3, r2
 801a364:	eba3 0309 	sub.w	r3, r3, r9
 801a368:	4543      	cmp	r3, r8
 801a36a:	f77f af79 	ble.w	801a260 <_printf_float+0x250>
 801a36e:	2301      	movs	r3, #1
 801a370:	4652      	mov	r2, sl
 801a372:	4631      	mov	r1, r6
 801a374:	4628      	mov	r0, r5
 801a376:	47b8      	blx	r7
 801a378:	3001      	adds	r0, #1
 801a37a:	f43f aeaa 	beq.w	801a0d2 <_printf_float+0xc2>
 801a37e:	f108 0801 	add.w	r8, r8, #1
 801a382:	e7ec      	b.n	801a35e <_printf_float+0x34e>
 801a384:	4613      	mov	r3, r2
 801a386:	4631      	mov	r1, r6
 801a388:	4642      	mov	r2, r8
 801a38a:	4628      	mov	r0, r5
 801a38c:	47b8      	blx	r7
 801a38e:	3001      	adds	r0, #1
 801a390:	d1c0      	bne.n	801a314 <_printf_float+0x304>
 801a392:	e69e      	b.n	801a0d2 <_printf_float+0xc2>
 801a394:	2301      	movs	r3, #1
 801a396:	4631      	mov	r1, r6
 801a398:	4628      	mov	r0, r5
 801a39a:	9205      	str	r2, [sp, #20]
 801a39c:	47b8      	blx	r7
 801a39e:	3001      	adds	r0, #1
 801a3a0:	f43f ae97 	beq.w	801a0d2 <_printf_float+0xc2>
 801a3a4:	9a05      	ldr	r2, [sp, #20]
 801a3a6:	f10b 0b01 	add.w	fp, fp, #1
 801a3aa:	e7b9      	b.n	801a320 <_printf_float+0x310>
 801a3ac:	ee18 3a10 	vmov	r3, s16
 801a3b0:	4652      	mov	r2, sl
 801a3b2:	4631      	mov	r1, r6
 801a3b4:	4628      	mov	r0, r5
 801a3b6:	47b8      	blx	r7
 801a3b8:	3001      	adds	r0, #1
 801a3ba:	d1be      	bne.n	801a33a <_printf_float+0x32a>
 801a3bc:	e689      	b.n	801a0d2 <_printf_float+0xc2>
 801a3be:	9a05      	ldr	r2, [sp, #20]
 801a3c0:	464b      	mov	r3, r9
 801a3c2:	4442      	add	r2, r8
 801a3c4:	4631      	mov	r1, r6
 801a3c6:	4628      	mov	r0, r5
 801a3c8:	47b8      	blx	r7
 801a3ca:	3001      	adds	r0, #1
 801a3cc:	d1c1      	bne.n	801a352 <_printf_float+0x342>
 801a3ce:	e680      	b.n	801a0d2 <_printf_float+0xc2>
 801a3d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a3d2:	2a01      	cmp	r2, #1
 801a3d4:	dc01      	bgt.n	801a3da <_printf_float+0x3ca>
 801a3d6:	07db      	lsls	r3, r3, #31
 801a3d8:	d538      	bpl.n	801a44c <_printf_float+0x43c>
 801a3da:	2301      	movs	r3, #1
 801a3dc:	4642      	mov	r2, r8
 801a3de:	4631      	mov	r1, r6
 801a3e0:	4628      	mov	r0, r5
 801a3e2:	47b8      	blx	r7
 801a3e4:	3001      	adds	r0, #1
 801a3e6:	f43f ae74 	beq.w	801a0d2 <_printf_float+0xc2>
 801a3ea:	ee18 3a10 	vmov	r3, s16
 801a3ee:	4652      	mov	r2, sl
 801a3f0:	4631      	mov	r1, r6
 801a3f2:	4628      	mov	r0, r5
 801a3f4:	47b8      	blx	r7
 801a3f6:	3001      	adds	r0, #1
 801a3f8:	f43f ae6b 	beq.w	801a0d2 <_printf_float+0xc2>
 801a3fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a400:	2200      	movs	r2, #0
 801a402:	2300      	movs	r3, #0
 801a404:	f7e6 fb70 	bl	8000ae8 <__aeabi_dcmpeq>
 801a408:	b9d8      	cbnz	r0, 801a442 <_printf_float+0x432>
 801a40a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a40c:	f108 0201 	add.w	r2, r8, #1
 801a410:	3b01      	subs	r3, #1
 801a412:	4631      	mov	r1, r6
 801a414:	4628      	mov	r0, r5
 801a416:	47b8      	blx	r7
 801a418:	3001      	adds	r0, #1
 801a41a:	d10e      	bne.n	801a43a <_printf_float+0x42a>
 801a41c:	e659      	b.n	801a0d2 <_printf_float+0xc2>
 801a41e:	2301      	movs	r3, #1
 801a420:	4652      	mov	r2, sl
 801a422:	4631      	mov	r1, r6
 801a424:	4628      	mov	r0, r5
 801a426:	47b8      	blx	r7
 801a428:	3001      	adds	r0, #1
 801a42a:	f43f ae52 	beq.w	801a0d2 <_printf_float+0xc2>
 801a42e:	f108 0801 	add.w	r8, r8, #1
 801a432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a434:	3b01      	subs	r3, #1
 801a436:	4543      	cmp	r3, r8
 801a438:	dcf1      	bgt.n	801a41e <_printf_float+0x40e>
 801a43a:	464b      	mov	r3, r9
 801a43c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801a440:	e6dc      	b.n	801a1fc <_printf_float+0x1ec>
 801a442:	f04f 0800 	mov.w	r8, #0
 801a446:	f104 0a1a 	add.w	sl, r4, #26
 801a44a:	e7f2      	b.n	801a432 <_printf_float+0x422>
 801a44c:	2301      	movs	r3, #1
 801a44e:	4642      	mov	r2, r8
 801a450:	e7df      	b.n	801a412 <_printf_float+0x402>
 801a452:	2301      	movs	r3, #1
 801a454:	464a      	mov	r2, r9
 801a456:	4631      	mov	r1, r6
 801a458:	4628      	mov	r0, r5
 801a45a:	47b8      	blx	r7
 801a45c:	3001      	adds	r0, #1
 801a45e:	f43f ae38 	beq.w	801a0d2 <_printf_float+0xc2>
 801a462:	f108 0801 	add.w	r8, r8, #1
 801a466:	68e3      	ldr	r3, [r4, #12]
 801a468:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a46a:	1a5b      	subs	r3, r3, r1
 801a46c:	4543      	cmp	r3, r8
 801a46e:	dcf0      	bgt.n	801a452 <_printf_float+0x442>
 801a470:	e6fa      	b.n	801a268 <_printf_float+0x258>
 801a472:	f04f 0800 	mov.w	r8, #0
 801a476:	f104 0919 	add.w	r9, r4, #25
 801a47a:	e7f4      	b.n	801a466 <_printf_float+0x456>

0801a47c <_printf_common>:
 801a47c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a480:	4616      	mov	r6, r2
 801a482:	4699      	mov	r9, r3
 801a484:	688a      	ldr	r2, [r1, #8]
 801a486:	690b      	ldr	r3, [r1, #16]
 801a488:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a48c:	4293      	cmp	r3, r2
 801a48e:	bfb8      	it	lt
 801a490:	4613      	movlt	r3, r2
 801a492:	6033      	str	r3, [r6, #0]
 801a494:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a498:	4607      	mov	r7, r0
 801a49a:	460c      	mov	r4, r1
 801a49c:	b10a      	cbz	r2, 801a4a2 <_printf_common+0x26>
 801a49e:	3301      	adds	r3, #1
 801a4a0:	6033      	str	r3, [r6, #0]
 801a4a2:	6823      	ldr	r3, [r4, #0]
 801a4a4:	0699      	lsls	r1, r3, #26
 801a4a6:	bf42      	ittt	mi
 801a4a8:	6833      	ldrmi	r3, [r6, #0]
 801a4aa:	3302      	addmi	r3, #2
 801a4ac:	6033      	strmi	r3, [r6, #0]
 801a4ae:	6825      	ldr	r5, [r4, #0]
 801a4b0:	f015 0506 	ands.w	r5, r5, #6
 801a4b4:	d106      	bne.n	801a4c4 <_printf_common+0x48>
 801a4b6:	f104 0a19 	add.w	sl, r4, #25
 801a4ba:	68e3      	ldr	r3, [r4, #12]
 801a4bc:	6832      	ldr	r2, [r6, #0]
 801a4be:	1a9b      	subs	r3, r3, r2
 801a4c0:	42ab      	cmp	r3, r5
 801a4c2:	dc26      	bgt.n	801a512 <_printf_common+0x96>
 801a4c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a4c8:	1e13      	subs	r3, r2, #0
 801a4ca:	6822      	ldr	r2, [r4, #0]
 801a4cc:	bf18      	it	ne
 801a4ce:	2301      	movne	r3, #1
 801a4d0:	0692      	lsls	r2, r2, #26
 801a4d2:	d42b      	bmi.n	801a52c <_printf_common+0xb0>
 801a4d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a4d8:	4649      	mov	r1, r9
 801a4da:	4638      	mov	r0, r7
 801a4dc:	47c0      	blx	r8
 801a4de:	3001      	adds	r0, #1
 801a4e0:	d01e      	beq.n	801a520 <_printf_common+0xa4>
 801a4e2:	6823      	ldr	r3, [r4, #0]
 801a4e4:	68e5      	ldr	r5, [r4, #12]
 801a4e6:	6832      	ldr	r2, [r6, #0]
 801a4e8:	f003 0306 	and.w	r3, r3, #6
 801a4ec:	2b04      	cmp	r3, #4
 801a4ee:	bf08      	it	eq
 801a4f0:	1aad      	subeq	r5, r5, r2
 801a4f2:	68a3      	ldr	r3, [r4, #8]
 801a4f4:	6922      	ldr	r2, [r4, #16]
 801a4f6:	bf0c      	ite	eq
 801a4f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a4fc:	2500      	movne	r5, #0
 801a4fe:	4293      	cmp	r3, r2
 801a500:	bfc4      	itt	gt
 801a502:	1a9b      	subgt	r3, r3, r2
 801a504:	18ed      	addgt	r5, r5, r3
 801a506:	2600      	movs	r6, #0
 801a508:	341a      	adds	r4, #26
 801a50a:	42b5      	cmp	r5, r6
 801a50c:	d11a      	bne.n	801a544 <_printf_common+0xc8>
 801a50e:	2000      	movs	r0, #0
 801a510:	e008      	b.n	801a524 <_printf_common+0xa8>
 801a512:	2301      	movs	r3, #1
 801a514:	4652      	mov	r2, sl
 801a516:	4649      	mov	r1, r9
 801a518:	4638      	mov	r0, r7
 801a51a:	47c0      	blx	r8
 801a51c:	3001      	adds	r0, #1
 801a51e:	d103      	bne.n	801a528 <_printf_common+0xac>
 801a520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a528:	3501      	adds	r5, #1
 801a52a:	e7c6      	b.n	801a4ba <_printf_common+0x3e>
 801a52c:	18e1      	adds	r1, r4, r3
 801a52e:	1c5a      	adds	r2, r3, #1
 801a530:	2030      	movs	r0, #48	; 0x30
 801a532:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a536:	4422      	add	r2, r4
 801a538:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a53c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a540:	3302      	adds	r3, #2
 801a542:	e7c7      	b.n	801a4d4 <_printf_common+0x58>
 801a544:	2301      	movs	r3, #1
 801a546:	4622      	mov	r2, r4
 801a548:	4649      	mov	r1, r9
 801a54a:	4638      	mov	r0, r7
 801a54c:	47c0      	blx	r8
 801a54e:	3001      	adds	r0, #1
 801a550:	d0e6      	beq.n	801a520 <_printf_common+0xa4>
 801a552:	3601      	adds	r6, #1
 801a554:	e7d9      	b.n	801a50a <_printf_common+0x8e>
	...

0801a558 <_printf_i>:
 801a558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a55c:	460c      	mov	r4, r1
 801a55e:	4691      	mov	r9, r2
 801a560:	7e27      	ldrb	r7, [r4, #24]
 801a562:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a564:	2f78      	cmp	r7, #120	; 0x78
 801a566:	4680      	mov	r8, r0
 801a568:	469a      	mov	sl, r3
 801a56a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a56e:	d807      	bhi.n	801a580 <_printf_i+0x28>
 801a570:	2f62      	cmp	r7, #98	; 0x62
 801a572:	d80a      	bhi.n	801a58a <_printf_i+0x32>
 801a574:	2f00      	cmp	r7, #0
 801a576:	f000 80d8 	beq.w	801a72a <_printf_i+0x1d2>
 801a57a:	2f58      	cmp	r7, #88	; 0x58
 801a57c:	f000 80a3 	beq.w	801a6c6 <_printf_i+0x16e>
 801a580:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a584:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a588:	e03a      	b.n	801a600 <_printf_i+0xa8>
 801a58a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a58e:	2b15      	cmp	r3, #21
 801a590:	d8f6      	bhi.n	801a580 <_printf_i+0x28>
 801a592:	a001      	add	r0, pc, #4	; (adr r0, 801a598 <_printf_i+0x40>)
 801a594:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801a598:	0801a5f1 	.word	0x0801a5f1
 801a59c:	0801a605 	.word	0x0801a605
 801a5a0:	0801a581 	.word	0x0801a581
 801a5a4:	0801a581 	.word	0x0801a581
 801a5a8:	0801a581 	.word	0x0801a581
 801a5ac:	0801a581 	.word	0x0801a581
 801a5b0:	0801a605 	.word	0x0801a605
 801a5b4:	0801a581 	.word	0x0801a581
 801a5b8:	0801a581 	.word	0x0801a581
 801a5bc:	0801a581 	.word	0x0801a581
 801a5c0:	0801a581 	.word	0x0801a581
 801a5c4:	0801a711 	.word	0x0801a711
 801a5c8:	0801a635 	.word	0x0801a635
 801a5cc:	0801a6f3 	.word	0x0801a6f3
 801a5d0:	0801a581 	.word	0x0801a581
 801a5d4:	0801a581 	.word	0x0801a581
 801a5d8:	0801a733 	.word	0x0801a733
 801a5dc:	0801a581 	.word	0x0801a581
 801a5e0:	0801a635 	.word	0x0801a635
 801a5e4:	0801a581 	.word	0x0801a581
 801a5e8:	0801a581 	.word	0x0801a581
 801a5ec:	0801a6fb 	.word	0x0801a6fb
 801a5f0:	680b      	ldr	r3, [r1, #0]
 801a5f2:	1d1a      	adds	r2, r3, #4
 801a5f4:	681b      	ldr	r3, [r3, #0]
 801a5f6:	600a      	str	r2, [r1, #0]
 801a5f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a5fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a600:	2301      	movs	r3, #1
 801a602:	e0a3      	b.n	801a74c <_printf_i+0x1f4>
 801a604:	6825      	ldr	r5, [r4, #0]
 801a606:	6808      	ldr	r0, [r1, #0]
 801a608:	062e      	lsls	r6, r5, #24
 801a60a:	f100 0304 	add.w	r3, r0, #4
 801a60e:	d50a      	bpl.n	801a626 <_printf_i+0xce>
 801a610:	6805      	ldr	r5, [r0, #0]
 801a612:	600b      	str	r3, [r1, #0]
 801a614:	2d00      	cmp	r5, #0
 801a616:	da03      	bge.n	801a620 <_printf_i+0xc8>
 801a618:	232d      	movs	r3, #45	; 0x2d
 801a61a:	426d      	negs	r5, r5
 801a61c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a620:	485e      	ldr	r0, [pc, #376]	; (801a79c <_printf_i+0x244>)
 801a622:	230a      	movs	r3, #10
 801a624:	e019      	b.n	801a65a <_printf_i+0x102>
 801a626:	f015 0f40 	tst.w	r5, #64	; 0x40
 801a62a:	6805      	ldr	r5, [r0, #0]
 801a62c:	600b      	str	r3, [r1, #0]
 801a62e:	bf18      	it	ne
 801a630:	b22d      	sxthne	r5, r5
 801a632:	e7ef      	b.n	801a614 <_printf_i+0xbc>
 801a634:	680b      	ldr	r3, [r1, #0]
 801a636:	6825      	ldr	r5, [r4, #0]
 801a638:	1d18      	adds	r0, r3, #4
 801a63a:	6008      	str	r0, [r1, #0]
 801a63c:	0628      	lsls	r0, r5, #24
 801a63e:	d501      	bpl.n	801a644 <_printf_i+0xec>
 801a640:	681d      	ldr	r5, [r3, #0]
 801a642:	e002      	b.n	801a64a <_printf_i+0xf2>
 801a644:	0669      	lsls	r1, r5, #25
 801a646:	d5fb      	bpl.n	801a640 <_printf_i+0xe8>
 801a648:	881d      	ldrh	r5, [r3, #0]
 801a64a:	4854      	ldr	r0, [pc, #336]	; (801a79c <_printf_i+0x244>)
 801a64c:	2f6f      	cmp	r7, #111	; 0x6f
 801a64e:	bf0c      	ite	eq
 801a650:	2308      	moveq	r3, #8
 801a652:	230a      	movne	r3, #10
 801a654:	2100      	movs	r1, #0
 801a656:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a65a:	6866      	ldr	r6, [r4, #4]
 801a65c:	60a6      	str	r6, [r4, #8]
 801a65e:	2e00      	cmp	r6, #0
 801a660:	bfa2      	ittt	ge
 801a662:	6821      	ldrge	r1, [r4, #0]
 801a664:	f021 0104 	bicge.w	r1, r1, #4
 801a668:	6021      	strge	r1, [r4, #0]
 801a66a:	b90d      	cbnz	r5, 801a670 <_printf_i+0x118>
 801a66c:	2e00      	cmp	r6, #0
 801a66e:	d04d      	beq.n	801a70c <_printf_i+0x1b4>
 801a670:	4616      	mov	r6, r2
 801a672:	fbb5 f1f3 	udiv	r1, r5, r3
 801a676:	fb03 5711 	mls	r7, r3, r1, r5
 801a67a:	5dc7      	ldrb	r7, [r0, r7]
 801a67c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a680:	462f      	mov	r7, r5
 801a682:	42bb      	cmp	r3, r7
 801a684:	460d      	mov	r5, r1
 801a686:	d9f4      	bls.n	801a672 <_printf_i+0x11a>
 801a688:	2b08      	cmp	r3, #8
 801a68a:	d10b      	bne.n	801a6a4 <_printf_i+0x14c>
 801a68c:	6823      	ldr	r3, [r4, #0]
 801a68e:	07df      	lsls	r7, r3, #31
 801a690:	d508      	bpl.n	801a6a4 <_printf_i+0x14c>
 801a692:	6923      	ldr	r3, [r4, #16]
 801a694:	6861      	ldr	r1, [r4, #4]
 801a696:	4299      	cmp	r1, r3
 801a698:	bfde      	ittt	le
 801a69a:	2330      	movle	r3, #48	; 0x30
 801a69c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a6a0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801a6a4:	1b92      	subs	r2, r2, r6
 801a6a6:	6122      	str	r2, [r4, #16]
 801a6a8:	f8cd a000 	str.w	sl, [sp]
 801a6ac:	464b      	mov	r3, r9
 801a6ae:	aa03      	add	r2, sp, #12
 801a6b0:	4621      	mov	r1, r4
 801a6b2:	4640      	mov	r0, r8
 801a6b4:	f7ff fee2 	bl	801a47c <_printf_common>
 801a6b8:	3001      	adds	r0, #1
 801a6ba:	d14c      	bne.n	801a756 <_printf_i+0x1fe>
 801a6bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a6c0:	b004      	add	sp, #16
 801a6c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a6c6:	4835      	ldr	r0, [pc, #212]	; (801a79c <_printf_i+0x244>)
 801a6c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801a6cc:	6823      	ldr	r3, [r4, #0]
 801a6ce:	680e      	ldr	r6, [r1, #0]
 801a6d0:	061f      	lsls	r7, r3, #24
 801a6d2:	f856 5b04 	ldr.w	r5, [r6], #4
 801a6d6:	600e      	str	r6, [r1, #0]
 801a6d8:	d514      	bpl.n	801a704 <_printf_i+0x1ac>
 801a6da:	07d9      	lsls	r1, r3, #31
 801a6dc:	bf44      	itt	mi
 801a6de:	f043 0320 	orrmi.w	r3, r3, #32
 801a6e2:	6023      	strmi	r3, [r4, #0]
 801a6e4:	b91d      	cbnz	r5, 801a6ee <_printf_i+0x196>
 801a6e6:	6823      	ldr	r3, [r4, #0]
 801a6e8:	f023 0320 	bic.w	r3, r3, #32
 801a6ec:	6023      	str	r3, [r4, #0]
 801a6ee:	2310      	movs	r3, #16
 801a6f0:	e7b0      	b.n	801a654 <_printf_i+0xfc>
 801a6f2:	6823      	ldr	r3, [r4, #0]
 801a6f4:	f043 0320 	orr.w	r3, r3, #32
 801a6f8:	6023      	str	r3, [r4, #0]
 801a6fa:	2378      	movs	r3, #120	; 0x78
 801a6fc:	4828      	ldr	r0, [pc, #160]	; (801a7a0 <_printf_i+0x248>)
 801a6fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a702:	e7e3      	b.n	801a6cc <_printf_i+0x174>
 801a704:	065e      	lsls	r6, r3, #25
 801a706:	bf48      	it	mi
 801a708:	b2ad      	uxthmi	r5, r5
 801a70a:	e7e6      	b.n	801a6da <_printf_i+0x182>
 801a70c:	4616      	mov	r6, r2
 801a70e:	e7bb      	b.n	801a688 <_printf_i+0x130>
 801a710:	680b      	ldr	r3, [r1, #0]
 801a712:	6826      	ldr	r6, [r4, #0]
 801a714:	6960      	ldr	r0, [r4, #20]
 801a716:	1d1d      	adds	r5, r3, #4
 801a718:	600d      	str	r5, [r1, #0]
 801a71a:	0635      	lsls	r5, r6, #24
 801a71c:	681b      	ldr	r3, [r3, #0]
 801a71e:	d501      	bpl.n	801a724 <_printf_i+0x1cc>
 801a720:	6018      	str	r0, [r3, #0]
 801a722:	e002      	b.n	801a72a <_printf_i+0x1d2>
 801a724:	0671      	lsls	r1, r6, #25
 801a726:	d5fb      	bpl.n	801a720 <_printf_i+0x1c8>
 801a728:	8018      	strh	r0, [r3, #0]
 801a72a:	2300      	movs	r3, #0
 801a72c:	6123      	str	r3, [r4, #16]
 801a72e:	4616      	mov	r6, r2
 801a730:	e7ba      	b.n	801a6a8 <_printf_i+0x150>
 801a732:	680b      	ldr	r3, [r1, #0]
 801a734:	1d1a      	adds	r2, r3, #4
 801a736:	600a      	str	r2, [r1, #0]
 801a738:	681e      	ldr	r6, [r3, #0]
 801a73a:	6862      	ldr	r2, [r4, #4]
 801a73c:	2100      	movs	r1, #0
 801a73e:	4630      	mov	r0, r6
 801a740:	f7e5 fd5e 	bl	8000200 <memchr>
 801a744:	b108      	cbz	r0, 801a74a <_printf_i+0x1f2>
 801a746:	1b80      	subs	r0, r0, r6
 801a748:	6060      	str	r0, [r4, #4]
 801a74a:	6863      	ldr	r3, [r4, #4]
 801a74c:	6123      	str	r3, [r4, #16]
 801a74e:	2300      	movs	r3, #0
 801a750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a754:	e7a8      	b.n	801a6a8 <_printf_i+0x150>
 801a756:	6923      	ldr	r3, [r4, #16]
 801a758:	4632      	mov	r2, r6
 801a75a:	4649      	mov	r1, r9
 801a75c:	4640      	mov	r0, r8
 801a75e:	47d0      	blx	sl
 801a760:	3001      	adds	r0, #1
 801a762:	d0ab      	beq.n	801a6bc <_printf_i+0x164>
 801a764:	6823      	ldr	r3, [r4, #0]
 801a766:	079b      	lsls	r3, r3, #30
 801a768:	d413      	bmi.n	801a792 <_printf_i+0x23a>
 801a76a:	68e0      	ldr	r0, [r4, #12]
 801a76c:	9b03      	ldr	r3, [sp, #12]
 801a76e:	4298      	cmp	r0, r3
 801a770:	bfb8      	it	lt
 801a772:	4618      	movlt	r0, r3
 801a774:	e7a4      	b.n	801a6c0 <_printf_i+0x168>
 801a776:	2301      	movs	r3, #1
 801a778:	4632      	mov	r2, r6
 801a77a:	4649      	mov	r1, r9
 801a77c:	4640      	mov	r0, r8
 801a77e:	47d0      	blx	sl
 801a780:	3001      	adds	r0, #1
 801a782:	d09b      	beq.n	801a6bc <_printf_i+0x164>
 801a784:	3501      	adds	r5, #1
 801a786:	68e3      	ldr	r3, [r4, #12]
 801a788:	9903      	ldr	r1, [sp, #12]
 801a78a:	1a5b      	subs	r3, r3, r1
 801a78c:	42ab      	cmp	r3, r5
 801a78e:	dcf2      	bgt.n	801a776 <_printf_i+0x21e>
 801a790:	e7eb      	b.n	801a76a <_printf_i+0x212>
 801a792:	2500      	movs	r5, #0
 801a794:	f104 0619 	add.w	r6, r4, #25
 801a798:	e7f5      	b.n	801a786 <_printf_i+0x22e>
 801a79a:	bf00      	nop
 801a79c:	08020e88 	.word	0x08020e88
 801a7a0:	08020e99 	.word	0x08020e99

0801a7a4 <_scanf_float>:
 801a7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7a8:	b087      	sub	sp, #28
 801a7aa:	4617      	mov	r7, r2
 801a7ac:	9303      	str	r3, [sp, #12]
 801a7ae:	688b      	ldr	r3, [r1, #8]
 801a7b0:	1e5a      	subs	r2, r3, #1
 801a7b2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801a7b6:	bf83      	ittte	hi
 801a7b8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801a7bc:	195b      	addhi	r3, r3, r5
 801a7be:	9302      	strhi	r3, [sp, #8]
 801a7c0:	2300      	movls	r3, #0
 801a7c2:	bf86      	itte	hi
 801a7c4:	f240 135d 	movwhi	r3, #349	; 0x15d
 801a7c8:	608b      	strhi	r3, [r1, #8]
 801a7ca:	9302      	strls	r3, [sp, #8]
 801a7cc:	680b      	ldr	r3, [r1, #0]
 801a7ce:	468b      	mov	fp, r1
 801a7d0:	2500      	movs	r5, #0
 801a7d2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801a7d6:	f84b 3b1c 	str.w	r3, [fp], #28
 801a7da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801a7de:	4680      	mov	r8, r0
 801a7e0:	460c      	mov	r4, r1
 801a7e2:	465e      	mov	r6, fp
 801a7e4:	46aa      	mov	sl, r5
 801a7e6:	46a9      	mov	r9, r5
 801a7e8:	9501      	str	r5, [sp, #4]
 801a7ea:	68a2      	ldr	r2, [r4, #8]
 801a7ec:	b152      	cbz	r2, 801a804 <_scanf_float+0x60>
 801a7ee:	683b      	ldr	r3, [r7, #0]
 801a7f0:	781b      	ldrb	r3, [r3, #0]
 801a7f2:	2b4e      	cmp	r3, #78	; 0x4e
 801a7f4:	d864      	bhi.n	801a8c0 <_scanf_float+0x11c>
 801a7f6:	2b40      	cmp	r3, #64	; 0x40
 801a7f8:	d83c      	bhi.n	801a874 <_scanf_float+0xd0>
 801a7fa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801a7fe:	b2c8      	uxtb	r0, r1
 801a800:	280e      	cmp	r0, #14
 801a802:	d93a      	bls.n	801a87a <_scanf_float+0xd6>
 801a804:	f1b9 0f00 	cmp.w	r9, #0
 801a808:	d003      	beq.n	801a812 <_scanf_float+0x6e>
 801a80a:	6823      	ldr	r3, [r4, #0]
 801a80c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a810:	6023      	str	r3, [r4, #0]
 801a812:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801a816:	f1ba 0f01 	cmp.w	sl, #1
 801a81a:	f200 8113 	bhi.w	801aa44 <_scanf_float+0x2a0>
 801a81e:	455e      	cmp	r6, fp
 801a820:	f200 8105 	bhi.w	801aa2e <_scanf_float+0x28a>
 801a824:	2501      	movs	r5, #1
 801a826:	4628      	mov	r0, r5
 801a828:	b007      	add	sp, #28
 801a82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a82e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801a832:	2a0d      	cmp	r2, #13
 801a834:	d8e6      	bhi.n	801a804 <_scanf_float+0x60>
 801a836:	a101      	add	r1, pc, #4	; (adr r1, 801a83c <_scanf_float+0x98>)
 801a838:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801a83c:	0801a97b 	.word	0x0801a97b
 801a840:	0801a805 	.word	0x0801a805
 801a844:	0801a805 	.word	0x0801a805
 801a848:	0801a805 	.word	0x0801a805
 801a84c:	0801a9db 	.word	0x0801a9db
 801a850:	0801a9b3 	.word	0x0801a9b3
 801a854:	0801a805 	.word	0x0801a805
 801a858:	0801a805 	.word	0x0801a805
 801a85c:	0801a989 	.word	0x0801a989
 801a860:	0801a805 	.word	0x0801a805
 801a864:	0801a805 	.word	0x0801a805
 801a868:	0801a805 	.word	0x0801a805
 801a86c:	0801a805 	.word	0x0801a805
 801a870:	0801a941 	.word	0x0801a941
 801a874:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801a878:	e7db      	b.n	801a832 <_scanf_float+0x8e>
 801a87a:	290e      	cmp	r1, #14
 801a87c:	d8c2      	bhi.n	801a804 <_scanf_float+0x60>
 801a87e:	a001      	add	r0, pc, #4	; (adr r0, 801a884 <_scanf_float+0xe0>)
 801a880:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801a884:	0801a933 	.word	0x0801a933
 801a888:	0801a805 	.word	0x0801a805
 801a88c:	0801a933 	.word	0x0801a933
 801a890:	0801a9c7 	.word	0x0801a9c7
 801a894:	0801a805 	.word	0x0801a805
 801a898:	0801a8e1 	.word	0x0801a8e1
 801a89c:	0801a91d 	.word	0x0801a91d
 801a8a0:	0801a91d 	.word	0x0801a91d
 801a8a4:	0801a91d 	.word	0x0801a91d
 801a8a8:	0801a91d 	.word	0x0801a91d
 801a8ac:	0801a91d 	.word	0x0801a91d
 801a8b0:	0801a91d 	.word	0x0801a91d
 801a8b4:	0801a91d 	.word	0x0801a91d
 801a8b8:	0801a91d 	.word	0x0801a91d
 801a8bc:	0801a91d 	.word	0x0801a91d
 801a8c0:	2b6e      	cmp	r3, #110	; 0x6e
 801a8c2:	d809      	bhi.n	801a8d8 <_scanf_float+0x134>
 801a8c4:	2b60      	cmp	r3, #96	; 0x60
 801a8c6:	d8b2      	bhi.n	801a82e <_scanf_float+0x8a>
 801a8c8:	2b54      	cmp	r3, #84	; 0x54
 801a8ca:	d077      	beq.n	801a9bc <_scanf_float+0x218>
 801a8cc:	2b59      	cmp	r3, #89	; 0x59
 801a8ce:	d199      	bne.n	801a804 <_scanf_float+0x60>
 801a8d0:	2d07      	cmp	r5, #7
 801a8d2:	d197      	bne.n	801a804 <_scanf_float+0x60>
 801a8d4:	2508      	movs	r5, #8
 801a8d6:	e029      	b.n	801a92c <_scanf_float+0x188>
 801a8d8:	2b74      	cmp	r3, #116	; 0x74
 801a8da:	d06f      	beq.n	801a9bc <_scanf_float+0x218>
 801a8dc:	2b79      	cmp	r3, #121	; 0x79
 801a8de:	e7f6      	b.n	801a8ce <_scanf_float+0x12a>
 801a8e0:	6821      	ldr	r1, [r4, #0]
 801a8e2:	05c8      	lsls	r0, r1, #23
 801a8e4:	d51a      	bpl.n	801a91c <_scanf_float+0x178>
 801a8e6:	9b02      	ldr	r3, [sp, #8]
 801a8e8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801a8ec:	6021      	str	r1, [r4, #0]
 801a8ee:	f109 0901 	add.w	r9, r9, #1
 801a8f2:	b11b      	cbz	r3, 801a8fc <_scanf_float+0x158>
 801a8f4:	3b01      	subs	r3, #1
 801a8f6:	3201      	adds	r2, #1
 801a8f8:	9302      	str	r3, [sp, #8]
 801a8fa:	60a2      	str	r2, [r4, #8]
 801a8fc:	68a3      	ldr	r3, [r4, #8]
 801a8fe:	3b01      	subs	r3, #1
 801a900:	60a3      	str	r3, [r4, #8]
 801a902:	6923      	ldr	r3, [r4, #16]
 801a904:	3301      	adds	r3, #1
 801a906:	6123      	str	r3, [r4, #16]
 801a908:	687b      	ldr	r3, [r7, #4]
 801a90a:	3b01      	subs	r3, #1
 801a90c:	2b00      	cmp	r3, #0
 801a90e:	607b      	str	r3, [r7, #4]
 801a910:	f340 8084 	ble.w	801aa1c <_scanf_float+0x278>
 801a914:	683b      	ldr	r3, [r7, #0]
 801a916:	3301      	adds	r3, #1
 801a918:	603b      	str	r3, [r7, #0]
 801a91a:	e766      	b.n	801a7ea <_scanf_float+0x46>
 801a91c:	eb1a 0f05 	cmn.w	sl, r5
 801a920:	f47f af70 	bne.w	801a804 <_scanf_float+0x60>
 801a924:	6822      	ldr	r2, [r4, #0]
 801a926:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801a92a:	6022      	str	r2, [r4, #0]
 801a92c:	f806 3b01 	strb.w	r3, [r6], #1
 801a930:	e7e4      	b.n	801a8fc <_scanf_float+0x158>
 801a932:	6822      	ldr	r2, [r4, #0]
 801a934:	0610      	lsls	r0, r2, #24
 801a936:	f57f af65 	bpl.w	801a804 <_scanf_float+0x60>
 801a93a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801a93e:	e7f4      	b.n	801a92a <_scanf_float+0x186>
 801a940:	f1ba 0f00 	cmp.w	sl, #0
 801a944:	d10e      	bne.n	801a964 <_scanf_float+0x1c0>
 801a946:	f1b9 0f00 	cmp.w	r9, #0
 801a94a:	d10e      	bne.n	801a96a <_scanf_float+0x1c6>
 801a94c:	6822      	ldr	r2, [r4, #0]
 801a94e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a952:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a956:	d108      	bne.n	801a96a <_scanf_float+0x1c6>
 801a958:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a95c:	6022      	str	r2, [r4, #0]
 801a95e:	f04f 0a01 	mov.w	sl, #1
 801a962:	e7e3      	b.n	801a92c <_scanf_float+0x188>
 801a964:	f1ba 0f02 	cmp.w	sl, #2
 801a968:	d055      	beq.n	801aa16 <_scanf_float+0x272>
 801a96a:	2d01      	cmp	r5, #1
 801a96c:	d002      	beq.n	801a974 <_scanf_float+0x1d0>
 801a96e:	2d04      	cmp	r5, #4
 801a970:	f47f af48 	bne.w	801a804 <_scanf_float+0x60>
 801a974:	3501      	adds	r5, #1
 801a976:	b2ed      	uxtb	r5, r5
 801a978:	e7d8      	b.n	801a92c <_scanf_float+0x188>
 801a97a:	f1ba 0f01 	cmp.w	sl, #1
 801a97e:	f47f af41 	bne.w	801a804 <_scanf_float+0x60>
 801a982:	f04f 0a02 	mov.w	sl, #2
 801a986:	e7d1      	b.n	801a92c <_scanf_float+0x188>
 801a988:	b97d      	cbnz	r5, 801a9aa <_scanf_float+0x206>
 801a98a:	f1b9 0f00 	cmp.w	r9, #0
 801a98e:	f47f af3c 	bne.w	801a80a <_scanf_float+0x66>
 801a992:	6822      	ldr	r2, [r4, #0]
 801a994:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a998:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a99c:	f47f af39 	bne.w	801a812 <_scanf_float+0x6e>
 801a9a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a9a4:	6022      	str	r2, [r4, #0]
 801a9a6:	2501      	movs	r5, #1
 801a9a8:	e7c0      	b.n	801a92c <_scanf_float+0x188>
 801a9aa:	2d03      	cmp	r5, #3
 801a9ac:	d0e2      	beq.n	801a974 <_scanf_float+0x1d0>
 801a9ae:	2d05      	cmp	r5, #5
 801a9b0:	e7de      	b.n	801a970 <_scanf_float+0x1cc>
 801a9b2:	2d02      	cmp	r5, #2
 801a9b4:	f47f af26 	bne.w	801a804 <_scanf_float+0x60>
 801a9b8:	2503      	movs	r5, #3
 801a9ba:	e7b7      	b.n	801a92c <_scanf_float+0x188>
 801a9bc:	2d06      	cmp	r5, #6
 801a9be:	f47f af21 	bne.w	801a804 <_scanf_float+0x60>
 801a9c2:	2507      	movs	r5, #7
 801a9c4:	e7b2      	b.n	801a92c <_scanf_float+0x188>
 801a9c6:	6822      	ldr	r2, [r4, #0]
 801a9c8:	0591      	lsls	r1, r2, #22
 801a9ca:	f57f af1b 	bpl.w	801a804 <_scanf_float+0x60>
 801a9ce:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801a9d2:	6022      	str	r2, [r4, #0]
 801a9d4:	f8cd 9004 	str.w	r9, [sp, #4]
 801a9d8:	e7a8      	b.n	801a92c <_scanf_float+0x188>
 801a9da:	6822      	ldr	r2, [r4, #0]
 801a9dc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801a9e0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801a9e4:	d006      	beq.n	801a9f4 <_scanf_float+0x250>
 801a9e6:	0550      	lsls	r0, r2, #21
 801a9e8:	f57f af0c 	bpl.w	801a804 <_scanf_float+0x60>
 801a9ec:	f1b9 0f00 	cmp.w	r9, #0
 801a9f0:	f43f af0f 	beq.w	801a812 <_scanf_float+0x6e>
 801a9f4:	0591      	lsls	r1, r2, #22
 801a9f6:	bf58      	it	pl
 801a9f8:	9901      	ldrpl	r1, [sp, #4]
 801a9fa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a9fe:	bf58      	it	pl
 801aa00:	eba9 0101 	subpl.w	r1, r9, r1
 801aa04:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801aa08:	bf58      	it	pl
 801aa0a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801aa0e:	6022      	str	r2, [r4, #0]
 801aa10:	f04f 0900 	mov.w	r9, #0
 801aa14:	e78a      	b.n	801a92c <_scanf_float+0x188>
 801aa16:	f04f 0a03 	mov.w	sl, #3
 801aa1a:	e787      	b.n	801a92c <_scanf_float+0x188>
 801aa1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801aa20:	4639      	mov	r1, r7
 801aa22:	4640      	mov	r0, r8
 801aa24:	4798      	blx	r3
 801aa26:	2800      	cmp	r0, #0
 801aa28:	f43f aedf 	beq.w	801a7ea <_scanf_float+0x46>
 801aa2c:	e6ea      	b.n	801a804 <_scanf_float+0x60>
 801aa2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801aa32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801aa36:	463a      	mov	r2, r7
 801aa38:	4640      	mov	r0, r8
 801aa3a:	4798      	blx	r3
 801aa3c:	6923      	ldr	r3, [r4, #16]
 801aa3e:	3b01      	subs	r3, #1
 801aa40:	6123      	str	r3, [r4, #16]
 801aa42:	e6ec      	b.n	801a81e <_scanf_float+0x7a>
 801aa44:	1e6b      	subs	r3, r5, #1
 801aa46:	2b06      	cmp	r3, #6
 801aa48:	d825      	bhi.n	801aa96 <_scanf_float+0x2f2>
 801aa4a:	2d02      	cmp	r5, #2
 801aa4c:	d836      	bhi.n	801aabc <_scanf_float+0x318>
 801aa4e:	455e      	cmp	r6, fp
 801aa50:	f67f aee8 	bls.w	801a824 <_scanf_float+0x80>
 801aa54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801aa58:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801aa5c:	463a      	mov	r2, r7
 801aa5e:	4640      	mov	r0, r8
 801aa60:	4798      	blx	r3
 801aa62:	6923      	ldr	r3, [r4, #16]
 801aa64:	3b01      	subs	r3, #1
 801aa66:	6123      	str	r3, [r4, #16]
 801aa68:	e7f1      	b.n	801aa4e <_scanf_float+0x2aa>
 801aa6a:	9802      	ldr	r0, [sp, #8]
 801aa6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801aa70:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801aa74:	9002      	str	r0, [sp, #8]
 801aa76:	463a      	mov	r2, r7
 801aa78:	4640      	mov	r0, r8
 801aa7a:	4798      	blx	r3
 801aa7c:	6923      	ldr	r3, [r4, #16]
 801aa7e:	3b01      	subs	r3, #1
 801aa80:	6123      	str	r3, [r4, #16]
 801aa82:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801aa86:	fa5f fa8a 	uxtb.w	sl, sl
 801aa8a:	f1ba 0f02 	cmp.w	sl, #2
 801aa8e:	d1ec      	bne.n	801aa6a <_scanf_float+0x2c6>
 801aa90:	3d03      	subs	r5, #3
 801aa92:	b2ed      	uxtb	r5, r5
 801aa94:	1b76      	subs	r6, r6, r5
 801aa96:	6823      	ldr	r3, [r4, #0]
 801aa98:	05da      	lsls	r2, r3, #23
 801aa9a:	d52f      	bpl.n	801aafc <_scanf_float+0x358>
 801aa9c:	055b      	lsls	r3, r3, #21
 801aa9e:	d510      	bpl.n	801aac2 <_scanf_float+0x31e>
 801aaa0:	455e      	cmp	r6, fp
 801aaa2:	f67f aebf 	bls.w	801a824 <_scanf_float+0x80>
 801aaa6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801aaaa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801aaae:	463a      	mov	r2, r7
 801aab0:	4640      	mov	r0, r8
 801aab2:	4798      	blx	r3
 801aab4:	6923      	ldr	r3, [r4, #16]
 801aab6:	3b01      	subs	r3, #1
 801aab8:	6123      	str	r3, [r4, #16]
 801aaba:	e7f1      	b.n	801aaa0 <_scanf_float+0x2fc>
 801aabc:	46aa      	mov	sl, r5
 801aabe:	9602      	str	r6, [sp, #8]
 801aac0:	e7df      	b.n	801aa82 <_scanf_float+0x2de>
 801aac2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801aac6:	6923      	ldr	r3, [r4, #16]
 801aac8:	2965      	cmp	r1, #101	; 0x65
 801aaca:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801aace:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 801aad2:	6123      	str	r3, [r4, #16]
 801aad4:	d00c      	beq.n	801aaf0 <_scanf_float+0x34c>
 801aad6:	2945      	cmp	r1, #69	; 0x45
 801aad8:	d00a      	beq.n	801aaf0 <_scanf_float+0x34c>
 801aada:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801aade:	463a      	mov	r2, r7
 801aae0:	4640      	mov	r0, r8
 801aae2:	4798      	blx	r3
 801aae4:	6923      	ldr	r3, [r4, #16]
 801aae6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801aaea:	3b01      	subs	r3, #1
 801aaec:	1eb5      	subs	r5, r6, #2
 801aaee:	6123      	str	r3, [r4, #16]
 801aaf0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801aaf4:	463a      	mov	r2, r7
 801aaf6:	4640      	mov	r0, r8
 801aaf8:	4798      	blx	r3
 801aafa:	462e      	mov	r6, r5
 801aafc:	6825      	ldr	r5, [r4, #0]
 801aafe:	f015 0510 	ands.w	r5, r5, #16
 801ab02:	d158      	bne.n	801abb6 <_scanf_float+0x412>
 801ab04:	7035      	strb	r5, [r6, #0]
 801ab06:	6823      	ldr	r3, [r4, #0]
 801ab08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801ab0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ab10:	d11c      	bne.n	801ab4c <_scanf_float+0x3a8>
 801ab12:	9b01      	ldr	r3, [sp, #4]
 801ab14:	454b      	cmp	r3, r9
 801ab16:	eba3 0209 	sub.w	r2, r3, r9
 801ab1a:	d124      	bne.n	801ab66 <_scanf_float+0x3c2>
 801ab1c:	2200      	movs	r2, #0
 801ab1e:	4659      	mov	r1, fp
 801ab20:	4640      	mov	r0, r8
 801ab22:	f001 f873 	bl	801bc0c <_strtod_r>
 801ab26:	9b03      	ldr	r3, [sp, #12]
 801ab28:	6821      	ldr	r1, [r4, #0]
 801ab2a:	681b      	ldr	r3, [r3, #0]
 801ab2c:	f011 0f02 	tst.w	r1, #2
 801ab30:	ec57 6b10 	vmov	r6, r7, d0
 801ab34:	f103 0204 	add.w	r2, r3, #4
 801ab38:	d020      	beq.n	801ab7c <_scanf_float+0x3d8>
 801ab3a:	9903      	ldr	r1, [sp, #12]
 801ab3c:	600a      	str	r2, [r1, #0]
 801ab3e:	681b      	ldr	r3, [r3, #0]
 801ab40:	e9c3 6700 	strd	r6, r7, [r3]
 801ab44:	68e3      	ldr	r3, [r4, #12]
 801ab46:	3301      	adds	r3, #1
 801ab48:	60e3      	str	r3, [r4, #12]
 801ab4a:	e66c      	b.n	801a826 <_scanf_float+0x82>
 801ab4c:	9b04      	ldr	r3, [sp, #16]
 801ab4e:	2b00      	cmp	r3, #0
 801ab50:	d0e4      	beq.n	801ab1c <_scanf_float+0x378>
 801ab52:	9905      	ldr	r1, [sp, #20]
 801ab54:	230a      	movs	r3, #10
 801ab56:	462a      	mov	r2, r5
 801ab58:	3101      	adds	r1, #1
 801ab5a:	4640      	mov	r0, r8
 801ab5c:	f001 f8e0 	bl	801bd20 <_strtol_r>
 801ab60:	9b04      	ldr	r3, [sp, #16]
 801ab62:	9e05      	ldr	r6, [sp, #20]
 801ab64:	1ac2      	subs	r2, r0, r3
 801ab66:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801ab6a:	429e      	cmp	r6, r3
 801ab6c:	bf28      	it	cs
 801ab6e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801ab72:	4912      	ldr	r1, [pc, #72]	; (801abbc <_scanf_float+0x418>)
 801ab74:	4630      	mov	r0, r6
 801ab76:	f000 f977 	bl	801ae68 <siprintf>
 801ab7a:	e7cf      	b.n	801ab1c <_scanf_float+0x378>
 801ab7c:	f011 0f04 	tst.w	r1, #4
 801ab80:	9903      	ldr	r1, [sp, #12]
 801ab82:	600a      	str	r2, [r1, #0]
 801ab84:	d1db      	bne.n	801ab3e <_scanf_float+0x39a>
 801ab86:	f8d3 8000 	ldr.w	r8, [r3]
 801ab8a:	ee10 2a10 	vmov	r2, s0
 801ab8e:	ee10 0a10 	vmov	r0, s0
 801ab92:	463b      	mov	r3, r7
 801ab94:	4639      	mov	r1, r7
 801ab96:	f7e5 ffd9 	bl	8000b4c <__aeabi_dcmpun>
 801ab9a:	b128      	cbz	r0, 801aba8 <_scanf_float+0x404>
 801ab9c:	4808      	ldr	r0, [pc, #32]	; (801abc0 <_scanf_float+0x41c>)
 801ab9e:	f000 f919 	bl	801add4 <nanf>
 801aba2:	ed88 0a00 	vstr	s0, [r8]
 801aba6:	e7cd      	b.n	801ab44 <_scanf_float+0x3a0>
 801aba8:	4630      	mov	r0, r6
 801abaa:	4639      	mov	r1, r7
 801abac:	f7e6 f82c 	bl	8000c08 <__aeabi_d2f>
 801abb0:	f8c8 0000 	str.w	r0, [r8]
 801abb4:	e7c6      	b.n	801ab44 <_scanf_float+0x3a0>
 801abb6:	2500      	movs	r5, #0
 801abb8:	e635      	b.n	801a826 <_scanf_float+0x82>
 801abba:	bf00      	nop
 801abbc:	08020eaa 	.word	0x08020eaa
 801abc0:	08020f3b 	.word	0x08020f3b

0801abc4 <iprintf>:
 801abc4:	b40f      	push	{r0, r1, r2, r3}
 801abc6:	4b0a      	ldr	r3, [pc, #40]	; (801abf0 <iprintf+0x2c>)
 801abc8:	b513      	push	{r0, r1, r4, lr}
 801abca:	681c      	ldr	r4, [r3, #0]
 801abcc:	b124      	cbz	r4, 801abd8 <iprintf+0x14>
 801abce:	69a3      	ldr	r3, [r4, #24]
 801abd0:	b913      	cbnz	r3, 801abd8 <iprintf+0x14>
 801abd2:	4620      	mov	r0, r4
 801abd4:	f7fe ffcc 	bl	8019b70 <__sinit>
 801abd8:	ab05      	add	r3, sp, #20
 801abda:	9a04      	ldr	r2, [sp, #16]
 801abdc:	68a1      	ldr	r1, [r4, #8]
 801abde:	9301      	str	r3, [sp, #4]
 801abe0:	4620      	mov	r0, r4
 801abe2:	f003 fdfd 	bl	801e7e0 <_vfiprintf_r>
 801abe6:	b002      	add	sp, #8
 801abe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801abec:	b004      	add	sp, #16
 801abee:	4770      	bx	lr
 801abf0:	200001d8 	.word	0x200001d8

0801abf4 <_puts_r>:
 801abf4:	b570      	push	{r4, r5, r6, lr}
 801abf6:	460e      	mov	r6, r1
 801abf8:	4605      	mov	r5, r0
 801abfa:	b118      	cbz	r0, 801ac04 <_puts_r+0x10>
 801abfc:	6983      	ldr	r3, [r0, #24]
 801abfe:	b90b      	cbnz	r3, 801ac04 <_puts_r+0x10>
 801ac00:	f7fe ffb6 	bl	8019b70 <__sinit>
 801ac04:	69ab      	ldr	r3, [r5, #24]
 801ac06:	68ac      	ldr	r4, [r5, #8]
 801ac08:	b913      	cbnz	r3, 801ac10 <_puts_r+0x1c>
 801ac0a:	4628      	mov	r0, r5
 801ac0c:	f7fe ffb0 	bl	8019b70 <__sinit>
 801ac10:	4b2c      	ldr	r3, [pc, #176]	; (801acc4 <_puts_r+0xd0>)
 801ac12:	429c      	cmp	r4, r3
 801ac14:	d120      	bne.n	801ac58 <_puts_r+0x64>
 801ac16:	686c      	ldr	r4, [r5, #4]
 801ac18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ac1a:	07db      	lsls	r3, r3, #31
 801ac1c:	d405      	bmi.n	801ac2a <_puts_r+0x36>
 801ac1e:	89a3      	ldrh	r3, [r4, #12]
 801ac20:	0598      	lsls	r0, r3, #22
 801ac22:	d402      	bmi.n	801ac2a <_puts_r+0x36>
 801ac24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ac26:	f7ff f866 	bl	8019cf6 <__retarget_lock_acquire_recursive>
 801ac2a:	89a3      	ldrh	r3, [r4, #12]
 801ac2c:	0719      	lsls	r1, r3, #28
 801ac2e:	d51d      	bpl.n	801ac6c <_puts_r+0x78>
 801ac30:	6923      	ldr	r3, [r4, #16]
 801ac32:	b1db      	cbz	r3, 801ac6c <_puts_r+0x78>
 801ac34:	3e01      	subs	r6, #1
 801ac36:	68a3      	ldr	r3, [r4, #8]
 801ac38:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801ac3c:	3b01      	subs	r3, #1
 801ac3e:	60a3      	str	r3, [r4, #8]
 801ac40:	bb39      	cbnz	r1, 801ac92 <_puts_r+0x9e>
 801ac42:	2b00      	cmp	r3, #0
 801ac44:	da38      	bge.n	801acb8 <_puts_r+0xc4>
 801ac46:	4622      	mov	r2, r4
 801ac48:	210a      	movs	r1, #10
 801ac4a:	4628      	mov	r0, r5
 801ac4c:	f001 f92c 	bl	801bea8 <__swbuf_r>
 801ac50:	3001      	adds	r0, #1
 801ac52:	d011      	beq.n	801ac78 <_puts_r+0x84>
 801ac54:	250a      	movs	r5, #10
 801ac56:	e011      	b.n	801ac7c <_puts_r+0x88>
 801ac58:	4b1b      	ldr	r3, [pc, #108]	; (801acc8 <_puts_r+0xd4>)
 801ac5a:	429c      	cmp	r4, r3
 801ac5c:	d101      	bne.n	801ac62 <_puts_r+0x6e>
 801ac5e:	68ac      	ldr	r4, [r5, #8]
 801ac60:	e7da      	b.n	801ac18 <_puts_r+0x24>
 801ac62:	4b1a      	ldr	r3, [pc, #104]	; (801accc <_puts_r+0xd8>)
 801ac64:	429c      	cmp	r4, r3
 801ac66:	bf08      	it	eq
 801ac68:	68ec      	ldreq	r4, [r5, #12]
 801ac6a:	e7d5      	b.n	801ac18 <_puts_r+0x24>
 801ac6c:	4621      	mov	r1, r4
 801ac6e:	4628      	mov	r0, r5
 801ac70:	f001 f97e 	bl	801bf70 <__swsetup_r>
 801ac74:	2800      	cmp	r0, #0
 801ac76:	d0dd      	beq.n	801ac34 <_puts_r+0x40>
 801ac78:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801ac7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ac7e:	07da      	lsls	r2, r3, #31
 801ac80:	d405      	bmi.n	801ac8e <_puts_r+0x9a>
 801ac82:	89a3      	ldrh	r3, [r4, #12]
 801ac84:	059b      	lsls	r3, r3, #22
 801ac86:	d402      	bmi.n	801ac8e <_puts_r+0x9a>
 801ac88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ac8a:	f7ff f835 	bl	8019cf8 <__retarget_lock_release_recursive>
 801ac8e:	4628      	mov	r0, r5
 801ac90:	bd70      	pop	{r4, r5, r6, pc}
 801ac92:	2b00      	cmp	r3, #0
 801ac94:	da04      	bge.n	801aca0 <_puts_r+0xac>
 801ac96:	69a2      	ldr	r2, [r4, #24]
 801ac98:	429a      	cmp	r2, r3
 801ac9a:	dc06      	bgt.n	801acaa <_puts_r+0xb6>
 801ac9c:	290a      	cmp	r1, #10
 801ac9e:	d004      	beq.n	801acaa <_puts_r+0xb6>
 801aca0:	6823      	ldr	r3, [r4, #0]
 801aca2:	1c5a      	adds	r2, r3, #1
 801aca4:	6022      	str	r2, [r4, #0]
 801aca6:	7019      	strb	r1, [r3, #0]
 801aca8:	e7c5      	b.n	801ac36 <_puts_r+0x42>
 801acaa:	4622      	mov	r2, r4
 801acac:	4628      	mov	r0, r5
 801acae:	f001 f8fb 	bl	801bea8 <__swbuf_r>
 801acb2:	3001      	adds	r0, #1
 801acb4:	d1bf      	bne.n	801ac36 <_puts_r+0x42>
 801acb6:	e7df      	b.n	801ac78 <_puts_r+0x84>
 801acb8:	6823      	ldr	r3, [r4, #0]
 801acba:	250a      	movs	r5, #10
 801acbc:	1c5a      	adds	r2, r3, #1
 801acbe:	6022      	str	r2, [r4, #0]
 801acc0:	701d      	strb	r5, [r3, #0]
 801acc2:	e7db      	b.n	801ac7c <_puts_r+0x88>
 801acc4:	08020e34 	.word	0x08020e34
 801acc8:	08020e54 	.word	0x08020e54
 801accc:	08020e14 	.word	0x08020e14

0801acd0 <puts>:
 801acd0:	4b02      	ldr	r3, [pc, #8]	; (801acdc <puts+0xc>)
 801acd2:	4601      	mov	r1, r0
 801acd4:	6818      	ldr	r0, [r3, #0]
 801acd6:	f7ff bf8d 	b.w	801abf4 <_puts_r>
 801acda:	bf00      	nop
 801acdc:	200001d8 	.word	0x200001d8

0801ace0 <cleanup_glue>:
 801ace0:	b538      	push	{r3, r4, r5, lr}
 801ace2:	460c      	mov	r4, r1
 801ace4:	6809      	ldr	r1, [r1, #0]
 801ace6:	4605      	mov	r5, r0
 801ace8:	b109      	cbz	r1, 801acee <cleanup_glue+0xe>
 801acea:	f7ff fff9 	bl	801ace0 <cleanup_glue>
 801acee:	4621      	mov	r1, r4
 801acf0:	4628      	mov	r0, r5
 801acf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801acf6:	f7ff b841 	b.w	8019d7c <_free_r>
	...

0801acfc <_reclaim_reent>:
 801acfc:	4b2c      	ldr	r3, [pc, #176]	; (801adb0 <_reclaim_reent+0xb4>)
 801acfe:	681b      	ldr	r3, [r3, #0]
 801ad00:	4283      	cmp	r3, r0
 801ad02:	b570      	push	{r4, r5, r6, lr}
 801ad04:	4604      	mov	r4, r0
 801ad06:	d051      	beq.n	801adac <_reclaim_reent+0xb0>
 801ad08:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801ad0a:	b143      	cbz	r3, 801ad1e <_reclaim_reent+0x22>
 801ad0c:	68db      	ldr	r3, [r3, #12]
 801ad0e:	2b00      	cmp	r3, #0
 801ad10:	d14a      	bne.n	801ada8 <_reclaim_reent+0xac>
 801ad12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ad14:	6819      	ldr	r1, [r3, #0]
 801ad16:	b111      	cbz	r1, 801ad1e <_reclaim_reent+0x22>
 801ad18:	4620      	mov	r0, r4
 801ad1a:	f7ff f82f 	bl	8019d7c <_free_r>
 801ad1e:	6961      	ldr	r1, [r4, #20]
 801ad20:	b111      	cbz	r1, 801ad28 <_reclaim_reent+0x2c>
 801ad22:	4620      	mov	r0, r4
 801ad24:	f7ff f82a 	bl	8019d7c <_free_r>
 801ad28:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801ad2a:	b111      	cbz	r1, 801ad32 <_reclaim_reent+0x36>
 801ad2c:	4620      	mov	r0, r4
 801ad2e:	f7ff f825 	bl	8019d7c <_free_r>
 801ad32:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801ad34:	b111      	cbz	r1, 801ad3c <_reclaim_reent+0x40>
 801ad36:	4620      	mov	r0, r4
 801ad38:	f7ff f820 	bl	8019d7c <_free_r>
 801ad3c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801ad3e:	b111      	cbz	r1, 801ad46 <_reclaim_reent+0x4a>
 801ad40:	4620      	mov	r0, r4
 801ad42:	f7ff f81b 	bl	8019d7c <_free_r>
 801ad46:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801ad48:	b111      	cbz	r1, 801ad50 <_reclaim_reent+0x54>
 801ad4a:	4620      	mov	r0, r4
 801ad4c:	f7ff f816 	bl	8019d7c <_free_r>
 801ad50:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801ad52:	b111      	cbz	r1, 801ad5a <_reclaim_reent+0x5e>
 801ad54:	4620      	mov	r0, r4
 801ad56:	f7ff f811 	bl	8019d7c <_free_r>
 801ad5a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801ad5c:	b111      	cbz	r1, 801ad64 <_reclaim_reent+0x68>
 801ad5e:	4620      	mov	r0, r4
 801ad60:	f7ff f80c 	bl	8019d7c <_free_r>
 801ad64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ad66:	b111      	cbz	r1, 801ad6e <_reclaim_reent+0x72>
 801ad68:	4620      	mov	r0, r4
 801ad6a:	f7ff f807 	bl	8019d7c <_free_r>
 801ad6e:	69a3      	ldr	r3, [r4, #24]
 801ad70:	b1e3      	cbz	r3, 801adac <_reclaim_reent+0xb0>
 801ad72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801ad74:	4620      	mov	r0, r4
 801ad76:	4798      	blx	r3
 801ad78:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801ad7a:	b1b9      	cbz	r1, 801adac <_reclaim_reent+0xb0>
 801ad7c:	4620      	mov	r0, r4
 801ad7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ad82:	f7ff bfad 	b.w	801ace0 <cleanup_glue>
 801ad86:	5949      	ldr	r1, [r1, r5]
 801ad88:	b941      	cbnz	r1, 801ad9c <_reclaim_reent+0xa0>
 801ad8a:	3504      	adds	r5, #4
 801ad8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ad8e:	2d80      	cmp	r5, #128	; 0x80
 801ad90:	68d9      	ldr	r1, [r3, #12]
 801ad92:	d1f8      	bne.n	801ad86 <_reclaim_reent+0x8a>
 801ad94:	4620      	mov	r0, r4
 801ad96:	f7fe fff1 	bl	8019d7c <_free_r>
 801ad9a:	e7ba      	b.n	801ad12 <_reclaim_reent+0x16>
 801ad9c:	680e      	ldr	r6, [r1, #0]
 801ad9e:	4620      	mov	r0, r4
 801ada0:	f7fe ffec 	bl	8019d7c <_free_r>
 801ada4:	4631      	mov	r1, r6
 801ada6:	e7ef      	b.n	801ad88 <_reclaim_reent+0x8c>
 801ada8:	2500      	movs	r5, #0
 801adaa:	e7ef      	b.n	801ad8c <_reclaim_reent+0x90>
 801adac:	bd70      	pop	{r4, r5, r6, pc}
 801adae:	bf00      	nop
 801adb0:	200001d8 	.word	0x200001d8

0801adb4 <_sbrk_r>:
 801adb4:	b538      	push	{r3, r4, r5, lr}
 801adb6:	4d06      	ldr	r5, [pc, #24]	; (801add0 <_sbrk_r+0x1c>)
 801adb8:	2300      	movs	r3, #0
 801adba:	4604      	mov	r4, r0
 801adbc:	4608      	mov	r0, r1
 801adbe:	602b      	str	r3, [r5, #0]
 801adc0:	f7e8 fa54 	bl	800326c <_sbrk>
 801adc4:	1c43      	adds	r3, r0, #1
 801adc6:	d102      	bne.n	801adce <_sbrk_r+0x1a>
 801adc8:	682b      	ldr	r3, [r5, #0]
 801adca:	b103      	cbz	r3, 801adce <_sbrk_r+0x1a>
 801adcc:	6023      	str	r3, [r4, #0]
 801adce:	bd38      	pop	{r3, r4, r5, pc}
 801add0:	20008f98 	.word	0x20008f98

0801add4 <nanf>:
 801add4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801addc <nanf+0x8>
 801add8:	4770      	bx	lr
 801adda:	bf00      	nop
 801addc:	7fc00000 	.word	0x7fc00000

0801ade0 <_raise_r>:
 801ade0:	291f      	cmp	r1, #31
 801ade2:	b538      	push	{r3, r4, r5, lr}
 801ade4:	4604      	mov	r4, r0
 801ade6:	460d      	mov	r5, r1
 801ade8:	d904      	bls.n	801adf4 <_raise_r+0x14>
 801adea:	2316      	movs	r3, #22
 801adec:	6003      	str	r3, [r0, #0]
 801adee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801adf2:	bd38      	pop	{r3, r4, r5, pc}
 801adf4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801adf6:	b112      	cbz	r2, 801adfe <_raise_r+0x1e>
 801adf8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801adfc:	b94b      	cbnz	r3, 801ae12 <_raise_r+0x32>
 801adfe:	4620      	mov	r0, r4
 801ae00:	f000 f830 	bl	801ae64 <_getpid_r>
 801ae04:	462a      	mov	r2, r5
 801ae06:	4601      	mov	r1, r0
 801ae08:	4620      	mov	r0, r4
 801ae0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ae0e:	f000 b817 	b.w	801ae40 <_kill_r>
 801ae12:	2b01      	cmp	r3, #1
 801ae14:	d00a      	beq.n	801ae2c <_raise_r+0x4c>
 801ae16:	1c59      	adds	r1, r3, #1
 801ae18:	d103      	bne.n	801ae22 <_raise_r+0x42>
 801ae1a:	2316      	movs	r3, #22
 801ae1c:	6003      	str	r3, [r0, #0]
 801ae1e:	2001      	movs	r0, #1
 801ae20:	e7e7      	b.n	801adf2 <_raise_r+0x12>
 801ae22:	2400      	movs	r4, #0
 801ae24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ae28:	4628      	mov	r0, r5
 801ae2a:	4798      	blx	r3
 801ae2c:	2000      	movs	r0, #0
 801ae2e:	e7e0      	b.n	801adf2 <_raise_r+0x12>

0801ae30 <raise>:
 801ae30:	4b02      	ldr	r3, [pc, #8]	; (801ae3c <raise+0xc>)
 801ae32:	4601      	mov	r1, r0
 801ae34:	6818      	ldr	r0, [r3, #0]
 801ae36:	f7ff bfd3 	b.w	801ade0 <_raise_r>
 801ae3a:	bf00      	nop
 801ae3c:	200001d8 	.word	0x200001d8

0801ae40 <_kill_r>:
 801ae40:	b538      	push	{r3, r4, r5, lr}
 801ae42:	4d07      	ldr	r5, [pc, #28]	; (801ae60 <_kill_r+0x20>)
 801ae44:	2300      	movs	r3, #0
 801ae46:	4604      	mov	r4, r0
 801ae48:	4608      	mov	r0, r1
 801ae4a:	4611      	mov	r1, r2
 801ae4c:	602b      	str	r3, [r5, #0]
 801ae4e:	f7e8 f985 	bl	800315c <_kill>
 801ae52:	1c43      	adds	r3, r0, #1
 801ae54:	d102      	bne.n	801ae5c <_kill_r+0x1c>
 801ae56:	682b      	ldr	r3, [r5, #0]
 801ae58:	b103      	cbz	r3, 801ae5c <_kill_r+0x1c>
 801ae5a:	6023      	str	r3, [r4, #0]
 801ae5c:	bd38      	pop	{r3, r4, r5, pc}
 801ae5e:	bf00      	nop
 801ae60:	20008f98 	.word	0x20008f98

0801ae64 <_getpid_r>:
 801ae64:	f7e8 b972 	b.w	800314c <_getpid>

0801ae68 <siprintf>:
 801ae68:	b40e      	push	{r1, r2, r3}
 801ae6a:	b500      	push	{lr}
 801ae6c:	b09c      	sub	sp, #112	; 0x70
 801ae6e:	ab1d      	add	r3, sp, #116	; 0x74
 801ae70:	9002      	str	r0, [sp, #8]
 801ae72:	9006      	str	r0, [sp, #24]
 801ae74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ae78:	4809      	ldr	r0, [pc, #36]	; (801aea0 <siprintf+0x38>)
 801ae7a:	9107      	str	r1, [sp, #28]
 801ae7c:	9104      	str	r1, [sp, #16]
 801ae7e:	4909      	ldr	r1, [pc, #36]	; (801aea4 <siprintf+0x3c>)
 801ae80:	f853 2b04 	ldr.w	r2, [r3], #4
 801ae84:	9105      	str	r1, [sp, #20]
 801ae86:	6800      	ldr	r0, [r0, #0]
 801ae88:	9301      	str	r3, [sp, #4]
 801ae8a:	a902      	add	r1, sp, #8
 801ae8c:	f003 f9ac 	bl	801e1e8 <_svfiprintf_r>
 801ae90:	9b02      	ldr	r3, [sp, #8]
 801ae92:	2200      	movs	r2, #0
 801ae94:	701a      	strb	r2, [r3, #0]
 801ae96:	b01c      	add	sp, #112	; 0x70
 801ae98:	f85d eb04 	ldr.w	lr, [sp], #4
 801ae9c:	b003      	add	sp, #12
 801ae9e:	4770      	bx	lr
 801aea0:	200001d8 	.word	0x200001d8
 801aea4:	ffff0208 	.word	0xffff0208

0801aea8 <siscanf>:
 801aea8:	b40e      	push	{r1, r2, r3}
 801aeaa:	b510      	push	{r4, lr}
 801aeac:	b09f      	sub	sp, #124	; 0x7c
 801aeae:	ac21      	add	r4, sp, #132	; 0x84
 801aeb0:	f44f 7101 	mov.w	r1, #516	; 0x204
 801aeb4:	f854 2b04 	ldr.w	r2, [r4], #4
 801aeb8:	9201      	str	r2, [sp, #4]
 801aeba:	f8ad 101c 	strh.w	r1, [sp, #28]
 801aebe:	9004      	str	r0, [sp, #16]
 801aec0:	9008      	str	r0, [sp, #32]
 801aec2:	f7e5 f995 	bl	80001f0 <strlen>
 801aec6:	4b0c      	ldr	r3, [pc, #48]	; (801aef8 <siscanf+0x50>)
 801aec8:	9005      	str	r0, [sp, #20]
 801aeca:	9009      	str	r0, [sp, #36]	; 0x24
 801aecc:	930d      	str	r3, [sp, #52]	; 0x34
 801aece:	480b      	ldr	r0, [pc, #44]	; (801aefc <siscanf+0x54>)
 801aed0:	9a01      	ldr	r2, [sp, #4]
 801aed2:	6800      	ldr	r0, [r0, #0]
 801aed4:	9403      	str	r4, [sp, #12]
 801aed6:	2300      	movs	r3, #0
 801aed8:	9311      	str	r3, [sp, #68]	; 0x44
 801aeda:	9316      	str	r3, [sp, #88]	; 0x58
 801aedc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aee0:	f8ad 301e 	strh.w	r3, [sp, #30]
 801aee4:	a904      	add	r1, sp, #16
 801aee6:	4623      	mov	r3, r4
 801aee8:	f003 fad8 	bl	801e49c <__ssvfiscanf_r>
 801aeec:	b01f      	add	sp, #124	; 0x7c
 801aeee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aef2:	b003      	add	sp, #12
 801aef4:	4770      	bx	lr
 801aef6:	bf00      	nop
 801aef8:	0801af23 	.word	0x0801af23
 801aefc:	200001d8 	.word	0x200001d8

0801af00 <__sread>:
 801af00:	b510      	push	{r4, lr}
 801af02:	460c      	mov	r4, r1
 801af04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af08:	f003 fee6 	bl	801ecd8 <_read_r>
 801af0c:	2800      	cmp	r0, #0
 801af0e:	bfab      	itete	ge
 801af10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801af12:	89a3      	ldrhlt	r3, [r4, #12]
 801af14:	181b      	addge	r3, r3, r0
 801af16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801af1a:	bfac      	ite	ge
 801af1c:	6563      	strge	r3, [r4, #84]	; 0x54
 801af1e:	81a3      	strhlt	r3, [r4, #12]
 801af20:	bd10      	pop	{r4, pc}

0801af22 <__seofread>:
 801af22:	2000      	movs	r0, #0
 801af24:	4770      	bx	lr

0801af26 <__swrite>:
 801af26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af2a:	461f      	mov	r7, r3
 801af2c:	898b      	ldrh	r3, [r1, #12]
 801af2e:	05db      	lsls	r3, r3, #23
 801af30:	4605      	mov	r5, r0
 801af32:	460c      	mov	r4, r1
 801af34:	4616      	mov	r6, r2
 801af36:	d505      	bpl.n	801af44 <__swrite+0x1e>
 801af38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af3c:	2302      	movs	r3, #2
 801af3e:	2200      	movs	r2, #0
 801af40:	f002 fb72 	bl	801d628 <_lseek_r>
 801af44:	89a3      	ldrh	r3, [r4, #12]
 801af46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801af4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801af4e:	81a3      	strh	r3, [r4, #12]
 801af50:	4632      	mov	r2, r6
 801af52:	463b      	mov	r3, r7
 801af54:	4628      	mov	r0, r5
 801af56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801af5a:	f000 bff7 	b.w	801bf4c <_write_r>

0801af5e <__sseek>:
 801af5e:	b510      	push	{r4, lr}
 801af60:	460c      	mov	r4, r1
 801af62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af66:	f002 fb5f 	bl	801d628 <_lseek_r>
 801af6a:	1c43      	adds	r3, r0, #1
 801af6c:	89a3      	ldrh	r3, [r4, #12]
 801af6e:	bf15      	itete	ne
 801af70:	6560      	strne	r0, [r4, #84]	; 0x54
 801af72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801af76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801af7a:	81a3      	strheq	r3, [r4, #12]
 801af7c:	bf18      	it	ne
 801af7e:	81a3      	strhne	r3, [r4, #12]
 801af80:	bd10      	pop	{r4, pc}

0801af82 <__sclose>:
 801af82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af86:	f001 b87f 	b.w	801c088 <_close_r>

0801af8a <strcpy>:
 801af8a:	4603      	mov	r3, r0
 801af8c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801af90:	f803 2b01 	strb.w	r2, [r3], #1
 801af94:	2a00      	cmp	r2, #0
 801af96:	d1f9      	bne.n	801af8c <strcpy+0x2>
 801af98:	4770      	bx	lr

0801af9a <strncmp>:
 801af9a:	b510      	push	{r4, lr}
 801af9c:	b16a      	cbz	r2, 801afba <strncmp+0x20>
 801af9e:	3901      	subs	r1, #1
 801afa0:	1884      	adds	r4, r0, r2
 801afa2:	f810 3b01 	ldrb.w	r3, [r0], #1
 801afa6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801afaa:	4293      	cmp	r3, r2
 801afac:	d103      	bne.n	801afb6 <strncmp+0x1c>
 801afae:	42a0      	cmp	r0, r4
 801afb0:	d001      	beq.n	801afb6 <strncmp+0x1c>
 801afb2:	2b00      	cmp	r3, #0
 801afb4:	d1f5      	bne.n	801afa2 <strncmp+0x8>
 801afb6:	1a98      	subs	r0, r3, r2
 801afb8:	bd10      	pop	{r4, pc}
 801afba:	4610      	mov	r0, r2
 801afbc:	e7fc      	b.n	801afb8 <strncmp+0x1e>

0801afbe <sulp>:
 801afbe:	b570      	push	{r4, r5, r6, lr}
 801afc0:	4604      	mov	r4, r0
 801afc2:	460d      	mov	r5, r1
 801afc4:	ec45 4b10 	vmov	d0, r4, r5
 801afc8:	4616      	mov	r6, r2
 801afca:	f002 ff2d 	bl	801de28 <__ulp>
 801afce:	ec51 0b10 	vmov	r0, r1, d0
 801afd2:	b17e      	cbz	r6, 801aff4 <sulp+0x36>
 801afd4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801afd8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801afdc:	2b00      	cmp	r3, #0
 801afde:	dd09      	ble.n	801aff4 <sulp+0x36>
 801afe0:	051b      	lsls	r3, r3, #20
 801afe2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801afe6:	2400      	movs	r4, #0
 801afe8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801afec:	4622      	mov	r2, r4
 801afee:	462b      	mov	r3, r5
 801aff0:	f7e5 fb12 	bl	8000618 <__aeabi_dmul>
 801aff4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801aff8 <_strtod_l>:
 801aff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801affc:	b0a3      	sub	sp, #140	; 0x8c
 801affe:	461f      	mov	r7, r3
 801b000:	2300      	movs	r3, #0
 801b002:	931e      	str	r3, [sp, #120]	; 0x78
 801b004:	4ba4      	ldr	r3, [pc, #656]	; (801b298 <_strtod_l+0x2a0>)
 801b006:	9219      	str	r2, [sp, #100]	; 0x64
 801b008:	681b      	ldr	r3, [r3, #0]
 801b00a:	9307      	str	r3, [sp, #28]
 801b00c:	4604      	mov	r4, r0
 801b00e:	4618      	mov	r0, r3
 801b010:	4688      	mov	r8, r1
 801b012:	f7e5 f8ed 	bl	80001f0 <strlen>
 801b016:	f04f 0a00 	mov.w	sl, #0
 801b01a:	4605      	mov	r5, r0
 801b01c:	f04f 0b00 	mov.w	fp, #0
 801b020:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801b024:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b026:	781a      	ldrb	r2, [r3, #0]
 801b028:	2a2b      	cmp	r2, #43	; 0x2b
 801b02a:	d04c      	beq.n	801b0c6 <_strtod_l+0xce>
 801b02c:	d839      	bhi.n	801b0a2 <_strtod_l+0xaa>
 801b02e:	2a0d      	cmp	r2, #13
 801b030:	d832      	bhi.n	801b098 <_strtod_l+0xa0>
 801b032:	2a08      	cmp	r2, #8
 801b034:	d832      	bhi.n	801b09c <_strtod_l+0xa4>
 801b036:	2a00      	cmp	r2, #0
 801b038:	d03c      	beq.n	801b0b4 <_strtod_l+0xbc>
 801b03a:	2300      	movs	r3, #0
 801b03c:	930e      	str	r3, [sp, #56]	; 0x38
 801b03e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801b040:	7833      	ldrb	r3, [r6, #0]
 801b042:	2b30      	cmp	r3, #48	; 0x30
 801b044:	f040 80b4 	bne.w	801b1b0 <_strtod_l+0x1b8>
 801b048:	7873      	ldrb	r3, [r6, #1]
 801b04a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801b04e:	2b58      	cmp	r3, #88	; 0x58
 801b050:	d16c      	bne.n	801b12c <_strtod_l+0x134>
 801b052:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b054:	9301      	str	r3, [sp, #4]
 801b056:	ab1e      	add	r3, sp, #120	; 0x78
 801b058:	9702      	str	r7, [sp, #8]
 801b05a:	9300      	str	r3, [sp, #0]
 801b05c:	4a8f      	ldr	r2, [pc, #572]	; (801b29c <_strtod_l+0x2a4>)
 801b05e:	ab1f      	add	r3, sp, #124	; 0x7c
 801b060:	a91d      	add	r1, sp, #116	; 0x74
 801b062:	4620      	mov	r0, r4
 801b064:	f001 ffd4 	bl	801d010 <__gethex>
 801b068:	f010 0707 	ands.w	r7, r0, #7
 801b06c:	4605      	mov	r5, r0
 801b06e:	d005      	beq.n	801b07c <_strtod_l+0x84>
 801b070:	2f06      	cmp	r7, #6
 801b072:	d12a      	bne.n	801b0ca <_strtod_l+0xd2>
 801b074:	3601      	adds	r6, #1
 801b076:	2300      	movs	r3, #0
 801b078:	961d      	str	r6, [sp, #116]	; 0x74
 801b07a:	930e      	str	r3, [sp, #56]	; 0x38
 801b07c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b07e:	2b00      	cmp	r3, #0
 801b080:	f040 8596 	bne.w	801bbb0 <_strtod_l+0xbb8>
 801b084:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b086:	b1db      	cbz	r3, 801b0c0 <_strtod_l+0xc8>
 801b088:	4652      	mov	r2, sl
 801b08a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801b08e:	ec43 2b10 	vmov	d0, r2, r3
 801b092:	b023      	add	sp, #140	; 0x8c
 801b094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b098:	2a20      	cmp	r2, #32
 801b09a:	d1ce      	bne.n	801b03a <_strtod_l+0x42>
 801b09c:	3301      	adds	r3, #1
 801b09e:	931d      	str	r3, [sp, #116]	; 0x74
 801b0a0:	e7c0      	b.n	801b024 <_strtod_l+0x2c>
 801b0a2:	2a2d      	cmp	r2, #45	; 0x2d
 801b0a4:	d1c9      	bne.n	801b03a <_strtod_l+0x42>
 801b0a6:	2201      	movs	r2, #1
 801b0a8:	920e      	str	r2, [sp, #56]	; 0x38
 801b0aa:	1c5a      	adds	r2, r3, #1
 801b0ac:	921d      	str	r2, [sp, #116]	; 0x74
 801b0ae:	785b      	ldrb	r3, [r3, #1]
 801b0b0:	2b00      	cmp	r3, #0
 801b0b2:	d1c4      	bne.n	801b03e <_strtod_l+0x46>
 801b0b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b0b6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801b0ba:	2b00      	cmp	r3, #0
 801b0bc:	f040 8576 	bne.w	801bbac <_strtod_l+0xbb4>
 801b0c0:	4652      	mov	r2, sl
 801b0c2:	465b      	mov	r3, fp
 801b0c4:	e7e3      	b.n	801b08e <_strtod_l+0x96>
 801b0c6:	2200      	movs	r2, #0
 801b0c8:	e7ee      	b.n	801b0a8 <_strtod_l+0xb0>
 801b0ca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801b0cc:	b13a      	cbz	r2, 801b0de <_strtod_l+0xe6>
 801b0ce:	2135      	movs	r1, #53	; 0x35
 801b0d0:	a820      	add	r0, sp, #128	; 0x80
 801b0d2:	f002 ffb4 	bl	801e03e <__copybits>
 801b0d6:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b0d8:	4620      	mov	r0, r4
 801b0da:	f002 fb79 	bl	801d7d0 <_Bfree>
 801b0de:	3f01      	subs	r7, #1
 801b0e0:	2f05      	cmp	r7, #5
 801b0e2:	d807      	bhi.n	801b0f4 <_strtod_l+0xfc>
 801b0e4:	e8df f007 	tbb	[pc, r7]
 801b0e8:	1d180b0e 	.word	0x1d180b0e
 801b0ec:	030e      	.short	0x030e
 801b0ee:	f04f 0b00 	mov.w	fp, #0
 801b0f2:	46da      	mov	sl, fp
 801b0f4:	0728      	lsls	r0, r5, #28
 801b0f6:	d5c1      	bpl.n	801b07c <_strtod_l+0x84>
 801b0f8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801b0fc:	e7be      	b.n	801b07c <_strtod_l+0x84>
 801b0fe:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801b102:	e7f7      	b.n	801b0f4 <_strtod_l+0xfc>
 801b104:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801b108:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801b10a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801b10e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801b112:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801b116:	e7ed      	b.n	801b0f4 <_strtod_l+0xfc>
 801b118:	f8df b184 	ldr.w	fp, [pc, #388]	; 801b2a0 <_strtod_l+0x2a8>
 801b11c:	f04f 0a00 	mov.w	sl, #0
 801b120:	e7e8      	b.n	801b0f4 <_strtod_l+0xfc>
 801b122:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801b126:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801b12a:	e7e3      	b.n	801b0f4 <_strtod_l+0xfc>
 801b12c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b12e:	1c5a      	adds	r2, r3, #1
 801b130:	921d      	str	r2, [sp, #116]	; 0x74
 801b132:	785b      	ldrb	r3, [r3, #1]
 801b134:	2b30      	cmp	r3, #48	; 0x30
 801b136:	d0f9      	beq.n	801b12c <_strtod_l+0x134>
 801b138:	2b00      	cmp	r3, #0
 801b13a:	d09f      	beq.n	801b07c <_strtod_l+0x84>
 801b13c:	2301      	movs	r3, #1
 801b13e:	f04f 0900 	mov.w	r9, #0
 801b142:	9304      	str	r3, [sp, #16]
 801b144:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b146:	930a      	str	r3, [sp, #40]	; 0x28
 801b148:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801b14c:	464f      	mov	r7, r9
 801b14e:	220a      	movs	r2, #10
 801b150:	981d      	ldr	r0, [sp, #116]	; 0x74
 801b152:	7806      	ldrb	r6, [r0, #0]
 801b154:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801b158:	b2d9      	uxtb	r1, r3
 801b15a:	2909      	cmp	r1, #9
 801b15c:	d92a      	bls.n	801b1b4 <_strtod_l+0x1bc>
 801b15e:	9907      	ldr	r1, [sp, #28]
 801b160:	462a      	mov	r2, r5
 801b162:	f7ff ff1a 	bl	801af9a <strncmp>
 801b166:	b398      	cbz	r0, 801b1d0 <_strtod_l+0x1d8>
 801b168:	2000      	movs	r0, #0
 801b16a:	4633      	mov	r3, r6
 801b16c:	463d      	mov	r5, r7
 801b16e:	9007      	str	r0, [sp, #28]
 801b170:	4602      	mov	r2, r0
 801b172:	2b65      	cmp	r3, #101	; 0x65
 801b174:	d001      	beq.n	801b17a <_strtod_l+0x182>
 801b176:	2b45      	cmp	r3, #69	; 0x45
 801b178:	d118      	bne.n	801b1ac <_strtod_l+0x1b4>
 801b17a:	b91d      	cbnz	r5, 801b184 <_strtod_l+0x18c>
 801b17c:	9b04      	ldr	r3, [sp, #16]
 801b17e:	4303      	orrs	r3, r0
 801b180:	d098      	beq.n	801b0b4 <_strtod_l+0xbc>
 801b182:	2500      	movs	r5, #0
 801b184:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801b188:	f108 0301 	add.w	r3, r8, #1
 801b18c:	931d      	str	r3, [sp, #116]	; 0x74
 801b18e:	f898 3001 	ldrb.w	r3, [r8, #1]
 801b192:	2b2b      	cmp	r3, #43	; 0x2b
 801b194:	d075      	beq.n	801b282 <_strtod_l+0x28a>
 801b196:	2b2d      	cmp	r3, #45	; 0x2d
 801b198:	d07b      	beq.n	801b292 <_strtod_l+0x29a>
 801b19a:	f04f 0c00 	mov.w	ip, #0
 801b19e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801b1a2:	2909      	cmp	r1, #9
 801b1a4:	f240 8082 	bls.w	801b2ac <_strtod_l+0x2b4>
 801b1a8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801b1ac:	2600      	movs	r6, #0
 801b1ae:	e09d      	b.n	801b2ec <_strtod_l+0x2f4>
 801b1b0:	2300      	movs	r3, #0
 801b1b2:	e7c4      	b.n	801b13e <_strtod_l+0x146>
 801b1b4:	2f08      	cmp	r7, #8
 801b1b6:	bfd8      	it	le
 801b1b8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801b1ba:	f100 0001 	add.w	r0, r0, #1
 801b1be:	bfda      	itte	le
 801b1c0:	fb02 3301 	mlale	r3, r2, r1, r3
 801b1c4:	9309      	strle	r3, [sp, #36]	; 0x24
 801b1c6:	fb02 3909 	mlagt	r9, r2, r9, r3
 801b1ca:	3701      	adds	r7, #1
 801b1cc:	901d      	str	r0, [sp, #116]	; 0x74
 801b1ce:	e7bf      	b.n	801b150 <_strtod_l+0x158>
 801b1d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b1d2:	195a      	adds	r2, r3, r5
 801b1d4:	921d      	str	r2, [sp, #116]	; 0x74
 801b1d6:	5d5b      	ldrb	r3, [r3, r5]
 801b1d8:	2f00      	cmp	r7, #0
 801b1da:	d037      	beq.n	801b24c <_strtod_l+0x254>
 801b1dc:	9007      	str	r0, [sp, #28]
 801b1de:	463d      	mov	r5, r7
 801b1e0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801b1e4:	2a09      	cmp	r2, #9
 801b1e6:	d912      	bls.n	801b20e <_strtod_l+0x216>
 801b1e8:	2201      	movs	r2, #1
 801b1ea:	e7c2      	b.n	801b172 <_strtod_l+0x17a>
 801b1ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b1ee:	1c5a      	adds	r2, r3, #1
 801b1f0:	921d      	str	r2, [sp, #116]	; 0x74
 801b1f2:	785b      	ldrb	r3, [r3, #1]
 801b1f4:	3001      	adds	r0, #1
 801b1f6:	2b30      	cmp	r3, #48	; 0x30
 801b1f8:	d0f8      	beq.n	801b1ec <_strtod_l+0x1f4>
 801b1fa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801b1fe:	2a08      	cmp	r2, #8
 801b200:	f200 84db 	bhi.w	801bbba <_strtod_l+0xbc2>
 801b204:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b206:	9007      	str	r0, [sp, #28]
 801b208:	2000      	movs	r0, #0
 801b20a:	920a      	str	r2, [sp, #40]	; 0x28
 801b20c:	4605      	mov	r5, r0
 801b20e:	3b30      	subs	r3, #48	; 0x30
 801b210:	f100 0201 	add.w	r2, r0, #1
 801b214:	d014      	beq.n	801b240 <_strtod_l+0x248>
 801b216:	9907      	ldr	r1, [sp, #28]
 801b218:	4411      	add	r1, r2
 801b21a:	9107      	str	r1, [sp, #28]
 801b21c:	462a      	mov	r2, r5
 801b21e:	eb00 0e05 	add.w	lr, r0, r5
 801b222:	210a      	movs	r1, #10
 801b224:	4572      	cmp	r2, lr
 801b226:	d113      	bne.n	801b250 <_strtod_l+0x258>
 801b228:	182a      	adds	r2, r5, r0
 801b22a:	2a08      	cmp	r2, #8
 801b22c:	f105 0501 	add.w	r5, r5, #1
 801b230:	4405      	add	r5, r0
 801b232:	dc1c      	bgt.n	801b26e <_strtod_l+0x276>
 801b234:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b236:	220a      	movs	r2, #10
 801b238:	fb02 3301 	mla	r3, r2, r1, r3
 801b23c:	9309      	str	r3, [sp, #36]	; 0x24
 801b23e:	2200      	movs	r2, #0
 801b240:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b242:	1c59      	adds	r1, r3, #1
 801b244:	911d      	str	r1, [sp, #116]	; 0x74
 801b246:	785b      	ldrb	r3, [r3, #1]
 801b248:	4610      	mov	r0, r2
 801b24a:	e7c9      	b.n	801b1e0 <_strtod_l+0x1e8>
 801b24c:	4638      	mov	r0, r7
 801b24e:	e7d2      	b.n	801b1f6 <_strtod_l+0x1fe>
 801b250:	2a08      	cmp	r2, #8
 801b252:	dc04      	bgt.n	801b25e <_strtod_l+0x266>
 801b254:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801b256:	434e      	muls	r6, r1
 801b258:	9609      	str	r6, [sp, #36]	; 0x24
 801b25a:	3201      	adds	r2, #1
 801b25c:	e7e2      	b.n	801b224 <_strtod_l+0x22c>
 801b25e:	f102 0c01 	add.w	ip, r2, #1
 801b262:	f1bc 0f10 	cmp.w	ip, #16
 801b266:	bfd8      	it	le
 801b268:	fb01 f909 	mulle.w	r9, r1, r9
 801b26c:	e7f5      	b.n	801b25a <_strtod_l+0x262>
 801b26e:	2d10      	cmp	r5, #16
 801b270:	bfdc      	itt	le
 801b272:	220a      	movle	r2, #10
 801b274:	fb02 3909 	mlale	r9, r2, r9, r3
 801b278:	e7e1      	b.n	801b23e <_strtod_l+0x246>
 801b27a:	2300      	movs	r3, #0
 801b27c:	9307      	str	r3, [sp, #28]
 801b27e:	2201      	movs	r2, #1
 801b280:	e77c      	b.n	801b17c <_strtod_l+0x184>
 801b282:	f04f 0c00 	mov.w	ip, #0
 801b286:	f108 0302 	add.w	r3, r8, #2
 801b28a:	931d      	str	r3, [sp, #116]	; 0x74
 801b28c:	f898 3002 	ldrb.w	r3, [r8, #2]
 801b290:	e785      	b.n	801b19e <_strtod_l+0x1a6>
 801b292:	f04f 0c01 	mov.w	ip, #1
 801b296:	e7f6      	b.n	801b286 <_strtod_l+0x28e>
 801b298:	0802103c 	.word	0x0802103c
 801b29c:	08020eb0 	.word	0x08020eb0
 801b2a0:	7ff00000 	.word	0x7ff00000
 801b2a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b2a6:	1c59      	adds	r1, r3, #1
 801b2a8:	911d      	str	r1, [sp, #116]	; 0x74
 801b2aa:	785b      	ldrb	r3, [r3, #1]
 801b2ac:	2b30      	cmp	r3, #48	; 0x30
 801b2ae:	d0f9      	beq.n	801b2a4 <_strtod_l+0x2ac>
 801b2b0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801b2b4:	2908      	cmp	r1, #8
 801b2b6:	f63f af79 	bhi.w	801b1ac <_strtod_l+0x1b4>
 801b2ba:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801b2be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b2c0:	9308      	str	r3, [sp, #32]
 801b2c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b2c4:	1c59      	adds	r1, r3, #1
 801b2c6:	911d      	str	r1, [sp, #116]	; 0x74
 801b2c8:	785b      	ldrb	r3, [r3, #1]
 801b2ca:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801b2ce:	2e09      	cmp	r6, #9
 801b2d0:	d937      	bls.n	801b342 <_strtod_l+0x34a>
 801b2d2:	9e08      	ldr	r6, [sp, #32]
 801b2d4:	1b89      	subs	r1, r1, r6
 801b2d6:	2908      	cmp	r1, #8
 801b2d8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801b2dc:	dc02      	bgt.n	801b2e4 <_strtod_l+0x2ec>
 801b2de:	4576      	cmp	r6, lr
 801b2e0:	bfa8      	it	ge
 801b2e2:	4676      	movge	r6, lr
 801b2e4:	f1bc 0f00 	cmp.w	ip, #0
 801b2e8:	d000      	beq.n	801b2ec <_strtod_l+0x2f4>
 801b2ea:	4276      	negs	r6, r6
 801b2ec:	2d00      	cmp	r5, #0
 801b2ee:	d14f      	bne.n	801b390 <_strtod_l+0x398>
 801b2f0:	9904      	ldr	r1, [sp, #16]
 801b2f2:	4301      	orrs	r1, r0
 801b2f4:	f47f aec2 	bne.w	801b07c <_strtod_l+0x84>
 801b2f8:	2a00      	cmp	r2, #0
 801b2fa:	f47f aedb 	bne.w	801b0b4 <_strtod_l+0xbc>
 801b2fe:	2b69      	cmp	r3, #105	; 0x69
 801b300:	d027      	beq.n	801b352 <_strtod_l+0x35a>
 801b302:	dc24      	bgt.n	801b34e <_strtod_l+0x356>
 801b304:	2b49      	cmp	r3, #73	; 0x49
 801b306:	d024      	beq.n	801b352 <_strtod_l+0x35a>
 801b308:	2b4e      	cmp	r3, #78	; 0x4e
 801b30a:	f47f aed3 	bne.w	801b0b4 <_strtod_l+0xbc>
 801b30e:	499e      	ldr	r1, [pc, #632]	; (801b588 <_strtod_l+0x590>)
 801b310:	a81d      	add	r0, sp, #116	; 0x74
 801b312:	f002 f8d5 	bl	801d4c0 <__match>
 801b316:	2800      	cmp	r0, #0
 801b318:	f43f aecc 	beq.w	801b0b4 <_strtod_l+0xbc>
 801b31c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b31e:	781b      	ldrb	r3, [r3, #0]
 801b320:	2b28      	cmp	r3, #40	; 0x28
 801b322:	d12d      	bne.n	801b380 <_strtod_l+0x388>
 801b324:	4999      	ldr	r1, [pc, #612]	; (801b58c <_strtod_l+0x594>)
 801b326:	aa20      	add	r2, sp, #128	; 0x80
 801b328:	a81d      	add	r0, sp, #116	; 0x74
 801b32a:	f002 f8dd 	bl	801d4e8 <__hexnan>
 801b32e:	2805      	cmp	r0, #5
 801b330:	d126      	bne.n	801b380 <_strtod_l+0x388>
 801b332:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b334:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801b338:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801b33c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801b340:	e69c      	b.n	801b07c <_strtod_l+0x84>
 801b342:	210a      	movs	r1, #10
 801b344:	fb01 3e0e 	mla	lr, r1, lr, r3
 801b348:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801b34c:	e7b9      	b.n	801b2c2 <_strtod_l+0x2ca>
 801b34e:	2b6e      	cmp	r3, #110	; 0x6e
 801b350:	e7db      	b.n	801b30a <_strtod_l+0x312>
 801b352:	498f      	ldr	r1, [pc, #572]	; (801b590 <_strtod_l+0x598>)
 801b354:	a81d      	add	r0, sp, #116	; 0x74
 801b356:	f002 f8b3 	bl	801d4c0 <__match>
 801b35a:	2800      	cmp	r0, #0
 801b35c:	f43f aeaa 	beq.w	801b0b4 <_strtod_l+0xbc>
 801b360:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b362:	498c      	ldr	r1, [pc, #560]	; (801b594 <_strtod_l+0x59c>)
 801b364:	3b01      	subs	r3, #1
 801b366:	a81d      	add	r0, sp, #116	; 0x74
 801b368:	931d      	str	r3, [sp, #116]	; 0x74
 801b36a:	f002 f8a9 	bl	801d4c0 <__match>
 801b36e:	b910      	cbnz	r0, 801b376 <_strtod_l+0x37e>
 801b370:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b372:	3301      	adds	r3, #1
 801b374:	931d      	str	r3, [sp, #116]	; 0x74
 801b376:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801b5a4 <_strtod_l+0x5ac>
 801b37a:	f04f 0a00 	mov.w	sl, #0
 801b37e:	e67d      	b.n	801b07c <_strtod_l+0x84>
 801b380:	4885      	ldr	r0, [pc, #532]	; (801b598 <_strtod_l+0x5a0>)
 801b382:	f7fe fa75 	bl	8019870 <nan>
 801b386:	ed8d 0b04 	vstr	d0, [sp, #16]
 801b38a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801b38e:	e675      	b.n	801b07c <_strtod_l+0x84>
 801b390:	9b07      	ldr	r3, [sp, #28]
 801b392:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b394:	1af3      	subs	r3, r6, r3
 801b396:	2f00      	cmp	r7, #0
 801b398:	bf08      	it	eq
 801b39a:	462f      	moveq	r7, r5
 801b39c:	2d10      	cmp	r5, #16
 801b39e:	9308      	str	r3, [sp, #32]
 801b3a0:	46a8      	mov	r8, r5
 801b3a2:	bfa8      	it	ge
 801b3a4:	f04f 0810 	movge.w	r8, #16
 801b3a8:	f7e5 f8bc 	bl	8000524 <__aeabi_ui2d>
 801b3ac:	2d09      	cmp	r5, #9
 801b3ae:	4682      	mov	sl, r0
 801b3b0:	468b      	mov	fp, r1
 801b3b2:	dd13      	ble.n	801b3dc <_strtod_l+0x3e4>
 801b3b4:	4b79      	ldr	r3, [pc, #484]	; (801b59c <_strtod_l+0x5a4>)
 801b3b6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801b3ba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801b3be:	f7e5 f92b 	bl	8000618 <__aeabi_dmul>
 801b3c2:	4682      	mov	sl, r0
 801b3c4:	4648      	mov	r0, r9
 801b3c6:	468b      	mov	fp, r1
 801b3c8:	f7e5 f8ac 	bl	8000524 <__aeabi_ui2d>
 801b3cc:	4602      	mov	r2, r0
 801b3ce:	460b      	mov	r3, r1
 801b3d0:	4650      	mov	r0, sl
 801b3d2:	4659      	mov	r1, fp
 801b3d4:	f7e4 ff6a 	bl	80002ac <__adddf3>
 801b3d8:	4682      	mov	sl, r0
 801b3da:	468b      	mov	fp, r1
 801b3dc:	2d0f      	cmp	r5, #15
 801b3de:	dc38      	bgt.n	801b452 <_strtod_l+0x45a>
 801b3e0:	9b08      	ldr	r3, [sp, #32]
 801b3e2:	2b00      	cmp	r3, #0
 801b3e4:	f43f ae4a 	beq.w	801b07c <_strtod_l+0x84>
 801b3e8:	dd24      	ble.n	801b434 <_strtod_l+0x43c>
 801b3ea:	2b16      	cmp	r3, #22
 801b3ec:	dc0b      	bgt.n	801b406 <_strtod_l+0x40e>
 801b3ee:	4d6b      	ldr	r5, [pc, #428]	; (801b59c <_strtod_l+0x5a4>)
 801b3f0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801b3f4:	e9d5 0100 	ldrd	r0, r1, [r5]
 801b3f8:	4652      	mov	r2, sl
 801b3fa:	465b      	mov	r3, fp
 801b3fc:	f7e5 f90c 	bl	8000618 <__aeabi_dmul>
 801b400:	4682      	mov	sl, r0
 801b402:	468b      	mov	fp, r1
 801b404:	e63a      	b.n	801b07c <_strtod_l+0x84>
 801b406:	9a08      	ldr	r2, [sp, #32]
 801b408:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801b40c:	4293      	cmp	r3, r2
 801b40e:	db20      	blt.n	801b452 <_strtod_l+0x45a>
 801b410:	4c62      	ldr	r4, [pc, #392]	; (801b59c <_strtod_l+0x5a4>)
 801b412:	f1c5 050f 	rsb	r5, r5, #15
 801b416:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801b41a:	4652      	mov	r2, sl
 801b41c:	465b      	mov	r3, fp
 801b41e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b422:	f7e5 f8f9 	bl	8000618 <__aeabi_dmul>
 801b426:	9b08      	ldr	r3, [sp, #32]
 801b428:	1b5d      	subs	r5, r3, r5
 801b42a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801b42e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801b432:	e7e3      	b.n	801b3fc <_strtod_l+0x404>
 801b434:	9b08      	ldr	r3, [sp, #32]
 801b436:	3316      	adds	r3, #22
 801b438:	db0b      	blt.n	801b452 <_strtod_l+0x45a>
 801b43a:	9b07      	ldr	r3, [sp, #28]
 801b43c:	4a57      	ldr	r2, [pc, #348]	; (801b59c <_strtod_l+0x5a4>)
 801b43e:	1b9e      	subs	r6, r3, r6
 801b440:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801b444:	e9d6 2300 	ldrd	r2, r3, [r6]
 801b448:	4650      	mov	r0, sl
 801b44a:	4659      	mov	r1, fp
 801b44c:	f7e5 fa0e 	bl	800086c <__aeabi_ddiv>
 801b450:	e7d6      	b.n	801b400 <_strtod_l+0x408>
 801b452:	9b08      	ldr	r3, [sp, #32]
 801b454:	eba5 0808 	sub.w	r8, r5, r8
 801b458:	4498      	add	r8, r3
 801b45a:	f1b8 0f00 	cmp.w	r8, #0
 801b45e:	dd71      	ble.n	801b544 <_strtod_l+0x54c>
 801b460:	f018 030f 	ands.w	r3, r8, #15
 801b464:	d00a      	beq.n	801b47c <_strtod_l+0x484>
 801b466:	494d      	ldr	r1, [pc, #308]	; (801b59c <_strtod_l+0x5a4>)
 801b468:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801b46c:	4652      	mov	r2, sl
 801b46e:	465b      	mov	r3, fp
 801b470:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b474:	f7e5 f8d0 	bl	8000618 <__aeabi_dmul>
 801b478:	4682      	mov	sl, r0
 801b47a:	468b      	mov	fp, r1
 801b47c:	f038 080f 	bics.w	r8, r8, #15
 801b480:	d04d      	beq.n	801b51e <_strtod_l+0x526>
 801b482:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801b486:	dd22      	ble.n	801b4ce <_strtod_l+0x4d6>
 801b488:	2500      	movs	r5, #0
 801b48a:	462e      	mov	r6, r5
 801b48c:	9509      	str	r5, [sp, #36]	; 0x24
 801b48e:	9507      	str	r5, [sp, #28]
 801b490:	2322      	movs	r3, #34	; 0x22
 801b492:	f8df b110 	ldr.w	fp, [pc, #272]	; 801b5a4 <_strtod_l+0x5ac>
 801b496:	6023      	str	r3, [r4, #0]
 801b498:	f04f 0a00 	mov.w	sl, #0
 801b49c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b49e:	2b00      	cmp	r3, #0
 801b4a0:	f43f adec 	beq.w	801b07c <_strtod_l+0x84>
 801b4a4:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b4a6:	4620      	mov	r0, r4
 801b4a8:	f002 f992 	bl	801d7d0 <_Bfree>
 801b4ac:	9907      	ldr	r1, [sp, #28]
 801b4ae:	4620      	mov	r0, r4
 801b4b0:	f002 f98e 	bl	801d7d0 <_Bfree>
 801b4b4:	4631      	mov	r1, r6
 801b4b6:	4620      	mov	r0, r4
 801b4b8:	f002 f98a 	bl	801d7d0 <_Bfree>
 801b4bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b4be:	4620      	mov	r0, r4
 801b4c0:	f002 f986 	bl	801d7d0 <_Bfree>
 801b4c4:	4629      	mov	r1, r5
 801b4c6:	4620      	mov	r0, r4
 801b4c8:	f002 f982 	bl	801d7d0 <_Bfree>
 801b4cc:	e5d6      	b.n	801b07c <_strtod_l+0x84>
 801b4ce:	2300      	movs	r3, #0
 801b4d0:	ea4f 1828 	mov.w	r8, r8, asr #4
 801b4d4:	4650      	mov	r0, sl
 801b4d6:	4659      	mov	r1, fp
 801b4d8:	4699      	mov	r9, r3
 801b4da:	f1b8 0f01 	cmp.w	r8, #1
 801b4de:	dc21      	bgt.n	801b524 <_strtod_l+0x52c>
 801b4e0:	b10b      	cbz	r3, 801b4e6 <_strtod_l+0x4ee>
 801b4e2:	4682      	mov	sl, r0
 801b4e4:	468b      	mov	fp, r1
 801b4e6:	4b2e      	ldr	r3, [pc, #184]	; (801b5a0 <_strtod_l+0x5a8>)
 801b4e8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801b4ec:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801b4f0:	4652      	mov	r2, sl
 801b4f2:	465b      	mov	r3, fp
 801b4f4:	e9d9 0100 	ldrd	r0, r1, [r9]
 801b4f8:	f7e5 f88e 	bl	8000618 <__aeabi_dmul>
 801b4fc:	4b29      	ldr	r3, [pc, #164]	; (801b5a4 <_strtod_l+0x5ac>)
 801b4fe:	460a      	mov	r2, r1
 801b500:	400b      	ands	r3, r1
 801b502:	4929      	ldr	r1, [pc, #164]	; (801b5a8 <_strtod_l+0x5b0>)
 801b504:	428b      	cmp	r3, r1
 801b506:	4682      	mov	sl, r0
 801b508:	d8be      	bhi.n	801b488 <_strtod_l+0x490>
 801b50a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801b50e:	428b      	cmp	r3, r1
 801b510:	bf86      	itte	hi
 801b512:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801b5ac <_strtod_l+0x5b4>
 801b516:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 801b51a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801b51e:	2300      	movs	r3, #0
 801b520:	9304      	str	r3, [sp, #16]
 801b522:	e081      	b.n	801b628 <_strtod_l+0x630>
 801b524:	f018 0f01 	tst.w	r8, #1
 801b528:	d007      	beq.n	801b53a <_strtod_l+0x542>
 801b52a:	4b1d      	ldr	r3, [pc, #116]	; (801b5a0 <_strtod_l+0x5a8>)
 801b52c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801b530:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b534:	f7e5 f870 	bl	8000618 <__aeabi_dmul>
 801b538:	2301      	movs	r3, #1
 801b53a:	f109 0901 	add.w	r9, r9, #1
 801b53e:	ea4f 0868 	mov.w	r8, r8, asr #1
 801b542:	e7ca      	b.n	801b4da <_strtod_l+0x4e2>
 801b544:	d0eb      	beq.n	801b51e <_strtod_l+0x526>
 801b546:	f1c8 0800 	rsb	r8, r8, #0
 801b54a:	f018 020f 	ands.w	r2, r8, #15
 801b54e:	d00a      	beq.n	801b566 <_strtod_l+0x56e>
 801b550:	4b12      	ldr	r3, [pc, #72]	; (801b59c <_strtod_l+0x5a4>)
 801b552:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b556:	4650      	mov	r0, sl
 801b558:	4659      	mov	r1, fp
 801b55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b55e:	f7e5 f985 	bl	800086c <__aeabi_ddiv>
 801b562:	4682      	mov	sl, r0
 801b564:	468b      	mov	fp, r1
 801b566:	ea5f 1828 	movs.w	r8, r8, asr #4
 801b56a:	d0d8      	beq.n	801b51e <_strtod_l+0x526>
 801b56c:	f1b8 0f1f 	cmp.w	r8, #31
 801b570:	dd1e      	ble.n	801b5b0 <_strtod_l+0x5b8>
 801b572:	2500      	movs	r5, #0
 801b574:	462e      	mov	r6, r5
 801b576:	9509      	str	r5, [sp, #36]	; 0x24
 801b578:	9507      	str	r5, [sp, #28]
 801b57a:	2322      	movs	r3, #34	; 0x22
 801b57c:	f04f 0a00 	mov.w	sl, #0
 801b580:	f04f 0b00 	mov.w	fp, #0
 801b584:	6023      	str	r3, [r4, #0]
 801b586:	e789      	b.n	801b49c <_strtod_l+0x4a4>
 801b588:	08020e85 	.word	0x08020e85
 801b58c:	08020ec4 	.word	0x08020ec4
 801b590:	08020e7d 	.word	0x08020e7d
 801b594:	08020f3f 	.word	0x08020f3f
 801b598:	08020f3b 	.word	0x08020f3b
 801b59c:	080210d8 	.word	0x080210d8
 801b5a0:	080210b0 	.word	0x080210b0
 801b5a4:	7ff00000 	.word	0x7ff00000
 801b5a8:	7ca00000 	.word	0x7ca00000
 801b5ac:	7fefffff 	.word	0x7fefffff
 801b5b0:	f018 0310 	ands.w	r3, r8, #16
 801b5b4:	bf18      	it	ne
 801b5b6:	236a      	movne	r3, #106	; 0x6a
 801b5b8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801b970 <_strtod_l+0x978>
 801b5bc:	9304      	str	r3, [sp, #16]
 801b5be:	4650      	mov	r0, sl
 801b5c0:	4659      	mov	r1, fp
 801b5c2:	2300      	movs	r3, #0
 801b5c4:	f018 0f01 	tst.w	r8, #1
 801b5c8:	d004      	beq.n	801b5d4 <_strtod_l+0x5dc>
 801b5ca:	e9d9 2300 	ldrd	r2, r3, [r9]
 801b5ce:	f7e5 f823 	bl	8000618 <__aeabi_dmul>
 801b5d2:	2301      	movs	r3, #1
 801b5d4:	ea5f 0868 	movs.w	r8, r8, asr #1
 801b5d8:	f109 0908 	add.w	r9, r9, #8
 801b5dc:	d1f2      	bne.n	801b5c4 <_strtod_l+0x5cc>
 801b5de:	b10b      	cbz	r3, 801b5e4 <_strtod_l+0x5ec>
 801b5e0:	4682      	mov	sl, r0
 801b5e2:	468b      	mov	fp, r1
 801b5e4:	9b04      	ldr	r3, [sp, #16]
 801b5e6:	b1bb      	cbz	r3, 801b618 <_strtod_l+0x620>
 801b5e8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801b5ec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801b5f0:	2b00      	cmp	r3, #0
 801b5f2:	4659      	mov	r1, fp
 801b5f4:	dd10      	ble.n	801b618 <_strtod_l+0x620>
 801b5f6:	2b1f      	cmp	r3, #31
 801b5f8:	f340 8128 	ble.w	801b84c <_strtod_l+0x854>
 801b5fc:	2b34      	cmp	r3, #52	; 0x34
 801b5fe:	bfde      	ittt	le
 801b600:	3b20      	suble	r3, #32
 801b602:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 801b606:	fa02 f303 	lslle.w	r3, r2, r3
 801b60a:	f04f 0a00 	mov.w	sl, #0
 801b60e:	bfcc      	ite	gt
 801b610:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801b614:	ea03 0b01 	andle.w	fp, r3, r1
 801b618:	2200      	movs	r2, #0
 801b61a:	2300      	movs	r3, #0
 801b61c:	4650      	mov	r0, sl
 801b61e:	4659      	mov	r1, fp
 801b620:	f7e5 fa62 	bl	8000ae8 <__aeabi_dcmpeq>
 801b624:	2800      	cmp	r0, #0
 801b626:	d1a4      	bne.n	801b572 <_strtod_l+0x57a>
 801b628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b62a:	9300      	str	r3, [sp, #0]
 801b62c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801b62e:	462b      	mov	r3, r5
 801b630:	463a      	mov	r2, r7
 801b632:	4620      	mov	r0, r4
 801b634:	f002 f938 	bl	801d8a8 <__s2b>
 801b638:	9009      	str	r0, [sp, #36]	; 0x24
 801b63a:	2800      	cmp	r0, #0
 801b63c:	f43f af24 	beq.w	801b488 <_strtod_l+0x490>
 801b640:	9b07      	ldr	r3, [sp, #28]
 801b642:	1b9e      	subs	r6, r3, r6
 801b644:	9b08      	ldr	r3, [sp, #32]
 801b646:	2b00      	cmp	r3, #0
 801b648:	bfb4      	ite	lt
 801b64a:	4633      	movlt	r3, r6
 801b64c:	2300      	movge	r3, #0
 801b64e:	9310      	str	r3, [sp, #64]	; 0x40
 801b650:	9b08      	ldr	r3, [sp, #32]
 801b652:	2500      	movs	r5, #0
 801b654:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b658:	9318      	str	r3, [sp, #96]	; 0x60
 801b65a:	462e      	mov	r6, r5
 801b65c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b65e:	4620      	mov	r0, r4
 801b660:	6859      	ldr	r1, [r3, #4]
 801b662:	f002 f875 	bl	801d750 <_Balloc>
 801b666:	9007      	str	r0, [sp, #28]
 801b668:	2800      	cmp	r0, #0
 801b66a:	f43f af11 	beq.w	801b490 <_strtod_l+0x498>
 801b66e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b670:	691a      	ldr	r2, [r3, #16]
 801b672:	3202      	adds	r2, #2
 801b674:	f103 010c 	add.w	r1, r3, #12
 801b678:	0092      	lsls	r2, r2, #2
 801b67a:	300c      	adds	r0, #12
 801b67c:	f7fe fb4e 	bl	8019d1c <memcpy>
 801b680:	ec4b ab10 	vmov	d0, sl, fp
 801b684:	aa20      	add	r2, sp, #128	; 0x80
 801b686:	a91f      	add	r1, sp, #124	; 0x7c
 801b688:	4620      	mov	r0, r4
 801b68a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801b68e:	f002 fc47 	bl	801df20 <__d2b>
 801b692:	901e      	str	r0, [sp, #120]	; 0x78
 801b694:	2800      	cmp	r0, #0
 801b696:	f43f aefb 	beq.w	801b490 <_strtod_l+0x498>
 801b69a:	2101      	movs	r1, #1
 801b69c:	4620      	mov	r0, r4
 801b69e:	f002 f99d 	bl	801d9dc <__i2b>
 801b6a2:	4606      	mov	r6, r0
 801b6a4:	2800      	cmp	r0, #0
 801b6a6:	f43f aef3 	beq.w	801b490 <_strtod_l+0x498>
 801b6aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b6ac:	9904      	ldr	r1, [sp, #16]
 801b6ae:	2b00      	cmp	r3, #0
 801b6b0:	bfab      	itete	ge
 801b6b2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801b6b4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801b6b6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801b6b8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801b6bc:	bfac      	ite	ge
 801b6be:	eb03 0902 	addge.w	r9, r3, r2
 801b6c2:	1ad7      	sublt	r7, r2, r3
 801b6c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b6c6:	eba3 0801 	sub.w	r8, r3, r1
 801b6ca:	4490      	add	r8, r2
 801b6cc:	4ba3      	ldr	r3, [pc, #652]	; (801b95c <_strtod_l+0x964>)
 801b6ce:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801b6d2:	4598      	cmp	r8, r3
 801b6d4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801b6d8:	f280 80cc 	bge.w	801b874 <_strtod_l+0x87c>
 801b6dc:	eba3 0308 	sub.w	r3, r3, r8
 801b6e0:	2b1f      	cmp	r3, #31
 801b6e2:	eba2 0203 	sub.w	r2, r2, r3
 801b6e6:	f04f 0101 	mov.w	r1, #1
 801b6ea:	f300 80b6 	bgt.w	801b85a <_strtod_l+0x862>
 801b6ee:	fa01 f303 	lsl.w	r3, r1, r3
 801b6f2:	9311      	str	r3, [sp, #68]	; 0x44
 801b6f4:	2300      	movs	r3, #0
 801b6f6:	930c      	str	r3, [sp, #48]	; 0x30
 801b6f8:	eb09 0802 	add.w	r8, r9, r2
 801b6fc:	9b04      	ldr	r3, [sp, #16]
 801b6fe:	45c1      	cmp	r9, r8
 801b700:	4417      	add	r7, r2
 801b702:	441f      	add	r7, r3
 801b704:	464b      	mov	r3, r9
 801b706:	bfa8      	it	ge
 801b708:	4643      	movge	r3, r8
 801b70a:	42bb      	cmp	r3, r7
 801b70c:	bfa8      	it	ge
 801b70e:	463b      	movge	r3, r7
 801b710:	2b00      	cmp	r3, #0
 801b712:	bfc2      	ittt	gt
 801b714:	eba8 0803 	subgt.w	r8, r8, r3
 801b718:	1aff      	subgt	r7, r7, r3
 801b71a:	eba9 0903 	subgt.w	r9, r9, r3
 801b71e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b720:	2b00      	cmp	r3, #0
 801b722:	dd17      	ble.n	801b754 <_strtod_l+0x75c>
 801b724:	4631      	mov	r1, r6
 801b726:	461a      	mov	r2, r3
 801b728:	4620      	mov	r0, r4
 801b72a:	f002 fa13 	bl	801db54 <__pow5mult>
 801b72e:	4606      	mov	r6, r0
 801b730:	2800      	cmp	r0, #0
 801b732:	f43f aead 	beq.w	801b490 <_strtod_l+0x498>
 801b736:	4601      	mov	r1, r0
 801b738:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801b73a:	4620      	mov	r0, r4
 801b73c:	f002 f964 	bl	801da08 <__multiply>
 801b740:	900f      	str	r0, [sp, #60]	; 0x3c
 801b742:	2800      	cmp	r0, #0
 801b744:	f43f aea4 	beq.w	801b490 <_strtod_l+0x498>
 801b748:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b74a:	4620      	mov	r0, r4
 801b74c:	f002 f840 	bl	801d7d0 <_Bfree>
 801b750:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b752:	931e      	str	r3, [sp, #120]	; 0x78
 801b754:	f1b8 0f00 	cmp.w	r8, #0
 801b758:	f300 8091 	bgt.w	801b87e <_strtod_l+0x886>
 801b75c:	9b08      	ldr	r3, [sp, #32]
 801b75e:	2b00      	cmp	r3, #0
 801b760:	dd08      	ble.n	801b774 <_strtod_l+0x77c>
 801b762:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b764:	9907      	ldr	r1, [sp, #28]
 801b766:	4620      	mov	r0, r4
 801b768:	f002 f9f4 	bl	801db54 <__pow5mult>
 801b76c:	9007      	str	r0, [sp, #28]
 801b76e:	2800      	cmp	r0, #0
 801b770:	f43f ae8e 	beq.w	801b490 <_strtod_l+0x498>
 801b774:	2f00      	cmp	r7, #0
 801b776:	dd08      	ble.n	801b78a <_strtod_l+0x792>
 801b778:	9907      	ldr	r1, [sp, #28]
 801b77a:	463a      	mov	r2, r7
 801b77c:	4620      	mov	r0, r4
 801b77e:	f002 fa43 	bl	801dc08 <__lshift>
 801b782:	9007      	str	r0, [sp, #28]
 801b784:	2800      	cmp	r0, #0
 801b786:	f43f ae83 	beq.w	801b490 <_strtod_l+0x498>
 801b78a:	f1b9 0f00 	cmp.w	r9, #0
 801b78e:	dd08      	ble.n	801b7a2 <_strtod_l+0x7aa>
 801b790:	4631      	mov	r1, r6
 801b792:	464a      	mov	r2, r9
 801b794:	4620      	mov	r0, r4
 801b796:	f002 fa37 	bl	801dc08 <__lshift>
 801b79a:	4606      	mov	r6, r0
 801b79c:	2800      	cmp	r0, #0
 801b79e:	f43f ae77 	beq.w	801b490 <_strtod_l+0x498>
 801b7a2:	9a07      	ldr	r2, [sp, #28]
 801b7a4:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b7a6:	4620      	mov	r0, r4
 801b7a8:	f002 fab6 	bl	801dd18 <__mdiff>
 801b7ac:	4605      	mov	r5, r0
 801b7ae:	2800      	cmp	r0, #0
 801b7b0:	f43f ae6e 	beq.w	801b490 <_strtod_l+0x498>
 801b7b4:	68c3      	ldr	r3, [r0, #12]
 801b7b6:	930f      	str	r3, [sp, #60]	; 0x3c
 801b7b8:	2300      	movs	r3, #0
 801b7ba:	60c3      	str	r3, [r0, #12]
 801b7bc:	4631      	mov	r1, r6
 801b7be:	f002 fa8f 	bl	801dce0 <__mcmp>
 801b7c2:	2800      	cmp	r0, #0
 801b7c4:	da65      	bge.n	801b892 <_strtod_l+0x89a>
 801b7c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b7c8:	ea53 030a 	orrs.w	r3, r3, sl
 801b7cc:	f040 8087 	bne.w	801b8de <_strtod_l+0x8e6>
 801b7d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b7d4:	2b00      	cmp	r3, #0
 801b7d6:	f040 8082 	bne.w	801b8de <_strtod_l+0x8e6>
 801b7da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b7de:	0d1b      	lsrs	r3, r3, #20
 801b7e0:	051b      	lsls	r3, r3, #20
 801b7e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801b7e6:	d97a      	bls.n	801b8de <_strtod_l+0x8e6>
 801b7e8:	696b      	ldr	r3, [r5, #20]
 801b7ea:	b913      	cbnz	r3, 801b7f2 <_strtod_l+0x7fa>
 801b7ec:	692b      	ldr	r3, [r5, #16]
 801b7ee:	2b01      	cmp	r3, #1
 801b7f0:	dd75      	ble.n	801b8de <_strtod_l+0x8e6>
 801b7f2:	4629      	mov	r1, r5
 801b7f4:	2201      	movs	r2, #1
 801b7f6:	4620      	mov	r0, r4
 801b7f8:	f002 fa06 	bl	801dc08 <__lshift>
 801b7fc:	4631      	mov	r1, r6
 801b7fe:	4605      	mov	r5, r0
 801b800:	f002 fa6e 	bl	801dce0 <__mcmp>
 801b804:	2800      	cmp	r0, #0
 801b806:	dd6a      	ble.n	801b8de <_strtod_l+0x8e6>
 801b808:	9904      	ldr	r1, [sp, #16]
 801b80a:	4a55      	ldr	r2, [pc, #340]	; (801b960 <_strtod_l+0x968>)
 801b80c:	465b      	mov	r3, fp
 801b80e:	2900      	cmp	r1, #0
 801b810:	f000 8085 	beq.w	801b91e <_strtod_l+0x926>
 801b814:	ea02 010b 	and.w	r1, r2, fp
 801b818:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801b81c:	dc7f      	bgt.n	801b91e <_strtod_l+0x926>
 801b81e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801b822:	f77f aeaa 	ble.w	801b57a <_strtod_l+0x582>
 801b826:	4a4f      	ldr	r2, [pc, #316]	; (801b964 <_strtod_l+0x96c>)
 801b828:	2300      	movs	r3, #0
 801b82a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801b82e:	4650      	mov	r0, sl
 801b830:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801b834:	4659      	mov	r1, fp
 801b836:	f7e4 feef 	bl	8000618 <__aeabi_dmul>
 801b83a:	460b      	mov	r3, r1
 801b83c:	4303      	orrs	r3, r0
 801b83e:	bf08      	it	eq
 801b840:	2322      	moveq	r3, #34	; 0x22
 801b842:	4682      	mov	sl, r0
 801b844:	468b      	mov	fp, r1
 801b846:	bf08      	it	eq
 801b848:	6023      	streq	r3, [r4, #0]
 801b84a:	e62b      	b.n	801b4a4 <_strtod_l+0x4ac>
 801b84c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b850:	fa02 f303 	lsl.w	r3, r2, r3
 801b854:	ea03 0a0a 	and.w	sl, r3, sl
 801b858:	e6de      	b.n	801b618 <_strtod_l+0x620>
 801b85a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801b85e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801b862:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801b866:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801b86a:	fa01 f308 	lsl.w	r3, r1, r8
 801b86e:	930c      	str	r3, [sp, #48]	; 0x30
 801b870:	9111      	str	r1, [sp, #68]	; 0x44
 801b872:	e741      	b.n	801b6f8 <_strtod_l+0x700>
 801b874:	2300      	movs	r3, #0
 801b876:	930c      	str	r3, [sp, #48]	; 0x30
 801b878:	2301      	movs	r3, #1
 801b87a:	9311      	str	r3, [sp, #68]	; 0x44
 801b87c:	e73c      	b.n	801b6f8 <_strtod_l+0x700>
 801b87e:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b880:	4642      	mov	r2, r8
 801b882:	4620      	mov	r0, r4
 801b884:	f002 f9c0 	bl	801dc08 <__lshift>
 801b888:	901e      	str	r0, [sp, #120]	; 0x78
 801b88a:	2800      	cmp	r0, #0
 801b88c:	f47f af66 	bne.w	801b75c <_strtod_l+0x764>
 801b890:	e5fe      	b.n	801b490 <_strtod_l+0x498>
 801b892:	465f      	mov	r7, fp
 801b894:	d16e      	bne.n	801b974 <_strtod_l+0x97c>
 801b896:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b898:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b89c:	b342      	cbz	r2, 801b8f0 <_strtod_l+0x8f8>
 801b89e:	4a32      	ldr	r2, [pc, #200]	; (801b968 <_strtod_l+0x970>)
 801b8a0:	4293      	cmp	r3, r2
 801b8a2:	d128      	bne.n	801b8f6 <_strtod_l+0x8fe>
 801b8a4:	9b04      	ldr	r3, [sp, #16]
 801b8a6:	4650      	mov	r0, sl
 801b8a8:	b1eb      	cbz	r3, 801b8e6 <_strtod_l+0x8ee>
 801b8aa:	4a2d      	ldr	r2, [pc, #180]	; (801b960 <_strtod_l+0x968>)
 801b8ac:	403a      	ands	r2, r7
 801b8ae:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801b8b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801b8b6:	d819      	bhi.n	801b8ec <_strtod_l+0x8f4>
 801b8b8:	0d12      	lsrs	r2, r2, #20
 801b8ba:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801b8be:	fa01 f303 	lsl.w	r3, r1, r3
 801b8c2:	4298      	cmp	r0, r3
 801b8c4:	d117      	bne.n	801b8f6 <_strtod_l+0x8fe>
 801b8c6:	4b29      	ldr	r3, [pc, #164]	; (801b96c <_strtod_l+0x974>)
 801b8c8:	429f      	cmp	r7, r3
 801b8ca:	d102      	bne.n	801b8d2 <_strtod_l+0x8da>
 801b8cc:	3001      	adds	r0, #1
 801b8ce:	f43f addf 	beq.w	801b490 <_strtod_l+0x498>
 801b8d2:	4b23      	ldr	r3, [pc, #140]	; (801b960 <_strtod_l+0x968>)
 801b8d4:	403b      	ands	r3, r7
 801b8d6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801b8da:	f04f 0a00 	mov.w	sl, #0
 801b8de:	9b04      	ldr	r3, [sp, #16]
 801b8e0:	2b00      	cmp	r3, #0
 801b8e2:	d1a0      	bne.n	801b826 <_strtod_l+0x82e>
 801b8e4:	e5de      	b.n	801b4a4 <_strtod_l+0x4ac>
 801b8e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b8ea:	e7ea      	b.n	801b8c2 <_strtod_l+0x8ca>
 801b8ec:	460b      	mov	r3, r1
 801b8ee:	e7e8      	b.n	801b8c2 <_strtod_l+0x8ca>
 801b8f0:	ea53 030a 	orrs.w	r3, r3, sl
 801b8f4:	d088      	beq.n	801b808 <_strtod_l+0x810>
 801b8f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b8f8:	b1db      	cbz	r3, 801b932 <_strtod_l+0x93a>
 801b8fa:	423b      	tst	r3, r7
 801b8fc:	d0ef      	beq.n	801b8de <_strtod_l+0x8e6>
 801b8fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b900:	9a04      	ldr	r2, [sp, #16]
 801b902:	4650      	mov	r0, sl
 801b904:	4659      	mov	r1, fp
 801b906:	b1c3      	cbz	r3, 801b93a <_strtod_l+0x942>
 801b908:	f7ff fb59 	bl	801afbe <sulp>
 801b90c:	4602      	mov	r2, r0
 801b90e:	460b      	mov	r3, r1
 801b910:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801b914:	f7e4 fcca 	bl	80002ac <__adddf3>
 801b918:	4682      	mov	sl, r0
 801b91a:	468b      	mov	fp, r1
 801b91c:	e7df      	b.n	801b8de <_strtod_l+0x8e6>
 801b91e:	4013      	ands	r3, r2
 801b920:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801b924:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801b928:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801b92c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801b930:	e7d5      	b.n	801b8de <_strtod_l+0x8e6>
 801b932:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b934:	ea13 0f0a 	tst.w	r3, sl
 801b938:	e7e0      	b.n	801b8fc <_strtod_l+0x904>
 801b93a:	f7ff fb40 	bl	801afbe <sulp>
 801b93e:	4602      	mov	r2, r0
 801b940:	460b      	mov	r3, r1
 801b942:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801b946:	f7e4 fcaf 	bl	80002a8 <__aeabi_dsub>
 801b94a:	2200      	movs	r2, #0
 801b94c:	2300      	movs	r3, #0
 801b94e:	4682      	mov	sl, r0
 801b950:	468b      	mov	fp, r1
 801b952:	f7e5 f8c9 	bl	8000ae8 <__aeabi_dcmpeq>
 801b956:	2800      	cmp	r0, #0
 801b958:	d0c1      	beq.n	801b8de <_strtod_l+0x8e6>
 801b95a:	e60e      	b.n	801b57a <_strtod_l+0x582>
 801b95c:	fffffc02 	.word	0xfffffc02
 801b960:	7ff00000 	.word	0x7ff00000
 801b964:	39500000 	.word	0x39500000
 801b968:	000fffff 	.word	0x000fffff
 801b96c:	7fefffff 	.word	0x7fefffff
 801b970:	08020ed8 	.word	0x08020ed8
 801b974:	4631      	mov	r1, r6
 801b976:	4628      	mov	r0, r5
 801b978:	f002 fb2e 	bl	801dfd8 <__ratio>
 801b97c:	ec59 8b10 	vmov	r8, r9, d0
 801b980:	ee10 0a10 	vmov	r0, s0
 801b984:	2200      	movs	r2, #0
 801b986:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b98a:	4649      	mov	r1, r9
 801b98c:	f7e5 f8c0 	bl	8000b10 <__aeabi_dcmple>
 801b990:	2800      	cmp	r0, #0
 801b992:	d07c      	beq.n	801ba8e <_strtod_l+0xa96>
 801b994:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b996:	2b00      	cmp	r3, #0
 801b998:	d04c      	beq.n	801ba34 <_strtod_l+0xa3c>
 801b99a:	4b95      	ldr	r3, [pc, #596]	; (801bbf0 <_strtod_l+0xbf8>)
 801b99c:	2200      	movs	r2, #0
 801b99e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801b9a2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801bbf0 <_strtod_l+0xbf8>
 801b9a6:	f04f 0800 	mov.w	r8, #0
 801b9aa:	4b92      	ldr	r3, [pc, #584]	; (801bbf4 <_strtod_l+0xbfc>)
 801b9ac:	403b      	ands	r3, r7
 801b9ae:	9311      	str	r3, [sp, #68]	; 0x44
 801b9b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b9b2:	4b91      	ldr	r3, [pc, #580]	; (801bbf8 <_strtod_l+0xc00>)
 801b9b4:	429a      	cmp	r2, r3
 801b9b6:	f040 80b2 	bne.w	801bb1e <_strtod_l+0xb26>
 801b9ba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801b9be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b9c2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801b9c6:	ec4b ab10 	vmov	d0, sl, fp
 801b9ca:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801b9ce:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801b9d2:	f002 fa29 	bl	801de28 <__ulp>
 801b9d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b9da:	ec53 2b10 	vmov	r2, r3, d0
 801b9de:	f7e4 fe1b 	bl	8000618 <__aeabi_dmul>
 801b9e2:	4652      	mov	r2, sl
 801b9e4:	465b      	mov	r3, fp
 801b9e6:	f7e4 fc61 	bl	80002ac <__adddf3>
 801b9ea:	460b      	mov	r3, r1
 801b9ec:	4981      	ldr	r1, [pc, #516]	; (801bbf4 <_strtod_l+0xbfc>)
 801b9ee:	4a83      	ldr	r2, [pc, #524]	; (801bbfc <_strtod_l+0xc04>)
 801b9f0:	4019      	ands	r1, r3
 801b9f2:	4291      	cmp	r1, r2
 801b9f4:	4682      	mov	sl, r0
 801b9f6:	d95e      	bls.n	801bab6 <_strtod_l+0xabe>
 801b9f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b9fa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801b9fe:	4293      	cmp	r3, r2
 801ba00:	d103      	bne.n	801ba0a <_strtod_l+0xa12>
 801ba02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ba04:	3301      	adds	r3, #1
 801ba06:	f43f ad43 	beq.w	801b490 <_strtod_l+0x498>
 801ba0a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801bc08 <_strtod_l+0xc10>
 801ba0e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801ba12:	991e      	ldr	r1, [sp, #120]	; 0x78
 801ba14:	4620      	mov	r0, r4
 801ba16:	f001 fedb 	bl	801d7d0 <_Bfree>
 801ba1a:	9907      	ldr	r1, [sp, #28]
 801ba1c:	4620      	mov	r0, r4
 801ba1e:	f001 fed7 	bl	801d7d0 <_Bfree>
 801ba22:	4631      	mov	r1, r6
 801ba24:	4620      	mov	r0, r4
 801ba26:	f001 fed3 	bl	801d7d0 <_Bfree>
 801ba2a:	4629      	mov	r1, r5
 801ba2c:	4620      	mov	r0, r4
 801ba2e:	f001 fecf 	bl	801d7d0 <_Bfree>
 801ba32:	e613      	b.n	801b65c <_strtod_l+0x664>
 801ba34:	f1ba 0f00 	cmp.w	sl, #0
 801ba38:	d11b      	bne.n	801ba72 <_strtod_l+0xa7a>
 801ba3a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ba3e:	b9f3      	cbnz	r3, 801ba7e <_strtod_l+0xa86>
 801ba40:	4b6b      	ldr	r3, [pc, #428]	; (801bbf0 <_strtod_l+0xbf8>)
 801ba42:	2200      	movs	r2, #0
 801ba44:	4640      	mov	r0, r8
 801ba46:	4649      	mov	r1, r9
 801ba48:	f7e5 f858 	bl	8000afc <__aeabi_dcmplt>
 801ba4c:	b9d0      	cbnz	r0, 801ba84 <_strtod_l+0xa8c>
 801ba4e:	4640      	mov	r0, r8
 801ba50:	4649      	mov	r1, r9
 801ba52:	4b6b      	ldr	r3, [pc, #428]	; (801bc00 <_strtod_l+0xc08>)
 801ba54:	2200      	movs	r2, #0
 801ba56:	f7e4 fddf 	bl	8000618 <__aeabi_dmul>
 801ba5a:	4680      	mov	r8, r0
 801ba5c:	4689      	mov	r9, r1
 801ba5e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801ba62:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801ba66:	931b      	str	r3, [sp, #108]	; 0x6c
 801ba68:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801ba6c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801ba70:	e79b      	b.n	801b9aa <_strtod_l+0x9b2>
 801ba72:	f1ba 0f01 	cmp.w	sl, #1
 801ba76:	d102      	bne.n	801ba7e <_strtod_l+0xa86>
 801ba78:	2f00      	cmp	r7, #0
 801ba7a:	f43f ad7e 	beq.w	801b57a <_strtod_l+0x582>
 801ba7e:	4b61      	ldr	r3, [pc, #388]	; (801bc04 <_strtod_l+0xc0c>)
 801ba80:	2200      	movs	r2, #0
 801ba82:	e78c      	b.n	801b99e <_strtod_l+0x9a6>
 801ba84:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801bc00 <_strtod_l+0xc08>
 801ba88:	f04f 0800 	mov.w	r8, #0
 801ba8c:	e7e7      	b.n	801ba5e <_strtod_l+0xa66>
 801ba8e:	4b5c      	ldr	r3, [pc, #368]	; (801bc00 <_strtod_l+0xc08>)
 801ba90:	4640      	mov	r0, r8
 801ba92:	4649      	mov	r1, r9
 801ba94:	2200      	movs	r2, #0
 801ba96:	f7e4 fdbf 	bl	8000618 <__aeabi_dmul>
 801ba9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ba9c:	4680      	mov	r8, r0
 801ba9e:	4689      	mov	r9, r1
 801baa0:	b933      	cbnz	r3, 801bab0 <_strtod_l+0xab8>
 801baa2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801baa6:	9012      	str	r0, [sp, #72]	; 0x48
 801baa8:	9313      	str	r3, [sp, #76]	; 0x4c
 801baaa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801baae:	e7dd      	b.n	801ba6c <_strtod_l+0xa74>
 801bab0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801bab4:	e7f9      	b.n	801baaa <_strtod_l+0xab2>
 801bab6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801baba:	9b04      	ldr	r3, [sp, #16]
 801babc:	2b00      	cmp	r3, #0
 801babe:	d1a8      	bne.n	801ba12 <_strtod_l+0xa1a>
 801bac0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801bac4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bac6:	0d1b      	lsrs	r3, r3, #20
 801bac8:	051b      	lsls	r3, r3, #20
 801baca:	429a      	cmp	r2, r3
 801bacc:	d1a1      	bne.n	801ba12 <_strtod_l+0xa1a>
 801bace:	4640      	mov	r0, r8
 801bad0:	4649      	mov	r1, r9
 801bad2:	f7e5 f901 	bl	8000cd8 <__aeabi_d2lz>
 801bad6:	f7e4 fd71 	bl	80005bc <__aeabi_l2d>
 801bada:	4602      	mov	r2, r0
 801badc:	460b      	mov	r3, r1
 801bade:	4640      	mov	r0, r8
 801bae0:	4649      	mov	r1, r9
 801bae2:	f7e4 fbe1 	bl	80002a8 <__aeabi_dsub>
 801bae6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bae8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801baec:	ea43 030a 	orr.w	r3, r3, sl
 801baf0:	4313      	orrs	r3, r2
 801baf2:	4680      	mov	r8, r0
 801baf4:	4689      	mov	r9, r1
 801baf6:	d053      	beq.n	801bba0 <_strtod_l+0xba8>
 801baf8:	a335      	add	r3, pc, #212	; (adr r3, 801bbd0 <_strtod_l+0xbd8>)
 801bafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bafe:	f7e4 fffd 	bl	8000afc <__aeabi_dcmplt>
 801bb02:	2800      	cmp	r0, #0
 801bb04:	f47f acce 	bne.w	801b4a4 <_strtod_l+0x4ac>
 801bb08:	a333      	add	r3, pc, #204	; (adr r3, 801bbd8 <_strtod_l+0xbe0>)
 801bb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb0e:	4640      	mov	r0, r8
 801bb10:	4649      	mov	r1, r9
 801bb12:	f7e5 f811 	bl	8000b38 <__aeabi_dcmpgt>
 801bb16:	2800      	cmp	r0, #0
 801bb18:	f43f af7b 	beq.w	801ba12 <_strtod_l+0xa1a>
 801bb1c:	e4c2      	b.n	801b4a4 <_strtod_l+0x4ac>
 801bb1e:	9b04      	ldr	r3, [sp, #16]
 801bb20:	b333      	cbz	r3, 801bb70 <_strtod_l+0xb78>
 801bb22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bb24:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801bb28:	d822      	bhi.n	801bb70 <_strtod_l+0xb78>
 801bb2a:	a32d      	add	r3, pc, #180	; (adr r3, 801bbe0 <_strtod_l+0xbe8>)
 801bb2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb30:	4640      	mov	r0, r8
 801bb32:	4649      	mov	r1, r9
 801bb34:	f7e4 ffec 	bl	8000b10 <__aeabi_dcmple>
 801bb38:	b1a0      	cbz	r0, 801bb64 <_strtod_l+0xb6c>
 801bb3a:	4649      	mov	r1, r9
 801bb3c:	4640      	mov	r0, r8
 801bb3e:	f7e5 f843 	bl	8000bc8 <__aeabi_d2uiz>
 801bb42:	2801      	cmp	r0, #1
 801bb44:	bf38      	it	cc
 801bb46:	2001      	movcc	r0, #1
 801bb48:	f7e4 fcec 	bl	8000524 <__aeabi_ui2d>
 801bb4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bb4e:	4680      	mov	r8, r0
 801bb50:	4689      	mov	r9, r1
 801bb52:	bb13      	cbnz	r3, 801bb9a <_strtod_l+0xba2>
 801bb54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bb58:	9014      	str	r0, [sp, #80]	; 0x50
 801bb5a:	9315      	str	r3, [sp, #84]	; 0x54
 801bb5c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801bb60:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801bb64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bb66:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bb68:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801bb6c:	1a9b      	subs	r3, r3, r2
 801bb6e:	930d      	str	r3, [sp, #52]	; 0x34
 801bb70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801bb74:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801bb78:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801bb7c:	f002 f954 	bl	801de28 <__ulp>
 801bb80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801bb84:	ec53 2b10 	vmov	r2, r3, d0
 801bb88:	f7e4 fd46 	bl	8000618 <__aeabi_dmul>
 801bb8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801bb90:	f7e4 fb8c 	bl	80002ac <__adddf3>
 801bb94:	4682      	mov	sl, r0
 801bb96:	468b      	mov	fp, r1
 801bb98:	e78f      	b.n	801baba <_strtod_l+0xac2>
 801bb9a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801bb9e:	e7dd      	b.n	801bb5c <_strtod_l+0xb64>
 801bba0:	a311      	add	r3, pc, #68	; (adr r3, 801bbe8 <_strtod_l+0xbf0>)
 801bba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bba6:	f7e4 ffa9 	bl	8000afc <__aeabi_dcmplt>
 801bbaa:	e7b4      	b.n	801bb16 <_strtod_l+0xb1e>
 801bbac:	2300      	movs	r3, #0
 801bbae:	930e      	str	r3, [sp, #56]	; 0x38
 801bbb0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801bbb2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bbb4:	6013      	str	r3, [r2, #0]
 801bbb6:	f7ff ba65 	b.w	801b084 <_strtod_l+0x8c>
 801bbba:	2b65      	cmp	r3, #101	; 0x65
 801bbbc:	f43f ab5d 	beq.w	801b27a <_strtod_l+0x282>
 801bbc0:	2b45      	cmp	r3, #69	; 0x45
 801bbc2:	f43f ab5a 	beq.w	801b27a <_strtod_l+0x282>
 801bbc6:	2201      	movs	r2, #1
 801bbc8:	f7ff bb92 	b.w	801b2f0 <_strtod_l+0x2f8>
 801bbcc:	f3af 8000 	nop.w
 801bbd0:	94a03595 	.word	0x94a03595
 801bbd4:	3fdfffff 	.word	0x3fdfffff
 801bbd8:	35afe535 	.word	0x35afe535
 801bbdc:	3fe00000 	.word	0x3fe00000
 801bbe0:	ffc00000 	.word	0xffc00000
 801bbe4:	41dfffff 	.word	0x41dfffff
 801bbe8:	94a03595 	.word	0x94a03595
 801bbec:	3fcfffff 	.word	0x3fcfffff
 801bbf0:	3ff00000 	.word	0x3ff00000
 801bbf4:	7ff00000 	.word	0x7ff00000
 801bbf8:	7fe00000 	.word	0x7fe00000
 801bbfc:	7c9fffff 	.word	0x7c9fffff
 801bc00:	3fe00000 	.word	0x3fe00000
 801bc04:	bff00000 	.word	0xbff00000
 801bc08:	7fefffff 	.word	0x7fefffff

0801bc0c <_strtod_r>:
 801bc0c:	4b01      	ldr	r3, [pc, #4]	; (801bc14 <_strtod_r+0x8>)
 801bc0e:	f7ff b9f3 	b.w	801aff8 <_strtod_l>
 801bc12:	bf00      	nop
 801bc14:	20000240 	.word	0x20000240

0801bc18 <_strtol_l.isra.0>:
 801bc18:	2b01      	cmp	r3, #1
 801bc1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bc1e:	d001      	beq.n	801bc24 <_strtol_l.isra.0+0xc>
 801bc20:	2b24      	cmp	r3, #36	; 0x24
 801bc22:	d906      	bls.n	801bc32 <_strtol_l.isra.0+0x1a>
 801bc24:	f7fd ff46 	bl	8019ab4 <__errno>
 801bc28:	2316      	movs	r3, #22
 801bc2a:	6003      	str	r3, [r0, #0]
 801bc2c:	2000      	movs	r0, #0
 801bc2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bc32:	4f3a      	ldr	r7, [pc, #232]	; (801bd1c <_strtol_l.isra.0+0x104>)
 801bc34:	468e      	mov	lr, r1
 801bc36:	4676      	mov	r6, lr
 801bc38:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801bc3c:	5de5      	ldrb	r5, [r4, r7]
 801bc3e:	f015 0508 	ands.w	r5, r5, #8
 801bc42:	d1f8      	bne.n	801bc36 <_strtol_l.isra.0+0x1e>
 801bc44:	2c2d      	cmp	r4, #45	; 0x2d
 801bc46:	d134      	bne.n	801bcb2 <_strtol_l.isra.0+0x9a>
 801bc48:	f89e 4000 	ldrb.w	r4, [lr]
 801bc4c:	f04f 0801 	mov.w	r8, #1
 801bc50:	f106 0e02 	add.w	lr, r6, #2
 801bc54:	2b00      	cmp	r3, #0
 801bc56:	d05c      	beq.n	801bd12 <_strtol_l.isra.0+0xfa>
 801bc58:	2b10      	cmp	r3, #16
 801bc5a:	d10c      	bne.n	801bc76 <_strtol_l.isra.0+0x5e>
 801bc5c:	2c30      	cmp	r4, #48	; 0x30
 801bc5e:	d10a      	bne.n	801bc76 <_strtol_l.isra.0+0x5e>
 801bc60:	f89e 4000 	ldrb.w	r4, [lr]
 801bc64:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801bc68:	2c58      	cmp	r4, #88	; 0x58
 801bc6a:	d14d      	bne.n	801bd08 <_strtol_l.isra.0+0xf0>
 801bc6c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801bc70:	2310      	movs	r3, #16
 801bc72:	f10e 0e02 	add.w	lr, lr, #2
 801bc76:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801bc7a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801bc7e:	2600      	movs	r6, #0
 801bc80:	fbbc f9f3 	udiv	r9, ip, r3
 801bc84:	4635      	mov	r5, r6
 801bc86:	fb03 ca19 	mls	sl, r3, r9, ip
 801bc8a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801bc8e:	2f09      	cmp	r7, #9
 801bc90:	d818      	bhi.n	801bcc4 <_strtol_l.isra.0+0xac>
 801bc92:	463c      	mov	r4, r7
 801bc94:	42a3      	cmp	r3, r4
 801bc96:	dd24      	ble.n	801bce2 <_strtol_l.isra.0+0xca>
 801bc98:	2e00      	cmp	r6, #0
 801bc9a:	db1f      	blt.n	801bcdc <_strtol_l.isra.0+0xc4>
 801bc9c:	45a9      	cmp	r9, r5
 801bc9e:	d31d      	bcc.n	801bcdc <_strtol_l.isra.0+0xc4>
 801bca0:	d101      	bne.n	801bca6 <_strtol_l.isra.0+0x8e>
 801bca2:	45a2      	cmp	sl, r4
 801bca4:	db1a      	blt.n	801bcdc <_strtol_l.isra.0+0xc4>
 801bca6:	fb05 4503 	mla	r5, r5, r3, r4
 801bcaa:	2601      	movs	r6, #1
 801bcac:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801bcb0:	e7eb      	b.n	801bc8a <_strtol_l.isra.0+0x72>
 801bcb2:	2c2b      	cmp	r4, #43	; 0x2b
 801bcb4:	bf08      	it	eq
 801bcb6:	f89e 4000 	ldrbeq.w	r4, [lr]
 801bcba:	46a8      	mov	r8, r5
 801bcbc:	bf08      	it	eq
 801bcbe:	f106 0e02 	addeq.w	lr, r6, #2
 801bcc2:	e7c7      	b.n	801bc54 <_strtol_l.isra.0+0x3c>
 801bcc4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801bcc8:	2f19      	cmp	r7, #25
 801bcca:	d801      	bhi.n	801bcd0 <_strtol_l.isra.0+0xb8>
 801bccc:	3c37      	subs	r4, #55	; 0x37
 801bcce:	e7e1      	b.n	801bc94 <_strtol_l.isra.0+0x7c>
 801bcd0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801bcd4:	2f19      	cmp	r7, #25
 801bcd6:	d804      	bhi.n	801bce2 <_strtol_l.isra.0+0xca>
 801bcd8:	3c57      	subs	r4, #87	; 0x57
 801bcda:	e7db      	b.n	801bc94 <_strtol_l.isra.0+0x7c>
 801bcdc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801bce0:	e7e4      	b.n	801bcac <_strtol_l.isra.0+0x94>
 801bce2:	2e00      	cmp	r6, #0
 801bce4:	da05      	bge.n	801bcf2 <_strtol_l.isra.0+0xda>
 801bce6:	2322      	movs	r3, #34	; 0x22
 801bce8:	6003      	str	r3, [r0, #0]
 801bcea:	4665      	mov	r5, ip
 801bcec:	b942      	cbnz	r2, 801bd00 <_strtol_l.isra.0+0xe8>
 801bcee:	4628      	mov	r0, r5
 801bcf0:	e79d      	b.n	801bc2e <_strtol_l.isra.0+0x16>
 801bcf2:	f1b8 0f00 	cmp.w	r8, #0
 801bcf6:	d000      	beq.n	801bcfa <_strtol_l.isra.0+0xe2>
 801bcf8:	426d      	negs	r5, r5
 801bcfa:	2a00      	cmp	r2, #0
 801bcfc:	d0f7      	beq.n	801bcee <_strtol_l.isra.0+0xd6>
 801bcfe:	b10e      	cbz	r6, 801bd04 <_strtol_l.isra.0+0xec>
 801bd00:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 801bd04:	6011      	str	r1, [r2, #0]
 801bd06:	e7f2      	b.n	801bcee <_strtol_l.isra.0+0xd6>
 801bd08:	2430      	movs	r4, #48	; 0x30
 801bd0a:	2b00      	cmp	r3, #0
 801bd0c:	d1b3      	bne.n	801bc76 <_strtol_l.isra.0+0x5e>
 801bd0e:	2308      	movs	r3, #8
 801bd10:	e7b1      	b.n	801bc76 <_strtol_l.isra.0+0x5e>
 801bd12:	2c30      	cmp	r4, #48	; 0x30
 801bd14:	d0a4      	beq.n	801bc60 <_strtol_l.isra.0+0x48>
 801bd16:	230a      	movs	r3, #10
 801bd18:	e7ad      	b.n	801bc76 <_strtol_l.isra.0+0x5e>
 801bd1a:	bf00      	nop
 801bd1c:	08020d11 	.word	0x08020d11

0801bd20 <_strtol_r>:
 801bd20:	f7ff bf7a 	b.w	801bc18 <_strtol_l.isra.0>

0801bd24 <strtol>:
 801bd24:	4613      	mov	r3, r2
 801bd26:	460a      	mov	r2, r1
 801bd28:	4601      	mov	r1, r0
 801bd2a:	4802      	ldr	r0, [pc, #8]	; (801bd34 <strtol+0x10>)
 801bd2c:	6800      	ldr	r0, [r0, #0]
 801bd2e:	f7ff bf73 	b.w	801bc18 <_strtol_l.isra.0>
 801bd32:	bf00      	nop
 801bd34:	200001d8 	.word	0x200001d8

0801bd38 <_strtoul_l.isra.0>:
 801bd38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bd3c:	4e3b      	ldr	r6, [pc, #236]	; (801be2c <_strtoul_l.isra.0+0xf4>)
 801bd3e:	4686      	mov	lr, r0
 801bd40:	468c      	mov	ip, r1
 801bd42:	4660      	mov	r0, ip
 801bd44:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801bd48:	5da5      	ldrb	r5, [r4, r6]
 801bd4a:	f015 0508 	ands.w	r5, r5, #8
 801bd4e:	d1f8      	bne.n	801bd42 <_strtoul_l.isra.0+0xa>
 801bd50:	2c2d      	cmp	r4, #45	; 0x2d
 801bd52:	d134      	bne.n	801bdbe <_strtoul_l.isra.0+0x86>
 801bd54:	f89c 4000 	ldrb.w	r4, [ip]
 801bd58:	f04f 0801 	mov.w	r8, #1
 801bd5c:	f100 0c02 	add.w	ip, r0, #2
 801bd60:	2b00      	cmp	r3, #0
 801bd62:	d05e      	beq.n	801be22 <_strtoul_l.isra.0+0xea>
 801bd64:	2b10      	cmp	r3, #16
 801bd66:	d10c      	bne.n	801bd82 <_strtoul_l.isra.0+0x4a>
 801bd68:	2c30      	cmp	r4, #48	; 0x30
 801bd6a:	d10a      	bne.n	801bd82 <_strtoul_l.isra.0+0x4a>
 801bd6c:	f89c 0000 	ldrb.w	r0, [ip]
 801bd70:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801bd74:	2858      	cmp	r0, #88	; 0x58
 801bd76:	d14f      	bne.n	801be18 <_strtoul_l.isra.0+0xe0>
 801bd78:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801bd7c:	2310      	movs	r3, #16
 801bd7e:	f10c 0c02 	add.w	ip, ip, #2
 801bd82:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801bd86:	2500      	movs	r5, #0
 801bd88:	fbb7 f7f3 	udiv	r7, r7, r3
 801bd8c:	fb03 f907 	mul.w	r9, r3, r7
 801bd90:	ea6f 0909 	mvn.w	r9, r9
 801bd94:	4628      	mov	r0, r5
 801bd96:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801bd9a:	2e09      	cmp	r6, #9
 801bd9c:	d818      	bhi.n	801bdd0 <_strtoul_l.isra.0+0x98>
 801bd9e:	4634      	mov	r4, r6
 801bda0:	42a3      	cmp	r3, r4
 801bda2:	dd24      	ble.n	801bdee <_strtoul_l.isra.0+0xb6>
 801bda4:	2d00      	cmp	r5, #0
 801bda6:	db1f      	blt.n	801bde8 <_strtoul_l.isra.0+0xb0>
 801bda8:	4287      	cmp	r7, r0
 801bdaa:	d31d      	bcc.n	801bde8 <_strtoul_l.isra.0+0xb0>
 801bdac:	d101      	bne.n	801bdb2 <_strtoul_l.isra.0+0x7a>
 801bdae:	45a1      	cmp	r9, r4
 801bdb0:	db1a      	blt.n	801bde8 <_strtoul_l.isra.0+0xb0>
 801bdb2:	fb00 4003 	mla	r0, r0, r3, r4
 801bdb6:	2501      	movs	r5, #1
 801bdb8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801bdbc:	e7eb      	b.n	801bd96 <_strtoul_l.isra.0+0x5e>
 801bdbe:	2c2b      	cmp	r4, #43	; 0x2b
 801bdc0:	bf08      	it	eq
 801bdc2:	f89c 4000 	ldrbeq.w	r4, [ip]
 801bdc6:	46a8      	mov	r8, r5
 801bdc8:	bf08      	it	eq
 801bdca:	f100 0c02 	addeq.w	ip, r0, #2
 801bdce:	e7c7      	b.n	801bd60 <_strtoul_l.isra.0+0x28>
 801bdd0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801bdd4:	2e19      	cmp	r6, #25
 801bdd6:	d801      	bhi.n	801bddc <_strtoul_l.isra.0+0xa4>
 801bdd8:	3c37      	subs	r4, #55	; 0x37
 801bdda:	e7e1      	b.n	801bda0 <_strtoul_l.isra.0+0x68>
 801bddc:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801bde0:	2e19      	cmp	r6, #25
 801bde2:	d804      	bhi.n	801bdee <_strtoul_l.isra.0+0xb6>
 801bde4:	3c57      	subs	r4, #87	; 0x57
 801bde6:	e7db      	b.n	801bda0 <_strtoul_l.isra.0+0x68>
 801bde8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801bdec:	e7e4      	b.n	801bdb8 <_strtoul_l.isra.0+0x80>
 801bdee:	2d00      	cmp	r5, #0
 801bdf0:	da07      	bge.n	801be02 <_strtoul_l.isra.0+0xca>
 801bdf2:	2322      	movs	r3, #34	; 0x22
 801bdf4:	f8ce 3000 	str.w	r3, [lr]
 801bdf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bdfc:	b942      	cbnz	r2, 801be10 <_strtoul_l.isra.0+0xd8>
 801bdfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801be02:	f1b8 0f00 	cmp.w	r8, #0
 801be06:	d000      	beq.n	801be0a <_strtoul_l.isra.0+0xd2>
 801be08:	4240      	negs	r0, r0
 801be0a:	2a00      	cmp	r2, #0
 801be0c:	d0f7      	beq.n	801bdfe <_strtoul_l.isra.0+0xc6>
 801be0e:	b10d      	cbz	r5, 801be14 <_strtoul_l.isra.0+0xdc>
 801be10:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 801be14:	6011      	str	r1, [r2, #0]
 801be16:	e7f2      	b.n	801bdfe <_strtoul_l.isra.0+0xc6>
 801be18:	2430      	movs	r4, #48	; 0x30
 801be1a:	2b00      	cmp	r3, #0
 801be1c:	d1b1      	bne.n	801bd82 <_strtoul_l.isra.0+0x4a>
 801be1e:	2308      	movs	r3, #8
 801be20:	e7af      	b.n	801bd82 <_strtoul_l.isra.0+0x4a>
 801be22:	2c30      	cmp	r4, #48	; 0x30
 801be24:	d0a2      	beq.n	801bd6c <_strtoul_l.isra.0+0x34>
 801be26:	230a      	movs	r3, #10
 801be28:	e7ab      	b.n	801bd82 <_strtoul_l.isra.0+0x4a>
 801be2a:	bf00      	nop
 801be2c:	08020d11 	.word	0x08020d11

0801be30 <_strtoul_r>:
 801be30:	f7ff bf82 	b.w	801bd38 <_strtoul_l.isra.0>

0801be34 <_vsniprintf_r>:
 801be34:	b530      	push	{r4, r5, lr}
 801be36:	1e14      	subs	r4, r2, #0
 801be38:	4605      	mov	r5, r0
 801be3a:	b09b      	sub	sp, #108	; 0x6c
 801be3c:	4618      	mov	r0, r3
 801be3e:	da05      	bge.n	801be4c <_vsniprintf_r+0x18>
 801be40:	238b      	movs	r3, #139	; 0x8b
 801be42:	602b      	str	r3, [r5, #0]
 801be44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801be48:	b01b      	add	sp, #108	; 0x6c
 801be4a:	bd30      	pop	{r4, r5, pc}
 801be4c:	f44f 7302 	mov.w	r3, #520	; 0x208
 801be50:	f8ad 300c 	strh.w	r3, [sp, #12]
 801be54:	bf14      	ite	ne
 801be56:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801be5a:	4623      	moveq	r3, r4
 801be5c:	9302      	str	r3, [sp, #8]
 801be5e:	9305      	str	r3, [sp, #20]
 801be60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801be64:	9100      	str	r1, [sp, #0]
 801be66:	9104      	str	r1, [sp, #16]
 801be68:	f8ad 300e 	strh.w	r3, [sp, #14]
 801be6c:	4602      	mov	r2, r0
 801be6e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801be70:	4669      	mov	r1, sp
 801be72:	4628      	mov	r0, r5
 801be74:	f002 f9b8 	bl	801e1e8 <_svfiprintf_r>
 801be78:	1c43      	adds	r3, r0, #1
 801be7a:	bfbc      	itt	lt
 801be7c:	238b      	movlt	r3, #139	; 0x8b
 801be7e:	602b      	strlt	r3, [r5, #0]
 801be80:	2c00      	cmp	r4, #0
 801be82:	d0e1      	beq.n	801be48 <_vsniprintf_r+0x14>
 801be84:	9b00      	ldr	r3, [sp, #0]
 801be86:	2200      	movs	r2, #0
 801be88:	701a      	strb	r2, [r3, #0]
 801be8a:	e7dd      	b.n	801be48 <_vsniprintf_r+0x14>

0801be8c <vsniprintf>:
 801be8c:	b507      	push	{r0, r1, r2, lr}
 801be8e:	9300      	str	r3, [sp, #0]
 801be90:	4613      	mov	r3, r2
 801be92:	460a      	mov	r2, r1
 801be94:	4601      	mov	r1, r0
 801be96:	4803      	ldr	r0, [pc, #12]	; (801bea4 <vsniprintf+0x18>)
 801be98:	6800      	ldr	r0, [r0, #0]
 801be9a:	f7ff ffcb 	bl	801be34 <_vsniprintf_r>
 801be9e:	b003      	add	sp, #12
 801bea0:	f85d fb04 	ldr.w	pc, [sp], #4
 801bea4:	200001d8 	.word	0x200001d8

0801bea8 <__swbuf_r>:
 801bea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801beaa:	460e      	mov	r6, r1
 801beac:	4614      	mov	r4, r2
 801beae:	4605      	mov	r5, r0
 801beb0:	b118      	cbz	r0, 801beba <__swbuf_r+0x12>
 801beb2:	6983      	ldr	r3, [r0, #24]
 801beb4:	b90b      	cbnz	r3, 801beba <__swbuf_r+0x12>
 801beb6:	f7fd fe5b 	bl	8019b70 <__sinit>
 801beba:	4b21      	ldr	r3, [pc, #132]	; (801bf40 <__swbuf_r+0x98>)
 801bebc:	429c      	cmp	r4, r3
 801bebe:	d12b      	bne.n	801bf18 <__swbuf_r+0x70>
 801bec0:	686c      	ldr	r4, [r5, #4]
 801bec2:	69a3      	ldr	r3, [r4, #24]
 801bec4:	60a3      	str	r3, [r4, #8]
 801bec6:	89a3      	ldrh	r3, [r4, #12]
 801bec8:	071a      	lsls	r2, r3, #28
 801beca:	d52f      	bpl.n	801bf2c <__swbuf_r+0x84>
 801becc:	6923      	ldr	r3, [r4, #16]
 801bece:	b36b      	cbz	r3, 801bf2c <__swbuf_r+0x84>
 801bed0:	6923      	ldr	r3, [r4, #16]
 801bed2:	6820      	ldr	r0, [r4, #0]
 801bed4:	1ac0      	subs	r0, r0, r3
 801bed6:	6963      	ldr	r3, [r4, #20]
 801bed8:	b2f6      	uxtb	r6, r6
 801beda:	4283      	cmp	r3, r0
 801bedc:	4637      	mov	r7, r6
 801bede:	dc04      	bgt.n	801beea <__swbuf_r+0x42>
 801bee0:	4621      	mov	r1, r4
 801bee2:	4628      	mov	r0, r5
 801bee4:	f000 ffde 	bl	801cea4 <_fflush_r>
 801bee8:	bb30      	cbnz	r0, 801bf38 <__swbuf_r+0x90>
 801beea:	68a3      	ldr	r3, [r4, #8]
 801beec:	3b01      	subs	r3, #1
 801beee:	60a3      	str	r3, [r4, #8]
 801bef0:	6823      	ldr	r3, [r4, #0]
 801bef2:	1c5a      	adds	r2, r3, #1
 801bef4:	6022      	str	r2, [r4, #0]
 801bef6:	701e      	strb	r6, [r3, #0]
 801bef8:	6963      	ldr	r3, [r4, #20]
 801befa:	3001      	adds	r0, #1
 801befc:	4283      	cmp	r3, r0
 801befe:	d004      	beq.n	801bf0a <__swbuf_r+0x62>
 801bf00:	89a3      	ldrh	r3, [r4, #12]
 801bf02:	07db      	lsls	r3, r3, #31
 801bf04:	d506      	bpl.n	801bf14 <__swbuf_r+0x6c>
 801bf06:	2e0a      	cmp	r6, #10
 801bf08:	d104      	bne.n	801bf14 <__swbuf_r+0x6c>
 801bf0a:	4621      	mov	r1, r4
 801bf0c:	4628      	mov	r0, r5
 801bf0e:	f000 ffc9 	bl	801cea4 <_fflush_r>
 801bf12:	b988      	cbnz	r0, 801bf38 <__swbuf_r+0x90>
 801bf14:	4638      	mov	r0, r7
 801bf16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bf18:	4b0a      	ldr	r3, [pc, #40]	; (801bf44 <__swbuf_r+0x9c>)
 801bf1a:	429c      	cmp	r4, r3
 801bf1c:	d101      	bne.n	801bf22 <__swbuf_r+0x7a>
 801bf1e:	68ac      	ldr	r4, [r5, #8]
 801bf20:	e7cf      	b.n	801bec2 <__swbuf_r+0x1a>
 801bf22:	4b09      	ldr	r3, [pc, #36]	; (801bf48 <__swbuf_r+0xa0>)
 801bf24:	429c      	cmp	r4, r3
 801bf26:	bf08      	it	eq
 801bf28:	68ec      	ldreq	r4, [r5, #12]
 801bf2a:	e7ca      	b.n	801bec2 <__swbuf_r+0x1a>
 801bf2c:	4621      	mov	r1, r4
 801bf2e:	4628      	mov	r0, r5
 801bf30:	f000 f81e 	bl	801bf70 <__swsetup_r>
 801bf34:	2800      	cmp	r0, #0
 801bf36:	d0cb      	beq.n	801bed0 <__swbuf_r+0x28>
 801bf38:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801bf3c:	e7ea      	b.n	801bf14 <__swbuf_r+0x6c>
 801bf3e:	bf00      	nop
 801bf40:	08020e34 	.word	0x08020e34
 801bf44:	08020e54 	.word	0x08020e54
 801bf48:	08020e14 	.word	0x08020e14

0801bf4c <_write_r>:
 801bf4c:	b538      	push	{r3, r4, r5, lr}
 801bf4e:	4d07      	ldr	r5, [pc, #28]	; (801bf6c <_write_r+0x20>)
 801bf50:	4604      	mov	r4, r0
 801bf52:	4608      	mov	r0, r1
 801bf54:	4611      	mov	r1, r2
 801bf56:	2200      	movs	r2, #0
 801bf58:	602a      	str	r2, [r5, #0]
 801bf5a:	461a      	mov	r2, r3
 801bf5c:	f7e7 f935 	bl	80031ca <_write>
 801bf60:	1c43      	adds	r3, r0, #1
 801bf62:	d102      	bne.n	801bf6a <_write_r+0x1e>
 801bf64:	682b      	ldr	r3, [r5, #0]
 801bf66:	b103      	cbz	r3, 801bf6a <_write_r+0x1e>
 801bf68:	6023      	str	r3, [r4, #0]
 801bf6a:	bd38      	pop	{r3, r4, r5, pc}
 801bf6c:	20008f98 	.word	0x20008f98

0801bf70 <__swsetup_r>:
 801bf70:	4b32      	ldr	r3, [pc, #200]	; (801c03c <__swsetup_r+0xcc>)
 801bf72:	b570      	push	{r4, r5, r6, lr}
 801bf74:	681d      	ldr	r5, [r3, #0]
 801bf76:	4606      	mov	r6, r0
 801bf78:	460c      	mov	r4, r1
 801bf7a:	b125      	cbz	r5, 801bf86 <__swsetup_r+0x16>
 801bf7c:	69ab      	ldr	r3, [r5, #24]
 801bf7e:	b913      	cbnz	r3, 801bf86 <__swsetup_r+0x16>
 801bf80:	4628      	mov	r0, r5
 801bf82:	f7fd fdf5 	bl	8019b70 <__sinit>
 801bf86:	4b2e      	ldr	r3, [pc, #184]	; (801c040 <__swsetup_r+0xd0>)
 801bf88:	429c      	cmp	r4, r3
 801bf8a:	d10f      	bne.n	801bfac <__swsetup_r+0x3c>
 801bf8c:	686c      	ldr	r4, [r5, #4]
 801bf8e:	89a3      	ldrh	r3, [r4, #12]
 801bf90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bf94:	0719      	lsls	r1, r3, #28
 801bf96:	d42c      	bmi.n	801bff2 <__swsetup_r+0x82>
 801bf98:	06dd      	lsls	r5, r3, #27
 801bf9a:	d411      	bmi.n	801bfc0 <__swsetup_r+0x50>
 801bf9c:	2309      	movs	r3, #9
 801bf9e:	6033      	str	r3, [r6, #0]
 801bfa0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801bfa4:	81a3      	strh	r3, [r4, #12]
 801bfa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bfaa:	e03e      	b.n	801c02a <__swsetup_r+0xba>
 801bfac:	4b25      	ldr	r3, [pc, #148]	; (801c044 <__swsetup_r+0xd4>)
 801bfae:	429c      	cmp	r4, r3
 801bfb0:	d101      	bne.n	801bfb6 <__swsetup_r+0x46>
 801bfb2:	68ac      	ldr	r4, [r5, #8]
 801bfb4:	e7eb      	b.n	801bf8e <__swsetup_r+0x1e>
 801bfb6:	4b24      	ldr	r3, [pc, #144]	; (801c048 <__swsetup_r+0xd8>)
 801bfb8:	429c      	cmp	r4, r3
 801bfba:	bf08      	it	eq
 801bfbc:	68ec      	ldreq	r4, [r5, #12]
 801bfbe:	e7e6      	b.n	801bf8e <__swsetup_r+0x1e>
 801bfc0:	0758      	lsls	r0, r3, #29
 801bfc2:	d512      	bpl.n	801bfea <__swsetup_r+0x7a>
 801bfc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bfc6:	b141      	cbz	r1, 801bfda <__swsetup_r+0x6a>
 801bfc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bfcc:	4299      	cmp	r1, r3
 801bfce:	d002      	beq.n	801bfd6 <__swsetup_r+0x66>
 801bfd0:	4630      	mov	r0, r6
 801bfd2:	f7fd fed3 	bl	8019d7c <_free_r>
 801bfd6:	2300      	movs	r3, #0
 801bfd8:	6363      	str	r3, [r4, #52]	; 0x34
 801bfda:	89a3      	ldrh	r3, [r4, #12]
 801bfdc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801bfe0:	81a3      	strh	r3, [r4, #12]
 801bfe2:	2300      	movs	r3, #0
 801bfe4:	6063      	str	r3, [r4, #4]
 801bfe6:	6923      	ldr	r3, [r4, #16]
 801bfe8:	6023      	str	r3, [r4, #0]
 801bfea:	89a3      	ldrh	r3, [r4, #12]
 801bfec:	f043 0308 	orr.w	r3, r3, #8
 801bff0:	81a3      	strh	r3, [r4, #12]
 801bff2:	6923      	ldr	r3, [r4, #16]
 801bff4:	b94b      	cbnz	r3, 801c00a <__swsetup_r+0x9a>
 801bff6:	89a3      	ldrh	r3, [r4, #12]
 801bff8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801bffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c000:	d003      	beq.n	801c00a <__swsetup_r+0x9a>
 801c002:	4621      	mov	r1, r4
 801c004:	4630      	mov	r0, r6
 801c006:	f001 fb45 	bl	801d694 <__smakebuf_r>
 801c00a:	89a0      	ldrh	r0, [r4, #12]
 801c00c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c010:	f010 0301 	ands.w	r3, r0, #1
 801c014:	d00a      	beq.n	801c02c <__swsetup_r+0xbc>
 801c016:	2300      	movs	r3, #0
 801c018:	60a3      	str	r3, [r4, #8]
 801c01a:	6963      	ldr	r3, [r4, #20]
 801c01c:	425b      	negs	r3, r3
 801c01e:	61a3      	str	r3, [r4, #24]
 801c020:	6923      	ldr	r3, [r4, #16]
 801c022:	b943      	cbnz	r3, 801c036 <__swsetup_r+0xc6>
 801c024:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c028:	d1ba      	bne.n	801bfa0 <__swsetup_r+0x30>
 801c02a:	bd70      	pop	{r4, r5, r6, pc}
 801c02c:	0781      	lsls	r1, r0, #30
 801c02e:	bf58      	it	pl
 801c030:	6963      	ldrpl	r3, [r4, #20]
 801c032:	60a3      	str	r3, [r4, #8]
 801c034:	e7f4      	b.n	801c020 <__swsetup_r+0xb0>
 801c036:	2000      	movs	r0, #0
 801c038:	e7f7      	b.n	801c02a <__swsetup_r+0xba>
 801c03a:	bf00      	nop
 801c03c:	200001d8 	.word	0x200001d8
 801c040:	08020e34 	.word	0x08020e34
 801c044:	08020e54 	.word	0x08020e54
 801c048:	08020e14 	.word	0x08020e14

0801c04c <__assert_func>:
 801c04c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c04e:	4614      	mov	r4, r2
 801c050:	461a      	mov	r2, r3
 801c052:	4b09      	ldr	r3, [pc, #36]	; (801c078 <__assert_func+0x2c>)
 801c054:	681b      	ldr	r3, [r3, #0]
 801c056:	4605      	mov	r5, r0
 801c058:	68d8      	ldr	r0, [r3, #12]
 801c05a:	b14c      	cbz	r4, 801c070 <__assert_func+0x24>
 801c05c:	4b07      	ldr	r3, [pc, #28]	; (801c07c <__assert_func+0x30>)
 801c05e:	9100      	str	r1, [sp, #0]
 801c060:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c064:	4906      	ldr	r1, [pc, #24]	; (801c080 <__assert_func+0x34>)
 801c066:	462b      	mov	r3, r5
 801c068:	f000 ff58 	bl	801cf1c <fiprintf>
 801c06c:	f7fd fd1a 	bl	8019aa4 <abort>
 801c070:	4b04      	ldr	r3, [pc, #16]	; (801c084 <__assert_func+0x38>)
 801c072:	461c      	mov	r4, r3
 801c074:	e7f3      	b.n	801c05e <__assert_func+0x12>
 801c076:	bf00      	nop
 801c078:	200001d8 	.word	0x200001d8
 801c07c:	08020f00 	.word	0x08020f00
 801c080:	08020f0d 	.word	0x08020f0d
 801c084:	08020f3b 	.word	0x08020f3b

0801c088 <_close_r>:
 801c088:	b538      	push	{r3, r4, r5, lr}
 801c08a:	4d06      	ldr	r5, [pc, #24]	; (801c0a4 <_close_r+0x1c>)
 801c08c:	2300      	movs	r3, #0
 801c08e:	4604      	mov	r4, r0
 801c090:	4608      	mov	r0, r1
 801c092:	602b      	str	r3, [r5, #0]
 801c094:	f7e7 f8b5 	bl	8003202 <_close>
 801c098:	1c43      	adds	r3, r0, #1
 801c09a:	d102      	bne.n	801c0a2 <_close_r+0x1a>
 801c09c:	682b      	ldr	r3, [r5, #0]
 801c09e:	b103      	cbz	r3, 801c0a2 <_close_r+0x1a>
 801c0a0:	6023      	str	r3, [r4, #0]
 801c0a2:	bd38      	pop	{r3, r4, r5, pc}
 801c0a4:	20008f98 	.word	0x20008f98

0801c0a8 <quorem>:
 801c0a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0ac:	6903      	ldr	r3, [r0, #16]
 801c0ae:	690c      	ldr	r4, [r1, #16]
 801c0b0:	42a3      	cmp	r3, r4
 801c0b2:	4607      	mov	r7, r0
 801c0b4:	f2c0 8081 	blt.w	801c1ba <quorem+0x112>
 801c0b8:	3c01      	subs	r4, #1
 801c0ba:	f101 0814 	add.w	r8, r1, #20
 801c0be:	f100 0514 	add.w	r5, r0, #20
 801c0c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c0c6:	9301      	str	r3, [sp, #4]
 801c0c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c0cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c0d0:	3301      	adds	r3, #1
 801c0d2:	429a      	cmp	r2, r3
 801c0d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801c0d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c0dc:	fbb2 f6f3 	udiv	r6, r2, r3
 801c0e0:	d331      	bcc.n	801c146 <quorem+0x9e>
 801c0e2:	f04f 0e00 	mov.w	lr, #0
 801c0e6:	4640      	mov	r0, r8
 801c0e8:	46ac      	mov	ip, r5
 801c0ea:	46f2      	mov	sl, lr
 801c0ec:	f850 2b04 	ldr.w	r2, [r0], #4
 801c0f0:	b293      	uxth	r3, r2
 801c0f2:	fb06 e303 	mla	r3, r6, r3, lr
 801c0f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801c0fa:	b29b      	uxth	r3, r3
 801c0fc:	ebaa 0303 	sub.w	r3, sl, r3
 801c100:	0c12      	lsrs	r2, r2, #16
 801c102:	f8dc a000 	ldr.w	sl, [ip]
 801c106:	fb06 e202 	mla	r2, r6, r2, lr
 801c10a:	fa13 f38a 	uxtah	r3, r3, sl
 801c10e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801c112:	fa1f fa82 	uxth.w	sl, r2
 801c116:	f8dc 2000 	ldr.w	r2, [ip]
 801c11a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801c11e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c122:	b29b      	uxth	r3, r3
 801c124:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c128:	4581      	cmp	r9, r0
 801c12a:	f84c 3b04 	str.w	r3, [ip], #4
 801c12e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801c132:	d2db      	bcs.n	801c0ec <quorem+0x44>
 801c134:	f855 300b 	ldr.w	r3, [r5, fp]
 801c138:	b92b      	cbnz	r3, 801c146 <quorem+0x9e>
 801c13a:	9b01      	ldr	r3, [sp, #4]
 801c13c:	3b04      	subs	r3, #4
 801c13e:	429d      	cmp	r5, r3
 801c140:	461a      	mov	r2, r3
 801c142:	d32e      	bcc.n	801c1a2 <quorem+0xfa>
 801c144:	613c      	str	r4, [r7, #16]
 801c146:	4638      	mov	r0, r7
 801c148:	f001 fdca 	bl	801dce0 <__mcmp>
 801c14c:	2800      	cmp	r0, #0
 801c14e:	db24      	blt.n	801c19a <quorem+0xf2>
 801c150:	3601      	adds	r6, #1
 801c152:	4628      	mov	r0, r5
 801c154:	f04f 0c00 	mov.w	ip, #0
 801c158:	f858 2b04 	ldr.w	r2, [r8], #4
 801c15c:	f8d0 e000 	ldr.w	lr, [r0]
 801c160:	b293      	uxth	r3, r2
 801c162:	ebac 0303 	sub.w	r3, ip, r3
 801c166:	0c12      	lsrs	r2, r2, #16
 801c168:	fa13 f38e 	uxtah	r3, r3, lr
 801c16c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801c170:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c174:	b29b      	uxth	r3, r3
 801c176:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c17a:	45c1      	cmp	r9, r8
 801c17c:	f840 3b04 	str.w	r3, [r0], #4
 801c180:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801c184:	d2e8      	bcs.n	801c158 <quorem+0xb0>
 801c186:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c18a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c18e:	b922      	cbnz	r2, 801c19a <quorem+0xf2>
 801c190:	3b04      	subs	r3, #4
 801c192:	429d      	cmp	r5, r3
 801c194:	461a      	mov	r2, r3
 801c196:	d30a      	bcc.n	801c1ae <quorem+0x106>
 801c198:	613c      	str	r4, [r7, #16]
 801c19a:	4630      	mov	r0, r6
 801c19c:	b003      	add	sp, #12
 801c19e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1a2:	6812      	ldr	r2, [r2, #0]
 801c1a4:	3b04      	subs	r3, #4
 801c1a6:	2a00      	cmp	r2, #0
 801c1a8:	d1cc      	bne.n	801c144 <quorem+0x9c>
 801c1aa:	3c01      	subs	r4, #1
 801c1ac:	e7c7      	b.n	801c13e <quorem+0x96>
 801c1ae:	6812      	ldr	r2, [r2, #0]
 801c1b0:	3b04      	subs	r3, #4
 801c1b2:	2a00      	cmp	r2, #0
 801c1b4:	d1f0      	bne.n	801c198 <quorem+0xf0>
 801c1b6:	3c01      	subs	r4, #1
 801c1b8:	e7eb      	b.n	801c192 <quorem+0xea>
 801c1ba:	2000      	movs	r0, #0
 801c1bc:	e7ee      	b.n	801c19c <quorem+0xf4>
	...

0801c1c0 <_dtoa_r>:
 801c1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1c4:	ed2d 8b02 	vpush	{d8}
 801c1c8:	ec57 6b10 	vmov	r6, r7, d0
 801c1cc:	b095      	sub	sp, #84	; 0x54
 801c1ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801c1d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801c1d4:	9105      	str	r1, [sp, #20]
 801c1d6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801c1da:	4604      	mov	r4, r0
 801c1dc:	9209      	str	r2, [sp, #36]	; 0x24
 801c1de:	930f      	str	r3, [sp, #60]	; 0x3c
 801c1e0:	b975      	cbnz	r5, 801c200 <_dtoa_r+0x40>
 801c1e2:	2010      	movs	r0, #16
 801c1e4:	f7fd fd8a 	bl	8019cfc <malloc>
 801c1e8:	4602      	mov	r2, r0
 801c1ea:	6260      	str	r0, [r4, #36]	; 0x24
 801c1ec:	b920      	cbnz	r0, 801c1f8 <_dtoa_r+0x38>
 801c1ee:	4bb2      	ldr	r3, [pc, #712]	; (801c4b8 <_dtoa_r+0x2f8>)
 801c1f0:	21ea      	movs	r1, #234	; 0xea
 801c1f2:	48b2      	ldr	r0, [pc, #712]	; (801c4bc <_dtoa_r+0x2fc>)
 801c1f4:	f7ff ff2a 	bl	801c04c <__assert_func>
 801c1f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c1fc:	6005      	str	r5, [r0, #0]
 801c1fe:	60c5      	str	r5, [r0, #12]
 801c200:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c202:	6819      	ldr	r1, [r3, #0]
 801c204:	b151      	cbz	r1, 801c21c <_dtoa_r+0x5c>
 801c206:	685a      	ldr	r2, [r3, #4]
 801c208:	604a      	str	r2, [r1, #4]
 801c20a:	2301      	movs	r3, #1
 801c20c:	4093      	lsls	r3, r2
 801c20e:	608b      	str	r3, [r1, #8]
 801c210:	4620      	mov	r0, r4
 801c212:	f001 fadd 	bl	801d7d0 <_Bfree>
 801c216:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c218:	2200      	movs	r2, #0
 801c21a:	601a      	str	r2, [r3, #0]
 801c21c:	1e3b      	subs	r3, r7, #0
 801c21e:	bfb9      	ittee	lt
 801c220:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801c224:	9303      	strlt	r3, [sp, #12]
 801c226:	2300      	movge	r3, #0
 801c228:	f8c8 3000 	strge.w	r3, [r8]
 801c22c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801c230:	4ba3      	ldr	r3, [pc, #652]	; (801c4c0 <_dtoa_r+0x300>)
 801c232:	bfbc      	itt	lt
 801c234:	2201      	movlt	r2, #1
 801c236:	f8c8 2000 	strlt.w	r2, [r8]
 801c23a:	ea33 0309 	bics.w	r3, r3, r9
 801c23e:	d11b      	bne.n	801c278 <_dtoa_r+0xb8>
 801c240:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c242:	f242 730f 	movw	r3, #9999	; 0x270f
 801c246:	6013      	str	r3, [r2, #0]
 801c248:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c24c:	4333      	orrs	r3, r6
 801c24e:	f000 857a 	beq.w	801cd46 <_dtoa_r+0xb86>
 801c252:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c254:	b963      	cbnz	r3, 801c270 <_dtoa_r+0xb0>
 801c256:	4b9b      	ldr	r3, [pc, #620]	; (801c4c4 <_dtoa_r+0x304>)
 801c258:	e024      	b.n	801c2a4 <_dtoa_r+0xe4>
 801c25a:	4b9b      	ldr	r3, [pc, #620]	; (801c4c8 <_dtoa_r+0x308>)
 801c25c:	9300      	str	r3, [sp, #0]
 801c25e:	3308      	adds	r3, #8
 801c260:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c262:	6013      	str	r3, [r2, #0]
 801c264:	9800      	ldr	r0, [sp, #0]
 801c266:	b015      	add	sp, #84	; 0x54
 801c268:	ecbd 8b02 	vpop	{d8}
 801c26c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c270:	4b94      	ldr	r3, [pc, #592]	; (801c4c4 <_dtoa_r+0x304>)
 801c272:	9300      	str	r3, [sp, #0]
 801c274:	3303      	adds	r3, #3
 801c276:	e7f3      	b.n	801c260 <_dtoa_r+0xa0>
 801c278:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c27c:	2200      	movs	r2, #0
 801c27e:	ec51 0b17 	vmov	r0, r1, d7
 801c282:	2300      	movs	r3, #0
 801c284:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801c288:	f7e4 fc2e 	bl	8000ae8 <__aeabi_dcmpeq>
 801c28c:	4680      	mov	r8, r0
 801c28e:	b158      	cbz	r0, 801c2a8 <_dtoa_r+0xe8>
 801c290:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c292:	2301      	movs	r3, #1
 801c294:	6013      	str	r3, [r2, #0]
 801c296:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c298:	2b00      	cmp	r3, #0
 801c29a:	f000 8551 	beq.w	801cd40 <_dtoa_r+0xb80>
 801c29e:	488b      	ldr	r0, [pc, #556]	; (801c4cc <_dtoa_r+0x30c>)
 801c2a0:	6018      	str	r0, [r3, #0]
 801c2a2:	1e43      	subs	r3, r0, #1
 801c2a4:	9300      	str	r3, [sp, #0]
 801c2a6:	e7dd      	b.n	801c264 <_dtoa_r+0xa4>
 801c2a8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801c2ac:	aa12      	add	r2, sp, #72	; 0x48
 801c2ae:	a913      	add	r1, sp, #76	; 0x4c
 801c2b0:	4620      	mov	r0, r4
 801c2b2:	f001 fe35 	bl	801df20 <__d2b>
 801c2b6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801c2ba:	4683      	mov	fp, r0
 801c2bc:	2d00      	cmp	r5, #0
 801c2be:	d07c      	beq.n	801c3ba <_dtoa_r+0x1fa>
 801c2c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c2c2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801c2c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c2ca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801c2ce:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801c2d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801c2d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801c2da:	4b7d      	ldr	r3, [pc, #500]	; (801c4d0 <_dtoa_r+0x310>)
 801c2dc:	2200      	movs	r2, #0
 801c2de:	4630      	mov	r0, r6
 801c2e0:	4639      	mov	r1, r7
 801c2e2:	f7e3 ffe1 	bl	80002a8 <__aeabi_dsub>
 801c2e6:	a36e      	add	r3, pc, #440	; (adr r3, 801c4a0 <_dtoa_r+0x2e0>)
 801c2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2ec:	f7e4 f994 	bl	8000618 <__aeabi_dmul>
 801c2f0:	a36d      	add	r3, pc, #436	; (adr r3, 801c4a8 <_dtoa_r+0x2e8>)
 801c2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2f6:	f7e3 ffd9 	bl	80002ac <__adddf3>
 801c2fa:	4606      	mov	r6, r0
 801c2fc:	4628      	mov	r0, r5
 801c2fe:	460f      	mov	r7, r1
 801c300:	f7e4 f920 	bl	8000544 <__aeabi_i2d>
 801c304:	a36a      	add	r3, pc, #424	; (adr r3, 801c4b0 <_dtoa_r+0x2f0>)
 801c306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c30a:	f7e4 f985 	bl	8000618 <__aeabi_dmul>
 801c30e:	4602      	mov	r2, r0
 801c310:	460b      	mov	r3, r1
 801c312:	4630      	mov	r0, r6
 801c314:	4639      	mov	r1, r7
 801c316:	f7e3 ffc9 	bl	80002ac <__adddf3>
 801c31a:	4606      	mov	r6, r0
 801c31c:	460f      	mov	r7, r1
 801c31e:	f7e4 fc2b 	bl	8000b78 <__aeabi_d2iz>
 801c322:	2200      	movs	r2, #0
 801c324:	4682      	mov	sl, r0
 801c326:	2300      	movs	r3, #0
 801c328:	4630      	mov	r0, r6
 801c32a:	4639      	mov	r1, r7
 801c32c:	f7e4 fbe6 	bl	8000afc <__aeabi_dcmplt>
 801c330:	b148      	cbz	r0, 801c346 <_dtoa_r+0x186>
 801c332:	4650      	mov	r0, sl
 801c334:	f7e4 f906 	bl	8000544 <__aeabi_i2d>
 801c338:	4632      	mov	r2, r6
 801c33a:	463b      	mov	r3, r7
 801c33c:	f7e4 fbd4 	bl	8000ae8 <__aeabi_dcmpeq>
 801c340:	b908      	cbnz	r0, 801c346 <_dtoa_r+0x186>
 801c342:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801c346:	f1ba 0f16 	cmp.w	sl, #22
 801c34a:	d854      	bhi.n	801c3f6 <_dtoa_r+0x236>
 801c34c:	4b61      	ldr	r3, [pc, #388]	; (801c4d4 <_dtoa_r+0x314>)
 801c34e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801c352:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c356:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801c35a:	f7e4 fbcf 	bl	8000afc <__aeabi_dcmplt>
 801c35e:	2800      	cmp	r0, #0
 801c360:	d04b      	beq.n	801c3fa <_dtoa_r+0x23a>
 801c362:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801c366:	2300      	movs	r3, #0
 801c368:	930e      	str	r3, [sp, #56]	; 0x38
 801c36a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c36c:	1b5d      	subs	r5, r3, r5
 801c36e:	1e6b      	subs	r3, r5, #1
 801c370:	9304      	str	r3, [sp, #16]
 801c372:	bf43      	ittte	mi
 801c374:	2300      	movmi	r3, #0
 801c376:	f1c5 0801 	rsbmi	r8, r5, #1
 801c37a:	9304      	strmi	r3, [sp, #16]
 801c37c:	f04f 0800 	movpl.w	r8, #0
 801c380:	f1ba 0f00 	cmp.w	sl, #0
 801c384:	db3b      	blt.n	801c3fe <_dtoa_r+0x23e>
 801c386:	9b04      	ldr	r3, [sp, #16]
 801c388:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801c38c:	4453      	add	r3, sl
 801c38e:	9304      	str	r3, [sp, #16]
 801c390:	2300      	movs	r3, #0
 801c392:	9306      	str	r3, [sp, #24]
 801c394:	9b05      	ldr	r3, [sp, #20]
 801c396:	2b09      	cmp	r3, #9
 801c398:	d869      	bhi.n	801c46e <_dtoa_r+0x2ae>
 801c39a:	2b05      	cmp	r3, #5
 801c39c:	bfc4      	itt	gt
 801c39e:	3b04      	subgt	r3, #4
 801c3a0:	9305      	strgt	r3, [sp, #20]
 801c3a2:	9b05      	ldr	r3, [sp, #20]
 801c3a4:	f1a3 0302 	sub.w	r3, r3, #2
 801c3a8:	bfcc      	ite	gt
 801c3aa:	2500      	movgt	r5, #0
 801c3ac:	2501      	movle	r5, #1
 801c3ae:	2b03      	cmp	r3, #3
 801c3b0:	d869      	bhi.n	801c486 <_dtoa_r+0x2c6>
 801c3b2:	e8df f003 	tbb	[pc, r3]
 801c3b6:	4e2c      	.short	0x4e2c
 801c3b8:	5a4c      	.short	0x5a4c
 801c3ba:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801c3be:	441d      	add	r5, r3
 801c3c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801c3c4:	2b20      	cmp	r3, #32
 801c3c6:	bfc1      	itttt	gt
 801c3c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801c3cc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801c3d0:	fa09 f303 	lslgt.w	r3, r9, r3
 801c3d4:	fa26 f000 	lsrgt.w	r0, r6, r0
 801c3d8:	bfda      	itte	le
 801c3da:	f1c3 0320 	rsble	r3, r3, #32
 801c3de:	fa06 f003 	lslle.w	r0, r6, r3
 801c3e2:	4318      	orrgt	r0, r3
 801c3e4:	f7e4 f89e 	bl	8000524 <__aeabi_ui2d>
 801c3e8:	2301      	movs	r3, #1
 801c3ea:	4606      	mov	r6, r0
 801c3ec:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801c3f0:	3d01      	subs	r5, #1
 801c3f2:	9310      	str	r3, [sp, #64]	; 0x40
 801c3f4:	e771      	b.n	801c2da <_dtoa_r+0x11a>
 801c3f6:	2301      	movs	r3, #1
 801c3f8:	e7b6      	b.n	801c368 <_dtoa_r+0x1a8>
 801c3fa:	900e      	str	r0, [sp, #56]	; 0x38
 801c3fc:	e7b5      	b.n	801c36a <_dtoa_r+0x1aa>
 801c3fe:	f1ca 0300 	rsb	r3, sl, #0
 801c402:	9306      	str	r3, [sp, #24]
 801c404:	2300      	movs	r3, #0
 801c406:	eba8 080a 	sub.w	r8, r8, sl
 801c40a:	930d      	str	r3, [sp, #52]	; 0x34
 801c40c:	e7c2      	b.n	801c394 <_dtoa_r+0x1d4>
 801c40e:	2300      	movs	r3, #0
 801c410:	9308      	str	r3, [sp, #32]
 801c412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c414:	2b00      	cmp	r3, #0
 801c416:	dc39      	bgt.n	801c48c <_dtoa_r+0x2cc>
 801c418:	f04f 0901 	mov.w	r9, #1
 801c41c:	f8cd 9004 	str.w	r9, [sp, #4]
 801c420:	464b      	mov	r3, r9
 801c422:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801c426:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c428:	2200      	movs	r2, #0
 801c42a:	6042      	str	r2, [r0, #4]
 801c42c:	2204      	movs	r2, #4
 801c42e:	f102 0614 	add.w	r6, r2, #20
 801c432:	429e      	cmp	r6, r3
 801c434:	6841      	ldr	r1, [r0, #4]
 801c436:	d92f      	bls.n	801c498 <_dtoa_r+0x2d8>
 801c438:	4620      	mov	r0, r4
 801c43a:	f001 f989 	bl	801d750 <_Balloc>
 801c43e:	9000      	str	r0, [sp, #0]
 801c440:	2800      	cmp	r0, #0
 801c442:	d14b      	bne.n	801c4dc <_dtoa_r+0x31c>
 801c444:	4b24      	ldr	r3, [pc, #144]	; (801c4d8 <_dtoa_r+0x318>)
 801c446:	4602      	mov	r2, r0
 801c448:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801c44c:	e6d1      	b.n	801c1f2 <_dtoa_r+0x32>
 801c44e:	2301      	movs	r3, #1
 801c450:	e7de      	b.n	801c410 <_dtoa_r+0x250>
 801c452:	2300      	movs	r3, #0
 801c454:	9308      	str	r3, [sp, #32]
 801c456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c458:	eb0a 0903 	add.w	r9, sl, r3
 801c45c:	f109 0301 	add.w	r3, r9, #1
 801c460:	2b01      	cmp	r3, #1
 801c462:	9301      	str	r3, [sp, #4]
 801c464:	bfb8      	it	lt
 801c466:	2301      	movlt	r3, #1
 801c468:	e7dd      	b.n	801c426 <_dtoa_r+0x266>
 801c46a:	2301      	movs	r3, #1
 801c46c:	e7f2      	b.n	801c454 <_dtoa_r+0x294>
 801c46e:	2501      	movs	r5, #1
 801c470:	2300      	movs	r3, #0
 801c472:	9305      	str	r3, [sp, #20]
 801c474:	9508      	str	r5, [sp, #32]
 801c476:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 801c47a:	2200      	movs	r2, #0
 801c47c:	f8cd 9004 	str.w	r9, [sp, #4]
 801c480:	2312      	movs	r3, #18
 801c482:	9209      	str	r2, [sp, #36]	; 0x24
 801c484:	e7cf      	b.n	801c426 <_dtoa_r+0x266>
 801c486:	2301      	movs	r3, #1
 801c488:	9308      	str	r3, [sp, #32]
 801c48a:	e7f4      	b.n	801c476 <_dtoa_r+0x2b6>
 801c48c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801c490:	f8cd 9004 	str.w	r9, [sp, #4]
 801c494:	464b      	mov	r3, r9
 801c496:	e7c6      	b.n	801c426 <_dtoa_r+0x266>
 801c498:	3101      	adds	r1, #1
 801c49a:	6041      	str	r1, [r0, #4]
 801c49c:	0052      	lsls	r2, r2, #1
 801c49e:	e7c6      	b.n	801c42e <_dtoa_r+0x26e>
 801c4a0:	636f4361 	.word	0x636f4361
 801c4a4:	3fd287a7 	.word	0x3fd287a7
 801c4a8:	8b60c8b3 	.word	0x8b60c8b3
 801c4ac:	3fc68a28 	.word	0x3fc68a28
 801c4b0:	509f79fb 	.word	0x509f79fb
 801c4b4:	3fd34413 	.word	0x3fd34413
 801c4b8:	08020f49 	.word	0x08020f49
 801c4bc:	08020f60 	.word	0x08020f60
 801c4c0:	7ff00000 	.word	0x7ff00000
 801c4c4:	08020f45 	.word	0x08020f45
 801c4c8:	08020f3c 	.word	0x08020f3c
 801c4cc:	080211c2 	.word	0x080211c2
 801c4d0:	3ff80000 	.word	0x3ff80000
 801c4d4:	080210d8 	.word	0x080210d8
 801c4d8:	08020fbf 	.word	0x08020fbf
 801c4dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c4de:	9a00      	ldr	r2, [sp, #0]
 801c4e0:	601a      	str	r2, [r3, #0]
 801c4e2:	9b01      	ldr	r3, [sp, #4]
 801c4e4:	2b0e      	cmp	r3, #14
 801c4e6:	f200 80ad 	bhi.w	801c644 <_dtoa_r+0x484>
 801c4ea:	2d00      	cmp	r5, #0
 801c4ec:	f000 80aa 	beq.w	801c644 <_dtoa_r+0x484>
 801c4f0:	f1ba 0f00 	cmp.w	sl, #0
 801c4f4:	dd36      	ble.n	801c564 <_dtoa_r+0x3a4>
 801c4f6:	4ac3      	ldr	r2, [pc, #780]	; (801c804 <_dtoa_r+0x644>)
 801c4f8:	f00a 030f 	and.w	r3, sl, #15
 801c4fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801c500:	ed93 7b00 	vldr	d7, [r3]
 801c504:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801c508:	ea4f 172a 	mov.w	r7, sl, asr #4
 801c50c:	eeb0 8a47 	vmov.f32	s16, s14
 801c510:	eef0 8a67 	vmov.f32	s17, s15
 801c514:	d016      	beq.n	801c544 <_dtoa_r+0x384>
 801c516:	4bbc      	ldr	r3, [pc, #752]	; (801c808 <_dtoa_r+0x648>)
 801c518:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801c51c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801c520:	f7e4 f9a4 	bl	800086c <__aeabi_ddiv>
 801c524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c528:	f007 070f 	and.w	r7, r7, #15
 801c52c:	2503      	movs	r5, #3
 801c52e:	4eb6      	ldr	r6, [pc, #728]	; (801c808 <_dtoa_r+0x648>)
 801c530:	b957      	cbnz	r7, 801c548 <_dtoa_r+0x388>
 801c532:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c536:	ec53 2b18 	vmov	r2, r3, d8
 801c53a:	f7e4 f997 	bl	800086c <__aeabi_ddiv>
 801c53e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c542:	e029      	b.n	801c598 <_dtoa_r+0x3d8>
 801c544:	2502      	movs	r5, #2
 801c546:	e7f2      	b.n	801c52e <_dtoa_r+0x36e>
 801c548:	07f9      	lsls	r1, r7, #31
 801c54a:	d508      	bpl.n	801c55e <_dtoa_r+0x39e>
 801c54c:	ec51 0b18 	vmov	r0, r1, d8
 801c550:	e9d6 2300 	ldrd	r2, r3, [r6]
 801c554:	f7e4 f860 	bl	8000618 <__aeabi_dmul>
 801c558:	ec41 0b18 	vmov	d8, r0, r1
 801c55c:	3501      	adds	r5, #1
 801c55e:	107f      	asrs	r7, r7, #1
 801c560:	3608      	adds	r6, #8
 801c562:	e7e5      	b.n	801c530 <_dtoa_r+0x370>
 801c564:	f000 80a6 	beq.w	801c6b4 <_dtoa_r+0x4f4>
 801c568:	f1ca 0600 	rsb	r6, sl, #0
 801c56c:	4ba5      	ldr	r3, [pc, #660]	; (801c804 <_dtoa_r+0x644>)
 801c56e:	4fa6      	ldr	r7, [pc, #664]	; (801c808 <_dtoa_r+0x648>)
 801c570:	f006 020f 	and.w	r2, r6, #15
 801c574:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c57c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801c580:	f7e4 f84a 	bl	8000618 <__aeabi_dmul>
 801c584:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c588:	1136      	asrs	r6, r6, #4
 801c58a:	2300      	movs	r3, #0
 801c58c:	2502      	movs	r5, #2
 801c58e:	2e00      	cmp	r6, #0
 801c590:	f040 8085 	bne.w	801c69e <_dtoa_r+0x4de>
 801c594:	2b00      	cmp	r3, #0
 801c596:	d1d2      	bne.n	801c53e <_dtoa_r+0x37e>
 801c598:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c59a:	2b00      	cmp	r3, #0
 801c59c:	f000 808c 	beq.w	801c6b8 <_dtoa_r+0x4f8>
 801c5a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801c5a4:	4b99      	ldr	r3, [pc, #612]	; (801c80c <_dtoa_r+0x64c>)
 801c5a6:	2200      	movs	r2, #0
 801c5a8:	4630      	mov	r0, r6
 801c5aa:	4639      	mov	r1, r7
 801c5ac:	f7e4 faa6 	bl	8000afc <__aeabi_dcmplt>
 801c5b0:	2800      	cmp	r0, #0
 801c5b2:	f000 8081 	beq.w	801c6b8 <_dtoa_r+0x4f8>
 801c5b6:	9b01      	ldr	r3, [sp, #4]
 801c5b8:	2b00      	cmp	r3, #0
 801c5ba:	d07d      	beq.n	801c6b8 <_dtoa_r+0x4f8>
 801c5bc:	f1b9 0f00 	cmp.w	r9, #0
 801c5c0:	dd3c      	ble.n	801c63c <_dtoa_r+0x47c>
 801c5c2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801c5c6:	9307      	str	r3, [sp, #28]
 801c5c8:	2200      	movs	r2, #0
 801c5ca:	4b91      	ldr	r3, [pc, #580]	; (801c810 <_dtoa_r+0x650>)
 801c5cc:	4630      	mov	r0, r6
 801c5ce:	4639      	mov	r1, r7
 801c5d0:	f7e4 f822 	bl	8000618 <__aeabi_dmul>
 801c5d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c5d8:	3501      	adds	r5, #1
 801c5da:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801c5de:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801c5e2:	4628      	mov	r0, r5
 801c5e4:	f7e3 ffae 	bl	8000544 <__aeabi_i2d>
 801c5e8:	4632      	mov	r2, r6
 801c5ea:	463b      	mov	r3, r7
 801c5ec:	f7e4 f814 	bl	8000618 <__aeabi_dmul>
 801c5f0:	4b88      	ldr	r3, [pc, #544]	; (801c814 <_dtoa_r+0x654>)
 801c5f2:	2200      	movs	r2, #0
 801c5f4:	f7e3 fe5a 	bl	80002ac <__adddf3>
 801c5f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801c5fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c600:	9303      	str	r3, [sp, #12]
 801c602:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c604:	2b00      	cmp	r3, #0
 801c606:	d15c      	bne.n	801c6c2 <_dtoa_r+0x502>
 801c608:	4b83      	ldr	r3, [pc, #524]	; (801c818 <_dtoa_r+0x658>)
 801c60a:	2200      	movs	r2, #0
 801c60c:	4630      	mov	r0, r6
 801c60e:	4639      	mov	r1, r7
 801c610:	f7e3 fe4a 	bl	80002a8 <__aeabi_dsub>
 801c614:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c618:	4606      	mov	r6, r0
 801c61a:	460f      	mov	r7, r1
 801c61c:	f7e4 fa8c 	bl	8000b38 <__aeabi_dcmpgt>
 801c620:	2800      	cmp	r0, #0
 801c622:	f040 8296 	bne.w	801cb52 <_dtoa_r+0x992>
 801c626:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801c62a:	4630      	mov	r0, r6
 801c62c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c630:	4639      	mov	r1, r7
 801c632:	f7e4 fa63 	bl	8000afc <__aeabi_dcmplt>
 801c636:	2800      	cmp	r0, #0
 801c638:	f040 8288 	bne.w	801cb4c <_dtoa_r+0x98c>
 801c63c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801c640:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c644:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c646:	2b00      	cmp	r3, #0
 801c648:	f2c0 8158 	blt.w	801c8fc <_dtoa_r+0x73c>
 801c64c:	f1ba 0f0e 	cmp.w	sl, #14
 801c650:	f300 8154 	bgt.w	801c8fc <_dtoa_r+0x73c>
 801c654:	4b6b      	ldr	r3, [pc, #428]	; (801c804 <_dtoa_r+0x644>)
 801c656:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801c65a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c65e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c660:	2b00      	cmp	r3, #0
 801c662:	f280 80e3 	bge.w	801c82c <_dtoa_r+0x66c>
 801c666:	9b01      	ldr	r3, [sp, #4]
 801c668:	2b00      	cmp	r3, #0
 801c66a:	f300 80df 	bgt.w	801c82c <_dtoa_r+0x66c>
 801c66e:	f040 826d 	bne.w	801cb4c <_dtoa_r+0x98c>
 801c672:	4b69      	ldr	r3, [pc, #420]	; (801c818 <_dtoa_r+0x658>)
 801c674:	2200      	movs	r2, #0
 801c676:	4640      	mov	r0, r8
 801c678:	4649      	mov	r1, r9
 801c67a:	f7e3 ffcd 	bl	8000618 <__aeabi_dmul>
 801c67e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c682:	f7e4 fa4f 	bl	8000b24 <__aeabi_dcmpge>
 801c686:	9e01      	ldr	r6, [sp, #4]
 801c688:	4637      	mov	r7, r6
 801c68a:	2800      	cmp	r0, #0
 801c68c:	f040 8243 	bne.w	801cb16 <_dtoa_r+0x956>
 801c690:	9d00      	ldr	r5, [sp, #0]
 801c692:	2331      	movs	r3, #49	; 0x31
 801c694:	f805 3b01 	strb.w	r3, [r5], #1
 801c698:	f10a 0a01 	add.w	sl, sl, #1
 801c69c:	e23f      	b.n	801cb1e <_dtoa_r+0x95e>
 801c69e:	07f2      	lsls	r2, r6, #31
 801c6a0:	d505      	bpl.n	801c6ae <_dtoa_r+0x4ee>
 801c6a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c6a6:	f7e3 ffb7 	bl	8000618 <__aeabi_dmul>
 801c6aa:	3501      	adds	r5, #1
 801c6ac:	2301      	movs	r3, #1
 801c6ae:	1076      	asrs	r6, r6, #1
 801c6b0:	3708      	adds	r7, #8
 801c6b2:	e76c      	b.n	801c58e <_dtoa_r+0x3ce>
 801c6b4:	2502      	movs	r5, #2
 801c6b6:	e76f      	b.n	801c598 <_dtoa_r+0x3d8>
 801c6b8:	9b01      	ldr	r3, [sp, #4]
 801c6ba:	f8cd a01c 	str.w	sl, [sp, #28]
 801c6be:	930c      	str	r3, [sp, #48]	; 0x30
 801c6c0:	e78d      	b.n	801c5de <_dtoa_r+0x41e>
 801c6c2:	9900      	ldr	r1, [sp, #0]
 801c6c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 801c6c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c6c8:	4b4e      	ldr	r3, [pc, #312]	; (801c804 <_dtoa_r+0x644>)
 801c6ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c6ce:	4401      	add	r1, r0
 801c6d0:	9102      	str	r1, [sp, #8]
 801c6d2:	9908      	ldr	r1, [sp, #32]
 801c6d4:	eeb0 8a47 	vmov.f32	s16, s14
 801c6d8:	eef0 8a67 	vmov.f32	s17, s15
 801c6dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c6e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801c6e4:	2900      	cmp	r1, #0
 801c6e6:	d045      	beq.n	801c774 <_dtoa_r+0x5b4>
 801c6e8:	494c      	ldr	r1, [pc, #304]	; (801c81c <_dtoa_r+0x65c>)
 801c6ea:	2000      	movs	r0, #0
 801c6ec:	f7e4 f8be 	bl	800086c <__aeabi_ddiv>
 801c6f0:	ec53 2b18 	vmov	r2, r3, d8
 801c6f4:	f7e3 fdd8 	bl	80002a8 <__aeabi_dsub>
 801c6f8:	9d00      	ldr	r5, [sp, #0]
 801c6fa:	ec41 0b18 	vmov	d8, r0, r1
 801c6fe:	4639      	mov	r1, r7
 801c700:	4630      	mov	r0, r6
 801c702:	f7e4 fa39 	bl	8000b78 <__aeabi_d2iz>
 801c706:	900c      	str	r0, [sp, #48]	; 0x30
 801c708:	f7e3 ff1c 	bl	8000544 <__aeabi_i2d>
 801c70c:	4602      	mov	r2, r0
 801c70e:	460b      	mov	r3, r1
 801c710:	4630      	mov	r0, r6
 801c712:	4639      	mov	r1, r7
 801c714:	f7e3 fdc8 	bl	80002a8 <__aeabi_dsub>
 801c718:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c71a:	3330      	adds	r3, #48	; 0x30
 801c71c:	f805 3b01 	strb.w	r3, [r5], #1
 801c720:	ec53 2b18 	vmov	r2, r3, d8
 801c724:	4606      	mov	r6, r0
 801c726:	460f      	mov	r7, r1
 801c728:	f7e4 f9e8 	bl	8000afc <__aeabi_dcmplt>
 801c72c:	2800      	cmp	r0, #0
 801c72e:	d165      	bne.n	801c7fc <_dtoa_r+0x63c>
 801c730:	4632      	mov	r2, r6
 801c732:	463b      	mov	r3, r7
 801c734:	4935      	ldr	r1, [pc, #212]	; (801c80c <_dtoa_r+0x64c>)
 801c736:	2000      	movs	r0, #0
 801c738:	f7e3 fdb6 	bl	80002a8 <__aeabi_dsub>
 801c73c:	ec53 2b18 	vmov	r2, r3, d8
 801c740:	f7e4 f9dc 	bl	8000afc <__aeabi_dcmplt>
 801c744:	2800      	cmp	r0, #0
 801c746:	f040 80b9 	bne.w	801c8bc <_dtoa_r+0x6fc>
 801c74a:	9b02      	ldr	r3, [sp, #8]
 801c74c:	429d      	cmp	r5, r3
 801c74e:	f43f af75 	beq.w	801c63c <_dtoa_r+0x47c>
 801c752:	4b2f      	ldr	r3, [pc, #188]	; (801c810 <_dtoa_r+0x650>)
 801c754:	ec51 0b18 	vmov	r0, r1, d8
 801c758:	2200      	movs	r2, #0
 801c75a:	f7e3 ff5d 	bl	8000618 <__aeabi_dmul>
 801c75e:	4b2c      	ldr	r3, [pc, #176]	; (801c810 <_dtoa_r+0x650>)
 801c760:	ec41 0b18 	vmov	d8, r0, r1
 801c764:	2200      	movs	r2, #0
 801c766:	4630      	mov	r0, r6
 801c768:	4639      	mov	r1, r7
 801c76a:	f7e3 ff55 	bl	8000618 <__aeabi_dmul>
 801c76e:	4606      	mov	r6, r0
 801c770:	460f      	mov	r7, r1
 801c772:	e7c4      	b.n	801c6fe <_dtoa_r+0x53e>
 801c774:	ec51 0b17 	vmov	r0, r1, d7
 801c778:	f7e3 ff4e 	bl	8000618 <__aeabi_dmul>
 801c77c:	9b02      	ldr	r3, [sp, #8]
 801c77e:	9d00      	ldr	r5, [sp, #0]
 801c780:	930c      	str	r3, [sp, #48]	; 0x30
 801c782:	ec41 0b18 	vmov	d8, r0, r1
 801c786:	4639      	mov	r1, r7
 801c788:	4630      	mov	r0, r6
 801c78a:	f7e4 f9f5 	bl	8000b78 <__aeabi_d2iz>
 801c78e:	9011      	str	r0, [sp, #68]	; 0x44
 801c790:	f7e3 fed8 	bl	8000544 <__aeabi_i2d>
 801c794:	4602      	mov	r2, r0
 801c796:	460b      	mov	r3, r1
 801c798:	4630      	mov	r0, r6
 801c79a:	4639      	mov	r1, r7
 801c79c:	f7e3 fd84 	bl	80002a8 <__aeabi_dsub>
 801c7a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c7a2:	3330      	adds	r3, #48	; 0x30
 801c7a4:	f805 3b01 	strb.w	r3, [r5], #1
 801c7a8:	9b02      	ldr	r3, [sp, #8]
 801c7aa:	429d      	cmp	r5, r3
 801c7ac:	4606      	mov	r6, r0
 801c7ae:	460f      	mov	r7, r1
 801c7b0:	f04f 0200 	mov.w	r2, #0
 801c7b4:	d134      	bne.n	801c820 <_dtoa_r+0x660>
 801c7b6:	4b19      	ldr	r3, [pc, #100]	; (801c81c <_dtoa_r+0x65c>)
 801c7b8:	ec51 0b18 	vmov	r0, r1, d8
 801c7bc:	f7e3 fd76 	bl	80002ac <__adddf3>
 801c7c0:	4602      	mov	r2, r0
 801c7c2:	460b      	mov	r3, r1
 801c7c4:	4630      	mov	r0, r6
 801c7c6:	4639      	mov	r1, r7
 801c7c8:	f7e4 f9b6 	bl	8000b38 <__aeabi_dcmpgt>
 801c7cc:	2800      	cmp	r0, #0
 801c7ce:	d175      	bne.n	801c8bc <_dtoa_r+0x6fc>
 801c7d0:	ec53 2b18 	vmov	r2, r3, d8
 801c7d4:	4911      	ldr	r1, [pc, #68]	; (801c81c <_dtoa_r+0x65c>)
 801c7d6:	2000      	movs	r0, #0
 801c7d8:	f7e3 fd66 	bl	80002a8 <__aeabi_dsub>
 801c7dc:	4602      	mov	r2, r0
 801c7de:	460b      	mov	r3, r1
 801c7e0:	4630      	mov	r0, r6
 801c7e2:	4639      	mov	r1, r7
 801c7e4:	f7e4 f98a 	bl	8000afc <__aeabi_dcmplt>
 801c7e8:	2800      	cmp	r0, #0
 801c7ea:	f43f af27 	beq.w	801c63c <_dtoa_r+0x47c>
 801c7ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c7f0:	1e6b      	subs	r3, r5, #1
 801c7f2:	930c      	str	r3, [sp, #48]	; 0x30
 801c7f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801c7f8:	2b30      	cmp	r3, #48	; 0x30
 801c7fa:	d0f8      	beq.n	801c7ee <_dtoa_r+0x62e>
 801c7fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801c800:	e04a      	b.n	801c898 <_dtoa_r+0x6d8>
 801c802:	bf00      	nop
 801c804:	080210d8 	.word	0x080210d8
 801c808:	080210b0 	.word	0x080210b0
 801c80c:	3ff00000 	.word	0x3ff00000
 801c810:	40240000 	.word	0x40240000
 801c814:	401c0000 	.word	0x401c0000
 801c818:	40140000 	.word	0x40140000
 801c81c:	3fe00000 	.word	0x3fe00000
 801c820:	4baf      	ldr	r3, [pc, #700]	; (801cae0 <_dtoa_r+0x920>)
 801c822:	f7e3 fef9 	bl	8000618 <__aeabi_dmul>
 801c826:	4606      	mov	r6, r0
 801c828:	460f      	mov	r7, r1
 801c82a:	e7ac      	b.n	801c786 <_dtoa_r+0x5c6>
 801c82c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801c830:	9d00      	ldr	r5, [sp, #0]
 801c832:	4642      	mov	r2, r8
 801c834:	464b      	mov	r3, r9
 801c836:	4630      	mov	r0, r6
 801c838:	4639      	mov	r1, r7
 801c83a:	f7e4 f817 	bl	800086c <__aeabi_ddiv>
 801c83e:	f7e4 f99b 	bl	8000b78 <__aeabi_d2iz>
 801c842:	9002      	str	r0, [sp, #8]
 801c844:	f7e3 fe7e 	bl	8000544 <__aeabi_i2d>
 801c848:	4642      	mov	r2, r8
 801c84a:	464b      	mov	r3, r9
 801c84c:	f7e3 fee4 	bl	8000618 <__aeabi_dmul>
 801c850:	4602      	mov	r2, r0
 801c852:	460b      	mov	r3, r1
 801c854:	4630      	mov	r0, r6
 801c856:	4639      	mov	r1, r7
 801c858:	f7e3 fd26 	bl	80002a8 <__aeabi_dsub>
 801c85c:	9e02      	ldr	r6, [sp, #8]
 801c85e:	9f01      	ldr	r7, [sp, #4]
 801c860:	3630      	adds	r6, #48	; 0x30
 801c862:	f805 6b01 	strb.w	r6, [r5], #1
 801c866:	9e00      	ldr	r6, [sp, #0]
 801c868:	1bae      	subs	r6, r5, r6
 801c86a:	42b7      	cmp	r7, r6
 801c86c:	4602      	mov	r2, r0
 801c86e:	460b      	mov	r3, r1
 801c870:	d137      	bne.n	801c8e2 <_dtoa_r+0x722>
 801c872:	f7e3 fd1b 	bl	80002ac <__adddf3>
 801c876:	4642      	mov	r2, r8
 801c878:	464b      	mov	r3, r9
 801c87a:	4606      	mov	r6, r0
 801c87c:	460f      	mov	r7, r1
 801c87e:	f7e4 f95b 	bl	8000b38 <__aeabi_dcmpgt>
 801c882:	b9c8      	cbnz	r0, 801c8b8 <_dtoa_r+0x6f8>
 801c884:	4642      	mov	r2, r8
 801c886:	464b      	mov	r3, r9
 801c888:	4630      	mov	r0, r6
 801c88a:	4639      	mov	r1, r7
 801c88c:	f7e4 f92c 	bl	8000ae8 <__aeabi_dcmpeq>
 801c890:	b110      	cbz	r0, 801c898 <_dtoa_r+0x6d8>
 801c892:	9b02      	ldr	r3, [sp, #8]
 801c894:	07d9      	lsls	r1, r3, #31
 801c896:	d40f      	bmi.n	801c8b8 <_dtoa_r+0x6f8>
 801c898:	4620      	mov	r0, r4
 801c89a:	4659      	mov	r1, fp
 801c89c:	f000 ff98 	bl	801d7d0 <_Bfree>
 801c8a0:	2300      	movs	r3, #0
 801c8a2:	702b      	strb	r3, [r5, #0]
 801c8a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c8a6:	f10a 0001 	add.w	r0, sl, #1
 801c8aa:	6018      	str	r0, [r3, #0]
 801c8ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c8ae:	2b00      	cmp	r3, #0
 801c8b0:	f43f acd8 	beq.w	801c264 <_dtoa_r+0xa4>
 801c8b4:	601d      	str	r5, [r3, #0]
 801c8b6:	e4d5      	b.n	801c264 <_dtoa_r+0xa4>
 801c8b8:	f8cd a01c 	str.w	sl, [sp, #28]
 801c8bc:	462b      	mov	r3, r5
 801c8be:	461d      	mov	r5, r3
 801c8c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c8c4:	2a39      	cmp	r2, #57	; 0x39
 801c8c6:	d108      	bne.n	801c8da <_dtoa_r+0x71a>
 801c8c8:	9a00      	ldr	r2, [sp, #0]
 801c8ca:	429a      	cmp	r2, r3
 801c8cc:	d1f7      	bne.n	801c8be <_dtoa_r+0x6fe>
 801c8ce:	9a07      	ldr	r2, [sp, #28]
 801c8d0:	9900      	ldr	r1, [sp, #0]
 801c8d2:	3201      	adds	r2, #1
 801c8d4:	9207      	str	r2, [sp, #28]
 801c8d6:	2230      	movs	r2, #48	; 0x30
 801c8d8:	700a      	strb	r2, [r1, #0]
 801c8da:	781a      	ldrb	r2, [r3, #0]
 801c8dc:	3201      	adds	r2, #1
 801c8de:	701a      	strb	r2, [r3, #0]
 801c8e0:	e78c      	b.n	801c7fc <_dtoa_r+0x63c>
 801c8e2:	4b7f      	ldr	r3, [pc, #508]	; (801cae0 <_dtoa_r+0x920>)
 801c8e4:	2200      	movs	r2, #0
 801c8e6:	f7e3 fe97 	bl	8000618 <__aeabi_dmul>
 801c8ea:	2200      	movs	r2, #0
 801c8ec:	2300      	movs	r3, #0
 801c8ee:	4606      	mov	r6, r0
 801c8f0:	460f      	mov	r7, r1
 801c8f2:	f7e4 f8f9 	bl	8000ae8 <__aeabi_dcmpeq>
 801c8f6:	2800      	cmp	r0, #0
 801c8f8:	d09b      	beq.n	801c832 <_dtoa_r+0x672>
 801c8fa:	e7cd      	b.n	801c898 <_dtoa_r+0x6d8>
 801c8fc:	9a08      	ldr	r2, [sp, #32]
 801c8fe:	2a00      	cmp	r2, #0
 801c900:	f000 80c4 	beq.w	801ca8c <_dtoa_r+0x8cc>
 801c904:	9a05      	ldr	r2, [sp, #20]
 801c906:	2a01      	cmp	r2, #1
 801c908:	f300 80a8 	bgt.w	801ca5c <_dtoa_r+0x89c>
 801c90c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c90e:	2a00      	cmp	r2, #0
 801c910:	f000 80a0 	beq.w	801ca54 <_dtoa_r+0x894>
 801c914:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801c918:	9e06      	ldr	r6, [sp, #24]
 801c91a:	4645      	mov	r5, r8
 801c91c:	9a04      	ldr	r2, [sp, #16]
 801c91e:	2101      	movs	r1, #1
 801c920:	441a      	add	r2, r3
 801c922:	4620      	mov	r0, r4
 801c924:	4498      	add	r8, r3
 801c926:	9204      	str	r2, [sp, #16]
 801c928:	f001 f858 	bl	801d9dc <__i2b>
 801c92c:	4607      	mov	r7, r0
 801c92e:	2d00      	cmp	r5, #0
 801c930:	dd0b      	ble.n	801c94a <_dtoa_r+0x78a>
 801c932:	9b04      	ldr	r3, [sp, #16]
 801c934:	2b00      	cmp	r3, #0
 801c936:	dd08      	ble.n	801c94a <_dtoa_r+0x78a>
 801c938:	42ab      	cmp	r3, r5
 801c93a:	9a04      	ldr	r2, [sp, #16]
 801c93c:	bfa8      	it	ge
 801c93e:	462b      	movge	r3, r5
 801c940:	eba8 0803 	sub.w	r8, r8, r3
 801c944:	1aed      	subs	r5, r5, r3
 801c946:	1ad3      	subs	r3, r2, r3
 801c948:	9304      	str	r3, [sp, #16]
 801c94a:	9b06      	ldr	r3, [sp, #24]
 801c94c:	b1fb      	cbz	r3, 801c98e <_dtoa_r+0x7ce>
 801c94e:	9b08      	ldr	r3, [sp, #32]
 801c950:	2b00      	cmp	r3, #0
 801c952:	f000 809f 	beq.w	801ca94 <_dtoa_r+0x8d4>
 801c956:	2e00      	cmp	r6, #0
 801c958:	dd11      	ble.n	801c97e <_dtoa_r+0x7be>
 801c95a:	4639      	mov	r1, r7
 801c95c:	4632      	mov	r2, r6
 801c95e:	4620      	mov	r0, r4
 801c960:	f001 f8f8 	bl	801db54 <__pow5mult>
 801c964:	465a      	mov	r2, fp
 801c966:	4601      	mov	r1, r0
 801c968:	4607      	mov	r7, r0
 801c96a:	4620      	mov	r0, r4
 801c96c:	f001 f84c 	bl	801da08 <__multiply>
 801c970:	4659      	mov	r1, fp
 801c972:	9007      	str	r0, [sp, #28]
 801c974:	4620      	mov	r0, r4
 801c976:	f000 ff2b 	bl	801d7d0 <_Bfree>
 801c97a:	9b07      	ldr	r3, [sp, #28]
 801c97c:	469b      	mov	fp, r3
 801c97e:	9b06      	ldr	r3, [sp, #24]
 801c980:	1b9a      	subs	r2, r3, r6
 801c982:	d004      	beq.n	801c98e <_dtoa_r+0x7ce>
 801c984:	4659      	mov	r1, fp
 801c986:	4620      	mov	r0, r4
 801c988:	f001 f8e4 	bl	801db54 <__pow5mult>
 801c98c:	4683      	mov	fp, r0
 801c98e:	2101      	movs	r1, #1
 801c990:	4620      	mov	r0, r4
 801c992:	f001 f823 	bl	801d9dc <__i2b>
 801c996:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c998:	2b00      	cmp	r3, #0
 801c99a:	4606      	mov	r6, r0
 801c99c:	dd7c      	ble.n	801ca98 <_dtoa_r+0x8d8>
 801c99e:	461a      	mov	r2, r3
 801c9a0:	4601      	mov	r1, r0
 801c9a2:	4620      	mov	r0, r4
 801c9a4:	f001 f8d6 	bl	801db54 <__pow5mult>
 801c9a8:	9b05      	ldr	r3, [sp, #20]
 801c9aa:	2b01      	cmp	r3, #1
 801c9ac:	4606      	mov	r6, r0
 801c9ae:	dd76      	ble.n	801ca9e <_dtoa_r+0x8de>
 801c9b0:	2300      	movs	r3, #0
 801c9b2:	9306      	str	r3, [sp, #24]
 801c9b4:	6933      	ldr	r3, [r6, #16]
 801c9b6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801c9ba:	6918      	ldr	r0, [r3, #16]
 801c9bc:	f000 ffbe 	bl	801d93c <__hi0bits>
 801c9c0:	f1c0 0020 	rsb	r0, r0, #32
 801c9c4:	9b04      	ldr	r3, [sp, #16]
 801c9c6:	4418      	add	r0, r3
 801c9c8:	f010 001f 	ands.w	r0, r0, #31
 801c9cc:	f000 8086 	beq.w	801cadc <_dtoa_r+0x91c>
 801c9d0:	f1c0 0320 	rsb	r3, r0, #32
 801c9d4:	2b04      	cmp	r3, #4
 801c9d6:	dd7f      	ble.n	801cad8 <_dtoa_r+0x918>
 801c9d8:	f1c0 001c 	rsb	r0, r0, #28
 801c9dc:	9b04      	ldr	r3, [sp, #16]
 801c9de:	4403      	add	r3, r0
 801c9e0:	4480      	add	r8, r0
 801c9e2:	4405      	add	r5, r0
 801c9e4:	9304      	str	r3, [sp, #16]
 801c9e6:	f1b8 0f00 	cmp.w	r8, #0
 801c9ea:	dd05      	ble.n	801c9f8 <_dtoa_r+0x838>
 801c9ec:	4659      	mov	r1, fp
 801c9ee:	4642      	mov	r2, r8
 801c9f0:	4620      	mov	r0, r4
 801c9f2:	f001 f909 	bl	801dc08 <__lshift>
 801c9f6:	4683      	mov	fp, r0
 801c9f8:	9b04      	ldr	r3, [sp, #16]
 801c9fa:	2b00      	cmp	r3, #0
 801c9fc:	dd05      	ble.n	801ca0a <_dtoa_r+0x84a>
 801c9fe:	4631      	mov	r1, r6
 801ca00:	461a      	mov	r2, r3
 801ca02:	4620      	mov	r0, r4
 801ca04:	f001 f900 	bl	801dc08 <__lshift>
 801ca08:	4606      	mov	r6, r0
 801ca0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ca0c:	2b00      	cmp	r3, #0
 801ca0e:	d069      	beq.n	801cae4 <_dtoa_r+0x924>
 801ca10:	4631      	mov	r1, r6
 801ca12:	4658      	mov	r0, fp
 801ca14:	f001 f964 	bl	801dce0 <__mcmp>
 801ca18:	2800      	cmp	r0, #0
 801ca1a:	da63      	bge.n	801cae4 <_dtoa_r+0x924>
 801ca1c:	2300      	movs	r3, #0
 801ca1e:	4659      	mov	r1, fp
 801ca20:	220a      	movs	r2, #10
 801ca22:	4620      	mov	r0, r4
 801ca24:	f000 fef6 	bl	801d814 <__multadd>
 801ca28:	9b08      	ldr	r3, [sp, #32]
 801ca2a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801ca2e:	4683      	mov	fp, r0
 801ca30:	2b00      	cmp	r3, #0
 801ca32:	f000 818f 	beq.w	801cd54 <_dtoa_r+0xb94>
 801ca36:	4639      	mov	r1, r7
 801ca38:	2300      	movs	r3, #0
 801ca3a:	220a      	movs	r2, #10
 801ca3c:	4620      	mov	r0, r4
 801ca3e:	f000 fee9 	bl	801d814 <__multadd>
 801ca42:	f1b9 0f00 	cmp.w	r9, #0
 801ca46:	4607      	mov	r7, r0
 801ca48:	f300 808e 	bgt.w	801cb68 <_dtoa_r+0x9a8>
 801ca4c:	9b05      	ldr	r3, [sp, #20]
 801ca4e:	2b02      	cmp	r3, #2
 801ca50:	dc50      	bgt.n	801caf4 <_dtoa_r+0x934>
 801ca52:	e089      	b.n	801cb68 <_dtoa_r+0x9a8>
 801ca54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ca56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801ca5a:	e75d      	b.n	801c918 <_dtoa_r+0x758>
 801ca5c:	9b01      	ldr	r3, [sp, #4]
 801ca5e:	1e5e      	subs	r6, r3, #1
 801ca60:	9b06      	ldr	r3, [sp, #24]
 801ca62:	42b3      	cmp	r3, r6
 801ca64:	bfbf      	itttt	lt
 801ca66:	9b06      	ldrlt	r3, [sp, #24]
 801ca68:	9606      	strlt	r6, [sp, #24]
 801ca6a:	1af2      	sublt	r2, r6, r3
 801ca6c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801ca6e:	bfb6      	itet	lt
 801ca70:	189b      	addlt	r3, r3, r2
 801ca72:	1b9e      	subge	r6, r3, r6
 801ca74:	930d      	strlt	r3, [sp, #52]	; 0x34
 801ca76:	9b01      	ldr	r3, [sp, #4]
 801ca78:	bfb8      	it	lt
 801ca7a:	2600      	movlt	r6, #0
 801ca7c:	2b00      	cmp	r3, #0
 801ca7e:	bfb5      	itete	lt
 801ca80:	eba8 0503 	sublt.w	r5, r8, r3
 801ca84:	9b01      	ldrge	r3, [sp, #4]
 801ca86:	2300      	movlt	r3, #0
 801ca88:	4645      	movge	r5, r8
 801ca8a:	e747      	b.n	801c91c <_dtoa_r+0x75c>
 801ca8c:	9e06      	ldr	r6, [sp, #24]
 801ca8e:	9f08      	ldr	r7, [sp, #32]
 801ca90:	4645      	mov	r5, r8
 801ca92:	e74c      	b.n	801c92e <_dtoa_r+0x76e>
 801ca94:	9a06      	ldr	r2, [sp, #24]
 801ca96:	e775      	b.n	801c984 <_dtoa_r+0x7c4>
 801ca98:	9b05      	ldr	r3, [sp, #20]
 801ca9a:	2b01      	cmp	r3, #1
 801ca9c:	dc18      	bgt.n	801cad0 <_dtoa_r+0x910>
 801ca9e:	9b02      	ldr	r3, [sp, #8]
 801caa0:	b9b3      	cbnz	r3, 801cad0 <_dtoa_r+0x910>
 801caa2:	9b03      	ldr	r3, [sp, #12]
 801caa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801caa8:	b9a3      	cbnz	r3, 801cad4 <_dtoa_r+0x914>
 801caaa:	9b03      	ldr	r3, [sp, #12]
 801caac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801cab0:	0d1b      	lsrs	r3, r3, #20
 801cab2:	051b      	lsls	r3, r3, #20
 801cab4:	b12b      	cbz	r3, 801cac2 <_dtoa_r+0x902>
 801cab6:	9b04      	ldr	r3, [sp, #16]
 801cab8:	3301      	adds	r3, #1
 801caba:	9304      	str	r3, [sp, #16]
 801cabc:	f108 0801 	add.w	r8, r8, #1
 801cac0:	2301      	movs	r3, #1
 801cac2:	9306      	str	r3, [sp, #24]
 801cac4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cac6:	2b00      	cmp	r3, #0
 801cac8:	f47f af74 	bne.w	801c9b4 <_dtoa_r+0x7f4>
 801cacc:	2001      	movs	r0, #1
 801cace:	e779      	b.n	801c9c4 <_dtoa_r+0x804>
 801cad0:	2300      	movs	r3, #0
 801cad2:	e7f6      	b.n	801cac2 <_dtoa_r+0x902>
 801cad4:	9b02      	ldr	r3, [sp, #8]
 801cad6:	e7f4      	b.n	801cac2 <_dtoa_r+0x902>
 801cad8:	d085      	beq.n	801c9e6 <_dtoa_r+0x826>
 801cada:	4618      	mov	r0, r3
 801cadc:	301c      	adds	r0, #28
 801cade:	e77d      	b.n	801c9dc <_dtoa_r+0x81c>
 801cae0:	40240000 	.word	0x40240000
 801cae4:	9b01      	ldr	r3, [sp, #4]
 801cae6:	2b00      	cmp	r3, #0
 801cae8:	dc38      	bgt.n	801cb5c <_dtoa_r+0x99c>
 801caea:	9b05      	ldr	r3, [sp, #20]
 801caec:	2b02      	cmp	r3, #2
 801caee:	dd35      	ble.n	801cb5c <_dtoa_r+0x99c>
 801caf0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801caf4:	f1b9 0f00 	cmp.w	r9, #0
 801caf8:	d10d      	bne.n	801cb16 <_dtoa_r+0x956>
 801cafa:	4631      	mov	r1, r6
 801cafc:	464b      	mov	r3, r9
 801cafe:	2205      	movs	r2, #5
 801cb00:	4620      	mov	r0, r4
 801cb02:	f000 fe87 	bl	801d814 <__multadd>
 801cb06:	4601      	mov	r1, r0
 801cb08:	4606      	mov	r6, r0
 801cb0a:	4658      	mov	r0, fp
 801cb0c:	f001 f8e8 	bl	801dce0 <__mcmp>
 801cb10:	2800      	cmp	r0, #0
 801cb12:	f73f adbd 	bgt.w	801c690 <_dtoa_r+0x4d0>
 801cb16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cb18:	9d00      	ldr	r5, [sp, #0]
 801cb1a:	ea6f 0a03 	mvn.w	sl, r3
 801cb1e:	f04f 0800 	mov.w	r8, #0
 801cb22:	4631      	mov	r1, r6
 801cb24:	4620      	mov	r0, r4
 801cb26:	f000 fe53 	bl	801d7d0 <_Bfree>
 801cb2a:	2f00      	cmp	r7, #0
 801cb2c:	f43f aeb4 	beq.w	801c898 <_dtoa_r+0x6d8>
 801cb30:	f1b8 0f00 	cmp.w	r8, #0
 801cb34:	d005      	beq.n	801cb42 <_dtoa_r+0x982>
 801cb36:	45b8      	cmp	r8, r7
 801cb38:	d003      	beq.n	801cb42 <_dtoa_r+0x982>
 801cb3a:	4641      	mov	r1, r8
 801cb3c:	4620      	mov	r0, r4
 801cb3e:	f000 fe47 	bl	801d7d0 <_Bfree>
 801cb42:	4639      	mov	r1, r7
 801cb44:	4620      	mov	r0, r4
 801cb46:	f000 fe43 	bl	801d7d0 <_Bfree>
 801cb4a:	e6a5      	b.n	801c898 <_dtoa_r+0x6d8>
 801cb4c:	2600      	movs	r6, #0
 801cb4e:	4637      	mov	r7, r6
 801cb50:	e7e1      	b.n	801cb16 <_dtoa_r+0x956>
 801cb52:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801cb54:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801cb58:	4637      	mov	r7, r6
 801cb5a:	e599      	b.n	801c690 <_dtoa_r+0x4d0>
 801cb5c:	9b08      	ldr	r3, [sp, #32]
 801cb5e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801cb62:	2b00      	cmp	r3, #0
 801cb64:	f000 80fd 	beq.w	801cd62 <_dtoa_r+0xba2>
 801cb68:	2d00      	cmp	r5, #0
 801cb6a:	dd05      	ble.n	801cb78 <_dtoa_r+0x9b8>
 801cb6c:	4639      	mov	r1, r7
 801cb6e:	462a      	mov	r2, r5
 801cb70:	4620      	mov	r0, r4
 801cb72:	f001 f849 	bl	801dc08 <__lshift>
 801cb76:	4607      	mov	r7, r0
 801cb78:	9b06      	ldr	r3, [sp, #24]
 801cb7a:	2b00      	cmp	r3, #0
 801cb7c:	d05c      	beq.n	801cc38 <_dtoa_r+0xa78>
 801cb7e:	6879      	ldr	r1, [r7, #4]
 801cb80:	4620      	mov	r0, r4
 801cb82:	f000 fde5 	bl	801d750 <_Balloc>
 801cb86:	4605      	mov	r5, r0
 801cb88:	b928      	cbnz	r0, 801cb96 <_dtoa_r+0x9d6>
 801cb8a:	4b80      	ldr	r3, [pc, #512]	; (801cd8c <_dtoa_r+0xbcc>)
 801cb8c:	4602      	mov	r2, r0
 801cb8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 801cb92:	f7ff bb2e 	b.w	801c1f2 <_dtoa_r+0x32>
 801cb96:	693a      	ldr	r2, [r7, #16]
 801cb98:	3202      	adds	r2, #2
 801cb9a:	0092      	lsls	r2, r2, #2
 801cb9c:	f107 010c 	add.w	r1, r7, #12
 801cba0:	300c      	adds	r0, #12
 801cba2:	f7fd f8bb 	bl	8019d1c <memcpy>
 801cba6:	2201      	movs	r2, #1
 801cba8:	4629      	mov	r1, r5
 801cbaa:	4620      	mov	r0, r4
 801cbac:	f001 f82c 	bl	801dc08 <__lshift>
 801cbb0:	9b00      	ldr	r3, [sp, #0]
 801cbb2:	3301      	adds	r3, #1
 801cbb4:	9301      	str	r3, [sp, #4]
 801cbb6:	9b00      	ldr	r3, [sp, #0]
 801cbb8:	444b      	add	r3, r9
 801cbba:	9307      	str	r3, [sp, #28]
 801cbbc:	9b02      	ldr	r3, [sp, #8]
 801cbbe:	f003 0301 	and.w	r3, r3, #1
 801cbc2:	46b8      	mov	r8, r7
 801cbc4:	9306      	str	r3, [sp, #24]
 801cbc6:	4607      	mov	r7, r0
 801cbc8:	9b01      	ldr	r3, [sp, #4]
 801cbca:	4631      	mov	r1, r6
 801cbcc:	3b01      	subs	r3, #1
 801cbce:	4658      	mov	r0, fp
 801cbd0:	9302      	str	r3, [sp, #8]
 801cbd2:	f7ff fa69 	bl	801c0a8 <quorem>
 801cbd6:	4603      	mov	r3, r0
 801cbd8:	3330      	adds	r3, #48	; 0x30
 801cbda:	9004      	str	r0, [sp, #16]
 801cbdc:	4641      	mov	r1, r8
 801cbde:	4658      	mov	r0, fp
 801cbe0:	9308      	str	r3, [sp, #32]
 801cbe2:	f001 f87d 	bl	801dce0 <__mcmp>
 801cbe6:	463a      	mov	r2, r7
 801cbe8:	4681      	mov	r9, r0
 801cbea:	4631      	mov	r1, r6
 801cbec:	4620      	mov	r0, r4
 801cbee:	f001 f893 	bl	801dd18 <__mdiff>
 801cbf2:	68c2      	ldr	r2, [r0, #12]
 801cbf4:	9b08      	ldr	r3, [sp, #32]
 801cbf6:	4605      	mov	r5, r0
 801cbf8:	bb02      	cbnz	r2, 801cc3c <_dtoa_r+0xa7c>
 801cbfa:	4601      	mov	r1, r0
 801cbfc:	4658      	mov	r0, fp
 801cbfe:	f001 f86f 	bl	801dce0 <__mcmp>
 801cc02:	9b08      	ldr	r3, [sp, #32]
 801cc04:	4602      	mov	r2, r0
 801cc06:	4629      	mov	r1, r5
 801cc08:	4620      	mov	r0, r4
 801cc0a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801cc0e:	f000 fddf 	bl	801d7d0 <_Bfree>
 801cc12:	9b05      	ldr	r3, [sp, #20]
 801cc14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cc16:	9d01      	ldr	r5, [sp, #4]
 801cc18:	ea43 0102 	orr.w	r1, r3, r2
 801cc1c:	9b06      	ldr	r3, [sp, #24]
 801cc1e:	430b      	orrs	r3, r1
 801cc20:	9b08      	ldr	r3, [sp, #32]
 801cc22:	d10d      	bne.n	801cc40 <_dtoa_r+0xa80>
 801cc24:	2b39      	cmp	r3, #57	; 0x39
 801cc26:	d029      	beq.n	801cc7c <_dtoa_r+0xabc>
 801cc28:	f1b9 0f00 	cmp.w	r9, #0
 801cc2c:	dd01      	ble.n	801cc32 <_dtoa_r+0xa72>
 801cc2e:	9b04      	ldr	r3, [sp, #16]
 801cc30:	3331      	adds	r3, #49	; 0x31
 801cc32:	9a02      	ldr	r2, [sp, #8]
 801cc34:	7013      	strb	r3, [r2, #0]
 801cc36:	e774      	b.n	801cb22 <_dtoa_r+0x962>
 801cc38:	4638      	mov	r0, r7
 801cc3a:	e7b9      	b.n	801cbb0 <_dtoa_r+0x9f0>
 801cc3c:	2201      	movs	r2, #1
 801cc3e:	e7e2      	b.n	801cc06 <_dtoa_r+0xa46>
 801cc40:	f1b9 0f00 	cmp.w	r9, #0
 801cc44:	db06      	blt.n	801cc54 <_dtoa_r+0xa94>
 801cc46:	9905      	ldr	r1, [sp, #20]
 801cc48:	ea41 0909 	orr.w	r9, r1, r9
 801cc4c:	9906      	ldr	r1, [sp, #24]
 801cc4e:	ea59 0101 	orrs.w	r1, r9, r1
 801cc52:	d120      	bne.n	801cc96 <_dtoa_r+0xad6>
 801cc54:	2a00      	cmp	r2, #0
 801cc56:	ddec      	ble.n	801cc32 <_dtoa_r+0xa72>
 801cc58:	4659      	mov	r1, fp
 801cc5a:	2201      	movs	r2, #1
 801cc5c:	4620      	mov	r0, r4
 801cc5e:	9301      	str	r3, [sp, #4]
 801cc60:	f000 ffd2 	bl	801dc08 <__lshift>
 801cc64:	4631      	mov	r1, r6
 801cc66:	4683      	mov	fp, r0
 801cc68:	f001 f83a 	bl	801dce0 <__mcmp>
 801cc6c:	2800      	cmp	r0, #0
 801cc6e:	9b01      	ldr	r3, [sp, #4]
 801cc70:	dc02      	bgt.n	801cc78 <_dtoa_r+0xab8>
 801cc72:	d1de      	bne.n	801cc32 <_dtoa_r+0xa72>
 801cc74:	07da      	lsls	r2, r3, #31
 801cc76:	d5dc      	bpl.n	801cc32 <_dtoa_r+0xa72>
 801cc78:	2b39      	cmp	r3, #57	; 0x39
 801cc7a:	d1d8      	bne.n	801cc2e <_dtoa_r+0xa6e>
 801cc7c:	9a02      	ldr	r2, [sp, #8]
 801cc7e:	2339      	movs	r3, #57	; 0x39
 801cc80:	7013      	strb	r3, [r2, #0]
 801cc82:	462b      	mov	r3, r5
 801cc84:	461d      	mov	r5, r3
 801cc86:	3b01      	subs	r3, #1
 801cc88:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801cc8c:	2a39      	cmp	r2, #57	; 0x39
 801cc8e:	d050      	beq.n	801cd32 <_dtoa_r+0xb72>
 801cc90:	3201      	adds	r2, #1
 801cc92:	701a      	strb	r2, [r3, #0]
 801cc94:	e745      	b.n	801cb22 <_dtoa_r+0x962>
 801cc96:	2a00      	cmp	r2, #0
 801cc98:	dd03      	ble.n	801cca2 <_dtoa_r+0xae2>
 801cc9a:	2b39      	cmp	r3, #57	; 0x39
 801cc9c:	d0ee      	beq.n	801cc7c <_dtoa_r+0xabc>
 801cc9e:	3301      	adds	r3, #1
 801cca0:	e7c7      	b.n	801cc32 <_dtoa_r+0xa72>
 801cca2:	9a01      	ldr	r2, [sp, #4]
 801cca4:	9907      	ldr	r1, [sp, #28]
 801cca6:	f802 3c01 	strb.w	r3, [r2, #-1]
 801ccaa:	428a      	cmp	r2, r1
 801ccac:	d02a      	beq.n	801cd04 <_dtoa_r+0xb44>
 801ccae:	4659      	mov	r1, fp
 801ccb0:	2300      	movs	r3, #0
 801ccb2:	220a      	movs	r2, #10
 801ccb4:	4620      	mov	r0, r4
 801ccb6:	f000 fdad 	bl	801d814 <__multadd>
 801ccba:	45b8      	cmp	r8, r7
 801ccbc:	4683      	mov	fp, r0
 801ccbe:	f04f 0300 	mov.w	r3, #0
 801ccc2:	f04f 020a 	mov.w	r2, #10
 801ccc6:	4641      	mov	r1, r8
 801ccc8:	4620      	mov	r0, r4
 801ccca:	d107      	bne.n	801ccdc <_dtoa_r+0xb1c>
 801cccc:	f000 fda2 	bl	801d814 <__multadd>
 801ccd0:	4680      	mov	r8, r0
 801ccd2:	4607      	mov	r7, r0
 801ccd4:	9b01      	ldr	r3, [sp, #4]
 801ccd6:	3301      	adds	r3, #1
 801ccd8:	9301      	str	r3, [sp, #4]
 801ccda:	e775      	b.n	801cbc8 <_dtoa_r+0xa08>
 801ccdc:	f000 fd9a 	bl	801d814 <__multadd>
 801cce0:	4639      	mov	r1, r7
 801cce2:	4680      	mov	r8, r0
 801cce4:	2300      	movs	r3, #0
 801cce6:	220a      	movs	r2, #10
 801cce8:	4620      	mov	r0, r4
 801ccea:	f000 fd93 	bl	801d814 <__multadd>
 801ccee:	4607      	mov	r7, r0
 801ccf0:	e7f0      	b.n	801ccd4 <_dtoa_r+0xb14>
 801ccf2:	f1b9 0f00 	cmp.w	r9, #0
 801ccf6:	9a00      	ldr	r2, [sp, #0]
 801ccf8:	bfcc      	ite	gt
 801ccfa:	464d      	movgt	r5, r9
 801ccfc:	2501      	movle	r5, #1
 801ccfe:	4415      	add	r5, r2
 801cd00:	f04f 0800 	mov.w	r8, #0
 801cd04:	4659      	mov	r1, fp
 801cd06:	2201      	movs	r2, #1
 801cd08:	4620      	mov	r0, r4
 801cd0a:	9301      	str	r3, [sp, #4]
 801cd0c:	f000 ff7c 	bl	801dc08 <__lshift>
 801cd10:	4631      	mov	r1, r6
 801cd12:	4683      	mov	fp, r0
 801cd14:	f000 ffe4 	bl	801dce0 <__mcmp>
 801cd18:	2800      	cmp	r0, #0
 801cd1a:	dcb2      	bgt.n	801cc82 <_dtoa_r+0xac2>
 801cd1c:	d102      	bne.n	801cd24 <_dtoa_r+0xb64>
 801cd1e:	9b01      	ldr	r3, [sp, #4]
 801cd20:	07db      	lsls	r3, r3, #31
 801cd22:	d4ae      	bmi.n	801cc82 <_dtoa_r+0xac2>
 801cd24:	462b      	mov	r3, r5
 801cd26:	461d      	mov	r5, r3
 801cd28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801cd2c:	2a30      	cmp	r2, #48	; 0x30
 801cd2e:	d0fa      	beq.n	801cd26 <_dtoa_r+0xb66>
 801cd30:	e6f7      	b.n	801cb22 <_dtoa_r+0x962>
 801cd32:	9a00      	ldr	r2, [sp, #0]
 801cd34:	429a      	cmp	r2, r3
 801cd36:	d1a5      	bne.n	801cc84 <_dtoa_r+0xac4>
 801cd38:	f10a 0a01 	add.w	sl, sl, #1
 801cd3c:	2331      	movs	r3, #49	; 0x31
 801cd3e:	e779      	b.n	801cc34 <_dtoa_r+0xa74>
 801cd40:	4b13      	ldr	r3, [pc, #76]	; (801cd90 <_dtoa_r+0xbd0>)
 801cd42:	f7ff baaf 	b.w	801c2a4 <_dtoa_r+0xe4>
 801cd46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801cd48:	2b00      	cmp	r3, #0
 801cd4a:	f47f aa86 	bne.w	801c25a <_dtoa_r+0x9a>
 801cd4e:	4b11      	ldr	r3, [pc, #68]	; (801cd94 <_dtoa_r+0xbd4>)
 801cd50:	f7ff baa8 	b.w	801c2a4 <_dtoa_r+0xe4>
 801cd54:	f1b9 0f00 	cmp.w	r9, #0
 801cd58:	dc03      	bgt.n	801cd62 <_dtoa_r+0xba2>
 801cd5a:	9b05      	ldr	r3, [sp, #20]
 801cd5c:	2b02      	cmp	r3, #2
 801cd5e:	f73f aec9 	bgt.w	801caf4 <_dtoa_r+0x934>
 801cd62:	9d00      	ldr	r5, [sp, #0]
 801cd64:	4631      	mov	r1, r6
 801cd66:	4658      	mov	r0, fp
 801cd68:	f7ff f99e 	bl	801c0a8 <quorem>
 801cd6c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801cd70:	f805 3b01 	strb.w	r3, [r5], #1
 801cd74:	9a00      	ldr	r2, [sp, #0]
 801cd76:	1aaa      	subs	r2, r5, r2
 801cd78:	4591      	cmp	r9, r2
 801cd7a:	ddba      	ble.n	801ccf2 <_dtoa_r+0xb32>
 801cd7c:	4659      	mov	r1, fp
 801cd7e:	2300      	movs	r3, #0
 801cd80:	220a      	movs	r2, #10
 801cd82:	4620      	mov	r0, r4
 801cd84:	f000 fd46 	bl	801d814 <__multadd>
 801cd88:	4683      	mov	fp, r0
 801cd8a:	e7eb      	b.n	801cd64 <_dtoa_r+0xba4>
 801cd8c:	08020fbf 	.word	0x08020fbf
 801cd90:	080211c1 	.word	0x080211c1
 801cd94:	08020f3c 	.word	0x08020f3c

0801cd98 <__sflush_r>:
 801cd98:	898a      	ldrh	r2, [r1, #12]
 801cd9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd9e:	4605      	mov	r5, r0
 801cda0:	0710      	lsls	r0, r2, #28
 801cda2:	460c      	mov	r4, r1
 801cda4:	d458      	bmi.n	801ce58 <__sflush_r+0xc0>
 801cda6:	684b      	ldr	r3, [r1, #4]
 801cda8:	2b00      	cmp	r3, #0
 801cdaa:	dc05      	bgt.n	801cdb8 <__sflush_r+0x20>
 801cdac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801cdae:	2b00      	cmp	r3, #0
 801cdb0:	dc02      	bgt.n	801cdb8 <__sflush_r+0x20>
 801cdb2:	2000      	movs	r0, #0
 801cdb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cdb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cdba:	2e00      	cmp	r6, #0
 801cdbc:	d0f9      	beq.n	801cdb2 <__sflush_r+0x1a>
 801cdbe:	2300      	movs	r3, #0
 801cdc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801cdc4:	682f      	ldr	r7, [r5, #0]
 801cdc6:	602b      	str	r3, [r5, #0]
 801cdc8:	d032      	beq.n	801ce30 <__sflush_r+0x98>
 801cdca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801cdcc:	89a3      	ldrh	r3, [r4, #12]
 801cdce:	075a      	lsls	r2, r3, #29
 801cdd0:	d505      	bpl.n	801cdde <__sflush_r+0x46>
 801cdd2:	6863      	ldr	r3, [r4, #4]
 801cdd4:	1ac0      	subs	r0, r0, r3
 801cdd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801cdd8:	b10b      	cbz	r3, 801cdde <__sflush_r+0x46>
 801cdda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cddc:	1ac0      	subs	r0, r0, r3
 801cdde:	2300      	movs	r3, #0
 801cde0:	4602      	mov	r2, r0
 801cde2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cde4:	6a21      	ldr	r1, [r4, #32]
 801cde6:	4628      	mov	r0, r5
 801cde8:	47b0      	blx	r6
 801cdea:	1c43      	adds	r3, r0, #1
 801cdec:	89a3      	ldrh	r3, [r4, #12]
 801cdee:	d106      	bne.n	801cdfe <__sflush_r+0x66>
 801cdf0:	6829      	ldr	r1, [r5, #0]
 801cdf2:	291d      	cmp	r1, #29
 801cdf4:	d82c      	bhi.n	801ce50 <__sflush_r+0xb8>
 801cdf6:	4a2a      	ldr	r2, [pc, #168]	; (801cea0 <__sflush_r+0x108>)
 801cdf8:	40ca      	lsrs	r2, r1
 801cdfa:	07d6      	lsls	r6, r2, #31
 801cdfc:	d528      	bpl.n	801ce50 <__sflush_r+0xb8>
 801cdfe:	2200      	movs	r2, #0
 801ce00:	6062      	str	r2, [r4, #4]
 801ce02:	04d9      	lsls	r1, r3, #19
 801ce04:	6922      	ldr	r2, [r4, #16]
 801ce06:	6022      	str	r2, [r4, #0]
 801ce08:	d504      	bpl.n	801ce14 <__sflush_r+0x7c>
 801ce0a:	1c42      	adds	r2, r0, #1
 801ce0c:	d101      	bne.n	801ce12 <__sflush_r+0x7a>
 801ce0e:	682b      	ldr	r3, [r5, #0]
 801ce10:	b903      	cbnz	r3, 801ce14 <__sflush_r+0x7c>
 801ce12:	6560      	str	r0, [r4, #84]	; 0x54
 801ce14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ce16:	602f      	str	r7, [r5, #0]
 801ce18:	2900      	cmp	r1, #0
 801ce1a:	d0ca      	beq.n	801cdb2 <__sflush_r+0x1a>
 801ce1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ce20:	4299      	cmp	r1, r3
 801ce22:	d002      	beq.n	801ce2a <__sflush_r+0x92>
 801ce24:	4628      	mov	r0, r5
 801ce26:	f7fc ffa9 	bl	8019d7c <_free_r>
 801ce2a:	2000      	movs	r0, #0
 801ce2c:	6360      	str	r0, [r4, #52]	; 0x34
 801ce2e:	e7c1      	b.n	801cdb4 <__sflush_r+0x1c>
 801ce30:	6a21      	ldr	r1, [r4, #32]
 801ce32:	2301      	movs	r3, #1
 801ce34:	4628      	mov	r0, r5
 801ce36:	47b0      	blx	r6
 801ce38:	1c41      	adds	r1, r0, #1
 801ce3a:	d1c7      	bne.n	801cdcc <__sflush_r+0x34>
 801ce3c:	682b      	ldr	r3, [r5, #0]
 801ce3e:	2b00      	cmp	r3, #0
 801ce40:	d0c4      	beq.n	801cdcc <__sflush_r+0x34>
 801ce42:	2b1d      	cmp	r3, #29
 801ce44:	d001      	beq.n	801ce4a <__sflush_r+0xb2>
 801ce46:	2b16      	cmp	r3, #22
 801ce48:	d101      	bne.n	801ce4e <__sflush_r+0xb6>
 801ce4a:	602f      	str	r7, [r5, #0]
 801ce4c:	e7b1      	b.n	801cdb2 <__sflush_r+0x1a>
 801ce4e:	89a3      	ldrh	r3, [r4, #12]
 801ce50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ce54:	81a3      	strh	r3, [r4, #12]
 801ce56:	e7ad      	b.n	801cdb4 <__sflush_r+0x1c>
 801ce58:	690f      	ldr	r7, [r1, #16]
 801ce5a:	2f00      	cmp	r7, #0
 801ce5c:	d0a9      	beq.n	801cdb2 <__sflush_r+0x1a>
 801ce5e:	0793      	lsls	r3, r2, #30
 801ce60:	680e      	ldr	r6, [r1, #0]
 801ce62:	bf08      	it	eq
 801ce64:	694b      	ldreq	r3, [r1, #20]
 801ce66:	600f      	str	r7, [r1, #0]
 801ce68:	bf18      	it	ne
 801ce6a:	2300      	movne	r3, #0
 801ce6c:	eba6 0807 	sub.w	r8, r6, r7
 801ce70:	608b      	str	r3, [r1, #8]
 801ce72:	f1b8 0f00 	cmp.w	r8, #0
 801ce76:	dd9c      	ble.n	801cdb2 <__sflush_r+0x1a>
 801ce78:	6a21      	ldr	r1, [r4, #32]
 801ce7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ce7c:	4643      	mov	r3, r8
 801ce7e:	463a      	mov	r2, r7
 801ce80:	4628      	mov	r0, r5
 801ce82:	47b0      	blx	r6
 801ce84:	2800      	cmp	r0, #0
 801ce86:	dc06      	bgt.n	801ce96 <__sflush_r+0xfe>
 801ce88:	89a3      	ldrh	r3, [r4, #12]
 801ce8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ce8e:	81a3      	strh	r3, [r4, #12]
 801ce90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ce94:	e78e      	b.n	801cdb4 <__sflush_r+0x1c>
 801ce96:	4407      	add	r7, r0
 801ce98:	eba8 0800 	sub.w	r8, r8, r0
 801ce9c:	e7e9      	b.n	801ce72 <__sflush_r+0xda>
 801ce9e:	bf00      	nop
 801cea0:	20400001 	.word	0x20400001

0801cea4 <_fflush_r>:
 801cea4:	b538      	push	{r3, r4, r5, lr}
 801cea6:	690b      	ldr	r3, [r1, #16]
 801cea8:	4605      	mov	r5, r0
 801ceaa:	460c      	mov	r4, r1
 801ceac:	b913      	cbnz	r3, 801ceb4 <_fflush_r+0x10>
 801ceae:	2500      	movs	r5, #0
 801ceb0:	4628      	mov	r0, r5
 801ceb2:	bd38      	pop	{r3, r4, r5, pc}
 801ceb4:	b118      	cbz	r0, 801cebe <_fflush_r+0x1a>
 801ceb6:	6983      	ldr	r3, [r0, #24]
 801ceb8:	b90b      	cbnz	r3, 801cebe <_fflush_r+0x1a>
 801ceba:	f7fc fe59 	bl	8019b70 <__sinit>
 801cebe:	4b14      	ldr	r3, [pc, #80]	; (801cf10 <_fflush_r+0x6c>)
 801cec0:	429c      	cmp	r4, r3
 801cec2:	d11b      	bne.n	801cefc <_fflush_r+0x58>
 801cec4:	686c      	ldr	r4, [r5, #4]
 801cec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ceca:	2b00      	cmp	r3, #0
 801cecc:	d0ef      	beq.n	801ceae <_fflush_r+0xa>
 801cece:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ced0:	07d0      	lsls	r0, r2, #31
 801ced2:	d404      	bmi.n	801cede <_fflush_r+0x3a>
 801ced4:	0599      	lsls	r1, r3, #22
 801ced6:	d402      	bmi.n	801cede <_fflush_r+0x3a>
 801ced8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ceda:	f7fc ff0c 	bl	8019cf6 <__retarget_lock_acquire_recursive>
 801cede:	4628      	mov	r0, r5
 801cee0:	4621      	mov	r1, r4
 801cee2:	f7ff ff59 	bl	801cd98 <__sflush_r>
 801cee6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cee8:	07da      	lsls	r2, r3, #31
 801ceea:	4605      	mov	r5, r0
 801ceec:	d4e0      	bmi.n	801ceb0 <_fflush_r+0xc>
 801ceee:	89a3      	ldrh	r3, [r4, #12]
 801cef0:	059b      	lsls	r3, r3, #22
 801cef2:	d4dd      	bmi.n	801ceb0 <_fflush_r+0xc>
 801cef4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cef6:	f7fc feff 	bl	8019cf8 <__retarget_lock_release_recursive>
 801cefa:	e7d9      	b.n	801ceb0 <_fflush_r+0xc>
 801cefc:	4b05      	ldr	r3, [pc, #20]	; (801cf14 <_fflush_r+0x70>)
 801cefe:	429c      	cmp	r4, r3
 801cf00:	d101      	bne.n	801cf06 <_fflush_r+0x62>
 801cf02:	68ac      	ldr	r4, [r5, #8]
 801cf04:	e7df      	b.n	801cec6 <_fflush_r+0x22>
 801cf06:	4b04      	ldr	r3, [pc, #16]	; (801cf18 <_fflush_r+0x74>)
 801cf08:	429c      	cmp	r4, r3
 801cf0a:	bf08      	it	eq
 801cf0c:	68ec      	ldreq	r4, [r5, #12]
 801cf0e:	e7da      	b.n	801cec6 <_fflush_r+0x22>
 801cf10:	08020e34 	.word	0x08020e34
 801cf14:	08020e54 	.word	0x08020e54
 801cf18:	08020e14 	.word	0x08020e14

0801cf1c <fiprintf>:
 801cf1c:	b40e      	push	{r1, r2, r3}
 801cf1e:	b503      	push	{r0, r1, lr}
 801cf20:	4601      	mov	r1, r0
 801cf22:	ab03      	add	r3, sp, #12
 801cf24:	4805      	ldr	r0, [pc, #20]	; (801cf3c <fiprintf+0x20>)
 801cf26:	f853 2b04 	ldr.w	r2, [r3], #4
 801cf2a:	6800      	ldr	r0, [r0, #0]
 801cf2c:	9301      	str	r3, [sp, #4]
 801cf2e:	f001 fc57 	bl	801e7e0 <_vfiprintf_r>
 801cf32:	b002      	add	sp, #8
 801cf34:	f85d eb04 	ldr.w	lr, [sp], #4
 801cf38:	b003      	add	sp, #12
 801cf3a:	4770      	bx	lr
 801cf3c:	200001d8 	.word	0x200001d8

0801cf40 <rshift>:
 801cf40:	6903      	ldr	r3, [r0, #16]
 801cf42:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801cf46:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cf4a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801cf4e:	f100 0414 	add.w	r4, r0, #20
 801cf52:	dd45      	ble.n	801cfe0 <rshift+0xa0>
 801cf54:	f011 011f 	ands.w	r1, r1, #31
 801cf58:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801cf5c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801cf60:	d10c      	bne.n	801cf7c <rshift+0x3c>
 801cf62:	f100 0710 	add.w	r7, r0, #16
 801cf66:	4629      	mov	r1, r5
 801cf68:	42b1      	cmp	r1, r6
 801cf6a:	d334      	bcc.n	801cfd6 <rshift+0x96>
 801cf6c:	1a9b      	subs	r3, r3, r2
 801cf6e:	009b      	lsls	r3, r3, #2
 801cf70:	1eea      	subs	r2, r5, #3
 801cf72:	4296      	cmp	r6, r2
 801cf74:	bf38      	it	cc
 801cf76:	2300      	movcc	r3, #0
 801cf78:	4423      	add	r3, r4
 801cf7a:	e015      	b.n	801cfa8 <rshift+0x68>
 801cf7c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801cf80:	f1c1 0820 	rsb	r8, r1, #32
 801cf84:	40cf      	lsrs	r7, r1
 801cf86:	f105 0e04 	add.w	lr, r5, #4
 801cf8a:	46a1      	mov	r9, r4
 801cf8c:	4576      	cmp	r6, lr
 801cf8e:	46f4      	mov	ip, lr
 801cf90:	d815      	bhi.n	801cfbe <rshift+0x7e>
 801cf92:	1a9b      	subs	r3, r3, r2
 801cf94:	009a      	lsls	r2, r3, #2
 801cf96:	3a04      	subs	r2, #4
 801cf98:	3501      	adds	r5, #1
 801cf9a:	42ae      	cmp	r6, r5
 801cf9c:	bf38      	it	cc
 801cf9e:	2200      	movcc	r2, #0
 801cfa0:	18a3      	adds	r3, r4, r2
 801cfa2:	50a7      	str	r7, [r4, r2]
 801cfa4:	b107      	cbz	r7, 801cfa8 <rshift+0x68>
 801cfa6:	3304      	adds	r3, #4
 801cfa8:	1b1a      	subs	r2, r3, r4
 801cfaa:	42a3      	cmp	r3, r4
 801cfac:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801cfb0:	bf08      	it	eq
 801cfb2:	2300      	moveq	r3, #0
 801cfb4:	6102      	str	r2, [r0, #16]
 801cfb6:	bf08      	it	eq
 801cfb8:	6143      	streq	r3, [r0, #20]
 801cfba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cfbe:	f8dc c000 	ldr.w	ip, [ip]
 801cfc2:	fa0c fc08 	lsl.w	ip, ip, r8
 801cfc6:	ea4c 0707 	orr.w	r7, ip, r7
 801cfca:	f849 7b04 	str.w	r7, [r9], #4
 801cfce:	f85e 7b04 	ldr.w	r7, [lr], #4
 801cfd2:	40cf      	lsrs	r7, r1
 801cfd4:	e7da      	b.n	801cf8c <rshift+0x4c>
 801cfd6:	f851 cb04 	ldr.w	ip, [r1], #4
 801cfda:	f847 cf04 	str.w	ip, [r7, #4]!
 801cfde:	e7c3      	b.n	801cf68 <rshift+0x28>
 801cfe0:	4623      	mov	r3, r4
 801cfe2:	e7e1      	b.n	801cfa8 <rshift+0x68>

0801cfe4 <__hexdig_fun>:
 801cfe4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801cfe8:	2b09      	cmp	r3, #9
 801cfea:	d802      	bhi.n	801cff2 <__hexdig_fun+0xe>
 801cfec:	3820      	subs	r0, #32
 801cfee:	b2c0      	uxtb	r0, r0
 801cff0:	4770      	bx	lr
 801cff2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801cff6:	2b05      	cmp	r3, #5
 801cff8:	d801      	bhi.n	801cffe <__hexdig_fun+0x1a>
 801cffa:	3847      	subs	r0, #71	; 0x47
 801cffc:	e7f7      	b.n	801cfee <__hexdig_fun+0xa>
 801cffe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801d002:	2b05      	cmp	r3, #5
 801d004:	d801      	bhi.n	801d00a <__hexdig_fun+0x26>
 801d006:	3827      	subs	r0, #39	; 0x27
 801d008:	e7f1      	b.n	801cfee <__hexdig_fun+0xa>
 801d00a:	2000      	movs	r0, #0
 801d00c:	4770      	bx	lr
	...

0801d010 <__gethex>:
 801d010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d014:	ed2d 8b02 	vpush	{d8}
 801d018:	b089      	sub	sp, #36	; 0x24
 801d01a:	ee08 0a10 	vmov	s16, r0
 801d01e:	9304      	str	r3, [sp, #16]
 801d020:	4bbc      	ldr	r3, [pc, #752]	; (801d314 <__gethex+0x304>)
 801d022:	681b      	ldr	r3, [r3, #0]
 801d024:	9301      	str	r3, [sp, #4]
 801d026:	4618      	mov	r0, r3
 801d028:	468b      	mov	fp, r1
 801d02a:	4690      	mov	r8, r2
 801d02c:	f7e3 f8e0 	bl	80001f0 <strlen>
 801d030:	9b01      	ldr	r3, [sp, #4]
 801d032:	f8db 2000 	ldr.w	r2, [fp]
 801d036:	4403      	add	r3, r0
 801d038:	4682      	mov	sl, r0
 801d03a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801d03e:	9305      	str	r3, [sp, #20]
 801d040:	1c93      	adds	r3, r2, #2
 801d042:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801d046:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801d04a:	32fe      	adds	r2, #254	; 0xfe
 801d04c:	18d1      	adds	r1, r2, r3
 801d04e:	461f      	mov	r7, r3
 801d050:	f813 0b01 	ldrb.w	r0, [r3], #1
 801d054:	9100      	str	r1, [sp, #0]
 801d056:	2830      	cmp	r0, #48	; 0x30
 801d058:	d0f8      	beq.n	801d04c <__gethex+0x3c>
 801d05a:	f7ff ffc3 	bl	801cfe4 <__hexdig_fun>
 801d05e:	4604      	mov	r4, r0
 801d060:	2800      	cmp	r0, #0
 801d062:	d13a      	bne.n	801d0da <__gethex+0xca>
 801d064:	9901      	ldr	r1, [sp, #4]
 801d066:	4652      	mov	r2, sl
 801d068:	4638      	mov	r0, r7
 801d06a:	f7fd ff96 	bl	801af9a <strncmp>
 801d06e:	4605      	mov	r5, r0
 801d070:	2800      	cmp	r0, #0
 801d072:	d168      	bne.n	801d146 <__gethex+0x136>
 801d074:	f817 000a 	ldrb.w	r0, [r7, sl]
 801d078:	eb07 060a 	add.w	r6, r7, sl
 801d07c:	f7ff ffb2 	bl	801cfe4 <__hexdig_fun>
 801d080:	2800      	cmp	r0, #0
 801d082:	d062      	beq.n	801d14a <__gethex+0x13a>
 801d084:	4633      	mov	r3, r6
 801d086:	7818      	ldrb	r0, [r3, #0]
 801d088:	2830      	cmp	r0, #48	; 0x30
 801d08a:	461f      	mov	r7, r3
 801d08c:	f103 0301 	add.w	r3, r3, #1
 801d090:	d0f9      	beq.n	801d086 <__gethex+0x76>
 801d092:	f7ff ffa7 	bl	801cfe4 <__hexdig_fun>
 801d096:	2301      	movs	r3, #1
 801d098:	fab0 f480 	clz	r4, r0
 801d09c:	0964      	lsrs	r4, r4, #5
 801d09e:	4635      	mov	r5, r6
 801d0a0:	9300      	str	r3, [sp, #0]
 801d0a2:	463a      	mov	r2, r7
 801d0a4:	4616      	mov	r6, r2
 801d0a6:	3201      	adds	r2, #1
 801d0a8:	7830      	ldrb	r0, [r6, #0]
 801d0aa:	f7ff ff9b 	bl	801cfe4 <__hexdig_fun>
 801d0ae:	2800      	cmp	r0, #0
 801d0b0:	d1f8      	bne.n	801d0a4 <__gethex+0x94>
 801d0b2:	9901      	ldr	r1, [sp, #4]
 801d0b4:	4652      	mov	r2, sl
 801d0b6:	4630      	mov	r0, r6
 801d0b8:	f7fd ff6f 	bl	801af9a <strncmp>
 801d0bc:	b980      	cbnz	r0, 801d0e0 <__gethex+0xd0>
 801d0be:	b94d      	cbnz	r5, 801d0d4 <__gethex+0xc4>
 801d0c0:	eb06 050a 	add.w	r5, r6, sl
 801d0c4:	462a      	mov	r2, r5
 801d0c6:	4616      	mov	r6, r2
 801d0c8:	3201      	adds	r2, #1
 801d0ca:	7830      	ldrb	r0, [r6, #0]
 801d0cc:	f7ff ff8a 	bl	801cfe4 <__hexdig_fun>
 801d0d0:	2800      	cmp	r0, #0
 801d0d2:	d1f8      	bne.n	801d0c6 <__gethex+0xb6>
 801d0d4:	1bad      	subs	r5, r5, r6
 801d0d6:	00ad      	lsls	r5, r5, #2
 801d0d8:	e004      	b.n	801d0e4 <__gethex+0xd4>
 801d0da:	2400      	movs	r4, #0
 801d0dc:	4625      	mov	r5, r4
 801d0de:	e7e0      	b.n	801d0a2 <__gethex+0x92>
 801d0e0:	2d00      	cmp	r5, #0
 801d0e2:	d1f7      	bne.n	801d0d4 <__gethex+0xc4>
 801d0e4:	7833      	ldrb	r3, [r6, #0]
 801d0e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801d0ea:	2b50      	cmp	r3, #80	; 0x50
 801d0ec:	d13b      	bne.n	801d166 <__gethex+0x156>
 801d0ee:	7873      	ldrb	r3, [r6, #1]
 801d0f0:	2b2b      	cmp	r3, #43	; 0x2b
 801d0f2:	d02c      	beq.n	801d14e <__gethex+0x13e>
 801d0f4:	2b2d      	cmp	r3, #45	; 0x2d
 801d0f6:	d02e      	beq.n	801d156 <__gethex+0x146>
 801d0f8:	1c71      	adds	r1, r6, #1
 801d0fa:	f04f 0900 	mov.w	r9, #0
 801d0fe:	7808      	ldrb	r0, [r1, #0]
 801d100:	f7ff ff70 	bl	801cfe4 <__hexdig_fun>
 801d104:	1e43      	subs	r3, r0, #1
 801d106:	b2db      	uxtb	r3, r3
 801d108:	2b18      	cmp	r3, #24
 801d10a:	d82c      	bhi.n	801d166 <__gethex+0x156>
 801d10c:	f1a0 0210 	sub.w	r2, r0, #16
 801d110:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801d114:	f7ff ff66 	bl	801cfe4 <__hexdig_fun>
 801d118:	1e43      	subs	r3, r0, #1
 801d11a:	b2db      	uxtb	r3, r3
 801d11c:	2b18      	cmp	r3, #24
 801d11e:	d91d      	bls.n	801d15c <__gethex+0x14c>
 801d120:	f1b9 0f00 	cmp.w	r9, #0
 801d124:	d000      	beq.n	801d128 <__gethex+0x118>
 801d126:	4252      	negs	r2, r2
 801d128:	4415      	add	r5, r2
 801d12a:	f8cb 1000 	str.w	r1, [fp]
 801d12e:	b1e4      	cbz	r4, 801d16a <__gethex+0x15a>
 801d130:	9b00      	ldr	r3, [sp, #0]
 801d132:	2b00      	cmp	r3, #0
 801d134:	bf14      	ite	ne
 801d136:	2700      	movne	r7, #0
 801d138:	2706      	moveq	r7, #6
 801d13a:	4638      	mov	r0, r7
 801d13c:	b009      	add	sp, #36	; 0x24
 801d13e:	ecbd 8b02 	vpop	{d8}
 801d142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d146:	463e      	mov	r6, r7
 801d148:	4625      	mov	r5, r4
 801d14a:	2401      	movs	r4, #1
 801d14c:	e7ca      	b.n	801d0e4 <__gethex+0xd4>
 801d14e:	f04f 0900 	mov.w	r9, #0
 801d152:	1cb1      	adds	r1, r6, #2
 801d154:	e7d3      	b.n	801d0fe <__gethex+0xee>
 801d156:	f04f 0901 	mov.w	r9, #1
 801d15a:	e7fa      	b.n	801d152 <__gethex+0x142>
 801d15c:	230a      	movs	r3, #10
 801d15e:	fb03 0202 	mla	r2, r3, r2, r0
 801d162:	3a10      	subs	r2, #16
 801d164:	e7d4      	b.n	801d110 <__gethex+0x100>
 801d166:	4631      	mov	r1, r6
 801d168:	e7df      	b.n	801d12a <__gethex+0x11a>
 801d16a:	1bf3      	subs	r3, r6, r7
 801d16c:	3b01      	subs	r3, #1
 801d16e:	4621      	mov	r1, r4
 801d170:	2b07      	cmp	r3, #7
 801d172:	dc0b      	bgt.n	801d18c <__gethex+0x17c>
 801d174:	ee18 0a10 	vmov	r0, s16
 801d178:	f000 faea 	bl	801d750 <_Balloc>
 801d17c:	4604      	mov	r4, r0
 801d17e:	b940      	cbnz	r0, 801d192 <__gethex+0x182>
 801d180:	4b65      	ldr	r3, [pc, #404]	; (801d318 <__gethex+0x308>)
 801d182:	4602      	mov	r2, r0
 801d184:	21de      	movs	r1, #222	; 0xde
 801d186:	4865      	ldr	r0, [pc, #404]	; (801d31c <__gethex+0x30c>)
 801d188:	f7fe ff60 	bl	801c04c <__assert_func>
 801d18c:	3101      	adds	r1, #1
 801d18e:	105b      	asrs	r3, r3, #1
 801d190:	e7ee      	b.n	801d170 <__gethex+0x160>
 801d192:	f100 0914 	add.w	r9, r0, #20
 801d196:	f04f 0b00 	mov.w	fp, #0
 801d19a:	f1ca 0301 	rsb	r3, sl, #1
 801d19e:	f8cd 9008 	str.w	r9, [sp, #8]
 801d1a2:	f8cd b000 	str.w	fp, [sp]
 801d1a6:	9306      	str	r3, [sp, #24]
 801d1a8:	42b7      	cmp	r7, r6
 801d1aa:	d340      	bcc.n	801d22e <__gethex+0x21e>
 801d1ac:	9802      	ldr	r0, [sp, #8]
 801d1ae:	9b00      	ldr	r3, [sp, #0]
 801d1b0:	f840 3b04 	str.w	r3, [r0], #4
 801d1b4:	eba0 0009 	sub.w	r0, r0, r9
 801d1b8:	1080      	asrs	r0, r0, #2
 801d1ba:	0146      	lsls	r6, r0, #5
 801d1bc:	6120      	str	r0, [r4, #16]
 801d1be:	4618      	mov	r0, r3
 801d1c0:	f000 fbbc 	bl	801d93c <__hi0bits>
 801d1c4:	1a30      	subs	r0, r6, r0
 801d1c6:	f8d8 6000 	ldr.w	r6, [r8]
 801d1ca:	42b0      	cmp	r0, r6
 801d1cc:	dd63      	ble.n	801d296 <__gethex+0x286>
 801d1ce:	1b87      	subs	r7, r0, r6
 801d1d0:	4639      	mov	r1, r7
 801d1d2:	4620      	mov	r0, r4
 801d1d4:	f000 ff56 	bl	801e084 <__any_on>
 801d1d8:	4682      	mov	sl, r0
 801d1da:	b1a8      	cbz	r0, 801d208 <__gethex+0x1f8>
 801d1dc:	1e7b      	subs	r3, r7, #1
 801d1de:	1159      	asrs	r1, r3, #5
 801d1e0:	f003 021f 	and.w	r2, r3, #31
 801d1e4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801d1e8:	f04f 0a01 	mov.w	sl, #1
 801d1ec:	fa0a f202 	lsl.w	r2, sl, r2
 801d1f0:	420a      	tst	r2, r1
 801d1f2:	d009      	beq.n	801d208 <__gethex+0x1f8>
 801d1f4:	4553      	cmp	r3, sl
 801d1f6:	dd05      	ble.n	801d204 <__gethex+0x1f4>
 801d1f8:	1eb9      	subs	r1, r7, #2
 801d1fa:	4620      	mov	r0, r4
 801d1fc:	f000 ff42 	bl	801e084 <__any_on>
 801d200:	2800      	cmp	r0, #0
 801d202:	d145      	bne.n	801d290 <__gethex+0x280>
 801d204:	f04f 0a02 	mov.w	sl, #2
 801d208:	4639      	mov	r1, r7
 801d20a:	4620      	mov	r0, r4
 801d20c:	f7ff fe98 	bl	801cf40 <rshift>
 801d210:	443d      	add	r5, r7
 801d212:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d216:	42ab      	cmp	r3, r5
 801d218:	da4c      	bge.n	801d2b4 <__gethex+0x2a4>
 801d21a:	ee18 0a10 	vmov	r0, s16
 801d21e:	4621      	mov	r1, r4
 801d220:	f000 fad6 	bl	801d7d0 <_Bfree>
 801d224:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d226:	2300      	movs	r3, #0
 801d228:	6013      	str	r3, [r2, #0]
 801d22a:	27a3      	movs	r7, #163	; 0xa3
 801d22c:	e785      	b.n	801d13a <__gethex+0x12a>
 801d22e:	1e73      	subs	r3, r6, #1
 801d230:	9a05      	ldr	r2, [sp, #20]
 801d232:	9303      	str	r3, [sp, #12]
 801d234:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801d238:	4293      	cmp	r3, r2
 801d23a:	d019      	beq.n	801d270 <__gethex+0x260>
 801d23c:	f1bb 0f20 	cmp.w	fp, #32
 801d240:	d107      	bne.n	801d252 <__gethex+0x242>
 801d242:	9b02      	ldr	r3, [sp, #8]
 801d244:	9a00      	ldr	r2, [sp, #0]
 801d246:	f843 2b04 	str.w	r2, [r3], #4
 801d24a:	9302      	str	r3, [sp, #8]
 801d24c:	2300      	movs	r3, #0
 801d24e:	9300      	str	r3, [sp, #0]
 801d250:	469b      	mov	fp, r3
 801d252:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801d256:	f7ff fec5 	bl	801cfe4 <__hexdig_fun>
 801d25a:	9b00      	ldr	r3, [sp, #0]
 801d25c:	f000 000f 	and.w	r0, r0, #15
 801d260:	fa00 f00b 	lsl.w	r0, r0, fp
 801d264:	4303      	orrs	r3, r0
 801d266:	9300      	str	r3, [sp, #0]
 801d268:	f10b 0b04 	add.w	fp, fp, #4
 801d26c:	9b03      	ldr	r3, [sp, #12]
 801d26e:	e00d      	b.n	801d28c <__gethex+0x27c>
 801d270:	9b03      	ldr	r3, [sp, #12]
 801d272:	9a06      	ldr	r2, [sp, #24]
 801d274:	4413      	add	r3, r2
 801d276:	42bb      	cmp	r3, r7
 801d278:	d3e0      	bcc.n	801d23c <__gethex+0x22c>
 801d27a:	4618      	mov	r0, r3
 801d27c:	9901      	ldr	r1, [sp, #4]
 801d27e:	9307      	str	r3, [sp, #28]
 801d280:	4652      	mov	r2, sl
 801d282:	f7fd fe8a 	bl	801af9a <strncmp>
 801d286:	9b07      	ldr	r3, [sp, #28]
 801d288:	2800      	cmp	r0, #0
 801d28a:	d1d7      	bne.n	801d23c <__gethex+0x22c>
 801d28c:	461e      	mov	r6, r3
 801d28e:	e78b      	b.n	801d1a8 <__gethex+0x198>
 801d290:	f04f 0a03 	mov.w	sl, #3
 801d294:	e7b8      	b.n	801d208 <__gethex+0x1f8>
 801d296:	da0a      	bge.n	801d2ae <__gethex+0x29e>
 801d298:	1a37      	subs	r7, r6, r0
 801d29a:	4621      	mov	r1, r4
 801d29c:	ee18 0a10 	vmov	r0, s16
 801d2a0:	463a      	mov	r2, r7
 801d2a2:	f000 fcb1 	bl	801dc08 <__lshift>
 801d2a6:	1bed      	subs	r5, r5, r7
 801d2a8:	4604      	mov	r4, r0
 801d2aa:	f100 0914 	add.w	r9, r0, #20
 801d2ae:	f04f 0a00 	mov.w	sl, #0
 801d2b2:	e7ae      	b.n	801d212 <__gethex+0x202>
 801d2b4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801d2b8:	42a8      	cmp	r0, r5
 801d2ba:	dd72      	ble.n	801d3a2 <__gethex+0x392>
 801d2bc:	1b45      	subs	r5, r0, r5
 801d2be:	42ae      	cmp	r6, r5
 801d2c0:	dc36      	bgt.n	801d330 <__gethex+0x320>
 801d2c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d2c6:	2b02      	cmp	r3, #2
 801d2c8:	d02a      	beq.n	801d320 <__gethex+0x310>
 801d2ca:	2b03      	cmp	r3, #3
 801d2cc:	d02c      	beq.n	801d328 <__gethex+0x318>
 801d2ce:	2b01      	cmp	r3, #1
 801d2d0:	d115      	bne.n	801d2fe <__gethex+0x2ee>
 801d2d2:	42ae      	cmp	r6, r5
 801d2d4:	d113      	bne.n	801d2fe <__gethex+0x2ee>
 801d2d6:	2e01      	cmp	r6, #1
 801d2d8:	d10b      	bne.n	801d2f2 <__gethex+0x2e2>
 801d2da:	9a04      	ldr	r2, [sp, #16]
 801d2dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d2e0:	6013      	str	r3, [r2, #0]
 801d2e2:	2301      	movs	r3, #1
 801d2e4:	6123      	str	r3, [r4, #16]
 801d2e6:	f8c9 3000 	str.w	r3, [r9]
 801d2ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d2ec:	2762      	movs	r7, #98	; 0x62
 801d2ee:	601c      	str	r4, [r3, #0]
 801d2f0:	e723      	b.n	801d13a <__gethex+0x12a>
 801d2f2:	1e71      	subs	r1, r6, #1
 801d2f4:	4620      	mov	r0, r4
 801d2f6:	f000 fec5 	bl	801e084 <__any_on>
 801d2fa:	2800      	cmp	r0, #0
 801d2fc:	d1ed      	bne.n	801d2da <__gethex+0x2ca>
 801d2fe:	ee18 0a10 	vmov	r0, s16
 801d302:	4621      	mov	r1, r4
 801d304:	f000 fa64 	bl	801d7d0 <_Bfree>
 801d308:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d30a:	2300      	movs	r3, #0
 801d30c:	6013      	str	r3, [r2, #0]
 801d30e:	2750      	movs	r7, #80	; 0x50
 801d310:	e713      	b.n	801d13a <__gethex+0x12a>
 801d312:	bf00      	nop
 801d314:	0802103c 	.word	0x0802103c
 801d318:	08020fbf 	.word	0x08020fbf
 801d31c:	08020fd0 	.word	0x08020fd0
 801d320:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d322:	2b00      	cmp	r3, #0
 801d324:	d1eb      	bne.n	801d2fe <__gethex+0x2ee>
 801d326:	e7d8      	b.n	801d2da <__gethex+0x2ca>
 801d328:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d32a:	2b00      	cmp	r3, #0
 801d32c:	d1d5      	bne.n	801d2da <__gethex+0x2ca>
 801d32e:	e7e6      	b.n	801d2fe <__gethex+0x2ee>
 801d330:	1e6f      	subs	r7, r5, #1
 801d332:	f1ba 0f00 	cmp.w	sl, #0
 801d336:	d131      	bne.n	801d39c <__gethex+0x38c>
 801d338:	b127      	cbz	r7, 801d344 <__gethex+0x334>
 801d33a:	4639      	mov	r1, r7
 801d33c:	4620      	mov	r0, r4
 801d33e:	f000 fea1 	bl	801e084 <__any_on>
 801d342:	4682      	mov	sl, r0
 801d344:	117b      	asrs	r3, r7, #5
 801d346:	2101      	movs	r1, #1
 801d348:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801d34c:	f007 071f 	and.w	r7, r7, #31
 801d350:	fa01 f707 	lsl.w	r7, r1, r7
 801d354:	421f      	tst	r7, r3
 801d356:	4629      	mov	r1, r5
 801d358:	4620      	mov	r0, r4
 801d35a:	bf18      	it	ne
 801d35c:	f04a 0a02 	orrne.w	sl, sl, #2
 801d360:	1b76      	subs	r6, r6, r5
 801d362:	f7ff fded 	bl	801cf40 <rshift>
 801d366:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801d36a:	2702      	movs	r7, #2
 801d36c:	f1ba 0f00 	cmp.w	sl, #0
 801d370:	d048      	beq.n	801d404 <__gethex+0x3f4>
 801d372:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d376:	2b02      	cmp	r3, #2
 801d378:	d015      	beq.n	801d3a6 <__gethex+0x396>
 801d37a:	2b03      	cmp	r3, #3
 801d37c:	d017      	beq.n	801d3ae <__gethex+0x39e>
 801d37e:	2b01      	cmp	r3, #1
 801d380:	d109      	bne.n	801d396 <__gethex+0x386>
 801d382:	f01a 0f02 	tst.w	sl, #2
 801d386:	d006      	beq.n	801d396 <__gethex+0x386>
 801d388:	f8d9 0000 	ldr.w	r0, [r9]
 801d38c:	ea4a 0a00 	orr.w	sl, sl, r0
 801d390:	f01a 0f01 	tst.w	sl, #1
 801d394:	d10e      	bne.n	801d3b4 <__gethex+0x3a4>
 801d396:	f047 0710 	orr.w	r7, r7, #16
 801d39a:	e033      	b.n	801d404 <__gethex+0x3f4>
 801d39c:	f04f 0a01 	mov.w	sl, #1
 801d3a0:	e7d0      	b.n	801d344 <__gethex+0x334>
 801d3a2:	2701      	movs	r7, #1
 801d3a4:	e7e2      	b.n	801d36c <__gethex+0x35c>
 801d3a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d3a8:	f1c3 0301 	rsb	r3, r3, #1
 801d3ac:	9315      	str	r3, [sp, #84]	; 0x54
 801d3ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d3b0:	2b00      	cmp	r3, #0
 801d3b2:	d0f0      	beq.n	801d396 <__gethex+0x386>
 801d3b4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801d3b8:	f104 0314 	add.w	r3, r4, #20
 801d3bc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801d3c0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801d3c4:	f04f 0c00 	mov.w	ip, #0
 801d3c8:	4618      	mov	r0, r3
 801d3ca:	f853 2b04 	ldr.w	r2, [r3], #4
 801d3ce:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801d3d2:	d01c      	beq.n	801d40e <__gethex+0x3fe>
 801d3d4:	3201      	adds	r2, #1
 801d3d6:	6002      	str	r2, [r0, #0]
 801d3d8:	2f02      	cmp	r7, #2
 801d3da:	f104 0314 	add.w	r3, r4, #20
 801d3de:	d13f      	bne.n	801d460 <__gethex+0x450>
 801d3e0:	f8d8 2000 	ldr.w	r2, [r8]
 801d3e4:	3a01      	subs	r2, #1
 801d3e6:	42b2      	cmp	r2, r6
 801d3e8:	d10a      	bne.n	801d400 <__gethex+0x3f0>
 801d3ea:	1171      	asrs	r1, r6, #5
 801d3ec:	2201      	movs	r2, #1
 801d3ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801d3f2:	f006 061f 	and.w	r6, r6, #31
 801d3f6:	fa02 f606 	lsl.w	r6, r2, r6
 801d3fa:	421e      	tst	r6, r3
 801d3fc:	bf18      	it	ne
 801d3fe:	4617      	movne	r7, r2
 801d400:	f047 0720 	orr.w	r7, r7, #32
 801d404:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d406:	601c      	str	r4, [r3, #0]
 801d408:	9b04      	ldr	r3, [sp, #16]
 801d40a:	601d      	str	r5, [r3, #0]
 801d40c:	e695      	b.n	801d13a <__gethex+0x12a>
 801d40e:	4299      	cmp	r1, r3
 801d410:	f843 cc04 	str.w	ip, [r3, #-4]
 801d414:	d8d8      	bhi.n	801d3c8 <__gethex+0x3b8>
 801d416:	68a3      	ldr	r3, [r4, #8]
 801d418:	459b      	cmp	fp, r3
 801d41a:	db19      	blt.n	801d450 <__gethex+0x440>
 801d41c:	6861      	ldr	r1, [r4, #4]
 801d41e:	ee18 0a10 	vmov	r0, s16
 801d422:	3101      	adds	r1, #1
 801d424:	f000 f994 	bl	801d750 <_Balloc>
 801d428:	4681      	mov	r9, r0
 801d42a:	b918      	cbnz	r0, 801d434 <__gethex+0x424>
 801d42c:	4b1a      	ldr	r3, [pc, #104]	; (801d498 <__gethex+0x488>)
 801d42e:	4602      	mov	r2, r0
 801d430:	2184      	movs	r1, #132	; 0x84
 801d432:	e6a8      	b.n	801d186 <__gethex+0x176>
 801d434:	6922      	ldr	r2, [r4, #16]
 801d436:	3202      	adds	r2, #2
 801d438:	f104 010c 	add.w	r1, r4, #12
 801d43c:	0092      	lsls	r2, r2, #2
 801d43e:	300c      	adds	r0, #12
 801d440:	f7fc fc6c 	bl	8019d1c <memcpy>
 801d444:	4621      	mov	r1, r4
 801d446:	ee18 0a10 	vmov	r0, s16
 801d44a:	f000 f9c1 	bl	801d7d0 <_Bfree>
 801d44e:	464c      	mov	r4, r9
 801d450:	6923      	ldr	r3, [r4, #16]
 801d452:	1c5a      	adds	r2, r3, #1
 801d454:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801d458:	6122      	str	r2, [r4, #16]
 801d45a:	2201      	movs	r2, #1
 801d45c:	615a      	str	r2, [r3, #20]
 801d45e:	e7bb      	b.n	801d3d8 <__gethex+0x3c8>
 801d460:	6922      	ldr	r2, [r4, #16]
 801d462:	455a      	cmp	r2, fp
 801d464:	dd0b      	ble.n	801d47e <__gethex+0x46e>
 801d466:	2101      	movs	r1, #1
 801d468:	4620      	mov	r0, r4
 801d46a:	f7ff fd69 	bl	801cf40 <rshift>
 801d46e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d472:	3501      	adds	r5, #1
 801d474:	42ab      	cmp	r3, r5
 801d476:	f6ff aed0 	blt.w	801d21a <__gethex+0x20a>
 801d47a:	2701      	movs	r7, #1
 801d47c:	e7c0      	b.n	801d400 <__gethex+0x3f0>
 801d47e:	f016 061f 	ands.w	r6, r6, #31
 801d482:	d0fa      	beq.n	801d47a <__gethex+0x46a>
 801d484:	449a      	add	sl, r3
 801d486:	f1c6 0620 	rsb	r6, r6, #32
 801d48a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801d48e:	f000 fa55 	bl	801d93c <__hi0bits>
 801d492:	42b0      	cmp	r0, r6
 801d494:	dbe7      	blt.n	801d466 <__gethex+0x456>
 801d496:	e7f0      	b.n	801d47a <__gethex+0x46a>
 801d498:	08020fbf 	.word	0x08020fbf

0801d49c <L_shift>:
 801d49c:	f1c2 0208 	rsb	r2, r2, #8
 801d4a0:	0092      	lsls	r2, r2, #2
 801d4a2:	b570      	push	{r4, r5, r6, lr}
 801d4a4:	f1c2 0620 	rsb	r6, r2, #32
 801d4a8:	6843      	ldr	r3, [r0, #4]
 801d4aa:	6804      	ldr	r4, [r0, #0]
 801d4ac:	fa03 f506 	lsl.w	r5, r3, r6
 801d4b0:	432c      	orrs	r4, r5
 801d4b2:	40d3      	lsrs	r3, r2
 801d4b4:	6004      	str	r4, [r0, #0]
 801d4b6:	f840 3f04 	str.w	r3, [r0, #4]!
 801d4ba:	4288      	cmp	r0, r1
 801d4bc:	d3f4      	bcc.n	801d4a8 <L_shift+0xc>
 801d4be:	bd70      	pop	{r4, r5, r6, pc}

0801d4c0 <__match>:
 801d4c0:	b530      	push	{r4, r5, lr}
 801d4c2:	6803      	ldr	r3, [r0, #0]
 801d4c4:	3301      	adds	r3, #1
 801d4c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d4ca:	b914      	cbnz	r4, 801d4d2 <__match+0x12>
 801d4cc:	6003      	str	r3, [r0, #0]
 801d4ce:	2001      	movs	r0, #1
 801d4d0:	bd30      	pop	{r4, r5, pc}
 801d4d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d4d6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801d4da:	2d19      	cmp	r5, #25
 801d4dc:	bf98      	it	ls
 801d4de:	3220      	addls	r2, #32
 801d4e0:	42a2      	cmp	r2, r4
 801d4e2:	d0f0      	beq.n	801d4c6 <__match+0x6>
 801d4e4:	2000      	movs	r0, #0
 801d4e6:	e7f3      	b.n	801d4d0 <__match+0x10>

0801d4e8 <__hexnan>:
 801d4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4ec:	680b      	ldr	r3, [r1, #0]
 801d4ee:	6801      	ldr	r1, [r0, #0]
 801d4f0:	115e      	asrs	r6, r3, #5
 801d4f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801d4f6:	f013 031f 	ands.w	r3, r3, #31
 801d4fa:	b087      	sub	sp, #28
 801d4fc:	bf18      	it	ne
 801d4fe:	3604      	addne	r6, #4
 801d500:	2500      	movs	r5, #0
 801d502:	1f37      	subs	r7, r6, #4
 801d504:	4682      	mov	sl, r0
 801d506:	4690      	mov	r8, r2
 801d508:	9301      	str	r3, [sp, #4]
 801d50a:	f846 5c04 	str.w	r5, [r6, #-4]
 801d50e:	46b9      	mov	r9, r7
 801d510:	463c      	mov	r4, r7
 801d512:	9502      	str	r5, [sp, #8]
 801d514:	46ab      	mov	fp, r5
 801d516:	784a      	ldrb	r2, [r1, #1]
 801d518:	1c4b      	adds	r3, r1, #1
 801d51a:	9303      	str	r3, [sp, #12]
 801d51c:	b342      	cbz	r2, 801d570 <__hexnan+0x88>
 801d51e:	4610      	mov	r0, r2
 801d520:	9105      	str	r1, [sp, #20]
 801d522:	9204      	str	r2, [sp, #16]
 801d524:	f7ff fd5e 	bl	801cfe4 <__hexdig_fun>
 801d528:	2800      	cmp	r0, #0
 801d52a:	d14f      	bne.n	801d5cc <__hexnan+0xe4>
 801d52c:	9a04      	ldr	r2, [sp, #16]
 801d52e:	9905      	ldr	r1, [sp, #20]
 801d530:	2a20      	cmp	r2, #32
 801d532:	d818      	bhi.n	801d566 <__hexnan+0x7e>
 801d534:	9b02      	ldr	r3, [sp, #8]
 801d536:	459b      	cmp	fp, r3
 801d538:	dd13      	ble.n	801d562 <__hexnan+0x7a>
 801d53a:	454c      	cmp	r4, r9
 801d53c:	d206      	bcs.n	801d54c <__hexnan+0x64>
 801d53e:	2d07      	cmp	r5, #7
 801d540:	dc04      	bgt.n	801d54c <__hexnan+0x64>
 801d542:	462a      	mov	r2, r5
 801d544:	4649      	mov	r1, r9
 801d546:	4620      	mov	r0, r4
 801d548:	f7ff ffa8 	bl	801d49c <L_shift>
 801d54c:	4544      	cmp	r4, r8
 801d54e:	d950      	bls.n	801d5f2 <__hexnan+0x10a>
 801d550:	2300      	movs	r3, #0
 801d552:	f1a4 0904 	sub.w	r9, r4, #4
 801d556:	f844 3c04 	str.w	r3, [r4, #-4]
 801d55a:	f8cd b008 	str.w	fp, [sp, #8]
 801d55e:	464c      	mov	r4, r9
 801d560:	461d      	mov	r5, r3
 801d562:	9903      	ldr	r1, [sp, #12]
 801d564:	e7d7      	b.n	801d516 <__hexnan+0x2e>
 801d566:	2a29      	cmp	r2, #41	; 0x29
 801d568:	d156      	bne.n	801d618 <__hexnan+0x130>
 801d56a:	3102      	adds	r1, #2
 801d56c:	f8ca 1000 	str.w	r1, [sl]
 801d570:	f1bb 0f00 	cmp.w	fp, #0
 801d574:	d050      	beq.n	801d618 <__hexnan+0x130>
 801d576:	454c      	cmp	r4, r9
 801d578:	d206      	bcs.n	801d588 <__hexnan+0xa0>
 801d57a:	2d07      	cmp	r5, #7
 801d57c:	dc04      	bgt.n	801d588 <__hexnan+0xa0>
 801d57e:	462a      	mov	r2, r5
 801d580:	4649      	mov	r1, r9
 801d582:	4620      	mov	r0, r4
 801d584:	f7ff ff8a 	bl	801d49c <L_shift>
 801d588:	4544      	cmp	r4, r8
 801d58a:	d934      	bls.n	801d5f6 <__hexnan+0x10e>
 801d58c:	f1a8 0204 	sub.w	r2, r8, #4
 801d590:	4623      	mov	r3, r4
 801d592:	f853 1b04 	ldr.w	r1, [r3], #4
 801d596:	f842 1f04 	str.w	r1, [r2, #4]!
 801d59a:	429f      	cmp	r7, r3
 801d59c:	d2f9      	bcs.n	801d592 <__hexnan+0xaa>
 801d59e:	1b3b      	subs	r3, r7, r4
 801d5a0:	f023 0303 	bic.w	r3, r3, #3
 801d5a4:	3304      	adds	r3, #4
 801d5a6:	3401      	adds	r4, #1
 801d5a8:	3e03      	subs	r6, #3
 801d5aa:	42b4      	cmp	r4, r6
 801d5ac:	bf88      	it	hi
 801d5ae:	2304      	movhi	r3, #4
 801d5b0:	4443      	add	r3, r8
 801d5b2:	2200      	movs	r2, #0
 801d5b4:	f843 2b04 	str.w	r2, [r3], #4
 801d5b8:	429f      	cmp	r7, r3
 801d5ba:	d2fb      	bcs.n	801d5b4 <__hexnan+0xcc>
 801d5bc:	683b      	ldr	r3, [r7, #0]
 801d5be:	b91b      	cbnz	r3, 801d5c8 <__hexnan+0xe0>
 801d5c0:	4547      	cmp	r7, r8
 801d5c2:	d127      	bne.n	801d614 <__hexnan+0x12c>
 801d5c4:	2301      	movs	r3, #1
 801d5c6:	603b      	str	r3, [r7, #0]
 801d5c8:	2005      	movs	r0, #5
 801d5ca:	e026      	b.n	801d61a <__hexnan+0x132>
 801d5cc:	3501      	adds	r5, #1
 801d5ce:	2d08      	cmp	r5, #8
 801d5d0:	f10b 0b01 	add.w	fp, fp, #1
 801d5d4:	dd06      	ble.n	801d5e4 <__hexnan+0xfc>
 801d5d6:	4544      	cmp	r4, r8
 801d5d8:	d9c3      	bls.n	801d562 <__hexnan+0x7a>
 801d5da:	2300      	movs	r3, #0
 801d5dc:	f844 3c04 	str.w	r3, [r4, #-4]
 801d5e0:	2501      	movs	r5, #1
 801d5e2:	3c04      	subs	r4, #4
 801d5e4:	6822      	ldr	r2, [r4, #0]
 801d5e6:	f000 000f 	and.w	r0, r0, #15
 801d5ea:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801d5ee:	6022      	str	r2, [r4, #0]
 801d5f0:	e7b7      	b.n	801d562 <__hexnan+0x7a>
 801d5f2:	2508      	movs	r5, #8
 801d5f4:	e7b5      	b.n	801d562 <__hexnan+0x7a>
 801d5f6:	9b01      	ldr	r3, [sp, #4]
 801d5f8:	2b00      	cmp	r3, #0
 801d5fa:	d0df      	beq.n	801d5bc <__hexnan+0xd4>
 801d5fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d600:	f1c3 0320 	rsb	r3, r3, #32
 801d604:	fa22 f303 	lsr.w	r3, r2, r3
 801d608:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801d60c:	401a      	ands	r2, r3
 801d60e:	f846 2c04 	str.w	r2, [r6, #-4]
 801d612:	e7d3      	b.n	801d5bc <__hexnan+0xd4>
 801d614:	3f04      	subs	r7, #4
 801d616:	e7d1      	b.n	801d5bc <__hexnan+0xd4>
 801d618:	2004      	movs	r0, #4
 801d61a:	b007      	add	sp, #28
 801d61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d620 <_localeconv_r>:
 801d620:	4800      	ldr	r0, [pc, #0]	; (801d624 <_localeconv_r+0x4>)
 801d622:	4770      	bx	lr
 801d624:	20000330 	.word	0x20000330

0801d628 <_lseek_r>:
 801d628:	b538      	push	{r3, r4, r5, lr}
 801d62a:	4d07      	ldr	r5, [pc, #28]	; (801d648 <_lseek_r+0x20>)
 801d62c:	4604      	mov	r4, r0
 801d62e:	4608      	mov	r0, r1
 801d630:	4611      	mov	r1, r2
 801d632:	2200      	movs	r2, #0
 801d634:	602a      	str	r2, [r5, #0]
 801d636:	461a      	mov	r2, r3
 801d638:	f7e5 fe0a 	bl	8003250 <_lseek>
 801d63c:	1c43      	adds	r3, r0, #1
 801d63e:	d102      	bne.n	801d646 <_lseek_r+0x1e>
 801d640:	682b      	ldr	r3, [r5, #0]
 801d642:	b103      	cbz	r3, 801d646 <_lseek_r+0x1e>
 801d644:	6023      	str	r3, [r4, #0]
 801d646:	bd38      	pop	{r3, r4, r5, pc}
 801d648:	20008f98 	.word	0x20008f98

0801d64c <__swhatbuf_r>:
 801d64c:	b570      	push	{r4, r5, r6, lr}
 801d64e:	460e      	mov	r6, r1
 801d650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d654:	2900      	cmp	r1, #0
 801d656:	b096      	sub	sp, #88	; 0x58
 801d658:	4614      	mov	r4, r2
 801d65a:	461d      	mov	r5, r3
 801d65c:	da07      	bge.n	801d66e <__swhatbuf_r+0x22>
 801d65e:	2300      	movs	r3, #0
 801d660:	602b      	str	r3, [r5, #0]
 801d662:	89b3      	ldrh	r3, [r6, #12]
 801d664:	061a      	lsls	r2, r3, #24
 801d666:	d410      	bmi.n	801d68a <__swhatbuf_r+0x3e>
 801d668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d66c:	e00e      	b.n	801d68c <__swhatbuf_r+0x40>
 801d66e:	466a      	mov	r2, sp
 801d670:	f001 fbc6 	bl	801ee00 <_fstat_r>
 801d674:	2800      	cmp	r0, #0
 801d676:	dbf2      	blt.n	801d65e <__swhatbuf_r+0x12>
 801d678:	9a01      	ldr	r2, [sp, #4]
 801d67a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801d67e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801d682:	425a      	negs	r2, r3
 801d684:	415a      	adcs	r2, r3
 801d686:	602a      	str	r2, [r5, #0]
 801d688:	e7ee      	b.n	801d668 <__swhatbuf_r+0x1c>
 801d68a:	2340      	movs	r3, #64	; 0x40
 801d68c:	2000      	movs	r0, #0
 801d68e:	6023      	str	r3, [r4, #0]
 801d690:	b016      	add	sp, #88	; 0x58
 801d692:	bd70      	pop	{r4, r5, r6, pc}

0801d694 <__smakebuf_r>:
 801d694:	898b      	ldrh	r3, [r1, #12]
 801d696:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d698:	079d      	lsls	r5, r3, #30
 801d69a:	4606      	mov	r6, r0
 801d69c:	460c      	mov	r4, r1
 801d69e:	d507      	bpl.n	801d6b0 <__smakebuf_r+0x1c>
 801d6a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d6a4:	6023      	str	r3, [r4, #0]
 801d6a6:	6123      	str	r3, [r4, #16]
 801d6a8:	2301      	movs	r3, #1
 801d6aa:	6163      	str	r3, [r4, #20]
 801d6ac:	b002      	add	sp, #8
 801d6ae:	bd70      	pop	{r4, r5, r6, pc}
 801d6b0:	ab01      	add	r3, sp, #4
 801d6b2:	466a      	mov	r2, sp
 801d6b4:	f7ff ffca 	bl	801d64c <__swhatbuf_r>
 801d6b8:	9900      	ldr	r1, [sp, #0]
 801d6ba:	4605      	mov	r5, r0
 801d6bc:	4630      	mov	r0, r6
 801d6be:	f7fc fbad 	bl	8019e1c <_malloc_r>
 801d6c2:	b948      	cbnz	r0, 801d6d8 <__smakebuf_r+0x44>
 801d6c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d6c8:	059a      	lsls	r2, r3, #22
 801d6ca:	d4ef      	bmi.n	801d6ac <__smakebuf_r+0x18>
 801d6cc:	f023 0303 	bic.w	r3, r3, #3
 801d6d0:	f043 0302 	orr.w	r3, r3, #2
 801d6d4:	81a3      	strh	r3, [r4, #12]
 801d6d6:	e7e3      	b.n	801d6a0 <__smakebuf_r+0xc>
 801d6d8:	4b0d      	ldr	r3, [pc, #52]	; (801d710 <__smakebuf_r+0x7c>)
 801d6da:	62b3      	str	r3, [r6, #40]	; 0x28
 801d6dc:	89a3      	ldrh	r3, [r4, #12]
 801d6de:	6020      	str	r0, [r4, #0]
 801d6e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d6e4:	81a3      	strh	r3, [r4, #12]
 801d6e6:	9b00      	ldr	r3, [sp, #0]
 801d6e8:	6163      	str	r3, [r4, #20]
 801d6ea:	9b01      	ldr	r3, [sp, #4]
 801d6ec:	6120      	str	r0, [r4, #16]
 801d6ee:	b15b      	cbz	r3, 801d708 <__smakebuf_r+0x74>
 801d6f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d6f4:	4630      	mov	r0, r6
 801d6f6:	f001 fb95 	bl	801ee24 <_isatty_r>
 801d6fa:	b128      	cbz	r0, 801d708 <__smakebuf_r+0x74>
 801d6fc:	89a3      	ldrh	r3, [r4, #12]
 801d6fe:	f023 0303 	bic.w	r3, r3, #3
 801d702:	f043 0301 	orr.w	r3, r3, #1
 801d706:	81a3      	strh	r3, [r4, #12]
 801d708:	89a0      	ldrh	r0, [r4, #12]
 801d70a:	4305      	orrs	r5, r0
 801d70c:	81a5      	strh	r5, [r4, #12]
 801d70e:	e7cd      	b.n	801d6ac <__smakebuf_r+0x18>
 801d710:	08019b09 	.word	0x08019b09

0801d714 <__ascii_mbtowc>:
 801d714:	b082      	sub	sp, #8
 801d716:	b901      	cbnz	r1, 801d71a <__ascii_mbtowc+0x6>
 801d718:	a901      	add	r1, sp, #4
 801d71a:	b142      	cbz	r2, 801d72e <__ascii_mbtowc+0x1a>
 801d71c:	b14b      	cbz	r3, 801d732 <__ascii_mbtowc+0x1e>
 801d71e:	7813      	ldrb	r3, [r2, #0]
 801d720:	600b      	str	r3, [r1, #0]
 801d722:	7812      	ldrb	r2, [r2, #0]
 801d724:	1e10      	subs	r0, r2, #0
 801d726:	bf18      	it	ne
 801d728:	2001      	movne	r0, #1
 801d72a:	b002      	add	sp, #8
 801d72c:	4770      	bx	lr
 801d72e:	4610      	mov	r0, r2
 801d730:	e7fb      	b.n	801d72a <__ascii_mbtowc+0x16>
 801d732:	f06f 0001 	mvn.w	r0, #1
 801d736:	e7f8      	b.n	801d72a <__ascii_mbtowc+0x16>

0801d738 <__malloc_lock>:
 801d738:	4801      	ldr	r0, [pc, #4]	; (801d740 <__malloc_lock+0x8>)
 801d73a:	f7fc badc 	b.w	8019cf6 <__retarget_lock_acquire_recursive>
 801d73e:	bf00      	nop
 801d740:	20008f90 	.word	0x20008f90

0801d744 <__malloc_unlock>:
 801d744:	4801      	ldr	r0, [pc, #4]	; (801d74c <__malloc_unlock+0x8>)
 801d746:	f7fc bad7 	b.w	8019cf8 <__retarget_lock_release_recursive>
 801d74a:	bf00      	nop
 801d74c:	20008f90 	.word	0x20008f90

0801d750 <_Balloc>:
 801d750:	b570      	push	{r4, r5, r6, lr}
 801d752:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801d754:	4604      	mov	r4, r0
 801d756:	460d      	mov	r5, r1
 801d758:	b976      	cbnz	r6, 801d778 <_Balloc+0x28>
 801d75a:	2010      	movs	r0, #16
 801d75c:	f7fc face 	bl	8019cfc <malloc>
 801d760:	4602      	mov	r2, r0
 801d762:	6260      	str	r0, [r4, #36]	; 0x24
 801d764:	b920      	cbnz	r0, 801d770 <_Balloc+0x20>
 801d766:	4b18      	ldr	r3, [pc, #96]	; (801d7c8 <_Balloc+0x78>)
 801d768:	4818      	ldr	r0, [pc, #96]	; (801d7cc <_Balloc+0x7c>)
 801d76a:	2166      	movs	r1, #102	; 0x66
 801d76c:	f7fe fc6e 	bl	801c04c <__assert_func>
 801d770:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d774:	6006      	str	r6, [r0, #0]
 801d776:	60c6      	str	r6, [r0, #12]
 801d778:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801d77a:	68f3      	ldr	r3, [r6, #12]
 801d77c:	b183      	cbz	r3, 801d7a0 <_Balloc+0x50>
 801d77e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d780:	68db      	ldr	r3, [r3, #12]
 801d782:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801d786:	b9b8      	cbnz	r0, 801d7b8 <_Balloc+0x68>
 801d788:	2101      	movs	r1, #1
 801d78a:	fa01 f605 	lsl.w	r6, r1, r5
 801d78e:	1d72      	adds	r2, r6, #5
 801d790:	0092      	lsls	r2, r2, #2
 801d792:	4620      	mov	r0, r4
 801d794:	f000 fc97 	bl	801e0c6 <_calloc_r>
 801d798:	b160      	cbz	r0, 801d7b4 <_Balloc+0x64>
 801d79a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801d79e:	e00e      	b.n	801d7be <_Balloc+0x6e>
 801d7a0:	2221      	movs	r2, #33	; 0x21
 801d7a2:	2104      	movs	r1, #4
 801d7a4:	4620      	mov	r0, r4
 801d7a6:	f000 fc8e 	bl	801e0c6 <_calloc_r>
 801d7aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d7ac:	60f0      	str	r0, [r6, #12]
 801d7ae:	68db      	ldr	r3, [r3, #12]
 801d7b0:	2b00      	cmp	r3, #0
 801d7b2:	d1e4      	bne.n	801d77e <_Balloc+0x2e>
 801d7b4:	2000      	movs	r0, #0
 801d7b6:	bd70      	pop	{r4, r5, r6, pc}
 801d7b8:	6802      	ldr	r2, [r0, #0]
 801d7ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801d7be:	2300      	movs	r3, #0
 801d7c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d7c4:	e7f7      	b.n	801d7b6 <_Balloc+0x66>
 801d7c6:	bf00      	nop
 801d7c8:	08020f49 	.word	0x08020f49
 801d7cc:	08021050 	.word	0x08021050

0801d7d0 <_Bfree>:
 801d7d0:	b570      	push	{r4, r5, r6, lr}
 801d7d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801d7d4:	4605      	mov	r5, r0
 801d7d6:	460c      	mov	r4, r1
 801d7d8:	b976      	cbnz	r6, 801d7f8 <_Bfree+0x28>
 801d7da:	2010      	movs	r0, #16
 801d7dc:	f7fc fa8e 	bl	8019cfc <malloc>
 801d7e0:	4602      	mov	r2, r0
 801d7e2:	6268      	str	r0, [r5, #36]	; 0x24
 801d7e4:	b920      	cbnz	r0, 801d7f0 <_Bfree+0x20>
 801d7e6:	4b09      	ldr	r3, [pc, #36]	; (801d80c <_Bfree+0x3c>)
 801d7e8:	4809      	ldr	r0, [pc, #36]	; (801d810 <_Bfree+0x40>)
 801d7ea:	218a      	movs	r1, #138	; 0x8a
 801d7ec:	f7fe fc2e 	bl	801c04c <__assert_func>
 801d7f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d7f4:	6006      	str	r6, [r0, #0]
 801d7f6:	60c6      	str	r6, [r0, #12]
 801d7f8:	b13c      	cbz	r4, 801d80a <_Bfree+0x3a>
 801d7fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801d7fc:	6862      	ldr	r2, [r4, #4]
 801d7fe:	68db      	ldr	r3, [r3, #12]
 801d800:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d804:	6021      	str	r1, [r4, #0]
 801d806:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801d80a:	bd70      	pop	{r4, r5, r6, pc}
 801d80c:	08020f49 	.word	0x08020f49
 801d810:	08021050 	.word	0x08021050

0801d814 <__multadd>:
 801d814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d818:	690e      	ldr	r6, [r1, #16]
 801d81a:	4607      	mov	r7, r0
 801d81c:	4698      	mov	r8, r3
 801d81e:	460c      	mov	r4, r1
 801d820:	f101 0014 	add.w	r0, r1, #20
 801d824:	2300      	movs	r3, #0
 801d826:	6805      	ldr	r5, [r0, #0]
 801d828:	b2a9      	uxth	r1, r5
 801d82a:	fb02 8101 	mla	r1, r2, r1, r8
 801d82e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801d832:	0c2d      	lsrs	r5, r5, #16
 801d834:	fb02 c505 	mla	r5, r2, r5, ip
 801d838:	b289      	uxth	r1, r1
 801d83a:	3301      	adds	r3, #1
 801d83c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801d840:	429e      	cmp	r6, r3
 801d842:	f840 1b04 	str.w	r1, [r0], #4
 801d846:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801d84a:	dcec      	bgt.n	801d826 <__multadd+0x12>
 801d84c:	f1b8 0f00 	cmp.w	r8, #0
 801d850:	d022      	beq.n	801d898 <__multadd+0x84>
 801d852:	68a3      	ldr	r3, [r4, #8]
 801d854:	42b3      	cmp	r3, r6
 801d856:	dc19      	bgt.n	801d88c <__multadd+0x78>
 801d858:	6861      	ldr	r1, [r4, #4]
 801d85a:	4638      	mov	r0, r7
 801d85c:	3101      	adds	r1, #1
 801d85e:	f7ff ff77 	bl	801d750 <_Balloc>
 801d862:	4605      	mov	r5, r0
 801d864:	b928      	cbnz	r0, 801d872 <__multadd+0x5e>
 801d866:	4602      	mov	r2, r0
 801d868:	4b0d      	ldr	r3, [pc, #52]	; (801d8a0 <__multadd+0x8c>)
 801d86a:	480e      	ldr	r0, [pc, #56]	; (801d8a4 <__multadd+0x90>)
 801d86c:	21b5      	movs	r1, #181	; 0xb5
 801d86e:	f7fe fbed 	bl	801c04c <__assert_func>
 801d872:	6922      	ldr	r2, [r4, #16]
 801d874:	3202      	adds	r2, #2
 801d876:	f104 010c 	add.w	r1, r4, #12
 801d87a:	0092      	lsls	r2, r2, #2
 801d87c:	300c      	adds	r0, #12
 801d87e:	f7fc fa4d 	bl	8019d1c <memcpy>
 801d882:	4621      	mov	r1, r4
 801d884:	4638      	mov	r0, r7
 801d886:	f7ff ffa3 	bl	801d7d0 <_Bfree>
 801d88a:	462c      	mov	r4, r5
 801d88c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801d890:	3601      	adds	r6, #1
 801d892:	f8c3 8014 	str.w	r8, [r3, #20]
 801d896:	6126      	str	r6, [r4, #16]
 801d898:	4620      	mov	r0, r4
 801d89a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d89e:	bf00      	nop
 801d8a0:	08020fbf 	.word	0x08020fbf
 801d8a4:	08021050 	.word	0x08021050

0801d8a8 <__s2b>:
 801d8a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d8ac:	460c      	mov	r4, r1
 801d8ae:	4615      	mov	r5, r2
 801d8b0:	461f      	mov	r7, r3
 801d8b2:	2209      	movs	r2, #9
 801d8b4:	3308      	adds	r3, #8
 801d8b6:	4606      	mov	r6, r0
 801d8b8:	fb93 f3f2 	sdiv	r3, r3, r2
 801d8bc:	2100      	movs	r1, #0
 801d8be:	2201      	movs	r2, #1
 801d8c0:	429a      	cmp	r2, r3
 801d8c2:	db09      	blt.n	801d8d8 <__s2b+0x30>
 801d8c4:	4630      	mov	r0, r6
 801d8c6:	f7ff ff43 	bl	801d750 <_Balloc>
 801d8ca:	b940      	cbnz	r0, 801d8de <__s2b+0x36>
 801d8cc:	4602      	mov	r2, r0
 801d8ce:	4b19      	ldr	r3, [pc, #100]	; (801d934 <__s2b+0x8c>)
 801d8d0:	4819      	ldr	r0, [pc, #100]	; (801d938 <__s2b+0x90>)
 801d8d2:	21ce      	movs	r1, #206	; 0xce
 801d8d4:	f7fe fbba 	bl	801c04c <__assert_func>
 801d8d8:	0052      	lsls	r2, r2, #1
 801d8da:	3101      	adds	r1, #1
 801d8dc:	e7f0      	b.n	801d8c0 <__s2b+0x18>
 801d8de:	9b08      	ldr	r3, [sp, #32]
 801d8e0:	6143      	str	r3, [r0, #20]
 801d8e2:	2d09      	cmp	r5, #9
 801d8e4:	f04f 0301 	mov.w	r3, #1
 801d8e8:	6103      	str	r3, [r0, #16]
 801d8ea:	dd16      	ble.n	801d91a <__s2b+0x72>
 801d8ec:	f104 0909 	add.w	r9, r4, #9
 801d8f0:	46c8      	mov	r8, r9
 801d8f2:	442c      	add	r4, r5
 801d8f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 801d8f8:	4601      	mov	r1, r0
 801d8fa:	3b30      	subs	r3, #48	; 0x30
 801d8fc:	220a      	movs	r2, #10
 801d8fe:	4630      	mov	r0, r6
 801d900:	f7ff ff88 	bl	801d814 <__multadd>
 801d904:	45a0      	cmp	r8, r4
 801d906:	d1f5      	bne.n	801d8f4 <__s2b+0x4c>
 801d908:	f1a5 0408 	sub.w	r4, r5, #8
 801d90c:	444c      	add	r4, r9
 801d90e:	1b2d      	subs	r5, r5, r4
 801d910:	1963      	adds	r3, r4, r5
 801d912:	42bb      	cmp	r3, r7
 801d914:	db04      	blt.n	801d920 <__s2b+0x78>
 801d916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d91a:	340a      	adds	r4, #10
 801d91c:	2509      	movs	r5, #9
 801d91e:	e7f6      	b.n	801d90e <__s2b+0x66>
 801d920:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d924:	4601      	mov	r1, r0
 801d926:	3b30      	subs	r3, #48	; 0x30
 801d928:	220a      	movs	r2, #10
 801d92a:	4630      	mov	r0, r6
 801d92c:	f7ff ff72 	bl	801d814 <__multadd>
 801d930:	e7ee      	b.n	801d910 <__s2b+0x68>
 801d932:	bf00      	nop
 801d934:	08020fbf 	.word	0x08020fbf
 801d938:	08021050 	.word	0x08021050

0801d93c <__hi0bits>:
 801d93c:	0c03      	lsrs	r3, r0, #16
 801d93e:	041b      	lsls	r3, r3, #16
 801d940:	b9d3      	cbnz	r3, 801d978 <__hi0bits+0x3c>
 801d942:	0400      	lsls	r0, r0, #16
 801d944:	2310      	movs	r3, #16
 801d946:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801d94a:	bf04      	itt	eq
 801d94c:	0200      	lsleq	r0, r0, #8
 801d94e:	3308      	addeq	r3, #8
 801d950:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801d954:	bf04      	itt	eq
 801d956:	0100      	lsleq	r0, r0, #4
 801d958:	3304      	addeq	r3, #4
 801d95a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801d95e:	bf04      	itt	eq
 801d960:	0080      	lsleq	r0, r0, #2
 801d962:	3302      	addeq	r3, #2
 801d964:	2800      	cmp	r0, #0
 801d966:	db05      	blt.n	801d974 <__hi0bits+0x38>
 801d968:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801d96c:	f103 0301 	add.w	r3, r3, #1
 801d970:	bf08      	it	eq
 801d972:	2320      	moveq	r3, #32
 801d974:	4618      	mov	r0, r3
 801d976:	4770      	bx	lr
 801d978:	2300      	movs	r3, #0
 801d97a:	e7e4      	b.n	801d946 <__hi0bits+0xa>

0801d97c <__lo0bits>:
 801d97c:	6803      	ldr	r3, [r0, #0]
 801d97e:	f013 0207 	ands.w	r2, r3, #7
 801d982:	4601      	mov	r1, r0
 801d984:	d00b      	beq.n	801d99e <__lo0bits+0x22>
 801d986:	07da      	lsls	r2, r3, #31
 801d988:	d424      	bmi.n	801d9d4 <__lo0bits+0x58>
 801d98a:	0798      	lsls	r0, r3, #30
 801d98c:	bf49      	itett	mi
 801d98e:	085b      	lsrmi	r3, r3, #1
 801d990:	089b      	lsrpl	r3, r3, #2
 801d992:	2001      	movmi	r0, #1
 801d994:	600b      	strmi	r3, [r1, #0]
 801d996:	bf5c      	itt	pl
 801d998:	600b      	strpl	r3, [r1, #0]
 801d99a:	2002      	movpl	r0, #2
 801d99c:	4770      	bx	lr
 801d99e:	b298      	uxth	r0, r3
 801d9a0:	b9b0      	cbnz	r0, 801d9d0 <__lo0bits+0x54>
 801d9a2:	0c1b      	lsrs	r3, r3, #16
 801d9a4:	2010      	movs	r0, #16
 801d9a6:	f013 0fff 	tst.w	r3, #255	; 0xff
 801d9aa:	bf04      	itt	eq
 801d9ac:	0a1b      	lsreq	r3, r3, #8
 801d9ae:	3008      	addeq	r0, #8
 801d9b0:	071a      	lsls	r2, r3, #28
 801d9b2:	bf04      	itt	eq
 801d9b4:	091b      	lsreq	r3, r3, #4
 801d9b6:	3004      	addeq	r0, #4
 801d9b8:	079a      	lsls	r2, r3, #30
 801d9ba:	bf04      	itt	eq
 801d9bc:	089b      	lsreq	r3, r3, #2
 801d9be:	3002      	addeq	r0, #2
 801d9c0:	07da      	lsls	r2, r3, #31
 801d9c2:	d403      	bmi.n	801d9cc <__lo0bits+0x50>
 801d9c4:	085b      	lsrs	r3, r3, #1
 801d9c6:	f100 0001 	add.w	r0, r0, #1
 801d9ca:	d005      	beq.n	801d9d8 <__lo0bits+0x5c>
 801d9cc:	600b      	str	r3, [r1, #0]
 801d9ce:	4770      	bx	lr
 801d9d0:	4610      	mov	r0, r2
 801d9d2:	e7e8      	b.n	801d9a6 <__lo0bits+0x2a>
 801d9d4:	2000      	movs	r0, #0
 801d9d6:	4770      	bx	lr
 801d9d8:	2020      	movs	r0, #32
 801d9da:	4770      	bx	lr

0801d9dc <__i2b>:
 801d9dc:	b510      	push	{r4, lr}
 801d9de:	460c      	mov	r4, r1
 801d9e0:	2101      	movs	r1, #1
 801d9e2:	f7ff feb5 	bl	801d750 <_Balloc>
 801d9e6:	4602      	mov	r2, r0
 801d9e8:	b928      	cbnz	r0, 801d9f6 <__i2b+0x1a>
 801d9ea:	4b05      	ldr	r3, [pc, #20]	; (801da00 <__i2b+0x24>)
 801d9ec:	4805      	ldr	r0, [pc, #20]	; (801da04 <__i2b+0x28>)
 801d9ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801d9f2:	f7fe fb2b 	bl	801c04c <__assert_func>
 801d9f6:	2301      	movs	r3, #1
 801d9f8:	6144      	str	r4, [r0, #20]
 801d9fa:	6103      	str	r3, [r0, #16]
 801d9fc:	bd10      	pop	{r4, pc}
 801d9fe:	bf00      	nop
 801da00:	08020fbf 	.word	0x08020fbf
 801da04:	08021050 	.word	0x08021050

0801da08 <__multiply>:
 801da08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da0c:	4614      	mov	r4, r2
 801da0e:	690a      	ldr	r2, [r1, #16]
 801da10:	6923      	ldr	r3, [r4, #16]
 801da12:	429a      	cmp	r2, r3
 801da14:	bfb8      	it	lt
 801da16:	460b      	movlt	r3, r1
 801da18:	460d      	mov	r5, r1
 801da1a:	bfbc      	itt	lt
 801da1c:	4625      	movlt	r5, r4
 801da1e:	461c      	movlt	r4, r3
 801da20:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801da24:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801da28:	68ab      	ldr	r3, [r5, #8]
 801da2a:	6869      	ldr	r1, [r5, #4]
 801da2c:	eb0a 0709 	add.w	r7, sl, r9
 801da30:	42bb      	cmp	r3, r7
 801da32:	b085      	sub	sp, #20
 801da34:	bfb8      	it	lt
 801da36:	3101      	addlt	r1, #1
 801da38:	f7ff fe8a 	bl	801d750 <_Balloc>
 801da3c:	b930      	cbnz	r0, 801da4c <__multiply+0x44>
 801da3e:	4602      	mov	r2, r0
 801da40:	4b42      	ldr	r3, [pc, #264]	; (801db4c <__multiply+0x144>)
 801da42:	4843      	ldr	r0, [pc, #268]	; (801db50 <__multiply+0x148>)
 801da44:	f240 115d 	movw	r1, #349	; 0x15d
 801da48:	f7fe fb00 	bl	801c04c <__assert_func>
 801da4c:	f100 0614 	add.w	r6, r0, #20
 801da50:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801da54:	4633      	mov	r3, r6
 801da56:	2200      	movs	r2, #0
 801da58:	4543      	cmp	r3, r8
 801da5a:	d31e      	bcc.n	801da9a <__multiply+0x92>
 801da5c:	f105 0c14 	add.w	ip, r5, #20
 801da60:	f104 0314 	add.w	r3, r4, #20
 801da64:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801da68:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801da6c:	9202      	str	r2, [sp, #8]
 801da6e:	ebac 0205 	sub.w	r2, ip, r5
 801da72:	3a15      	subs	r2, #21
 801da74:	f022 0203 	bic.w	r2, r2, #3
 801da78:	3204      	adds	r2, #4
 801da7a:	f105 0115 	add.w	r1, r5, #21
 801da7e:	458c      	cmp	ip, r1
 801da80:	bf38      	it	cc
 801da82:	2204      	movcc	r2, #4
 801da84:	9201      	str	r2, [sp, #4]
 801da86:	9a02      	ldr	r2, [sp, #8]
 801da88:	9303      	str	r3, [sp, #12]
 801da8a:	429a      	cmp	r2, r3
 801da8c:	d808      	bhi.n	801daa0 <__multiply+0x98>
 801da8e:	2f00      	cmp	r7, #0
 801da90:	dc55      	bgt.n	801db3e <__multiply+0x136>
 801da92:	6107      	str	r7, [r0, #16]
 801da94:	b005      	add	sp, #20
 801da96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da9a:	f843 2b04 	str.w	r2, [r3], #4
 801da9e:	e7db      	b.n	801da58 <__multiply+0x50>
 801daa0:	f8b3 a000 	ldrh.w	sl, [r3]
 801daa4:	f1ba 0f00 	cmp.w	sl, #0
 801daa8:	d020      	beq.n	801daec <__multiply+0xe4>
 801daaa:	f105 0e14 	add.w	lr, r5, #20
 801daae:	46b1      	mov	r9, r6
 801dab0:	2200      	movs	r2, #0
 801dab2:	f85e 4b04 	ldr.w	r4, [lr], #4
 801dab6:	f8d9 b000 	ldr.w	fp, [r9]
 801daba:	b2a1      	uxth	r1, r4
 801dabc:	fa1f fb8b 	uxth.w	fp, fp
 801dac0:	fb0a b101 	mla	r1, sl, r1, fp
 801dac4:	4411      	add	r1, r2
 801dac6:	f8d9 2000 	ldr.w	r2, [r9]
 801daca:	0c24      	lsrs	r4, r4, #16
 801dacc:	0c12      	lsrs	r2, r2, #16
 801dace:	fb0a 2404 	mla	r4, sl, r4, r2
 801dad2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801dad6:	b289      	uxth	r1, r1
 801dad8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801dadc:	45f4      	cmp	ip, lr
 801dade:	f849 1b04 	str.w	r1, [r9], #4
 801dae2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801dae6:	d8e4      	bhi.n	801dab2 <__multiply+0xaa>
 801dae8:	9901      	ldr	r1, [sp, #4]
 801daea:	5072      	str	r2, [r6, r1]
 801daec:	9a03      	ldr	r2, [sp, #12]
 801daee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801daf2:	3304      	adds	r3, #4
 801daf4:	f1b9 0f00 	cmp.w	r9, #0
 801daf8:	d01f      	beq.n	801db3a <__multiply+0x132>
 801dafa:	6834      	ldr	r4, [r6, #0]
 801dafc:	f105 0114 	add.w	r1, r5, #20
 801db00:	46b6      	mov	lr, r6
 801db02:	f04f 0a00 	mov.w	sl, #0
 801db06:	880a      	ldrh	r2, [r1, #0]
 801db08:	f8be b002 	ldrh.w	fp, [lr, #2]
 801db0c:	fb09 b202 	mla	r2, r9, r2, fp
 801db10:	4492      	add	sl, r2
 801db12:	b2a4      	uxth	r4, r4
 801db14:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801db18:	f84e 4b04 	str.w	r4, [lr], #4
 801db1c:	f851 4b04 	ldr.w	r4, [r1], #4
 801db20:	f8be 2000 	ldrh.w	r2, [lr]
 801db24:	0c24      	lsrs	r4, r4, #16
 801db26:	fb09 2404 	mla	r4, r9, r4, r2
 801db2a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801db2e:	458c      	cmp	ip, r1
 801db30:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801db34:	d8e7      	bhi.n	801db06 <__multiply+0xfe>
 801db36:	9a01      	ldr	r2, [sp, #4]
 801db38:	50b4      	str	r4, [r6, r2]
 801db3a:	3604      	adds	r6, #4
 801db3c:	e7a3      	b.n	801da86 <__multiply+0x7e>
 801db3e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801db42:	2b00      	cmp	r3, #0
 801db44:	d1a5      	bne.n	801da92 <__multiply+0x8a>
 801db46:	3f01      	subs	r7, #1
 801db48:	e7a1      	b.n	801da8e <__multiply+0x86>
 801db4a:	bf00      	nop
 801db4c:	08020fbf 	.word	0x08020fbf
 801db50:	08021050 	.word	0x08021050

0801db54 <__pow5mult>:
 801db54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801db58:	4615      	mov	r5, r2
 801db5a:	f012 0203 	ands.w	r2, r2, #3
 801db5e:	4606      	mov	r6, r0
 801db60:	460f      	mov	r7, r1
 801db62:	d007      	beq.n	801db74 <__pow5mult+0x20>
 801db64:	4c25      	ldr	r4, [pc, #148]	; (801dbfc <__pow5mult+0xa8>)
 801db66:	3a01      	subs	r2, #1
 801db68:	2300      	movs	r3, #0
 801db6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801db6e:	f7ff fe51 	bl	801d814 <__multadd>
 801db72:	4607      	mov	r7, r0
 801db74:	10ad      	asrs	r5, r5, #2
 801db76:	d03d      	beq.n	801dbf4 <__pow5mult+0xa0>
 801db78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801db7a:	b97c      	cbnz	r4, 801db9c <__pow5mult+0x48>
 801db7c:	2010      	movs	r0, #16
 801db7e:	f7fc f8bd 	bl	8019cfc <malloc>
 801db82:	4602      	mov	r2, r0
 801db84:	6270      	str	r0, [r6, #36]	; 0x24
 801db86:	b928      	cbnz	r0, 801db94 <__pow5mult+0x40>
 801db88:	4b1d      	ldr	r3, [pc, #116]	; (801dc00 <__pow5mult+0xac>)
 801db8a:	481e      	ldr	r0, [pc, #120]	; (801dc04 <__pow5mult+0xb0>)
 801db8c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801db90:	f7fe fa5c 	bl	801c04c <__assert_func>
 801db94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801db98:	6004      	str	r4, [r0, #0]
 801db9a:	60c4      	str	r4, [r0, #12]
 801db9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801dba0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801dba4:	b94c      	cbnz	r4, 801dbba <__pow5mult+0x66>
 801dba6:	f240 2171 	movw	r1, #625	; 0x271
 801dbaa:	4630      	mov	r0, r6
 801dbac:	f7ff ff16 	bl	801d9dc <__i2b>
 801dbb0:	2300      	movs	r3, #0
 801dbb2:	f8c8 0008 	str.w	r0, [r8, #8]
 801dbb6:	4604      	mov	r4, r0
 801dbb8:	6003      	str	r3, [r0, #0]
 801dbba:	f04f 0900 	mov.w	r9, #0
 801dbbe:	07eb      	lsls	r3, r5, #31
 801dbc0:	d50a      	bpl.n	801dbd8 <__pow5mult+0x84>
 801dbc2:	4639      	mov	r1, r7
 801dbc4:	4622      	mov	r2, r4
 801dbc6:	4630      	mov	r0, r6
 801dbc8:	f7ff ff1e 	bl	801da08 <__multiply>
 801dbcc:	4639      	mov	r1, r7
 801dbce:	4680      	mov	r8, r0
 801dbd0:	4630      	mov	r0, r6
 801dbd2:	f7ff fdfd 	bl	801d7d0 <_Bfree>
 801dbd6:	4647      	mov	r7, r8
 801dbd8:	106d      	asrs	r5, r5, #1
 801dbda:	d00b      	beq.n	801dbf4 <__pow5mult+0xa0>
 801dbdc:	6820      	ldr	r0, [r4, #0]
 801dbde:	b938      	cbnz	r0, 801dbf0 <__pow5mult+0x9c>
 801dbe0:	4622      	mov	r2, r4
 801dbe2:	4621      	mov	r1, r4
 801dbe4:	4630      	mov	r0, r6
 801dbe6:	f7ff ff0f 	bl	801da08 <__multiply>
 801dbea:	6020      	str	r0, [r4, #0]
 801dbec:	f8c0 9000 	str.w	r9, [r0]
 801dbf0:	4604      	mov	r4, r0
 801dbf2:	e7e4      	b.n	801dbbe <__pow5mult+0x6a>
 801dbf4:	4638      	mov	r0, r7
 801dbf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dbfa:	bf00      	nop
 801dbfc:	080211a0 	.word	0x080211a0
 801dc00:	08020f49 	.word	0x08020f49
 801dc04:	08021050 	.word	0x08021050

0801dc08 <__lshift>:
 801dc08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dc0c:	460c      	mov	r4, r1
 801dc0e:	6849      	ldr	r1, [r1, #4]
 801dc10:	6923      	ldr	r3, [r4, #16]
 801dc12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801dc16:	68a3      	ldr	r3, [r4, #8]
 801dc18:	4607      	mov	r7, r0
 801dc1a:	4691      	mov	r9, r2
 801dc1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801dc20:	f108 0601 	add.w	r6, r8, #1
 801dc24:	42b3      	cmp	r3, r6
 801dc26:	db0b      	blt.n	801dc40 <__lshift+0x38>
 801dc28:	4638      	mov	r0, r7
 801dc2a:	f7ff fd91 	bl	801d750 <_Balloc>
 801dc2e:	4605      	mov	r5, r0
 801dc30:	b948      	cbnz	r0, 801dc46 <__lshift+0x3e>
 801dc32:	4602      	mov	r2, r0
 801dc34:	4b28      	ldr	r3, [pc, #160]	; (801dcd8 <__lshift+0xd0>)
 801dc36:	4829      	ldr	r0, [pc, #164]	; (801dcdc <__lshift+0xd4>)
 801dc38:	f240 11d9 	movw	r1, #473	; 0x1d9
 801dc3c:	f7fe fa06 	bl	801c04c <__assert_func>
 801dc40:	3101      	adds	r1, #1
 801dc42:	005b      	lsls	r3, r3, #1
 801dc44:	e7ee      	b.n	801dc24 <__lshift+0x1c>
 801dc46:	2300      	movs	r3, #0
 801dc48:	f100 0114 	add.w	r1, r0, #20
 801dc4c:	f100 0210 	add.w	r2, r0, #16
 801dc50:	4618      	mov	r0, r3
 801dc52:	4553      	cmp	r3, sl
 801dc54:	db33      	blt.n	801dcbe <__lshift+0xb6>
 801dc56:	6920      	ldr	r0, [r4, #16]
 801dc58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801dc5c:	f104 0314 	add.w	r3, r4, #20
 801dc60:	f019 091f 	ands.w	r9, r9, #31
 801dc64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801dc68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801dc6c:	d02b      	beq.n	801dcc6 <__lshift+0xbe>
 801dc6e:	f1c9 0e20 	rsb	lr, r9, #32
 801dc72:	468a      	mov	sl, r1
 801dc74:	2200      	movs	r2, #0
 801dc76:	6818      	ldr	r0, [r3, #0]
 801dc78:	fa00 f009 	lsl.w	r0, r0, r9
 801dc7c:	4302      	orrs	r2, r0
 801dc7e:	f84a 2b04 	str.w	r2, [sl], #4
 801dc82:	f853 2b04 	ldr.w	r2, [r3], #4
 801dc86:	459c      	cmp	ip, r3
 801dc88:	fa22 f20e 	lsr.w	r2, r2, lr
 801dc8c:	d8f3      	bhi.n	801dc76 <__lshift+0x6e>
 801dc8e:	ebac 0304 	sub.w	r3, ip, r4
 801dc92:	3b15      	subs	r3, #21
 801dc94:	f023 0303 	bic.w	r3, r3, #3
 801dc98:	3304      	adds	r3, #4
 801dc9a:	f104 0015 	add.w	r0, r4, #21
 801dc9e:	4584      	cmp	ip, r0
 801dca0:	bf38      	it	cc
 801dca2:	2304      	movcc	r3, #4
 801dca4:	50ca      	str	r2, [r1, r3]
 801dca6:	b10a      	cbz	r2, 801dcac <__lshift+0xa4>
 801dca8:	f108 0602 	add.w	r6, r8, #2
 801dcac:	3e01      	subs	r6, #1
 801dcae:	4638      	mov	r0, r7
 801dcb0:	612e      	str	r6, [r5, #16]
 801dcb2:	4621      	mov	r1, r4
 801dcb4:	f7ff fd8c 	bl	801d7d0 <_Bfree>
 801dcb8:	4628      	mov	r0, r5
 801dcba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dcbe:	f842 0f04 	str.w	r0, [r2, #4]!
 801dcc2:	3301      	adds	r3, #1
 801dcc4:	e7c5      	b.n	801dc52 <__lshift+0x4a>
 801dcc6:	3904      	subs	r1, #4
 801dcc8:	f853 2b04 	ldr.w	r2, [r3], #4
 801dccc:	f841 2f04 	str.w	r2, [r1, #4]!
 801dcd0:	459c      	cmp	ip, r3
 801dcd2:	d8f9      	bhi.n	801dcc8 <__lshift+0xc0>
 801dcd4:	e7ea      	b.n	801dcac <__lshift+0xa4>
 801dcd6:	bf00      	nop
 801dcd8:	08020fbf 	.word	0x08020fbf
 801dcdc:	08021050 	.word	0x08021050

0801dce0 <__mcmp>:
 801dce0:	b530      	push	{r4, r5, lr}
 801dce2:	6902      	ldr	r2, [r0, #16]
 801dce4:	690c      	ldr	r4, [r1, #16]
 801dce6:	1b12      	subs	r2, r2, r4
 801dce8:	d10e      	bne.n	801dd08 <__mcmp+0x28>
 801dcea:	f100 0314 	add.w	r3, r0, #20
 801dcee:	3114      	adds	r1, #20
 801dcf0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801dcf4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801dcf8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801dcfc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801dd00:	42a5      	cmp	r5, r4
 801dd02:	d003      	beq.n	801dd0c <__mcmp+0x2c>
 801dd04:	d305      	bcc.n	801dd12 <__mcmp+0x32>
 801dd06:	2201      	movs	r2, #1
 801dd08:	4610      	mov	r0, r2
 801dd0a:	bd30      	pop	{r4, r5, pc}
 801dd0c:	4283      	cmp	r3, r0
 801dd0e:	d3f3      	bcc.n	801dcf8 <__mcmp+0x18>
 801dd10:	e7fa      	b.n	801dd08 <__mcmp+0x28>
 801dd12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801dd16:	e7f7      	b.n	801dd08 <__mcmp+0x28>

0801dd18 <__mdiff>:
 801dd18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd1c:	460c      	mov	r4, r1
 801dd1e:	4606      	mov	r6, r0
 801dd20:	4611      	mov	r1, r2
 801dd22:	4620      	mov	r0, r4
 801dd24:	4617      	mov	r7, r2
 801dd26:	f7ff ffdb 	bl	801dce0 <__mcmp>
 801dd2a:	1e05      	subs	r5, r0, #0
 801dd2c:	d110      	bne.n	801dd50 <__mdiff+0x38>
 801dd2e:	4629      	mov	r1, r5
 801dd30:	4630      	mov	r0, r6
 801dd32:	f7ff fd0d 	bl	801d750 <_Balloc>
 801dd36:	b930      	cbnz	r0, 801dd46 <__mdiff+0x2e>
 801dd38:	4b39      	ldr	r3, [pc, #228]	; (801de20 <__mdiff+0x108>)
 801dd3a:	4602      	mov	r2, r0
 801dd3c:	f240 2132 	movw	r1, #562	; 0x232
 801dd40:	4838      	ldr	r0, [pc, #224]	; (801de24 <__mdiff+0x10c>)
 801dd42:	f7fe f983 	bl	801c04c <__assert_func>
 801dd46:	2301      	movs	r3, #1
 801dd48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801dd4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd50:	bfa4      	itt	ge
 801dd52:	463b      	movge	r3, r7
 801dd54:	4627      	movge	r7, r4
 801dd56:	4630      	mov	r0, r6
 801dd58:	6879      	ldr	r1, [r7, #4]
 801dd5a:	bfa6      	itte	ge
 801dd5c:	461c      	movge	r4, r3
 801dd5e:	2500      	movge	r5, #0
 801dd60:	2501      	movlt	r5, #1
 801dd62:	f7ff fcf5 	bl	801d750 <_Balloc>
 801dd66:	b920      	cbnz	r0, 801dd72 <__mdiff+0x5a>
 801dd68:	4b2d      	ldr	r3, [pc, #180]	; (801de20 <__mdiff+0x108>)
 801dd6a:	4602      	mov	r2, r0
 801dd6c:	f44f 7110 	mov.w	r1, #576	; 0x240
 801dd70:	e7e6      	b.n	801dd40 <__mdiff+0x28>
 801dd72:	693e      	ldr	r6, [r7, #16]
 801dd74:	60c5      	str	r5, [r0, #12]
 801dd76:	6925      	ldr	r5, [r4, #16]
 801dd78:	f107 0114 	add.w	r1, r7, #20
 801dd7c:	f104 0914 	add.w	r9, r4, #20
 801dd80:	f100 0e14 	add.w	lr, r0, #20
 801dd84:	f107 0210 	add.w	r2, r7, #16
 801dd88:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801dd8c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801dd90:	46f2      	mov	sl, lr
 801dd92:	2700      	movs	r7, #0
 801dd94:	f859 3b04 	ldr.w	r3, [r9], #4
 801dd98:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801dd9c:	fa1f f883 	uxth.w	r8, r3
 801dda0:	fa17 f78b 	uxtah	r7, r7, fp
 801dda4:	0c1b      	lsrs	r3, r3, #16
 801dda6:	eba7 0808 	sub.w	r8, r7, r8
 801ddaa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801ddae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801ddb2:	fa1f f888 	uxth.w	r8, r8
 801ddb6:	141f      	asrs	r7, r3, #16
 801ddb8:	454d      	cmp	r5, r9
 801ddba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801ddbe:	f84a 3b04 	str.w	r3, [sl], #4
 801ddc2:	d8e7      	bhi.n	801dd94 <__mdiff+0x7c>
 801ddc4:	1b2b      	subs	r3, r5, r4
 801ddc6:	3b15      	subs	r3, #21
 801ddc8:	f023 0303 	bic.w	r3, r3, #3
 801ddcc:	3304      	adds	r3, #4
 801ddce:	3415      	adds	r4, #21
 801ddd0:	42a5      	cmp	r5, r4
 801ddd2:	bf38      	it	cc
 801ddd4:	2304      	movcc	r3, #4
 801ddd6:	4419      	add	r1, r3
 801ddd8:	4473      	add	r3, lr
 801ddda:	469e      	mov	lr, r3
 801dddc:	460d      	mov	r5, r1
 801ddde:	4565      	cmp	r5, ip
 801dde0:	d30e      	bcc.n	801de00 <__mdiff+0xe8>
 801dde2:	f10c 0203 	add.w	r2, ip, #3
 801dde6:	1a52      	subs	r2, r2, r1
 801dde8:	f022 0203 	bic.w	r2, r2, #3
 801ddec:	3903      	subs	r1, #3
 801ddee:	458c      	cmp	ip, r1
 801ddf0:	bf38      	it	cc
 801ddf2:	2200      	movcc	r2, #0
 801ddf4:	441a      	add	r2, r3
 801ddf6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801ddfa:	b17b      	cbz	r3, 801de1c <__mdiff+0x104>
 801ddfc:	6106      	str	r6, [r0, #16]
 801ddfe:	e7a5      	b.n	801dd4c <__mdiff+0x34>
 801de00:	f855 8b04 	ldr.w	r8, [r5], #4
 801de04:	fa17 f488 	uxtah	r4, r7, r8
 801de08:	1422      	asrs	r2, r4, #16
 801de0a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801de0e:	b2a4      	uxth	r4, r4
 801de10:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801de14:	f84e 4b04 	str.w	r4, [lr], #4
 801de18:	1417      	asrs	r7, r2, #16
 801de1a:	e7e0      	b.n	801ddde <__mdiff+0xc6>
 801de1c:	3e01      	subs	r6, #1
 801de1e:	e7ea      	b.n	801ddf6 <__mdiff+0xde>
 801de20:	08020fbf 	.word	0x08020fbf
 801de24:	08021050 	.word	0x08021050

0801de28 <__ulp>:
 801de28:	b082      	sub	sp, #8
 801de2a:	ed8d 0b00 	vstr	d0, [sp]
 801de2e:	9b01      	ldr	r3, [sp, #4]
 801de30:	4912      	ldr	r1, [pc, #72]	; (801de7c <__ulp+0x54>)
 801de32:	4019      	ands	r1, r3
 801de34:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801de38:	2900      	cmp	r1, #0
 801de3a:	dd05      	ble.n	801de48 <__ulp+0x20>
 801de3c:	2200      	movs	r2, #0
 801de3e:	460b      	mov	r3, r1
 801de40:	ec43 2b10 	vmov	d0, r2, r3
 801de44:	b002      	add	sp, #8
 801de46:	4770      	bx	lr
 801de48:	4249      	negs	r1, r1
 801de4a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801de4e:	ea4f 5021 	mov.w	r0, r1, asr #20
 801de52:	f04f 0200 	mov.w	r2, #0
 801de56:	f04f 0300 	mov.w	r3, #0
 801de5a:	da04      	bge.n	801de66 <__ulp+0x3e>
 801de5c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801de60:	fa41 f300 	asr.w	r3, r1, r0
 801de64:	e7ec      	b.n	801de40 <__ulp+0x18>
 801de66:	f1a0 0114 	sub.w	r1, r0, #20
 801de6a:	291e      	cmp	r1, #30
 801de6c:	bfda      	itte	le
 801de6e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801de72:	fa20 f101 	lsrle.w	r1, r0, r1
 801de76:	2101      	movgt	r1, #1
 801de78:	460a      	mov	r2, r1
 801de7a:	e7e1      	b.n	801de40 <__ulp+0x18>
 801de7c:	7ff00000 	.word	0x7ff00000

0801de80 <__b2d>:
 801de80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de82:	6905      	ldr	r5, [r0, #16]
 801de84:	f100 0714 	add.w	r7, r0, #20
 801de88:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801de8c:	1f2e      	subs	r6, r5, #4
 801de8e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801de92:	4620      	mov	r0, r4
 801de94:	f7ff fd52 	bl	801d93c <__hi0bits>
 801de98:	f1c0 0320 	rsb	r3, r0, #32
 801de9c:	280a      	cmp	r0, #10
 801de9e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801df1c <__b2d+0x9c>
 801dea2:	600b      	str	r3, [r1, #0]
 801dea4:	dc14      	bgt.n	801ded0 <__b2d+0x50>
 801dea6:	f1c0 0e0b 	rsb	lr, r0, #11
 801deaa:	fa24 f10e 	lsr.w	r1, r4, lr
 801deae:	42b7      	cmp	r7, r6
 801deb0:	ea41 030c 	orr.w	r3, r1, ip
 801deb4:	bf34      	ite	cc
 801deb6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801deba:	2100      	movcs	r1, #0
 801debc:	3015      	adds	r0, #21
 801debe:	fa04 f000 	lsl.w	r0, r4, r0
 801dec2:	fa21 f10e 	lsr.w	r1, r1, lr
 801dec6:	ea40 0201 	orr.w	r2, r0, r1
 801deca:	ec43 2b10 	vmov	d0, r2, r3
 801dece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ded0:	42b7      	cmp	r7, r6
 801ded2:	bf3a      	itte	cc
 801ded4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801ded8:	f1a5 0608 	subcc.w	r6, r5, #8
 801dedc:	2100      	movcs	r1, #0
 801dede:	380b      	subs	r0, #11
 801dee0:	d017      	beq.n	801df12 <__b2d+0x92>
 801dee2:	f1c0 0c20 	rsb	ip, r0, #32
 801dee6:	fa04 f500 	lsl.w	r5, r4, r0
 801deea:	42be      	cmp	r6, r7
 801deec:	fa21 f40c 	lsr.w	r4, r1, ip
 801def0:	ea45 0504 	orr.w	r5, r5, r4
 801def4:	bf8c      	ite	hi
 801def6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801defa:	2400      	movls	r4, #0
 801defc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801df00:	fa01 f000 	lsl.w	r0, r1, r0
 801df04:	fa24 f40c 	lsr.w	r4, r4, ip
 801df08:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801df0c:	ea40 0204 	orr.w	r2, r0, r4
 801df10:	e7db      	b.n	801deca <__b2d+0x4a>
 801df12:	ea44 030c 	orr.w	r3, r4, ip
 801df16:	460a      	mov	r2, r1
 801df18:	e7d7      	b.n	801deca <__b2d+0x4a>
 801df1a:	bf00      	nop
 801df1c:	3ff00000 	.word	0x3ff00000

0801df20 <__d2b>:
 801df20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801df24:	4689      	mov	r9, r1
 801df26:	2101      	movs	r1, #1
 801df28:	ec57 6b10 	vmov	r6, r7, d0
 801df2c:	4690      	mov	r8, r2
 801df2e:	f7ff fc0f 	bl	801d750 <_Balloc>
 801df32:	4604      	mov	r4, r0
 801df34:	b930      	cbnz	r0, 801df44 <__d2b+0x24>
 801df36:	4602      	mov	r2, r0
 801df38:	4b25      	ldr	r3, [pc, #148]	; (801dfd0 <__d2b+0xb0>)
 801df3a:	4826      	ldr	r0, [pc, #152]	; (801dfd4 <__d2b+0xb4>)
 801df3c:	f240 310a 	movw	r1, #778	; 0x30a
 801df40:	f7fe f884 	bl	801c04c <__assert_func>
 801df44:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801df48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801df4c:	bb35      	cbnz	r5, 801df9c <__d2b+0x7c>
 801df4e:	2e00      	cmp	r6, #0
 801df50:	9301      	str	r3, [sp, #4]
 801df52:	d028      	beq.n	801dfa6 <__d2b+0x86>
 801df54:	4668      	mov	r0, sp
 801df56:	9600      	str	r6, [sp, #0]
 801df58:	f7ff fd10 	bl	801d97c <__lo0bits>
 801df5c:	9900      	ldr	r1, [sp, #0]
 801df5e:	b300      	cbz	r0, 801dfa2 <__d2b+0x82>
 801df60:	9a01      	ldr	r2, [sp, #4]
 801df62:	f1c0 0320 	rsb	r3, r0, #32
 801df66:	fa02 f303 	lsl.w	r3, r2, r3
 801df6a:	430b      	orrs	r3, r1
 801df6c:	40c2      	lsrs	r2, r0
 801df6e:	6163      	str	r3, [r4, #20]
 801df70:	9201      	str	r2, [sp, #4]
 801df72:	9b01      	ldr	r3, [sp, #4]
 801df74:	61a3      	str	r3, [r4, #24]
 801df76:	2b00      	cmp	r3, #0
 801df78:	bf14      	ite	ne
 801df7a:	2202      	movne	r2, #2
 801df7c:	2201      	moveq	r2, #1
 801df7e:	6122      	str	r2, [r4, #16]
 801df80:	b1d5      	cbz	r5, 801dfb8 <__d2b+0x98>
 801df82:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801df86:	4405      	add	r5, r0
 801df88:	f8c9 5000 	str.w	r5, [r9]
 801df8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801df90:	f8c8 0000 	str.w	r0, [r8]
 801df94:	4620      	mov	r0, r4
 801df96:	b003      	add	sp, #12
 801df98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801df9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801dfa0:	e7d5      	b.n	801df4e <__d2b+0x2e>
 801dfa2:	6161      	str	r1, [r4, #20]
 801dfa4:	e7e5      	b.n	801df72 <__d2b+0x52>
 801dfa6:	a801      	add	r0, sp, #4
 801dfa8:	f7ff fce8 	bl	801d97c <__lo0bits>
 801dfac:	9b01      	ldr	r3, [sp, #4]
 801dfae:	6163      	str	r3, [r4, #20]
 801dfb0:	2201      	movs	r2, #1
 801dfb2:	6122      	str	r2, [r4, #16]
 801dfb4:	3020      	adds	r0, #32
 801dfb6:	e7e3      	b.n	801df80 <__d2b+0x60>
 801dfb8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801dfbc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801dfc0:	f8c9 0000 	str.w	r0, [r9]
 801dfc4:	6918      	ldr	r0, [r3, #16]
 801dfc6:	f7ff fcb9 	bl	801d93c <__hi0bits>
 801dfca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801dfce:	e7df      	b.n	801df90 <__d2b+0x70>
 801dfd0:	08020fbf 	.word	0x08020fbf
 801dfd4:	08021050 	.word	0x08021050

0801dfd8 <__ratio>:
 801dfd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfdc:	4688      	mov	r8, r1
 801dfde:	4669      	mov	r1, sp
 801dfe0:	4681      	mov	r9, r0
 801dfe2:	f7ff ff4d 	bl	801de80 <__b2d>
 801dfe6:	a901      	add	r1, sp, #4
 801dfe8:	4640      	mov	r0, r8
 801dfea:	ec55 4b10 	vmov	r4, r5, d0
 801dfee:	f7ff ff47 	bl	801de80 <__b2d>
 801dff2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801dff6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801dffa:	eba3 0c02 	sub.w	ip, r3, r2
 801dffe:	e9dd 3200 	ldrd	r3, r2, [sp]
 801e002:	1a9b      	subs	r3, r3, r2
 801e004:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801e008:	ec51 0b10 	vmov	r0, r1, d0
 801e00c:	2b00      	cmp	r3, #0
 801e00e:	bfd6      	itet	le
 801e010:	460a      	movle	r2, r1
 801e012:	462a      	movgt	r2, r5
 801e014:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801e018:	468b      	mov	fp, r1
 801e01a:	462f      	mov	r7, r5
 801e01c:	bfd4      	ite	le
 801e01e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801e022:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801e026:	4620      	mov	r0, r4
 801e028:	ee10 2a10 	vmov	r2, s0
 801e02c:	465b      	mov	r3, fp
 801e02e:	4639      	mov	r1, r7
 801e030:	f7e2 fc1c 	bl	800086c <__aeabi_ddiv>
 801e034:	ec41 0b10 	vmov	d0, r0, r1
 801e038:	b003      	add	sp, #12
 801e03a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e03e <__copybits>:
 801e03e:	3901      	subs	r1, #1
 801e040:	b570      	push	{r4, r5, r6, lr}
 801e042:	1149      	asrs	r1, r1, #5
 801e044:	6914      	ldr	r4, [r2, #16]
 801e046:	3101      	adds	r1, #1
 801e048:	f102 0314 	add.w	r3, r2, #20
 801e04c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801e050:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801e054:	1f05      	subs	r5, r0, #4
 801e056:	42a3      	cmp	r3, r4
 801e058:	d30c      	bcc.n	801e074 <__copybits+0x36>
 801e05a:	1aa3      	subs	r3, r4, r2
 801e05c:	3b11      	subs	r3, #17
 801e05e:	f023 0303 	bic.w	r3, r3, #3
 801e062:	3211      	adds	r2, #17
 801e064:	42a2      	cmp	r2, r4
 801e066:	bf88      	it	hi
 801e068:	2300      	movhi	r3, #0
 801e06a:	4418      	add	r0, r3
 801e06c:	2300      	movs	r3, #0
 801e06e:	4288      	cmp	r0, r1
 801e070:	d305      	bcc.n	801e07e <__copybits+0x40>
 801e072:	bd70      	pop	{r4, r5, r6, pc}
 801e074:	f853 6b04 	ldr.w	r6, [r3], #4
 801e078:	f845 6f04 	str.w	r6, [r5, #4]!
 801e07c:	e7eb      	b.n	801e056 <__copybits+0x18>
 801e07e:	f840 3b04 	str.w	r3, [r0], #4
 801e082:	e7f4      	b.n	801e06e <__copybits+0x30>

0801e084 <__any_on>:
 801e084:	f100 0214 	add.w	r2, r0, #20
 801e088:	6900      	ldr	r0, [r0, #16]
 801e08a:	114b      	asrs	r3, r1, #5
 801e08c:	4298      	cmp	r0, r3
 801e08e:	b510      	push	{r4, lr}
 801e090:	db11      	blt.n	801e0b6 <__any_on+0x32>
 801e092:	dd0a      	ble.n	801e0aa <__any_on+0x26>
 801e094:	f011 011f 	ands.w	r1, r1, #31
 801e098:	d007      	beq.n	801e0aa <__any_on+0x26>
 801e09a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801e09e:	fa24 f001 	lsr.w	r0, r4, r1
 801e0a2:	fa00 f101 	lsl.w	r1, r0, r1
 801e0a6:	428c      	cmp	r4, r1
 801e0a8:	d10b      	bne.n	801e0c2 <__any_on+0x3e>
 801e0aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e0ae:	4293      	cmp	r3, r2
 801e0b0:	d803      	bhi.n	801e0ba <__any_on+0x36>
 801e0b2:	2000      	movs	r0, #0
 801e0b4:	bd10      	pop	{r4, pc}
 801e0b6:	4603      	mov	r3, r0
 801e0b8:	e7f7      	b.n	801e0aa <__any_on+0x26>
 801e0ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e0be:	2900      	cmp	r1, #0
 801e0c0:	d0f5      	beq.n	801e0ae <__any_on+0x2a>
 801e0c2:	2001      	movs	r0, #1
 801e0c4:	e7f6      	b.n	801e0b4 <__any_on+0x30>

0801e0c6 <_calloc_r>:
 801e0c6:	b513      	push	{r0, r1, r4, lr}
 801e0c8:	434a      	muls	r2, r1
 801e0ca:	4611      	mov	r1, r2
 801e0cc:	9201      	str	r2, [sp, #4]
 801e0ce:	f7fb fea5 	bl	8019e1c <_malloc_r>
 801e0d2:	4604      	mov	r4, r0
 801e0d4:	b118      	cbz	r0, 801e0de <_calloc_r+0x18>
 801e0d6:	9a01      	ldr	r2, [sp, #4]
 801e0d8:	2100      	movs	r1, #0
 801e0da:	f7fb fe47 	bl	8019d6c <memset>
 801e0de:	4620      	mov	r0, r4
 801e0e0:	b002      	add	sp, #8
 801e0e2:	bd10      	pop	{r4, pc}

0801e0e4 <_realloc_r>:
 801e0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e0e6:	4607      	mov	r7, r0
 801e0e8:	4614      	mov	r4, r2
 801e0ea:	460e      	mov	r6, r1
 801e0ec:	b921      	cbnz	r1, 801e0f8 <_realloc_r+0x14>
 801e0ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801e0f2:	4611      	mov	r1, r2
 801e0f4:	f7fb be92 	b.w	8019e1c <_malloc_r>
 801e0f8:	b922      	cbnz	r2, 801e104 <_realloc_r+0x20>
 801e0fa:	f7fb fe3f 	bl	8019d7c <_free_r>
 801e0fe:	4625      	mov	r5, r4
 801e100:	4628      	mov	r0, r5
 801e102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e104:	f000 fe9e 	bl	801ee44 <_malloc_usable_size_r>
 801e108:	42a0      	cmp	r0, r4
 801e10a:	d20f      	bcs.n	801e12c <_realloc_r+0x48>
 801e10c:	4621      	mov	r1, r4
 801e10e:	4638      	mov	r0, r7
 801e110:	f7fb fe84 	bl	8019e1c <_malloc_r>
 801e114:	4605      	mov	r5, r0
 801e116:	2800      	cmp	r0, #0
 801e118:	d0f2      	beq.n	801e100 <_realloc_r+0x1c>
 801e11a:	4631      	mov	r1, r6
 801e11c:	4622      	mov	r2, r4
 801e11e:	f7fb fdfd 	bl	8019d1c <memcpy>
 801e122:	4631      	mov	r1, r6
 801e124:	4638      	mov	r0, r7
 801e126:	f7fb fe29 	bl	8019d7c <_free_r>
 801e12a:	e7e9      	b.n	801e100 <_realloc_r+0x1c>
 801e12c:	4635      	mov	r5, r6
 801e12e:	e7e7      	b.n	801e100 <_realloc_r+0x1c>

0801e130 <__ssputs_r>:
 801e130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e134:	688e      	ldr	r6, [r1, #8]
 801e136:	429e      	cmp	r6, r3
 801e138:	4682      	mov	sl, r0
 801e13a:	460c      	mov	r4, r1
 801e13c:	4690      	mov	r8, r2
 801e13e:	461f      	mov	r7, r3
 801e140:	d838      	bhi.n	801e1b4 <__ssputs_r+0x84>
 801e142:	898a      	ldrh	r2, [r1, #12]
 801e144:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801e148:	d032      	beq.n	801e1b0 <__ssputs_r+0x80>
 801e14a:	6825      	ldr	r5, [r4, #0]
 801e14c:	6909      	ldr	r1, [r1, #16]
 801e14e:	eba5 0901 	sub.w	r9, r5, r1
 801e152:	6965      	ldr	r5, [r4, #20]
 801e154:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e158:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e15c:	3301      	adds	r3, #1
 801e15e:	444b      	add	r3, r9
 801e160:	106d      	asrs	r5, r5, #1
 801e162:	429d      	cmp	r5, r3
 801e164:	bf38      	it	cc
 801e166:	461d      	movcc	r5, r3
 801e168:	0553      	lsls	r3, r2, #21
 801e16a:	d531      	bpl.n	801e1d0 <__ssputs_r+0xa0>
 801e16c:	4629      	mov	r1, r5
 801e16e:	f7fb fe55 	bl	8019e1c <_malloc_r>
 801e172:	4606      	mov	r6, r0
 801e174:	b950      	cbnz	r0, 801e18c <__ssputs_r+0x5c>
 801e176:	230c      	movs	r3, #12
 801e178:	f8ca 3000 	str.w	r3, [sl]
 801e17c:	89a3      	ldrh	r3, [r4, #12]
 801e17e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e182:	81a3      	strh	r3, [r4, #12]
 801e184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e18c:	6921      	ldr	r1, [r4, #16]
 801e18e:	464a      	mov	r2, r9
 801e190:	f7fb fdc4 	bl	8019d1c <memcpy>
 801e194:	89a3      	ldrh	r3, [r4, #12]
 801e196:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801e19a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e19e:	81a3      	strh	r3, [r4, #12]
 801e1a0:	6126      	str	r6, [r4, #16]
 801e1a2:	6165      	str	r5, [r4, #20]
 801e1a4:	444e      	add	r6, r9
 801e1a6:	eba5 0509 	sub.w	r5, r5, r9
 801e1aa:	6026      	str	r6, [r4, #0]
 801e1ac:	60a5      	str	r5, [r4, #8]
 801e1ae:	463e      	mov	r6, r7
 801e1b0:	42be      	cmp	r6, r7
 801e1b2:	d900      	bls.n	801e1b6 <__ssputs_r+0x86>
 801e1b4:	463e      	mov	r6, r7
 801e1b6:	4632      	mov	r2, r6
 801e1b8:	6820      	ldr	r0, [r4, #0]
 801e1ba:	4641      	mov	r1, r8
 801e1bc:	f7fb fdbc 	bl	8019d38 <memmove>
 801e1c0:	68a3      	ldr	r3, [r4, #8]
 801e1c2:	6822      	ldr	r2, [r4, #0]
 801e1c4:	1b9b      	subs	r3, r3, r6
 801e1c6:	4432      	add	r2, r6
 801e1c8:	60a3      	str	r3, [r4, #8]
 801e1ca:	6022      	str	r2, [r4, #0]
 801e1cc:	2000      	movs	r0, #0
 801e1ce:	e7db      	b.n	801e188 <__ssputs_r+0x58>
 801e1d0:	462a      	mov	r2, r5
 801e1d2:	f7ff ff87 	bl	801e0e4 <_realloc_r>
 801e1d6:	4606      	mov	r6, r0
 801e1d8:	2800      	cmp	r0, #0
 801e1da:	d1e1      	bne.n	801e1a0 <__ssputs_r+0x70>
 801e1dc:	6921      	ldr	r1, [r4, #16]
 801e1de:	4650      	mov	r0, sl
 801e1e0:	f7fb fdcc 	bl	8019d7c <_free_r>
 801e1e4:	e7c7      	b.n	801e176 <__ssputs_r+0x46>
	...

0801e1e8 <_svfiprintf_r>:
 801e1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1ec:	4698      	mov	r8, r3
 801e1ee:	898b      	ldrh	r3, [r1, #12]
 801e1f0:	061b      	lsls	r3, r3, #24
 801e1f2:	b09d      	sub	sp, #116	; 0x74
 801e1f4:	4607      	mov	r7, r0
 801e1f6:	460d      	mov	r5, r1
 801e1f8:	4614      	mov	r4, r2
 801e1fa:	d50e      	bpl.n	801e21a <_svfiprintf_r+0x32>
 801e1fc:	690b      	ldr	r3, [r1, #16]
 801e1fe:	b963      	cbnz	r3, 801e21a <_svfiprintf_r+0x32>
 801e200:	2140      	movs	r1, #64	; 0x40
 801e202:	f7fb fe0b 	bl	8019e1c <_malloc_r>
 801e206:	6028      	str	r0, [r5, #0]
 801e208:	6128      	str	r0, [r5, #16]
 801e20a:	b920      	cbnz	r0, 801e216 <_svfiprintf_r+0x2e>
 801e20c:	230c      	movs	r3, #12
 801e20e:	603b      	str	r3, [r7, #0]
 801e210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e214:	e0d1      	b.n	801e3ba <_svfiprintf_r+0x1d2>
 801e216:	2340      	movs	r3, #64	; 0x40
 801e218:	616b      	str	r3, [r5, #20]
 801e21a:	2300      	movs	r3, #0
 801e21c:	9309      	str	r3, [sp, #36]	; 0x24
 801e21e:	2320      	movs	r3, #32
 801e220:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e224:	f8cd 800c 	str.w	r8, [sp, #12]
 801e228:	2330      	movs	r3, #48	; 0x30
 801e22a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801e3d4 <_svfiprintf_r+0x1ec>
 801e22e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e232:	f04f 0901 	mov.w	r9, #1
 801e236:	4623      	mov	r3, r4
 801e238:	469a      	mov	sl, r3
 801e23a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e23e:	b10a      	cbz	r2, 801e244 <_svfiprintf_r+0x5c>
 801e240:	2a25      	cmp	r2, #37	; 0x25
 801e242:	d1f9      	bne.n	801e238 <_svfiprintf_r+0x50>
 801e244:	ebba 0b04 	subs.w	fp, sl, r4
 801e248:	d00b      	beq.n	801e262 <_svfiprintf_r+0x7a>
 801e24a:	465b      	mov	r3, fp
 801e24c:	4622      	mov	r2, r4
 801e24e:	4629      	mov	r1, r5
 801e250:	4638      	mov	r0, r7
 801e252:	f7ff ff6d 	bl	801e130 <__ssputs_r>
 801e256:	3001      	adds	r0, #1
 801e258:	f000 80aa 	beq.w	801e3b0 <_svfiprintf_r+0x1c8>
 801e25c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e25e:	445a      	add	r2, fp
 801e260:	9209      	str	r2, [sp, #36]	; 0x24
 801e262:	f89a 3000 	ldrb.w	r3, [sl]
 801e266:	2b00      	cmp	r3, #0
 801e268:	f000 80a2 	beq.w	801e3b0 <_svfiprintf_r+0x1c8>
 801e26c:	2300      	movs	r3, #0
 801e26e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e272:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e276:	f10a 0a01 	add.w	sl, sl, #1
 801e27a:	9304      	str	r3, [sp, #16]
 801e27c:	9307      	str	r3, [sp, #28]
 801e27e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e282:	931a      	str	r3, [sp, #104]	; 0x68
 801e284:	4654      	mov	r4, sl
 801e286:	2205      	movs	r2, #5
 801e288:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e28c:	4851      	ldr	r0, [pc, #324]	; (801e3d4 <_svfiprintf_r+0x1ec>)
 801e28e:	f7e1 ffb7 	bl	8000200 <memchr>
 801e292:	9a04      	ldr	r2, [sp, #16]
 801e294:	b9d8      	cbnz	r0, 801e2ce <_svfiprintf_r+0xe6>
 801e296:	06d0      	lsls	r0, r2, #27
 801e298:	bf44      	itt	mi
 801e29a:	2320      	movmi	r3, #32
 801e29c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e2a0:	0711      	lsls	r1, r2, #28
 801e2a2:	bf44      	itt	mi
 801e2a4:	232b      	movmi	r3, #43	; 0x2b
 801e2a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e2aa:	f89a 3000 	ldrb.w	r3, [sl]
 801e2ae:	2b2a      	cmp	r3, #42	; 0x2a
 801e2b0:	d015      	beq.n	801e2de <_svfiprintf_r+0xf6>
 801e2b2:	9a07      	ldr	r2, [sp, #28]
 801e2b4:	4654      	mov	r4, sl
 801e2b6:	2000      	movs	r0, #0
 801e2b8:	f04f 0c0a 	mov.w	ip, #10
 801e2bc:	4621      	mov	r1, r4
 801e2be:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e2c2:	3b30      	subs	r3, #48	; 0x30
 801e2c4:	2b09      	cmp	r3, #9
 801e2c6:	d94e      	bls.n	801e366 <_svfiprintf_r+0x17e>
 801e2c8:	b1b0      	cbz	r0, 801e2f8 <_svfiprintf_r+0x110>
 801e2ca:	9207      	str	r2, [sp, #28]
 801e2cc:	e014      	b.n	801e2f8 <_svfiprintf_r+0x110>
 801e2ce:	eba0 0308 	sub.w	r3, r0, r8
 801e2d2:	fa09 f303 	lsl.w	r3, r9, r3
 801e2d6:	4313      	orrs	r3, r2
 801e2d8:	9304      	str	r3, [sp, #16]
 801e2da:	46a2      	mov	sl, r4
 801e2dc:	e7d2      	b.n	801e284 <_svfiprintf_r+0x9c>
 801e2de:	9b03      	ldr	r3, [sp, #12]
 801e2e0:	1d19      	adds	r1, r3, #4
 801e2e2:	681b      	ldr	r3, [r3, #0]
 801e2e4:	9103      	str	r1, [sp, #12]
 801e2e6:	2b00      	cmp	r3, #0
 801e2e8:	bfbb      	ittet	lt
 801e2ea:	425b      	neglt	r3, r3
 801e2ec:	f042 0202 	orrlt.w	r2, r2, #2
 801e2f0:	9307      	strge	r3, [sp, #28]
 801e2f2:	9307      	strlt	r3, [sp, #28]
 801e2f4:	bfb8      	it	lt
 801e2f6:	9204      	strlt	r2, [sp, #16]
 801e2f8:	7823      	ldrb	r3, [r4, #0]
 801e2fa:	2b2e      	cmp	r3, #46	; 0x2e
 801e2fc:	d10c      	bne.n	801e318 <_svfiprintf_r+0x130>
 801e2fe:	7863      	ldrb	r3, [r4, #1]
 801e300:	2b2a      	cmp	r3, #42	; 0x2a
 801e302:	d135      	bne.n	801e370 <_svfiprintf_r+0x188>
 801e304:	9b03      	ldr	r3, [sp, #12]
 801e306:	1d1a      	adds	r2, r3, #4
 801e308:	681b      	ldr	r3, [r3, #0]
 801e30a:	9203      	str	r2, [sp, #12]
 801e30c:	2b00      	cmp	r3, #0
 801e30e:	bfb8      	it	lt
 801e310:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801e314:	3402      	adds	r4, #2
 801e316:	9305      	str	r3, [sp, #20]
 801e318:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801e3e4 <_svfiprintf_r+0x1fc>
 801e31c:	7821      	ldrb	r1, [r4, #0]
 801e31e:	2203      	movs	r2, #3
 801e320:	4650      	mov	r0, sl
 801e322:	f7e1 ff6d 	bl	8000200 <memchr>
 801e326:	b140      	cbz	r0, 801e33a <_svfiprintf_r+0x152>
 801e328:	2340      	movs	r3, #64	; 0x40
 801e32a:	eba0 000a 	sub.w	r0, r0, sl
 801e32e:	fa03 f000 	lsl.w	r0, r3, r0
 801e332:	9b04      	ldr	r3, [sp, #16]
 801e334:	4303      	orrs	r3, r0
 801e336:	3401      	adds	r4, #1
 801e338:	9304      	str	r3, [sp, #16]
 801e33a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e33e:	4826      	ldr	r0, [pc, #152]	; (801e3d8 <_svfiprintf_r+0x1f0>)
 801e340:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e344:	2206      	movs	r2, #6
 801e346:	f7e1 ff5b 	bl	8000200 <memchr>
 801e34a:	2800      	cmp	r0, #0
 801e34c:	d038      	beq.n	801e3c0 <_svfiprintf_r+0x1d8>
 801e34e:	4b23      	ldr	r3, [pc, #140]	; (801e3dc <_svfiprintf_r+0x1f4>)
 801e350:	bb1b      	cbnz	r3, 801e39a <_svfiprintf_r+0x1b2>
 801e352:	9b03      	ldr	r3, [sp, #12]
 801e354:	3307      	adds	r3, #7
 801e356:	f023 0307 	bic.w	r3, r3, #7
 801e35a:	3308      	adds	r3, #8
 801e35c:	9303      	str	r3, [sp, #12]
 801e35e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e360:	4433      	add	r3, r6
 801e362:	9309      	str	r3, [sp, #36]	; 0x24
 801e364:	e767      	b.n	801e236 <_svfiprintf_r+0x4e>
 801e366:	fb0c 3202 	mla	r2, ip, r2, r3
 801e36a:	460c      	mov	r4, r1
 801e36c:	2001      	movs	r0, #1
 801e36e:	e7a5      	b.n	801e2bc <_svfiprintf_r+0xd4>
 801e370:	2300      	movs	r3, #0
 801e372:	3401      	adds	r4, #1
 801e374:	9305      	str	r3, [sp, #20]
 801e376:	4619      	mov	r1, r3
 801e378:	f04f 0c0a 	mov.w	ip, #10
 801e37c:	4620      	mov	r0, r4
 801e37e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e382:	3a30      	subs	r2, #48	; 0x30
 801e384:	2a09      	cmp	r2, #9
 801e386:	d903      	bls.n	801e390 <_svfiprintf_r+0x1a8>
 801e388:	2b00      	cmp	r3, #0
 801e38a:	d0c5      	beq.n	801e318 <_svfiprintf_r+0x130>
 801e38c:	9105      	str	r1, [sp, #20]
 801e38e:	e7c3      	b.n	801e318 <_svfiprintf_r+0x130>
 801e390:	fb0c 2101 	mla	r1, ip, r1, r2
 801e394:	4604      	mov	r4, r0
 801e396:	2301      	movs	r3, #1
 801e398:	e7f0      	b.n	801e37c <_svfiprintf_r+0x194>
 801e39a:	ab03      	add	r3, sp, #12
 801e39c:	9300      	str	r3, [sp, #0]
 801e39e:	462a      	mov	r2, r5
 801e3a0:	4b0f      	ldr	r3, [pc, #60]	; (801e3e0 <_svfiprintf_r+0x1f8>)
 801e3a2:	a904      	add	r1, sp, #16
 801e3a4:	4638      	mov	r0, r7
 801e3a6:	f7fb fe33 	bl	801a010 <_printf_float>
 801e3aa:	1c42      	adds	r2, r0, #1
 801e3ac:	4606      	mov	r6, r0
 801e3ae:	d1d6      	bne.n	801e35e <_svfiprintf_r+0x176>
 801e3b0:	89ab      	ldrh	r3, [r5, #12]
 801e3b2:	065b      	lsls	r3, r3, #25
 801e3b4:	f53f af2c 	bmi.w	801e210 <_svfiprintf_r+0x28>
 801e3b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e3ba:	b01d      	add	sp, #116	; 0x74
 801e3bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3c0:	ab03      	add	r3, sp, #12
 801e3c2:	9300      	str	r3, [sp, #0]
 801e3c4:	462a      	mov	r2, r5
 801e3c6:	4b06      	ldr	r3, [pc, #24]	; (801e3e0 <_svfiprintf_r+0x1f8>)
 801e3c8:	a904      	add	r1, sp, #16
 801e3ca:	4638      	mov	r0, r7
 801e3cc:	f7fc f8c4 	bl	801a558 <_printf_i>
 801e3d0:	e7eb      	b.n	801e3aa <_svfiprintf_r+0x1c2>
 801e3d2:	bf00      	nop
 801e3d4:	080211ac 	.word	0x080211ac
 801e3d8:	080211b6 	.word	0x080211b6
 801e3dc:	0801a011 	.word	0x0801a011
 801e3e0:	0801e131 	.word	0x0801e131
 801e3e4:	080211b2 	.word	0x080211b2

0801e3e8 <_sungetc_r>:
 801e3e8:	b538      	push	{r3, r4, r5, lr}
 801e3ea:	1c4b      	adds	r3, r1, #1
 801e3ec:	4614      	mov	r4, r2
 801e3ee:	d103      	bne.n	801e3f8 <_sungetc_r+0x10>
 801e3f0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801e3f4:	4628      	mov	r0, r5
 801e3f6:	bd38      	pop	{r3, r4, r5, pc}
 801e3f8:	8993      	ldrh	r3, [r2, #12]
 801e3fa:	f023 0320 	bic.w	r3, r3, #32
 801e3fe:	8193      	strh	r3, [r2, #12]
 801e400:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e402:	6852      	ldr	r2, [r2, #4]
 801e404:	b2cd      	uxtb	r5, r1
 801e406:	b18b      	cbz	r3, 801e42c <_sungetc_r+0x44>
 801e408:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e40a:	4293      	cmp	r3, r2
 801e40c:	dd08      	ble.n	801e420 <_sungetc_r+0x38>
 801e40e:	6823      	ldr	r3, [r4, #0]
 801e410:	1e5a      	subs	r2, r3, #1
 801e412:	6022      	str	r2, [r4, #0]
 801e414:	f803 5c01 	strb.w	r5, [r3, #-1]
 801e418:	6863      	ldr	r3, [r4, #4]
 801e41a:	3301      	adds	r3, #1
 801e41c:	6063      	str	r3, [r4, #4]
 801e41e:	e7e9      	b.n	801e3f4 <_sungetc_r+0xc>
 801e420:	4621      	mov	r1, r4
 801e422:	f000 fca5 	bl	801ed70 <__submore>
 801e426:	2800      	cmp	r0, #0
 801e428:	d0f1      	beq.n	801e40e <_sungetc_r+0x26>
 801e42a:	e7e1      	b.n	801e3f0 <_sungetc_r+0x8>
 801e42c:	6921      	ldr	r1, [r4, #16]
 801e42e:	6823      	ldr	r3, [r4, #0]
 801e430:	b151      	cbz	r1, 801e448 <_sungetc_r+0x60>
 801e432:	4299      	cmp	r1, r3
 801e434:	d208      	bcs.n	801e448 <_sungetc_r+0x60>
 801e436:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801e43a:	42a9      	cmp	r1, r5
 801e43c:	d104      	bne.n	801e448 <_sungetc_r+0x60>
 801e43e:	3b01      	subs	r3, #1
 801e440:	3201      	adds	r2, #1
 801e442:	6023      	str	r3, [r4, #0]
 801e444:	6062      	str	r2, [r4, #4]
 801e446:	e7d5      	b.n	801e3f4 <_sungetc_r+0xc>
 801e448:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801e44c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e450:	6363      	str	r3, [r4, #52]	; 0x34
 801e452:	2303      	movs	r3, #3
 801e454:	63a3      	str	r3, [r4, #56]	; 0x38
 801e456:	4623      	mov	r3, r4
 801e458:	f803 5f46 	strb.w	r5, [r3, #70]!
 801e45c:	6023      	str	r3, [r4, #0]
 801e45e:	2301      	movs	r3, #1
 801e460:	e7dc      	b.n	801e41c <_sungetc_r+0x34>

0801e462 <__ssrefill_r>:
 801e462:	b510      	push	{r4, lr}
 801e464:	460c      	mov	r4, r1
 801e466:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801e468:	b169      	cbz	r1, 801e486 <__ssrefill_r+0x24>
 801e46a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e46e:	4299      	cmp	r1, r3
 801e470:	d001      	beq.n	801e476 <__ssrefill_r+0x14>
 801e472:	f7fb fc83 	bl	8019d7c <_free_r>
 801e476:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e478:	6063      	str	r3, [r4, #4]
 801e47a:	2000      	movs	r0, #0
 801e47c:	6360      	str	r0, [r4, #52]	; 0x34
 801e47e:	b113      	cbz	r3, 801e486 <__ssrefill_r+0x24>
 801e480:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801e482:	6023      	str	r3, [r4, #0]
 801e484:	bd10      	pop	{r4, pc}
 801e486:	6923      	ldr	r3, [r4, #16]
 801e488:	6023      	str	r3, [r4, #0]
 801e48a:	2300      	movs	r3, #0
 801e48c:	6063      	str	r3, [r4, #4]
 801e48e:	89a3      	ldrh	r3, [r4, #12]
 801e490:	f043 0320 	orr.w	r3, r3, #32
 801e494:	81a3      	strh	r3, [r4, #12]
 801e496:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e49a:	e7f3      	b.n	801e484 <__ssrefill_r+0x22>

0801e49c <__ssvfiscanf_r>:
 801e49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4a0:	460c      	mov	r4, r1
 801e4a2:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801e4a6:	2100      	movs	r1, #0
 801e4a8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801e4ac:	49b2      	ldr	r1, [pc, #712]	; (801e778 <__ssvfiscanf_r+0x2dc>)
 801e4ae:	91a0      	str	r1, [sp, #640]	; 0x280
 801e4b0:	f10d 0804 	add.w	r8, sp, #4
 801e4b4:	49b1      	ldr	r1, [pc, #708]	; (801e77c <__ssvfiscanf_r+0x2e0>)
 801e4b6:	4fb2      	ldr	r7, [pc, #712]	; (801e780 <__ssvfiscanf_r+0x2e4>)
 801e4b8:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801e784 <__ssvfiscanf_r+0x2e8>
 801e4bc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801e4c0:	4606      	mov	r6, r0
 801e4c2:	91a1      	str	r1, [sp, #644]	; 0x284
 801e4c4:	9300      	str	r3, [sp, #0]
 801e4c6:	f892 a000 	ldrb.w	sl, [r2]
 801e4ca:	f1ba 0f00 	cmp.w	sl, #0
 801e4ce:	f000 8151 	beq.w	801e774 <__ssvfiscanf_r+0x2d8>
 801e4d2:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801e4d6:	f013 0308 	ands.w	r3, r3, #8
 801e4da:	f102 0501 	add.w	r5, r2, #1
 801e4de:	d019      	beq.n	801e514 <__ssvfiscanf_r+0x78>
 801e4e0:	6863      	ldr	r3, [r4, #4]
 801e4e2:	2b00      	cmp	r3, #0
 801e4e4:	dd0f      	ble.n	801e506 <__ssvfiscanf_r+0x6a>
 801e4e6:	6823      	ldr	r3, [r4, #0]
 801e4e8:	781a      	ldrb	r2, [r3, #0]
 801e4ea:	5cba      	ldrb	r2, [r7, r2]
 801e4ec:	0712      	lsls	r2, r2, #28
 801e4ee:	d401      	bmi.n	801e4f4 <__ssvfiscanf_r+0x58>
 801e4f0:	462a      	mov	r2, r5
 801e4f2:	e7e8      	b.n	801e4c6 <__ssvfiscanf_r+0x2a>
 801e4f4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801e4f6:	3201      	adds	r2, #1
 801e4f8:	9245      	str	r2, [sp, #276]	; 0x114
 801e4fa:	6862      	ldr	r2, [r4, #4]
 801e4fc:	3301      	adds	r3, #1
 801e4fe:	3a01      	subs	r2, #1
 801e500:	6062      	str	r2, [r4, #4]
 801e502:	6023      	str	r3, [r4, #0]
 801e504:	e7ec      	b.n	801e4e0 <__ssvfiscanf_r+0x44>
 801e506:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e508:	4621      	mov	r1, r4
 801e50a:	4630      	mov	r0, r6
 801e50c:	4798      	blx	r3
 801e50e:	2800      	cmp	r0, #0
 801e510:	d0e9      	beq.n	801e4e6 <__ssvfiscanf_r+0x4a>
 801e512:	e7ed      	b.n	801e4f0 <__ssvfiscanf_r+0x54>
 801e514:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 801e518:	f040 8083 	bne.w	801e622 <__ssvfiscanf_r+0x186>
 801e51c:	9341      	str	r3, [sp, #260]	; 0x104
 801e51e:	9343      	str	r3, [sp, #268]	; 0x10c
 801e520:	7853      	ldrb	r3, [r2, #1]
 801e522:	2b2a      	cmp	r3, #42	; 0x2a
 801e524:	bf02      	ittt	eq
 801e526:	2310      	moveq	r3, #16
 801e528:	1c95      	addeq	r5, r2, #2
 801e52a:	9341      	streq	r3, [sp, #260]	; 0x104
 801e52c:	220a      	movs	r2, #10
 801e52e:	46ab      	mov	fp, r5
 801e530:	f81b 1b01 	ldrb.w	r1, [fp], #1
 801e534:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801e538:	2b09      	cmp	r3, #9
 801e53a:	d91d      	bls.n	801e578 <__ssvfiscanf_r+0xdc>
 801e53c:	4891      	ldr	r0, [pc, #580]	; (801e784 <__ssvfiscanf_r+0x2e8>)
 801e53e:	2203      	movs	r2, #3
 801e540:	f7e1 fe5e 	bl	8000200 <memchr>
 801e544:	b140      	cbz	r0, 801e558 <__ssvfiscanf_r+0xbc>
 801e546:	2301      	movs	r3, #1
 801e548:	eba0 0009 	sub.w	r0, r0, r9
 801e54c:	fa03 f000 	lsl.w	r0, r3, r0
 801e550:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e552:	4318      	orrs	r0, r3
 801e554:	9041      	str	r0, [sp, #260]	; 0x104
 801e556:	465d      	mov	r5, fp
 801e558:	f815 3b01 	ldrb.w	r3, [r5], #1
 801e55c:	2b78      	cmp	r3, #120	; 0x78
 801e55e:	d806      	bhi.n	801e56e <__ssvfiscanf_r+0xd2>
 801e560:	2b57      	cmp	r3, #87	; 0x57
 801e562:	d810      	bhi.n	801e586 <__ssvfiscanf_r+0xea>
 801e564:	2b25      	cmp	r3, #37	; 0x25
 801e566:	d05c      	beq.n	801e622 <__ssvfiscanf_r+0x186>
 801e568:	d856      	bhi.n	801e618 <__ssvfiscanf_r+0x17c>
 801e56a:	2b00      	cmp	r3, #0
 801e56c:	d074      	beq.n	801e658 <__ssvfiscanf_r+0x1bc>
 801e56e:	2303      	movs	r3, #3
 801e570:	9347      	str	r3, [sp, #284]	; 0x11c
 801e572:	230a      	movs	r3, #10
 801e574:	9342      	str	r3, [sp, #264]	; 0x108
 801e576:	e081      	b.n	801e67c <__ssvfiscanf_r+0x1e0>
 801e578:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801e57a:	fb02 1303 	mla	r3, r2, r3, r1
 801e57e:	3b30      	subs	r3, #48	; 0x30
 801e580:	9343      	str	r3, [sp, #268]	; 0x10c
 801e582:	465d      	mov	r5, fp
 801e584:	e7d3      	b.n	801e52e <__ssvfiscanf_r+0x92>
 801e586:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801e58a:	2a20      	cmp	r2, #32
 801e58c:	d8ef      	bhi.n	801e56e <__ssvfiscanf_r+0xd2>
 801e58e:	a101      	add	r1, pc, #4	; (adr r1, 801e594 <__ssvfiscanf_r+0xf8>)
 801e590:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801e594:	0801e667 	.word	0x0801e667
 801e598:	0801e56f 	.word	0x0801e56f
 801e59c:	0801e56f 	.word	0x0801e56f
 801e5a0:	0801e6c5 	.word	0x0801e6c5
 801e5a4:	0801e56f 	.word	0x0801e56f
 801e5a8:	0801e56f 	.word	0x0801e56f
 801e5ac:	0801e56f 	.word	0x0801e56f
 801e5b0:	0801e56f 	.word	0x0801e56f
 801e5b4:	0801e56f 	.word	0x0801e56f
 801e5b8:	0801e56f 	.word	0x0801e56f
 801e5bc:	0801e56f 	.word	0x0801e56f
 801e5c0:	0801e6db 	.word	0x0801e6db
 801e5c4:	0801e6b1 	.word	0x0801e6b1
 801e5c8:	0801e61f 	.word	0x0801e61f
 801e5cc:	0801e61f 	.word	0x0801e61f
 801e5d0:	0801e61f 	.word	0x0801e61f
 801e5d4:	0801e56f 	.word	0x0801e56f
 801e5d8:	0801e6b5 	.word	0x0801e6b5
 801e5dc:	0801e56f 	.word	0x0801e56f
 801e5e0:	0801e56f 	.word	0x0801e56f
 801e5e4:	0801e56f 	.word	0x0801e56f
 801e5e8:	0801e56f 	.word	0x0801e56f
 801e5ec:	0801e6eb 	.word	0x0801e6eb
 801e5f0:	0801e6bd 	.word	0x0801e6bd
 801e5f4:	0801e65f 	.word	0x0801e65f
 801e5f8:	0801e56f 	.word	0x0801e56f
 801e5fc:	0801e56f 	.word	0x0801e56f
 801e600:	0801e6e7 	.word	0x0801e6e7
 801e604:	0801e56f 	.word	0x0801e56f
 801e608:	0801e6b1 	.word	0x0801e6b1
 801e60c:	0801e56f 	.word	0x0801e56f
 801e610:	0801e56f 	.word	0x0801e56f
 801e614:	0801e667 	.word	0x0801e667
 801e618:	3b45      	subs	r3, #69	; 0x45
 801e61a:	2b02      	cmp	r3, #2
 801e61c:	d8a7      	bhi.n	801e56e <__ssvfiscanf_r+0xd2>
 801e61e:	2305      	movs	r3, #5
 801e620:	e02b      	b.n	801e67a <__ssvfiscanf_r+0x1de>
 801e622:	6863      	ldr	r3, [r4, #4]
 801e624:	2b00      	cmp	r3, #0
 801e626:	dd0d      	ble.n	801e644 <__ssvfiscanf_r+0x1a8>
 801e628:	6823      	ldr	r3, [r4, #0]
 801e62a:	781a      	ldrb	r2, [r3, #0]
 801e62c:	4552      	cmp	r2, sl
 801e62e:	f040 80a1 	bne.w	801e774 <__ssvfiscanf_r+0x2d8>
 801e632:	3301      	adds	r3, #1
 801e634:	6862      	ldr	r2, [r4, #4]
 801e636:	6023      	str	r3, [r4, #0]
 801e638:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801e63a:	3a01      	subs	r2, #1
 801e63c:	3301      	adds	r3, #1
 801e63e:	6062      	str	r2, [r4, #4]
 801e640:	9345      	str	r3, [sp, #276]	; 0x114
 801e642:	e755      	b.n	801e4f0 <__ssvfiscanf_r+0x54>
 801e644:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e646:	4621      	mov	r1, r4
 801e648:	4630      	mov	r0, r6
 801e64a:	4798      	blx	r3
 801e64c:	2800      	cmp	r0, #0
 801e64e:	d0eb      	beq.n	801e628 <__ssvfiscanf_r+0x18c>
 801e650:	9844      	ldr	r0, [sp, #272]	; 0x110
 801e652:	2800      	cmp	r0, #0
 801e654:	f040 8084 	bne.w	801e760 <__ssvfiscanf_r+0x2c4>
 801e658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e65c:	e086      	b.n	801e76c <__ssvfiscanf_r+0x2d0>
 801e65e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801e660:	f042 0220 	orr.w	r2, r2, #32
 801e664:	9241      	str	r2, [sp, #260]	; 0x104
 801e666:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801e668:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e66c:	9241      	str	r2, [sp, #260]	; 0x104
 801e66e:	2210      	movs	r2, #16
 801e670:	2b6f      	cmp	r3, #111	; 0x6f
 801e672:	9242      	str	r2, [sp, #264]	; 0x108
 801e674:	bf34      	ite	cc
 801e676:	2303      	movcc	r3, #3
 801e678:	2304      	movcs	r3, #4
 801e67a:	9347      	str	r3, [sp, #284]	; 0x11c
 801e67c:	6863      	ldr	r3, [r4, #4]
 801e67e:	2b00      	cmp	r3, #0
 801e680:	dd41      	ble.n	801e706 <__ssvfiscanf_r+0x26a>
 801e682:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e684:	0659      	lsls	r1, r3, #25
 801e686:	d404      	bmi.n	801e692 <__ssvfiscanf_r+0x1f6>
 801e688:	6823      	ldr	r3, [r4, #0]
 801e68a:	781a      	ldrb	r2, [r3, #0]
 801e68c:	5cba      	ldrb	r2, [r7, r2]
 801e68e:	0712      	lsls	r2, r2, #28
 801e690:	d440      	bmi.n	801e714 <__ssvfiscanf_r+0x278>
 801e692:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801e694:	2b02      	cmp	r3, #2
 801e696:	dc4f      	bgt.n	801e738 <__ssvfiscanf_r+0x29c>
 801e698:	466b      	mov	r3, sp
 801e69a:	4622      	mov	r2, r4
 801e69c:	a941      	add	r1, sp, #260	; 0x104
 801e69e:	4630      	mov	r0, r6
 801e6a0:	f000 f9ce 	bl	801ea40 <_scanf_chars>
 801e6a4:	2801      	cmp	r0, #1
 801e6a6:	d065      	beq.n	801e774 <__ssvfiscanf_r+0x2d8>
 801e6a8:	2802      	cmp	r0, #2
 801e6aa:	f47f af21 	bne.w	801e4f0 <__ssvfiscanf_r+0x54>
 801e6ae:	e7cf      	b.n	801e650 <__ssvfiscanf_r+0x1b4>
 801e6b0:	220a      	movs	r2, #10
 801e6b2:	e7dd      	b.n	801e670 <__ssvfiscanf_r+0x1d4>
 801e6b4:	2300      	movs	r3, #0
 801e6b6:	9342      	str	r3, [sp, #264]	; 0x108
 801e6b8:	2303      	movs	r3, #3
 801e6ba:	e7de      	b.n	801e67a <__ssvfiscanf_r+0x1de>
 801e6bc:	2308      	movs	r3, #8
 801e6be:	9342      	str	r3, [sp, #264]	; 0x108
 801e6c0:	2304      	movs	r3, #4
 801e6c2:	e7da      	b.n	801e67a <__ssvfiscanf_r+0x1de>
 801e6c4:	4629      	mov	r1, r5
 801e6c6:	4640      	mov	r0, r8
 801e6c8:	f000 fb18 	bl	801ecfc <__sccl>
 801e6cc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e6ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e6d2:	9341      	str	r3, [sp, #260]	; 0x104
 801e6d4:	4605      	mov	r5, r0
 801e6d6:	2301      	movs	r3, #1
 801e6d8:	e7cf      	b.n	801e67a <__ssvfiscanf_r+0x1de>
 801e6da:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e6dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e6e0:	9341      	str	r3, [sp, #260]	; 0x104
 801e6e2:	2300      	movs	r3, #0
 801e6e4:	e7c9      	b.n	801e67a <__ssvfiscanf_r+0x1de>
 801e6e6:	2302      	movs	r3, #2
 801e6e8:	e7c7      	b.n	801e67a <__ssvfiscanf_r+0x1de>
 801e6ea:	9841      	ldr	r0, [sp, #260]	; 0x104
 801e6ec:	06c3      	lsls	r3, r0, #27
 801e6ee:	f53f aeff 	bmi.w	801e4f0 <__ssvfiscanf_r+0x54>
 801e6f2:	9b00      	ldr	r3, [sp, #0]
 801e6f4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801e6f6:	1d19      	adds	r1, r3, #4
 801e6f8:	9100      	str	r1, [sp, #0]
 801e6fa:	681b      	ldr	r3, [r3, #0]
 801e6fc:	07c0      	lsls	r0, r0, #31
 801e6fe:	bf4c      	ite	mi
 801e700:	801a      	strhmi	r2, [r3, #0]
 801e702:	601a      	strpl	r2, [r3, #0]
 801e704:	e6f4      	b.n	801e4f0 <__ssvfiscanf_r+0x54>
 801e706:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e708:	4621      	mov	r1, r4
 801e70a:	4630      	mov	r0, r6
 801e70c:	4798      	blx	r3
 801e70e:	2800      	cmp	r0, #0
 801e710:	d0b7      	beq.n	801e682 <__ssvfiscanf_r+0x1e6>
 801e712:	e79d      	b.n	801e650 <__ssvfiscanf_r+0x1b4>
 801e714:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801e716:	3201      	adds	r2, #1
 801e718:	9245      	str	r2, [sp, #276]	; 0x114
 801e71a:	6862      	ldr	r2, [r4, #4]
 801e71c:	3a01      	subs	r2, #1
 801e71e:	2a00      	cmp	r2, #0
 801e720:	6062      	str	r2, [r4, #4]
 801e722:	dd02      	ble.n	801e72a <__ssvfiscanf_r+0x28e>
 801e724:	3301      	adds	r3, #1
 801e726:	6023      	str	r3, [r4, #0]
 801e728:	e7ae      	b.n	801e688 <__ssvfiscanf_r+0x1ec>
 801e72a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e72c:	4621      	mov	r1, r4
 801e72e:	4630      	mov	r0, r6
 801e730:	4798      	blx	r3
 801e732:	2800      	cmp	r0, #0
 801e734:	d0a8      	beq.n	801e688 <__ssvfiscanf_r+0x1ec>
 801e736:	e78b      	b.n	801e650 <__ssvfiscanf_r+0x1b4>
 801e738:	2b04      	cmp	r3, #4
 801e73a:	dc06      	bgt.n	801e74a <__ssvfiscanf_r+0x2ae>
 801e73c:	466b      	mov	r3, sp
 801e73e:	4622      	mov	r2, r4
 801e740:	a941      	add	r1, sp, #260	; 0x104
 801e742:	4630      	mov	r0, r6
 801e744:	f000 f9d4 	bl	801eaf0 <_scanf_i>
 801e748:	e7ac      	b.n	801e6a4 <__ssvfiscanf_r+0x208>
 801e74a:	4b0f      	ldr	r3, [pc, #60]	; (801e788 <__ssvfiscanf_r+0x2ec>)
 801e74c:	2b00      	cmp	r3, #0
 801e74e:	f43f aecf 	beq.w	801e4f0 <__ssvfiscanf_r+0x54>
 801e752:	466b      	mov	r3, sp
 801e754:	4622      	mov	r2, r4
 801e756:	a941      	add	r1, sp, #260	; 0x104
 801e758:	4630      	mov	r0, r6
 801e75a:	f7fc f823 	bl	801a7a4 <_scanf_float>
 801e75e:	e7a1      	b.n	801e6a4 <__ssvfiscanf_r+0x208>
 801e760:	89a3      	ldrh	r3, [r4, #12]
 801e762:	f013 0f40 	tst.w	r3, #64	; 0x40
 801e766:	bf18      	it	ne
 801e768:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 801e76c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801e770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e774:	9844      	ldr	r0, [sp, #272]	; 0x110
 801e776:	e7f9      	b.n	801e76c <__ssvfiscanf_r+0x2d0>
 801e778:	0801e3e9 	.word	0x0801e3e9
 801e77c:	0801e463 	.word	0x0801e463
 801e780:	08020d11 	.word	0x08020d11
 801e784:	080211b2 	.word	0x080211b2
 801e788:	0801a7a5 	.word	0x0801a7a5

0801e78c <__sfputc_r>:
 801e78c:	6893      	ldr	r3, [r2, #8]
 801e78e:	3b01      	subs	r3, #1
 801e790:	2b00      	cmp	r3, #0
 801e792:	b410      	push	{r4}
 801e794:	6093      	str	r3, [r2, #8]
 801e796:	da08      	bge.n	801e7aa <__sfputc_r+0x1e>
 801e798:	6994      	ldr	r4, [r2, #24]
 801e79a:	42a3      	cmp	r3, r4
 801e79c:	db01      	blt.n	801e7a2 <__sfputc_r+0x16>
 801e79e:	290a      	cmp	r1, #10
 801e7a0:	d103      	bne.n	801e7aa <__sfputc_r+0x1e>
 801e7a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e7a6:	f7fd bb7f 	b.w	801bea8 <__swbuf_r>
 801e7aa:	6813      	ldr	r3, [r2, #0]
 801e7ac:	1c58      	adds	r0, r3, #1
 801e7ae:	6010      	str	r0, [r2, #0]
 801e7b0:	7019      	strb	r1, [r3, #0]
 801e7b2:	4608      	mov	r0, r1
 801e7b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e7b8:	4770      	bx	lr

0801e7ba <__sfputs_r>:
 801e7ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e7bc:	4606      	mov	r6, r0
 801e7be:	460f      	mov	r7, r1
 801e7c0:	4614      	mov	r4, r2
 801e7c2:	18d5      	adds	r5, r2, r3
 801e7c4:	42ac      	cmp	r4, r5
 801e7c6:	d101      	bne.n	801e7cc <__sfputs_r+0x12>
 801e7c8:	2000      	movs	r0, #0
 801e7ca:	e007      	b.n	801e7dc <__sfputs_r+0x22>
 801e7cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e7d0:	463a      	mov	r2, r7
 801e7d2:	4630      	mov	r0, r6
 801e7d4:	f7ff ffda 	bl	801e78c <__sfputc_r>
 801e7d8:	1c43      	adds	r3, r0, #1
 801e7da:	d1f3      	bne.n	801e7c4 <__sfputs_r+0xa>
 801e7dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e7e0 <_vfiprintf_r>:
 801e7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7e4:	460d      	mov	r5, r1
 801e7e6:	b09d      	sub	sp, #116	; 0x74
 801e7e8:	4614      	mov	r4, r2
 801e7ea:	4698      	mov	r8, r3
 801e7ec:	4606      	mov	r6, r0
 801e7ee:	b118      	cbz	r0, 801e7f8 <_vfiprintf_r+0x18>
 801e7f0:	6983      	ldr	r3, [r0, #24]
 801e7f2:	b90b      	cbnz	r3, 801e7f8 <_vfiprintf_r+0x18>
 801e7f4:	f7fb f9bc 	bl	8019b70 <__sinit>
 801e7f8:	4b89      	ldr	r3, [pc, #548]	; (801ea20 <_vfiprintf_r+0x240>)
 801e7fa:	429d      	cmp	r5, r3
 801e7fc:	d11b      	bne.n	801e836 <_vfiprintf_r+0x56>
 801e7fe:	6875      	ldr	r5, [r6, #4]
 801e800:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e802:	07d9      	lsls	r1, r3, #31
 801e804:	d405      	bmi.n	801e812 <_vfiprintf_r+0x32>
 801e806:	89ab      	ldrh	r3, [r5, #12]
 801e808:	059a      	lsls	r2, r3, #22
 801e80a:	d402      	bmi.n	801e812 <_vfiprintf_r+0x32>
 801e80c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e80e:	f7fb fa72 	bl	8019cf6 <__retarget_lock_acquire_recursive>
 801e812:	89ab      	ldrh	r3, [r5, #12]
 801e814:	071b      	lsls	r3, r3, #28
 801e816:	d501      	bpl.n	801e81c <_vfiprintf_r+0x3c>
 801e818:	692b      	ldr	r3, [r5, #16]
 801e81a:	b9eb      	cbnz	r3, 801e858 <_vfiprintf_r+0x78>
 801e81c:	4629      	mov	r1, r5
 801e81e:	4630      	mov	r0, r6
 801e820:	f7fd fba6 	bl	801bf70 <__swsetup_r>
 801e824:	b1c0      	cbz	r0, 801e858 <_vfiprintf_r+0x78>
 801e826:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e828:	07dc      	lsls	r4, r3, #31
 801e82a:	d50e      	bpl.n	801e84a <_vfiprintf_r+0x6a>
 801e82c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e830:	b01d      	add	sp, #116	; 0x74
 801e832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e836:	4b7b      	ldr	r3, [pc, #492]	; (801ea24 <_vfiprintf_r+0x244>)
 801e838:	429d      	cmp	r5, r3
 801e83a:	d101      	bne.n	801e840 <_vfiprintf_r+0x60>
 801e83c:	68b5      	ldr	r5, [r6, #8]
 801e83e:	e7df      	b.n	801e800 <_vfiprintf_r+0x20>
 801e840:	4b79      	ldr	r3, [pc, #484]	; (801ea28 <_vfiprintf_r+0x248>)
 801e842:	429d      	cmp	r5, r3
 801e844:	bf08      	it	eq
 801e846:	68f5      	ldreq	r5, [r6, #12]
 801e848:	e7da      	b.n	801e800 <_vfiprintf_r+0x20>
 801e84a:	89ab      	ldrh	r3, [r5, #12]
 801e84c:	0598      	lsls	r0, r3, #22
 801e84e:	d4ed      	bmi.n	801e82c <_vfiprintf_r+0x4c>
 801e850:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e852:	f7fb fa51 	bl	8019cf8 <__retarget_lock_release_recursive>
 801e856:	e7e9      	b.n	801e82c <_vfiprintf_r+0x4c>
 801e858:	2300      	movs	r3, #0
 801e85a:	9309      	str	r3, [sp, #36]	; 0x24
 801e85c:	2320      	movs	r3, #32
 801e85e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e862:	f8cd 800c 	str.w	r8, [sp, #12]
 801e866:	2330      	movs	r3, #48	; 0x30
 801e868:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801ea2c <_vfiprintf_r+0x24c>
 801e86c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e870:	f04f 0901 	mov.w	r9, #1
 801e874:	4623      	mov	r3, r4
 801e876:	469a      	mov	sl, r3
 801e878:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e87c:	b10a      	cbz	r2, 801e882 <_vfiprintf_r+0xa2>
 801e87e:	2a25      	cmp	r2, #37	; 0x25
 801e880:	d1f9      	bne.n	801e876 <_vfiprintf_r+0x96>
 801e882:	ebba 0b04 	subs.w	fp, sl, r4
 801e886:	d00b      	beq.n	801e8a0 <_vfiprintf_r+0xc0>
 801e888:	465b      	mov	r3, fp
 801e88a:	4622      	mov	r2, r4
 801e88c:	4629      	mov	r1, r5
 801e88e:	4630      	mov	r0, r6
 801e890:	f7ff ff93 	bl	801e7ba <__sfputs_r>
 801e894:	3001      	adds	r0, #1
 801e896:	f000 80aa 	beq.w	801e9ee <_vfiprintf_r+0x20e>
 801e89a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e89c:	445a      	add	r2, fp
 801e89e:	9209      	str	r2, [sp, #36]	; 0x24
 801e8a0:	f89a 3000 	ldrb.w	r3, [sl]
 801e8a4:	2b00      	cmp	r3, #0
 801e8a6:	f000 80a2 	beq.w	801e9ee <_vfiprintf_r+0x20e>
 801e8aa:	2300      	movs	r3, #0
 801e8ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e8b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e8b4:	f10a 0a01 	add.w	sl, sl, #1
 801e8b8:	9304      	str	r3, [sp, #16]
 801e8ba:	9307      	str	r3, [sp, #28]
 801e8bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e8c0:	931a      	str	r3, [sp, #104]	; 0x68
 801e8c2:	4654      	mov	r4, sl
 801e8c4:	2205      	movs	r2, #5
 801e8c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e8ca:	4858      	ldr	r0, [pc, #352]	; (801ea2c <_vfiprintf_r+0x24c>)
 801e8cc:	f7e1 fc98 	bl	8000200 <memchr>
 801e8d0:	9a04      	ldr	r2, [sp, #16]
 801e8d2:	b9d8      	cbnz	r0, 801e90c <_vfiprintf_r+0x12c>
 801e8d4:	06d1      	lsls	r1, r2, #27
 801e8d6:	bf44      	itt	mi
 801e8d8:	2320      	movmi	r3, #32
 801e8da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e8de:	0713      	lsls	r3, r2, #28
 801e8e0:	bf44      	itt	mi
 801e8e2:	232b      	movmi	r3, #43	; 0x2b
 801e8e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e8e8:	f89a 3000 	ldrb.w	r3, [sl]
 801e8ec:	2b2a      	cmp	r3, #42	; 0x2a
 801e8ee:	d015      	beq.n	801e91c <_vfiprintf_r+0x13c>
 801e8f0:	9a07      	ldr	r2, [sp, #28]
 801e8f2:	4654      	mov	r4, sl
 801e8f4:	2000      	movs	r0, #0
 801e8f6:	f04f 0c0a 	mov.w	ip, #10
 801e8fa:	4621      	mov	r1, r4
 801e8fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e900:	3b30      	subs	r3, #48	; 0x30
 801e902:	2b09      	cmp	r3, #9
 801e904:	d94e      	bls.n	801e9a4 <_vfiprintf_r+0x1c4>
 801e906:	b1b0      	cbz	r0, 801e936 <_vfiprintf_r+0x156>
 801e908:	9207      	str	r2, [sp, #28]
 801e90a:	e014      	b.n	801e936 <_vfiprintf_r+0x156>
 801e90c:	eba0 0308 	sub.w	r3, r0, r8
 801e910:	fa09 f303 	lsl.w	r3, r9, r3
 801e914:	4313      	orrs	r3, r2
 801e916:	9304      	str	r3, [sp, #16]
 801e918:	46a2      	mov	sl, r4
 801e91a:	e7d2      	b.n	801e8c2 <_vfiprintf_r+0xe2>
 801e91c:	9b03      	ldr	r3, [sp, #12]
 801e91e:	1d19      	adds	r1, r3, #4
 801e920:	681b      	ldr	r3, [r3, #0]
 801e922:	9103      	str	r1, [sp, #12]
 801e924:	2b00      	cmp	r3, #0
 801e926:	bfbb      	ittet	lt
 801e928:	425b      	neglt	r3, r3
 801e92a:	f042 0202 	orrlt.w	r2, r2, #2
 801e92e:	9307      	strge	r3, [sp, #28]
 801e930:	9307      	strlt	r3, [sp, #28]
 801e932:	bfb8      	it	lt
 801e934:	9204      	strlt	r2, [sp, #16]
 801e936:	7823      	ldrb	r3, [r4, #0]
 801e938:	2b2e      	cmp	r3, #46	; 0x2e
 801e93a:	d10c      	bne.n	801e956 <_vfiprintf_r+0x176>
 801e93c:	7863      	ldrb	r3, [r4, #1]
 801e93e:	2b2a      	cmp	r3, #42	; 0x2a
 801e940:	d135      	bne.n	801e9ae <_vfiprintf_r+0x1ce>
 801e942:	9b03      	ldr	r3, [sp, #12]
 801e944:	1d1a      	adds	r2, r3, #4
 801e946:	681b      	ldr	r3, [r3, #0]
 801e948:	9203      	str	r2, [sp, #12]
 801e94a:	2b00      	cmp	r3, #0
 801e94c:	bfb8      	it	lt
 801e94e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801e952:	3402      	adds	r4, #2
 801e954:	9305      	str	r3, [sp, #20]
 801e956:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801ea3c <_vfiprintf_r+0x25c>
 801e95a:	7821      	ldrb	r1, [r4, #0]
 801e95c:	2203      	movs	r2, #3
 801e95e:	4650      	mov	r0, sl
 801e960:	f7e1 fc4e 	bl	8000200 <memchr>
 801e964:	b140      	cbz	r0, 801e978 <_vfiprintf_r+0x198>
 801e966:	2340      	movs	r3, #64	; 0x40
 801e968:	eba0 000a 	sub.w	r0, r0, sl
 801e96c:	fa03 f000 	lsl.w	r0, r3, r0
 801e970:	9b04      	ldr	r3, [sp, #16]
 801e972:	4303      	orrs	r3, r0
 801e974:	3401      	adds	r4, #1
 801e976:	9304      	str	r3, [sp, #16]
 801e978:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e97c:	482c      	ldr	r0, [pc, #176]	; (801ea30 <_vfiprintf_r+0x250>)
 801e97e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e982:	2206      	movs	r2, #6
 801e984:	f7e1 fc3c 	bl	8000200 <memchr>
 801e988:	2800      	cmp	r0, #0
 801e98a:	d03f      	beq.n	801ea0c <_vfiprintf_r+0x22c>
 801e98c:	4b29      	ldr	r3, [pc, #164]	; (801ea34 <_vfiprintf_r+0x254>)
 801e98e:	bb1b      	cbnz	r3, 801e9d8 <_vfiprintf_r+0x1f8>
 801e990:	9b03      	ldr	r3, [sp, #12]
 801e992:	3307      	adds	r3, #7
 801e994:	f023 0307 	bic.w	r3, r3, #7
 801e998:	3308      	adds	r3, #8
 801e99a:	9303      	str	r3, [sp, #12]
 801e99c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e99e:	443b      	add	r3, r7
 801e9a0:	9309      	str	r3, [sp, #36]	; 0x24
 801e9a2:	e767      	b.n	801e874 <_vfiprintf_r+0x94>
 801e9a4:	fb0c 3202 	mla	r2, ip, r2, r3
 801e9a8:	460c      	mov	r4, r1
 801e9aa:	2001      	movs	r0, #1
 801e9ac:	e7a5      	b.n	801e8fa <_vfiprintf_r+0x11a>
 801e9ae:	2300      	movs	r3, #0
 801e9b0:	3401      	adds	r4, #1
 801e9b2:	9305      	str	r3, [sp, #20]
 801e9b4:	4619      	mov	r1, r3
 801e9b6:	f04f 0c0a 	mov.w	ip, #10
 801e9ba:	4620      	mov	r0, r4
 801e9bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e9c0:	3a30      	subs	r2, #48	; 0x30
 801e9c2:	2a09      	cmp	r2, #9
 801e9c4:	d903      	bls.n	801e9ce <_vfiprintf_r+0x1ee>
 801e9c6:	2b00      	cmp	r3, #0
 801e9c8:	d0c5      	beq.n	801e956 <_vfiprintf_r+0x176>
 801e9ca:	9105      	str	r1, [sp, #20]
 801e9cc:	e7c3      	b.n	801e956 <_vfiprintf_r+0x176>
 801e9ce:	fb0c 2101 	mla	r1, ip, r1, r2
 801e9d2:	4604      	mov	r4, r0
 801e9d4:	2301      	movs	r3, #1
 801e9d6:	e7f0      	b.n	801e9ba <_vfiprintf_r+0x1da>
 801e9d8:	ab03      	add	r3, sp, #12
 801e9da:	9300      	str	r3, [sp, #0]
 801e9dc:	462a      	mov	r2, r5
 801e9de:	4b16      	ldr	r3, [pc, #88]	; (801ea38 <_vfiprintf_r+0x258>)
 801e9e0:	a904      	add	r1, sp, #16
 801e9e2:	4630      	mov	r0, r6
 801e9e4:	f7fb fb14 	bl	801a010 <_printf_float>
 801e9e8:	4607      	mov	r7, r0
 801e9ea:	1c78      	adds	r0, r7, #1
 801e9ec:	d1d6      	bne.n	801e99c <_vfiprintf_r+0x1bc>
 801e9ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e9f0:	07d9      	lsls	r1, r3, #31
 801e9f2:	d405      	bmi.n	801ea00 <_vfiprintf_r+0x220>
 801e9f4:	89ab      	ldrh	r3, [r5, #12]
 801e9f6:	059a      	lsls	r2, r3, #22
 801e9f8:	d402      	bmi.n	801ea00 <_vfiprintf_r+0x220>
 801e9fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e9fc:	f7fb f97c 	bl	8019cf8 <__retarget_lock_release_recursive>
 801ea00:	89ab      	ldrh	r3, [r5, #12]
 801ea02:	065b      	lsls	r3, r3, #25
 801ea04:	f53f af12 	bmi.w	801e82c <_vfiprintf_r+0x4c>
 801ea08:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ea0a:	e711      	b.n	801e830 <_vfiprintf_r+0x50>
 801ea0c:	ab03      	add	r3, sp, #12
 801ea0e:	9300      	str	r3, [sp, #0]
 801ea10:	462a      	mov	r2, r5
 801ea12:	4b09      	ldr	r3, [pc, #36]	; (801ea38 <_vfiprintf_r+0x258>)
 801ea14:	a904      	add	r1, sp, #16
 801ea16:	4630      	mov	r0, r6
 801ea18:	f7fb fd9e 	bl	801a558 <_printf_i>
 801ea1c:	e7e4      	b.n	801e9e8 <_vfiprintf_r+0x208>
 801ea1e:	bf00      	nop
 801ea20:	08020e34 	.word	0x08020e34
 801ea24:	08020e54 	.word	0x08020e54
 801ea28:	08020e14 	.word	0x08020e14
 801ea2c:	080211ac 	.word	0x080211ac
 801ea30:	080211b6 	.word	0x080211b6
 801ea34:	0801a011 	.word	0x0801a011
 801ea38:	0801e7bb 	.word	0x0801e7bb
 801ea3c:	080211b2 	.word	0x080211b2

0801ea40 <_scanf_chars>:
 801ea40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ea44:	4615      	mov	r5, r2
 801ea46:	688a      	ldr	r2, [r1, #8]
 801ea48:	4680      	mov	r8, r0
 801ea4a:	460c      	mov	r4, r1
 801ea4c:	b932      	cbnz	r2, 801ea5c <_scanf_chars+0x1c>
 801ea4e:	698a      	ldr	r2, [r1, #24]
 801ea50:	2a00      	cmp	r2, #0
 801ea52:	bf0c      	ite	eq
 801ea54:	2201      	moveq	r2, #1
 801ea56:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 801ea5a:	608a      	str	r2, [r1, #8]
 801ea5c:	6822      	ldr	r2, [r4, #0]
 801ea5e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801eaec <_scanf_chars+0xac>
 801ea62:	06d1      	lsls	r1, r2, #27
 801ea64:	bf5f      	itttt	pl
 801ea66:	681a      	ldrpl	r2, [r3, #0]
 801ea68:	1d11      	addpl	r1, r2, #4
 801ea6a:	6019      	strpl	r1, [r3, #0]
 801ea6c:	6816      	ldrpl	r6, [r2, #0]
 801ea6e:	2700      	movs	r7, #0
 801ea70:	69a0      	ldr	r0, [r4, #24]
 801ea72:	b188      	cbz	r0, 801ea98 <_scanf_chars+0x58>
 801ea74:	2801      	cmp	r0, #1
 801ea76:	d107      	bne.n	801ea88 <_scanf_chars+0x48>
 801ea78:	682b      	ldr	r3, [r5, #0]
 801ea7a:	781a      	ldrb	r2, [r3, #0]
 801ea7c:	6963      	ldr	r3, [r4, #20]
 801ea7e:	5c9b      	ldrb	r3, [r3, r2]
 801ea80:	b953      	cbnz	r3, 801ea98 <_scanf_chars+0x58>
 801ea82:	bb27      	cbnz	r7, 801eace <_scanf_chars+0x8e>
 801ea84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ea88:	2802      	cmp	r0, #2
 801ea8a:	d120      	bne.n	801eace <_scanf_chars+0x8e>
 801ea8c:	682b      	ldr	r3, [r5, #0]
 801ea8e:	781b      	ldrb	r3, [r3, #0]
 801ea90:	f813 3009 	ldrb.w	r3, [r3, r9]
 801ea94:	071b      	lsls	r3, r3, #28
 801ea96:	d41a      	bmi.n	801eace <_scanf_chars+0x8e>
 801ea98:	6823      	ldr	r3, [r4, #0]
 801ea9a:	06da      	lsls	r2, r3, #27
 801ea9c:	bf5e      	ittt	pl
 801ea9e:	682b      	ldrpl	r3, [r5, #0]
 801eaa0:	781b      	ldrbpl	r3, [r3, #0]
 801eaa2:	f806 3b01 	strbpl.w	r3, [r6], #1
 801eaa6:	682a      	ldr	r2, [r5, #0]
 801eaa8:	686b      	ldr	r3, [r5, #4]
 801eaaa:	3201      	adds	r2, #1
 801eaac:	602a      	str	r2, [r5, #0]
 801eaae:	68a2      	ldr	r2, [r4, #8]
 801eab0:	3b01      	subs	r3, #1
 801eab2:	3a01      	subs	r2, #1
 801eab4:	606b      	str	r3, [r5, #4]
 801eab6:	3701      	adds	r7, #1
 801eab8:	60a2      	str	r2, [r4, #8]
 801eaba:	b142      	cbz	r2, 801eace <_scanf_chars+0x8e>
 801eabc:	2b00      	cmp	r3, #0
 801eabe:	dcd7      	bgt.n	801ea70 <_scanf_chars+0x30>
 801eac0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801eac4:	4629      	mov	r1, r5
 801eac6:	4640      	mov	r0, r8
 801eac8:	4798      	blx	r3
 801eaca:	2800      	cmp	r0, #0
 801eacc:	d0d0      	beq.n	801ea70 <_scanf_chars+0x30>
 801eace:	6823      	ldr	r3, [r4, #0]
 801ead0:	f013 0310 	ands.w	r3, r3, #16
 801ead4:	d105      	bne.n	801eae2 <_scanf_chars+0xa2>
 801ead6:	68e2      	ldr	r2, [r4, #12]
 801ead8:	3201      	adds	r2, #1
 801eada:	60e2      	str	r2, [r4, #12]
 801eadc:	69a2      	ldr	r2, [r4, #24]
 801eade:	b102      	cbz	r2, 801eae2 <_scanf_chars+0xa2>
 801eae0:	7033      	strb	r3, [r6, #0]
 801eae2:	6923      	ldr	r3, [r4, #16]
 801eae4:	441f      	add	r7, r3
 801eae6:	6127      	str	r7, [r4, #16]
 801eae8:	2000      	movs	r0, #0
 801eaea:	e7cb      	b.n	801ea84 <_scanf_chars+0x44>
 801eaec:	08020d11 	.word	0x08020d11

0801eaf0 <_scanf_i>:
 801eaf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eaf4:	4698      	mov	r8, r3
 801eaf6:	4b74      	ldr	r3, [pc, #464]	; (801ecc8 <_scanf_i+0x1d8>)
 801eaf8:	460c      	mov	r4, r1
 801eafa:	4682      	mov	sl, r0
 801eafc:	4616      	mov	r6, r2
 801eafe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801eb02:	b087      	sub	sp, #28
 801eb04:	ab03      	add	r3, sp, #12
 801eb06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801eb0a:	4b70      	ldr	r3, [pc, #448]	; (801eccc <_scanf_i+0x1dc>)
 801eb0c:	69a1      	ldr	r1, [r4, #24]
 801eb0e:	4a70      	ldr	r2, [pc, #448]	; (801ecd0 <_scanf_i+0x1e0>)
 801eb10:	2903      	cmp	r1, #3
 801eb12:	bf18      	it	ne
 801eb14:	461a      	movne	r2, r3
 801eb16:	68a3      	ldr	r3, [r4, #8]
 801eb18:	9201      	str	r2, [sp, #4]
 801eb1a:	1e5a      	subs	r2, r3, #1
 801eb1c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801eb20:	bf88      	it	hi
 801eb22:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801eb26:	4627      	mov	r7, r4
 801eb28:	bf82      	ittt	hi
 801eb2a:	eb03 0905 	addhi.w	r9, r3, r5
 801eb2e:	f240 135d 	movwhi	r3, #349	; 0x15d
 801eb32:	60a3      	strhi	r3, [r4, #8]
 801eb34:	f857 3b1c 	ldr.w	r3, [r7], #28
 801eb38:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801eb3c:	bf98      	it	ls
 801eb3e:	f04f 0900 	movls.w	r9, #0
 801eb42:	6023      	str	r3, [r4, #0]
 801eb44:	463d      	mov	r5, r7
 801eb46:	f04f 0b00 	mov.w	fp, #0
 801eb4a:	6831      	ldr	r1, [r6, #0]
 801eb4c:	ab03      	add	r3, sp, #12
 801eb4e:	7809      	ldrb	r1, [r1, #0]
 801eb50:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801eb54:	2202      	movs	r2, #2
 801eb56:	f7e1 fb53 	bl	8000200 <memchr>
 801eb5a:	b328      	cbz	r0, 801eba8 <_scanf_i+0xb8>
 801eb5c:	f1bb 0f01 	cmp.w	fp, #1
 801eb60:	d159      	bne.n	801ec16 <_scanf_i+0x126>
 801eb62:	6862      	ldr	r2, [r4, #4]
 801eb64:	b92a      	cbnz	r2, 801eb72 <_scanf_i+0x82>
 801eb66:	6822      	ldr	r2, [r4, #0]
 801eb68:	2308      	movs	r3, #8
 801eb6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801eb6e:	6063      	str	r3, [r4, #4]
 801eb70:	6022      	str	r2, [r4, #0]
 801eb72:	6822      	ldr	r2, [r4, #0]
 801eb74:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801eb78:	6022      	str	r2, [r4, #0]
 801eb7a:	68a2      	ldr	r2, [r4, #8]
 801eb7c:	1e51      	subs	r1, r2, #1
 801eb7e:	60a1      	str	r1, [r4, #8]
 801eb80:	b192      	cbz	r2, 801eba8 <_scanf_i+0xb8>
 801eb82:	6832      	ldr	r2, [r6, #0]
 801eb84:	1c51      	adds	r1, r2, #1
 801eb86:	6031      	str	r1, [r6, #0]
 801eb88:	7812      	ldrb	r2, [r2, #0]
 801eb8a:	f805 2b01 	strb.w	r2, [r5], #1
 801eb8e:	6872      	ldr	r2, [r6, #4]
 801eb90:	3a01      	subs	r2, #1
 801eb92:	2a00      	cmp	r2, #0
 801eb94:	6072      	str	r2, [r6, #4]
 801eb96:	dc07      	bgt.n	801eba8 <_scanf_i+0xb8>
 801eb98:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801eb9c:	4631      	mov	r1, r6
 801eb9e:	4650      	mov	r0, sl
 801eba0:	4790      	blx	r2
 801eba2:	2800      	cmp	r0, #0
 801eba4:	f040 8085 	bne.w	801ecb2 <_scanf_i+0x1c2>
 801eba8:	f10b 0b01 	add.w	fp, fp, #1
 801ebac:	f1bb 0f03 	cmp.w	fp, #3
 801ebb0:	d1cb      	bne.n	801eb4a <_scanf_i+0x5a>
 801ebb2:	6863      	ldr	r3, [r4, #4]
 801ebb4:	b90b      	cbnz	r3, 801ebba <_scanf_i+0xca>
 801ebb6:	230a      	movs	r3, #10
 801ebb8:	6063      	str	r3, [r4, #4]
 801ebba:	6863      	ldr	r3, [r4, #4]
 801ebbc:	4945      	ldr	r1, [pc, #276]	; (801ecd4 <_scanf_i+0x1e4>)
 801ebbe:	6960      	ldr	r0, [r4, #20]
 801ebc0:	1ac9      	subs	r1, r1, r3
 801ebc2:	f000 f89b 	bl	801ecfc <__sccl>
 801ebc6:	f04f 0b00 	mov.w	fp, #0
 801ebca:	68a3      	ldr	r3, [r4, #8]
 801ebcc:	6822      	ldr	r2, [r4, #0]
 801ebce:	2b00      	cmp	r3, #0
 801ebd0:	d03d      	beq.n	801ec4e <_scanf_i+0x15e>
 801ebd2:	6831      	ldr	r1, [r6, #0]
 801ebd4:	6960      	ldr	r0, [r4, #20]
 801ebd6:	f891 c000 	ldrb.w	ip, [r1]
 801ebda:	f810 000c 	ldrb.w	r0, [r0, ip]
 801ebde:	2800      	cmp	r0, #0
 801ebe0:	d035      	beq.n	801ec4e <_scanf_i+0x15e>
 801ebe2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801ebe6:	d124      	bne.n	801ec32 <_scanf_i+0x142>
 801ebe8:	0510      	lsls	r0, r2, #20
 801ebea:	d522      	bpl.n	801ec32 <_scanf_i+0x142>
 801ebec:	f10b 0b01 	add.w	fp, fp, #1
 801ebf0:	f1b9 0f00 	cmp.w	r9, #0
 801ebf4:	d003      	beq.n	801ebfe <_scanf_i+0x10e>
 801ebf6:	3301      	adds	r3, #1
 801ebf8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 801ebfc:	60a3      	str	r3, [r4, #8]
 801ebfe:	6873      	ldr	r3, [r6, #4]
 801ec00:	3b01      	subs	r3, #1
 801ec02:	2b00      	cmp	r3, #0
 801ec04:	6073      	str	r3, [r6, #4]
 801ec06:	dd1b      	ble.n	801ec40 <_scanf_i+0x150>
 801ec08:	6833      	ldr	r3, [r6, #0]
 801ec0a:	3301      	adds	r3, #1
 801ec0c:	6033      	str	r3, [r6, #0]
 801ec0e:	68a3      	ldr	r3, [r4, #8]
 801ec10:	3b01      	subs	r3, #1
 801ec12:	60a3      	str	r3, [r4, #8]
 801ec14:	e7d9      	b.n	801ebca <_scanf_i+0xda>
 801ec16:	f1bb 0f02 	cmp.w	fp, #2
 801ec1a:	d1ae      	bne.n	801eb7a <_scanf_i+0x8a>
 801ec1c:	6822      	ldr	r2, [r4, #0]
 801ec1e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801ec22:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801ec26:	d1bf      	bne.n	801eba8 <_scanf_i+0xb8>
 801ec28:	2310      	movs	r3, #16
 801ec2a:	6063      	str	r3, [r4, #4]
 801ec2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801ec30:	e7a2      	b.n	801eb78 <_scanf_i+0x88>
 801ec32:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801ec36:	6022      	str	r2, [r4, #0]
 801ec38:	780b      	ldrb	r3, [r1, #0]
 801ec3a:	f805 3b01 	strb.w	r3, [r5], #1
 801ec3e:	e7de      	b.n	801ebfe <_scanf_i+0x10e>
 801ec40:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801ec44:	4631      	mov	r1, r6
 801ec46:	4650      	mov	r0, sl
 801ec48:	4798      	blx	r3
 801ec4a:	2800      	cmp	r0, #0
 801ec4c:	d0df      	beq.n	801ec0e <_scanf_i+0x11e>
 801ec4e:	6823      	ldr	r3, [r4, #0]
 801ec50:	05d9      	lsls	r1, r3, #23
 801ec52:	d50d      	bpl.n	801ec70 <_scanf_i+0x180>
 801ec54:	42bd      	cmp	r5, r7
 801ec56:	d909      	bls.n	801ec6c <_scanf_i+0x17c>
 801ec58:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801ec5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ec60:	4632      	mov	r2, r6
 801ec62:	4650      	mov	r0, sl
 801ec64:	4798      	blx	r3
 801ec66:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 801ec6a:	464d      	mov	r5, r9
 801ec6c:	42bd      	cmp	r5, r7
 801ec6e:	d028      	beq.n	801ecc2 <_scanf_i+0x1d2>
 801ec70:	6822      	ldr	r2, [r4, #0]
 801ec72:	f012 0210 	ands.w	r2, r2, #16
 801ec76:	d113      	bne.n	801eca0 <_scanf_i+0x1b0>
 801ec78:	702a      	strb	r2, [r5, #0]
 801ec7a:	6863      	ldr	r3, [r4, #4]
 801ec7c:	9e01      	ldr	r6, [sp, #4]
 801ec7e:	4639      	mov	r1, r7
 801ec80:	4650      	mov	r0, sl
 801ec82:	47b0      	blx	r6
 801ec84:	f8d8 3000 	ldr.w	r3, [r8]
 801ec88:	6821      	ldr	r1, [r4, #0]
 801ec8a:	1d1a      	adds	r2, r3, #4
 801ec8c:	f8c8 2000 	str.w	r2, [r8]
 801ec90:	f011 0f20 	tst.w	r1, #32
 801ec94:	681b      	ldr	r3, [r3, #0]
 801ec96:	d00f      	beq.n	801ecb8 <_scanf_i+0x1c8>
 801ec98:	6018      	str	r0, [r3, #0]
 801ec9a:	68e3      	ldr	r3, [r4, #12]
 801ec9c:	3301      	adds	r3, #1
 801ec9e:	60e3      	str	r3, [r4, #12]
 801eca0:	1bed      	subs	r5, r5, r7
 801eca2:	44ab      	add	fp, r5
 801eca4:	6925      	ldr	r5, [r4, #16]
 801eca6:	445d      	add	r5, fp
 801eca8:	6125      	str	r5, [r4, #16]
 801ecaa:	2000      	movs	r0, #0
 801ecac:	b007      	add	sp, #28
 801ecae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ecb2:	f04f 0b00 	mov.w	fp, #0
 801ecb6:	e7ca      	b.n	801ec4e <_scanf_i+0x15e>
 801ecb8:	07ca      	lsls	r2, r1, #31
 801ecba:	bf4c      	ite	mi
 801ecbc:	8018      	strhmi	r0, [r3, #0]
 801ecbe:	6018      	strpl	r0, [r3, #0]
 801ecc0:	e7eb      	b.n	801ec9a <_scanf_i+0x1aa>
 801ecc2:	2001      	movs	r0, #1
 801ecc4:	e7f2      	b.n	801ecac <_scanf_i+0x1bc>
 801ecc6:	bf00      	nop
 801ecc8:	08020ae0 	.word	0x08020ae0
 801eccc:	0801be31 	.word	0x0801be31
 801ecd0:	0801bd21 	.word	0x0801bd21
 801ecd4:	080211d6 	.word	0x080211d6

0801ecd8 <_read_r>:
 801ecd8:	b538      	push	{r3, r4, r5, lr}
 801ecda:	4d07      	ldr	r5, [pc, #28]	; (801ecf8 <_read_r+0x20>)
 801ecdc:	4604      	mov	r4, r0
 801ecde:	4608      	mov	r0, r1
 801ece0:	4611      	mov	r1, r2
 801ece2:	2200      	movs	r2, #0
 801ece4:	602a      	str	r2, [r5, #0]
 801ece6:	461a      	mov	r2, r3
 801ece8:	f7e4 fa52 	bl	8003190 <_read>
 801ecec:	1c43      	adds	r3, r0, #1
 801ecee:	d102      	bne.n	801ecf6 <_read_r+0x1e>
 801ecf0:	682b      	ldr	r3, [r5, #0]
 801ecf2:	b103      	cbz	r3, 801ecf6 <_read_r+0x1e>
 801ecf4:	6023      	str	r3, [r4, #0]
 801ecf6:	bd38      	pop	{r3, r4, r5, pc}
 801ecf8:	20008f98 	.word	0x20008f98

0801ecfc <__sccl>:
 801ecfc:	b570      	push	{r4, r5, r6, lr}
 801ecfe:	780b      	ldrb	r3, [r1, #0]
 801ed00:	4604      	mov	r4, r0
 801ed02:	2b5e      	cmp	r3, #94	; 0x5e
 801ed04:	bf0b      	itete	eq
 801ed06:	784b      	ldrbeq	r3, [r1, #1]
 801ed08:	1c48      	addne	r0, r1, #1
 801ed0a:	1c88      	addeq	r0, r1, #2
 801ed0c:	2200      	movne	r2, #0
 801ed0e:	bf08      	it	eq
 801ed10:	2201      	moveq	r2, #1
 801ed12:	1e61      	subs	r1, r4, #1
 801ed14:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801ed18:	f801 2f01 	strb.w	r2, [r1, #1]!
 801ed1c:	42a9      	cmp	r1, r5
 801ed1e:	d1fb      	bne.n	801ed18 <__sccl+0x1c>
 801ed20:	b90b      	cbnz	r3, 801ed26 <__sccl+0x2a>
 801ed22:	3801      	subs	r0, #1
 801ed24:	bd70      	pop	{r4, r5, r6, pc}
 801ed26:	f082 0101 	eor.w	r1, r2, #1
 801ed2a:	54e1      	strb	r1, [r4, r3]
 801ed2c:	1c42      	adds	r2, r0, #1
 801ed2e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801ed32:	2d2d      	cmp	r5, #45	; 0x2d
 801ed34:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 801ed38:	4610      	mov	r0, r2
 801ed3a:	d006      	beq.n	801ed4a <__sccl+0x4e>
 801ed3c:	2d5d      	cmp	r5, #93	; 0x5d
 801ed3e:	d0f1      	beq.n	801ed24 <__sccl+0x28>
 801ed40:	b90d      	cbnz	r5, 801ed46 <__sccl+0x4a>
 801ed42:	4630      	mov	r0, r6
 801ed44:	e7ee      	b.n	801ed24 <__sccl+0x28>
 801ed46:	462b      	mov	r3, r5
 801ed48:	e7ef      	b.n	801ed2a <__sccl+0x2e>
 801ed4a:	7816      	ldrb	r6, [r2, #0]
 801ed4c:	2e5d      	cmp	r6, #93	; 0x5d
 801ed4e:	d0fa      	beq.n	801ed46 <__sccl+0x4a>
 801ed50:	42b3      	cmp	r3, r6
 801ed52:	dcf8      	bgt.n	801ed46 <__sccl+0x4a>
 801ed54:	4618      	mov	r0, r3
 801ed56:	3001      	adds	r0, #1
 801ed58:	4286      	cmp	r6, r0
 801ed5a:	5421      	strb	r1, [r4, r0]
 801ed5c:	dcfb      	bgt.n	801ed56 <__sccl+0x5a>
 801ed5e:	43d8      	mvns	r0, r3
 801ed60:	4430      	add	r0, r6
 801ed62:	1c5d      	adds	r5, r3, #1
 801ed64:	42b3      	cmp	r3, r6
 801ed66:	bfa8      	it	ge
 801ed68:	2000      	movge	r0, #0
 801ed6a:	182b      	adds	r3, r5, r0
 801ed6c:	3202      	adds	r2, #2
 801ed6e:	e7de      	b.n	801ed2e <__sccl+0x32>

0801ed70 <__submore>:
 801ed70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ed74:	460c      	mov	r4, r1
 801ed76:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801ed78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ed7c:	4299      	cmp	r1, r3
 801ed7e:	d11d      	bne.n	801edbc <__submore+0x4c>
 801ed80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801ed84:	f7fb f84a 	bl	8019e1c <_malloc_r>
 801ed88:	b918      	cbnz	r0, 801ed92 <__submore+0x22>
 801ed8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ed8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ed92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ed96:	63a3      	str	r3, [r4, #56]	; 0x38
 801ed98:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801ed9c:	6360      	str	r0, [r4, #52]	; 0x34
 801ed9e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801eda2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801eda6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801edaa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801edae:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801edb2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801edb6:	6020      	str	r0, [r4, #0]
 801edb8:	2000      	movs	r0, #0
 801edba:	e7e8      	b.n	801ed8e <__submore+0x1e>
 801edbc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801edbe:	0077      	lsls	r7, r6, #1
 801edc0:	463a      	mov	r2, r7
 801edc2:	f7ff f98f 	bl	801e0e4 <_realloc_r>
 801edc6:	4605      	mov	r5, r0
 801edc8:	2800      	cmp	r0, #0
 801edca:	d0de      	beq.n	801ed8a <__submore+0x1a>
 801edcc:	eb00 0806 	add.w	r8, r0, r6
 801edd0:	4601      	mov	r1, r0
 801edd2:	4632      	mov	r2, r6
 801edd4:	4640      	mov	r0, r8
 801edd6:	f7fa ffa1 	bl	8019d1c <memcpy>
 801edda:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801edde:	f8c4 8000 	str.w	r8, [r4]
 801ede2:	e7e9      	b.n	801edb8 <__submore+0x48>

0801ede4 <__ascii_wctomb>:
 801ede4:	b149      	cbz	r1, 801edfa <__ascii_wctomb+0x16>
 801ede6:	2aff      	cmp	r2, #255	; 0xff
 801ede8:	bf85      	ittet	hi
 801edea:	238a      	movhi	r3, #138	; 0x8a
 801edec:	6003      	strhi	r3, [r0, #0]
 801edee:	700a      	strbls	r2, [r1, #0]
 801edf0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801edf4:	bf98      	it	ls
 801edf6:	2001      	movls	r0, #1
 801edf8:	4770      	bx	lr
 801edfa:	4608      	mov	r0, r1
 801edfc:	4770      	bx	lr
	...

0801ee00 <_fstat_r>:
 801ee00:	b538      	push	{r3, r4, r5, lr}
 801ee02:	4d07      	ldr	r5, [pc, #28]	; (801ee20 <_fstat_r+0x20>)
 801ee04:	2300      	movs	r3, #0
 801ee06:	4604      	mov	r4, r0
 801ee08:	4608      	mov	r0, r1
 801ee0a:	4611      	mov	r1, r2
 801ee0c:	602b      	str	r3, [r5, #0]
 801ee0e:	f7e4 fa04 	bl	800321a <_fstat>
 801ee12:	1c43      	adds	r3, r0, #1
 801ee14:	d102      	bne.n	801ee1c <_fstat_r+0x1c>
 801ee16:	682b      	ldr	r3, [r5, #0]
 801ee18:	b103      	cbz	r3, 801ee1c <_fstat_r+0x1c>
 801ee1a:	6023      	str	r3, [r4, #0]
 801ee1c:	bd38      	pop	{r3, r4, r5, pc}
 801ee1e:	bf00      	nop
 801ee20:	20008f98 	.word	0x20008f98

0801ee24 <_isatty_r>:
 801ee24:	b538      	push	{r3, r4, r5, lr}
 801ee26:	4d06      	ldr	r5, [pc, #24]	; (801ee40 <_isatty_r+0x1c>)
 801ee28:	2300      	movs	r3, #0
 801ee2a:	4604      	mov	r4, r0
 801ee2c:	4608      	mov	r0, r1
 801ee2e:	602b      	str	r3, [r5, #0]
 801ee30:	f7e4 fa03 	bl	800323a <_isatty>
 801ee34:	1c43      	adds	r3, r0, #1
 801ee36:	d102      	bne.n	801ee3e <_isatty_r+0x1a>
 801ee38:	682b      	ldr	r3, [r5, #0]
 801ee3a:	b103      	cbz	r3, 801ee3e <_isatty_r+0x1a>
 801ee3c:	6023      	str	r3, [r4, #0]
 801ee3e:	bd38      	pop	{r3, r4, r5, pc}
 801ee40:	20008f98 	.word	0x20008f98

0801ee44 <_malloc_usable_size_r>:
 801ee44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ee48:	1f18      	subs	r0, r3, #4
 801ee4a:	2b00      	cmp	r3, #0
 801ee4c:	bfbc      	itt	lt
 801ee4e:	580b      	ldrlt	r3, [r1, r0]
 801ee50:	18c0      	addlt	r0, r0, r3
 801ee52:	4770      	bx	lr

0801ee54 <_init>:
 801ee54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ee56:	bf00      	nop
 801ee58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ee5a:	bc08      	pop	{r3}
 801ee5c:	469e      	mov	lr, r3
 801ee5e:	4770      	bx	lr

0801ee60 <_fini>:
 801ee60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ee62:	bf00      	nop
 801ee64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ee66:	bc08      	pop	{r3}
 801ee68:	469e      	mov	lr, r3
 801ee6a:	4770      	bx	lr
