
FC_v2.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016380  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a88  08016530  08016530  00026530  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016fb8  08016fb8  0003035c  2**0
                  CONTENTS
  4 .ARM          00000008  08016fb8  08016fb8  00026fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016fc0  08016fc0  0003035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08016fc0  08016fc0  00026fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016fc8  08016fc8  00026fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000035c  20000000  08016fcc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003035c  2**0
                  CONTENTS
 10 .bss          00006d7c  2000035c  2000035c  0003035c  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  200070d8  200070d8  0003035c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003035c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000537c7  00000000  00000000  0003038c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007f93  00000000  00000000  00083b53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000035c0  00000000  00000000  0008bae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003310  00000000  00000000  0008f0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000c149  00000000  00000000  000923b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00037a3b  00000000  00000000  0009e501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011085b  00000000  00000000  000d5f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001e6797  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000fef0  00000000  00000000  001e67ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000035c 	.word	0x2000035c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08016518 	.word	0x08016518

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000360 	.word	0x20000360
 80001ec:	08016518 	.word	0x08016518

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <lsm_write>:
/*
 * LSM6DSR
 */

static int32_t lsm_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af04      	add	r7, sp, #16
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	461a      	mov	r2, r3
 8001018:	460b      	mov	r3, r1
 800101a:	72fb      	strb	r3, [r7, #11]
 800101c:	4613      	mov	r3, r2
 800101e:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8001020:	7afb      	ldrb	r3, [r7, #11]
 8001022:	b29a      	uxth	r2, r3
 8001024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001028:	9302      	str	r3, [sp, #8]
 800102a:	893b      	ldrh	r3, [r7, #8]
 800102c:	9301      	str	r3, [sp, #4]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	21d5      	movs	r1, #213	; 0xd5
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f004 fc3a 	bl	80058b0 <HAL_I2C_Mem_Write>
  return 0;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <lsm_read>:

static int32_t lsm_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b088      	sub	sp, #32
 800104a:	af04      	add	r7, sp, #16
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	607a      	str	r2, [r7, #4]
 8001050:	461a      	mov	r2, r3
 8001052:	460b      	mov	r3, r1
 8001054:	72fb      	strb	r3, [r7, #11]
 8001056:	4613      	mov	r3, r2
 8001058:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LSM6DSR_I2C_ADD_L, reg,
 800105a:	7afb      	ldrb	r3, [r7, #11]
 800105c:	b29a      	uxth	r2, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	9302      	str	r3, [sp, #8]
 8001064:	893b      	ldrh	r3, [r7, #8]
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2301      	movs	r3, #1
 800106e:	21d5      	movs	r1, #213	; 0xd5
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f004 fd17 	bl	8005aa4 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <MRT_LSM6DSR_Setup>:




stmdev_ctx_t  MRT_LSM6DSR_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b08b      	sub	sp, #44	; 0x2c
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
	  Guart = uart;
 800108c:	4a53      	ldr	r2, [pc, #332]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LSM6DSR Setup Starts\n\r", 22, HAL_MAX_DELAY);
 8001092:	4b52      	ldr	r3, [pc, #328]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 8001094:	6818      	ldr	r0, [r3, #0]
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	2216      	movs	r2, #22
 800109c:	4950      	ldr	r1, [pc, #320]	; (80011e0 <MRT_LSM6DSR_Setup+0x160>)
 800109e:	f008 ff64 	bl	8009f6a <HAL_UART_Transmit>


	  stmdev_ctx_t lsm_ctx;

	  /* Initialize mems driver interface */
	  lsm_ctx.write_reg = lsm_write;
 80010a2:	4b50      	ldr	r3, [pc, #320]	; (80011e4 <MRT_LSM6DSR_Setup+0x164>)
 80010a4:	61fb      	str	r3, [r7, #28]
	  lsm_ctx.read_reg = lsm_read;
 80010a6:	4b50      	ldr	r3, [pc, #320]	; (80011e8 <MRT_LSM6DSR_Setup+0x168>)
 80010a8:	623b      	str	r3, [r7, #32]
	  lsm_ctx.handle = SENSOR_BUS;
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 80010ae:	2064      	movs	r0, #100	; 0x64
 80010b0:	f003 fd4a 	bl	8004b48 <HAL_Delay>
	  /* Check device ID */
	  lsm6dsr_device_id_get(&lsm_ctx, &lsm_whoamI);
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	494c      	ldr	r1, [pc, #304]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010ba:	4618      	mov	r0, r3
 80010bc:	f003 fb4c 	bl	8004758 <lsm6dsr_device_id_get>

	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 21, HAL_MAX_DELAY);
 80010c0:	4b46      	ldr	r3, [pc, #280]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
 80010c8:	2215      	movs	r2, #21
 80010ca:	4949      	ldr	r1, [pc, #292]	; (80011f0 <MRT_LSM6DSR_Setup+0x170>)
 80010cc:	f008 ff4d 	bl	8009f6a <HAL_UART_Transmit>


	  if (lsm_whoamI != LSM6DSR_ID){
 80010d0:	4b46      	ldr	r3, [pc, #280]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b6a      	cmp	r3, #106	; 0x6a
 80010d6:	d032      	beq.n	800113e <MRT_LSM6DSR_Setup+0xbe>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 80010d8:	4b40      	ldr	r3, [pc, #256]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295
 80010e0:	2208      	movs	r2, #8
 80010e2:	4944      	ldr	r1, [pc, #272]	; (80011f4 <MRT_LSM6DSR_Setup+0x174>)
 80010e4:	f008 ff41 	bl	8009f6a <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 80010e8:	4b3c      	ldr	r3, [pc, #240]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295
 80010f0:	2210      	movs	r2, #16
 80010f2:	4941      	ldr	r1, [pc, #260]	; (80011f8 <MRT_LSM6DSR_Setup+0x178>)
 80010f4:	f008 ff39 	bl	8009f6a <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lsm_whoamI);
 80010f8:	4b3c      	ldr	r3, [pc, #240]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	493e      	ldr	r1, [pc, #248]	; (80011fc <MRT_LSM6DSR_Setup+0x17c>)
 8001104:	4618      	mov	r0, r3
 8001106:	f011 fa53 	bl	80125b0 <siprintf>

			__BKPT();
 800110a:	be00      	bkpt	0x0000

		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 800110c:	4b33      	ldr	r3, [pc, #204]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800110e:	681c      	ldr	r4, [r3, #0]
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f86b 	bl	80001f0 <strlen>
 800111a:	4603      	mov	r3, r0
 800111c:	b29a      	uxth	r2, r3
 800111e:	f107 0110 	add.w	r1, r7, #16
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	4620      	mov	r0, r4
 8001128:	f008 ff1f 	bl	8009f6a <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 800112c:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800112e:	6818      	ldr	r0, [r3, #0]
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	2216      	movs	r2, #22
 8001136:	4932      	ldr	r1, [pc, #200]	; (8001200 <MRT_LSM6DSR_Setup+0x180>)
 8001138:	f008 ff17 	bl	8009f6a <HAL_UART_Transmit>
		  while(1);
 800113c:	e7fe      	b.n	800113c <MRT_LSM6DSR_Setup+0xbc>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 6, HAL_MAX_DELAY);
 800113e:	4b27      	ldr	r3, [pc, #156]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 8001140:	6818      	ldr	r0, [r3, #0]
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	2206      	movs	r2, #6
 8001148:	492e      	ldr	r1, [pc, #184]	; (8001204 <MRT_LSM6DSR_Setup+0x184>)
 800114a:	f008 ff0e 	bl	8009f6a <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lsm6dsr_reset_set(&lsm_ctx, PROPERTY_ENABLE);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	2101      	movs	r1, #1
 8001154:	4618      	mov	r0, r3
 8001156:	f003 fb10 	bl	800477a <lsm6dsr_reset_set>


	  HAL_Delay(1000);
 800115a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800115e:	f003 fcf3 	bl	8004b48 <HAL_Delay>

	  do {
	    lsm6dsr_reset_get(&lsm_ctx, &lsm_rst);
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	4928      	ldr	r1, [pc, #160]	; (8001208 <MRT_LSM6DSR_Setup+0x188>)
 8001168:	4618      	mov	r0, r3
 800116a:	f003 fb2c 	bl	80047c6 <lsm6dsr_reset_get>
	  } while (lsm_rst);
 800116e:	4b26      	ldr	r3, [pc, #152]	; (8001208 <MRT_LSM6DSR_Setup+0x188>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f5      	bne.n	8001162 <MRT_LSM6DSR_Setup+0xe2>

	  /* Disable I3C interface */
	  //TODO JASPER lsm6dsr_i3c_disable_set(&lsm_ctx, LSM6DSR_I3C_DISABLE);

	  /* Enable Block Data Update */
	  lsm6dsr_block_data_update_set(&lsm_ctx, PROPERTY_ENABLE);
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	2101      	movs	r1, #1
 800117c:	4618      	mov	r0, r3
 800117e:	f003 f99b 	bl	80044b8 <lsm6dsr_block_data_update_set>
	  /* Set Output Data Rate */
	  lsm6dsr_xl_data_rate_set(&lsm_ctx, LSM6DSR_XL_ODR_12Hz5);
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	2101      	movs	r1, #1
 8001188:	4618      	mov	r0, r3
 800118a:	f002 ff77 	bl	800407c <lsm6dsr_xl_data_rate_set>
	  lsm6dsr_gy_data_rate_set(&lsm_ctx, LSM6DSR_GY_ODR_12Hz5);
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	2101      	movs	r1, #1
 8001194:	4618      	mov	r0, r3
 8001196:	f003 f893 	bl	80042c0 <lsm6dsr_gy_data_rate_set>
	  /* Set full scale */
	  lsm6dsr_xl_full_scale_set(&lsm_ctx, LSM6DSR_2g);
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f002 ff45 	bl	8004030 <lsm6dsr_xl_full_scale_set>
	  lsm6dsr_gy_full_scale_set(&lsm_ctx, LSM6DSR_2000dps);
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	210c      	movs	r1, #12
 80011ac:	4618      	mov	r0, r3
 80011ae:	f003 f861 	bl	8004274 <lsm6dsr_gy_full_scale_set>
	  /* Configure filtering chain(No aux interface)
	   * Accelerometer - LPF1 + LPF2 path
	   */
	  //TODO JASPER lsm6dsr_xl_hp_path_on_out_set(&lsm_ctx, LSM6DSR_LP_ODR_DIV_100);
	  //TODO JASPER lsm6dsr_xl_filter_lp2_set(&lsm_ctx, PROPERTY_ENABLE);
	  HAL_UART_Transmit(Guart,"LLSM6DSR Setup Ends\n\r", 25, HAL_MAX_DELAY);
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80011b4:	6818      	ldr	r0, [r3, #0]
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	2219      	movs	r2, #25
 80011bc:	4913      	ldr	r1, [pc, #76]	; (800120c <MRT_LSM6DSR_Setup+0x18c>)
 80011be:	f008 fed4 	bl	8009f6a <HAL_UART_Transmit>

	  return lsm_ctx;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	461c      	mov	r4, r3
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	372c      	adds	r7, #44	; 0x2c
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd90      	pop	{r4, r7, pc}
 80011da:	bf00      	nop
 80011dc:	200051e4 	.word	0x200051e4
 80011e0:	08016530 	.word	0x08016530
 80011e4:	0800100d 	.word	0x0800100d
 80011e8:	08001047 	.word	0x08001047
 80011ec:	20000388 	.word	0x20000388
 80011f0:	08016548 	.word	0x08016548
 80011f4:	08016560 	.word	0x08016560
 80011f8:	0801656c 	.word	0x0801656c
 80011fc:	08016580 	.word	0x08016580
 8001200:	08016588 	.word	0x08016588
 8001204:	080165a0 	.word	0x080165a0
 8001208:	20000389 	.word	0x20000389
 800120c:	080165a8 	.word	0x080165a8

08001210 <MRT_LSM6DSR_getAcceleration>:


/*
 * Get acceleration values
 */
void MRT_LSM6DSR_getAcceleration(stmdev_ctx_t lsm_ctx,float acceleration_mg[3]){
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b087      	sub	sp, #28
 8001214:	af00      	add	r7, sp, #0
 8001216:	1d3c      	adds	r4, r7, #4
 8001218:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800121c:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_xl_flag_data_ready_get(&lsm_ctx, &reg);
 800121e:	f107 0217 	add.w	r2, r7, #23
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	4611      	mov	r1, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f003 f96c 	bl	8004504 <lsm6dsr_xl_flag_data_ready_get>

		//if (reg.status_reg.gda) {
	    if(reg){
 800122c:	7dfb      	ldrb	r3, [r7, #23]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d02d      	beq.n	800128e <MRT_LSM6DSR_getAcceleration+0x7e>
		/* Read magnetic field data */
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001232:	2206      	movs	r2, #6
 8001234:	2100      	movs	r1, #0
 8001236:	4818      	ldr	r0, [pc, #96]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001238:	f010 f9ca 	bl	80115d0 <memset>
        lsm6dsr_acceleration_raw_get(&lsm_ctx, data_raw_acceleration);
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	4916      	ldr	r1, [pc, #88]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001240:	4618      	mov	r0, r3
 8001242:	f003 fa18 	bl	8004676 <lsm6dsr_acceleration_raw_get>
        acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800124c:	4618      	mov	r0, r3
 800124e:	f002 fea3 	bl	8003f98 <lsm6dsr_from_fs2g_to_mg>
 8001252:	eef0 7a40 	vmov.f32	s15, s0
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	edc3 7a00 	vstr	s15, [r3]
                               data_raw_acceleration[0]);
        acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 800125e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	1d1c      	adds	r4, r3, #4
 8001266:	4610      	mov	r0, r2
 8001268:	f002 fe96 	bl	8003f98 <lsm6dsr_from_fs2g_to_mg>
 800126c:	eef0 7a40 	vmov.f32	s15, s0
 8001270:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[1]);
        acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001276:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	f103 0408 	add.w	r4, r3, #8
 8001280:	4610      	mov	r0, r2
 8001282:	f002 fe89 	bl	8003f98 <lsm6dsr_from_fs2g_to_mg>
 8001286:	eef0 7a40 	vmov.f32	s15, s0
 800128a:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[2]);
      }
}
 800128e:	bf00      	nop
 8001290:	371c      	adds	r7, #28
 8001292:	46bd      	mov	sp, r7
 8001294:	bd90      	pop	{r4, r7, pc}
 8001296:	bf00      	nop
 8001298:	20000378 	.word	0x20000378

0800129c <MRT_LSM6DSR_getTemperature>:


/*
 * Get temperature value
 */
void MRT_LSM6DSR_getTemperature(stmdev_ctx_t lsm_ctx,float* temperature_degC){
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b087      	sub	sp, #28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	1d3c      	adds	r4, r7, #4
 80012a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012a8:	603b      	str	r3, [r7, #0]
	//lsm6dsr_reg_t reg;
	//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    uint8_t reg;
    lsm6dsr_temp_flag_data_ready_get(&lsm_ctx, &reg);
 80012aa:	f107 0217 	add.w	r2, r7, #23
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f003 f958 	bl	8004568 <lsm6dsr_temp_flag_data_ready_get>

	//if (reg.status_reg.tda) {
    if(reg){
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d017      	beq.n	80012ee <MRT_LSM6DSR_getTemperature+0x52>
		//Read temperature data
		memset(lsm_data_raw_temperature, 0x00, sizeof(int16_t));
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <MRT_LSM6DSR_getTemperature+0x5c>)
 80012c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c4:	2202      	movs	r2, #2
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f010 f981 	bl	80115d0 <memset>
		lsm6dsr_temperature_raw_get(&lsm_ctx, &lsm_data_raw_temperature);
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	4909      	ldr	r1, [pc, #36]	; (80012f8 <MRT_LSM6DSR_getTemperature+0x5c>)
 80012d2:	4618      	mov	r0, r3
 80012d4:	f003 f961 	bl	800459a <lsm6dsr_temperature_raw_get>
		*temperature_degC = lsm6dsr_from_lsb_to_celsius(lsm_data_raw_temperature);
 80012d8:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <MRT_LSM6DSR_getTemperature+0x5c>)
 80012da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 fe8a 	bl	8003ff8 <lsm6dsr_from_lsb_to_celsius>
 80012e4:	eef0 7a40 	vmov.f32	s15, s0
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	edc3 7a00 	vstr	s15, [r3]

	}
}
 80012ee:	bf00      	nop
 80012f0:	371c      	adds	r7, #28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd90      	pop	{r4, r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000386 	.word	0x20000386

080012fc <MRT_LSM6DSR_getAngularRate>:


/*
 * Get angular rate values
 */
void MRT_LSM6DSR_getAngularRate(stmdev_ctx_t lsm_ctx,float angular_rate_mdps[3]){
 80012fc:	b590      	push	{r4, r7, lr}
 80012fe:	b087      	sub	sp, #28
 8001300:	af00      	add	r7, sp, #0
 8001302:	1d3c      	adds	r4, r7, #4
 8001304:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001308:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_gy_flag_data_ready_get(&lsm_ctx, &reg);
 800130a:	f107 0217 	add.w	r2, r7, #23
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	4611      	mov	r1, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f003 f90f 	bl	8004536 <lsm6dsr_gy_flag_data_ready_get>

		//if (reg.status_reg.xlda) {
	    if(reg){
 8001318:	7dfb      	ldrb	r3, [r7, #23]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d02d      	beq.n	800137a <MRT_LSM6DSR_getAngularRate+0x7e>
		/* Read magnetic field data */
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 800131e:	2206      	movs	r2, #6
 8001320:	2100      	movs	r1, #0
 8001322:	4818      	ldr	r0, [pc, #96]	; (8001384 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001324:	f010 f954 	bl	80115d0 <memset>
		lsm6dsr_angular_rate_raw_get(&lsm_ctx, data_raw_angular_rate);
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	4916      	ldr	r1, [pc, #88]	; (8001384 <MRT_LSM6DSR_getAngularRate+0x88>)
 800132c:	4618      	mov	r0, r3
 800132e:	f003 f957 	bl	80045e0 <lsm6dsr_angular_rate_raw_get>
		angular_rate_mdps[0] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8001332:	4b14      	ldr	r3, [pc, #80]	; (8001384 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001338:	4618      	mov	r0, r3
 800133a:	f002 fe45 	bl	8003fc8 <lsm6dsr_from_fs2000dps_to_mdps>
 800133e:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[0] =
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	edc3 7a00 	vstr	s15, [r3]
		angular_rate_mdps[1] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001348:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <MRT_LSM6DSR_getAngularRate+0x88>)
 800134a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
		angular_rate_mdps[1] =
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	1d1c      	adds	r4, r3, #4
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001352:	4610      	mov	r0, r2
 8001354:	f002 fe38 	bl	8003fc8 <lsm6dsr_from_fs2000dps_to_mdps>
 8001358:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[1] =
 800135c:	edc4 7a00 	vstr	s15, [r4]
		angular_rate_mdps[2] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001362:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		angular_rate_mdps[2] =
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	f103 0408 	add.w	r4, r3, #8
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 800136c:	4610      	mov	r0, r2
 800136e:	f002 fe2b 	bl	8003fc8 <lsm6dsr_from_fs2000dps_to_mdps>
 8001372:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[2] =
 8001376:	edc4 7a00 	vstr	s15, [r4]
		fs2000dps_to_mdps
		*/

		}

}
 800137a:	bf00      	nop
 800137c:	371c      	adds	r7, #28
 800137e:	46bd      	mov	sp, r7
 8001380:	bd90      	pop	{r4, r7, pc}
 8001382:	bf00      	nop
 8001384:	20000380 	.word	0x20000380

08001388 <MRT_LPS22HH_Setup>:
 * LPS22HH
 */


stmdev_ctx_t  MRT_LPS22HH_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 8001388:	b590      	push	{r4, r7, lr}
 800138a:	b08d      	sub	sp, #52	; 0x34
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]

	  Guart = uart;
 8001394:	4a4b      	ldr	r2, [pc, #300]	; (80014c4 <MRT_LPS22HH_Setup+0x13c>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Starts\n\r", 22, HAL_MAX_DELAY);
 800139a:	4b4a      	ldr	r3, [pc, #296]	; (80014c4 <MRT_LPS22HH_Setup+0x13c>)
 800139c:	6818      	ldr	r0, [r3, #0]
 800139e:	f04f 33ff 	mov.w	r3, #4294967295
 80013a2:	2216      	movs	r2, #22
 80013a4:	4948      	ldr	r1, [pc, #288]	; (80014c8 <MRT_LPS22HH_Setup+0x140>)
 80013a6:	f008 fde0 	bl	8009f6a <HAL_UART_Transmit>

	  stmdev_ctx_t lps_ctx;

	  lps22hh_reg_t reg;
	  /* Initialize mems driver interface */
	  lps_ctx.write_reg = lps_write;
 80013aa:	4b48      	ldr	r3, [pc, #288]	; (80014cc <MRT_LPS22HH_Setup+0x144>)
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
	  lps_ctx.read_reg = lps_read;
 80013ae:	4b48      	ldr	r3, [pc, #288]	; (80014d0 <MRT_LPS22HH_Setup+0x148>)
 80013b0:	62bb      	str	r3, [r7, #40]	; 0x28
	  lps_ctx.handle = SENSOR_BUS;
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 80013b6:	2064      	movs	r0, #100	; 0x64
 80013b8:	f003 fbc6 	bl	8004b48 <HAL_Delay>
	  /* Check device ID */
	  lps_whoamI = 0;
 80013bc:	4b45      	ldr	r3, [pc, #276]	; (80014d4 <MRT_LPS22HH_Setup+0x14c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
	  lps22hh_device_id_get(&lps_ctx, &lps_whoamI);
 80013c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c6:	4943      	ldr	r1, [pc, #268]	; (80014d4 <MRT_LPS22HH_Setup+0x14c>)
 80013c8:	4618      	mov	r0, r3
 80013ca:	f002 fd64 	bl	8003e96 <lps22hh_device_id_get>



  	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 22, HAL_MAX_DELAY);
 80013ce:	4b3d      	ldr	r3, [pc, #244]	; (80014c4 <MRT_LPS22HH_Setup+0x13c>)
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	2216      	movs	r2, #22
 80013d8:	493f      	ldr	r1, [pc, #252]	; (80014d8 <MRT_LPS22HH_Setup+0x150>)
 80013da:	f008 fdc6 	bl	8009f6a <HAL_UART_Transmit>
	  if ( lps_whoamI != LPS22HH_ID ){
 80013de:	4b3d      	ldr	r3, [pc, #244]	; (80014d4 <MRT_LPS22HH_Setup+0x14c>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2bb3      	cmp	r3, #179	; 0xb3
 80013e4:	d031      	beq.n	800144a <MRT_LPS22HH_Setup+0xc2>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 80013e6:	4b37      	ldr	r3, [pc, #220]	; (80014c4 <MRT_LPS22HH_Setup+0x13c>)
 80013e8:	6818      	ldr	r0, [r3, #0]
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295
 80013ee:	2208      	movs	r2, #8
 80013f0:	493a      	ldr	r1, [pc, #232]	; (80014dc <MRT_LPS22HH_Setup+0x154>)
 80013f2:	f008 fdba 	bl	8009f6a <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 80013f6:	4b33      	ldr	r3, [pc, #204]	; (80014c4 <MRT_LPS22HH_Setup+0x13c>)
 80013f8:	6818      	ldr	r0, [r3, #0]
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295
 80013fe:	2210      	movs	r2, #16
 8001400:	4937      	ldr	r1, [pc, #220]	; (80014e0 <MRT_LPS22HH_Setup+0x158>)
 8001402:	f008 fdb2 	bl	8009f6a <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lps_whoamI);
 8001406:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <MRT_LPS22HH_Setup+0x14c>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	4934      	ldr	r1, [pc, #208]	; (80014e4 <MRT_LPS22HH_Setup+0x15c>)
 8001412:	4618      	mov	r0, r3
 8001414:	f011 f8cc 	bl	80125b0 <siprintf>
		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 8001418:	4b2a      	ldr	r3, [pc, #168]	; (80014c4 <MRT_LPS22HH_Setup+0x13c>)
 800141a:	681c      	ldr	r4, [r3, #0]
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4618      	mov	r0, r3
 8001422:	f7fe fee5 	bl	80001f0 <strlen>
 8001426:	4603      	mov	r3, r0
 8001428:	b29a      	uxth	r2, r3
 800142a:	f107 0114 	add.w	r1, r7, #20
 800142e:	f04f 33ff 	mov.w	r3, #4294967295
 8001432:	4620      	mov	r0, r4
 8001434:	f008 fd99 	bl	8009f6a <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 8001438:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <MRT_LPS22HH_Setup+0x13c>)
 800143a:	6818      	ldr	r0, [r3, #0]
 800143c:	f04f 33ff 	mov.w	r3, #4294967295
 8001440:	2216      	movs	r2, #22
 8001442:	4929      	ldr	r1, [pc, #164]	; (80014e8 <MRT_LPS22HH_Setup+0x160>)
 8001444:	f008 fd91 	bl	8009f6a <HAL_UART_Transmit>
		  while(1);
 8001448:	e7fe      	b.n	8001448 <MRT_LPS22HH_Setup+0xc0>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 4, HAL_MAX_DELAY);
 800144a:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <MRT_LPS22HH_Setup+0x13c>)
 800144c:	6818      	ldr	r0, [r3, #0]
 800144e:	f04f 33ff 	mov.w	r3, #4294967295
 8001452:	2204      	movs	r2, #4
 8001454:	4925      	ldr	r1, [pc, #148]	; (80014ec <MRT_LPS22HH_Setup+0x164>)
 8001456:	f008 fd88 	bl	8009f6a <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lps22hh_reset_set(&lps_ctx, PROPERTY_ENABLE);
 800145a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145e:	2101      	movs	r1, #1
 8001460:	4618      	mov	r0, r3
 8001462:	f002 fd29 	bl	8003eb8 <lps22hh_reset_set>

	  HAL_Delay(1000);
 8001466:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800146a:	f003 fb6d 	bl	8004b48 <HAL_Delay>

	  do {
	    lps22hh_reset_get(&lps_ctx, &lps_rst);
 800146e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001472:	491f      	ldr	r1, [pc, #124]	; (80014f0 <MRT_LPS22HH_Setup+0x168>)
 8001474:	4618      	mov	r0, r3
 8001476:	f002 fd45 	bl	8003f04 <lps22hh_reset_get>
	  } while (lps_rst);
 800147a:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <MRT_LPS22HH_Setup+0x168>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f5      	bne.n	800146e <MRT_LPS22HH_Setup+0xe6>


	  /* Enable Block Data Update */
	  lps22hh_block_data_update_set(&lps_ctx, PROPERTY_ENABLE);
 8001482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001486:	2101      	movs	r1, #1
 8001488:	4618      	mov	r0, r3
 800148a:	f002 fc2b 	bl	8003ce4 <lps22hh_block_data_update_set>
	  /* Set Output Data Rate */
	  lps22hh_data_rate_set(&lps_ctx, LPS22HH_75_Hz_LOW_NOISE);
 800148e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001492:	2115      	movs	r1, #21
 8001494:	4618      	mov	r0, r3
 8001496:	f002 fc4b 	bl	8003d30 <lps22hh_data_rate_set>
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Ends\n\r", 24, HAL_MAX_DELAY);
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <MRT_LPS22HH_Setup+0x13c>)
 800149c:	6818      	ldr	r0, [r3, #0]
 800149e:	f04f 33ff 	mov.w	r3, #4294967295
 80014a2:	2218      	movs	r2, #24
 80014a4:	4913      	ldr	r1, [pc, #76]	; (80014f4 <MRT_LPS22HH_Setup+0x16c>)
 80014a6:	f008 fd60 	bl	8009f6a <HAL_UART_Transmit>

	  return lps_ctx;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	461c      	mov	r4, r3
 80014ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	}
 80014ba:	68f8      	ldr	r0, [r7, #12]
 80014bc:	3734      	adds	r7, #52	; 0x34
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd90      	pop	{r4, r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200051e4 	.word	0x200051e4
 80014c8:	080165c0 	.word	0x080165c0
 80014cc:	080015b9 	.word	0x080015b9
 80014d0:	080015f3 	.word	0x080015f3
 80014d4:	20000392 	.word	0x20000392
 80014d8:	08016548 	.word	0x08016548
 80014dc:	08016560 	.word	0x08016560
 80014e0:	0801656c 	.word	0x0801656c
 80014e4:	08016580 	.word	0x08016580
 80014e8:	08016588 	.word	0x08016588
 80014ec:	080165a0 	.word	0x080165a0
 80014f0:	20000393 	.word	0x20000393
 80014f4:	080165d8 	.word	0x080165d8

080014f8 <MRT_LPS22HH_getPressure>:



void MRT_LPS22HH_getPressure(stmdev_ctx_t lps_ctx,float* pressure){
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b087      	sub	sp, #28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	1d3c      	adds	r4, r7, #4
 8001500:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001504:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 8001506:	f107 0214 	add.w	r2, r7, #20
 800150a:	1d38      	adds	r0, r7, #4
 800150c:	2301      	movs	r3, #1
 800150e:	2127      	movs	r1, #39	; 0x27
 8001510:	f002 fb86 	bl	8003c20 <lps22hh_read_reg>

	//uint8_t reg;
	//lps22hh_press_flag_data_ready_get(&lps_ctx, &reg);

	if (reg.status.p_da) {
 8001514:	7d3b      	ldrb	r3, [r7, #20]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d015      	beq.n	800154c <MRT_LPS22HH_getPressure+0x54>
	//if (reg) {
	  memset(data_raw_pressure, 0x00, sizeof(uint32_t));
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <MRT_LPS22HH_getPressure+0x5c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2204      	movs	r2, #4
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f010 f851 	bl	80115d0 <memset>
	  lps22hh_pressure_raw_get(&lps_ctx, &data_raw_pressure);
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	4908      	ldr	r1, [pc, #32]	; (8001554 <MRT_LPS22HH_getPressure+0x5c>)
 8001532:	4618      	mov	r0, r3
 8001534:	f002 fc63 	bl	8003dfe <lps22hh_pressure_raw_get>
	  *pressure = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <MRT_LPS22HH_getPressure+0x5c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f002 fb9f 	bl	8003c80 <lps22hh_from_lsb_to_hpa>
 8001542:	eef0 7a40 	vmov.f32	s15, s0
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800154c:	bf00      	nop
 800154e:	371c      	adds	r7, #28
 8001550:	46bd      	mov	sp, r7
 8001552:	bd90      	pop	{r4, r7, pc}
 8001554:	2000038c 	.word	0x2000038c

08001558 <MRT_LPS22HH_getTemperature>:

void MRT_LPS22HH_getTemperature(stmdev_ctx_t lps_ctx,float* temperature_degC){
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b087      	sub	sp, #28
 800155c:	af00      	add	r7, sp, #0
 800155e:	1d3c      	adds	r4, r7, #4
 8001560:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001564:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	//lps22hh_reg_t reg;
	//lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);

	uint8_t reg;
	lps22hh_temp_flag_data_ready_get(&lps_ctx, &reg);
 8001566:	f107 0217 	add.w	r2, r7, #23
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	4611      	mov	r1, r2
 800156e:	4618      	mov	r0, r3
 8001570:	f002 fc2c 	bl	8003dcc <lps22hh_temp_flag_data_ready_get>

	//if (reg.status.t_da) {
	if (reg) {
 8001574:	7dfb      	ldrb	r3, [r7, #23]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d017      	beq.n	80015aa <MRT_LPS22HH_getTemperature+0x52>
	  memset(lps_data_raw_temperature, 0x00, sizeof(int16_t));
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <MRT_LPS22HH_getTemperature+0x5c>)
 800157c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001580:	2202      	movs	r2, #2
 8001582:	2100      	movs	r1, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f010 f823 	bl	80115d0 <memset>
	  lps22hh_temperature_raw_get(&lps_ctx, &lps_data_raw_temperature);
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	4909      	ldr	r1, [pc, #36]	; (80015b4 <MRT_LPS22HH_getTemperature+0x5c>)
 800158e:	4618      	mov	r0, r3
 8001590:	f002 fc5e 	bl	8003e50 <lps22hh_temperature_raw_get>
	  *temperature_degC = lps22hh_from_lsb_to_celsius(lps_data_raw_temperature);
 8001594:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <MRT_LPS22HH_getTemperature+0x5c>)
 8001596:	f9b3 3000 	ldrsh.w	r3, [r3]
 800159a:	4618      	mov	r0, r3
 800159c:	f002 fb88 	bl	8003cb0 <lps22hh_from_lsb_to_celsius>
 80015a0:	eef0 7a40 	vmov.f32	s15, s0
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80015aa:	bf00      	nop
 80015ac:	371c      	adds	r7, #28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd90      	pop	{r4, r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000390 	.word	0x20000390

080015b8 <lps_write>:




static int32_t lps_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af04      	add	r7, sp, #16
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	607a      	str	r2, [r7, #4]
 80015c2:	461a      	mov	r2, r3
 80015c4:	460b      	mov	r3, r1
 80015c6:	72fb      	strb	r3, [r7, #11]
 80015c8:	4613      	mov	r3, r2
 80015ca:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80015cc:	7afb      	ldrb	r3, [r7, #11]
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d4:	9302      	str	r3, [sp, #8]
 80015d6:	893b      	ldrh	r3, [r7, #8]
 80015d8:	9301      	str	r3, [sp, #4]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	2301      	movs	r3, #1
 80015e0:	21b9      	movs	r1, #185	; 0xb9
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	f004 f964 	bl	80058b0 <HAL_I2C_Mem_Write>
  return 0;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <lps_read>:

static int32_t lps_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b088      	sub	sp, #32
 80015f6:	af04      	add	r7, sp, #16
 80015f8:	60f8      	str	r0, [r7, #12]
 80015fa:	607a      	str	r2, [r7, #4]
 80015fc:	461a      	mov	r2, r3
 80015fe:	460b      	mov	r3, r1
 8001600:	72fb      	strb	r3, [r7, #11]
 8001602:	4613      	mov	r3, r2
 8001604:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8001606:	7afb      	ldrb	r3, [r7, #11]
 8001608:	b29a      	uxth	r2, r3
 800160a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160e:	9302      	str	r3, [sp, #8]
 8001610:	893b      	ldrh	r3, [r7, #8]
 8001612:	9301      	str	r3, [sp, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	2301      	movs	r3, #1
 800161a:	21b9      	movs	r1, #185	; 0xb9
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f004 fa41 	bl	8005aa4 <HAL_I2C_Mem_Read>
  return 0;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800162c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800162e:	b0a7      	sub	sp, #156	; 0x9c
 8001630:	af22      	add	r7, sp, #136	; 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001632:	f003 fa47 	bl	8004ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001636:	f000 f96d 	bl	8001914 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800163a:	f000 fced 	bl	8002018 <MX_GPIO_Init>
  MX_ADC1_Init();
 800163e:	f000 f9d5 	bl	80019ec <MX_ADC1_Init>
  MX_I2C1_Init();
 8001642:	f000 fa25 	bl	8001a90 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001646:	f000 fa63 	bl	8001b10 <MX_I2C2_Init>
  MX_I2C3_Init();
 800164a:	f000 faa1 	bl	8001b90 <MX_I2C3_Init>
  MX_SPI2_Init();
 800164e:	f000 fb6b 	bl	8001d28 <MX_SPI2_Init>
  MX_SPI4_Init();
 8001652:	f000 fb9f 	bl	8001d94 <MX_SPI4_Init>
  MX_SPI5_Init();
 8001656:	f000 fbd3 	bl	8001e00 <MX_SPI5_Init>
  MX_TIM2_Init();
 800165a:	f000 fc07 	bl	8001e6c <MX_TIM2_Init>
  MX_UART8_Init();
 800165e:	f000 fc5d 	bl	8001f1c <MX_UART8_Init>
  MX_USART3_UART_Init();
 8001662:	f000 fc85 	bl	8001f70 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001666:	f000 fcad 	bl	8001fc4 <MX_USART6_UART_Init>
  MX_RTC_Init();
 800166a:	f000 fad1 	bl	8001c10 <MX_RTC_Init>
  /*
   * Reinitialize all peripherals
   */

  // reset LEDs
  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	2102      	movs	r1, #2
 8001672:	4883      	ldr	r0, [pc, #524]	; (8001880 <main+0x254>)
 8001674:	f003 ffbe 	bl	80055f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001678:	2200      	movs	r2, #0
 800167a:	2104      	movs	r1, #4
 800167c:	4880      	ldr	r0, [pc, #512]	; (8001880 <main+0x254>)
 800167e:	f003 ffb9 	bl	80055f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 8001682:	2200      	movs	r2, #0
 8001684:	2108      	movs	r1, #8
 8001686:	487e      	ldr	r0, [pc, #504]	; (8001880 <main+0x254>)
 8001688:	f003 ffb4 	bl	80055f4 <HAL_GPIO_WritePin>

  // reset recovery pyro pins
  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, RESET); //PG14 ARMING RCOV
 800168c:	2200      	movs	r2, #0
 800168e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001692:	487c      	ldr	r0, [pc, #496]	; (8001884 <main+0x258>)
 8001694:	f003 ffae 	bl	80055f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 8001698:	2200      	movs	r2, #0
 800169a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800169e:	4879      	ldr	r0, [pc, #484]	; (8001884 <main+0x258>)
 80016a0:	f003 ffa8 	bl	80055f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 80016a4:	2200      	movs	r2, #0
 80016a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016aa:	4876      	ldr	r0, [pc, #472]	; (8001884 <main+0x258>)
 80016ac:	f003 ffa2 	bl	80055f4 <HAL_GPIO_WritePin>

  // reset prop pyro pins
  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, RESET); //PG1 ARMING_PROP
 80016b0:	2200      	movs	r2, #0
 80016b2:	2102      	movs	r1, #2
 80016b4:	4873      	ldr	r0, [pc, #460]	; (8001884 <main+0x258>)
 80016b6:	f003 ff9d 	bl	80055f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 80016ba:	2200      	movs	r2, #0
 80016bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016c0:	4871      	ldr	r0, [pc, #452]	; (8001888 <main+0x25c>)
 80016c2:	f003 ff97 	bl	80055f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 80016c6:	2200      	movs	r2, #0
 80016c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016cc:	486e      	ldr	r0, [pc, #440]	; (8001888 <main+0x25c>)
 80016ce:	f003 ff91 	bl	80055f4 <HAL_GPIO_WritePin>

  // reset 12 V buck converter enable pin (disable converter)
  HAL_GPIO_WritePin(EN_12V_Buck_GPIO_Port, EN_12V_Buck_Pin, RESET); //PE2 Buck converter enable
 80016d2:	2200      	movs	r2, #0
 80016d4:	2104      	movs	r1, #4
 80016d6:	486d      	ldr	r0, [pc, #436]	; (800188c <main+0x260>)
 80016d8:	f003 ff8c 	bl	80055f4 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET); //This was in the previous code
  //HAL_GPIO_WritePin(OUT_Prop_ActuatedVent_Gate_GPIO_Port, OUT_Prop_ActuatedVent_Gate_Pin, RESET); //PE7 (MAY NOT BE THE RIGHT ONE)


  // reset payload EN signal
  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 80016dc:	2200      	movs	r2, #0
 80016de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016e2:	486a      	ldr	r0, [pc, #424]	; (800188c <main+0x260>)
 80016e4:	f003 ff86 	bl	80055f4 <HAL_GPIO_WritePin>

  // set CS pin for thermocouple chip high
  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

  // set power off for VR
  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 80016e8:	2200      	movs	r2, #0
 80016ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016ee:	4865      	ldr	r0, [pc, #404]	; (8001884 <main+0x258>)
 80016f0:	f003 ff80 	bl	80055f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 80016f4:	2200      	movs	r2, #0
 80016f6:	2180      	movs	r1, #128	; 0x80
 80016f8:	4865      	ldr	r0, [pc, #404]	; (8001890 <main+0x264>)
 80016fa:	f003 ff7b 	bl	80055f4 <HAL_GPIO_WritePin>
}¸
#define HAL_UART_Transmit(u,b,size,HAL_MAX_DELAY)		CDC_Transmit_FS(b, size); //TODO if we use USB instead of huart for debugging
*/


  checkForI2CDevices(huart8,hi2c1);
 80016fe:	4e65      	ldr	r6, [pc, #404]	; (8001894 <main+0x268>)
 8001700:	4a65      	ldr	r2, [pc, #404]	; (8001898 <main+0x26c>)
 8001702:	ab0d      	add	r3, sp, #52	; 0x34
 8001704:	4611      	mov	r1, r2
 8001706:	2254      	movs	r2, #84	; 0x54
 8001708:	4618      	mov	r0, r3
 800170a:	f00f ff39 	bl	8011580 <memcpy>
 800170e:	466d      	mov	r5, sp
 8001710:	f106 0410 	add.w	r4, r6, #16
 8001714:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001716:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001718:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800171a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800171c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800171e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001720:	6823      	ldr	r3, [r4, #0]
 8001722:	602b      	str	r3, [r5, #0]
 8001724:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001728:	f001 ff52 	bl	80035d0 <checkForI2CDevices>
  checkForI2CDevices(huart8,hi2c2);
 800172c:	4e59      	ldr	r6, [pc, #356]	; (8001894 <main+0x268>)
 800172e:	4a5b      	ldr	r2, [pc, #364]	; (800189c <main+0x270>)
 8001730:	ab0d      	add	r3, sp, #52	; 0x34
 8001732:	4611      	mov	r1, r2
 8001734:	2254      	movs	r2, #84	; 0x54
 8001736:	4618      	mov	r0, r3
 8001738:	f00f ff22 	bl	8011580 <memcpy>
 800173c:	466d      	mov	r5, sp
 800173e:	f106 0410 	add.w	r4, r6, #16
 8001742:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001744:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001748:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800174c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174e:	6823      	ldr	r3, [r4, #0]
 8001750:	602b      	str	r3, [r5, #0]
 8001752:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001756:	f001 ff3b 	bl	80035d0 <checkForI2CDevices>
  checkForI2CDevices(huart8,hi2c3);
 800175a:	4e4e      	ldr	r6, [pc, #312]	; (8001894 <main+0x268>)
 800175c:	4a50      	ldr	r2, [pc, #320]	; (80018a0 <main+0x274>)
 800175e:	ab0d      	add	r3, sp, #52	; 0x34
 8001760:	4611      	mov	r1, r2
 8001762:	2254      	movs	r2, #84	; 0x54
 8001764:	4618      	mov	r0, r3
 8001766:	f00f ff0b 	bl	8011580 <memcpy>
 800176a:	466d      	mov	r5, sp
 800176c:	f106 0410 	add.w	r4, r6, #16
 8001770:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001772:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001774:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001776:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001778:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800177a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800177c:	6823      	ldr	r3, [r4, #0]
 800177e:	602b      	str	r3, [r5, #0]
 8001780:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001784:	f001 ff24 	bl	80035d0 <checkForI2CDevices>

  /*
   * For LSM6DSR
   *-Enable float formatting for sprintf (go to Project->Properties->C/C++ Build->Settings->MCU Settings->Check the box "Use float with printf")
   */
  lsm_ctx = MRT_LSM6DSR_Setup(&hi2c3,&DEBUG_USART);
 8001788:	4c46      	ldr	r4, [pc, #280]	; (80018a4 <main+0x278>)
 800178a:	463b      	mov	r3, r7
 800178c:	4a41      	ldr	r2, [pc, #260]	; (8001894 <main+0x268>)
 800178e:	4944      	ldr	r1, [pc, #272]	; (80018a0 <main+0x274>)
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fc75 	bl	8001080 <MRT_LSM6DSR_Setup>
 8001796:	463b      	mov	r3, r7
 8001798:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800179c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

   /*
    * For LPS22HH
    *-Enable float formatting for sprintf (go to Project->Properties->C/C++ Build->Settings->MCU Settings->Check the box "Use float with printf")
    */
  lps_ctx = MRT_LPS22HH_Setup(&hi2c3,&DEBUG_USART);
 80017a0:	4c41      	ldr	r4, [pc, #260]	; (80018a8 <main+0x27c>)
 80017a2:	463b      	mov	r3, r7
 80017a4:	4a3b      	ldr	r2, [pc, #236]	; (8001894 <main+0x268>)
 80017a6:	493e      	ldr	r1, [pc, #248]	; (80018a0 <main+0x274>)
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fded 	bl	8001388 <MRT_LPS22HH_Setup>
 80017ae:	463b      	mov	r3, r7
 80017b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    * For the GPS:
    * -huart6 on v4.3
    * -Set its uart to 9600)
    *
    */
   GPS_init(&huart6, &huart8);
 80017b8:	4936      	ldr	r1, [pc, #216]	; (8001894 <main+0x268>)
 80017ba:	483c      	ldr	r0, [pc, #240]	; (80018ac <main+0x280>)
 80017bc:	f001 feea 	bl	8003594 <GPS_init>
   * -Define what you want in the alarms callback functions (check the MRT_RTOS_f4xx .h file)
   * -(Optional) Setup alarm A and the clock time in .ioc
   * The rest have been taken care of
   * You can access the flag of both alarm A and B with the variables flagA and flagB
   */
  MRT_SetupRTOS(DEBUG_USART,10);
 80017c0:	4e34      	ldr	r6, [pc, #208]	; (8001894 <main+0x268>)
 80017c2:	230a      	movs	r3, #10
 80017c4:	930d      	str	r3, [sp, #52]	; 0x34
 80017c6:	466d      	mov	r5, sp
 80017c8:	f106 0410 	add.w	r4, r6, #16
 80017cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017d8:	6823      	ldr	r3, [r4, #0]
 80017da:	602b      	str	r3, [r5, #0]
 80017dc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80017e0:	f003 f896 	bl	8004910 <MRT_SetupRTOS>

  HAL_UART_Transmit(&DEBUG_USART,"\r\n\r\nStarting FC\r\n\r\n",19,HAL_MAX_DELAY);
 80017e4:	f04f 33ff 	mov.w	r3, #4294967295
 80017e8:	2213      	movs	r2, #19
 80017ea:	4931      	ldr	r1, [pc, #196]	; (80018b0 <main+0x284>)
 80017ec:	4829      	ldr	r0, [pc, #164]	; (8001894 <main+0x268>)
 80017ee:	f008 fbbc 	bl	8009f6a <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80017f2:	f00b ff43 	bl	800d67c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of MEMORY */
  MEMORYHandle = osMutexNew(&MEMORY_attributes);
 80017f6:	482f      	ldr	r0, [pc, #188]	; (80018b4 <main+0x288>)
 80017f8:	f00c f848 	bl	800d88c <osMutexNew>
 80017fc:	4603      	mov	r3, r0
 80017fe:	4a2e      	ldr	r2, [pc, #184]	; (80018b8 <main+0x28c>)
 8001800:	6013      	str	r3, [r2, #0]

  /* creation of TELEMETRY */
  TELEMETRYHandle = osMutexNew(&TELEMETRY_attributes);
 8001802:	482e      	ldr	r0, [pc, #184]	; (80018bc <main+0x290>)
 8001804:	f00c f842 	bl	800d88c <osMutexNew>
 8001808:	4603      	mov	r3, r0
 800180a:	4a2d      	ldr	r2, [pc, #180]	; (80018c0 <main+0x294>)
 800180c:	6013      	str	r3, [r2, #0]

  /* creation of SENSOR_POLLING */
  SENSOR_POLLINGHandle = osMutexNew(&SENSOR_POLLING_attributes);
 800180e:	482d      	ldr	r0, [pc, #180]	; (80018c4 <main+0x298>)
 8001810:	f00c f83c 	bl	800d88c <osMutexNew>
 8001814:	4603      	mov	r3, r0
 8001816:	4a2c      	ldr	r2, [pc, #176]	; (80018c8 <main+0x29c>)
 8001818:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Memory0 */
  Memory0Handle = osThreadNew(StartMemory0, NULL, &Memory0_attributes);
 800181a:	4a2c      	ldr	r2, [pc, #176]	; (80018cc <main+0x2a0>)
 800181c:	2100      	movs	r1, #0
 800181e:	482c      	ldr	r0, [pc, #176]	; (80018d0 <main+0x2a4>)
 8001820:	f00b ff76 	bl	800d710 <osThreadNew>
 8001824:	4603      	mov	r3, r0
 8001826:	4a2b      	ldr	r2, [pc, #172]	; (80018d4 <main+0x2a8>)
 8001828:	6013      	str	r3, [r2, #0]

  /* creation of Ejection1 */
  Ejection1Handle = osThreadNew(StartEjection1, NULL, &Ejection1_attributes);
 800182a:	4a2b      	ldr	r2, [pc, #172]	; (80018d8 <main+0x2ac>)
 800182c:	2100      	movs	r1, #0
 800182e:	482b      	ldr	r0, [pc, #172]	; (80018dc <main+0x2b0>)
 8001830:	f00b ff6e 	bl	800d710 <osThreadNew>
 8001834:	4603      	mov	r3, r0
 8001836:	4a2a      	ldr	r2, [pc, #168]	; (80018e0 <main+0x2b4>)
 8001838:	6013      	str	r3, [r2, #0]

  /* creation of Telemetry2 */
  Telemetry2Handle = osThreadNew(StartTelemetry2, NULL, &Telemetry2_attributes);
 800183a:	4a2a      	ldr	r2, [pc, #168]	; (80018e4 <main+0x2b8>)
 800183c:	2100      	movs	r1, #0
 800183e:	482a      	ldr	r0, [pc, #168]	; (80018e8 <main+0x2bc>)
 8001840:	f00b ff66 	bl	800d710 <osThreadNew>
 8001844:	4603      	mov	r3, r0
 8001846:	4a29      	ldr	r2, [pc, #164]	; (80018ec <main+0x2c0>)
 8001848:	6013      	str	r3, [r2, #0]

  /* creation of Sensors3 */
  Sensors3Handle = osThreadNew(StartSensors3, NULL, &Sensors3_attributes);
 800184a:	4a29      	ldr	r2, [pc, #164]	; (80018f0 <main+0x2c4>)
 800184c:	2100      	movs	r1, #0
 800184e:	4829      	ldr	r0, [pc, #164]	; (80018f4 <main+0x2c8>)
 8001850:	f00b ff5e 	bl	800d710 <osThreadNew>
 8001854:	4603      	mov	r3, r0
 8001856:	4a28      	ldr	r2, [pc, #160]	; (80018f8 <main+0x2cc>)
 8001858:	6013      	str	r3, [r2, #0]

  /* creation of Propulsion4 */
  Propulsion4Handle = osThreadNew(StartPropulsion4, NULL, &Propulsion4_attributes);
 800185a:	4a28      	ldr	r2, [pc, #160]	; (80018fc <main+0x2d0>)
 800185c:	2100      	movs	r1, #0
 800185e:	4828      	ldr	r0, [pc, #160]	; (8001900 <main+0x2d4>)
 8001860:	f00b ff56 	bl	800d710 <osThreadNew>
 8001864:	4603      	mov	r3, r0
 8001866:	4a27      	ldr	r2, [pc, #156]	; (8001904 <main+0x2d8>)
 8001868:	6013      	str	r3, [r2, #0]

  /* creation of Printing */
  PrintingHandle = osThreadNew(StartPrinting, NULL, &Printing_attributes);
 800186a:	4a27      	ldr	r2, [pc, #156]	; (8001908 <main+0x2dc>)
 800186c:	2100      	movs	r1, #0
 800186e:	4827      	ldr	r0, [pc, #156]	; (800190c <main+0x2e0>)
 8001870:	f00b ff4e 	bl	800d710 <osThreadNew>
 8001874:	4603      	mov	r3, r0
 8001876:	4a26      	ldr	r2, [pc, #152]	; (8001910 <main+0x2e4>)
 8001878:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800187a:	f00b ff23 	bl	800d6c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800187e:	e7fe      	b.n	800187e <main+0x252>
 8001880:	40020800 	.word	0x40020800
 8001884:	40021800 	.word	0x40021800
 8001888:	40021400 	.word	0x40021400
 800188c:	40021000 	.word	0x40021000
 8001890:	40020c00 	.word	0x40020c00
 8001894:	20005540 	.word	0x20005540
 8001898:	20005350 	.word	0x20005350
 800189c:	200053a4 	.word	0x200053a4
 80018a0:	200051ec 	.word	0x200051ec
 80018a4:	20005628 	.word	0x20005628
 80018a8:	20005618 	.word	0x20005618
 80018ac:	20005584 	.word	0x20005584
 80018b0:	08016658 	.word	0x08016658
 80018b4:	08016a58 	.word	0x08016a58
 80018b8:	20005448 	.word	0x20005448
 80018bc:	08016a68 	.word	0x08016a68
 80018c0:	20005658 	.word	0x20005658
 80018c4:	08016a78 	.word	0x08016a78
 80018c8:	200054c4 	.word	0x200054c4
 80018cc:	08016980 	.word	0x08016980
 80018d0:	08002329 	.word	0x08002329
 80018d4:	200053f8 	.word	0x200053f8
 80018d8:	080169a4 	.word	0x080169a4
 80018dc:	08002339 	.word	0x08002339
 80018e0:	20005538 	.word	0x20005538
 80018e4:	080169c8 	.word	0x080169c8
 80018e8:	08002345 	.word	0x08002345
 80018ec:	2000553c 	.word	0x2000553c
 80018f0:	080169ec 	.word	0x080169ec
 80018f4:	08002351 	.word	0x08002351
 80018f8:	20005614 	.word	0x20005614
 80018fc:	08016a10 	.word	0x08016a10
 8001900:	08002449 	.word	0x08002449
 8001904:	20005634 	.word	0x20005634
 8001908:	08016a34 	.word	0x08016a34
 800190c:	08002455 	.word	0x08002455
 8001910:	200054cc 	.word	0x200054cc

08001914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b094      	sub	sp, #80	; 0x50
 8001918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800191a:	f107 0320 	add.w	r3, r7, #32
 800191e:	2230      	movs	r2, #48	; 0x30
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f00f fe54 	bl	80115d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001928:	f107 030c 	add.w	r3, r7, #12
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001938:	2300      	movs	r3, #0
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	4b29      	ldr	r3, [pc, #164]	; (80019e4 <SystemClock_Config+0xd0>)
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	4a28      	ldr	r2, [pc, #160]	; (80019e4 <SystemClock_Config+0xd0>)
 8001942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001946:	6413      	str	r3, [r2, #64]	; 0x40
 8001948:	4b26      	ldr	r3, [pc, #152]	; (80019e4 <SystemClock_Config+0xd0>)
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001954:	2300      	movs	r3, #0
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	4b23      	ldr	r3, [pc, #140]	; (80019e8 <SystemClock_Config+0xd4>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001960:	4a21      	ldr	r2, [pc, #132]	; (80019e8 <SystemClock_Config+0xd4>)
 8001962:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	4b1f      	ldr	r3, [pc, #124]	; (80019e8 <SystemClock_Config+0xd4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001974:	2309      	movs	r3, #9
 8001976:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001978:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800197e:	2301      	movs	r3, #1
 8001980:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001982:	2302      	movs	r3, #2
 8001984:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001986:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800198a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800198c:	2308      	movs	r3, #8
 800198e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001990:	2348      	movs	r3, #72	; 0x48
 8001992:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001994:	2302      	movs	r3, #2
 8001996:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001998:	2303      	movs	r3, #3
 800199a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800199c:	f107 0320 	add.w	r3, r7, #32
 80019a0:	4618      	mov	r0, r3
 80019a2:	f006 f977 	bl	8007c94 <HAL_RCC_OscConfig>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80019ac:	f000 feb6 	bl	800271c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019b0:	230f      	movs	r3, #15
 80019b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80019b4:	2301      	movs	r3, #1
 80019b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019c6:	f107 030c 	add.w	r3, r7, #12
 80019ca:	2100      	movs	r1, #0
 80019cc:	4618      	mov	r0, r3
 80019ce:	f006 fbd9 	bl	8008184 <HAL_RCC_ClockConfig>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80019d8:	f000 fea0 	bl	800271c <Error_Handler>
  }
}
 80019dc:	bf00      	nop
 80019de:	3750      	adds	r7, #80	; 0x50
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40007000 	.word	0x40007000

080019ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019f2:	463b      	mov	r3, r7
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019fe:	4b21      	ldr	r3, [pc, #132]	; (8001a84 <MX_ADC1_Init+0x98>)
 8001a00:	4a21      	ldr	r2, [pc, #132]	; (8001a88 <MX_ADC1_Init+0x9c>)
 8001a02:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a04:	4b1f      	ldr	r3, [pc, #124]	; (8001a84 <MX_ADC1_Init+0x98>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a0a:	4b1e      	ldr	r3, [pc, #120]	; (8001a84 <MX_ADC1_Init+0x98>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a10:	4b1c      	ldr	r3, [pc, #112]	; (8001a84 <MX_ADC1_Init+0x98>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a16:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <MX_ADC1_Init+0x98>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a1c:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <MX_ADC1_Init+0x98>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a24:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <MX_ADC1_Init+0x98>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a2a:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <MX_ADC1_Init+0x98>)
 8001a2c:	4a17      	ldr	r2, [pc, #92]	; (8001a8c <MX_ADC1_Init+0xa0>)
 8001a2e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a30:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <MX_ADC1_Init+0x98>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a36:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <MX_ADC1_Init+0x98>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a3c:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <MX_ADC1_Init+0x98>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <MX_ADC1_Init+0x98>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a4a:	480e      	ldr	r0, [pc, #56]	; (8001a84 <MX_ADC1_Init+0x98>)
 8001a4c:	f003 f8a0 	bl	8004b90 <HAL_ADC_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001a56:	f000 fe61 	bl	800271c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001a5a:	2306      	movs	r3, #6
 8001a5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a66:	463b      	mov	r3, r7
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4806      	ldr	r0, [pc, #24]	; (8001a84 <MX_ADC1_Init+0x98>)
 8001a6c:	f003 f8d4 	bl	8004c18 <HAL_ADC_ConfigChannel>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001a76:	f000 fe51 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	200053fc 	.word	0x200053fc
 8001a88:	40012000 	.word	0x40012000
 8001a8c:	0f000001 	.word	0x0f000001

08001a90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a94:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <MX_I2C1_Init+0x74>)
 8001a96:	4a1c      	ldr	r2, [pc, #112]	; (8001b08 <MX_I2C1_Init+0x78>)
 8001a98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a9a:	4b1a      	ldr	r3, [pc, #104]	; (8001b04 <MX_I2C1_Init+0x74>)
 8001a9c:	4a1b      	ldr	r2, [pc, #108]	; (8001b0c <MX_I2C1_Init+0x7c>)
 8001a9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001aa0:	4b18      	ldr	r3, [pc, #96]	; (8001b04 <MX_I2C1_Init+0x74>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001aa6:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <MX_I2C1_Init+0x74>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aac:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <MX_I2C1_Init+0x74>)
 8001aae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ab2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ab4:	4b13      	ldr	r3, [pc, #76]	; (8001b04 <MX_I2C1_Init+0x74>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001aba:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <MX_I2C1_Init+0x74>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ac0:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <MX_I2C1_Init+0x74>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ac6:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <MX_I2C1_Init+0x74>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001acc:	480d      	ldr	r0, [pc, #52]	; (8001b04 <MX_I2C1_Init+0x74>)
 8001ace:	f003 fdab 	bl	8005628 <HAL_I2C_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ad8:	f000 fe20 	bl	800271c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001adc:	2100      	movs	r1, #0
 8001ade:	4809      	ldr	r0, [pc, #36]	; (8001b04 <MX_I2C1_Init+0x74>)
 8001ae0:	f004 fec5 	bl	800686e <HAL_I2CEx_ConfigAnalogFilter>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001aea:	f000 fe17 	bl	800271c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001aee:	2100      	movs	r1, #0
 8001af0:	4804      	ldr	r0, [pc, #16]	; (8001b04 <MX_I2C1_Init+0x74>)
 8001af2:	f004 fef8 	bl	80068e6 <HAL_I2CEx_ConfigDigitalFilter>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001afc:	f000 fe0e 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b00:	bf00      	nop
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20005350 	.word	0x20005350
 8001b08:	40005400 	.word	0x40005400
 8001b0c:	000186a0 	.word	0x000186a0

08001b10 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b14:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <MX_I2C2_Init+0x74>)
 8001b16:	4a1c      	ldr	r2, [pc, #112]	; (8001b88 <MX_I2C2_Init+0x78>)
 8001b18:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001b1a:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <MX_I2C2_Init+0x74>)
 8001b1c:	4a1b      	ldr	r2, [pc, #108]	; (8001b8c <MX_I2C2_Init+0x7c>)
 8001b1e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b20:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <MX_I2C2_Init+0x74>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b26:	4b17      	ldr	r3, [pc, #92]	; (8001b84 <MX_I2C2_Init+0x74>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b2c:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <MX_I2C2_Init+0x74>)
 8001b2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b32:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b34:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <MX_I2C2_Init+0x74>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b3a:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <MX_I2C2_Init+0x74>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b40:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <MX_I2C2_Init+0x74>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b46:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <MX_I2C2_Init+0x74>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b4c:	480d      	ldr	r0, [pc, #52]	; (8001b84 <MX_I2C2_Init+0x74>)
 8001b4e:	f003 fd6b 	bl	8005628 <HAL_I2C_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001b58:	f000 fde0 	bl	800271c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4809      	ldr	r0, [pc, #36]	; (8001b84 <MX_I2C2_Init+0x74>)
 8001b60:	f004 fe85 	bl	800686e <HAL_I2CEx_ConfigAnalogFilter>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001b6a:	f000 fdd7 	bl	800271c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4804      	ldr	r0, [pc, #16]	; (8001b84 <MX_I2C2_Init+0x74>)
 8001b72:	f004 feb8 	bl	80068e6 <HAL_I2CEx_ConfigDigitalFilter>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001b7c:	f000 fdce 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	200053a4 	.word	0x200053a4
 8001b88:	40005800 	.word	0x40005800
 8001b8c:	000186a0 	.word	0x000186a0

08001b90 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001b94:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <MX_I2C3_Init+0x74>)
 8001b96:	4a1c      	ldr	r2, [pc, #112]	; (8001c08 <MX_I2C3_Init+0x78>)
 8001b98:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <MX_I2C3_Init+0x74>)
 8001b9c:	4a1b      	ldr	r2, [pc, #108]	; (8001c0c <MX_I2C3_Init+0x7c>)
 8001b9e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ba0:	4b18      	ldr	r3, [pc, #96]	; (8001c04 <MX_I2C3_Init+0x74>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001ba6:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <MX_I2C3_Init+0x74>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bac:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <MX_I2C3_Init+0x74>)
 8001bae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bb2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bb4:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <MX_I2C3_Init+0x74>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001bba:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <MX_I2C3_Init+0x74>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bc0:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <MX_I2C3_Init+0x74>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bc6:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <MX_I2C3_Init+0x74>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001bcc:	480d      	ldr	r0, [pc, #52]	; (8001c04 <MX_I2C3_Init+0x74>)
 8001bce:	f003 fd2b 	bl	8005628 <HAL_I2C_Init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001bd8:	f000 fda0 	bl	800271c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4809      	ldr	r0, [pc, #36]	; (8001c04 <MX_I2C3_Init+0x74>)
 8001be0:	f004 fe45 	bl	800686e <HAL_I2CEx_ConfigAnalogFilter>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001bea:	f000 fd97 	bl	800271c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001bee:	2100      	movs	r1, #0
 8001bf0:	4804      	ldr	r0, [pc, #16]	; (8001c04 <MX_I2C3_Init+0x74>)
 8001bf2:	f004 fe78 	bl	80068e6 <HAL_I2CEx_ConfigDigitalFilter>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001bfc:	f000 fd8e 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	200051ec 	.word	0x200051ec
 8001c08:	40005c00 	.word	0x40005c00
 8001c0c:	000186a0 	.word	0x000186a0

08001c10 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b090      	sub	sp, #64	; 0x40
 8001c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001c16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	609a      	str	r2, [r3, #8]
 8001c22:	60da      	str	r2, [r3, #12]
 8001c24:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001c26:	2300      	movs	r3, #0
 8001c28:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001c2a:	463b      	mov	r3, r7
 8001c2c:	2228      	movs	r2, #40	; 0x28
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f00f fccd 	bl	80115d0 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c36:	4b3a      	ldr	r3, [pc, #232]	; (8001d20 <MX_RTC_Init+0x110>)
 8001c38:	4a3a      	ldr	r2, [pc, #232]	; (8001d24 <MX_RTC_Init+0x114>)
 8001c3a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c3c:	4b38      	ldr	r3, [pc, #224]	; (8001d20 <MX_RTC_Init+0x110>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001c42:	4b37      	ldr	r3, [pc, #220]	; (8001d20 <MX_RTC_Init+0x110>)
 8001c44:	227f      	movs	r2, #127	; 0x7f
 8001c46:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001c48:	4b35      	ldr	r3, [pc, #212]	; (8001d20 <MX_RTC_Init+0x110>)
 8001c4a:	22ff      	movs	r2, #255	; 0xff
 8001c4c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c4e:	4b34      	ldr	r3, [pc, #208]	; (8001d20 <MX_RTC_Init+0x110>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c54:	4b32      	ldr	r3, [pc, #200]	; (8001d20 <MX_RTC_Init+0x110>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c5a:	4b31      	ldr	r3, [pc, #196]	; (8001d20 <MX_RTC_Init+0x110>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c60:	482f      	ldr	r0, [pc, #188]	; (8001d20 <MX_RTC_Init+0x110>)
 8001c62:	f006 fe79 	bl	8008958 <HAL_RTC_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001c6c:	f000 fd56 	bl	800271c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c86:	2300      	movs	r3, #0
 8001c88:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c8e:	2201      	movs	r2, #1
 8001c90:	4619      	mov	r1, r3
 8001c92:	4823      	ldr	r0, [pc, #140]	; (8001d20 <MX_RTC_Init+0x110>)
 8001c94:	f006 fef1 	bl	8008a7a <HAL_RTC_SetTime>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001c9e:	f000 fd3d 	bl	800271c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001cba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4817      	ldr	r0, [pc, #92]	; (8001d20 <MX_RTC_Init+0x110>)
 8001cc4:	f006 ff96 	bl	8008bf4 <HAL_RTC_SetDate>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001cce:	f000 fd25 	bl	800271c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001cfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d02:	463b      	mov	r3, r7
 8001d04:	2201      	movs	r2, #1
 8001d06:	4619      	mov	r1, r3
 8001d08:	4805      	ldr	r0, [pc, #20]	; (8001d20 <MX_RTC_Init+0x110>)
 8001d0a:	f007 f81b 	bl	8008d44 <HAL_RTC_SetAlarm_IT>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001d14:	f000 fd02 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001d18:	bf00      	nop
 8001d1a:	3740      	adds	r7, #64	; 0x40
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	200054a4 	.word	0x200054a4
 8001d24:	40002800 	.word	0x40002800

08001d28 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001d2c:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <MX_SPI2_Init+0x64>)
 8001d2e:	4a18      	ldr	r2, [pc, #96]	; (8001d90 <MX_SPI2_Init+0x68>)
 8001d30:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d32:	4b16      	ldr	r3, [pc, #88]	; (8001d8c <MX_SPI2_Init+0x64>)
 8001d34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d38:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d3a:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <MX_SPI2_Init+0x64>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d40:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <MX_SPI2_Init+0x64>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d46:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <MX_SPI2_Init+0x64>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <MX_SPI2_Init+0x64>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d52:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <MX_SPI2_Init+0x64>)
 8001d54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d58:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <MX_SPI2_Init+0x64>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d60:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <MX_SPI2_Init+0x64>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d66:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <MX_SPI2_Init+0x64>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d6c:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <MX_SPI2_Init+0x64>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001d72:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <MX_SPI2_Init+0x64>)
 8001d74:	220a      	movs	r2, #10
 8001d76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d78:	4804      	ldr	r0, [pc, #16]	; (8001d8c <MX_SPI2_Init+0x64>)
 8001d7a:	f007 fa35 	bl	80091e8 <HAL_SPI_Init>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001d84:	f000 fcca 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20005240 	.word	0x20005240
 8001d90:	40003800 	.word	0x40003800

08001d94 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001d98:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <MX_SPI4_Init+0x64>)
 8001d9a:	4a18      	ldr	r2, [pc, #96]	; (8001dfc <MX_SPI4_Init+0x68>)
 8001d9c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001d9e:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <MX_SPI4_Init+0x64>)
 8001da0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001da4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001da6:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <MX_SPI4_Init+0x64>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dac:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <MX_SPI4_Init+0x64>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001db2:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <MX_SPI4_Init+0x64>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001db8:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <MX_SPI4_Init+0x64>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <MX_SPI4_Init+0x64>)
 8001dc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dc4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dc6:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <MX_SPI4_Init+0x64>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dcc:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <MX_SPI4_Init+0x64>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dd2:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <MX_SPI4_Init+0x64>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dd8:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <MX_SPI4_Init+0x64>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001dde:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <MX_SPI4_Init+0x64>)
 8001de0:	220a      	movs	r2, #10
 8001de2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001de4:	4804      	ldr	r0, [pc, #16]	; (8001df8 <MX_SPI4_Init+0x64>)
 8001de6:	f007 f9ff 	bl	80091e8 <HAL_SPI_Init>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001df0:	f000 fc94 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	2000544c 	.word	0x2000544c
 8001dfc:	40013400 	.word	0x40013400

08001e00 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001e04:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <MX_SPI5_Init+0x64>)
 8001e06:	4a18      	ldr	r2, [pc, #96]	; (8001e68 <MX_SPI5_Init+0x68>)
 8001e08:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001e0a:	4b16      	ldr	r3, [pc, #88]	; (8001e64 <MX_SPI5_Init+0x64>)
 8001e0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e10:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001e12:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <MX_SPI5_Init+0x64>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e18:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <MX_SPI5_Init+0x64>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e1e:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <MX_SPI5_Init+0x64>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e24:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <MX_SPI5_Init+0x64>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <MX_SPI5_Init+0x64>)
 8001e2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e30:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e32:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <MX_SPI5_Init+0x64>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e38:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <MX_SPI5_Init+0x64>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e3e:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <MX_SPI5_Init+0x64>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e44:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <MX_SPI5_Init+0x64>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001e4a:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <MX_SPI5_Init+0x64>)
 8001e4c:	220a      	movs	r2, #10
 8001e4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001e50:	4804      	ldr	r0, [pc, #16]	; (8001e64 <MX_SPI5_Init+0x64>)
 8001e52:	f007 f9c9 	bl	80091e8 <HAL_SPI_Init>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001e5c:	f000 fc5e 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001e60:	bf00      	nop
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	200052a0 	.word	0x200052a0
 8001e68:	40015000 	.word	0x40015000

08001e6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08a      	sub	sp, #40	; 0x28
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e72:	f107 0320 	add.w	r3, r7, #32
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e7c:	1d3b      	adds	r3, r7, #4
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	609a      	str	r2, [r3, #8]
 8001e86:	60da      	str	r2, [r3, #12]
 8001e88:	611a      	str	r2, [r3, #16]
 8001e8a:	615a      	str	r2, [r3, #20]
 8001e8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e8e:	4b22      	ldr	r3, [pc, #136]	; (8001f18 <MX_TIM2_Init+0xac>)
 8001e90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e94:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e96:	4b20      	ldr	r3, [pc, #128]	; (8001f18 <MX_TIM2_Init+0xac>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e9c:	4b1e      	ldr	r3, [pc, #120]	; (8001f18 <MX_TIM2_Init+0xac>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001ea2:	4b1d      	ldr	r3, [pc, #116]	; (8001f18 <MX_TIM2_Init+0xac>)
 8001ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eaa:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <MX_TIM2_Init+0xac>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb0:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <MX_TIM2_Init+0xac>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001eb6:	4818      	ldr	r0, [pc, #96]	; (8001f18 <MX_TIM2_Init+0xac>)
 8001eb8:	f007 fae8 	bl	800948c <HAL_TIM_PWM_Init>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001ec2:	f000 fc2b 	bl	800271c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ece:	f107 0320 	add.w	r3, r7, #32
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4810      	ldr	r0, [pc, #64]	; (8001f18 <MX_TIM2_Init+0xac>)
 8001ed6:	f007 ff6b 	bl	8009db0 <HAL_TIMEx_MasterConfigSynchronization>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001ee0:	f000 fc1c 	bl	800271c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ee4:	2360      	movs	r3, #96	; 0x60
 8001ee6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eec:	2300      	movs	r3, #0
 8001eee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ef4:	1d3b      	adds	r3, r7, #4
 8001ef6:	2208      	movs	r2, #8
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4807      	ldr	r0, [pc, #28]	; (8001f18 <MX_TIM2_Init+0xac>)
 8001efc:	f007 fc1e 	bl	800973c <HAL_TIM_PWM_ConfigChannel>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001f06:	f000 fc09 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f0a:	4803      	ldr	r0, [pc, #12]	; (8001f18 <MX_TIM2_Init+0xac>)
 8001f0c:	f000 fe5c 	bl	8002bc8 <HAL_TIM_MspPostInit>

}
 8001f10:	bf00      	nop
 8001f12:	3728      	adds	r7, #40	; 0x28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	200055cc 	.word	0x200055cc

08001f1c <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001f20:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <MX_UART8_Init+0x4c>)
 8001f22:	4a12      	ldr	r2, [pc, #72]	; (8001f6c <MX_UART8_Init+0x50>)
 8001f24:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001f26:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <MX_UART8_Init+0x4c>)
 8001f28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f2c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <MX_UART8_Init+0x4c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <MX_UART8_Init+0x4c>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001f3a:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <MX_UART8_Init+0x4c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001f40:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <MX_UART8_Init+0x4c>)
 8001f42:	220c      	movs	r2, #12
 8001f44:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f46:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <MX_UART8_Init+0x4c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <MX_UART8_Init+0x4c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001f52:	4805      	ldr	r0, [pc, #20]	; (8001f68 <MX_UART8_Init+0x4c>)
 8001f54:	f007 ffbc 	bl	8009ed0 <HAL_UART_Init>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8001f5e:	f000 fbdd 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20005540 	.word	0x20005540
 8001f6c:	40007c00 	.word	0x40007c00

08001f70 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <MX_USART3_UART_Init+0x4c>)
 8001f76:	4a12      	ldr	r2, [pc, #72]	; (8001fc0 <MX_USART3_UART_Init+0x50>)
 8001f78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <MX_USART3_UART_Init+0x4c>)
 8001f7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f82:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <MX_USART3_UART_Init+0x4c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <MX_USART3_UART_Init+0x4c>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f8e:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <MX_USART3_UART_Init+0x4c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f94:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <MX_USART3_UART_Init+0x4c>)
 8001f96:	220c      	movs	r2, #12
 8001f98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f9a:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <MX_USART3_UART_Init+0x4c>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <MX_USART3_UART_Init+0x4c>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fa6:	4805      	ldr	r0, [pc, #20]	; (8001fbc <MX_USART3_UART_Init+0x4c>)
 8001fa8:	f007 ff92 	bl	8009ed0 <HAL_UART_Init>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001fb2:	f000 fbb3 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	200052f8 	.word	0x200052f8
 8001fc0:	40004800 	.word	0x40004800

08001fc4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001fc8:	4b11      	ldr	r3, [pc, #68]	; (8002010 <MX_USART6_UART_Init+0x4c>)
 8001fca:	4a12      	ldr	r2, [pc, #72]	; (8002014 <MX_USART6_UART_Init+0x50>)
 8001fcc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001fce:	4b10      	ldr	r3, [pc, #64]	; (8002010 <MX_USART6_UART_Init+0x4c>)
 8001fd0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001fd4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001fd6:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <MX_USART6_UART_Init+0x4c>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <MX_USART6_UART_Init+0x4c>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <MX_USART6_UART_Init+0x4c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001fe8:	4b09      	ldr	r3, [pc, #36]	; (8002010 <MX_USART6_UART_Init+0x4c>)
 8001fea:	220c      	movs	r2, #12
 8001fec:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fee:	4b08      	ldr	r3, [pc, #32]	; (8002010 <MX_USART6_UART_Init+0x4c>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <MX_USART6_UART_Init+0x4c>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001ffa:	4805      	ldr	r0, [pc, #20]	; (8002010 <MX_USART6_UART_Init+0x4c>)
 8001ffc:	f007 ff68 	bl	8009ed0 <HAL_UART_Init>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002006:	f000 fb89 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20005584 	.word	0x20005584
 8002014:	40011400 	.word	0x40011400

08002018 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08e      	sub	sp, #56	; 0x38
 800201c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	609a      	str	r2, [r3, #8]
 800202a:	60da      	str	r2, [r3, #12]
 800202c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	623b      	str	r3, [r7, #32]
 8002032:	4bb5      	ldr	r3, [pc, #724]	; (8002308 <MX_GPIO_Init+0x2f0>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	4ab4      	ldr	r2, [pc, #720]	; (8002308 <MX_GPIO_Init+0x2f0>)
 8002038:	f043 0310 	orr.w	r3, r3, #16
 800203c:	6313      	str	r3, [r2, #48]	; 0x30
 800203e:	4bb2      	ldr	r3, [pc, #712]	; (8002308 <MX_GPIO_Init+0x2f0>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	623b      	str	r3, [r7, #32]
 8002048:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	61fb      	str	r3, [r7, #28]
 800204e:	4bae      	ldr	r3, [pc, #696]	; (8002308 <MX_GPIO_Init+0x2f0>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	4aad      	ldr	r2, [pc, #692]	; (8002308 <MX_GPIO_Init+0x2f0>)
 8002054:	f043 0304 	orr.w	r3, r3, #4
 8002058:	6313      	str	r3, [r2, #48]	; 0x30
 800205a:	4bab      	ldr	r3, [pc, #684]	; (8002308 <MX_GPIO_Init+0x2f0>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	f003 0304 	and.w	r3, r3, #4
 8002062:	61fb      	str	r3, [r7, #28]
 8002064:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	61bb      	str	r3, [r7, #24]
 800206a:	4ba7      	ldr	r3, [pc, #668]	; (8002308 <MX_GPIO_Init+0x2f0>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	4aa6      	ldr	r2, [pc, #664]	; (8002308 <MX_GPIO_Init+0x2f0>)
 8002070:	f043 0320 	orr.w	r3, r3, #32
 8002074:	6313      	str	r3, [r2, #48]	; 0x30
 8002076:	4ba4      	ldr	r3, [pc, #656]	; (8002308 <MX_GPIO_Init+0x2f0>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	f003 0320 	and.w	r3, r3, #32
 800207e:	61bb      	str	r3, [r7, #24]
 8002080:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	4ba0      	ldr	r3, [pc, #640]	; (8002308 <MX_GPIO_Init+0x2f0>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	4a9f      	ldr	r2, [pc, #636]	; (8002308 <MX_GPIO_Init+0x2f0>)
 800208c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002090:	6313      	str	r3, [r2, #48]	; 0x30
 8002092:	4b9d      	ldr	r3, [pc, #628]	; (8002308 <MX_GPIO_Init+0x2f0>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800209a:	617b      	str	r3, [r7, #20]
 800209c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	4b99      	ldr	r3, [pc, #612]	; (8002308 <MX_GPIO_Init+0x2f0>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	4a98      	ldr	r2, [pc, #608]	; (8002308 <MX_GPIO_Init+0x2f0>)
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	6313      	str	r3, [r2, #48]	; 0x30
 80020ae:	4b96      	ldr	r3, [pc, #600]	; (8002308 <MX_GPIO_Init+0x2f0>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	613b      	str	r3, [r7, #16]
 80020b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	4b92      	ldr	r3, [pc, #584]	; (8002308 <MX_GPIO_Init+0x2f0>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	4a91      	ldr	r2, [pc, #580]	; (8002308 <MX_GPIO_Init+0x2f0>)
 80020c4:	f043 0302 	orr.w	r3, r3, #2
 80020c8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ca:	4b8f      	ldr	r3, [pc, #572]	; (8002308 <MX_GPIO_Init+0x2f0>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	4b8b      	ldr	r3, [pc, #556]	; (8002308 <MX_GPIO_Init+0x2f0>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	4a8a      	ldr	r2, [pc, #552]	; (8002308 <MX_GPIO_Init+0x2f0>)
 80020e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020e4:	6313      	str	r3, [r2, #48]	; 0x30
 80020e6:	4b88      	ldr	r3, [pc, #544]	; (8002308 <MX_GPIO_Init+0x2f0>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ee:	60bb      	str	r3, [r7, #8]
 80020f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	607b      	str	r3, [r7, #4]
 80020f6:	4b84      	ldr	r3, [pc, #528]	; (8002308 <MX_GPIO_Init+0x2f0>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	4a83      	ldr	r2, [pc, #524]	; (8002308 <MX_GPIO_Init+0x2f0>)
 80020fc:	f043 0308 	orr.w	r3, r3, #8
 8002100:	6313      	str	r3, [r2, #48]	; 0x30
 8002102:	4b81      	ldr	r3, [pc, #516]	; (8002308 <MX_GPIO_Init+0x2f0>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	607b      	str	r3, [r7, #4]
 800210c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 800210e:	2200      	movs	r2, #0
 8002110:	f248 4184 	movw	r1, #33924	; 0x8484
 8002114:	487d      	ldr	r0, [pc, #500]	; (800230c <MX_GPIO_Init+0x2f4>)
 8002116:	f003 fa6d 	bl	80055f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI5_SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 800211a:	2200      	movs	r2, #0
 800211c:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8002120:	487b      	ldr	r0, [pc, #492]	; (8002310 <MX_GPIO_Init+0x2f8>)
 8002122:	f003 fa67 	bl	80055f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 8002126:	2200      	movs	r2, #0
 8002128:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800212c:	4879      	ldr	r0, [pc, #484]	; (8002314 <MX_GPIO_Init+0x2fc>)
 800212e:	f003 fa61 	bl	80055f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 8002132:	2200      	movs	r2, #0
 8002134:	2108      	movs	r1, #8
 8002136:	4878      	ldr	r0, [pc, #480]	; (8002318 <MX_GPIO_Init+0x300>)
 8002138:	f003 fa5c 	bl	80055f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 800213c:	2200      	movs	r2, #0
 800213e:	f645 213e 	movw	r1, #23102	; 0x5a3e
 8002142:	4876      	ldr	r0, [pc, #472]	; (800231c <MX_GPIO_Init+0x304>)
 8002144:	f003 fa56 	bl	80055f4 <HAL_GPIO_WritePin>
                          |SX_RF_SW_Pin|OUT_VR_PWR_Pin|OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin
                          |OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin, GPIO_PIN_RESET);
 8002148:	2200      	movs	r2, #0
 800214a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800214e:	4874      	ldr	r0, [pc, #464]	; (8002320 <MX_GPIO_Init+0x308>)
 8002150:	f003 fa50 	bl	80055f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8002154:	2200      	movs	r2, #0
 8002156:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 800215a:	4872      	ldr	r0, [pc, #456]	; (8002324 <MX_GPIO_Init+0x30c>)
 800215c:	f003 fa4a 	bl	80055f4 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_12V_Buck_Pin OUT_Prop_ActuatedVent_Gate_Pin SPI4_CS_Thermocouple_Pin Iridium_RST_Pin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 8002160:	f248 4384 	movw	r3, #33924	; 0x8484
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002166:	2301      	movs	r3, #1
 8002168:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216e:	2300      	movs	r3, #0
 8002170:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002176:	4619      	mov	r1, r3
 8002178:	4864      	ldr	r0, [pc, #400]	; (800230c <MX_GPIO_Init+0x2f4>)
 800217a:	f003 f88f 	bl	800529c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SD_CS_Pin OUT_PyroValve_Gate_2_Pin OUT_PyroValve_Gate_1_Pin */
  GPIO_InitStruct.Pin = SPI5_SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 800217e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8002182:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002184:	2301      	movs	r3, #1
 8002186:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218c:	2300      	movs	r3, #0
 800218e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002190:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002194:	4619      	mov	r1, r3
 8002196:	485e      	ldr	r0, [pc, #376]	; (8002310 <MX_GPIO_Init+0x2f8>)
 8002198:	f003 f880 	bl	800529c <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Button_Pin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 800219c:	2301      	movs	r3, #1
 800219e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021a0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 80021aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ae:	4619      	mov	r1, r3
 80021b0:	4858      	ldr	r0, [pc, #352]	; (8002314 <MX_GPIO_Init+0x2fc>)
 80021b2:	f003 f873 	bl	800529c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_LED1_Pin OUT_LED2_Pin OUT_LED3_Pin SX_AMPLIFIER_Pin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 80021b6:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021bc:	2301      	movs	r3, #1
 80021be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c4:	2300      	movs	r3, #0
 80021c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021cc:	4619      	mov	r1, r3
 80021ce:	4851      	ldr	r0, [pc, #324]	; (8002314 <MX_GPIO_Init+0x2fc>)
 80021d0:	f003 f864 	bl	800529c <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_LEDF_Pin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 80021d4:	2308      	movs	r3, #8
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d8:	2301      	movs	r3, #1
 80021da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e0:	2300      	movs	r3, #0
 80021e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 80021e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e8:	4619      	mov	r1, r3
 80021ea:	484b      	ldr	r0, [pc, #300]	; (8002318 <MX_GPIO_Init+0x300>)
 80021ec:	f003 f856 	bl	800529c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_Prop_PyroTurboValve_LimitSwitch_Pin IN_SD_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 80021f0:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021f6:	2300      	movs	r3, #0
 80021f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002202:	4619      	mov	r1, r3
 8002204:	4843      	ldr	r0, [pc, #268]	; (8002314 <MX_GPIO_Init+0x2fc>)
 8002206:	f003 f849 	bl	800529c <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Prop_ActuatedVent_Feedback_Pin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 800220a:	2302      	movs	r3, #2
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800220e:	2300      	movs	r3, #0
 8002210:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 8002216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800221a:	4619      	mov	r1, r3
 800221c:	4840      	ldr	r0, [pc, #256]	; (8002320 <MX_GPIO_Init+0x308>)
 800221e:	f003 f83d 	bl	800529c <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_PyroValve_Cont_2_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 8002222:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002228:	2300      	movs	r3, #0
 800222a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 8002230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002234:	4619      	mov	r1, r3
 8002236:	4836      	ldr	r0, [pc, #216]	; (8002310 <MX_GPIO_Init+0x2f8>)
 8002238:	f003 f830 	bl	800529c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_PyroValve_Cont_1_Pin IN_EJ_Main_Cont_Pin IN_EJ_Drogue_Cont_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|IN_EJ_Main_Cont_Pin|IN_EJ_Drogue_Cont_Pin;
 800223c:	f242 4301 	movw	r3, #9217	; 0x2401
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002242:	2300      	movs	r3, #0
 8002244:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800224a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800224e:	4619      	mov	r1, r3
 8002250:	4832      	ldr	r0, [pc, #200]	; (800231c <MX_GPIO_Init+0x304>)
 8002252:	f003 f823 	bl	800529c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_PyroValve_Arming_Pin SX_RST_Pin SX_BUSY_Pin SX_DIO_Pin
                           SX_RF_SW_Pin OUT_VR_PWR_Pin OUT_EJ_Main_Gate_Pin OUT_EJ_Drogue_Gate_Pin
                           OUT_EJ_Arming_Pin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 8002256:	f645 233e 	movw	r3, #23102	; 0x5a3e
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
                          |SX_RF_SW_Pin|OUT_VR_PWR_Pin|OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin
                          |OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800225c:	2301      	movs	r3, #1
 800225e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002264:	2300      	movs	r3, #0
 8002266:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800226c:	4619      	mov	r1, r3
 800226e:	482b      	ldr	r0, [pc, #172]	; (800231c <MX_GPIO_Init+0x304>)
 8002270:	f003 f814 	bl	800529c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAYLOAD_I2C_EN_Pin IN_XTend_Continuity_Pin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 8002274:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002278:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800227a:	2300      	movs	r3, #0
 800227c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	2300      	movs	r3, #0
 8002280:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002286:	4619      	mov	r1, r3
 8002288:	4820      	ldr	r0, [pc, #128]	; (800230c <MX_GPIO_Init+0x2f4>)
 800228a:	f003 f807 	bl	800529c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SX_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin;
 800228e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002294:	2301      	movs	r3, #1
 8002296:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229c:	2300      	movs	r3, #0
 800229e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_SX_CS_GPIO_Port, &GPIO_InitStruct);
 80022a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a4:	4619      	mov	r1, r3
 80022a6:	481e      	ldr	r0, [pc, #120]	; (8002320 <MX_GPIO_Init+0x308>)
 80022a8:	f002 fff8 	bl	800529c <HAL_GPIO_Init>

  /*Configure GPIO pins : XTend_CTS_Pin XTend_RTS_Pin XTend_SLEEP_Pin XTend_RX_LED_Pin
                           XTend_TX_PWR_Pin OUT_FLASH_IO3_Pin OUT_FLASH_WP_Pin OUT_FLASH_CS_Pin
                           OUT_VR_REC_Pin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 80022ac:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b2:	2301      	movs	r3, #1
 80022b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ba:	2300      	movs	r3, #0
 80022bc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c2:	4619      	mov	r1, r3
 80022c4:	4817      	ldr	r0, [pc, #92]	; (8002324 <MX_GPIO_Init+0x30c>)
 80022c6:	f002 ffe9 	bl	800529c <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BANDPASS_FILTER_Pin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 80022ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022d0:	2300      	movs	r3, #0
 80022d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 80022d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022dc:	4619      	mov	r1, r3
 80022de:	4811      	ldr	r0, [pc, #68]	; (8002324 <MX_GPIO_Init+0x30c>)
 80022e0:	f002 ffdc 	bl	800529c <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_LPS22HH_DRDY_Pin EXTI_ISM330DCL_INT2_Pin EXTI_LSM6DSR_INT1_Pin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 80022e4:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f8:	4619      	mov	r1, r3
 80022fa:	4808      	ldr	r0, [pc, #32]	; (800231c <MX_GPIO_Init+0x304>)
 80022fc:	f002 ffce 	bl	800529c <HAL_GPIO_Init>

}
 8002300:	bf00      	nop
 8002302:	3738      	adds	r7, #56	; 0x38
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40023800 	.word	0x40023800
 800230c:	40021000 	.word	0x40021000
 8002310:	40021400 	.word	0x40021400
 8002314:	40020800 	.word	0x40020800
 8002318:	40020000 	.word	0x40020000
 800231c:	40021800 	.word	0x40021800
 8002320:	40020400 	.word	0x40020400
 8002324:	40020c00 	.word	0x40020c00

08002328 <StartMemory0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMemory0 */
void StartMemory0(void *argument)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002330:	f00e fadc 	bl	80108ec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */

	osThreadExit();
 8002334:	f00b fa89 	bl	800d84a <osThreadExit>

08002338 <StartEjection1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEjection1 */
void StartEjection1(void *argument)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b090      	sub	sp, #64	; 0x40
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEjection1 */

	osThreadExit();
 8002340:	f00b fa83 	bl	800d84a <osThreadExit>

08002344 <StartTelemetry2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry2 */
void StartTelemetry2(void *argument)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTelemetry2 */

	osThreadExit();
 800234c:	f00b fa7d 	bl	800d84a <osThreadExit>

08002350 <StartSensors3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensors3 */
void StartSensors3(void *argument)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensors3 */

	//osThreadExit();

	//Add thread id to the list
	threadID[3]=osThreadGetId();
 8002358:	f00b fa6c 	bl	800d834 <osThreadGetId>
 800235c:	4603      	mov	r3, r0
 800235e:	4a2b      	ldr	r2, [pc, #172]	; (800240c <StartSensors3+0xbc>)
 8002360:	60d3      	str	r3, [r2, #12]


	//Mutex
	while( (_SENSORS = xSemaphoreCreateMutex()) == NULL) osDelay(10);
 8002362:	e002      	b.n	800236a <StartSensors3+0x1a>
 8002364:	200a      	movs	r0, #10
 8002366:	f00b fa76 	bl	800d856 <osDelay>
 800236a:	2001      	movs	r0, #1
 800236c:	f00b fd53 	bl	800de16 <xQueueCreateMutex>
 8002370:	4603      	mov	r3, r0
 8002372:	4a27      	ldr	r2, [pc, #156]	; (8002410 <StartSensors3+0xc0>)
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	4b26      	ldr	r3, [pc, #152]	; (8002410 <StartSensors3+0xc0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0f2      	beq.n	8002364 <StartSensors3+0x14>

  for(;;)
  {
	  while( xSemaphoreTake( _SENSORS, 10 ) != pdTRUE ) {
 800237e:	e009      	b.n	8002394 <StartSensors3+0x44>
		  HAL_UART_Transmit(&DEBUG_USART,"No sense\r\n",10,HAL_MAX_DELAY);
 8002380:	f04f 33ff 	mov.w	r3, #4294967295
 8002384:	220a      	movs	r2, #10
 8002386:	4923      	ldr	r1, [pc, #140]	; (8002414 <StartSensors3+0xc4>)
 8002388:	4823      	ldr	r0, [pc, #140]	; (8002418 <StartSensors3+0xc8>)
 800238a:	f007 fdee 	bl	8009f6a <HAL_UART_Transmit>
		  osDelay(10);
 800238e:	200a      	movs	r0, #10
 8002390:	f00b fa61 	bl	800d856 <osDelay>
	  while( xSemaphoreTake( _SENSORS, 10 ) != pdTRUE ) {
 8002394:	4b1e      	ldr	r3, [pc, #120]	; (8002410 <StartSensors3+0xc0>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	210a      	movs	r1, #10
 800239a:	4618      	mov	r0, r3
 800239c:	f00b ffe8 	bl	800e370 <xQueueSemaphoreTake>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d1ec      	bne.n	8002380 <StartSensors3+0x30>
	  }

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 80023a6:	2201      	movs	r2, #1
 80023a8:	2102      	movs	r1, #2
 80023aa:	481c      	ldr	r0, [pc, #112]	; (800241c <StartSensors3+0xcc>)
 80023ac:	f003 f922 	bl	80055f4 <HAL_GPIO_WritePin>



	  //GPS
	  GPS_Poll(&latitude, &longitude, &time);
 80023b0:	4a1b      	ldr	r2, [pc, #108]	; (8002420 <StartSensors3+0xd0>)
 80023b2:	491c      	ldr	r1, [pc, #112]	; (8002424 <StartSensors3+0xd4>)
 80023b4:	481c      	ldr	r0, [pc, #112]	; (8002428 <StartSensors3+0xd8>)
 80023b6:	f000 fe8b 	bl	80030d0 <GPS_Poll>

  	  //LSM6DSR
  	  MRT_LSM6DSR_getAcceleration(lsm_ctx,acceleration_mg);
 80023ba:	4a1c      	ldr	r2, [pc, #112]	; (800242c <StartSensors3+0xdc>)
 80023bc:	4b1c      	ldr	r3, [pc, #112]	; (8002430 <StartSensors3+0xe0>)
 80023be:	ca07      	ldmia	r2, {r0, r1, r2}
 80023c0:	f7fe ff26 	bl	8001210 <MRT_LSM6DSR_getAcceleration>
  	  /*
  	   * TODO NEEDS FILTERING BUT WORKS (maybe acceleration needs filtering too)
  	   */
  	  MRT_LSM6DSR_getAngularRate(lsm_ctx,angular_rate_mdps);
 80023c4:	4a19      	ldr	r2, [pc, #100]	; (800242c <StartSensors3+0xdc>)
 80023c6:	4b1b      	ldr	r3, [pc, #108]	; (8002434 <StartSensors3+0xe4>)
 80023c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80023ca:	f7fe ff97 	bl	80012fc <MRT_LSM6DSR_getAngularRate>
	  MRT_LSM6DSR_getTemperature(lsm_ctx,&lsm_temperature_degC);
 80023ce:	4a17      	ldr	r2, [pc, #92]	; (800242c <StartSensors3+0xdc>)
 80023d0:	4b19      	ldr	r3, [pc, #100]	; (8002438 <StartSensors3+0xe8>)
 80023d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80023d4:	f7fe ff62 	bl	800129c <MRT_LSM6DSR_getTemperature>


	  //LPS22HH
  	  MRT_LPS22HH_getPressure(lps_ctx,&pressure_hPa);
 80023d8:	4a18      	ldr	r2, [pc, #96]	; (800243c <StartSensors3+0xec>)
 80023da:	4b19      	ldr	r3, [pc, #100]	; (8002440 <StartSensors3+0xf0>)
 80023dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80023de:	f7ff f88b 	bl	80014f8 <MRT_LPS22HH_getPressure>
	  MRT_LPS22HH_getTemperature(lps_ctx,&lps_temperature_degC);
 80023e2:	4a16      	ldr	r2, [pc, #88]	; (800243c <StartSensors3+0xec>)
 80023e4:	4b17      	ldr	r3, [pc, #92]	; (8002444 <StartSensors3+0xf4>)
 80023e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80023e8:	f7ff f8b6 	bl	8001558 <MRT_LPS22HH_getTemperature>


	  //Thermocouple (don't have it)


	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 80023ec:	2200      	movs	r2, #0
 80023ee:	2102      	movs	r1, #2
 80023f0:	480a      	ldr	r0, [pc, #40]	; (800241c <StartSensors3+0xcc>)
 80023f2:	f003 f8ff 	bl	80055f4 <HAL_GPIO_WritePin>

	  xSemaphoreGive( _SENSORS );
 80023f6:	4b06      	ldr	r3, [pc, #24]	; (8002410 <StartSensors3+0xc0>)
 80023f8:	6818      	ldr	r0, [r3, #0]
 80023fa:	2300      	movs	r3, #0
 80023fc:	2200      	movs	r2, #0
 80023fe:	2100      	movs	r1, #0
 8002400:	f00b fd3c 	bl	800de7c <xQueueGenericSend>

	  osDelay(100);
 8002404:	2064      	movs	r0, #100	; 0x64
 8002406:	f00b fa26 	bl	800d856 <osDelay>
	  while( xSemaphoreTake( _SENSORS, 10 ) != pdTRUE ) {
 800240a:	e7c3      	b.n	8002394 <StartSensors3+0x44>
 800240c:	2000533c 	.word	0x2000533c
 8002410:	200051e8 	.word	0x200051e8
 8002414:	0801666c 	.word	0x0801666c
 8002418:	20005540 	.word	0x20005540
 800241c:	40020800 	.word	0x40020800
 8002420:	20005534 	.word	0x20005534
 8002424:	200054c8 	.word	0x200054c8
 8002428:	200055c8 	.word	0x200055c8
 800242c:	20005628 	.word	0x20005628
 8002430:	2000039c 	.word	0x2000039c
 8002434:	200003a8 	.word	0x200003a8
 8002438:	200003b4 	.word	0x200003b4
 800243c:	20005618 	.word	0x20005618
 8002440:	20000394 	.word	0x20000394
 8002444:	20000398 	.word	0x20000398

08002448 <StartPropulsion4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPropulsion4 */
void StartPropulsion4(void *argument)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPropulsion4 */

	osThreadExit();
 8002450:	f00b f9fb 	bl	800d84a <osThreadExit>

08002454 <StartPrinting>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPrinting */
void StartPrinting(void *argument)
{
 8002454:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002458:	b094      	sub	sp, #80	; 0x50
 800245a:	af04      	add	r7, sp, #16
 800245c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPrinting */

	char buffer[TX_BUF_DIM];

	osDelay(2000);
 800245e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002462:	f00b f9f8 	bl	800d856 <osDelay>

  /* Infinite loop */
  for(;;)
  {

	  while( xSemaphoreTake( _SENSORS, 10 ) != pdTRUE ) {
 8002466:	e009      	b.n	800247c <StartPrinting+0x28>
		  HAL_UART_Transmit(&DEBUG_USART,"No print\r\n",10,HAL_MAX_DELAY);
 8002468:	f04f 33ff 	mov.w	r3, #4294967295
 800246c:	220a      	movs	r2, #10
 800246e:	4990      	ldr	r1, [pc, #576]	; (80026b0 <StartPrinting+0x25c>)
 8002470:	4890      	ldr	r0, [pc, #576]	; (80026b4 <StartPrinting+0x260>)
 8002472:	f007 fd7a 	bl	8009f6a <HAL_UART_Transmit>
		  osDelay(10);
 8002476:	200a      	movs	r0, #10
 8002478:	f00b f9ed 	bl	800d856 <osDelay>
	  while( xSemaphoreTake( _SENSORS, 10 ) != pdTRUE ) {
 800247c:	4b8e      	ldr	r3, [pc, #568]	; (80026b8 <StartPrinting+0x264>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	210a      	movs	r1, #10
 8002482:	4618      	mov	r0, r3
 8002484:	f00b ff74 	bl	800e370 <xQueueSemaphoreTake>
 8002488:	4603      	mov	r3, r0
 800248a:	2b01      	cmp	r3, #1
 800248c:	d1ec      	bne.n	8002468 <StartPrinting+0x14>
	  }

	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 800248e:	2201      	movs	r2, #1
 8002490:	2108      	movs	r1, #8
 8002492:	488a      	ldr	r0, [pc, #552]	; (80026bc <StartPrinting+0x268>)
 8002494:	f003 f8ae 	bl	80055f4 <HAL_GPIO_WritePin>

	  //GPS
  	  /*
  	   * TODO HOW DO WE RESET THE TIME
  	   */
	  memset(gps_data, 0, GPS_DATA_BUF_DIM);
 8002498:	2264      	movs	r2, #100	; 0x64
 800249a:	2100      	movs	r1, #0
 800249c:	4888      	ldr	r0, [pc, #544]	; (80026c0 <StartPrinting+0x26c>)
 800249e:	f00f f897 	bl	80115d0 <memset>
	  sprintf(gps_data,"Alt: %.2f   Long: %.2f   Time: %.0f\r\n",latitude, longitude, time);
 80024a2:	4b88      	ldr	r3, [pc, #544]	; (80026c4 <StartPrinting+0x270>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe f85e 	bl	8000568 <__aeabi_f2d>
 80024ac:	4680      	mov	r8, r0
 80024ae:	4689      	mov	r9, r1
 80024b0:	4b85      	ldr	r3, [pc, #532]	; (80026c8 <StartPrinting+0x274>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe f857 	bl	8000568 <__aeabi_f2d>
 80024ba:	4604      	mov	r4, r0
 80024bc:	460d      	mov	r5, r1
 80024be:	4b83      	ldr	r3, [pc, #524]	; (80026cc <StartPrinting+0x278>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fe f850 	bl	8000568 <__aeabi_f2d>
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80024d0:	e9cd 4500 	strd	r4, r5, [sp]
 80024d4:	4642      	mov	r2, r8
 80024d6:	464b      	mov	r3, r9
 80024d8:	497d      	ldr	r1, [pc, #500]	; (80026d0 <StartPrinting+0x27c>)
 80024da:	4879      	ldr	r0, [pc, #484]	; (80026c0 <StartPrinting+0x26c>)
 80024dc:	f010 f868 	bl	80125b0 <siprintf>
	  HAL_UART_Transmit(&DEBUG_USART,gps_data,strlen(gps_data),HAL_MAX_DELAY);
 80024e0:	4877      	ldr	r0, [pc, #476]	; (80026c0 <StartPrinting+0x26c>)
 80024e2:	f7fd fe85 	bl	80001f0 <strlen>
 80024e6:	4603      	mov	r3, r0
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	f04f 33ff 	mov.w	r3, #4294967295
 80024ee:	4974      	ldr	r1, [pc, #464]	; (80026c0 <StartPrinting+0x26c>)
 80024f0:	4870      	ldr	r0, [pc, #448]	; (80026b4 <StartPrinting+0x260>)
 80024f2:	f007 fd3a 	bl	8009f6a <HAL_UART_Transmit>

  	  //LSM6DSR
  	  memset(buffer, 0, TX_BUF_DIM);
 80024f6:	f107 030c 	add.w	r3, r7, #12
 80024fa:	2232      	movs	r2, #50	; 0x32
 80024fc:	2100      	movs	r1, #0
 80024fe:	4618      	mov	r0, r3
 8002500:	f00f f866 	bl	80115d0 <memset>
  	  sprintf(buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8002504:	4b73      	ldr	r3, [pc, #460]	; (80026d4 <StartPrinting+0x280>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f7fe f82d 	bl	8000568 <__aeabi_f2d>
 800250e:	4680      	mov	r8, r0
 8002510:	4689      	mov	r9, r1
 8002512:	4b70      	ldr	r3, [pc, #448]	; (80026d4 <StartPrinting+0x280>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe f826 	bl	8000568 <__aeabi_f2d>
 800251c:	4604      	mov	r4, r0
 800251e:	460d      	mov	r5, r1
 8002520:	4b6c      	ldr	r3, [pc, #432]	; (80026d4 <StartPrinting+0x280>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	4618      	mov	r0, r3
 8002526:	f7fe f81f 	bl	8000568 <__aeabi_f2d>
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	f107 000c 	add.w	r0, r7, #12
 8002532:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002536:	e9cd 4500 	strd	r4, r5, [sp]
 800253a:	4642      	mov	r2, r8
 800253c:	464b      	mov	r3, r9
 800253e:	4966      	ldr	r1, [pc, #408]	; (80026d8 <StartPrinting+0x284>)
 8002540:	f010 f836 	bl	80125b0 <siprintf>
  	  HAL_UART_Transmit(&DEBUG_USART, buffer, strlen(buffer), HAL_MAX_DELAY);
 8002544:	f107 030c 	add.w	r3, r7, #12
 8002548:	4618      	mov	r0, r3
 800254a:	f7fd fe51 	bl	80001f0 <strlen>
 800254e:	4603      	mov	r3, r0
 8002550:	b29a      	uxth	r2, r3
 8002552:	f107 010c 	add.w	r1, r7, #12
 8002556:	f04f 33ff 	mov.w	r3, #4294967295
 800255a:	4856      	ldr	r0, [pc, #344]	; (80026b4 <StartPrinting+0x260>)
 800255c:	f007 fd05 	bl	8009f6a <HAL_UART_Transmit>

  	  /*
  	   * TODO NEEDS FILTERING BUT WORKS (maybe acceleration needs filtering too)
  	   */
  	  memset(buffer, 0, TX_BUF_DIM);
 8002560:	f107 030c 	add.w	r3, r7, #12
 8002564:	2232      	movs	r2, #50	; 0x32
 8002566:	2100      	movs	r1, #0
 8002568:	4618      	mov	r0, r3
 800256a:	f00f f831 	bl	80115d0 <memset>
  	  sprintf(buffer,"Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 800256e:	4b5b      	ldr	r3, [pc, #364]	; (80026dc <StartPrinting+0x288>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7fd fff8 	bl	8000568 <__aeabi_f2d>
 8002578:	4680      	mov	r8, r0
 800257a:	4689      	mov	r9, r1
 800257c:	4b57      	ldr	r3, [pc, #348]	; (80026dc <StartPrinting+0x288>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	4618      	mov	r0, r3
 8002582:	f7fd fff1 	bl	8000568 <__aeabi_f2d>
 8002586:	4604      	mov	r4, r0
 8002588:	460d      	mov	r5, r1
 800258a:	4b54      	ldr	r3, [pc, #336]	; (80026dc <StartPrinting+0x288>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	4618      	mov	r0, r3
 8002590:	f7fd ffea 	bl	8000568 <__aeabi_f2d>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	f107 000c 	add.w	r0, r7, #12
 800259c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80025a0:	e9cd 4500 	strd	r4, r5, [sp]
 80025a4:	4642      	mov	r2, r8
 80025a6:	464b      	mov	r3, r9
 80025a8:	494d      	ldr	r1, [pc, #308]	; (80026e0 <StartPrinting+0x28c>)
 80025aa:	f010 f801 	bl	80125b0 <siprintf>
  	  HAL_UART_Transmit(&DEBUG_USART, buffer, strlen(buffer), HAL_MAX_DELAY);
 80025ae:	f107 030c 	add.w	r3, r7, #12
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fd fe1c 	bl	80001f0 <strlen>
 80025b8:	4603      	mov	r3, r0
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	f107 010c 	add.w	r1, r7, #12
 80025c0:	f04f 33ff 	mov.w	r3, #4294967295
 80025c4:	483b      	ldr	r0, [pc, #236]	; (80026b4 <StartPrinting+0x260>)
 80025c6:	f007 fcd0 	bl	8009f6a <HAL_UART_Transmit>

	  memset(buffer, 0, TX_BUF_DIM);
 80025ca:	f107 030c 	add.w	r3, r7, #12
 80025ce:	2232      	movs	r2, #50	; 0x32
 80025d0:	2100      	movs	r1, #0
 80025d2:	4618      	mov	r0, r3
 80025d4:	f00e fffc 	bl	80115d0 <memset>
	  sprintf(buffer, "Temperature [degC]:%6.2f\r\n", lsm_temperature_degC);
 80025d8:	4b42      	ldr	r3, [pc, #264]	; (80026e4 <StartPrinting+0x290>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7fd ffc3 	bl	8000568 <__aeabi_f2d>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	f107 000c 	add.w	r0, r7, #12
 80025ea:	493f      	ldr	r1, [pc, #252]	; (80026e8 <StartPrinting+0x294>)
 80025ec:	f00f ffe0 	bl	80125b0 <siprintf>
	  HAL_UART_Transmit(&DEBUG_USART, buffer, strlen(buffer), HAL_MAX_DELAY);
 80025f0:	f107 030c 	add.w	r3, r7, #12
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fd fdfb 	bl	80001f0 <strlen>
 80025fa:	4603      	mov	r3, r0
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	f107 010c 	add.w	r1, r7, #12
 8002602:	f04f 33ff 	mov.w	r3, #4294967295
 8002606:	482b      	ldr	r0, [pc, #172]	; (80026b4 <StartPrinting+0x260>)
 8002608:	f007 fcaf 	bl	8009f6a <HAL_UART_Transmit>


	  //LPS22HH
  	  memset(buffer, 0, TX_BUF_DIM);
 800260c:	f107 030c 	add.w	r3, r7, #12
 8002610:	2232      	movs	r2, #50	; 0x32
 8002612:	2100      	movs	r1, #0
 8002614:	4618      	mov	r0, r3
 8002616:	f00e ffdb 	bl	80115d0 <memset>
  	  sprintf(buffer,"Pressure [hPa]:%6.2f\r\n",pressure_hPa);
 800261a:	4b34      	ldr	r3, [pc, #208]	; (80026ec <StartPrinting+0x298>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f7fd ffa2 	bl	8000568 <__aeabi_f2d>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	f107 000c 	add.w	r0, r7, #12
 800262c:	4930      	ldr	r1, [pc, #192]	; (80026f0 <StartPrinting+0x29c>)
 800262e:	f00f ffbf 	bl	80125b0 <siprintf>
  	  HAL_UART_Transmit(&DEBUG_USART, buffer, strlen(buffer), HAL_MAX_DELAY);
 8002632:	f107 030c 	add.w	r3, r7, #12
 8002636:	4618      	mov	r0, r3
 8002638:	f7fd fdda 	bl	80001f0 <strlen>
 800263c:	4603      	mov	r3, r0
 800263e:	b29a      	uxth	r2, r3
 8002640:	f107 010c 	add.w	r1, r7, #12
 8002644:	f04f 33ff 	mov.w	r3, #4294967295
 8002648:	481a      	ldr	r0, [pc, #104]	; (80026b4 <StartPrinting+0x260>)
 800264a:	f007 fc8e 	bl	8009f6a <HAL_UART_Transmit>

	  memset(buffer, 0, TX_BUF_DIM);
 800264e:	f107 030c 	add.w	r3, r7, #12
 8002652:	2232      	movs	r2, #50	; 0x32
 8002654:	2100      	movs	r1, #0
 8002656:	4618      	mov	r0, r3
 8002658:	f00e ffba 	bl	80115d0 <memset>
	  sprintf(buffer, "Temperature [degC]:%6.2f\r\n", lps_temperature_degC);
 800265c:	4b25      	ldr	r3, [pc, #148]	; (80026f4 <StartPrinting+0x2a0>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f7fd ff81 	bl	8000568 <__aeabi_f2d>
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	f107 000c 	add.w	r0, r7, #12
 800266e:	491e      	ldr	r1, [pc, #120]	; (80026e8 <StartPrinting+0x294>)
 8002670:	f00f ff9e 	bl	80125b0 <siprintf>
	  HAL_UART_Transmit(&DEBUG_USART, buffer, strlen(buffer), HAL_MAX_DELAY);
 8002674:	f107 030c 	add.w	r3, r7, #12
 8002678:	4618      	mov	r0, r3
 800267a:	f7fd fdb9 	bl	80001f0 <strlen>
 800267e:	4603      	mov	r3, r0
 8002680:	b29a      	uxth	r2, r3
 8002682:	f107 010c 	add.w	r1, r7, #12
 8002686:	f04f 33ff 	mov.w	r3, #4294967295
 800268a:	480a      	ldr	r0, [pc, #40]	; (80026b4 <StartPrinting+0x260>)
 800268c:	f007 fc6d 	bl	8009f6a <HAL_UART_Transmit>

	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 8002690:	2200      	movs	r2, #0
 8002692:	2108      	movs	r1, #8
 8002694:	4809      	ldr	r0, [pc, #36]	; (80026bc <StartPrinting+0x268>)
 8002696:	f002 ffad 	bl	80055f4 <HAL_GPIO_WritePin>

	  xSemaphoreGive(_SENSORS);
 800269a:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <StartPrinting+0x264>)
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	2300      	movs	r3, #0
 80026a0:	2200      	movs	r2, #0
 80026a2:	2100      	movs	r1, #0
 80026a4:	f00b fbea 	bl	800de7c <xQueueGenericSend>

      osDelay(200);
 80026a8:	20c8      	movs	r0, #200	; 0xc8
 80026aa:	f00b f8d4 	bl	800d856 <osDelay>
	  while( xSemaphoreTake( _SENSORS, 10 ) != pdTRUE ) {
 80026ae:	e6e5      	b.n	800247c <StartPrinting+0x28>
 80026b0:	08016678 	.word	0x08016678
 80026b4:	20005540 	.word	0x20005540
 80026b8:	200051e8 	.word	0x200051e8
 80026bc:	40020800 	.word	0x40020800
 80026c0:	200054d0 	.word	0x200054d0
 80026c4:	200055c8 	.word	0x200055c8
 80026c8:	200054c8 	.word	0x200054c8
 80026cc:	20005534 	.word	0x20005534
 80026d0:	08016684 	.word	0x08016684
 80026d4:	2000039c 	.word	0x2000039c
 80026d8:	080166ac 	.word	0x080166ac
 80026dc:	200003a8 	.word	0x200003a8
 80026e0:	080166d4 	.word	0x080166d4
 80026e4:	200003b4 	.word	0x200003b4
 80026e8:	080166fc 	.word	0x080166fc
 80026ec:	20000394 	.word	0x20000394
 80026f0:	08016718 	.word	0x08016718
 80026f4:	20000398 	.word	0x20000398

080026f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a04      	ldr	r2, [pc, #16]	; (8002718 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d101      	bne.n	800270e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800270a:	f002 f9fd 	bl	8004b08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40001000 	.word	0x40001000

0800271c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002720:	bf00      	nop
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
	...

0800272c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	607b      	str	r3, [r7, #4]
 8002736:	4b12      	ldr	r3, [pc, #72]	; (8002780 <HAL_MspInit+0x54>)
 8002738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273a:	4a11      	ldr	r2, [pc, #68]	; (8002780 <HAL_MspInit+0x54>)
 800273c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002740:	6453      	str	r3, [r2, #68]	; 0x44
 8002742:	4b0f      	ldr	r3, [pc, #60]	; (8002780 <HAL_MspInit+0x54>)
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800274a:	607b      	str	r3, [r7, #4]
 800274c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	603b      	str	r3, [r7, #0]
 8002752:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <HAL_MspInit+0x54>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	4a0a      	ldr	r2, [pc, #40]	; (8002780 <HAL_MspInit+0x54>)
 8002758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800275c:	6413      	str	r3, [r2, #64]	; 0x40
 800275e:	4b08      	ldr	r3, [pc, #32]	; (8002780 <HAL_MspInit+0x54>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002766:	603b      	str	r3, [r7, #0]
 8002768:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800276a:	2200      	movs	r2, #0
 800276c:	210f      	movs	r1, #15
 800276e:	f06f 0001 	mvn.w	r0, #1
 8002772:	f002 fd5b 	bl	800522c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40023800 	.word	0x40023800

08002784 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b08a      	sub	sp, #40	; 0x28
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800278c:	f107 0314 	add.w	r3, r7, #20
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	605a      	str	r2, [r3, #4]
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	60da      	str	r2, [r3, #12]
 800279a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a17      	ldr	r2, [pc, #92]	; (8002800 <HAL_ADC_MspInit+0x7c>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d127      	bne.n	80027f6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	4b16      	ldr	r3, [pc, #88]	; (8002804 <HAL_ADC_MspInit+0x80>)
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	4a15      	ldr	r2, [pc, #84]	; (8002804 <HAL_ADC_MspInit+0x80>)
 80027b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b4:	6453      	str	r3, [r2, #68]	; 0x44
 80027b6:	4b13      	ldr	r3, [pc, #76]	; (8002804 <HAL_ADC_MspInit+0x80>)
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027be:	613b      	str	r3, [r7, #16]
 80027c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <HAL_ADC_MspInit+0x80>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	4a0e      	ldr	r2, [pc, #56]	; (8002804 <HAL_ADC_MspInit+0x80>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	6313      	str	r3, [r2, #48]	; 0x30
 80027d2:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <HAL_ADC_MspInit+0x80>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 80027de:	2340      	movs	r3, #64	; 0x40
 80027e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027e2:	2303      	movs	r3, #3
 80027e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 80027ea:	f107 0314 	add.w	r3, r7, #20
 80027ee:	4619      	mov	r1, r3
 80027f0:	4805      	ldr	r0, [pc, #20]	; (8002808 <HAL_ADC_MspInit+0x84>)
 80027f2:	f002 fd53 	bl	800529c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80027f6:	bf00      	nop
 80027f8:	3728      	adds	r7, #40	; 0x28
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40012000 	.word	0x40012000
 8002804:	40023800 	.word	0x40023800
 8002808:	40020000 	.word	0x40020000

0800280c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08e      	sub	sp, #56	; 0x38
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	609a      	str	r2, [r3, #8]
 8002820:	60da      	str	r2, [r3, #12]
 8002822:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a5c      	ldr	r2, [pc, #368]	; (800299c <HAL_I2C_MspInit+0x190>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d12d      	bne.n	800288a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	623b      	str	r3, [r7, #32]
 8002832:	4b5b      	ldr	r3, [pc, #364]	; (80029a0 <HAL_I2C_MspInit+0x194>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	4a5a      	ldr	r2, [pc, #360]	; (80029a0 <HAL_I2C_MspInit+0x194>)
 8002838:	f043 0302 	orr.w	r3, r3, #2
 800283c:	6313      	str	r3, [r2, #48]	; 0x30
 800283e:	4b58      	ldr	r3, [pc, #352]	; (80029a0 <HAL_I2C_MspInit+0x194>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	623b      	str	r3, [r7, #32]
 8002848:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800284a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002850:	2312      	movs	r3, #18
 8002852:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002854:	2301      	movs	r3, #1
 8002856:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002858:	2303      	movs	r3, #3
 800285a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800285c:	2304      	movs	r3, #4
 800285e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002864:	4619      	mov	r1, r3
 8002866:	484f      	ldr	r0, [pc, #316]	; (80029a4 <HAL_I2C_MspInit+0x198>)
 8002868:	f002 fd18 	bl	800529c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800286c:	2300      	movs	r3, #0
 800286e:	61fb      	str	r3, [r7, #28]
 8002870:	4b4b      	ldr	r3, [pc, #300]	; (80029a0 <HAL_I2C_MspInit+0x194>)
 8002872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002874:	4a4a      	ldr	r2, [pc, #296]	; (80029a0 <HAL_I2C_MspInit+0x194>)
 8002876:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800287a:	6413      	str	r3, [r2, #64]	; 0x40
 800287c:	4b48      	ldr	r3, [pc, #288]	; (80029a0 <HAL_I2C_MspInit+0x194>)
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002884:	61fb      	str	r3, [r7, #28]
 8002886:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002888:	e083      	b.n	8002992 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a46      	ldr	r2, [pc, #280]	; (80029a8 <HAL_I2C_MspInit+0x19c>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d12d      	bne.n	80028f0 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002894:	2300      	movs	r3, #0
 8002896:	61bb      	str	r3, [r7, #24]
 8002898:	4b41      	ldr	r3, [pc, #260]	; (80029a0 <HAL_I2C_MspInit+0x194>)
 800289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289c:	4a40      	ldr	r2, [pc, #256]	; (80029a0 <HAL_I2C_MspInit+0x194>)
 800289e:	f043 0302 	orr.w	r3, r3, #2
 80028a2:	6313      	str	r3, [r2, #48]	; 0x30
 80028a4:	4b3e      	ldr	r3, [pc, #248]	; (80029a0 <HAL_I2C_MspInit+0x194>)
 80028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	61bb      	str	r3, [r7, #24]
 80028ae:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80028b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028b6:	2312      	movs	r3, #18
 80028b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028ba:	2301      	movs	r3, #1
 80028bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028be:	2303      	movs	r3, #3
 80028c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80028c2:	2304      	movs	r3, #4
 80028c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028ca:	4619      	mov	r1, r3
 80028cc:	4835      	ldr	r0, [pc, #212]	; (80029a4 <HAL_I2C_MspInit+0x198>)
 80028ce:	f002 fce5 	bl	800529c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	4b32      	ldr	r3, [pc, #200]	; (80029a0 <HAL_I2C_MspInit+0x194>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	4a31      	ldr	r2, [pc, #196]	; (80029a0 <HAL_I2C_MspInit+0x194>)
 80028dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028e0:	6413      	str	r3, [r2, #64]	; 0x40
 80028e2:	4b2f      	ldr	r3, [pc, #188]	; (80029a0 <HAL_I2C_MspInit+0x194>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ea:	617b      	str	r3, [r7, #20]
 80028ec:	697b      	ldr	r3, [r7, #20]
}
 80028ee:	e050      	b.n	8002992 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a2d      	ldr	r2, [pc, #180]	; (80029ac <HAL_I2C_MspInit+0x1a0>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d14b      	bne.n	8002992 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	613b      	str	r3, [r7, #16]
 80028fe:	4b28      	ldr	r3, [pc, #160]	; (80029a0 <HAL_I2C_MspInit+0x194>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	4a27      	ldr	r2, [pc, #156]	; (80029a0 <HAL_I2C_MspInit+0x194>)
 8002904:	f043 0304 	orr.w	r3, r3, #4
 8002908:	6313      	str	r3, [r2, #48]	; 0x30
 800290a:	4b25      	ldr	r3, [pc, #148]	; (80029a0 <HAL_I2C_MspInit+0x194>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	f003 0304 	and.w	r3, r3, #4
 8002912:	613b      	str	r3, [r7, #16]
 8002914:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	4b21      	ldr	r3, [pc, #132]	; (80029a0 <HAL_I2C_MspInit+0x194>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	4a20      	ldr	r2, [pc, #128]	; (80029a0 <HAL_I2C_MspInit+0x194>)
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	6313      	str	r3, [r2, #48]	; 0x30
 8002926:	4b1e      	ldr	r3, [pc, #120]	; (80029a0 <HAL_I2C_MspInit+0x194>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002932:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002936:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002938:	2312      	movs	r3, #18
 800293a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800293c:	2301      	movs	r3, #1
 800293e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002940:	2303      	movs	r3, #3
 8002942:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002944:	2304      	movs	r3, #4
 8002946:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800294c:	4619      	mov	r1, r3
 800294e:	4818      	ldr	r0, [pc, #96]	; (80029b0 <HAL_I2C_MspInit+0x1a4>)
 8002950:	f002 fca4 	bl	800529c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002954:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800295a:	2312      	movs	r3, #18
 800295c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800295e:	2301      	movs	r3, #1
 8002960:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002962:	2303      	movs	r3, #3
 8002964:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002966:	2304      	movs	r3, #4
 8002968:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800296a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800296e:	4619      	mov	r1, r3
 8002970:	4810      	ldr	r0, [pc, #64]	; (80029b4 <HAL_I2C_MspInit+0x1a8>)
 8002972:	f002 fc93 	bl	800529c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <HAL_I2C_MspInit+0x194>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	4a08      	ldr	r2, [pc, #32]	; (80029a0 <HAL_I2C_MspInit+0x194>)
 8002980:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002984:	6413      	str	r3, [r2, #64]	; 0x40
 8002986:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <HAL_I2C_MspInit+0x194>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800298e:	60bb      	str	r3, [r7, #8]
 8002990:	68bb      	ldr	r3, [r7, #8]
}
 8002992:	bf00      	nop
 8002994:	3738      	adds	r7, #56	; 0x38
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40005400 	.word	0x40005400
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40020400 	.word	0x40020400
 80029a8:	40005800 	.word	0x40005800
 80029ac:	40005c00 	.word	0x40005c00
 80029b0:	40020800 	.word	0x40020800
 80029b4:	40020000 	.word	0x40020000

080029b8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08e      	sub	sp, #56	; 0x38
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029c0:	f107 0308 	add.w	r3, r7, #8
 80029c4:	2230      	movs	r2, #48	; 0x30
 80029c6:	2100      	movs	r1, #0
 80029c8:	4618      	mov	r0, r3
 80029ca:	f00e fe01 	bl	80115d0 <memset>
  if(hrtc->Instance==RTC)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a10      	ldr	r2, [pc, #64]	; (8002a14 <HAL_RTC_MspInit+0x5c>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d119      	bne.n	8002a0c <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80029d8:	2320      	movs	r3, #32
 80029da:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80029dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029e0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029e2:	f107 0308 	add.w	r3, r7, #8
 80029e6:	4618      	mov	r0, r3
 80029e8:	f005 fdf8 	bl	80085dc <HAL_RCCEx_PeriphCLKConfig>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80029f2:	f7ff fe93 	bl	800271c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80029f6:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <HAL_RTC_MspInit+0x60>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 80029fc:	2200      	movs	r2, #0
 80029fe:	2105      	movs	r1, #5
 8002a00:	2029      	movs	r0, #41	; 0x29
 8002a02:	f002 fc13 	bl	800522c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002a06:	2029      	movs	r0, #41	; 0x29
 8002a08:	f002 fc2c 	bl	8005264 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002a0c:	bf00      	nop
 8002a0e:	3738      	adds	r7, #56	; 0x38
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40002800 	.word	0x40002800
 8002a18:	42470e3c 	.word	0x42470e3c

08002a1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08e      	sub	sp, #56	; 0x38
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	60da      	str	r2, [r3, #12]
 8002a32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a4c      	ldr	r2, [pc, #304]	; (8002b6c <HAL_SPI_MspInit+0x150>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d12d      	bne.n	8002a9a <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	623b      	str	r3, [r7, #32]
 8002a42:	4b4b      	ldr	r3, [pc, #300]	; (8002b70 <HAL_SPI_MspInit+0x154>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	4a4a      	ldr	r2, [pc, #296]	; (8002b70 <HAL_SPI_MspInit+0x154>)
 8002a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4e:	4b48      	ldr	r3, [pc, #288]	; (8002b70 <HAL_SPI_MspInit+0x154>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a56:	623b      	str	r3, [r7, #32]
 8002a58:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61fb      	str	r3, [r7, #28]
 8002a5e:	4b44      	ldr	r3, [pc, #272]	; (8002b70 <HAL_SPI_MspInit+0x154>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	4a43      	ldr	r2, [pc, #268]	; (8002b70 <HAL_SPI_MspInit+0x154>)
 8002a64:	f043 0302 	orr.w	r3, r3, #2
 8002a68:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6a:	4b41      	ldr	r3, [pc, #260]	; (8002b70 <HAL_SPI_MspInit+0x154>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	61fb      	str	r3, [r7, #28]
 8002a74:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002a76:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002a7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a80:	2300      	movs	r3, #0
 8002a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a84:	2303      	movs	r3, #3
 8002a86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a88:	2305      	movs	r3, #5
 8002a8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a90:	4619      	mov	r1, r3
 8002a92:	4838      	ldr	r0, [pc, #224]	; (8002b74 <HAL_SPI_MspInit+0x158>)
 8002a94:	f002 fc02 	bl	800529c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002a98:	e064      	b.n	8002b64 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI4)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a36      	ldr	r2, [pc, #216]	; (8002b78 <HAL_SPI_MspInit+0x15c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d12d      	bne.n	8002b00 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	61bb      	str	r3, [r7, #24]
 8002aa8:	4b31      	ldr	r3, [pc, #196]	; (8002b70 <HAL_SPI_MspInit+0x154>)
 8002aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aac:	4a30      	ldr	r2, [pc, #192]	; (8002b70 <HAL_SPI_MspInit+0x154>)
 8002aae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ab2:	6453      	str	r3, [r2, #68]	; 0x44
 8002ab4:	4b2e      	ldr	r3, [pc, #184]	; (8002b70 <HAL_SPI_MspInit+0x154>)
 8002ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002abc:	61bb      	str	r3, [r7, #24]
 8002abe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	4b2a      	ldr	r3, [pc, #168]	; (8002b70 <HAL_SPI_MspInit+0x154>)
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac8:	4a29      	ldr	r2, [pc, #164]	; (8002b70 <HAL_SPI_MspInit+0x154>)
 8002aca:	f043 0310 	orr.w	r3, r3, #16
 8002ace:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad0:	4b27      	ldr	r3, [pc, #156]	; (8002b70 <HAL_SPI_MspInit+0x154>)
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad4:	f003 0310 	and.w	r3, r3, #16
 8002ad8:	617b      	str	r3, [r7, #20]
 8002ada:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002adc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aea:	2303      	movs	r3, #3
 8002aec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002aee:	2305      	movs	r3, #5
 8002af0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002af6:	4619      	mov	r1, r3
 8002af8:	4820      	ldr	r0, [pc, #128]	; (8002b7c <HAL_SPI_MspInit+0x160>)
 8002afa:	f002 fbcf 	bl	800529c <HAL_GPIO_Init>
}
 8002afe:	e031      	b.n	8002b64 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI5)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a1e      	ldr	r2, [pc, #120]	; (8002b80 <HAL_SPI_MspInit+0x164>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d12c      	bne.n	8002b64 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	613b      	str	r3, [r7, #16]
 8002b0e:	4b18      	ldr	r3, [pc, #96]	; (8002b70 <HAL_SPI_MspInit+0x154>)
 8002b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b12:	4a17      	ldr	r2, [pc, #92]	; (8002b70 <HAL_SPI_MspInit+0x154>)
 8002b14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b18:	6453      	str	r3, [r2, #68]	; 0x44
 8002b1a:	4b15      	ldr	r3, [pc, #84]	; (8002b70 <HAL_SPI_MspInit+0x154>)
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b22:	613b      	str	r3, [r7, #16]
 8002b24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	4b11      	ldr	r3, [pc, #68]	; (8002b70 <HAL_SPI_MspInit+0x154>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	4a10      	ldr	r2, [pc, #64]	; (8002b70 <HAL_SPI_MspInit+0x154>)
 8002b30:	f043 0320 	orr.w	r3, r3, #32
 8002b34:	6313      	str	r3, [r2, #48]	; 0x30
 8002b36:	4b0e      	ldr	r3, [pc, #56]	; (8002b70 <HAL_SPI_MspInit+0x154>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	f003 0320 	and.w	r3, r3, #32
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002b42:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b48:	2302      	movs	r3, #2
 8002b4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b50:	2303      	movs	r3, #3
 8002b52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002b54:	2305      	movs	r3, #5
 8002b56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4809      	ldr	r0, [pc, #36]	; (8002b84 <HAL_SPI_MspInit+0x168>)
 8002b60:	f002 fb9c 	bl	800529c <HAL_GPIO_Init>
}
 8002b64:	bf00      	nop
 8002b66:	3738      	adds	r7, #56	; 0x38
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40003800 	.word	0x40003800
 8002b70:	40023800 	.word	0x40023800
 8002b74:	40020400 	.word	0x40020400
 8002b78:	40013400 	.word	0x40013400
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	40015000 	.word	0x40015000
 8002b84:	40021400 	.word	0x40021400

08002b88 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b98:	d10d      	bne.n	8002bb6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	4a08      	ldr	r2, [pc, #32]	; (8002bc4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ba4:	f043 0301 	orr.w	r3, r3, #1
 8002ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8002baa:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002bb6:	bf00      	nop
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	40023800 	.word	0x40023800

08002bc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b088      	sub	sp, #32
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd0:	f107 030c 	add.w	r3, r7, #12
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be8:	d11d      	bne.n	8002c26 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	60bb      	str	r3, [r7, #8]
 8002bee:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <HAL_TIM_MspPostInit+0x68>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	4a0f      	ldr	r2, [pc, #60]	; (8002c30 <HAL_TIM_MspPostInit+0x68>)
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfa:	4b0d      	ldr	r3, [pc, #52]	; (8002c30 <HAL_TIM_MspPostInit+0x68>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	60bb      	str	r3, [r7, #8]
 8002c04:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8002c06:	2304      	movs	r3, #4
 8002c08:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c12:	2300      	movs	r3, #0
 8002c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c16:	2301      	movs	r3, #1
 8002c18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8002c1a:	f107 030c 	add.w	r3, r7, #12
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4804      	ldr	r0, [pc, #16]	; (8002c34 <HAL_TIM_MspPostInit+0x6c>)
 8002c22:	f002 fb3b 	bl	800529c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002c26:	bf00      	nop
 8002c28:	3720      	adds	r7, #32
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40023800 	.word	0x40023800
 8002c34:	40020000 	.word	0x40020000

08002c38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b08e      	sub	sp, #56	; 0x38
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	609a      	str	r2, [r3, #8]
 8002c4c:	60da      	str	r2, [r3, #12]
 8002c4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a4b      	ldr	r2, [pc, #300]	; (8002d84 <HAL_UART_MspInit+0x14c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d12c      	bne.n	8002cb4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	623b      	str	r3, [r7, #32]
 8002c5e:	4b4a      	ldr	r3, [pc, #296]	; (8002d88 <HAL_UART_MspInit+0x150>)
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	4a49      	ldr	r2, [pc, #292]	; (8002d88 <HAL_UART_MspInit+0x150>)
 8002c64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c68:	6413      	str	r3, [r2, #64]	; 0x40
 8002c6a:	4b47      	ldr	r3, [pc, #284]	; (8002d88 <HAL_UART_MspInit+0x150>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c72:	623b      	str	r3, [r7, #32]
 8002c74:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	61fb      	str	r3, [r7, #28]
 8002c7a:	4b43      	ldr	r3, [pc, #268]	; (8002d88 <HAL_UART_MspInit+0x150>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	4a42      	ldr	r2, [pc, #264]	; (8002d88 <HAL_UART_MspInit+0x150>)
 8002c80:	f043 0310 	orr.w	r3, r3, #16
 8002c84:	6313      	str	r3, [r2, #48]	; 0x30
 8002c86:	4b40      	ldr	r3, [pc, #256]	; (8002d88 <HAL_UART_MspInit+0x150>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	f003 0310 	and.w	r3, r3, #16
 8002c8e:	61fb      	str	r3, [r7, #28]
 8002c90:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8002c92:	2303      	movs	r3, #3
 8002c94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c96:	2302      	movs	r3, #2
 8002c98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002ca2:	2308      	movs	r3, #8
 8002ca4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002caa:	4619      	mov	r1, r3
 8002cac:	4837      	ldr	r0, [pc, #220]	; (8002d8c <HAL_UART_MspInit+0x154>)
 8002cae:	f002 faf5 	bl	800529c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002cb2:	e063      	b.n	8002d7c <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a35      	ldr	r2, [pc, #212]	; (8002d90 <HAL_UART_MspInit+0x158>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d12d      	bne.n	8002d1a <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61bb      	str	r3, [r7, #24]
 8002cc2:	4b31      	ldr	r3, [pc, #196]	; (8002d88 <HAL_UART_MspInit+0x150>)
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	4a30      	ldr	r2, [pc, #192]	; (8002d88 <HAL_UART_MspInit+0x150>)
 8002cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cce:	4b2e      	ldr	r3, [pc, #184]	; (8002d88 <HAL_UART_MspInit+0x150>)
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cd6:	61bb      	str	r3, [r7, #24]
 8002cd8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]
 8002cde:	4b2a      	ldr	r3, [pc, #168]	; (8002d88 <HAL_UART_MspInit+0x150>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	4a29      	ldr	r2, [pc, #164]	; (8002d88 <HAL_UART_MspInit+0x150>)
 8002ce4:	f043 0308 	orr.w	r3, r3, #8
 8002ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cea:	4b27      	ldr	r3, [pc, #156]	; (8002d88 <HAL_UART_MspInit+0x150>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	f003 0308 	and.w	r3, r3, #8
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8002cf6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002cfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d04:	2303      	movs	r3, #3
 8002d06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d08:	2307      	movs	r3, #7
 8002d0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d10:	4619      	mov	r1, r3
 8002d12:	4820      	ldr	r0, [pc, #128]	; (8002d94 <HAL_UART_MspInit+0x15c>)
 8002d14:	f002 fac2 	bl	800529c <HAL_GPIO_Init>
}
 8002d18:	e030      	b.n	8002d7c <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a1e      	ldr	r2, [pc, #120]	; (8002d98 <HAL_UART_MspInit+0x160>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d12b      	bne.n	8002d7c <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002d24:	2300      	movs	r3, #0
 8002d26:	613b      	str	r3, [r7, #16]
 8002d28:	4b17      	ldr	r3, [pc, #92]	; (8002d88 <HAL_UART_MspInit+0x150>)
 8002d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2c:	4a16      	ldr	r2, [pc, #88]	; (8002d88 <HAL_UART_MspInit+0x150>)
 8002d2e:	f043 0320 	orr.w	r3, r3, #32
 8002d32:	6453      	str	r3, [r2, #68]	; 0x44
 8002d34:	4b14      	ldr	r3, [pc, #80]	; (8002d88 <HAL_UART_MspInit+0x150>)
 8002d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d38:	f003 0320 	and.w	r3, r3, #32
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d40:	2300      	movs	r3, #0
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	4b10      	ldr	r3, [pc, #64]	; (8002d88 <HAL_UART_MspInit+0x150>)
 8002d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d48:	4a0f      	ldr	r2, [pc, #60]	; (8002d88 <HAL_UART_MspInit+0x150>)
 8002d4a:	f043 0304 	orr.w	r3, r3, #4
 8002d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d50:	4b0d      	ldr	r3, [pc, #52]	; (8002d88 <HAL_UART_MspInit+0x150>)
 8002d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8002d5c:	23c0      	movs	r3, #192	; 0xc0
 8002d5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d60:	2302      	movs	r3, #2
 8002d62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002d6c:	2308      	movs	r3, #8
 8002d6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d74:	4619      	mov	r1, r3
 8002d76:	4809      	ldr	r0, [pc, #36]	; (8002d9c <HAL_UART_MspInit+0x164>)
 8002d78:	f002 fa90 	bl	800529c <HAL_GPIO_Init>
}
 8002d7c:	bf00      	nop
 8002d7e:	3738      	adds	r7, #56	; 0x38
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40007c00 	.word	0x40007c00
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	40004800 	.word	0x40004800
 8002d94:	40020c00 	.word	0x40020c00
 8002d98:	40011400 	.word	0x40011400
 8002d9c:	40020800 	.word	0x40020800

08002da0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b08c      	sub	sp, #48	; 0x30
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002dac:	2300      	movs	r3, #0
 8002dae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002db0:	2200      	movs	r2, #0
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	2036      	movs	r0, #54	; 0x36
 8002db6:	f002 fa39 	bl	800522c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002dba:	2036      	movs	r0, #54	; 0x36
 8002dbc:	f002 fa52 	bl	8005264 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	4b1f      	ldr	r3, [pc, #124]	; (8002e44 <HAL_InitTick+0xa4>)
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	4a1e      	ldr	r2, [pc, #120]	; (8002e44 <HAL_InitTick+0xa4>)
 8002dca:	f043 0310 	orr.w	r3, r3, #16
 8002dce:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd0:	4b1c      	ldr	r3, [pc, #112]	; (8002e44 <HAL_InitTick+0xa4>)
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	f003 0310 	and.w	r3, r3, #16
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ddc:	f107 0210 	add.w	r2, r7, #16
 8002de0:	f107 0314 	add.w	r3, r7, #20
 8002de4:	4611      	mov	r1, r2
 8002de6:	4618      	mov	r0, r3
 8002de8:	f005 fbc6 	bl	8008578 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002dec:	f005 fb9c 	bl	8008528 <HAL_RCC_GetPCLK1Freq>
 8002df0:	4603      	mov	r3, r0
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df8:	4a13      	ldr	r2, [pc, #76]	; (8002e48 <HAL_InitTick+0xa8>)
 8002dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfe:	0c9b      	lsrs	r3, r3, #18
 8002e00:	3b01      	subs	r3, #1
 8002e02:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002e04:	4b11      	ldr	r3, [pc, #68]	; (8002e4c <HAL_InitTick+0xac>)
 8002e06:	4a12      	ldr	r2, [pc, #72]	; (8002e50 <HAL_InitTick+0xb0>)
 8002e08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002e0a:	4b10      	ldr	r3, [pc, #64]	; (8002e4c <HAL_InitTick+0xac>)
 8002e0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e10:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002e12:	4a0e      	ldr	r2, [pc, #56]	; (8002e4c <HAL_InitTick+0xac>)
 8002e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e16:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002e18:	4b0c      	ldr	r3, [pc, #48]	; (8002e4c <HAL_InitTick+0xac>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e1e:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <HAL_InitTick+0xac>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002e24:	4809      	ldr	r0, [pc, #36]	; (8002e4c <HAL_InitTick+0xac>)
 8002e26:	f006 fa68 	bl	80092fa <HAL_TIM_Base_Init>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d104      	bne.n	8002e3a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002e30:	4806      	ldr	r0, [pc, #24]	; (8002e4c <HAL_InitTick+0xac>)
 8002e32:	f006 fabb 	bl	80093ac <HAL_TIM_Base_Start_IT>
 8002e36:	4603      	mov	r3, r0
 8002e38:	e000      	b.n	8002e3c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3730      	adds	r7, #48	; 0x30
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40023800 	.word	0x40023800
 8002e48:	431bde83 	.word	0x431bde83
 8002e4c:	2000565c 	.word	0x2000565c
 8002e50:	40001000 	.word	0x40001000

08002e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e58:	bf00      	nop
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e62:	b480      	push	{r7}
 8002e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e66:	e7fe      	b.n	8002e66 <HardFault_Handler+0x4>

08002e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e6c:	e7fe      	b.n	8002e6c <MemManage_Handler+0x4>

08002e6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e72:	e7fe      	b.n	8002e72 <BusFault_Handler+0x4>

08002e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e78:	e7fe      	b.n	8002e78 <UsageFault_Handler+0x4>

08002e7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e7e:	bf00      	nop
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002e8c:	4802      	ldr	r0, [pc, #8]	; (8002e98 <RTC_Alarm_IRQHandler+0x10>)
 8002e8e:	f006 f891 	bl	8008fb4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002e92:	bf00      	nop
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	200054a4 	.word	0x200054a4

08002e9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ea0:	4802      	ldr	r0, [pc, #8]	; (8002eac <TIM6_DAC_IRQHandler+0x10>)
 8002ea2:	f006 fb42 	bl	800952a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ea6:	bf00      	nop
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	2000565c 	.word	0x2000565c

08002eb0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002eb4:	4802      	ldr	r0, [pc, #8]	; (8002ec0 <OTG_FS_IRQHandler+0x10>)
 8002eb6:	f003 fea5 	bl	8006c04 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002eba:	bf00      	nop
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	20006cc0 	.word	0x20006cc0

08002ec4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
	return 1;
 8002ec8:	2301      	movs	r3, #1
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <_kill>:

int _kill(int pid, int sig)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ede:	f00e fa23 	bl	8011328 <__errno>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2216      	movs	r2, #22
 8002ee6:	601a      	str	r2, [r3, #0]
	return -1;
 8002ee8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <_exit>:

void _exit (int status)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002efc:	f04f 31ff 	mov.w	r1, #4294967295
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f7ff ffe7 	bl	8002ed4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f06:	e7fe      	b.n	8002f06 <_exit+0x12>

08002f08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f14:	2300      	movs	r3, #0
 8002f16:	617b      	str	r3, [r7, #20]
 8002f18:	e00a      	b.n	8002f30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f1a:	f3af 8000 	nop.w
 8002f1e:	4601      	mov	r1, r0
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	1c5a      	adds	r2, r3, #1
 8002f24:	60ba      	str	r2, [r7, #8]
 8002f26:	b2ca      	uxtb	r2, r1
 8002f28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	617b      	str	r3, [r7, #20]
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	dbf0      	blt.n	8002f1a <_read+0x12>
	}

return len;
 8002f38:	687b      	ldr	r3, [r7, #4]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b086      	sub	sp, #24
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	60f8      	str	r0, [r7, #12]
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f4e:	2300      	movs	r3, #0
 8002f50:	617b      	str	r3, [r7, #20]
 8002f52:	e009      	b.n	8002f68 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	1c5a      	adds	r2, r3, #1
 8002f58:	60ba      	str	r2, [r7, #8]
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	3301      	adds	r3, #1
 8002f66:	617b      	str	r3, [r7, #20]
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	dbf1      	blt.n	8002f54 <_write+0x12>
	}
	return len;
 8002f70:	687b      	ldr	r3, [r7, #4]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <_close>:

int _close(int file)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b083      	sub	sp, #12
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
	return -1;
 8002f82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b083      	sub	sp, #12
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
 8002f9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fa2:	605a      	str	r2, [r3, #4]
	return 0;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <_isatty>:

int _isatty(int file)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
	return 1;
 8002fba:	2301      	movs	r3, #1
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
	return 0;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
	...

08002fe4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fec:	4a14      	ldr	r2, [pc, #80]	; (8003040 <_sbrk+0x5c>)
 8002fee:	4b15      	ldr	r3, [pc, #84]	; (8003044 <_sbrk+0x60>)
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ff8:	4b13      	ldr	r3, [pc, #76]	; (8003048 <_sbrk+0x64>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d102      	bne.n	8003006 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003000:	4b11      	ldr	r3, [pc, #68]	; (8003048 <_sbrk+0x64>)
 8003002:	4a12      	ldr	r2, [pc, #72]	; (800304c <_sbrk+0x68>)
 8003004:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003006:	4b10      	ldr	r3, [pc, #64]	; (8003048 <_sbrk+0x64>)
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4413      	add	r3, r2
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	429a      	cmp	r2, r3
 8003012:	d207      	bcs.n	8003024 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003014:	f00e f988 	bl	8011328 <__errno>
 8003018:	4603      	mov	r3, r0
 800301a:	220c      	movs	r2, #12
 800301c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800301e:	f04f 33ff 	mov.w	r3, #4294967295
 8003022:	e009      	b.n	8003038 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003024:	4b08      	ldr	r3, [pc, #32]	; (8003048 <_sbrk+0x64>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800302a:	4b07      	ldr	r3, [pc, #28]	; (8003048 <_sbrk+0x64>)
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4413      	add	r3, r2
 8003032:	4a05      	ldr	r2, [pc, #20]	; (8003048 <_sbrk+0x64>)
 8003034:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003036:	68fb      	ldr	r3, [r7, #12]
}
 8003038:	4618      	mov	r0, r3
 800303a:	3718      	adds	r7, #24
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	20030000 	.word	0x20030000
 8003044:	00000400 	.word	0x00000400
 8003048:	200003b8 	.word	0x200003b8
 800304c:	200070d8 	.word	0x200070d8

08003050 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003054:	4b08      	ldr	r3, [pc, #32]	; (8003078 <SystemInit+0x28>)
 8003056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305a:	4a07      	ldr	r2, [pc, #28]	; (8003078 <SystemInit+0x28>)
 800305c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003060:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003064:	4b04      	ldr	r3, [pc, #16]	; (8003078 <SystemInit+0x28>)
 8003066:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800306a:	609a      	str	r2, [r3, #8]
#endif
}
 800306c:	bf00      	nop
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	e000ed00 	.word	0xe000ed00

0800307c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800307c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003080:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003082:	e003      	b.n	800308c <LoopCopyDataInit>

08003084 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003084:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003086:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003088:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800308a:	3104      	adds	r1, #4

0800308c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800308c:	480b      	ldr	r0, [pc, #44]	; (80030bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800308e:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003090:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003092:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003094:	d3f6      	bcc.n	8003084 <CopyDataInit>
  ldr  r2, =_sbss
 8003096:	4a0b      	ldr	r2, [pc, #44]	; (80030c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003098:	e002      	b.n	80030a0 <LoopFillZerobss>

0800309a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800309a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800309c:	f842 3b04 	str.w	r3, [r2], #4

080030a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80030a0:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80030a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80030a4:	d3f9      	bcc.n	800309a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80030a6:	f7ff ffd3 	bl	8003050 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030aa:	f00e fa39 	bl	8011520 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030ae:	f7fe fabd 	bl	800162c <main>
  bx  lr    
 80030b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80030b4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80030b8:	08016fcc 	.word	0x08016fcc
  ldr  r0, =_sdata
 80030bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80030c0:	2000035c 	.word	0x2000035c
  ldr  r2, =_sbss
 80030c4:	2000035c 	.word	0x2000035c
  ldr  r3, = _ebss
 80030c8:	200070d8 	.word	0x200070d8

080030cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030cc:	e7fe      	b.n	80030cc <ADC_IRQHandler>
	...

080030d0 <GPS_Poll>:
UART_HandleTypeDef* SERIAL_USART;



void GPS_Poll(float *latitude, float *longitude, float *time)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b08c      	sub	sp, #48	; 0x30
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 80030dc:	2364      	movs	r3, #100	; 0x64
 80030de:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 80030e0:	2300      	movs	r3, #0
 80030e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 80030e4:	2300      	movs	r3, #0
 80030e6:	62bb      	str	r3, [r7, #40]	; 0x28
	while(loop_count < max_loop_count && !done){
 80030e8:	e073      	b.n	80031d2 <GPS_Poll+0x102>
		HAL_UART_Receive(GPS_USART, (uint8_t*)&rx_current, 1, 100);
 80030ea:	4b3f      	ldr	r3, [pc, #252]	; (80031e8 <GPS_Poll+0x118>)
 80030ec:	6818      	ldr	r0, [r3, #0]
 80030ee:	2364      	movs	r3, #100	; 0x64
 80030f0:	2201      	movs	r2, #1
 80030f2:	493e      	ldr	r1, [pc, #248]	; (80031ec <GPS_Poll+0x11c>)
 80030f4:	f006 ffcb 	bl	800a08e <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 80030f8:	4b3c      	ldr	r3, [pc, #240]	; (80031ec <GPS_Poll+0x11c>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b0a      	cmp	r3, #10
 80030fe:	d00f      	beq.n	8003120 <GPS_Poll+0x50>
 8003100:	4b3b      	ldr	r3, [pc, #236]	; (80031f0 <GPS_Poll+0x120>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b63      	cmp	r3, #99	; 0x63
 8003106:	d80b      	bhi.n	8003120 <GPS_Poll+0x50>
			rx_buffer[rx_index++] = rx_current;
 8003108:	4b39      	ldr	r3, [pc, #228]	; (80031f0 <GPS_Poll+0x120>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	1c5a      	adds	r2, r3, #1
 800310e:	b2d1      	uxtb	r1, r2
 8003110:	4a37      	ldr	r2, [pc, #220]	; (80031f0 <GPS_Poll+0x120>)
 8003112:	7011      	strb	r1, [r2, #0]
 8003114:	461a      	mov	r2, r3
 8003116:	4b35      	ldr	r3, [pc, #212]	; (80031ec <GPS_Poll+0x11c>)
 8003118:	7819      	ldrb	r1, [r3, #0]
 800311a:	4b36      	ldr	r3, [pc, #216]	; (80031f4 <GPS_Poll+0x124>)
 800311c:	5499      	strb	r1, [r3, r2]
 800311e:	e021      	b.n	8003164 <GPS_Poll+0x94>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 8003120:	4834      	ldr	r0, [pc, #208]	; (80031f4 <GPS_Poll+0x124>)
 8003122:	f000 f86b 	bl	80031fc <GPS_validate>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d013      	beq.n	8003154 <GPS_Poll+0x84>
				if(GPS_parse((char*) rx_buffer)){
 800312c:	4831      	ldr	r0, [pc, #196]	; (80031f4 <GPS_Poll+0x124>)
 800312e:	f000 f8c7 	bl	80032c0 <GPS_parse>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00d      	beq.n	8003154 <GPS_Poll+0x84>
					*latitude = GPS.dec_latitude;
 8003138:	4b2f      	ldr	r3, [pc, #188]	; (80031f8 <GPS_Poll+0x128>)
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 8003140:	4b2d      	ldr	r3, [pc, #180]	; (80031f8 <GPS_Poll+0x128>)
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 8003148:	4b2b      	ldr	r3, [pc, #172]	; (80031f8 <GPS_Poll+0x128>)
 800314a:	695a      	ldr	r2, [r3, #20]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	601a      	str	r2, [r3, #0]
					done = 1;
 8003150:	2301      	movs	r3, #1
 8003152:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 8003154:	4b26      	ldr	r3, [pc, #152]	; (80031f0 <GPS_Poll+0x120>)
 8003156:	2200      	movs	r2, #0
 8003158:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 800315a:	2264      	movs	r2, #100	; 0x64
 800315c:	2100      	movs	r1, #0
 800315e:	4825      	ldr	r0, [pc, #148]	; (80031f4 <GPS_Poll+0x124>)
 8003160:	f00e fa36 	bl	80115d0 <memset>
		}

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS_USART);
 8003164:	2300      	movs	r3, #0
 8003166:	623b      	str	r3, [r7, #32]
 8003168:	4b1f      	ldr	r3, [pc, #124]	; (80031e8 <GPS_Poll+0x118>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	623b      	str	r3, [r7, #32]
 8003172:	4b1d      	ldr	r3, [pc, #116]	; (80031e8 <GPS_Poll+0x118>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	623b      	str	r3, [r7, #32]
 800317c:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS_USART);
 800317e:	2300      	movs	r3, #0
 8003180:	61fb      	str	r3, [r7, #28]
 8003182:	4b19      	ldr	r3, [pc, #100]	; (80031e8 <GPS_Poll+0x118>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	61fb      	str	r3, [r7, #28]
 800318c:	4b16      	ldr	r3, [pc, #88]	; (80031e8 <GPS_Poll+0x118>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	61fb      	str	r3, [r7, #28]
 8003196:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS_USART);
 8003198:	2300      	movs	r3, #0
 800319a:	61bb      	str	r3, [r7, #24]
 800319c:	4b12      	ldr	r3, [pc, #72]	; (80031e8 <GPS_Poll+0x118>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	61bb      	str	r3, [r7, #24]
 80031a6:	4b10      	ldr	r3, [pc, #64]	; (80031e8 <GPS_Poll+0x118>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	61bb      	str	r3, [r7, #24]
 80031b0:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS_USART);
 80031b2:	2300      	movs	r3, #0
 80031b4:	617b      	str	r3, [r7, #20]
 80031b6:	4b0c      	ldr	r3, [pc, #48]	; (80031e8 <GPS_Poll+0x118>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <GPS_Poll+0x118>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	617b      	str	r3, [r7, #20]
 80031ca:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 80031cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80031ce:	3301      	adds	r3, #1
 80031d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 80031d2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80031d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d202      	bcs.n	80031e0 <GPS_Poll+0x110>
 80031da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d084      	beq.n	80030ea <GPS_Poll+0x1a>
	}
}
 80031e0:	bf00      	nop
 80031e2:	3730      	adds	r7, #48	; 0x30
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	20005298 	.word	0x20005298
 80031ec:	200003bc 	.word	0x200003bc
 80031f0:	200003bd 	.word	0x200003bd
 80031f4:	200056fc 	.word	0x200056fc
 80031f8:	200056a4 	.word	0x200056a4

080031fc <GPS_validate>:

int GPS_validate(char *nmeastr){
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8003204:	2300      	movs	r3, #0
 8003206:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8003208:	2300      	movs	r3, #0
 800320a:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	4413      	add	r3, r2
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b24      	cmp	r3, #36	; 0x24
 8003216:	d103      	bne.n	8003220 <GPS_validate+0x24>
        i++;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	3301      	adds	r3, #1
 800321c:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800321e:	e00c      	b.n	800323a <GPS_validate+0x3e>
        return 0;
 8003220:	2300      	movs	r3, #0
 8003222:	e047      	b.n	80032b4 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	4413      	add	r3, r2
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	461a      	mov	r2, r3
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4053      	eors	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
        i++;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	3301      	adds	r3, #1
 8003238:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	4413      	add	r3, r2
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d008      	beq.n	8003258 <GPS_validate+0x5c>
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	4413      	add	r3, r2
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	2b2a      	cmp	r3, #42	; 0x2a
 8003250:	d002      	beq.n	8003258 <GPS_validate+0x5c>
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	2b4a      	cmp	r3, #74	; 0x4a
 8003256:	dde5      	ble.n	8003224 <GPS_validate+0x28>
    }

    if(i >= 75){
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	2b4a      	cmp	r3, #74	; 0x4a
 800325c:	dd01      	ble.n	8003262 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 800325e:	2300      	movs	r3, #0
 8003260:	e028      	b.n	80032b4 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	4413      	add	r3, r2
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b2a      	cmp	r3, #42	; 0x2a
 800326c:	d119      	bne.n	80032a2 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	3301      	adds	r3, #1
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	4413      	add	r3, r2
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	3302      	adds	r3, #2
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	4413      	add	r3, r2
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8003286:	2300      	movs	r3, #0
 8003288:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 800328a:	f107 0308 	add.w	r3, r7, #8
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	490a      	ldr	r1, [pc, #40]	; (80032bc <GPS_validate+0xc0>)
 8003292:	4618      	mov	r0, r3
 8003294:	f00f f98c 	bl	80125b0 <siprintf>
    return((checkcalcstr[0] == check[0])
 8003298:	7a3a      	ldrb	r2, [r7, #8]
 800329a:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800329c:	429a      	cmp	r2, r3
 800329e:	d108      	bne.n	80032b2 <GPS_validate+0xb6>
 80032a0:	e001      	b.n	80032a6 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 80032a2:	2300      	movs	r3, #0
 80032a4:	e006      	b.n	80032b4 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80032a6:	7a7a      	ldrb	r2, [r7, #9]
 80032a8:	7b7b      	ldrb	r3, [r7, #13]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d101      	bne.n	80032b2 <GPS_validate+0xb6>
 80032ae:	2301      	movs	r3, #1
 80032b0:	e000      	b.n	80032b4 <GPS_validate+0xb8>
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3718      	adds	r7, #24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	08016730 	.word	0x08016730

080032c0 <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08a      	sub	sp, #40	; 0x28
 80032c4:	af08      	add	r7, sp, #32
 80032c6:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 80032c8:	2206      	movs	r2, #6
 80032ca:	496d      	ldr	r1, [pc, #436]	; (8003480 <GPS_parse+0x1c0>)
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f00f fa00 	bl	80126d2 <strncmp>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d139      	bne.n	800334c <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 80032d8:	4b6a      	ldr	r3, [pc, #424]	; (8003484 <GPS_parse+0x1c4>)
 80032da:	9307      	str	r3, [sp, #28]
 80032dc:	4b6a      	ldr	r3, [pc, #424]	; (8003488 <GPS_parse+0x1c8>)
 80032de:	9306      	str	r3, [sp, #24]
 80032e0:	4b6a      	ldr	r3, [pc, #424]	; (800348c <GPS_parse+0x1cc>)
 80032e2:	9305      	str	r3, [sp, #20]
 80032e4:	4b6a      	ldr	r3, [pc, #424]	; (8003490 <GPS_parse+0x1d0>)
 80032e6:	9304      	str	r3, [sp, #16]
 80032e8:	4b6a      	ldr	r3, [pc, #424]	; (8003494 <GPS_parse+0x1d4>)
 80032ea:	9303      	str	r3, [sp, #12]
 80032ec:	4b6a      	ldr	r3, [pc, #424]	; (8003498 <GPS_parse+0x1d8>)
 80032ee:	9302      	str	r3, [sp, #8]
 80032f0:	4b6a      	ldr	r3, [pc, #424]	; (800349c <GPS_parse+0x1dc>)
 80032f2:	9301      	str	r3, [sp, #4]
 80032f4:	4b6a      	ldr	r3, [pc, #424]	; (80034a0 <GPS_parse+0x1e0>)
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	4b6a      	ldr	r3, [pc, #424]	; (80034a4 <GPS_parse+0x1e4>)
 80032fa:	4a6b      	ldr	r2, [pc, #428]	; (80034a8 <GPS_parse+0x1e8>)
 80032fc:	496b      	ldr	r1, [pc, #428]	; (80034ac <GPS_parse+0x1ec>)
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f00f f976 	bl	80125f0 <siscanf>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	f340 80b5 	ble.w	8003476 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 800330c:	4b68      	ldr	r3, [pc, #416]	; (80034b0 <GPS_parse+0x1f0>)
 800330e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003312:	4b67      	ldr	r3, [pc, #412]	; (80034b0 <GPS_parse+0x1f0>)
 8003314:	7e1b      	ldrb	r3, [r3, #24]
 8003316:	4618      	mov	r0, r3
 8003318:	eeb0 0a67 	vmov.f32	s0, s15
 800331c:	f000 f8ec 	bl	80034f8 <GPS_nmea_to_dec>
 8003320:	eef0 7a40 	vmov.f32	s15, s0
 8003324:	4b62      	ldr	r3, [pc, #392]	; (80034b0 <GPS_parse+0x1f0>)
 8003326:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 800332a:	4b61      	ldr	r3, [pc, #388]	; (80034b0 <GPS_parse+0x1f0>)
 800332c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003330:	4b5f      	ldr	r3, [pc, #380]	; (80034b0 <GPS_parse+0x1f0>)
 8003332:	7e5b      	ldrb	r3, [r3, #25]
 8003334:	4618      	mov	r0, r3
 8003336:	eeb0 0a67 	vmov.f32	s0, s15
 800333a:	f000 f8dd 	bl	80034f8 <GPS_nmea_to_dec>
 800333e:	eef0 7a40 	vmov.f32	s15, s0
 8003342:	4b5b      	ldr	r3, [pc, #364]	; (80034b0 <GPS_parse+0x1f0>)
 8003344:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8003348:	2301      	movs	r3, #1
 800334a:	e095      	b.n	8003478 <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 800334c:	2206      	movs	r2, #6
 800334e:	4959      	ldr	r1, [pc, #356]	; (80034b4 <GPS_parse+0x1f4>)
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f00f f9be 	bl	80126d2 <strncmp>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d134      	bne.n	80033c6 <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 800335c:	4b56      	ldr	r3, [pc, #344]	; (80034b8 <GPS_parse+0x1f8>)
 800335e:	9305      	str	r3, [sp, #20]
 8003360:	4b56      	ldr	r3, [pc, #344]	; (80034bc <GPS_parse+0x1fc>)
 8003362:	9304      	str	r3, [sp, #16]
 8003364:	4b56      	ldr	r3, [pc, #344]	; (80034c0 <GPS_parse+0x200>)
 8003366:	9303      	str	r3, [sp, #12]
 8003368:	4b4b      	ldr	r3, [pc, #300]	; (8003498 <GPS_parse+0x1d8>)
 800336a:	9302      	str	r3, [sp, #8]
 800336c:	4b4b      	ldr	r3, [pc, #300]	; (800349c <GPS_parse+0x1dc>)
 800336e:	9301      	str	r3, [sp, #4]
 8003370:	4b4b      	ldr	r3, [pc, #300]	; (80034a0 <GPS_parse+0x1e0>)
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	4b4b      	ldr	r3, [pc, #300]	; (80034a4 <GPS_parse+0x1e4>)
 8003376:	4a4c      	ldr	r2, [pc, #304]	; (80034a8 <GPS_parse+0x1e8>)
 8003378:	4952      	ldr	r1, [pc, #328]	; (80034c4 <GPS_parse+0x204>)
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f00f f938 	bl	80125f0 <siscanf>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	dd77      	ble.n	8003476 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8003386:	4b4a      	ldr	r3, [pc, #296]	; (80034b0 <GPS_parse+0x1f0>)
 8003388:	edd3 7a04 	vldr	s15, [r3, #16]
 800338c:	4b48      	ldr	r3, [pc, #288]	; (80034b0 <GPS_parse+0x1f0>)
 800338e:	7e1b      	ldrb	r3, [r3, #24]
 8003390:	4618      	mov	r0, r3
 8003392:	eeb0 0a67 	vmov.f32	s0, s15
 8003396:	f000 f8af 	bl	80034f8 <GPS_nmea_to_dec>
 800339a:	eef0 7a40 	vmov.f32	s15, s0
 800339e:	4b44      	ldr	r3, [pc, #272]	; (80034b0 <GPS_parse+0x1f0>)
 80033a0:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80033a4:	4b42      	ldr	r3, [pc, #264]	; (80034b0 <GPS_parse+0x1f0>)
 80033a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80033aa:	4b41      	ldr	r3, [pc, #260]	; (80034b0 <GPS_parse+0x1f0>)
 80033ac:	7e5b      	ldrb	r3, [r3, #25]
 80033ae:	4618      	mov	r0, r3
 80033b0:	eeb0 0a67 	vmov.f32	s0, s15
 80033b4:	f000 f8a0 	bl	80034f8 <GPS_nmea_to_dec>
 80033b8:	eef0 7a40 	vmov.f32	s15, s0
 80033bc:	4b3c      	ldr	r3, [pc, #240]	; (80034b0 <GPS_parse+0x1f0>)
 80033be:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e058      	b.n	8003478 <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 80033c6:	2206      	movs	r2, #6
 80033c8:	493f      	ldr	r1, [pc, #252]	; (80034c8 <GPS_parse+0x208>)
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f00f f981 	bl	80126d2 <strncmp>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d130      	bne.n	8003438 <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 80033d6:	4b3d      	ldr	r3, [pc, #244]	; (80034cc <GPS_parse+0x20c>)
 80033d8:	9303      	str	r3, [sp, #12]
 80033da:	4b33      	ldr	r3, [pc, #204]	; (80034a8 <GPS_parse+0x1e8>)
 80033dc:	9302      	str	r3, [sp, #8]
 80033de:	4b2e      	ldr	r3, [pc, #184]	; (8003498 <GPS_parse+0x1d8>)
 80033e0:	9301      	str	r3, [sp, #4]
 80033e2:	4b2e      	ldr	r3, [pc, #184]	; (800349c <GPS_parse+0x1dc>)
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	4b2e      	ldr	r3, [pc, #184]	; (80034a0 <GPS_parse+0x1e0>)
 80033e8:	4a2e      	ldr	r2, [pc, #184]	; (80034a4 <GPS_parse+0x1e4>)
 80033ea:	4939      	ldr	r1, [pc, #228]	; (80034d0 <GPS_parse+0x210>)
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f00f f8ff 	bl	80125f0 <siscanf>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	dd3e      	ble.n	8003476 <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80033f8:	4b2d      	ldr	r3, [pc, #180]	; (80034b0 <GPS_parse+0x1f0>)
 80033fa:	edd3 7a04 	vldr	s15, [r3, #16]
 80033fe:	4b2c      	ldr	r3, [pc, #176]	; (80034b0 <GPS_parse+0x1f0>)
 8003400:	7e1b      	ldrb	r3, [r3, #24]
 8003402:	4618      	mov	r0, r3
 8003404:	eeb0 0a67 	vmov.f32	s0, s15
 8003408:	f000 f876 	bl	80034f8 <GPS_nmea_to_dec>
 800340c:	eef0 7a40 	vmov.f32	s15, s0
 8003410:	4b27      	ldr	r3, [pc, #156]	; (80034b0 <GPS_parse+0x1f0>)
 8003412:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8003416:	4b26      	ldr	r3, [pc, #152]	; (80034b0 <GPS_parse+0x1f0>)
 8003418:	edd3 7a03 	vldr	s15, [r3, #12]
 800341c:	4b24      	ldr	r3, [pc, #144]	; (80034b0 <GPS_parse+0x1f0>)
 800341e:	7e5b      	ldrb	r3, [r3, #25]
 8003420:	4618      	mov	r0, r3
 8003422:	eeb0 0a67 	vmov.f32	s0, s15
 8003426:	f000 f867 	bl	80034f8 <GPS_nmea_to_dec>
 800342a:	eef0 7a40 	vmov.f32	s15, s0
 800342e:	4b20      	ldr	r3, [pc, #128]	; (80034b0 <GPS_parse+0x1f0>)
 8003430:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 8003434:	2301      	movs	r3, #1
 8003436:	e01f      	b.n	8003478 <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 8003438:	2206      	movs	r2, #6
 800343a:	4926      	ldr	r1, [pc, #152]	; (80034d4 <GPS_parse+0x214>)
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f00f f948 	bl	80126d2 <strncmp>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d116      	bne.n	8003476 <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8003448:	4b23      	ldr	r3, [pc, #140]	; (80034d8 <GPS_parse+0x218>)
 800344a:	9305      	str	r3, [sp, #20]
 800344c:	4b23      	ldr	r3, [pc, #140]	; (80034dc <GPS_parse+0x21c>)
 800344e:	9304      	str	r3, [sp, #16]
 8003450:	4b23      	ldr	r3, [pc, #140]	; (80034e0 <GPS_parse+0x220>)
 8003452:	9303      	str	r3, [sp, #12]
 8003454:	4b1a      	ldr	r3, [pc, #104]	; (80034c0 <GPS_parse+0x200>)
 8003456:	9302      	str	r3, [sp, #8]
 8003458:	4b22      	ldr	r3, [pc, #136]	; (80034e4 <GPS_parse+0x224>)
 800345a:	9301      	str	r3, [sp, #4]
 800345c:	4b22      	ldr	r3, [pc, #136]	; (80034e8 <GPS_parse+0x228>)
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	4b22      	ldr	r3, [pc, #136]	; (80034ec <GPS_parse+0x22c>)
 8003462:	4a23      	ldr	r2, [pc, #140]	; (80034f0 <GPS_parse+0x230>)
 8003464:	4923      	ldr	r1, [pc, #140]	; (80034f4 <GPS_parse+0x234>)
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f00f f8c2 	bl	80125f0 <siscanf>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	dd01      	ble.n	8003476 <GPS_parse+0x1b6>
            return 0;
 8003472:	2300      	movs	r3, #0
 8003474:	e000      	b.n	8003478 <GPS_parse+0x1b8>
    }
    return 0;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	08016738 	.word	0x08016738
 8003484:	200056d0 	.word	0x200056d0
 8003488:	200056cc 	.word	0x200056cc
 800348c:	200056c8 	.word	0x200056c8
 8003490:	200056c4 	.word	0x200056c4
 8003494:	200056c0 	.word	0x200056c0
 8003498:	200056bd 	.word	0x200056bd
 800349c:	200056b0 	.word	0x200056b0
 80034a0:	200056bc 	.word	0x200056bc
 80034a4:	200056b4 	.word	0x200056b4
 80034a8:	200056b8 	.word	0x200056b8
 80034ac:	08016740 	.word	0x08016740
 80034b0:	200056a4 	.word	0x200056a4
 80034b4:	08016768 	.word	0x08016768
 80034b8:	200056dc 	.word	0x200056dc
 80034bc:	200056d8 	.word	0x200056d8
 80034c0:	200056d4 	.word	0x200056d4
 80034c4:	08016770 	.word	0x08016770
 80034c8:	08016790 	.word	0x08016790
 80034cc:	200056e0 	.word	0x200056e0
 80034d0:	08016798 	.word	0x08016798
 80034d4:	080167b4 	.word	0x080167b4
 80034d8:	200056f8 	.word	0x200056f8
 80034dc:	200056f4 	.word	0x200056f4
 80034e0:	200056f1 	.word	0x200056f1
 80034e4:	200056f0 	.word	0x200056f0
 80034e8:	200056ec 	.word	0x200056ec
 80034ec:	200056e8 	.word	0x200056e8
 80034f0:	200056e4 	.word	0x200056e4
 80034f4:	080167bc 	.word	0x080167bc

080034f8 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 80034f8:	b480      	push	{r7}
 80034fa:	b087      	sub	sp, #28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8003502:	4603      	mov	r3, r0
 8003504:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8003506:	ed97 7a01 	vldr	s14, [r7, #4]
 800350a:	eddf 6a20 	vldr	s13, [pc, #128]	; 800358c <GPS_nmea_to_dec+0x94>
 800350e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003512:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003516:	ee17 3a90 	vmov	r3, s15
 800351a:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	2264      	movs	r2, #100	; 0x64
 8003520:	fb02 f303 	mul.w	r3, r2, r3
 8003524:	ee07 3a90 	vmov	s15, r3
 8003528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800352c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003530:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003534:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8003538:	ed97 7a03 	vldr	s14, [r7, #12]
 800353c:	eddf 6a14 	vldr	s13, [pc, #80]	; 8003590 <GPS_nmea_to_dec+0x98>
 8003540:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003544:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	ee07 3a90 	vmov	s15, r3
 800354e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003552:	ed97 7a02 	vldr	s14, [r7, #8]
 8003556:	ee77 7a27 	vadd.f32	s15, s14, s15
 800355a:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 800355e:	78fb      	ldrb	r3, [r7, #3]
 8003560:	2b53      	cmp	r3, #83	; 0x53
 8003562:	d002      	beq.n	800356a <GPS_nmea_to_dec+0x72>
 8003564:	78fb      	ldrb	r3, [r7, #3]
 8003566:	2b57      	cmp	r3, #87	; 0x57
 8003568:	d105      	bne.n	8003576 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 800356a:	edd7 7a05 	vldr	s15, [r7, #20]
 800356e:	eef1 7a67 	vneg.f32	s15, s15
 8003572:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	ee07 3a90 	vmov	s15, r3
}
 800357c:	eeb0 0a67 	vmov.f32	s0, s15
 8003580:	371c      	adds	r7, #28
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	42c80000 	.word	0x42c80000
 8003590:	42700000 	.word	0x42700000

08003594 <GPS_init>:

/*
 * TODO MRT code
 */

void GPS_init(UART_HandleTypeDef* data_uart, UART_HandleTypeDef* transmit_uart){
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
	GPS_USART = data_uart;
 800359e:	4a09      	ldr	r2, [pc, #36]	; (80035c4 <GPS_init+0x30>)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6013      	str	r3, [r2, #0]
	SERIAL_USART = transmit_uart;
 80035a4:	4a08      	ldr	r2, [pc, #32]	; (80035c8 <GPS_init+0x34>)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(SERIAL_USART,"\r\n\r\nGPS Init\r\n\r\n",16,HAL_MAX_DELAY);
 80035aa:	4b07      	ldr	r3, [pc, #28]	; (80035c8 <GPS_init+0x34>)
 80035ac:	6818      	ldr	r0, [r3, #0]
 80035ae:	f04f 33ff 	mov.w	r3, #4294967295
 80035b2:	2210      	movs	r2, #16
 80035b4:	4905      	ldr	r1, [pc, #20]	; (80035cc <GPS_init+0x38>)
 80035b6:	f006 fcd8 	bl	8009f6a <HAL_UART_Transmit>
}
 80035ba:	bf00      	nop
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	20005298 	.word	0x20005298
 80035c8:	20005760 	.word	0x20005760
 80035cc:	080167dc 	.word	0x080167dc

080035d0 <checkForI2CDevices>:
 *      Author: Jacoby
 */
#include <stm32f4xx_hal.h>


void checkForI2CDevices(UART_HandleTypeDef uart, I2C_HandleTypeDef I2C ){
 80035d0:	b084      	sub	sp, #16
 80035d2:	b5b0      	push	{r4, r5, r7, lr}
 80035d4:	b092      	sub	sp, #72	; 0x48
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80035dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t Buffer[25] = {0};
 80035e0:	2300      	movs	r3, #0
 80035e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	605a      	str	r2, [r3, #4]
 80035ee:	609a      	str	r2, [r3, #8]
 80035f0:	60da      	str	r2, [r3, #12]
 80035f2:	611a      	str	r2, [r3, #16]
 80035f4:	751a      	strb	r2, [r3, #20]
	uint8_t Space[] = " - ";
 80035f6:	4b38      	ldr	r3, [pc, #224]	; (80036d8 <checkForI2CDevices+0x108>)
 80035f8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t StartMSG[] = "Starting I2C Scanning: \r\n";
 80035fa:	4b38      	ldr	r3, [pc, #224]	; (80036dc <checkForI2CDevices+0x10c>)
 80035fc:	f107 040c 	add.w	r4, r7, #12
 8003600:	461d      	mov	r5, r3
 8003602:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003604:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003606:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800360a:	c403      	stmia	r4!, {r0, r1}
 800360c:	8022      	strh	r2, [r4, #0]
	uint8_t EndMSG[] = "Done! \r\n\r\n";
 800360e:	4a34      	ldr	r2, [pc, #208]	; (80036e0 <checkForI2CDevices+0x110>)
 8003610:	463b      	mov	r3, r7
 8003612:	ca07      	ldmia	r2, {r0, r1, r2}
 8003614:	c303      	stmia	r3!, {r0, r1}
 8003616:	801a      	strh	r2, [r3, #0]
 8003618:	3302      	adds	r3, #2
 800361a:	0c12      	lsrs	r2, r2, #16
 800361c:	701a      	strb	r2, [r3, #0]

    uint8_t i = 0, ret;
 800361e:	2300      	movs	r3, #0
 8003620:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    HAL_Delay(1000);
 8003624:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003628:	f001 fa8e 	bl	8004b48 <HAL_Delay>

    /*-[ I2C Bus Scanning ]-*/
    HAL_UART_Transmit(&uart, StartMSG, sizeof(StartMSG), HAL_MAX_DELAY);
 800362c:	f107 010c 	add.w	r1, r7, #12
 8003630:	f04f 33ff 	mov.w	r3, #4294967295
 8003634:	221a      	movs	r2, #26
 8003636:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800363a:	f006 fc96 	bl	8009f6a <HAL_UART_Transmit>
    for(i=1; i<128; i++)
 800363e:	2301      	movs	r3, #1
 8003640:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003644:	e035      	b.n	80036b2 <checkForI2CDevices+0xe2>
    {
        ret = HAL_I2C_IsDeviceReady(&I2C, (uint16_t)(i<<1), 3, 5);
 8003646:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800364a:	b29b      	uxth	r3, r3
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	b299      	uxth	r1, r3
 8003650:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 8003654:	2305      	movs	r3, #5
 8003656:	2203      	movs	r2, #3
 8003658:	f002 fc4a 	bl	8005ef0 <HAL_I2C_IsDeviceReady>
 800365c:	4603      	mov	r3, r0
 800365e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
        if (ret != HAL_OK) /* No ACK Received At That Address */
 8003662:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003666:	2b00      	cmp	r3, #0
 8003668:	d009      	beq.n	800367e <checkForI2CDevices+0xae>
        {
            HAL_UART_Transmit(&uart, Space, sizeof(Space), HAL_MAX_DELAY);
 800366a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800366e:	f04f 33ff 	mov.w	r3, #4294967295
 8003672:	2204      	movs	r2, #4
 8003674:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8003678:	f006 fc77 	bl	8009f6a <HAL_UART_Transmit>
 800367c:	e014      	b.n	80036a8 <checkForI2CDevices+0xd8>
        }
        else if(ret == HAL_OK)
 800367e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003682:	2b00      	cmp	r3, #0
 8003684:	d110      	bne.n	80036a8 <checkForI2CDevices+0xd8>
        {
            sprintf(Buffer, "0x%X", i);
 8003686:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800368a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800368e:	4915      	ldr	r1, [pc, #84]	; (80036e4 <checkForI2CDevices+0x114>)
 8003690:	4618      	mov	r0, r3
 8003692:	f00e ff8d 	bl	80125b0 <siprintf>
            HAL_UART_Transmit(&uart, Buffer, sizeof(Buffer), HAL_MAX_DELAY);
 8003696:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800369a:	f04f 33ff 	mov.w	r3, #4294967295
 800369e:	2219      	movs	r2, #25
 80036a0:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80036a4:	f006 fc61 	bl	8009f6a <HAL_UART_Transmit>
    for(i=1; i<128; i++)
 80036a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80036ac:	3301      	adds	r3, #1
 80036ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80036b2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	dac5      	bge.n	8003646 <checkForI2CDevices+0x76>
        }
    }
    HAL_UART_Transmit(&uart, EndMSG, sizeof(EndMSG), HAL_MAX_DELAY);
 80036ba:	4639      	mov	r1, r7
 80036bc:	f04f 33ff 	mov.w	r3, #4294967295
 80036c0:	220b      	movs	r2, #11
 80036c2:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80036c6:	f006 fc50 	bl	8009f6a <HAL_UART_Transmit>
    /*--[ Scanning Done ]--*/

}
 80036ca:	bf00      	nop
 80036cc:	3748      	adds	r7, #72	; 0x48
 80036ce:	46bd      	mov	sp, r7
 80036d0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80036d4:	b004      	add	sp, #16
 80036d6:	4770      	bx	lr
 80036d8:	00202d20 	.word	0x00202d20
 80036dc:	080167f8 	.word	0x080167f8
 80036e0:	08016814 	.word	0x08016814
 80036e4:	080167f0 	.word	0x080167f0

080036e8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	617b      	str	r3, [r7, #20]
  while (size--) {
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	1e5a      	subs	r2, r3, #1
 80036fc:	607a      	str	r2, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	bf14      	ite	ne
 8003702:	2301      	movne	r3, #1
 8003704:	2300      	moveq	r3, #0
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00e      	beq.n	800372a <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	1c59      	adds	r1, r3, #1
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	4619      	mov	r1, r3
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	4790      	blx	r2
 8003720:	4602      	mov	r2, r0
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	4413      	add	r3, r2
 8003726:	617b      	str	r3, [r7, #20]
  while (size--) {
 8003728:	e7e6      	b.n	80036f8 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 800372a:	697b      	ldr	r3, [r7, #20]
}
 800372c:	4618      	mov	r0, r3
 800372e:	3718      	adds	r7, #24
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	4a06      	ldr	r2, [pc, #24]	; (8003758 <_ZN5PrintC1Ev+0x24>)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	605a      	str	r2, [r3, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4618      	mov	r0, r3
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	08016aa8 	.word	0x08016aa8

0800375c <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff ffe4 	bl	8003734 <_ZN5PrintC1Ev>
 800376c:	4a05      	ldr	r2, [pc, #20]	; (8003784 <_ZN6StreamC1Ev+0x28>)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003778:	609a      	str	r2, [r3, #8]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4618      	mov	r0, r3
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	08016ad8 	.word	0x08016ad8

08003788 <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4618      	mov	r0, r3
 8003796:	f7ff ffe1 	bl	800375c <_ZN6StreamC1Ev>
 800379a:	4a16      	ldr	r2, [pc, #88]	; (80037f4 <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3390      	adds	r3, #144	; 0x90
 80037aa:	2220      	movs	r2, #32
 80037ac:	2100      	movs	r1, #0
 80037ae:	4618      	mov	r0, r3
 80037b0:	f00d ff0e 	bl	80115d0 <memset>
  rxBufferIndex = 0;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4618      	mov	r0, r3
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	08016ab8 	.word	0x08016ab8

080037f8 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	460b      	mov	r3, r1
 8003802:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800380a:	2b00      	cmp	r3, #0
 800380c:	d01d      	beq.n	800384a <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003814:	2b1f      	cmp	r3, #31
 8003816:	d901      	bls.n	800381c <_ZN7TwoWire5writeEh+0x24>
      return 0;
 8003818:	2300      	movs	r3, #0
 800381a:	e028      	b.n	800386e <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003822:	4619      	mov	r1, r3
 8003824:	78fa      	ldrb	r2, [r7, #3]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	440b      	add	r3, r1
 800382a:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003832:	3301      	adds	r3, #1
 8003834:	b2da      	uxtb	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8003848:	e010      	b.n	800386c <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f984 	bl	8003b58 <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 8003850:	1cfb      	adds	r3, r7, #3
 8003852:	2201      	movs	r2, #1
 8003854:	4619      	mov	r1, r3
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f8b7 	bl	80039ca <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f949 	bl	8003af4 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	333c      	adds	r3, #60	; 0x3c
 8003866:	4618      	mov	r0, r3
 8003868:	f002 fc70 	bl	800614c <HAL_I2C_EnableListen_IT>
  }
  return 1;
 800386c:	2301      	movs	r3, #1
}
 800386e:	4618      	mov	r0, r3
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b086      	sub	sp, #24
 800387a:	af00      	add	r7, sp, #0
 800387c:	60f8      	str	r0, [r7, #12]
 800387e:	60b9      	str	r1, [r7, #8]
 8003880:	607a      	str	r2, [r7, #4]
  if(transmitting){
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003888:	2b00      	cmp	r3, #0
 800388a:	d013      	beq.n	80038b4 <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 800388c:	2300      	movs	r3, #0
 800388e:	617b      	str	r3, [r7, #20]
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	429a      	cmp	r2, r3
 8003896:	d21e      	bcs.n	80038d6 <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68b9      	ldr	r1, [r7, #8]
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	440a      	add	r2, r1
 80038a4:	7812      	ldrb	r2, [r2, #0]
 80038a6:	4611      	mov	r1, r2
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	3301      	adds	r3, #1
 80038b0:	617b      	str	r3, [r7, #20]
 80038b2:	e7ed      	b.n	8003890 <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 f94f 	bl	8003b58 <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	461a      	mov	r2, r3
 80038be:	68b9      	ldr	r1, [r7, #8]
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 f882 	bl	80039ca <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 f914 	bl	8003af4 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	333c      	adds	r3, #60	; 0x3c
 80038d0:	4618      	mov	r0, r3
 80038d2:	f002 fc3b 	bl	800614c <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 80038d6:	687b      	ldr	r3, [r7, #4]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	461a      	mov	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	1ad3      	subs	r3, r2, r3
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  int value = -1;
 8003910:	f04f 33ff 	mov.w	r3, #4294967295
 8003914:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800391c:	b2da      	uxtb	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003924:	b2db      	uxtb	r3, r3
 8003926:	429a      	cmp	r2, r3
 8003928:	bf34      	ite	cc
 800392a:	2301      	movcc	r3, #1
 800392c:	2300      	movcs	r3, #0
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	d012      	beq.n	800395a <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800393a:	b2db      	uxtb	r3, r3
 800393c:	461a      	mov	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4413      	add	r3, r2
 8003942:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8003946:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800394e:	b2db      	uxtb	r3, r3
 8003950:	3301      	adds	r3, #1
 8003952:	b2da      	uxtb	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 800395a:	68fb      	ldr	r3, [r7, #12]
}
 800395c:	4618      	mov	r0, r3
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  int value = -1;
 8003970:	f04f 33ff 	mov.w	r3, #4294967295
 8003974:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800397c:	b2da      	uxtb	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003984:	b2db      	uxtb	r3, r3
 8003986:	429a      	cmp	r2, r3
 8003988:	bf34      	ite	cc
 800398a:	2301      	movcc	r3, #1
 800398c:	2300      	movcs	r3, #0
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	d009      	beq.n	80039a8 <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800399a:	b2db      	uxtb	r3, r3
 800399c:	461a      	mov	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4413      	add	r3, r2
 80039a2:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80039a6:	60fb      	str	r3, [r7, #12]
  }

  return value;
 80039a8:	68fb      	ldr	r3, [r7, #12]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <_ZN7TwoWire15i2c_slave_writeEPKci>:

    return 1;
}

int TwoWire::i2c_slave_write(const char *data, int length)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b089      	sub	sp, #36	; 0x24
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	60f8      	str	r0, [r7, #12]
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 80039d6:	2300      	movs	r3, #0
 80039d8:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039de:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	dd41      	ble.n	8003a6a <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 80039e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039ea:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f6:	2b80      	cmp	r3, #128	; 0x80
 80039f8:	bf14      	ite	ne
 80039fa:	2301      	movne	r3, #1
 80039fc:	2300      	moveq	r3, #0
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d008      	beq.n	8003a16 <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	3b01      	subs	r3, #1
 8003a08:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1ed      	bne.n	80039ec <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 8003a10:	f04f 33ff 	mov.w	r3, #4294967295
 8003a14:	e068      	b.n	8003ae8 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	1c5a      	adds	r2, r3, #1
 8003a1a:	60ba      	str	r2, [r7, #8]
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	611a      	str	r2, [r3, #16]
        length--;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3b01      	subs	r3, #1
 8003a28:	607b      	str	r3, [r7, #4]
        size++;
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	f003 0304 	and.w	r3, r3, #4
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d104      	bne.n	8003a48 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8003a44:	2301      	movs	r3, #1
 8003a46:	e000      	b.n	8003a4a <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0c8      	beq.n	80039e0 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	1c5a      	adds	r2, r3, #1
 8003a52:	60ba      	str	r2, [r7, #8]
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	461a      	mov	r2, r3
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	611a      	str	r2, [r3, #16]
            length--;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	607b      	str	r3, [r7, #4]
            size++;
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	3301      	adds	r3, #1
 8003a66:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 8003a68:	e7ba      	b.n	80039e0 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 8003a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a6e:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a7e:	bf14      	ite	ne
 8003a80:	2301      	movne	r3, #1
 8003a82:	2300      	moveq	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d008      	beq.n	8003a9c <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1ec      	bne.n	8003a70 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 8003a96:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9a:	e025      	b.n	8003ae8 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003aa4:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 8003aa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003aaa:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	bf0c      	ite	eq
 8003aba:	2301      	moveq	r3, #1
 8003abc:	2300      	movne	r3, #0
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d008      	beq.n	8003ad6 <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1ed      	bne.n	8003aac <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 8003ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad4:	e008      	b.n	8003ae8 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 8003ae6:	69bb      	ldr	r3, [r7, #24]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3724      	adds	r7, #36	; 0x24
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b00:	4a12      	ldr	r2, [pc, #72]	; (8003b4c <_ZN7TwoWire15enableInterruptEv+0x58>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d106      	bne.n	8003b14 <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8003b06:	2049      	movs	r0, #73	; 0x49
 8003b08:	f001 fbac 	bl	8005264 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8003b0c:	2048      	movs	r0, #72	; 0x48
 8003b0e:	f001 fba9 	bl	8005264 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8003b12:	e016      	b.n	8003b42 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b18:	4a0d      	ldr	r2, [pc, #52]	; (8003b50 <_ZN7TwoWire15enableInterruptEv+0x5c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d106      	bne.n	8003b2c <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8003b1e:	2022      	movs	r0, #34	; 0x22
 8003b20:	f001 fba0 	bl	8005264 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003b24:	2021      	movs	r0, #33	; 0x21
 8003b26:	f001 fb9d 	bl	8005264 <HAL_NVIC_EnableIRQ>
}
 8003b2a:	e00a      	b.n	8003b42 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b30:	4a08      	ldr	r2, [pc, #32]	; (8003b54 <_ZN7TwoWire15enableInterruptEv+0x60>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d105      	bne.n	8003b42 <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003b36:	2020      	movs	r0, #32
 8003b38:	f001 fb94 	bl	8005264 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003b3c:	201f      	movs	r0, #31
 8003b3e:	f001 fb91 	bl	8005264 <HAL_NVIC_EnableIRQ>
}
 8003b42:	bf00      	nop
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40005c00 	.word	0x40005c00
 8003b50:	40005800 	.word	0x40005800
 8003b54:	40005400 	.word	0x40005400

08003b58 <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b64:	4a12      	ldr	r2, [pc, #72]	; (8003bb0 <_ZN7TwoWire16disableInterruptEv+0x58>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d106      	bne.n	8003b78 <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8003b6a:	2049      	movs	r0, #73	; 0x49
 8003b6c:	f001 fb88 	bl	8005280 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8003b70:	2048      	movs	r0, #72	; 0x48
 8003b72:	f001 fb85 	bl	8005280 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8003b76:	e016      	b.n	8003ba6 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7c:	4a0d      	ldr	r2, [pc, #52]	; (8003bb4 <_ZN7TwoWire16disableInterruptEv+0x5c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d106      	bne.n	8003b90 <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8003b82:	2022      	movs	r0, #34	; 0x22
 8003b84:	f001 fb7c 	bl	8005280 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8003b88:	2021      	movs	r0, #33	; 0x21
 8003b8a:	f001 fb79 	bl	8005280 <HAL_NVIC_DisableIRQ>
}
 8003b8e:	e00a      	b.n	8003ba6 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b94:	4a08      	ldr	r2, [pc, #32]	; (8003bb8 <_ZN7TwoWire16disableInterruptEv+0x60>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d105      	bne.n	8003ba6 <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8003b9a:	2020      	movs	r0, #32
 8003b9c:	f001 fb70 	bl	8005280 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8003ba0:	201f      	movs	r0, #31
 8003ba2:	f001 fb6d 	bl	8005280 <HAL_NVIC_DisableIRQ>
}
 8003ba6:	bf00      	nop
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40005c00 	.word	0x40005c00
 8003bb4:	40005800 	.word	0x40005800
 8003bb8:	40005400 	.word	0x40005400

08003bbc <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d110      	bne.n	8003bee <_Z41__static_initialization_and_destruction_0ii+0x32>
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d10b      	bne.n	8003bee <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 8003bd6:	4908      	ldr	r1, [pc, #32]	; (8003bf8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003bd8:	4808      	ldr	r0, [pc, #32]	; (8003bfc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003bda:	f7ff fdd5 	bl	8003788 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 8003bde:	4908      	ldr	r1, [pc, #32]	; (8003c00 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8003be0:	4808      	ldr	r0, [pc, #32]	; (8003c04 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8003be2:	f7ff fdd1 	bl	8003788 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 8003be6:	4908      	ldr	r1, [pc, #32]	; (8003c08 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003be8:	4808      	ldr	r0, [pc, #32]	; (8003c0c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8003bea:	f7ff fdcd 	bl	8003788 <_ZN7TwoWireC1EP11I2C_TypeDef>
 8003bee:	bf00      	nop
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40005400 	.word	0x40005400
 8003bfc:	200003c0 	.word	0x200003c0
 8003c00:	40005800 	.word	0x40005800
 8003c04:	20000478 	.word	0x20000478
 8003c08:	40005c00 	.word	0x40005c00
 8003c0c:	20000530 	.word	0x20000530

08003c10 <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c18:	2001      	movs	r0, #1
 8003c1a:	f7ff ffcf 	bl	8003bbc <_Z41__static_initialization_and_destruction_0ii>
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8003c20:	b590      	push	{r4, r7, lr}
 8003c22:	b087      	sub	sp, #28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	607a      	str	r2, [r7, #4]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	72fb      	strb	r3, [r7, #11]
 8003c30:	4613      	mov	r3, r2
 8003c32:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	685c      	ldr	r4, [r3, #4]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6898      	ldr	r0, [r3, #8]
 8003c3c:	893b      	ldrh	r3, [r7, #8]
 8003c3e:	7af9      	ldrb	r1, [r7, #11]
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	47a0      	blx	r4
 8003c44:	6178      	str	r0, [r7, #20]

  return ret;
 8003c46:	697b      	ldr	r3, [r7, #20]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	371c      	adds	r7, #28
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd90      	pop	{r4, r7, pc}

08003c50 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003c50:	b590      	push	{r4, r7, lr}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	607a      	str	r2, [r7, #4]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	72fb      	strb	r3, [r7, #11]
 8003c60:	4613      	mov	r3, r2
 8003c62:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681c      	ldr	r4, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6898      	ldr	r0, [r3, #8]
 8003c6c:	893b      	ldrh	r3, [r7, #8]
 8003c6e:	7af9      	ldrb	r1, [r7, #11]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	47a0      	blx	r4
 8003c74:	6178      	str	r0, [r7, #20]

  return ret;
 8003c76:	697b      	ldr	r3, [r7, #20]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	371c      	adds	r7, #28
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd90      	pop	{r4, r7, pc}

08003c80 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	ee07 3a90 	vmov	s15, r3
 8003c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c92:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003cac <lps22hh_from_lsb_to_hpa+0x2c>
 8003c96:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003c9a:	eef0 7a66 	vmov.f32	s15, s13
}
 8003c9e:	eeb0 0a67 	vmov.f32	s0, s15
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	49800000 	.word	0x49800000

08003cb0 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8003cba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cbe:	ee07 3a90 	vmov	s15, r3
 8003cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cc6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003ce0 <lps22hh_from_lsb_to_celsius+0x30>
 8003cca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003cce:	eef0 7a66 	vmov.f32	s15, s13
}
 8003cd2:	eeb0 0a67 	vmov.f32	s0, s15
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr
 8003ce0:	42c80000 	.word	0x42c80000

08003ce4 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	460b      	mov	r3, r1
 8003cee:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8003cf0:	f107 0208 	add.w	r2, r7, #8
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	2110      	movs	r1, #16
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f7ff ff91 	bl	8003c20 <lps22hh_read_reg>
 8003cfe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10f      	bne.n	8003d26 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8003d06:	78fb      	ldrb	r3, [r7, #3]
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	7a3b      	ldrb	r3, [r7, #8]
 8003d10:	f362 0341 	bfi	r3, r2, #1, #1
 8003d14:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8003d16:	f107 0208 	add.w	r2, r7, #8
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	2110      	movs	r1, #16
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7ff ff96 	bl	8003c50 <lps22hh_write_reg>
 8003d24:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003d26:	68fb      	ldr	r3, [r7, #12]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8003d3c:	f107 0210 	add.w	r2, r7, #16
 8003d40:	2301      	movs	r3, #1
 8003d42:	2110      	movs	r1, #16
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f7ff ff6b 	bl	8003c20 <lps22hh_read_reg>
 8003d4a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d107      	bne.n	8003d62 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8003d52:	f107 020c 	add.w	r2, r7, #12
 8003d56:	2301      	movs	r3, #1
 8003d58:	2111      	movs	r1, #17
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7ff ff60 	bl	8003c20 <lps22hh_read_reg>
 8003d60:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10f      	bne.n	8003d88 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	7c3b      	ldrb	r3, [r7, #16]
 8003d72:	f362 1306 	bfi	r3, r2, #4, #3
 8003d76:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8003d78:	f107 0210 	add.w	r2, r7, #16
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	2110      	movs	r1, #16
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff ff65 	bl	8003c50 <lps22hh_write_reg>
 8003d86:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d119      	bne.n	8003dc2 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8003d8e:	78fb      	ldrb	r3, [r7, #3]
 8003d90:	091b      	lsrs	r3, r3, #4
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	7b3b      	ldrb	r3, [r7, #12]
 8003d9a:	f362 0341 	bfi	r3, r2, #1, #1
 8003d9e:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8003da0:	78fb      	ldrb	r3, [r7, #3]
 8003da2:	08db      	lsrs	r3, r3, #3
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	7b3b      	ldrb	r3, [r7, #12]
 8003dac:	f362 0300 	bfi	r3, r2, #0, #1
 8003db0:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8003db2:	f107 020c 	add.w	r2, r7, #12
 8003db6:	2301      	movs	r3, #1
 8003db8:	2111      	movs	r1, #17
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7ff ff48 	bl	8003c50 <lps22hh_write_reg>
 8003dc0:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8003dc2:	697b      	ldr	r3, [r7, #20]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3718      	adds	r7, #24
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <lps22hh_temp_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8003dd6:	f107 0208 	add.w	r2, r7, #8
 8003dda:	2301      	movs	r3, #1
 8003ddc:	2127      	movs	r1, #39	; 0x27
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7ff ff1e 	bl	8003c20 <lps22hh_read_reg>
 8003de4:	60f8      	str	r0, [r7, #12]
  *val = reg.t_da;
 8003de6:	7a3b      	ldrb	r3, [r7, #8]
 8003de8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	461a      	mov	r2, r3
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	701a      	strb	r2, [r3, #0]

  return ret;
 8003df4:	68fb      	ldr	r3, [r7, #12]
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b084      	sub	sp, #16
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8003e08:	f107 0208 	add.w	r2, r7, #8
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	2128      	movs	r1, #40	; 0x28
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7ff ff05 	bl	8003c20 <lps22hh_read_reg>
 8003e16:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8003e18:	7abb      	ldrb	r3, [r7, #10]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	021b      	lsls	r3, r3, #8
 8003e26:	7a7a      	ldrb	r2, [r7, #9]
 8003e28:	441a      	add	r2, r3
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	021b      	lsls	r3, r3, #8
 8003e34:	7a3a      	ldrb	r2, [r7, #8]
 8003e36:	441a      	add	r2, r3
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	021a      	lsls	r2, r3, #8
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	601a      	str	r2, [r3, #0]

  return ret;
 8003e46:	68fb      	ldr	r3, [r7, #12]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8003e5a:	f107 0208 	add.w	r2, r7, #8
 8003e5e:	2302      	movs	r3, #2
 8003e60:	212b      	movs	r1, #43	; 0x2b
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7ff fedc 	bl	8003c20 <lps22hh_read_reg>
 8003e68:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8003e6a:	7a7b      	ldrb	r3, [r7, #9]
 8003e6c:	b21a      	sxth	r2, r3
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	021b      	lsls	r3, r3, #8
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	7a3b      	ldrb	r3, [r7, #8]
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	4413      	add	r3, r2
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	b21a      	sxth	r2, r3
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	801a      	strh	r2, [r3, #0]

  return ret;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b084      	sub	sp, #16
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
 8003e9e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	210f      	movs	r1, #15
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7ff feba 	bl	8003c20 <lps22hh_read_reg>
 8003eac:	60f8      	str	r0, [r7, #12]

  return ret;
 8003eae:	68fb      	ldr	r3, [r7, #12]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8003ec4:	f107 0208 	add.w	r2, r7, #8
 8003ec8:	2301      	movs	r3, #1
 8003eca:	2111      	movs	r1, #17
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f7ff fea7 	bl	8003c20 <lps22hh_read_reg>
 8003ed2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10f      	bne.n	8003efa <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8003eda:	78fb      	ldrb	r3, [r7, #3]
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	7a3b      	ldrb	r3, [r7, #8]
 8003ee4:	f362 0382 	bfi	r3, r2, #2, #1
 8003ee8:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8003eea:	f107 0208 	add.w	r2, r7, #8
 8003eee:	2301      	movs	r3, #1
 8003ef0:	2111      	movs	r1, #17
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7ff feac 	bl	8003c50 <lps22hh_write_reg>
 8003ef8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003efa:	68fb      	ldr	r3, [r7, #12]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8003f0e:	f107 0208 	add.w	r2, r7, #8
 8003f12:	2301      	movs	r3, #1
 8003f14:	2111      	movs	r1, #17
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7ff fe82 	bl	8003c20 <lps22hh_read_reg>
 8003f1c:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8003f1e:	7a3b      	ldrb	r3, [r7, #8]
 8003f20:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	461a      	mov	r2, r3
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	701a      	strb	r2, [r3, #0]

  return ret;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8003f36:	b590      	push	{r4, r7, lr}
 8003f38:	b087      	sub	sp, #28
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	60f8      	str	r0, [r7, #12]
 8003f3e:	607a      	str	r2, [r7, #4]
 8003f40:	461a      	mov	r2, r3
 8003f42:	460b      	mov	r3, r1
 8003f44:	72fb      	strb	r3, [r7, #11]
 8003f46:	4613      	mov	r3, r2
 8003f48:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	685c      	ldr	r4, [r3, #4]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6898      	ldr	r0, [r3, #8]
 8003f52:	893b      	ldrh	r3, [r7, #8]
 8003f54:	7af9      	ldrb	r1, [r7, #11]
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	47a0      	blx	r4
 8003f5a:	6178      	str	r0, [r7, #20]

  return ret;
 8003f5c:	697b      	ldr	r3, [r7, #20]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	371c      	adds	r7, #28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd90      	pop	{r4, r7, pc}

08003f66 <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003f66:	b590      	push	{r4, r7, lr}
 8003f68:	b087      	sub	sp, #28
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	60f8      	str	r0, [r7, #12]
 8003f6e:	607a      	str	r2, [r7, #4]
 8003f70:	461a      	mov	r2, r3
 8003f72:	460b      	mov	r3, r1
 8003f74:	72fb      	strb	r3, [r7, #11]
 8003f76:	4613      	mov	r3, r2
 8003f78:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681c      	ldr	r4, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6898      	ldr	r0, [r3, #8]
 8003f82:	893b      	ldrh	r3, [r7, #8]
 8003f84:	7af9      	ldrb	r1, [r7, #11]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	47a0      	blx	r4
 8003f8a:	6178      	str	r0, [r7, #20]

  return ret;
 8003f8c:	697b      	ldr	r3, [r7, #20]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	371c      	adds	r7, #28
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd90      	pop	{r4, r7, pc}
	...

08003f98 <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8003fa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fa6:	ee07 3a90 	vmov	s15, r3
 8003faa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fae:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003fc4 <lsm6dsr_from_fs2g_to_mg+0x2c>
 8003fb2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003fb6:	eeb0 0a67 	vmov.f32	s0, s15
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	3d79db23 	.word	0x3d79db23

08003fc8 <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	4603      	mov	r3, r0
 8003fd0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8003fd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fd6:	ee07 3a90 	vmov	s15, r3
 8003fda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fde:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003ff4 <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 8003fe2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	428c0000 	.word	0x428c0000

08003ff8 <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	4603      	mov	r3, r0
 8004000:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 8004002:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004006:	ee07 3a90 	vmov	s15, r3
 800400a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800400e:	eddf 6a07 	vldr	s13, [pc, #28]	; 800402c <lsm6dsr_from_lsb_to_celsius+0x34>
 8004012:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004016:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800401a:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800401e:	eeb0 0a67 	vmov.f32	s0, s15
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	43800000 	.word	0x43800000

08004030 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	460b      	mov	r3, r1
 800403a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800403c:	f107 0208 	add.w	r2, r7, #8
 8004040:	2301      	movs	r3, #1
 8004042:	2110      	movs	r1, #16
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f7ff ff76 	bl	8003f36 <lsm6dsr_read_reg>
 800404a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10f      	bne.n	8004072 <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8004052:	78fb      	ldrb	r3, [r7, #3]
 8004054:	f003 0303 	and.w	r3, r3, #3
 8004058:	b2da      	uxtb	r2, r3
 800405a:	7a3b      	ldrb	r3, [r7, #8]
 800405c:	f362 0383 	bfi	r3, r2, #2, #2
 8004060:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8004062:	f107 0208 	add.w	r2, r7, #8
 8004066:	2301      	movs	r3, #1
 8004068:	2110      	movs	r1, #16
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7ff ff7b 	bl	8003f66 <lsm6dsr_write_reg>
 8004070:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8004072:	68fb      	ldr	r3, [r7, #12]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	460b      	mov	r3, r1
 8004086:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 8004088:	78fb      	ldrb	r3, [r7, #3]
 800408a:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 800408c:	f107 030c 	add.w	r3, r7, #12
 8004090:	4619      	mov	r1, r3
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 fbb0 	bl	80047f8 <lsm6dsr_fsm_enable_get>
 8004098:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	2b00      	cmp	r3, #0
 800409e:	f040 80c4 	bne.w	800422a <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80040a2:	7b3b      	ldrb	r3, [r7, #12]
 80040a4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80040a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80040aa:	7b3b      	ldrb	r3, [r7, #12]
 80040ac:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80040b0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80040b2:	4313      	orrs	r3, r2
 80040b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80040b6:	7b3b      	ldrb	r3, [r7, #12]
 80040b8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80040bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80040be:	4313      	orrs	r3, r2
 80040c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80040c2:	7b3b      	ldrb	r3, [r7, #12]
 80040c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80040c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80040ca:	4313      	orrs	r3, r2
 80040cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80040ce:	7b3b      	ldrb	r3, [r7, #12]
 80040d0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80040d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80040d6:	4313      	orrs	r3, r2
 80040d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80040da:	7b3b      	ldrb	r3, [r7, #12]
 80040dc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80040e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80040e2:	4313      	orrs	r3, r2
 80040e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80040e6:	7b3b      	ldrb	r3, [r7, #12]
 80040e8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80040ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80040ee:	4313      	orrs	r3, r2
 80040f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80040f2:	7b3b      	ldrb	r3, [r7, #12]
 80040f4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80040f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80040fa:	4313      	orrs	r3, r2
 80040fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80040fe:	7b7b      	ldrb	r3, [r7, #13]
 8004100:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004104:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004106:	4313      	orrs	r3, r2
 8004108:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800410a:	7b7b      	ldrb	r3, [r7, #13]
 800410c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004110:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004112:	4313      	orrs	r3, r2
 8004114:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004116:	7b7b      	ldrb	r3, [r7, #13]
 8004118:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800411c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800411e:	4313      	orrs	r3, r2
 8004120:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004122:	7b7b      	ldrb	r3, [r7, #13]
 8004124:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004128:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800412a:	4313      	orrs	r3, r2
 800412c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800412e:	7b7b      	ldrb	r3, [r7, #13]
 8004130:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004134:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004136:	4313      	orrs	r3, r2
 8004138:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800413a:	7b7b      	ldrb	r3, [r7, #13]
 800413c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004140:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004142:	4313      	orrs	r3, r2
 8004144:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004146:	7b7b      	ldrb	r3, [r7, #13]
 8004148:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800414c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800414e:	4313      	orrs	r3, r2
 8004150:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8004152:	7b7b      	ldrb	r3, [r7, #13]
 8004154:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004158:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800415a:	4313      	orrs	r3, r2
 800415c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800415e:	2b01      	cmp	r3, #1
 8004160:	d163      	bne.n	800422a <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8004162:	f107 030b 	add.w	r3, r7, #11
 8004166:	4619      	mov	r1, r3
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 fb71 	bl	8004850 <lsm6dsr_fsm_data_rate_get>
 800416e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d159      	bne.n	800422a <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8004176:	7afb      	ldrb	r3, [r7, #11]
 8004178:	2b03      	cmp	r3, #3
 800417a:	d853      	bhi.n	8004224 <lsm6dsr_xl_data_rate_set+0x1a8>
 800417c:	a201      	add	r2, pc, #4	; (adr r2, 8004184 <lsm6dsr_xl_data_rate_set+0x108>)
 800417e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004182:	bf00      	nop
 8004184:	08004195 	.word	0x08004195
 8004188:	080041a7 	.word	0x080041a7
 800418c:	080041c5 	.word	0x080041c5
 8004190:	080041ef 	.word	0x080041ef
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 8004194:	78fb      	ldrb	r3, [r7, #3]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d102      	bne.n	80041a0 <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 800419a:	2301      	movs	r3, #1
 800419c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800419e:	e045      	b.n	800422c <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80041a0:	78fb      	ldrb	r3, [r7, #3]
 80041a2:	75fb      	strb	r3, [r7, #23]
            break;
 80041a4:	e042      	b.n	800422c <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 80041a6:	78fb      	ldrb	r3, [r7, #3]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d102      	bne.n	80041b2 <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 80041ac:	2302      	movs	r3, #2
 80041ae:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80041b0:	e03c      	b.n	800422c <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80041b2:	78fb      	ldrb	r3, [r7, #3]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d102      	bne.n	80041be <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 80041b8:	2302      	movs	r3, #2
 80041ba:	75fb      	strb	r3, [r7, #23]
            break;
 80041bc:	e036      	b.n	800422c <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80041be:	78fb      	ldrb	r3, [r7, #3]
 80041c0:	75fb      	strb	r3, [r7, #23]
            break;
 80041c2:	e033      	b.n	800422c <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 80041c4:	78fb      	ldrb	r3, [r7, #3]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d102      	bne.n	80041d0 <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80041ca:	2303      	movs	r3, #3
 80041cc:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80041ce:	e02d      	b.n	800422c <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80041d0:	78fb      	ldrb	r3, [r7, #3]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d102      	bne.n	80041dc <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80041d6:	2303      	movs	r3, #3
 80041d8:	75fb      	strb	r3, [r7, #23]
            break;
 80041da:	e027      	b.n	800422c <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 80041dc:	78fb      	ldrb	r3, [r7, #3]
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d102      	bne.n	80041e8 <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80041e2:	2303      	movs	r3, #3
 80041e4:	75fb      	strb	r3, [r7, #23]
            break;
 80041e6:	e021      	b.n	800422c <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80041e8:	78fb      	ldrb	r3, [r7, #3]
 80041ea:	75fb      	strb	r3, [r7, #23]
            break;
 80041ec:	e01e      	b.n	800422c <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 80041ee:	78fb      	ldrb	r3, [r7, #3]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d102      	bne.n	80041fa <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80041f4:	2304      	movs	r3, #4
 80041f6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80041f8:	e018      	b.n	800422c <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80041fa:	78fb      	ldrb	r3, [r7, #3]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d102      	bne.n	8004206 <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8004200:	2304      	movs	r3, #4
 8004202:	75fb      	strb	r3, [r7, #23]
            break;
 8004204:	e012      	b.n	800422c <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8004206:	78fb      	ldrb	r3, [r7, #3]
 8004208:	2b02      	cmp	r3, #2
 800420a:	d102      	bne.n	8004212 <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 800420c:	2304      	movs	r3, #4
 800420e:	75fb      	strb	r3, [r7, #23]
            break;
 8004210:	e00c      	b.n	800422c <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 8004212:	78fb      	ldrb	r3, [r7, #3]
 8004214:	2b03      	cmp	r3, #3
 8004216:	d102      	bne.n	800421e <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8004218:	2304      	movs	r3, #4
 800421a:	75fb      	strb	r3, [r7, #23]
            break;
 800421c:	e006      	b.n	800422c <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800421e:	78fb      	ldrb	r3, [r7, #3]
 8004220:	75fb      	strb	r3, [r7, #23]
            break;
 8004222:	e003      	b.n	800422c <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8004224:	78fb      	ldrb	r3, [r7, #3]
 8004226:	75fb      	strb	r3, [r7, #23]
            break;
 8004228:	e000      	b.n	800422c <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 800422a:	bf00      	nop
    }
  }

  if (ret == 0)
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d107      	bne.n	8004242 <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8004232:	f107 0208 	add.w	r2, r7, #8
 8004236:	2301      	movs	r3, #1
 8004238:	2110      	movs	r1, #16
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7ff fe7b 	bl	8003f36 <lsm6dsr_read_reg>
 8004240:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10f      	bne.n	8004268 <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8004248:	7dfb      	ldrb	r3, [r7, #23]
 800424a:	f003 030f 	and.w	r3, r3, #15
 800424e:	b2da      	uxtb	r2, r3
 8004250:	7a3b      	ldrb	r3, [r7, #8]
 8004252:	f362 1307 	bfi	r3, r2, #4, #4
 8004256:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8004258:	f107 0208 	add.w	r2, r7, #8
 800425c:	2301      	movs	r3, #1
 800425e:	2110      	movs	r1, #16
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f7ff fe80 	bl	8003f66 <lsm6dsr_write_reg>
 8004266:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8004268:	693b      	ldr	r3, [r7, #16]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3718      	adds	r7, #24
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop

08004274 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	460b      	mov	r3, r1
 800427e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004280:	f107 0208 	add.w	r2, r7, #8
 8004284:	2301      	movs	r3, #1
 8004286:	2111      	movs	r1, #17
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7ff fe54 	bl	8003f36 <lsm6dsr_read_reg>
 800428e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10f      	bne.n	80042b6 <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8004296:	78fb      	ldrb	r3, [r7, #3]
 8004298:	f003 030f 	and.w	r3, r3, #15
 800429c:	b2da      	uxtb	r2, r3
 800429e:	7a3b      	ldrb	r3, [r7, #8]
 80042a0:	f362 0303 	bfi	r3, r2, #0, #4
 80042a4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80042a6:	f107 0208 	add.w	r2, r7, #8
 80042aa:	2301      	movs	r3, #1
 80042ac:	2111      	movs	r1, #17
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7ff fe59 	bl	8003f66 <lsm6dsr_write_reg>
 80042b4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80042b6:	68fb      	ldr	r3, [r7, #12]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	460b      	mov	r3, r1
 80042ca:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 80042cc:	78fb      	ldrb	r3, [r7, #3]
 80042ce:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 80042d0:	f107 030c 	add.w	r3, r7, #12
 80042d4:	4619      	mov	r1, r3
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fa8e 	bl	80047f8 <lsm6dsr_fsm_enable_get>
 80042dc:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f040 80c4 	bne.w	800446e <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80042e6:	7b3b      	ldrb	r3, [r7, #12]
 80042e8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80042ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80042ee:	7b3b      	ldrb	r3, [r7, #12]
 80042f0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80042f4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80042f6:	4313      	orrs	r3, r2
 80042f8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80042fa:	7b3b      	ldrb	r3, [r7, #12]
 80042fc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004300:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004302:	4313      	orrs	r3, r2
 8004304:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004306:	7b3b      	ldrb	r3, [r7, #12]
 8004308:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800430c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800430e:	4313      	orrs	r3, r2
 8004310:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004312:	7b3b      	ldrb	r3, [r7, #12]
 8004314:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004318:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800431a:	4313      	orrs	r3, r2
 800431c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800431e:	7b3b      	ldrb	r3, [r7, #12]
 8004320:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004324:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004326:	4313      	orrs	r3, r2
 8004328:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800432a:	7b3b      	ldrb	r3, [r7, #12]
 800432c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004330:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004332:	4313      	orrs	r3, r2
 8004334:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004336:	7b3b      	ldrb	r3, [r7, #12]
 8004338:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800433c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800433e:	4313      	orrs	r3, r2
 8004340:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004342:	7b7b      	ldrb	r3, [r7, #13]
 8004344:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004348:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800434a:	4313      	orrs	r3, r2
 800434c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800434e:	7b7b      	ldrb	r3, [r7, #13]
 8004350:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004354:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004356:	4313      	orrs	r3, r2
 8004358:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800435a:	7b7b      	ldrb	r3, [r7, #13]
 800435c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004360:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004362:	4313      	orrs	r3, r2
 8004364:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004366:	7b7b      	ldrb	r3, [r7, #13]
 8004368:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800436c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800436e:	4313      	orrs	r3, r2
 8004370:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004372:	7b7b      	ldrb	r3, [r7, #13]
 8004374:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004378:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800437a:	4313      	orrs	r3, r2
 800437c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800437e:	7b7b      	ldrb	r3, [r7, #13]
 8004380:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004384:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004386:	4313      	orrs	r3, r2
 8004388:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800438a:	7b7b      	ldrb	r3, [r7, #13]
 800438c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004390:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004392:	4313      	orrs	r3, r2
 8004394:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8004396:	7b7b      	ldrb	r3, [r7, #13]
 8004398:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800439c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800439e:	4313      	orrs	r3, r2
 80043a0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d163      	bne.n	800446e <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 80043a6:	f107 030b 	add.w	r3, r7, #11
 80043aa:	4619      	mov	r1, r3
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 fa4f 	bl	8004850 <lsm6dsr_fsm_data_rate_get>
 80043b2:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d159      	bne.n	800446e <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80043ba:	7afb      	ldrb	r3, [r7, #11]
 80043bc:	2b03      	cmp	r3, #3
 80043be:	d853      	bhi.n	8004468 <lsm6dsr_gy_data_rate_set+0x1a8>
 80043c0:	a201      	add	r2, pc, #4	; (adr r2, 80043c8 <lsm6dsr_gy_data_rate_set+0x108>)
 80043c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c6:	bf00      	nop
 80043c8:	080043d9 	.word	0x080043d9
 80043cc:	080043eb 	.word	0x080043eb
 80043d0:	08004409 	.word	0x08004409
 80043d4:	08004433 	.word	0x08004433
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 80043d8:	78fb      	ldrb	r3, [r7, #3]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d102      	bne.n	80043e4 <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 80043de:	2301      	movs	r3, #1
 80043e0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80043e2:	e045      	b.n	8004470 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80043e4:	78fb      	ldrb	r3, [r7, #3]
 80043e6:	75fb      	strb	r3, [r7, #23]
            break;
 80043e8:	e042      	b.n	8004470 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80043ea:	78fb      	ldrb	r3, [r7, #3]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d102      	bne.n	80043f6 <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 80043f0:	2302      	movs	r3, #2
 80043f2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80043f4:	e03c      	b.n	8004470 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80043f6:	78fb      	ldrb	r3, [r7, #3]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d102      	bne.n	8004402 <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 80043fc:	2302      	movs	r3, #2
 80043fe:	75fb      	strb	r3, [r7, #23]
            break;
 8004400:	e036      	b.n	8004470 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004402:	78fb      	ldrb	r3, [r7, #3]
 8004404:	75fb      	strb	r3, [r7, #23]
            break;
 8004406:	e033      	b.n	8004470 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8004408:	78fb      	ldrb	r3, [r7, #3]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d102      	bne.n	8004414 <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800440e:	2303      	movs	r3, #3
 8004410:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004412:	e02d      	b.n	8004470 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8004414:	78fb      	ldrb	r3, [r7, #3]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d102      	bne.n	8004420 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800441a:	2303      	movs	r3, #3
 800441c:	75fb      	strb	r3, [r7, #23]
            break;
 800441e:	e027      	b.n	8004470 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8004420:	78fb      	ldrb	r3, [r7, #3]
 8004422:	2b02      	cmp	r3, #2
 8004424:	d102      	bne.n	800442c <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8004426:	2303      	movs	r3, #3
 8004428:	75fb      	strb	r3, [r7, #23]
            break;
 800442a:	e021      	b.n	8004470 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800442c:	78fb      	ldrb	r3, [r7, #3]
 800442e:	75fb      	strb	r3, [r7, #23]
            break;
 8004430:	e01e      	b.n	8004470 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8004432:	78fb      	ldrb	r3, [r7, #3]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d102      	bne.n	800443e <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8004438:	2304      	movs	r3, #4
 800443a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800443c:	e018      	b.n	8004470 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 800443e:	78fb      	ldrb	r3, [r7, #3]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d102      	bne.n	800444a <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8004444:	2304      	movs	r3, #4
 8004446:	75fb      	strb	r3, [r7, #23]
            break;
 8004448:	e012      	b.n	8004470 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 800444a:	78fb      	ldrb	r3, [r7, #3]
 800444c:	2b02      	cmp	r3, #2
 800444e:	d102      	bne.n	8004456 <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8004450:	2304      	movs	r3, #4
 8004452:	75fb      	strb	r3, [r7, #23]
            break;
 8004454:	e00c      	b.n	8004470 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 8004456:	78fb      	ldrb	r3, [r7, #3]
 8004458:	2b03      	cmp	r3, #3
 800445a:	d102      	bne.n	8004462 <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 800445c:	2304      	movs	r3, #4
 800445e:	75fb      	strb	r3, [r7, #23]
            break;
 8004460:	e006      	b.n	8004470 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004462:	78fb      	ldrb	r3, [r7, #3]
 8004464:	75fb      	strb	r3, [r7, #23]
            break;
 8004466:	e003      	b.n	8004470 <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8004468:	78fb      	ldrb	r3, [r7, #3]
 800446a:	75fb      	strb	r3, [r7, #23]
            break;
 800446c:	e000      	b.n	8004470 <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 800446e:	bf00      	nop
    }
  }

  if (ret == 0)
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d107      	bne.n	8004486 <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004476:	f107 0208 	add.w	r2, r7, #8
 800447a:	2301      	movs	r3, #1
 800447c:	2111      	movs	r1, #17
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7ff fd59 	bl	8003f36 <lsm6dsr_read_reg>
 8004484:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10f      	bne.n	80044ac <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 800448c:	7dfb      	ldrb	r3, [r7, #23]
 800448e:	f003 030f 	and.w	r3, r3, #15
 8004492:	b2da      	uxtb	r2, r3
 8004494:	7a3b      	ldrb	r3, [r7, #8]
 8004496:	f362 1307 	bfi	r3, r2, #4, #4
 800449a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800449c:	f107 0208 	add.w	r2, r7, #8
 80044a0:	2301      	movs	r3, #1
 80044a2:	2111      	movs	r1, #17
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f7ff fd5e 	bl	8003f66 <lsm6dsr_write_reg>
 80044aa:	6138      	str	r0, [r7, #16]
  }

  return ret;
 80044ac:	693b      	ldr	r3, [r7, #16]
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3718      	adds	r7, #24
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop

080044b8 <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	460b      	mov	r3, r1
 80044c2:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80044c4:	f107 0208 	add.w	r2, r7, #8
 80044c8:	2301      	movs	r3, #1
 80044ca:	2112      	movs	r1, #18
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f7ff fd32 	bl	8003f36 <lsm6dsr_read_reg>
 80044d2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10f      	bne.n	80044fa <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 80044da:	78fb      	ldrb	r3, [r7, #3]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	7a3b      	ldrb	r3, [r7, #8]
 80044e4:	f362 1386 	bfi	r3, r2, #6, #1
 80044e8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80044ea:	f107 0208 	add.w	r2, r7, #8
 80044ee:	2301      	movs	r3, #1
 80044f0:	2112      	movs	r1, #18
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7ff fd37 	bl	8003f66 <lsm6dsr_write_reg>
 80044f8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80044fa:	68fb      	ldr	r3, [r7, #12]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 800450e:	f107 0208 	add.w	r2, r7, #8
 8004512:	2301      	movs	r3, #1
 8004514:	211e      	movs	r1, #30
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7ff fd0d 	bl	8003f36 <lsm6dsr_read_reg>
 800451c:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 800451e:	7a3b      	ldrb	r3, [r7, #8]
 8004520:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004524:	b2db      	uxtb	r3, r3
 8004526:	461a      	mov	r2, r3
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	701a      	strb	r2, [r3, #0]

  return ret;
 800452c:	68fb      	ldr	r3, [r7, #12]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b084      	sub	sp, #16
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8004540:	f107 0208 	add.w	r2, r7, #8
 8004544:	2301      	movs	r3, #1
 8004546:	211e      	movs	r1, #30
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f7ff fcf4 	bl	8003f36 <lsm6dsr_read_reg>
 800454e:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8004550:	7a3b      	ldrb	r3, [r7, #8]
 8004552:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004556:	b2db      	uxtb	r3, r3
 8004558:	461a      	mov	r2, r3
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	701a      	strb	r2, [r3, #0]

  return ret;
 800455e:	68fb      	ldr	r3, [r7, #12]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8004572:	f107 0208 	add.w	r2, r7, #8
 8004576:	2301      	movs	r3, #1
 8004578:	211e      	movs	r1, #30
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7ff fcdb 	bl	8003f36 <lsm6dsr_read_reg>
 8004580:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 8004582:	7a3b      	ldrb	r3, [r7, #8]
 8004584:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004588:	b2db      	uxtb	r3, r3
 800458a:	461a      	mov	r2, r3
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	701a      	strb	r2, [r3, #0]

  return ret;
 8004590:	68fb      	ldr	r3, [r7, #12]
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b084      	sub	sp, #16
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
 80045a2:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 80045a4:	f107 0208 	add.w	r2, r7, #8
 80045a8:	2302      	movs	r3, #2
 80045aa:	2120      	movs	r1, #32
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7ff fcc2 	bl	8003f36 <lsm6dsr_read_reg>
 80045b2:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 80045b4:	7a7b      	ldrb	r3, [r7, #9]
 80045b6:	b21a      	sxth	r2, r3
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	021b      	lsls	r3, r3, #8
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	7a3b      	ldrb	r3, [r7, #8]
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	4413      	add	r3, r2
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	b21a      	sxth	r2, r3
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	801a      	strh	r2, [r3, #0]

  return ret;
 80045d6:	68fb      	ldr	r3, [r7, #12]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 80045ea:	f107 020c 	add.w	r2, r7, #12
 80045ee:	2306      	movs	r3, #6
 80045f0:	2122      	movs	r1, #34	; 0x22
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7ff fc9f 	bl	8003f36 <lsm6dsr_read_reg>
 80045f8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80045fa:	7b7b      	ldrb	r3, [r7, #13]
 80045fc:	b21a      	sxth	r2, r3
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004608:	b29b      	uxth	r3, r3
 800460a:	021b      	lsls	r3, r3, #8
 800460c:	b29a      	uxth	r2, r3
 800460e:	7b3b      	ldrb	r3, [r7, #12]
 8004610:	b29b      	uxth	r3, r3
 8004612:	4413      	add	r3, r2
 8004614:	b29b      	uxth	r3, r3
 8004616:	b21a      	sxth	r2, r3
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800461c:	7bfa      	ldrb	r2, [r7, #15]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	3302      	adds	r3, #2
 8004622:	b212      	sxth	r2, r2
 8004624:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	3302      	adds	r3, #2
 800462a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800462e:	b29b      	uxth	r3, r3
 8004630:	021b      	lsls	r3, r3, #8
 8004632:	b29a      	uxth	r2, r3
 8004634:	7bbb      	ldrb	r3, [r7, #14]
 8004636:	b29b      	uxth	r3, r3
 8004638:	4413      	add	r3, r2
 800463a:	b29a      	uxth	r2, r3
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	3302      	adds	r3, #2
 8004640:	b212      	sxth	r2, r2
 8004642:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004644:	7c7a      	ldrb	r2, [r7, #17]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	3304      	adds	r3, #4
 800464a:	b212      	sxth	r2, r2
 800464c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	3304      	adds	r3, #4
 8004652:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004656:	b29b      	uxth	r3, r3
 8004658:	021b      	lsls	r3, r3, #8
 800465a:	b29a      	uxth	r2, r3
 800465c:	7c3b      	ldrb	r3, [r7, #16]
 800465e:	b29b      	uxth	r3, r3
 8004660:	4413      	add	r3, r2
 8004662:	b29a      	uxth	r2, r3
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	3304      	adds	r3, #4
 8004668:	b212      	sxth	r2, r2
 800466a:	801a      	strh	r2, [r3, #0]

  return ret;
 800466c:	697b      	ldr	r3, [r7, #20]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b086      	sub	sp, #24
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
 800467e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 8004680:	f107 020c 	add.w	r2, r7, #12
 8004684:	2306      	movs	r3, #6
 8004686:	2128      	movs	r1, #40	; 0x28
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f7ff fc54 	bl	8003f36 <lsm6dsr_read_reg>
 800468e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004690:	7b7b      	ldrb	r3, [r7, #13]
 8004692:	b21a      	sxth	r2, r3
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800469e:	b29b      	uxth	r3, r3
 80046a0:	021b      	lsls	r3, r3, #8
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	7b3b      	ldrb	r3, [r7, #12]
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	4413      	add	r3, r2
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	b21a      	sxth	r2, r3
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80046b2:	7bfa      	ldrb	r2, [r7, #15]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	3302      	adds	r3, #2
 80046b8:	b212      	sxth	r2, r2
 80046ba:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	3302      	adds	r3, #2
 80046c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	021b      	lsls	r3, r3, #8
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	7bbb      	ldrb	r3, [r7, #14]
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	4413      	add	r3, r2
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	3302      	adds	r3, #2
 80046d6:	b212      	sxth	r2, r2
 80046d8:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80046da:	7c7a      	ldrb	r2, [r7, #17]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	3304      	adds	r3, #4
 80046e0:	b212      	sxth	r2, r2
 80046e2:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	3304      	adds	r3, #4
 80046e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	021b      	lsls	r3, r3, #8
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	7c3b      	ldrb	r3, [r7, #16]
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	4413      	add	r3, r2
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	3304      	adds	r3, #4
 80046fe:	b212      	sxth	r2, r2
 8004700:	801a      	strh	r2, [r3, #0]

  return ret;
 8004702:	697b      	ldr	r3, [r7, #20]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3718      	adds	r7, #24
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	460b      	mov	r3, r1
 8004716:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8004718:	f107 0208 	add.w	r2, r7, #8
 800471c:	2301      	movs	r3, #1
 800471e:	2101      	movs	r1, #1
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f7ff fc08 	bl	8003f36 <lsm6dsr_read_reg>
 8004726:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10f      	bne.n	800474e <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 800472e:	78fb      	ldrb	r3, [r7, #3]
 8004730:	f003 0303 	and.w	r3, r3, #3
 8004734:	b2da      	uxtb	r2, r3
 8004736:	7a3b      	ldrb	r3, [r7, #8]
 8004738:	f362 1387 	bfi	r3, r2, #6, #2
 800473c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 800473e:	f107 0208 	add.w	r2, r7, #8
 8004742:	2301      	movs	r3, #1
 8004744:	2101      	movs	r1, #1
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7ff fc0d 	bl	8003f66 <lsm6dsr_write_reg>
 800474c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 800474e:	68fb      	ldr	r3, [r7, #12]
}
 8004750:	4618      	mov	r0, r3
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 8004762:	2301      	movs	r3, #1
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	210f      	movs	r1, #15
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7ff fbe4 	bl	8003f36 <lsm6dsr_read_reg>
 800476e:	60f8      	str	r0, [r7, #12]

  return ret;
 8004770:	68fb      	ldr	r3, [r7, #12]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b084      	sub	sp, #16
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
 8004782:	460b      	mov	r3, r1
 8004784:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8004786:	f107 0208 	add.w	r2, r7, #8
 800478a:	2301      	movs	r3, #1
 800478c:	2112      	movs	r1, #18
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7ff fbd1 	bl	8003f36 <lsm6dsr_read_reg>
 8004794:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10f      	bne.n	80047bc <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 800479c:	78fb      	ldrb	r3, [r7, #3]
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	7a3b      	ldrb	r3, [r7, #8]
 80047a6:	f362 0300 	bfi	r3, r2, #0, #1
 80047aa:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80047ac:	f107 0208 	add.w	r2, r7, #8
 80047b0:	2301      	movs	r3, #1
 80047b2:	2112      	movs	r1, #18
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f7ff fbd6 	bl	8003f66 <lsm6dsr_write_reg>
 80047ba:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80047bc:	68fb      	ldr	r3, [r7, #12]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b084      	sub	sp, #16
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
 80047ce:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80047d0:	f107 0208 	add.w	r2, r7, #8
 80047d4:	2301      	movs	r3, #1
 80047d6:	2112      	movs	r1, #18
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f7ff fbac 	bl	8003f36 <lsm6dsr_read_reg>
 80047de:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 80047e0:	7a3b      	ldrb	r3, [r7, #8]
 80047e2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	461a      	mov	r2, r3
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	701a      	strb	r2, [r3, #0]

  return ret;
 80047ee:	68fb      	ldr	r3, [r7, #12]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8004802:	2102      	movs	r1, #2
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7ff ff81 	bl	800470c <lsm6dsr_mem_bank_set>
 800480a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d106      	bne.n	8004820 <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 8004812:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 8004814:	2301      	movs	r3, #1
 8004816:	2146      	movs	r1, #70	; 0x46
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f7ff fb8c 	bl	8003f36 <lsm6dsr_read_reg>
 800481e:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d107      	bne.n	8004836 <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 800482a:	2301      	movs	r3, #1
 800482c:	2147      	movs	r1, #71	; 0x47
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7ff fb81 	bl	8003f36 <lsm6dsr_read_reg>
 8004834:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d104      	bne.n	8004846 <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 800483c:	2100      	movs	r1, #0
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7ff ff64 	bl	800470c <lsm6dsr_mem_bank_set>
 8004844:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004846:	68fb      	ldr	r3, [r7, #12]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800485a:	2102      	movs	r1, #2
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f7ff ff55 	bl	800470c <lsm6dsr_mem_bank_set>
 8004862:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d107      	bne.n	800487a <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 800486a:	f107 0208 	add.w	r2, r7, #8
 800486e:	2301      	movs	r3, #1
 8004870:	215f      	movs	r1, #95	; 0x5f
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7ff fb5f 	bl	8003f36 <lsm6dsr_read_reg>
 8004878:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d104      	bne.n	800488a <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8004880:	2100      	movs	r1, #0
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7ff ff42 	bl	800470c <lsm6dsr_mem_bank_set>
 8004888:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 800488a:	7a3b      	ldrb	r3, [r7, #8]
 800488c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b03      	cmp	r3, #3
 8004894:	d81a      	bhi.n	80048cc <lsm6dsr_fsm_data_rate_get+0x7c>
 8004896:	a201      	add	r2, pc, #4	; (adr r2, 800489c <lsm6dsr_fsm_data_rate_get+0x4c>)
 8004898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489c:	080048ad 	.word	0x080048ad
 80048a0:	080048b5 	.word	0x080048b5
 80048a4:	080048bd 	.word	0x080048bd
 80048a8:	080048c5 	.word	0x080048c5
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	2200      	movs	r2, #0
 80048b0:	701a      	strb	r2, [r3, #0]
      break;
 80048b2:	e00f      	b.n	80048d4 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	2201      	movs	r2, #1
 80048b8:	701a      	strb	r2, [r3, #0]
      break;
 80048ba:	e00b      	b.n	80048d4 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	2202      	movs	r2, #2
 80048c0:	701a      	strb	r2, [r3, #0]
      break;
 80048c2:	e007      	b.n	80048d4 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	2203      	movs	r2, #3
 80048c8:	701a      	strb	r2, [r3, #0]
      break;
 80048ca:	e003      	b.n	80048d4 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	2200      	movs	r2, #0
 80048d0:	701a      	strb	r2, [r3, #0]
      break;
 80048d2:	bf00      	nop
  }

  return ret;
 80048d4:	68fb      	ldr	r3, [r7, #12]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop

080048e0 <HAL_RTC_AlarmAEventCallback>:
RTC_TimeTypeDef sTime = {0};
RTC_DateTypeDef sDate = {0};
RTC_AlarmTypeDef sAlarm = {0};

/*You cannot put these in the user callbacks section and I don't know why (can put in user begin 4)*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),(uint8_t*)"AlarmA\r\n", 8, HAL_MAX_DELAY);
 80048e8:	f04f 33ff 	mov.w	r3, #4294967295
 80048ec:	2208      	movs	r2, #8
 80048ee:	4905      	ldr	r1, [pc, #20]	; (8004904 <HAL_RTC_AlarmAEventCallback+0x24>)
 80048f0:	4805      	ldr	r0, [pc, #20]	; (8004908 <HAL_RTC_AlarmAEventCallback+0x28>)
 80048f2:	f005 fb3a 	bl	8009f6a <HAL_UART_Transmit>
	flagA = 1;
 80048f6:	4b05      	ldr	r3, [pc, #20]	; (800490c <HAL_RTC_AlarmAEventCallback+0x2c>)
 80048f8:	2201      	movs	r2, #1
 80048fa:	701a      	strb	r2, [r3, #0]
}
 80048fc:	bf00      	nop
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	08016820 	.word	0x08016820
 8004908:	20005764 	.word	0x20005764
 800490c:	200005e8 	.word	0x200005e8

08004910 <MRT_SetupRTOS>:
}




bool MRT_SetupRTOS(UART_HandleTypeDef uart,uint8_t sleepT){
 8004910:	b084      	sub	sp, #16
 8004912:	b580      	push	{r7, lr}
 8004914:	b082      	sub	sp, #8
 8004916:	af00      	add	r7, sp, #0
 8004918:	f107 0c10 	add.w	ip, r7, #16
 800491c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTOS\r\n", 17, HAL_MAX_DELAY);
 8004920:	f04f 33ff 	mov.w	r3, #4294967295
 8004924:	2211      	movs	r2, #17
 8004926:	490e      	ldr	r1, [pc, #56]	; (8004960 <MRT_SetupRTOS+0x50>)
 8004928:	480e      	ldr	r0, [pc, #56]	; (8004964 <MRT_SetupRTOS+0x54>)
 800492a:	f005 fb1e 	bl	8009f6a <HAL_UART_Transmit>
	rtos.huart = uart;
 800492e:	4b0d      	ldr	r3, [pc, #52]	; (8004964 <MRT_SetupRTOS+0x54>)
 8004930:	4618      	mov	r0, r3
 8004932:	f107 0310 	add.w	r3, r7, #16
 8004936:	2244      	movs	r2, #68	; 0x44
 8004938:	4619      	mov	r1, r3
 800493a:	f00c fe21 	bl	8011580 <memcpy>
	rtos.sleepTime = sleepT;
 800493e:	4a09      	ldr	r2, [pc, #36]	; (8004964 <MRT_SetupRTOS+0x54>)
 8004940:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8004944:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
	bool wakingUp = MRT_WUProcedure();
 8004948:	f000 f80e 	bl	8004968 <MRT_WUProcedure>
 800494c:	4603      	mov	r3, r0
 800494e:	71fb      	strb	r3, [r7, #7]
	return wakingUp;
 8004950:	79fb      	ldrb	r3, [r7, #7]
}
 8004952:	4618      	mov	r0, r3
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800495c:	b004      	add	sp, #16
 800495e:	4770      	bx	lr
 8004960:	08016838 	.word	0x08016838
 8004964:	20005764 	.word	0x20005764

08004968 <MRT_WUProcedure>:



bool MRT_WUProcedure(void){
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0

	bool wakingUp = false;
 800496e:	2300      	movs	r3, #0
 8004970:	71fb      	strb	r3, [r7, #7]

	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8004972:	4b14      	ldr	r3, [pc, #80]	; (80049c4 <MRT_WUProcedure+0x5c>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b02      	cmp	r3, #2
 800497c:	d11b      	bne.n	80049b6 <MRT_WUProcedure+0x4e>
	{
		wakingUp = true;
 800497e:	2301      	movs	r3, #1
 8004980:	71fb      	strb	r3, [r7, #7]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 8004982:	4b10      	ldr	r3, [pc, #64]	; (80049c4 <MRT_WUProcedure+0x5c>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a0f      	ldr	r2, [pc, #60]	; (80049c4 <MRT_WUProcedure+0x5c>)
 8004988:	f043 0308 	orr.w	r3, r3, #8
 800498c:	6013      	str	r3, [r2, #0]

		/** display  the string **/
		char *str = "Wakeup from the STANDBY MODE\r\n";
 800498e:	4b0e      	ldr	r3, [pc, #56]	; (80049c8 <MRT_WUProcedure+0x60>)
 8004990:	603b      	str	r3, [r7, #0]
		HAL_UART_Transmit(&(rtos.huart), (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8004992:	6838      	ldr	r0, [r7, #0]
 8004994:	f7fb fc2c 	bl	80001f0 <strlen>
 8004998:	4603      	mov	r3, r0
 800499a:	b29a      	uxth	r2, r3
 800499c:	f04f 33ff 	mov.w	r3, #4294967295
 80049a0:	6839      	ldr	r1, [r7, #0]
 80049a2:	480a      	ldr	r0, [pc, #40]	; (80049cc <MRT_WUProcedure+0x64>)
 80049a4:	f005 fae1 	bl	8009f6a <HAL_UART_Transmit>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 80049a8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80049ac:	f003 f95e 	bl	8007c6c <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80049b0:	4807      	ldr	r0, [pc, #28]	; (80049d0 <MRT_WUProcedure+0x68>)
 80049b2:	f004 fbb7 	bl	8009124 <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_ClearFlags();
 80049b6:	f000 f80d 	bl	80049d4 <MRT_ClearFlags>

	return wakingUp;
 80049ba:	79fb      	ldrb	r3, [r7, #7]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	40007000 	.word	0x40007000
 80049c8:	0801684c 	.word	0x0801684c
 80049cc:	20005764 	.word	0x20005764
 80049d0:	200054a4 	.word	0x200054a4

080049d4 <MRT_ClearFlags>:

void MRT_ClearFlags(void){
 80049d4:	b580      	push	{r7, lr}
 80049d6:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	HAL_UART_Transmit(&(rtos.huart),"Clearing the flags\r\n", 20, HAL_MAX_DELAY);
 80049d8:	f04f 33ff 	mov.w	r3, #4294967295
 80049dc:	2214      	movs	r2, #20
 80049de:	4932      	ldr	r1, [pc, #200]	; (8004aa8 <MRT_ClearFlags+0xd4>)
 80049e0:	4832      	ldr	r0, [pc, #200]	; (8004aac <MRT_ClearFlags+0xd8>)
 80049e2:	f005 fac2 	bl	8009f6a <HAL_UART_Transmit>
	  	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 80049e6:	4b32      	ldr	r3, [pc, #200]	; (8004ab0 <MRT_ClearFlags+0xdc>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	22ca      	movs	r2, #202	; 0xca
 80049ec:	625a      	str	r2, [r3, #36]	; 0x24
 80049ee:	4b30      	ldr	r3, [pc, #192]	; (8004ab0 <MRT_ClearFlags+0xdc>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2253      	movs	r2, #83	; 0x53
 80049f4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 80049f6:	e00f      	b.n	8004a18 <MRT_ClearFlags+0x44>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm A flag\r\n", 23, HAL_MAX_DELAY);
 80049f8:	f04f 33ff 	mov.w	r3, #4294967295
 80049fc:	2217      	movs	r2, #23
 80049fe:	492d      	ldr	r1, [pc, #180]	; (8004ab4 <MRT_ClearFlags+0xe0>)
 8004a00:	482a      	ldr	r0, [pc, #168]	; (8004aac <MRT_ClearFlags+0xd8>)
 8004a02:	f005 fab2 	bl	8009f6a <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8004a06:	4b2a      	ldr	r3, [pc, #168]	; (8004ab0 <MRT_ClearFlags+0xdc>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	b2da      	uxtb	r2, r3
 8004a0e:	4b28      	ldr	r3, [pc, #160]	; (8004ab0 <MRT_ClearFlags+0xdc>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004a16:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8004a18:	4b25      	ldr	r3, [pc, #148]	; (8004ab0 <MRT_ClearFlags+0xdc>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1e8      	bne.n	80049f8 <MRT_ClearFlags+0x24>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8004a26:	4b22      	ldr	r3, [pc, #136]	; (8004ab0 <MRT_ClearFlags+0xdc>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	22ff      	movs	r2, #255	; 0xff
 8004a2c:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004a2e:	4b22      	ldr	r3, [pc, #136]	; (8004ab8 <MRT_ClearFlags+0xe4>)
 8004a30:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a34:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8004a36:	4b1e      	ldr	r3, [pc, #120]	; (8004ab0 <MRT_ClearFlags+0xdc>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	22ca      	movs	r2, #202	; 0xca
 8004a3c:	625a      	str	r2, [r3, #36]	; 0x24
 8004a3e:	4b1c      	ldr	r3, [pc, #112]	; (8004ab0 <MRT_ClearFlags+0xdc>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2253      	movs	r2, #83	; 0x53
 8004a44:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8004a46:	e00f      	b.n	8004a68 <MRT_ClearFlags+0x94>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm B flag\r\n", 23, HAL_MAX_DELAY);
 8004a48:	f04f 33ff 	mov.w	r3, #4294967295
 8004a4c:	2217      	movs	r2, #23
 8004a4e:	491b      	ldr	r1, [pc, #108]	; (8004abc <MRT_ClearFlags+0xe8>)
 8004a50:	4816      	ldr	r0, [pc, #88]	; (8004aac <MRT_ClearFlags+0xd8>)
 8004a52:	f005 fa8a 	bl	8009f6a <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRBF);
 8004a56:	4b16      	ldr	r3, [pc, #88]	; (8004ab0 <MRT_ClearFlags+0xdc>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	4b14      	ldr	r3, [pc, #80]	; (8004ab0 <MRT_ClearFlags+0xdc>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004a66:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8004a68:	4b11      	ldr	r3, [pc, #68]	; (8004ab0 <MRT_ClearFlags+0xdc>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1e8      	bne.n	8004a48 <MRT_ClearFlags+0x74>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8004a76:	4b0e      	ldr	r3, [pc, #56]	; (8004ab0 <MRT_ClearFlags+0xdc>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	22ff      	movs	r2, #255	; 0xff
 8004a7c:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004a7e:	4b0e      	ldr	r3, [pc, #56]	; (8004ab8 <MRT_ClearFlags+0xe4>)
 8004a80:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a84:	615a      	str	r2, [r3, #20]


	/* Clear the WU FLAG */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing WU flag\r\n", 18, HAL_MAX_DELAY);
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8004a86:	4b0e      	ldr	r3, [pc, #56]	; (8004ac0 <MRT_ClearFlags+0xec>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a0d      	ldr	r2, [pc, #52]	; (8004ac0 <MRT_ClearFlags+0xec>)
 8004a8c:	f043 0304 	orr.w	r3, r3, #4
 8004a90:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing RTC WU flag\r\n", 22, HAL_MAX_DELAY);
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8004a92:	4b07      	ldr	r3, [pc, #28]	; (8004ab0 <MRT_ClearFlags+0xdc>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	4b05      	ldr	r3, [pc, #20]	; (8004ab0 <MRT_ClearFlags+0xdc>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004aa2:	60da      	str	r2, [r3, #12]
}
 8004aa4:	bf00      	nop
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	0801686c 	.word	0x0801686c
 8004aac:	20005764 	.word	0x20005764
 8004ab0:	200054a4 	.word	0x200054a4
 8004ab4:	08016884 	.word	0x08016884
 8004ab8:	40013c00 	.word	0x40013c00
 8004abc:	0801689c 	.word	0x0801689c
 8004ac0:	40007000 	.word	0x40007000

08004ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ac8:	4b0e      	ldr	r3, [pc, #56]	; (8004b04 <HAL_Init+0x40>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a0d      	ldr	r2, [pc, #52]	; (8004b04 <HAL_Init+0x40>)
 8004ace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ad2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ad4:	4b0b      	ldr	r3, [pc, #44]	; (8004b04 <HAL_Init+0x40>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a0a      	ldr	r2, [pc, #40]	; (8004b04 <HAL_Init+0x40>)
 8004ada:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ade:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ae0:	4b08      	ldr	r3, [pc, #32]	; (8004b04 <HAL_Init+0x40>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a07      	ldr	r2, [pc, #28]	; (8004b04 <HAL_Init+0x40>)
 8004ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004aec:	2003      	movs	r0, #3
 8004aee:	f000 fb92 	bl	8005216 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004af2:	2000      	movs	r0, #0
 8004af4:	f7fe f954 	bl	8002da0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004af8:	f7fd fe18 	bl	800272c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	40023c00 	.word	0x40023c00

08004b08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b0c:	4b06      	ldr	r3, [pc, #24]	; (8004b28 <HAL_IncTick+0x20>)
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	461a      	mov	r2, r3
 8004b12:	4b06      	ldr	r3, [pc, #24]	; (8004b2c <HAL_IncTick+0x24>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4413      	add	r3, r2
 8004b18:	4a04      	ldr	r2, [pc, #16]	; (8004b2c <HAL_IncTick+0x24>)
 8004b1a:	6013      	str	r3, [r2, #0]
}
 8004b1c:	bf00      	nop
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	20000008 	.word	0x20000008
 8004b2c:	200057ac 	.word	0x200057ac

08004b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b30:	b480      	push	{r7}
 8004b32:	af00      	add	r7, sp, #0
  return uwTick;
 8004b34:	4b03      	ldr	r3, [pc, #12]	; (8004b44 <HAL_GetTick+0x14>)
 8004b36:	681b      	ldr	r3, [r3, #0]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	200057ac 	.word	0x200057ac

08004b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b50:	f7ff ffee 	bl	8004b30 <HAL_GetTick>
 8004b54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b60:	d005      	beq.n	8004b6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b62:	4b0a      	ldr	r3, [pc, #40]	; (8004b8c <HAL_Delay+0x44>)
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	461a      	mov	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004b6e:	bf00      	nop
 8004b70:	f7ff ffde 	bl	8004b30 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d8f7      	bhi.n	8004b70 <HAL_Delay+0x28>
  {
  }
}
 8004b80:	bf00      	nop
 8004b82:	bf00      	nop
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	20000008 	.word	0x20000008

08004b90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e033      	b.n	8004c0e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d109      	bne.n	8004bc2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7fd fde8 	bl	8002784 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc6:	f003 0310 	and.w	r3, r3, #16
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d118      	bne.n	8004c00 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004bd6:	f023 0302 	bic.w	r3, r3, #2
 8004bda:	f043 0202 	orr.w	r2, r3, #2
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f94a 	bl	8004e7c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	f023 0303 	bic.w	r3, r3, #3
 8004bf6:	f043 0201 	orr.w	r2, r3, #1
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	641a      	str	r2, [r3, #64]	; 0x40
 8004bfe:	e001      	b.n	8004c04 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
	...

08004c18 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d101      	bne.n	8004c34 <HAL_ADC_ConfigChannel+0x1c>
 8004c30:	2302      	movs	r3, #2
 8004c32:	e113      	b.n	8004e5c <HAL_ADC_ConfigChannel+0x244>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2b09      	cmp	r3, #9
 8004c42:	d925      	bls.n	8004c90 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68d9      	ldr	r1, [r3, #12]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	461a      	mov	r2, r3
 8004c52:	4613      	mov	r3, r2
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	4413      	add	r3, r2
 8004c58:	3b1e      	subs	r3, #30
 8004c5a:	2207      	movs	r2, #7
 8004c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c60:	43da      	mvns	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	400a      	ands	r2, r1
 8004c68:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68d9      	ldr	r1, [r3, #12]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	689a      	ldr	r2, [r3, #8]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	005b      	lsls	r3, r3, #1
 8004c80:	4403      	add	r3, r0
 8004c82:	3b1e      	subs	r3, #30
 8004c84:	409a      	lsls	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	60da      	str	r2, [r3, #12]
 8004c8e:	e022      	b.n	8004cd6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6919      	ldr	r1, [r3, #16]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	4413      	add	r3, r2
 8004ca4:	2207      	movs	r2, #7
 8004ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8004caa:	43da      	mvns	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	400a      	ands	r2, r1
 8004cb2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6919      	ldr	r1, [r3, #16]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	689a      	ldr	r2, [r3, #8]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	4403      	add	r3, r0
 8004ccc:	409a      	lsls	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	2b06      	cmp	r3, #6
 8004cdc:	d824      	bhi.n	8004d28 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685a      	ldr	r2, [r3, #4]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	3b05      	subs	r3, #5
 8004cf0:	221f      	movs	r2, #31
 8004cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf6:	43da      	mvns	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	400a      	ands	r2, r1
 8004cfe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	4613      	mov	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	3b05      	subs	r3, #5
 8004d1a:	fa00 f203 	lsl.w	r2, r0, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	635a      	str	r2, [r3, #52]	; 0x34
 8004d26:	e04c      	b.n	8004dc2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	2b0c      	cmp	r3, #12
 8004d2e:	d824      	bhi.n	8004d7a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4413      	add	r3, r2
 8004d40:	3b23      	subs	r3, #35	; 0x23
 8004d42:	221f      	movs	r2, #31
 8004d44:	fa02 f303 	lsl.w	r3, r2, r3
 8004d48:	43da      	mvns	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	400a      	ands	r2, r1
 8004d50:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	4618      	mov	r0, r3
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	4613      	mov	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	3b23      	subs	r3, #35	; 0x23
 8004d6c:	fa00 f203 	lsl.w	r2, r0, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	631a      	str	r2, [r3, #48]	; 0x30
 8004d78:	e023      	b.n	8004dc2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	4613      	mov	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4413      	add	r3, r2
 8004d8a:	3b41      	subs	r3, #65	; 0x41
 8004d8c:	221f      	movs	r2, #31
 8004d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d92:	43da      	mvns	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	400a      	ands	r2, r1
 8004d9a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	4618      	mov	r0, r3
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	4613      	mov	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	3b41      	subs	r3, #65	; 0x41
 8004db6:	fa00 f203 	lsl.w	r2, r0, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004dc2:	4b29      	ldr	r3, [pc, #164]	; (8004e68 <HAL_ADC_ConfigChannel+0x250>)
 8004dc4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a28      	ldr	r2, [pc, #160]	; (8004e6c <HAL_ADC_ConfigChannel+0x254>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d10f      	bne.n	8004df0 <HAL_ADC_ConfigChannel+0x1d8>
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2b12      	cmp	r3, #18
 8004dd6:	d10b      	bne.n	8004df0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a1d      	ldr	r2, [pc, #116]	; (8004e6c <HAL_ADC_ConfigChannel+0x254>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d12b      	bne.n	8004e52 <HAL_ADC_ConfigChannel+0x23a>
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a1c      	ldr	r2, [pc, #112]	; (8004e70 <HAL_ADC_ConfigChannel+0x258>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d003      	beq.n	8004e0c <HAL_ADC_ConfigChannel+0x1f4>
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b11      	cmp	r3, #17
 8004e0a:	d122      	bne.n	8004e52 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a11      	ldr	r2, [pc, #68]	; (8004e70 <HAL_ADC_ConfigChannel+0x258>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d111      	bne.n	8004e52 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004e2e:	4b11      	ldr	r3, [pc, #68]	; (8004e74 <HAL_ADC_ConfigChannel+0x25c>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a11      	ldr	r2, [pc, #68]	; (8004e78 <HAL_ADC_ConfigChannel+0x260>)
 8004e34:	fba2 2303 	umull	r2, r3, r2, r3
 8004e38:	0c9a      	lsrs	r2, r3, #18
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4413      	add	r3, r2
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004e44:	e002      	b.n	8004e4c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1f9      	bne.n	8004e46 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	40012300 	.word	0x40012300
 8004e6c:	40012000 	.word	0x40012000
 8004e70:	10000012 	.word	0x10000012
 8004e74:	20000000 	.word	0x20000000
 8004e78:	431bde83 	.word	0x431bde83

08004e7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004e84:	4b79      	ldr	r3, [pc, #484]	; (800506c <ADC_Init+0x1f0>)
 8004e86:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004eb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6859      	ldr	r1, [r3, #4]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	021a      	lsls	r2, r3, #8
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004ed4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6859      	ldr	r1, [r3, #4]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689a      	ldr	r2, [r3, #8]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ef6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6899      	ldr	r1, [r3, #8]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0e:	4a58      	ldr	r2, [pc, #352]	; (8005070 <ADC_Init+0x1f4>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d022      	beq.n	8004f5a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689a      	ldr	r2, [r3, #8]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	6899      	ldr	r1, [r3, #8]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689a      	ldr	r2, [r3, #8]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004f44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6899      	ldr	r1, [r3, #8]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	430a      	orrs	r2, r1
 8004f56:	609a      	str	r2, [r3, #8]
 8004f58:	e00f      	b.n	8004f7a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689a      	ldr	r2, [r3, #8]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004f78:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	689a      	ldr	r2, [r3, #8]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 0202 	bic.w	r2, r2, #2
 8004f88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6899      	ldr	r1, [r3, #8]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	7e1b      	ldrb	r3, [r3, #24]
 8004f94:	005a      	lsls	r2, r3, #1
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d01b      	beq.n	8004fe0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685a      	ldr	r2, [r3, #4]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fb6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004fc6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6859      	ldr	r1, [r3, #4]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	035a      	lsls	r2, r3, #13
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	605a      	str	r2, [r3, #4]
 8004fde:	e007      	b.n	8004ff0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	685a      	ldr	r2, [r3, #4]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004ffe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	69db      	ldr	r3, [r3, #28]
 800500a:	3b01      	subs	r3, #1
 800500c:	051a      	lsls	r2, r3, #20
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005024:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6899      	ldr	r1, [r3, #8]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005032:	025a      	lsls	r2, r3, #9
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	430a      	orrs	r2, r1
 800503a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689a      	ldr	r2, [r3, #8]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800504a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6899      	ldr	r1, [r3, #8]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	029a      	lsls	r2, r3, #10
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	430a      	orrs	r2, r1
 800505e:	609a      	str	r2, [r3, #8]
}
 8005060:	bf00      	nop
 8005062:	3714      	adds	r7, #20
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	40012300 	.word	0x40012300
 8005070:	0f000001 	.word	0x0f000001

08005074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f003 0307 	and.w	r3, r3, #7
 8005082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005084:	4b0c      	ldr	r3, [pc, #48]	; (80050b8 <__NVIC_SetPriorityGrouping+0x44>)
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005090:	4013      	ands	r3, r2
 8005092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800509c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80050a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050a6:	4a04      	ldr	r2, [pc, #16]	; (80050b8 <__NVIC_SetPriorityGrouping+0x44>)
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	60d3      	str	r3, [r2, #12]
}
 80050ac:	bf00      	nop
 80050ae:	3714      	adds	r7, #20
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr
 80050b8:	e000ed00 	.word	0xe000ed00

080050bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050bc:	b480      	push	{r7}
 80050be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050c0:	4b04      	ldr	r3, [pc, #16]	; (80050d4 <__NVIC_GetPriorityGrouping+0x18>)
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	0a1b      	lsrs	r3, r3, #8
 80050c6:	f003 0307 	and.w	r3, r3, #7
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr
 80050d4:	e000ed00 	.word	0xe000ed00

080050d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	4603      	mov	r3, r0
 80050e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	db0b      	blt.n	8005102 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050ea:	79fb      	ldrb	r3, [r7, #7]
 80050ec:	f003 021f 	and.w	r2, r3, #31
 80050f0:	4907      	ldr	r1, [pc, #28]	; (8005110 <__NVIC_EnableIRQ+0x38>)
 80050f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050f6:	095b      	lsrs	r3, r3, #5
 80050f8:	2001      	movs	r0, #1
 80050fa:	fa00 f202 	lsl.w	r2, r0, r2
 80050fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005102:	bf00      	nop
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	e000e100 	.word	0xe000e100

08005114 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	4603      	mov	r3, r0
 800511c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800511e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005122:	2b00      	cmp	r3, #0
 8005124:	db12      	blt.n	800514c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005126:	79fb      	ldrb	r3, [r7, #7]
 8005128:	f003 021f 	and.w	r2, r3, #31
 800512c:	490a      	ldr	r1, [pc, #40]	; (8005158 <__NVIC_DisableIRQ+0x44>)
 800512e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005132:	095b      	lsrs	r3, r3, #5
 8005134:	2001      	movs	r0, #1
 8005136:	fa00 f202 	lsl.w	r2, r0, r2
 800513a:	3320      	adds	r3, #32
 800513c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005140:	f3bf 8f4f 	dsb	sy
}
 8005144:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005146:	f3bf 8f6f 	isb	sy
}
 800514a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	e000e100 	.word	0xe000e100

0800515c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	4603      	mov	r3, r0
 8005164:	6039      	str	r1, [r7, #0]
 8005166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800516c:	2b00      	cmp	r3, #0
 800516e:	db0a      	blt.n	8005186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	b2da      	uxtb	r2, r3
 8005174:	490c      	ldr	r1, [pc, #48]	; (80051a8 <__NVIC_SetPriority+0x4c>)
 8005176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800517a:	0112      	lsls	r2, r2, #4
 800517c:	b2d2      	uxtb	r2, r2
 800517e:	440b      	add	r3, r1
 8005180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005184:	e00a      	b.n	800519c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	b2da      	uxtb	r2, r3
 800518a:	4908      	ldr	r1, [pc, #32]	; (80051ac <__NVIC_SetPriority+0x50>)
 800518c:	79fb      	ldrb	r3, [r7, #7]
 800518e:	f003 030f 	and.w	r3, r3, #15
 8005192:	3b04      	subs	r3, #4
 8005194:	0112      	lsls	r2, r2, #4
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	440b      	add	r3, r1
 800519a:	761a      	strb	r2, [r3, #24]
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr
 80051a8:	e000e100 	.word	0xe000e100
 80051ac:	e000ed00 	.word	0xe000ed00

080051b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b089      	sub	sp, #36	; 0x24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f003 0307 	and.w	r3, r3, #7
 80051c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	f1c3 0307 	rsb	r3, r3, #7
 80051ca:	2b04      	cmp	r3, #4
 80051cc:	bf28      	it	cs
 80051ce:	2304      	movcs	r3, #4
 80051d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	3304      	adds	r3, #4
 80051d6:	2b06      	cmp	r3, #6
 80051d8:	d902      	bls.n	80051e0 <NVIC_EncodePriority+0x30>
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	3b03      	subs	r3, #3
 80051de:	e000      	b.n	80051e2 <NVIC_EncodePriority+0x32>
 80051e0:	2300      	movs	r3, #0
 80051e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051e4:	f04f 32ff 	mov.w	r2, #4294967295
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	fa02 f303 	lsl.w	r3, r2, r3
 80051ee:	43da      	mvns	r2, r3
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	401a      	ands	r2, r3
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051f8:	f04f 31ff 	mov.w	r1, #4294967295
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005202:	43d9      	mvns	r1, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005208:	4313      	orrs	r3, r2
         );
}
 800520a:	4618      	mov	r0, r3
 800520c:	3724      	adds	r7, #36	; 0x24
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b082      	sub	sp, #8
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7ff ff28 	bl	8005074 <__NVIC_SetPriorityGrouping>
}
 8005224:	bf00      	nop
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
 8005232:	4603      	mov	r3, r0
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
 8005238:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800523a:	2300      	movs	r3, #0
 800523c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800523e:	f7ff ff3d 	bl	80050bc <__NVIC_GetPriorityGrouping>
 8005242:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	68b9      	ldr	r1, [r7, #8]
 8005248:	6978      	ldr	r0, [r7, #20]
 800524a:	f7ff ffb1 	bl	80051b0 <NVIC_EncodePriority>
 800524e:	4602      	mov	r2, r0
 8005250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005254:	4611      	mov	r1, r2
 8005256:	4618      	mov	r0, r3
 8005258:	f7ff ff80 	bl	800515c <__NVIC_SetPriority>
}
 800525c:	bf00      	nop
 800525e:	3718      	adds	r7, #24
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	4603      	mov	r3, r0
 800526c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800526e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005272:	4618      	mov	r0, r3
 8005274:	f7ff ff30 	bl	80050d8 <__NVIC_EnableIRQ>
}
 8005278:	bf00      	nop
 800527a:	3708      	adds	r7, #8
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	4603      	mov	r3, r0
 8005288:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800528a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800528e:	4618      	mov	r0, r3
 8005290:	f7ff ff40 	bl	8005114 <__NVIC_DisableIRQ>
}
 8005294:	bf00      	nop
 8005296:	3708      	adds	r7, #8
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800529c:	b480      	push	{r7}
 800529e:	b089      	sub	sp, #36	; 0x24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80052a6:	2300      	movs	r3, #0
 80052a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80052aa:	2300      	movs	r3, #0
 80052ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80052ae:	2300      	movs	r3, #0
 80052b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052b2:	2300      	movs	r3, #0
 80052b4:	61fb      	str	r3, [r7, #28]
 80052b6:	e177      	b.n	80055a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80052b8:	2201      	movs	r2, #1
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	fa02 f303 	lsl.w	r3, r2, r3
 80052c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	4013      	ands	r3, r2
 80052ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	f040 8166 	bne.w	80055a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d005      	beq.n	80052ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d130      	bne.n	8005350 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	005b      	lsls	r3, r3, #1
 80052f8:	2203      	movs	r2, #3
 80052fa:	fa02 f303 	lsl.w	r3, r2, r3
 80052fe:	43db      	mvns	r3, r3
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	4013      	ands	r3, r2
 8005304:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	68da      	ldr	r2, [r3, #12]
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	fa02 f303 	lsl.w	r3, r2, r3
 8005312:	69ba      	ldr	r2, [r7, #24]
 8005314:	4313      	orrs	r3, r2
 8005316:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	69ba      	ldr	r2, [r7, #24]
 800531c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005324:	2201      	movs	r2, #1
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	fa02 f303 	lsl.w	r3, r2, r3
 800532c:	43db      	mvns	r3, r3
 800532e:	69ba      	ldr	r2, [r7, #24]
 8005330:	4013      	ands	r3, r2
 8005332:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	091b      	lsrs	r3, r3, #4
 800533a:	f003 0201 	and.w	r2, r3, #1
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	fa02 f303 	lsl.w	r3, r2, r3
 8005344:	69ba      	ldr	r2, [r7, #24]
 8005346:	4313      	orrs	r3, r2
 8005348:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f003 0303 	and.w	r3, r3, #3
 8005358:	2b03      	cmp	r3, #3
 800535a:	d017      	beq.n	800538c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	005b      	lsls	r3, r3, #1
 8005366:	2203      	movs	r2, #3
 8005368:	fa02 f303 	lsl.w	r3, r2, r3
 800536c:	43db      	mvns	r3, r3
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	4013      	ands	r3, r2
 8005372:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	689a      	ldr	r2, [r3, #8]
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	fa02 f303 	lsl.w	r3, r2, r3
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	4313      	orrs	r3, r2
 8005384:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f003 0303 	and.w	r3, r3, #3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d123      	bne.n	80053e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	08da      	lsrs	r2, r3, #3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	3208      	adds	r2, #8
 80053a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	f003 0307 	and.w	r3, r3, #7
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	220f      	movs	r2, #15
 80053b0:	fa02 f303 	lsl.w	r3, r2, r3
 80053b4:	43db      	mvns	r3, r3
 80053b6:	69ba      	ldr	r2, [r7, #24]
 80053b8:	4013      	ands	r3, r2
 80053ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	691a      	ldr	r2, [r3, #16]
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	f003 0307 	and.w	r3, r3, #7
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	fa02 f303 	lsl.w	r3, r2, r3
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	08da      	lsrs	r2, r3, #3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	3208      	adds	r2, #8
 80053da:	69b9      	ldr	r1, [r7, #24]
 80053dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	005b      	lsls	r3, r3, #1
 80053ea:	2203      	movs	r2, #3
 80053ec:	fa02 f303 	lsl.w	r3, r2, r3
 80053f0:	43db      	mvns	r3, r3
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	4013      	ands	r3, r2
 80053f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f003 0203 	and.w	r2, r3, #3
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	fa02 f303 	lsl.w	r3, r2, r3
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	4313      	orrs	r3, r2
 800540c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 80c0 	beq.w	80055a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005422:	2300      	movs	r3, #0
 8005424:	60fb      	str	r3, [r7, #12]
 8005426:	4b66      	ldr	r3, [pc, #408]	; (80055c0 <HAL_GPIO_Init+0x324>)
 8005428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800542a:	4a65      	ldr	r2, [pc, #404]	; (80055c0 <HAL_GPIO_Init+0x324>)
 800542c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005430:	6453      	str	r3, [r2, #68]	; 0x44
 8005432:	4b63      	ldr	r3, [pc, #396]	; (80055c0 <HAL_GPIO_Init+0x324>)
 8005434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800543a:	60fb      	str	r3, [r7, #12]
 800543c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800543e:	4a61      	ldr	r2, [pc, #388]	; (80055c4 <HAL_GPIO_Init+0x328>)
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	089b      	lsrs	r3, r3, #2
 8005444:	3302      	adds	r3, #2
 8005446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800544a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	f003 0303 	and.w	r3, r3, #3
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	220f      	movs	r2, #15
 8005456:	fa02 f303 	lsl.w	r3, r2, r3
 800545a:	43db      	mvns	r3, r3
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	4013      	ands	r3, r2
 8005460:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a58      	ldr	r2, [pc, #352]	; (80055c8 <HAL_GPIO_Init+0x32c>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d037      	beq.n	80054da <HAL_GPIO_Init+0x23e>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a57      	ldr	r2, [pc, #348]	; (80055cc <HAL_GPIO_Init+0x330>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d031      	beq.n	80054d6 <HAL_GPIO_Init+0x23a>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a56      	ldr	r2, [pc, #344]	; (80055d0 <HAL_GPIO_Init+0x334>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d02b      	beq.n	80054d2 <HAL_GPIO_Init+0x236>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a55      	ldr	r2, [pc, #340]	; (80055d4 <HAL_GPIO_Init+0x338>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d025      	beq.n	80054ce <HAL_GPIO_Init+0x232>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a54      	ldr	r2, [pc, #336]	; (80055d8 <HAL_GPIO_Init+0x33c>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d01f      	beq.n	80054ca <HAL_GPIO_Init+0x22e>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a53      	ldr	r2, [pc, #332]	; (80055dc <HAL_GPIO_Init+0x340>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d019      	beq.n	80054c6 <HAL_GPIO_Init+0x22a>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a52      	ldr	r2, [pc, #328]	; (80055e0 <HAL_GPIO_Init+0x344>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d013      	beq.n	80054c2 <HAL_GPIO_Init+0x226>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a51      	ldr	r2, [pc, #324]	; (80055e4 <HAL_GPIO_Init+0x348>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d00d      	beq.n	80054be <HAL_GPIO_Init+0x222>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a50      	ldr	r2, [pc, #320]	; (80055e8 <HAL_GPIO_Init+0x34c>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d007      	beq.n	80054ba <HAL_GPIO_Init+0x21e>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a4f      	ldr	r2, [pc, #316]	; (80055ec <HAL_GPIO_Init+0x350>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d101      	bne.n	80054b6 <HAL_GPIO_Init+0x21a>
 80054b2:	2309      	movs	r3, #9
 80054b4:	e012      	b.n	80054dc <HAL_GPIO_Init+0x240>
 80054b6:	230a      	movs	r3, #10
 80054b8:	e010      	b.n	80054dc <HAL_GPIO_Init+0x240>
 80054ba:	2308      	movs	r3, #8
 80054bc:	e00e      	b.n	80054dc <HAL_GPIO_Init+0x240>
 80054be:	2307      	movs	r3, #7
 80054c0:	e00c      	b.n	80054dc <HAL_GPIO_Init+0x240>
 80054c2:	2306      	movs	r3, #6
 80054c4:	e00a      	b.n	80054dc <HAL_GPIO_Init+0x240>
 80054c6:	2305      	movs	r3, #5
 80054c8:	e008      	b.n	80054dc <HAL_GPIO_Init+0x240>
 80054ca:	2304      	movs	r3, #4
 80054cc:	e006      	b.n	80054dc <HAL_GPIO_Init+0x240>
 80054ce:	2303      	movs	r3, #3
 80054d0:	e004      	b.n	80054dc <HAL_GPIO_Init+0x240>
 80054d2:	2302      	movs	r3, #2
 80054d4:	e002      	b.n	80054dc <HAL_GPIO_Init+0x240>
 80054d6:	2301      	movs	r3, #1
 80054d8:	e000      	b.n	80054dc <HAL_GPIO_Init+0x240>
 80054da:	2300      	movs	r3, #0
 80054dc:	69fa      	ldr	r2, [r7, #28]
 80054de:	f002 0203 	and.w	r2, r2, #3
 80054e2:	0092      	lsls	r2, r2, #2
 80054e4:	4093      	lsls	r3, r2
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054ec:	4935      	ldr	r1, [pc, #212]	; (80055c4 <HAL_GPIO_Init+0x328>)
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	089b      	lsrs	r3, r3, #2
 80054f2:	3302      	adds	r3, #2
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80054fa:	4b3d      	ldr	r3, [pc, #244]	; (80055f0 <HAL_GPIO_Init+0x354>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	43db      	mvns	r3, r3
 8005504:	69ba      	ldr	r2, [r7, #24]
 8005506:	4013      	ands	r3, r2
 8005508:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	4313      	orrs	r3, r2
 800551c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800551e:	4a34      	ldr	r2, [pc, #208]	; (80055f0 <HAL_GPIO_Init+0x354>)
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005524:	4b32      	ldr	r3, [pc, #200]	; (80055f0 <HAL_GPIO_Init+0x354>)
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	43db      	mvns	r3, r3
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	4013      	ands	r3, r2
 8005532:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d003      	beq.n	8005548 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	4313      	orrs	r3, r2
 8005546:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005548:	4a29      	ldr	r2, [pc, #164]	; (80055f0 <HAL_GPIO_Init+0x354>)
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800554e:	4b28      	ldr	r3, [pc, #160]	; (80055f0 <HAL_GPIO_Init+0x354>)
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	43db      	mvns	r3, r3
 8005558:	69ba      	ldr	r2, [r7, #24]
 800555a:	4013      	ands	r3, r2
 800555c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800556a:	69ba      	ldr	r2, [r7, #24]
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	4313      	orrs	r3, r2
 8005570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005572:	4a1f      	ldr	r2, [pc, #124]	; (80055f0 <HAL_GPIO_Init+0x354>)
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005578:	4b1d      	ldr	r3, [pc, #116]	; (80055f0 <HAL_GPIO_Init+0x354>)
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	43db      	mvns	r3, r3
 8005582:	69ba      	ldr	r2, [r7, #24]
 8005584:	4013      	ands	r3, r2
 8005586:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d003      	beq.n	800559c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	4313      	orrs	r3, r2
 800559a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800559c:	4a14      	ldr	r2, [pc, #80]	; (80055f0 <HAL_GPIO_Init+0x354>)
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	3301      	adds	r3, #1
 80055a6:	61fb      	str	r3, [r7, #28]
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	2b0f      	cmp	r3, #15
 80055ac:	f67f ae84 	bls.w	80052b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80055b0:	bf00      	nop
 80055b2:	bf00      	nop
 80055b4:	3724      	adds	r7, #36	; 0x24
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	40023800 	.word	0x40023800
 80055c4:	40013800 	.word	0x40013800
 80055c8:	40020000 	.word	0x40020000
 80055cc:	40020400 	.word	0x40020400
 80055d0:	40020800 	.word	0x40020800
 80055d4:	40020c00 	.word	0x40020c00
 80055d8:	40021000 	.word	0x40021000
 80055dc:	40021400 	.word	0x40021400
 80055e0:	40021800 	.word	0x40021800
 80055e4:	40021c00 	.word	0x40021c00
 80055e8:	40022000 	.word	0x40022000
 80055ec:	40022400 	.word	0x40022400
 80055f0:	40013c00 	.word	0x40013c00

080055f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	460b      	mov	r3, r1
 80055fe:	807b      	strh	r3, [r7, #2]
 8005600:	4613      	mov	r3, r2
 8005602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005604:	787b      	ldrb	r3, [r7, #1]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800560a:	887a      	ldrh	r2, [r7, #2]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005610:	e003      	b.n	800561a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005612:	887b      	ldrh	r3, [r7, #2]
 8005614:	041a      	lsls	r2, r3, #16
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	619a      	str	r2, [r3, #24]
}
 800561a:	bf00      	nop
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
	...

08005628 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e12b      	b.n	8005892 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d106      	bne.n	8005654 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7fd f8dc 	bl	800280c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2224      	movs	r2, #36	; 0x24
 8005658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f022 0201 	bic.w	r2, r2, #1
 800566a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800567a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800568a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800568c:	f002 ff4c 	bl	8008528 <HAL_RCC_GetPCLK1Freq>
 8005690:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	4a81      	ldr	r2, [pc, #516]	; (800589c <HAL_I2C_Init+0x274>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d807      	bhi.n	80056ac <HAL_I2C_Init+0x84>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	4a80      	ldr	r2, [pc, #512]	; (80058a0 <HAL_I2C_Init+0x278>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	bf94      	ite	ls
 80056a4:	2301      	movls	r3, #1
 80056a6:	2300      	movhi	r3, #0
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	e006      	b.n	80056ba <HAL_I2C_Init+0x92>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4a7d      	ldr	r2, [pc, #500]	; (80058a4 <HAL_I2C_Init+0x27c>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	bf94      	ite	ls
 80056b4:	2301      	movls	r3, #1
 80056b6:	2300      	movhi	r3, #0
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e0e7      	b.n	8005892 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	4a78      	ldr	r2, [pc, #480]	; (80058a8 <HAL_I2C_Init+0x280>)
 80056c6:	fba2 2303 	umull	r2, r3, r2, r3
 80056ca:	0c9b      	lsrs	r3, r3, #18
 80056cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	430a      	orrs	r2, r1
 80056e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	4a6a      	ldr	r2, [pc, #424]	; (800589c <HAL_I2C_Init+0x274>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d802      	bhi.n	80056fc <HAL_I2C_Init+0xd4>
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	3301      	adds	r3, #1
 80056fa:	e009      	b.n	8005710 <HAL_I2C_Init+0xe8>
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005702:	fb02 f303 	mul.w	r3, r2, r3
 8005706:	4a69      	ldr	r2, [pc, #420]	; (80058ac <HAL_I2C_Init+0x284>)
 8005708:	fba2 2303 	umull	r2, r3, r2, r3
 800570c:	099b      	lsrs	r3, r3, #6
 800570e:	3301      	adds	r3, #1
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	6812      	ldr	r2, [r2, #0]
 8005714:	430b      	orrs	r3, r1
 8005716:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	69db      	ldr	r3, [r3, #28]
 800571e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005722:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	495c      	ldr	r1, [pc, #368]	; (800589c <HAL_I2C_Init+0x274>)
 800572c:	428b      	cmp	r3, r1
 800572e:	d819      	bhi.n	8005764 <HAL_I2C_Init+0x13c>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	1e59      	subs	r1, r3, #1
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	fbb1 f3f3 	udiv	r3, r1, r3
 800573e:	1c59      	adds	r1, r3, #1
 8005740:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005744:	400b      	ands	r3, r1
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00a      	beq.n	8005760 <HAL_I2C_Init+0x138>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	1e59      	subs	r1, r3, #1
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	005b      	lsls	r3, r3, #1
 8005754:	fbb1 f3f3 	udiv	r3, r1, r3
 8005758:	3301      	adds	r3, #1
 800575a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800575e:	e051      	b.n	8005804 <HAL_I2C_Init+0x1dc>
 8005760:	2304      	movs	r3, #4
 8005762:	e04f      	b.n	8005804 <HAL_I2C_Init+0x1dc>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d111      	bne.n	8005790 <HAL_I2C_Init+0x168>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	1e58      	subs	r0, r3, #1
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6859      	ldr	r1, [r3, #4]
 8005774:	460b      	mov	r3, r1
 8005776:	005b      	lsls	r3, r3, #1
 8005778:	440b      	add	r3, r1
 800577a:	fbb0 f3f3 	udiv	r3, r0, r3
 800577e:	3301      	adds	r3, #1
 8005780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005784:	2b00      	cmp	r3, #0
 8005786:	bf0c      	ite	eq
 8005788:	2301      	moveq	r3, #1
 800578a:	2300      	movne	r3, #0
 800578c:	b2db      	uxtb	r3, r3
 800578e:	e012      	b.n	80057b6 <HAL_I2C_Init+0x18e>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	1e58      	subs	r0, r3, #1
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6859      	ldr	r1, [r3, #4]
 8005798:	460b      	mov	r3, r1
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	440b      	add	r3, r1
 800579e:	0099      	lsls	r1, r3, #2
 80057a0:	440b      	add	r3, r1
 80057a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80057a6:	3301      	adds	r3, #1
 80057a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	bf0c      	ite	eq
 80057b0:	2301      	moveq	r3, #1
 80057b2:	2300      	movne	r3, #0
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <HAL_I2C_Init+0x196>
 80057ba:	2301      	movs	r3, #1
 80057bc:	e022      	b.n	8005804 <HAL_I2C_Init+0x1dc>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10e      	bne.n	80057e4 <HAL_I2C_Init+0x1bc>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	1e58      	subs	r0, r3, #1
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6859      	ldr	r1, [r3, #4]
 80057ce:	460b      	mov	r3, r1
 80057d0:	005b      	lsls	r3, r3, #1
 80057d2:	440b      	add	r3, r1
 80057d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80057d8:	3301      	adds	r3, #1
 80057da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057e2:	e00f      	b.n	8005804 <HAL_I2C_Init+0x1dc>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	1e58      	subs	r0, r3, #1
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6859      	ldr	r1, [r3, #4]
 80057ec:	460b      	mov	r3, r1
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	440b      	add	r3, r1
 80057f2:	0099      	lsls	r1, r3, #2
 80057f4:	440b      	add	r3, r1
 80057f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80057fa:	3301      	adds	r3, #1
 80057fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005800:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005804:	6879      	ldr	r1, [r7, #4]
 8005806:	6809      	ldr	r1, [r1, #0]
 8005808:	4313      	orrs	r3, r2
 800580a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	69da      	ldr	r2, [r3, #28]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	431a      	orrs	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	430a      	orrs	r2, r1
 8005826:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005832:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	6911      	ldr	r1, [r2, #16]
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	68d2      	ldr	r2, [r2, #12]
 800583e:	4311      	orrs	r1, r2
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	6812      	ldr	r2, [r2, #0]
 8005844:	430b      	orrs	r3, r1
 8005846:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	695a      	ldr	r2, [r3, #20]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	431a      	orrs	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	430a      	orrs	r2, r1
 8005862:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f042 0201 	orr.w	r2, r2, #1
 8005872:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2220      	movs	r2, #32
 800587e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	000186a0 	.word	0x000186a0
 80058a0:	001e847f 	.word	0x001e847f
 80058a4:	003d08ff 	.word	0x003d08ff
 80058a8:	431bde83 	.word	0x431bde83
 80058ac:	10624dd3 	.word	0x10624dd3

080058b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b088      	sub	sp, #32
 80058b4:	af02      	add	r7, sp, #8
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	4608      	mov	r0, r1
 80058ba:	4611      	mov	r1, r2
 80058bc:	461a      	mov	r2, r3
 80058be:	4603      	mov	r3, r0
 80058c0:	817b      	strh	r3, [r7, #10]
 80058c2:	460b      	mov	r3, r1
 80058c4:	813b      	strh	r3, [r7, #8]
 80058c6:	4613      	mov	r3, r2
 80058c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80058ca:	f7ff f931 	bl	8004b30 <HAL_GetTick>
 80058ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	2b20      	cmp	r3, #32
 80058da:	f040 80d9 	bne.w	8005a90 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	2319      	movs	r3, #25
 80058e4:	2201      	movs	r2, #1
 80058e6:	496d      	ldr	r1, [pc, #436]	; (8005a9c <HAL_I2C_Mem_Write+0x1ec>)
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f000 fde3 	bl	80064b4 <I2C_WaitOnFlagUntilTimeout>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80058f4:	2302      	movs	r3, #2
 80058f6:	e0cc      	b.n	8005a92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d101      	bne.n	8005906 <HAL_I2C_Mem_Write+0x56>
 8005902:	2302      	movs	r3, #2
 8005904:	e0c5      	b.n	8005a92 <HAL_I2C_Mem_Write+0x1e2>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	2b01      	cmp	r3, #1
 800591a:	d007      	beq.n	800592c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f042 0201 	orr.w	r2, r2, #1
 800592a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800593a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2221      	movs	r2, #33	; 0x21
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2240      	movs	r2, #64	; 0x40
 8005948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6a3a      	ldr	r2, [r7, #32]
 8005956:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800595c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005962:	b29a      	uxth	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	4a4d      	ldr	r2, [pc, #308]	; (8005aa0 <HAL_I2C_Mem_Write+0x1f0>)
 800596c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800596e:	88f8      	ldrh	r0, [r7, #6]
 8005970:	893a      	ldrh	r2, [r7, #8]
 8005972:	8979      	ldrh	r1, [r7, #10]
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	9301      	str	r3, [sp, #4]
 8005978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	4603      	mov	r3, r0
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f000 fc1a 	bl	80061b8 <I2C_RequestMemoryWrite>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d052      	beq.n	8005a30 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e081      	b.n	8005a92 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	f000 fe64 	bl	8006660 <I2C_WaitOnTXEFlagUntilTimeout>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00d      	beq.n	80059ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a2:	2b04      	cmp	r3, #4
 80059a4:	d107      	bne.n	80059b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e06b      	b.n	8005a92 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059be:	781a      	ldrb	r2, [r3, #0]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ca:	1c5a      	adds	r2, r3, #1
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059d4:	3b01      	subs	r3, #1
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	3b01      	subs	r3, #1
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	695b      	ldr	r3, [r3, #20]
 80059f0:	f003 0304 	and.w	r3, r3, #4
 80059f4:	2b04      	cmp	r3, #4
 80059f6:	d11b      	bne.n	8005a30 <HAL_I2C_Mem_Write+0x180>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d017      	beq.n	8005a30 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a04:	781a      	ldrb	r2, [r3, #0]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a10:	1c5a      	adds	r2, r3, #1
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d1aa      	bne.n	800598e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f000 fe50 	bl	80066e2 <I2C_WaitOnBTFFlagUntilTimeout>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00d      	beq.n	8005a64 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4c:	2b04      	cmp	r3, #4
 8005a4e:	d107      	bne.n	8005a60 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a5e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e016      	b.n	8005a92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	e000      	b.n	8005a92 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005a90:	2302      	movs	r3, #2
  }
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3718      	adds	r7, #24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	00100002 	.word	0x00100002
 8005aa0:	ffff0000 	.word	0xffff0000

08005aa4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b08c      	sub	sp, #48	; 0x30
 8005aa8:	af02      	add	r7, sp, #8
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	4608      	mov	r0, r1
 8005aae:	4611      	mov	r1, r2
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	817b      	strh	r3, [r7, #10]
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	813b      	strh	r3, [r7, #8]
 8005aba:	4613      	mov	r3, r2
 8005abc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005abe:	f7ff f837 	bl	8004b30 <HAL_GetTick>
 8005ac2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b20      	cmp	r3, #32
 8005ace:	f040 8208 	bne.w	8005ee2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad4:	9300      	str	r3, [sp, #0]
 8005ad6:	2319      	movs	r3, #25
 8005ad8:	2201      	movs	r2, #1
 8005ada:	497b      	ldr	r1, [pc, #492]	; (8005cc8 <HAL_I2C_Mem_Read+0x224>)
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f000 fce9 	bl	80064b4 <I2C_WaitOnFlagUntilTimeout>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005ae8:	2302      	movs	r3, #2
 8005aea:	e1fb      	b.n	8005ee4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d101      	bne.n	8005afa <HAL_I2C_Mem_Read+0x56>
 8005af6:	2302      	movs	r3, #2
 8005af8:	e1f4      	b.n	8005ee4 <HAL_I2C_Mem_Read+0x440>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0301 	and.w	r3, r3, #1
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d007      	beq.n	8005b20 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f042 0201 	orr.w	r2, r2, #1
 8005b1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2222      	movs	r2, #34	; 0x22
 8005b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2240      	movs	r2, #64	; 0x40
 8005b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005b50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	4a5b      	ldr	r2, [pc, #364]	; (8005ccc <HAL_I2C_Mem_Read+0x228>)
 8005b60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b62:	88f8      	ldrh	r0, [r7, #6]
 8005b64:	893a      	ldrh	r2, [r7, #8]
 8005b66:	8979      	ldrh	r1, [r7, #10]
 8005b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6a:	9301      	str	r3, [sp, #4]
 8005b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6e:	9300      	str	r3, [sp, #0]
 8005b70:	4603      	mov	r3, r0
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f000 fbb6 	bl	80062e4 <I2C_RequestMemoryRead>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d001      	beq.n	8005b82 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e1b0      	b.n	8005ee4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d113      	bne.n	8005bb2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	623b      	str	r3, [r7, #32]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	695b      	ldr	r3, [r3, #20]
 8005b94:	623b      	str	r3, [r7, #32]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	623b      	str	r3, [r7, #32]
 8005b9e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	e184      	b.n	8005ebc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d11b      	bne.n	8005bf2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bca:	2300      	movs	r3, #0
 8005bcc:	61fb      	str	r3, [r7, #28]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	61fb      	str	r3, [r7, #28]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	61fb      	str	r3, [r7, #28]
 8005bde:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bee:	601a      	str	r2, [r3, #0]
 8005bf0:	e164      	b.n	8005ebc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d11b      	bne.n	8005c32 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c08:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	61bb      	str	r3, [r7, #24]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	695b      	ldr	r3, [r3, #20]
 8005c24:	61bb      	str	r3, [r7, #24]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	61bb      	str	r3, [r7, #24]
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	e144      	b.n	8005ebc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c32:	2300      	movs	r3, #0
 8005c34:	617b      	str	r3, [r7, #20]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	695b      	ldr	r3, [r3, #20]
 8005c3c:	617b      	str	r3, [r7, #20]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	617b      	str	r3, [r7, #20]
 8005c46:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005c48:	e138      	b.n	8005ebc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c4e:	2b03      	cmp	r3, #3
 8005c50:	f200 80f1 	bhi.w	8005e36 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d123      	bne.n	8005ca4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f000 fd7f 	bl	8006764 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d001      	beq.n	8005c70 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e139      	b.n	8005ee4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	691a      	ldr	r2, [r3, #16]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7a:	b2d2      	uxtb	r2, r2
 8005c7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c82:	1c5a      	adds	r2, r3, #1
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ca2:	e10b      	b.n	8005ebc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d14e      	bne.n	8005d4a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cae:	9300      	str	r3, [sp, #0]
 8005cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	4906      	ldr	r1, [pc, #24]	; (8005cd0 <HAL_I2C_Mem_Read+0x22c>)
 8005cb6:	68f8      	ldr	r0, [r7, #12]
 8005cb8:	f000 fbfc 	bl	80064b4 <I2C_WaitOnFlagUntilTimeout>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d008      	beq.n	8005cd4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e10e      	b.n	8005ee4 <HAL_I2C_Mem_Read+0x440>
 8005cc6:	bf00      	nop
 8005cc8:	00100002 	.word	0x00100002
 8005ccc:	ffff0000 	.word	0xffff0000
 8005cd0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ce2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	691a      	ldr	r2, [r3, #16]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	b2d2      	uxtb	r2, r2
 8005cf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf6:	1c5a      	adds	r2, r3, #1
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d00:	3b01      	subs	r3, #1
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	691a      	ldr	r2, [r3, #16]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d20:	b2d2      	uxtb	r2, r2
 8005d22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	1c5a      	adds	r2, r3, #1
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d32:	3b01      	subs	r3, #1
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	3b01      	subs	r3, #1
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d48:	e0b8      	b.n	8005ebc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d50:	2200      	movs	r2, #0
 8005d52:	4966      	ldr	r1, [pc, #408]	; (8005eec <HAL_I2C_Mem_Read+0x448>)
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f000 fbad 	bl	80064b4 <I2C_WaitOnFlagUntilTimeout>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d001      	beq.n	8005d64 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e0bf      	b.n	8005ee4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	691a      	ldr	r2, [r3, #16]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7e:	b2d2      	uxtb	r2, r2
 8005d80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d86:	1c5a      	adds	r2, r3, #1
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d90:	3b01      	subs	r3, #1
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dac:	2200      	movs	r2, #0
 8005dae:	494f      	ldr	r1, [pc, #316]	; (8005eec <HAL_I2C_Mem_Read+0x448>)
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f000 fb7f 	bl	80064b4 <I2C_WaitOnFlagUntilTimeout>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d001      	beq.n	8005dc0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e091      	b.n	8005ee4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	691a      	ldr	r2, [r3, #16]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dda:	b2d2      	uxtb	r2, r2
 8005ddc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de2:	1c5a      	adds	r2, r3, #1
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dec:	3b01      	subs	r3, #1
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	691a      	ldr	r2, [r3, #16]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0c:	b2d2      	uxtb	r2, r2
 8005e0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	1c5a      	adds	r2, r3, #1
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e34:	e042      	b.n	8005ebc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f000 fc92 	bl	8006764 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d001      	beq.n	8005e4a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e04c      	b.n	8005ee4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	691a      	ldr	r2, [r3, #16]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e54:	b2d2      	uxtb	r2, r2
 8005e56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5c:	1c5a      	adds	r2, r3, #1
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e66:	3b01      	subs	r3, #1
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	3b01      	subs	r3, #1
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	f003 0304 	and.w	r3, r3, #4
 8005e86:	2b04      	cmp	r3, #4
 8005e88:	d118      	bne.n	8005ebc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	691a      	ldr	r2, [r3, #16]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e94:	b2d2      	uxtb	r2, r2
 8005e96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9c:	1c5a      	adds	r2, r3, #1
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f47f aec2 	bne.w	8005c4a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	e000      	b.n	8005ee4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005ee2:	2302      	movs	r3, #2
  }
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3728      	adds	r7, #40	; 0x28
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	00010004 	.word	0x00010004

08005ef0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b08a      	sub	sp, #40	; 0x28
 8005ef4:	af02      	add	r7, sp, #8
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	607a      	str	r2, [r7, #4]
 8005efa:	603b      	str	r3, [r7, #0]
 8005efc:	460b      	mov	r3, r1
 8005efe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005f00:	f7fe fe16 	bl	8004b30 <HAL_GetTick>
 8005f04:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8005f06:	2301      	movs	r3, #1
 8005f08:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b20      	cmp	r3, #32
 8005f14:	f040 8111 	bne.w	800613a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	9300      	str	r3, [sp, #0]
 8005f1c:	2319      	movs	r3, #25
 8005f1e:	2201      	movs	r2, #1
 8005f20:	4988      	ldr	r1, [pc, #544]	; (8006144 <HAL_I2C_IsDeviceReady+0x254>)
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f000 fac6 	bl	80064b4 <I2C_WaitOnFlagUntilTimeout>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d001      	beq.n	8005f32 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005f2e:	2302      	movs	r3, #2
 8005f30:	e104      	b.n	800613c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d101      	bne.n	8005f40 <HAL_I2C_IsDeviceReady+0x50>
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	e0fd      	b.n	800613c <HAL_I2C_IsDeviceReady+0x24c>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d007      	beq.n	8005f66 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f042 0201 	orr.w	r2, r2, #1
 8005f64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2224      	movs	r2, #36	; 0x24
 8005f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	4a70      	ldr	r2, [pc, #448]	; (8006148 <HAL_I2C_IsDeviceReady+0x258>)
 8005f88:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f98:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f000 fa84 	bl	80064b4 <I2C_WaitOnFlagUntilTimeout>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00d      	beq.n	8005fce <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fc0:	d103      	bne.n	8005fca <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fc8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e0b6      	b.n	800613c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005fce:	897b      	ldrh	r3, [r7, #10]
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005fdc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005fde:	f7fe fda7 	bl	8004b30 <HAL_GetTick>
 8005fe2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	f003 0302 	and.w	r3, r3, #2
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	bf0c      	ite	eq
 8005ff2:	2301      	moveq	r3, #1
 8005ff4:	2300      	movne	r3, #0
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006008:	bf0c      	ite	eq
 800600a:	2301      	moveq	r3, #1
 800600c:	2300      	movne	r3, #0
 800600e:	b2db      	uxtb	r3, r3
 8006010:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006012:	e025      	b.n	8006060 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006014:	f7fe fd8c 	bl	8004b30 <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	429a      	cmp	r2, r3
 8006022:	d302      	bcc.n	800602a <HAL_I2C_IsDeviceReady+0x13a>
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d103      	bne.n	8006032 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	22a0      	movs	r2, #160	; 0xa0
 800602e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	695b      	ldr	r3, [r3, #20]
 8006038:	f003 0302 	and.w	r3, r3, #2
 800603c:	2b02      	cmp	r3, #2
 800603e:	bf0c      	ite	eq
 8006040:	2301      	moveq	r3, #1
 8006042:	2300      	movne	r3, #0
 8006044:	b2db      	uxtb	r3, r3
 8006046:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006056:	bf0c      	ite	eq
 8006058:	2301      	moveq	r3, #1
 800605a:	2300      	movne	r3, #0
 800605c:	b2db      	uxtb	r3, r3
 800605e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006066:	b2db      	uxtb	r3, r3
 8006068:	2ba0      	cmp	r3, #160	; 0xa0
 800606a:	d005      	beq.n	8006078 <HAL_I2C_IsDeviceReady+0x188>
 800606c:	7dfb      	ldrb	r3, [r7, #23]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d102      	bne.n	8006078 <HAL_I2C_IsDeviceReady+0x188>
 8006072:	7dbb      	ldrb	r3, [r7, #22]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d0cd      	beq.n	8006014 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2220      	movs	r2, #32
 800607c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b02      	cmp	r3, #2
 800608c:	d129      	bne.n	80060e2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800609c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800609e:	2300      	movs	r3, #0
 80060a0:	613b      	str	r3, [r7, #16]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	695b      	ldr	r3, [r3, #20]
 80060a8:	613b      	str	r3, [r7, #16]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	613b      	str	r3, [r7, #16]
 80060b2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	9300      	str	r3, [sp, #0]
 80060b8:	2319      	movs	r3, #25
 80060ba:	2201      	movs	r2, #1
 80060bc:	4921      	ldr	r1, [pc, #132]	; (8006144 <HAL_I2C_IsDeviceReady+0x254>)
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f000 f9f8 	bl	80064b4 <I2C_WaitOnFlagUntilTimeout>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d001      	beq.n	80060ce <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e036      	b.n	800613c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2220      	movs	r2, #32
 80060d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80060de:	2300      	movs	r3, #0
 80060e0:	e02c      	b.n	800613c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060f0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80060fa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	2319      	movs	r3, #25
 8006102:	2201      	movs	r2, #1
 8006104:	490f      	ldr	r1, [pc, #60]	; (8006144 <HAL_I2C_IsDeviceReady+0x254>)
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f000 f9d4 	bl	80064b4 <I2C_WaitOnFlagUntilTimeout>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d001      	beq.n	8006116 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e012      	b.n	800613c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	3301      	adds	r3, #1
 800611a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	429a      	cmp	r2, r3
 8006122:	f4ff af32 	bcc.w	8005f8a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2220      	movs	r2, #32
 800612a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e000      	b.n	800613c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800613a:	2302      	movs	r3, #2
  }
}
 800613c:	4618      	mov	r0, r3
 800613e:	3720      	adds	r7, #32
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	00100002 	.word	0x00100002
 8006148:	ffff0000 	.word	0xffff0000

0800614c <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b20      	cmp	r3, #32
 800615e:	d124      	bne.n	80061aa <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2228      	movs	r2, #40	; 0x28
 8006164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	2b01      	cmp	r3, #1
 8006174:	d007      	beq.n	8006186 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f042 0201 	orr.w	r2, r2, #1
 8006184:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006194:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80061a4:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80061a6:	2300      	movs	r3, #0
 80061a8:	e000      	b.n	80061ac <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80061aa:	2302      	movs	r3, #2
  }
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b088      	sub	sp, #32
 80061bc:	af02      	add	r7, sp, #8
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	4608      	mov	r0, r1
 80061c2:	4611      	mov	r1, r2
 80061c4:	461a      	mov	r2, r3
 80061c6:	4603      	mov	r3, r0
 80061c8:	817b      	strh	r3, [r7, #10]
 80061ca:	460b      	mov	r3, r1
 80061cc:	813b      	strh	r3, [r7, #8]
 80061ce:	4613      	mov	r3, r2
 80061d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f000 f960 	bl	80064b4 <I2C_WaitOnFlagUntilTimeout>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00d      	beq.n	8006216 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006208:	d103      	bne.n	8006212 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006210:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e05f      	b.n	80062d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006216:	897b      	ldrh	r3, [r7, #10]
 8006218:	b2db      	uxtb	r3, r3
 800621a:	461a      	mov	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006224:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006228:	6a3a      	ldr	r2, [r7, #32]
 800622a:	492d      	ldr	r1, [pc, #180]	; (80062e0 <I2C_RequestMemoryWrite+0x128>)
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f000 f998 	bl	8006562 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d001      	beq.n	800623c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e04c      	b.n	80062d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800623c:	2300      	movs	r3, #0
 800623e:	617b      	str	r3, [r7, #20]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	617b      	str	r3, [r7, #20]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	617b      	str	r3, [r7, #20]
 8006250:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006254:	6a39      	ldr	r1, [r7, #32]
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f000 fa02 	bl	8006660 <I2C_WaitOnTXEFlagUntilTimeout>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00d      	beq.n	800627e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006266:	2b04      	cmp	r3, #4
 8006268:	d107      	bne.n	800627a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006278:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e02b      	b.n	80062d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800627e:	88fb      	ldrh	r3, [r7, #6]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d105      	bne.n	8006290 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006284:	893b      	ldrh	r3, [r7, #8]
 8006286:	b2da      	uxtb	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	611a      	str	r2, [r3, #16]
 800628e:	e021      	b.n	80062d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006290:	893b      	ldrh	r3, [r7, #8]
 8006292:	0a1b      	lsrs	r3, r3, #8
 8006294:	b29b      	uxth	r3, r3
 8006296:	b2da      	uxtb	r2, r3
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800629e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062a0:	6a39      	ldr	r1, [r7, #32]
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	f000 f9dc 	bl	8006660 <I2C_WaitOnTXEFlagUntilTimeout>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00d      	beq.n	80062ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b2:	2b04      	cmp	r3, #4
 80062b4:	d107      	bne.n	80062c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e005      	b.n	80062d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062ca:	893b      	ldrh	r3, [r7, #8]
 80062cc:	b2da      	uxtb	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3718      	adds	r7, #24
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	00010002 	.word	0x00010002

080062e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b088      	sub	sp, #32
 80062e8:	af02      	add	r7, sp, #8
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	4608      	mov	r0, r1
 80062ee:	4611      	mov	r1, r2
 80062f0:	461a      	mov	r2, r3
 80062f2:	4603      	mov	r3, r0
 80062f4:	817b      	strh	r3, [r7, #10]
 80062f6:	460b      	mov	r3, r1
 80062f8:	813b      	strh	r3, [r7, #8]
 80062fa:	4613      	mov	r3, r2
 80062fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800630c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800631c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006320:	9300      	str	r3, [sp, #0]
 8006322:	6a3b      	ldr	r3, [r7, #32]
 8006324:	2200      	movs	r2, #0
 8006326:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f000 f8c2 	bl	80064b4 <I2C_WaitOnFlagUntilTimeout>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00d      	beq.n	8006352 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006340:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006344:	d103      	bne.n	800634e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f44f 7200 	mov.w	r2, #512	; 0x200
 800634c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e0aa      	b.n	80064a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006352:	897b      	ldrh	r3, [r7, #10]
 8006354:	b2db      	uxtb	r3, r3
 8006356:	461a      	mov	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006360:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006364:	6a3a      	ldr	r2, [r7, #32]
 8006366:	4952      	ldr	r1, [pc, #328]	; (80064b0 <I2C_RequestMemoryRead+0x1cc>)
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f000 f8fa 	bl	8006562 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e097      	b.n	80064a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006378:	2300      	movs	r3, #0
 800637a:	617b      	str	r3, [r7, #20]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	617b      	str	r3, [r7, #20]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	617b      	str	r3, [r7, #20]
 800638c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800638e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006390:	6a39      	ldr	r1, [r7, #32]
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f000 f964 	bl	8006660 <I2C_WaitOnTXEFlagUntilTimeout>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00d      	beq.n	80063ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a2:	2b04      	cmp	r3, #4
 80063a4:	d107      	bne.n	80063b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e076      	b.n	80064a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063ba:	88fb      	ldrh	r3, [r7, #6]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d105      	bne.n	80063cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063c0:	893b      	ldrh	r3, [r7, #8]
 80063c2:	b2da      	uxtb	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	611a      	str	r2, [r3, #16]
 80063ca:	e021      	b.n	8006410 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80063cc:	893b      	ldrh	r3, [r7, #8]
 80063ce:	0a1b      	lsrs	r3, r3, #8
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	b2da      	uxtb	r2, r3
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063dc:	6a39      	ldr	r1, [r7, #32]
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f000 f93e 	bl	8006660 <I2C_WaitOnTXEFlagUntilTimeout>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00d      	beq.n	8006406 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ee:	2b04      	cmp	r3, #4
 80063f0:	d107      	bne.n	8006402 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006400:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e050      	b.n	80064a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006406:	893b      	ldrh	r3, [r7, #8]
 8006408:	b2da      	uxtb	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006412:	6a39      	ldr	r1, [r7, #32]
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f000 f923 	bl	8006660 <I2C_WaitOnTXEFlagUntilTimeout>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00d      	beq.n	800643c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006424:	2b04      	cmp	r3, #4
 8006426:	d107      	bne.n	8006438 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006436:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	e035      	b.n	80064a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800644a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	6a3b      	ldr	r3, [r7, #32]
 8006452:	2200      	movs	r2, #0
 8006454:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f000 f82b 	bl	80064b4 <I2C_WaitOnFlagUntilTimeout>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00d      	beq.n	8006480 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800646e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006472:	d103      	bne.n	800647c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f44f 7200 	mov.w	r2, #512	; 0x200
 800647a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800647c:	2303      	movs	r3, #3
 800647e:	e013      	b.n	80064a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006480:	897b      	ldrh	r3, [r7, #10]
 8006482:	b2db      	uxtb	r3, r3
 8006484:	f043 0301 	orr.w	r3, r3, #1
 8006488:	b2da      	uxtb	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006492:	6a3a      	ldr	r2, [r7, #32]
 8006494:	4906      	ldr	r1, [pc, #24]	; (80064b0 <I2C_RequestMemoryRead+0x1cc>)
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f000 f863 	bl	8006562 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d001      	beq.n	80064a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e000      	b.n	80064a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3718      	adds	r7, #24
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	00010002 	.word	0x00010002

080064b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	603b      	str	r3, [r7, #0]
 80064c0:	4613      	mov	r3, r2
 80064c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064c4:	e025      	b.n	8006512 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064cc:	d021      	beq.n	8006512 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ce:	f7fe fb2f 	bl	8004b30 <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	683a      	ldr	r2, [r7, #0]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d302      	bcc.n	80064e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d116      	bne.n	8006512 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2220      	movs	r2, #32
 80064ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fe:	f043 0220 	orr.w	r2, r3, #32
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e023      	b.n	800655a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	0c1b      	lsrs	r3, r3, #16
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b01      	cmp	r3, #1
 800651a:	d10d      	bne.n	8006538 <I2C_WaitOnFlagUntilTimeout+0x84>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	43da      	mvns	r2, r3
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	4013      	ands	r3, r2
 8006528:	b29b      	uxth	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	bf0c      	ite	eq
 800652e:	2301      	moveq	r3, #1
 8006530:	2300      	movne	r3, #0
 8006532:	b2db      	uxtb	r3, r3
 8006534:	461a      	mov	r2, r3
 8006536:	e00c      	b.n	8006552 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	43da      	mvns	r2, r3
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	4013      	ands	r3, r2
 8006544:	b29b      	uxth	r3, r3
 8006546:	2b00      	cmp	r3, #0
 8006548:	bf0c      	ite	eq
 800654a:	2301      	moveq	r3, #1
 800654c:	2300      	movne	r3, #0
 800654e:	b2db      	uxtb	r3, r3
 8006550:	461a      	mov	r2, r3
 8006552:	79fb      	ldrb	r3, [r7, #7]
 8006554:	429a      	cmp	r2, r3
 8006556:	d0b6      	beq.n	80064c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3710      	adds	r7, #16
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b084      	sub	sp, #16
 8006566:	af00      	add	r7, sp, #0
 8006568:	60f8      	str	r0, [r7, #12]
 800656a:	60b9      	str	r1, [r7, #8]
 800656c:	607a      	str	r2, [r7, #4]
 800656e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006570:	e051      	b.n	8006616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	695b      	ldr	r3, [r3, #20]
 8006578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800657c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006580:	d123      	bne.n	80065ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006590:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800659a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2220      	movs	r2, #32
 80065a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b6:	f043 0204 	orr.w	r2, r3, #4
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e046      	b.n	8006658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d0:	d021      	beq.n	8006616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065d2:	f7fe faad 	bl	8004b30 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d302      	bcc.n	80065e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d116      	bne.n	8006616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2220      	movs	r2, #32
 80065f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006602:	f043 0220 	orr.w	r2, r3, #32
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e020      	b.n	8006658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	0c1b      	lsrs	r3, r3, #16
 800661a:	b2db      	uxtb	r3, r3
 800661c:	2b01      	cmp	r3, #1
 800661e:	d10c      	bne.n	800663a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	43da      	mvns	r2, r3
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	4013      	ands	r3, r2
 800662c:	b29b      	uxth	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	bf14      	ite	ne
 8006632:	2301      	movne	r3, #1
 8006634:	2300      	moveq	r3, #0
 8006636:	b2db      	uxtb	r3, r3
 8006638:	e00b      	b.n	8006652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	43da      	mvns	r2, r3
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	4013      	ands	r3, r2
 8006646:	b29b      	uxth	r3, r3
 8006648:	2b00      	cmp	r3, #0
 800664a:	bf14      	ite	ne
 800664c:	2301      	movne	r3, #1
 800664e:	2300      	moveq	r3, #0
 8006650:	b2db      	uxtb	r3, r3
 8006652:	2b00      	cmp	r3, #0
 8006654:	d18d      	bne.n	8006572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800666c:	e02d      	b.n	80066ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f000 f8ce 	bl	8006810 <I2C_IsAcknowledgeFailed>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d001      	beq.n	800667e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e02d      	b.n	80066da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006684:	d021      	beq.n	80066ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006686:	f7fe fa53 	bl	8004b30 <HAL_GetTick>
 800668a:	4602      	mov	r2, r0
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	429a      	cmp	r2, r3
 8006694:	d302      	bcc.n	800669c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d116      	bne.n	80066ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2220      	movs	r2, #32
 80066a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b6:	f043 0220 	orr.w	r2, r3, #32
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e007      	b.n	80066da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d4:	2b80      	cmp	r3, #128	; 0x80
 80066d6:	d1ca      	bne.n	800666e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b084      	sub	sp, #16
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	60f8      	str	r0, [r7, #12]
 80066ea:	60b9      	str	r1, [r7, #8]
 80066ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066ee:	e02d      	b.n	800674c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f000 f88d 	bl	8006810 <I2C_IsAcknowledgeFailed>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d001      	beq.n	8006700 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e02d      	b.n	800675c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006706:	d021      	beq.n	800674c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006708:	f7fe fa12 	bl	8004b30 <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	429a      	cmp	r2, r3
 8006716:	d302      	bcc.n	800671e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d116      	bne.n	800674c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2220      	movs	r2, #32
 8006728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006738:	f043 0220 	orr.w	r2, r3, #32
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e007      	b.n	800675c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	f003 0304 	and.w	r3, r3, #4
 8006756:	2b04      	cmp	r3, #4
 8006758:	d1ca      	bne.n	80066f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006770:	e042      	b.n	80067f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	695b      	ldr	r3, [r3, #20]
 8006778:	f003 0310 	and.w	r3, r3, #16
 800677c:	2b10      	cmp	r3, #16
 800677e:	d119      	bne.n	80067b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f06f 0210 	mvn.w	r2, #16
 8006788:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2220      	movs	r2, #32
 8006794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e029      	b.n	8006808 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067b4:	f7fe f9bc 	bl	8004b30 <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	68ba      	ldr	r2, [r7, #8]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d302      	bcc.n	80067ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d116      	bne.n	80067f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2220      	movs	r2, #32
 80067d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e4:	f043 0220 	orr.w	r2, r3, #32
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e007      	b.n	8006808 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006802:	2b40      	cmp	r3, #64	; 0x40
 8006804:	d1b5      	bne.n	8006772 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006826:	d11b      	bne.n	8006860 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006830:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2220      	movs	r2, #32
 800683c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684c:	f043 0204 	orr.w	r2, r3, #4
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e000      	b.n	8006862 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	370c      	adds	r7, #12
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800686e:	b480      	push	{r7}
 8006870:	b083      	sub	sp, #12
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
 8006876:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800687e:	b2db      	uxtb	r3, r3
 8006880:	2b20      	cmp	r3, #32
 8006882:	d129      	bne.n	80068d8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2224      	movs	r2, #36	; 0x24
 8006888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f022 0201 	bic.w	r2, r2, #1
 800689a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f022 0210 	bic.w	r2, r2, #16
 80068aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	683a      	ldr	r2, [r7, #0]
 80068b8:	430a      	orrs	r2, r1
 80068ba:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f042 0201 	orr.w	r2, r2, #1
 80068ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2220      	movs	r2, #32
 80068d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80068d4:	2300      	movs	r3, #0
 80068d6:	e000      	b.n	80068da <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80068d8:	2302      	movs	r3, #2
  }
}
 80068da:	4618      	mov	r0, r3
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr

080068e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b085      	sub	sp, #20
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80068f0:	2300      	movs	r3, #0
 80068f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b20      	cmp	r3, #32
 80068fe:	d12a      	bne.n	8006956 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2224      	movs	r2, #36	; 0x24
 8006904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f022 0201 	bic.w	r2, r2, #1
 8006916:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006920:	89fb      	ldrh	r3, [r7, #14]
 8006922:	f023 030f 	bic.w	r3, r3, #15
 8006926:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	b29a      	uxth	r2, r3
 800692c:	89fb      	ldrh	r3, [r7, #14]
 800692e:	4313      	orrs	r3, r2
 8006930:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	89fa      	ldrh	r2, [r7, #14]
 8006938:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f042 0201 	orr.w	r2, r2, #1
 8006948:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2220      	movs	r2, #32
 800694e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006952:	2300      	movs	r3, #0
 8006954:	e000      	b.n	8006958 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006956:	2302      	movs	r3, #2
  }
}
 8006958:	4618      	mov	r0, r3
 800695a:	3714      	adds	r7, #20
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006966:	b08f      	sub	sp, #60	; 0x3c
 8006968:	af0a      	add	r7, sp, #40	; 0x28
 800696a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d101      	bne.n	8006976 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e10f      	b.n	8006b96 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b00      	cmp	r3, #0
 8006986:	d106      	bne.n	8006996 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f00a f98b 	bl	8010cac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2203      	movs	r2, #3
 800699a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d102      	bne.n	80069b0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4618      	mov	r0, r3
 80069b6:	f003 ff58 	bl	800a86a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	603b      	str	r3, [r7, #0]
 80069c0:	687e      	ldr	r6, [r7, #4]
 80069c2:	466d      	mov	r5, sp
 80069c4:	f106 0410 	add.w	r4, r6, #16
 80069c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80069d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80069d8:	1d33      	adds	r3, r6, #4
 80069da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80069dc:	6838      	ldr	r0, [r7, #0]
 80069de:	f003 fe2f 	bl	800a640 <USB_CoreInit>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d005      	beq.n	80069f4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2202      	movs	r2, #2
 80069ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e0d0      	b.n	8006b96 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2100      	movs	r1, #0
 80069fa:	4618      	mov	r0, r3
 80069fc:	f003 ff46 	bl	800a88c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a00:	2300      	movs	r3, #0
 8006a02:	73fb      	strb	r3, [r7, #15]
 8006a04:	e04a      	b.n	8006a9c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006a06:	7bfa      	ldrb	r2, [r7, #15]
 8006a08:	6879      	ldr	r1, [r7, #4]
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	00db      	lsls	r3, r3, #3
 8006a0e:	1a9b      	subs	r3, r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	440b      	add	r3, r1
 8006a14:	333d      	adds	r3, #61	; 0x3d
 8006a16:	2201      	movs	r2, #1
 8006a18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006a1a:	7bfa      	ldrb	r2, [r7, #15]
 8006a1c:	6879      	ldr	r1, [r7, #4]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	00db      	lsls	r3, r3, #3
 8006a22:	1a9b      	subs	r3, r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	440b      	add	r3, r1
 8006a28:	333c      	adds	r3, #60	; 0x3c
 8006a2a:	7bfa      	ldrb	r2, [r7, #15]
 8006a2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006a2e:	7bfa      	ldrb	r2, [r7, #15]
 8006a30:	7bfb      	ldrb	r3, [r7, #15]
 8006a32:	b298      	uxth	r0, r3
 8006a34:	6879      	ldr	r1, [r7, #4]
 8006a36:	4613      	mov	r3, r2
 8006a38:	00db      	lsls	r3, r3, #3
 8006a3a:	1a9b      	subs	r3, r3, r2
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	440b      	add	r3, r1
 8006a40:	3342      	adds	r3, #66	; 0x42
 8006a42:	4602      	mov	r2, r0
 8006a44:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006a46:	7bfa      	ldrb	r2, [r7, #15]
 8006a48:	6879      	ldr	r1, [r7, #4]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	00db      	lsls	r3, r3, #3
 8006a4e:	1a9b      	subs	r3, r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	440b      	add	r3, r1
 8006a54:	333f      	adds	r3, #63	; 0x3f
 8006a56:	2200      	movs	r2, #0
 8006a58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006a5a:	7bfa      	ldrb	r2, [r7, #15]
 8006a5c:	6879      	ldr	r1, [r7, #4]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	00db      	lsls	r3, r3, #3
 8006a62:	1a9b      	subs	r3, r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	440b      	add	r3, r1
 8006a68:	3344      	adds	r3, #68	; 0x44
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006a6e:	7bfa      	ldrb	r2, [r7, #15]
 8006a70:	6879      	ldr	r1, [r7, #4]
 8006a72:	4613      	mov	r3, r2
 8006a74:	00db      	lsls	r3, r3, #3
 8006a76:	1a9b      	subs	r3, r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	440b      	add	r3, r1
 8006a7c:	3348      	adds	r3, #72	; 0x48
 8006a7e:	2200      	movs	r2, #0
 8006a80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006a82:	7bfa      	ldrb	r2, [r7, #15]
 8006a84:	6879      	ldr	r1, [r7, #4]
 8006a86:	4613      	mov	r3, r2
 8006a88:	00db      	lsls	r3, r3, #3
 8006a8a:	1a9b      	subs	r3, r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	440b      	add	r3, r1
 8006a90:	3350      	adds	r3, #80	; 0x50
 8006a92:	2200      	movs	r2, #0
 8006a94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a96:	7bfb      	ldrb	r3, [r7, #15]
 8006a98:	3301      	adds	r3, #1
 8006a9a:	73fb      	strb	r3, [r7, #15]
 8006a9c:	7bfa      	ldrb	r2, [r7, #15]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d3af      	bcc.n	8006a06 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	73fb      	strb	r3, [r7, #15]
 8006aaa:	e044      	b.n	8006b36 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006aac:	7bfa      	ldrb	r2, [r7, #15]
 8006aae:	6879      	ldr	r1, [r7, #4]
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	00db      	lsls	r3, r3, #3
 8006ab4:	1a9b      	subs	r3, r3, r2
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	440b      	add	r3, r1
 8006aba:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006abe:	2200      	movs	r2, #0
 8006ac0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006ac2:	7bfa      	ldrb	r2, [r7, #15]
 8006ac4:	6879      	ldr	r1, [r7, #4]
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	00db      	lsls	r3, r3, #3
 8006aca:	1a9b      	subs	r3, r3, r2
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	440b      	add	r3, r1
 8006ad0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006ad4:	7bfa      	ldrb	r2, [r7, #15]
 8006ad6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006ad8:	7bfa      	ldrb	r2, [r7, #15]
 8006ada:	6879      	ldr	r1, [r7, #4]
 8006adc:	4613      	mov	r3, r2
 8006ade:	00db      	lsls	r3, r3, #3
 8006ae0:	1a9b      	subs	r3, r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	440b      	add	r3, r1
 8006ae6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006aea:	2200      	movs	r2, #0
 8006aec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006aee:	7bfa      	ldrb	r2, [r7, #15]
 8006af0:	6879      	ldr	r1, [r7, #4]
 8006af2:	4613      	mov	r3, r2
 8006af4:	00db      	lsls	r3, r3, #3
 8006af6:	1a9b      	subs	r3, r3, r2
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	440b      	add	r3, r1
 8006afc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006b00:	2200      	movs	r2, #0
 8006b02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006b04:	7bfa      	ldrb	r2, [r7, #15]
 8006b06:	6879      	ldr	r1, [r7, #4]
 8006b08:	4613      	mov	r3, r2
 8006b0a:	00db      	lsls	r3, r3, #3
 8006b0c:	1a9b      	subs	r3, r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	440b      	add	r3, r1
 8006b12:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006b16:	2200      	movs	r2, #0
 8006b18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006b1a:	7bfa      	ldrb	r2, [r7, #15]
 8006b1c:	6879      	ldr	r1, [r7, #4]
 8006b1e:	4613      	mov	r3, r2
 8006b20:	00db      	lsls	r3, r3, #3
 8006b22:	1a9b      	subs	r3, r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	440b      	add	r3, r1
 8006b28:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b30:	7bfb      	ldrb	r3, [r7, #15]
 8006b32:	3301      	adds	r3, #1
 8006b34:	73fb      	strb	r3, [r7, #15]
 8006b36:	7bfa      	ldrb	r2, [r7, #15]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d3b5      	bcc.n	8006aac <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	603b      	str	r3, [r7, #0]
 8006b46:	687e      	ldr	r6, [r7, #4]
 8006b48:	466d      	mov	r5, sp
 8006b4a:	f106 0410 	add.w	r4, r6, #16
 8006b4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006b52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006b56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006b5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8006b5e:	1d33      	adds	r3, r6, #4
 8006b60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b62:	6838      	ldr	r0, [r7, #0]
 8006b64:	f003 fede 	bl	800a924 <USB_DevInit>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d005      	beq.n	8006b7a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2202      	movs	r2, #2
 8006b72:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e00d      	b.n	8006b96 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2201      	movs	r2, #1
 8006b86:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f004 ff5a 	bl	800ba48 <USB_DevDisconnect>

  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006b9e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b084      	sub	sp, #16
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d101      	bne.n	8006bba <HAL_PCD_Start+0x1c>
 8006bb6:	2302      	movs	r3, #2
 8006bb8:	e020      	b.n	8006bfc <HAL_PCD_Start+0x5e>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d109      	bne.n	8006bde <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d005      	beq.n	8006bde <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4618      	mov	r0, r3
 8006be4:	f003 fe30 	bl	800a848 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4618      	mov	r0, r3
 8006bee:	f004 ff0a 	bl	800ba06 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006c04:	b590      	push	{r4, r7, lr}
 8006c06:	b08d      	sub	sp, #52	; 0x34
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c12:	6a3b      	ldr	r3, [r7, #32]
 8006c14:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f004 ffc8 	bl	800bbb0 <USB_GetMode>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f040 839d 	bne.w	8007362 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f004 ff2c 	bl	800ba8a <USB_ReadInterrupts>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f000 8393 	beq.w	8007360 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f004 ff23 	bl	800ba8a <USB_ReadInterrupts>
 8006c44:	4603      	mov	r3, r0
 8006c46:	f003 0302 	and.w	r3, r3, #2
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	d107      	bne.n	8006c5e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	695a      	ldr	r2, [r3, #20]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f002 0202 	and.w	r2, r2, #2
 8006c5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4618      	mov	r0, r3
 8006c64:	f004 ff11 	bl	800ba8a <USB_ReadInterrupts>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	f003 0310 	and.w	r3, r3, #16
 8006c6e:	2b10      	cmp	r3, #16
 8006c70:	d161      	bne.n	8006d36 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	699a      	ldr	r2, [r3, #24]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f022 0210 	bic.w	r2, r2, #16
 8006c80:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006c82:	6a3b      	ldr	r3, [r7, #32]
 8006c84:	6a1b      	ldr	r3, [r3, #32]
 8006c86:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	f003 020f 	and.w	r2, r3, #15
 8006c8e:	4613      	mov	r3, r2
 8006c90:	00db      	lsls	r3, r3, #3
 8006c92:	1a9b      	subs	r3, r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	3304      	adds	r3, #4
 8006ca0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	0c5b      	lsrs	r3, r3, #17
 8006ca6:	f003 030f 	and.w	r3, r3, #15
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d124      	bne.n	8006cf8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006cae:	69ba      	ldr	r2, [r7, #24]
 8006cb0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d035      	beq.n	8006d26 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	091b      	lsrs	r3, r3, #4
 8006cc2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006cc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	461a      	mov	r2, r3
 8006ccc:	6a38      	ldr	r0, [r7, #32]
 8006cce:	f004 fd48 	bl	800b762 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	68da      	ldr	r2, [r3, #12]
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	091b      	lsrs	r3, r3, #4
 8006cda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006cde:	441a      	add	r2, r3
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	699a      	ldr	r2, [r3, #24]
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	091b      	lsrs	r3, r3, #4
 8006cec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006cf0:	441a      	add	r2, r3
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	619a      	str	r2, [r3, #24]
 8006cf6:	e016      	b.n	8006d26 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	0c5b      	lsrs	r3, r3, #17
 8006cfc:	f003 030f 	and.w	r3, r3, #15
 8006d00:	2b06      	cmp	r3, #6
 8006d02:	d110      	bne.n	8006d26 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006d0a:	2208      	movs	r2, #8
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	6a38      	ldr	r0, [r7, #32]
 8006d10:	f004 fd27 	bl	800b762 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	699a      	ldr	r2, [r3, #24]
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	091b      	lsrs	r3, r3, #4
 8006d1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d20:	441a      	add	r2, r3
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	699a      	ldr	r2, [r3, #24]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f042 0210 	orr.w	r2, r2, #16
 8006d34:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f004 fea5 	bl	800ba8a <USB_ReadInterrupts>
 8006d40:	4603      	mov	r3, r0
 8006d42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d46:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006d4a:	d16e      	bne.n	8006e2a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4618      	mov	r0, r3
 8006d56:	f004 feab 	bl	800bab0 <USB_ReadDevAllOutEpInterrupt>
 8006d5a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006d5c:	e062      	b.n	8006e24 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d60:	f003 0301 	and.w	r3, r3, #1
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d057      	beq.n	8006e18 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d6e:	b2d2      	uxtb	r2, r2
 8006d70:	4611      	mov	r1, r2
 8006d72:	4618      	mov	r0, r3
 8006d74:	f004 fed0 	bl	800bb18 <USB_ReadDevOutEPInterrupt>
 8006d78:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	f003 0301 	and.w	r3, r3, #1
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d00c      	beq.n	8006d9e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d86:	015a      	lsls	r2, r3, #5
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d90:	461a      	mov	r2, r3
 8006d92:	2301      	movs	r3, #1
 8006d94:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006d96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 fdb1 	bl	8007900 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	f003 0308 	and.w	r3, r3, #8
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00c      	beq.n	8006dc2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006daa:	015a      	lsls	r2, r3, #5
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	4413      	add	r3, r2
 8006db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db4:	461a      	mov	r2, r3
 8006db6:	2308      	movs	r3, #8
 8006db8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006dba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 feab 	bl	8007b18 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	f003 0310 	and.w	r3, r3, #16
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d008      	beq.n	8006dde <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dce:	015a      	lsls	r2, r3, #5
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dd8:	461a      	mov	r2, r3
 8006dda:	2310      	movs	r3, #16
 8006ddc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	f003 0320 	and.w	r3, r3, #32
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d008      	beq.n	8006dfa <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	015a      	lsls	r2, r3, #5
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	4413      	add	r3, r2
 8006df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df4:	461a      	mov	r2, r3
 8006df6:	2320      	movs	r3, #32
 8006df8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d009      	beq.n	8006e18 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e06:	015a      	lsls	r2, r3, #5
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e10:	461a      	mov	r2, r3
 8006e12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006e16:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e20:	085b      	lsrs	r3, r3, #1
 8006e22:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d199      	bne.n	8006d5e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f004 fe2b 	bl	800ba8a <USB_ReadInterrupts>
 8006e34:	4603      	mov	r3, r0
 8006e36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e3e:	f040 80c0 	bne.w	8006fc2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4618      	mov	r0, r3
 8006e48:	f004 fe4c 	bl	800bae4 <USB_ReadDevAllInEpInterrupt>
 8006e4c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006e52:	e0b2      	b.n	8006fba <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 80a7 	beq.w	8006fae <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e66:	b2d2      	uxtb	r2, r2
 8006e68:	4611      	mov	r1, r2
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f004 fe72 	bl	800bb54 <USB_ReadDevInEPInterrupt>
 8006e70:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	f003 0301 	and.w	r3, r3, #1
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d057      	beq.n	8006f2c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7e:	f003 030f 	and.w	r3, r3, #15
 8006e82:	2201      	movs	r2, #1
 8006e84:	fa02 f303 	lsl.w	r3, r2, r3
 8006e88:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	43db      	mvns	r3, r3
 8006e96:	69f9      	ldr	r1, [r7, #28]
 8006e98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	015a      	lsls	r2, r3, #5
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eac:	461a      	mov	r2, r3
 8006eae:	2301      	movs	r3, #1
 8006eb0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d132      	bne.n	8006f20 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006eba:	6879      	ldr	r1, [r7, #4]
 8006ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	00db      	lsls	r3, r3, #3
 8006ec2:	1a9b      	subs	r3, r3, r2
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	440b      	add	r3, r1
 8006ec8:	3348      	adds	r3, #72	; 0x48
 8006eca:	6819      	ldr	r1, [r3, #0]
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	00db      	lsls	r3, r3, #3
 8006ed4:	1a9b      	subs	r3, r3, r2
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	4403      	add	r3, r0
 8006eda:	3344      	adds	r3, #68	; 0x44
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4419      	add	r1, r3
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	00db      	lsls	r3, r3, #3
 8006ee8:	1a9b      	subs	r3, r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4403      	add	r3, r0
 8006eee:	3348      	adds	r3, #72	; 0x48
 8006ef0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d113      	bne.n	8006f20 <HAL_PCD_IRQHandler+0x31c>
 8006ef8:	6879      	ldr	r1, [r7, #4]
 8006efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006efc:	4613      	mov	r3, r2
 8006efe:	00db      	lsls	r3, r3, #3
 8006f00:	1a9b      	subs	r3, r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	440b      	add	r3, r1
 8006f06:	3350      	adds	r3, #80	; 0x50
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d108      	bne.n	8006f20 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6818      	ldr	r0, [r3, #0]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006f18:	461a      	mov	r2, r3
 8006f1a:	2101      	movs	r1, #1
 8006f1c:	f004 fe7a 	bl	800bc14 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	4619      	mov	r1, r3
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f009 ff4f 	bl	8010dca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	f003 0308 	and.w	r3, r3, #8
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d008      	beq.n	8006f48 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f38:	015a      	lsls	r2, r3, #5
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f42:	461a      	mov	r2, r3
 8006f44:	2308      	movs	r3, #8
 8006f46:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	f003 0310 	and.w	r3, r3, #16
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d008      	beq.n	8006f64 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f54:	015a      	lsls	r2, r3, #5
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	4413      	add	r3, r2
 8006f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f5e:	461a      	mov	r2, r3
 8006f60:	2310      	movs	r3, #16
 8006f62:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d008      	beq.n	8006f80 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f70:	015a      	lsls	r2, r3, #5
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	4413      	add	r3, r2
 8006f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	2340      	movs	r3, #64	; 0x40
 8006f7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	f003 0302 	and.w	r3, r3, #2
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d008      	beq.n	8006f9c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8c:	015a      	lsls	r2, r3, #5
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	4413      	add	r3, r2
 8006f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f96:	461a      	mov	r2, r3
 8006f98:	2302      	movs	r3, #2
 8006f9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d003      	beq.n	8006fae <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006fa6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fc1b 	bl	80077e4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb6:	085b      	lsrs	r3, r3, #1
 8006fb8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f47f af49 	bne.w	8006e54 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f004 fd5f 	bl	800ba8a <USB_ReadInterrupts>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fd6:	d122      	bne.n	800701e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	69fa      	ldr	r2, [r7, #28]
 8006fe2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fe6:	f023 0301 	bic.w	r3, r3, #1
 8006fea:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d108      	bne.n	8007008 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006ffe:	2100      	movs	r1, #0
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 fe27 	bl	8007c54 <HAL_PCDEx_LPM_Callback>
 8007006:	e002      	b.n	800700e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f009 ff55 	bl	8010eb8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	695a      	ldr	r2, [r3, #20]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800701c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4618      	mov	r0, r3
 8007024:	f004 fd31 	bl	800ba8a <USB_ReadInterrupts>
 8007028:	4603      	mov	r3, r0
 800702a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800702e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007032:	d112      	bne.n	800705a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f003 0301 	and.w	r3, r3, #1
 8007040:	2b01      	cmp	r3, #1
 8007042:	d102      	bne.n	800704a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f009 ff11 	bl	8010e6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	695a      	ldr	r2, [r3, #20]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007058:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4618      	mov	r0, r3
 8007060:	f004 fd13 	bl	800ba8a <USB_ReadInterrupts>
 8007064:	4603      	mov	r3, r0
 8007066:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800706a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800706e:	f040 80c7 	bne.w	8007200 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	69fa      	ldr	r2, [r7, #28]
 800707c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007080:	f023 0301 	bic.w	r3, r3, #1
 8007084:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2110      	movs	r1, #16
 800708c:	4618      	mov	r0, r3
 800708e:	f003 fdad 	bl	800abec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007092:	2300      	movs	r3, #0
 8007094:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007096:	e056      	b.n	8007146 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800709a:	015a      	lsls	r2, r3, #5
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	4413      	add	r3, r2
 80070a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a4:	461a      	mov	r2, r3
 80070a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80070aa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80070ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ae:	015a      	lsls	r2, r3, #5
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	4413      	add	r3, r2
 80070b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070bc:	0151      	lsls	r1, r2, #5
 80070be:	69fa      	ldr	r2, [r7, #28]
 80070c0:	440a      	add	r2, r1
 80070c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80070ca:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80070cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ce:	015a      	lsls	r2, r3, #5
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	4413      	add	r3, r2
 80070d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070dc:	0151      	lsls	r1, r2, #5
 80070de:	69fa      	ldr	r2, [r7, #28]
 80070e0:	440a      	add	r2, r1
 80070e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80070ea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80070ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ee:	015a      	lsls	r2, r3, #5
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	4413      	add	r3, r2
 80070f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f8:	461a      	mov	r2, r3
 80070fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80070fe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	4413      	add	r3, r2
 8007108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007110:	0151      	lsls	r1, r2, #5
 8007112:	69fa      	ldr	r2, [r7, #28]
 8007114:	440a      	add	r2, r1
 8007116:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800711a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800711e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007122:	015a      	lsls	r2, r3, #5
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	4413      	add	r3, r2
 8007128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007130:	0151      	lsls	r1, r2, #5
 8007132:	69fa      	ldr	r2, [r7, #28]
 8007134:	440a      	add	r2, r1
 8007136:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800713a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800713e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007142:	3301      	adds	r3, #1
 8007144:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800714c:	429a      	cmp	r2, r3
 800714e:	d3a3      	bcc.n	8007098 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007156:	69db      	ldr	r3, [r3, #28]
 8007158:	69fa      	ldr	r2, [r7, #28]
 800715a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800715e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007162:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007168:	2b00      	cmp	r3, #0
 800716a:	d016      	beq.n	800719a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007172:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007176:	69fa      	ldr	r2, [r7, #28]
 8007178:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800717c:	f043 030b 	orr.w	r3, r3, #11
 8007180:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800718a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800718c:	69fa      	ldr	r2, [r7, #28]
 800718e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007192:	f043 030b 	orr.w	r3, r3, #11
 8007196:	6453      	str	r3, [r2, #68]	; 0x44
 8007198:	e015      	b.n	80071c6 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	69fa      	ldr	r2, [r7, #28]
 80071a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80071ac:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80071b0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	69fa      	ldr	r2, [r7, #28]
 80071bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071c0:	f043 030b 	orr.w	r3, r3, #11
 80071c4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	69fa      	ldr	r2, [r7, #28]
 80071d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071d4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80071d8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6818      	ldr	r0, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80071ea:	461a      	mov	r2, r3
 80071ec:	f004 fd12 	bl	800bc14 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	695a      	ldr	r2, [r3, #20]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80071fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4618      	mov	r0, r3
 8007206:	f004 fc40 	bl	800ba8a <USB_ReadInterrupts>
 800720a:	4603      	mov	r3, r0
 800720c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007210:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007214:	d124      	bne.n	8007260 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4618      	mov	r0, r3
 800721c:	f004 fcd6 	bl	800bbcc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4618      	mov	r0, r3
 8007226:	f003 fd3e 	bl	800aca6 <USB_GetDevSpeed>
 800722a:	4603      	mov	r3, r0
 800722c:	461a      	mov	r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681c      	ldr	r4, [r3, #0]
 8007236:	f001 f96b 	bl	8008510 <HAL_RCC_GetHCLKFreq>
 800723a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007240:	b2db      	uxtb	r3, r3
 8007242:	461a      	mov	r2, r3
 8007244:	4620      	mov	r0, r4
 8007246:	f003 fa5d 	bl	800a704 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f009 fde5 	bl	8010e1a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	695a      	ldr	r2, [r3, #20]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800725e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4618      	mov	r0, r3
 8007266:	f004 fc10 	bl	800ba8a <USB_ReadInterrupts>
 800726a:	4603      	mov	r3, r0
 800726c:	f003 0308 	and.w	r3, r3, #8
 8007270:	2b08      	cmp	r3, #8
 8007272:	d10a      	bne.n	800728a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f009 fdc2 	bl	8010dfe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	695a      	ldr	r2, [r3, #20]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f002 0208 	and.w	r2, r2, #8
 8007288:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4618      	mov	r0, r3
 8007290:	f004 fbfb 	bl	800ba8a <USB_ReadInterrupts>
 8007294:	4603      	mov	r3, r0
 8007296:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800729a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800729e:	d10f      	bne.n	80072c0 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80072a0:	2300      	movs	r3, #0
 80072a2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80072a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	4619      	mov	r1, r3
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f009 fe24 	bl	8010ef8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	695a      	ldr	r2, [r3, #20]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80072be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4618      	mov	r0, r3
 80072c6:	f004 fbe0 	bl	800ba8a <USB_ReadInterrupts>
 80072ca:	4603      	mov	r3, r0
 80072cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072d4:	d10f      	bne.n	80072f6 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80072d6:	2300      	movs	r3, #0
 80072d8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80072da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	4619      	mov	r1, r3
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f009 fdf7 	bl	8010ed4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	695a      	ldr	r2, [r3, #20]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80072f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f004 fbc5 	bl	800ba8a <USB_ReadInterrupts>
 8007300:	4603      	mov	r3, r0
 8007302:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800730a:	d10a      	bne.n	8007322 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f009 fe05 	bl	8010f1c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	695a      	ldr	r2, [r3, #20]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007320:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4618      	mov	r0, r3
 8007328:	f004 fbaf 	bl	800ba8a <USB_ReadInterrupts>
 800732c:	4603      	mov	r3, r0
 800732e:	f003 0304 	and.w	r3, r3, #4
 8007332:	2b04      	cmp	r3, #4
 8007334:	d115      	bne.n	8007362 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	f003 0304 	and.w	r3, r3, #4
 8007344:	2b00      	cmp	r3, #0
 8007346:	d002      	beq.n	800734e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f009 fdf5 	bl	8010f38 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	6859      	ldr	r1, [r3, #4]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	69ba      	ldr	r2, [r7, #24]
 800735a:	430a      	orrs	r2, r1
 800735c:	605a      	str	r2, [r3, #4]
 800735e:	e000      	b.n	8007362 <HAL_PCD_IRQHandler+0x75e>
      return;
 8007360:	bf00      	nop
    }
  }
}
 8007362:	3734      	adds	r7, #52	; 0x34
 8007364:	46bd      	mov	sp, r7
 8007366:	bd90      	pop	{r4, r7, pc}

08007368 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	460b      	mov	r3, r1
 8007372:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800737a:	2b01      	cmp	r3, #1
 800737c:	d101      	bne.n	8007382 <HAL_PCD_SetAddress+0x1a>
 800737e:	2302      	movs	r3, #2
 8007380:	e013      	b.n	80073aa <HAL_PCD_SetAddress+0x42>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	78fa      	ldrb	r2, [r7, #3]
 800738e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	78fa      	ldrb	r2, [r7, #3]
 8007398:	4611      	mov	r1, r2
 800739a:	4618      	mov	r0, r3
 800739c:	f004 fb0d 	bl	800b9ba <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3708      	adds	r7, #8
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b084      	sub	sp, #16
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
 80073ba:	4608      	mov	r0, r1
 80073bc:	4611      	mov	r1, r2
 80073be:	461a      	mov	r2, r3
 80073c0:	4603      	mov	r3, r0
 80073c2:	70fb      	strb	r3, [r7, #3]
 80073c4:	460b      	mov	r3, r1
 80073c6:	803b      	strh	r3, [r7, #0]
 80073c8:	4613      	mov	r3, r2
 80073ca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80073cc:	2300      	movs	r3, #0
 80073ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80073d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	da0f      	bge.n	80073f8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80073d8:	78fb      	ldrb	r3, [r7, #3]
 80073da:	f003 020f 	and.w	r2, r3, #15
 80073de:	4613      	mov	r3, r2
 80073e0:	00db      	lsls	r3, r3, #3
 80073e2:	1a9b      	subs	r3, r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	3338      	adds	r3, #56	; 0x38
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	4413      	add	r3, r2
 80073ec:	3304      	adds	r3, #4
 80073ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2201      	movs	r2, #1
 80073f4:	705a      	strb	r2, [r3, #1]
 80073f6:	e00f      	b.n	8007418 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80073f8:	78fb      	ldrb	r3, [r7, #3]
 80073fa:	f003 020f 	and.w	r2, r3, #15
 80073fe:	4613      	mov	r3, r2
 8007400:	00db      	lsls	r3, r3, #3
 8007402:	1a9b      	subs	r3, r3, r2
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	4413      	add	r3, r2
 800740e:	3304      	adds	r3, #4
 8007410:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2200      	movs	r2, #0
 8007416:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007418:	78fb      	ldrb	r3, [r7, #3]
 800741a:	f003 030f 	and.w	r3, r3, #15
 800741e:	b2da      	uxtb	r2, r3
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007424:	883a      	ldrh	r2, [r7, #0]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	78ba      	ldrb	r2, [r7, #2]
 800742e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	785b      	ldrb	r3, [r3, #1]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d004      	beq.n	8007442 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	b29a      	uxth	r2, r3
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007442:	78bb      	ldrb	r3, [r7, #2]
 8007444:	2b02      	cmp	r3, #2
 8007446:	d102      	bne.n	800744e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007454:	2b01      	cmp	r3, #1
 8007456:	d101      	bne.n	800745c <HAL_PCD_EP_Open+0xaa>
 8007458:	2302      	movs	r3, #2
 800745a:	e00e      	b.n	800747a <HAL_PCD_EP_Open+0xc8>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68f9      	ldr	r1, [r7, #12]
 800746a:	4618      	mov	r0, r3
 800746c:	f003 fc40 	bl	800acf0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007478:	7afb      	ldrb	r3, [r7, #11]
}
 800747a:	4618      	mov	r0, r3
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b084      	sub	sp, #16
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
 800748a:	460b      	mov	r3, r1
 800748c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800748e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007492:	2b00      	cmp	r3, #0
 8007494:	da0f      	bge.n	80074b6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007496:	78fb      	ldrb	r3, [r7, #3]
 8007498:	f003 020f 	and.w	r2, r3, #15
 800749c:	4613      	mov	r3, r2
 800749e:	00db      	lsls	r3, r3, #3
 80074a0:	1a9b      	subs	r3, r3, r2
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	3338      	adds	r3, #56	; 0x38
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	4413      	add	r3, r2
 80074aa:	3304      	adds	r3, #4
 80074ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2201      	movs	r2, #1
 80074b2:	705a      	strb	r2, [r3, #1]
 80074b4:	e00f      	b.n	80074d6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80074b6:	78fb      	ldrb	r3, [r7, #3]
 80074b8:	f003 020f 	and.w	r2, r3, #15
 80074bc:	4613      	mov	r3, r2
 80074be:	00db      	lsls	r3, r3, #3
 80074c0:	1a9b      	subs	r3, r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	4413      	add	r3, r2
 80074cc:	3304      	adds	r3, #4
 80074ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2200      	movs	r2, #0
 80074d4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80074d6:	78fb      	ldrb	r3, [r7, #3]
 80074d8:	f003 030f 	and.w	r3, r3, #15
 80074dc:	b2da      	uxtb	r2, r3
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d101      	bne.n	80074f0 <HAL_PCD_EP_Close+0x6e>
 80074ec:	2302      	movs	r3, #2
 80074ee:	e00e      	b.n	800750e <HAL_PCD_EP_Close+0x8c>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68f9      	ldr	r1, [r7, #12]
 80074fe:	4618      	mov	r0, r3
 8007500:	f003 fc7e 	bl	800ae00 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3710      	adds	r7, #16
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b086      	sub	sp, #24
 800751a:	af00      	add	r7, sp, #0
 800751c:	60f8      	str	r0, [r7, #12]
 800751e:	607a      	str	r2, [r7, #4]
 8007520:	603b      	str	r3, [r7, #0]
 8007522:	460b      	mov	r3, r1
 8007524:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007526:	7afb      	ldrb	r3, [r7, #11]
 8007528:	f003 020f 	and.w	r2, r3, #15
 800752c:	4613      	mov	r3, r2
 800752e:	00db      	lsls	r3, r3, #3
 8007530:	1a9b      	subs	r3, r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	4413      	add	r3, r2
 800753c:	3304      	adds	r3, #4
 800753e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	683a      	ldr	r2, [r7, #0]
 800754a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	2200      	movs	r2, #0
 8007550:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	2200      	movs	r2, #0
 8007556:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007558:	7afb      	ldrb	r3, [r7, #11]
 800755a:	f003 030f 	and.w	r3, r3, #15
 800755e:	b2da      	uxtb	r2, r3
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	2b01      	cmp	r3, #1
 800756a:	d102      	bne.n	8007572 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007572:	7afb      	ldrb	r3, [r7, #11]
 8007574:	f003 030f 	and.w	r3, r3, #15
 8007578:	2b00      	cmp	r3, #0
 800757a:	d109      	bne.n	8007590 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6818      	ldr	r0, [r3, #0]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	b2db      	uxtb	r3, r3
 8007586:	461a      	mov	r2, r3
 8007588:	6979      	ldr	r1, [r7, #20]
 800758a:	f003 ff59 	bl	800b440 <USB_EP0StartXfer>
 800758e:	e008      	b.n	80075a2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6818      	ldr	r0, [r3, #0]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	b2db      	uxtb	r3, r3
 800759a:	461a      	mov	r2, r3
 800759c:	6979      	ldr	r1, [r7, #20]
 800759e:	f003 fd0b 	bl	800afb8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3718      	adds	r7, #24
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	460b      	mov	r3, r1
 80075b6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80075b8:	78fb      	ldrb	r3, [r7, #3]
 80075ba:	f003 020f 	and.w	r2, r3, #15
 80075be:	6879      	ldr	r1, [r7, #4]
 80075c0:	4613      	mov	r3, r2
 80075c2:	00db      	lsls	r3, r3, #3
 80075c4:	1a9b      	subs	r3, r3, r2
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	440b      	add	r3, r1
 80075ca:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80075ce:	681b      	ldr	r3, [r3, #0]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b086      	sub	sp, #24
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	607a      	str	r2, [r7, #4]
 80075e6:	603b      	str	r3, [r7, #0]
 80075e8:	460b      	mov	r3, r1
 80075ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80075ec:	7afb      	ldrb	r3, [r7, #11]
 80075ee:	f003 020f 	and.w	r2, r3, #15
 80075f2:	4613      	mov	r3, r2
 80075f4:	00db      	lsls	r3, r3, #3
 80075f6:	1a9b      	subs	r3, r3, r2
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	3338      	adds	r3, #56	; 0x38
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	4413      	add	r3, r2
 8007600:	3304      	adds	r3, #4
 8007602:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	683a      	ldr	r2, [r7, #0]
 800760e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	2200      	movs	r2, #0
 8007614:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	2201      	movs	r2, #1
 800761a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800761c:	7afb      	ldrb	r3, [r7, #11]
 800761e:	f003 030f 	and.w	r3, r3, #15
 8007622:	b2da      	uxtb	r2, r3
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d102      	bne.n	8007636 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007636:	7afb      	ldrb	r3, [r7, #11]
 8007638:	f003 030f 	and.w	r3, r3, #15
 800763c:	2b00      	cmp	r3, #0
 800763e:	d109      	bne.n	8007654 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6818      	ldr	r0, [r3, #0]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	b2db      	uxtb	r3, r3
 800764a:	461a      	mov	r2, r3
 800764c:	6979      	ldr	r1, [r7, #20]
 800764e:	f003 fef7 	bl	800b440 <USB_EP0StartXfer>
 8007652:	e008      	b.n	8007666 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6818      	ldr	r0, [r3, #0]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	691b      	ldr	r3, [r3, #16]
 800765c:	b2db      	uxtb	r3, r3
 800765e:	461a      	mov	r2, r3
 8007660:	6979      	ldr	r1, [r7, #20]
 8007662:	f003 fca9 	bl	800afb8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	3718      	adds	r7, #24
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	460b      	mov	r3, r1
 800767a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800767c:	78fb      	ldrb	r3, [r7, #3]
 800767e:	f003 020f 	and.w	r2, r3, #15
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	429a      	cmp	r2, r3
 8007688:	d901      	bls.n	800768e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e050      	b.n	8007730 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800768e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007692:	2b00      	cmp	r3, #0
 8007694:	da0f      	bge.n	80076b6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007696:	78fb      	ldrb	r3, [r7, #3]
 8007698:	f003 020f 	and.w	r2, r3, #15
 800769c:	4613      	mov	r3, r2
 800769e:	00db      	lsls	r3, r3, #3
 80076a0:	1a9b      	subs	r3, r3, r2
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	3338      	adds	r3, #56	; 0x38
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	4413      	add	r3, r2
 80076aa:	3304      	adds	r3, #4
 80076ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2201      	movs	r2, #1
 80076b2:	705a      	strb	r2, [r3, #1]
 80076b4:	e00d      	b.n	80076d2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80076b6:	78fa      	ldrb	r2, [r7, #3]
 80076b8:	4613      	mov	r3, r2
 80076ba:	00db      	lsls	r3, r3, #3
 80076bc:	1a9b      	subs	r3, r3, r2
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	4413      	add	r3, r2
 80076c8:	3304      	adds	r3, #4
 80076ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2201      	movs	r2, #1
 80076d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80076d8:	78fb      	ldrb	r3, [r7, #3]
 80076da:	f003 030f 	and.w	r3, r3, #15
 80076de:	b2da      	uxtb	r2, r3
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d101      	bne.n	80076f2 <HAL_PCD_EP_SetStall+0x82>
 80076ee:	2302      	movs	r3, #2
 80076f0:	e01e      	b.n	8007730 <HAL_PCD_EP_SetStall+0xc0>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2201      	movs	r2, #1
 80076f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68f9      	ldr	r1, [r7, #12]
 8007700:	4618      	mov	r0, r3
 8007702:	f004 f886 	bl	800b812 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007706:	78fb      	ldrb	r3, [r7, #3]
 8007708:	f003 030f 	and.w	r3, r3, #15
 800770c:	2b00      	cmp	r3, #0
 800770e:	d10a      	bne.n	8007726 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6818      	ldr	r0, [r3, #0]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	691b      	ldr	r3, [r3, #16]
 8007718:	b2d9      	uxtb	r1, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007720:	461a      	mov	r2, r3
 8007722:	f004 fa77 	bl	800bc14 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	460b      	mov	r3, r1
 8007742:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007744:	78fb      	ldrb	r3, [r7, #3]
 8007746:	f003 020f 	and.w	r2, r3, #15
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	429a      	cmp	r2, r3
 8007750:	d901      	bls.n	8007756 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e042      	b.n	80077dc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007756:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800775a:	2b00      	cmp	r3, #0
 800775c:	da0f      	bge.n	800777e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800775e:	78fb      	ldrb	r3, [r7, #3]
 8007760:	f003 020f 	and.w	r2, r3, #15
 8007764:	4613      	mov	r3, r2
 8007766:	00db      	lsls	r3, r3, #3
 8007768:	1a9b      	subs	r3, r3, r2
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	3338      	adds	r3, #56	; 0x38
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	4413      	add	r3, r2
 8007772:	3304      	adds	r3, #4
 8007774:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2201      	movs	r2, #1
 800777a:	705a      	strb	r2, [r3, #1]
 800777c:	e00f      	b.n	800779e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800777e:	78fb      	ldrb	r3, [r7, #3]
 8007780:	f003 020f 	and.w	r2, r3, #15
 8007784:	4613      	mov	r3, r2
 8007786:	00db      	lsls	r3, r3, #3
 8007788:	1a9b      	subs	r3, r3, r2
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	4413      	add	r3, r2
 8007794:	3304      	adds	r3, #4
 8007796:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80077a4:	78fb      	ldrb	r3, [r7, #3]
 80077a6:	f003 030f 	and.w	r3, r3, #15
 80077aa:	b2da      	uxtb	r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d101      	bne.n	80077be <HAL_PCD_EP_ClrStall+0x86>
 80077ba:	2302      	movs	r3, #2
 80077bc:	e00e      	b.n	80077dc <HAL_PCD_EP_ClrStall+0xa4>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2201      	movs	r2, #1
 80077c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68f9      	ldr	r1, [r7, #12]
 80077cc:	4618      	mov	r0, r3
 80077ce:	f004 f88e 	bl	800b8ee <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3710      	adds	r7, #16
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b08a      	sub	sp, #40	; 0x28
 80077e8:	af02      	add	r7, sp, #8
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80077f8:	683a      	ldr	r2, [r7, #0]
 80077fa:	4613      	mov	r3, r2
 80077fc:	00db      	lsls	r3, r3, #3
 80077fe:	1a9b      	subs	r3, r3, r2
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	3338      	adds	r3, #56	; 0x38
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	4413      	add	r3, r2
 8007808:	3304      	adds	r3, #4
 800780a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	699a      	ldr	r2, [r3, #24]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	695b      	ldr	r3, [r3, #20]
 8007814:	429a      	cmp	r2, r3
 8007816:	d901      	bls.n	800781c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	e06c      	b.n	80078f6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	695a      	ldr	r2, [r3, #20]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	699b      	ldr	r3, [r3, #24]
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	69fa      	ldr	r2, [r7, #28]
 800782e:	429a      	cmp	r2, r3
 8007830:	d902      	bls.n	8007838 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	3303      	adds	r3, #3
 800783c:	089b      	lsrs	r3, r3, #2
 800783e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007840:	e02b      	b.n	800789a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	695a      	ldr	r2, [r3, #20]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	69fa      	ldr	r2, [r7, #28]
 8007854:	429a      	cmp	r2, r3
 8007856:	d902      	bls.n	800785e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	3303      	adds	r3, #3
 8007862:	089b      	lsrs	r3, r3, #2
 8007864:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	68d9      	ldr	r1, [r3, #12]
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	b2da      	uxtb	r2, r3
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007876:	b2db      	uxtb	r3, r3
 8007878:	9300      	str	r3, [sp, #0]
 800787a:	4603      	mov	r3, r0
 800787c:	6978      	ldr	r0, [r7, #20]
 800787e:	f003 ff32 	bl	800b6e6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	68da      	ldr	r2, [r3, #12]
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	441a      	add	r2, r3
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	699a      	ldr	r2, [r3, #24]
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	441a      	add	r2, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	015a      	lsls	r2, r3, #5
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	4413      	add	r3, r2
 80078a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078a6:	699b      	ldr	r3, [r3, #24]
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	69ba      	ldr	r2, [r7, #24]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d809      	bhi.n	80078c4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	699a      	ldr	r2, [r3, #24]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d203      	bcs.n	80078c4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	695b      	ldr	r3, [r3, #20]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d1be      	bne.n	8007842 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	695a      	ldr	r2, [r3, #20]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	699b      	ldr	r3, [r3, #24]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d811      	bhi.n	80078f4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	f003 030f 	and.w	r3, r3, #15
 80078d6:	2201      	movs	r2, #1
 80078d8:	fa02 f303 	lsl.w	r3, r2, r3
 80078dc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	43db      	mvns	r3, r3
 80078ea:	6939      	ldr	r1, [r7, #16]
 80078ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078f0:	4013      	ands	r3, r2
 80078f2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3720      	adds	r7, #32
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
	...

08007900 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b086      	sub	sp, #24
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	333c      	adds	r3, #60	; 0x3c
 8007918:	3304      	adds	r3, #4
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	015a      	lsls	r2, r3, #5
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	4413      	add	r3, r2
 8007926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	2b01      	cmp	r3, #1
 8007934:	f040 80a0 	bne.w	8007a78 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	f003 0308 	and.w	r3, r3, #8
 800793e:	2b00      	cmp	r3, #0
 8007940:	d015      	beq.n	800796e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	4a72      	ldr	r2, [pc, #456]	; (8007b10 <PCD_EP_OutXfrComplete_int+0x210>)
 8007946:	4293      	cmp	r3, r2
 8007948:	f240 80dd 	bls.w	8007b06 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007952:	2b00      	cmp	r3, #0
 8007954:	f000 80d7 	beq.w	8007b06 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	015a      	lsls	r2, r3, #5
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	4413      	add	r3, r2
 8007960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007964:	461a      	mov	r2, r3
 8007966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800796a:	6093      	str	r3, [r2, #8]
 800796c:	e0cb      	b.n	8007b06 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	f003 0320 	and.w	r3, r3, #32
 8007974:	2b00      	cmp	r3, #0
 8007976:	d009      	beq.n	800798c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	015a      	lsls	r2, r3, #5
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	4413      	add	r3, r2
 8007980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007984:	461a      	mov	r2, r3
 8007986:	2320      	movs	r3, #32
 8007988:	6093      	str	r3, [r2, #8]
 800798a:	e0bc      	b.n	8007b06 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007992:	2b00      	cmp	r3, #0
 8007994:	f040 80b7 	bne.w	8007b06 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	4a5d      	ldr	r2, [pc, #372]	; (8007b10 <PCD_EP_OutXfrComplete_int+0x210>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d90f      	bls.n	80079c0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00a      	beq.n	80079c0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	015a      	lsls	r2, r3, #5
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	4413      	add	r3, r2
 80079b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079b6:	461a      	mov	r2, r3
 80079b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079bc:	6093      	str	r3, [r2, #8]
 80079be:	e0a2      	b.n	8007b06 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80079c0:	6879      	ldr	r1, [r7, #4]
 80079c2:	683a      	ldr	r2, [r7, #0]
 80079c4:	4613      	mov	r3, r2
 80079c6:	00db      	lsls	r3, r3, #3
 80079c8:	1a9b      	subs	r3, r3, r2
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	440b      	add	r3, r1
 80079ce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80079d2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	0159      	lsls	r1, r3, #5
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	440b      	add	r3, r1
 80079dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80079e6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	683a      	ldr	r2, [r7, #0]
 80079ec:	4613      	mov	r3, r2
 80079ee:	00db      	lsls	r3, r3, #3
 80079f0:	1a9b      	subs	r3, r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	4403      	add	r3, r0
 80079f6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80079fa:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80079fc:	6879      	ldr	r1, [r7, #4]
 80079fe:	683a      	ldr	r2, [r7, #0]
 8007a00:	4613      	mov	r3, r2
 8007a02:	00db      	lsls	r3, r3, #3
 8007a04:	1a9b      	subs	r3, r3, r2
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	440b      	add	r3, r1
 8007a0a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007a0e:	6819      	ldr	r1, [r3, #0]
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	683a      	ldr	r2, [r7, #0]
 8007a14:	4613      	mov	r3, r2
 8007a16:	00db      	lsls	r3, r3, #3
 8007a18:	1a9b      	subs	r3, r3, r2
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	4403      	add	r3, r0
 8007a1e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4419      	add	r1, r3
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	683a      	ldr	r2, [r7, #0]
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	00db      	lsls	r3, r3, #3
 8007a2e:	1a9b      	subs	r3, r3, r2
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	4403      	add	r3, r0
 8007a34:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007a38:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d114      	bne.n	8007a6a <PCD_EP_OutXfrComplete_int+0x16a>
 8007a40:	6879      	ldr	r1, [r7, #4]
 8007a42:	683a      	ldr	r2, [r7, #0]
 8007a44:	4613      	mov	r3, r2
 8007a46:	00db      	lsls	r3, r3, #3
 8007a48:	1a9b      	subs	r3, r3, r2
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	440b      	add	r3, r1
 8007a4e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d108      	bne.n	8007a6a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6818      	ldr	r0, [r3, #0]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007a62:	461a      	mov	r2, r3
 8007a64:	2101      	movs	r1, #1
 8007a66:	f004 f8d5 	bl	800bc14 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	4619      	mov	r1, r3
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f009 f98f 	bl	8010d94 <HAL_PCD_DataOutStageCallback>
 8007a76:	e046      	b.n	8007b06 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	4a26      	ldr	r2, [pc, #152]	; (8007b14 <PCD_EP_OutXfrComplete_int+0x214>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d124      	bne.n	8007aca <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00a      	beq.n	8007aa0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	015a      	lsls	r2, r3, #5
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	4413      	add	r3, r2
 8007a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a96:	461a      	mov	r2, r3
 8007a98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a9c:	6093      	str	r3, [r2, #8]
 8007a9e:	e032      	b.n	8007b06 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	f003 0320 	and.w	r3, r3, #32
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d008      	beq.n	8007abc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	015a      	lsls	r2, r3, #5
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	2320      	movs	r3, #32
 8007aba:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f009 f966 	bl	8010d94 <HAL_PCD_DataOutStageCallback>
 8007ac8:	e01d      	b.n	8007b06 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d114      	bne.n	8007afa <PCD_EP_OutXfrComplete_int+0x1fa>
 8007ad0:	6879      	ldr	r1, [r7, #4]
 8007ad2:	683a      	ldr	r2, [r7, #0]
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	00db      	lsls	r3, r3, #3
 8007ad8:	1a9b      	subs	r3, r3, r2
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	440b      	add	r3, r1
 8007ade:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d108      	bne.n	8007afa <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6818      	ldr	r0, [r3, #0]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007af2:	461a      	mov	r2, r3
 8007af4:	2100      	movs	r1, #0
 8007af6:	f004 f88d 	bl	800bc14 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	4619      	mov	r1, r3
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f009 f947 	bl	8010d94 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007b06:	2300      	movs	r3, #0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3718      	adds	r7, #24
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	4f54300a 	.word	0x4f54300a
 8007b14:	4f54310a 	.word	0x4f54310a

08007b18 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b086      	sub	sp, #24
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	333c      	adds	r3, #60	; 0x3c
 8007b30:	3304      	adds	r3, #4
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	015a      	lsls	r2, r3, #5
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	4a15      	ldr	r2, [pc, #84]	; (8007ba0 <PCD_EP_OutSetupPacket_int+0x88>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d90e      	bls.n	8007b6c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d009      	beq.n	8007b6c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	015a      	lsls	r2, r3, #5
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	4413      	add	r3, r2
 8007b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b64:	461a      	mov	r2, r3
 8007b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b6a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f009 f8ff 	bl	8010d70 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	4a0a      	ldr	r2, [pc, #40]	; (8007ba0 <PCD_EP_OutSetupPacket_int+0x88>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d90c      	bls.n	8007b94 <PCD_EP_OutSetupPacket_int+0x7c>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d108      	bne.n	8007b94 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6818      	ldr	r0, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	2101      	movs	r1, #1
 8007b90:	f004 f840 	bl	800bc14 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3718      	adds	r7, #24
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	4f54300a 	.word	0x4f54300a

08007ba4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	460b      	mov	r3, r1
 8007bae:	70fb      	strb	r3, [r7, #3]
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007bbc:	78fb      	ldrb	r3, [r7, #3]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d107      	bne.n	8007bd2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007bc2:	883b      	ldrh	r3, [r7, #0]
 8007bc4:	0419      	lsls	r1, r3, #16
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68ba      	ldr	r2, [r7, #8]
 8007bcc:	430a      	orrs	r2, r1
 8007bce:	629a      	str	r2, [r3, #40]	; 0x28
 8007bd0:	e028      	b.n	8007c24 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd8:	0c1b      	lsrs	r3, r3, #16
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	4413      	add	r3, r2
 8007bde:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007be0:	2300      	movs	r3, #0
 8007be2:	73fb      	strb	r3, [r7, #15]
 8007be4:	e00d      	b.n	8007c02 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	7bfb      	ldrb	r3, [r7, #15]
 8007bec:	3340      	adds	r3, #64	; 0x40
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	4413      	add	r3, r2
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	0c1b      	lsrs	r3, r3, #16
 8007bf6:	68ba      	ldr	r2, [r7, #8]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007bfc:	7bfb      	ldrb	r3, [r7, #15]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	73fb      	strb	r3, [r7, #15]
 8007c02:	7bfa      	ldrb	r2, [r7, #15]
 8007c04:	78fb      	ldrb	r3, [r7, #3]
 8007c06:	3b01      	subs	r3, #1
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d3ec      	bcc.n	8007be6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007c0c:	883b      	ldrh	r3, [r7, #0]
 8007c0e:	0418      	lsls	r0, r3, #16
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6819      	ldr	r1, [r3, #0]
 8007c14:	78fb      	ldrb	r3, [r7, #3]
 8007c16:	3b01      	subs	r3, #1
 8007c18:	68ba      	ldr	r2, [r7, #8]
 8007c1a:	4302      	orrs	r2, r0
 8007c1c:	3340      	adds	r3, #64	; 0x40
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	440b      	add	r3, r1
 8007c22:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007c24:	2300      	movs	r3, #0
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3714      	adds	r7, #20
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr

08007c32 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007c32:	b480      	push	{r7}
 8007c34:	b083      	sub	sp, #12
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	887a      	ldrh	r2, [r7, #2]
 8007c44:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8007c74:	4b06      	ldr	r3, [pc, #24]	; (8007c90 <HAL_PWR_DisableWakeUpPin+0x24>)
 8007c76:	685a      	ldr	r2, [r3, #4]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	43db      	mvns	r3, r3
 8007c7c:	4904      	ldr	r1, [pc, #16]	; (8007c90 <HAL_PWR_DisableWakeUpPin+0x24>)
 8007c7e:	4013      	ands	r3, r2
 8007c80:	604b      	str	r3, [r1, #4]
}
 8007c82:	bf00      	nop
 8007c84:	370c      	adds	r7, #12
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop
 8007c90:	40007000 	.word	0x40007000

08007c94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b086      	sub	sp, #24
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d101      	bne.n	8007ca6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e264      	b.n	8008170 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d075      	beq.n	8007d9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007cb2:	4ba3      	ldr	r3, [pc, #652]	; (8007f40 <HAL_RCC_OscConfig+0x2ac>)
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	f003 030c 	and.w	r3, r3, #12
 8007cba:	2b04      	cmp	r3, #4
 8007cbc:	d00c      	beq.n	8007cd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cbe:	4ba0      	ldr	r3, [pc, #640]	; (8007f40 <HAL_RCC_OscConfig+0x2ac>)
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007cc6:	2b08      	cmp	r3, #8
 8007cc8:	d112      	bne.n	8007cf0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cca:	4b9d      	ldr	r3, [pc, #628]	; (8007f40 <HAL_RCC_OscConfig+0x2ac>)
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cd6:	d10b      	bne.n	8007cf0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cd8:	4b99      	ldr	r3, [pc, #612]	; (8007f40 <HAL_RCC_OscConfig+0x2ac>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d05b      	beq.n	8007d9c <HAL_RCC_OscConfig+0x108>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d157      	bne.n	8007d9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	e23f      	b.n	8008170 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cf8:	d106      	bne.n	8007d08 <HAL_RCC_OscConfig+0x74>
 8007cfa:	4b91      	ldr	r3, [pc, #580]	; (8007f40 <HAL_RCC_OscConfig+0x2ac>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a90      	ldr	r2, [pc, #576]	; (8007f40 <HAL_RCC_OscConfig+0x2ac>)
 8007d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d04:	6013      	str	r3, [r2, #0]
 8007d06:	e01d      	b.n	8007d44 <HAL_RCC_OscConfig+0xb0>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d10:	d10c      	bne.n	8007d2c <HAL_RCC_OscConfig+0x98>
 8007d12:	4b8b      	ldr	r3, [pc, #556]	; (8007f40 <HAL_RCC_OscConfig+0x2ac>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a8a      	ldr	r2, [pc, #552]	; (8007f40 <HAL_RCC_OscConfig+0x2ac>)
 8007d18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d1c:	6013      	str	r3, [r2, #0]
 8007d1e:	4b88      	ldr	r3, [pc, #544]	; (8007f40 <HAL_RCC_OscConfig+0x2ac>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a87      	ldr	r2, [pc, #540]	; (8007f40 <HAL_RCC_OscConfig+0x2ac>)
 8007d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d28:	6013      	str	r3, [r2, #0]
 8007d2a:	e00b      	b.n	8007d44 <HAL_RCC_OscConfig+0xb0>
 8007d2c:	4b84      	ldr	r3, [pc, #528]	; (8007f40 <HAL_RCC_OscConfig+0x2ac>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a83      	ldr	r2, [pc, #524]	; (8007f40 <HAL_RCC_OscConfig+0x2ac>)
 8007d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d36:	6013      	str	r3, [r2, #0]
 8007d38:	4b81      	ldr	r3, [pc, #516]	; (8007f40 <HAL_RCC_OscConfig+0x2ac>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a80      	ldr	r2, [pc, #512]	; (8007f40 <HAL_RCC_OscConfig+0x2ac>)
 8007d3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d013      	beq.n	8007d74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d4c:	f7fc fef0 	bl	8004b30 <HAL_GetTick>
 8007d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d52:	e008      	b.n	8007d66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d54:	f7fc feec 	bl	8004b30 <HAL_GetTick>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	1ad3      	subs	r3, r2, r3
 8007d5e:	2b64      	cmp	r3, #100	; 0x64
 8007d60:	d901      	bls.n	8007d66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e204      	b.n	8008170 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d66:	4b76      	ldr	r3, [pc, #472]	; (8007f40 <HAL_RCC_OscConfig+0x2ac>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d0f0      	beq.n	8007d54 <HAL_RCC_OscConfig+0xc0>
 8007d72:	e014      	b.n	8007d9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d74:	f7fc fedc 	bl	8004b30 <HAL_GetTick>
 8007d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d7a:	e008      	b.n	8007d8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d7c:	f7fc fed8 	bl	8004b30 <HAL_GetTick>
 8007d80:	4602      	mov	r2, r0
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	1ad3      	subs	r3, r2, r3
 8007d86:	2b64      	cmp	r3, #100	; 0x64
 8007d88:	d901      	bls.n	8007d8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	e1f0      	b.n	8008170 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d8e:	4b6c      	ldr	r3, [pc, #432]	; (8007f40 <HAL_RCC_OscConfig+0x2ac>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1f0      	bne.n	8007d7c <HAL_RCC_OscConfig+0xe8>
 8007d9a:	e000      	b.n	8007d9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 0302 	and.w	r3, r3, #2
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d063      	beq.n	8007e72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007daa:	4b65      	ldr	r3, [pc, #404]	; (8007f40 <HAL_RCC_OscConfig+0x2ac>)
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f003 030c 	and.w	r3, r3, #12
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d00b      	beq.n	8007dce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007db6:	4b62      	ldr	r3, [pc, #392]	; (8007f40 <HAL_RCC_OscConfig+0x2ac>)
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007dbe:	2b08      	cmp	r3, #8
 8007dc0:	d11c      	bne.n	8007dfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007dc2:	4b5f      	ldr	r3, [pc, #380]	; (8007f40 <HAL_RCC_OscConfig+0x2ac>)
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d116      	bne.n	8007dfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007dce:	4b5c      	ldr	r3, [pc, #368]	; (8007f40 <HAL_RCC_OscConfig+0x2ac>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 0302 	and.w	r3, r3, #2
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d005      	beq.n	8007de6 <HAL_RCC_OscConfig+0x152>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d001      	beq.n	8007de6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	e1c4      	b.n	8008170 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007de6:	4b56      	ldr	r3, [pc, #344]	; (8007f40 <HAL_RCC_OscConfig+0x2ac>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	00db      	lsls	r3, r3, #3
 8007df4:	4952      	ldr	r1, [pc, #328]	; (8007f40 <HAL_RCC_OscConfig+0x2ac>)
 8007df6:	4313      	orrs	r3, r2
 8007df8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007dfa:	e03a      	b.n	8007e72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d020      	beq.n	8007e46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e04:	4b4f      	ldr	r3, [pc, #316]	; (8007f44 <HAL_RCC_OscConfig+0x2b0>)
 8007e06:	2201      	movs	r2, #1
 8007e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e0a:	f7fc fe91 	bl	8004b30 <HAL_GetTick>
 8007e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e10:	e008      	b.n	8007e24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e12:	f7fc fe8d 	bl	8004b30 <HAL_GetTick>
 8007e16:	4602      	mov	r2, r0
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	1ad3      	subs	r3, r2, r3
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	d901      	bls.n	8007e24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007e20:	2303      	movs	r3, #3
 8007e22:	e1a5      	b.n	8008170 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e24:	4b46      	ldr	r3, [pc, #280]	; (8007f40 <HAL_RCC_OscConfig+0x2ac>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 0302 	and.w	r3, r3, #2
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d0f0      	beq.n	8007e12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e30:	4b43      	ldr	r3, [pc, #268]	; (8007f40 <HAL_RCC_OscConfig+0x2ac>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	00db      	lsls	r3, r3, #3
 8007e3e:	4940      	ldr	r1, [pc, #256]	; (8007f40 <HAL_RCC_OscConfig+0x2ac>)
 8007e40:	4313      	orrs	r3, r2
 8007e42:	600b      	str	r3, [r1, #0]
 8007e44:	e015      	b.n	8007e72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e46:	4b3f      	ldr	r3, [pc, #252]	; (8007f44 <HAL_RCC_OscConfig+0x2b0>)
 8007e48:	2200      	movs	r2, #0
 8007e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e4c:	f7fc fe70 	bl	8004b30 <HAL_GetTick>
 8007e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e52:	e008      	b.n	8007e66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e54:	f7fc fe6c 	bl	8004b30 <HAL_GetTick>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d901      	bls.n	8007e66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007e62:	2303      	movs	r3, #3
 8007e64:	e184      	b.n	8008170 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e66:	4b36      	ldr	r3, [pc, #216]	; (8007f40 <HAL_RCC_OscConfig+0x2ac>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 0302 	and.w	r3, r3, #2
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1f0      	bne.n	8007e54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 0308 	and.w	r3, r3, #8
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d030      	beq.n	8007ee0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	695b      	ldr	r3, [r3, #20]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d016      	beq.n	8007eb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e86:	4b30      	ldr	r3, [pc, #192]	; (8007f48 <HAL_RCC_OscConfig+0x2b4>)
 8007e88:	2201      	movs	r2, #1
 8007e8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e8c:	f7fc fe50 	bl	8004b30 <HAL_GetTick>
 8007e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e92:	e008      	b.n	8007ea6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e94:	f7fc fe4c 	bl	8004b30 <HAL_GetTick>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	1ad3      	subs	r3, r2, r3
 8007e9e:	2b02      	cmp	r3, #2
 8007ea0:	d901      	bls.n	8007ea6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	e164      	b.n	8008170 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ea6:	4b26      	ldr	r3, [pc, #152]	; (8007f40 <HAL_RCC_OscConfig+0x2ac>)
 8007ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eaa:	f003 0302 	and.w	r3, r3, #2
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d0f0      	beq.n	8007e94 <HAL_RCC_OscConfig+0x200>
 8007eb2:	e015      	b.n	8007ee0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007eb4:	4b24      	ldr	r3, [pc, #144]	; (8007f48 <HAL_RCC_OscConfig+0x2b4>)
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007eba:	f7fc fe39 	bl	8004b30 <HAL_GetTick>
 8007ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ec0:	e008      	b.n	8007ed4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ec2:	f7fc fe35 	bl	8004b30 <HAL_GetTick>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	1ad3      	subs	r3, r2, r3
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d901      	bls.n	8007ed4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007ed0:	2303      	movs	r3, #3
 8007ed2:	e14d      	b.n	8008170 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ed4:	4b1a      	ldr	r3, [pc, #104]	; (8007f40 <HAL_RCC_OscConfig+0x2ac>)
 8007ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ed8:	f003 0302 	and.w	r3, r3, #2
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d1f0      	bne.n	8007ec2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f003 0304 	and.w	r3, r3, #4
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f000 80a0 	beq.w	800802e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ef2:	4b13      	ldr	r3, [pc, #76]	; (8007f40 <HAL_RCC_OscConfig+0x2ac>)
 8007ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d10f      	bne.n	8007f1e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007efe:	2300      	movs	r3, #0
 8007f00:	60bb      	str	r3, [r7, #8]
 8007f02:	4b0f      	ldr	r3, [pc, #60]	; (8007f40 <HAL_RCC_OscConfig+0x2ac>)
 8007f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f06:	4a0e      	ldr	r2, [pc, #56]	; (8007f40 <HAL_RCC_OscConfig+0x2ac>)
 8007f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8007f0e:	4b0c      	ldr	r3, [pc, #48]	; (8007f40 <HAL_RCC_OscConfig+0x2ac>)
 8007f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f16:	60bb      	str	r3, [r7, #8]
 8007f18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f1e:	4b0b      	ldr	r3, [pc, #44]	; (8007f4c <HAL_RCC_OscConfig+0x2b8>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d121      	bne.n	8007f6e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f2a:	4b08      	ldr	r3, [pc, #32]	; (8007f4c <HAL_RCC_OscConfig+0x2b8>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a07      	ldr	r2, [pc, #28]	; (8007f4c <HAL_RCC_OscConfig+0x2b8>)
 8007f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f36:	f7fc fdfb 	bl	8004b30 <HAL_GetTick>
 8007f3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f3c:	e011      	b.n	8007f62 <HAL_RCC_OscConfig+0x2ce>
 8007f3e:	bf00      	nop
 8007f40:	40023800 	.word	0x40023800
 8007f44:	42470000 	.word	0x42470000
 8007f48:	42470e80 	.word	0x42470e80
 8007f4c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f50:	f7fc fdee 	bl	8004b30 <HAL_GetTick>
 8007f54:	4602      	mov	r2, r0
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	d901      	bls.n	8007f62 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e106      	b.n	8008170 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f62:	4b85      	ldr	r3, [pc, #532]	; (8008178 <HAL_RCC_OscConfig+0x4e4>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d0f0      	beq.n	8007f50 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d106      	bne.n	8007f84 <HAL_RCC_OscConfig+0x2f0>
 8007f76:	4b81      	ldr	r3, [pc, #516]	; (800817c <HAL_RCC_OscConfig+0x4e8>)
 8007f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f7a:	4a80      	ldr	r2, [pc, #512]	; (800817c <HAL_RCC_OscConfig+0x4e8>)
 8007f7c:	f043 0301 	orr.w	r3, r3, #1
 8007f80:	6713      	str	r3, [r2, #112]	; 0x70
 8007f82:	e01c      	b.n	8007fbe <HAL_RCC_OscConfig+0x32a>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	2b05      	cmp	r3, #5
 8007f8a:	d10c      	bne.n	8007fa6 <HAL_RCC_OscConfig+0x312>
 8007f8c:	4b7b      	ldr	r3, [pc, #492]	; (800817c <HAL_RCC_OscConfig+0x4e8>)
 8007f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f90:	4a7a      	ldr	r2, [pc, #488]	; (800817c <HAL_RCC_OscConfig+0x4e8>)
 8007f92:	f043 0304 	orr.w	r3, r3, #4
 8007f96:	6713      	str	r3, [r2, #112]	; 0x70
 8007f98:	4b78      	ldr	r3, [pc, #480]	; (800817c <HAL_RCC_OscConfig+0x4e8>)
 8007f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f9c:	4a77      	ldr	r2, [pc, #476]	; (800817c <HAL_RCC_OscConfig+0x4e8>)
 8007f9e:	f043 0301 	orr.w	r3, r3, #1
 8007fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8007fa4:	e00b      	b.n	8007fbe <HAL_RCC_OscConfig+0x32a>
 8007fa6:	4b75      	ldr	r3, [pc, #468]	; (800817c <HAL_RCC_OscConfig+0x4e8>)
 8007fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007faa:	4a74      	ldr	r2, [pc, #464]	; (800817c <HAL_RCC_OscConfig+0x4e8>)
 8007fac:	f023 0301 	bic.w	r3, r3, #1
 8007fb0:	6713      	str	r3, [r2, #112]	; 0x70
 8007fb2:	4b72      	ldr	r3, [pc, #456]	; (800817c <HAL_RCC_OscConfig+0x4e8>)
 8007fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fb6:	4a71      	ldr	r2, [pc, #452]	; (800817c <HAL_RCC_OscConfig+0x4e8>)
 8007fb8:	f023 0304 	bic.w	r3, r3, #4
 8007fbc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d015      	beq.n	8007ff2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fc6:	f7fc fdb3 	bl	8004b30 <HAL_GetTick>
 8007fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fcc:	e00a      	b.n	8007fe4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fce:	f7fc fdaf 	bl	8004b30 <HAL_GetTick>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	1ad3      	subs	r3, r2, r3
 8007fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d901      	bls.n	8007fe4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	e0c5      	b.n	8008170 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fe4:	4b65      	ldr	r3, [pc, #404]	; (800817c <HAL_RCC_OscConfig+0x4e8>)
 8007fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fe8:	f003 0302 	and.w	r3, r3, #2
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d0ee      	beq.n	8007fce <HAL_RCC_OscConfig+0x33a>
 8007ff0:	e014      	b.n	800801c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ff2:	f7fc fd9d 	bl	8004b30 <HAL_GetTick>
 8007ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ff8:	e00a      	b.n	8008010 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ffa:	f7fc fd99 	bl	8004b30 <HAL_GetTick>
 8007ffe:	4602      	mov	r2, r0
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	1ad3      	subs	r3, r2, r3
 8008004:	f241 3288 	movw	r2, #5000	; 0x1388
 8008008:	4293      	cmp	r3, r2
 800800a:	d901      	bls.n	8008010 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800800c:	2303      	movs	r3, #3
 800800e:	e0af      	b.n	8008170 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008010:	4b5a      	ldr	r3, [pc, #360]	; (800817c <HAL_RCC_OscConfig+0x4e8>)
 8008012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008014:	f003 0302 	and.w	r3, r3, #2
 8008018:	2b00      	cmp	r3, #0
 800801a:	d1ee      	bne.n	8007ffa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800801c:	7dfb      	ldrb	r3, [r7, #23]
 800801e:	2b01      	cmp	r3, #1
 8008020:	d105      	bne.n	800802e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008022:	4b56      	ldr	r3, [pc, #344]	; (800817c <HAL_RCC_OscConfig+0x4e8>)
 8008024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008026:	4a55      	ldr	r2, [pc, #340]	; (800817c <HAL_RCC_OscConfig+0x4e8>)
 8008028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800802c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	699b      	ldr	r3, [r3, #24]
 8008032:	2b00      	cmp	r3, #0
 8008034:	f000 809b 	beq.w	800816e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008038:	4b50      	ldr	r3, [pc, #320]	; (800817c <HAL_RCC_OscConfig+0x4e8>)
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	f003 030c 	and.w	r3, r3, #12
 8008040:	2b08      	cmp	r3, #8
 8008042:	d05c      	beq.n	80080fe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	699b      	ldr	r3, [r3, #24]
 8008048:	2b02      	cmp	r3, #2
 800804a:	d141      	bne.n	80080d0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800804c:	4b4c      	ldr	r3, [pc, #304]	; (8008180 <HAL_RCC_OscConfig+0x4ec>)
 800804e:	2200      	movs	r2, #0
 8008050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008052:	f7fc fd6d 	bl	8004b30 <HAL_GetTick>
 8008056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008058:	e008      	b.n	800806c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800805a:	f7fc fd69 	bl	8004b30 <HAL_GetTick>
 800805e:	4602      	mov	r2, r0
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	1ad3      	subs	r3, r2, r3
 8008064:	2b02      	cmp	r3, #2
 8008066:	d901      	bls.n	800806c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008068:	2303      	movs	r3, #3
 800806a:	e081      	b.n	8008170 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800806c:	4b43      	ldr	r3, [pc, #268]	; (800817c <HAL_RCC_OscConfig+0x4e8>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008074:	2b00      	cmp	r3, #0
 8008076:	d1f0      	bne.n	800805a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	69da      	ldr	r2, [r3, #28]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6a1b      	ldr	r3, [r3, #32]
 8008080:	431a      	orrs	r2, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008086:	019b      	lsls	r3, r3, #6
 8008088:	431a      	orrs	r2, r3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800808e:	085b      	lsrs	r3, r3, #1
 8008090:	3b01      	subs	r3, #1
 8008092:	041b      	lsls	r3, r3, #16
 8008094:	431a      	orrs	r2, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809a:	061b      	lsls	r3, r3, #24
 800809c:	4937      	ldr	r1, [pc, #220]	; (800817c <HAL_RCC_OscConfig+0x4e8>)
 800809e:	4313      	orrs	r3, r2
 80080a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080a2:	4b37      	ldr	r3, [pc, #220]	; (8008180 <HAL_RCC_OscConfig+0x4ec>)
 80080a4:	2201      	movs	r2, #1
 80080a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080a8:	f7fc fd42 	bl	8004b30 <HAL_GetTick>
 80080ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080ae:	e008      	b.n	80080c2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080b0:	f7fc fd3e 	bl	8004b30 <HAL_GetTick>
 80080b4:	4602      	mov	r2, r0
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	1ad3      	subs	r3, r2, r3
 80080ba:	2b02      	cmp	r3, #2
 80080bc:	d901      	bls.n	80080c2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80080be:	2303      	movs	r3, #3
 80080c0:	e056      	b.n	8008170 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080c2:	4b2e      	ldr	r3, [pc, #184]	; (800817c <HAL_RCC_OscConfig+0x4e8>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d0f0      	beq.n	80080b0 <HAL_RCC_OscConfig+0x41c>
 80080ce:	e04e      	b.n	800816e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080d0:	4b2b      	ldr	r3, [pc, #172]	; (8008180 <HAL_RCC_OscConfig+0x4ec>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080d6:	f7fc fd2b 	bl	8004b30 <HAL_GetTick>
 80080da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080dc:	e008      	b.n	80080f0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080de:	f7fc fd27 	bl	8004b30 <HAL_GetTick>
 80080e2:	4602      	mov	r2, r0
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	1ad3      	subs	r3, r2, r3
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	d901      	bls.n	80080f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80080ec:	2303      	movs	r3, #3
 80080ee:	e03f      	b.n	8008170 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080f0:	4b22      	ldr	r3, [pc, #136]	; (800817c <HAL_RCC_OscConfig+0x4e8>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d1f0      	bne.n	80080de <HAL_RCC_OscConfig+0x44a>
 80080fc:	e037      	b.n	800816e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	2b01      	cmp	r3, #1
 8008104:	d101      	bne.n	800810a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e032      	b.n	8008170 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800810a:	4b1c      	ldr	r3, [pc, #112]	; (800817c <HAL_RCC_OscConfig+0x4e8>)
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	2b01      	cmp	r3, #1
 8008116:	d028      	beq.n	800816a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008122:	429a      	cmp	r2, r3
 8008124:	d121      	bne.n	800816a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008130:	429a      	cmp	r2, r3
 8008132:	d11a      	bne.n	800816a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800813a:	4013      	ands	r3, r2
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008140:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008142:	4293      	cmp	r3, r2
 8008144:	d111      	bne.n	800816a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008150:	085b      	lsrs	r3, r3, #1
 8008152:	3b01      	subs	r3, #1
 8008154:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008156:	429a      	cmp	r2, r3
 8008158:	d107      	bne.n	800816a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008164:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008166:	429a      	cmp	r2, r3
 8008168:	d001      	beq.n	800816e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	e000      	b.n	8008170 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800816e:	2300      	movs	r3, #0
}
 8008170:	4618      	mov	r0, r3
 8008172:	3718      	adds	r7, #24
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	40007000 	.word	0x40007000
 800817c:	40023800 	.word	0x40023800
 8008180:	42470060 	.word	0x42470060

08008184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d101      	bne.n	8008198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	e0cc      	b.n	8008332 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008198:	4b68      	ldr	r3, [pc, #416]	; (800833c <HAL_RCC_ClockConfig+0x1b8>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f003 030f 	and.w	r3, r3, #15
 80081a0:	683a      	ldr	r2, [r7, #0]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d90c      	bls.n	80081c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081a6:	4b65      	ldr	r3, [pc, #404]	; (800833c <HAL_RCC_ClockConfig+0x1b8>)
 80081a8:	683a      	ldr	r2, [r7, #0]
 80081aa:	b2d2      	uxtb	r2, r2
 80081ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80081ae:	4b63      	ldr	r3, [pc, #396]	; (800833c <HAL_RCC_ClockConfig+0x1b8>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f003 030f 	and.w	r3, r3, #15
 80081b6:	683a      	ldr	r2, [r7, #0]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d001      	beq.n	80081c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	e0b8      	b.n	8008332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 0302 	and.w	r3, r3, #2
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d020      	beq.n	800820e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 0304 	and.w	r3, r3, #4
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d005      	beq.n	80081e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80081d8:	4b59      	ldr	r3, [pc, #356]	; (8008340 <HAL_RCC_ClockConfig+0x1bc>)
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	4a58      	ldr	r2, [pc, #352]	; (8008340 <HAL_RCC_ClockConfig+0x1bc>)
 80081de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80081e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 0308 	and.w	r3, r3, #8
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d005      	beq.n	80081fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80081f0:	4b53      	ldr	r3, [pc, #332]	; (8008340 <HAL_RCC_ClockConfig+0x1bc>)
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	4a52      	ldr	r2, [pc, #328]	; (8008340 <HAL_RCC_ClockConfig+0x1bc>)
 80081f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80081fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081fc:	4b50      	ldr	r3, [pc, #320]	; (8008340 <HAL_RCC_ClockConfig+0x1bc>)
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	494d      	ldr	r1, [pc, #308]	; (8008340 <HAL_RCC_ClockConfig+0x1bc>)
 800820a:	4313      	orrs	r3, r2
 800820c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f003 0301 	and.w	r3, r3, #1
 8008216:	2b00      	cmp	r3, #0
 8008218:	d044      	beq.n	80082a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	2b01      	cmp	r3, #1
 8008220:	d107      	bne.n	8008232 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008222:	4b47      	ldr	r3, [pc, #284]	; (8008340 <HAL_RCC_ClockConfig+0x1bc>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800822a:	2b00      	cmp	r3, #0
 800822c:	d119      	bne.n	8008262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e07f      	b.n	8008332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	2b02      	cmp	r3, #2
 8008238:	d003      	beq.n	8008242 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800823e:	2b03      	cmp	r3, #3
 8008240:	d107      	bne.n	8008252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008242:	4b3f      	ldr	r3, [pc, #252]	; (8008340 <HAL_RCC_ClockConfig+0x1bc>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800824a:	2b00      	cmp	r3, #0
 800824c:	d109      	bne.n	8008262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	e06f      	b.n	8008332 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008252:	4b3b      	ldr	r3, [pc, #236]	; (8008340 <HAL_RCC_ClockConfig+0x1bc>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f003 0302 	and.w	r3, r3, #2
 800825a:	2b00      	cmp	r3, #0
 800825c:	d101      	bne.n	8008262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	e067      	b.n	8008332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008262:	4b37      	ldr	r3, [pc, #220]	; (8008340 <HAL_RCC_ClockConfig+0x1bc>)
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	f023 0203 	bic.w	r2, r3, #3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	4934      	ldr	r1, [pc, #208]	; (8008340 <HAL_RCC_ClockConfig+0x1bc>)
 8008270:	4313      	orrs	r3, r2
 8008272:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008274:	f7fc fc5c 	bl	8004b30 <HAL_GetTick>
 8008278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800827a:	e00a      	b.n	8008292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800827c:	f7fc fc58 	bl	8004b30 <HAL_GetTick>
 8008280:	4602      	mov	r2, r0
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	1ad3      	subs	r3, r2, r3
 8008286:	f241 3288 	movw	r2, #5000	; 0x1388
 800828a:	4293      	cmp	r3, r2
 800828c:	d901      	bls.n	8008292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800828e:	2303      	movs	r3, #3
 8008290:	e04f      	b.n	8008332 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008292:	4b2b      	ldr	r3, [pc, #172]	; (8008340 <HAL_RCC_ClockConfig+0x1bc>)
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	f003 020c 	and.w	r2, r3, #12
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d1eb      	bne.n	800827c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80082a4:	4b25      	ldr	r3, [pc, #148]	; (800833c <HAL_RCC_ClockConfig+0x1b8>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f003 030f 	and.w	r3, r3, #15
 80082ac:	683a      	ldr	r2, [r7, #0]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d20c      	bcs.n	80082cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082b2:	4b22      	ldr	r3, [pc, #136]	; (800833c <HAL_RCC_ClockConfig+0x1b8>)
 80082b4:	683a      	ldr	r2, [r7, #0]
 80082b6:	b2d2      	uxtb	r2, r2
 80082b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082ba:	4b20      	ldr	r3, [pc, #128]	; (800833c <HAL_RCC_ClockConfig+0x1b8>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f003 030f 	and.w	r3, r3, #15
 80082c2:	683a      	ldr	r2, [r7, #0]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d001      	beq.n	80082cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	e032      	b.n	8008332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f003 0304 	and.w	r3, r3, #4
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d008      	beq.n	80082ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80082d8:	4b19      	ldr	r3, [pc, #100]	; (8008340 <HAL_RCC_ClockConfig+0x1bc>)
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	4916      	ldr	r1, [pc, #88]	; (8008340 <HAL_RCC_ClockConfig+0x1bc>)
 80082e6:	4313      	orrs	r3, r2
 80082e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f003 0308 	and.w	r3, r3, #8
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d009      	beq.n	800830a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80082f6:	4b12      	ldr	r3, [pc, #72]	; (8008340 <HAL_RCC_ClockConfig+0x1bc>)
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	00db      	lsls	r3, r3, #3
 8008304:	490e      	ldr	r1, [pc, #56]	; (8008340 <HAL_RCC_ClockConfig+0x1bc>)
 8008306:	4313      	orrs	r3, r2
 8008308:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800830a:	f000 f821 	bl	8008350 <HAL_RCC_GetSysClockFreq>
 800830e:	4602      	mov	r2, r0
 8008310:	4b0b      	ldr	r3, [pc, #44]	; (8008340 <HAL_RCC_ClockConfig+0x1bc>)
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	091b      	lsrs	r3, r3, #4
 8008316:	f003 030f 	and.w	r3, r3, #15
 800831a:	490a      	ldr	r1, [pc, #40]	; (8008344 <HAL_RCC_ClockConfig+0x1c0>)
 800831c:	5ccb      	ldrb	r3, [r1, r3]
 800831e:	fa22 f303 	lsr.w	r3, r2, r3
 8008322:	4a09      	ldr	r2, [pc, #36]	; (8008348 <HAL_RCC_ClockConfig+0x1c4>)
 8008324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008326:	4b09      	ldr	r3, [pc, #36]	; (800834c <HAL_RCC_ClockConfig+0x1c8>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4618      	mov	r0, r3
 800832c:	f7fa fd38 	bl	8002da0 <HAL_InitTick>

  return HAL_OK;
 8008330:	2300      	movs	r3, #0
}
 8008332:	4618      	mov	r0, r3
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	40023c00 	.word	0x40023c00
 8008340:	40023800 	.word	0x40023800
 8008344:	08016a88 	.word	0x08016a88
 8008348:	20000000 	.word	0x20000000
 800834c:	20000004 	.word	0x20000004

08008350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008350:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008354:	b084      	sub	sp, #16
 8008356:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008358:	2300      	movs	r3, #0
 800835a:	607b      	str	r3, [r7, #4]
 800835c:	2300      	movs	r3, #0
 800835e:	60fb      	str	r3, [r7, #12]
 8008360:	2300      	movs	r3, #0
 8008362:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008364:	2300      	movs	r3, #0
 8008366:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008368:	4b67      	ldr	r3, [pc, #412]	; (8008508 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	f003 030c 	and.w	r3, r3, #12
 8008370:	2b08      	cmp	r3, #8
 8008372:	d00d      	beq.n	8008390 <HAL_RCC_GetSysClockFreq+0x40>
 8008374:	2b08      	cmp	r3, #8
 8008376:	f200 80bd 	bhi.w	80084f4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800837a:	2b00      	cmp	r3, #0
 800837c:	d002      	beq.n	8008384 <HAL_RCC_GetSysClockFreq+0x34>
 800837e:	2b04      	cmp	r3, #4
 8008380:	d003      	beq.n	800838a <HAL_RCC_GetSysClockFreq+0x3a>
 8008382:	e0b7      	b.n	80084f4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008384:	4b61      	ldr	r3, [pc, #388]	; (800850c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008386:	60bb      	str	r3, [r7, #8]
       break;
 8008388:	e0b7      	b.n	80084fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800838a:	4b60      	ldr	r3, [pc, #384]	; (800850c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800838c:	60bb      	str	r3, [r7, #8]
      break;
 800838e:	e0b4      	b.n	80084fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008390:	4b5d      	ldr	r3, [pc, #372]	; (8008508 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008398:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800839a:	4b5b      	ldr	r3, [pc, #364]	; (8008508 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d04d      	beq.n	8008442 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80083a6:	4b58      	ldr	r3, [pc, #352]	; (8008508 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	099b      	lsrs	r3, r3, #6
 80083ac:	461a      	mov	r2, r3
 80083ae:	f04f 0300 	mov.w	r3, #0
 80083b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80083b6:	f04f 0100 	mov.w	r1, #0
 80083ba:	ea02 0800 	and.w	r8, r2, r0
 80083be:	ea03 0901 	and.w	r9, r3, r1
 80083c2:	4640      	mov	r0, r8
 80083c4:	4649      	mov	r1, r9
 80083c6:	f04f 0200 	mov.w	r2, #0
 80083ca:	f04f 0300 	mov.w	r3, #0
 80083ce:	014b      	lsls	r3, r1, #5
 80083d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80083d4:	0142      	lsls	r2, r0, #5
 80083d6:	4610      	mov	r0, r2
 80083d8:	4619      	mov	r1, r3
 80083da:	ebb0 0008 	subs.w	r0, r0, r8
 80083de:	eb61 0109 	sbc.w	r1, r1, r9
 80083e2:	f04f 0200 	mov.w	r2, #0
 80083e6:	f04f 0300 	mov.w	r3, #0
 80083ea:	018b      	lsls	r3, r1, #6
 80083ec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80083f0:	0182      	lsls	r2, r0, #6
 80083f2:	1a12      	subs	r2, r2, r0
 80083f4:	eb63 0301 	sbc.w	r3, r3, r1
 80083f8:	f04f 0000 	mov.w	r0, #0
 80083fc:	f04f 0100 	mov.w	r1, #0
 8008400:	00d9      	lsls	r1, r3, #3
 8008402:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008406:	00d0      	lsls	r0, r2, #3
 8008408:	4602      	mov	r2, r0
 800840a:	460b      	mov	r3, r1
 800840c:	eb12 0208 	adds.w	r2, r2, r8
 8008410:	eb43 0309 	adc.w	r3, r3, r9
 8008414:	f04f 0000 	mov.w	r0, #0
 8008418:	f04f 0100 	mov.w	r1, #0
 800841c:	0299      	lsls	r1, r3, #10
 800841e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008422:	0290      	lsls	r0, r2, #10
 8008424:	4602      	mov	r2, r0
 8008426:	460b      	mov	r3, r1
 8008428:	4610      	mov	r0, r2
 800842a:	4619      	mov	r1, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	461a      	mov	r2, r3
 8008430:	f04f 0300 	mov.w	r3, #0
 8008434:	f7f8 fc38 	bl	8000ca8 <__aeabi_uldivmod>
 8008438:	4602      	mov	r2, r0
 800843a:	460b      	mov	r3, r1
 800843c:	4613      	mov	r3, r2
 800843e:	60fb      	str	r3, [r7, #12]
 8008440:	e04a      	b.n	80084d8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008442:	4b31      	ldr	r3, [pc, #196]	; (8008508 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	099b      	lsrs	r3, r3, #6
 8008448:	461a      	mov	r2, r3
 800844a:	f04f 0300 	mov.w	r3, #0
 800844e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008452:	f04f 0100 	mov.w	r1, #0
 8008456:	ea02 0400 	and.w	r4, r2, r0
 800845a:	ea03 0501 	and.w	r5, r3, r1
 800845e:	4620      	mov	r0, r4
 8008460:	4629      	mov	r1, r5
 8008462:	f04f 0200 	mov.w	r2, #0
 8008466:	f04f 0300 	mov.w	r3, #0
 800846a:	014b      	lsls	r3, r1, #5
 800846c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008470:	0142      	lsls	r2, r0, #5
 8008472:	4610      	mov	r0, r2
 8008474:	4619      	mov	r1, r3
 8008476:	1b00      	subs	r0, r0, r4
 8008478:	eb61 0105 	sbc.w	r1, r1, r5
 800847c:	f04f 0200 	mov.w	r2, #0
 8008480:	f04f 0300 	mov.w	r3, #0
 8008484:	018b      	lsls	r3, r1, #6
 8008486:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800848a:	0182      	lsls	r2, r0, #6
 800848c:	1a12      	subs	r2, r2, r0
 800848e:	eb63 0301 	sbc.w	r3, r3, r1
 8008492:	f04f 0000 	mov.w	r0, #0
 8008496:	f04f 0100 	mov.w	r1, #0
 800849a:	00d9      	lsls	r1, r3, #3
 800849c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80084a0:	00d0      	lsls	r0, r2, #3
 80084a2:	4602      	mov	r2, r0
 80084a4:	460b      	mov	r3, r1
 80084a6:	1912      	adds	r2, r2, r4
 80084a8:	eb45 0303 	adc.w	r3, r5, r3
 80084ac:	f04f 0000 	mov.w	r0, #0
 80084b0:	f04f 0100 	mov.w	r1, #0
 80084b4:	0299      	lsls	r1, r3, #10
 80084b6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80084ba:	0290      	lsls	r0, r2, #10
 80084bc:	4602      	mov	r2, r0
 80084be:	460b      	mov	r3, r1
 80084c0:	4610      	mov	r0, r2
 80084c2:	4619      	mov	r1, r3
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	461a      	mov	r2, r3
 80084c8:	f04f 0300 	mov.w	r3, #0
 80084cc:	f7f8 fbec 	bl	8000ca8 <__aeabi_uldivmod>
 80084d0:	4602      	mov	r2, r0
 80084d2:	460b      	mov	r3, r1
 80084d4:	4613      	mov	r3, r2
 80084d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80084d8:	4b0b      	ldr	r3, [pc, #44]	; (8008508 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	0c1b      	lsrs	r3, r3, #16
 80084de:	f003 0303 	and.w	r3, r3, #3
 80084e2:	3301      	adds	r3, #1
 80084e4:	005b      	lsls	r3, r3, #1
 80084e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80084e8:	68fa      	ldr	r2, [r7, #12]
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80084f0:	60bb      	str	r3, [r7, #8]
      break;
 80084f2:	e002      	b.n	80084fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80084f4:	4b05      	ldr	r3, [pc, #20]	; (800850c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80084f6:	60bb      	str	r3, [r7, #8]
      break;
 80084f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80084fa:	68bb      	ldr	r3, [r7, #8]
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008506:	bf00      	nop
 8008508:	40023800 	.word	0x40023800
 800850c:	00f42400 	.word	0x00f42400

08008510 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008510:	b480      	push	{r7}
 8008512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008514:	4b03      	ldr	r3, [pc, #12]	; (8008524 <HAL_RCC_GetHCLKFreq+0x14>)
 8008516:	681b      	ldr	r3, [r3, #0]
}
 8008518:	4618      	mov	r0, r3
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop
 8008524:	20000000 	.word	0x20000000

08008528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800852c:	f7ff fff0 	bl	8008510 <HAL_RCC_GetHCLKFreq>
 8008530:	4602      	mov	r2, r0
 8008532:	4b05      	ldr	r3, [pc, #20]	; (8008548 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	0a9b      	lsrs	r3, r3, #10
 8008538:	f003 0307 	and.w	r3, r3, #7
 800853c:	4903      	ldr	r1, [pc, #12]	; (800854c <HAL_RCC_GetPCLK1Freq+0x24>)
 800853e:	5ccb      	ldrb	r3, [r1, r3]
 8008540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008544:	4618      	mov	r0, r3
 8008546:	bd80      	pop	{r7, pc}
 8008548:	40023800 	.word	0x40023800
 800854c:	08016a98 	.word	0x08016a98

08008550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008554:	f7ff ffdc 	bl	8008510 <HAL_RCC_GetHCLKFreq>
 8008558:	4602      	mov	r2, r0
 800855a:	4b05      	ldr	r3, [pc, #20]	; (8008570 <HAL_RCC_GetPCLK2Freq+0x20>)
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	0b5b      	lsrs	r3, r3, #13
 8008560:	f003 0307 	and.w	r3, r3, #7
 8008564:	4903      	ldr	r1, [pc, #12]	; (8008574 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008566:	5ccb      	ldrb	r3, [r1, r3]
 8008568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800856c:	4618      	mov	r0, r3
 800856e:	bd80      	pop	{r7, pc}
 8008570:	40023800 	.word	0x40023800
 8008574:	08016a98 	.word	0x08016a98

08008578 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	220f      	movs	r2, #15
 8008586:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008588:	4b12      	ldr	r3, [pc, #72]	; (80085d4 <HAL_RCC_GetClockConfig+0x5c>)
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	f003 0203 	and.w	r2, r3, #3
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008594:	4b0f      	ldr	r3, [pc, #60]	; (80085d4 <HAL_RCC_GetClockConfig+0x5c>)
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80085a0:	4b0c      	ldr	r3, [pc, #48]	; (80085d4 <HAL_RCC_GetClockConfig+0x5c>)
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80085ac:	4b09      	ldr	r3, [pc, #36]	; (80085d4 <HAL_RCC_GetClockConfig+0x5c>)
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	08db      	lsrs	r3, r3, #3
 80085b2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80085ba:	4b07      	ldr	r3, [pc, #28]	; (80085d8 <HAL_RCC_GetClockConfig+0x60>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f003 020f 	and.w	r2, r3, #15
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	601a      	str	r2, [r3, #0]
}
 80085c6:	bf00      	nop
 80085c8:	370c      	adds	r7, #12
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop
 80085d4:	40023800 	.word	0x40023800
 80085d8:	40023c00 	.word	0x40023c00

080085dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b086      	sub	sp, #24
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80085e4:	2300      	movs	r3, #0
 80085e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80085e8:	2300      	movs	r3, #0
 80085ea:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 0301 	and.w	r3, r3, #1
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d10b      	bne.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008600:	2b00      	cmp	r3, #0
 8008602:	d105      	bne.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800860c:	2b00      	cmp	r3, #0
 800860e:	d075      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008610:	4bad      	ldr	r3, [pc, #692]	; (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8008612:	2200      	movs	r2, #0
 8008614:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008616:	f7fc fa8b 	bl	8004b30 <HAL_GetTick>
 800861a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800861c:	e008      	b.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800861e:	f7fc fa87 	bl	8004b30 <HAL_GetTick>
 8008622:	4602      	mov	r2, r0
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	2b02      	cmp	r3, #2
 800862a:	d901      	bls.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800862c:	2303      	movs	r3, #3
 800862e:	e18b      	b.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008630:	4ba6      	ldr	r3, [pc, #664]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1f0      	bne.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 0301 	and.w	r3, r3, #1
 8008644:	2b00      	cmp	r3, #0
 8008646:	d009      	beq.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	019a      	lsls	r2, r3, #6
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	071b      	lsls	r3, r3, #28
 8008654:	499d      	ldr	r1, [pc, #628]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008656:	4313      	orrs	r3, r2
 8008658:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f003 0302 	and.w	r3, r3, #2
 8008664:	2b00      	cmp	r3, #0
 8008666:	d01f      	beq.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008668:	4b98      	ldr	r3, [pc, #608]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800866a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800866e:	0f1b      	lsrs	r3, r3, #28
 8008670:	f003 0307 	and.w	r3, r3, #7
 8008674:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	019a      	lsls	r2, r3, #6
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	061b      	lsls	r3, r3, #24
 8008682:	431a      	orrs	r2, r3
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	071b      	lsls	r3, r3, #28
 8008688:	4990      	ldr	r1, [pc, #576]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800868a:	4313      	orrs	r3, r2
 800868c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008690:	4b8e      	ldr	r3, [pc, #568]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008692:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008696:	f023 021f 	bic.w	r2, r3, #31
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	69db      	ldr	r3, [r3, #28]
 800869e:	3b01      	subs	r3, #1
 80086a0:	498a      	ldr	r1, [pc, #552]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80086a2:	4313      	orrs	r3, r2
 80086a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00d      	beq.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	019a      	lsls	r2, r3, #6
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	061b      	lsls	r3, r3, #24
 80086c0:	431a      	orrs	r2, r3
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	071b      	lsls	r3, r3, #28
 80086c8:	4980      	ldr	r1, [pc, #512]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80086ca:	4313      	orrs	r3, r2
 80086cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80086d0:	4b7d      	ldr	r3, [pc, #500]	; (80088c8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80086d2:	2201      	movs	r2, #1
 80086d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80086d6:	f7fc fa2b 	bl	8004b30 <HAL_GetTick>
 80086da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80086dc:	e008      	b.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80086de:	f7fc fa27 	bl	8004b30 <HAL_GetTick>
 80086e2:	4602      	mov	r2, r0
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	1ad3      	subs	r3, r2, r3
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d901      	bls.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80086ec:	2303      	movs	r3, #3
 80086ee:	e12b      	b.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80086f0:	4b76      	ldr	r3, [pc, #472]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d0f0      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f003 0304 	and.w	r3, r3, #4
 8008704:	2b00      	cmp	r3, #0
 8008706:	d105      	bne.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008710:	2b00      	cmp	r3, #0
 8008712:	d079      	beq.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008714:	4b6e      	ldr	r3, [pc, #440]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008716:	2200      	movs	r2, #0
 8008718:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800871a:	f7fc fa09 	bl	8004b30 <HAL_GetTick>
 800871e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008720:	e008      	b.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008722:	f7fc fa05 	bl	8004b30 <HAL_GetTick>
 8008726:	4602      	mov	r2, r0
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	1ad3      	subs	r3, r2, r3
 800872c:	2b02      	cmp	r3, #2
 800872e:	d901      	bls.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008730:	2303      	movs	r3, #3
 8008732:	e109      	b.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008734:	4b65      	ldr	r3, [pc, #404]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800873c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008740:	d0ef      	beq.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f003 0304 	and.w	r3, r3, #4
 800874a:	2b00      	cmp	r3, #0
 800874c:	d020      	beq.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800874e:	4b5f      	ldr	r3, [pc, #380]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008754:	0f1b      	lsrs	r3, r3, #28
 8008756:	f003 0307 	and.w	r3, r3, #7
 800875a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	691b      	ldr	r3, [r3, #16]
 8008760:	019a      	lsls	r2, r3, #6
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	695b      	ldr	r3, [r3, #20]
 8008766:	061b      	lsls	r3, r3, #24
 8008768:	431a      	orrs	r2, r3
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	071b      	lsls	r3, r3, #28
 800876e:	4957      	ldr	r1, [pc, #348]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008770:	4313      	orrs	r3, r2
 8008772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008776:	4b55      	ldr	r3, [pc, #340]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800877c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6a1b      	ldr	r3, [r3, #32]
 8008784:	3b01      	subs	r3, #1
 8008786:	021b      	lsls	r3, r3, #8
 8008788:	4950      	ldr	r1, [pc, #320]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800878a:	4313      	orrs	r3, r2
 800878c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 0308 	and.w	r3, r3, #8
 8008798:	2b00      	cmp	r3, #0
 800879a:	d01e      	beq.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800879c:	4b4b      	ldr	r3, [pc, #300]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800879e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087a2:	0e1b      	lsrs	r3, r3, #24
 80087a4:	f003 030f 	and.w	r3, r3, #15
 80087a8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	691b      	ldr	r3, [r3, #16]
 80087ae:	019a      	lsls	r2, r3, #6
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	061b      	lsls	r3, r3, #24
 80087b4:	431a      	orrs	r2, r3
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	699b      	ldr	r3, [r3, #24]
 80087ba:	071b      	lsls	r3, r3, #28
 80087bc:	4943      	ldr	r1, [pc, #268]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80087be:	4313      	orrs	r3, r2
 80087c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80087c4:	4b41      	ldr	r3, [pc, #260]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80087c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d2:	493e      	ldr	r1, [pc, #248]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80087d4:	4313      	orrs	r3, r2
 80087d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80087da:	4b3d      	ldr	r3, [pc, #244]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80087dc:	2201      	movs	r2, #1
 80087de:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80087e0:	f7fc f9a6 	bl	8004b30 <HAL_GetTick>
 80087e4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80087e6:	e008      	b.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80087e8:	f7fc f9a2 	bl	8004b30 <HAL_GetTick>
 80087ec:	4602      	mov	r2, r0
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	2b02      	cmp	r3, #2
 80087f4:	d901      	bls.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80087f6:	2303      	movs	r3, #3
 80087f8:	e0a6      	b.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80087fa:	4b34      	ldr	r3, [pc, #208]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008802:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008806:	d1ef      	bne.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f003 0320 	and.w	r3, r3, #32
 8008810:	2b00      	cmp	r3, #0
 8008812:	f000 808d 	beq.w	8008930 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008816:	2300      	movs	r3, #0
 8008818:	60fb      	str	r3, [r7, #12]
 800881a:	4b2c      	ldr	r3, [pc, #176]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800881c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800881e:	4a2b      	ldr	r2, [pc, #172]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008824:	6413      	str	r3, [r2, #64]	; 0x40
 8008826:	4b29      	ldr	r3, [pc, #164]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800882a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800882e:	60fb      	str	r3, [r7, #12]
 8008830:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008832:	4b28      	ldr	r3, [pc, #160]	; (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a27      	ldr	r2, [pc, #156]	; (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800883c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800883e:	f7fc f977 	bl	8004b30 <HAL_GetTick>
 8008842:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008844:	e008      	b.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008846:	f7fc f973 	bl	8004b30 <HAL_GetTick>
 800884a:	4602      	mov	r2, r0
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	1ad3      	subs	r3, r2, r3
 8008850:	2b02      	cmp	r3, #2
 8008852:	d901      	bls.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8008854:	2303      	movs	r3, #3
 8008856:	e077      	b.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008858:	4b1e      	ldr	r3, [pc, #120]	; (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008860:	2b00      	cmp	r3, #0
 8008862:	d0f0      	beq.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008864:	4b19      	ldr	r3, [pc, #100]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008868:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800886c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d039      	beq.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008878:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800887c:	693a      	ldr	r2, [r7, #16]
 800887e:	429a      	cmp	r2, r3
 8008880:	d032      	beq.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008882:	4b12      	ldr	r3, [pc, #72]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800888a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800888c:	4b12      	ldr	r3, [pc, #72]	; (80088d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800888e:	2201      	movs	r2, #1
 8008890:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008892:	4b11      	ldr	r3, [pc, #68]	; (80088d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008894:	2200      	movs	r2, #0
 8008896:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008898:	4a0c      	ldr	r2, [pc, #48]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800889e:	4b0b      	ldr	r3, [pc, #44]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80088a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088a2:	f003 0301 	and.w	r3, r3, #1
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d11e      	bne.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80088aa:	f7fc f941 	bl	8004b30 <HAL_GetTick>
 80088ae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088b0:	e014      	b.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80088b2:	f7fc f93d 	bl	8004b30 <HAL_GetTick>
 80088b6:	4602      	mov	r2, r0
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	1ad3      	subs	r3, r2, r3
 80088bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d90b      	bls.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80088c4:	2303      	movs	r3, #3
 80088c6:	e03f      	b.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80088c8:	42470068 	.word	0x42470068
 80088cc:	40023800 	.word	0x40023800
 80088d0:	42470070 	.word	0x42470070
 80088d4:	40007000 	.word	0x40007000
 80088d8:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088dc:	4b1c      	ldr	r3, [pc, #112]	; (8008950 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80088de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088e0:	f003 0302 	and.w	r3, r3, #2
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d0e4      	beq.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088f4:	d10d      	bne.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80088f6:	4b16      	ldr	r3, [pc, #88]	; (8008950 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008902:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008906:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800890a:	4911      	ldr	r1, [pc, #68]	; (8008950 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800890c:	4313      	orrs	r3, r2
 800890e:	608b      	str	r3, [r1, #8]
 8008910:	e005      	b.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008912:	4b0f      	ldr	r3, [pc, #60]	; (8008950 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	4a0e      	ldr	r2, [pc, #56]	; (8008950 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008918:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800891c:	6093      	str	r3, [r2, #8]
 800891e:	4b0c      	ldr	r3, [pc, #48]	; (8008950 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008920:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800892a:	4909      	ldr	r1, [pc, #36]	; (8008950 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800892c:	4313      	orrs	r3, r2
 800892e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 0310 	and.w	r3, r3, #16
 8008938:	2b00      	cmp	r3, #0
 800893a:	d004      	beq.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8008942:	4b04      	ldr	r3, [pc, #16]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008944:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3718      	adds	r7, #24
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}
 8008950:	40023800 	.word	0x40023800
 8008954:	424711e0 	.word	0x424711e0

08008958 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d101      	bne.n	800896a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	e083      	b.n	8008a72 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	7f5b      	ldrb	r3, [r3, #29]
 800896e:	b2db      	uxtb	r3, r3
 8008970:	2b00      	cmp	r3, #0
 8008972:	d105      	bne.n	8008980 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f7fa f81c 	bl	80029b8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2202      	movs	r2, #2
 8008984:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	22ca      	movs	r2, #202	; 0xca
 800898c:	625a      	str	r2, [r3, #36]	; 0x24
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2253      	movs	r2, #83	; 0x53
 8008994:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 fb7a 	bl	8009090 <RTC_EnterInitMode>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d008      	beq.n	80089b4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	22ff      	movs	r2, #255	; 0xff
 80089a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2204      	movs	r2, #4
 80089ae:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	e05e      	b.n	8008a72 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	6812      	ldr	r2, [r2, #0]
 80089be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80089c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089c6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	6899      	ldr	r1, [r3, #8]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	685a      	ldr	r2, [r3, #4]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	431a      	orrs	r2, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	695b      	ldr	r3, [r3, #20]
 80089dc:	431a      	orrs	r2, r3
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	430a      	orrs	r2, r1
 80089e4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	68d2      	ldr	r2, [r2, #12]
 80089ee:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	6919      	ldr	r1, [r3, #16]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	041a      	lsls	r2, r3, #16
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	430a      	orrs	r2, r1
 8008a02:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	68da      	ldr	r2, [r3, #12]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a12:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	f003 0320 	and.w	r3, r3, #32
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d10e      	bne.n	8008a40 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 fb0c 	bl	8009040 <HAL_RTC_WaitForSynchro>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d008      	beq.n	8008a40 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	22ff      	movs	r2, #255	; 0xff
 8008a34:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2204      	movs	r2, #4
 8008a3a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	e018      	b.n	8008a72 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008a4e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	699a      	ldr	r2, [r3, #24]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	430a      	orrs	r2, r1
 8008a60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	22ff      	movs	r2, #255	; 0xff
 8008a68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008a70:	2300      	movs	r3, #0
  }
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3708      	adds	r7, #8
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008a7a:	b590      	push	{r4, r7, lr}
 8008a7c:	b087      	sub	sp, #28
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	60f8      	str	r0, [r7, #12]
 8008a82:	60b9      	str	r1, [r7, #8]
 8008a84:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008a86:	2300      	movs	r3, #0
 8008a88:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	7f1b      	ldrb	r3, [r3, #28]
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d101      	bne.n	8008a96 <HAL_RTC_SetTime+0x1c>
 8008a92:	2302      	movs	r3, #2
 8008a94:	e0aa      	b.n	8008bec <HAL_RTC_SetTime+0x172>
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2202      	movs	r2, #2
 8008aa0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d126      	bne.n	8008af6 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d102      	bne.n	8008abc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f000 fb11 	bl	80090e8 <RTC_ByteToBcd2>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	785b      	ldrb	r3, [r3, #1]
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f000 fb0a 	bl	80090e8 <RTC_ByteToBcd2>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008ad8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	789b      	ldrb	r3, [r3, #2]
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f000 fb02 	bl	80090e8 <RTC_ByteToBcd2>
 8008ae4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008ae6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	78db      	ldrb	r3, [r3, #3]
 8008aee:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008af0:	4313      	orrs	r3, r2
 8008af2:	617b      	str	r3, [r7, #20]
 8008af4:	e018      	b.n	8008b28 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d102      	bne.n	8008b0a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	2200      	movs	r2, #0
 8008b08:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	785b      	ldrb	r3, [r3, #1]
 8008b14:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008b16:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008b18:	68ba      	ldr	r2, [r7, #8]
 8008b1a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008b1c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	78db      	ldrb	r3, [r3, #3]
 8008b22:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008b24:	4313      	orrs	r3, r2
 8008b26:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	22ca      	movs	r2, #202	; 0xca
 8008b2e:	625a      	str	r2, [r3, #36]	; 0x24
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2253      	movs	r2, #83	; 0x53
 8008b36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008b38:	68f8      	ldr	r0, [r7, #12]
 8008b3a:	f000 faa9 	bl	8009090 <RTC_EnterInitMode>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00b      	beq.n	8008b5c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	22ff      	movs	r2, #255	; 0xff
 8008b4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2204      	movs	r2, #4
 8008b50:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2200      	movs	r2, #0
 8008b56:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	e047      	b.n	8008bec <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008b66:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008b6a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	689a      	ldr	r2, [r3, #8]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008b7a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	6899      	ldr	r1, [r3, #8]
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	68da      	ldr	r2, [r3, #12]
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	691b      	ldr	r3, [r3, #16]
 8008b8a:	431a      	orrs	r2, r3
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	430a      	orrs	r2, r1
 8008b92:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	68da      	ldr	r2, [r3, #12]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ba2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	f003 0320 	and.w	r3, r3, #32
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d111      	bne.n	8008bd6 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008bb2:	68f8      	ldr	r0, [r7, #12]
 8008bb4:	f000 fa44 	bl	8009040 <HAL_RTC_WaitForSynchro>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00b      	beq.n	8008bd6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	22ff      	movs	r2, #255	; 0xff
 8008bc4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2204      	movs	r2, #4
 8008bca:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e00a      	b.n	8008bec <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	22ff      	movs	r2, #255	; 0xff
 8008bdc:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2201      	movs	r2, #1
 8008be2:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2200      	movs	r2, #0
 8008be8:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008bea:	2300      	movs	r3, #0
  }
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	371c      	adds	r7, #28
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd90      	pop	{r4, r7, pc}

08008bf4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008bf4:	b590      	push	{r4, r7, lr}
 8008bf6:	b087      	sub	sp, #28
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008c00:	2300      	movs	r3, #0
 8008c02:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	7f1b      	ldrb	r3, [r3, #28]
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d101      	bne.n	8008c10 <HAL_RTC_SetDate+0x1c>
 8008c0c:	2302      	movs	r3, #2
 8008c0e:	e094      	b.n	8008d3a <HAL_RTC_SetDate+0x146>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2201      	movs	r2, #1
 8008c14:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2202      	movs	r2, #2
 8008c1a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d10e      	bne.n	8008c40 <HAL_RTC_SetDate+0x4c>
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	785b      	ldrb	r3, [r3, #1]
 8008c26:	f003 0310 	and.w	r3, r3, #16
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d008      	beq.n	8008c40 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	785b      	ldrb	r3, [r3, #1]
 8008c32:	f023 0310 	bic.w	r3, r3, #16
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	330a      	adds	r3, #10
 8008c3a:	b2da      	uxtb	r2, r3
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d11c      	bne.n	8008c80 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	78db      	ldrb	r3, [r3, #3]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f000 fa4c 	bl	80090e8 <RTC_ByteToBcd2>
 8008c50:	4603      	mov	r3, r0
 8008c52:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	785b      	ldrb	r3, [r3, #1]
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f000 fa45 	bl	80090e8 <RTC_ByteToBcd2>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008c62:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	789b      	ldrb	r3, [r3, #2]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f000 fa3d 	bl	80090e8 <RTC_ByteToBcd2>
 8008c6e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008c70:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	617b      	str	r3, [r7, #20]
 8008c7e:	e00e      	b.n	8008c9e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	78db      	ldrb	r3, [r3, #3]
 8008c84:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	785b      	ldrb	r3, [r3, #1]
 8008c8a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008c8c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008c8e:	68ba      	ldr	r2, [r7, #8]
 8008c90:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8008c92:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	22ca      	movs	r2, #202	; 0xca
 8008ca4:	625a      	str	r2, [r3, #36]	; 0x24
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2253      	movs	r2, #83	; 0x53
 8008cac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008cae:	68f8      	ldr	r0, [r7, #12]
 8008cb0:	f000 f9ee 	bl	8009090 <RTC_EnterInitMode>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d00b      	beq.n	8008cd2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	22ff      	movs	r2, #255	; 0xff
 8008cc0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2204      	movs	r2, #4
 8008cc6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e033      	b.n	8008d3a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008cdc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008ce0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	68da      	ldr	r2, [r3, #12]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008cf0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	f003 0320 	and.w	r3, r3, #32
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d111      	bne.n	8008d24 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008d00:	68f8      	ldr	r0, [r7, #12]
 8008d02:	f000 f99d 	bl	8009040 <HAL_RTC_WaitForSynchro>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00b      	beq.n	8008d24 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	22ff      	movs	r2, #255	; 0xff
 8008d12:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2204      	movs	r2, #4
 8008d18:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	e00a      	b.n	8008d3a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	22ff      	movs	r2, #255	; 0xff
 8008d2a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2200      	movs	r2, #0
 8008d36:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008d38:	2300      	movs	r3, #0
  }
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	371c      	adds	r7, #28
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd90      	pop	{r4, r7, pc}
	...

08008d44 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008d44:	b590      	push	{r4, r7, lr}
 8008d46:	b089      	sub	sp, #36	; 0x24
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8008d50:	2300      	movs	r3, #0
 8008d52:	61fb      	str	r3, [r7, #28]
 8008d54:	2300      	movs	r3, #0
 8008d56:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8008d58:	4b93      	ldr	r3, [pc, #588]	; (8008fa8 <HAL_RTC_SetAlarm_IT+0x264>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a93      	ldr	r2, [pc, #588]	; (8008fac <HAL_RTC_SetAlarm_IT+0x268>)
 8008d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8008d62:	0adb      	lsrs	r3, r3, #11
 8008d64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008d68:	fb02 f303 	mul.w	r3, r2, r3
 8008d6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	7f1b      	ldrb	r3, [r3, #28]
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d101      	bne.n	8008d7a <HAL_RTC_SetAlarm_IT+0x36>
 8008d76:	2302      	movs	r3, #2
 8008d78:	e111      	b.n	8008f9e <HAL_RTC_SetAlarm_IT+0x25a>
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2202      	movs	r2, #2
 8008d84:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d137      	bne.n	8008dfc <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d102      	bne.n	8008da0 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	781b      	ldrb	r3, [r3, #0]
 8008da4:	4618      	mov	r0, r3
 8008da6:	f000 f99f 	bl	80090e8 <RTC_ByteToBcd2>
 8008daa:	4603      	mov	r3, r0
 8008dac:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	785b      	ldrb	r3, [r3, #1]
 8008db2:	4618      	mov	r0, r3
 8008db4:	f000 f998 	bl	80090e8 <RTC_ByteToBcd2>
 8008db8:	4603      	mov	r3, r0
 8008dba:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008dbc:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	789b      	ldrb	r3, [r3, #2]
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f000 f990 	bl	80090e8 <RTC_ByteToBcd2>
 8008dc8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008dca:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	78db      	ldrb	r3, [r3, #3]
 8008dd2:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008dd4:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008dde:	4618      	mov	r0, r3
 8008de0:	f000 f982 	bl	80090e8 <RTC_ByteToBcd2>
 8008de4:	4603      	mov	r3, r0
 8008de6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008de8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008df0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008df6:	4313      	orrs	r3, r2
 8008df8:	61fb      	str	r3, [r7, #28]
 8008dfa:	e023      	b.n	8008e44 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d102      	bne.n	8008e10 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	785b      	ldrb	r3, [r3, #1]
 8008e1a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008e1c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008e1e:	68ba      	ldr	r2, [r7, #8]
 8008e20:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008e22:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	78db      	ldrb	r3, [r3, #3]
 8008e28:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008e2a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008e32:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008e34:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008e3a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008e40:	4313      	orrs	r3, r2
 8008e42:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	685a      	ldr	r2, [r3, #4]
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	699b      	ldr	r3, [r3, #24]
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	22ca      	movs	r2, #202	; 0xca
 8008e56:	625a      	str	r2, [r3, #36]	; 0x24
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2253      	movs	r2, #83	; 0x53
 8008e5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e68:	d141      	bne.n	8008eee <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	689a      	ldr	r2, [r3, #8]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e78:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	b2da      	uxtb	r2, r3
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008e8a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	1e5a      	subs	r2, r3, #1
 8008e90:	617a      	str	r2, [r7, #20]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d10b      	bne.n	8008eae <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	22ff      	movs	r2, #255	; 0xff
 8008e9c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2203      	movs	r2, #3
 8008ea2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008eaa:	2303      	movs	r3, #3
 8008eac:	e077      	b.n	8008f9e <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	f003 0301 	and.w	r3, r3, #1
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d0e7      	beq.n	8008e8c <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	69fa      	ldr	r2, [r7, #28]
 8008ec2:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	69ba      	ldr	r2, [r7, #24]
 8008eca:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	689a      	ldr	r2, [r3, #8]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008eda:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	689a      	ldr	r2, [r3, #8]
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008eea:	609a      	str	r2, [r3, #8]
 8008eec:	e040      	b.n	8008f70 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	689a      	ldr	r2, [r3, #8]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008efc:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	b2da      	uxtb	r2, r3
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008f0e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	1e5a      	subs	r2, r3, #1
 8008f14:	617a      	str	r2, [r7, #20]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d10b      	bne.n	8008f32 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	22ff      	movs	r2, #255	; 0xff
 8008f20:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2203      	movs	r2, #3
 8008f26:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008f2e:	2303      	movs	r3, #3
 8008f30:	e035      	b.n	8008f9e <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	f003 0302 	and.w	r3, r3, #2
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d0e7      	beq.n	8008f10 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	69fa      	ldr	r2, [r7, #28]
 8008f46:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	69ba      	ldr	r2, [r7, #24]
 8008f4e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	689a      	ldr	r2, [r3, #8]
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f5e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	689a      	ldr	r2, [r3, #8]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008f6e:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8008f70:	4b0f      	ldr	r3, [pc, #60]	; (8008fb0 <HAL_RTC_SetAlarm_IT+0x26c>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a0e      	ldr	r2, [pc, #56]	; (8008fb0 <HAL_RTC_SetAlarm_IT+0x26c>)
 8008f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f7a:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8008f7c:	4b0c      	ldr	r3, [pc, #48]	; (8008fb0 <HAL_RTC_SetAlarm_IT+0x26c>)
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	4a0b      	ldr	r2, [pc, #44]	; (8008fb0 <HAL_RTC_SetAlarm_IT+0x26c>)
 8008f82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f86:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	22ff      	movs	r2, #255	; 0xff
 8008f8e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2201      	movs	r2, #1
 8008f94:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3724      	adds	r7, #36	; 0x24
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd90      	pop	{r4, r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	20000000 	.word	0x20000000
 8008fac:	10624dd3 	.word	0x10624dd3
 8008fb0:	40013c00 	.word	0x40013c00

08008fb4 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	689b      	ldr	r3, [r3, #8]
 8008fc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d012      	beq.n	8008ff0 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d00b      	beq.n	8008ff0 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f7fb fc81 	bl	80048e0 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	b2da      	uxtb	r2, r3
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008fee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d012      	beq.n	8009024 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009008:	2b00      	cmp	r3, #0
 800900a:	d00b      	beq.n	8009024 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 f8e1 	bl	80091d4 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	b2da      	uxtb	r2, r3
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8009022:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8009024:	4b05      	ldr	r3, [pc, #20]	; (800903c <HAL_RTC_AlarmIRQHandler+0x88>)
 8009026:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800902a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2201      	movs	r2, #1
 8009030:	775a      	strb	r2, [r3, #29]
}
 8009032:	bf00      	nop
 8009034:	3708      	adds	r7, #8
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	40013c00 	.word	0x40013c00

08009040 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009048:	2300      	movs	r3, #0
 800904a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	68da      	ldr	r2, [r3, #12]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800905a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800905c:	f7fb fd68 	bl	8004b30 <HAL_GetTick>
 8009060:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009062:	e009      	b.n	8009078 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009064:	f7fb fd64 	bl	8004b30 <HAL_GetTick>
 8009068:	4602      	mov	r2, r0
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	1ad3      	subs	r3, r2, r3
 800906e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009072:	d901      	bls.n	8009078 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009074:	2303      	movs	r3, #3
 8009076:	e007      	b.n	8009088 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	68db      	ldr	r3, [r3, #12]
 800907e:	f003 0320 	and.w	r3, r3, #32
 8009082:	2b00      	cmp	r3, #0
 8009084:	d0ee      	beq.n	8009064 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009086:	2300      	movs	r3, #0
}
 8009088:	4618      	mov	r0, r3
 800908a:	3710      	adds	r7, #16
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009098:	2300      	movs	r3, #0
 800909a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d119      	bne.n	80090de <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f04f 32ff 	mov.w	r2, #4294967295
 80090b2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80090b4:	f7fb fd3c 	bl	8004b30 <HAL_GetTick>
 80090b8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80090ba:	e009      	b.n	80090d0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80090bc:	f7fb fd38 	bl	8004b30 <HAL_GetTick>
 80090c0:	4602      	mov	r2, r0
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	1ad3      	subs	r3, r2, r3
 80090c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090ca:	d901      	bls.n	80090d0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80090cc:	2303      	movs	r3, #3
 80090ce:	e007      	b.n	80090e0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d0ee      	beq.n	80090bc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80090de:	2300      	movs	r3, #0
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3710      	adds	r7, #16
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b085      	sub	sp, #20
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	4603      	mov	r3, r0
 80090f0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80090f2:	2300      	movs	r3, #0
 80090f4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80090f6:	e005      	b.n	8009104 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	3301      	adds	r3, #1
 80090fc:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80090fe:	79fb      	ldrb	r3, [r7, #7]
 8009100:	3b0a      	subs	r3, #10
 8009102:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8009104:	79fb      	ldrb	r3, [r7, #7]
 8009106:	2b09      	cmp	r3, #9
 8009108:	d8f6      	bhi.n	80090f8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	b2db      	uxtb	r3, r3
 800910e:	011b      	lsls	r3, r3, #4
 8009110:	b2da      	uxtb	r2, r3
 8009112:	79fb      	ldrb	r3, [r7, #7]
 8009114:	4313      	orrs	r3, r2
 8009116:	b2db      	uxtb	r3, r3
}
 8009118:	4618      	mov	r0, r3
 800911a:	3714      	adds	r7, #20
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800912c:	2300      	movs	r3, #0
 800912e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	7f1b      	ldrb	r3, [r3, #28]
 8009134:	2b01      	cmp	r3, #1
 8009136:	d101      	bne.n	800913c <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8009138:	2302      	movs	r3, #2
 800913a:	e047      	b.n	80091cc <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2201      	movs	r2, #1
 8009140:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2202      	movs	r2, #2
 8009146:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	22ca      	movs	r2, #202	; 0xca
 800914e:	625a      	str	r2, [r3, #36]	; 0x24
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2253      	movs	r2, #83	; 0x53
 8009156:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	689a      	ldr	r2, [r3, #8]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009166:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	689a      	ldr	r2, [r3, #8]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009176:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009178:	f7fb fcda 	bl	8004b30 <HAL_GetTick>
 800917c:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800917e:	e013      	b.n	80091a8 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009180:	f7fb fcd6 	bl	8004b30 <HAL_GetTick>
 8009184:	4602      	mov	r2, r0
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	1ad3      	subs	r3, r2, r3
 800918a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800918e:	d90b      	bls.n	80091a8 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	22ff      	movs	r2, #255	; 0xff
 8009196:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2203      	movs	r2, #3
 800919c:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 80091a4:	2303      	movs	r3, #3
 80091a6:	e011      	b.n	80091cc <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	68db      	ldr	r3, [r3, #12]
 80091ae:	f003 0304 	and.w	r3, r3, #4
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d0e4      	beq.n	8009180 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	22ff      	movs	r2, #255	; 0xff
 80091bc:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2201      	movs	r2, #1
 80091c2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80091ca:	2300      	movs	r3, #0
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3710      	adds	r7, #16
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 80091dc:	bf00      	nop
 80091de:	370c      	adds	r7, #12
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d101      	bne.n	80091fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	e07b      	b.n	80092f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d108      	bne.n	8009214 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800920a:	d009      	beq.n	8009220 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	61da      	str	r2, [r3, #28]
 8009212:	e005      	b.n	8009220 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800922c:	b2db      	uxtb	r3, r3
 800922e:	2b00      	cmp	r3, #0
 8009230:	d106      	bne.n	8009240 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f7f9 fbee 	bl	8002a1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2202      	movs	r2, #2
 8009244:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009256:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009268:	431a      	orrs	r2, r3
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	68db      	ldr	r3, [r3, #12]
 800926e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009272:	431a      	orrs	r2, r3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	691b      	ldr	r3, [r3, #16]
 8009278:	f003 0302 	and.w	r3, r3, #2
 800927c:	431a      	orrs	r2, r3
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	695b      	ldr	r3, [r3, #20]
 8009282:	f003 0301 	and.w	r3, r3, #1
 8009286:	431a      	orrs	r2, r3
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	699b      	ldr	r3, [r3, #24]
 800928c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009290:	431a      	orrs	r2, r3
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	69db      	ldr	r3, [r3, #28]
 8009296:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800929a:	431a      	orrs	r2, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6a1b      	ldr	r3, [r3, #32]
 80092a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092a4:	ea42 0103 	orr.w	r1, r2, r3
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	430a      	orrs	r2, r1
 80092b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	699b      	ldr	r3, [r3, #24]
 80092bc:	0c1b      	lsrs	r3, r3, #16
 80092be:	f003 0104 	and.w	r1, r3, #4
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c6:	f003 0210 	and.w	r2, r3, #16
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	430a      	orrs	r2, r1
 80092d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	69da      	ldr	r2, [r3, #28]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80092e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3708      	adds	r7, #8
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b082      	sub	sp, #8
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d101      	bne.n	800930c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009308:	2301      	movs	r3, #1
 800930a:	e041      	b.n	8009390 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009312:	b2db      	uxtb	r3, r3
 8009314:	2b00      	cmp	r3, #0
 8009316:	d106      	bne.n	8009326 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 f839 	bl	8009398 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2202      	movs	r2, #2
 800932a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	3304      	adds	r3, #4
 8009336:	4619      	mov	r1, r3
 8009338:	4610      	mov	r0, r2
 800933a:	f000 fae9 	bl	8009910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2201      	movs	r2, #1
 8009342:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2201      	movs	r2, #1
 800934a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2201      	movs	r2, #1
 8009352:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2201      	movs	r2, #1
 800935a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2201      	movs	r2, #1
 8009362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2201      	movs	r2, #1
 800936a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2201      	movs	r2, #1
 8009372:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2201      	movs	r2, #1
 800937a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2201      	movs	r2, #1
 8009382:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2201      	movs	r2, #1
 800938a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800938e:	2300      	movs	r3, #0
}
 8009390:	4618      	mov	r0, r3
 8009392:	3708      	adds	r7, #8
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80093a0:	bf00      	nop
 80093a2:	370c      	adds	r7, #12
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr

080093ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b085      	sub	sp, #20
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d001      	beq.n	80093c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80093c0:	2301      	movs	r3, #1
 80093c2:	e04e      	b.n	8009462 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2202      	movs	r2, #2
 80093c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	68da      	ldr	r2, [r3, #12]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f042 0201 	orr.w	r2, r2, #1
 80093da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a23      	ldr	r2, [pc, #140]	; (8009470 <HAL_TIM_Base_Start_IT+0xc4>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d022      	beq.n	800942c <HAL_TIM_Base_Start_IT+0x80>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093ee:	d01d      	beq.n	800942c <HAL_TIM_Base_Start_IT+0x80>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a1f      	ldr	r2, [pc, #124]	; (8009474 <HAL_TIM_Base_Start_IT+0xc8>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d018      	beq.n	800942c <HAL_TIM_Base_Start_IT+0x80>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a1e      	ldr	r2, [pc, #120]	; (8009478 <HAL_TIM_Base_Start_IT+0xcc>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d013      	beq.n	800942c <HAL_TIM_Base_Start_IT+0x80>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a1c      	ldr	r2, [pc, #112]	; (800947c <HAL_TIM_Base_Start_IT+0xd0>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d00e      	beq.n	800942c <HAL_TIM_Base_Start_IT+0x80>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a1b      	ldr	r2, [pc, #108]	; (8009480 <HAL_TIM_Base_Start_IT+0xd4>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d009      	beq.n	800942c <HAL_TIM_Base_Start_IT+0x80>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a19      	ldr	r2, [pc, #100]	; (8009484 <HAL_TIM_Base_Start_IT+0xd8>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d004      	beq.n	800942c <HAL_TIM_Base_Start_IT+0x80>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a18      	ldr	r2, [pc, #96]	; (8009488 <HAL_TIM_Base_Start_IT+0xdc>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d111      	bne.n	8009450 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	689b      	ldr	r3, [r3, #8]
 8009432:	f003 0307 	and.w	r3, r3, #7
 8009436:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2b06      	cmp	r3, #6
 800943c:	d010      	beq.n	8009460 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	681a      	ldr	r2, [r3, #0]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f042 0201 	orr.w	r2, r2, #1
 800944c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800944e:	e007      	b.n	8009460 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f042 0201 	orr.w	r2, r2, #1
 800945e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009460:	2300      	movs	r3, #0
}
 8009462:	4618      	mov	r0, r3
 8009464:	3714      	adds	r7, #20
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr
 800946e:	bf00      	nop
 8009470:	40010000 	.word	0x40010000
 8009474:	40000400 	.word	0x40000400
 8009478:	40000800 	.word	0x40000800
 800947c:	40000c00 	.word	0x40000c00
 8009480:	40010400 	.word	0x40010400
 8009484:	40014000 	.word	0x40014000
 8009488:	40001800 	.word	0x40001800

0800948c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d101      	bne.n	800949e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	e041      	b.n	8009522 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d106      	bne.n	80094b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f7f9 fb68 	bl	8002b88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2202      	movs	r2, #2
 80094bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	3304      	adds	r3, #4
 80094c8:	4619      	mov	r1, r3
 80094ca:	4610      	mov	r0, r2
 80094cc:	f000 fa20 	bl	8009910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2201      	movs	r2, #1
 80094d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2201      	movs	r2, #1
 80094dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2201      	movs	r2, #1
 80094ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	3708      	adds	r7, #8
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b082      	sub	sp, #8
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	691b      	ldr	r3, [r3, #16]
 8009538:	f003 0302 	and.w	r3, r3, #2
 800953c:	2b02      	cmp	r3, #2
 800953e:	d122      	bne.n	8009586 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	f003 0302 	and.w	r3, r3, #2
 800954a:	2b02      	cmp	r3, #2
 800954c:	d11b      	bne.n	8009586 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f06f 0202 	mvn.w	r2, #2
 8009556:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2201      	movs	r2, #1
 800955c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	699b      	ldr	r3, [r3, #24]
 8009564:	f003 0303 	and.w	r3, r3, #3
 8009568:	2b00      	cmp	r3, #0
 800956a:	d003      	beq.n	8009574 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 f9b1 	bl	80098d4 <HAL_TIM_IC_CaptureCallback>
 8009572:	e005      	b.n	8009580 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 f9a3 	bl	80098c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 f9b4 	bl	80098e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	691b      	ldr	r3, [r3, #16]
 800958c:	f003 0304 	and.w	r3, r3, #4
 8009590:	2b04      	cmp	r3, #4
 8009592:	d122      	bne.n	80095da <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	f003 0304 	and.w	r3, r3, #4
 800959e:	2b04      	cmp	r3, #4
 80095a0:	d11b      	bne.n	80095da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f06f 0204 	mvn.w	r2, #4
 80095aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2202      	movs	r2, #2
 80095b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	699b      	ldr	r3, [r3, #24]
 80095b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d003      	beq.n	80095c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 f987 	bl	80098d4 <HAL_TIM_IC_CaptureCallback>
 80095c6:	e005      	b.n	80095d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 f979 	bl	80098c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 f98a 	bl	80098e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	691b      	ldr	r3, [r3, #16]
 80095e0:	f003 0308 	and.w	r3, r3, #8
 80095e4:	2b08      	cmp	r3, #8
 80095e6:	d122      	bne.n	800962e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	f003 0308 	and.w	r3, r3, #8
 80095f2:	2b08      	cmp	r3, #8
 80095f4:	d11b      	bne.n	800962e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f06f 0208 	mvn.w	r2, #8
 80095fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2204      	movs	r2, #4
 8009604:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	69db      	ldr	r3, [r3, #28]
 800960c:	f003 0303 	and.w	r3, r3, #3
 8009610:	2b00      	cmp	r3, #0
 8009612:	d003      	beq.n	800961c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 f95d 	bl	80098d4 <HAL_TIM_IC_CaptureCallback>
 800961a:	e005      	b.n	8009628 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f000 f94f 	bl	80098c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 f960 	bl	80098e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2200      	movs	r2, #0
 800962c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	f003 0310 	and.w	r3, r3, #16
 8009638:	2b10      	cmp	r3, #16
 800963a:	d122      	bne.n	8009682 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	68db      	ldr	r3, [r3, #12]
 8009642:	f003 0310 	and.w	r3, r3, #16
 8009646:	2b10      	cmp	r3, #16
 8009648:	d11b      	bne.n	8009682 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f06f 0210 	mvn.w	r2, #16
 8009652:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2208      	movs	r2, #8
 8009658:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	69db      	ldr	r3, [r3, #28]
 8009660:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009664:	2b00      	cmp	r3, #0
 8009666:	d003      	beq.n	8009670 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 f933 	bl	80098d4 <HAL_TIM_IC_CaptureCallback>
 800966e:	e005      	b.n	800967c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 f925 	bl	80098c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 f936 	bl	80098e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	691b      	ldr	r3, [r3, #16]
 8009688:	f003 0301 	and.w	r3, r3, #1
 800968c:	2b01      	cmp	r3, #1
 800968e:	d10e      	bne.n	80096ae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	f003 0301 	and.w	r3, r3, #1
 800969a:	2b01      	cmp	r3, #1
 800969c:	d107      	bne.n	80096ae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f06f 0201 	mvn.w	r2, #1
 80096a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f7f9 f825 	bl	80026f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	691b      	ldr	r3, [r3, #16]
 80096b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096b8:	2b80      	cmp	r3, #128	; 0x80
 80096ba:	d10e      	bne.n	80096da <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	68db      	ldr	r3, [r3, #12]
 80096c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096c6:	2b80      	cmp	r3, #128	; 0x80
 80096c8:	d107      	bne.n	80096da <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80096d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f000 fbf1 	bl	8009ebc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	691b      	ldr	r3, [r3, #16]
 80096e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096e4:	2b40      	cmp	r3, #64	; 0x40
 80096e6:	d10e      	bne.n	8009706 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	68db      	ldr	r3, [r3, #12]
 80096ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096f2:	2b40      	cmp	r3, #64	; 0x40
 80096f4:	d107      	bne.n	8009706 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80096fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 f8fb 	bl	80098fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	691b      	ldr	r3, [r3, #16]
 800970c:	f003 0320 	and.w	r3, r3, #32
 8009710:	2b20      	cmp	r3, #32
 8009712:	d10e      	bne.n	8009732 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	68db      	ldr	r3, [r3, #12]
 800971a:	f003 0320 	and.w	r3, r3, #32
 800971e:	2b20      	cmp	r3, #32
 8009720:	d107      	bne.n	8009732 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f06f 0220 	mvn.w	r2, #32
 800972a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 fbbb 	bl	8009ea8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009732:	bf00      	nop
 8009734:	3708      	adds	r7, #8
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
	...

0800973c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b086      	sub	sp, #24
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009748:	2300      	movs	r3, #0
 800974a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009752:	2b01      	cmp	r3, #1
 8009754:	d101      	bne.n	800975a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009756:	2302      	movs	r3, #2
 8009758:	e0ae      	b.n	80098b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2201      	movs	r2, #1
 800975e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2b0c      	cmp	r3, #12
 8009766:	f200 809f 	bhi.w	80098a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800976a:	a201      	add	r2, pc, #4	; (adr r2, 8009770 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800976c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009770:	080097a5 	.word	0x080097a5
 8009774:	080098a9 	.word	0x080098a9
 8009778:	080098a9 	.word	0x080098a9
 800977c:	080098a9 	.word	0x080098a9
 8009780:	080097e5 	.word	0x080097e5
 8009784:	080098a9 	.word	0x080098a9
 8009788:	080098a9 	.word	0x080098a9
 800978c:	080098a9 	.word	0x080098a9
 8009790:	08009827 	.word	0x08009827
 8009794:	080098a9 	.word	0x080098a9
 8009798:	080098a9 	.word	0x080098a9
 800979c:	080098a9 	.word	0x080098a9
 80097a0:	08009867 	.word	0x08009867
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	68b9      	ldr	r1, [r7, #8]
 80097aa:	4618      	mov	r0, r3
 80097ac:	f000 f950 	bl	8009a50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	699a      	ldr	r2, [r3, #24]
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f042 0208 	orr.w	r2, r2, #8
 80097be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	699a      	ldr	r2, [r3, #24]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f022 0204 	bic.w	r2, r2, #4
 80097ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	6999      	ldr	r1, [r3, #24]
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	691a      	ldr	r2, [r3, #16]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	430a      	orrs	r2, r1
 80097e0:	619a      	str	r2, [r3, #24]
      break;
 80097e2:	e064      	b.n	80098ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	68b9      	ldr	r1, [r7, #8]
 80097ea:	4618      	mov	r0, r3
 80097ec:	f000 f9a0 	bl	8009b30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	699a      	ldr	r2, [r3, #24]
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	699a      	ldr	r2, [r3, #24]
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800980e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	6999      	ldr	r1, [r3, #24]
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	691b      	ldr	r3, [r3, #16]
 800981a:	021a      	lsls	r2, r3, #8
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	430a      	orrs	r2, r1
 8009822:	619a      	str	r2, [r3, #24]
      break;
 8009824:	e043      	b.n	80098ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	68b9      	ldr	r1, [r7, #8]
 800982c:	4618      	mov	r0, r3
 800982e:	f000 f9f5 	bl	8009c1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	69da      	ldr	r2, [r3, #28]
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f042 0208 	orr.w	r2, r2, #8
 8009840:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	69da      	ldr	r2, [r3, #28]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f022 0204 	bic.w	r2, r2, #4
 8009850:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	69d9      	ldr	r1, [r3, #28]
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	691a      	ldr	r2, [r3, #16]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	430a      	orrs	r2, r1
 8009862:	61da      	str	r2, [r3, #28]
      break;
 8009864:	e023      	b.n	80098ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	68b9      	ldr	r1, [r7, #8]
 800986c:	4618      	mov	r0, r3
 800986e:	f000 fa49 	bl	8009d04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	69da      	ldr	r2, [r3, #28]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009880:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	69da      	ldr	r2, [r3, #28]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009890:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	69d9      	ldr	r1, [r3, #28]
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	691b      	ldr	r3, [r3, #16]
 800989c:	021a      	lsls	r2, r3, #8
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	430a      	orrs	r2, r1
 80098a4:	61da      	str	r2, [r3, #28]
      break;
 80098a6:	e002      	b.n	80098ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80098a8:	2301      	movs	r3, #1
 80098aa:	75fb      	strb	r3, [r7, #23]
      break;
 80098ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2200      	movs	r2, #0
 80098b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80098b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3718      	adds	r7, #24
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80098c8:	bf00      	nop
 80098ca:	370c      	adds	r7, #12
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr

080098d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b083      	sub	sp, #12
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80098dc:	bf00      	nop
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80098f0:	bf00      	nop
 80098f2:	370c      	adds	r7, #12
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr

080098fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b083      	sub	sp, #12
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009904:	bf00      	nop
 8009906:	370c      	adds	r7, #12
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr

08009910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009910:	b480      	push	{r7}
 8009912:	b085      	sub	sp, #20
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4a40      	ldr	r2, [pc, #256]	; (8009a24 <TIM_Base_SetConfig+0x114>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d013      	beq.n	8009950 <TIM_Base_SetConfig+0x40>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800992e:	d00f      	beq.n	8009950 <TIM_Base_SetConfig+0x40>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4a3d      	ldr	r2, [pc, #244]	; (8009a28 <TIM_Base_SetConfig+0x118>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d00b      	beq.n	8009950 <TIM_Base_SetConfig+0x40>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	4a3c      	ldr	r2, [pc, #240]	; (8009a2c <TIM_Base_SetConfig+0x11c>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d007      	beq.n	8009950 <TIM_Base_SetConfig+0x40>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	4a3b      	ldr	r2, [pc, #236]	; (8009a30 <TIM_Base_SetConfig+0x120>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d003      	beq.n	8009950 <TIM_Base_SetConfig+0x40>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4a3a      	ldr	r2, [pc, #232]	; (8009a34 <TIM_Base_SetConfig+0x124>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d108      	bne.n	8009962 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	68fa      	ldr	r2, [r7, #12]
 800995e:	4313      	orrs	r3, r2
 8009960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4a2f      	ldr	r2, [pc, #188]	; (8009a24 <TIM_Base_SetConfig+0x114>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d02b      	beq.n	80099c2 <TIM_Base_SetConfig+0xb2>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009970:	d027      	beq.n	80099c2 <TIM_Base_SetConfig+0xb2>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	4a2c      	ldr	r2, [pc, #176]	; (8009a28 <TIM_Base_SetConfig+0x118>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d023      	beq.n	80099c2 <TIM_Base_SetConfig+0xb2>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4a2b      	ldr	r2, [pc, #172]	; (8009a2c <TIM_Base_SetConfig+0x11c>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d01f      	beq.n	80099c2 <TIM_Base_SetConfig+0xb2>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	4a2a      	ldr	r2, [pc, #168]	; (8009a30 <TIM_Base_SetConfig+0x120>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d01b      	beq.n	80099c2 <TIM_Base_SetConfig+0xb2>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	4a29      	ldr	r2, [pc, #164]	; (8009a34 <TIM_Base_SetConfig+0x124>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d017      	beq.n	80099c2 <TIM_Base_SetConfig+0xb2>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	4a28      	ldr	r2, [pc, #160]	; (8009a38 <TIM_Base_SetConfig+0x128>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d013      	beq.n	80099c2 <TIM_Base_SetConfig+0xb2>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	4a27      	ldr	r2, [pc, #156]	; (8009a3c <TIM_Base_SetConfig+0x12c>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d00f      	beq.n	80099c2 <TIM_Base_SetConfig+0xb2>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	4a26      	ldr	r2, [pc, #152]	; (8009a40 <TIM_Base_SetConfig+0x130>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d00b      	beq.n	80099c2 <TIM_Base_SetConfig+0xb2>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	4a25      	ldr	r2, [pc, #148]	; (8009a44 <TIM_Base_SetConfig+0x134>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d007      	beq.n	80099c2 <TIM_Base_SetConfig+0xb2>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	4a24      	ldr	r2, [pc, #144]	; (8009a48 <TIM_Base_SetConfig+0x138>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d003      	beq.n	80099c2 <TIM_Base_SetConfig+0xb2>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	4a23      	ldr	r2, [pc, #140]	; (8009a4c <TIM_Base_SetConfig+0x13c>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d108      	bne.n	80099d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	68db      	ldr	r3, [r3, #12]
 80099ce:	68fa      	ldr	r2, [r7, #12]
 80099d0:	4313      	orrs	r3, r2
 80099d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	695b      	ldr	r3, [r3, #20]
 80099de:	4313      	orrs	r3, r2
 80099e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	68fa      	ldr	r2, [r7, #12]
 80099e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	689a      	ldr	r2, [r3, #8]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	4a0a      	ldr	r2, [pc, #40]	; (8009a24 <TIM_Base_SetConfig+0x114>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d003      	beq.n	8009a08 <TIM_Base_SetConfig+0xf8>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4a0c      	ldr	r2, [pc, #48]	; (8009a34 <TIM_Base_SetConfig+0x124>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d103      	bne.n	8009a10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	691a      	ldr	r2, [r3, #16]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2201      	movs	r2, #1
 8009a14:	615a      	str	r2, [r3, #20]
}
 8009a16:	bf00      	nop
 8009a18:	3714      	adds	r7, #20
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr
 8009a22:	bf00      	nop
 8009a24:	40010000 	.word	0x40010000
 8009a28:	40000400 	.word	0x40000400
 8009a2c:	40000800 	.word	0x40000800
 8009a30:	40000c00 	.word	0x40000c00
 8009a34:	40010400 	.word	0x40010400
 8009a38:	40014000 	.word	0x40014000
 8009a3c:	40014400 	.word	0x40014400
 8009a40:	40014800 	.word	0x40014800
 8009a44:	40001800 	.word	0x40001800
 8009a48:	40001c00 	.word	0x40001c00
 8009a4c:	40002000 	.word	0x40002000

08009a50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b087      	sub	sp, #28
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6a1b      	ldr	r3, [r3, #32]
 8009a5e:	f023 0201 	bic.w	r2, r3, #1
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6a1b      	ldr	r3, [r3, #32]
 8009a6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	699b      	ldr	r3, [r3, #24]
 8009a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f023 0303 	bic.w	r3, r3, #3
 8009a86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	68fa      	ldr	r2, [r7, #12]
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	f023 0302 	bic.w	r3, r3, #2
 8009a98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	697a      	ldr	r2, [r7, #20]
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	4a20      	ldr	r2, [pc, #128]	; (8009b28 <TIM_OC1_SetConfig+0xd8>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d003      	beq.n	8009ab4 <TIM_OC1_SetConfig+0x64>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	4a1f      	ldr	r2, [pc, #124]	; (8009b2c <TIM_OC1_SetConfig+0xdc>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d10c      	bne.n	8009ace <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	f023 0308 	bic.w	r3, r3, #8
 8009aba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	697a      	ldr	r2, [r7, #20]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	f023 0304 	bic.w	r3, r3, #4
 8009acc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	4a15      	ldr	r2, [pc, #84]	; (8009b28 <TIM_OC1_SetConfig+0xd8>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d003      	beq.n	8009ade <TIM_OC1_SetConfig+0x8e>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	4a14      	ldr	r2, [pc, #80]	; (8009b2c <TIM_OC1_SetConfig+0xdc>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d111      	bne.n	8009b02 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ae4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009aec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	695b      	ldr	r3, [r3, #20]
 8009af2:	693a      	ldr	r2, [r7, #16]
 8009af4:	4313      	orrs	r3, r2
 8009af6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	699b      	ldr	r3, [r3, #24]
 8009afc:	693a      	ldr	r2, [r7, #16]
 8009afe:	4313      	orrs	r3, r2
 8009b00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	693a      	ldr	r2, [r7, #16]
 8009b06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	68fa      	ldr	r2, [r7, #12]
 8009b0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	685a      	ldr	r2, [r3, #4]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	697a      	ldr	r2, [r7, #20]
 8009b1a:	621a      	str	r2, [r3, #32]
}
 8009b1c:	bf00      	nop
 8009b1e:	371c      	adds	r7, #28
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr
 8009b28:	40010000 	.word	0x40010000
 8009b2c:	40010400 	.word	0x40010400

08009b30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b087      	sub	sp, #28
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6a1b      	ldr	r3, [r3, #32]
 8009b3e:	f023 0210 	bic.w	r2, r3, #16
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6a1b      	ldr	r3, [r3, #32]
 8009b4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	699b      	ldr	r3, [r3, #24]
 8009b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	021b      	lsls	r3, r3, #8
 8009b6e:	68fa      	ldr	r2, [r7, #12]
 8009b70:	4313      	orrs	r3, r2
 8009b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	f023 0320 	bic.w	r3, r3, #32
 8009b7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	011b      	lsls	r3, r3, #4
 8009b82:	697a      	ldr	r2, [r7, #20]
 8009b84:	4313      	orrs	r3, r2
 8009b86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	4a22      	ldr	r2, [pc, #136]	; (8009c14 <TIM_OC2_SetConfig+0xe4>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d003      	beq.n	8009b98 <TIM_OC2_SetConfig+0x68>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	4a21      	ldr	r2, [pc, #132]	; (8009c18 <TIM_OC2_SetConfig+0xe8>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d10d      	bne.n	8009bb4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	011b      	lsls	r3, r3, #4
 8009ba6:	697a      	ldr	r2, [r7, #20]
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bb2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	4a17      	ldr	r2, [pc, #92]	; (8009c14 <TIM_OC2_SetConfig+0xe4>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d003      	beq.n	8009bc4 <TIM_OC2_SetConfig+0x94>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	4a16      	ldr	r2, [pc, #88]	; (8009c18 <TIM_OC2_SetConfig+0xe8>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d113      	bne.n	8009bec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009bca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	695b      	ldr	r3, [r3, #20]
 8009bd8:	009b      	lsls	r3, r3, #2
 8009bda:	693a      	ldr	r2, [r7, #16]
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	699b      	ldr	r3, [r3, #24]
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	693a      	ldr	r2, [r7, #16]
 8009be8:	4313      	orrs	r3, r2
 8009bea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	693a      	ldr	r2, [r7, #16]
 8009bf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	68fa      	ldr	r2, [r7, #12]
 8009bf6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	685a      	ldr	r2, [r3, #4]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	697a      	ldr	r2, [r7, #20]
 8009c04:	621a      	str	r2, [r3, #32]
}
 8009c06:	bf00      	nop
 8009c08:	371c      	adds	r7, #28
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr
 8009c12:	bf00      	nop
 8009c14:	40010000 	.word	0x40010000
 8009c18:	40010400 	.word	0x40010400

08009c1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b087      	sub	sp, #28
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6a1b      	ldr	r3, [r3, #32]
 8009c2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6a1b      	ldr	r3, [r3, #32]
 8009c36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	69db      	ldr	r3, [r3, #28]
 8009c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f023 0303 	bic.w	r3, r3, #3
 8009c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	68fa      	ldr	r2, [r7, #12]
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	689b      	ldr	r3, [r3, #8]
 8009c6a:	021b      	lsls	r3, r3, #8
 8009c6c:	697a      	ldr	r2, [r7, #20]
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	4a21      	ldr	r2, [pc, #132]	; (8009cfc <TIM_OC3_SetConfig+0xe0>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d003      	beq.n	8009c82 <TIM_OC3_SetConfig+0x66>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	4a20      	ldr	r2, [pc, #128]	; (8009d00 <TIM_OC3_SetConfig+0xe4>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d10d      	bne.n	8009c9e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	68db      	ldr	r3, [r3, #12]
 8009c8e:	021b      	lsls	r3, r3, #8
 8009c90:	697a      	ldr	r2, [r7, #20]
 8009c92:	4313      	orrs	r3, r2
 8009c94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	4a16      	ldr	r2, [pc, #88]	; (8009cfc <TIM_OC3_SetConfig+0xe0>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d003      	beq.n	8009cae <TIM_OC3_SetConfig+0x92>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4a15      	ldr	r2, [pc, #84]	; (8009d00 <TIM_OC3_SetConfig+0xe4>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d113      	bne.n	8009cd6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	695b      	ldr	r3, [r3, #20]
 8009cc2:	011b      	lsls	r3, r3, #4
 8009cc4:	693a      	ldr	r2, [r7, #16]
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	699b      	ldr	r3, [r3, #24]
 8009cce:	011b      	lsls	r3, r3, #4
 8009cd0:	693a      	ldr	r2, [r7, #16]
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	693a      	ldr	r2, [r7, #16]
 8009cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	68fa      	ldr	r2, [r7, #12]
 8009ce0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	685a      	ldr	r2, [r3, #4]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	697a      	ldr	r2, [r7, #20]
 8009cee:	621a      	str	r2, [r3, #32]
}
 8009cf0:	bf00      	nop
 8009cf2:	371c      	adds	r7, #28
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr
 8009cfc:	40010000 	.word	0x40010000
 8009d00:	40010400 	.word	0x40010400

08009d04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b087      	sub	sp, #28
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6a1b      	ldr	r3, [r3, #32]
 8009d12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6a1b      	ldr	r3, [r3, #32]
 8009d1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	69db      	ldr	r3, [r3, #28]
 8009d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	021b      	lsls	r3, r3, #8
 8009d42:	68fa      	ldr	r2, [r7, #12]
 8009d44:	4313      	orrs	r3, r2
 8009d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	689b      	ldr	r3, [r3, #8]
 8009d54:	031b      	lsls	r3, r3, #12
 8009d56:	693a      	ldr	r2, [r7, #16]
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	4a12      	ldr	r2, [pc, #72]	; (8009da8 <TIM_OC4_SetConfig+0xa4>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d003      	beq.n	8009d6c <TIM_OC4_SetConfig+0x68>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	4a11      	ldr	r2, [pc, #68]	; (8009dac <TIM_OC4_SetConfig+0xa8>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d109      	bne.n	8009d80 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	695b      	ldr	r3, [r3, #20]
 8009d78:	019b      	lsls	r3, r3, #6
 8009d7a:	697a      	ldr	r2, [r7, #20]
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	697a      	ldr	r2, [r7, #20]
 8009d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	68fa      	ldr	r2, [r7, #12]
 8009d8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	685a      	ldr	r2, [r3, #4]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	693a      	ldr	r2, [r7, #16]
 8009d98:	621a      	str	r2, [r3, #32]
}
 8009d9a:	bf00      	nop
 8009d9c:	371c      	adds	r7, #28
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da4:	4770      	bx	lr
 8009da6:	bf00      	nop
 8009da8:	40010000 	.word	0x40010000
 8009dac:	40010400 	.word	0x40010400

08009db0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b085      	sub	sp, #20
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d101      	bne.n	8009dc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009dc4:	2302      	movs	r3, #2
 8009dc6:	e05a      	b.n	8009e7e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2201      	movs	r2, #1
 8009dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2202      	movs	r2, #2
 8009dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	68fa      	ldr	r2, [r7, #12]
 8009df6:	4313      	orrs	r3, r2
 8009df8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	68fa      	ldr	r2, [r7, #12]
 8009e00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4a21      	ldr	r2, [pc, #132]	; (8009e8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d022      	beq.n	8009e52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e14:	d01d      	beq.n	8009e52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a1d      	ldr	r2, [pc, #116]	; (8009e90 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d018      	beq.n	8009e52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a1b      	ldr	r2, [pc, #108]	; (8009e94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d013      	beq.n	8009e52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4a1a      	ldr	r2, [pc, #104]	; (8009e98 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d00e      	beq.n	8009e52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4a18      	ldr	r2, [pc, #96]	; (8009e9c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d009      	beq.n	8009e52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a17      	ldr	r2, [pc, #92]	; (8009ea0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d004      	beq.n	8009e52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a15      	ldr	r2, [pc, #84]	; (8009ea4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d10c      	bne.n	8009e6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	68ba      	ldr	r2, [r7, #8]
 8009e60:	4313      	orrs	r3, r2
 8009e62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	68ba      	ldr	r2, [r7, #8]
 8009e6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2201      	movs	r2, #1
 8009e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2200      	movs	r2, #0
 8009e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e7c:	2300      	movs	r3, #0
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3714      	adds	r7, #20
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr
 8009e8a:	bf00      	nop
 8009e8c:	40010000 	.word	0x40010000
 8009e90:	40000400 	.word	0x40000400
 8009e94:	40000800 	.word	0x40000800
 8009e98:	40000c00 	.word	0x40000c00
 8009e9c:	40010400 	.word	0x40010400
 8009ea0:	40014000 	.word	0x40014000
 8009ea4:	40001800 	.word	0x40001800

08009ea8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b083      	sub	sp, #12
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009eb0:	bf00      	nop
 8009eb2:	370c      	adds	r7, #12
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr

08009ebc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b083      	sub	sp, #12
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ec4:	bf00      	nop
 8009ec6:	370c      	adds	r7, #12
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b082      	sub	sp, #8
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d101      	bne.n	8009ee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e03f      	b.n	8009f62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d106      	bne.n	8009efc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f7f8 fe9e 	bl	8002c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2224      	movs	r2, #36	; 0x24
 8009f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	68da      	ldr	r2, [r3, #12]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009f12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 f9cb 	bl	800a2b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	691a      	ldr	r2, [r3, #16]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009f28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	695a      	ldr	r2, [r3, #20]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009f38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	68da      	ldr	r2, [r3, #12]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009f48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2220      	movs	r2, #32
 8009f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2220      	movs	r2, #32
 8009f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009f60:	2300      	movs	r3, #0
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3708      	adds	r7, #8
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b08a      	sub	sp, #40	; 0x28
 8009f6e:	af02      	add	r7, sp, #8
 8009f70:	60f8      	str	r0, [r7, #12]
 8009f72:	60b9      	str	r1, [r7, #8]
 8009f74:	603b      	str	r3, [r7, #0]
 8009f76:	4613      	mov	r3, r2
 8009f78:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	2b20      	cmp	r3, #32
 8009f88:	d17c      	bne.n	800a084 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d002      	beq.n	8009f96 <HAL_UART_Transmit+0x2c>
 8009f90:	88fb      	ldrh	r3, [r7, #6]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d101      	bne.n	8009f9a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009f96:	2301      	movs	r3, #1
 8009f98:	e075      	b.n	800a086 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d101      	bne.n	8009fa8 <HAL_UART_Transmit+0x3e>
 8009fa4:	2302      	movs	r3, #2
 8009fa6:	e06e      	b.n	800a086 <HAL_UART_Transmit+0x11c>
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2201      	movs	r2, #1
 8009fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2221      	movs	r2, #33	; 0x21
 8009fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009fbe:	f7fa fdb7 	bl	8004b30 <HAL_GetTick>
 8009fc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	88fa      	ldrh	r2, [r7, #6]
 8009fc8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	88fa      	ldrh	r2, [r7, #6]
 8009fce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	689b      	ldr	r3, [r3, #8]
 8009fd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fd8:	d108      	bne.n	8009fec <HAL_UART_Transmit+0x82>
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	691b      	ldr	r3, [r3, #16]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d104      	bne.n	8009fec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	61bb      	str	r3, [r7, #24]
 8009fea:	e003      	b.n	8009ff4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009ffc:	e02a      	b.n	800a054 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	9300      	str	r3, [sp, #0]
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	2200      	movs	r2, #0
 800a006:	2180      	movs	r1, #128	; 0x80
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f000 f8e2 	bl	800a1d2 <UART_WaitOnFlagUntilTimeout>
 800a00e:	4603      	mov	r3, r0
 800a010:	2b00      	cmp	r3, #0
 800a012:	d001      	beq.n	800a018 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a014:	2303      	movs	r3, #3
 800a016:	e036      	b.n	800a086 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a018:	69fb      	ldr	r3, [r7, #28]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d10b      	bne.n	800a036 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a01e:	69bb      	ldr	r3, [r7, #24]
 800a020:	881b      	ldrh	r3, [r3, #0]
 800a022:	461a      	mov	r2, r3
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a02c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a02e:	69bb      	ldr	r3, [r7, #24]
 800a030:	3302      	adds	r3, #2
 800a032:	61bb      	str	r3, [r7, #24]
 800a034:	e007      	b.n	800a046 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a036:	69fb      	ldr	r3, [r7, #28]
 800a038:	781a      	ldrb	r2, [r3, #0]
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a040:	69fb      	ldr	r3, [r7, #28]
 800a042:	3301      	adds	r3, #1
 800a044:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a04a:	b29b      	uxth	r3, r3
 800a04c:	3b01      	subs	r3, #1
 800a04e:	b29a      	uxth	r2, r3
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a058:	b29b      	uxth	r3, r3
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d1cf      	bne.n	8009ffe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	9300      	str	r3, [sp, #0]
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	2200      	movs	r2, #0
 800a066:	2140      	movs	r1, #64	; 0x40
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f000 f8b2 	bl	800a1d2 <UART_WaitOnFlagUntilTimeout>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b00      	cmp	r3, #0
 800a072:	d001      	beq.n	800a078 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a074:	2303      	movs	r3, #3
 800a076:	e006      	b.n	800a086 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2220      	movs	r2, #32
 800a07c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a080:	2300      	movs	r3, #0
 800a082:	e000      	b.n	800a086 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a084:	2302      	movs	r3, #2
  }
}
 800a086:	4618      	mov	r0, r3
 800a088:	3720      	adds	r7, #32
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b08a      	sub	sp, #40	; 0x28
 800a092:	af02      	add	r7, sp, #8
 800a094:	60f8      	str	r0, [r7, #12]
 800a096:	60b9      	str	r1, [r7, #8]
 800a098:	603b      	str	r3, [r7, #0]
 800a09a:	4613      	mov	r3, r2
 800a09c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	2b20      	cmp	r3, #32
 800a0ac:	f040 808c 	bne.w	800a1c8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d002      	beq.n	800a0bc <HAL_UART_Receive+0x2e>
 800a0b6:	88fb      	ldrh	r3, [r7, #6]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d101      	bne.n	800a0c0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	e084      	b.n	800a1ca <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	d101      	bne.n	800a0ce <HAL_UART_Receive+0x40>
 800a0ca:	2302      	movs	r3, #2
 800a0cc:	e07d      	b.n	800a1ca <HAL_UART_Receive+0x13c>
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2222      	movs	r2, #34	; 0x22
 800a0e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a0ea:	f7fa fd21 	bl	8004b30 <HAL_GetTick>
 800a0ee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	88fa      	ldrh	r2, [r7, #6]
 800a0f4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	88fa      	ldrh	r2, [r7, #6]
 800a0fa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	689b      	ldr	r3, [r3, #8]
 800a100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a104:	d108      	bne.n	800a118 <HAL_UART_Receive+0x8a>
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	691b      	ldr	r3, [r3, #16]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d104      	bne.n	800a118 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800a10e:	2300      	movs	r3, #0
 800a110:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	61bb      	str	r3, [r7, #24]
 800a116:	e003      	b.n	800a120 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a11c:	2300      	movs	r3, #0
 800a11e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2200      	movs	r2, #0
 800a124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800a128:	e043      	b.n	800a1b2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	9300      	str	r3, [sp, #0]
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	2200      	movs	r2, #0
 800a132:	2120      	movs	r1, #32
 800a134:	68f8      	ldr	r0, [r7, #12]
 800a136:	f000 f84c 	bl	800a1d2 <UART_WaitOnFlagUntilTimeout>
 800a13a:	4603      	mov	r3, r0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d001      	beq.n	800a144 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800a140:	2303      	movs	r3, #3
 800a142:	e042      	b.n	800a1ca <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800a144:	69fb      	ldr	r3, [r7, #28]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d10c      	bne.n	800a164 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	b29b      	uxth	r3, r3
 800a152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a156:	b29a      	uxth	r2, r3
 800a158:	69bb      	ldr	r3, [r7, #24]
 800a15a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a15c:	69bb      	ldr	r3, [r7, #24]
 800a15e:	3302      	adds	r3, #2
 800a160:	61bb      	str	r3, [r7, #24]
 800a162:	e01f      	b.n	800a1a4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	689b      	ldr	r3, [r3, #8]
 800a168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a16c:	d007      	beq.n	800a17e <HAL_UART_Receive+0xf0>
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	689b      	ldr	r3, [r3, #8]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d10a      	bne.n	800a18c <HAL_UART_Receive+0xfe>
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	691b      	ldr	r3, [r3, #16]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d106      	bne.n	800a18c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	b2da      	uxtb	r2, r3
 800a186:	69fb      	ldr	r3, [r7, #28]
 800a188:	701a      	strb	r2, [r3, #0]
 800a18a:	e008      	b.n	800a19e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	b2db      	uxtb	r3, r3
 800a194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a198:	b2da      	uxtb	r2, r3
 800a19a:	69fb      	ldr	r3, [r7, #28]
 800a19c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800a19e:	69fb      	ldr	r3, [r7, #28]
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	3b01      	subs	r3, #1
 800a1ac:	b29a      	uxth	r2, r3
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d1b6      	bne.n	800a12a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2220      	movs	r2, #32
 800a1c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	e000      	b.n	800a1ca <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800a1c8:	2302      	movs	r3, #2
  }
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3720      	adds	r7, #32
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}

0800a1d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a1d2:	b580      	push	{r7, lr}
 800a1d4:	b090      	sub	sp, #64	; 0x40
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	60f8      	str	r0, [r7, #12]
 800a1da:	60b9      	str	r1, [r7, #8]
 800a1dc:	603b      	str	r3, [r7, #0]
 800a1de:	4613      	mov	r3, r2
 800a1e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1e2:	e050      	b.n	800a286 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ea:	d04c      	beq.n	800a286 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a1ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d007      	beq.n	800a202 <UART_WaitOnFlagUntilTimeout+0x30>
 800a1f2:	f7fa fc9d 	bl	8004b30 <HAL_GetTick>
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	1ad3      	subs	r3, r2, r3
 800a1fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d241      	bcs.n	800a286 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	330c      	adds	r3, #12
 800a208:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a20c:	e853 3f00 	ldrex	r3, [r3]
 800a210:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a214:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a218:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	330c      	adds	r3, #12
 800a220:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a222:	637a      	str	r2, [r7, #52]	; 0x34
 800a224:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a226:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a228:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a22a:	e841 2300 	strex	r3, r2, [r1]
 800a22e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a232:	2b00      	cmp	r3, #0
 800a234:	d1e5      	bne.n	800a202 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	3314      	adds	r3, #20
 800a23c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	e853 3f00 	ldrex	r3, [r3]
 800a244:	613b      	str	r3, [r7, #16]
   return(result);
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	f023 0301 	bic.w	r3, r3, #1
 800a24c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	3314      	adds	r3, #20
 800a254:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a256:	623a      	str	r2, [r7, #32]
 800a258:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a25a:	69f9      	ldr	r1, [r7, #28]
 800a25c:	6a3a      	ldr	r2, [r7, #32]
 800a25e:	e841 2300 	strex	r3, r2, [r1]
 800a262:	61bb      	str	r3, [r7, #24]
   return(result);
 800a264:	69bb      	ldr	r3, [r7, #24]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d1e5      	bne.n	800a236 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2220      	movs	r2, #32
 800a26e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	2220      	movs	r2, #32
 800a276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2200      	movs	r2, #0
 800a27e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a282:	2303      	movs	r3, #3
 800a284:	e00f      	b.n	800a2a6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	4013      	ands	r3, r2
 800a290:	68ba      	ldr	r2, [r7, #8]
 800a292:	429a      	cmp	r2, r3
 800a294:	bf0c      	ite	eq
 800a296:	2301      	moveq	r3, #1
 800a298:	2300      	movne	r3, #0
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	461a      	mov	r2, r3
 800a29e:	79fb      	ldrb	r3, [r7, #7]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d09f      	beq.n	800a1e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a2a4:	2300      	movs	r3, #0
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3740      	adds	r7, #64	; 0x40
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
	...

0800a2b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b4:	b09f      	sub	sp, #124	; 0x7c
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a2ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	691b      	ldr	r3, [r3, #16]
 800a2c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a2c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2c6:	68d9      	ldr	r1, [r3, #12]
 800a2c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	ea40 0301 	orr.w	r3, r0, r1
 800a2d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a2d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2d4:	689a      	ldr	r2, [r3, #8]
 800a2d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2d8:	691b      	ldr	r3, [r3, #16]
 800a2da:	431a      	orrs	r2, r3
 800a2dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2de:	695b      	ldr	r3, [r3, #20]
 800a2e0:	431a      	orrs	r2, r3
 800a2e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2e4:	69db      	ldr	r3, [r3, #28]
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a2ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a2f4:	f021 010c 	bic.w	r1, r1, #12
 800a2f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a2fe:	430b      	orrs	r3, r1
 800a300:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	695b      	ldr	r3, [r3, #20]
 800a308:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a30c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a30e:	6999      	ldr	r1, [r3, #24]
 800a310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	ea40 0301 	orr.w	r3, r0, r1
 800a318:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a31a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a31c:	681a      	ldr	r2, [r3, #0]
 800a31e:	4bc5      	ldr	r3, [pc, #788]	; (800a634 <UART_SetConfig+0x384>)
 800a320:	429a      	cmp	r2, r3
 800a322:	d004      	beq.n	800a32e <UART_SetConfig+0x7e>
 800a324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	4bc3      	ldr	r3, [pc, #780]	; (800a638 <UART_SetConfig+0x388>)
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d103      	bne.n	800a336 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a32e:	f7fe f90f 	bl	8008550 <HAL_RCC_GetPCLK2Freq>
 800a332:	6778      	str	r0, [r7, #116]	; 0x74
 800a334:	e002      	b.n	800a33c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a336:	f7fe f8f7 	bl	8008528 <HAL_RCC_GetPCLK1Freq>
 800a33a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a33c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a33e:	69db      	ldr	r3, [r3, #28]
 800a340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a344:	f040 80b6 	bne.w	800a4b4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a348:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a34a:	461c      	mov	r4, r3
 800a34c:	f04f 0500 	mov.w	r5, #0
 800a350:	4622      	mov	r2, r4
 800a352:	462b      	mov	r3, r5
 800a354:	1891      	adds	r1, r2, r2
 800a356:	6439      	str	r1, [r7, #64]	; 0x40
 800a358:	415b      	adcs	r3, r3
 800a35a:	647b      	str	r3, [r7, #68]	; 0x44
 800a35c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a360:	1912      	adds	r2, r2, r4
 800a362:	eb45 0303 	adc.w	r3, r5, r3
 800a366:	f04f 0000 	mov.w	r0, #0
 800a36a:	f04f 0100 	mov.w	r1, #0
 800a36e:	00d9      	lsls	r1, r3, #3
 800a370:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a374:	00d0      	lsls	r0, r2, #3
 800a376:	4602      	mov	r2, r0
 800a378:	460b      	mov	r3, r1
 800a37a:	1911      	adds	r1, r2, r4
 800a37c:	6639      	str	r1, [r7, #96]	; 0x60
 800a37e:	416b      	adcs	r3, r5
 800a380:	667b      	str	r3, [r7, #100]	; 0x64
 800a382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	461a      	mov	r2, r3
 800a388:	f04f 0300 	mov.w	r3, #0
 800a38c:	1891      	adds	r1, r2, r2
 800a38e:	63b9      	str	r1, [r7, #56]	; 0x38
 800a390:	415b      	adcs	r3, r3
 800a392:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a394:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a398:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a39c:	f7f6 fc84 	bl	8000ca8 <__aeabi_uldivmod>
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	460b      	mov	r3, r1
 800a3a4:	4ba5      	ldr	r3, [pc, #660]	; (800a63c <UART_SetConfig+0x38c>)
 800a3a6:	fba3 2302 	umull	r2, r3, r3, r2
 800a3aa:	095b      	lsrs	r3, r3, #5
 800a3ac:	011e      	lsls	r6, r3, #4
 800a3ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a3b0:	461c      	mov	r4, r3
 800a3b2:	f04f 0500 	mov.w	r5, #0
 800a3b6:	4622      	mov	r2, r4
 800a3b8:	462b      	mov	r3, r5
 800a3ba:	1891      	adds	r1, r2, r2
 800a3bc:	6339      	str	r1, [r7, #48]	; 0x30
 800a3be:	415b      	adcs	r3, r3
 800a3c0:	637b      	str	r3, [r7, #52]	; 0x34
 800a3c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a3c6:	1912      	adds	r2, r2, r4
 800a3c8:	eb45 0303 	adc.w	r3, r5, r3
 800a3cc:	f04f 0000 	mov.w	r0, #0
 800a3d0:	f04f 0100 	mov.w	r1, #0
 800a3d4:	00d9      	lsls	r1, r3, #3
 800a3d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a3da:	00d0      	lsls	r0, r2, #3
 800a3dc:	4602      	mov	r2, r0
 800a3de:	460b      	mov	r3, r1
 800a3e0:	1911      	adds	r1, r2, r4
 800a3e2:	65b9      	str	r1, [r7, #88]	; 0x58
 800a3e4:	416b      	adcs	r3, r5
 800a3e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a3e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3ea:	685b      	ldr	r3, [r3, #4]
 800a3ec:	461a      	mov	r2, r3
 800a3ee:	f04f 0300 	mov.w	r3, #0
 800a3f2:	1891      	adds	r1, r2, r2
 800a3f4:	62b9      	str	r1, [r7, #40]	; 0x28
 800a3f6:	415b      	adcs	r3, r3
 800a3f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a3fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a3fe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a402:	f7f6 fc51 	bl	8000ca8 <__aeabi_uldivmod>
 800a406:	4602      	mov	r2, r0
 800a408:	460b      	mov	r3, r1
 800a40a:	4b8c      	ldr	r3, [pc, #560]	; (800a63c <UART_SetConfig+0x38c>)
 800a40c:	fba3 1302 	umull	r1, r3, r3, r2
 800a410:	095b      	lsrs	r3, r3, #5
 800a412:	2164      	movs	r1, #100	; 0x64
 800a414:	fb01 f303 	mul.w	r3, r1, r3
 800a418:	1ad3      	subs	r3, r2, r3
 800a41a:	00db      	lsls	r3, r3, #3
 800a41c:	3332      	adds	r3, #50	; 0x32
 800a41e:	4a87      	ldr	r2, [pc, #540]	; (800a63c <UART_SetConfig+0x38c>)
 800a420:	fba2 2303 	umull	r2, r3, r2, r3
 800a424:	095b      	lsrs	r3, r3, #5
 800a426:	005b      	lsls	r3, r3, #1
 800a428:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a42c:	441e      	add	r6, r3
 800a42e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a430:	4618      	mov	r0, r3
 800a432:	f04f 0100 	mov.w	r1, #0
 800a436:	4602      	mov	r2, r0
 800a438:	460b      	mov	r3, r1
 800a43a:	1894      	adds	r4, r2, r2
 800a43c:	623c      	str	r4, [r7, #32]
 800a43e:	415b      	adcs	r3, r3
 800a440:	627b      	str	r3, [r7, #36]	; 0x24
 800a442:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a446:	1812      	adds	r2, r2, r0
 800a448:	eb41 0303 	adc.w	r3, r1, r3
 800a44c:	f04f 0400 	mov.w	r4, #0
 800a450:	f04f 0500 	mov.w	r5, #0
 800a454:	00dd      	lsls	r5, r3, #3
 800a456:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a45a:	00d4      	lsls	r4, r2, #3
 800a45c:	4622      	mov	r2, r4
 800a45e:	462b      	mov	r3, r5
 800a460:	1814      	adds	r4, r2, r0
 800a462:	653c      	str	r4, [r7, #80]	; 0x50
 800a464:	414b      	adcs	r3, r1
 800a466:	657b      	str	r3, [r7, #84]	; 0x54
 800a468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a46a:	685b      	ldr	r3, [r3, #4]
 800a46c:	461a      	mov	r2, r3
 800a46e:	f04f 0300 	mov.w	r3, #0
 800a472:	1891      	adds	r1, r2, r2
 800a474:	61b9      	str	r1, [r7, #24]
 800a476:	415b      	adcs	r3, r3
 800a478:	61fb      	str	r3, [r7, #28]
 800a47a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a47e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a482:	f7f6 fc11 	bl	8000ca8 <__aeabi_uldivmod>
 800a486:	4602      	mov	r2, r0
 800a488:	460b      	mov	r3, r1
 800a48a:	4b6c      	ldr	r3, [pc, #432]	; (800a63c <UART_SetConfig+0x38c>)
 800a48c:	fba3 1302 	umull	r1, r3, r3, r2
 800a490:	095b      	lsrs	r3, r3, #5
 800a492:	2164      	movs	r1, #100	; 0x64
 800a494:	fb01 f303 	mul.w	r3, r1, r3
 800a498:	1ad3      	subs	r3, r2, r3
 800a49a:	00db      	lsls	r3, r3, #3
 800a49c:	3332      	adds	r3, #50	; 0x32
 800a49e:	4a67      	ldr	r2, [pc, #412]	; (800a63c <UART_SetConfig+0x38c>)
 800a4a0:	fba2 2303 	umull	r2, r3, r2, r3
 800a4a4:	095b      	lsrs	r3, r3, #5
 800a4a6:	f003 0207 	and.w	r2, r3, #7
 800a4aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4432      	add	r2, r6
 800a4b0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a4b2:	e0b9      	b.n	800a628 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a4b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4b6:	461c      	mov	r4, r3
 800a4b8:	f04f 0500 	mov.w	r5, #0
 800a4bc:	4622      	mov	r2, r4
 800a4be:	462b      	mov	r3, r5
 800a4c0:	1891      	adds	r1, r2, r2
 800a4c2:	6139      	str	r1, [r7, #16]
 800a4c4:	415b      	adcs	r3, r3
 800a4c6:	617b      	str	r3, [r7, #20]
 800a4c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a4cc:	1912      	adds	r2, r2, r4
 800a4ce:	eb45 0303 	adc.w	r3, r5, r3
 800a4d2:	f04f 0000 	mov.w	r0, #0
 800a4d6:	f04f 0100 	mov.w	r1, #0
 800a4da:	00d9      	lsls	r1, r3, #3
 800a4dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a4e0:	00d0      	lsls	r0, r2, #3
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	eb12 0804 	adds.w	r8, r2, r4
 800a4ea:	eb43 0905 	adc.w	r9, r3, r5
 800a4ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f04f 0100 	mov.w	r1, #0
 800a4f8:	f04f 0200 	mov.w	r2, #0
 800a4fc:	f04f 0300 	mov.w	r3, #0
 800a500:	008b      	lsls	r3, r1, #2
 800a502:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a506:	0082      	lsls	r2, r0, #2
 800a508:	4640      	mov	r0, r8
 800a50a:	4649      	mov	r1, r9
 800a50c:	f7f6 fbcc 	bl	8000ca8 <__aeabi_uldivmod>
 800a510:	4602      	mov	r2, r0
 800a512:	460b      	mov	r3, r1
 800a514:	4b49      	ldr	r3, [pc, #292]	; (800a63c <UART_SetConfig+0x38c>)
 800a516:	fba3 2302 	umull	r2, r3, r3, r2
 800a51a:	095b      	lsrs	r3, r3, #5
 800a51c:	011e      	lsls	r6, r3, #4
 800a51e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a520:	4618      	mov	r0, r3
 800a522:	f04f 0100 	mov.w	r1, #0
 800a526:	4602      	mov	r2, r0
 800a528:	460b      	mov	r3, r1
 800a52a:	1894      	adds	r4, r2, r2
 800a52c:	60bc      	str	r4, [r7, #8]
 800a52e:	415b      	adcs	r3, r3
 800a530:	60fb      	str	r3, [r7, #12]
 800a532:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a536:	1812      	adds	r2, r2, r0
 800a538:	eb41 0303 	adc.w	r3, r1, r3
 800a53c:	f04f 0400 	mov.w	r4, #0
 800a540:	f04f 0500 	mov.w	r5, #0
 800a544:	00dd      	lsls	r5, r3, #3
 800a546:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a54a:	00d4      	lsls	r4, r2, #3
 800a54c:	4622      	mov	r2, r4
 800a54e:	462b      	mov	r3, r5
 800a550:	1814      	adds	r4, r2, r0
 800a552:	64bc      	str	r4, [r7, #72]	; 0x48
 800a554:	414b      	adcs	r3, r1
 800a556:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a55a:	685b      	ldr	r3, [r3, #4]
 800a55c:	4618      	mov	r0, r3
 800a55e:	f04f 0100 	mov.w	r1, #0
 800a562:	f04f 0200 	mov.w	r2, #0
 800a566:	f04f 0300 	mov.w	r3, #0
 800a56a:	008b      	lsls	r3, r1, #2
 800a56c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a570:	0082      	lsls	r2, r0, #2
 800a572:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a576:	f7f6 fb97 	bl	8000ca8 <__aeabi_uldivmod>
 800a57a:	4602      	mov	r2, r0
 800a57c:	460b      	mov	r3, r1
 800a57e:	4b2f      	ldr	r3, [pc, #188]	; (800a63c <UART_SetConfig+0x38c>)
 800a580:	fba3 1302 	umull	r1, r3, r3, r2
 800a584:	095b      	lsrs	r3, r3, #5
 800a586:	2164      	movs	r1, #100	; 0x64
 800a588:	fb01 f303 	mul.w	r3, r1, r3
 800a58c:	1ad3      	subs	r3, r2, r3
 800a58e:	011b      	lsls	r3, r3, #4
 800a590:	3332      	adds	r3, #50	; 0x32
 800a592:	4a2a      	ldr	r2, [pc, #168]	; (800a63c <UART_SetConfig+0x38c>)
 800a594:	fba2 2303 	umull	r2, r3, r2, r3
 800a598:	095b      	lsrs	r3, r3, #5
 800a59a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a59e:	441e      	add	r6, r3
 800a5a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f04f 0100 	mov.w	r1, #0
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	1894      	adds	r4, r2, r2
 800a5ae:	603c      	str	r4, [r7, #0]
 800a5b0:	415b      	adcs	r3, r3
 800a5b2:	607b      	str	r3, [r7, #4]
 800a5b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5b8:	1812      	adds	r2, r2, r0
 800a5ba:	eb41 0303 	adc.w	r3, r1, r3
 800a5be:	f04f 0400 	mov.w	r4, #0
 800a5c2:	f04f 0500 	mov.w	r5, #0
 800a5c6:	00dd      	lsls	r5, r3, #3
 800a5c8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a5cc:	00d4      	lsls	r4, r2, #3
 800a5ce:	4622      	mov	r2, r4
 800a5d0:	462b      	mov	r3, r5
 800a5d2:	eb12 0a00 	adds.w	sl, r2, r0
 800a5d6:	eb43 0b01 	adc.w	fp, r3, r1
 800a5da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f04f 0100 	mov.w	r1, #0
 800a5e4:	f04f 0200 	mov.w	r2, #0
 800a5e8:	f04f 0300 	mov.w	r3, #0
 800a5ec:	008b      	lsls	r3, r1, #2
 800a5ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a5f2:	0082      	lsls	r2, r0, #2
 800a5f4:	4650      	mov	r0, sl
 800a5f6:	4659      	mov	r1, fp
 800a5f8:	f7f6 fb56 	bl	8000ca8 <__aeabi_uldivmod>
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	460b      	mov	r3, r1
 800a600:	4b0e      	ldr	r3, [pc, #56]	; (800a63c <UART_SetConfig+0x38c>)
 800a602:	fba3 1302 	umull	r1, r3, r3, r2
 800a606:	095b      	lsrs	r3, r3, #5
 800a608:	2164      	movs	r1, #100	; 0x64
 800a60a:	fb01 f303 	mul.w	r3, r1, r3
 800a60e:	1ad3      	subs	r3, r2, r3
 800a610:	011b      	lsls	r3, r3, #4
 800a612:	3332      	adds	r3, #50	; 0x32
 800a614:	4a09      	ldr	r2, [pc, #36]	; (800a63c <UART_SetConfig+0x38c>)
 800a616:	fba2 2303 	umull	r2, r3, r2, r3
 800a61a:	095b      	lsrs	r3, r3, #5
 800a61c:	f003 020f 	and.w	r2, r3, #15
 800a620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4432      	add	r2, r6
 800a626:	609a      	str	r2, [r3, #8]
}
 800a628:	bf00      	nop
 800a62a:	377c      	adds	r7, #124	; 0x7c
 800a62c:	46bd      	mov	sp, r7
 800a62e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a632:	bf00      	nop
 800a634:	40011000 	.word	0x40011000
 800a638:	40011400 	.word	0x40011400
 800a63c:	51eb851f 	.word	0x51eb851f

0800a640 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a640:	b084      	sub	sp, #16
 800a642:	b580      	push	{r7, lr}
 800a644:	b084      	sub	sp, #16
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
 800a64a:	f107 001c 	add.w	r0, r7, #28
 800a64e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a654:	2b01      	cmp	r3, #1
 800a656:	d122      	bne.n	800a69e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a65c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a66c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a670:	687a      	ldr	r2, [r7, #4]
 800a672:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	68db      	ldr	r3, [r3, #12]
 800a678:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a682:	2b01      	cmp	r3, #1
 800a684:	d105      	bne.n	800a692 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	68db      	ldr	r3, [r3, #12]
 800a68a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f001 fb1c 	bl	800bcd0 <USB_CoreReset>
 800a698:	4603      	mov	r3, r0
 800a69a:	73fb      	strb	r3, [r7, #15]
 800a69c:	e01a      	b.n	800a6d4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	68db      	ldr	r3, [r3, #12]
 800a6a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f001 fb10 	bl	800bcd0 <USB_CoreReset>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a6b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d106      	bne.n	800a6c8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	639a      	str	r2, [r3, #56]	; 0x38
 800a6c6:	e005      	b.n	800a6d4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d10b      	bne.n	800a6f2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	689b      	ldr	r3, [r3, #8]
 800a6de:	f043 0206 	orr.w	r2, r3, #6
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	689b      	ldr	r3, [r3, #8]
 800a6ea:	f043 0220 	orr.w	r2, r3, #32
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a6f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3710      	adds	r7, #16
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a6fe:	b004      	add	sp, #16
 800a700:	4770      	bx	lr
	...

0800a704 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a704:	b480      	push	{r7}
 800a706:	b087      	sub	sp, #28
 800a708:	af00      	add	r7, sp, #0
 800a70a:	60f8      	str	r0, [r7, #12]
 800a70c:	60b9      	str	r1, [r7, #8]
 800a70e:	4613      	mov	r3, r2
 800a710:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a712:	79fb      	ldrb	r3, [r7, #7]
 800a714:	2b02      	cmp	r3, #2
 800a716:	d165      	bne.n	800a7e4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	4a41      	ldr	r2, [pc, #260]	; (800a820 <USB_SetTurnaroundTime+0x11c>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d906      	bls.n	800a72e <USB_SetTurnaroundTime+0x2a>
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	4a40      	ldr	r2, [pc, #256]	; (800a824 <USB_SetTurnaroundTime+0x120>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d202      	bcs.n	800a72e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a728:	230f      	movs	r3, #15
 800a72a:	617b      	str	r3, [r7, #20]
 800a72c:	e062      	b.n	800a7f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	4a3c      	ldr	r2, [pc, #240]	; (800a824 <USB_SetTurnaroundTime+0x120>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d306      	bcc.n	800a744 <USB_SetTurnaroundTime+0x40>
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	4a3b      	ldr	r2, [pc, #236]	; (800a828 <USB_SetTurnaroundTime+0x124>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d202      	bcs.n	800a744 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a73e:	230e      	movs	r3, #14
 800a740:	617b      	str	r3, [r7, #20]
 800a742:	e057      	b.n	800a7f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	4a38      	ldr	r2, [pc, #224]	; (800a828 <USB_SetTurnaroundTime+0x124>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d306      	bcc.n	800a75a <USB_SetTurnaroundTime+0x56>
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	4a37      	ldr	r2, [pc, #220]	; (800a82c <USB_SetTurnaroundTime+0x128>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d202      	bcs.n	800a75a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a754:	230d      	movs	r3, #13
 800a756:	617b      	str	r3, [r7, #20]
 800a758:	e04c      	b.n	800a7f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	4a33      	ldr	r2, [pc, #204]	; (800a82c <USB_SetTurnaroundTime+0x128>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d306      	bcc.n	800a770 <USB_SetTurnaroundTime+0x6c>
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	4a32      	ldr	r2, [pc, #200]	; (800a830 <USB_SetTurnaroundTime+0x12c>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d802      	bhi.n	800a770 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a76a:	230c      	movs	r3, #12
 800a76c:	617b      	str	r3, [r7, #20]
 800a76e:	e041      	b.n	800a7f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	4a2f      	ldr	r2, [pc, #188]	; (800a830 <USB_SetTurnaroundTime+0x12c>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d906      	bls.n	800a786 <USB_SetTurnaroundTime+0x82>
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	4a2e      	ldr	r2, [pc, #184]	; (800a834 <USB_SetTurnaroundTime+0x130>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d802      	bhi.n	800a786 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a780:	230b      	movs	r3, #11
 800a782:	617b      	str	r3, [r7, #20]
 800a784:	e036      	b.n	800a7f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	4a2a      	ldr	r2, [pc, #168]	; (800a834 <USB_SetTurnaroundTime+0x130>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d906      	bls.n	800a79c <USB_SetTurnaroundTime+0x98>
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	4a29      	ldr	r2, [pc, #164]	; (800a838 <USB_SetTurnaroundTime+0x134>)
 800a792:	4293      	cmp	r3, r2
 800a794:	d802      	bhi.n	800a79c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a796:	230a      	movs	r3, #10
 800a798:	617b      	str	r3, [r7, #20]
 800a79a:	e02b      	b.n	800a7f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	4a26      	ldr	r2, [pc, #152]	; (800a838 <USB_SetTurnaroundTime+0x134>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d906      	bls.n	800a7b2 <USB_SetTurnaroundTime+0xae>
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	4a25      	ldr	r2, [pc, #148]	; (800a83c <USB_SetTurnaroundTime+0x138>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d202      	bcs.n	800a7b2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a7ac:	2309      	movs	r3, #9
 800a7ae:	617b      	str	r3, [r7, #20]
 800a7b0:	e020      	b.n	800a7f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	4a21      	ldr	r2, [pc, #132]	; (800a83c <USB_SetTurnaroundTime+0x138>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d306      	bcc.n	800a7c8 <USB_SetTurnaroundTime+0xc4>
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	4a20      	ldr	r2, [pc, #128]	; (800a840 <USB_SetTurnaroundTime+0x13c>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d802      	bhi.n	800a7c8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a7c2:	2308      	movs	r3, #8
 800a7c4:	617b      	str	r3, [r7, #20]
 800a7c6:	e015      	b.n	800a7f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	4a1d      	ldr	r2, [pc, #116]	; (800a840 <USB_SetTurnaroundTime+0x13c>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d906      	bls.n	800a7de <USB_SetTurnaroundTime+0xda>
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	4a1c      	ldr	r2, [pc, #112]	; (800a844 <USB_SetTurnaroundTime+0x140>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d202      	bcs.n	800a7de <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a7d8:	2307      	movs	r3, #7
 800a7da:	617b      	str	r3, [r7, #20]
 800a7dc:	e00a      	b.n	800a7f4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a7de:	2306      	movs	r3, #6
 800a7e0:	617b      	str	r3, [r7, #20]
 800a7e2:	e007      	b.n	800a7f4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a7e4:	79fb      	ldrb	r3, [r7, #7]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d102      	bne.n	800a7f0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a7ea:	2309      	movs	r3, #9
 800a7ec:	617b      	str	r3, [r7, #20]
 800a7ee:	e001      	b.n	800a7f4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a7f0:	2309      	movs	r3, #9
 800a7f2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	68da      	ldr	r2, [r3, #12]
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	029b      	lsls	r3, r3, #10
 800a808:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a80c:	431a      	orrs	r2, r3
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a812:	2300      	movs	r3, #0
}
 800a814:	4618      	mov	r0, r3
 800a816:	371c      	adds	r7, #28
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr
 800a820:	00d8acbf 	.word	0x00d8acbf
 800a824:	00e4e1c0 	.word	0x00e4e1c0
 800a828:	00f42400 	.word	0x00f42400
 800a82c:	01067380 	.word	0x01067380
 800a830:	011a499f 	.word	0x011a499f
 800a834:	01312cff 	.word	0x01312cff
 800a838:	014ca43f 	.word	0x014ca43f
 800a83c:	016e3600 	.word	0x016e3600
 800a840:	01a6ab1f 	.word	0x01a6ab1f
 800a844:	01e84800 	.word	0x01e84800

0800a848 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	689b      	ldr	r3, [r3, #8]
 800a854:	f043 0201 	orr.w	r2, r3, #1
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a85c:	2300      	movs	r3, #0
}
 800a85e:	4618      	mov	r0, r3
 800a860:	370c      	adds	r7, #12
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr

0800a86a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a86a:	b480      	push	{r7}
 800a86c:	b083      	sub	sp, #12
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	689b      	ldr	r3, [r3, #8]
 800a876:	f023 0201 	bic.w	r2, r3, #1
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a87e:	2300      	movs	r3, #0
}
 800a880:	4618      	mov	r0, r3
 800a882:	370c      	adds	r7, #12
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b084      	sub	sp, #16
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	460b      	mov	r3, r1
 800a896:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a898:	2300      	movs	r3, #0
 800a89a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	68db      	ldr	r3, [r3, #12]
 800a8a0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a8a8:	78fb      	ldrb	r3, [r7, #3]
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d115      	bne.n	800a8da <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	68db      	ldr	r3, [r3, #12]
 800a8b2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a8ba:	2001      	movs	r0, #1
 800a8bc:	f7fa f944 	bl	8004b48 <HAL_Delay>
      ms++;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	3301      	adds	r3, #1
 800a8c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f001 f972 	bl	800bbb0 <USB_GetMode>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	2b01      	cmp	r3, #1
 800a8d0:	d01e      	beq.n	800a910 <USB_SetCurrentMode+0x84>
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	2b31      	cmp	r3, #49	; 0x31
 800a8d6:	d9f0      	bls.n	800a8ba <USB_SetCurrentMode+0x2e>
 800a8d8:	e01a      	b.n	800a910 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a8da:	78fb      	ldrb	r3, [r7, #3]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d115      	bne.n	800a90c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	68db      	ldr	r3, [r3, #12]
 800a8e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a8ec:	2001      	movs	r0, #1
 800a8ee:	f7fa f92b 	bl	8004b48 <HAL_Delay>
      ms++;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f001 f959 	bl	800bbb0 <USB_GetMode>
 800a8fe:	4603      	mov	r3, r0
 800a900:	2b00      	cmp	r3, #0
 800a902:	d005      	beq.n	800a910 <USB_SetCurrentMode+0x84>
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2b31      	cmp	r3, #49	; 0x31
 800a908:	d9f0      	bls.n	800a8ec <USB_SetCurrentMode+0x60>
 800a90a:	e001      	b.n	800a910 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a90c:	2301      	movs	r3, #1
 800a90e:	e005      	b.n	800a91c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	2b32      	cmp	r3, #50	; 0x32
 800a914:	d101      	bne.n	800a91a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a916:	2301      	movs	r3, #1
 800a918:	e000      	b.n	800a91c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a91a:	2300      	movs	r3, #0
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3710      	adds	r7, #16
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a924:	b084      	sub	sp, #16
 800a926:	b580      	push	{r7, lr}
 800a928:	b086      	sub	sp, #24
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
 800a92e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a932:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a936:	2300      	movs	r3, #0
 800a938:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a93e:	2300      	movs	r3, #0
 800a940:	613b      	str	r3, [r7, #16]
 800a942:	e009      	b.n	800a958 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	3340      	adds	r3, #64	; 0x40
 800a94a:	009b      	lsls	r3, r3, #2
 800a94c:	4413      	add	r3, r2
 800a94e:	2200      	movs	r2, #0
 800a950:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	3301      	adds	r3, #1
 800a956:	613b      	str	r3, [r7, #16]
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	2b0e      	cmp	r3, #14
 800a95c:	d9f2      	bls.n	800a944 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a95e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a960:	2b00      	cmp	r3, #0
 800a962:	d11c      	bne.n	800a99e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	68fa      	ldr	r2, [r7, #12]
 800a96e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a972:	f043 0302 	orr.w	r3, r3, #2
 800a976:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a97c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a988:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a994:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	639a      	str	r2, [r3, #56]	; 0x38
 800a99c:	e00b      	b.n	800a9b6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9a2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a9bc:	461a      	mov	r2, r3
 800a9be:	2300      	movs	r3, #0
 800a9c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	680b      	ldr	r3, [r1, #0]
 800a9d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d10c      	bne.n	800a9f6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d104      	bne.n	800a9ec <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a9e2:	2100      	movs	r1, #0
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 f945 	bl	800ac74 <USB_SetDevSpeed>
 800a9ea:	e008      	b.n	800a9fe <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a9ec:	2101      	movs	r1, #1
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 f940 	bl	800ac74 <USB_SetDevSpeed>
 800a9f4:	e003      	b.n	800a9fe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a9f6:	2103      	movs	r1, #3
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 f93b 	bl	800ac74 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a9fe:	2110      	movs	r1, #16
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 f8f3 	bl	800abec <USB_FlushTxFifo>
 800aa06:	4603      	mov	r3, r0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d001      	beq.n	800aa10 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f000 f90f 	bl	800ac34 <USB_FlushRxFifo>
 800aa16:	4603      	mov	r3, r0
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d001      	beq.n	800aa20 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa26:	461a      	mov	r2, r3
 800aa28:	2300      	movs	r3, #0
 800aa2a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa32:	461a      	mov	r2, r3
 800aa34:	2300      	movs	r3, #0
 800aa36:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa3e:	461a      	mov	r2, r3
 800aa40:	2300      	movs	r3, #0
 800aa42:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa44:	2300      	movs	r3, #0
 800aa46:	613b      	str	r3, [r7, #16]
 800aa48:	e043      	b.n	800aad2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	015a      	lsls	r2, r3, #5
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	4413      	add	r3, r2
 800aa52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa60:	d118      	bne.n	800aa94 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d10a      	bne.n	800aa7e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	015a      	lsls	r2, r3, #5
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	4413      	add	r3, r2
 800aa70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa74:	461a      	mov	r2, r3
 800aa76:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aa7a:	6013      	str	r3, [r2, #0]
 800aa7c:	e013      	b.n	800aaa6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	015a      	lsls	r2, r3, #5
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	4413      	add	r3, r2
 800aa86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aa90:	6013      	str	r3, [r2, #0]
 800aa92:	e008      	b.n	800aaa6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	015a      	lsls	r2, r3, #5
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	4413      	add	r3, r2
 800aa9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	015a      	lsls	r2, r3, #5
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	4413      	add	r3, r2
 800aaae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aab2:	461a      	mov	r2, r3
 800aab4:	2300      	movs	r3, #0
 800aab6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	015a      	lsls	r2, r3, #5
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	4413      	add	r3, r2
 800aac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aac4:	461a      	mov	r2, r3
 800aac6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aaca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	3301      	adds	r3, #1
 800aad0:	613b      	str	r3, [r7, #16]
 800aad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad4:	693a      	ldr	r2, [r7, #16]
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d3b7      	bcc.n	800aa4a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aada:	2300      	movs	r3, #0
 800aadc:	613b      	str	r3, [r7, #16]
 800aade:	e043      	b.n	800ab68 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	015a      	lsls	r2, r3, #5
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	4413      	add	r3, r2
 800aae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aaf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aaf6:	d118      	bne.n	800ab2a <USB_DevInit+0x206>
    {
      if (i == 0U)
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d10a      	bne.n	800ab14 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	015a      	lsls	r2, r3, #5
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	4413      	add	r3, r2
 800ab06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ab10:	6013      	str	r3, [r2, #0]
 800ab12:	e013      	b.n	800ab3c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	015a      	lsls	r2, r3, #5
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	4413      	add	r3, r2
 800ab1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab20:	461a      	mov	r2, r3
 800ab22:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ab26:	6013      	str	r3, [r2, #0]
 800ab28:	e008      	b.n	800ab3c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	015a      	lsls	r2, r3, #5
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	4413      	add	r3, r2
 800ab32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab36:	461a      	mov	r2, r3
 800ab38:	2300      	movs	r3, #0
 800ab3a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	015a      	lsls	r2, r3, #5
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	4413      	add	r3, r2
 800ab44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab48:	461a      	mov	r2, r3
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	015a      	lsls	r2, r3, #5
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	4413      	add	r3, r2
 800ab56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ab60:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	3301      	adds	r3, #1
 800ab66:	613b      	str	r3, [r7, #16]
 800ab68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6a:	693a      	ldr	r2, [r7, #16]
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d3b7      	bcc.n	800aae0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab76:	691b      	ldr	r3, [r3, #16]
 800ab78:	68fa      	ldr	r2, [r7, #12]
 800ab7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab82:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2200      	movs	r2, #0
 800ab88:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ab90:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ab92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d105      	bne.n	800aba4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	699b      	ldr	r3, [r3, #24]
 800ab9c:	f043 0210 	orr.w	r2, r3, #16
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	699a      	ldr	r2, [r3, #24]
 800aba8:	4b0f      	ldr	r3, [pc, #60]	; (800abe8 <USB_DevInit+0x2c4>)
 800abaa:	4313      	orrs	r3, r2
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800abb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d005      	beq.n	800abc2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	699b      	ldr	r3, [r3, #24]
 800abba:	f043 0208 	orr.w	r2, r3, #8
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800abc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	d107      	bne.n	800abd8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	699b      	ldr	r3, [r3, #24]
 800abcc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800abd0:	f043 0304 	orr.w	r3, r3, #4
 800abd4:	687a      	ldr	r2, [r7, #4]
 800abd6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800abd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3718      	adds	r7, #24
 800abde:	46bd      	mov	sp, r7
 800abe0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800abe4:	b004      	add	sp, #16
 800abe6:	4770      	bx	lr
 800abe8:	803c3800 	.word	0x803c3800

0800abec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800abec:	b480      	push	{r7}
 800abee:	b085      	sub	sp, #20
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800abf6:	2300      	movs	r3, #0
 800abf8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	019b      	lsls	r3, r3, #6
 800abfe:	f043 0220 	orr.w	r2, r3, #32
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	3301      	adds	r3, #1
 800ac0a:	60fb      	str	r3, [r7, #12]
 800ac0c:	4a08      	ldr	r2, [pc, #32]	; (800ac30 <USB_FlushTxFifo+0x44>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d901      	bls.n	800ac16 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800ac12:	2303      	movs	r3, #3
 800ac14:	e006      	b.n	800ac24 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	691b      	ldr	r3, [r3, #16]
 800ac1a:	f003 0320 	and.w	r3, r3, #32
 800ac1e:	2b20      	cmp	r3, #32
 800ac20:	d0f1      	beq.n	800ac06 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ac22:	2300      	movs	r3, #0
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3714      	adds	r7, #20
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr
 800ac30:	00030d40 	.word	0x00030d40

0800ac34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b085      	sub	sp, #20
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2210      	movs	r2, #16
 800ac44:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	3301      	adds	r3, #1
 800ac4a:	60fb      	str	r3, [r7, #12]
 800ac4c:	4a08      	ldr	r2, [pc, #32]	; (800ac70 <USB_FlushRxFifo+0x3c>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d901      	bls.n	800ac56 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800ac52:	2303      	movs	r3, #3
 800ac54:	e006      	b.n	800ac64 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	691b      	ldr	r3, [r3, #16]
 800ac5a:	f003 0310 	and.w	r3, r3, #16
 800ac5e:	2b10      	cmp	r3, #16
 800ac60:	d0f1      	beq.n	800ac46 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ac62:	2300      	movs	r3, #0
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3714      	adds	r7, #20
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr
 800ac70:	00030d40 	.word	0x00030d40

0800ac74 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b085      	sub	sp, #20
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	460b      	mov	r3, r1
 800ac7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac8a:	681a      	ldr	r2, [r3, #0]
 800ac8c:	78fb      	ldrb	r3, [r7, #3]
 800ac8e:	68f9      	ldr	r1, [r7, #12]
 800ac90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac94:	4313      	orrs	r3, r2
 800ac96:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ac98:	2300      	movs	r3, #0
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3714      	adds	r7, #20
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca4:	4770      	bx	lr

0800aca6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800aca6:	b480      	push	{r7}
 800aca8:	b087      	sub	sp, #28
 800acaa:	af00      	add	r7, sp, #0
 800acac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acb8:	689b      	ldr	r3, [r3, #8]
 800acba:	f003 0306 	and.w	r3, r3, #6
 800acbe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d102      	bne.n	800accc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800acc6:	2300      	movs	r3, #0
 800acc8:	75fb      	strb	r3, [r7, #23]
 800acca:	e00a      	b.n	800ace2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	2b02      	cmp	r3, #2
 800acd0:	d002      	beq.n	800acd8 <USB_GetDevSpeed+0x32>
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2b06      	cmp	r3, #6
 800acd6:	d102      	bne.n	800acde <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800acd8:	2302      	movs	r3, #2
 800acda:	75fb      	strb	r3, [r7, #23]
 800acdc:	e001      	b.n	800ace2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800acde:	230f      	movs	r3, #15
 800ace0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ace2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	371c      	adds	r7, #28
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr

0800acf0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b085      	sub	sp, #20
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	781b      	ldrb	r3, [r3, #0]
 800ad02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	785b      	ldrb	r3, [r3, #1]
 800ad08:	2b01      	cmp	r3, #1
 800ad0a:	d13a      	bne.n	800ad82 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad12:	69da      	ldr	r2, [r3, #28]
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	f003 030f 	and.w	r3, r3, #15
 800ad1c:	2101      	movs	r1, #1
 800ad1e:	fa01 f303 	lsl.w	r3, r1, r3
 800ad22:	b29b      	uxth	r3, r3
 800ad24:	68f9      	ldr	r1, [r7, #12]
 800ad26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	015a      	lsls	r2, r3, #5
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	4413      	add	r3, r2
 800ad36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d155      	bne.n	800adf0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	015a      	lsls	r2, r3, #5
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	4413      	add	r3, r2
 800ad4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad50:	681a      	ldr	r2, [r3, #0]
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	689b      	ldr	r3, [r3, #8]
 800ad56:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	78db      	ldrb	r3, [r3, #3]
 800ad5e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ad60:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	059b      	lsls	r3, r3, #22
 800ad66:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ad68:	4313      	orrs	r3, r2
 800ad6a:	68ba      	ldr	r2, [r7, #8]
 800ad6c:	0151      	lsls	r1, r2, #5
 800ad6e:	68fa      	ldr	r2, [r7, #12]
 800ad70:	440a      	add	r2, r1
 800ad72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad7e:	6013      	str	r3, [r2, #0]
 800ad80:	e036      	b.n	800adf0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad88:	69da      	ldr	r2, [r3, #28]
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	f003 030f 	and.w	r3, r3, #15
 800ad92:	2101      	movs	r1, #1
 800ad94:	fa01 f303 	lsl.w	r3, r1, r3
 800ad98:	041b      	lsls	r3, r3, #16
 800ad9a:	68f9      	ldr	r1, [r7, #12]
 800ad9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ada0:	4313      	orrs	r3, r2
 800ada2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	015a      	lsls	r2, r3, #5
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	4413      	add	r3, r2
 800adac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d11a      	bne.n	800adf0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	015a      	lsls	r2, r3, #5
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	4413      	add	r3, r2
 800adc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	689b      	ldr	r3, [r3, #8]
 800adcc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	78db      	ldrb	r3, [r3, #3]
 800add4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800add6:	430b      	orrs	r3, r1
 800add8:	4313      	orrs	r3, r2
 800adda:	68ba      	ldr	r2, [r7, #8]
 800addc:	0151      	lsls	r1, r2, #5
 800adde:	68fa      	ldr	r2, [r7, #12]
 800ade0:	440a      	add	r2, r1
 800ade2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ade6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800adea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800adee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800adf0:	2300      	movs	r3, #0
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3714      	adds	r7, #20
 800adf6:	46bd      	mov	sp, r7
 800adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfc:	4770      	bx	lr
	...

0800ae00 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b085      	sub	sp, #20
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	785b      	ldrb	r3, [r3, #1]
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	d161      	bne.n	800aee0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	015a      	lsls	r2, r3, #5
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	4413      	add	r3, r2
 800ae24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae32:	d11f      	bne.n	800ae74 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	015a      	lsls	r2, r3, #5
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	4413      	add	r3, r2
 800ae3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	68ba      	ldr	r2, [r7, #8]
 800ae44:	0151      	lsls	r1, r2, #5
 800ae46:	68fa      	ldr	r2, [r7, #12]
 800ae48:	440a      	add	r2, r1
 800ae4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ae52:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	015a      	lsls	r2, r3, #5
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	4413      	add	r3, r2
 800ae5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	68ba      	ldr	r2, [r7, #8]
 800ae64:	0151      	lsls	r1, r2, #5
 800ae66:	68fa      	ldr	r2, [r7, #12]
 800ae68:	440a      	add	r2, r1
 800ae6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae72:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	f003 030f 	and.w	r3, r3, #15
 800ae84:	2101      	movs	r1, #1
 800ae86:	fa01 f303 	lsl.w	r3, r1, r3
 800ae8a:	b29b      	uxth	r3, r3
 800ae8c:	43db      	mvns	r3, r3
 800ae8e:	68f9      	ldr	r1, [r7, #12]
 800ae90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae94:	4013      	ands	r3, r2
 800ae96:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae9e:	69da      	ldr	r2, [r3, #28]
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	f003 030f 	and.w	r3, r3, #15
 800aea8:	2101      	movs	r1, #1
 800aeaa:	fa01 f303 	lsl.w	r3, r1, r3
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	43db      	mvns	r3, r3
 800aeb2:	68f9      	ldr	r1, [r7, #12]
 800aeb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aeb8:	4013      	ands	r3, r2
 800aeba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	015a      	lsls	r2, r3, #5
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	4413      	add	r3, r2
 800aec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	0159      	lsls	r1, r3, #5
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	440b      	add	r3, r1
 800aed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aed6:	4619      	mov	r1, r3
 800aed8:	4b35      	ldr	r3, [pc, #212]	; (800afb0 <USB_DeactivateEndpoint+0x1b0>)
 800aeda:	4013      	ands	r3, r2
 800aedc:	600b      	str	r3, [r1, #0]
 800aede:	e060      	b.n	800afa2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	015a      	lsls	r2, r3, #5
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	4413      	add	r3, r2
 800aee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aef2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aef6:	d11f      	bne.n	800af38 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	015a      	lsls	r2, r3, #5
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	4413      	add	r3, r2
 800af00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	68ba      	ldr	r2, [r7, #8]
 800af08:	0151      	lsls	r1, r2, #5
 800af0a:	68fa      	ldr	r2, [r7, #12]
 800af0c:	440a      	add	r2, r1
 800af0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800af16:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	015a      	lsls	r2, r3, #5
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	4413      	add	r3, r2
 800af20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	68ba      	ldr	r2, [r7, #8]
 800af28:	0151      	lsls	r1, r2, #5
 800af2a:	68fa      	ldr	r2, [r7, #12]
 800af2c:	440a      	add	r2, r1
 800af2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800af36:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	f003 030f 	and.w	r3, r3, #15
 800af48:	2101      	movs	r1, #1
 800af4a:	fa01 f303 	lsl.w	r3, r1, r3
 800af4e:	041b      	lsls	r3, r3, #16
 800af50:	43db      	mvns	r3, r3
 800af52:	68f9      	ldr	r1, [r7, #12]
 800af54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af58:	4013      	ands	r3, r2
 800af5a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af62:	69da      	ldr	r2, [r3, #28]
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	781b      	ldrb	r3, [r3, #0]
 800af68:	f003 030f 	and.w	r3, r3, #15
 800af6c:	2101      	movs	r1, #1
 800af6e:	fa01 f303 	lsl.w	r3, r1, r3
 800af72:	041b      	lsls	r3, r3, #16
 800af74:	43db      	mvns	r3, r3
 800af76:	68f9      	ldr	r1, [r7, #12]
 800af78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af7c:	4013      	ands	r3, r2
 800af7e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	015a      	lsls	r2, r3, #5
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	4413      	add	r3, r2
 800af88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af8c:	681a      	ldr	r2, [r3, #0]
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	0159      	lsls	r1, r3, #5
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	440b      	add	r3, r1
 800af96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af9a:	4619      	mov	r1, r3
 800af9c:	4b05      	ldr	r3, [pc, #20]	; (800afb4 <USB_DeactivateEndpoint+0x1b4>)
 800af9e:	4013      	ands	r3, r2
 800afa0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800afa2:	2300      	movs	r3, #0
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3714      	adds	r7, #20
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr
 800afb0:	ec337800 	.word	0xec337800
 800afb4:	eff37800 	.word	0xeff37800

0800afb8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b08a      	sub	sp, #40	; 0x28
 800afbc:	af02      	add	r7, sp, #8
 800afbe:	60f8      	str	r0, [r7, #12]
 800afc0:	60b9      	str	r1, [r7, #8]
 800afc2:	4613      	mov	r3, r2
 800afc4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	781b      	ldrb	r3, [r3, #0]
 800afce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	785b      	ldrb	r3, [r3, #1]
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	f040 815c 	bne.w	800b292 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	695b      	ldr	r3, [r3, #20]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d132      	bne.n	800b048 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800afe2:	69bb      	ldr	r3, [r7, #24]
 800afe4:	015a      	lsls	r2, r3, #5
 800afe6:	69fb      	ldr	r3, [r7, #28]
 800afe8:	4413      	add	r3, r2
 800afea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afee:	691b      	ldr	r3, [r3, #16]
 800aff0:	69ba      	ldr	r2, [r7, #24]
 800aff2:	0151      	lsls	r1, r2, #5
 800aff4:	69fa      	ldr	r2, [r7, #28]
 800aff6:	440a      	add	r2, r1
 800aff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800affc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b000:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b004:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b006:	69bb      	ldr	r3, [r7, #24]
 800b008:	015a      	lsls	r2, r3, #5
 800b00a:	69fb      	ldr	r3, [r7, #28]
 800b00c:	4413      	add	r3, r2
 800b00e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b012:	691b      	ldr	r3, [r3, #16]
 800b014:	69ba      	ldr	r2, [r7, #24]
 800b016:	0151      	lsls	r1, r2, #5
 800b018:	69fa      	ldr	r2, [r7, #28]
 800b01a:	440a      	add	r2, r1
 800b01c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b020:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b024:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b026:	69bb      	ldr	r3, [r7, #24]
 800b028:	015a      	lsls	r2, r3, #5
 800b02a:	69fb      	ldr	r3, [r7, #28]
 800b02c:	4413      	add	r3, r2
 800b02e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b032:	691b      	ldr	r3, [r3, #16]
 800b034:	69ba      	ldr	r2, [r7, #24]
 800b036:	0151      	lsls	r1, r2, #5
 800b038:	69fa      	ldr	r2, [r7, #28]
 800b03a:	440a      	add	r2, r1
 800b03c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b040:	0cdb      	lsrs	r3, r3, #19
 800b042:	04db      	lsls	r3, r3, #19
 800b044:	6113      	str	r3, [r2, #16]
 800b046:	e074      	b.n	800b132 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b048:	69bb      	ldr	r3, [r7, #24]
 800b04a:	015a      	lsls	r2, r3, #5
 800b04c:	69fb      	ldr	r3, [r7, #28]
 800b04e:	4413      	add	r3, r2
 800b050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b054:	691b      	ldr	r3, [r3, #16]
 800b056:	69ba      	ldr	r2, [r7, #24]
 800b058:	0151      	lsls	r1, r2, #5
 800b05a:	69fa      	ldr	r2, [r7, #28]
 800b05c:	440a      	add	r2, r1
 800b05e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b062:	0cdb      	lsrs	r3, r3, #19
 800b064:	04db      	lsls	r3, r3, #19
 800b066:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b068:	69bb      	ldr	r3, [r7, #24]
 800b06a:	015a      	lsls	r2, r3, #5
 800b06c:	69fb      	ldr	r3, [r7, #28]
 800b06e:	4413      	add	r3, r2
 800b070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b074:	691b      	ldr	r3, [r3, #16]
 800b076:	69ba      	ldr	r2, [r7, #24]
 800b078:	0151      	lsls	r1, r2, #5
 800b07a:	69fa      	ldr	r2, [r7, #28]
 800b07c:	440a      	add	r2, r1
 800b07e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b082:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b086:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b08a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b08c:	69bb      	ldr	r3, [r7, #24]
 800b08e:	015a      	lsls	r2, r3, #5
 800b090:	69fb      	ldr	r3, [r7, #28]
 800b092:	4413      	add	r3, r2
 800b094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b098:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	6959      	ldr	r1, [r3, #20]
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	689b      	ldr	r3, [r3, #8]
 800b0a2:	440b      	add	r3, r1
 800b0a4:	1e59      	subs	r1, r3, #1
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	689b      	ldr	r3, [r3, #8]
 800b0aa:	fbb1 f3f3 	udiv	r3, r1, r3
 800b0ae:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b0b0:	4b9d      	ldr	r3, [pc, #628]	; (800b328 <USB_EPStartXfer+0x370>)
 800b0b2:	400b      	ands	r3, r1
 800b0b4:	69b9      	ldr	r1, [r7, #24]
 800b0b6:	0148      	lsls	r0, r1, #5
 800b0b8:	69f9      	ldr	r1, [r7, #28]
 800b0ba:	4401      	add	r1, r0
 800b0bc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b0c4:	69bb      	ldr	r3, [r7, #24]
 800b0c6:	015a      	lsls	r2, r3, #5
 800b0c8:	69fb      	ldr	r3, [r7, #28]
 800b0ca:	4413      	add	r3, r2
 800b0cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0d0:	691a      	ldr	r2, [r3, #16]
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	695b      	ldr	r3, [r3, #20]
 800b0d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b0da:	69b9      	ldr	r1, [r7, #24]
 800b0dc:	0148      	lsls	r0, r1, #5
 800b0de:	69f9      	ldr	r1, [r7, #28]
 800b0e0:	4401      	add	r1, r0
 800b0e2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	78db      	ldrb	r3, [r3, #3]
 800b0ee:	2b01      	cmp	r3, #1
 800b0f0:	d11f      	bne.n	800b132 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b0f2:	69bb      	ldr	r3, [r7, #24]
 800b0f4:	015a      	lsls	r2, r3, #5
 800b0f6:	69fb      	ldr	r3, [r7, #28]
 800b0f8:	4413      	add	r3, r2
 800b0fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0fe:	691b      	ldr	r3, [r3, #16]
 800b100:	69ba      	ldr	r2, [r7, #24]
 800b102:	0151      	lsls	r1, r2, #5
 800b104:	69fa      	ldr	r2, [r7, #28]
 800b106:	440a      	add	r2, r1
 800b108:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b10c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b110:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b112:	69bb      	ldr	r3, [r7, #24]
 800b114:	015a      	lsls	r2, r3, #5
 800b116:	69fb      	ldr	r3, [r7, #28]
 800b118:	4413      	add	r3, r2
 800b11a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b11e:	691b      	ldr	r3, [r3, #16]
 800b120:	69ba      	ldr	r2, [r7, #24]
 800b122:	0151      	lsls	r1, r2, #5
 800b124:	69fa      	ldr	r2, [r7, #28]
 800b126:	440a      	add	r2, r1
 800b128:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b12c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b130:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b132:	79fb      	ldrb	r3, [r7, #7]
 800b134:	2b01      	cmp	r3, #1
 800b136:	d14b      	bne.n	800b1d0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	691b      	ldr	r3, [r3, #16]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d009      	beq.n	800b154 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b140:	69bb      	ldr	r3, [r7, #24]
 800b142:	015a      	lsls	r2, r3, #5
 800b144:	69fb      	ldr	r3, [r7, #28]
 800b146:	4413      	add	r3, r2
 800b148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b14c:	461a      	mov	r2, r3
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	691b      	ldr	r3, [r3, #16]
 800b152:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	78db      	ldrb	r3, [r3, #3]
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d128      	bne.n	800b1ae <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b15c:	69fb      	ldr	r3, [r7, #28]
 800b15e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b162:	689b      	ldr	r3, [r3, #8]
 800b164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d110      	bne.n	800b18e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b16c:	69bb      	ldr	r3, [r7, #24]
 800b16e:	015a      	lsls	r2, r3, #5
 800b170:	69fb      	ldr	r3, [r7, #28]
 800b172:	4413      	add	r3, r2
 800b174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	69ba      	ldr	r2, [r7, #24]
 800b17c:	0151      	lsls	r1, r2, #5
 800b17e:	69fa      	ldr	r2, [r7, #28]
 800b180:	440a      	add	r2, r1
 800b182:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b186:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b18a:	6013      	str	r3, [r2, #0]
 800b18c:	e00f      	b.n	800b1ae <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b18e:	69bb      	ldr	r3, [r7, #24]
 800b190:	015a      	lsls	r2, r3, #5
 800b192:	69fb      	ldr	r3, [r7, #28]
 800b194:	4413      	add	r3, r2
 800b196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	69ba      	ldr	r2, [r7, #24]
 800b19e:	0151      	lsls	r1, r2, #5
 800b1a0:	69fa      	ldr	r2, [r7, #28]
 800b1a2:	440a      	add	r2, r1
 800b1a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1ac:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b1ae:	69bb      	ldr	r3, [r7, #24]
 800b1b0:	015a      	lsls	r2, r3, #5
 800b1b2:	69fb      	ldr	r3, [r7, #28]
 800b1b4:	4413      	add	r3, r2
 800b1b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	69ba      	ldr	r2, [r7, #24]
 800b1be:	0151      	lsls	r1, r2, #5
 800b1c0:	69fa      	ldr	r2, [r7, #28]
 800b1c2:	440a      	add	r2, r1
 800b1c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b1cc:	6013      	str	r3, [r2, #0]
 800b1ce:	e12f      	b.n	800b430 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b1d0:	69bb      	ldr	r3, [r7, #24]
 800b1d2:	015a      	lsls	r2, r3, #5
 800b1d4:	69fb      	ldr	r3, [r7, #28]
 800b1d6:	4413      	add	r3, r2
 800b1d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	69ba      	ldr	r2, [r7, #24]
 800b1e0:	0151      	lsls	r1, r2, #5
 800b1e2:	69fa      	ldr	r2, [r7, #28]
 800b1e4:	440a      	add	r2, r1
 800b1e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b1ee:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	78db      	ldrb	r3, [r3, #3]
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	d015      	beq.n	800b224 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	695b      	ldr	r3, [r3, #20]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	f000 8117 	beq.w	800b430 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b208:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	781b      	ldrb	r3, [r3, #0]
 800b20e:	f003 030f 	and.w	r3, r3, #15
 800b212:	2101      	movs	r1, #1
 800b214:	fa01 f303 	lsl.w	r3, r1, r3
 800b218:	69f9      	ldr	r1, [r7, #28]
 800b21a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b21e:	4313      	orrs	r3, r2
 800b220:	634b      	str	r3, [r1, #52]	; 0x34
 800b222:	e105      	b.n	800b430 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b224:	69fb      	ldr	r3, [r7, #28]
 800b226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b22a:	689b      	ldr	r3, [r3, #8]
 800b22c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b230:	2b00      	cmp	r3, #0
 800b232:	d110      	bne.n	800b256 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b234:	69bb      	ldr	r3, [r7, #24]
 800b236:	015a      	lsls	r2, r3, #5
 800b238:	69fb      	ldr	r3, [r7, #28]
 800b23a:	4413      	add	r3, r2
 800b23c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	69ba      	ldr	r2, [r7, #24]
 800b244:	0151      	lsls	r1, r2, #5
 800b246:	69fa      	ldr	r2, [r7, #28]
 800b248:	440a      	add	r2, r1
 800b24a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b24e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b252:	6013      	str	r3, [r2, #0]
 800b254:	e00f      	b.n	800b276 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b256:	69bb      	ldr	r3, [r7, #24]
 800b258:	015a      	lsls	r2, r3, #5
 800b25a:	69fb      	ldr	r3, [r7, #28]
 800b25c:	4413      	add	r3, r2
 800b25e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	69ba      	ldr	r2, [r7, #24]
 800b266:	0151      	lsls	r1, r2, #5
 800b268:	69fa      	ldr	r2, [r7, #28]
 800b26a:	440a      	add	r2, r1
 800b26c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b274:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	68d9      	ldr	r1, [r3, #12]
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	781a      	ldrb	r2, [r3, #0]
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	695b      	ldr	r3, [r3, #20]
 800b282:	b298      	uxth	r0, r3
 800b284:	79fb      	ldrb	r3, [r7, #7]
 800b286:	9300      	str	r3, [sp, #0]
 800b288:	4603      	mov	r3, r0
 800b28a:	68f8      	ldr	r0, [r7, #12]
 800b28c:	f000 fa2b 	bl	800b6e6 <USB_WritePacket>
 800b290:	e0ce      	b.n	800b430 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	015a      	lsls	r2, r3, #5
 800b296:	69fb      	ldr	r3, [r7, #28]
 800b298:	4413      	add	r3, r2
 800b29a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b29e:	691b      	ldr	r3, [r3, #16]
 800b2a0:	69ba      	ldr	r2, [r7, #24]
 800b2a2:	0151      	lsls	r1, r2, #5
 800b2a4:	69fa      	ldr	r2, [r7, #28]
 800b2a6:	440a      	add	r2, r1
 800b2a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2ac:	0cdb      	lsrs	r3, r3, #19
 800b2ae:	04db      	lsls	r3, r3, #19
 800b2b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b2b2:	69bb      	ldr	r3, [r7, #24]
 800b2b4:	015a      	lsls	r2, r3, #5
 800b2b6:	69fb      	ldr	r3, [r7, #28]
 800b2b8:	4413      	add	r3, r2
 800b2ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2be:	691b      	ldr	r3, [r3, #16]
 800b2c0:	69ba      	ldr	r2, [r7, #24]
 800b2c2:	0151      	lsls	r1, r2, #5
 800b2c4:	69fa      	ldr	r2, [r7, #28]
 800b2c6:	440a      	add	r2, r1
 800b2c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b2d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b2d4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	695b      	ldr	r3, [r3, #20]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d126      	bne.n	800b32c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b2de:	69bb      	ldr	r3, [r7, #24]
 800b2e0:	015a      	lsls	r2, r3, #5
 800b2e2:	69fb      	ldr	r3, [r7, #28]
 800b2e4:	4413      	add	r3, r2
 800b2e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2ea:	691a      	ldr	r2, [r3, #16]
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	689b      	ldr	r3, [r3, #8]
 800b2f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b2f4:	69b9      	ldr	r1, [r7, #24]
 800b2f6:	0148      	lsls	r0, r1, #5
 800b2f8:	69f9      	ldr	r1, [r7, #28]
 800b2fa:	4401      	add	r1, r0
 800b2fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b300:	4313      	orrs	r3, r2
 800b302:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b304:	69bb      	ldr	r3, [r7, #24]
 800b306:	015a      	lsls	r2, r3, #5
 800b308:	69fb      	ldr	r3, [r7, #28]
 800b30a:	4413      	add	r3, r2
 800b30c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b310:	691b      	ldr	r3, [r3, #16]
 800b312:	69ba      	ldr	r2, [r7, #24]
 800b314:	0151      	lsls	r1, r2, #5
 800b316:	69fa      	ldr	r2, [r7, #28]
 800b318:	440a      	add	r2, r1
 800b31a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b31e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b322:	6113      	str	r3, [r2, #16]
 800b324:	e036      	b.n	800b394 <USB_EPStartXfer+0x3dc>
 800b326:	bf00      	nop
 800b328:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	695a      	ldr	r2, [r3, #20]
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	689b      	ldr	r3, [r3, #8]
 800b334:	4413      	add	r3, r2
 800b336:	1e5a      	subs	r2, r3, #1
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	689b      	ldr	r3, [r3, #8]
 800b33c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b340:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b342:	69bb      	ldr	r3, [r7, #24]
 800b344:	015a      	lsls	r2, r3, #5
 800b346:	69fb      	ldr	r3, [r7, #28]
 800b348:	4413      	add	r3, r2
 800b34a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b34e:	691a      	ldr	r2, [r3, #16]
 800b350:	8afb      	ldrh	r3, [r7, #22]
 800b352:	04d9      	lsls	r1, r3, #19
 800b354:	4b39      	ldr	r3, [pc, #228]	; (800b43c <USB_EPStartXfer+0x484>)
 800b356:	400b      	ands	r3, r1
 800b358:	69b9      	ldr	r1, [r7, #24]
 800b35a:	0148      	lsls	r0, r1, #5
 800b35c:	69f9      	ldr	r1, [r7, #28]
 800b35e:	4401      	add	r1, r0
 800b360:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b364:	4313      	orrs	r3, r2
 800b366:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800b368:	69bb      	ldr	r3, [r7, #24]
 800b36a:	015a      	lsls	r2, r3, #5
 800b36c:	69fb      	ldr	r3, [r7, #28]
 800b36e:	4413      	add	r3, r2
 800b370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b374:	691a      	ldr	r2, [r3, #16]
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	689b      	ldr	r3, [r3, #8]
 800b37a:	8af9      	ldrh	r1, [r7, #22]
 800b37c:	fb01 f303 	mul.w	r3, r1, r3
 800b380:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b384:	69b9      	ldr	r1, [r7, #24]
 800b386:	0148      	lsls	r0, r1, #5
 800b388:	69f9      	ldr	r1, [r7, #28]
 800b38a:	4401      	add	r1, r0
 800b38c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b390:	4313      	orrs	r3, r2
 800b392:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b394:	79fb      	ldrb	r3, [r7, #7]
 800b396:	2b01      	cmp	r3, #1
 800b398:	d10d      	bne.n	800b3b6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	68db      	ldr	r3, [r3, #12]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d009      	beq.n	800b3b6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	68d9      	ldr	r1, [r3, #12]
 800b3a6:	69bb      	ldr	r3, [r7, #24]
 800b3a8:	015a      	lsls	r2, r3, #5
 800b3aa:	69fb      	ldr	r3, [r7, #28]
 800b3ac:	4413      	add	r3, r2
 800b3ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3b2:	460a      	mov	r2, r1
 800b3b4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	78db      	ldrb	r3, [r3, #3]
 800b3ba:	2b01      	cmp	r3, #1
 800b3bc:	d128      	bne.n	800b410 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b3be:	69fb      	ldr	r3, [r7, #28]
 800b3c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3c4:	689b      	ldr	r3, [r3, #8]
 800b3c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d110      	bne.n	800b3f0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b3ce:	69bb      	ldr	r3, [r7, #24]
 800b3d0:	015a      	lsls	r2, r3, #5
 800b3d2:	69fb      	ldr	r3, [r7, #28]
 800b3d4:	4413      	add	r3, r2
 800b3d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	69ba      	ldr	r2, [r7, #24]
 800b3de:	0151      	lsls	r1, r2, #5
 800b3e0:	69fa      	ldr	r2, [r7, #28]
 800b3e2:	440a      	add	r2, r1
 800b3e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b3ec:	6013      	str	r3, [r2, #0]
 800b3ee:	e00f      	b.n	800b410 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b3f0:	69bb      	ldr	r3, [r7, #24]
 800b3f2:	015a      	lsls	r2, r3, #5
 800b3f4:	69fb      	ldr	r3, [r7, #28]
 800b3f6:	4413      	add	r3, r2
 800b3f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	69ba      	ldr	r2, [r7, #24]
 800b400:	0151      	lsls	r1, r2, #5
 800b402:	69fa      	ldr	r2, [r7, #28]
 800b404:	440a      	add	r2, r1
 800b406:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b40a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b40e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b410:	69bb      	ldr	r3, [r7, #24]
 800b412:	015a      	lsls	r2, r3, #5
 800b414:	69fb      	ldr	r3, [r7, #28]
 800b416:	4413      	add	r3, r2
 800b418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	69ba      	ldr	r2, [r7, #24]
 800b420:	0151      	lsls	r1, r2, #5
 800b422:	69fa      	ldr	r2, [r7, #28]
 800b424:	440a      	add	r2, r1
 800b426:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b42a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b42e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b430:	2300      	movs	r3, #0
}
 800b432:	4618      	mov	r0, r3
 800b434:	3720      	adds	r7, #32
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
 800b43a:	bf00      	nop
 800b43c:	1ff80000 	.word	0x1ff80000

0800b440 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b440:	b480      	push	{r7}
 800b442:	b087      	sub	sp, #28
 800b444:	af00      	add	r7, sp, #0
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	4613      	mov	r3, r2
 800b44c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	785b      	ldrb	r3, [r3, #1]
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	f040 80cd 	bne.w	800b5fc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	695b      	ldr	r3, [r3, #20]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d132      	bne.n	800b4d0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	015a      	lsls	r2, r3, #5
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	4413      	add	r3, r2
 800b472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b476:	691b      	ldr	r3, [r3, #16]
 800b478:	693a      	ldr	r2, [r7, #16]
 800b47a:	0151      	lsls	r1, r2, #5
 800b47c:	697a      	ldr	r2, [r7, #20]
 800b47e:	440a      	add	r2, r1
 800b480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b484:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b488:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b48c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	015a      	lsls	r2, r3, #5
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	4413      	add	r3, r2
 800b496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b49a:	691b      	ldr	r3, [r3, #16]
 800b49c:	693a      	ldr	r2, [r7, #16]
 800b49e:	0151      	lsls	r1, r2, #5
 800b4a0:	697a      	ldr	r2, [r7, #20]
 800b4a2:	440a      	add	r2, r1
 800b4a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b4ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	015a      	lsls	r2, r3, #5
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	4413      	add	r3, r2
 800b4b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4ba:	691b      	ldr	r3, [r3, #16]
 800b4bc:	693a      	ldr	r2, [r7, #16]
 800b4be:	0151      	lsls	r1, r2, #5
 800b4c0:	697a      	ldr	r2, [r7, #20]
 800b4c2:	440a      	add	r2, r1
 800b4c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4c8:	0cdb      	lsrs	r3, r3, #19
 800b4ca:	04db      	lsls	r3, r3, #19
 800b4cc:	6113      	str	r3, [r2, #16]
 800b4ce:	e04e      	b.n	800b56e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	015a      	lsls	r2, r3, #5
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	4413      	add	r3, r2
 800b4d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4dc:	691b      	ldr	r3, [r3, #16]
 800b4de:	693a      	ldr	r2, [r7, #16]
 800b4e0:	0151      	lsls	r1, r2, #5
 800b4e2:	697a      	ldr	r2, [r7, #20]
 800b4e4:	440a      	add	r2, r1
 800b4e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4ea:	0cdb      	lsrs	r3, r3, #19
 800b4ec:	04db      	lsls	r3, r3, #19
 800b4ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	015a      	lsls	r2, r3, #5
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	4413      	add	r3, r2
 800b4f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4fc:	691b      	ldr	r3, [r3, #16]
 800b4fe:	693a      	ldr	r2, [r7, #16]
 800b500:	0151      	lsls	r1, r2, #5
 800b502:	697a      	ldr	r2, [r7, #20]
 800b504:	440a      	add	r2, r1
 800b506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b50a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b50e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b512:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	695a      	ldr	r2, [r3, #20]
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	689b      	ldr	r3, [r3, #8]
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d903      	bls.n	800b528 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	689a      	ldr	r2, [r3, #8]
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	015a      	lsls	r2, r3, #5
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	4413      	add	r3, r2
 800b530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b534:	691b      	ldr	r3, [r3, #16]
 800b536:	693a      	ldr	r2, [r7, #16]
 800b538:	0151      	lsls	r1, r2, #5
 800b53a:	697a      	ldr	r2, [r7, #20]
 800b53c:	440a      	add	r2, r1
 800b53e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b542:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b546:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	015a      	lsls	r2, r3, #5
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	4413      	add	r3, r2
 800b550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b554:	691a      	ldr	r2, [r3, #16]
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	695b      	ldr	r3, [r3, #20]
 800b55a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b55e:	6939      	ldr	r1, [r7, #16]
 800b560:	0148      	lsls	r0, r1, #5
 800b562:	6979      	ldr	r1, [r7, #20]
 800b564:	4401      	add	r1, r0
 800b566:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b56a:	4313      	orrs	r3, r2
 800b56c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b56e:	79fb      	ldrb	r3, [r7, #7]
 800b570:	2b01      	cmp	r3, #1
 800b572:	d11e      	bne.n	800b5b2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	691b      	ldr	r3, [r3, #16]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d009      	beq.n	800b590 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	015a      	lsls	r2, r3, #5
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	4413      	add	r3, r2
 800b584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b588:	461a      	mov	r2, r3
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	691b      	ldr	r3, [r3, #16]
 800b58e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	015a      	lsls	r2, r3, #5
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	4413      	add	r3, r2
 800b598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	693a      	ldr	r2, [r7, #16]
 800b5a0:	0151      	lsls	r1, r2, #5
 800b5a2:	697a      	ldr	r2, [r7, #20]
 800b5a4:	440a      	add	r2, r1
 800b5a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b5ae:	6013      	str	r3, [r2, #0]
 800b5b0:	e092      	b.n	800b6d8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	015a      	lsls	r2, r3, #5
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	4413      	add	r3, r2
 800b5ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	693a      	ldr	r2, [r7, #16]
 800b5c2:	0151      	lsls	r1, r2, #5
 800b5c4:	697a      	ldr	r2, [r7, #20]
 800b5c6:	440a      	add	r2, r1
 800b5c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b5d0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	695b      	ldr	r3, [r3, #20]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d07e      	beq.n	800b6d8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	f003 030f 	and.w	r3, r3, #15
 800b5ea:	2101      	movs	r1, #1
 800b5ec:	fa01 f303 	lsl.w	r3, r1, r3
 800b5f0:	6979      	ldr	r1, [r7, #20]
 800b5f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b5f6:	4313      	orrs	r3, r2
 800b5f8:	634b      	str	r3, [r1, #52]	; 0x34
 800b5fa:	e06d      	b.n	800b6d8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	015a      	lsls	r2, r3, #5
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	4413      	add	r3, r2
 800b604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b608:	691b      	ldr	r3, [r3, #16]
 800b60a:	693a      	ldr	r2, [r7, #16]
 800b60c:	0151      	lsls	r1, r2, #5
 800b60e:	697a      	ldr	r2, [r7, #20]
 800b610:	440a      	add	r2, r1
 800b612:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b616:	0cdb      	lsrs	r3, r3, #19
 800b618:	04db      	lsls	r3, r3, #19
 800b61a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	015a      	lsls	r2, r3, #5
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	4413      	add	r3, r2
 800b624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b628:	691b      	ldr	r3, [r3, #16]
 800b62a:	693a      	ldr	r2, [r7, #16]
 800b62c:	0151      	lsls	r1, r2, #5
 800b62e:	697a      	ldr	r2, [r7, #20]
 800b630:	440a      	add	r2, r1
 800b632:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b636:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b63a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b63e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	695b      	ldr	r3, [r3, #20]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d003      	beq.n	800b650 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	689a      	ldr	r2, [r3, #8]
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	015a      	lsls	r2, r3, #5
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	4413      	add	r3, r2
 800b658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b65c:	691b      	ldr	r3, [r3, #16]
 800b65e:	693a      	ldr	r2, [r7, #16]
 800b660:	0151      	lsls	r1, r2, #5
 800b662:	697a      	ldr	r2, [r7, #20]
 800b664:	440a      	add	r2, r1
 800b666:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b66a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b66e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	015a      	lsls	r2, r3, #5
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	4413      	add	r3, r2
 800b678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b67c:	691a      	ldr	r2, [r3, #16]
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	689b      	ldr	r3, [r3, #8]
 800b682:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b686:	6939      	ldr	r1, [r7, #16]
 800b688:	0148      	lsls	r0, r1, #5
 800b68a:	6979      	ldr	r1, [r7, #20]
 800b68c:	4401      	add	r1, r0
 800b68e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b692:	4313      	orrs	r3, r2
 800b694:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b696:	79fb      	ldrb	r3, [r7, #7]
 800b698:	2b01      	cmp	r3, #1
 800b69a:	d10d      	bne.n	800b6b8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	68db      	ldr	r3, [r3, #12]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d009      	beq.n	800b6b8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	68d9      	ldr	r1, [r3, #12]
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	015a      	lsls	r2, r3, #5
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	4413      	add	r3, r2
 800b6b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6b4:	460a      	mov	r2, r1
 800b6b6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	015a      	lsls	r2, r3, #5
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	4413      	add	r3, r2
 800b6c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	693a      	ldr	r2, [r7, #16]
 800b6c8:	0151      	lsls	r1, r2, #5
 800b6ca:	697a      	ldr	r2, [r7, #20]
 800b6cc:	440a      	add	r2, r1
 800b6ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b6d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b6d8:	2300      	movs	r3, #0
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	371c      	adds	r7, #28
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr

0800b6e6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b6e6:	b480      	push	{r7}
 800b6e8:	b089      	sub	sp, #36	; 0x24
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	60f8      	str	r0, [r7, #12]
 800b6ee:	60b9      	str	r1, [r7, #8]
 800b6f0:	4611      	mov	r1, r2
 800b6f2:	461a      	mov	r2, r3
 800b6f4:	460b      	mov	r3, r1
 800b6f6:	71fb      	strb	r3, [r7, #7]
 800b6f8:	4613      	mov	r3, r2
 800b6fa:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b704:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d123      	bne.n	800b754 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b70c:	88bb      	ldrh	r3, [r7, #4]
 800b70e:	3303      	adds	r3, #3
 800b710:	089b      	lsrs	r3, r3, #2
 800b712:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b714:	2300      	movs	r3, #0
 800b716:	61bb      	str	r3, [r7, #24]
 800b718:	e018      	b.n	800b74c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b71a:	79fb      	ldrb	r3, [r7, #7]
 800b71c:	031a      	lsls	r2, r3, #12
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	4413      	add	r3, r2
 800b722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b726:	461a      	mov	r2, r3
 800b728:	69fb      	ldr	r3, [r7, #28]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b72e:	69fb      	ldr	r3, [r7, #28]
 800b730:	3301      	adds	r3, #1
 800b732:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b734:	69fb      	ldr	r3, [r7, #28]
 800b736:	3301      	adds	r3, #1
 800b738:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b73a:	69fb      	ldr	r3, [r7, #28]
 800b73c:	3301      	adds	r3, #1
 800b73e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b740:	69fb      	ldr	r3, [r7, #28]
 800b742:	3301      	adds	r3, #1
 800b744:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b746:	69bb      	ldr	r3, [r7, #24]
 800b748:	3301      	adds	r3, #1
 800b74a:	61bb      	str	r3, [r7, #24]
 800b74c:	69ba      	ldr	r2, [r7, #24]
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	429a      	cmp	r2, r3
 800b752:	d3e2      	bcc.n	800b71a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b754:	2300      	movs	r3, #0
}
 800b756:	4618      	mov	r0, r3
 800b758:	3724      	adds	r7, #36	; 0x24
 800b75a:	46bd      	mov	sp, r7
 800b75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b760:	4770      	bx	lr

0800b762 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b762:	b480      	push	{r7}
 800b764:	b08b      	sub	sp, #44	; 0x2c
 800b766:	af00      	add	r7, sp, #0
 800b768:	60f8      	str	r0, [r7, #12]
 800b76a:	60b9      	str	r1, [r7, #8]
 800b76c:	4613      	mov	r3, r2
 800b76e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b778:	88fb      	ldrh	r3, [r7, #6]
 800b77a:	089b      	lsrs	r3, r3, #2
 800b77c:	b29b      	uxth	r3, r3
 800b77e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b780:	88fb      	ldrh	r3, [r7, #6]
 800b782:	f003 0303 	and.w	r3, r3, #3
 800b786:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b788:	2300      	movs	r3, #0
 800b78a:	623b      	str	r3, [r7, #32]
 800b78c:	e014      	b.n	800b7b8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b78e:	69bb      	ldr	r3, [r7, #24]
 800b790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b794:	681a      	ldr	r2, [r3, #0]
 800b796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b798:	601a      	str	r2, [r3, #0]
    pDest++;
 800b79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b79c:	3301      	adds	r3, #1
 800b79e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a8:	3301      	adds	r3, #1
 800b7aa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b7b2:	6a3b      	ldr	r3, [r7, #32]
 800b7b4:	3301      	adds	r3, #1
 800b7b6:	623b      	str	r3, [r7, #32]
 800b7b8:	6a3a      	ldr	r2, [r7, #32]
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d3e6      	bcc.n	800b78e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b7c0:	8bfb      	ldrh	r3, [r7, #30]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d01e      	beq.n	800b804 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b7ca:	69bb      	ldr	r3, [r7, #24]
 800b7cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	f107 0310 	add.w	r3, r7, #16
 800b7d6:	6812      	ldr	r2, [r2, #0]
 800b7d8:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b7da:	693a      	ldr	r2, [r7, #16]
 800b7dc:	6a3b      	ldr	r3, [r7, #32]
 800b7de:	b2db      	uxtb	r3, r3
 800b7e0:	00db      	lsls	r3, r3, #3
 800b7e2:	fa22 f303 	lsr.w	r3, r2, r3
 800b7e6:	b2da      	uxtb	r2, r3
 800b7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ea:	701a      	strb	r2, [r3, #0]
      i++;
 800b7ec:	6a3b      	ldr	r3, [r7, #32]
 800b7ee:	3301      	adds	r3, #1
 800b7f0:	623b      	str	r3, [r7, #32]
      pDest++;
 800b7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f4:	3301      	adds	r3, #1
 800b7f6:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b7f8:	8bfb      	ldrh	r3, [r7, #30]
 800b7fa:	3b01      	subs	r3, #1
 800b7fc:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b7fe:	8bfb      	ldrh	r3, [r7, #30]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d1ea      	bne.n	800b7da <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b806:	4618      	mov	r0, r3
 800b808:	372c      	adds	r7, #44	; 0x2c
 800b80a:	46bd      	mov	sp, r7
 800b80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b810:	4770      	bx	lr

0800b812 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b812:	b480      	push	{r7}
 800b814:	b085      	sub	sp, #20
 800b816:	af00      	add	r7, sp, #0
 800b818:	6078      	str	r0, [r7, #4]
 800b81a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	781b      	ldrb	r3, [r3, #0]
 800b824:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	785b      	ldrb	r3, [r3, #1]
 800b82a:	2b01      	cmp	r3, #1
 800b82c:	d12c      	bne.n	800b888 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	015a      	lsls	r2, r3, #5
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	4413      	add	r3, r2
 800b836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	db12      	blt.n	800b866 <USB_EPSetStall+0x54>
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d00f      	beq.n	800b866 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	015a      	lsls	r2, r3, #5
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	4413      	add	r3, r2
 800b84e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	68ba      	ldr	r2, [r7, #8]
 800b856:	0151      	lsls	r1, r2, #5
 800b858:	68fa      	ldr	r2, [r7, #12]
 800b85a:	440a      	add	r2, r1
 800b85c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b860:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b864:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	015a      	lsls	r2, r3, #5
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	4413      	add	r3, r2
 800b86e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	68ba      	ldr	r2, [r7, #8]
 800b876:	0151      	lsls	r1, r2, #5
 800b878:	68fa      	ldr	r2, [r7, #12]
 800b87a:	440a      	add	r2, r1
 800b87c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b880:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b884:	6013      	str	r3, [r2, #0]
 800b886:	e02b      	b.n	800b8e0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	015a      	lsls	r2, r3, #5
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	4413      	add	r3, r2
 800b890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	db12      	blt.n	800b8c0 <USB_EPSetStall+0xae>
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d00f      	beq.n	800b8c0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	015a      	lsls	r2, r3, #5
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	4413      	add	r3, r2
 800b8a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	68ba      	ldr	r2, [r7, #8]
 800b8b0:	0151      	lsls	r1, r2, #5
 800b8b2:	68fa      	ldr	r2, [r7, #12]
 800b8b4:	440a      	add	r2, r1
 800b8b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b8be:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	015a      	lsls	r2, r3, #5
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	4413      	add	r3, r2
 800b8c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	68ba      	ldr	r2, [r7, #8]
 800b8d0:	0151      	lsls	r1, r2, #5
 800b8d2:	68fa      	ldr	r2, [r7, #12]
 800b8d4:	440a      	add	r2, r1
 800b8d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b8de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b8e0:	2300      	movs	r3, #0
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3714      	adds	r7, #20
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ec:	4770      	bx	lr

0800b8ee <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b8ee:	b480      	push	{r7}
 800b8f0:	b085      	sub	sp, #20
 800b8f2:	af00      	add	r7, sp, #0
 800b8f4:	6078      	str	r0, [r7, #4]
 800b8f6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	785b      	ldrb	r3, [r3, #1]
 800b906:	2b01      	cmp	r3, #1
 800b908:	d128      	bne.n	800b95c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	015a      	lsls	r2, r3, #5
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	4413      	add	r3, r2
 800b912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	68ba      	ldr	r2, [r7, #8]
 800b91a:	0151      	lsls	r1, r2, #5
 800b91c:	68fa      	ldr	r2, [r7, #12]
 800b91e:	440a      	add	r2, r1
 800b920:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b924:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b928:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	78db      	ldrb	r3, [r3, #3]
 800b92e:	2b03      	cmp	r3, #3
 800b930:	d003      	beq.n	800b93a <USB_EPClearStall+0x4c>
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	78db      	ldrb	r3, [r3, #3]
 800b936:	2b02      	cmp	r3, #2
 800b938:	d138      	bne.n	800b9ac <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	015a      	lsls	r2, r3, #5
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	4413      	add	r3, r2
 800b942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	68ba      	ldr	r2, [r7, #8]
 800b94a:	0151      	lsls	r1, r2, #5
 800b94c:	68fa      	ldr	r2, [r7, #12]
 800b94e:	440a      	add	r2, r1
 800b950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b958:	6013      	str	r3, [r2, #0]
 800b95a:	e027      	b.n	800b9ac <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	015a      	lsls	r2, r3, #5
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	4413      	add	r3, r2
 800b964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	68ba      	ldr	r2, [r7, #8]
 800b96c:	0151      	lsls	r1, r2, #5
 800b96e:	68fa      	ldr	r2, [r7, #12]
 800b970:	440a      	add	r2, r1
 800b972:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b976:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b97a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	78db      	ldrb	r3, [r3, #3]
 800b980:	2b03      	cmp	r3, #3
 800b982:	d003      	beq.n	800b98c <USB_EPClearStall+0x9e>
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	78db      	ldrb	r3, [r3, #3]
 800b988:	2b02      	cmp	r3, #2
 800b98a:	d10f      	bne.n	800b9ac <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	015a      	lsls	r2, r3, #5
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	4413      	add	r3, r2
 800b994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	68ba      	ldr	r2, [r7, #8]
 800b99c:	0151      	lsls	r1, r2, #5
 800b99e:	68fa      	ldr	r2, [r7, #12]
 800b9a0:	440a      	add	r2, r1
 800b9a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9aa:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b9ac:	2300      	movs	r3, #0
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3714      	adds	r7, #20
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b8:	4770      	bx	lr

0800b9ba <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b9ba:	b480      	push	{r7}
 800b9bc:	b085      	sub	sp, #20
 800b9be:	af00      	add	r7, sp, #0
 800b9c0:	6078      	str	r0, [r7, #4]
 800b9c2:	460b      	mov	r3, r1
 800b9c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	68fa      	ldr	r2, [r7, #12]
 800b9d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b9d8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b9dc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9e4:	681a      	ldr	r2, [r3, #0]
 800b9e6:	78fb      	ldrb	r3, [r7, #3]
 800b9e8:	011b      	lsls	r3, r3, #4
 800b9ea:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b9ee:	68f9      	ldr	r1, [r7, #12]
 800b9f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b9f4:	4313      	orrs	r3, r2
 800b9f6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b9f8:	2300      	movs	r3, #0
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3714      	adds	r7, #20
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba04:	4770      	bx	lr

0800ba06 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ba06:	b480      	push	{r7}
 800ba08:	b085      	sub	sp, #20
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	68fa      	ldr	r2, [r7, #12]
 800ba1c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ba20:	f023 0303 	bic.w	r3, r3, #3
 800ba24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba2c:	685b      	ldr	r3, [r3, #4]
 800ba2e:	68fa      	ldr	r2, [r7, #12]
 800ba30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba34:	f023 0302 	bic.w	r3, r3, #2
 800ba38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ba3a:	2300      	movs	r3, #0
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3714      	adds	r7, #20
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr

0800ba48 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b085      	sub	sp, #20
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	68fa      	ldr	r2, [r7, #12]
 800ba5e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ba62:	f023 0303 	bic.w	r3, r3, #3
 800ba66:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba6e:	685b      	ldr	r3, [r3, #4]
 800ba70:	68fa      	ldr	r2, [r7, #12]
 800ba72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba76:	f043 0302 	orr.w	r3, r3, #2
 800ba7a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ba7c:	2300      	movs	r3, #0
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3714      	adds	r7, #20
 800ba82:	46bd      	mov	sp, r7
 800ba84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba88:	4770      	bx	lr

0800ba8a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ba8a:	b480      	push	{r7}
 800ba8c:	b085      	sub	sp, #20
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	695b      	ldr	r3, [r3, #20]
 800ba96:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	699b      	ldr	r3, [r3, #24]
 800ba9c:	68fa      	ldr	r2, [r7, #12]
 800ba9e:	4013      	ands	r3, r2
 800baa0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800baa2:	68fb      	ldr	r3, [r7, #12]
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	3714      	adds	r7, #20
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr

0800bab0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bab0:	b480      	push	{r7}
 800bab2:	b085      	sub	sp, #20
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bac2:	699b      	ldr	r3, [r3, #24]
 800bac4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bacc:	69db      	ldr	r3, [r3, #28]
 800bace:	68ba      	ldr	r2, [r7, #8]
 800bad0:	4013      	ands	r3, r2
 800bad2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	0c1b      	lsrs	r3, r3, #16
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3714      	adds	r7, #20
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr

0800bae4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b085      	sub	sp, #20
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800baf6:	699b      	ldr	r3, [r3, #24]
 800baf8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb00:	69db      	ldr	r3, [r3, #28]
 800bb02:	68ba      	ldr	r2, [r7, #8]
 800bb04:	4013      	ands	r3, r2
 800bb06:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	b29b      	uxth	r3, r3
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3714      	adds	r7, #20
 800bb10:	46bd      	mov	sp, r7
 800bb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb16:	4770      	bx	lr

0800bb18 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b085      	sub	sp, #20
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
 800bb20:	460b      	mov	r3, r1
 800bb22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bb28:	78fb      	ldrb	r3, [r7, #3]
 800bb2a:	015a      	lsls	r2, r3, #5
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	4413      	add	r3, r2
 800bb30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb34:	689b      	ldr	r3, [r3, #8]
 800bb36:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb3e:	695b      	ldr	r3, [r3, #20]
 800bb40:	68ba      	ldr	r2, [r7, #8]
 800bb42:	4013      	ands	r3, r2
 800bb44:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bb46:	68bb      	ldr	r3, [r7, #8]
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3714      	adds	r7, #20
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb52:	4770      	bx	lr

0800bb54 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b087      	sub	sp, #28
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb6a:	691b      	ldr	r3, [r3, #16]
 800bb6c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb76:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bb78:	78fb      	ldrb	r3, [r7, #3]
 800bb7a:	f003 030f 	and.w	r3, r3, #15
 800bb7e:	68fa      	ldr	r2, [r7, #12]
 800bb80:	fa22 f303 	lsr.w	r3, r2, r3
 800bb84:	01db      	lsls	r3, r3, #7
 800bb86:	b2db      	uxtb	r3, r3
 800bb88:	693a      	ldr	r2, [r7, #16]
 800bb8a:	4313      	orrs	r3, r2
 800bb8c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bb8e:	78fb      	ldrb	r3, [r7, #3]
 800bb90:	015a      	lsls	r2, r3, #5
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	4413      	add	r3, r2
 800bb96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb9a:	689b      	ldr	r3, [r3, #8]
 800bb9c:	693a      	ldr	r2, [r7, #16]
 800bb9e:	4013      	ands	r3, r2
 800bba0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bba2:	68bb      	ldr	r3, [r7, #8]
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	371c      	adds	r7, #28
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr

0800bbb0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b083      	sub	sp, #12
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	695b      	ldr	r3, [r3, #20]
 800bbbc:	f003 0301 	and.w	r3, r3, #1
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	370c      	adds	r7, #12
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr

0800bbcc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b085      	sub	sp, #20
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	68fa      	ldr	r2, [r7, #12]
 800bbe2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbe6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800bbea:	f023 0307 	bic.w	r3, r3, #7
 800bbee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbf6:	685b      	ldr	r3, [r3, #4]
 800bbf8:	68fa      	ldr	r2, [r7, #12]
 800bbfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc02:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bc04:	2300      	movs	r3, #0
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3714      	adds	r7, #20
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc10:	4770      	bx	lr
	...

0800bc14 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b087      	sub	sp, #28
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	60f8      	str	r0, [r7, #12]
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	607a      	str	r2, [r7, #4]
 800bc20:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	333c      	adds	r3, #60	; 0x3c
 800bc2a:	3304      	adds	r3, #4
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	4a26      	ldr	r2, [pc, #152]	; (800bccc <USB_EP0_OutStart+0xb8>)
 800bc34:	4293      	cmp	r3, r2
 800bc36:	d90a      	bls.n	800bc4e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bc48:	d101      	bne.n	800bc4e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	e037      	b.n	800bcbe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc54:	461a      	mov	r2, r3
 800bc56:	2300      	movs	r3, #0
 800bc58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc60:	691b      	ldr	r3, [r3, #16]
 800bc62:	697a      	ldr	r2, [r7, #20]
 800bc64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bc6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc74:	691b      	ldr	r3, [r3, #16]
 800bc76:	697a      	ldr	r2, [r7, #20]
 800bc78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc7c:	f043 0318 	orr.w	r3, r3, #24
 800bc80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc88:	691b      	ldr	r3, [r3, #16]
 800bc8a:	697a      	ldr	r2, [r7, #20]
 800bc8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc90:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bc94:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bc96:	7afb      	ldrb	r3, [r7, #11]
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d10f      	bne.n	800bcbc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bca2:	461a      	mov	r2, r3
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	697a      	ldr	r2, [r7, #20]
 800bcb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcb6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bcba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bcbc:	2300      	movs	r3, #0
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	371c      	adds	r7, #28
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr
 800bcca:	bf00      	nop
 800bccc:	4f54300a 	.word	0x4f54300a

0800bcd0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b085      	sub	sp, #20
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	3301      	adds	r3, #1
 800bce0:	60fb      	str	r3, [r7, #12]
 800bce2:	4a13      	ldr	r2, [pc, #76]	; (800bd30 <USB_CoreReset+0x60>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d901      	bls.n	800bcec <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800bce8:	2303      	movs	r3, #3
 800bcea:	e01a      	b.n	800bd22 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	691b      	ldr	r3, [r3, #16]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	daf3      	bge.n	800bcdc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	691b      	ldr	r3, [r3, #16]
 800bcfc:	f043 0201 	orr.w	r2, r3, #1
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	3301      	adds	r3, #1
 800bd08:	60fb      	str	r3, [r7, #12]
 800bd0a:	4a09      	ldr	r2, [pc, #36]	; (800bd30 <USB_CoreReset+0x60>)
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d901      	bls.n	800bd14 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800bd10:	2303      	movs	r3, #3
 800bd12:	e006      	b.n	800bd22 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	691b      	ldr	r3, [r3, #16]
 800bd18:	f003 0301 	and.w	r3, r3, #1
 800bd1c:	2b01      	cmp	r3, #1
 800bd1e:	d0f1      	beq.n	800bd04 <USB_CoreReset+0x34>

  return HAL_OK;
 800bd20:	2300      	movs	r3, #0
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3714      	adds	r7, #20
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr
 800bd2e:	bf00      	nop
 800bd30:	00030d40 	.word	0x00030d40

0800bd34 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b084      	sub	sp, #16
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	460b      	mov	r3, r1
 800bd3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bd40:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bd44:	f005 fa90 	bl	8011268 <USBD_static_malloc>
 800bd48:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d105      	bne.n	800bd5c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2200      	movs	r2, #0
 800bd54:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800bd58:	2302      	movs	r3, #2
 800bd5a:	e066      	b.n	800be2a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	68fa      	ldr	r2, [r7, #12]
 800bd60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	7c1b      	ldrb	r3, [r3, #16]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d119      	bne.n	800bda0 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bd6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd70:	2202      	movs	r2, #2
 800bd72:	2181      	movs	r1, #129	; 0x81
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f005 f954 	bl	8011022 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2201      	movs	r2, #1
 800bd7e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bd80:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd84:	2202      	movs	r2, #2
 800bd86:	2101      	movs	r1, #1
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f005 f94a 	bl	8011022 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2201      	movs	r2, #1
 800bd92:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2210      	movs	r2, #16
 800bd9a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800bd9e:	e016      	b.n	800bdce <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bda0:	2340      	movs	r3, #64	; 0x40
 800bda2:	2202      	movs	r2, #2
 800bda4:	2181      	movs	r1, #129	; 0x81
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f005 f93b 	bl	8011022 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2201      	movs	r2, #1
 800bdb0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bdb2:	2340      	movs	r3, #64	; 0x40
 800bdb4:	2202      	movs	r2, #2
 800bdb6:	2101      	movs	r1, #1
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f005 f932 	bl	8011022 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2201      	movs	r2, #1
 800bdc2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2210      	movs	r2, #16
 800bdca:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bdce:	2308      	movs	r3, #8
 800bdd0:	2203      	movs	r2, #3
 800bdd2:	2182      	movs	r1, #130	; 0x82
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f005 f924 	bl	8011022 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2201      	movs	r2, #1
 800bdde:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	7c1b      	ldrb	r3, [r3, #16]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d109      	bne.n	800be18 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800be0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be0e:	2101      	movs	r1, #1
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f005 f9f5 	bl	8011200 <USBD_LL_PrepareReceive>
 800be16:	e007      	b.n	800be28 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800be1e:	2340      	movs	r3, #64	; 0x40
 800be20:	2101      	movs	r1, #1
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f005 f9ec 	bl	8011200 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800be28:	2300      	movs	r3, #0
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3710      	adds	r7, #16
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}

0800be32 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be32:	b580      	push	{r7, lr}
 800be34:	b082      	sub	sp, #8
 800be36:	af00      	add	r7, sp, #0
 800be38:	6078      	str	r0, [r7, #4]
 800be3a:	460b      	mov	r3, r1
 800be3c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800be3e:	2181      	movs	r1, #129	; 0x81
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f005 f914 	bl	801106e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2200      	movs	r2, #0
 800be4a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800be4c:	2101      	movs	r1, #1
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f005 f90d 	bl	801106e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2200      	movs	r2, #0
 800be58:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800be5c:	2182      	movs	r1, #130	; 0x82
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f005 f905 	bl	801106e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2200      	movs	r2, #0
 800be68:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d00e      	beq.n	800be9c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be84:	685b      	ldr	r3, [r3, #4]
 800be86:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be8e:	4618      	mov	r0, r3
 800be90:	f005 f9f8 	bl	8011284 <USBD_static_free>
    pdev->pClassData = NULL;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2200      	movs	r2, #0
 800be98:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800be9c:	2300      	movs	r3, #0
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3708      	adds	r7, #8
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
	...

0800bea8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b086      	sub	sp, #24
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800beb8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800beba:	2300      	movs	r3, #0
 800bebc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bebe:	2300      	movs	r3, #0
 800bec0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bec2:	2300      	movs	r3, #0
 800bec4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d101      	bne.n	800bed0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800becc:	2303      	movs	r3, #3
 800bece:	e0af      	b.n	800c030 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d03f      	beq.n	800bf5c <USBD_CDC_Setup+0xb4>
 800bedc:	2b20      	cmp	r3, #32
 800bede:	f040 809f 	bne.w	800c020 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	88db      	ldrh	r3, [r3, #6]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d02e      	beq.n	800bf48 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	781b      	ldrb	r3, [r3, #0]
 800beee:	b25b      	sxtb	r3, r3
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	da16      	bge.n	800bf22 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800befa:	689b      	ldr	r3, [r3, #8]
 800befc:	683a      	ldr	r2, [r7, #0]
 800befe:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800bf00:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bf02:	683a      	ldr	r2, [r7, #0]
 800bf04:	88d2      	ldrh	r2, [r2, #6]
 800bf06:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	88db      	ldrh	r3, [r3, #6]
 800bf0c:	2b07      	cmp	r3, #7
 800bf0e:	bf28      	it	cs
 800bf10:	2307      	movcs	r3, #7
 800bf12:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	89fa      	ldrh	r2, [r7, #14]
 800bf18:	4619      	mov	r1, r3
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f001 fae9 	bl	800d4f2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800bf20:	e085      	b.n	800c02e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	785a      	ldrb	r2, [r3, #1]
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	88db      	ldrh	r3, [r3, #6]
 800bf30:	b2da      	uxtb	r2, r3
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800bf38:	6939      	ldr	r1, [r7, #16]
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	88db      	ldrh	r3, [r3, #6]
 800bf3e:	461a      	mov	r2, r3
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f001 fb02 	bl	800d54a <USBD_CtlPrepareRx>
      break;
 800bf46:	e072      	b.n	800c02e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf4e:	689b      	ldr	r3, [r3, #8]
 800bf50:	683a      	ldr	r2, [r7, #0]
 800bf52:	7850      	ldrb	r0, [r2, #1]
 800bf54:	2200      	movs	r2, #0
 800bf56:	6839      	ldr	r1, [r7, #0]
 800bf58:	4798      	blx	r3
      break;
 800bf5a:	e068      	b.n	800c02e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	785b      	ldrb	r3, [r3, #1]
 800bf60:	2b0b      	cmp	r3, #11
 800bf62:	d852      	bhi.n	800c00a <USBD_CDC_Setup+0x162>
 800bf64:	a201      	add	r2, pc, #4	; (adr r2, 800bf6c <USBD_CDC_Setup+0xc4>)
 800bf66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf6a:	bf00      	nop
 800bf6c:	0800bf9d 	.word	0x0800bf9d
 800bf70:	0800c019 	.word	0x0800c019
 800bf74:	0800c00b 	.word	0x0800c00b
 800bf78:	0800c00b 	.word	0x0800c00b
 800bf7c:	0800c00b 	.word	0x0800c00b
 800bf80:	0800c00b 	.word	0x0800c00b
 800bf84:	0800c00b 	.word	0x0800c00b
 800bf88:	0800c00b 	.word	0x0800c00b
 800bf8c:	0800c00b 	.word	0x0800c00b
 800bf90:	0800c00b 	.word	0x0800c00b
 800bf94:	0800bfc7 	.word	0x0800bfc7
 800bf98:	0800bff1 	.word	0x0800bff1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfa2:	b2db      	uxtb	r3, r3
 800bfa4:	2b03      	cmp	r3, #3
 800bfa6:	d107      	bne.n	800bfb8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bfa8:	f107 030a 	add.w	r3, r7, #10
 800bfac:	2202      	movs	r2, #2
 800bfae:	4619      	mov	r1, r3
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f001 fa9e 	bl	800d4f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bfb6:	e032      	b.n	800c01e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bfb8:	6839      	ldr	r1, [r7, #0]
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f001 fa28 	bl	800d410 <USBD_CtlError>
            ret = USBD_FAIL;
 800bfc0:	2303      	movs	r3, #3
 800bfc2:	75fb      	strb	r3, [r7, #23]
          break;
 800bfc4:	e02b      	b.n	800c01e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfcc:	b2db      	uxtb	r3, r3
 800bfce:	2b03      	cmp	r3, #3
 800bfd0:	d107      	bne.n	800bfe2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bfd2:	f107 030d 	add.w	r3, r7, #13
 800bfd6:	2201      	movs	r2, #1
 800bfd8:	4619      	mov	r1, r3
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f001 fa89 	bl	800d4f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bfe0:	e01d      	b.n	800c01e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bfe2:	6839      	ldr	r1, [r7, #0]
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f001 fa13 	bl	800d410 <USBD_CtlError>
            ret = USBD_FAIL;
 800bfea:	2303      	movs	r3, #3
 800bfec:	75fb      	strb	r3, [r7, #23]
          break;
 800bfee:	e016      	b.n	800c01e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bff6:	b2db      	uxtb	r3, r3
 800bff8:	2b03      	cmp	r3, #3
 800bffa:	d00f      	beq.n	800c01c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800bffc:	6839      	ldr	r1, [r7, #0]
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f001 fa06 	bl	800d410 <USBD_CtlError>
            ret = USBD_FAIL;
 800c004:	2303      	movs	r3, #3
 800c006:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c008:	e008      	b.n	800c01c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c00a:	6839      	ldr	r1, [r7, #0]
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f001 f9ff 	bl	800d410 <USBD_CtlError>
          ret = USBD_FAIL;
 800c012:	2303      	movs	r3, #3
 800c014:	75fb      	strb	r3, [r7, #23]
          break;
 800c016:	e002      	b.n	800c01e <USBD_CDC_Setup+0x176>
          break;
 800c018:	bf00      	nop
 800c01a:	e008      	b.n	800c02e <USBD_CDC_Setup+0x186>
          break;
 800c01c:	bf00      	nop
      }
      break;
 800c01e:	e006      	b.n	800c02e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800c020:	6839      	ldr	r1, [r7, #0]
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f001 f9f4 	bl	800d410 <USBD_CtlError>
      ret = USBD_FAIL;
 800c028:	2303      	movs	r3, #3
 800c02a:	75fb      	strb	r3, [r7, #23]
      break;
 800c02c:	bf00      	nop
  }

  return (uint8_t)ret;
 800c02e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c030:	4618      	mov	r0, r3
 800c032:	3718      	adds	r7, #24
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}

0800c038 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b084      	sub	sp, #16
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	460b      	mov	r3, r1
 800c042:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c04a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c052:	2b00      	cmp	r3, #0
 800c054:	d101      	bne.n	800c05a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c056:	2303      	movs	r3, #3
 800c058:	e04f      	b.n	800c0fa <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c060:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c062:	78fa      	ldrb	r2, [r7, #3]
 800c064:	6879      	ldr	r1, [r7, #4]
 800c066:	4613      	mov	r3, r2
 800c068:	009b      	lsls	r3, r3, #2
 800c06a:	4413      	add	r3, r2
 800c06c:	009b      	lsls	r3, r3, #2
 800c06e:	440b      	add	r3, r1
 800c070:	3318      	adds	r3, #24
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d029      	beq.n	800c0cc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c078:	78fa      	ldrb	r2, [r7, #3]
 800c07a:	6879      	ldr	r1, [r7, #4]
 800c07c:	4613      	mov	r3, r2
 800c07e:	009b      	lsls	r3, r3, #2
 800c080:	4413      	add	r3, r2
 800c082:	009b      	lsls	r3, r3, #2
 800c084:	440b      	add	r3, r1
 800c086:	3318      	adds	r3, #24
 800c088:	681a      	ldr	r2, [r3, #0]
 800c08a:	78f9      	ldrb	r1, [r7, #3]
 800c08c:	68f8      	ldr	r0, [r7, #12]
 800c08e:	460b      	mov	r3, r1
 800c090:	00db      	lsls	r3, r3, #3
 800c092:	1a5b      	subs	r3, r3, r1
 800c094:	009b      	lsls	r3, r3, #2
 800c096:	4403      	add	r3, r0
 800c098:	3344      	adds	r3, #68	; 0x44
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	fbb2 f1f3 	udiv	r1, r2, r3
 800c0a0:	fb03 f301 	mul.w	r3, r3, r1
 800c0a4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d110      	bne.n	800c0cc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800c0aa:	78fa      	ldrb	r2, [r7, #3]
 800c0ac:	6879      	ldr	r1, [r7, #4]
 800c0ae:	4613      	mov	r3, r2
 800c0b0:	009b      	lsls	r3, r3, #2
 800c0b2:	4413      	add	r3, r2
 800c0b4:	009b      	lsls	r3, r3, #2
 800c0b6:	440b      	add	r3, r1
 800c0b8:	3318      	adds	r3, #24
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c0be:	78f9      	ldrb	r1, [r7, #3]
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f005 f87a 	bl	80111be <USBD_LL_Transmit>
 800c0ca:	e015      	b.n	800c0f8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c0da:	691b      	ldr	r3, [r3, #16]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d00b      	beq.n	800c0f8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c0e6:	691b      	ldr	r3, [r3, #16]
 800c0e8:	68ba      	ldr	r2, [r7, #8]
 800c0ea:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c0ee:	68ba      	ldr	r2, [r7, #8]
 800c0f0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c0f4:	78fa      	ldrb	r2, [r7, #3]
 800c0f6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c0f8:	2300      	movs	r3, #0
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3710      	adds	r7, #16
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}

0800c102 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c102:	b580      	push	{r7, lr}
 800c104:	b084      	sub	sp, #16
 800c106:	af00      	add	r7, sp, #0
 800c108:	6078      	str	r0, [r7, #4]
 800c10a:	460b      	mov	r3, r1
 800c10c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c114:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d101      	bne.n	800c124 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c120:	2303      	movs	r3, #3
 800c122:	e015      	b.n	800c150 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c124:	78fb      	ldrb	r3, [r7, #3]
 800c126:	4619      	mov	r1, r3
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f005 f88a 	bl	8011242 <USBD_LL_GetRxDataSize>
 800c12e:	4602      	mov	r2, r0
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c13c:	68db      	ldr	r3, [r3, #12]
 800c13e:	68fa      	ldr	r2, [r7, #12]
 800c140:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c144:	68fa      	ldr	r2, [r7, #12]
 800c146:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c14a:	4611      	mov	r1, r2
 800c14c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c14e:	2300      	movs	r3, #0
}
 800c150:	4618      	mov	r0, r3
 800c152:	3710      	adds	r7, #16
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}

0800c158 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b084      	sub	sp, #16
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c166:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d101      	bne.n	800c172 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800c16e:	2303      	movs	r3, #3
 800c170:	e01b      	b.n	800c1aa <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d015      	beq.n	800c1a8 <USBD_CDC_EP0_RxReady+0x50>
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c182:	2bff      	cmp	r3, #255	; 0xff
 800c184:	d010      	beq.n	800c1a8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c18c:	689b      	ldr	r3, [r3, #8]
 800c18e:	68fa      	ldr	r2, [r7, #12]
 800c190:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800c194:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c196:	68fa      	ldr	r2, [r7, #12]
 800c198:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c19c:	b292      	uxth	r2, r2
 800c19e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	22ff      	movs	r2, #255	; 0xff
 800c1a4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c1a8:	2300      	movs	r3, #0
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3710      	adds	r7, #16
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
	...

0800c1b4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b083      	sub	sp, #12
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2243      	movs	r2, #67	; 0x43
 800c1c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c1c2:	4b03      	ldr	r3, [pc, #12]	; (800c1d0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	370c      	adds	r7, #12
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ce:	4770      	bx	lr
 800c1d0:	20000094 	.word	0x20000094

0800c1d4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	b083      	sub	sp, #12
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2243      	movs	r2, #67	; 0x43
 800c1e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c1e2:	4b03      	ldr	r3, [pc, #12]	; (800c1f0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	370c      	adds	r7, #12
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ee:	4770      	bx	lr
 800c1f0:	20000050 	.word	0x20000050

0800c1f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b083      	sub	sp, #12
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2243      	movs	r2, #67	; 0x43
 800c200:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c202:	4b03      	ldr	r3, [pc, #12]	; (800c210 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c204:	4618      	mov	r0, r3
 800c206:	370c      	adds	r7, #12
 800c208:	46bd      	mov	sp, r7
 800c20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20e:	4770      	bx	lr
 800c210:	200000d8 	.word	0x200000d8

0800c214 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c214:	b480      	push	{r7}
 800c216:	b083      	sub	sp, #12
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	220a      	movs	r2, #10
 800c220:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c222:	4b03      	ldr	r3, [pc, #12]	; (800c230 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c224:	4618      	mov	r0, r3
 800c226:	370c      	adds	r7, #12
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr
 800c230:	2000000c 	.word	0x2000000c

0800c234 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c234:	b480      	push	{r7}
 800c236:	b083      	sub	sp, #12
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d101      	bne.n	800c248 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c244:	2303      	movs	r3, #3
 800c246:	e004      	b.n	800c252 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	683a      	ldr	r2, [r7, #0]
 800c24c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c250:	2300      	movs	r3, #0
}
 800c252:	4618      	mov	r0, r3
 800c254:	370c      	adds	r7, #12
 800c256:	46bd      	mov	sp, r7
 800c258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25c:	4770      	bx	lr

0800c25e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c25e:	b480      	push	{r7}
 800c260:	b087      	sub	sp, #28
 800c262:	af00      	add	r7, sp, #0
 800c264:	60f8      	str	r0, [r7, #12]
 800c266:	60b9      	str	r1, [r7, #8]
 800c268:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c270:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d101      	bne.n	800c27c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c278:	2303      	movs	r3, #3
 800c27a:	e008      	b.n	800c28e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	68ba      	ldr	r2, [r7, #8]
 800c280:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c284:	697b      	ldr	r3, [r7, #20]
 800c286:	687a      	ldr	r2, [r7, #4]
 800c288:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c28c:	2300      	movs	r3, #0
}
 800c28e:	4618      	mov	r0, r3
 800c290:	371c      	adds	r7, #28
 800c292:	46bd      	mov	sp, r7
 800c294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c298:	4770      	bx	lr

0800c29a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c29a:	b480      	push	{r7}
 800c29c:	b085      	sub	sp, #20
 800c29e:	af00      	add	r7, sp, #0
 800c2a0:	6078      	str	r0, [r7, #4]
 800c2a2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c2aa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d101      	bne.n	800c2b6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800c2b2:	2303      	movs	r3, #3
 800c2b4:	e004      	b.n	800c2c0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	683a      	ldr	r2, [r7, #0]
 800c2ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c2be:	2300      	movs	r3, #0
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3714      	adds	r7, #20
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ca:	4770      	bx	lr

0800c2cc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b084      	sub	sp, #16
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c2da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d101      	bne.n	800c2ea <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c2e6:	2303      	movs	r3, #3
 800c2e8:	e016      	b.n	800c318 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	7c1b      	ldrb	r3, [r3, #16]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d109      	bne.n	800c306 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c2f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c2fc:	2101      	movs	r1, #1
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f004 ff7e 	bl	8011200 <USBD_LL_PrepareReceive>
 800c304:	e007      	b.n	800c316 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c30c:	2340      	movs	r3, #64	; 0x40
 800c30e:	2101      	movs	r1, #1
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f004 ff75 	bl	8011200 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c316:	2300      	movs	r3, #0
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3710      	adds	r7, #16
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}

0800c320 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b086      	sub	sp, #24
 800c324:	af00      	add	r7, sp, #0
 800c326:	60f8      	str	r0, [r7, #12]
 800c328:	60b9      	str	r1, [r7, #8]
 800c32a:	4613      	mov	r3, r2
 800c32c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d101      	bne.n	800c338 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c334:	2303      	movs	r3, #3
 800c336:	e01f      	b.n	800c378 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	2200      	movs	r2, #0
 800c33c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	2200      	movs	r2, #0
 800c344:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2200      	movs	r2, #0
 800c34c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d003      	beq.n	800c35e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	68ba      	ldr	r2, [r7, #8]
 800c35a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	2201      	movs	r2, #1
 800c362:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	79fa      	ldrb	r2, [r7, #7]
 800c36a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c36c:	68f8      	ldr	r0, [r7, #12]
 800c36e:	f004 fdf1 	bl	8010f54 <USBD_LL_Init>
 800c372:	4603      	mov	r3, r0
 800c374:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c376:	7dfb      	ldrb	r3, [r7, #23]
}
 800c378:	4618      	mov	r0, r3
 800c37a:	3718      	adds	r7, #24
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}

0800c380 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b084      	sub	sp, #16
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
 800c388:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c38a:	2300      	movs	r3, #0
 800c38c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d101      	bne.n	800c398 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c394:	2303      	movs	r3, #3
 800c396:	e016      	b.n	800c3c6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	683a      	ldr	r2, [r7, #0]
 800c39c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d00b      	beq.n	800c3c4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3b4:	f107 020e 	add.w	r2, r7, #14
 800c3b8:	4610      	mov	r0, r2
 800c3ba:	4798      	blx	r3
 800c3bc:	4602      	mov	r2, r0
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c3c4:	2300      	movs	r3, #0
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3710      	adds	r7, #16
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}

0800c3ce <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c3ce:	b580      	push	{r7, lr}
 800c3d0:	b082      	sub	sp, #8
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f004 fe08 	bl	8010fec <USBD_LL_Start>
 800c3dc:	4603      	mov	r3, r0
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3708      	adds	r7, #8
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}

0800c3e6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c3e6:	b480      	push	{r7}
 800c3e8:	b083      	sub	sp, #12
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c3ee:	2300      	movs	r3, #0
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	370c      	adds	r7, #12
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fa:	4770      	bx	lr

0800c3fc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b084      	sub	sp, #16
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	460b      	mov	r3, r1
 800c406:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c408:	2303      	movs	r3, #3
 800c40a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c412:	2b00      	cmp	r3, #0
 800c414:	d009      	beq.n	800c42a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	78fa      	ldrb	r2, [r7, #3]
 800c420:	4611      	mov	r1, r2
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	4798      	blx	r3
 800c426:	4603      	mov	r3, r0
 800c428:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c42a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	3710      	adds	r7, #16
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}

0800c434 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b082      	sub	sp, #8
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
 800c43c:	460b      	mov	r3, r1
 800c43e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c446:	2b00      	cmp	r3, #0
 800c448:	d007      	beq.n	800c45a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c450:	685b      	ldr	r3, [r3, #4]
 800c452:	78fa      	ldrb	r2, [r7, #3]
 800c454:	4611      	mov	r1, r2
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	4798      	blx	r3
  }

  return USBD_OK;
 800c45a:	2300      	movs	r3, #0
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3708      	adds	r7, #8
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}

0800c464 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b084      	sub	sp, #16
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c474:	6839      	ldr	r1, [r7, #0]
 800c476:	4618      	mov	r0, r3
 800c478:	f000 ff90 	bl	800d39c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2201      	movs	r2, #1
 800c480:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c48a:	461a      	mov	r2, r3
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c498:	f003 031f 	and.w	r3, r3, #31
 800c49c:	2b02      	cmp	r3, #2
 800c49e:	d01a      	beq.n	800c4d6 <USBD_LL_SetupStage+0x72>
 800c4a0:	2b02      	cmp	r3, #2
 800c4a2:	d822      	bhi.n	800c4ea <USBD_LL_SetupStage+0x86>
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d002      	beq.n	800c4ae <USBD_LL_SetupStage+0x4a>
 800c4a8:	2b01      	cmp	r3, #1
 800c4aa:	d00a      	beq.n	800c4c2 <USBD_LL_SetupStage+0x5e>
 800c4ac:	e01d      	b.n	800c4ea <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c4b4:	4619      	mov	r1, r3
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f000 fa62 	bl	800c980 <USBD_StdDevReq>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	73fb      	strb	r3, [r7, #15]
      break;
 800c4c0:	e020      	b.n	800c504 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c4c8:	4619      	mov	r1, r3
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f000 fac6 	bl	800ca5c <USBD_StdItfReq>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	73fb      	strb	r3, [r7, #15]
      break;
 800c4d4:	e016      	b.n	800c504 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c4dc:	4619      	mov	r1, r3
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f000 fb05 	bl	800caee <USBD_StdEPReq>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	73fb      	strb	r3, [r7, #15]
      break;
 800c4e8:	e00c      	b.n	800c504 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c4f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c4f4:	b2db      	uxtb	r3, r3
 800c4f6:	4619      	mov	r1, r3
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f004 fdd7 	bl	80110ac <USBD_LL_StallEP>
 800c4fe:	4603      	mov	r3, r0
 800c500:	73fb      	strb	r3, [r7, #15]
      break;
 800c502:	bf00      	nop
  }

  return ret;
 800c504:	7bfb      	ldrb	r3, [r7, #15]
}
 800c506:	4618      	mov	r0, r3
 800c508:	3710      	adds	r7, #16
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}

0800c50e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c50e:	b580      	push	{r7, lr}
 800c510:	b086      	sub	sp, #24
 800c512:	af00      	add	r7, sp, #0
 800c514:	60f8      	str	r0, [r7, #12]
 800c516:	460b      	mov	r3, r1
 800c518:	607a      	str	r2, [r7, #4]
 800c51a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c51c:	7afb      	ldrb	r3, [r7, #11]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d138      	bne.n	800c594 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c528:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c530:	2b03      	cmp	r3, #3
 800c532:	d14a      	bne.n	800c5ca <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	689a      	ldr	r2, [r3, #8]
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	68db      	ldr	r3, [r3, #12]
 800c53c:	429a      	cmp	r2, r3
 800c53e:	d913      	bls.n	800c568 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c540:	693b      	ldr	r3, [r7, #16]
 800c542:	689a      	ldr	r2, [r3, #8]
 800c544:	693b      	ldr	r3, [r7, #16]
 800c546:	68db      	ldr	r3, [r3, #12]
 800c548:	1ad2      	subs	r2, r2, r3
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	68da      	ldr	r2, [r3, #12]
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	689b      	ldr	r3, [r3, #8]
 800c556:	4293      	cmp	r3, r2
 800c558:	bf28      	it	cs
 800c55a:	4613      	movcs	r3, r2
 800c55c:	461a      	mov	r2, r3
 800c55e:	6879      	ldr	r1, [r7, #4]
 800c560:	68f8      	ldr	r0, [r7, #12]
 800c562:	f001 f80f 	bl	800d584 <USBD_CtlContinueRx>
 800c566:	e030      	b.n	800c5ca <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	2b03      	cmp	r3, #3
 800c572:	d10b      	bne.n	800c58c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c57a:	691b      	ldr	r3, [r3, #16]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d005      	beq.n	800c58c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c586:	691b      	ldr	r3, [r3, #16]
 800c588:	68f8      	ldr	r0, [r7, #12]
 800c58a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c58c:	68f8      	ldr	r0, [r7, #12]
 800c58e:	f001 f80a 	bl	800d5a6 <USBD_CtlSendStatus>
 800c592:	e01a      	b.n	800c5ca <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c59a:	b2db      	uxtb	r3, r3
 800c59c:	2b03      	cmp	r3, #3
 800c59e:	d114      	bne.n	800c5ca <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5a6:	699b      	ldr	r3, [r3, #24]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d00e      	beq.n	800c5ca <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5b2:	699b      	ldr	r3, [r3, #24]
 800c5b4:	7afa      	ldrb	r2, [r7, #11]
 800c5b6:	4611      	mov	r1, r2
 800c5b8:	68f8      	ldr	r0, [r7, #12]
 800c5ba:	4798      	blx	r3
 800c5bc:	4603      	mov	r3, r0
 800c5be:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c5c0:	7dfb      	ldrb	r3, [r7, #23]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d001      	beq.n	800c5ca <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c5c6:	7dfb      	ldrb	r3, [r7, #23]
 800c5c8:	e000      	b.n	800c5cc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c5ca:	2300      	movs	r3, #0
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3718      	adds	r7, #24
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}

0800c5d4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b086      	sub	sp, #24
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	60f8      	str	r0, [r7, #12]
 800c5dc:	460b      	mov	r3, r1
 800c5de:	607a      	str	r2, [r7, #4]
 800c5e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c5e2:	7afb      	ldrb	r3, [r7, #11]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d16b      	bne.n	800c6c0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	3314      	adds	r3, #20
 800c5ec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c5f4:	2b02      	cmp	r3, #2
 800c5f6:	d156      	bne.n	800c6a6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	689a      	ldr	r2, [r3, #8]
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	68db      	ldr	r3, [r3, #12]
 800c600:	429a      	cmp	r2, r3
 800c602:	d914      	bls.n	800c62e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c604:	693b      	ldr	r3, [r7, #16]
 800c606:	689a      	ldr	r2, [r3, #8]
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	68db      	ldr	r3, [r3, #12]
 800c60c:	1ad2      	subs	r2, r2, r3
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	689b      	ldr	r3, [r3, #8]
 800c616:	461a      	mov	r2, r3
 800c618:	6879      	ldr	r1, [r7, #4]
 800c61a:	68f8      	ldr	r0, [r7, #12]
 800c61c:	f000 ff84 	bl	800d528 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c620:	2300      	movs	r3, #0
 800c622:	2200      	movs	r2, #0
 800c624:	2100      	movs	r1, #0
 800c626:	68f8      	ldr	r0, [r7, #12]
 800c628:	f004 fdea 	bl	8011200 <USBD_LL_PrepareReceive>
 800c62c:	e03b      	b.n	800c6a6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	68da      	ldr	r2, [r3, #12]
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	689b      	ldr	r3, [r3, #8]
 800c636:	429a      	cmp	r2, r3
 800c638:	d11c      	bne.n	800c674 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c63a:	693b      	ldr	r3, [r7, #16]
 800c63c:	685a      	ldr	r2, [r3, #4]
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c642:	429a      	cmp	r2, r3
 800c644:	d316      	bcc.n	800c674 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	685a      	ldr	r2, [r3, #4]
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c650:	429a      	cmp	r2, r3
 800c652:	d20f      	bcs.n	800c674 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c654:	2200      	movs	r2, #0
 800c656:	2100      	movs	r1, #0
 800c658:	68f8      	ldr	r0, [r7, #12]
 800c65a:	f000 ff65 	bl	800d528 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	2200      	movs	r2, #0
 800c662:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c666:	2300      	movs	r3, #0
 800c668:	2200      	movs	r2, #0
 800c66a:	2100      	movs	r1, #0
 800c66c:	68f8      	ldr	r0, [r7, #12]
 800c66e:	f004 fdc7 	bl	8011200 <USBD_LL_PrepareReceive>
 800c672:	e018      	b.n	800c6a6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c67a:	b2db      	uxtb	r3, r3
 800c67c:	2b03      	cmp	r3, #3
 800c67e:	d10b      	bne.n	800c698 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c686:	68db      	ldr	r3, [r3, #12]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d005      	beq.n	800c698 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c692:	68db      	ldr	r3, [r3, #12]
 800c694:	68f8      	ldr	r0, [r7, #12]
 800c696:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c698:	2180      	movs	r1, #128	; 0x80
 800c69a:	68f8      	ldr	r0, [r7, #12]
 800c69c:	f004 fd06 	bl	80110ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c6a0:	68f8      	ldr	r0, [r7, #12]
 800c6a2:	f000 ff93 	bl	800d5cc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c6ac:	2b01      	cmp	r3, #1
 800c6ae:	d122      	bne.n	800c6f6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c6b0:	68f8      	ldr	r0, [r7, #12]
 800c6b2:	f7ff fe98 	bl	800c3e6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c6be:	e01a      	b.n	800c6f6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6c6:	b2db      	uxtb	r3, r3
 800c6c8:	2b03      	cmp	r3, #3
 800c6ca:	d114      	bne.n	800c6f6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6d2:	695b      	ldr	r3, [r3, #20]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d00e      	beq.n	800c6f6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6de:	695b      	ldr	r3, [r3, #20]
 800c6e0:	7afa      	ldrb	r2, [r7, #11]
 800c6e2:	4611      	mov	r1, r2
 800c6e4:	68f8      	ldr	r0, [r7, #12]
 800c6e6:	4798      	blx	r3
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c6ec:	7dfb      	ldrb	r3, [r7, #23]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d001      	beq.n	800c6f6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c6f2:	7dfb      	ldrb	r3, [r7, #23]
 800c6f4:	e000      	b.n	800c6f8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c6f6:	2300      	movs	r3, #0
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3718      	adds	r7, #24
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}

0800c700 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b082      	sub	sp, #8
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2201      	movs	r2, #1
 800c70c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2200      	movs	r2, #0
 800c714:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2200      	movs	r2, #0
 800c71c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2200      	movs	r2, #0
 800c722:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d101      	bne.n	800c734 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c730:	2303      	movs	r3, #3
 800c732:	e02f      	b.n	800c794 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d00f      	beq.n	800c75e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c744:	685b      	ldr	r3, [r3, #4]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d009      	beq.n	800c75e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c750:	685b      	ldr	r3, [r3, #4]
 800c752:	687a      	ldr	r2, [r7, #4]
 800c754:	6852      	ldr	r2, [r2, #4]
 800c756:	b2d2      	uxtb	r2, r2
 800c758:	4611      	mov	r1, r2
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c75e:	2340      	movs	r3, #64	; 0x40
 800c760:	2200      	movs	r2, #0
 800c762:	2100      	movs	r1, #0
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f004 fc5c 	bl	8011022 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2201      	movs	r2, #1
 800c76e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2240      	movs	r2, #64	; 0x40
 800c776:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c77a:	2340      	movs	r3, #64	; 0x40
 800c77c:	2200      	movs	r2, #0
 800c77e:	2180      	movs	r1, #128	; 0x80
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f004 fc4e 	bl	8011022 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2201      	movs	r2, #1
 800c78a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2240      	movs	r2, #64	; 0x40
 800c790:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c792:	2300      	movs	r3, #0
}
 800c794:	4618      	mov	r0, r3
 800c796:	3708      	adds	r7, #8
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}

0800c79c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c79c:	b480      	push	{r7}
 800c79e:	b083      	sub	sp, #12
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
 800c7a4:	460b      	mov	r3, r1
 800c7a6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	78fa      	ldrb	r2, [r7, #3]
 800c7ac:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c7ae:	2300      	movs	r3, #0
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	370c      	adds	r7, #12
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ba:	4770      	bx	lr

0800c7bc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b083      	sub	sp, #12
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7ca:	b2da      	uxtb	r2, r3
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2204      	movs	r2, #4
 800c7d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c7da:	2300      	movs	r3, #0
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	370c      	adds	r7, #12
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e6:	4770      	bx	lr

0800c7e8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b083      	sub	sp, #12
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7f6:	b2db      	uxtb	r3, r3
 800c7f8:	2b04      	cmp	r3, #4
 800c7fa:	d106      	bne.n	800c80a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c802:	b2da      	uxtb	r2, r3
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c80a:	2300      	movs	r3, #0
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	370c      	adds	r7, #12
 800c810:	46bd      	mov	sp, r7
 800c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c816:	4770      	bx	lr

0800c818 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b082      	sub	sp, #8
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c826:	2b00      	cmp	r3, #0
 800c828:	d101      	bne.n	800c82e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c82a:	2303      	movs	r3, #3
 800c82c:	e012      	b.n	800c854 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c834:	b2db      	uxtb	r3, r3
 800c836:	2b03      	cmp	r3, #3
 800c838:	d10b      	bne.n	800c852 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c840:	69db      	ldr	r3, [r3, #28]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d005      	beq.n	800c852 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c84c:	69db      	ldr	r3, [r3, #28]
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c852:	2300      	movs	r3, #0
}
 800c854:	4618      	mov	r0, r3
 800c856:	3708      	adds	r7, #8
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}

0800c85c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b082      	sub	sp, #8
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	460b      	mov	r3, r1
 800c866:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d101      	bne.n	800c876 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c872:	2303      	movs	r3, #3
 800c874:	e014      	b.n	800c8a0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c87c:	b2db      	uxtb	r3, r3
 800c87e:	2b03      	cmp	r3, #3
 800c880:	d10d      	bne.n	800c89e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c888:	6a1b      	ldr	r3, [r3, #32]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d007      	beq.n	800c89e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c894:	6a1b      	ldr	r3, [r3, #32]
 800c896:	78fa      	ldrb	r2, [r7, #3]
 800c898:	4611      	mov	r1, r2
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c89e:	2300      	movs	r3, #0
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3708      	adds	r7, #8
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}

0800c8a8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b082      	sub	sp, #8
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
 800c8b0:	460b      	mov	r3, r1
 800c8b2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d101      	bne.n	800c8c2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c8be:	2303      	movs	r3, #3
 800c8c0:	e014      	b.n	800c8ec <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8c8:	b2db      	uxtb	r3, r3
 800c8ca:	2b03      	cmp	r3, #3
 800c8cc:	d10d      	bne.n	800c8ea <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d007      	beq.n	800c8ea <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8e2:	78fa      	ldrb	r2, [r7, #3]
 800c8e4:	4611      	mov	r1, r2
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c8ea:	2300      	movs	r3, #0
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	3708      	adds	r7, #8
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bd80      	pop	{r7, pc}

0800c8f4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b083      	sub	sp, #12
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c8fc:	2300      	movs	r3, #0
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	370c      	adds	r7, #12
 800c902:	46bd      	mov	sp, r7
 800c904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c908:	4770      	bx	lr

0800c90a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c90a:	b580      	push	{r7, lr}
 800c90c:	b082      	sub	sp, #8
 800c90e:	af00      	add	r7, sp, #0
 800c910:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2201      	movs	r2, #1
 800c916:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c920:	2b00      	cmp	r3, #0
 800c922:	d009      	beq.n	800c938 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c92a:	685b      	ldr	r3, [r3, #4]
 800c92c:	687a      	ldr	r2, [r7, #4]
 800c92e:	6852      	ldr	r2, [r2, #4]
 800c930:	b2d2      	uxtb	r2, r2
 800c932:	4611      	mov	r1, r2
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	4798      	blx	r3
  }

  return USBD_OK;
 800c938:	2300      	movs	r3, #0
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	3708      	adds	r7, #8
 800c93e:	46bd      	mov	sp, r7
 800c940:	bd80      	pop	{r7, pc}

0800c942 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c942:	b480      	push	{r7}
 800c944:	b087      	sub	sp, #28
 800c946:	af00      	add	r7, sp, #0
 800c948:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	781b      	ldrb	r3, [r3, #0]
 800c952:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	3301      	adds	r3, #1
 800c958:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	781b      	ldrb	r3, [r3, #0]
 800c95e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c960:	8a3b      	ldrh	r3, [r7, #16]
 800c962:	021b      	lsls	r3, r3, #8
 800c964:	b21a      	sxth	r2, r3
 800c966:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c96a:	4313      	orrs	r3, r2
 800c96c:	b21b      	sxth	r3, r3
 800c96e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c970:	89fb      	ldrh	r3, [r7, #14]
}
 800c972:	4618      	mov	r0, r3
 800c974:	371c      	adds	r7, #28
 800c976:	46bd      	mov	sp, r7
 800c978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97c:	4770      	bx	lr
	...

0800c980 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b084      	sub	sp, #16
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c98a:	2300      	movs	r3, #0
 800c98c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	781b      	ldrb	r3, [r3, #0]
 800c992:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c996:	2b40      	cmp	r3, #64	; 0x40
 800c998:	d005      	beq.n	800c9a6 <USBD_StdDevReq+0x26>
 800c99a:	2b40      	cmp	r3, #64	; 0x40
 800c99c:	d853      	bhi.n	800ca46 <USBD_StdDevReq+0xc6>
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d00b      	beq.n	800c9ba <USBD_StdDevReq+0x3a>
 800c9a2:	2b20      	cmp	r3, #32
 800c9a4:	d14f      	bne.n	800ca46 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9ac:	689b      	ldr	r3, [r3, #8]
 800c9ae:	6839      	ldr	r1, [r7, #0]
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	4798      	blx	r3
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	73fb      	strb	r3, [r7, #15]
      break;
 800c9b8:	e04a      	b.n	800ca50 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	785b      	ldrb	r3, [r3, #1]
 800c9be:	2b09      	cmp	r3, #9
 800c9c0:	d83b      	bhi.n	800ca3a <USBD_StdDevReq+0xba>
 800c9c2:	a201      	add	r2, pc, #4	; (adr r2, 800c9c8 <USBD_StdDevReq+0x48>)
 800c9c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9c8:	0800ca1d 	.word	0x0800ca1d
 800c9cc:	0800ca31 	.word	0x0800ca31
 800c9d0:	0800ca3b 	.word	0x0800ca3b
 800c9d4:	0800ca27 	.word	0x0800ca27
 800c9d8:	0800ca3b 	.word	0x0800ca3b
 800c9dc:	0800c9fb 	.word	0x0800c9fb
 800c9e0:	0800c9f1 	.word	0x0800c9f1
 800c9e4:	0800ca3b 	.word	0x0800ca3b
 800c9e8:	0800ca13 	.word	0x0800ca13
 800c9ec:	0800ca05 	.word	0x0800ca05
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c9f0:	6839      	ldr	r1, [r7, #0]
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f000 f9de 	bl	800cdb4 <USBD_GetDescriptor>
          break;
 800c9f8:	e024      	b.n	800ca44 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c9fa:	6839      	ldr	r1, [r7, #0]
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f000 fb43 	bl	800d088 <USBD_SetAddress>
          break;
 800ca02:	e01f      	b.n	800ca44 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ca04:	6839      	ldr	r1, [r7, #0]
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f000 fb82 	bl	800d110 <USBD_SetConfig>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	73fb      	strb	r3, [r7, #15]
          break;
 800ca10:	e018      	b.n	800ca44 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ca12:	6839      	ldr	r1, [r7, #0]
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f000 fc21 	bl	800d25c <USBD_GetConfig>
          break;
 800ca1a:	e013      	b.n	800ca44 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ca1c:	6839      	ldr	r1, [r7, #0]
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f000 fc52 	bl	800d2c8 <USBD_GetStatus>
          break;
 800ca24:	e00e      	b.n	800ca44 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ca26:	6839      	ldr	r1, [r7, #0]
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f000 fc81 	bl	800d330 <USBD_SetFeature>
          break;
 800ca2e:	e009      	b.n	800ca44 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ca30:	6839      	ldr	r1, [r7, #0]
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f000 fc90 	bl	800d358 <USBD_ClrFeature>
          break;
 800ca38:	e004      	b.n	800ca44 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ca3a:	6839      	ldr	r1, [r7, #0]
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f000 fce7 	bl	800d410 <USBD_CtlError>
          break;
 800ca42:	bf00      	nop
      }
      break;
 800ca44:	e004      	b.n	800ca50 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ca46:	6839      	ldr	r1, [r7, #0]
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f000 fce1 	bl	800d410 <USBD_CtlError>
      break;
 800ca4e:	bf00      	nop
  }

  return ret;
 800ca50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	3710      	adds	r7, #16
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}
 800ca5a:	bf00      	nop

0800ca5c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b084      	sub	sp, #16
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
 800ca64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca66:	2300      	movs	r3, #0
 800ca68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	781b      	ldrb	r3, [r3, #0]
 800ca6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ca72:	2b40      	cmp	r3, #64	; 0x40
 800ca74:	d005      	beq.n	800ca82 <USBD_StdItfReq+0x26>
 800ca76:	2b40      	cmp	r3, #64	; 0x40
 800ca78:	d82f      	bhi.n	800cada <USBD_StdItfReq+0x7e>
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d001      	beq.n	800ca82 <USBD_StdItfReq+0x26>
 800ca7e:	2b20      	cmp	r3, #32
 800ca80:	d12b      	bne.n	800cada <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca88:	b2db      	uxtb	r3, r3
 800ca8a:	3b01      	subs	r3, #1
 800ca8c:	2b02      	cmp	r3, #2
 800ca8e:	d81d      	bhi.n	800cacc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	889b      	ldrh	r3, [r3, #4]
 800ca94:	b2db      	uxtb	r3, r3
 800ca96:	2b01      	cmp	r3, #1
 800ca98:	d813      	bhi.n	800cac2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800caa0:	689b      	ldr	r3, [r3, #8]
 800caa2:	6839      	ldr	r1, [r7, #0]
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	4798      	blx	r3
 800caa8:	4603      	mov	r3, r0
 800caaa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	88db      	ldrh	r3, [r3, #6]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d110      	bne.n	800cad6 <USBD_StdItfReq+0x7a>
 800cab4:	7bfb      	ldrb	r3, [r7, #15]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d10d      	bne.n	800cad6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f000 fd73 	bl	800d5a6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cac0:	e009      	b.n	800cad6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800cac2:	6839      	ldr	r1, [r7, #0]
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f000 fca3 	bl	800d410 <USBD_CtlError>
          break;
 800caca:	e004      	b.n	800cad6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800cacc:	6839      	ldr	r1, [r7, #0]
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f000 fc9e 	bl	800d410 <USBD_CtlError>
          break;
 800cad4:	e000      	b.n	800cad8 <USBD_StdItfReq+0x7c>
          break;
 800cad6:	bf00      	nop
      }
      break;
 800cad8:	e004      	b.n	800cae4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800cada:	6839      	ldr	r1, [r7, #0]
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f000 fc97 	bl	800d410 <USBD_CtlError>
      break;
 800cae2:	bf00      	nop
  }

  return ret;
 800cae4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3710      	adds	r7, #16
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}

0800caee <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800caee:	b580      	push	{r7, lr}
 800caf0:	b084      	sub	sp, #16
 800caf2:	af00      	add	r7, sp, #0
 800caf4:	6078      	str	r0, [r7, #4]
 800caf6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800caf8:	2300      	movs	r3, #0
 800cafa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	889b      	ldrh	r3, [r3, #4]
 800cb00:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	781b      	ldrb	r3, [r3, #0]
 800cb06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cb0a:	2b40      	cmp	r3, #64	; 0x40
 800cb0c:	d007      	beq.n	800cb1e <USBD_StdEPReq+0x30>
 800cb0e:	2b40      	cmp	r3, #64	; 0x40
 800cb10:	f200 8145 	bhi.w	800cd9e <USBD_StdEPReq+0x2b0>
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d00c      	beq.n	800cb32 <USBD_StdEPReq+0x44>
 800cb18:	2b20      	cmp	r3, #32
 800cb1a:	f040 8140 	bne.w	800cd9e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb24:	689b      	ldr	r3, [r3, #8]
 800cb26:	6839      	ldr	r1, [r7, #0]
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	4798      	blx	r3
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	73fb      	strb	r3, [r7, #15]
      break;
 800cb30:	e13a      	b.n	800cda8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	785b      	ldrb	r3, [r3, #1]
 800cb36:	2b03      	cmp	r3, #3
 800cb38:	d007      	beq.n	800cb4a <USBD_StdEPReq+0x5c>
 800cb3a:	2b03      	cmp	r3, #3
 800cb3c:	f300 8129 	bgt.w	800cd92 <USBD_StdEPReq+0x2a4>
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d07f      	beq.n	800cc44 <USBD_StdEPReq+0x156>
 800cb44:	2b01      	cmp	r3, #1
 800cb46:	d03c      	beq.n	800cbc2 <USBD_StdEPReq+0xd4>
 800cb48:	e123      	b.n	800cd92 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb50:	b2db      	uxtb	r3, r3
 800cb52:	2b02      	cmp	r3, #2
 800cb54:	d002      	beq.n	800cb5c <USBD_StdEPReq+0x6e>
 800cb56:	2b03      	cmp	r3, #3
 800cb58:	d016      	beq.n	800cb88 <USBD_StdEPReq+0x9a>
 800cb5a:	e02c      	b.n	800cbb6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cb5c:	7bbb      	ldrb	r3, [r7, #14]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d00d      	beq.n	800cb7e <USBD_StdEPReq+0x90>
 800cb62:	7bbb      	ldrb	r3, [r7, #14]
 800cb64:	2b80      	cmp	r3, #128	; 0x80
 800cb66:	d00a      	beq.n	800cb7e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cb68:	7bbb      	ldrb	r3, [r7, #14]
 800cb6a:	4619      	mov	r1, r3
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f004 fa9d 	bl	80110ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb72:	2180      	movs	r1, #128	; 0x80
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f004 fa99 	bl	80110ac <USBD_LL_StallEP>
 800cb7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cb7c:	e020      	b.n	800cbc0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800cb7e:	6839      	ldr	r1, [r7, #0]
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f000 fc45 	bl	800d410 <USBD_CtlError>
              break;
 800cb86:	e01b      	b.n	800cbc0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	885b      	ldrh	r3, [r3, #2]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d10e      	bne.n	800cbae <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cb90:	7bbb      	ldrb	r3, [r7, #14]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d00b      	beq.n	800cbae <USBD_StdEPReq+0xc0>
 800cb96:	7bbb      	ldrb	r3, [r7, #14]
 800cb98:	2b80      	cmp	r3, #128	; 0x80
 800cb9a:	d008      	beq.n	800cbae <USBD_StdEPReq+0xc0>
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	88db      	ldrh	r3, [r3, #6]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d104      	bne.n	800cbae <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cba4:	7bbb      	ldrb	r3, [r7, #14]
 800cba6:	4619      	mov	r1, r3
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f004 fa7f 	bl	80110ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f000 fcf9 	bl	800d5a6 <USBD_CtlSendStatus>

              break;
 800cbb4:	e004      	b.n	800cbc0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800cbb6:	6839      	ldr	r1, [r7, #0]
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f000 fc29 	bl	800d410 <USBD_CtlError>
              break;
 800cbbe:	bf00      	nop
          }
          break;
 800cbc0:	e0ec      	b.n	800cd9c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbc8:	b2db      	uxtb	r3, r3
 800cbca:	2b02      	cmp	r3, #2
 800cbcc:	d002      	beq.n	800cbd4 <USBD_StdEPReq+0xe6>
 800cbce:	2b03      	cmp	r3, #3
 800cbd0:	d016      	beq.n	800cc00 <USBD_StdEPReq+0x112>
 800cbd2:	e030      	b.n	800cc36 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cbd4:	7bbb      	ldrb	r3, [r7, #14]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d00d      	beq.n	800cbf6 <USBD_StdEPReq+0x108>
 800cbda:	7bbb      	ldrb	r3, [r7, #14]
 800cbdc:	2b80      	cmp	r3, #128	; 0x80
 800cbde:	d00a      	beq.n	800cbf6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cbe0:	7bbb      	ldrb	r3, [r7, #14]
 800cbe2:	4619      	mov	r1, r3
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f004 fa61 	bl	80110ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cbea:	2180      	movs	r1, #128	; 0x80
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f004 fa5d 	bl	80110ac <USBD_LL_StallEP>
 800cbf2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cbf4:	e025      	b.n	800cc42 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800cbf6:	6839      	ldr	r1, [r7, #0]
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f000 fc09 	bl	800d410 <USBD_CtlError>
              break;
 800cbfe:	e020      	b.n	800cc42 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	885b      	ldrh	r3, [r3, #2]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d11b      	bne.n	800cc40 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cc08:	7bbb      	ldrb	r3, [r7, #14]
 800cc0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d004      	beq.n	800cc1c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cc12:	7bbb      	ldrb	r3, [r7, #14]
 800cc14:	4619      	mov	r1, r3
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f004 fa67 	bl	80110ea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	f000 fcc2 	bl	800d5a6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc28:	689b      	ldr	r3, [r3, #8]
 800cc2a:	6839      	ldr	r1, [r7, #0]
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	4798      	blx	r3
 800cc30:	4603      	mov	r3, r0
 800cc32:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800cc34:	e004      	b.n	800cc40 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800cc36:	6839      	ldr	r1, [r7, #0]
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f000 fbe9 	bl	800d410 <USBD_CtlError>
              break;
 800cc3e:	e000      	b.n	800cc42 <USBD_StdEPReq+0x154>
              break;
 800cc40:	bf00      	nop
          }
          break;
 800cc42:	e0ab      	b.n	800cd9c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc4a:	b2db      	uxtb	r3, r3
 800cc4c:	2b02      	cmp	r3, #2
 800cc4e:	d002      	beq.n	800cc56 <USBD_StdEPReq+0x168>
 800cc50:	2b03      	cmp	r3, #3
 800cc52:	d032      	beq.n	800ccba <USBD_StdEPReq+0x1cc>
 800cc54:	e097      	b.n	800cd86 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc56:	7bbb      	ldrb	r3, [r7, #14]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d007      	beq.n	800cc6c <USBD_StdEPReq+0x17e>
 800cc5c:	7bbb      	ldrb	r3, [r7, #14]
 800cc5e:	2b80      	cmp	r3, #128	; 0x80
 800cc60:	d004      	beq.n	800cc6c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800cc62:	6839      	ldr	r1, [r7, #0]
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f000 fbd3 	bl	800d410 <USBD_CtlError>
                break;
 800cc6a:	e091      	b.n	800cd90 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	da0b      	bge.n	800cc8c <USBD_StdEPReq+0x19e>
 800cc74:	7bbb      	ldrb	r3, [r7, #14]
 800cc76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cc7a:	4613      	mov	r3, r2
 800cc7c:	009b      	lsls	r3, r3, #2
 800cc7e:	4413      	add	r3, r2
 800cc80:	009b      	lsls	r3, r3, #2
 800cc82:	3310      	adds	r3, #16
 800cc84:	687a      	ldr	r2, [r7, #4]
 800cc86:	4413      	add	r3, r2
 800cc88:	3304      	adds	r3, #4
 800cc8a:	e00b      	b.n	800cca4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cc8c:	7bbb      	ldrb	r3, [r7, #14]
 800cc8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc92:	4613      	mov	r3, r2
 800cc94:	009b      	lsls	r3, r3, #2
 800cc96:	4413      	add	r3, r2
 800cc98:	009b      	lsls	r3, r3, #2
 800cc9a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cc9e:	687a      	ldr	r2, [r7, #4]
 800cca0:	4413      	add	r3, r2
 800cca2:	3304      	adds	r3, #4
 800cca4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	2200      	movs	r2, #0
 800ccaa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	2202      	movs	r2, #2
 800ccb0:	4619      	mov	r1, r3
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f000 fc1d 	bl	800d4f2 <USBD_CtlSendData>
              break;
 800ccb8:	e06a      	b.n	800cd90 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ccba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	da11      	bge.n	800cce6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ccc2:	7bbb      	ldrb	r3, [r7, #14]
 800ccc4:	f003 020f 	and.w	r2, r3, #15
 800ccc8:	6879      	ldr	r1, [r7, #4]
 800ccca:	4613      	mov	r3, r2
 800cccc:	009b      	lsls	r3, r3, #2
 800ccce:	4413      	add	r3, r2
 800ccd0:	009b      	lsls	r3, r3, #2
 800ccd2:	440b      	add	r3, r1
 800ccd4:	3324      	adds	r3, #36	; 0x24
 800ccd6:	881b      	ldrh	r3, [r3, #0]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d117      	bne.n	800cd0c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ccdc:	6839      	ldr	r1, [r7, #0]
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f000 fb96 	bl	800d410 <USBD_CtlError>
                  break;
 800cce4:	e054      	b.n	800cd90 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cce6:	7bbb      	ldrb	r3, [r7, #14]
 800cce8:	f003 020f 	and.w	r2, r3, #15
 800ccec:	6879      	ldr	r1, [r7, #4]
 800ccee:	4613      	mov	r3, r2
 800ccf0:	009b      	lsls	r3, r3, #2
 800ccf2:	4413      	add	r3, r2
 800ccf4:	009b      	lsls	r3, r3, #2
 800ccf6:	440b      	add	r3, r1
 800ccf8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ccfc:	881b      	ldrh	r3, [r3, #0]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d104      	bne.n	800cd0c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cd02:	6839      	ldr	r1, [r7, #0]
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f000 fb83 	bl	800d410 <USBD_CtlError>
                  break;
 800cd0a:	e041      	b.n	800cd90 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	da0b      	bge.n	800cd2c <USBD_StdEPReq+0x23e>
 800cd14:	7bbb      	ldrb	r3, [r7, #14]
 800cd16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd1a:	4613      	mov	r3, r2
 800cd1c:	009b      	lsls	r3, r3, #2
 800cd1e:	4413      	add	r3, r2
 800cd20:	009b      	lsls	r3, r3, #2
 800cd22:	3310      	adds	r3, #16
 800cd24:	687a      	ldr	r2, [r7, #4]
 800cd26:	4413      	add	r3, r2
 800cd28:	3304      	adds	r3, #4
 800cd2a:	e00b      	b.n	800cd44 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cd2c:	7bbb      	ldrb	r3, [r7, #14]
 800cd2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd32:	4613      	mov	r3, r2
 800cd34:	009b      	lsls	r3, r3, #2
 800cd36:	4413      	add	r3, r2
 800cd38:	009b      	lsls	r3, r3, #2
 800cd3a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cd3e:	687a      	ldr	r2, [r7, #4]
 800cd40:	4413      	add	r3, r2
 800cd42:	3304      	adds	r3, #4
 800cd44:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cd46:	7bbb      	ldrb	r3, [r7, #14]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d002      	beq.n	800cd52 <USBD_StdEPReq+0x264>
 800cd4c:	7bbb      	ldrb	r3, [r7, #14]
 800cd4e:	2b80      	cmp	r3, #128	; 0x80
 800cd50:	d103      	bne.n	800cd5a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	2200      	movs	r2, #0
 800cd56:	601a      	str	r2, [r3, #0]
 800cd58:	e00e      	b.n	800cd78 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cd5a:	7bbb      	ldrb	r3, [r7, #14]
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f004 f9e2 	bl	8011128 <USBD_LL_IsStallEP>
 800cd64:	4603      	mov	r3, r0
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d003      	beq.n	800cd72 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	2201      	movs	r2, #1
 800cd6e:	601a      	str	r2, [r3, #0]
 800cd70:	e002      	b.n	800cd78 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	2200      	movs	r2, #0
 800cd76:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	2202      	movs	r2, #2
 800cd7c:	4619      	mov	r1, r3
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f000 fbb7 	bl	800d4f2 <USBD_CtlSendData>
              break;
 800cd84:	e004      	b.n	800cd90 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800cd86:	6839      	ldr	r1, [r7, #0]
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f000 fb41 	bl	800d410 <USBD_CtlError>
              break;
 800cd8e:	bf00      	nop
          }
          break;
 800cd90:	e004      	b.n	800cd9c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800cd92:	6839      	ldr	r1, [r7, #0]
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f000 fb3b 	bl	800d410 <USBD_CtlError>
          break;
 800cd9a:	bf00      	nop
      }
      break;
 800cd9c:	e004      	b.n	800cda8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800cd9e:	6839      	ldr	r1, [r7, #0]
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f000 fb35 	bl	800d410 <USBD_CtlError>
      break;
 800cda6:	bf00      	nop
  }

  return ret;
 800cda8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdaa:	4618      	mov	r0, r3
 800cdac:	3710      	adds	r7, #16
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}
	...

0800cdb4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b084      	sub	sp, #16
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
 800cdbc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	885b      	ldrh	r3, [r3, #2]
 800cdce:	0a1b      	lsrs	r3, r3, #8
 800cdd0:	b29b      	uxth	r3, r3
 800cdd2:	3b01      	subs	r3, #1
 800cdd4:	2b06      	cmp	r3, #6
 800cdd6:	f200 8128 	bhi.w	800d02a <USBD_GetDescriptor+0x276>
 800cdda:	a201      	add	r2, pc, #4	; (adr r2, 800cde0 <USBD_GetDescriptor+0x2c>)
 800cddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cde0:	0800cdfd 	.word	0x0800cdfd
 800cde4:	0800ce15 	.word	0x0800ce15
 800cde8:	0800ce55 	.word	0x0800ce55
 800cdec:	0800d02b 	.word	0x0800d02b
 800cdf0:	0800d02b 	.word	0x0800d02b
 800cdf4:	0800cfcb 	.word	0x0800cfcb
 800cdf8:	0800cff7 	.word	0x0800cff7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	687a      	ldr	r2, [r7, #4]
 800ce06:	7c12      	ldrb	r2, [r2, #16]
 800ce08:	f107 0108 	add.w	r1, r7, #8
 800ce0c:	4610      	mov	r0, r2
 800ce0e:	4798      	blx	r3
 800ce10:	60f8      	str	r0, [r7, #12]
      break;
 800ce12:	e112      	b.n	800d03a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	7c1b      	ldrb	r3, [r3, #16]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d10d      	bne.n	800ce38 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce24:	f107 0208 	add.w	r2, r7, #8
 800ce28:	4610      	mov	r0, r2
 800ce2a:	4798      	blx	r3
 800ce2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	3301      	adds	r3, #1
 800ce32:	2202      	movs	r2, #2
 800ce34:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ce36:	e100      	b.n	800d03a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce40:	f107 0208 	add.w	r2, r7, #8
 800ce44:	4610      	mov	r0, r2
 800ce46:	4798      	blx	r3
 800ce48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	3301      	adds	r3, #1
 800ce4e:	2202      	movs	r2, #2
 800ce50:	701a      	strb	r2, [r3, #0]
      break;
 800ce52:	e0f2      	b.n	800d03a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	885b      	ldrh	r3, [r3, #2]
 800ce58:	b2db      	uxtb	r3, r3
 800ce5a:	2b05      	cmp	r3, #5
 800ce5c:	f200 80ac 	bhi.w	800cfb8 <USBD_GetDescriptor+0x204>
 800ce60:	a201      	add	r2, pc, #4	; (adr r2, 800ce68 <USBD_GetDescriptor+0xb4>)
 800ce62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce66:	bf00      	nop
 800ce68:	0800ce81 	.word	0x0800ce81
 800ce6c:	0800ceb5 	.word	0x0800ceb5
 800ce70:	0800cee9 	.word	0x0800cee9
 800ce74:	0800cf1d 	.word	0x0800cf1d
 800ce78:	0800cf51 	.word	0x0800cf51
 800ce7c:	0800cf85 	.word	0x0800cf85
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce86:	685b      	ldr	r3, [r3, #4]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d00b      	beq.n	800cea4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce92:	685b      	ldr	r3, [r3, #4]
 800ce94:	687a      	ldr	r2, [r7, #4]
 800ce96:	7c12      	ldrb	r2, [r2, #16]
 800ce98:	f107 0108 	add.w	r1, r7, #8
 800ce9c:	4610      	mov	r0, r2
 800ce9e:	4798      	blx	r3
 800cea0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cea2:	e091      	b.n	800cfc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cea4:	6839      	ldr	r1, [r7, #0]
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f000 fab2 	bl	800d410 <USBD_CtlError>
            err++;
 800ceac:	7afb      	ldrb	r3, [r7, #11]
 800ceae:	3301      	adds	r3, #1
 800ceb0:	72fb      	strb	r3, [r7, #11]
          break;
 800ceb2:	e089      	b.n	800cfc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ceba:	689b      	ldr	r3, [r3, #8]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d00b      	beq.n	800ced8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cec6:	689b      	ldr	r3, [r3, #8]
 800cec8:	687a      	ldr	r2, [r7, #4]
 800ceca:	7c12      	ldrb	r2, [r2, #16]
 800cecc:	f107 0108 	add.w	r1, r7, #8
 800ced0:	4610      	mov	r0, r2
 800ced2:	4798      	blx	r3
 800ced4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ced6:	e077      	b.n	800cfc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ced8:	6839      	ldr	r1, [r7, #0]
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f000 fa98 	bl	800d410 <USBD_CtlError>
            err++;
 800cee0:	7afb      	ldrb	r3, [r7, #11]
 800cee2:	3301      	adds	r3, #1
 800cee4:	72fb      	strb	r3, [r7, #11]
          break;
 800cee6:	e06f      	b.n	800cfc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ceee:	68db      	ldr	r3, [r3, #12]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d00b      	beq.n	800cf0c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cefa:	68db      	ldr	r3, [r3, #12]
 800cefc:	687a      	ldr	r2, [r7, #4]
 800cefe:	7c12      	ldrb	r2, [r2, #16]
 800cf00:	f107 0108 	add.w	r1, r7, #8
 800cf04:	4610      	mov	r0, r2
 800cf06:	4798      	blx	r3
 800cf08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf0a:	e05d      	b.n	800cfc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf0c:	6839      	ldr	r1, [r7, #0]
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f000 fa7e 	bl	800d410 <USBD_CtlError>
            err++;
 800cf14:	7afb      	ldrb	r3, [r7, #11]
 800cf16:	3301      	adds	r3, #1
 800cf18:	72fb      	strb	r3, [r7, #11]
          break;
 800cf1a:	e055      	b.n	800cfc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf22:	691b      	ldr	r3, [r3, #16]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d00b      	beq.n	800cf40 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf2e:	691b      	ldr	r3, [r3, #16]
 800cf30:	687a      	ldr	r2, [r7, #4]
 800cf32:	7c12      	ldrb	r2, [r2, #16]
 800cf34:	f107 0108 	add.w	r1, r7, #8
 800cf38:	4610      	mov	r0, r2
 800cf3a:	4798      	blx	r3
 800cf3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf3e:	e043      	b.n	800cfc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf40:	6839      	ldr	r1, [r7, #0]
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f000 fa64 	bl	800d410 <USBD_CtlError>
            err++;
 800cf48:	7afb      	ldrb	r3, [r7, #11]
 800cf4a:	3301      	adds	r3, #1
 800cf4c:	72fb      	strb	r3, [r7, #11]
          break;
 800cf4e:	e03b      	b.n	800cfc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf56:	695b      	ldr	r3, [r3, #20]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d00b      	beq.n	800cf74 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf62:	695b      	ldr	r3, [r3, #20]
 800cf64:	687a      	ldr	r2, [r7, #4]
 800cf66:	7c12      	ldrb	r2, [r2, #16]
 800cf68:	f107 0108 	add.w	r1, r7, #8
 800cf6c:	4610      	mov	r0, r2
 800cf6e:	4798      	blx	r3
 800cf70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf72:	e029      	b.n	800cfc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf74:	6839      	ldr	r1, [r7, #0]
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f000 fa4a 	bl	800d410 <USBD_CtlError>
            err++;
 800cf7c:	7afb      	ldrb	r3, [r7, #11]
 800cf7e:	3301      	adds	r3, #1
 800cf80:	72fb      	strb	r3, [r7, #11]
          break;
 800cf82:	e021      	b.n	800cfc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf8a:	699b      	ldr	r3, [r3, #24]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d00b      	beq.n	800cfa8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf96:	699b      	ldr	r3, [r3, #24]
 800cf98:	687a      	ldr	r2, [r7, #4]
 800cf9a:	7c12      	ldrb	r2, [r2, #16]
 800cf9c:	f107 0108 	add.w	r1, r7, #8
 800cfa0:	4610      	mov	r0, r2
 800cfa2:	4798      	blx	r3
 800cfa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cfa6:	e00f      	b.n	800cfc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cfa8:	6839      	ldr	r1, [r7, #0]
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f000 fa30 	bl	800d410 <USBD_CtlError>
            err++;
 800cfb0:	7afb      	ldrb	r3, [r7, #11]
 800cfb2:	3301      	adds	r3, #1
 800cfb4:	72fb      	strb	r3, [r7, #11]
          break;
 800cfb6:	e007      	b.n	800cfc8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cfb8:	6839      	ldr	r1, [r7, #0]
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f000 fa28 	bl	800d410 <USBD_CtlError>
          err++;
 800cfc0:	7afb      	ldrb	r3, [r7, #11]
 800cfc2:	3301      	adds	r3, #1
 800cfc4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800cfc6:	bf00      	nop
      }
      break;
 800cfc8:	e037      	b.n	800d03a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	7c1b      	ldrb	r3, [r3, #16]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d109      	bne.n	800cfe6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfda:	f107 0208 	add.w	r2, r7, #8
 800cfde:	4610      	mov	r0, r2
 800cfe0:	4798      	blx	r3
 800cfe2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cfe4:	e029      	b.n	800d03a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cfe6:	6839      	ldr	r1, [r7, #0]
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f000 fa11 	bl	800d410 <USBD_CtlError>
        err++;
 800cfee:	7afb      	ldrb	r3, [r7, #11]
 800cff0:	3301      	adds	r3, #1
 800cff2:	72fb      	strb	r3, [r7, #11]
      break;
 800cff4:	e021      	b.n	800d03a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	7c1b      	ldrb	r3, [r3, #16]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d10d      	bne.n	800d01a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d006:	f107 0208 	add.w	r2, r7, #8
 800d00a:	4610      	mov	r0, r2
 800d00c:	4798      	blx	r3
 800d00e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	3301      	adds	r3, #1
 800d014:	2207      	movs	r2, #7
 800d016:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d018:	e00f      	b.n	800d03a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d01a:	6839      	ldr	r1, [r7, #0]
 800d01c:	6878      	ldr	r0, [r7, #4]
 800d01e:	f000 f9f7 	bl	800d410 <USBD_CtlError>
        err++;
 800d022:	7afb      	ldrb	r3, [r7, #11]
 800d024:	3301      	adds	r3, #1
 800d026:	72fb      	strb	r3, [r7, #11]
      break;
 800d028:	e007      	b.n	800d03a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d02a:	6839      	ldr	r1, [r7, #0]
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f000 f9ef 	bl	800d410 <USBD_CtlError>
      err++;
 800d032:	7afb      	ldrb	r3, [r7, #11]
 800d034:	3301      	adds	r3, #1
 800d036:	72fb      	strb	r3, [r7, #11]
      break;
 800d038:	bf00      	nop
  }

  if (err != 0U)
 800d03a:	7afb      	ldrb	r3, [r7, #11]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d11e      	bne.n	800d07e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	88db      	ldrh	r3, [r3, #6]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d016      	beq.n	800d076 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d048:	893b      	ldrh	r3, [r7, #8]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d00e      	beq.n	800d06c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	88da      	ldrh	r2, [r3, #6]
 800d052:	893b      	ldrh	r3, [r7, #8]
 800d054:	4293      	cmp	r3, r2
 800d056:	bf28      	it	cs
 800d058:	4613      	movcs	r3, r2
 800d05a:	b29b      	uxth	r3, r3
 800d05c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d05e:	893b      	ldrh	r3, [r7, #8]
 800d060:	461a      	mov	r2, r3
 800d062:	68f9      	ldr	r1, [r7, #12]
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f000 fa44 	bl	800d4f2 <USBD_CtlSendData>
 800d06a:	e009      	b.n	800d080 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d06c:	6839      	ldr	r1, [r7, #0]
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	f000 f9ce 	bl	800d410 <USBD_CtlError>
 800d074:	e004      	b.n	800d080 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f000 fa95 	bl	800d5a6 <USBD_CtlSendStatus>
 800d07c:	e000      	b.n	800d080 <USBD_GetDescriptor+0x2cc>
    return;
 800d07e:	bf00      	nop
  }
}
 800d080:	3710      	adds	r7, #16
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
 800d086:	bf00      	nop

0800d088 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b084      	sub	sp, #16
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
 800d090:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	889b      	ldrh	r3, [r3, #4]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d131      	bne.n	800d0fe <USBD_SetAddress+0x76>
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	88db      	ldrh	r3, [r3, #6]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d12d      	bne.n	800d0fe <USBD_SetAddress+0x76>
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	885b      	ldrh	r3, [r3, #2]
 800d0a6:	2b7f      	cmp	r3, #127	; 0x7f
 800d0a8:	d829      	bhi.n	800d0fe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	885b      	ldrh	r3, [r3, #2]
 800d0ae:	b2db      	uxtb	r3, r3
 800d0b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0bc:	b2db      	uxtb	r3, r3
 800d0be:	2b03      	cmp	r3, #3
 800d0c0:	d104      	bne.n	800d0cc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d0c2:	6839      	ldr	r1, [r7, #0]
 800d0c4:	6878      	ldr	r0, [r7, #4]
 800d0c6:	f000 f9a3 	bl	800d410 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0ca:	e01d      	b.n	800d108 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	7bfa      	ldrb	r2, [r7, #15]
 800d0d0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d0d4:	7bfb      	ldrb	r3, [r7, #15]
 800d0d6:	4619      	mov	r1, r3
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f004 f851 	bl	8011180 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f000 fa61 	bl	800d5a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d0e4:	7bfb      	ldrb	r3, [r7, #15]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d004      	beq.n	800d0f4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2202      	movs	r2, #2
 800d0ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0f2:	e009      	b.n	800d108 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2201      	movs	r2, #1
 800d0f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0fc:	e004      	b.n	800d108 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d0fe:	6839      	ldr	r1, [r7, #0]
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f000 f985 	bl	800d410 <USBD_CtlError>
  }
}
 800d106:	bf00      	nop
 800d108:	bf00      	nop
 800d10a:	3710      	adds	r7, #16
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}

0800d110 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b084      	sub	sp, #16
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
 800d118:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d11a:	2300      	movs	r3, #0
 800d11c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	885b      	ldrh	r3, [r3, #2]
 800d122:	b2da      	uxtb	r2, r3
 800d124:	4b4c      	ldr	r3, [pc, #304]	; (800d258 <USBD_SetConfig+0x148>)
 800d126:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d128:	4b4b      	ldr	r3, [pc, #300]	; (800d258 <USBD_SetConfig+0x148>)
 800d12a:	781b      	ldrb	r3, [r3, #0]
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	d905      	bls.n	800d13c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d130:	6839      	ldr	r1, [r7, #0]
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f000 f96c 	bl	800d410 <USBD_CtlError>
    return USBD_FAIL;
 800d138:	2303      	movs	r3, #3
 800d13a:	e088      	b.n	800d24e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d142:	b2db      	uxtb	r3, r3
 800d144:	2b02      	cmp	r3, #2
 800d146:	d002      	beq.n	800d14e <USBD_SetConfig+0x3e>
 800d148:	2b03      	cmp	r3, #3
 800d14a:	d025      	beq.n	800d198 <USBD_SetConfig+0x88>
 800d14c:	e071      	b.n	800d232 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d14e:	4b42      	ldr	r3, [pc, #264]	; (800d258 <USBD_SetConfig+0x148>)
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d01c      	beq.n	800d190 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d156:	4b40      	ldr	r3, [pc, #256]	; (800d258 <USBD_SetConfig+0x148>)
 800d158:	781b      	ldrb	r3, [r3, #0]
 800d15a:	461a      	mov	r2, r3
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d160:	4b3d      	ldr	r3, [pc, #244]	; (800d258 <USBD_SetConfig+0x148>)
 800d162:	781b      	ldrb	r3, [r3, #0]
 800d164:	4619      	mov	r1, r3
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f7ff f948 	bl	800c3fc <USBD_SetClassConfig>
 800d16c:	4603      	mov	r3, r0
 800d16e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d170:	7bfb      	ldrb	r3, [r7, #15]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d004      	beq.n	800d180 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d176:	6839      	ldr	r1, [r7, #0]
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f000 f949 	bl	800d410 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d17e:	e065      	b.n	800d24c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d180:	6878      	ldr	r0, [r7, #4]
 800d182:	f000 fa10 	bl	800d5a6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	2203      	movs	r2, #3
 800d18a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d18e:	e05d      	b.n	800d24c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f000 fa08 	bl	800d5a6 <USBD_CtlSendStatus>
      break;
 800d196:	e059      	b.n	800d24c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d198:	4b2f      	ldr	r3, [pc, #188]	; (800d258 <USBD_SetConfig+0x148>)
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d112      	bne.n	800d1c6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2202      	movs	r2, #2
 800d1a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d1a8:	4b2b      	ldr	r3, [pc, #172]	; (800d258 <USBD_SetConfig+0x148>)
 800d1aa:	781b      	ldrb	r3, [r3, #0]
 800d1ac:	461a      	mov	r2, r3
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d1b2:	4b29      	ldr	r3, [pc, #164]	; (800d258 <USBD_SetConfig+0x148>)
 800d1b4:	781b      	ldrb	r3, [r3, #0]
 800d1b6:	4619      	mov	r1, r3
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f7ff f93b 	bl	800c434 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f000 f9f1 	bl	800d5a6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d1c4:	e042      	b.n	800d24c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d1c6:	4b24      	ldr	r3, [pc, #144]	; (800d258 <USBD_SetConfig+0x148>)
 800d1c8:	781b      	ldrb	r3, [r3, #0]
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	685b      	ldr	r3, [r3, #4]
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	d02a      	beq.n	800d22a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	685b      	ldr	r3, [r3, #4]
 800d1d8:	b2db      	uxtb	r3, r3
 800d1da:	4619      	mov	r1, r3
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f7ff f929 	bl	800c434 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d1e2:	4b1d      	ldr	r3, [pc, #116]	; (800d258 <USBD_SetConfig+0x148>)
 800d1e4:	781b      	ldrb	r3, [r3, #0]
 800d1e6:	461a      	mov	r2, r3
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d1ec:	4b1a      	ldr	r3, [pc, #104]	; (800d258 <USBD_SetConfig+0x148>)
 800d1ee:	781b      	ldrb	r3, [r3, #0]
 800d1f0:	4619      	mov	r1, r3
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	f7ff f902 	bl	800c3fc <USBD_SetClassConfig>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d1fc:	7bfb      	ldrb	r3, [r7, #15]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d00f      	beq.n	800d222 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d202:	6839      	ldr	r1, [r7, #0]
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	f000 f903 	bl	800d410 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	685b      	ldr	r3, [r3, #4]
 800d20e:	b2db      	uxtb	r3, r3
 800d210:	4619      	mov	r1, r3
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	f7ff f90e 	bl	800c434 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2202      	movs	r2, #2
 800d21c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d220:	e014      	b.n	800d24c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f000 f9bf 	bl	800d5a6 <USBD_CtlSendStatus>
      break;
 800d228:	e010      	b.n	800d24c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f000 f9bb 	bl	800d5a6 <USBD_CtlSendStatus>
      break;
 800d230:	e00c      	b.n	800d24c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d232:	6839      	ldr	r1, [r7, #0]
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f000 f8eb 	bl	800d410 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d23a:	4b07      	ldr	r3, [pc, #28]	; (800d258 <USBD_SetConfig+0x148>)
 800d23c:	781b      	ldrb	r3, [r3, #0]
 800d23e:	4619      	mov	r1, r3
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f7ff f8f7 	bl	800c434 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d246:	2303      	movs	r3, #3
 800d248:	73fb      	strb	r3, [r7, #15]
      break;
 800d24a:	bf00      	nop
  }

  return ret;
 800d24c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d24e:	4618      	mov	r0, r3
 800d250:	3710      	adds	r7, #16
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}
 800d256:	bf00      	nop
 800d258:	200005e9 	.word	0x200005e9

0800d25c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b082      	sub	sp, #8
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
 800d264:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	88db      	ldrh	r3, [r3, #6]
 800d26a:	2b01      	cmp	r3, #1
 800d26c:	d004      	beq.n	800d278 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d26e:	6839      	ldr	r1, [r7, #0]
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f000 f8cd 	bl	800d410 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d276:	e023      	b.n	800d2c0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d27e:	b2db      	uxtb	r3, r3
 800d280:	2b02      	cmp	r3, #2
 800d282:	dc02      	bgt.n	800d28a <USBD_GetConfig+0x2e>
 800d284:	2b00      	cmp	r3, #0
 800d286:	dc03      	bgt.n	800d290 <USBD_GetConfig+0x34>
 800d288:	e015      	b.n	800d2b6 <USBD_GetConfig+0x5a>
 800d28a:	2b03      	cmp	r3, #3
 800d28c:	d00b      	beq.n	800d2a6 <USBD_GetConfig+0x4a>
 800d28e:	e012      	b.n	800d2b6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2200      	movs	r2, #0
 800d294:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	3308      	adds	r3, #8
 800d29a:	2201      	movs	r2, #1
 800d29c:	4619      	mov	r1, r3
 800d29e:	6878      	ldr	r0, [r7, #4]
 800d2a0:	f000 f927 	bl	800d4f2 <USBD_CtlSendData>
        break;
 800d2a4:	e00c      	b.n	800d2c0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	3304      	adds	r3, #4
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	4619      	mov	r1, r3
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f000 f91f 	bl	800d4f2 <USBD_CtlSendData>
        break;
 800d2b4:	e004      	b.n	800d2c0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d2b6:	6839      	ldr	r1, [r7, #0]
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f000 f8a9 	bl	800d410 <USBD_CtlError>
        break;
 800d2be:	bf00      	nop
}
 800d2c0:	bf00      	nop
 800d2c2:	3708      	adds	r7, #8
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}

0800d2c8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b082      	sub	sp, #8
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
 800d2d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2d8:	b2db      	uxtb	r3, r3
 800d2da:	3b01      	subs	r3, #1
 800d2dc:	2b02      	cmp	r3, #2
 800d2de:	d81e      	bhi.n	800d31e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	88db      	ldrh	r3, [r3, #6]
 800d2e4:	2b02      	cmp	r3, #2
 800d2e6:	d004      	beq.n	800d2f2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d2e8:	6839      	ldr	r1, [r7, #0]
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f000 f890 	bl	800d410 <USBD_CtlError>
        break;
 800d2f0:	e01a      	b.n	800d328 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2201      	movs	r2, #1
 800d2f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d005      	beq.n	800d30e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	68db      	ldr	r3, [r3, #12]
 800d306:	f043 0202 	orr.w	r2, r3, #2
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	330c      	adds	r3, #12
 800d312:	2202      	movs	r2, #2
 800d314:	4619      	mov	r1, r3
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f000 f8eb 	bl	800d4f2 <USBD_CtlSendData>
      break;
 800d31c:	e004      	b.n	800d328 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d31e:	6839      	ldr	r1, [r7, #0]
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f000 f875 	bl	800d410 <USBD_CtlError>
      break;
 800d326:	bf00      	nop
  }
}
 800d328:	bf00      	nop
 800d32a:	3708      	adds	r7, #8
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}

0800d330 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b082      	sub	sp, #8
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
 800d338:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	885b      	ldrh	r3, [r3, #2]
 800d33e:	2b01      	cmp	r3, #1
 800d340:	d106      	bne.n	800d350 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	2201      	movs	r2, #1
 800d346:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d34a:	6878      	ldr	r0, [r7, #4]
 800d34c:	f000 f92b 	bl	800d5a6 <USBD_CtlSendStatus>
  }
}
 800d350:	bf00      	nop
 800d352:	3708      	adds	r7, #8
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}

0800d358 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b082      	sub	sp, #8
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d368:	b2db      	uxtb	r3, r3
 800d36a:	3b01      	subs	r3, #1
 800d36c:	2b02      	cmp	r3, #2
 800d36e:	d80b      	bhi.n	800d388 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	885b      	ldrh	r3, [r3, #2]
 800d374:	2b01      	cmp	r3, #1
 800d376:	d10c      	bne.n	800d392 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2200      	movs	r2, #0
 800d37c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d380:	6878      	ldr	r0, [r7, #4]
 800d382:	f000 f910 	bl	800d5a6 <USBD_CtlSendStatus>
      }
      break;
 800d386:	e004      	b.n	800d392 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d388:	6839      	ldr	r1, [r7, #0]
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f000 f840 	bl	800d410 <USBD_CtlError>
      break;
 800d390:	e000      	b.n	800d394 <USBD_ClrFeature+0x3c>
      break;
 800d392:	bf00      	nop
  }
}
 800d394:	bf00      	nop
 800d396:	3708      	adds	r7, #8
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}

0800d39c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b084      	sub	sp, #16
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
 800d3a4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	781a      	ldrb	r2, [r3, #0]
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	3301      	adds	r3, #1
 800d3b6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	781a      	ldrb	r2, [r3, #0]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	3301      	adds	r3, #1
 800d3c4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d3c6:	68f8      	ldr	r0, [r7, #12]
 800d3c8:	f7ff fabb 	bl	800c942 <SWAPBYTE>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	461a      	mov	r2, r3
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	3301      	adds	r3, #1
 800d3d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	3301      	adds	r3, #1
 800d3de:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d3e0:	68f8      	ldr	r0, [r7, #12]
 800d3e2:	f7ff faae 	bl	800c942 <SWAPBYTE>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	461a      	mov	r2, r3
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	3301      	adds	r3, #1
 800d3f2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	3301      	adds	r3, #1
 800d3f8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d3fa:	68f8      	ldr	r0, [r7, #12]
 800d3fc:	f7ff faa1 	bl	800c942 <SWAPBYTE>
 800d400:	4603      	mov	r3, r0
 800d402:	461a      	mov	r2, r3
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	80da      	strh	r2, [r3, #6]
}
 800d408:	bf00      	nop
 800d40a:	3710      	adds	r7, #16
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}

0800d410 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b082      	sub	sp, #8
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
 800d418:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d41a:	2180      	movs	r1, #128	; 0x80
 800d41c:	6878      	ldr	r0, [r7, #4]
 800d41e:	f003 fe45 	bl	80110ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d422:	2100      	movs	r1, #0
 800d424:	6878      	ldr	r0, [r7, #4]
 800d426:	f003 fe41 	bl	80110ac <USBD_LL_StallEP>
}
 800d42a:	bf00      	nop
 800d42c:	3708      	adds	r7, #8
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}

0800d432 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d432:	b580      	push	{r7, lr}
 800d434:	b086      	sub	sp, #24
 800d436:	af00      	add	r7, sp, #0
 800d438:	60f8      	str	r0, [r7, #12]
 800d43a:	60b9      	str	r1, [r7, #8]
 800d43c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d43e:	2300      	movs	r3, #0
 800d440:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d036      	beq.n	800d4b6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d44c:	6938      	ldr	r0, [r7, #16]
 800d44e:	f000 f836 	bl	800d4be <USBD_GetLen>
 800d452:	4603      	mov	r3, r0
 800d454:	3301      	adds	r3, #1
 800d456:	b29b      	uxth	r3, r3
 800d458:	005b      	lsls	r3, r3, #1
 800d45a:	b29a      	uxth	r2, r3
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d460:	7dfb      	ldrb	r3, [r7, #23]
 800d462:	68ba      	ldr	r2, [r7, #8]
 800d464:	4413      	add	r3, r2
 800d466:	687a      	ldr	r2, [r7, #4]
 800d468:	7812      	ldrb	r2, [r2, #0]
 800d46a:	701a      	strb	r2, [r3, #0]
  idx++;
 800d46c:	7dfb      	ldrb	r3, [r7, #23]
 800d46e:	3301      	adds	r3, #1
 800d470:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d472:	7dfb      	ldrb	r3, [r7, #23]
 800d474:	68ba      	ldr	r2, [r7, #8]
 800d476:	4413      	add	r3, r2
 800d478:	2203      	movs	r2, #3
 800d47a:	701a      	strb	r2, [r3, #0]
  idx++;
 800d47c:	7dfb      	ldrb	r3, [r7, #23]
 800d47e:	3301      	adds	r3, #1
 800d480:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d482:	e013      	b.n	800d4ac <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d484:	7dfb      	ldrb	r3, [r7, #23]
 800d486:	68ba      	ldr	r2, [r7, #8]
 800d488:	4413      	add	r3, r2
 800d48a:	693a      	ldr	r2, [r7, #16]
 800d48c:	7812      	ldrb	r2, [r2, #0]
 800d48e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	3301      	adds	r3, #1
 800d494:	613b      	str	r3, [r7, #16]
    idx++;
 800d496:	7dfb      	ldrb	r3, [r7, #23]
 800d498:	3301      	adds	r3, #1
 800d49a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d49c:	7dfb      	ldrb	r3, [r7, #23]
 800d49e:	68ba      	ldr	r2, [r7, #8]
 800d4a0:	4413      	add	r3, r2
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	701a      	strb	r2, [r3, #0]
    idx++;
 800d4a6:	7dfb      	ldrb	r3, [r7, #23]
 800d4a8:	3301      	adds	r3, #1
 800d4aa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d4ac:	693b      	ldr	r3, [r7, #16]
 800d4ae:	781b      	ldrb	r3, [r3, #0]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d1e7      	bne.n	800d484 <USBD_GetString+0x52>
 800d4b4:	e000      	b.n	800d4b8 <USBD_GetString+0x86>
    return;
 800d4b6:	bf00      	nop
  }
}
 800d4b8:	3718      	adds	r7, #24
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}

0800d4be <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d4be:	b480      	push	{r7}
 800d4c0:	b085      	sub	sp, #20
 800d4c2:	af00      	add	r7, sp, #0
 800d4c4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d4ce:	e005      	b.n	800d4dc <USBD_GetLen+0x1e>
  {
    len++;
 800d4d0:	7bfb      	ldrb	r3, [r7, #15]
 800d4d2:	3301      	adds	r3, #1
 800d4d4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	3301      	adds	r3, #1
 800d4da:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	781b      	ldrb	r3, [r3, #0]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d1f5      	bne.n	800d4d0 <USBD_GetLen+0x12>
  }

  return len;
 800d4e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	3714      	adds	r7, #20
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f0:	4770      	bx	lr

0800d4f2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d4f2:	b580      	push	{r7, lr}
 800d4f4:	b084      	sub	sp, #16
 800d4f6:	af00      	add	r7, sp, #0
 800d4f8:	60f8      	str	r0, [r7, #12]
 800d4fa:	60b9      	str	r1, [r7, #8]
 800d4fc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	2202      	movs	r2, #2
 800d502:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	687a      	ldr	r2, [r7, #4]
 800d50a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	687a      	ldr	r2, [r7, #4]
 800d510:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	68ba      	ldr	r2, [r7, #8]
 800d516:	2100      	movs	r1, #0
 800d518:	68f8      	ldr	r0, [r7, #12]
 800d51a:	f003 fe50 	bl	80111be <USBD_LL_Transmit>

  return USBD_OK;
 800d51e:	2300      	movs	r3, #0
}
 800d520:	4618      	mov	r0, r3
 800d522:	3710      	adds	r7, #16
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}

0800d528 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b084      	sub	sp, #16
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	60f8      	str	r0, [r7, #12]
 800d530:	60b9      	str	r1, [r7, #8]
 800d532:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	68ba      	ldr	r2, [r7, #8]
 800d538:	2100      	movs	r1, #0
 800d53a:	68f8      	ldr	r0, [r7, #12]
 800d53c:	f003 fe3f 	bl	80111be <USBD_LL_Transmit>

  return USBD_OK;
 800d540:	2300      	movs	r3, #0
}
 800d542:	4618      	mov	r0, r3
 800d544:	3710      	adds	r7, #16
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}

0800d54a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d54a:	b580      	push	{r7, lr}
 800d54c:	b084      	sub	sp, #16
 800d54e:	af00      	add	r7, sp, #0
 800d550:	60f8      	str	r0, [r7, #12]
 800d552:	60b9      	str	r1, [r7, #8]
 800d554:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	2203      	movs	r2, #3
 800d55a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	687a      	ldr	r2, [r7, #4]
 800d562:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	687a      	ldr	r2, [r7, #4]
 800d56a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	68ba      	ldr	r2, [r7, #8]
 800d572:	2100      	movs	r1, #0
 800d574:	68f8      	ldr	r0, [r7, #12]
 800d576:	f003 fe43 	bl	8011200 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d57a:	2300      	movs	r3, #0
}
 800d57c:	4618      	mov	r0, r3
 800d57e:	3710      	adds	r7, #16
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}

0800d584 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b084      	sub	sp, #16
 800d588:	af00      	add	r7, sp, #0
 800d58a:	60f8      	str	r0, [r7, #12]
 800d58c:	60b9      	str	r1, [r7, #8]
 800d58e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	68ba      	ldr	r2, [r7, #8]
 800d594:	2100      	movs	r1, #0
 800d596:	68f8      	ldr	r0, [r7, #12]
 800d598:	f003 fe32 	bl	8011200 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d59c:	2300      	movs	r3, #0
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3710      	adds	r7, #16
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}

0800d5a6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d5a6:	b580      	push	{r7, lr}
 800d5a8:	b082      	sub	sp, #8
 800d5aa:	af00      	add	r7, sp, #0
 800d5ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2204      	movs	r2, #4
 800d5b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	2100      	movs	r1, #0
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f003 fdfe 	bl	80111be <USBD_LL_Transmit>

  return USBD_OK;
 800d5c2:	2300      	movs	r3, #0
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3708      	adds	r7, #8
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}

0800d5cc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b082      	sub	sp, #8
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2205      	movs	r2, #5
 800d5d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d5dc:	2300      	movs	r3, #0
 800d5de:	2200      	movs	r2, #0
 800d5e0:	2100      	movs	r1, #0
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f003 fe0c 	bl	8011200 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d5e8:	2300      	movs	r3, #0
}
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	3708      	adds	r7, #8
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}
	...

0800d5f4 <__NVIC_SetPriority>:
{
 800d5f4:	b480      	push	{r7}
 800d5f6:	b083      	sub	sp, #12
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	6039      	str	r1, [r7, #0]
 800d5fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d604:	2b00      	cmp	r3, #0
 800d606:	db0a      	blt.n	800d61e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	b2da      	uxtb	r2, r3
 800d60c:	490c      	ldr	r1, [pc, #48]	; (800d640 <__NVIC_SetPriority+0x4c>)
 800d60e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d612:	0112      	lsls	r2, r2, #4
 800d614:	b2d2      	uxtb	r2, r2
 800d616:	440b      	add	r3, r1
 800d618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d61c:	e00a      	b.n	800d634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	b2da      	uxtb	r2, r3
 800d622:	4908      	ldr	r1, [pc, #32]	; (800d644 <__NVIC_SetPriority+0x50>)
 800d624:	79fb      	ldrb	r3, [r7, #7]
 800d626:	f003 030f 	and.w	r3, r3, #15
 800d62a:	3b04      	subs	r3, #4
 800d62c:	0112      	lsls	r2, r2, #4
 800d62e:	b2d2      	uxtb	r2, r2
 800d630:	440b      	add	r3, r1
 800d632:	761a      	strb	r2, [r3, #24]
}
 800d634:	bf00      	nop
 800d636:	370c      	adds	r7, #12
 800d638:	46bd      	mov	sp, r7
 800d63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63e:	4770      	bx	lr
 800d640:	e000e100 	.word	0xe000e100
 800d644:	e000ed00 	.word	0xe000ed00

0800d648 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d648:	b580      	push	{r7, lr}
 800d64a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d64c:	4b05      	ldr	r3, [pc, #20]	; (800d664 <SysTick_Handler+0x1c>)
 800d64e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d650:	f001 ffea 	bl	800f628 <xTaskGetSchedulerState>
 800d654:	4603      	mov	r3, r0
 800d656:	2b01      	cmp	r3, #1
 800d658:	d001      	beq.n	800d65e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d65a:	f002 fecd 	bl	80103f8 <xPortSysTickHandler>
  }
}
 800d65e:	bf00      	nop
 800d660:	bd80      	pop	{r7, pc}
 800d662:	bf00      	nop
 800d664:	e000e010 	.word	0xe000e010

0800d668 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d668:	b580      	push	{r7, lr}
 800d66a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d66c:	2100      	movs	r1, #0
 800d66e:	f06f 0004 	mvn.w	r0, #4
 800d672:	f7ff ffbf 	bl	800d5f4 <__NVIC_SetPriority>
#endif
}
 800d676:	bf00      	nop
 800d678:	bd80      	pop	{r7, pc}
	...

0800d67c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d67c:	b480      	push	{r7}
 800d67e:	b083      	sub	sp, #12
 800d680:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d682:	f3ef 8305 	mrs	r3, IPSR
 800d686:	603b      	str	r3, [r7, #0]
  return(result);
 800d688:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d003      	beq.n	800d696 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d68e:	f06f 0305 	mvn.w	r3, #5
 800d692:	607b      	str	r3, [r7, #4]
 800d694:	e00c      	b.n	800d6b0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d696:	4b0a      	ldr	r3, [pc, #40]	; (800d6c0 <osKernelInitialize+0x44>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d105      	bne.n	800d6aa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d69e:	4b08      	ldr	r3, [pc, #32]	; (800d6c0 <osKernelInitialize+0x44>)
 800d6a0:	2201      	movs	r2, #1
 800d6a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	607b      	str	r3, [r7, #4]
 800d6a8:	e002      	b.n	800d6b0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d6aa:	f04f 33ff 	mov.w	r3, #4294967295
 800d6ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d6b0:	687b      	ldr	r3, [r7, #4]
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	370c      	adds	r7, #12
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6bc:	4770      	bx	lr
 800d6be:	bf00      	nop
 800d6c0:	200005ec 	.word	0x200005ec

0800d6c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b082      	sub	sp, #8
 800d6c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d6ca:	f3ef 8305 	mrs	r3, IPSR
 800d6ce:	603b      	str	r3, [r7, #0]
  return(result);
 800d6d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d003      	beq.n	800d6de <osKernelStart+0x1a>
    stat = osErrorISR;
 800d6d6:	f06f 0305 	mvn.w	r3, #5
 800d6da:	607b      	str	r3, [r7, #4]
 800d6dc:	e010      	b.n	800d700 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d6de:	4b0b      	ldr	r3, [pc, #44]	; (800d70c <osKernelStart+0x48>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	2b01      	cmp	r3, #1
 800d6e4:	d109      	bne.n	800d6fa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d6e6:	f7ff ffbf 	bl	800d668 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d6ea:	4b08      	ldr	r3, [pc, #32]	; (800d70c <osKernelStart+0x48>)
 800d6ec:	2202      	movs	r2, #2
 800d6ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d6f0:	f001 fb2e 	bl	800ed50 <vTaskStartScheduler>
      stat = osOK;
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	607b      	str	r3, [r7, #4]
 800d6f8:	e002      	b.n	800d700 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d6fa:	f04f 33ff 	mov.w	r3, #4294967295
 800d6fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d700:	687b      	ldr	r3, [r7, #4]
}
 800d702:	4618      	mov	r0, r3
 800d704:	3708      	adds	r7, #8
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}
 800d70a:	bf00      	nop
 800d70c:	200005ec 	.word	0x200005ec

0800d710 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d710:	b580      	push	{r7, lr}
 800d712:	b08e      	sub	sp, #56	; 0x38
 800d714:	af04      	add	r7, sp, #16
 800d716:	60f8      	str	r0, [r7, #12]
 800d718:	60b9      	str	r1, [r7, #8]
 800d71a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d71c:	2300      	movs	r3, #0
 800d71e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d720:	f3ef 8305 	mrs	r3, IPSR
 800d724:	617b      	str	r3, [r7, #20]
  return(result);
 800d726:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d17e      	bne.n	800d82a <osThreadNew+0x11a>
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d07b      	beq.n	800d82a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d732:	2380      	movs	r3, #128	; 0x80
 800d734:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d736:	2318      	movs	r3, #24
 800d738:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d73a:	2300      	movs	r3, #0
 800d73c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d73e:	f04f 33ff 	mov.w	r3, #4294967295
 800d742:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d045      	beq.n	800d7d6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d002      	beq.n	800d758 <osThreadNew+0x48>
        name = attr->name;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	699b      	ldr	r3, [r3, #24]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d002      	beq.n	800d766 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	699b      	ldr	r3, [r3, #24]
 800d764:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d766:	69fb      	ldr	r3, [r7, #28]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d008      	beq.n	800d77e <osThreadNew+0x6e>
 800d76c:	69fb      	ldr	r3, [r7, #28]
 800d76e:	2b38      	cmp	r3, #56	; 0x38
 800d770:	d805      	bhi.n	800d77e <osThreadNew+0x6e>
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	685b      	ldr	r3, [r3, #4]
 800d776:	f003 0301 	and.w	r3, r3, #1
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d001      	beq.n	800d782 <osThreadNew+0x72>
        return (NULL);
 800d77e:	2300      	movs	r3, #0
 800d780:	e054      	b.n	800d82c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	695b      	ldr	r3, [r3, #20]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d003      	beq.n	800d792 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	695b      	ldr	r3, [r3, #20]
 800d78e:	089b      	lsrs	r3, r3, #2
 800d790:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	689b      	ldr	r3, [r3, #8]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d00e      	beq.n	800d7b8 <osThreadNew+0xa8>
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	68db      	ldr	r3, [r3, #12]
 800d79e:	2bbb      	cmp	r3, #187	; 0xbb
 800d7a0:	d90a      	bls.n	800d7b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d006      	beq.n	800d7b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	695b      	ldr	r3, [r3, #20]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d002      	beq.n	800d7b8 <osThreadNew+0xa8>
        mem = 1;
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	61bb      	str	r3, [r7, #24]
 800d7b6:	e010      	b.n	800d7da <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	689b      	ldr	r3, [r3, #8]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d10c      	bne.n	800d7da <osThreadNew+0xca>
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	68db      	ldr	r3, [r3, #12]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d108      	bne.n	800d7da <osThreadNew+0xca>
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	691b      	ldr	r3, [r3, #16]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d104      	bne.n	800d7da <osThreadNew+0xca>
          mem = 0;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	61bb      	str	r3, [r7, #24]
 800d7d4:	e001      	b.n	800d7da <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d7da:	69bb      	ldr	r3, [r7, #24]
 800d7dc:	2b01      	cmp	r3, #1
 800d7de:	d110      	bne.n	800d802 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d7e4:	687a      	ldr	r2, [r7, #4]
 800d7e6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d7e8:	9202      	str	r2, [sp, #8]
 800d7ea:	9301      	str	r3, [sp, #4]
 800d7ec:	69fb      	ldr	r3, [r7, #28]
 800d7ee:	9300      	str	r3, [sp, #0]
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	6a3a      	ldr	r2, [r7, #32]
 800d7f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d7f6:	68f8      	ldr	r0, [r7, #12]
 800d7f8:	f001 f84c 	bl	800e894 <xTaskCreateStatic>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	613b      	str	r3, [r7, #16]
 800d800:	e013      	b.n	800d82a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d802:	69bb      	ldr	r3, [r7, #24]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d110      	bne.n	800d82a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d808:	6a3b      	ldr	r3, [r7, #32]
 800d80a:	b29a      	uxth	r2, r3
 800d80c:	f107 0310 	add.w	r3, r7, #16
 800d810:	9301      	str	r3, [sp, #4]
 800d812:	69fb      	ldr	r3, [r7, #28]
 800d814:	9300      	str	r3, [sp, #0]
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d81a:	68f8      	ldr	r0, [r7, #12]
 800d81c:	f001 f897 	bl	800e94e <xTaskCreate>
 800d820:	4603      	mov	r3, r0
 800d822:	2b01      	cmp	r3, #1
 800d824:	d001      	beq.n	800d82a <osThreadNew+0x11a>
            hTask = NULL;
 800d826:	2300      	movs	r3, #0
 800d828:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d82a:	693b      	ldr	r3, [r7, #16]
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3728      	adds	r7, #40	; 0x28
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}

0800d834 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 800d834:	b580      	push	{r7, lr}
 800d836:	b082      	sub	sp, #8
 800d838:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 800d83a:	f001 fee5 	bl	800f608 <xTaskGetCurrentTaskHandle>
 800d83e:	6078      	str	r0, [r7, #4]

  return (id);
 800d840:	687b      	ldr	r3, [r7, #4]
}
 800d842:	4618      	mov	r0, r3
 800d844:	3708      	adds	r7, #8
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}

0800d84a <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 800d84a:	b580      	push	{r7, lr}
 800d84c:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800d84e:	2000      	movs	r0, #0
 800d850:	f001 f9d8 	bl	800ec04 <vTaskDelete>
#endif
  for (;;);
 800d854:	e7fe      	b.n	800d854 <osThreadExit+0xa>

0800d856 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d856:	b580      	push	{r7, lr}
 800d858:	b084      	sub	sp, #16
 800d85a:	af00      	add	r7, sp, #0
 800d85c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d85e:	f3ef 8305 	mrs	r3, IPSR
 800d862:	60bb      	str	r3, [r7, #8]
  return(result);
 800d864:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d866:	2b00      	cmp	r3, #0
 800d868:	d003      	beq.n	800d872 <osDelay+0x1c>
    stat = osErrorISR;
 800d86a:	f06f 0305 	mvn.w	r3, #5
 800d86e:	60fb      	str	r3, [r7, #12]
 800d870:	e007      	b.n	800d882 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d872:	2300      	movs	r3, #0
 800d874:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d002      	beq.n	800d882 <osDelay+0x2c>
      vTaskDelay(ticks);
 800d87c:	6878      	ldr	r0, [r7, #4]
 800d87e:	f001 fa33 	bl	800ece8 <vTaskDelay>
    }
  }

  return (stat);
 800d882:	68fb      	ldr	r3, [r7, #12]
}
 800d884:	4618      	mov	r0, r3
 800d886:	3710      	adds	r7, #16
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b088      	sub	sp, #32
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800d894:	2300      	movs	r3, #0
 800d896:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d898:	f3ef 8305 	mrs	r3, IPSR
 800d89c:	60bb      	str	r3, [r7, #8]
  return(result);
 800d89e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d174      	bne.n	800d98e <osMutexNew+0x102>
    if (attr != NULL) {
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d003      	beq.n	800d8b2 <osMutexNew+0x26>
      type = attr->attr_bits;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	685b      	ldr	r3, [r3, #4]
 800d8ae:	61bb      	str	r3, [r7, #24]
 800d8b0:	e001      	b.n	800d8b6 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800d8b6:	69bb      	ldr	r3, [r7, #24]
 800d8b8:	f003 0301 	and.w	r3, r3, #1
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d002      	beq.n	800d8c6 <osMutexNew+0x3a>
      rmtx = 1U;
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	617b      	str	r3, [r7, #20]
 800d8c4:	e001      	b.n	800d8ca <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800d8ca:	69bb      	ldr	r3, [r7, #24]
 800d8cc:	f003 0308 	and.w	r3, r3, #8
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d15c      	bne.n	800d98e <osMutexNew+0x102>
      mem = -1;
 800d8d4:	f04f 33ff 	mov.w	r3, #4294967295
 800d8d8:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d015      	beq.n	800d90c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	689b      	ldr	r3, [r3, #8]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d006      	beq.n	800d8f6 <osMutexNew+0x6a>
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	68db      	ldr	r3, [r3, #12]
 800d8ec:	2b4f      	cmp	r3, #79	; 0x4f
 800d8ee:	d902      	bls.n	800d8f6 <osMutexNew+0x6a>
          mem = 1;
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	613b      	str	r3, [r7, #16]
 800d8f4:	e00c      	b.n	800d910 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	689b      	ldr	r3, [r3, #8]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d108      	bne.n	800d910 <osMutexNew+0x84>
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	68db      	ldr	r3, [r3, #12]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d104      	bne.n	800d910 <osMutexNew+0x84>
            mem = 0;
 800d906:	2300      	movs	r3, #0
 800d908:	613b      	str	r3, [r7, #16]
 800d90a:	e001      	b.n	800d910 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800d90c:	2300      	movs	r3, #0
 800d90e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800d910:	693b      	ldr	r3, [r7, #16]
 800d912:	2b01      	cmp	r3, #1
 800d914:	d112      	bne.n	800d93c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d007      	beq.n	800d92c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	689b      	ldr	r3, [r3, #8]
 800d920:	4619      	mov	r1, r3
 800d922:	2004      	movs	r0, #4
 800d924:	f000 fa8f 	bl	800de46 <xQueueCreateMutexStatic>
 800d928:	61f8      	str	r0, [r7, #28]
 800d92a:	e016      	b.n	800d95a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	689b      	ldr	r3, [r3, #8]
 800d930:	4619      	mov	r1, r3
 800d932:	2001      	movs	r0, #1
 800d934:	f000 fa87 	bl	800de46 <xQueueCreateMutexStatic>
 800d938:	61f8      	str	r0, [r7, #28]
 800d93a:	e00e      	b.n	800d95a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800d93c:	693b      	ldr	r3, [r7, #16]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d10b      	bne.n	800d95a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d004      	beq.n	800d952 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800d948:	2004      	movs	r0, #4
 800d94a:	f000 fa64 	bl	800de16 <xQueueCreateMutex>
 800d94e:	61f8      	str	r0, [r7, #28]
 800d950:	e003      	b.n	800d95a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800d952:	2001      	movs	r0, #1
 800d954:	f000 fa5f 	bl	800de16 <xQueueCreateMutex>
 800d958:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800d95a:	69fb      	ldr	r3, [r7, #28]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d00c      	beq.n	800d97a <osMutexNew+0xee>
        if (attr != NULL) {
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d003      	beq.n	800d96e <osMutexNew+0xe2>
          name = attr->name;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	60fb      	str	r3, [r7, #12]
 800d96c:	e001      	b.n	800d972 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800d96e:	2300      	movs	r3, #0
 800d970:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800d972:	68f9      	ldr	r1, [r7, #12]
 800d974:	69f8      	ldr	r0, [r7, #28]
 800d976:	f000 ff2f 	bl	800e7d8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800d97a:	69fb      	ldr	r3, [r7, #28]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d006      	beq.n	800d98e <osMutexNew+0x102>
 800d980:	697b      	ldr	r3, [r7, #20]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d003      	beq.n	800d98e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800d986:	69fb      	ldr	r3, [r7, #28]
 800d988:	f043 0301 	orr.w	r3, r3, #1
 800d98c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800d98e:	69fb      	ldr	r3, [r7, #28]
}
 800d990:	4618      	mov	r0, r3
 800d992:	3720      	adds	r7, #32
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}

0800d998 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d998:	b480      	push	{r7}
 800d99a:	b085      	sub	sp, #20
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	60f8      	str	r0, [r7, #12]
 800d9a0:	60b9      	str	r1, [r7, #8]
 800d9a2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	4a07      	ldr	r2, [pc, #28]	; (800d9c4 <vApplicationGetIdleTaskMemory+0x2c>)
 800d9a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	4a06      	ldr	r2, [pc, #24]	; (800d9c8 <vApplicationGetIdleTaskMemory+0x30>)
 800d9ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2280      	movs	r2, #128	; 0x80
 800d9b4:	601a      	str	r2, [r3, #0]
}
 800d9b6:	bf00      	nop
 800d9b8:	3714      	adds	r7, #20
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c0:	4770      	bx	lr
 800d9c2:	bf00      	nop
 800d9c4:	200005f0 	.word	0x200005f0
 800d9c8:	200006ac 	.word	0x200006ac

0800d9cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d9cc:	b480      	push	{r7}
 800d9ce:	b085      	sub	sp, #20
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	60f8      	str	r0, [r7, #12]
 800d9d4:	60b9      	str	r1, [r7, #8]
 800d9d6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	4a07      	ldr	r2, [pc, #28]	; (800d9f8 <vApplicationGetTimerTaskMemory+0x2c>)
 800d9dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	4a06      	ldr	r2, [pc, #24]	; (800d9fc <vApplicationGetTimerTaskMemory+0x30>)
 800d9e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d9ea:	601a      	str	r2, [r3, #0]
}
 800d9ec:	bf00      	nop
 800d9ee:	3714      	adds	r7, #20
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f6:	4770      	bx	lr
 800d9f8:	200008ac 	.word	0x200008ac
 800d9fc:	20000968 	.word	0x20000968

0800da00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800da00:	b480      	push	{r7}
 800da02:	b083      	sub	sp, #12
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	f103 0208 	add.w	r2, r3, #8
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	f04f 32ff 	mov.w	r2, #4294967295
 800da18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	f103 0208 	add.w	r2, r3, #8
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f103 0208 	add.w	r2, r3, #8
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2200      	movs	r2, #0
 800da32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800da34:	bf00      	nop
 800da36:	370c      	adds	r7, #12
 800da38:	46bd      	mov	sp, r7
 800da3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3e:	4770      	bx	lr

0800da40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800da40:	b480      	push	{r7}
 800da42:	b083      	sub	sp, #12
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2200      	movs	r2, #0
 800da4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800da4e:	bf00      	nop
 800da50:	370c      	adds	r7, #12
 800da52:	46bd      	mov	sp, r7
 800da54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da58:	4770      	bx	lr

0800da5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800da5a:	b480      	push	{r7}
 800da5c:	b085      	sub	sp, #20
 800da5e:	af00      	add	r7, sp, #0
 800da60:	6078      	str	r0, [r7, #4]
 800da62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	685b      	ldr	r3, [r3, #4]
 800da68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	68fa      	ldr	r2, [r7, #12]
 800da6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	689a      	ldr	r2, [r3, #8]
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	689b      	ldr	r3, [r3, #8]
 800da7c:	683a      	ldr	r2, [r7, #0]
 800da7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	683a      	ldr	r2, [r7, #0]
 800da84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	687a      	ldr	r2, [r7, #4]
 800da8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	1c5a      	adds	r2, r3, #1
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	601a      	str	r2, [r3, #0]
}
 800da96:	bf00      	nop
 800da98:	3714      	adds	r7, #20
 800da9a:	46bd      	mov	sp, r7
 800da9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa0:	4770      	bx	lr

0800daa2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800daa2:	b480      	push	{r7}
 800daa4:	b085      	sub	sp, #20
 800daa6:	af00      	add	r7, sp, #0
 800daa8:	6078      	str	r0, [r7, #4]
 800daaa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dab8:	d103      	bne.n	800dac2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	691b      	ldr	r3, [r3, #16]
 800dabe:	60fb      	str	r3, [r7, #12]
 800dac0:	e00c      	b.n	800dadc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	3308      	adds	r3, #8
 800dac6:	60fb      	str	r3, [r7, #12]
 800dac8:	e002      	b.n	800dad0 <vListInsert+0x2e>
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	685b      	ldr	r3, [r3, #4]
 800dace:	60fb      	str	r3, [r7, #12]
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	685b      	ldr	r3, [r3, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	68ba      	ldr	r2, [r7, #8]
 800dad8:	429a      	cmp	r2, r3
 800dada:	d2f6      	bcs.n	800daca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	685a      	ldr	r2, [r3, #4]
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	685b      	ldr	r3, [r3, #4]
 800dae8:	683a      	ldr	r2, [r7, #0]
 800daea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	68fa      	ldr	r2, [r7, #12]
 800daf0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	683a      	ldr	r2, [r7, #0]
 800daf6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	687a      	ldr	r2, [r7, #4]
 800dafc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	1c5a      	adds	r2, r3, #1
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	601a      	str	r2, [r3, #0]
}
 800db08:	bf00      	nop
 800db0a:	3714      	adds	r7, #20
 800db0c:	46bd      	mov	sp, r7
 800db0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db12:	4770      	bx	lr

0800db14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800db14:	b480      	push	{r7}
 800db16:	b085      	sub	sp, #20
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	691b      	ldr	r3, [r3, #16]
 800db20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	685b      	ldr	r3, [r3, #4]
 800db26:	687a      	ldr	r2, [r7, #4]
 800db28:	6892      	ldr	r2, [r2, #8]
 800db2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	689b      	ldr	r3, [r3, #8]
 800db30:	687a      	ldr	r2, [r7, #4]
 800db32:	6852      	ldr	r2, [r2, #4]
 800db34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	685b      	ldr	r3, [r3, #4]
 800db3a:	687a      	ldr	r2, [r7, #4]
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d103      	bne.n	800db48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	689a      	ldr	r2, [r3, #8]
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2200      	movs	r2, #0
 800db4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	1e5a      	subs	r2, r3, #1
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	681b      	ldr	r3, [r3, #0]
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	3714      	adds	r7, #20
 800db60:	46bd      	mov	sp, r7
 800db62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db66:	4770      	bx	lr

0800db68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b084      	sub	sp, #16
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
 800db70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d10a      	bne.n	800db92 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800db7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db80:	f383 8811 	msr	BASEPRI, r3
 800db84:	f3bf 8f6f 	isb	sy
 800db88:	f3bf 8f4f 	dsb	sy
 800db8c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800db8e:	bf00      	nop
 800db90:	e7fe      	b.n	800db90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800db92:	f002 fb9f 	bl	80102d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	681a      	ldr	r2, [r3, #0]
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db9e:	68f9      	ldr	r1, [r7, #12]
 800dba0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800dba2:	fb01 f303 	mul.w	r3, r1, r3
 800dba6:	441a      	add	r2, r3
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	2200      	movs	r2, #0
 800dbb0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	681a      	ldr	r2, [r3, #0]
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	681a      	ldr	r2, [r3, #0]
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbc2:	3b01      	subs	r3, #1
 800dbc4:	68f9      	ldr	r1, [r7, #12]
 800dbc6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800dbc8:	fb01 f303 	mul.w	r3, r1, r3
 800dbcc:	441a      	add	r2, r3
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	22ff      	movs	r2, #255	; 0xff
 800dbd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	22ff      	movs	r2, #255	; 0xff
 800dbde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d114      	bne.n	800dc12 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	691b      	ldr	r3, [r3, #16]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d01a      	beq.n	800dc26 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	3310      	adds	r3, #16
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f001 fb45 	bl	800f284 <xTaskRemoveFromEventList>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d012      	beq.n	800dc26 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800dc00:	4b0c      	ldr	r3, [pc, #48]	; (800dc34 <xQueueGenericReset+0xcc>)
 800dc02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc06:	601a      	str	r2, [r3, #0]
 800dc08:	f3bf 8f4f 	dsb	sy
 800dc0c:	f3bf 8f6f 	isb	sy
 800dc10:	e009      	b.n	800dc26 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	3310      	adds	r3, #16
 800dc16:	4618      	mov	r0, r3
 800dc18:	f7ff fef2 	bl	800da00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	3324      	adds	r3, #36	; 0x24
 800dc20:	4618      	mov	r0, r3
 800dc22:	f7ff feed 	bl	800da00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800dc26:	f002 fb85 	bl	8010334 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800dc2a:	2301      	movs	r3, #1
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3710      	adds	r7, #16
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}
 800dc34:	e000ed04 	.word	0xe000ed04

0800dc38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b08e      	sub	sp, #56	; 0x38
 800dc3c:	af02      	add	r7, sp, #8
 800dc3e:	60f8      	str	r0, [r7, #12]
 800dc40:	60b9      	str	r1, [r7, #8]
 800dc42:	607a      	str	r2, [r7, #4]
 800dc44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d10a      	bne.n	800dc62 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800dc4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc50:	f383 8811 	msr	BASEPRI, r3
 800dc54:	f3bf 8f6f 	isb	sy
 800dc58:	f3bf 8f4f 	dsb	sy
 800dc5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800dc5e:	bf00      	nop
 800dc60:	e7fe      	b.n	800dc60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d10a      	bne.n	800dc7e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800dc68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc6c:	f383 8811 	msr	BASEPRI, r3
 800dc70:	f3bf 8f6f 	isb	sy
 800dc74:	f3bf 8f4f 	dsb	sy
 800dc78:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dc7a:	bf00      	nop
 800dc7c:	e7fe      	b.n	800dc7c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d002      	beq.n	800dc8a <xQueueGenericCreateStatic+0x52>
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d001      	beq.n	800dc8e <xQueueGenericCreateStatic+0x56>
 800dc8a:	2301      	movs	r3, #1
 800dc8c:	e000      	b.n	800dc90 <xQueueGenericCreateStatic+0x58>
 800dc8e:	2300      	movs	r3, #0
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d10a      	bne.n	800dcaa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800dc94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc98:	f383 8811 	msr	BASEPRI, r3
 800dc9c:	f3bf 8f6f 	isb	sy
 800dca0:	f3bf 8f4f 	dsb	sy
 800dca4:	623b      	str	r3, [r7, #32]
}
 800dca6:	bf00      	nop
 800dca8:	e7fe      	b.n	800dca8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d102      	bne.n	800dcb6 <xQueueGenericCreateStatic+0x7e>
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d101      	bne.n	800dcba <xQueueGenericCreateStatic+0x82>
 800dcb6:	2301      	movs	r3, #1
 800dcb8:	e000      	b.n	800dcbc <xQueueGenericCreateStatic+0x84>
 800dcba:	2300      	movs	r3, #0
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d10a      	bne.n	800dcd6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800dcc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcc4:	f383 8811 	msr	BASEPRI, r3
 800dcc8:	f3bf 8f6f 	isb	sy
 800dccc:	f3bf 8f4f 	dsb	sy
 800dcd0:	61fb      	str	r3, [r7, #28]
}
 800dcd2:	bf00      	nop
 800dcd4:	e7fe      	b.n	800dcd4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800dcd6:	2350      	movs	r3, #80	; 0x50
 800dcd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800dcda:	697b      	ldr	r3, [r7, #20]
 800dcdc:	2b50      	cmp	r3, #80	; 0x50
 800dcde:	d00a      	beq.n	800dcf6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800dce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dce4:	f383 8811 	msr	BASEPRI, r3
 800dce8:	f3bf 8f6f 	isb	sy
 800dcec:	f3bf 8f4f 	dsb	sy
 800dcf0:	61bb      	str	r3, [r7, #24]
}
 800dcf2:	bf00      	nop
 800dcf4:	e7fe      	b.n	800dcf4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800dcf6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800dcfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d00d      	beq.n	800dd1e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800dd02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd04:	2201      	movs	r2, #1
 800dd06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dd0a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800dd0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd10:	9300      	str	r3, [sp, #0]
 800dd12:	4613      	mov	r3, r2
 800dd14:	687a      	ldr	r2, [r7, #4]
 800dd16:	68b9      	ldr	r1, [r7, #8]
 800dd18:	68f8      	ldr	r0, [r7, #12]
 800dd1a:	f000 f83f 	bl	800dd9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dd1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800dd20:	4618      	mov	r0, r3
 800dd22:	3730      	adds	r7, #48	; 0x30
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}

0800dd28 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b08a      	sub	sp, #40	; 0x28
 800dd2c:	af02      	add	r7, sp, #8
 800dd2e:	60f8      	str	r0, [r7, #12]
 800dd30:	60b9      	str	r1, [r7, #8]
 800dd32:	4613      	mov	r3, r2
 800dd34:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d10a      	bne.n	800dd52 <xQueueGenericCreate+0x2a>
	__asm volatile
 800dd3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd40:	f383 8811 	msr	BASEPRI, r3
 800dd44:	f3bf 8f6f 	isb	sy
 800dd48:	f3bf 8f4f 	dsb	sy
 800dd4c:	613b      	str	r3, [r7, #16]
}
 800dd4e:	bf00      	nop
 800dd50:	e7fe      	b.n	800dd50 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	68ba      	ldr	r2, [r7, #8]
 800dd56:	fb02 f303 	mul.w	r3, r2, r3
 800dd5a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800dd5c:	69fb      	ldr	r3, [r7, #28]
 800dd5e:	3350      	adds	r3, #80	; 0x50
 800dd60:	4618      	mov	r0, r3
 800dd62:	f002 fbd9 	bl	8010518 <pvPortMalloc>
 800dd66:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800dd68:	69bb      	ldr	r3, [r7, #24]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d011      	beq.n	800dd92 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800dd6e:	69bb      	ldr	r3, [r7, #24]
 800dd70:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dd72:	697b      	ldr	r3, [r7, #20]
 800dd74:	3350      	adds	r3, #80	; 0x50
 800dd76:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dd78:	69bb      	ldr	r3, [r7, #24]
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dd80:	79fa      	ldrb	r2, [r7, #7]
 800dd82:	69bb      	ldr	r3, [r7, #24]
 800dd84:	9300      	str	r3, [sp, #0]
 800dd86:	4613      	mov	r3, r2
 800dd88:	697a      	ldr	r2, [r7, #20]
 800dd8a:	68b9      	ldr	r1, [r7, #8]
 800dd8c:	68f8      	ldr	r0, [r7, #12]
 800dd8e:	f000 f805 	bl	800dd9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dd92:	69bb      	ldr	r3, [r7, #24]
	}
 800dd94:	4618      	mov	r0, r3
 800dd96:	3720      	adds	r7, #32
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}

0800dd9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b084      	sub	sp, #16
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	60f8      	str	r0, [r7, #12]
 800dda4:	60b9      	str	r1, [r7, #8]
 800dda6:	607a      	str	r2, [r7, #4]
 800dda8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d103      	bne.n	800ddb8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ddb0:	69bb      	ldr	r3, [r7, #24]
 800ddb2:	69ba      	ldr	r2, [r7, #24]
 800ddb4:	601a      	str	r2, [r3, #0]
 800ddb6:	e002      	b.n	800ddbe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ddb8:	69bb      	ldr	r3, [r7, #24]
 800ddba:	687a      	ldr	r2, [r7, #4]
 800ddbc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ddbe:	69bb      	ldr	r3, [r7, #24]
 800ddc0:	68fa      	ldr	r2, [r7, #12]
 800ddc2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ddc4:	69bb      	ldr	r3, [r7, #24]
 800ddc6:	68ba      	ldr	r2, [r7, #8]
 800ddc8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ddca:	2101      	movs	r1, #1
 800ddcc:	69b8      	ldr	r0, [r7, #24]
 800ddce:	f7ff fecb 	bl	800db68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ddd2:	69bb      	ldr	r3, [r7, #24]
 800ddd4:	78fa      	ldrb	r2, [r7, #3]
 800ddd6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ddda:	bf00      	nop
 800dddc:	3710      	adds	r7, #16
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}

0800dde2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800dde2:	b580      	push	{r7, lr}
 800dde4:	b082      	sub	sp, #8
 800dde6:	af00      	add	r7, sp, #0
 800dde8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d00e      	beq.n	800de0e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2200      	movs	r2, #0
 800de00:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800de02:	2300      	movs	r3, #0
 800de04:	2200      	movs	r2, #0
 800de06:	2100      	movs	r1, #0
 800de08:	6878      	ldr	r0, [r7, #4]
 800de0a:	f000 f837 	bl	800de7c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800de0e:	bf00      	nop
 800de10:	3708      	adds	r7, #8
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}

0800de16 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800de16:	b580      	push	{r7, lr}
 800de18:	b086      	sub	sp, #24
 800de1a:	af00      	add	r7, sp, #0
 800de1c:	4603      	mov	r3, r0
 800de1e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800de20:	2301      	movs	r3, #1
 800de22:	617b      	str	r3, [r7, #20]
 800de24:	2300      	movs	r3, #0
 800de26:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800de28:	79fb      	ldrb	r3, [r7, #7]
 800de2a:	461a      	mov	r2, r3
 800de2c:	6939      	ldr	r1, [r7, #16]
 800de2e:	6978      	ldr	r0, [r7, #20]
 800de30:	f7ff ff7a 	bl	800dd28 <xQueueGenericCreate>
 800de34:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800de36:	68f8      	ldr	r0, [r7, #12]
 800de38:	f7ff ffd3 	bl	800dde2 <prvInitialiseMutex>

		return xNewQueue;
 800de3c:	68fb      	ldr	r3, [r7, #12]
	}
 800de3e:	4618      	mov	r0, r3
 800de40:	3718      	adds	r7, #24
 800de42:	46bd      	mov	sp, r7
 800de44:	bd80      	pop	{r7, pc}

0800de46 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800de46:	b580      	push	{r7, lr}
 800de48:	b088      	sub	sp, #32
 800de4a:	af02      	add	r7, sp, #8
 800de4c:	4603      	mov	r3, r0
 800de4e:	6039      	str	r1, [r7, #0]
 800de50:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800de52:	2301      	movs	r3, #1
 800de54:	617b      	str	r3, [r7, #20]
 800de56:	2300      	movs	r3, #0
 800de58:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800de5a:	79fb      	ldrb	r3, [r7, #7]
 800de5c:	9300      	str	r3, [sp, #0]
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	2200      	movs	r2, #0
 800de62:	6939      	ldr	r1, [r7, #16]
 800de64:	6978      	ldr	r0, [r7, #20]
 800de66:	f7ff fee7 	bl	800dc38 <xQueueGenericCreateStatic>
 800de6a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800de6c:	68f8      	ldr	r0, [r7, #12]
 800de6e:	f7ff ffb8 	bl	800dde2 <prvInitialiseMutex>

		return xNewQueue;
 800de72:	68fb      	ldr	r3, [r7, #12]
	}
 800de74:	4618      	mov	r0, r3
 800de76:	3718      	adds	r7, #24
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}

0800de7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b08e      	sub	sp, #56	; 0x38
 800de80:	af00      	add	r7, sp, #0
 800de82:	60f8      	str	r0, [r7, #12]
 800de84:	60b9      	str	r1, [r7, #8]
 800de86:	607a      	str	r2, [r7, #4]
 800de88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800de8a:	2300      	movs	r3, #0
 800de8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800de92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de94:	2b00      	cmp	r3, #0
 800de96:	d10a      	bne.n	800deae <xQueueGenericSend+0x32>
	__asm volatile
 800de98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de9c:	f383 8811 	msr	BASEPRI, r3
 800dea0:	f3bf 8f6f 	isb	sy
 800dea4:	f3bf 8f4f 	dsb	sy
 800dea8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800deaa:	bf00      	nop
 800deac:	e7fe      	b.n	800deac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d103      	bne.n	800debc <xQueueGenericSend+0x40>
 800deb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d101      	bne.n	800dec0 <xQueueGenericSend+0x44>
 800debc:	2301      	movs	r3, #1
 800debe:	e000      	b.n	800dec2 <xQueueGenericSend+0x46>
 800dec0:	2300      	movs	r3, #0
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d10a      	bne.n	800dedc <xQueueGenericSend+0x60>
	__asm volatile
 800dec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deca:	f383 8811 	msr	BASEPRI, r3
 800dece:	f3bf 8f6f 	isb	sy
 800ded2:	f3bf 8f4f 	dsb	sy
 800ded6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ded8:	bf00      	nop
 800deda:	e7fe      	b.n	800deda <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	2b02      	cmp	r3, #2
 800dee0:	d103      	bne.n	800deea <xQueueGenericSend+0x6e>
 800dee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dee6:	2b01      	cmp	r3, #1
 800dee8:	d101      	bne.n	800deee <xQueueGenericSend+0x72>
 800deea:	2301      	movs	r3, #1
 800deec:	e000      	b.n	800def0 <xQueueGenericSend+0x74>
 800deee:	2300      	movs	r3, #0
 800def0:	2b00      	cmp	r3, #0
 800def2:	d10a      	bne.n	800df0a <xQueueGenericSend+0x8e>
	__asm volatile
 800def4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800def8:	f383 8811 	msr	BASEPRI, r3
 800defc:	f3bf 8f6f 	isb	sy
 800df00:	f3bf 8f4f 	dsb	sy
 800df04:	623b      	str	r3, [r7, #32]
}
 800df06:	bf00      	nop
 800df08:	e7fe      	b.n	800df08 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800df0a:	f001 fb8d 	bl	800f628 <xTaskGetSchedulerState>
 800df0e:	4603      	mov	r3, r0
 800df10:	2b00      	cmp	r3, #0
 800df12:	d102      	bne.n	800df1a <xQueueGenericSend+0x9e>
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d101      	bne.n	800df1e <xQueueGenericSend+0xa2>
 800df1a:	2301      	movs	r3, #1
 800df1c:	e000      	b.n	800df20 <xQueueGenericSend+0xa4>
 800df1e:	2300      	movs	r3, #0
 800df20:	2b00      	cmp	r3, #0
 800df22:	d10a      	bne.n	800df3a <xQueueGenericSend+0xbe>
	__asm volatile
 800df24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df28:	f383 8811 	msr	BASEPRI, r3
 800df2c:	f3bf 8f6f 	isb	sy
 800df30:	f3bf 8f4f 	dsb	sy
 800df34:	61fb      	str	r3, [r7, #28]
}
 800df36:	bf00      	nop
 800df38:	e7fe      	b.n	800df38 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800df3a:	f002 f9cb 	bl	80102d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800df3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df46:	429a      	cmp	r2, r3
 800df48:	d302      	bcc.n	800df50 <xQueueGenericSend+0xd4>
 800df4a:	683b      	ldr	r3, [r7, #0]
 800df4c:	2b02      	cmp	r3, #2
 800df4e:	d129      	bne.n	800dfa4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800df50:	683a      	ldr	r2, [r7, #0]
 800df52:	68b9      	ldr	r1, [r7, #8]
 800df54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df56:	f000 fb2f 	bl	800e5b8 <prvCopyDataToQueue>
 800df5a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df60:	2b00      	cmp	r3, #0
 800df62:	d010      	beq.n	800df86 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df66:	3324      	adds	r3, #36	; 0x24
 800df68:	4618      	mov	r0, r3
 800df6a:	f001 f98b 	bl	800f284 <xTaskRemoveFromEventList>
 800df6e:	4603      	mov	r3, r0
 800df70:	2b00      	cmp	r3, #0
 800df72:	d013      	beq.n	800df9c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800df74:	4b3f      	ldr	r3, [pc, #252]	; (800e074 <xQueueGenericSend+0x1f8>)
 800df76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df7a:	601a      	str	r2, [r3, #0]
 800df7c:	f3bf 8f4f 	dsb	sy
 800df80:	f3bf 8f6f 	isb	sy
 800df84:	e00a      	b.n	800df9c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800df86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d007      	beq.n	800df9c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800df8c:	4b39      	ldr	r3, [pc, #228]	; (800e074 <xQueueGenericSend+0x1f8>)
 800df8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df92:	601a      	str	r2, [r3, #0]
 800df94:	f3bf 8f4f 	dsb	sy
 800df98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800df9c:	f002 f9ca 	bl	8010334 <vPortExitCritical>
				return pdPASS;
 800dfa0:	2301      	movs	r3, #1
 800dfa2:	e063      	b.n	800e06c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d103      	bne.n	800dfb2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dfaa:	f002 f9c3 	bl	8010334 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	e05c      	b.n	800e06c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dfb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d106      	bne.n	800dfc6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dfb8:	f107 0314 	add.w	r3, r7, #20
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	f001 f9c5 	bl	800f34c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dfc6:	f002 f9b5 	bl	8010334 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dfca:	f000 ff31 	bl	800ee30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dfce:	f002 f981 	bl	80102d4 <vPortEnterCritical>
 800dfd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dfd8:	b25b      	sxtb	r3, r3
 800dfda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfde:	d103      	bne.n	800dfe8 <xQueueGenericSend+0x16c>
 800dfe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dfe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dfee:	b25b      	sxtb	r3, r3
 800dff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dff4:	d103      	bne.n	800dffe <xQueueGenericSend+0x182>
 800dff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff8:	2200      	movs	r2, #0
 800dffa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dffe:	f002 f999 	bl	8010334 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e002:	1d3a      	adds	r2, r7, #4
 800e004:	f107 0314 	add.w	r3, r7, #20
 800e008:	4611      	mov	r1, r2
 800e00a:	4618      	mov	r0, r3
 800e00c:	f001 f9b4 	bl	800f378 <xTaskCheckForTimeOut>
 800e010:	4603      	mov	r3, r0
 800e012:	2b00      	cmp	r3, #0
 800e014:	d124      	bne.n	800e060 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e016:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e018:	f000 fbc6 	bl	800e7a8 <prvIsQueueFull>
 800e01c:	4603      	mov	r3, r0
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d018      	beq.n	800e054 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e024:	3310      	adds	r3, #16
 800e026:	687a      	ldr	r2, [r7, #4]
 800e028:	4611      	mov	r1, r2
 800e02a:	4618      	mov	r0, r3
 800e02c:	f001 f8da 	bl	800f1e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e030:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e032:	f000 fb51 	bl	800e6d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e036:	f000 ff09 	bl	800ee4c <xTaskResumeAll>
 800e03a:	4603      	mov	r3, r0
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	f47f af7c 	bne.w	800df3a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e042:	4b0c      	ldr	r3, [pc, #48]	; (800e074 <xQueueGenericSend+0x1f8>)
 800e044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e048:	601a      	str	r2, [r3, #0]
 800e04a:	f3bf 8f4f 	dsb	sy
 800e04e:	f3bf 8f6f 	isb	sy
 800e052:	e772      	b.n	800df3a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e054:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e056:	f000 fb3f 	bl	800e6d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e05a:	f000 fef7 	bl	800ee4c <xTaskResumeAll>
 800e05e:	e76c      	b.n	800df3a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e060:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e062:	f000 fb39 	bl	800e6d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e066:	f000 fef1 	bl	800ee4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e06a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e06c:	4618      	mov	r0, r3
 800e06e:	3738      	adds	r7, #56	; 0x38
 800e070:	46bd      	mov	sp, r7
 800e072:	bd80      	pop	{r7, pc}
 800e074:	e000ed04 	.word	0xe000ed04

0800e078 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b090      	sub	sp, #64	; 0x40
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	60f8      	str	r0, [r7, #12]
 800e080:	60b9      	str	r1, [r7, #8]
 800e082:	607a      	str	r2, [r7, #4]
 800e084:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d10a      	bne.n	800e0a6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e094:	f383 8811 	msr	BASEPRI, r3
 800e098:	f3bf 8f6f 	isb	sy
 800e09c:	f3bf 8f4f 	dsb	sy
 800e0a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e0a2:	bf00      	nop
 800e0a4:	e7fe      	b.n	800e0a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e0a6:	68bb      	ldr	r3, [r7, #8]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d103      	bne.n	800e0b4 <xQueueGenericSendFromISR+0x3c>
 800e0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d101      	bne.n	800e0b8 <xQueueGenericSendFromISR+0x40>
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	e000      	b.n	800e0ba <xQueueGenericSendFromISR+0x42>
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d10a      	bne.n	800e0d4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0c2:	f383 8811 	msr	BASEPRI, r3
 800e0c6:	f3bf 8f6f 	isb	sy
 800e0ca:	f3bf 8f4f 	dsb	sy
 800e0ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e0d0:	bf00      	nop
 800e0d2:	e7fe      	b.n	800e0d2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	2b02      	cmp	r3, #2
 800e0d8:	d103      	bne.n	800e0e2 <xQueueGenericSendFromISR+0x6a>
 800e0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0de:	2b01      	cmp	r3, #1
 800e0e0:	d101      	bne.n	800e0e6 <xQueueGenericSendFromISR+0x6e>
 800e0e2:	2301      	movs	r3, #1
 800e0e4:	e000      	b.n	800e0e8 <xQueueGenericSendFromISR+0x70>
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d10a      	bne.n	800e102 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0f0:	f383 8811 	msr	BASEPRI, r3
 800e0f4:	f3bf 8f6f 	isb	sy
 800e0f8:	f3bf 8f4f 	dsb	sy
 800e0fc:	623b      	str	r3, [r7, #32]
}
 800e0fe:	bf00      	nop
 800e100:	e7fe      	b.n	800e100 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e102:	f002 f9c9 	bl	8010498 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e106:	f3ef 8211 	mrs	r2, BASEPRI
 800e10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e10e:	f383 8811 	msr	BASEPRI, r3
 800e112:	f3bf 8f6f 	isb	sy
 800e116:	f3bf 8f4f 	dsb	sy
 800e11a:	61fa      	str	r2, [r7, #28]
 800e11c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e11e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e120:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e124:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e12a:	429a      	cmp	r2, r3
 800e12c:	d302      	bcc.n	800e134 <xQueueGenericSendFromISR+0xbc>
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	2b02      	cmp	r3, #2
 800e132:	d12f      	bne.n	800e194 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e136:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e13a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e142:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e144:	683a      	ldr	r2, [r7, #0]
 800e146:	68b9      	ldr	r1, [r7, #8]
 800e148:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e14a:	f000 fa35 	bl	800e5b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e14e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e152:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e156:	d112      	bne.n	800e17e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d016      	beq.n	800e18e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e162:	3324      	adds	r3, #36	; 0x24
 800e164:	4618      	mov	r0, r3
 800e166:	f001 f88d 	bl	800f284 <xTaskRemoveFromEventList>
 800e16a:	4603      	mov	r3, r0
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d00e      	beq.n	800e18e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d00b      	beq.n	800e18e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2201      	movs	r2, #1
 800e17a:	601a      	str	r2, [r3, #0]
 800e17c:	e007      	b.n	800e18e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e17e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e182:	3301      	adds	r3, #1
 800e184:	b2db      	uxtb	r3, r3
 800e186:	b25a      	sxtb	r2, r3
 800e188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e18a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e18e:	2301      	movs	r3, #1
 800e190:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e192:	e001      	b.n	800e198 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e194:	2300      	movs	r3, #0
 800e196:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e19a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e19c:	697b      	ldr	r3, [r7, #20]
 800e19e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e1a2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e1a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3740      	adds	r7, #64	; 0x40
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}
	...

0800e1b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b08c      	sub	sp, #48	; 0x30
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	60f8      	str	r0, [r7, #12]
 800e1b8:	60b9      	str	r1, [r7, #8]
 800e1ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e1bc:	2300      	movs	r3, #0
 800e1be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d10a      	bne.n	800e1e0 <xQueueReceive+0x30>
	__asm volatile
 800e1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ce:	f383 8811 	msr	BASEPRI, r3
 800e1d2:	f3bf 8f6f 	isb	sy
 800e1d6:	f3bf 8f4f 	dsb	sy
 800e1da:	623b      	str	r3, [r7, #32]
}
 800e1dc:	bf00      	nop
 800e1de:	e7fe      	b.n	800e1de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e1e0:	68bb      	ldr	r3, [r7, #8]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d103      	bne.n	800e1ee <xQueueReceive+0x3e>
 800e1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d101      	bne.n	800e1f2 <xQueueReceive+0x42>
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	e000      	b.n	800e1f4 <xQueueReceive+0x44>
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d10a      	bne.n	800e20e <xQueueReceive+0x5e>
	__asm volatile
 800e1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1fc:	f383 8811 	msr	BASEPRI, r3
 800e200:	f3bf 8f6f 	isb	sy
 800e204:	f3bf 8f4f 	dsb	sy
 800e208:	61fb      	str	r3, [r7, #28]
}
 800e20a:	bf00      	nop
 800e20c:	e7fe      	b.n	800e20c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e20e:	f001 fa0b 	bl	800f628 <xTaskGetSchedulerState>
 800e212:	4603      	mov	r3, r0
 800e214:	2b00      	cmp	r3, #0
 800e216:	d102      	bne.n	800e21e <xQueueReceive+0x6e>
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d101      	bne.n	800e222 <xQueueReceive+0x72>
 800e21e:	2301      	movs	r3, #1
 800e220:	e000      	b.n	800e224 <xQueueReceive+0x74>
 800e222:	2300      	movs	r3, #0
 800e224:	2b00      	cmp	r3, #0
 800e226:	d10a      	bne.n	800e23e <xQueueReceive+0x8e>
	__asm volatile
 800e228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e22c:	f383 8811 	msr	BASEPRI, r3
 800e230:	f3bf 8f6f 	isb	sy
 800e234:	f3bf 8f4f 	dsb	sy
 800e238:	61bb      	str	r3, [r7, #24]
}
 800e23a:	bf00      	nop
 800e23c:	e7fe      	b.n	800e23c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e23e:	f002 f849 	bl	80102d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e246:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d01f      	beq.n	800e28e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e24e:	68b9      	ldr	r1, [r7, #8]
 800e250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e252:	f000 fa1b 	bl	800e68c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e258:	1e5a      	subs	r2, r3, #1
 800e25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e25c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e260:	691b      	ldr	r3, [r3, #16]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d00f      	beq.n	800e286 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e268:	3310      	adds	r3, #16
 800e26a:	4618      	mov	r0, r3
 800e26c:	f001 f80a 	bl	800f284 <xTaskRemoveFromEventList>
 800e270:	4603      	mov	r3, r0
 800e272:	2b00      	cmp	r3, #0
 800e274:	d007      	beq.n	800e286 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e276:	4b3d      	ldr	r3, [pc, #244]	; (800e36c <xQueueReceive+0x1bc>)
 800e278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e27c:	601a      	str	r2, [r3, #0]
 800e27e:	f3bf 8f4f 	dsb	sy
 800e282:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e286:	f002 f855 	bl	8010334 <vPortExitCritical>
				return pdPASS;
 800e28a:	2301      	movs	r3, #1
 800e28c:	e069      	b.n	800e362 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d103      	bne.n	800e29c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e294:	f002 f84e 	bl	8010334 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e298:	2300      	movs	r3, #0
 800e29a:	e062      	b.n	800e362 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d106      	bne.n	800e2b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e2a2:	f107 0310 	add.w	r3, r7, #16
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f001 f850 	bl	800f34c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e2ac:	2301      	movs	r3, #1
 800e2ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e2b0:	f002 f840 	bl	8010334 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e2b4:	f000 fdbc 	bl	800ee30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e2b8:	f002 f80c 	bl	80102d4 <vPortEnterCritical>
 800e2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e2c2:	b25b      	sxtb	r3, r3
 800e2c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2c8:	d103      	bne.n	800e2d2 <xQueueReceive+0x122>
 800e2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e2d8:	b25b      	sxtb	r3, r3
 800e2da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2de:	d103      	bne.n	800e2e8 <xQueueReceive+0x138>
 800e2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e2e8:	f002 f824 	bl	8010334 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e2ec:	1d3a      	adds	r2, r7, #4
 800e2ee:	f107 0310 	add.w	r3, r7, #16
 800e2f2:	4611      	mov	r1, r2
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f001 f83f 	bl	800f378 <xTaskCheckForTimeOut>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d123      	bne.n	800e348 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e300:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e302:	f000 fa3b 	bl	800e77c <prvIsQueueEmpty>
 800e306:	4603      	mov	r3, r0
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d017      	beq.n	800e33c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e30e:	3324      	adds	r3, #36	; 0x24
 800e310:	687a      	ldr	r2, [r7, #4]
 800e312:	4611      	mov	r1, r2
 800e314:	4618      	mov	r0, r3
 800e316:	f000 ff65 	bl	800f1e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e31a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e31c:	f000 f9dc 	bl	800e6d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e320:	f000 fd94 	bl	800ee4c <xTaskResumeAll>
 800e324:	4603      	mov	r3, r0
 800e326:	2b00      	cmp	r3, #0
 800e328:	d189      	bne.n	800e23e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e32a:	4b10      	ldr	r3, [pc, #64]	; (800e36c <xQueueReceive+0x1bc>)
 800e32c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e330:	601a      	str	r2, [r3, #0]
 800e332:	f3bf 8f4f 	dsb	sy
 800e336:	f3bf 8f6f 	isb	sy
 800e33a:	e780      	b.n	800e23e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e33c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e33e:	f000 f9cb 	bl	800e6d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e342:	f000 fd83 	bl	800ee4c <xTaskResumeAll>
 800e346:	e77a      	b.n	800e23e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e348:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e34a:	f000 f9c5 	bl	800e6d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e34e:	f000 fd7d 	bl	800ee4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e352:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e354:	f000 fa12 	bl	800e77c <prvIsQueueEmpty>
 800e358:	4603      	mov	r3, r0
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	f43f af6f 	beq.w	800e23e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e360:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e362:	4618      	mov	r0, r3
 800e364:	3730      	adds	r7, #48	; 0x30
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}
 800e36a:	bf00      	nop
 800e36c:	e000ed04 	.word	0xe000ed04

0800e370 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b08e      	sub	sp, #56	; 0x38
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
 800e378:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e37a:	2300      	movs	r3, #0
 800e37c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e382:	2300      	movs	r3, #0
 800e384:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d10a      	bne.n	800e3a2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800e38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e390:	f383 8811 	msr	BASEPRI, r3
 800e394:	f3bf 8f6f 	isb	sy
 800e398:	f3bf 8f4f 	dsb	sy
 800e39c:	623b      	str	r3, [r7, #32]
}
 800e39e:	bf00      	nop
 800e3a0:	e7fe      	b.n	800e3a0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d00a      	beq.n	800e3c0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800e3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ae:	f383 8811 	msr	BASEPRI, r3
 800e3b2:	f3bf 8f6f 	isb	sy
 800e3b6:	f3bf 8f4f 	dsb	sy
 800e3ba:	61fb      	str	r3, [r7, #28]
}
 800e3bc:	bf00      	nop
 800e3be:	e7fe      	b.n	800e3be <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e3c0:	f001 f932 	bl	800f628 <xTaskGetSchedulerState>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d102      	bne.n	800e3d0 <xQueueSemaphoreTake+0x60>
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d101      	bne.n	800e3d4 <xQueueSemaphoreTake+0x64>
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	e000      	b.n	800e3d6 <xQueueSemaphoreTake+0x66>
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d10a      	bne.n	800e3f0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800e3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3de:	f383 8811 	msr	BASEPRI, r3
 800e3e2:	f3bf 8f6f 	isb	sy
 800e3e6:	f3bf 8f4f 	dsb	sy
 800e3ea:	61bb      	str	r3, [r7, #24]
}
 800e3ec:	bf00      	nop
 800e3ee:	e7fe      	b.n	800e3ee <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e3f0:	f001 ff70 	bl	80102d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3f8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d024      	beq.n	800e44a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e402:	1e5a      	subs	r2, r3, #1
 800e404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e406:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d104      	bne.n	800e41a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e410:	f001 fa80 	bl	800f914 <pvTaskIncrementMutexHeldCount>
 800e414:	4602      	mov	r2, r0
 800e416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e418:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e41c:	691b      	ldr	r3, [r3, #16]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d00f      	beq.n	800e442 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e424:	3310      	adds	r3, #16
 800e426:	4618      	mov	r0, r3
 800e428:	f000 ff2c 	bl	800f284 <xTaskRemoveFromEventList>
 800e42c:	4603      	mov	r3, r0
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d007      	beq.n	800e442 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e432:	4b54      	ldr	r3, [pc, #336]	; (800e584 <xQueueSemaphoreTake+0x214>)
 800e434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e438:	601a      	str	r2, [r3, #0]
 800e43a:	f3bf 8f4f 	dsb	sy
 800e43e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e442:	f001 ff77 	bl	8010334 <vPortExitCritical>
				return pdPASS;
 800e446:	2301      	movs	r3, #1
 800e448:	e097      	b.n	800e57a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d111      	bne.n	800e474 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e452:	2b00      	cmp	r3, #0
 800e454:	d00a      	beq.n	800e46c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800e456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e45a:	f383 8811 	msr	BASEPRI, r3
 800e45e:	f3bf 8f6f 	isb	sy
 800e462:	f3bf 8f4f 	dsb	sy
 800e466:	617b      	str	r3, [r7, #20]
}
 800e468:	bf00      	nop
 800e46a:	e7fe      	b.n	800e46a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e46c:	f001 ff62 	bl	8010334 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e470:	2300      	movs	r3, #0
 800e472:	e082      	b.n	800e57a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e476:	2b00      	cmp	r3, #0
 800e478:	d106      	bne.n	800e488 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e47a:	f107 030c 	add.w	r3, r7, #12
 800e47e:	4618      	mov	r0, r3
 800e480:	f000 ff64 	bl	800f34c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e484:	2301      	movs	r3, #1
 800e486:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e488:	f001 ff54 	bl	8010334 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e48c:	f000 fcd0 	bl	800ee30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e490:	f001 ff20 	bl	80102d4 <vPortEnterCritical>
 800e494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e496:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e49a:	b25b      	sxtb	r3, r3
 800e49c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4a0:	d103      	bne.n	800e4aa <xQueueSemaphoreTake+0x13a>
 800e4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e4b0:	b25b      	sxtb	r3, r3
 800e4b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4b6:	d103      	bne.n	800e4c0 <xQueueSemaphoreTake+0x150>
 800e4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e4c0:	f001 ff38 	bl	8010334 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e4c4:	463a      	mov	r2, r7
 800e4c6:	f107 030c 	add.w	r3, r7, #12
 800e4ca:	4611      	mov	r1, r2
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f000 ff53 	bl	800f378 <xTaskCheckForTimeOut>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d132      	bne.n	800e53e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e4d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e4da:	f000 f94f 	bl	800e77c <prvIsQueueEmpty>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d026      	beq.n	800e532 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d109      	bne.n	800e500 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800e4ec:	f001 fef2 	bl	80102d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f2:	689b      	ldr	r3, [r3, #8]
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f001 f8b5 	bl	800f664 <xTaskPriorityInherit>
 800e4fa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800e4fc:	f001 ff1a 	bl	8010334 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e502:	3324      	adds	r3, #36	; 0x24
 800e504:	683a      	ldr	r2, [r7, #0]
 800e506:	4611      	mov	r1, r2
 800e508:	4618      	mov	r0, r3
 800e50a:	f000 fe6b 	bl	800f1e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e50e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e510:	f000 f8e2 	bl	800e6d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e514:	f000 fc9a 	bl	800ee4c <xTaskResumeAll>
 800e518:	4603      	mov	r3, r0
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	f47f af68 	bne.w	800e3f0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800e520:	4b18      	ldr	r3, [pc, #96]	; (800e584 <xQueueSemaphoreTake+0x214>)
 800e522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e526:	601a      	str	r2, [r3, #0]
 800e528:	f3bf 8f4f 	dsb	sy
 800e52c:	f3bf 8f6f 	isb	sy
 800e530:	e75e      	b.n	800e3f0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e532:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e534:	f000 f8d0 	bl	800e6d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e538:	f000 fc88 	bl	800ee4c <xTaskResumeAll>
 800e53c:	e758      	b.n	800e3f0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e53e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e540:	f000 f8ca 	bl	800e6d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e544:	f000 fc82 	bl	800ee4c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e548:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e54a:	f000 f917 	bl	800e77c <prvIsQueueEmpty>
 800e54e:	4603      	mov	r3, r0
 800e550:	2b00      	cmp	r3, #0
 800e552:	f43f af4d 	beq.w	800e3f0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d00d      	beq.n	800e578 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800e55c:	f001 feba 	bl	80102d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e560:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e562:	f000 f811 	bl	800e588 <prvGetDisinheritPriorityAfterTimeout>
 800e566:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e56a:	689b      	ldr	r3, [r3, #8]
 800e56c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e56e:	4618      	mov	r0, r3
 800e570:	f001 f94e 	bl	800f810 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e574:	f001 fede 	bl	8010334 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e578:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3738      	adds	r7, #56	; 0x38
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}
 800e582:	bf00      	nop
 800e584:	e000ed04 	.word	0xe000ed04

0800e588 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e588:	b480      	push	{r7}
 800e58a:	b085      	sub	sp, #20
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e594:	2b00      	cmp	r3, #0
 800e596:	d006      	beq.n	800e5a6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800e5a2:	60fb      	str	r3, [r7, #12]
 800e5a4:	e001      	b.n	800e5aa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e5aa:	68fb      	ldr	r3, [r7, #12]
	}
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	3714      	adds	r7, #20
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b6:	4770      	bx	lr

0800e5b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b086      	sub	sp, #24
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	60f8      	str	r0, [r7, #12]
 800e5c0:	60b9      	str	r1, [r7, #8]
 800e5c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d10d      	bne.n	800e5f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d14d      	bne.n	800e67a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	689b      	ldr	r3, [r3, #8]
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	f001 f8a6 	bl	800f734 <xTaskPriorityDisinherit>
 800e5e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	609a      	str	r2, [r3, #8]
 800e5f0:	e043      	b.n	800e67a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d119      	bne.n	800e62c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	6858      	ldr	r0, [r3, #4]
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e600:	461a      	mov	r2, r3
 800e602:	68b9      	ldr	r1, [r7, #8]
 800e604:	f002 ffbc 	bl	8011580 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	685a      	ldr	r2, [r3, #4]
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e610:	441a      	add	r2, r3
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	685a      	ldr	r2, [r3, #4]
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	689b      	ldr	r3, [r3, #8]
 800e61e:	429a      	cmp	r2, r3
 800e620:	d32b      	bcc.n	800e67a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	681a      	ldr	r2, [r3, #0]
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	605a      	str	r2, [r3, #4]
 800e62a:	e026      	b.n	800e67a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	68d8      	ldr	r0, [r3, #12]
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e634:	461a      	mov	r2, r3
 800e636:	68b9      	ldr	r1, [r7, #8]
 800e638:	f002 ffa2 	bl	8011580 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	68da      	ldr	r2, [r3, #12]
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e644:	425b      	negs	r3, r3
 800e646:	441a      	add	r2, r3
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	68da      	ldr	r2, [r3, #12]
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	429a      	cmp	r2, r3
 800e656:	d207      	bcs.n	800e668 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	689a      	ldr	r2, [r3, #8]
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e660:	425b      	negs	r3, r3
 800e662:	441a      	add	r2, r3
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	2b02      	cmp	r3, #2
 800e66c:	d105      	bne.n	800e67a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e66e:	693b      	ldr	r3, [r7, #16]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d002      	beq.n	800e67a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e674:	693b      	ldr	r3, [r7, #16]
 800e676:	3b01      	subs	r3, #1
 800e678:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e67a:	693b      	ldr	r3, [r7, #16]
 800e67c:	1c5a      	adds	r2, r3, #1
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e682:	697b      	ldr	r3, [r7, #20]
}
 800e684:	4618      	mov	r0, r3
 800e686:	3718      	adds	r7, #24
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}

0800e68c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b082      	sub	sp, #8
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
 800e694:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d018      	beq.n	800e6d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	68da      	ldr	r2, [r3, #12]
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6a6:	441a      	add	r2, r3
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	68da      	ldr	r2, [r3, #12]
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	689b      	ldr	r3, [r3, #8]
 800e6b4:	429a      	cmp	r2, r3
 800e6b6:	d303      	bcc.n	800e6c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681a      	ldr	r2, [r3, #0]
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	68d9      	ldr	r1, [r3, #12]
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6c8:	461a      	mov	r2, r3
 800e6ca:	6838      	ldr	r0, [r7, #0]
 800e6cc:	f002 ff58 	bl	8011580 <memcpy>
	}
}
 800e6d0:	bf00      	nop
 800e6d2:	3708      	adds	r7, #8
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd80      	pop	{r7, pc}

0800e6d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b084      	sub	sp, #16
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e6e0:	f001 fdf8 	bl	80102d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e6ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e6ec:	e011      	b.n	800e712 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d012      	beq.n	800e71c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	3324      	adds	r3, #36	; 0x24
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f000 fdc2 	bl	800f284 <xTaskRemoveFromEventList>
 800e700:	4603      	mov	r3, r0
 800e702:	2b00      	cmp	r3, #0
 800e704:	d001      	beq.n	800e70a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e706:	f000 fe99 	bl	800f43c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e70a:	7bfb      	ldrb	r3, [r7, #15]
 800e70c:	3b01      	subs	r3, #1
 800e70e:	b2db      	uxtb	r3, r3
 800e710:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e716:	2b00      	cmp	r3, #0
 800e718:	dce9      	bgt.n	800e6ee <prvUnlockQueue+0x16>
 800e71a:	e000      	b.n	800e71e <prvUnlockQueue+0x46>
					break;
 800e71c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	22ff      	movs	r2, #255	; 0xff
 800e722:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e726:	f001 fe05 	bl	8010334 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e72a:	f001 fdd3 	bl	80102d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e734:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e736:	e011      	b.n	800e75c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	691b      	ldr	r3, [r3, #16]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d012      	beq.n	800e766 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	3310      	adds	r3, #16
 800e744:	4618      	mov	r0, r3
 800e746:	f000 fd9d 	bl	800f284 <xTaskRemoveFromEventList>
 800e74a:	4603      	mov	r3, r0
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d001      	beq.n	800e754 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e750:	f000 fe74 	bl	800f43c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e754:	7bbb      	ldrb	r3, [r7, #14]
 800e756:	3b01      	subs	r3, #1
 800e758:	b2db      	uxtb	r3, r3
 800e75a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e75c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e760:	2b00      	cmp	r3, #0
 800e762:	dce9      	bgt.n	800e738 <prvUnlockQueue+0x60>
 800e764:	e000      	b.n	800e768 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e766:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	22ff      	movs	r2, #255	; 0xff
 800e76c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e770:	f001 fde0 	bl	8010334 <vPortExitCritical>
}
 800e774:	bf00      	nop
 800e776:	3710      	adds	r7, #16
 800e778:	46bd      	mov	sp, r7
 800e77a:	bd80      	pop	{r7, pc}

0800e77c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b084      	sub	sp, #16
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e784:	f001 fda6 	bl	80102d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d102      	bne.n	800e796 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e790:	2301      	movs	r3, #1
 800e792:	60fb      	str	r3, [r7, #12]
 800e794:	e001      	b.n	800e79a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e796:	2300      	movs	r3, #0
 800e798:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e79a:	f001 fdcb 	bl	8010334 <vPortExitCritical>

	return xReturn;
 800e79e:	68fb      	ldr	r3, [r7, #12]
}
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	3710      	adds	r7, #16
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bd80      	pop	{r7, pc}

0800e7a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b084      	sub	sp, #16
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e7b0:	f001 fd90 	bl	80102d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7bc:	429a      	cmp	r2, r3
 800e7be:	d102      	bne.n	800e7c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e7c0:	2301      	movs	r3, #1
 800e7c2:	60fb      	str	r3, [r7, #12]
 800e7c4:	e001      	b.n	800e7ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e7ca:	f001 fdb3 	bl	8010334 <vPortExitCritical>

	return xReturn;
 800e7ce:	68fb      	ldr	r3, [r7, #12]
}
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	3710      	adds	r7, #16
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}

0800e7d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e7d8:	b480      	push	{r7}
 800e7da:	b085      	sub	sp, #20
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
 800e7e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	60fb      	str	r3, [r7, #12]
 800e7e6:	e014      	b.n	800e812 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e7e8:	4a0f      	ldr	r2, [pc, #60]	; (800e828 <vQueueAddToRegistry+0x50>)
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d10b      	bne.n	800e80c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e7f4:	490c      	ldr	r1, [pc, #48]	; (800e828 <vQueueAddToRegistry+0x50>)
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	683a      	ldr	r2, [r7, #0]
 800e7fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e7fe:	4a0a      	ldr	r2, [pc, #40]	; (800e828 <vQueueAddToRegistry+0x50>)
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	00db      	lsls	r3, r3, #3
 800e804:	4413      	add	r3, r2
 800e806:	687a      	ldr	r2, [r7, #4]
 800e808:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e80a:	e006      	b.n	800e81a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	3301      	adds	r3, #1
 800e810:	60fb      	str	r3, [r7, #12]
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	2b07      	cmp	r3, #7
 800e816:	d9e7      	bls.n	800e7e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e818:	bf00      	nop
 800e81a:	bf00      	nop
 800e81c:	3714      	adds	r7, #20
 800e81e:	46bd      	mov	sp, r7
 800e820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e824:	4770      	bx	lr
 800e826:	bf00      	nop
 800e828:	200057b0 	.word	0x200057b0

0800e82c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b086      	sub	sp, #24
 800e830:	af00      	add	r7, sp, #0
 800e832:	60f8      	str	r0, [r7, #12]
 800e834:	60b9      	str	r1, [r7, #8]
 800e836:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e83c:	f001 fd4a 	bl	80102d4 <vPortEnterCritical>
 800e840:	697b      	ldr	r3, [r7, #20]
 800e842:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e846:	b25b      	sxtb	r3, r3
 800e848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e84c:	d103      	bne.n	800e856 <vQueueWaitForMessageRestricted+0x2a>
 800e84e:	697b      	ldr	r3, [r7, #20]
 800e850:	2200      	movs	r2, #0
 800e852:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e856:	697b      	ldr	r3, [r7, #20]
 800e858:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e85c:	b25b      	sxtb	r3, r3
 800e85e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e862:	d103      	bne.n	800e86c <vQueueWaitForMessageRestricted+0x40>
 800e864:	697b      	ldr	r3, [r7, #20]
 800e866:	2200      	movs	r2, #0
 800e868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e86c:	f001 fd62 	bl	8010334 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e870:	697b      	ldr	r3, [r7, #20]
 800e872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e874:	2b00      	cmp	r3, #0
 800e876:	d106      	bne.n	800e886 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e878:	697b      	ldr	r3, [r7, #20]
 800e87a:	3324      	adds	r3, #36	; 0x24
 800e87c:	687a      	ldr	r2, [r7, #4]
 800e87e:	68b9      	ldr	r1, [r7, #8]
 800e880:	4618      	mov	r0, r3
 800e882:	f000 fcd3 	bl	800f22c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e886:	6978      	ldr	r0, [r7, #20]
 800e888:	f7ff ff26 	bl	800e6d8 <prvUnlockQueue>
	}
 800e88c:	bf00      	nop
 800e88e:	3718      	adds	r7, #24
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}

0800e894 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e894:	b580      	push	{r7, lr}
 800e896:	b08e      	sub	sp, #56	; 0x38
 800e898:	af04      	add	r7, sp, #16
 800e89a:	60f8      	str	r0, [r7, #12]
 800e89c:	60b9      	str	r1, [r7, #8]
 800e89e:	607a      	str	r2, [r7, #4]
 800e8a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e8a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d10a      	bne.n	800e8be <xTaskCreateStatic+0x2a>
	__asm volatile
 800e8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ac:	f383 8811 	msr	BASEPRI, r3
 800e8b0:	f3bf 8f6f 	isb	sy
 800e8b4:	f3bf 8f4f 	dsb	sy
 800e8b8:	623b      	str	r3, [r7, #32]
}
 800e8ba:	bf00      	nop
 800e8bc:	e7fe      	b.n	800e8bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d10a      	bne.n	800e8da <xTaskCreateStatic+0x46>
	__asm volatile
 800e8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8c8:	f383 8811 	msr	BASEPRI, r3
 800e8cc:	f3bf 8f6f 	isb	sy
 800e8d0:	f3bf 8f4f 	dsb	sy
 800e8d4:	61fb      	str	r3, [r7, #28]
}
 800e8d6:	bf00      	nop
 800e8d8:	e7fe      	b.n	800e8d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e8da:	23bc      	movs	r3, #188	; 0xbc
 800e8dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e8de:	693b      	ldr	r3, [r7, #16]
 800e8e0:	2bbc      	cmp	r3, #188	; 0xbc
 800e8e2:	d00a      	beq.n	800e8fa <xTaskCreateStatic+0x66>
	__asm volatile
 800e8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8e8:	f383 8811 	msr	BASEPRI, r3
 800e8ec:	f3bf 8f6f 	isb	sy
 800e8f0:	f3bf 8f4f 	dsb	sy
 800e8f4:	61bb      	str	r3, [r7, #24]
}
 800e8f6:	bf00      	nop
 800e8f8:	e7fe      	b.n	800e8f8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e8fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d01e      	beq.n	800e940 <xTaskCreateStatic+0xac>
 800e902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e904:	2b00      	cmp	r3, #0
 800e906:	d01b      	beq.n	800e940 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e90a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e90e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e910:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e914:	2202      	movs	r2, #2
 800e916:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e91a:	2300      	movs	r3, #0
 800e91c:	9303      	str	r3, [sp, #12]
 800e91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e920:	9302      	str	r3, [sp, #8]
 800e922:	f107 0314 	add.w	r3, r7, #20
 800e926:	9301      	str	r3, [sp, #4]
 800e928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e92a:	9300      	str	r3, [sp, #0]
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	687a      	ldr	r2, [r7, #4]
 800e930:	68b9      	ldr	r1, [r7, #8]
 800e932:	68f8      	ldr	r0, [r7, #12]
 800e934:	f000 f850 	bl	800e9d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e938:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e93a:	f000 f8f3 	bl	800eb24 <prvAddNewTaskToReadyList>
 800e93e:	e001      	b.n	800e944 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e940:	2300      	movs	r3, #0
 800e942:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e944:	697b      	ldr	r3, [r7, #20]
	}
 800e946:	4618      	mov	r0, r3
 800e948:	3728      	adds	r7, #40	; 0x28
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}

0800e94e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e94e:	b580      	push	{r7, lr}
 800e950:	b08c      	sub	sp, #48	; 0x30
 800e952:	af04      	add	r7, sp, #16
 800e954:	60f8      	str	r0, [r7, #12]
 800e956:	60b9      	str	r1, [r7, #8]
 800e958:	603b      	str	r3, [r7, #0]
 800e95a:	4613      	mov	r3, r2
 800e95c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e95e:	88fb      	ldrh	r3, [r7, #6]
 800e960:	009b      	lsls	r3, r3, #2
 800e962:	4618      	mov	r0, r3
 800e964:	f001 fdd8 	bl	8010518 <pvPortMalloc>
 800e968:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e96a:	697b      	ldr	r3, [r7, #20]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d00e      	beq.n	800e98e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e970:	20bc      	movs	r0, #188	; 0xbc
 800e972:	f001 fdd1 	bl	8010518 <pvPortMalloc>
 800e976:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e978:	69fb      	ldr	r3, [r7, #28]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d003      	beq.n	800e986 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e97e:	69fb      	ldr	r3, [r7, #28]
 800e980:	697a      	ldr	r2, [r7, #20]
 800e982:	631a      	str	r2, [r3, #48]	; 0x30
 800e984:	e005      	b.n	800e992 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e986:	6978      	ldr	r0, [r7, #20]
 800e988:	f001 fe92 	bl	80106b0 <vPortFree>
 800e98c:	e001      	b.n	800e992 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e98e:	2300      	movs	r3, #0
 800e990:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e992:	69fb      	ldr	r3, [r7, #28]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d017      	beq.n	800e9c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e998:	69fb      	ldr	r3, [r7, #28]
 800e99a:	2200      	movs	r2, #0
 800e99c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e9a0:	88fa      	ldrh	r2, [r7, #6]
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	9303      	str	r3, [sp, #12]
 800e9a6:	69fb      	ldr	r3, [r7, #28]
 800e9a8:	9302      	str	r3, [sp, #8]
 800e9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ac:	9301      	str	r3, [sp, #4]
 800e9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9b0:	9300      	str	r3, [sp, #0]
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	68b9      	ldr	r1, [r7, #8]
 800e9b6:	68f8      	ldr	r0, [r7, #12]
 800e9b8:	f000 f80e 	bl	800e9d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e9bc:	69f8      	ldr	r0, [r7, #28]
 800e9be:	f000 f8b1 	bl	800eb24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	61bb      	str	r3, [r7, #24]
 800e9c6:	e002      	b.n	800e9ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e9c8:	f04f 33ff 	mov.w	r3, #4294967295
 800e9cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e9ce:	69bb      	ldr	r3, [r7, #24]
	}
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	3720      	adds	r7, #32
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}

0800e9d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b088      	sub	sp, #32
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	60f8      	str	r0, [r7, #12]
 800e9e0:	60b9      	str	r1, [r7, #8]
 800e9e2:	607a      	str	r2, [r7, #4]
 800e9e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	009b      	lsls	r3, r3, #2
 800e9ee:	461a      	mov	r2, r3
 800e9f0:	21a5      	movs	r1, #165	; 0xa5
 800e9f2:	f002 fded 	bl	80115d0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ea00:	3b01      	subs	r3, #1
 800ea02:	009b      	lsls	r3, r3, #2
 800ea04:	4413      	add	r3, r2
 800ea06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ea08:	69bb      	ldr	r3, [r7, #24]
 800ea0a:	f023 0307 	bic.w	r3, r3, #7
 800ea0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ea10:	69bb      	ldr	r3, [r7, #24]
 800ea12:	f003 0307 	and.w	r3, r3, #7
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d00a      	beq.n	800ea30 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ea1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea1e:	f383 8811 	msr	BASEPRI, r3
 800ea22:	f3bf 8f6f 	isb	sy
 800ea26:	f3bf 8f4f 	dsb	sy
 800ea2a:	617b      	str	r3, [r7, #20]
}
 800ea2c:	bf00      	nop
 800ea2e:	e7fe      	b.n	800ea2e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d01f      	beq.n	800ea76 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ea36:	2300      	movs	r3, #0
 800ea38:	61fb      	str	r3, [r7, #28]
 800ea3a:	e012      	b.n	800ea62 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ea3c:	68ba      	ldr	r2, [r7, #8]
 800ea3e:	69fb      	ldr	r3, [r7, #28]
 800ea40:	4413      	add	r3, r2
 800ea42:	7819      	ldrb	r1, [r3, #0]
 800ea44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea46:	69fb      	ldr	r3, [r7, #28]
 800ea48:	4413      	add	r3, r2
 800ea4a:	3334      	adds	r3, #52	; 0x34
 800ea4c:	460a      	mov	r2, r1
 800ea4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ea50:	68ba      	ldr	r2, [r7, #8]
 800ea52:	69fb      	ldr	r3, [r7, #28]
 800ea54:	4413      	add	r3, r2
 800ea56:	781b      	ldrb	r3, [r3, #0]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d006      	beq.n	800ea6a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ea5c:	69fb      	ldr	r3, [r7, #28]
 800ea5e:	3301      	adds	r3, #1
 800ea60:	61fb      	str	r3, [r7, #28]
 800ea62:	69fb      	ldr	r3, [r7, #28]
 800ea64:	2b0f      	cmp	r3, #15
 800ea66:	d9e9      	bls.n	800ea3c <prvInitialiseNewTask+0x64>
 800ea68:	e000      	b.n	800ea6c <prvInitialiseNewTask+0x94>
			{
				break;
 800ea6a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ea6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea6e:	2200      	movs	r2, #0
 800ea70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ea74:	e003      	b.n	800ea7e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ea76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea78:	2200      	movs	r2, #0
 800ea7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ea7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea80:	2b37      	cmp	r3, #55	; 0x37
 800ea82:	d901      	bls.n	800ea88 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ea84:	2337      	movs	r3, #55	; 0x37
 800ea86:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ea88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ea8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea92:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ea94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea96:	2200      	movs	r2, #0
 800ea98:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ea9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea9c:	3304      	adds	r3, #4
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	f7fe ffce 	bl	800da40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800eaa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaa6:	3318      	adds	r3, #24
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f7fe ffc9 	bl	800da40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800eaae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eab2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eab6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800eaba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eabc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800eabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eac0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eac2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800eac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eac6:	2200      	movs	r2, #0
 800eac8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800eacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eace:	2200      	movs	r2, #0
 800ead0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ead4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ead6:	3354      	adds	r3, #84	; 0x54
 800ead8:	2260      	movs	r2, #96	; 0x60
 800eada:	2100      	movs	r1, #0
 800eadc:	4618      	mov	r0, r3
 800eade:	f002 fd77 	bl	80115d0 <memset>
 800eae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eae4:	4a0c      	ldr	r2, [pc, #48]	; (800eb18 <prvInitialiseNewTask+0x140>)
 800eae6:	659a      	str	r2, [r3, #88]	; 0x58
 800eae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaea:	4a0c      	ldr	r2, [pc, #48]	; (800eb1c <prvInitialiseNewTask+0x144>)
 800eaec:	65da      	str	r2, [r3, #92]	; 0x5c
 800eaee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaf0:	4a0b      	ldr	r2, [pc, #44]	; (800eb20 <prvInitialiseNewTask+0x148>)
 800eaf2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800eaf4:	683a      	ldr	r2, [r7, #0]
 800eaf6:	68f9      	ldr	r1, [r7, #12]
 800eaf8:	69b8      	ldr	r0, [r7, #24]
 800eafa:	f001 fac1 	bl	8010080 <pxPortInitialiseStack>
 800eafe:	4602      	mov	r2, r0
 800eb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb02:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800eb04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d002      	beq.n	800eb10 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800eb0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb0e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eb10:	bf00      	nop
 800eb12:	3720      	adds	r7, #32
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}
 800eb18:	08016b10 	.word	0x08016b10
 800eb1c:	08016b30 	.word	0x08016b30
 800eb20:	08016af0 	.word	0x08016af0

0800eb24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b082      	sub	sp, #8
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800eb2c:	f001 fbd2 	bl	80102d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800eb30:	4b2d      	ldr	r3, [pc, #180]	; (800ebe8 <prvAddNewTaskToReadyList+0xc4>)
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	3301      	adds	r3, #1
 800eb36:	4a2c      	ldr	r2, [pc, #176]	; (800ebe8 <prvAddNewTaskToReadyList+0xc4>)
 800eb38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800eb3a:	4b2c      	ldr	r3, [pc, #176]	; (800ebec <prvAddNewTaskToReadyList+0xc8>)
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d109      	bne.n	800eb56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800eb42:	4a2a      	ldr	r2, [pc, #168]	; (800ebec <prvAddNewTaskToReadyList+0xc8>)
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800eb48:	4b27      	ldr	r3, [pc, #156]	; (800ebe8 <prvAddNewTaskToReadyList+0xc4>)
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	2b01      	cmp	r3, #1
 800eb4e:	d110      	bne.n	800eb72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800eb50:	f000 fc98 	bl	800f484 <prvInitialiseTaskLists>
 800eb54:	e00d      	b.n	800eb72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800eb56:	4b26      	ldr	r3, [pc, #152]	; (800ebf0 <prvAddNewTaskToReadyList+0xcc>)
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d109      	bne.n	800eb72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800eb5e:	4b23      	ldr	r3, [pc, #140]	; (800ebec <prvAddNewTaskToReadyList+0xc8>)
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb68:	429a      	cmp	r2, r3
 800eb6a:	d802      	bhi.n	800eb72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800eb6c:	4a1f      	ldr	r2, [pc, #124]	; (800ebec <prvAddNewTaskToReadyList+0xc8>)
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800eb72:	4b20      	ldr	r3, [pc, #128]	; (800ebf4 <prvAddNewTaskToReadyList+0xd0>)
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	3301      	adds	r3, #1
 800eb78:	4a1e      	ldr	r2, [pc, #120]	; (800ebf4 <prvAddNewTaskToReadyList+0xd0>)
 800eb7a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800eb7c:	4b1d      	ldr	r3, [pc, #116]	; (800ebf4 <prvAddNewTaskToReadyList+0xd0>)
 800eb7e:	681a      	ldr	r2, [r3, #0]
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb88:	4b1b      	ldr	r3, [pc, #108]	; (800ebf8 <prvAddNewTaskToReadyList+0xd4>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	429a      	cmp	r2, r3
 800eb8e:	d903      	bls.n	800eb98 <prvAddNewTaskToReadyList+0x74>
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb94:	4a18      	ldr	r2, [pc, #96]	; (800ebf8 <prvAddNewTaskToReadyList+0xd4>)
 800eb96:	6013      	str	r3, [r2, #0]
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb9c:	4613      	mov	r3, r2
 800eb9e:	009b      	lsls	r3, r3, #2
 800eba0:	4413      	add	r3, r2
 800eba2:	009b      	lsls	r3, r3, #2
 800eba4:	4a15      	ldr	r2, [pc, #84]	; (800ebfc <prvAddNewTaskToReadyList+0xd8>)
 800eba6:	441a      	add	r2, r3
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	3304      	adds	r3, #4
 800ebac:	4619      	mov	r1, r3
 800ebae:	4610      	mov	r0, r2
 800ebb0:	f7fe ff53 	bl	800da5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ebb4:	f001 fbbe 	bl	8010334 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ebb8:	4b0d      	ldr	r3, [pc, #52]	; (800ebf0 <prvAddNewTaskToReadyList+0xcc>)
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d00e      	beq.n	800ebde <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ebc0:	4b0a      	ldr	r3, [pc, #40]	; (800ebec <prvAddNewTaskToReadyList+0xc8>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebca:	429a      	cmp	r2, r3
 800ebcc:	d207      	bcs.n	800ebde <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ebce:	4b0c      	ldr	r3, [pc, #48]	; (800ec00 <prvAddNewTaskToReadyList+0xdc>)
 800ebd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebd4:	601a      	str	r2, [r3, #0]
 800ebd6:	f3bf 8f4f 	dsb	sy
 800ebda:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ebde:	bf00      	nop
 800ebe0:	3708      	adds	r7, #8
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	bd80      	pop	{r7, pc}
 800ebe6:	bf00      	nop
 800ebe8:	2000123c 	.word	0x2000123c
 800ebec:	20000d68 	.word	0x20000d68
 800ebf0:	20001248 	.word	0x20001248
 800ebf4:	20001258 	.word	0x20001258
 800ebf8:	20001244 	.word	0x20001244
 800ebfc:	20000d6c 	.word	0x20000d6c
 800ec00:	e000ed04 	.word	0xe000ed04

0800ec04 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b084      	sub	sp, #16
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800ec0c:	f001 fb62 	bl	80102d4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d102      	bne.n	800ec1c <vTaskDelete+0x18>
 800ec16:	4b2c      	ldr	r3, [pc, #176]	; (800ecc8 <vTaskDelete+0xc4>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	e000      	b.n	800ec1e <vTaskDelete+0x1a>
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	3304      	adds	r3, #4
 800ec24:	4618      	mov	r0, r3
 800ec26:	f7fe ff75 	bl	800db14 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d004      	beq.n	800ec3c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	3318      	adds	r3, #24
 800ec36:	4618      	mov	r0, r3
 800ec38:	f7fe ff6c 	bl	800db14 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800ec3c:	4b23      	ldr	r3, [pc, #140]	; (800eccc <vTaskDelete+0xc8>)
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	3301      	adds	r3, #1
 800ec42:	4a22      	ldr	r2, [pc, #136]	; (800eccc <vTaskDelete+0xc8>)
 800ec44:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800ec46:	4b20      	ldr	r3, [pc, #128]	; (800ecc8 <vTaskDelete+0xc4>)
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	68fa      	ldr	r2, [r7, #12]
 800ec4c:	429a      	cmp	r2, r3
 800ec4e:	d10b      	bne.n	800ec68 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	3304      	adds	r3, #4
 800ec54:	4619      	mov	r1, r3
 800ec56:	481e      	ldr	r0, [pc, #120]	; (800ecd0 <vTaskDelete+0xcc>)
 800ec58:	f7fe feff 	bl	800da5a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800ec5c:	4b1d      	ldr	r3, [pc, #116]	; (800ecd4 <vTaskDelete+0xd0>)
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	3301      	adds	r3, #1
 800ec62:	4a1c      	ldr	r2, [pc, #112]	; (800ecd4 <vTaskDelete+0xd0>)
 800ec64:	6013      	str	r3, [r2, #0]
 800ec66:	e009      	b.n	800ec7c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800ec68:	4b1b      	ldr	r3, [pc, #108]	; (800ecd8 <vTaskDelete+0xd4>)
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	3b01      	subs	r3, #1
 800ec6e:	4a1a      	ldr	r2, [pc, #104]	; (800ecd8 <vTaskDelete+0xd4>)
 800ec70:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800ec72:	68f8      	ldr	r0, [r7, #12]
 800ec74:	f000 fc74 	bl	800f560 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800ec78:	f000 fca6 	bl	800f5c8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800ec7c:	f001 fb5a 	bl	8010334 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800ec80:	4b16      	ldr	r3, [pc, #88]	; (800ecdc <vTaskDelete+0xd8>)
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d01b      	beq.n	800ecc0 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800ec88:	4b0f      	ldr	r3, [pc, #60]	; (800ecc8 <vTaskDelete+0xc4>)
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	68fa      	ldr	r2, [r7, #12]
 800ec8e:	429a      	cmp	r2, r3
 800ec90:	d116      	bne.n	800ecc0 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800ec92:	4b13      	ldr	r3, [pc, #76]	; (800ece0 <vTaskDelete+0xdc>)
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d00a      	beq.n	800ecb0 <vTaskDelete+0xac>
	__asm volatile
 800ec9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec9e:	f383 8811 	msr	BASEPRI, r3
 800eca2:	f3bf 8f6f 	isb	sy
 800eca6:	f3bf 8f4f 	dsb	sy
 800ecaa:	60bb      	str	r3, [r7, #8]
}
 800ecac:	bf00      	nop
 800ecae:	e7fe      	b.n	800ecae <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800ecb0:	4b0c      	ldr	r3, [pc, #48]	; (800ece4 <vTaskDelete+0xe0>)
 800ecb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecb6:	601a      	str	r2, [r3, #0]
 800ecb8:	f3bf 8f4f 	dsb	sy
 800ecbc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ecc0:	bf00      	nop
 800ecc2:	3710      	adds	r7, #16
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}
 800ecc8:	20000d68 	.word	0x20000d68
 800eccc:	20001258 	.word	0x20001258
 800ecd0:	20001210 	.word	0x20001210
 800ecd4:	20001224 	.word	0x20001224
 800ecd8:	2000123c 	.word	0x2000123c
 800ecdc:	20001248 	.word	0x20001248
 800ece0:	20001264 	.word	0x20001264
 800ece4:	e000ed04 	.word	0xe000ed04

0800ece8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b084      	sub	sp, #16
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d017      	beq.n	800ed2a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ecfa:	4b13      	ldr	r3, [pc, #76]	; (800ed48 <vTaskDelay+0x60>)
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d00a      	beq.n	800ed18 <vTaskDelay+0x30>
	__asm volatile
 800ed02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed06:	f383 8811 	msr	BASEPRI, r3
 800ed0a:	f3bf 8f6f 	isb	sy
 800ed0e:	f3bf 8f4f 	dsb	sy
 800ed12:	60bb      	str	r3, [r7, #8]
}
 800ed14:	bf00      	nop
 800ed16:	e7fe      	b.n	800ed16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ed18:	f000 f88a 	bl	800ee30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ed1c:	2100      	movs	r1, #0
 800ed1e:	6878      	ldr	r0, [r7, #4]
 800ed20:	f000 fe0c 	bl	800f93c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ed24:	f000 f892 	bl	800ee4c <xTaskResumeAll>
 800ed28:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d107      	bne.n	800ed40 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ed30:	4b06      	ldr	r3, [pc, #24]	; (800ed4c <vTaskDelay+0x64>)
 800ed32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed36:	601a      	str	r2, [r3, #0]
 800ed38:	f3bf 8f4f 	dsb	sy
 800ed3c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ed40:	bf00      	nop
 800ed42:	3710      	adds	r7, #16
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}
 800ed48:	20001264 	.word	0x20001264
 800ed4c:	e000ed04 	.word	0xe000ed04

0800ed50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b08a      	sub	sp, #40	; 0x28
 800ed54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ed56:	2300      	movs	r3, #0
 800ed58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ed5e:	463a      	mov	r2, r7
 800ed60:	1d39      	adds	r1, r7, #4
 800ed62:	f107 0308 	add.w	r3, r7, #8
 800ed66:	4618      	mov	r0, r3
 800ed68:	f7fe fe16 	bl	800d998 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ed6c:	6839      	ldr	r1, [r7, #0]
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	68ba      	ldr	r2, [r7, #8]
 800ed72:	9202      	str	r2, [sp, #8]
 800ed74:	9301      	str	r3, [sp, #4]
 800ed76:	2300      	movs	r3, #0
 800ed78:	9300      	str	r3, [sp, #0]
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	460a      	mov	r2, r1
 800ed7e:	4924      	ldr	r1, [pc, #144]	; (800ee10 <vTaskStartScheduler+0xc0>)
 800ed80:	4824      	ldr	r0, [pc, #144]	; (800ee14 <vTaskStartScheduler+0xc4>)
 800ed82:	f7ff fd87 	bl	800e894 <xTaskCreateStatic>
 800ed86:	4603      	mov	r3, r0
 800ed88:	4a23      	ldr	r2, [pc, #140]	; (800ee18 <vTaskStartScheduler+0xc8>)
 800ed8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ed8c:	4b22      	ldr	r3, [pc, #136]	; (800ee18 <vTaskStartScheduler+0xc8>)
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d002      	beq.n	800ed9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ed94:	2301      	movs	r3, #1
 800ed96:	617b      	str	r3, [r7, #20]
 800ed98:	e001      	b.n	800ed9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ed9e:	697b      	ldr	r3, [r7, #20]
 800eda0:	2b01      	cmp	r3, #1
 800eda2:	d102      	bne.n	800edaa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800eda4:	f000 fe1e 	bl	800f9e4 <xTimerCreateTimerTask>
 800eda8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800edaa:	697b      	ldr	r3, [r7, #20]
 800edac:	2b01      	cmp	r3, #1
 800edae:	d11b      	bne.n	800ede8 <vTaskStartScheduler+0x98>
	__asm volatile
 800edb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edb4:	f383 8811 	msr	BASEPRI, r3
 800edb8:	f3bf 8f6f 	isb	sy
 800edbc:	f3bf 8f4f 	dsb	sy
 800edc0:	613b      	str	r3, [r7, #16]
}
 800edc2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800edc4:	4b15      	ldr	r3, [pc, #84]	; (800ee1c <vTaskStartScheduler+0xcc>)
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	3354      	adds	r3, #84	; 0x54
 800edca:	4a15      	ldr	r2, [pc, #84]	; (800ee20 <vTaskStartScheduler+0xd0>)
 800edcc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800edce:	4b15      	ldr	r3, [pc, #84]	; (800ee24 <vTaskStartScheduler+0xd4>)
 800edd0:	f04f 32ff 	mov.w	r2, #4294967295
 800edd4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800edd6:	4b14      	ldr	r3, [pc, #80]	; (800ee28 <vTaskStartScheduler+0xd8>)
 800edd8:	2201      	movs	r2, #1
 800edda:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800eddc:	4b13      	ldr	r3, [pc, #76]	; (800ee2c <vTaskStartScheduler+0xdc>)
 800edde:	2200      	movs	r2, #0
 800ede0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ede2:	f001 f9d5 	bl	8010190 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ede6:	e00e      	b.n	800ee06 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ede8:	697b      	ldr	r3, [r7, #20]
 800edea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edee:	d10a      	bne.n	800ee06 <vTaskStartScheduler+0xb6>
	__asm volatile
 800edf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edf4:	f383 8811 	msr	BASEPRI, r3
 800edf8:	f3bf 8f6f 	isb	sy
 800edfc:	f3bf 8f4f 	dsb	sy
 800ee00:	60fb      	str	r3, [r7, #12]
}
 800ee02:	bf00      	nop
 800ee04:	e7fe      	b.n	800ee04 <vTaskStartScheduler+0xb4>
}
 800ee06:	bf00      	nop
 800ee08:	3718      	adds	r7, #24
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bd80      	pop	{r7, pc}
 800ee0e:	bf00      	nop
 800ee10:	08016914 	.word	0x08016914
 800ee14:	0800f455 	.word	0x0800f455
 800ee18:	20001260 	.word	0x20001260
 800ee1c:	20000d68 	.word	0x20000d68
 800ee20:	20000188 	.word	0x20000188
 800ee24:	2000125c 	.word	0x2000125c
 800ee28:	20001248 	.word	0x20001248
 800ee2c:	20001240 	.word	0x20001240

0800ee30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ee30:	b480      	push	{r7}
 800ee32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ee34:	4b04      	ldr	r3, [pc, #16]	; (800ee48 <vTaskSuspendAll+0x18>)
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	3301      	adds	r3, #1
 800ee3a:	4a03      	ldr	r2, [pc, #12]	; (800ee48 <vTaskSuspendAll+0x18>)
 800ee3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ee3e:	bf00      	nop
 800ee40:	46bd      	mov	sp, r7
 800ee42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee46:	4770      	bx	lr
 800ee48:	20001264 	.word	0x20001264

0800ee4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b084      	sub	sp, #16
 800ee50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ee52:	2300      	movs	r3, #0
 800ee54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ee56:	2300      	movs	r3, #0
 800ee58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ee5a:	4b42      	ldr	r3, [pc, #264]	; (800ef64 <xTaskResumeAll+0x118>)
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d10a      	bne.n	800ee78 <xTaskResumeAll+0x2c>
	__asm volatile
 800ee62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee66:	f383 8811 	msr	BASEPRI, r3
 800ee6a:	f3bf 8f6f 	isb	sy
 800ee6e:	f3bf 8f4f 	dsb	sy
 800ee72:	603b      	str	r3, [r7, #0]
}
 800ee74:	bf00      	nop
 800ee76:	e7fe      	b.n	800ee76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ee78:	f001 fa2c 	bl	80102d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ee7c:	4b39      	ldr	r3, [pc, #228]	; (800ef64 <xTaskResumeAll+0x118>)
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	3b01      	subs	r3, #1
 800ee82:	4a38      	ldr	r2, [pc, #224]	; (800ef64 <xTaskResumeAll+0x118>)
 800ee84:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ee86:	4b37      	ldr	r3, [pc, #220]	; (800ef64 <xTaskResumeAll+0x118>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d162      	bne.n	800ef54 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ee8e:	4b36      	ldr	r3, [pc, #216]	; (800ef68 <xTaskResumeAll+0x11c>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d05e      	beq.n	800ef54 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ee96:	e02f      	b.n	800eef8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee98:	4b34      	ldr	r3, [pc, #208]	; (800ef6c <xTaskResumeAll+0x120>)
 800ee9a:	68db      	ldr	r3, [r3, #12]
 800ee9c:	68db      	ldr	r3, [r3, #12]
 800ee9e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	3318      	adds	r3, #24
 800eea4:	4618      	mov	r0, r3
 800eea6:	f7fe fe35 	bl	800db14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	3304      	adds	r3, #4
 800eeae:	4618      	mov	r0, r3
 800eeb0:	f7fe fe30 	bl	800db14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eeb8:	4b2d      	ldr	r3, [pc, #180]	; (800ef70 <xTaskResumeAll+0x124>)
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	429a      	cmp	r2, r3
 800eebe:	d903      	bls.n	800eec8 <xTaskResumeAll+0x7c>
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eec4:	4a2a      	ldr	r2, [pc, #168]	; (800ef70 <xTaskResumeAll+0x124>)
 800eec6:	6013      	str	r3, [r2, #0]
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eecc:	4613      	mov	r3, r2
 800eece:	009b      	lsls	r3, r3, #2
 800eed0:	4413      	add	r3, r2
 800eed2:	009b      	lsls	r3, r3, #2
 800eed4:	4a27      	ldr	r2, [pc, #156]	; (800ef74 <xTaskResumeAll+0x128>)
 800eed6:	441a      	add	r2, r3
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	3304      	adds	r3, #4
 800eedc:	4619      	mov	r1, r3
 800eede:	4610      	mov	r0, r2
 800eee0:	f7fe fdbb 	bl	800da5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eee8:	4b23      	ldr	r3, [pc, #140]	; (800ef78 <xTaskResumeAll+0x12c>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeee:	429a      	cmp	r2, r3
 800eef0:	d302      	bcc.n	800eef8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800eef2:	4b22      	ldr	r3, [pc, #136]	; (800ef7c <xTaskResumeAll+0x130>)
 800eef4:	2201      	movs	r2, #1
 800eef6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eef8:	4b1c      	ldr	r3, [pc, #112]	; (800ef6c <xTaskResumeAll+0x120>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d1cb      	bne.n	800ee98 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d001      	beq.n	800ef0a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ef06:	f000 fb5f 	bl	800f5c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ef0a:	4b1d      	ldr	r3, [pc, #116]	; (800ef80 <xTaskResumeAll+0x134>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d010      	beq.n	800ef38 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ef16:	f000 f847 	bl	800efa8 <xTaskIncrementTick>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d002      	beq.n	800ef26 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ef20:	4b16      	ldr	r3, [pc, #88]	; (800ef7c <xTaskResumeAll+0x130>)
 800ef22:	2201      	movs	r2, #1
 800ef24:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	3b01      	subs	r3, #1
 800ef2a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d1f1      	bne.n	800ef16 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ef32:	4b13      	ldr	r3, [pc, #76]	; (800ef80 <xTaskResumeAll+0x134>)
 800ef34:	2200      	movs	r2, #0
 800ef36:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ef38:	4b10      	ldr	r3, [pc, #64]	; (800ef7c <xTaskResumeAll+0x130>)
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d009      	beq.n	800ef54 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ef40:	2301      	movs	r3, #1
 800ef42:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ef44:	4b0f      	ldr	r3, [pc, #60]	; (800ef84 <xTaskResumeAll+0x138>)
 800ef46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef4a:	601a      	str	r2, [r3, #0]
 800ef4c:	f3bf 8f4f 	dsb	sy
 800ef50:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ef54:	f001 f9ee 	bl	8010334 <vPortExitCritical>

	return xAlreadyYielded;
 800ef58:	68bb      	ldr	r3, [r7, #8]
}
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	3710      	adds	r7, #16
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bd80      	pop	{r7, pc}
 800ef62:	bf00      	nop
 800ef64:	20001264 	.word	0x20001264
 800ef68:	2000123c 	.word	0x2000123c
 800ef6c:	200011fc 	.word	0x200011fc
 800ef70:	20001244 	.word	0x20001244
 800ef74:	20000d6c 	.word	0x20000d6c
 800ef78:	20000d68 	.word	0x20000d68
 800ef7c:	20001250 	.word	0x20001250
 800ef80:	2000124c 	.word	0x2000124c
 800ef84:	e000ed04 	.word	0xe000ed04

0800ef88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ef88:	b480      	push	{r7}
 800ef8a:	b083      	sub	sp, #12
 800ef8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ef8e:	4b05      	ldr	r3, [pc, #20]	; (800efa4 <xTaskGetTickCount+0x1c>)
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ef94:	687b      	ldr	r3, [r7, #4]
}
 800ef96:	4618      	mov	r0, r3
 800ef98:	370c      	adds	r7, #12
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa0:	4770      	bx	lr
 800efa2:	bf00      	nop
 800efa4:	20001240 	.word	0x20001240

0800efa8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b086      	sub	sp, #24
 800efac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800efae:	2300      	movs	r3, #0
 800efb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800efb2:	4b4f      	ldr	r3, [pc, #316]	; (800f0f0 <xTaskIncrementTick+0x148>)
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	f040 808f 	bne.w	800f0da <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800efbc:	4b4d      	ldr	r3, [pc, #308]	; (800f0f4 <xTaskIncrementTick+0x14c>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	3301      	adds	r3, #1
 800efc2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800efc4:	4a4b      	ldr	r2, [pc, #300]	; (800f0f4 <xTaskIncrementTick+0x14c>)
 800efc6:	693b      	ldr	r3, [r7, #16]
 800efc8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800efca:	693b      	ldr	r3, [r7, #16]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d120      	bne.n	800f012 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800efd0:	4b49      	ldr	r3, [pc, #292]	; (800f0f8 <xTaskIncrementTick+0x150>)
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d00a      	beq.n	800eff0 <xTaskIncrementTick+0x48>
	__asm volatile
 800efda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efde:	f383 8811 	msr	BASEPRI, r3
 800efe2:	f3bf 8f6f 	isb	sy
 800efe6:	f3bf 8f4f 	dsb	sy
 800efea:	603b      	str	r3, [r7, #0]
}
 800efec:	bf00      	nop
 800efee:	e7fe      	b.n	800efee <xTaskIncrementTick+0x46>
 800eff0:	4b41      	ldr	r3, [pc, #260]	; (800f0f8 <xTaskIncrementTick+0x150>)
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	60fb      	str	r3, [r7, #12]
 800eff6:	4b41      	ldr	r3, [pc, #260]	; (800f0fc <xTaskIncrementTick+0x154>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	4a3f      	ldr	r2, [pc, #252]	; (800f0f8 <xTaskIncrementTick+0x150>)
 800effc:	6013      	str	r3, [r2, #0]
 800effe:	4a3f      	ldr	r2, [pc, #252]	; (800f0fc <xTaskIncrementTick+0x154>)
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	6013      	str	r3, [r2, #0]
 800f004:	4b3e      	ldr	r3, [pc, #248]	; (800f100 <xTaskIncrementTick+0x158>)
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	3301      	adds	r3, #1
 800f00a:	4a3d      	ldr	r2, [pc, #244]	; (800f100 <xTaskIncrementTick+0x158>)
 800f00c:	6013      	str	r3, [r2, #0]
 800f00e:	f000 fadb 	bl	800f5c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f012:	4b3c      	ldr	r3, [pc, #240]	; (800f104 <xTaskIncrementTick+0x15c>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	693a      	ldr	r2, [r7, #16]
 800f018:	429a      	cmp	r2, r3
 800f01a:	d349      	bcc.n	800f0b0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f01c:	4b36      	ldr	r3, [pc, #216]	; (800f0f8 <xTaskIncrementTick+0x150>)
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d104      	bne.n	800f030 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f026:	4b37      	ldr	r3, [pc, #220]	; (800f104 <xTaskIncrementTick+0x15c>)
 800f028:	f04f 32ff 	mov.w	r2, #4294967295
 800f02c:	601a      	str	r2, [r3, #0]
					break;
 800f02e:	e03f      	b.n	800f0b0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f030:	4b31      	ldr	r3, [pc, #196]	; (800f0f8 <xTaskIncrementTick+0x150>)
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	68db      	ldr	r3, [r3, #12]
 800f036:	68db      	ldr	r3, [r3, #12]
 800f038:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	685b      	ldr	r3, [r3, #4]
 800f03e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f040:	693a      	ldr	r2, [r7, #16]
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	429a      	cmp	r2, r3
 800f046:	d203      	bcs.n	800f050 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f048:	4a2e      	ldr	r2, [pc, #184]	; (800f104 <xTaskIncrementTick+0x15c>)
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f04e:	e02f      	b.n	800f0b0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	3304      	adds	r3, #4
 800f054:	4618      	mov	r0, r3
 800f056:	f7fe fd5d 	bl	800db14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f05a:	68bb      	ldr	r3, [r7, #8]
 800f05c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d004      	beq.n	800f06c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f062:	68bb      	ldr	r3, [r7, #8]
 800f064:	3318      	adds	r3, #24
 800f066:	4618      	mov	r0, r3
 800f068:	f7fe fd54 	bl	800db14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f06c:	68bb      	ldr	r3, [r7, #8]
 800f06e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f070:	4b25      	ldr	r3, [pc, #148]	; (800f108 <xTaskIncrementTick+0x160>)
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	429a      	cmp	r2, r3
 800f076:	d903      	bls.n	800f080 <xTaskIncrementTick+0xd8>
 800f078:	68bb      	ldr	r3, [r7, #8]
 800f07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f07c:	4a22      	ldr	r2, [pc, #136]	; (800f108 <xTaskIncrementTick+0x160>)
 800f07e:	6013      	str	r3, [r2, #0]
 800f080:	68bb      	ldr	r3, [r7, #8]
 800f082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f084:	4613      	mov	r3, r2
 800f086:	009b      	lsls	r3, r3, #2
 800f088:	4413      	add	r3, r2
 800f08a:	009b      	lsls	r3, r3, #2
 800f08c:	4a1f      	ldr	r2, [pc, #124]	; (800f10c <xTaskIncrementTick+0x164>)
 800f08e:	441a      	add	r2, r3
 800f090:	68bb      	ldr	r3, [r7, #8]
 800f092:	3304      	adds	r3, #4
 800f094:	4619      	mov	r1, r3
 800f096:	4610      	mov	r0, r2
 800f098:	f7fe fcdf 	bl	800da5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0a0:	4b1b      	ldr	r3, [pc, #108]	; (800f110 <xTaskIncrementTick+0x168>)
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0a6:	429a      	cmp	r2, r3
 800f0a8:	d3b8      	bcc.n	800f01c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f0aa:	2301      	movs	r3, #1
 800f0ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f0ae:	e7b5      	b.n	800f01c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f0b0:	4b17      	ldr	r3, [pc, #92]	; (800f110 <xTaskIncrementTick+0x168>)
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0b6:	4915      	ldr	r1, [pc, #84]	; (800f10c <xTaskIncrementTick+0x164>)
 800f0b8:	4613      	mov	r3, r2
 800f0ba:	009b      	lsls	r3, r3, #2
 800f0bc:	4413      	add	r3, r2
 800f0be:	009b      	lsls	r3, r3, #2
 800f0c0:	440b      	add	r3, r1
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	2b01      	cmp	r3, #1
 800f0c6:	d901      	bls.n	800f0cc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f0c8:	2301      	movs	r3, #1
 800f0ca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f0cc:	4b11      	ldr	r3, [pc, #68]	; (800f114 <xTaskIncrementTick+0x16c>)
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d007      	beq.n	800f0e4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f0d4:	2301      	movs	r3, #1
 800f0d6:	617b      	str	r3, [r7, #20]
 800f0d8:	e004      	b.n	800f0e4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f0da:	4b0f      	ldr	r3, [pc, #60]	; (800f118 <xTaskIncrementTick+0x170>)
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	3301      	adds	r3, #1
 800f0e0:	4a0d      	ldr	r2, [pc, #52]	; (800f118 <xTaskIncrementTick+0x170>)
 800f0e2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f0e4:	697b      	ldr	r3, [r7, #20]
}
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	3718      	adds	r7, #24
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	bd80      	pop	{r7, pc}
 800f0ee:	bf00      	nop
 800f0f0:	20001264 	.word	0x20001264
 800f0f4:	20001240 	.word	0x20001240
 800f0f8:	200011f4 	.word	0x200011f4
 800f0fc:	200011f8 	.word	0x200011f8
 800f100:	20001254 	.word	0x20001254
 800f104:	2000125c 	.word	0x2000125c
 800f108:	20001244 	.word	0x20001244
 800f10c:	20000d6c 	.word	0x20000d6c
 800f110:	20000d68 	.word	0x20000d68
 800f114:	20001250 	.word	0x20001250
 800f118:	2000124c 	.word	0x2000124c

0800f11c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f11c:	b480      	push	{r7}
 800f11e:	b085      	sub	sp, #20
 800f120:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f122:	4b2a      	ldr	r3, [pc, #168]	; (800f1cc <vTaskSwitchContext+0xb0>)
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d003      	beq.n	800f132 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f12a:	4b29      	ldr	r3, [pc, #164]	; (800f1d0 <vTaskSwitchContext+0xb4>)
 800f12c:	2201      	movs	r2, #1
 800f12e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f130:	e046      	b.n	800f1c0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800f132:	4b27      	ldr	r3, [pc, #156]	; (800f1d0 <vTaskSwitchContext+0xb4>)
 800f134:	2200      	movs	r2, #0
 800f136:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f138:	4b26      	ldr	r3, [pc, #152]	; (800f1d4 <vTaskSwitchContext+0xb8>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	60fb      	str	r3, [r7, #12]
 800f13e:	e010      	b.n	800f162 <vTaskSwitchContext+0x46>
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d10a      	bne.n	800f15c <vTaskSwitchContext+0x40>
	__asm volatile
 800f146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f14a:	f383 8811 	msr	BASEPRI, r3
 800f14e:	f3bf 8f6f 	isb	sy
 800f152:	f3bf 8f4f 	dsb	sy
 800f156:	607b      	str	r3, [r7, #4]
}
 800f158:	bf00      	nop
 800f15a:	e7fe      	b.n	800f15a <vTaskSwitchContext+0x3e>
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	3b01      	subs	r3, #1
 800f160:	60fb      	str	r3, [r7, #12]
 800f162:	491d      	ldr	r1, [pc, #116]	; (800f1d8 <vTaskSwitchContext+0xbc>)
 800f164:	68fa      	ldr	r2, [r7, #12]
 800f166:	4613      	mov	r3, r2
 800f168:	009b      	lsls	r3, r3, #2
 800f16a:	4413      	add	r3, r2
 800f16c:	009b      	lsls	r3, r3, #2
 800f16e:	440b      	add	r3, r1
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d0e4      	beq.n	800f140 <vTaskSwitchContext+0x24>
 800f176:	68fa      	ldr	r2, [r7, #12]
 800f178:	4613      	mov	r3, r2
 800f17a:	009b      	lsls	r3, r3, #2
 800f17c:	4413      	add	r3, r2
 800f17e:	009b      	lsls	r3, r3, #2
 800f180:	4a15      	ldr	r2, [pc, #84]	; (800f1d8 <vTaskSwitchContext+0xbc>)
 800f182:	4413      	add	r3, r2
 800f184:	60bb      	str	r3, [r7, #8]
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	685b      	ldr	r3, [r3, #4]
 800f18a:	685a      	ldr	r2, [r3, #4]
 800f18c:	68bb      	ldr	r3, [r7, #8]
 800f18e:	605a      	str	r2, [r3, #4]
 800f190:	68bb      	ldr	r3, [r7, #8]
 800f192:	685a      	ldr	r2, [r3, #4]
 800f194:	68bb      	ldr	r3, [r7, #8]
 800f196:	3308      	adds	r3, #8
 800f198:	429a      	cmp	r2, r3
 800f19a:	d104      	bne.n	800f1a6 <vTaskSwitchContext+0x8a>
 800f19c:	68bb      	ldr	r3, [r7, #8]
 800f19e:	685b      	ldr	r3, [r3, #4]
 800f1a0:	685a      	ldr	r2, [r3, #4]
 800f1a2:	68bb      	ldr	r3, [r7, #8]
 800f1a4:	605a      	str	r2, [r3, #4]
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	685b      	ldr	r3, [r3, #4]
 800f1aa:	68db      	ldr	r3, [r3, #12]
 800f1ac:	4a0b      	ldr	r2, [pc, #44]	; (800f1dc <vTaskSwitchContext+0xc0>)
 800f1ae:	6013      	str	r3, [r2, #0]
 800f1b0:	4a08      	ldr	r2, [pc, #32]	; (800f1d4 <vTaskSwitchContext+0xb8>)
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f1b6:	4b09      	ldr	r3, [pc, #36]	; (800f1dc <vTaskSwitchContext+0xc0>)
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	3354      	adds	r3, #84	; 0x54
 800f1bc:	4a08      	ldr	r2, [pc, #32]	; (800f1e0 <vTaskSwitchContext+0xc4>)
 800f1be:	6013      	str	r3, [r2, #0]
}
 800f1c0:	bf00      	nop
 800f1c2:	3714      	adds	r7, #20
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ca:	4770      	bx	lr
 800f1cc:	20001264 	.word	0x20001264
 800f1d0:	20001250 	.word	0x20001250
 800f1d4:	20001244 	.word	0x20001244
 800f1d8:	20000d6c 	.word	0x20000d6c
 800f1dc:	20000d68 	.word	0x20000d68
 800f1e0:	20000188 	.word	0x20000188

0800f1e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b084      	sub	sp, #16
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
 800f1ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d10a      	bne.n	800f20a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1f8:	f383 8811 	msr	BASEPRI, r3
 800f1fc:	f3bf 8f6f 	isb	sy
 800f200:	f3bf 8f4f 	dsb	sy
 800f204:	60fb      	str	r3, [r7, #12]
}
 800f206:	bf00      	nop
 800f208:	e7fe      	b.n	800f208 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f20a:	4b07      	ldr	r3, [pc, #28]	; (800f228 <vTaskPlaceOnEventList+0x44>)
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	3318      	adds	r3, #24
 800f210:	4619      	mov	r1, r3
 800f212:	6878      	ldr	r0, [r7, #4]
 800f214:	f7fe fc45 	bl	800daa2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f218:	2101      	movs	r1, #1
 800f21a:	6838      	ldr	r0, [r7, #0]
 800f21c:	f000 fb8e 	bl	800f93c <prvAddCurrentTaskToDelayedList>
}
 800f220:	bf00      	nop
 800f222:	3710      	adds	r7, #16
 800f224:	46bd      	mov	sp, r7
 800f226:	bd80      	pop	{r7, pc}
 800f228:	20000d68 	.word	0x20000d68

0800f22c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b086      	sub	sp, #24
 800f230:	af00      	add	r7, sp, #0
 800f232:	60f8      	str	r0, [r7, #12]
 800f234:	60b9      	str	r1, [r7, #8]
 800f236:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d10a      	bne.n	800f254 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f242:	f383 8811 	msr	BASEPRI, r3
 800f246:	f3bf 8f6f 	isb	sy
 800f24a:	f3bf 8f4f 	dsb	sy
 800f24e:	617b      	str	r3, [r7, #20]
}
 800f250:	bf00      	nop
 800f252:	e7fe      	b.n	800f252 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f254:	4b0a      	ldr	r3, [pc, #40]	; (800f280 <vTaskPlaceOnEventListRestricted+0x54>)
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	3318      	adds	r3, #24
 800f25a:	4619      	mov	r1, r3
 800f25c:	68f8      	ldr	r0, [r7, #12]
 800f25e:	f7fe fbfc 	bl	800da5a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d002      	beq.n	800f26e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f268:	f04f 33ff 	mov.w	r3, #4294967295
 800f26c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f26e:	6879      	ldr	r1, [r7, #4]
 800f270:	68b8      	ldr	r0, [r7, #8]
 800f272:	f000 fb63 	bl	800f93c <prvAddCurrentTaskToDelayedList>
	}
 800f276:	bf00      	nop
 800f278:	3718      	adds	r7, #24
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bd80      	pop	{r7, pc}
 800f27e:	bf00      	nop
 800f280:	20000d68 	.word	0x20000d68

0800f284 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b086      	sub	sp, #24
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	68db      	ldr	r3, [r3, #12]
 800f290:	68db      	ldr	r3, [r3, #12]
 800f292:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f294:	693b      	ldr	r3, [r7, #16]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d10a      	bne.n	800f2b0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f29e:	f383 8811 	msr	BASEPRI, r3
 800f2a2:	f3bf 8f6f 	isb	sy
 800f2a6:	f3bf 8f4f 	dsb	sy
 800f2aa:	60fb      	str	r3, [r7, #12]
}
 800f2ac:	bf00      	nop
 800f2ae:	e7fe      	b.n	800f2ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f2b0:	693b      	ldr	r3, [r7, #16]
 800f2b2:	3318      	adds	r3, #24
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f7fe fc2d 	bl	800db14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f2ba:	4b1e      	ldr	r3, [pc, #120]	; (800f334 <xTaskRemoveFromEventList+0xb0>)
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d11d      	bne.n	800f2fe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f2c2:	693b      	ldr	r3, [r7, #16]
 800f2c4:	3304      	adds	r3, #4
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f7fe fc24 	bl	800db14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f2cc:	693b      	ldr	r3, [r7, #16]
 800f2ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2d0:	4b19      	ldr	r3, [pc, #100]	; (800f338 <xTaskRemoveFromEventList+0xb4>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	429a      	cmp	r2, r3
 800f2d6:	d903      	bls.n	800f2e0 <xTaskRemoveFromEventList+0x5c>
 800f2d8:	693b      	ldr	r3, [r7, #16]
 800f2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2dc:	4a16      	ldr	r2, [pc, #88]	; (800f338 <xTaskRemoveFromEventList+0xb4>)
 800f2de:	6013      	str	r3, [r2, #0]
 800f2e0:	693b      	ldr	r3, [r7, #16]
 800f2e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2e4:	4613      	mov	r3, r2
 800f2e6:	009b      	lsls	r3, r3, #2
 800f2e8:	4413      	add	r3, r2
 800f2ea:	009b      	lsls	r3, r3, #2
 800f2ec:	4a13      	ldr	r2, [pc, #76]	; (800f33c <xTaskRemoveFromEventList+0xb8>)
 800f2ee:	441a      	add	r2, r3
 800f2f0:	693b      	ldr	r3, [r7, #16]
 800f2f2:	3304      	adds	r3, #4
 800f2f4:	4619      	mov	r1, r3
 800f2f6:	4610      	mov	r0, r2
 800f2f8:	f7fe fbaf 	bl	800da5a <vListInsertEnd>
 800f2fc:	e005      	b.n	800f30a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f2fe:	693b      	ldr	r3, [r7, #16]
 800f300:	3318      	adds	r3, #24
 800f302:	4619      	mov	r1, r3
 800f304:	480e      	ldr	r0, [pc, #56]	; (800f340 <xTaskRemoveFromEventList+0xbc>)
 800f306:	f7fe fba8 	bl	800da5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f30a:	693b      	ldr	r3, [r7, #16]
 800f30c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f30e:	4b0d      	ldr	r3, [pc, #52]	; (800f344 <xTaskRemoveFromEventList+0xc0>)
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f314:	429a      	cmp	r2, r3
 800f316:	d905      	bls.n	800f324 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f318:	2301      	movs	r3, #1
 800f31a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f31c:	4b0a      	ldr	r3, [pc, #40]	; (800f348 <xTaskRemoveFromEventList+0xc4>)
 800f31e:	2201      	movs	r2, #1
 800f320:	601a      	str	r2, [r3, #0]
 800f322:	e001      	b.n	800f328 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f324:	2300      	movs	r3, #0
 800f326:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f328:	697b      	ldr	r3, [r7, #20]
}
 800f32a:	4618      	mov	r0, r3
 800f32c:	3718      	adds	r7, #24
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd80      	pop	{r7, pc}
 800f332:	bf00      	nop
 800f334:	20001264 	.word	0x20001264
 800f338:	20001244 	.word	0x20001244
 800f33c:	20000d6c 	.word	0x20000d6c
 800f340:	200011fc 	.word	0x200011fc
 800f344:	20000d68 	.word	0x20000d68
 800f348:	20001250 	.word	0x20001250

0800f34c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f34c:	b480      	push	{r7}
 800f34e:	b083      	sub	sp, #12
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f354:	4b06      	ldr	r3, [pc, #24]	; (800f370 <vTaskInternalSetTimeOutState+0x24>)
 800f356:	681a      	ldr	r2, [r3, #0]
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f35c:	4b05      	ldr	r3, [pc, #20]	; (800f374 <vTaskInternalSetTimeOutState+0x28>)
 800f35e:	681a      	ldr	r2, [r3, #0]
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	605a      	str	r2, [r3, #4]
}
 800f364:	bf00      	nop
 800f366:	370c      	adds	r7, #12
 800f368:	46bd      	mov	sp, r7
 800f36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36e:	4770      	bx	lr
 800f370:	20001254 	.word	0x20001254
 800f374:	20001240 	.word	0x20001240

0800f378 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b088      	sub	sp, #32
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
 800f380:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d10a      	bne.n	800f39e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f38c:	f383 8811 	msr	BASEPRI, r3
 800f390:	f3bf 8f6f 	isb	sy
 800f394:	f3bf 8f4f 	dsb	sy
 800f398:	613b      	str	r3, [r7, #16]
}
 800f39a:	bf00      	nop
 800f39c:	e7fe      	b.n	800f39c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d10a      	bne.n	800f3ba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3a8:	f383 8811 	msr	BASEPRI, r3
 800f3ac:	f3bf 8f6f 	isb	sy
 800f3b0:	f3bf 8f4f 	dsb	sy
 800f3b4:	60fb      	str	r3, [r7, #12]
}
 800f3b6:	bf00      	nop
 800f3b8:	e7fe      	b.n	800f3b8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f3ba:	f000 ff8b 	bl	80102d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f3be:	4b1d      	ldr	r3, [pc, #116]	; (800f434 <xTaskCheckForTimeOut+0xbc>)
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	685b      	ldr	r3, [r3, #4]
 800f3c8:	69ba      	ldr	r2, [r7, #24]
 800f3ca:	1ad3      	subs	r3, r2, r3
 800f3cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3d6:	d102      	bne.n	800f3de <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f3d8:	2300      	movs	r3, #0
 800f3da:	61fb      	str	r3, [r7, #28]
 800f3dc:	e023      	b.n	800f426 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681a      	ldr	r2, [r3, #0]
 800f3e2:	4b15      	ldr	r3, [pc, #84]	; (800f438 <xTaskCheckForTimeOut+0xc0>)
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	429a      	cmp	r2, r3
 800f3e8:	d007      	beq.n	800f3fa <xTaskCheckForTimeOut+0x82>
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	685b      	ldr	r3, [r3, #4]
 800f3ee:	69ba      	ldr	r2, [r7, #24]
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	d302      	bcc.n	800f3fa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f3f4:	2301      	movs	r3, #1
 800f3f6:	61fb      	str	r3, [r7, #28]
 800f3f8:	e015      	b.n	800f426 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f3fa:	683b      	ldr	r3, [r7, #0]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	697a      	ldr	r2, [r7, #20]
 800f400:	429a      	cmp	r2, r3
 800f402:	d20b      	bcs.n	800f41c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	681a      	ldr	r2, [r3, #0]
 800f408:	697b      	ldr	r3, [r7, #20]
 800f40a:	1ad2      	subs	r2, r2, r3
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f410:	6878      	ldr	r0, [r7, #4]
 800f412:	f7ff ff9b 	bl	800f34c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f416:	2300      	movs	r3, #0
 800f418:	61fb      	str	r3, [r7, #28]
 800f41a:	e004      	b.n	800f426 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f41c:	683b      	ldr	r3, [r7, #0]
 800f41e:	2200      	movs	r2, #0
 800f420:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f422:	2301      	movs	r3, #1
 800f424:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f426:	f000 ff85 	bl	8010334 <vPortExitCritical>

	return xReturn;
 800f42a:	69fb      	ldr	r3, [r7, #28]
}
 800f42c:	4618      	mov	r0, r3
 800f42e:	3720      	adds	r7, #32
 800f430:	46bd      	mov	sp, r7
 800f432:	bd80      	pop	{r7, pc}
 800f434:	20001240 	.word	0x20001240
 800f438:	20001254 	.word	0x20001254

0800f43c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f43c:	b480      	push	{r7}
 800f43e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f440:	4b03      	ldr	r3, [pc, #12]	; (800f450 <vTaskMissedYield+0x14>)
 800f442:	2201      	movs	r2, #1
 800f444:	601a      	str	r2, [r3, #0]
}
 800f446:	bf00      	nop
 800f448:	46bd      	mov	sp, r7
 800f44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44e:	4770      	bx	lr
 800f450:	20001250 	.word	0x20001250

0800f454 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b082      	sub	sp, #8
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f45c:	f000 f852 	bl	800f504 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f460:	4b06      	ldr	r3, [pc, #24]	; (800f47c <prvIdleTask+0x28>)
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	2b01      	cmp	r3, #1
 800f466:	d9f9      	bls.n	800f45c <prvIdleTask+0x8>
			{
				taskYIELD();
 800f468:	4b05      	ldr	r3, [pc, #20]	; (800f480 <prvIdleTask+0x2c>)
 800f46a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f46e:	601a      	str	r2, [r3, #0]
 800f470:	f3bf 8f4f 	dsb	sy
 800f474:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f478:	e7f0      	b.n	800f45c <prvIdleTask+0x8>
 800f47a:	bf00      	nop
 800f47c:	20000d6c 	.word	0x20000d6c
 800f480:	e000ed04 	.word	0xe000ed04

0800f484 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b082      	sub	sp, #8
 800f488:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f48a:	2300      	movs	r3, #0
 800f48c:	607b      	str	r3, [r7, #4]
 800f48e:	e00c      	b.n	800f4aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f490:	687a      	ldr	r2, [r7, #4]
 800f492:	4613      	mov	r3, r2
 800f494:	009b      	lsls	r3, r3, #2
 800f496:	4413      	add	r3, r2
 800f498:	009b      	lsls	r3, r3, #2
 800f49a:	4a12      	ldr	r2, [pc, #72]	; (800f4e4 <prvInitialiseTaskLists+0x60>)
 800f49c:	4413      	add	r3, r2
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f7fe faae 	bl	800da00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	3301      	adds	r3, #1
 800f4a8:	607b      	str	r3, [r7, #4]
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2b37      	cmp	r3, #55	; 0x37
 800f4ae:	d9ef      	bls.n	800f490 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f4b0:	480d      	ldr	r0, [pc, #52]	; (800f4e8 <prvInitialiseTaskLists+0x64>)
 800f4b2:	f7fe faa5 	bl	800da00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f4b6:	480d      	ldr	r0, [pc, #52]	; (800f4ec <prvInitialiseTaskLists+0x68>)
 800f4b8:	f7fe faa2 	bl	800da00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f4bc:	480c      	ldr	r0, [pc, #48]	; (800f4f0 <prvInitialiseTaskLists+0x6c>)
 800f4be:	f7fe fa9f 	bl	800da00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f4c2:	480c      	ldr	r0, [pc, #48]	; (800f4f4 <prvInitialiseTaskLists+0x70>)
 800f4c4:	f7fe fa9c 	bl	800da00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f4c8:	480b      	ldr	r0, [pc, #44]	; (800f4f8 <prvInitialiseTaskLists+0x74>)
 800f4ca:	f7fe fa99 	bl	800da00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f4ce:	4b0b      	ldr	r3, [pc, #44]	; (800f4fc <prvInitialiseTaskLists+0x78>)
 800f4d0:	4a05      	ldr	r2, [pc, #20]	; (800f4e8 <prvInitialiseTaskLists+0x64>)
 800f4d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f4d4:	4b0a      	ldr	r3, [pc, #40]	; (800f500 <prvInitialiseTaskLists+0x7c>)
 800f4d6:	4a05      	ldr	r2, [pc, #20]	; (800f4ec <prvInitialiseTaskLists+0x68>)
 800f4d8:	601a      	str	r2, [r3, #0]
}
 800f4da:	bf00      	nop
 800f4dc:	3708      	adds	r7, #8
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}
 800f4e2:	bf00      	nop
 800f4e4:	20000d6c 	.word	0x20000d6c
 800f4e8:	200011cc 	.word	0x200011cc
 800f4ec:	200011e0 	.word	0x200011e0
 800f4f0:	200011fc 	.word	0x200011fc
 800f4f4:	20001210 	.word	0x20001210
 800f4f8:	20001228 	.word	0x20001228
 800f4fc:	200011f4 	.word	0x200011f4
 800f500:	200011f8 	.word	0x200011f8

0800f504 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b082      	sub	sp, #8
 800f508:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f50a:	e019      	b.n	800f540 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f50c:	f000 fee2 	bl	80102d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f510:	4b10      	ldr	r3, [pc, #64]	; (800f554 <prvCheckTasksWaitingTermination+0x50>)
 800f512:	68db      	ldr	r3, [r3, #12]
 800f514:	68db      	ldr	r3, [r3, #12]
 800f516:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	3304      	adds	r3, #4
 800f51c:	4618      	mov	r0, r3
 800f51e:	f7fe faf9 	bl	800db14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f522:	4b0d      	ldr	r3, [pc, #52]	; (800f558 <prvCheckTasksWaitingTermination+0x54>)
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	3b01      	subs	r3, #1
 800f528:	4a0b      	ldr	r2, [pc, #44]	; (800f558 <prvCheckTasksWaitingTermination+0x54>)
 800f52a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f52c:	4b0b      	ldr	r3, [pc, #44]	; (800f55c <prvCheckTasksWaitingTermination+0x58>)
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	3b01      	subs	r3, #1
 800f532:	4a0a      	ldr	r2, [pc, #40]	; (800f55c <prvCheckTasksWaitingTermination+0x58>)
 800f534:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f536:	f000 fefd 	bl	8010334 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f53a:	6878      	ldr	r0, [r7, #4]
 800f53c:	f000 f810 	bl	800f560 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f540:	4b06      	ldr	r3, [pc, #24]	; (800f55c <prvCheckTasksWaitingTermination+0x58>)
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d1e1      	bne.n	800f50c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f548:	bf00      	nop
 800f54a:	bf00      	nop
 800f54c:	3708      	adds	r7, #8
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}
 800f552:	bf00      	nop
 800f554:	20001210 	.word	0x20001210
 800f558:	2000123c 	.word	0x2000123c
 800f55c:	20001224 	.word	0x20001224

0800f560 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f560:	b580      	push	{r7, lr}
 800f562:	b084      	sub	sp, #16
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	3354      	adds	r3, #84	; 0x54
 800f56c:	4618      	mov	r0, r3
 800f56e:	f002 ff69 	bl	8012444 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d108      	bne.n	800f58e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f580:	4618      	mov	r0, r3
 800f582:	f001 f895 	bl	80106b0 <vPortFree>
				vPortFree( pxTCB );
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	f001 f892 	bl	80106b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f58c:	e018      	b.n	800f5c0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f594:	2b01      	cmp	r3, #1
 800f596:	d103      	bne.n	800f5a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f598:	6878      	ldr	r0, [r7, #4]
 800f59a:	f001 f889 	bl	80106b0 <vPortFree>
	}
 800f59e:	e00f      	b.n	800f5c0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f5a6:	2b02      	cmp	r3, #2
 800f5a8:	d00a      	beq.n	800f5c0 <prvDeleteTCB+0x60>
	__asm volatile
 800f5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ae:	f383 8811 	msr	BASEPRI, r3
 800f5b2:	f3bf 8f6f 	isb	sy
 800f5b6:	f3bf 8f4f 	dsb	sy
 800f5ba:	60fb      	str	r3, [r7, #12]
}
 800f5bc:	bf00      	nop
 800f5be:	e7fe      	b.n	800f5be <prvDeleteTCB+0x5e>
	}
 800f5c0:	bf00      	nop
 800f5c2:	3710      	adds	r7, #16
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	bd80      	pop	{r7, pc}

0800f5c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f5c8:	b480      	push	{r7}
 800f5ca:	b083      	sub	sp, #12
 800f5cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f5ce:	4b0c      	ldr	r3, [pc, #48]	; (800f600 <prvResetNextTaskUnblockTime+0x38>)
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d104      	bne.n	800f5e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f5d8:	4b0a      	ldr	r3, [pc, #40]	; (800f604 <prvResetNextTaskUnblockTime+0x3c>)
 800f5da:	f04f 32ff 	mov.w	r2, #4294967295
 800f5de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f5e0:	e008      	b.n	800f5f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f5e2:	4b07      	ldr	r3, [pc, #28]	; (800f600 <prvResetNextTaskUnblockTime+0x38>)
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	68db      	ldr	r3, [r3, #12]
 800f5e8:	68db      	ldr	r3, [r3, #12]
 800f5ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	685b      	ldr	r3, [r3, #4]
 800f5f0:	4a04      	ldr	r2, [pc, #16]	; (800f604 <prvResetNextTaskUnblockTime+0x3c>)
 800f5f2:	6013      	str	r3, [r2, #0]
}
 800f5f4:	bf00      	nop
 800f5f6:	370c      	adds	r7, #12
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fe:	4770      	bx	lr
 800f600:	200011f4 	.word	0x200011f4
 800f604:	2000125c 	.word	0x2000125c

0800f608 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800f608:	b480      	push	{r7}
 800f60a:	b083      	sub	sp, #12
 800f60c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800f60e:	4b05      	ldr	r3, [pc, #20]	; (800f624 <xTaskGetCurrentTaskHandle+0x1c>)
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	607b      	str	r3, [r7, #4]

		return xReturn;
 800f614:	687b      	ldr	r3, [r7, #4]
	}
 800f616:	4618      	mov	r0, r3
 800f618:	370c      	adds	r7, #12
 800f61a:	46bd      	mov	sp, r7
 800f61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f620:	4770      	bx	lr
 800f622:	bf00      	nop
 800f624:	20000d68 	.word	0x20000d68

0800f628 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f628:	b480      	push	{r7}
 800f62a:	b083      	sub	sp, #12
 800f62c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f62e:	4b0b      	ldr	r3, [pc, #44]	; (800f65c <xTaskGetSchedulerState+0x34>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d102      	bne.n	800f63c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f636:	2301      	movs	r3, #1
 800f638:	607b      	str	r3, [r7, #4]
 800f63a:	e008      	b.n	800f64e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f63c:	4b08      	ldr	r3, [pc, #32]	; (800f660 <xTaskGetSchedulerState+0x38>)
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d102      	bne.n	800f64a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f644:	2302      	movs	r3, #2
 800f646:	607b      	str	r3, [r7, #4]
 800f648:	e001      	b.n	800f64e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f64a:	2300      	movs	r3, #0
 800f64c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f64e:	687b      	ldr	r3, [r7, #4]
	}
 800f650:	4618      	mov	r0, r3
 800f652:	370c      	adds	r7, #12
 800f654:	46bd      	mov	sp, r7
 800f656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65a:	4770      	bx	lr
 800f65c:	20001248 	.word	0x20001248
 800f660:	20001264 	.word	0x20001264

0800f664 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f664:	b580      	push	{r7, lr}
 800f666:	b084      	sub	sp, #16
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f670:	2300      	movs	r3, #0
 800f672:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d051      	beq.n	800f71e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f67a:	68bb      	ldr	r3, [r7, #8]
 800f67c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f67e:	4b2a      	ldr	r3, [pc, #168]	; (800f728 <xTaskPriorityInherit+0xc4>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f684:	429a      	cmp	r2, r3
 800f686:	d241      	bcs.n	800f70c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f688:	68bb      	ldr	r3, [r7, #8]
 800f68a:	699b      	ldr	r3, [r3, #24]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	db06      	blt.n	800f69e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f690:	4b25      	ldr	r3, [pc, #148]	; (800f728 <xTaskPriorityInherit+0xc4>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f696:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f69a:	68bb      	ldr	r3, [r7, #8]
 800f69c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f69e:	68bb      	ldr	r3, [r7, #8]
 800f6a0:	6959      	ldr	r1, [r3, #20]
 800f6a2:	68bb      	ldr	r3, [r7, #8]
 800f6a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6a6:	4613      	mov	r3, r2
 800f6a8:	009b      	lsls	r3, r3, #2
 800f6aa:	4413      	add	r3, r2
 800f6ac:	009b      	lsls	r3, r3, #2
 800f6ae:	4a1f      	ldr	r2, [pc, #124]	; (800f72c <xTaskPriorityInherit+0xc8>)
 800f6b0:	4413      	add	r3, r2
 800f6b2:	4299      	cmp	r1, r3
 800f6b4:	d122      	bne.n	800f6fc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f6b6:	68bb      	ldr	r3, [r7, #8]
 800f6b8:	3304      	adds	r3, #4
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f7fe fa2a 	bl	800db14 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f6c0:	4b19      	ldr	r3, [pc, #100]	; (800f728 <xTaskPriorityInherit+0xc4>)
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6c6:	68bb      	ldr	r3, [r7, #8]
 800f6c8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f6ca:	68bb      	ldr	r3, [r7, #8]
 800f6cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6ce:	4b18      	ldr	r3, [pc, #96]	; (800f730 <xTaskPriorityInherit+0xcc>)
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	429a      	cmp	r2, r3
 800f6d4:	d903      	bls.n	800f6de <xTaskPriorityInherit+0x7a>
 800f6d6:	68bb      	ldr	r3, [r7, #8]
 800f6d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6da:	4a15      	ldr	r2, [pc, #84]	; (800f730 <xTaskPriorityInherit+0xcc>)
 800f6dc:	6013      	str	r3, [r2, #0]
 800f6de:	68bb      	ldr	r3, [r7, #8]
 800f6e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6e2:	4613      	mov	r3, r2
 800f6e4:	009b      	lsls	r3, r3, #2
 800f6e6:	4413      	add	r3, r2
 800f6e8:	009b      	lsls	r3, r3, #2
 800f6ea:	4a10      	ldr	r2, [pc, #64]	; (800f72c <xTaskPriorityInherit+0xc8>)
 800f6ec:	441a      	add	r2, r3
 800f6ee:	68bb      	ldr	r3, [r7, #8]
 800f6f0:	3304      	adds	r3, #4
 800f6f2:	4619      	mov	r1, r3
 800f6f4:	4610      	mov	r0, r2
 800f6f6:	f7fe f9b0 	bl	800da5a <vListInsertEnd>
 800f6fa:	e004      	b.n	800f706 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f6fc:	4b0a      	ldr	r3, [pc, #40]	; (800f728 <xTaskPriorityInherit+0xc4>)
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f702:	68bb      	ldr	r3, [r7, #8]
 800f704:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f706:	2301      	movs	r3, #1
 800f708:	60fb      	str	r3, [r7, #12]
 800f70a:	e008      	b.n	800f71e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f710:	4b05      	ldr	r3, [pc, #20]	; (800f728 <xTaskPriorityInherit+0xc4>)
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f716:	429a      	cmp	r2, r3
 800f718:	d201      	bcs.n	800f71e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f71a:	2301      	movs	r3, #1
 800f71c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f71e:	68fb      	ldr	r3, [r7, #12]
	}
 800f720:	4618      	mov	r0, r3
 800f722:	3710      	adds	r7, #16
 800f724:	46bd      	mov	sp, r7
 800f726:	bd80      	pop	{r7, pc}
 800f728:	20000d68 	.word	0x20000d68
 800f72c:	20000d6c 	.word	0x20000d6c
 800f730:	20001244 	.word	0x20001244

0800f734 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f734:	b580      	push	{r7, lr}
 800f736:	b086      	sub	sp, #24
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f740:	2300      	movs	r3, #0
 800f742:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d056      	beq.n	800f7f8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f74a:	4b2e      	ldr	r3, [pc, #184]	; (800f804 <xTaskPriorityDisinherit+0xd0>)
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	693a      	ldr	r2, [r7, #16]
 800f750:	429a      	cmp	r2, r3
 800f752:	d00a      	beq.n	800f76a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f758:	f383 8811 	msr	BASEPRI, r3
 800f75c:	f3bf 8f6f 	isb	sy
 800f760:	f3bf 8f4f 	dsb	sy
 800f764:	60fb      	str	r3, [r7, #12]
}
 800f766:	bf00      	nop
 800f768:	e7fe      	b.n	800f768 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f76a:	693b      	ldr	r3, [r7, #16]
 800f76c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d10a      	bne.n	800f788 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f776:	f383 8811 	msr	BASEPRI, r3
 800f77a:	f3bf 8f6f 	isb	sy
 800f77e:	f3bf 8f4f 	dsb	sy
 800f782:	60bb      	str	r3, [r7, #8]
}
 800f784:	bf00      	nop
 800f786:	e7fe      	b.n	800f786 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f788:	693b      	ldr	r3, [r7, #16]
 800f78a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f78c:	1e5a      	subs	r2, r3, #1
 800f78e:	693b      	ldr	r3, [r7, #16]
 800f790:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f792:	693b      	ldr	r3, [r7, #16]
 800f794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f796:	693b      	ldr	r3, [r7, #16]
 800f798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f79a:	429a      	cmp	r2, r3
 800f79c:	d02c      	beq.n	800f7f8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f79e:	693b      	ldr	r3, [r7, #16]
 800f7a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d128      	bne.n	800f7f8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f7a6:	693b      	ldr	r3, [r7, #16]
 800f7a8:	3304      	adds	r3, #4
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f7fe f9b2 	bl	800db14 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f7b0:	693b      	ldr	r3, [r7, #16]
 800f7b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f7b4:	693b      	ldr	r3, [r7, #16]
 800f7b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f7b8:	693b      	ldr	r3, [r7, #16]
 800f7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f7c0:	693b      	ldr	r3, [r7, #16]
 800f7c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f7c4:	693b      	ldr	r3, [r7, #16]
 800f7c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7c8:	4b0f      	ldr	r3, [pc, #60]	; (800f808 <xTaskPriorityDisinherit+0xd4>)
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	429a      	cmp	r2, r3
 800f7ce:	d903      	bls.n	800f7d8 <xTaskPriorityDisinherit+0xa4>
 800f7d0:	693b      	ldr	r3, [r7, #16]
 800f7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7d4:	4a0c      	ldr	r2, [pc, #48]	; (800f808 <xTaskPriorityDisinherit+0xd4>)
 800f7d6:	6013      	str	r3, [r2, #0]
 800f7d8:	693b      	ldr	r3, [r7, #16]
 800f7da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7dc:	4613      	mov	r3, r2
 800f7de:	009b      	lsls	r3, r3, #2
 800f7e0:	4413      	add	r3, r2
 800f7e2:	009b      	lsls	r3, r3, #2
 800f7e4:	4a09      	ldr	r2, [pc, #36]	; (800f80c <xTaskPriorityDisinherit+0xd8>)
 800f7e6:	441a      	add	r2, r3
 800f7e8:	693b      	ldr	r3, [r7, #16]
 800f7ea:	3304      	adds	r3, #4
 800f7ec:	4619      	mov	r1, r3
 800f7ee:	4610      	mov	r0, r2
 800f7f0:	f7fe f933 	bl	800da5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f7f4:	2301      	movs	r3, #1
 800f7f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f7f8:	697b      	ldr	r3, [r7, #20]
	}
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	3718      	adds	r7, #24
 800f7fe:	46bd      	mov	sp, r7
 800f800:	bd80      	pop	{r7, pc}
 800f802:	bf00      	nop
 800f804:	20000d68 	.word	0x20000d68
 800f808:	20001244 	.word	0x20001244
 800f80c:	20000d6c 	.word	0x20000d6c

0800f810 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f810:	b580      	push	{r7, lr}
 800f812:	b088      	sub	sp, #32
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
 800f818:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f81e:	2301      	movs	r3, #1
 800f820:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d06a      	beq.n	800f8fe <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f828:	69bb      	ldr	r3, [r7, #24]
 800f82a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d10a      	bne.n	800f846 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800f830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f834:	f383 8811 	msr	BASEPRI, r3
 800f838:	f3bf 8f6f 	isb	sy
 800f83c:	f3bf 8f4f 	dsb	sy
 800f840:	60fb      	str	r3, [r7, #12]
}
 800f842:	bf00      	nop
 800f844:	e7fe      	b.n	800f844 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f846:	69bb      	ldr	r3, [r7, #24]
 800f848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f84a:	683a      	ldr	r2, [r7, #0]
 800f84c:	429a      	cmp	r2, r3
 800f84e:	d902      	bls.n	800f856 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f850:	683b      	ldr	r3, [r7, #0]
 800f852:	61fb      	str	r3, [r7, #28]
 800f854:	e002      	b.n	800f85c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f856:	69bb      	ldr	r3, [r7, #24]
 800f858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f85a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f85c:	69bb      	ldr	r3, [r7, #24]
 800f85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f860:	69fa      	ldr	r2, [r7, #28]
 800f862:	429a      	cmp	r2, r3
 800f864:	d04b      	beq.n	800f8fe <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f866:	69bb      	ldr	r3, [r7, #24]
 800f868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f86a:	697a      	ldr	r2, [r7, #20]
 800f86c:	429a      	cmp	r2, r3
 800f86e:	d146      	bne.n	800f8fe <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f870:	4b25      	ldr	r3, [pc, #148]	; (800f908 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	69ba      	ldr	r2, [r7, #24]
 800f876:	429a      	cmp	r2, r3
 800f878:	d10a      	bne.n	800f890 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800f87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f87e:	f383 8811 	msr	BASEPRI, r3
 800f882:	f3bf 8f6f 	isb	sy
 800f886:	f3bf 8f4f 	dsb	sy
 800f88a:	60bb      	str	r3, [r7, #8]
}
 800f88c:	bf00      	nop
 800f88e:	e7fe      	b.n	800f88e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f890:	69bb      	ldr	r3, [r7, #24]
 800f892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f894:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f896:	69bb      	ldr	r3, [r7, #24]
 800f898:	69fa      	ldr	r2, [r7, #28]
 800f89a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f89c:	69bb      	ldr	r3, [r7, #24]
 800f89e:	699b      	ldr	r3, [r3, #24]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	db04      	blt.n	800f8ae <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f8a4:	69fb      	ldr	r3, [r7, #28]
 800f8a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f8aa:	69bb      	ldr	r3, [r7, #24]
 800f8ac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f8ae:	69bb      	ldr	r3, [r7, #24]
 800f8b0:	6959      	ldr	r1, [r3, #20]
 800f8b2:	693a      	ldr	r2, [r7, #16]
 800f8b4:	4613      	mov	r3, r2
 800f8b6:	009b      	lsls	r3, r3, #2
 800f8b8:	4413      	add	r3, r2
 800f8ba:	009b      	lsls	r3, r3, #2
 800f8bc:	4a13      	ldr	r2, [pc, #76]	; (800f90c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f8be:	4413      	add	r3, r2
 800f8c0:	4299      	cmp	r1, r3
 800f8c2:	d11c      	bne.n	800f8fe <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f8c4:	69bb      	ldr	r3, [r7, #24]
 800f8c6:	3304      	adds	r3, #4
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	f7fe f923 	bl	800db14 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f8ce:	69bb      	ldr	r3, [r7, #24]
 800f8d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8d2:	4b0f      	ldr	r3, [pc, #60]	; (800f910 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	429a      	cmp	r2, r3
 800f8d8:	d903      	bls.n	800f8e2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800f8da:	69bb      	ldr	r3, [r7, #24]
 800f8dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8de:	4a0c      	ldr	r2, [pc, #48]	; (800f910 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f8e0:	6013      	str	r3, [r2, #0]
 800f8e2:	69bb      	ldr	r3, [r7, #24]
 800f8e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8e6:	4613      	mov	r3, r2
 800f8e8:	009b      	lsls	r3, r3, #2
 800f8ea:	4413      	add	r3, r2
 800f8ec:	009b      	lsls	r3, r3, #2
 800f8ee:	4a07      	ldr	r2, [pc, #28]	; (800f90c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f8f0:	441a      	add	r2, r3
 800f8f2:	69bb      	ldr	r3, [r7, #24]
 800f8f4:	3304      	adds	r3, #4
 800f8f6:	4619      	mov	r1, r3
 800f8f8:	4610      	mov	r0, r2
 800f8fa:	f7fe f8ae 	bl	800da5a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f8fe:	bf00      	nop
 800f900:	3720      	adds	r7, #32
 800f902:	46bd      	mov	sp, r7
 800f904:	bd80      	pop	{r7, pc}
 800f906:	bf00      	nop
 800f908:	20000d68 	.word	0x20000d68
 800f90c:	20000d6c 	.word	0x20000d6c
 800f910:	20001244 	.word	0x20001244

0800f914 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f914:	b480      	push	{r7}
 800f916:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f918:	4b07      	ldr	r3, [pc, #28]	; (800f938 <pvTaskIncrementMutexHeldCount+0x24>)
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d004      	beq.n	800f92a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f920:	4b05      	ldr	r3, [pc, #20]	; (800f938 <pvTaskIncrementMutexHeldCount+0x24>)
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f926:	3201      	adds	r2, #1
 800f928:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800f92a:	4b03      	ldr	r3, [pc, #12]	; (800f938 <pvTaskIncrementMutexHeldCount+0x24>)
 800f92c:	681b      	ldr	r3, [r3, #0]
	}
 800f92e:	4618      	mov	r0, r3
 800f930:	46bd      	mov	sp, r7
 800f932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f936:	4770      	bx	lr
 800f938:	20000d68 	.word	0x20000d68

0800f93c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b084      	sub	sp, #16
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
 800f944:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f946:	4b21      	ldr	r3, [pc, #132]	; (800f9cc <prvAddCurrentTaskToDelayedList+0x90>)
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f94c:	4b20      	ldr	r3, [pc, #128]	; (800f9d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	3304      	adds	r3, #4
 800f952:	4618      	mov	r0, r3
 800f954:	f7fe f8de 	bl	800db14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f95e:	d10a      	bne.n	800f976 <prvAddCurrentTaskToDelayedList+0x3a>
 800f960:	683b      	ldr	r3, [r7, #0]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d007      	beq.n	800f976 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f966:	4b1a      	ldr	r3, [pc, #104]	; (800f9d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	3304      	adds	r3, #4
 800f96c:	4619      	mov	r1, r3
 800f96e:	4819      	ldr	r0, [pc, #100]	; (800f9d4 <prvAddCurrentTaskToDelayedList+0x98>)
 800f970:	f7fe f873 	bl	800da5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f974:	e026      	b.n	800f9c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f976:	68fa      	ldr	r2, [r7, #12]
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	4413      	add	r3, r2
 800f97c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f97e:	4b14      	ldr	r3, [pc, #80]	; (800f9d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	68ba      	ldr	r2, [r7, #8]
 800f984:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f986:	68ba      	ldr	r2, [r7, #8]
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	429a      	cmp	r2, r3
 800f98c:	d209      	bcs.n	800f9a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f98e:	4b12      	ldr	r3, [pc, #72]	; (800f9d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f990:	681a      	ldr	r2, [r3, #0]
 800f992:	4b0f      	ldr	r3, [pc, #60]	; (800f9d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	3304      	adds	r3, #4
 800f998:	4619      	mov	r1, r3
 800f99a:	4610      	mov	r0, r2
 800f99c:	f7fe f881 	bl	800daa2 <vListInsert>
}
 800f9a0:	e010      	b.n	800f9c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f9a2:	4b0e      	ldr	r3, [pc, #56]	; (800f9dc <prvAddCurrentTaskToDelayedList+0xa0>)
 800f9a4:	681a      	ldr	r2, [r3, #0]
 800f9a6:	4b0a      	ldr	r3, [pc, #40]	; (800f9d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	3304      	adds	r3, #4
 800f9ac:	4619      	mov	r1, r3
 800f9ae:	4610      	mov	r0, r2
 800f9b0:	f7fe f877 	bl	800daa2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f9b4:	4b0a      	ldr	r3, [pc, #40]	; (800f9e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	68ba      	ldr	r2, [r7, #8]
 800f9ba:	429a      	cmp	r2, r3
 800f9bc:	d202      	bcs.n	800f9c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f9be:	4a08      	ldr	r2, [pc, #32]	; (800f9e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f9c0:	68bb      	ldr	r3, [r7, #8]
 800f9c2:	6013      	str	r3, [r2, #0]
}
 800f9c4:	bf00      	nop
 800f9c6:	3710      	adds	r7, #16
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	bd80      	pop	{r7, pc}
 800f9cc:	20001240 	.word	0x20001240
 800f9d0:	20000d68 	.word	0x20000d68
 800f9d4:	20001228 	.word	0x20001228
 800f9d8:	200011f8 	.word	0x200011f8
 800f9dc:	200011f4 	.word	0x200011f4
 800f9e0:	2000125c 	.word	0x2000125c

0800f9e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b08a      	sub	sp, #40	; 0x28
 800f9e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f9ee:	f000 fb07 	bl	8010000 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f9f2:	4b1c      	ldr	r3, [pc, #112]	; (800fa64 <xTimerCreateTimerTask+0x80>)
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d021      	beq.n	800fa3e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f9fe:	2300      	movs	r3, #0
 800fa00:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fa02:	1d3a      	adds	r2, r7, #4
 800fa04:	f107 0108 	add.w	r1, r7, #8
 800fa08:	f107 030c 	add.w	r3, r7, #12
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f7fd ffdd 	bl	800d9cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fa12:	6879      	ldr	r1, [r7, #4]
 800fa14:	68bb      	ldr	r3, [r7, #8]
 800fa16:	68fa      	ldr	r2, [r7, #12]
 800fa18:	9202      	str	r2, [sp, #8]
 800fa1a:	9301      	str	r3, [sp, #4]
 800fa1c:	2302      	movs	r3, #2
 800fa1e:	9300      	str	r3, [sp, #0]
 800fa20:	2300      	movs	r3, #0
 800fa22:	460a      	mov	r2, r1
 800fa24:	4910      	ldr	r1, [pc, #64]	; (800fa68 <xTimerCreateTimerTask+0x84>)
 800fa26:	4811      	ldr	r0, [pc, #68]	; (800fa6c <xTimerCreateTimerTask+0x88>)
 800fa28:	f7fe ff34 	bl	800e894 <xTaskCreateStatic>
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	4a10      	ldr	r2, [pc, #64]	; (800fa70 <xTimerCreateTimerTask+0x8c>)
 800fa30:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fa32:	4b0f      	ldr	r3, [pc, #60]	; (800fa70 <xTimerCreateTimerTask+0x8c>)
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d001      	beq.n	800fa3e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fa3a:	2301      	movs	r3, #1
 800fa3c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fa3e:	697b      	ldr	r3, [r7, #20]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d10a      	bne.n	800fa5a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800fa44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa48:	f383 8811 	msr	BASEPRI, r3
 800fa4c:	f3bf 8f6f 	isb	sy
 800fa50:	f3bf 8f4f 	dsb	sy
 800fa54:	613b      	str	r3, [r7, #16]
}
 800fa56:	bf00      	nop
 800fa58:	e7fe      	b.n	800fa58 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800fa5a:	697b      	ldr	r3, [r7, #20]
}
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	3718      	adds	r7, #24
 800fa60:	46bd      	mov	sp, r7
 800fa62:	bd80      	pop	{r7, pc}
 800fa64:	20001298 	.word	0x20001298
 800fa68:	0801691c 	.word	0x0801691c
 800fa6c:	0800fba9 	.word	0x0800fba9
 800fa70:	2000129c 	.word	0x2000129c

0800fa74 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b08a      	sub	sp, #40	; 0x28
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	60f8      	str	r0, [r7, #12]
 800fa7c:	60b9      	str	r1, [r7, #8]
 800fa7e:	607a      	str	r2, [r7, #4]
 800fa80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fa82:	2300      	movs	r3, #0
 800fa84:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d10a      	bne.n	800faa2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800fa8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa90:	f383 8811 	msr	BASEPRI, r3
 800fa94:	f3bf 8f6f 	isb	sy
 800fa98:	f3bf 8f4f 	dsb	sy
 800fa9c:	623b      	str	r3, [r7, #32]
}
 800fa9e:	bf00      	nop
 800faa0:	e7fe      	b.n	800faa0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800faa2:	4b1a      	ldr	r3, [pc, #104]	; (800fb0c <xTimerGenericCommand+0x98>)
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d02a      	beq.n	800fb00 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800faaa:	68bb      	ldr	r3, [r7, #8]
 800faac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fab6:	68bb      	ldr	r3, [r7, #8]
 800fab8:	2b05      	cmp	r3, #5
 800faba:	dc18      	bgt.n	800faee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fabc:	f7ff fdb4 	bl	800f628 <xTaskGetSchedulerState>
 800fac0:	4603      	mov	r3, r0
 800fac2:	2b02      	cmp	r3, #2
 800fac4:	d109      	bne.n	800fada <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fac6:	4b11      	ldr	r3, [pc, #68]	; (800fb0c <xTimerGenericCommand+0x98>)
 800fac8:	6818      	ldr	r0, [r3, #0]
 800faca:	f107 0110 	add.w	r1, r7, #16
 800face:	2300      	movs	r3, #0
 800fad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fad2:	f7fe f9d3 	bl	800de7c <xQueueGenericSend>
 800fad6:	6278      	str	r0, [r7, #36]	; 0x24
 800fad8:	e012      	b.n	800fb00 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fada:	4b0c      	ldr	r3, [pc, #48]	; (800fb0c <xTimerGenericCommand+0x98>)
 800fadc:	6818      	ldr	r0, [r3, #0]
 800fade:	f107 0110 	add.w	r1, r7, #16
 800fae2:	2300      	movs	r3, #0
 800fae4:	2200      	movs	r2, #0
 800fae6:	f7fe f9c9 	bl	800de7c <xQueueGenericSend>
 800faea:	6278      	str	r0, [r7, #36]	; 0x24
 800faec:	e008      	b.n	800fb00 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800faee:	4b07      	ldr	r3, [pc, #28]	; (800fb0c <xTimerGenericCommand+0x98>)
 800faf0:	6818      	ldr	r0, [r3, #0]
 800faf2:	f107 0110 	add.w	r1, r7, #16
 800faf6:	2300      	movs	r3, #0
 800faf8:	683a      	ldr	r2, [r7, #0]
 800fafa:	f7fe fabd 	bl	800e078 <xQueueGenericSendFromISR>
 800fafe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fb02:	4618      	mov	r0, r3
 800fb04:	3728      	adds	r7, #40	; 0x28
 800fb06:	46bd      	mov	sp, r7
 800fb08:	bd80      	pop	{r7, pc}
 800fb0a:	bf00      	nop
 800fb0c:	20001298 	.word	0x20001298

0800fb10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b088      	sub	sp, #32
 800fb14:	af02      	add	r7, sp, #8
 800fb16:	6078      	str	r0, [r7, #4]
 800fb18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb1a:	4b22      	ldr	r3, [pc, #136]	; (800fba4 <prvProcessExpiredTimer+0x94>)
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	68db      	ldr	r3, [r3, #12]
 800fb20:	68db      	ldr	r3, [r3, #12]
 800fb22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fb24:	697b      	ldr	r3, [r7, #20]
 800fb26:	3304      	adds	r3, #4
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f7fd fff3 	bl	800db14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fb2e:	697b      	ldr	r3, [r7, #20]
 800fb30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb34:	f003 0304 	and.w	r3, r3, #4
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d022      	beq.n	800fb82 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fb3c:	697b      	ldr	r3, [r7, #20]
 800fb3e:	699a      	ldr	r2, [r3, #24]
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	18d1      	adds	r1, r2, r3
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	683a      	ldr	r2, [r7, #0]
 800fb48:	6978      	ldr	r0, [r7, #20]
 800fb4a:	f000 f8d1 	bl	800fcf0 <prvInsertTimerInActiveList>
 800fb4e:	4603      	mov	r3, r0
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d01f      	beq.n	800fb94 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fb54:	2300      	movs	r3, #0
 800fb56:	9300      	str	r3, [sp, #0]
 800fb58:	2300      	movs	r3, #0
 800fb5a:	687a      	ldr	r2, [r7, #4]
 800fb5c:	2100      	movs	r1, #0
 800fb5e:	6978      	ldr	r0, [r7, #20]
 800fb60:	f7ff ff88 	bl	800fa74 <xTimerGenericCommand>
 800fb64:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fb66:	693b      	ldr	r3, [r7, #16]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d113      	bne.n	800fb94 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800fb6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb70:	f383 8811 	msr	BASEPRI, r3
 800fb74:	f3bf 8f6f 	isb	sy
 800fb78:	f3bf 8f4f 	dsb	sy
 800fb7c:	60fb      	str	r3, [r7, #12]
}
 800fb7e:	bf00      	nop
 800fb80:	e7fe      	b.n	800fb80 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fb82:	697b      	ldr	r3, [r7, #20]
 800fb84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb88:	f023 0301 	bic.w	r3, r3, #1
 800fb8c:	b2da      	uxtb	r2, r3
 800fb8e:	697b      	ldr	r3, [r7, #20]
 800fb90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fb94:	697b      	ldr	r3, [r7, #20]
 800fb96:	6a1b      	ldr	r3, [r3, #32]
 800fb98:	6978      	ldr	r0, [r7, #20]
 800fb9a:	4798      	blx	r3
}
 800fb9c:	bf00      	nop
 800fb9e:	3718      	adds	r7, #24
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}
 800fba4:	20001290 	.word	0x20001290

0800fba8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b084      	sub	sp, #16
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fbb0:	f107 0308 	add.w	r3, r7, #8
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	f000 f857 	bl	800fc68 <prvGetNextExpireTime>
 800fbba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fbbc:	68bb      	ldr	r3, [r7, #8]
 800fbbe:	4619      	mov	r1, r3
 800fbc0:	68f8      	ldr	r0, [r7, #12]
 800fbc2:	f000 f803 	bl	800fbcc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fbc6:	f000 f8d5 	bl	800fd74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fbca:	e7f1      	b.n	800fbb0 <prvTimerTask+0x8>

0800fbcc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b084      	sub	sp, #16
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
 800fbd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fbd6:	f7ff f92b 	bl	800ee30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fbda:	f107 0308 	add.w	r3, r7, #8
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f000 f866 	bl	800fcb0 <prvSampleTimeNow>
 800fbe4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fbe6:	68bb      	ldr	r3, [r7, #8]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d130      	bne.n	800fc4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d10a      	bne.n	800fc08 <prvProcessTimerOrBlockTask+0x3c>
 800fbf2:	687a      	ldr	r2, [r7, #4]
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	429a      	cmp	r2, r3
 800fbf8:	d806      	bhi.n	800fc08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fbfa:	f7ff f927 	bl	800ee4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fbfe:	68f9      	ldr	r1, [r7, #12]
 800fc00:	6878      	ldr	r0, [r7, #4]
 800fc02:	f7ff ff85 	bl	800fb10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fc06:	e024      	b.n	800fc52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d008      	beq.n	800fc20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fc0e:	4b13      	ldr	r3, [pc, #76]	; (800fc5c <prvProcessTimerOrBlockTask+0x90>)
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d101      	bne.n	800fc1c <prvProcessTimerOrBlockTask+0x50>
 800fc18:	2301      	movs	r3, #1
 800fc1a:	e000      	b.n	800fc1e <prvProcessTimerOrBlockTask+0x52>
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fc20:	4b0f      	ldr	r3, [pc, #60]	; (800fc60 <prvProcessTimerOrBlockTask+0x94>)
 800fc22:	6818      	ldr	r0, [r3, #0]
 800fc24:	687a      	ldr	r2, [r7, #4]
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	1ad3      	subs	r3, r2, r3
 800fc2a:	683a      	ldr	r2, [r7, #0]
 800fc2c:	4619      	mov	r1, r3
 800fc2e:	f7fe fdfd 	bl	800e82c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fc32:	f7ff f90b 	bl	800ee4c <xTaskResumeAll>
 800fc36:	4603      	mov	r3, r0
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d10a      	bne.n	800fc52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fc3c:	4b09      	ldr	r3, [pc, #36]	; (800fc64 <prvProcessTimerOrBlockTask+0x98>)
 800fc3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc42:	601a      	str	r2, [r3, #0]
 800fc44:	f3bf 8f4f 	dsb	sy
 800fc48:	f3bf 8f6f 	isb	sy
}
 800fc4c:	e001      	b.n	800fc52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fc4e:	f7ff f8fd 	bl	800ee4c <xTaskResumeAll>
}
 800fc52:	bf00      	nop
 800fc54:	3710      	adds	r7, #16
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bd80      	pop	{r7, pc}
 800fc5a:	bf00      	nop
 800fc5c:	20001294 	.word	0x20001294
 800fc60:	20001298 	.word	0x20001298
 800fc64:	e000ed04 	.word	0xe000ed04

0800fc68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fc68:	b480      	push	{r7}
 800fc6a:	b085      	sub	sp, #20
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fc70:	4b0e      	ldr	r3, [pc, #56]	; (800fcac <prvGetNextExpireTime+0x44>)
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d101      	bne.n	800fc7e <prvGetNextExpireTime+0x16>
 800fc7a:	2201      	movs	r2, #1
 800fc7c:	e000      	b.n	800fc80 <prvGetNextExpireTime+0x18>
 800fc7e:	2200      	movs	r2, #0
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d105      	bne.n	800fc98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fc8c:	4b07      	ldr	r3, [pc, #28]	; (800fcac <prvGetNextExpireTime+0x44>)
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	68db      	ldr	r3, [r3, #12]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	60fb      	str	r3, [r7, #12]
 800fc96:	e001      	b.n	800fc9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fc98:	2300      	movs	r3, #0
 800fc9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fc9c:	68fb      	ldr	r3, [r7, #12]
}
 800fc9e:	4618      	mov	r0, r3
 800fca0:	3714      	adds	r7, #20
 800fca2:	46bd      	mov	sp, r7
 800fca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca8:	4770      	bx	lr
 800fcaa:	bf00      	nop
 800fcac:	20001290 	.word	0x20001290

0800fcb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b084      	sub	sp, #16
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fcb8:	f7ff f966 	bl	800ef88 <xTaskGetTickCount>
 800fcbc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fcbe:	4b0b      	ldr	r3, [pc, #44]	; (800fcec <prvSampleTimeNow+0x3c>)
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	68fa      	ldr	r2, [r7, #12]
 800fcc4:	429a      	cmp	r2, r3
 800fcc6:	d205      	bcs.n	800fcd4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fcc8:	f000 f936 	bl	800ff38 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	2201      	movs	r2, #1
 800fcd0:	601a      	str	r2, [r3, #0]
 800fcd2:	e002      	b.n	800fcda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fcda:	4a04      	ldr	r2, [pc, #16]	; (800fcec <prvSampleTimeNow+0x3c>)
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fce0:	68fb      	ldr	r3, [r7, #12]
}
 800fce2:	4618      	mov	r0, r3
 800fce4:	3710      	adds	r7, #16
 800fce6:	46bd      	mov	sp, r7
 800fce8:	bd80      	pop	{r7, pc}
 800fcea:	bf00      	nop
 800fcec:	200012a0 	.word	0x200012a0

0800fcf0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b086      	sub	sp, #24
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	60f8      	str	r0, [r7, #12]
 800fcf8:	60b9      	str	r1, [r7, #8]
 800fcfa:	607a      	str	r2, [r7, #4]
 800fcfc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fcfe:	2300      	movs	r3, #0
 800fd00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	68ba      	ldr	r2, [r7, #8]
 800fd06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	68fa      	ldr	r2, [r7, #12]
 800fd0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fd0e:	68ba      	ldr	r2, [r7, #8]
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	429a      	cmp	r2, r3
 800fd14:	d812      	bhi.n	800fd3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd16:	687a      	ldr	r2, [r7, #4]
 800fd18:	683b      	ldr	r3, [r7, #0]
 800fd1a:	1ad2      	subs	r2, r2, r3
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	699b      	ldr	r3, [r3, #24]
 800fd20:	429a      	cmp	r2, r3
 800fd22:	d302      	bcc.n	800fd2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fd24:	2301      	movs	r3, #1
 800fd26:	617b      	str	r3, [r7, #20]
 800fd28:	e01b      	b.n	800fd62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fd2a:	4b10      	ldr	r3, [pc, #64]	; (800fd6c <prvInsertTimerInActiveList+0x7c>)
 800fd2c:	681a      	ldr	r2, [r3, #0]
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	3304      	adds	r3, #4
 800fd32:	4619      	mov	r1, r3
 800fd34:	4610      	mov	r0, r2
 800fd36:	f7fd feb4 	bl	800daa2 <vListInsert>
 800fd3a:	e012      	b.n	800fd62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fd3c:	687a      	ldr	r2, [r7, #4]
 800fd3e:	683b      	ldr	r3, [r7, #0]
 800fd40:	429a      	cmp	r2, r3
 800fd42:	d206      	bcs.n	800fd52 <prvInsertTimerInActiveList+0x62>
 800fd44:	68ba      	ldr	r2, [r7, #8]
 800fd46:	683b      	ldr	r3, [r7, #0]
 800fd48:	429a      	cmp	r2, r3
 800fd4a:	d302      	bcc.n	800fd52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fd4c:	2301      	movs	r3, #1
 800fd4e:	617b      	str	r3, [r7, #20]
 800fd50:	e007      	b.n	800fd62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fd52:	4b07      	ldr	r3, [pc, #28]	; (800fd70 <prvInsertTimerInActiveList+0x80>)
 800fd54:	681a      	ldr	r2, [r3, #0]
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	3304      	adds	r3, #4
 800fd5a:	4619      	mov	r1, r3
 800fd5c:	4610      	mov	r0, r2
 800fd5e:	f7fd fea0 	bl	800daa2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fd62:	697b      	ldr	r3, [r7, #20]
}
 800fd64:	4618      	mov	r0, r3
 800fd66:	3718      	adds	r7, #24
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	bd80      	pop	{r7, pc}
 800fd6c:	20001294 	.word	0x20001294
 800fd70:	20001290 	.word	0x20001290

0800fd74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b08e      	sub	sp, #56	; 0x38
 800fd78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fd7a:	e0ca      	b.n	800ff12 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	da18      	bge.n	800fdb4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fd82:	1d3b      	adds	r3, r7, #4
 800fd84:	3304      	adds	r3, #4
 800fd86:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fd88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d10a      	bne.n	800fda4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800fd8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd92:	f383 8811 	msr	BASEPRI, r3
 800fd96:	f3bf 8f6f 	isb	sy
 800fd9a:	f3bf 8f4f 	dsb	sy
 800fd9e:	61fb      	str	r3, [r7, #28]
}
 800fda0:	bf00      	nop
 800fda2:	e7fe      	b.n	800fda2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fda4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fdaa:	6850      	ldr	r0, [r2, #4]
 800fdac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fdae:	6892      	ldr	r2, [r2, #8]
 800fdb0:	4611      	mov	r1, r2
 800fdb2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	f2c0 80aa 	blt.w	800ff10 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fdc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdc2:	695b      	ldr	r3, [r3, #20]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d004      	beq.n	800fdd2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fdc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdca:	3304      	adds	r3, #4
 800fdcc:	4618      	mov	r0, r3
 800fdce:	f7fd fea1 	bl	800db14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fdd2:	463b      	mov	r3, r7
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	f7ff ff6b 	bl	800fcb0 <prvSampleTimeNow>
 800fdda:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	2b09      	cmp	r3, #9
 800fde0:	f200 8097 	bhi.w	800ff12 <prvProcessReceivedCommands+0x19e>
 800fde4:	a201      	add	r2, pc, #4	; (adr r2, 800fdec <prvProcessReceivedCommands+0x78>)
 800fde6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdea:	bf00      	nop
 800fdec:	0800fe15 	.word	0x0800fe15
 800fdf0:	0800fe15 	.word	0x0800fe15
 800fdf4:	0800fe15 	.word	0x0800fe15
 800fdf8:	0800fe89 	.word	0x0800fe89
 800fdfc:	0800fe9d 	.word	0x0800fe9d
 800fe00:	0800fee7 	.word	0x0800fee7
 800fe04:	0800fe15 	.word	0x0800fe15
 800fe08:	0800fe15 	.word	0x0800fe15
 800fe0c:	0800fe89 	.word	0x0800fe89
 800fe10:	0800fe9d 	.word	0x0800fe9d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fe14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe1a:	f043 0301 	orr.w	r3, r3, #1
 800fe1e:	b2da      	uxtb	r2, r3
 800fe20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fe26:	68ba      	ldr	r2, [r7, #8]
 800fe28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe2a:	699b      	ldr	r3, [r3, #24]
 800fe2c:	18d1      	adds	r1, r2, r3
 800fe2e:	68bb      	ldr	r3, [r7, #8]
 800fe30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe34:	f7ff ff5c 	bl	800fcf0 <prvInsertTimerInActiveList>
 800fe38:	4603      	mov	r3, r0
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d069      	beq.n	800ff12 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fe3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe40:	6a1b      	ldr	r3, [r3, #32]
 800fe42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fe46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe4c:	f003 0304 	and.w	r3, r3, #4
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d05e      	beq.n	800ff12 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fe54:	68ba      	ldr	r2, [r7, #8]
 800fe56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe58:	699b      	ldr	r3, [r3, #24]
 800fe5a:	441a      	add	r2, r3
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	9300      	str	r3, [sp, #0]
 800fe60:	2300      	movs	r3, #0
 800fe62:	2100      	movs	r1, #0
 800fe64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe66:	f7ff fe05 	bl	800fa74 <xTimerGenericCommand>
 800fe6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fe6c:	6a3b      	ldr	r3, [r7, #32]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d14f      	bne.n	800ff12 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800fe72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe76:	f383 8811 	msr	BASEPRI, r3
 800fe7a:	f3bf 8f6f 	isb	sy
 800fe7e:	f3bf 8f4f 	dsb	sy
 800fe82:	61bb      	str	r3, [r7, #24]
}
 800fe84:	bf00      	nop
 800fe86:	e7fe      	b.n	800fe86 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fe88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe8e:	f023 0301 	bic.w	r3, r3, #1
 800fe92:	b2da      	uxtb	r2, r3
 800fe94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800fe9a:	e03a      	b.n	800ff12 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fe9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fea2:	f043 0301 	orr.w	r3, r3, #1
 800fea6:	b2da      	uxtb	r2, r3
 800fea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800feae:	68ba      	ldr	r2, [r7, #8]
 800feb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feb2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800feb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feb6:	699b      	ldr	r3, [r3, #24]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d10a      	bne.n	800fed2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800febc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fec0:	f383 8811 	msr	BASEPRI, r3
 800fec4:	f3bf 8f6f 	isb	sy
 800fec8:	f3bf 8f4f 	dsb	sy
 800fecc:	617b      	str	r3, [r7, #20]
}
 800fece:	bf00      	nop
 800fed0:	e7fe      	b.n	800fed0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fed4:	699a      	ldr	r2, [r3, #24]
 800fed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fed8:	18d1      	adds	r1, r2, r3
 800feda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fedc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fede:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fee0:	f7ff ff06 	bl	800fcf0 <prvInsertTimerInActiveList>
					break;
 800fee4:	e015      	b.n	800ff12 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fee8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800feec:	f003 0302 	and.w	r3, r3, #2
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d103      	bne.n	800fefc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800fef4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fef6:	f000 fbdb 	bl	80106b0 <vPortFree>
 800fefa:	e00a      	b.n	800ff12 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fefc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fefe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff02:	f023 0301 	bic.w	r3, r3, #1
 800ff06:	b2da      	uxtb	r2, r3
 800ff08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ff0e:	e000      	b.n	800ff12 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ff10:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ff12:	4b08      	ldr	r3, [pc, #32]	; (800ff34 <prvProcessReceivedCommands+0x1c0>)
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	1d39      	adds	r1, r7, #4
 800ff18:	2200      	movs	r2, #0
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	f7fe f948 	bl	800e1b0 <xQueueReceive>
 800ff20:	4603      	mov	r3, r0
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	f47f af2a 	bne.w	800fd7c <prvProcessReceivedCommands+0x8>
	}
}
 800ff28:	bf00      	nop
 800ff2a:	bf00      	nop
 800ff2c:	3730      	adds	r7, #48	; 0x30
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	bd80      	pop	{r7, pc}
 800ff32:	bf00      	nop
 800ff34:	20001298 	.word	0x20001298

0800ff38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b088      	sub	sp, #32
 800ff3c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ff3e:	e048      	b.n	800ffd2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ff40:	4b2d      	ldr	r3, [pc, #180]	; (800fff8 <prvSwitchTimerLists+0xc0>)
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	68db      	ldr	r3, [r3, #12]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff4a:	4b2b      	ldr	r3, [pc, #172]	; (800fff8 <prvSwitchTimerLists+0xc0>)
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	68db      	ldr	r3, [r3, #12]
 800ff50:	68db      	ldr	r3, [r3, #12]
 800ff52:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	3304      	adds	r3, #4
 800ff58:	4618      	mov	r0, r3
 800ff5a:	f7fd fddb 	bl	800db14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	6a1b      	ldr	r3, [r3, #32]
 800ff62:	68f8      	ldr	r0, [r7, #12]
 800ff64:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff6c:	f003 0304 	and.w	r3, r3, #4
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d02e      	beq.n	800ffd2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	699b      	ldr	r3, [r3, #24]
 800ff78:	693a      	ldr	r2, [r7, #16]
 800ff7a:	4413      	add	r3, r2
 800ff7c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ff7e:	68ba      	ldr	r2, [r7, #8]
 800ff80:	693b      	ldr	r3, [r7, #16]
 800ff82:	429a      	cmp	r2, r3
 800ff84:	d90e      	bls.n	800ffa4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	68ba      	ldr	r2, [r7, #8]
 800ff8a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	68fa      	ldr	r2, [r7, #12]
 800ff90:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ff92:	4b19      	ldr	r3, [pc, #100]	; (800fff8 <prvSwitchTimerLists+0xc0>)
 800ff94:	681a      	ldr	r2, [r3, #0]
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	3304      	adds	r3, #4
 800ff9a:	4619      	mov	r1, r3
 800ff9c:	4610      	mov	r0, r2
 800ff9e:	f7fd fd80 	bl	800daa2 <vListInsert>
 800ffa2:	e016      	b.n	800ffd2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	9300      	str	r3, [sp, #0]
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	693a      	ldr	r2, [r7, #16]
 800ffac:	2100      	movs	r1, #0
 800ffae:	68f8      	ldr	r0, [r7, #12]
 800ffb0:	f7ff fd60 	bl	800fa74 <xTimerGenericCommand>
 800ffb4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d10a      	bne.n	800ffd2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ffbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffc0:	f383 8811 	msr	BASEPRI, r3
 800ffc4:	f3bf 8f6f 	isb	sy
 800ffc8:	f3bf 8f4f 	dsb	sy
 800ffcc:	603b      	str	r3, [r7, #0]
}
 800ffce:	bf00      	nop
 800ffd0:	e7fe      	b.n	800ffd0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ffd2:	4b09      	ldr	r3, [pc, #36]	; (800fff8 <prvSwitchTimerLists+0xc0>)
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d1b1      	bne.n	800ff40 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ffdc:	4b06      	ldr	r3, [pc, #24]	; (800fff8 <prvSwitchTimerLists+0xc0>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ffe2:	4b06      	ldr	r3, [pc, #24]	; (800fffc <prvSwitchTimerLists+0xc4>)
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	4a04      	ldr	r2, [pc, #16]	; (800fff8 <prvSwitchTimerLists+0xc0>)
 800ffe8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ffea:	4a04      	ldr	r2, [pc, #16]	; (800fffc <prvSwitchTimerLists+0xc4>)
 800ffec:	697b      	ldr	r3, [r7, #20]
 800ffee:	6013      	str	r3, [r2, #0]
}
 800fff0:	bf00      	nop
 800fff2:	3718      	adds	r7, #24
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd80      	pop	{r7, pc}
 800fff8:	20001290 	.word	0x20001290
 800fffc:	20001294 	.word	0x20001294

08010000 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b082      	sub	sp, #8
 8010004:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010006:	f000 f965 	bl	80102d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801000a:	4b15      	ldr	r3, [pc, #84]	; (8010060 <prvCheckForValidListAndQueue+0x60>)
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d120      	bne.n	8010054 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010012:	4814      	ldr	r0, [pc, #80]	; (8010064 <prvCheckForValidListAndQueue+0x64>)
 8010014:	f7fd fcf4 	bl	800da00 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010018:	4813      	ldr	r0, [pc, #76]	; (8010068 <prvCheckForValidListAndQueue+0x68>)
 801001a:	f7fd fcf1 	bl	800da00 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801001e:	4b13      	ldr	r3, [pc, #76]	; (801006c <prvCheckForValidListAndQueue+0x6c>)
 8010020:	4a10      	ldr	r2, [pc, #64]	; (8010064 <prvCheckForValidListAndQueue+0x64>)
 8010022:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010024:	4b12      	ldr	r3, [pc, #72]	; (8010070 <prvCheckForValidListAndQueue+0x70>)
 8010026:	4a10      	ldr	r2, [pc, #64]	; (8010068 <prvCheckForValidListAndQueue+0x68>)
 8010028:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801002a:	2300      	movs	r3, #0
 801002c:	9300      	str	r3, [sp, #0]
 801002e:	4b11      	ldr	r3, [pc, #68]	; (8010074 <prvCheckForValidListAndQueue+0x74>)
 8010030:	4a11      	ldr	r2, [pc, #68]	; (8010078 <prvCheckForValidListAndQueue+0x78>)
 8010032:	2110      	movs	r1, #16
 8010034:	200a      	movs	r0, #10
 8010036:	f7fd fdff 	bl	800dc38 <xQueueGenericCreateStatic>
 801003a:	4603      	mov	r3, r0
 801003c:	4a08      	ldr	r2, [pc, #32]	; (8010060 <prvCheckForValidListAndQueue+0x60>)
 801003e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010040:	4b07      	ldr	r3, [pc, #28]	; (8010060 <prvCheckForValidListAndQueue+0x60>)
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d005      	beq.n	8010054 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010048:	4b05      	ldr	r3, [pc, #20]	; (8010060 <prvCheckForValidListAndQueue+0x60>)
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	490b      	ldr	r1, [pc, #44]	; (801007c <prvCheckForValidListAndQueue+0x7c>)
 801004e:	4618      	mov	r0, r3
 8010050:	f7fe fbc2 	bl	800e7d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010054:	f000 f96e 	bl	8010334 <vPortExitCritical>
}
 8010058:	bf00      	nop
 801005a:	46bd      	mov	sp, r7
 801005c:	bd80      	pop	{r7, pc}
 801005e:	bf00      	nop
 8010060:	20001298 	.word	0x20001298
 8010064:	20001268 	.word	0x20001268
 8010068:	2000127c 	.word	0x2000127c
 801006c:	20001290 	.word	0x20001290
 8010070:	20001294 	.word	0x20001294
 8010074:	20001344 	.word	0x20001344
 8010078:	200012a4 	.word	0x200012a4
 801007c:	08016924 	.word	0x08016924

08010080 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010080:	b480      	push	{r7}
 8010082:	b085      	sub	sp, #20
 8010084:	af00      	add	r7, sp, #0
 8010086:	60f8      	str	r0, [r7, #12]
 8010088:	60b9      	str	r1, [r7, #8]
 801008a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	3b04      	subs	r3, #4
 8010090:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010098:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	3b04      	subs	r3, #4
 801009e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80100a0:	68bb      	ldr	r3, [r7, #8]
 80100a2:	f023 0201 	bic.w	r2, r3, #1
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	3b04      	subs	r3, #4
 80100ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80100b0:	4a0c      	ldr	r2, [pc, #48]	; (80100e4 <pxPortInitialiseStack+0x64>)
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	3b14      	subs	r3, #20
 80100ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80100bc:	687a      	ldr	r2, [r7, #4]
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	3b04      	subs	r3, #4
 80100c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	f06f 0202 	mvn.w	r2, #2
 80100ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	3b20      	subs	r3, #32
 80100d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80100d6:	68fb      	ldr	r3, [r7, #12]
}
 80100d8:	4618      	mov	r0, r3
 80100da:	3714      	adds	r7, #20
 80100dc:	46bd      	mov	sp, r7
 80100de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e2:	4770      	bx	lr
 80100e4:	080100e9 	.word	0x080100e9

080100e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80100e8:	b480      	push	{r7}
 80100ea:	b085      	sub	sp, #20
 80100ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80100ee:	2300      	movs	r3, #0
 80100f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80100f2:	4b12      	ldr	r3, [pc, #72]	; (801013c <prvTaskExitError+0x54>)
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100fa:	d00a      	beq.n	8010112 <prvTaskExitError+0x2a>
	__asm volatile
 80100fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010100:	f383 8811 	msr	BASEPRI, r3
 8010104:	f3bf 8f6f 	isb	sy
 8010108:	f3bf 8f4f 	dsb	sy
 801010c:	60fb      	str	r3, [r7, #12]
}
 801010e:	bf00      	nop
 8010110:	e7fe      	b.n	8010110 <prvTaskExitError+0x28>
	__asm volatile
 8010112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010116:	f383 8811 	msr	BASEPRI, r3
 801011a:	f3bf 8f6f 	isb	sy
 801011e:	f3bf 8f4f 	dsb	sy
 8010122:	60bb      	str	r3, [r7, #8]
}
 8010124:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010126:	bf00      	nop
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d0fc      	beq.n	8010128 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801012e:	bf00      	nop
 8010130:	bf00      	nop
 8010132:	3714      	adds	r7, #20
 8010134:	46bd      	mov	sp, r7
 8010136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013a:	4770      	bx	lr
 801013c:	2000011c 	.word	0x2000011c

08010140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010140:	4b07      	ldr	r3, [pc, #28]	; (8010160 <pxCurrentTCBConst2>)
 8010142:	6819      	ldr	r1, [r3, #0]
 8010144:	6808      	ldr	r0, [r1, #0]
 8010146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801014a:	f380 8809 	msr	PSP, r0
 801014e:	f3bf 8f6f 	isb	sy
 8010152:	f04f 0000 	mov.w	r0, #0
 8010156:	f380 8811 	msr	BASEPRI, r0
 801015a:	4770      	bx	lr
 801015c:	f3af 8000 	nop.w

08010160 <pxCurrentTCBConst2>:
 8010160:	20000d68 	.word	0x20000d68
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010164:	bf00      	nop
 8010166:	bf00      	nop

08010168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010168:	4808      	ldr	r0, [pc, #32]	; (801018c <prvPortStartFirstTask+0x24>)
 801016a:	6800      	ldr	r0, [r0, #0]
 801016c:	6800      	ldr	r0, [r0, #0]
 801016e:	f380 8808 	msr	MSP, r0
 8010172:	f04f 0000 	mov.w	r0, #0
 8010176:	f380 8814 	msr	CONTROL, r0
 801017a:	b662      	cpsie	i
 801017c:	b661      	cpsie	f
 801017e:	f3bf 8f4f 	dsb	sy
 8010182:	f3bf 8f6f 	isb	sy
 8010186:	df00      	svc	0
 8010188:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801018a:	bf00      	nop
 801018c:	e000ed08 	.word	0xe000ed08

08010190 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010190:	b580      	push	{r7, lr}
 8010192:	b086      	sub	sp, #24
 8010194:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010196:	4b46      	ldr	r3, [pc, #280]	; (80102b0 <xPortStartScheduler+0x120>)
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	4a46      	ldr	r2, [pc, #280]	; (80102b4 <xPortStartScheduler+0x124>)
 801019c:	4293      	cmp	r3, r2
 801019e:	d10a      	bne.n	80101b6 <xPortStartScheduler+0x26>
	__asm volatile
 80101a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101a4:	f383 8811 	msr	BASEPRI, r3
 80101a8:	f3bf 8f6f 	isb	sy
 80101ac:	f3bf 8f4f 	dsb	sy
 80101b0:	613b      	str	r3, [r7, #16]
}
 80101b2:	bf00      	nop
 80101b4:	e7fe      	b.n	80101b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80101b6:	4b3e      	ldr	r3, [pc, #248]	; (80102b0 <xPortStartScheduler+0x120>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	4a3f      	ldr	r2, [pc, #252]	; (80102b8 <xPortStartScheduler+0x128>)
 80101bc:	4293      	cmp	r3, r2
 80101be:	d10a      	bne.n	80101d6 <xPortStartScheduler+0x46>
	__asm volatile
 80101c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101c4:	f383 8811 	msr	BASEPRI, r3
 80101c8:	f3bf 8f6f 	isb	sy
 80101cc:	f3bf 8f4f 	dsb	sy
 80101d0:	60fb      	str	r3, [r7, #12]
}
 80101d2:	bf00      	nop
 80101d4:	e7fe      	b.n	80101d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80101d6:	4b39      	ldr	r3, [pc, #228]	; (80102bc <xPortStartScheduler+0x12c>)
 80101d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80101da:	697b      	ldr	r3, [r7, #20]
 80101dc:	781b      	ldrb	r3, [r3, #0]
 80101de:	b2db      	uxtb	r3, r3
 80101e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80101e2:	697b      	ldr	r3, [r7, #20]
 80101e4:	22ff      	movs	r2, #255	; 0xff
 80101e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80101e8:	697b      	ldr	r3, [r7, #20]
 80101ea:	781b      	ldrb	r3, [r3, #0]
 80101ec:	b2db      	uxtb	r3, r3
 80101ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80101f0:	78fb      	ldrb	r3, [r7, #3]
 80101f2:	b2db      	uxtb	r3, r3
 80101f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80101f8:	b2da      	uxtb	r2, r3
 80101fa:	4b31      	ldr	r3, [pc, #196]	; (80102c0 <xPortStartScheduler+0x130>)
 80101fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80101fe:	4b31      	ldr	r3, [pc, #196]	; (80102c4 <xPortStartScheduler+0x134>)
 8010200:	2207      	movs	r2, #7
 8010202:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010204:	e009      	b.n	801021a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010206:	4b2f      	ldr	r3, [pc, #188]	; (80102c4 <xPortStartScheduler+0x134>)
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	3b01      	subs	r3, #1
 801020c:	4a2d      	ldr	r2, [pc, #180]	; (80102c4 <xPortStartScheduler+0x134>)
 801020e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010210:	78fb      	ldrb	r3, [r7, #3]
 8010212:	b2db      	uxtb	r3, r3
 8010214:	005b      	lsls	r3, r3, #1
 8010216:	b2db      	uxtb	r3, r3
 8010218:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801021a:	78fb      	ldrb	r3, [r7, #3]
 801021c:	b2db      	uxtb	r3, r3
 801021e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010222:	2b80      	cmp	r3, #128	; 0x80
 8010224:	d0ef      	beq.n	8010206 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010226:	4b27      	ldr	r3, [pc, #156]	; (80102c4 <xPortStartScheduler+0x134>)
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	f1c3 0307 	rsb	r3, r3, #7
 801022e:	2b04      	cmp	r3, #4
 8010230:	d00a      	beq.n	8010248 <xPortStartScheduler+0xb8>
	__asm volatile
 8010232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010236:	f383 8811 	msr	BASEPRI, r3
 801023a:	f3bf 8f6f 	isb	sy
 801023e:	f3bf 8f4f 	dsb	sy
 8010242:	60bb      	str	r3, [r7, #8]
}
 8010244:	bf00      	nop
 8010246:	e7fe      	b.n	8010246 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010248:	4b1e      	ldr	r3, [pc, #120]	; (80102c4 <xPortStartScheduler+0x134>)
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	021b      	lsls	r3, r3, #8
 801024e:	4a1d      	ldr	r2, [pc, #116]	; (80102c4 <xPortStartScheduler+0x134>)
 8010250:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010252:	4b1c      	ldr	r3, [pc, #112]	; (80102c4 <xPortStartScheduler+0x134>)
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801025a:	4a1a      	ldr	r2, [pc, #104]	; (80102c4 <xPortStartScheduler+0x134>)
 801025c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	b2da      	uxtb	r2, r3
 8010262:	697b      	ldr	r3, [r7, #20]
 8010264:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010266:	4b18      	ldr	r3, [pc, #96]	; (80102c8 <xPortStartScheduler+0x138>)
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	4a17      	ldr	r2, [pc, #92]	; (80102c8 <xPortStartScheduler+0x138>)
 801026c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010270:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010272:	4b15      	ldr	r3, [pc, #84]	; (80102c8 <xPortStartScheduler+0x138>)
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	4a14      	ldr	r2, [pc, #80]	; (80102c8 <xPortStartScheduler+0x138>)
 8010278:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801027c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801027e:	f000 f8dd 	bl	801043c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010282:	4b12      	ldr	r3, [pc, #72]	; (80102cc <xPortStartScheduler+0x13c>)
 8010284:	2200      	movs	r2, #0
 8010286:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010288:	f000 f8fc 	bl	8010484 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801028c:	4b10      	ldr	r3, [pc, #64]	; (80102d0 <xPortStartScheduler+0x140>)
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	4a0f      	ldr	r2, [pc, #60]	; (80102d0 <xPortStartScheduler+0x140>)
 8010292:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010296:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010298:	f7ff ff66 	bl	8010168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801029c:	f7fe ff3e 	bl	800f11c <vTaskSwitchContext>
	prvTaskExitError();
 80102a0:	f7ff ff22 	bl	80100e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80102a4:	2300      	movs	r3, #0
}
 80102a6:	4618      	mov	r0, r3
 80102a8:	3718      	adds	r7, #24
 80102aa:	46bd      	mov	sp, r7
 80102ac:	bd80      	pop	{r7, pc}
 80102ae:	bf00      	nop
 80102b0:	e000ed00 	.word	0xe000ed00
 80102b4:	410fc271 	.word	0x410fc271
 80102b8:	410fc270 	.word	0x410fc270
 80102bc:	e000e400 	.word	0xe000e400
 80102c0:	20001394 	.word	0x20001394
 80102c4:	20001398 	.word	0x20001398
 80102c8:	e000ed20 	.word	0xe000ed20
 80102cc:	2000011c 	.word	0x2000011c
 80102d0:	e000ef34 	.word	0xe000ef34

080102d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80102d4:	b480      	push	{r7}
 80102d6:	b083      	sub	sp, #12
 80102d8:	af00      	add	r7, sp, #0
	__asm volatile
 80102da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102de:	f383 8811 	msr	BASEPRI, r3
 80102e2:	f3bf 8f6f 	isb	sy
 80102e6:	f3bf 8f4f 	dsb	sy
 80102ea:	607b      	str	r3, [r7, #4]
}
 80102ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80102ee:	4b0f      	ldr	r3, [pc, #60]	; (801032c <vPortEnterCritical+0x58>)
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	3301      	adds	r3, #1
 80102f4:	4a0d      	ldr	r2, [pc, #52]	; (801032c <vPortEnterCritical+0x58>)
 80102f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80102f8:	4b0c      	ldr	r3, [pc, #48]	; (801032c <vPortEnterCritical+0x58>)
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	2b01      	cmp	r3, #1
 80102fe:	d10f      	bne.n	8010320 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010300:	4b0b      	ldr	r3, [pc, #44]	; (8010330 <vPortEnterCritical+0x5c>)
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	b2db      	uxtb	r3, r3
 8010306:	2b00      	cmp	r3, #0
 8010308:	d00a      	beq.n	8010320 <vPortEnterCritical+0x4c>
	__asm volatile
 801030a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801030e:	f383 8811 	msr	BASEPRI, r3
 8010312:	f3bf 8f6f 	isb	sy
 8010316:	f3bf 8f4f 	dsb	sy
 801031a:	603b      	str	r3, [r7, #0]
}
 801031c:	bf00      	nop
 801031e:	e7fe      	b.n	801031e <vPortEnterCritical+0x4a>
	}
}
 8010320:	bf00      	nop
 8010322:	370c      	adds	r7, #12
 8010324:	46bd      	mov	sp, r7
 8010326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801032a:	4770      	bx	lr
 801032c:	2000011c 	.word	0x2000011c
 8010330:	e000ed04 	.word	0xe000ed04

08010334 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010334:	b480      	push	{r7}
 8010336:	b083      	sub	sp, #12
 8010338:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801033a:	4b12      	ldr	r3, [pc, #72]	; (8010384 <vPortExitCritical+0x50>)
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d10a      	bne.n	8010358 <vPortExitCritical+0x24>
	__asm volatile
 8010342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010346:	f383 8811 	msr	BASEPRI, r3
 801034a:	f3bf 8f6f 	isb	sy
 801034e:	f3bf 8f4f 	dsb	sy
 8010352:	607b      	str	r3, [r7, #4]
}
 8010354:	bf00      	nop
 8010356:	e7fe      	b.n	8010356 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010358:	4b0a      	ldr	r3, [pc, #40]	; (8010384 <vPortExitCritical+0x50>)
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	3b01      	subs	r3, #1
 801035e:	4a09      	ldr	r2, [pc, #36]	; (8010384 <vPortExitCritical+0x50>)
 8010360:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010362:	4b08      	ldr	r3, [pc, #32]	; (8010384 <vPortExitCritical+0x50>)
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d105      	bne.n	8010376 <vPortExitCritical+0x42>
 801036a:	2300      	movs	r3, #0
 801036c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801036e:	683b      	ldr	r3, [r7, #0]
 8010370:	f383 8811 	msr	BASEPRI, r3
}
 8010374:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010376:	bf00      	nop
 8010378:	370c      	adds	r7, #12
 801037a:	46bd      	mov	sp, r7
 801037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010380:	4770      	bx	lr
 8010382:	bf00      	nop
 8010384:	2000011c 	.word	0x2000011c
	...

08010390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010390:	f3ef 8009 	mrs	r0, PSP
 8010394:	f3bf 8f6f 	isb	sy
 8010398:	4b15      	ldr	r3, [pc, #84]	; (80103f0 <pxCurrentTCBConst>)
 801039a:	681a      	ldr	r2, [r3, #0]
 801039c:	f01e 0f10 	tst.w	lr, #16
 80103a0:	bf08      	it	eq
 80103a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80103a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103aa:	6010      	str	r0, [r2, #0]
 80103ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80103b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80103b4:	f380 8811 	msr	BASEPRI, r0
 80103b8:	f3bf 8f4f 	dsb	sy
 80103bc:	f3bf 8f6f 	isb	sy
 80103c0:	f7fe feac 	bl	800f11c <vTaskSwitchContext>
 80103c4:	f04f 0000 	mov.w	r0, #0
 80103c8:	f380 8811 	msr	BASEPRI, r0
 80103cc:	bc09      	pop	{r0, r3}
 80103ce:	6819      	ldr	r1, [r3, #0]
 80103d0:	6808      	ldr	r0, [r1, #0]
 80103d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103d6:	f01e 0f10 	tst.w	lr, #16
 80103da:	bf08      	it	eq
 80103dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80103e0:	f380 8809 	msr	PSP, r0
 80103e4:	f3bf 8f6f 	isb	sy
 80103e8:	4770      	bx	lr
 80103ea:	bf00      	nop
 80103ec:	f3af 8000 	nop.w

080103f0 <pxCurrentTCBConst>:
 80103f0:	20000d68 	.word	0x20000d68
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80103f4:	bf00      	nop
 80103f6:	bf00      	nop

080103f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b082      	sub	sp, #8
 80103fc:	af00      	add	r7, sp, #0
	__asm volatile
 80103fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010402:	f383 8811 	msr	BASEPRI, r3
 8010406:	f3bf 8f6f 	isb	sy
 801040a:	f3bf 8f4f 	dsb	sy
 801040e:	607b      	str	r3, [r7, #4]
}
 8010410:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010412:	f7fe fdc9 	bl	800efa8 <xTaskIncrementTick>
 8010416:	4603      	mov	r3, r0
 8010418:	2b00      	cmp	r3, #0
 801041a:	d003      	beq.n	8010424 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801041c:	4b06      	ldr	r3, [pc, #24]	; (8010438 <xPortSysTickHandler+0x40>)
 801041e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010422:	601a      	str	r2, [r3, #0]
 8010424:	2300      	movs	r3, #0
 8010426:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010428:	683b      	ldr	r3, [r7, #0]
 801042a:	f383 8811 	msr	BASEPRI, r3
}
 801042e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010430:	bf00      	nop
 8010432:	3708      	adds	r7, #8
 8010434:	46bd      	mov	sp, r7
 8010436:	bd80      	pop	{r7, pc}
 8010438:	e000ed04 	.word	0xe000ed04

0801043c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801043c:	b480      	push	{r7}
 801043e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010440:	4b0b      	ldr	r3, [pc, #44]	; (8010470 <vPortSetupTimerInterrupt+0x34>)
 8010442:	2200      	movs	r2, #0
 8010444:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010446:	4b0b      	ldr	r3, [pc, #44]	; (8010474 <vPortSetupTimerInterrupt+0x38>)
 8010448:	2200      	movs	r2, #0
 801044a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801044c:	4b0a      	ldr	r3, [pc, #40]	; (8010478 <vPortSetupTimerInterrupt+0x3c>)
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	4a0a      	ldr	r2, [pc, #40]	; (801047c <vPortSetupTimerInterrupt+0x40>)
 8010452:	fba2 2303 	umull	r2, r3, r2, r3
 8010456:	099b      	lsrs	r3, r3, #6
 8010458:	4a09      	ldr	r2, [pc, #36]	; (8010480 <vPortSetupTimerInterrupt+0x44>)
 801045a:	3b01      	subs	r3, #1
 801045c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801045e:	4b04      	ldr	r3, [pc, #16]	; (8010470 <vPortSetupTimerInterrupt+0x34>)
 8010460:	2207      	movs	r2, #7
 8010462:	601a      	str	r2, [r3, #0]
}
 8010464:	bf00      	nop
 8010466:	46bd      	mov	sp, r7
 8010468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046c:	4770      	bx	lr
 801046e:	bf00      	nop
 8010470:	e000e010 	.word	0xe000e010
 8010474:	e000e018 	.word	0xe000e018
 8010478:	20000000 	.word	0x20000000
 801047c:	10624dd3 	.word	0x10624dd3
 8010480:	e000e014 	.word	0xe000e014

08010484 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010484:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010494 <vPortEnableVFP+0x10>
 8010488:	6801      	ldr	r1, [r0, #0]
 801048a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801048e:	6001      	str	r1, [r0, #0]
 8010490:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010492:	bf00      	nop
 8010494:	e000ed88 	.word	0xe000ed88

08010498 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010498:	b480      	push	{r7}
 801049a:	b085      	sub	sp, #20
 801049c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801049e:	f3ef 8305 	mrs	r3, IPSR
 80104a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	2b0f      	cmp	r3, #15
 80104a8:	d914      	bls.n	80104d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80104aa:	4a17      	ldr	r2, [pc, #92]	; (8010508 <vPortValidateInterruptPriority+0x70>)
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	4413      	add	r3, r2
 80104b0:	781b      	ldrb	r3, [r3, #0]
 80104b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80104b4:	4b15      	ldr	r3, [pc, #84]	; (801050c <vPortValidateInterruptPriority+0x74>)
 80104b6:	781b      	ldrb	r3, [r3, #0]
 80104b8:	7afa      	ldrb	r2, [r7, #11]
 80104ba:	429a      	cmp	r2, r3
 80104bc:	d20a      	bcs.n	80104d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80104be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104c2:	f383 8811 	msr	BASEPRI, r3
 80104c6:	f3bf 8f6f 	isb	sy
 80104ca:	f3bf 8f4f 	dsb	sy
 80104ce:	607b      	str	r3, [r7, #4]
}
 80104d0:	bf00      	nop
 80104d2:	e7fe      	b.n	80104d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80104d4:	4b0e      	ldr	r3, [pc, #56]	; (8010510 <vPortValidateInterruptPriority+0x78>)
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80104dc:	4b0d      	ldr	r3, [pc, #52]	; (8010514 <vPortValidateInterruptPriority+0x7c>)
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	429a      	cmp	r2, r3
 80104e2:	d90a      	bls.n	80104fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80104e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104e8:	f383 8811 	msr	BASEPRI, r3
 80104ec:	f3bf 8f6f 	isb	sy
 80104f0:	f3bf 8f4f 	dsb	sy
 80104f4:	603b      	str	r3, [r7, #0]
}
 80104f6:	bf00      	nop
 80104f8:	e7fe      	b.n	80104f8 <vPortValidateInterruptPriority+0x60>
	}
 80104fa:	bf00      	nop
 80104fc:	3714      	adds	r7, #20
 80104fe:	46bd      	mov	sp, r7
 8010500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010504:	4770      	bx	lr
 8010506:	bf00      	nop
 8010508:	e000e3f0 	.word	0xe000e3f0
 801050c:	20001394 	.word	0x20001394
 8010510:	e000ed0c 	.word	0xe000ed0c
 8010514:	20001398 	.word	0x20001398

08010518 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b08a      	sub	sp, #40	; 0x28
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010520:	2300      	movs	r3, #0
 8010522:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010524:	f7fe fc84 	bl	800ee30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010528:	4b5b      	ldr	r3, [pc, #364]	; (8010698 <pvPortMalloc+0x180>)
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d101      	bne.n	8010534 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010530:	f000 f920 	bl	8010774 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010534:	4b59      	ldr	r3, [pc, #356]	; (801069c <pvPortMalloc+0x184>)
 8010536:	681a      	ldr	r2, [r3, #0]
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	4013      	ands	r3, r2
 801053c:	2b00      	cmp	r3, #0
 801053e:	f040 8093 	bne.w	8010668 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d01d      	beq.n	8010584 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010548:	2208      	movs	r2, #8
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	4413      	add	r3, r2
 801054e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	f003 0307 	and.w	r3, r3, #7
 8010556:	2b00      	cmp	r3, #0
 8010558:	d014      	beq.n	8010584 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	f023 0307 	bic.w	r3, r3, #7
 8010560:	3308      	adds	r3, #8
 8010562:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	f003 0307 	and.w	r3, r3, #7
 801056a:	2b00      	cmp	r3, #0
 801056c:	d00a      	beq.n	8010584 <pvPortMalloc+0x6c>
	__asm volatile
 801056e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010572:	f383 8811 	msr	BASEPRI, r3
 8010576:	f3bf 8f6f 	isb	sy
 801057a:	f3bf 8f4f 	dsb	sy
 801057e:	617b      	str	r3, [r7, #20]
}
 8010580:	bf00      	nop
 8010582:	e7fe      	b.n	8010582 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d06e      	beq.n	8010668 <pvPortMalloc+0x150>
 801058a:	4b45      	ldr	r3, [pc, #276]	; (80106a0 <pvPortMalloc+0x188>)
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	687a      	ldr	r2, [r7, #4]
 8010590:	429a      	cmp	r2, r3
 8010592:	d869      	bhi.n	8010668 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010594:	4b43      	ldr	r3, [pc, #268]	; (80106a4 <pvPortMalloc+0x18c>)
 8010596:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010598:	4b42      	ldr	r3, [pc, #264]	; (80106a4 <pvPortMalloc+0x18c>)
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801059e:	e004      	b.n	80105aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80105a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80105a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80105aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ac:	685b      	ldr	r3, [r3, #4]
 80105ae:	687a      	ldr	r2, [r7, #4]
 80105b0:	429a      	cmp	r2, r3
 80105b2:	d903      	bls.n	80105bc <pvPortMalloc+0xa4>
 80105b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d1f1      	bne.n	80105a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80105bc:	4b36      	ldr	r3, [pc, #216]	; (8010698 <pvPortMalloc+0x180>)
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105c2:	429a      	cmp	r2, r3
 80105c4:	d050      	beq.n	8010668 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80105c6:	6a3b      	ldr	r3, [r7, #32]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	2208      	movs	r2, #8
 80105cc:	4413      	add	r3, r2
 80105ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80105d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105d2:	681a      	ldr	r2, [r3, #0]
 80105d4:	6a3b      	ldr	r3, [r7, #32]
 80105d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80105d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105da:	685a      	ldr	r2, [r3, #4]
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	1ad2      	subs	r2, r2, r3
 80105e0:	2308      	movs	r3, #8
 80105e2:	005b      	lsls	r3, r3, #1
 80105e4:	429a      	cmp	r2, r3
 80105e6:	d91f      	bls.n	8010628 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80105e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	4413      	add	r3, r2
 80105ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80105f0:	69bb      	ldr	r3, [r7, #24]
 80105f2:	f003 0307 	and.w	r3, r3, #7
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d00a      	beq.n	8010610 <pvPortMalloc+0xf8>
	__asm volatile
 80105fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105fe:	f383 8811 	msr	BASEPRI, r3
 8010602:	f3bf 8f6f 	isb	sy
 8010606:	f3bf 8f4f 	dsb	sy
 801060a:	613b      	str	r3, [r7, #16]
}
 801060c:	bf00      	nop
 801060e:	e7fe      	b.n	801060e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010612:	685a      	ldr	r2, [r3, #4]
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	1ad2      	subs	r2, r2, r3
 8010618:	69bb      	ldr	r3, [r7, #24]
 801061a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801061c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801061e:	687a      	ldr	r2, [r7, #4]
 8010620:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010622:	69b8      	ldr	r0, [r7, #24]
 8010624:	f000 f908 	bl	8010838 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010628:	4b1d      	ldr	r3, [pc, #116]	; (80106a0 <pvPortMalloc+0x188>)
 801062a:	681a      	ldr	r2, [r3, #0]
 801062c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801062e:	685b      	ldr	r3, [r3, #4]
 8010630:	1ad3      	subs	r3, r2, r3
 8010632:	4a1b      	ldr	r2, [pc, #108]	; (80106a0 <pvPortMalloc+0x188>)
 8010634:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010636:	4b1a      	ldr	r3, [pc, #104]	; (80106a0 <pvPortMalloc+0x188>)
 8010638:	681a      	ldr	r2, [r3, #0]
 801063a:	4b1b      	ldr	r3, [pc, #108]	; (80106a8 <pvPortMalloc+0x190>)
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	429a      	cmp	r2, r3
 8010640:	d203      	bcs.n	801064a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010642:	4b17      	ldr	r3, [pc, #92]	; (80106a0 <pvPortMalloc+0x188>)
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	4a18      	ldr	r2, [pc, #96]	; (80106a8 <pvPortMalloc+0x190>)
 8010648:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801064a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801064c:	685a      	ldr	r2, [r3, #4]
 801064e:	4b13      	ldr	r3, [pc, #76]	; (801069c <pvPortMalloc+0x184>)
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	431a      	orrs	r2, r3
 8010654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010656:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801065a:	2200      	movs	r2, #0
 801065c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801065e:	4b13      	ldr	r3, [pc, #76]	; (80106ac <pvPortMalloc+0x194>)
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	3301      	adds	r3, #1
 8010664:	4a11      	ldr	r2, [pc, #68]	; (80106ac <pvPortMalloc+0x194>)
 8010666:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010668:	f7fe fbf0 	bl	800ee4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801066c:	69fb      	ldr	r3, [r7, #28]
 801066e:	f003 0307 	and.w	r3, r3, #7
 8010672:	2b00      	cmp	r3, #0
 8010674:	d00a      	beq.n	801068c <pvPortMalloc+0x174>
	__asm volatile
 8010676:	f04f 0350 	mov.w	r3, #80	; 0x50
 801067a:	f383 8811 	msr	BASEPRI, r3
 801067e:	f3bf 8f6f 	isb	sy
 8010682:	f3bf 8f4f 	dsb	sy
 8010686:	60fb      	str	r3, [r7, #12]
}
 8010688:	bf00      	nop
 801068a:	e7fe      	b.n	801068a <pvPortMalloc+0x172>
	return pvReturn;
 801068c:	69fb      	ldr	r3, [r7, #28]
}
 801068e:	4618      	mov	r0, r3
 8010690:	3728      	adds	r7, #40	; 0x28
 8010692:	46bd      	mov	sp, r7
 8010694:	bd80      	pop	{r7, pc}
 8010696:	bf00      	nop
 8010698:	20004fa4 	.word	0x20004fa4
 801069c:	20004fb8 	.word	0x20004fb8
 80106a0:	20004fa8 	.word	0x20004fa8
 80106a4:	20004f9c 	.word	0x20004f9c
 80106a8:	20004fac 	.word	0x20004fac
 80106ac:	20004fb0 	.word	0x20004fb0

080106b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b086      	sub	sp, #24
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d04d      	beq.n	801075e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80106c2:	2308      	movs	r3, #8
 80106c4:	425b      	negs	r3, r3
 80106c6:	697a      	ldr	r2, [r7, #20]
 80106c8:	4413      	add	r3, r2
 80106ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80106cc:	697b      	ldr	r3, [r7, #20]
 80106ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80106d0:	693b      	ldr	r3, [r7, #16]
 80106d2:	685a      	ldr	r2, [r3, #4]
 80106d4:	4b24      	ldr	r3, [pc, #144]	; (8010768 <vPortFree+0xb8>)
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	4013      	ands	r3, r2
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d10a      	bne.n	80106f4 <vPortFree+0x44>
	__asm volatile
 80106de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106e2:	f383 8811 	msr	BASEPRI, r3
 80106e6:	f3bf 8f6f 	isb	sy
 80106ea:	f3bf 8f4f 	dsb	sy
 80106ee:	60fb      	str	r3, [r7, #12]
}
 80106f0:	bf00      	nop
 80106f2:	e7fe      	b.n	80106f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80106f4:	693b      	ldr	r3, [r7, #16]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d00a      	beq.n	8010712 <vPortFree+0x62>
	__asm volatile
 80106fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010700:	f383 8811 	msr	BASEPRI, r3
 8010704:	f3bf 8f6f 	isb	sy
 8010708:	f3bf 8f4f 	dsb	sy
 801070c:	60bb      	str	r3, [r7, #8]
}
 801070e:	bf00      	nop
 8010710:	e7fe      	b.n	8010710 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010712:	693b      	ldr	r3, [r7, #16]
 8010714:	685a      	ldr	r2, [r3, #4]
 8010716:	4b14      	ldr	r3, [pc, #80]	; (8010768 <vPortFree+0xb8>)
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	4013      	ands	r3, r2
 801071c:	2b00      	cmp	r3, #0
 801071e:	d01e      	beq.n	801075e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010720:	693b      	ldr	r3, [r7, #16]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d11a      	bne.n	801075e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010728:	693b      	ldr	r3, [r7, #16]
 801072a:	685a      	ldr	r2, [r3, #4]
 801072c:	4b0e      	ldr	r3, [pc, #56]	; (8010768 <vPortFree+0xb8>)
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	43db      	mvns	r3, r3
 8010732:	401a      	ands	r2, r3
 8010734:	693b      	ldr	r3, [r7, #16]
 8010736:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010738:	f7fe fb7a 	bl	800ee30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801073c:	693b      	ldr	r3, [r7, #16]
 801073e:	685a      	ldr	r2, [r3, #4]
 8010740:	4b0a      	ldr	r3, [pc, #40]	; (801076c <vPortFree+0xbc>)
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	4413      	add	r3, r2
 8010746:	4a09      	ldr	r2, [pc, #36]	; (801076c <vPortFree+0xbc>)
 8010748:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801074a:	6938      	ldr	r0, [r7, #16]
 801074c:	f000 f874 	bl	8010838 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010750:	4b07      	ldr	r3, [pc, #28]	; (8010770 <vPortFree+0xc0>)
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	3301      	adds	r3, #1
 8010756:	4a06      	ldr	r2, [pc, #24]	; (8010770 <vPortFree+0xc0>)
 8010758:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801075a:	f7fe fb77 	bl	800ee4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801075e:	bf00      	nop
 8010760:	3718      	adds	r7, #24
 8010762:	46bd      	mov	sp, r7
 8010764:	bd80      	pop	{r7, pc}
 8010766:	bf00      	nop
 8010768:	20004fb8 	.word	0x20004fb8
 801076c:	20004fa8 	.word	0x20004fa8
 8010770:	20004fb4 	.word	0x20004fb4

08010774 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010774:	b480      	push	{r7}
 8010776:	b085      	sub	sp, #20
 8010778:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801077a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801077e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010780:	4b27      	ldr	r3, [pc, #156]	; (8010820 <prvHeapInit+0xac>)
 8010782:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	f003 0307 	and.w	r3, r3, #7
 801078a:	2b00      	cmp	r3, #0
 801078c:	d00c      	beq.n	80107a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	3307      	adds	r3, #7
 8010792:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	f023 0307 	bic.w	r3, r3, #7
 801079a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801079c:	68ba      	ldr	r2, [r7, #8]
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	1ad3      	subs	r3, r2, r3
 80107a2:	4a1f      	ldr	r2, [pc, #124]	; (8010820 <prvHeapInit+0xac>)
 80107a4:	4413      	add	r3, r2
 80107a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80107ac:	4a1d      	ldr	r2, [pc, #116]	; (8010824 <prvHeapInit+0xb0>)
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80107b2:	4b1c      	ldr	r3, [pc, #112]	; (8010824 <prvHeapInit+0xb0>)
 80107b4:	2200      	movs	r2, #0
 80107b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	68ba      	ldr	r2, [r7, #8]
 80107bc:	4413      	add	r3, r2
 80107be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80107c0:	2208      	movs	r2, #8
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	1a9b      	subs	r3, r3, r2
 80107c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	f023 0307 	bic.w	r3, r3, #7
 80107ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	4a15      	ldr	r2, [pc, #84]	; (8010828 <prvHeapInit+0xb4>)
 80107d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80107d6:	4b14      	ldr	r3, [pc, #80]	; (8010828 <prvHeapInit+0xb4>)
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	2200      	movs	r2, #0
 80107dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80107de:	4b12      	ldr	r3, [pc, #72]	; (8010828 <prvHeapInit+0xb4>)
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	2200      	movs	r2, #0
 80107e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80107ea:	683b      	ldr	r3, [r7, #0]
 80107ec:	68fa      	ldr	r2, [r7, #12]
 80107ee:	1ad2      	subs	r2, r2, r3
 80107f0:	683b      	ldr	r3, [r7, #0]
 80107f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80107f4:	4b0c      	ldr	r3, [pc, #48]	; (8010828 <prvHeapInit+0xb4>)
 80107f6:	681a      	ldr	r2, [r3, #0]
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80107fc:	683b      	ldr	r3, [r7, #0]
 80107fe:	685b      	ldr	r3, [r3, #4]
 8010800:	4a0a      	ldr	r2, [pc, #40]	; (801082c <prvHeapInit+0xb8>)
 8010802:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010804:	683b      	ldr	r3, [r7, #0]
 8010806:	685b      	ldr	r3, [r3, #4]
 8010808:	4a09      	ldr	r2, [pc, #36]	; (8010830 <prvHeapInit+0xbc>)
 801080a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801080c:	4b09      	ldr	r3, [pc, #36]	; (8010834 <prvHeapInit+0xc0>)
 801080e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010812:	601a      	str	r2, [r3, #0]
}
 8010814:	bf00      	nop
 8010816:	3714      	adds	r7, #20
 8010818:	46bd      	mov	sp, r7
 801081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081e:	4770      	bx	lr
 8010820:	2000139c 	.word	0x2000139c
 8010824:	20004f9c 	.word	0x20004f9c
 8010828:	20004fa4 	.word	0x20004fa4
 801082c:	20004fac 	.word	0x20004fac
 8010830:	20004fa8 	.word	0x20004fa8
 8010834:	20004fb8 	.word	0x20004fb8

08010838 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010838:	b480      	push	{r7}
 801083a:	b085      	sub	sp, #20
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010840:	4b28      	ldr	r3, [pc, #160]	; (80108e4 <prvInsertBlockIntoFreeList+0xac>)
 8010842:	60fb      	str	r3, [r7, #12]
 8010844:	e002      	b.n	801084c <prvInsertBlockIntoFreeList+0x14>
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	60fb      	str	r3, [r7, #12]
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	687a      	ldr	r2, [r7, #4]
 8010852:	429a      	cmp	r2, r3
 8010854:	d8f7      	bhi.n	8010846 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	685b      	ldr	r3, [r3, #4]
 801085e:	68ba      	ldr	r2, [r7, #8]
 8010860:	4413      	add	r3, r2
 8010862:	687a      	ldr	r2, [r7, #4]
 8010864:	429a      	cmp	r2, r3
 8010866:	d108      	bne.n	801087a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	685a      	ldr	r2, [r3, #4]
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	685b      	ldr	r3, [r3, #4]
 8010870:	441a      	add	r2, r3
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	685b      	ldr	r3, [r3, #4]
 8010882:	68ba      	ldr	r2, [r7, #8]
 8010884:	441a      	add	r2, r3
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	429a      	cmp	r2, r3
 801088c:	d118      	bne.n	80108c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	681a      	ldr	r2, [r3, #0]
 8010892:	4b15      	ldr	r3, [pc, #84]	; (80108e8 <prvInsertBlockIntoFreeList+0xb0>)
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	429a      	cmp	r2, r3
 8010898:	d00d      	beq.n	80108b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	685a      	ldr	r2, [r3, #4]
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	685b      	ldr	r3, [r3, #4]
 80108a4:	441a      	add	r2, r3
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	681a      	ldr	r2, [r3, #0]
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	601a      	str	r2, [r3, #0]
 80108b4:	e008      	b.n	80108c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80108b6:	4b0c      	ldr	r3, [pc, #48]	; (80108e8 <prvInsertBlockIntoFreeList+0xb0>)
 80108b8:	681a      	ldr	r2, [r3, #0]
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	601a      	str	r2, [r3, #0]
 80108be:	e003      	b.n	80108c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	681a      	ldr	r2, [r3, #0]
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80108c8:	68fa      	ldr	r2, [r7, #12]
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	429a      	cmp	r2, r3
 80108ce:	d002      	beq.n	80108d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	687a      	ldr	r2, [r7, #4]
 80108d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80108d6:	bf00      	nop
 80108d8:	3714      	adds	r7, #20
 80108da:	46bd      	mov	sp, r7
 80108dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e0:	4770      	bx	lr
 80108e2:	bf00      	nop
 80108e4:	20004f9c 	.word	0x20004f9c
 80108e8:	20004fa4 	.word	0x20004fa4

080108ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80108f0:	2200      	movs	r2, #0
 80108f2:	4912      	ldr	r1, [pc, #72]	; (801093c <MX_USB_DEVICE_Init+0x50>)
 80108f4:	4812      	ldr	r0, [pc, #72]	; (8010940 <MX_USB_DEVICE_Init+0x54>)
 80108f6:	f7fb fd13 	bl	800c320 <USBD_Init>
 80108fa:	4603      	mov	r3, r0
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d001      	beq.n	8010904 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010900:	f7f1 ff0c 	bl	800271c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010904:	490f      	ldr	r1, [pc, #60]	; (8010944 <MX_USB_DEVICE_Init+0x58>)
 8010906:	480e      	ldr	r0, [pc, #56]	; (8010940 <MX_USB_DEVICE_Init+0x54>)
 8010908:	f7fb fd3a 	bl	800c380 <USBD_RegisterClass>
 801090c:	4603      	mov	r3, r0
 801090e:	2b00      	cmp	r3, #0
 8010910:	d001      	beq.n	8010916 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010912:	f7f1 ff03 	bl	800271c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010916:	490c      	ldr	r1, [pc, #48]	; (8010948 <MX_USB_DEVICE_Init+0x5c>)
 8010918:	4809      	ldr	r0, [pc, #36]	; (8010940 <MX_USB_DEVICE_Init+0x54>)
 801091a:	f7fb fc8b 	bl	800c234 <USBD_CDC_RegisterInterface>
 801091e:	4603      	mov	r3, r0
 8010920:	2b00      	cmp	r3, #0
 8010922:	d001      	beq.n	8010928 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010924:	f7f1 fefa 	bl	800271c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010928:	4805      	ldr	r0, [pc, #20]	; (8010940 <MX_USB_DEVICE_Init+0x54>)
 801092a:	f7fb fd50 	bl	800c3ce <USBD_Start>
 801092e:	4603      	mov	r3, r0
 8010930:	2b00      	cmp	r3, #0
 8010932:	d001      	beq.n	8010938 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010934:	f7f1 fef2 	bl	800271c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010938:	bf00      	nop
 801093a:	bd80      	pop	{r7, pc}
 801093c:	20000134 	.word	0x20000134
 8010940:	200057f0 	.word	0x200057f0
 8010944:	20000018 	.word	0x20000018
 8010948:	20000120 	.word	0x20000120

0801094c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801094c:	b580      	push	{r7, lr}
 801094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010950:	2200      	movs	r2, #0
 8010952:	4905      	ldr	r1, [pc, #20]	; (8010968 <CDC_Init_FS+0x1c>)
 8010954:	4805      	ldr	r0, [pc, #20]	; (801096c <CDC_Init_FS+0x20>)
 8010956:	f7fb fc82 	bl	800c25e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801095a:	4905      	ldr	r1, [pc, #20]	; (8010970 <CDC_Init_FS+0x24>)
 801095c:	4803      	ldr	r0, [pc, #12]	; (801096c <CDC_Init_FS+0x20>)
 801095e:	f7fb fc9c 	bl	800c29a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010962:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010964:	4618      	mov	r0, r3
 8010966:	bd80      	pop	{r7, pc}
 8010968:	200062c0 	.word	0x200062c0
 801096c:	200057f0 	.word	0x200057f0
 8010970:	20005ac0 	.word	0x20005ac0

08010974 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010974:	b480      	push	{r7}
 8010976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010978:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801097a:	4618      	mov	r0, r3
 801097c:	46bd      	mov	sp, r7
 801097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010982:	4770      	bx	lr

08010984 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010984:	b480      	push	{r7}
 8010986:	b083      	sub	sp, #12
 8010988:	af00      	add	r7, sp, #0
 801098a:	4603      	mov	r3, r0
 801098c:	6039      	str	r1, [r7, #0]
 801098e:	71fb      	strb	r3, [r7, #7]
 8010990:	4613      	mov	r3, r2
 8010992:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010994:	79fb      	ldrb	r3, [r7, #7]
 8010996:	2b23      	cmp	r3, #35	; 0x23
 8010998:	d84a      	bhi.n	8010a30 <CDC_Control_FS+0xac>
 801099a:	a201      	add	r2, pc, #4	; (adr r2, 80109a0 <CDC_Control_FS+0x1c>)
 801099c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109a0:	08010a31 	.word	0x08010a31
 80109a4:	08010a31 	.word	0x08010a31
 80109a8:	08010a31 	.word	0x08010a31
 80109ac:	08010a31 	.word	0x08010a31
 80109b0:	08010a31 	.word	0x08010a31
 80109b4:	08010a31 	.word	0x08010a31
 80109b8:	08010a31 	.word	0x08010a31
 80109bc:	08010a31 	.word	0x08010a31
 80109c0:	08010a31 	.word	0x08010a31
 80109c4:	08010a31 	.word	0x08010a31
 80109c8:	08010a31 	.word	0x08010a31
 80109cc:	08010a31 	.word	0x08010a31
 80109d0:	08010a31 	.word	0x08010a31
 80109d4:	08010a31 	.word	0x08010a31
 80109d8:	08010a31 	.word	0x08010a31
 80109dc:	08010a31 	.word	0x08010a31
 80109e0:	08010a31 	.word	0x08010a31
 80109e4:	08010a31 	.word	0x08010a31
 80109e8:	08010a31 	.word	0x08010a31
 80109ec:	08010a31 	.word	0x08010a31
 80109f0:	08010a31 	.word	0x08010a31
 80109f4:	08010a31 	.word	0x08010a31
 80109f8:	08010a31 	.word	0x08010a31
 80109fc:	08010a31 	.word	0x08010a31
 8010a00:	08010a31 	.word	0x08010a31
 8010a04:	08010a31 	.word	0x08010a31
 8010a08:	08010a31 	.word	0x08010a31
 8010a0c:	08010a31 	.word	0x08010a31
 8010a10:	08010a31 	.word	0x08010a31
 8010a14:	08010a31 	.word	0x08010a31
 8010a18:	08010a31 	.word	0x08010a31
 8010a1c:	08010a31 	.word	0x08010a31
 8010a20:	08010a31 	.word	0x08010a31
 8010a24:	08010a31 	.word	0x08010a31
 8010a28:	08010a31 	.word	0x08010a31
 8010a2c:	08010a31 	.word	0x08010a31
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010a30:	bf00      	nop
  }

  return (USBD_OK);
 8010a32:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010a34:	4618      	mov	r0, r3
 8010a36:	370c      	adds	r7, #12
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3e:	4770      	bx	lr

08010a40 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b082      	sub	sp, #8
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
 8010a48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010a4a:	6879      	ldr	r1, [r7, #4]
 8010a4c:	4805      	ldr	r0, [pc, #20]	; (8010a64 <CDC_Receive_FS+0x24>)
 8010a4e:	f7fb fc24 	bl	800c29a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010a52:	4804      	ldr	r0, [pc, #16]	; (8010a64 <CDC_Receive_FS+0x24>)
 8010a54:	f7fb fc3a 	bl	800c2cc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010a58:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	3708      	adds	r7, #8
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	bd80      	pop	{r7, pc}
 8010a62:	bf00      	nop
 8010a64:	200057f0 	.word	0x200057f0

08010a68 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010a68:	b480      	push	{r7}
 8010a6a:	b087      	sub	sp, #28
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	60f8      	str	r0, [r7, #12]
 8010a70:	60b9      	str	r1, [r7, #8]
 8010a72:	4613      	mov	r3, r2
 8010a74:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010a76:	2300      	movs	r3, #0
 8010a78:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010a7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010a7e:	4618      	mov	r0, r3
 8010a80:	371c      	adds	r7, #28
 8010a82:	46bd      	mov	sp, r7
 8010a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a88:	4770      	bx	lr
	...

08010a8c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a8c:	b480      	push	{r7}
 8010a8e:	b083      	sub	sp, #12
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	4603      	mov	r3, r0
 8010a94:	6039      	str	r1, [r7, #0]
 8010a96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010a98:	683b      	ldr	r3, [r7, #0]
 8010a9a:	2212      	movs	r2, #18
 8010a9c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010a9e:	4b03      	ldr	r3, [pc, #12]	; (8010aac <USBD_FS_DeviceDescriptor+0x20>)
}
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	370c      	adds	r7, #12
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aaa:	4770      	bx	lr
 8010aac:	20000150 	.word	0x20000150

08010ab0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ab0:	b480      	push	{r7}
 8010ab2:	b083      	sub	sp, #12
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	4603      	mov	r3, r0
 8010ab8:	6039      	str	r1, [r7, #0]
 8010aba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010abc:	683b      	ldr	r3, [r7, #0]
 8010abe:	2204      	movs	r2, #4
 8010ac0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010ac2:	4b03      	ldr	r3, [pc, #12]	; (8010ad0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	370c      	adds	r7, #12
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ace:	4770      	bx	lr
 8010ad0:	20000164 	.word	0x20000164

08010ad4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b082      	sub	sp, #8
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	4603      	mov	r3, r0
 8010adc:	6039      	str	r1, [r7, #0]
 8010ade:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010ae0:	79fb      	ldrb	r3, [r7, #7]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d105      	bne.n	8010af2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010ae6:	683a      	ldr	r2, [r7, #0]
 8010ae8:	4907      	ldr	r1, [pc, #28]	; (8010b08 <USBD_FS_ProductStrDescriptor+0x34>)
 8010aea:	4808      	ldr	r0, [pc, #32]	; (8010b0c <USBD_FS_ProductStrDescriptor+0x38>)
 8010aec:	f7fc fca1 	bl	800d432 <USBD_GetString>
 8010af0:	e004      	b.n	8010afc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010af2:	683a      	ldr	r2, [r7, #0]
 8010af4:	4904      	ldr	r1, [pc, #16]	; (8010b08 <USBD_FS_ProductStrDescriptor+0x34>)
 8010af6:	4805      	ldr	r0, [pc, #20]	; (8010b0c <USBD_FS_ProductStrDescriptor+0x38>)
 8010af8:	f7fc fc9b 	bl	800d432 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010afc:	4b02      	ldr	r3, [pc, #8]	; (8010b08 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010afe:	4618      	mov	r0, r3
 8010b00:	3708      	adds	r7, #8
 8010b02:	46bd      	mov	sp, r7
 8010b04:	bd80      	pop	{r7, pc}
 8010b06:	bf00      	nop
 8010b08:	20006ac0 	.word	0x20006ac0
 8010b0c:	0801692c 	.word	0x0801692c

08010b10 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b082      	sub	sp, #8
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	4603      	mov	r3, r0
 8010b18:	6039      	str	r1, [r7, #0]
 8010b1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010b1c:	683a      	ldr	r2, [r7, #0]
 8010b1e:	4904      	ldr	r1, [pc, #16]	; (8010b30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010b20:	4804      	ldr	r0, [pc, #16]	; (8010b34 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010b22:	f7fc fc86 	bl	800d432 <USBD_GetString>
  return USBD_StrDesc;
 8010b26:	4b02      	ldr	r3, [pc, #8]	; (8010b30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010b28:	4618      	mov	r0, r3
 8010b2a:	3708      	adds	r7, #8
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	bd80      	pop	{r7, pc}
 8010b30:	20006ac0 	.word	0x20006ac0
 8010b34:	08016944 	.word	0x08016944

08010b38 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b082      	sub	sp, #8
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	4603      	mov	r3, r0
 8010b40:	6039      	str	r1, [r7, #0]
 8010b42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010b44:	683b      	ldr	r3, [r7, #0]
 8010b46:	221a      	movs	r2, #26
 8010b48:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010b4a:	f000 f843 	bl	8010bd4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010b4e:	4b02      	ldr	r3, [pc, #8]	; (8010b58 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010b50:	4618      	mov	r0, r3
 8010b52:	3708      	adds	r7, #8
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd80      	pop	{r7, pc}
 8010b58:	20000168 	.word	0x20000168

08010b5c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b082      	sub	sp, #8
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	4603      	mov	r3, r0
 8010b64:	6039      	str	r1, [r7, #0]
 8010b66:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010b68:	79fb      	ldrb	r3, [r7, #7]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d105      	bne.n	8010b7a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010b6e:	683a      	ldr	r2, [r7, #0]
 8010b70:	4907      	ldr	r1, [pc, #28]	; (8010b90 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010b72:	4808      	ldr	r0, [pc, #32]	; (8010b94 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010b74:	f7fc fc5d 	bl	800d432 <USBD_GetString>
 8010b78:	e004      	b.n	8010b84 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010b7a:	683a      	ldr	r2, [r7, #0]
 8010b7c:	4904      	ldr	r1, [pc, #16]	; (8010b90 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010b7e:	4805      	ldr	r0, [pc, #20]	; (8010b94 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010b80:	f7fc fc57 	bl	800d432 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010b84:	4b02      	ldr	r3, [pc, #8]	; (8010b90 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010b86:	4618      	mov	r0, r3
 8010b88:	3708      	adds	r7, #8
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	bd80      	pop	{r7, pc}
 8010b8e:	bf00      	nop
 8010b90:	20006ac0 	.word	0x20006ac0
 8010b94:	08016958 	.word	0x08016958

08010b98 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b082      	sub	sp, #8
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	6039      	str	r1, [r7, #0]
 8010ba2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010ba4:	79fb      	ldrb	r3, [r7, #7]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d105      	bne.n	8010bb6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010baa:	683a      	ldr	r2, [r7, #0]
 8010bac:	4907      	ldr	r1, [pc, #28]	; (8010bcc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010bae:	4808      	ldr	r0, [pc, #32]	; (8010bd0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010bb0:	f7fc fc3f 	bl	800d432 <USBD_GetString>
 8010bb4:	e004      	b.n	8010bc0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010bb6:	683a      	ldr	r2, [r7, #0]
 8010bb8:	4904      	ldr	r1, [pc, #16]	; (8010bcc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010bba:	4805      	ldr	r0, [pc, #20]	; (8010bd0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010bbc:	f7fc fc39 	bl	800d432 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010bc0:	4b02      	ldr	r3, [pc, #8]	; (8010bcc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	3708      	adds	r7, #8
 8010bc6:	46bd      	mov	sp, r7
 8010bc8:	bd80      	pop	{r7, pc}
 8010bca:	bf00      	nop
 8010bcc:	20006ac0 	.word	0x20006ac0
 8010bd0:	08016964 	.word	0x08016964

08010bd4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b084      	sub	sp, #16
 8010bd8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010bda:	4b0f      	ldr	r3, [pc, #60]	; (8010c18 <Get_SerialNum+0x44>)
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010be0:	4b0e      	ldr	r3, [pc, #56]	; (8010c1c <Get_SerialNum+0x48>)
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010be6:	4b0e      	ldr	r3, [pc, #56]	; (8010c20 <Get_SerialNum+0x4c>)
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010bec:	68fa      	ldr	r2, [r7, #12]
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	4413      	add	r3, r2
 8010bf2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d009      	beq.n	8010c0e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010bfa:	2208      	movs	r2, #8
 8010bfc:	4909      	ldr	r1, [pc, #36]	; (8010c24 <Get_SerialNum+0x50>)
 8010bfe:	68f8      	ldr	r0, [r7, #12]
 8010c00:	f000 f814 	bl	8010c2c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010c04:	2204      	movs	r2, #4
 8010c06:	4908      	ldr	r1, [pc, #32]	; (8010c28 <Get_SerialNum+0x54>)
 8010c08:	68b8      	ldr	r0, [r7, #8]
 8010c0a:	f000 f80f 	bl	8010c2c <IntToUnicode>
  }
}
 8010c0e:	bf00      	nop
 8010c10:	3710      	adds	r7, #16
 8010c12:	46bd      	mov	sp, r7
 8010c14:	bd80      	pop	{r7, pc}
 8010c16:	bf00      	nop
 8010c18:	1fff7a10 	.word	0x1fff7a10
 8010c1c:	1fff7a14 	.word	0x1fff7a14
 8010c20:	1fff7a18 	.word	0x1fff7a18
 8010c24:	2000016a 	.word	0x2000016a
 8010c28:	2000017a 	.word	0x2000017a

08010c2c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010c2c:	b480      	push	{r7}
 8010c2e:	b087      	sub	sp, #28
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	60f8      	str	r0, [r7, #12]
 8010c34:	60b9      	str	r1, [r7, #8]
 8010c36:	4613      	mov	r3, r2
 8010c38:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010c3e:	2300      	movs	r3, #0
 8010c40:	75fb      	strb	r3, [r7, #23]
 8010c42:	e027      	b.n	8010c94 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	0f1b      	lsrs	r3, r3, #28
 8010c48:	2b09      	cmp	r3, #9
 8010c4a:	d80b      	bhi.n	8010c64 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	0f1b      	lsrs	r3, r3, #28
 8010c50:	b2da      	uxtb	r2, r3
 8010c52:	7dfb      	ldrb	r3, [r7, #23]
 8010c54:	005b      	lsls	r3, r3, #1
 8010c56:	4619      	mov	r1, r3
 8010c58:	68bb      	ldr	r3, [r7, #8]
 8010c5a:	440b      	add	r3, r1
 8010c5c:	3230      	adds	r2, #48	; 0x30
 8010c5e:	b2d2      	uxtb	r2, r2
 8010c60:	701a      	strb	r2, [r3, #0]
 8010c62:	e00a      	b.n	8010c7a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	0f1b      	lsrs	r3, r3, #28
 8010c68:	b2da      	uxtb	r2, r3
 8010c6a:	7dfb      	ldrb	r3, [r7, #23]
 8010c6c:	005b      	lsls	r3, r3, #1
 8010c6e:	4619      	mov	r1, r3
 8010c70:	68bb      	ldr	r3, [r7, #8]
 8010c72:	440b      	add	r3, r1
 8010c74:	3237      	adds	r2, #55	; 0x37
 8010c76:	b2d2      	uxtb	r2, r2
 8010c78:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	011b      	lsls	r3, r3, #4
 8010c7e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010c80:	7dfb      	ldrb	r3, [r7, #23]
 8010c82:	005b      	lsls	r3, r3, #1
 8010c84:	3301      	adds	r3, #1
 8010c86:	68ba      	ldr	r2, [r7, #8]
 8010c88:	4413      	add	r3, r2
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010c8e:	7dfb      	ldrb	r3, [r7, #23]
 8010c90:	3301      	adds	r3, #1
 8010c92:	75fb      	strb	r3, [r7, #23]
 8010c94:	7dfa      	ldrb	r2, [r7, #23]
 8010c96:	79fb      	ldrb	r3, [r7, #7]
 8010c98:	429a      	cmp	r2, r3
 8010c9a:	d3d3      	bcc.n	8010c44 <IntToUnicode+0x18>
  }
}
 8010c9c:	bf00      	nop
 8010c9e:	bf00      	nop
 8010ca0:	371c      	adds	r7, #28
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca8:	4770      	bx	lr
	...

08010cac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b08a      	sub	sp, #40	; 0x28
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010cb4:	f107 0314 	add.w	r3, r7, #20
 8010cb8:	2200      	movs	r2, #0
 8010cba:	601a      	str	r2, [r3, #0]
 8010cbc:	605a      	str	r2, [r3, #4]
 8010cbe:	609a      	str	r2, [r3, #8]
 8010cc0:	60da      	str	r2, [r3, #12]
 8010cc2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010ccc:	d147      	bne.n	8010d5e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010cce:	2300      	movs	r3, #0
 8010cd0:	613b      	str	r3, [r7, #16]
 8010cd2:	4b25      	ldr	r3, [pc, #148]	; (8010d68 <HAL_PCD_MspInit+0xbc>)
 8010cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010cd6:	4a24      	ldr	r2, [pc, #144]	; (8010d68 <HAL_PCD_MspInit+0xbc>)
 8010cd8:	f043 0301 	orr.w	r3, r3, #1
 8010cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8010cde:	4b22      	ldr	r3, [pc, #136]	; (8010d68 <HAL_PCD_MspInit+0xbc>)
 8010ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ce2:	f003 0301 	and.w	r3, r3, #1
 8010ce6:	613b      	str	r3, [r7, #16]
 8010ce8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8010cea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010cf8:	f107 0314 	add.w	r3, r7, #20
 8010cfc:	4619      	mov	r1, r3
 8010cfe:	481b      	ldr	r0, [pc, #108]	; (8010d6c <HAL_PCD_MspInit+0xc0>)
 8010d00:	f7f4 facc 	bl	800529c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010d04:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010d0a:	2302      	movs	r3, #2
 8010d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d0e:	2300      	movs	r3, #0
 8010d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010d12:	2303      	movs	r3, #3
 8010d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010d16:	230a      	movs	r3, #10
 8010d18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010d1a:	f107 0314 	add.w	r3, r7, #20
 8010d1e:	4619      	mov	r1, r3
 8010d20:	4812      	ldr	r0, [pc, #72]	; (8010d6c <HAL_PCD_MspInit+0xc0>)
 8010d22:	f7f4 fabb 	bl	800529c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010d26:	4b10      	ldr	r3, [pc, #64]	; (8010d68 <HAL_PCD_MspInit+0xbc>)
 8010d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d2a:	4a0f      	ldr	r2, [pc, #60]	; (8010d68 <HAL_PCD_MspInit+0xbc>)
 8010d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d30:	6353      	str	r3, [r2, #52]	; 0x34
 8010d32:	2300      	movs	r3, #0
 8010d34:	60fb      	str	r3, [r7, #12]
 8010d36:	4b0c      	ldr	r3, [pc, #48]	; (8010d68 <HAL_PCD_MspInit+0xbc>)
 8010d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d3a:	4a0b      	ldr	r2, [pc, #44]	; (8010d68 <HAL_PCD_MspInit+0xbc>)
 8010d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010d40:	6453      	str	r3, [r2, #68]	; 0x44
 8010d42:	4b09      	ldr	r3, [pc, #36]	; (8010d68 <HAL_PCD_MspInit+0xbc>)
 8010d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010d4a:	60fb      	str	r3, [r7, #12]
 8010d4c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010d4e:	2200      	movs	r2, #0
 8010d50:	2105      	movs	r1, #5
 8010d52:	2043      	movs	r0, #67	; 0x43
 8010d54:	f7f4 fa6a 	bl	800522c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010d58:	2043      	movs	r0, #67	; 0x43
 8010d5a:	f7f4 fa83 	bl	8005264 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010d5e:	bf00      	nop
 8010d60:	3728      	adds	r7, #40	; 0x28
 8010d62:	46bd      	mov	sp, r7
 8010d64:	bd80      	pop	{r7, pc}
 8010d66:	bf00      	nop
 8010d68:	40023800 	.word	0x40023800
 8010d6c:	40020000 	.word	0x40020000

08010d70 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b082      	sub	sp, #8
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010d84:	4619      	mov	r1, r3
 8010d86:	4610      	mov	r0, r2
 8010d88:	f7fb fb6c 	bl	800c464 <USBD_LL_SetupStage>
}
 8010d8c:	bf00      	nop
 8010d8e:	3708      	adds	r7, #8
 8010d90:	46bd      	mov	sp, r7
 8010d92:	bd80      	pop	{r7, pc}

08010d94 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b082      	sub	sp, #8
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	6078      	str	r0, [r7, #4]
 8010d9c:	460b      	mov	r3, r1
 8010d9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010da6:	78fa      	ldrb	r2, [r7, #3]
 8010da8:	6879      	ldr	r1, [r7, #4]
 8010daa:	4613      	mov	r3, r2
 8010dac:	00db      	lsls	r3, r3, #3
 8010dae:	1a9b      	subs	r3, r3, r2
 8010db0:	009b      	lsls	r3, r3, #2
 8010db2:	440b      	add	r3, r1
 8010db4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010db8:	681a      	ldr	r2, [r3, #0]
 8010dba:	78fb      	ldrb	r3, [r7, #3]
 8010dbc:	4619      	mov	r1, r3
 8010dbe:	f7fb fba6 	bl	800c50e <USBD_LL_DataOutStage>
}
 8010dc2:	bf00      	nop
 8010dc4:	3708      	adds	r7, #8
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	bd80      	pop	{r7, pc}

08010dca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010dca:	b580      	push	{r7, lr}
 8010dcc:	b082      	sub	sp, #8
 8010dce:	af00      	add	r7, sp, #0
 8010dd0:	6078      	str	r0, [r7, #4]
 8010dd2:	460b      	mov	r3, r1
 8010dd4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010ddc:	78fa      	ldrb	r2, [r7, #3]
 8010dde:	6879      	ldr	r1, [r7, #4]
 8010de0:	4613      	mov	r3, r2
 8010de2:	00db      	lsls	r3, r3, #3
 8010de4:	1a9b      	subs	r3, r3, r2
 8010de6:	009b      	lsls	r3, r3, #2
 8010de8:	440b      	add	r3, r1
 8010dea:	3348      	adds	r3, #72	; 0x48
 8010dec:	681a      	ldr	r2, [r3, #0]
 8010dee:	78fb      	ldrb	r3, [r7, #3]
 8010df0:	4619      	mov	r1, r3
 8010df2:	f7fb fbef 	bl	800c5d4 <USBD_LL_DataInStage>
}
 8010df6:	bf00      	nop
 8010df8:	3708      	adds	r7, #8
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	bd80      	pop	{r7, pc}

08010dfe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010dfe:	b580      	push	{r7, lr}
 8010e00:	b082      	sub	sp, #8
 8010e02:	af00      	add	r7, sp, #0
 8010e04:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	f7fb fd03 	bl	800c818 <USBD_LL_SOF>
}
 8010e12:	bf00      	nop
 8010e14:	3708      	adds	r7, #8
 8010e16:	46bd      	mov	sp, r7
 8010e18:	bd80      	pop	{r7, pc}

08010e1a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e1a:	b580      	push	{r7, lr}
 8010e1c:	b084      	sub	sp, #16
 8010e1e:	af00      	add	r7, sp, #0
 8010e20:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010e22:	2301      	movs	r3, #1
 8010e24:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	68db      	ldr	r3, [r3, #12]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d102      	bne.n	8010e34 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8010e2e:	2300      	movs	r3, #0
 8010e30:	73fb      	strb	r3, [r7, #15]
 8010e32:	e008      	b.n	8010e46 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	68db      	ldr	r3, [r3, #12]
 8010e38:	2b02      	cmp	r3, #2
 8010e3a:	d102      	bne.n	8010e42 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010e3c:	2301      	movs	r3, #1
 8010e3e:	73fb      	strb	r3, [r7, #15]
 8010e40:	e001      	b.n	8010e46 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010e42:	f7f1 fc6b 	bl	800271c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010e4c:	7bfa      	ldrb	r2, [r7, #15]
 8010e4e:	4611      	mov	r1, r2
 8010e50:	4618      	mov	r0, r3
 8010e52:	f7fb fca3 	bl	800c79c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	f7fb fc4f 	bl	800c700 <USBD_LL_Reset>
}
 8010e62:	bf00      	nop
 8010e64:	3710      	adds	r7, #16
 8010e66:	46bd      	mov	sp, r7
 8010e68:	bd80      	pop	{r7, pc}
	...

08010e6c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e6c:	b580      	push	{r7, lr}
 8010e6e:	b082      	sub	sp, #8
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	f7fb fc9e 	bl	800c7bc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	687a      	ldr	r2, [r7, #4]
 8010e8c:	6812      	ldr	r2, [r2, #0]
 8010e8e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010e92:	f043 0301 	orr.w	r3, r3, #1
 8010e96:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	6a1b      	ldr	r3, [r3, #32]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d005      	beq.n	8010eac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010ea0:	4b04      	ldr	r3, [pc, #16]	; (8010eb4 <HAL_PCD_SuspendCallback+0x48>)
 8010ea2:	691b      	ldr	r3, [r3, #16]
 8010ea4:	4a03      	ldr	r2, [pc, #12]	; (8010eb4 <HAL_PCD_SuspendCallback+0x48>)
 8010ea6:	f043 0306 	orr.w	r3, r3, #6
 8010eaa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010eac:	bf00      	nop
 8010eae:	3708      	adds	r7, #8
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	bd80      	pop	{r7, pc}
 8010eb4:	e000ed00 	.word	0xe000ed00

08010eb8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b082      	sub	sp, #8
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	f7fb fc8e 	bl	800c7e8 <USBD_LL_Resume>
}
 8010ecc:	bf00      	nop
 8010ece:	3708      	adds	r7, #8
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	bd80      	pop	{r7, pc}

08010ed4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b082      	sub	sp, #8
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	6078      	str	r0, [r7, #4]
 8010edc:	460b      	mov	r3, r1
 8010ede:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010ee6:	78fa      	ldrb	r2, [r7, #3]
 8010ee8:	4611      	mov	r1, r2
 8010eea:	4618      	mov	r0, r3
 8010eec:	f7fb fcdc 	bl	800c8a8 <USBD_LL_IsoOUTIncomplete>
}
 8010ef0:	bf00      	nop
 8010ef2:	3708      	adds	r7, #8
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	bd80      	pop	{r7, pc}

08010ef8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b082      	sub	sp, #8
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
 8010f00:	460b      	mov	r3, r1
 8010f02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010f0a:	78fa      	ldrb	r2, [r7, #3]
 8010f0c:	4611      	mov	r1, r2
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f7fb fca4 	bl	800c85c <USBD_LL_IsoINIncomplete>
}
 8010f14:	bf00      	nop
 8010f16:	3708      	adds	r7, #8
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	bd80      	pop	{r7, pc}

08010f1c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b082      	sub	sp, #8
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	f7fb fce2 	bl	800c8f4 <USBD_LL_DevConnected>
}
 8010f30:	bf00      	nop
 8010f32:	3708      	adds	r7, #8
 8010f34:	46bd      	mov	sp, r7
 8010f36:	bd80      	pop	{r7, pc}

08010f38 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b082      	sub	sp, #8
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010f46:	4618      	mov	r0, r3
 8010f48:	f7fb fcdf 	bl	800c90a <USBD_LL_DevDisconnected>
}
 8010f4c:	bf00      	nop
 8010f4e:	3708      	adds	r7, #8
 8010f50:	46bd      	mov	sp, r7
 8010f52:	bd80      	pop	{r7, pc}

08010f54 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b082      	sub	sp, #8
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	781b      	ldrb	r3, [r3, #0]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d13c      	bne.n	8010fde <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010f64:	4a20      	ldr	r2, [pc, #128]	; (8010fe8 <USBD_LL_Init+0x94>)
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	4a1e      	ldr	r2, [pc, #120]	; (8010fe8 <USBD_LL_Init+0x94>)
 8010f70:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010f74:	4b1c      	ldr	r3, [pc, #112]	; (8010fe8 <USBD_LL_Init+0x94>)
 8010f76:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010f7a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8010f7c:	4b1a      	ldr	r3, [pc, #104]	; (8010fe8 <USBD_LL_Init+0x94>)
 8010f7e:	2204      	movs	r2, #4
 8010f80:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010f82:	4b19      	ldr	r3, [pc, #100]	; (8010fe8 <USBD_LL_Init+0x94>)
 8010f84:	2202      	movs	r2, #2
 8010f86:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010f88:	4b17      	ldr	r3, [pc, #92]	; (8010fe8 <USBD_LL_Init+0x94>)
 8010f8a:	2200      	movs	r2, #0
 8010f8c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010f8e:	4b16      	ldr	r3, [pc, #88]	; (8010fe8 <USBD_LL_Init+0x94>)
 8010f90:	2202      	movs	r2, #2
 8010f92:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010f94:	4b14      	ldr	r3, [pc, #80]	; (8010fe8 <USBD_LL_Init+0x94>)
 8010f96:	2200      	movs	r2, #0
 8010f98:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010f9a:	4b13      	ldr	r3, [pc, #76]	; (8010fe8 <USBD_LL_Init+0x94>)
 8010f9c:	2200      	movs	r2, #0
 8010f9e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010fa0:	4b11      	ldr	r3, [pc, #68]	; (8010fe8 <USBD_LL_Init+0x94>)
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8010fa6:	4b10      	ldr	r3, [pc, #64]	; (8010fe8 <USBD_LL_Init+0x94>)
 8010fa8:	2201      	movs	r2, #1
 8010faa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010fac:	4b0e      	ldr	r3, [pc, #56]	; (8010fe8 <USBD_LL_Init+0x94>)
 8010fae:	2200      	movs	r2, #0
 8010fb0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010fb2:	480d      	ldr	r0, [pc, #52]	; (8010fe8 <USBD_LL_Init+0x94>)
 8010fb4:	f7f5 fcd6 	bl	8006964 <HAL_PCD_Init>
 8010fb8:	4603      	mov	r3, r0
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d001      	beq.n	8010fc2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8010fbe:	f7f1 fbad 	bl	800271c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010fc2:	2180      	movs	r1, #128	; 0x80
 8010fc4:	4808      	ldr	r0, [pc, #32]	; (8010fe8 <USBD_LL_Init+0x94>)
 8010fc6:	f7f6 fe34 	bl	8007c32 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010fca:	2240      	movs	r2, #64	; 0x40
 8010fcc:	2100      	movs	r1, #0
 8010fce:	4806      	ldr	r0, [pc, #24]	; (8010fe8 <USBD_LL_Init+0x94>)
 8010fd0:	f7f6 fde8 	bl	8007ba4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010fd4:	2280      	movs	r2, #128	; 0x80
 8010fd6:	2101      	movs	r1, #1
 8010fd8:	4803      	ldr	r0, [pc, #12]	; (8010fe8 <USBD_LL_Init+0x94>)
 8010fda:	f7f6 fde3 	bl	8007ba4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010fde:	2300      	movs	r3, #0
}
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	3708      	adds	r7, #8
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	bd80      	pop	{r7, pc}
 8010fe8:	20006cc0 	.word	0x20006cc0

08010fec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b084      	sub	sp, #16
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011002:	4618      	mov	r0, r3
 8011004:	f7f5 fdcb 	bl	8006b9e <HAL_PCD_Start>
 8011008:	4603      	mov	r3, r0
 801100a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801100c:	7bfb      	ldrb	r3, [r7, #15]
 801100e:	4618      	mov	r0, r3
 8011010:	f000 f942 	bl	8011298 <USBD_Get_USB_Status>
 8011014:	4603      	mov	r3, r0
 8011016:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011018:	7bbb      	ldrb	r3, [r7, #14]
}
 801101a:	4618      	mov	r0, r3
 801101c:	3710      	adds	r7, #16
 801101e:	46bd      	mov	sp, r7
 8011020:	bd80      	pop	{r7, pc}

08011022 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011022:	b580      	push	{r7, lr}
 8011024:	b084      	sub	sp, #16
 8011026:	af00      	add	r7, sp, #0
 8011028:	6078      	str	r0, [r7, #4]
 801102a:	4608      	mov	r0, r1
 801102c:	4611      	mov	r1, r2
 801102e:	461a      	mov	r2, r3
 8011030:	4603      	mov	r3, r0
 8011032:	70fb      	strb	r3, [r7, #3]
 8011034:	460b      	mov	r3, r1
 8011036:	70bb      	strb	r3, [r7, #2]
 8011038:	4613      	mov	r3, r2
 801103a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801103c:	2300      	movs	r3, #0
 801103e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011040:	2300      	movs	r3, #0
 8011042:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801104a:	78bb      	ldrb	r3, [r7, #2]
 801104c:	883a      	ldrh	r2, [r7, #0]
 801104e:	78f9      	ldrb	r1, [r7, #3]
 8011050:	f7f6 f9af 	bl	80073b2 <HAL_PCD_EP_Open>
 8011054:	4603      	mov	r3, r0
 8011056:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011058:	7bfb      	ldrb	r3, [r7, #15]
 801105a:	4618      	mov	r0, r3
 801105c:	f000 f91c 	bl	8011298 <USBD_Get_USB_Status>
 8011060:	4603      	mov	r3, r0
 8011062:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011064:	7bbb      	ldrb	r3, [r7, #14]
}
 8011066:	4618      	mov	r0, r3
 8011068:	3710      	adds	r7, #16
 801106a:	46bd      	mov	sp, r7
 801106c:	bd80      	pop	{r7, pc}

0801106e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801106e:	b580      	push	{r7, lr}
 8011070:	b084      	sub	sp, #16
 8011072:	af00      	add	r7, sp, #0
 8011074:	6078      	str	r0, [r7, #4]
 8011076:	460b      	mov	r3, r1
 8011078:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801107a:	2300      	movs	r3, #0
 801107c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801107e:	2300      	movs	r3, #0
 8011080:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011088:	78fa      	ldrb	r2, [r7, #3]
 801108a:	4611      	mov	r1, r2
 801108c:	4618      	mov	r0, r3
 801108e:	f7f6 f9f8 	bl	8007482 <HAL_PCD_EP_Close>
 8011092:	4603      	mov	r3, r0
 8011094:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011096:	7bfb      	ldrb	r3, [r7, #15]
 8011098:	4618      	mov	r0, r3
 801109a:	f000 f8fd 	bl	8011298 <USBD_Get_USB_Status>
 801109e:	4603      	mov	r3, r0
 80110a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80110a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80110a4:	4618      	mov	r0, r3
 80110a6:	3710      	adds	r7, #16
 80110a8:	46bd      	mov	sp, r7
 80110aa:	bd80      	pop	{r7, pc}

080110ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b084      	sub	sp, #16
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
 80110b4:	460b      	mov	r3, r1
 80110b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80110b8:	2300      	movs	r3, #0
 80110ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80110bc:	2300      	movs	r3, #0
 80110be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80110c6:	78fa      	ldrb	r2, [r7, #3]
 80110c8:	4611      	mov	r1, r2
 80110ca:	4618      	mov	r0, r3
 80110cc:	f7f6 fad0 	bl	8007670 <HAL_PCD_EP_SetStall>
 80110d0:	4603      	mov	r3, r0
 80110d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80110d4:	7bfb      	ldrb	r3, [r7, #15]
 80110d6:	4618      	mov	r0, r3
 80110d8:	f000 f8de 	bl	8011298 <USBD_Get_USB_Status>
 80110dc:	4603      	mov	r3, r0
 80110de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80110e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80110e2:	4618      	mov	r0, r3
 80110e4:	3710      	adds	r7, #16
 80110e6:	46bd      	mov	sp, r7
 80110e8:	bd80      	pop	{r7, pc}

080110ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80110ea:	b580      	push	{r7, lr}
 80110ec:	b084      	sub	sp, #16
 80110ee:	af00      	add	r7, sp, #0
 80110f0:	6078      	str	r0, [r7, #4]
 80110f2:	460b      	mov	r3, r1
 80110f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80110f6:	2300      	movs	r3, #0
 80110f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80110fa:	2300      	movs	r3, #0
 80110fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011104:	78fa      	ldrb	r2, [r7, #3]
 8011106:	4611      	mov	r1, r2
 8011108:	4618      	mov	r0, r3
 801110a:	f7f6 fb15 	bl	8007738 <HAL_PCD_EP_ClrStall>
 801110e:	4603      	mov	r3, r0
 8011110:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011112:	7bfb      	ldrb	r3, [r7, #15]
 8011114:	4618      	mov	r0, r3
 8011116:	f000 f8bf 	bl	8011298 <USBD_Get_USB_Status>
 801111a:	4603      	mov	r3, r0
 801111c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801111e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011120:	4618      	mov	r0, r3
 8011122:	3710      	adds	r7, #16
 8011124:	46bd      	mov	sp, r7
 8011126:	bd80      	pop	{r7, pc}

08011128 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011128:	b480      	push	{r7}
 801112a:	b085      	sub	sp, #20
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
 8011130:	460b      	mov	r3, r1
 8011132:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801113a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801113c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011140:	2b00      	cmp	r3, #0
 8011142:	da0b      	bge.n	801115c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011144:	78fb      	ldrb	r3, [r7, #3]
 8011146:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801114a:	68f9      	ldr	r1, [r7, #12]
 801114c:	4613      	mov	r3, r2
 801114e:	00db      	lsls	r3, r3, #3
 8011150:	1a9b      	subs	r3, r3, r2
 8011152:	009b      	lsls	r3, r3, #2
 8011154:	440b      	add	r3, r1
 8011156:	333e      	adds	r3, #62	; 0x3e
 8011158:	781b      	ldrb	r3, [r3, #0]
 801115a:	e00b      	b.n	8011174 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801115c:	78fb      	ldrb	r3, [r7, #3]
 801115e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011162:	68f9      	ldr	r1, [r7, #12]
 8011164:	4613      	mov	r3, r2
 8011166:	00db      	lsls	r3, r3, #3
 8011168:	1a9b      	subs	r3, r3, r2
 801116a:	009b      	lsls	r3, r3, #2
 801116c:	440b      	add	r3, r1
 801116e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011172:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011174:	4618      	mov	r0, r3
 8011176:	3714      	adds	r7, #20
 8011178:	46bd      	mov	sp, r7
 801117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117e:	4770      	bx	lr

08011180 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011180:	b580      	push	{r7, lr}
 8011182:	b084      	sub	sp, #16
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
 8011188:	460b      	mov	r3, r1
 801118a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801118c:	2300      	movs	r3, #0
 801118e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011190:	2300      	movs	r3, #0
 8011192:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801119a:	78fa      	ldrb	r2, [r7, #3]
 801119c:	4611      	mov	r1, r2
 801119e:	4618      	mov	r0, r3
 80111a0:	f7f6 f8e2 	bl	8007368 <HAL_PCD_SetAddress>
 80111a4:	4603      	mov	r3, r0
 80111a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80111a8:	7bfb      	ldrb	r3, [r7, #15]
 80111aa:	4618      	mov	r0, r3
 80111ac:	f000 f874 	bl	8011298 <USBD_Get_USB_Status>
 80111b0:	4603      	mov	r3, r0
 80111b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80111b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80111b6:	4618      	mov	r0, r3
 80111b8:	3710      	adds	r7, #16
 80111ba:	46bd      	mov	sp, r7
 80111bc:	bd80      	pop	{r7, pc}

080111be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80111be:	b580      	push	{r7, lr}
 80111c0:	b086      	sub	sp, #24
 80111c2:	af00      	add	r7, sp, #0
 80111c4:	60f8      	str	r0, [r7, #12]
 80111c6:	607a      	str	r2, [r7, #4]
 80111c8:	603b      	str	r3, [r7, #0]
 80111ca:	460b      	mov	r3, r1
 80111cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80111ce:	2300      	movs	r3, #0
 80111d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80111d2:	2300      	movs	r3, #0
 80111d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80111dc:	7af9      	ldrb	r1, [r7, #11]
 80111de:	683b      	ldr	r3, [r7, #0]
 80111e0:	687a      	ldr	r2, [r7, #4]
 80111e2:	f7f6 f9fb 	bl	80075dc <HAL_PCD_EP_Transmit>
 80111e6:	4603      	mov	r3, r0
 80111e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80111ea:	7dfb      	ldrb	r3, [r7, #23]
 80111ec:	4618      	mov	r0, r3
 80111ee:	f000 f853 	bl	8011298 <USBD_Get_USB_Status>
 80111f2:	4603      	mov	r3, r0
 80111f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80111f6:	7dbb      	ldrb	r3, [r7, #22]
}
 80111f8:	4618      	mov	r0, r3
 80111fa:	3718      	adds	r7, #24
 80111fc:	46bd      	mov	sp, r7
 80111fe:	bd80      	pop	{r7, pc}

08011200 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011200:	b580      	push	{r7, lr}
 8011202:	b086      	sub	sp, #24
 8011204:	af00      	add	r7, sp, #0
 8011206:	60f8      	str	r0, [r7, #12]
 8011208:	607a      	str	r2, [r7, #4]
 801120a:	603b      	str	r3, [r7, #0]
 801120c:	460b      	mov	r3, r1
 801120e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011210:	2300      	movs	r3, #0
 8011212:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011214:	2300      	movs	r3, #0
 8011216:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801121e:	7af9      	ldrb	r1, [r7, #11]
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	687a      	ldr	r2, [r7, #4]
 8011224:	f7f6 f977 	bl	8007516 <HAL_PCD_EP_Receive>
 8011228:	4603      	mov	r3, r0
 801122a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801122c:	7dfb      	ldrb	r3, [r7, #23]
 801122e:	4618      	mov	r0, r3
 8011230:	f000 f832 	bl	8011298 <USBD_Get_USB_Status>
 8011234:	4603      	mov	r3, r0
 8011236:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011238:	7dbb      	ldrb	r3, [r7, #22]
}
 801123a:	4618      	mov	r0, r3
 801123c:	3718      	adds	r7, #24
 801123e:	46bd      	mov	sp, r7
 8011240:	bd80      	pop	{r7, pc}

08011242 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011242:	b580      	push	{r7, lr}
 8011244:	b082      	sub	sp, #8
 8011246:	af00      	add	r7, sp, #0
 8011248:	6078      	str	r0, [r7, #4]
 801124a:	460b      	mov	r3, r1
 801124c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011254:	78fa      	ldrb	r2, [r7, #3]
 8011256:	4611      	mov	r1, r2
 8011258:	4618      	mov	r0, r3
 801125a:	f7f6 f9a7 	bl	80075ac <HAL_PCD_EP_GetRxCount>
 801125e:	4603      	mov	r3, r0
}
 8011260:	4618      	mov	r0, r3
 8011262:	3708      	adds	r7, #8
 8011264:	46bd      	mov	sp, r7
 8011266:	bd80      	pop	{r7, pc}

08011268 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011268:	b480      	push	{r7}
 801126a:	b083      	sub	sp, #12
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011270:	4b03      	ldr	r3, [pc, #12]	; (8011280 <USBD_static_malloc+0x18>)
}
 8011272:	4618      	mov	r0, r3
 8011274:	370c      	adds	r7, #12
 8011276:	46bd      	mov	sp, r7
 8011278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127c:	4770      	bx	lr
 801127e:	bf00      	nop
 8011280:	20004fbc 	.word	0x20004fbc

08011284 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011284:	b480      	push	{r7}
 8011286:	b083      	sub	sp, #12
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]

}
 801128c:	bf00      	nop
 801128e:	370c      	adds	r7, #12
 8011290:	46bd      	mov	sp, r7
 8011292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011296:	4770      	bx	lr

08011298 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011298:	b480      	push	{r7}
 801129a:	b085      	sub	sp, #20
 801129c:	af00      	add	r7, sp, #0
 801129e:	4603      	mov	r3, r0
 80112a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80112a2:	2300      	movs	r3, #0
 80112a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80112a6:	79fb      	ldrb	r3, [r7, #7]
 80112a8:	2b03      	cmp	r3, #3
 80112aa:	d817      	bhi.n	80112dc <USBD_Get_USB_Status+0x44>
 80112ac:	a201      	add	r2, pc, #4	; (adr r2, 80112b4 <USBD_Get_USB_Status+0x1c>)
 80112ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112b2:	bf00      	nop
 80112b4:	080112c5 	.word	0x080112c5
 80112b8:	080112cb 	.word	0x080112cb
 80112bc:	080112d1 	.word	0x080112d1
 80112c0:	080112d7 	.word	0x080112d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80112c4:	2300      	movs	r3, #0
 80112c6:	73fb      	strb	r3, [r7, #15]
    break;
 80112c8:	e00b      	b.n	80112e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80112ca:	2303      	movs	r3, #3
 80112cc:	73fb      	strb	r3, [r7, #15]
    break;
 80112ce:	e008      	b.n	80112e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80112d0:	2301      	movs	r3, #1
 80112d2:	73fb      	strb	r3, [r7, #15]
    break;
 80112d4:	e005      	b.n	80112e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80112d6:	2303      	movs	r3, #3
 80112d8:	73fb      	strb	r3, [r7, #15]
    break;
 80112da:	e002      	b.n	80112e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80112dc:	2303      	movs	r3, #3
 80112de:	73fb      	strb	r3, [r7, #15]
    break;
 80112e0:	bf00      	nop
  }
  return usb_status;
 80112e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80112e4:	4618      	mov	r0, r3
 80112e6:	3714      	adds	r7, #20
 80112e8:	46bd      	mov	sp, r7
 80112ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ee:	4770      	bx	lr

080112f0 <__cxa_pure_virtual>:
 80112f0:	b508      	push	{r3, lr}
 80112f2:	f000 f80d 	bl	8011310 <_ZSt9terminatev>

080112f6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80112f6:	b508      	push	{r3, lr}
 80112f8:	4780      	blx	r0
 80112fa:	f000 f80e 	bl	801131a <abort>
	...

08011300 <_ZSt13get_terminatev>:
 8011300:	4b02      	ldr	r3, [pc, #8]	; (801130c <_ZSt13get_terminatev+0xc>)
 8011302:	6818      	ldr	r0, [r3, #0]
 8011304:	f3bf 8f5b 	dmb	ish
 8011308:	4770      	bx	lr
 801130a:	bf00      	nop
 801130c:	20000184 	.word	0x20000184

08011310 <_ZSt9terminatev>:
 8011310:	b508      	push	{r3, lr}
 8011312:	f7ff fff5 	bl	8011300 <_ZSt13get_terminatev>
 8011316:	f7ff ffee 	bl	80112f6 <_ZN10__cxxabiv111__terminateEPFvvE>

0801131a <abort>:
 801131a:	b508      	push	{r3, lr}
 801131c:	2006      	movs	r0, #6
 801131e:	f001 f92b 	bl	8012578 <raise>
 8011322:	2001      	movs	r0, #1
 8011324:	f7f1 fde6 	bl	8002ef4 <_exit>

08011328 <__errno>:
 8011328:	4b01      	ldr	r3, [pc, #4]	; (8011330 <__errno+0x8>)
 801132a:	6818      	ldr	r0, [r3, #0]
 801132c:	4770      	bx	lr
 801132e:	bf00      	nop
 8011330:	20000188 	.word	0x20000188

08011334 <std>:
 8011334:	2300      	movs	r3, #0
 8011336:	b510      	push	{r4, lr}
 8011338:	4604      	mov	r4, r0
 801133a:	e9c0 3300 	strd	r3, r3, [r0]
 801133e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011342:	6083      	str	r3, [r0, #8]
 8011344:	8181      	strh	r1, [r0, #12]
 8011346:	6643      	str	r3, [r0, #100]	; 0x64
 8011348:	81c2      	strh	r2, [r0, #14]
 801134a:	6183      	str	r3, [r0, #24]
 801134c:	4619      	mov	r1, r3
 801134e:	2208      	movs	r2, #8
 8011350:	305c      	adds	r0, #92	; 0x5c
 8011352:	f000 f93d 	bl	80115d0 <memset>
 8011356:	4b05      	ldr	r3, [pc, #20]	; (801136c <std+0x38>)
 8011358:	6263      	str	r3, [r4, #36]	; 0x24
 801135a:	4b05      	ldr	r3, [pc, #20]	; (8011370 <std+0x3c>)
 801135c:	62a3      	str	r3, [r4, #40]	; 0x28
 801135e:	4b05      	ldr	r3, [pc, #20]	; (8011374 <std+0x40>)
 8011360:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011362:	4b05      	ldr	r3, [pc, #20]	; (8011378 <std+0x44>)
 8011364:	6224      	str	r4, [r4, #32]
 8011366:	6323      	str	r3, [r4, #48]	; 0x30
 8011368:	bd10      	pop	{r4, pc}
 801136a:	bf00      	nop
 801136c:	08012649 	.word	0x08012649
 8011370:	0801266f 	.word	0x0801266f
 8011374:	080126a7 	.word	0x080126a7
 8011378:	080126cb 	.word	0x080126cb

0801137c <_cleanup_r>:
 801137c:	4901      	ldr	r1, [pc, #4]	; (8011384 <_cleanup_r+0x8>)
 801137e:	f000 b8af 	b.w	80114e0 <_fwalk_reent>
 8011382:	bf00      	nop
 8011384:	080143d5 	.word	0x080143d5

08011388 <__sfmoreglue>:
 8011388:	b570      	push	{r4, r5, r6, lr}
 801138a:	1e4a      	subs	r2, r1, #1
 801138c:	2568      	movs	r5, #104	; 0x68
 801138e:	4355      	muls	r5, r2
 8011390:	460e      	mov	r6, r1
 8011392:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011396:	f000 f973 	bl	8011680 <_malloc_r>
 801139a:	4604      	mov	r4, r0
 801139c:	b140      	cbz	r0, 80113b0 <__sfmoreglue+0x28>
 801139e:	2100      	movs	r1, #0
 80113a0:	e9c0 1600 	strd	r1, r6, [r0]
 80113a4:	300c      	adds	r0, #12
 80113a6:	60a0      	str	r0, [r4, #8]
 80113a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80113ac:	f000 f910 	bl	80115d0 <memset>
 80113b0:	4620      	mov	r0, r4
 80113b2:	bd70      	pop	{r4, r5, r6, pc}

080113b4 <__sfp_lock_acquire>:
 80113b4:	4801      	ldr	r0, [pc, #4]	; (80113bc <__sfp_lock_acquire+0x8>)
 80113b6:	f000 b8d8 	b.w	801156a <__retarget_lock_acquire_recursive>
 80113ba:	bf00      	nop
 80113bc:	200070d0 	.word	0x200070d0

080113c0 <__sfp_lock_release>:
 80113c0:	4801      	ldr	r0, [pc, #4]	; (80113c8 <__sfp_lock_release+0x8>)
 80113c2:	f000 b8d3 	b.w	801156c <__retarget_lock_release_recursive>
 80113c6:	bf00      	nop
 80113c8:	200070d0 	.word	0x200070d0

080113cc <__sinit_lock_acquire>:
 80113cc:	4801      	ldr	r0, [pc, #4]	; (80113d4 <__sinit_lock_acquire+0x8>)
 80113ce:	f000 b8cc 	b.w	801156a <__retarget_lock_acquire_recursive>
 80113d2:	bf00      	nop
 80113d4:	200070cb 	.word	0x200070cb

080113d8 <__sinit_lock_release>:
 80113d8:	4801      	ldr	r0, [pc, #4]	; (80113e0 <__sinit_lock_release+0x8>)
 80113da:	f000 b8c7 	b.w	801156c <__retarget_lock_release_recursive>
 80113de:	bf00      	nop
 80113e0:	200070cb 	.word	0x200070cb

080113e4 <__sinit>:
 80113e4:	b510      	push	{r4, lr}
 80113e6:	4604      	mov	r4, r0
 80113e8:	f7ff fff0 	bl	80113cc <__sinit_lock_acquire>
 80113ec:	69a3      	ldr	r3, [r4, #24]
 80113ee:	b11b      	cbz	r3, 80113f8 <__sinit+0x14>
 80113f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113f4:	f7ff bff0 	b.w	80113d8 <__sinit_lock_release>
 80113f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80113fc:	6523      	str	r3, [r4, #80]	; 0x50
 80113fe:	4b13      	ldr	r3, [pc, #76]	; (801144c <__sinit+0x68>)
 8011400:	4a13      	ldr	r2, [pc, #76]	; (8011450 <__sinit+0x6c>)
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	62a2      	str	r2, [r4, #40]	; 0x28
 8011406:	42a3      	cmp	r3, r4
 8011408:	bf04      	itt	eq
 801140a:	2301      	moveq	r3, #1
 801140c:	61a3      	streq	r3, [r4, #24]
 801140e:	4620      	mov	r0, r4
 8011410:	f000 f820 	bl	8011454 <__sfp>
 8011414:	6060      	str	r0, [r4, #4]
 8011416:	4620      	mov	r0, r4
 8011418:	f000 f81c 	bl	8011454 <__sfp>
 801141c:	60a0      	str	r0, [r4, #8]
 801141e:	4620      	mov	r0, r4
 8011420:	f000 f818 	bl	8011454 <__sfp>
 8011424:	2200      	movs	r2, #0
 8011426:	60e0      	str	r0, [r4, #12]
 8011428:	2104      	movs	r1, #4
 801142a:	6860      	ldr	r0, [r4, #4]
 801142c:	f7ff ff82 	bl	8011334 <std>
 8011430:	68a0      	ldr	r0, [r4, #8]
 8011432:	2201      	movs	r2, #1
 8011434:	2109      	movs	r1, #9
 8011436:	f7ff ff7d 	bl	8011334 <std>
 801143a:	68e0      	ldr	r0, [r4, #12]
 801143c:	2202      	movs	r2, #2
 801143e:	2112      	movs	r1, #18
 8011440:	f7ff ff78 	bl	8011334 <std>
 8011444:	2301      	movs	r3, #1
 8011446:	61a3      	str	r3, [r4, #24]
 8011448:	e7d2      	b.n	80113f0 <__sinit+0xc>
 801144a:	bf00      	nop
 801144c:	08016b50 	.word	0x08016b50
 8011450:	0801137d 	.word	0x0801137d

08011454 <__sfp>:
 8011454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011456:	4607      	mov	r7, r0
 8011458:	f7ff ffac 	bl	80113b4 <__sfp_lock_acquire>
 801145c:	4b1e      	ldr	r3, [pc, #120]	; (80114d8 <__sfp+0x84>)
 801145e:	681e      	ldr	r6, [r3, #0]
 8011460:	69b3      	ldr	r3, [r6, #24]
 8011462:	b913      	cbnz	r3, 801146a <__sfp+0x16>
 8011464:	4630      	mov	r0, r6
 8011466:	f7ff ffbd 	bl	80113e4 <__sinit>
 801146a:	3648      	adds	r6, #72	; 0x48
 801146c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011470:	3b01      	subs	r3, #1
 8011472:	d503      	bpl.n	801147c <__sfp+0x28>
 8011474:	6833      	ldr	r3, [r6, #0]
 8011476:	b30b      	cbz	r3, 80114bc <__sfp+0x68>
 8011478:	6836      	ldr	r6, [r6, #0]
 801147a:	e7f7      	b.n	801146c <__sfp+0x18>
 801147c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011480:	b9d5      	cbnz	r5, 80114b8 <__sfp+0x64>
 8011482:	4b16      	ldr	r3, [pc, #88]	; (80114dc <__sfp+0x88>)
 8011484:	60e3      	str	r3, [r4, #12]
 8011486:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801148a:	6665      	str	r5, [r4, #100]	; 0x64
 801148c:	f000 f86c 	bl	8011568 <__retarget_lock_init_recursive>
 8011490:	f7ff ff96 	bl	80113c0 <__sfp_lock_release>
 8011494:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011498:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801149c:	6025      	str	r5, [r4, #0]
 801149e:	61a5      	str	r5, [r4, #24]
 80114a0:	2208      	movs	r2, #8
 80114a2:	4629      	mov	r1, r5
 80114a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80114a8:	f000 f892 	bl	80115d0 <memset>
 80114ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80114b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80114b4:	4620      	mov	r0, r4
 80114b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114b8:	3468      	adds	r4, #104	; 0x68
 80114ba:	e7d9      	b.n	8011470 <__sfp+0x1c>
 80114bc:	2104      	movs	r1, #4
 80114be:	4638      	mov	r0, r7
 80114c0:	f7ff ff62 	bl	8011388 <__sfmoreglue>
 80114c4:	4604      	mov	r4, r0
 80114c6:	6030      	str	r0, [r6, #0]
 80114c8:	2800      	cmp	r0, #0
 80114ca:	d1d5      	bne.n	8011478 <__sfp+0x24>
 80114cc:	f7ff ff78 	bl	80113c0 <__sfp_lock_release>
 80114d0:	230c      	movs	r3, #12
 80114d2:	603b      	str	r3, [r7, #0]
 80114d4:	e7ee      	b.n	80114b4 <__sfp+0x60>
 80114d6:	bf00      	nop
 80114d8:	08016b50 	.word	0x08016b50
 80114dc:	ffff0001 	.word	0xffff0001

080114e0 <_fwalk_reent>:
 80114e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114e4:	4606      	mov	r6, r0
 80114e6:	4688      	mov	r8, r1
 80114e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80114ec:	2700      	movs	r7, #0
 80114ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80114f2:	f1b9 0901 	subs.w	r9, r9, #1
 80114f6:	d505      	bpl.n	8011504 <_fwalk_reent+0x24>
 80114f8:	6824      	ldr	r4, [r4, #0]
 80114fa:	2c00      	cmp	r4, #0
 80114fc:	d1f7      	bne.n	80114ee <_fwalk_reent+0xe>
 80114fe:	4638      	mov	r0, r7
 8011500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011504:	89ab      	ldrh	r3, [r5, #12]
 8011506:	2b01      	cmp	r3, #1
 8011508:	d907      	bls.n	801151a <_fwalk_reent+0x3a>
 801150a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801150e:	3301      	adds	r3, #1
 8011510:	d003      	beq.n	801151a <_fwalk_reent+0x3a>
 8011512:	4629      	mov	r1, r5
 8011514:	4630      	mov	r0, r6
 8011516:	47c0      	blx	r8
 8011518:	4307      	orrs	r7, r0
 801151a:	3568      	adds	r5, #104	; 0x68
 801151c:	e7e9      	b.n	80114f2 <_fwalk_reent+0x12>
	...

08011520 <__libc_init_array>:
 8011520:	b570      	push	{r4, r5, r6, lr}
 8011522:	4d0d      	ldr	r5, [pc, #52]	; (8011558 <__libc_init_array+0x38>)
 8011524:	4c0d      	ldr	r4, [pc, #52]	; (801155c <__libc_init_array+0x3c>)
 8011526:	1b64      	subs	r4, r4, r5
 8011528:	10a4      	asrs	r4, r4, #2
 801152a:	2600      	movs	r6, #0
 801152c:	42a6      	cmp	r6, r4
 801152e:	d109      	bne.n	8011544 <__libc_init_array+0x24>
 8011530:	4d0b      	ldr	r5, [pc, #44]	; (8011560 <__libc_init_array+0x40>)
 8011532:	4c0c      	ldr	r4, [pc, #48]	; (8011564 <__libc_init_array+0x44>)
 8011534:	f004 fff0 	bl	8016518 <_init>
 8011538:	1b64      	subs	r4, r4, r5
 801153a:	10a4      	asrs	r4, r4, #2
 801153c:	2600      	movs	r6, #0
 801153e:	42a6      	cmp	r6, r4
 8011540:	d105      	bne.n	801154e <__libc_init_array+0x2e>
 8011542:	bd70      	pop	{r4, r5, r6, pc}
 8011544:	f855 3b04 	ldr.w	r3, [r5], #4
 8011548:	4798      	blx	r3
 801154a:	3601      	adds	r6, #1
 801154c:	e7ee      	b.n	801152c <__libc_init_array+0xc>
 801154e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011552:	4798      	blx	r3
 8011554:	3601      	adds	r6, #1
 8011556:	e7f2      	b.n	801153e <__libc_init_array+0x1e>
 8011558:	08016fc0 	.word	0x08016fc0
 801155c:	08016fc0 	.word	0x08016fc0
 8011560:	08016fc0 	.word	0x08016fc0
 8011564:	08016fc8 	.word	0x08016fc8

08011568 <__retarget_lock_init_recursive>:
 8011568:	4770      	bx	lr

0801156a <__retarget_lock_acquire_recursive>:
 801156a:	4770      	bx	lr

0801156c <__retarget_lock_release_recursive>:
 801156c:	4770      	bx	lr
	...

08011570 <malloc>:
 8011570:	4b02      	ldr	r3, [pc, #8]	; (801157c <malloc+0xc>)
 8011572:	4601      	mov	r1, r0
 8011574:	6818      	ldr	r0, [r3, #0]
 8011576:	f000 b883 	b.w	8011680 <_malloc_r>
 801157a:	bf00      	nop
 801157c:	20000188 	.word	0x20000188

08011580 <memcpy>:
 8011580:	440a      	add	r2, r1
 8011582:	4291      	cmp	r1, r2
 8011584:	f100 33ff 	add.w	r3, r0, #4294967295
 8011588:	d100      	bne.n	801158c <memcpy+0xc>
 801158a:	4770      	bx	lr
 801158c:	b510      	push	{r4, lr}
 801158e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011592:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011596:	4291      	cmp	r1, r2
 8011598:	d1f9      	bne.n	801158e <memcpy+0xe>
 801159a:	bd10      	pop	{r4, pc}

0801159c <memmove>:
 801159c:	4288      	cmp	r0, r1
 801159e:	b510      	push	{r4, lr}
 80115a0:	eb01 0402 	add.w	r4, r1, r2
 80115a4:	d902      	bls.n	80115ac <memmove+0x10>
 80115a6:	4284      	cmp	r4, r0
 80115a8:	4623      	mov	r3, r4
 80115aa:	d807      	bhi.n	80115bc <memmove+0x20>
 80115ac:	1e43      	subs	r3, r0, #1
 80115ae:	42a1      	cmp	r1, r4
 80115b0:	d008      	beq.n	80115c4 <memmove+0x28>
 80115b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80115b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80115ba:	e7f8      	b.n	80115ae <memmove+0x12>
 80115bc:	4402      	add	r2, r0
 80115be:	4601      	mov	r1, r0
 80115c0:	428a      	cmp	r2, r1
 80115c2:	d100      	bne.n	80115c6 <memmove+0x2a>
 80115c4:	bd10      	pop	{r4, pc}
 80115c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80115ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80115ce:	e7f7      	b.n	80115c0 <memmove+0x24>

080115d0 <memset>:
 80115d0:	4402      	add	r2, r0
 80115d2:	4603      	mov	r3, r0
 80115d4:	4293      	cmp	r3, r2
 80115d6:	d100      	bne.n	80115da <memset+0xa>
 80115d8:	4770      	bx	lr
 80115da:	f803 1b01 	strb.w	r1, [r3], #1
 80115de:	e7f9      	b.n	80115d4 <memset+0x4>

080115e0 <_free_r>:
 80115e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80115e2:	2900      	cmp	r1, #0
 80115e4:	d048      	beq.n	8011678 <_free_r+0x98>
 80115e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80115ea:	9001      	str	r0, [sp, #4]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	f1a1 0404 	sub.w	r4, r1, #4
 80115f2:	bfb8      	it	lt
 80115f4:	18e4      	addlt	r4, r4, r3
 80115f6:	f003 fad3 	bl	8014ba0 <__malloc_lock>
 80115fa:	4a20      	ldr	r2, [pc, #128]	; (801167c <_free_r+0x9c>)
 80115fc:	9801      	ldr	r0, [sp, #4]
 80115fe:	6813      	ldr	r3, [r2, #0]
 8011600:	4615      	mov	r5, r2
 8011602:	b933      	cbnz	r3, 8011612 <_free_r+0x32>
 8011604:	6063      	str	r3, [r4, #4]
 8011606:	6014      	str	r4, [r2, #0]
 8011608:	b003      	add	sp, #12
 801160a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801160e:	f003 bacd 	b.w	8014bac <__malloc_unlock>
 8011612:	42a3      	cmp	r3, r4
 8011614:	d90b      	bls.n	801162e <_free_r+0x4e>
 8011616:	6821      	ldr	r1, [r4, #0]
 8011618:	1862      	adds	r2, r4, r1
 801161a:	4293      	cmp	r3, r2
 801161c:	bf04      	itt	eq
 801161e:	681a      	ldreq	r2, [r3, #0]
 8011620:	685b      	ldreq	r3, [r3, #4]
 8011622:	6063      	str	r3, [r4, #4]
 8011624:	bf04      	itt	eq
 8011626:	1852      	addeq	r2, r2, r1
 8011628:	6022      	streq	r2, [r4, #0]
 801162a:	602c      	str	r4, [r5, #0]
 801162c:	e7ec      	b.n	8011608 <_free_r+0x28>
 801162e:	461a      	mov	r2, r3
 8011630:	685b      	ldr	r3, [r3, #4]
 8011632:	b10b      	cbz	r3, 8011638 <_free_r+0x58>
 8011634:	42a3      	cmp	r3, r4
 8011636:	d9fa      	bls.n	801162e <_free_r+0x4e>
 8011638:	6811      	ldr	r1, [r2, #0]
 801163a:	1855      	adds	r5, r2, r1
 801163c:	42a5      	cmp	r5, r4
 801163e:	d10b      	bne.n	8011658 <_free_r+0x78>
 8011640:	6824      	ldr	r4, [r4, #0]
 8011642:	4421      	add	r1, r4
 8011644:	1854      	adds	r4, r2, r1
 8011646:	42a3      	cmp	r3, r4
 8011648:	6011      	str	r1, [r2, #0]
 801164a:	d1dd      	bne.n	8011608 <_free_r+0x28>
 801164c:	681c      	ldr	r4, [r3, #0]
 801164e:	685b      	ldr	r3, [r3, #4]
 8011650:	6053      	str	r3, [r2, #4]
 8011652:	4421      	add	r1, r4
 8011654:	6011      	str	r1, [r2, #0]
 8011656:	e7d7      	b.n	8011608 <_free_r+0x28>
 8011658:	d902      	bls.n	8011660 <_free_r+0x80>
 801165a:	230c      	movs	r3, #12
 801165c:	6003      	str	r3, [r0, #0]
 801165e:	e7d3      	b.n	8011608 <_free_r+0x28>
 8011660:	6825      	ldr	r5, [r4, #0]
 8011662:	1961      	adds	r1, r4, r5
 8011664:	428b      	cmp	r3, r1
 8011666:	bf04      	itt	eq
 8011668:	6819      	ldreq	r1, [r3, #0]
 801166a:	685b      	ldreq	r3, [r3, #4]
 801166c:	6063      	str	r3, [r4, #4]
 801166e:	bf04      	itt	eq
 8011670:	1949      	addeq	r1, r1, r5
 8011672:	6021      	streq	r1, [r4, #0]
 8011674:	6054      	str	r4, [r2, #4]
 8011676:	e7c7      	b.n	8011608 <_free_r+0x28>
 8011678:	b003      	add	sp, #12
 801167a:	bd30      	pop	{r4, r5, pc}
 801167c:	200051dc 	.word	0x200051dc

08011680 <_malloc_r>:
 8011680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011682:	1ccd      	adds	r5, r1, #3
 8011684:	f025 0503 	bic.w	r5, r5, #3
 8011688:	3508      	adds	r5, #8
 801168a:	2d0c      	cmp	r5, #12
 801168c:	bf38      	it	cc
 801168e:	250c      	movcc	r5, #12
 8011690:	2d00      	cmp	r5, #0
 8011692:	4606      	mov	r6, r0
 8011694:	db01      	blt.n	801169a <_malloc_r+0x1a>
 8011696:	42a9      	cmp	r1, r5
 8011698:	d903      	bls.n	80116a2 <_malloc_r+0x22>
 801169a:	230c      	movs	r3, #12
 801169c:	6033      	str	r3, [r6, #0]
 801169e:	2000      	movs	r0, #0
 80116a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80116a2:	f003 fa7d 	bl	8014ba0 <__malloc_lock>
 80116a6:	4921      	ldr	r1, [pc, #132]	; (801172c <_malloc_r+0xac>)
 80116a8:	680a      	ldr	r2, [r1, #0]
 80116aa:	4614      	mov	r4, r2
 80116ac:	b99c      	cbnz	r4, 80116d6 <_malloc_r+0x56>
 80116ae:	4f20      	ldr	r7, [pc, #128]	; (8011730 <_malloc_r+0xb0>)
 80116b0:	683b      	ldr	r3, [r7, #0]
 80116b2:	b923      	cbnz	r3, 80116be <_malloc_r+0x3e>
 80116b4:	4621      	mov	r1, r4
 80116b6:	4630      	mov	r0, r6
 80116b8:	f000 ff20 	bl	80124fc <_sbrk_r>
 80116bc:	6038      	str	r0, [r7, #0]
 80116be:	4629      	mov	r1, r5
 80116c0:	4630      	mov	r0, r6
 80116c2:	f000 ff1b 	bl	80124fc <_sbrk_r>
 80116c6:	1c43      	adds	r3, r0, #1
 80116c8:	d123      	bne.n	8011712 <_malloc_r+0x92>
 80116ca:	230c      	movs	r3, #12
 80116cc:	6033      	str	r3, [r6, #0]
 80116ce:	4630      	mov	r0, r6
 80116d0:	f003 fa6c 	bl	8014bac <__malloc_unlock>
 80116d4:	e7e3      	b.n	801169e <_malloc_r+0x1e>
 80116d6:	6823      	ldr	r3, [r4, #0]
 80116d8:	1b5b      	subs	r3, r3, r5
 80116da:	d417      	bmi.n	801170c <_malloc_r+0x8c>
 80116dc:	2b0b      	cmp	r3, #11
 80116de:	d903      	bls.n	80116e8 <_malloc_r+0x68>
 80116e0:	6023      	str	r3, [r4, #0]
 80116e2:	441c      	add	r4, r3
 80116e4:	6025      	str	r5, [r4, #0]
 80116e6:	e004      	b.n	80116f2 <_malloc_r+0x72>
 80116e8:	6863      	ldr	r3, [r4, #4]
 80116ea:	42a2      	cmp	r2, r4
 80116ec:	bf0c      	ite	eq
 80116ee:	600b      	streq	r3, [r1, #0]
 80116f0:	6053      	strne	r3, [r2, #4]
 80116f2:	4630      	mov	r0, r6
 80116f4:	f003 fa5a 	bl	8014bac <__malloc_unlock>
 80116f8:	f104 000b 	add.w	r0, r4, #11
 80116fc:	1d23      	adds	r3, r4, #4
 80116fe:	f020 0007 	bic.w	r0, r0, #7
 8011702:	1ac2      	subs	r2, r0, r3
 8011704:	d0cc      	beq.n	80116a0 <_malloc_r+0x20>
 8011706:	1a1b      	subs	r3, r3, r0
 8011708:	50a3      	str	r3, [r4, r2]
 801170a:	e7c9      	b.n	80116a0 <_malloc_r+0x20>
 801170c:	4622      	mov	r2, r4
 801170e:	6864      	ldr	r4, [r4, #4]
 8011710:	e7cc      	b.n	80116ac <_malloc_r+0x2c>
 8011712:	1cc4      	adds	r4, r0, #3
 8011714:	f024 0403 	bic.w	r4, r4, #3
 8011718:	42a0      	cmp	r0, r4
 801171a:	d0e3      	beq.n	80116e4 <_malloc_r+0x64>
 801171c:	1a21      	subs	r1, r4, r0
 801171e:	4630      	mov	r0, r6
 8011720:	f000 feec 	bl	80124fc <_sbrk_r>
 8011724:	3001      	adds	r0, #1
 8011726:	d1dd      	bne.n	80116e4 <_malloc_r+0x64>
 8011728:	e7cf      	b.n	80116ca <_malloc_r+0x4a>
 801172a:	bf00      	nop
 801172c:	200051dc 	.word	0x200051dc
 8011730:	200051e0 	.word	0x200051e0

08011734 <__cvt>:
 8011734:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011738:	ec55 4b10 	vmov	r4, r5, d0
 801173c:	2d00      	cmp	r5, #0
 801173e:	460e      	mov	r6, r1
 8011740:	4619      	mov	r1, r3
 8011742:	462b      	mov	r3, r5
 8011744:	bfbb      	ittet	lt
 8011746:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801174a:	461d      	movlt	r5, r3
 801174c:	2300      	movge	r3, #0
 801174e:	232d      	movlt	r3, #45	; 0x2d
 8011750:	700b      	strb	r3, [r1, #0]
 8011752:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011754:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011758:	4691      	mov	r9, r2
 801175a:	f023 0820 	bic.w	r8, r3, #32
 801175e:	bfbc      	itt	lt
 8011760:	4622      	movlt	r2, r4
 8011762:	4614      	movlt	r4, r2
 8011764:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011768:	d005      	beq.n	8011776 <__cvt+0x42>
 801176a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801176e:	d100      	bne.n	8011772 <__cvt+0x3e>
 8011770:	3601      	adds	r6, #1
 8011772:	2102      	movs	r1, #2
 8011774:	e000      	b.n	8011778 <__cvt+0x44>
 8011776:	2103      	movs	r1, #3
 8011778:	ab03      	add	r3, sp, #12
 801177a:	9301      	str	r3, [sp, #4]
 801177c:	ab02      	add	r3, sp, #8
 801177e:	9300      	str	r3, [sp, #0]
 8011780:	ec45 4b10 	vmov	d0, r4, r5
 8011784:	4653      	mov	r3, sl
 8011786:	4632      	mov	r2, r6
 8011788:	f001 ffb2 	bl	80136f0 <_dtoa_r>
 801178c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011790:	4607      	mov	r7, r0
 8011792:	d102      	bne.n	801179a <__cvt+0x66>
 8011794:	f019 0f01 	tst.w	r9, #1
 8011798:	d022      	beq.n	80117e0 <__cvt+0xac>
 801179a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801179e:	eb07 0906 	add.w	r9, r7, r6
 80117a2:	d110      	bne.n	80117c6 <__cvt+0x92>
 80117a4:	783b      	ldrb	r3, [r7, #0]
 80117a6:	2b30      	cmp	r3, #48	; 0x30
 80117a8:	d10a      	bne.n	80117c0 <__cvt+0x8c>
 80117aa:	2200      	movs	r2, #0
 80117ac:	2300      	movs	r3, #0
 80117ae:	4620      	mov	r0, r4
 80117b0:	4629      	mov	r1, r5
 80117b2:	f7ef f999 	bl	8000ae8 <__aeabi_dcmpeq>
 80117b6:	b918      	cbnz	r0, 80117c0 <__cvt+0x8c>
 80117b8:	f1c6 0601 	rsb	r6, r6, #1
 80117bc:	f8ca 6000 	str.w	r6, [sl]
 80117c0:	f8da 3000 	ldr.w	r3, [sl]
 80117c4:	4499      	add	r9, r3
 80117c6:	2200      	movs	r2, #0
 80117c8:	2300      	movs	r3, #0
 80117ca:	4620      	mov	r0, r4
 80117cc:	4629      	mov	r1, r5
 80117ce:	f7ef f98b 	bl	8000ae8 <__aeabi_dcmpeq>
 80117d2:	b108      	cbz	r0, 80117d8 <__cvt+0xa4>
 80117d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80117d8:	2230      	movs	r2, #48	; 0x30
 80117da:	9b03      	ldr	r3, [sp, #12]
 80117dc:	454b      	cmp	r3, r9
 80117de:	d307      	bcc.n	80117f0 <__cvt+0xbc>
 80117e0:	9b03      	ldr	r3, [sp, #12]
 80117e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80117e4:	1bdb      	subs	r3, r3, r7
 80117e6:	4638      	mov	r0, r7
 80117e8:	6013      	str	r3, [r2, #0]
 80117ea:	b004      	add	sp, #16
 80117ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117f0:	1c59      	adds	r1, r3, #1
 80117f2:	9103      	str	r1, [sp, #12]
 80117f4:	701a      	strb	r2, [r3, #0]
 80117f6:	e7f0      	b.n	80117da <__cvt+0xa6>

080117f8 <__exponent>:
 80117f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80117fa:	4603      	mov	r3, r0
 80117fc:	2900      	cmp	r1, #0
 80117fe:	bfb8      	it	lt
 8011800:	4249      	neglt	r1, r1
 8011802:	f803 2b02 	strb.w	r2, [r3], #2
 8011806:	bfb4      	ite	lt
 8011808:	222d      	movlt	r2, #45	; 0x2d
 801180a:	222b      	movge	r2, #43	; 0x2b
 801180c:	2909      	cmp	r1, #9
 801180e:	7042      	strb	r2, [r0, #1]
 8011810:	dd2a      	ble.n	8011868 <__exponent+0x70>
 8011812:	f10d 0407 	add.w	r4, sp, #7
 8011816:	46a4      	mov	ip, r4
 8011818:	270a      	movs	r7, #10
 801181a:	46a6      	mov	lr, r4
 801181c:	460a      	mov	r2, r1
 801181e:	fb91 f6f7 	sdiv	r6, r1, r7
 8011822:	fb07 1516 	mls	r5, r7, r6, r1
 8011826:	3530      	adds	r5, #48	; 0x30
 8011828:	2a63      	cmp	r2, #99	; 0x63
 801182a:	f104 34ff 	add.w	r4, r4, #4294967295
 801182e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011832:	4631      	mov	r1, r6
 8011834:	dcf1      	bgt.n	801181a <__exponent+0x22>
 8011836:	3130      	adds	r1, #48	; 0x30
 8011838:	f1ae 0502 	sub.w	r5, lr, #2
 801183c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011840:	1c44      	adds	r4, r0, #1
 8011842:	4629      	mov	r1, r5
 8011844:	4561      	cmp	r1, ip
 8011846:	d30a      	bcc.n	801185e <__exponent+0x66>
 8011848:	f10d 0209 	add.w	r2, sp, #9
 801184c:	eba2 020e 	sub.w	r2, r2, lr
 8011850:	4565      	cmp	r5, ip
 8011852:	bf88      	it	hi
 8011854:	2200      	movhi	r2, #0
 8011856:	4413      	add	r3, r2
 8011858:	1a18      	subs	r0, r3, r0
 801185a:	b003      	add	sp, #12
 801185c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801185e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011862:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011866:	e7ed      	b.n	8011844 <__exponent+0x4c>
 8011868:	2330      	movs	r3, #48	; 0x30
 801186a:	3130      	adds	r1, #48	; 0x30
 801186c:	7083      	strb	r3, [r0, #2]
 801186e:	70c1      	strb	r1, [r0, #3]
 8011870:	1d03      	adds	r3, r0, #4
 8011872:	e7f1      	b.n	8011858 <__exponent+0x60>

08011874 <_printf_float>:
 8011874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011878:	ed2d 8b02 	vpush	{d8}
 801187c:	b08d      	sub	sp, #52	; 0x34
 801187e:	460c      	mov	r4, r1
 8011880:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011884:	4616      	mov	r6, r2
 8011886:	461f      	mov	r7, r3
 8011888:	4605      	mov	r5, r0
 801188a:	f003 f961 	bl	8014b50 <_localeconv_r>
 801188e:	f8d0 a000 	ldr.w	sl, [r0]
 8011892:	4650      	mov	r0, sl
 8011894:	f7ee fcac 	bl	80001f0 <strlen>
 8011898:	2300      	movs	r3, #0
 801189a:	930a      	str	r3, [sp, #40]	; 0x28
 801189c:	6823      	ldr	r3, [r4, #0]
 801189e:	9305      	str	r3, [sp, #20]
 80118a0:	f8d8 3000 	ldr.w	r3, [r8]
 80118a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80118a8:	3307      	adds	r3, #7
 80118aa:	f023 0307 	bic.w	r3, r3, #7
 80118ae:	f103 0208 	add.w	r2, r3, #8
 80118b2:	f8c8 2000 	str.w	r2, [r8]
 80118b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80118be:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80118c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80118c6:	9307      	str	r3, [sp, #28]
 80118c8:	f8cd 8018 	str.w	r8, [sp, #24]
 80118cc:	ee08 0a10 	vmov	s16, r0
 80118d0:	4b9f      	ldr	r3, [pc, #636]	; (8011b50 <_printf_float+0x2dc>)
 80118d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80118d6:	f04f 32ff 	mov.w	r2, #4294967295
 80118da:	f7ef f937 	bl	8000b4c <__aeabi_dcmpun>
 80118de:	bb88      	cbnz	r0, 8011944 <_printf_float+0xd0>
 80118e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80118e4:	4b9a      	ldr	r3, [pc, #616]	; (8011b50 <_printf_float+0x2dc>)
 80118e6:	f04f 32ff 	mov.w	r2, #4294967295
 80118ea:	f7ef f911 	bl	8000b10 <__aeabi_dcmple>
 80118ee:	bb48      	cbnz	r0, 8011944 <_printf_float+0xd0>
 80118f0:	2200      	movs	r2, #0
 80118f2:	2300      	movs	r3, #0
 80118f4:	4640      	mov	r0, r8
 80118f6:	4649      	mov	r1, r9
 80118f8:	f7ef f900 	bl	8000afc <__aeabi_dcmplt>
 80118fc:	b110      	cbz	r0, 8011904 <_printf_float+0x90>
 80118fe:	232d      	movs	r3, #45	; 0x2d
 8011900:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011904:	4b93      	ldr	r3, [pc, #588]	; (8011b54 <_printf_float+0x2e0>)
 8011906:	4894      	ldr	r0, [pc, #592]	; (8011b58 <_printf_float+0x2e4>)
 8011908:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801190c:	bf94      	ite	ls
 801190e:	4698      	movls	r8, r3
 8011910:	4680      	movhi	r8, r0
 8011912:	2303      	movs	r3, #3
 8011914:	6123      	str	r3, [r4, #16]
 8011916:	9b05      	ldr	r3, [sp, #20]
 8011918:	f023 0204 	bic.w	r2, r3, #4
 801191c:	6022      	str	r2, [r4, #0]
 801191e:	f04f 0900 	mov.w	r9, #0
 8011922:	9700      	str	r7, [sp, #0]
 8011924:	4633      	mov	r3, r6
 8011926:	aa0b      	add	r2, sp, #44	; 0x2c
 8011928:	4621      	mov	r1, r4
 801192a:	4628      	mov	r0, r5
 801192c:	f000 f9d8 	bl	8011ce0 <_printf_common>
 8011930:	3001      	adds	r0, #1
 8011932:	f040 8090 	bne.w	8011a56 <_printf_float+0x1e2>
 8011936:	f04f 30ff 	mov.w	r0, #4294967295
 801193a:	b00d      	add	sp, #52	; 0x34
 801193c:	ecbd 8b02 	vpop	{d8}
 8011940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011944:	4642      	mov	r2, r8
 8011946:	464b      	mov	r3, r9
 8011948:	4640      	mov	r0, r8
 801194a:	4649      	mov	r1, r9
 801194c:	f7ef f8fe 	bl	8000b4c <__aeabi_dcmpun>
 8011950:	b140      	cbz	r0, 8011964 <_printf_float+0xf0>
 8011952:	464b      	mov	r3, r9
 8011954:	2b00      	cmp	r3, #0
 8011956:	bfbc      	itt	lt
 8011958:	232d      	movlt	r3, #45	; 0x2d
 801195a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801195e:	487f      	ldr	r0, [pc, #508]	; (8011b5c <_printf_float+0x2e8>)
 8011960:	4b7f      	ldr	r3, [pc, #508]	; (8011b60 <_printf_float+0x2ec>)
 8011962:	e7d1      	b.n	8011908 <_printf_float+0x94>
 8011964:	6863      	ldr	r3, [r4, #4]
 8011966:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801196a:	9206      	str	r2, [sp, #24]
 801196c:	1c5a      	adds	r2, r3, #1
 801196e:	d13f      	bne.n	80119f0 <_printf_float+0x17c>
 8011970:	2306      	movs	r3, #6
 8011972:	6063      	str	r3, [r4, #4]
 8011974:	9b05      	ldr	r3, [sp, #20]
 8011976:	6861      	ldr	r1, [r4, #4]
 8011978:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801197c:	2300      	movs	r3, #0
 801197e:	9303      	str	r3, [sp, #12]
 8011980:	ab0a      	add	r3, sp, #40	; 0x28
 8011982:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011986:	ab09      	add	r3, sp, #36	; 0x24
 8011988:	ec49 8b10 	vmov	d0, r8, r9
 801198c:	9300      	str	r3, [sp, #0]
 801198e:	6022      	str	r2, [r4, #0]
 8011990:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011994:	4628      	mov	r0, r5
 8011996:	f7ff fecd 	bl	8011734 <__cvt>
 801199a:	9b06      	ldr	r3, [sp, #24]
 801199c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801199e:	2b47      	cmp	r3, #71	; 0x47
 80119a0:	4680      	mov	r8, r0
 80119a2:	d108      	bne.n	80119b6 <_printf_float+0x142>
 80119a4:	1cc8      	adds	r0, r1, #3
 80119a6:	db02      	blt.n	80119ae <_printf_float+0x13a>
 80119a8:	6863      	ldr	r3, [r4, #4]
 80119aa:	4299      	cmp	r1, r3
 80119ac:	dd41      	ble.n	8011a32 <_printf_float+0x1be>
 80119ae:	f1ab 0b02 	sub.w	fp, fp, #2
 80119b2:	fa5f fb8b 	uxtb.w	fp, fp
 80119b6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80119ba:	d820      	bhi.n	80119fe <_printf_float+0x18a>
 80119bc:	3901      	subs	r1, #1
 80119be:	465a      	mov	r2, fp
 80119c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80119c4:	9109      	str	r1, [sp, #36]	; 0x24
 80119c6:	f7ff ff17 	bl	80117f8 <__exponent>
 80119ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80119cc:	1813      	adds	r3, r2, r0
 80119ce:	2a01      	cmp	r2, #1
 80119d0:	4681      	mov	r9, r0
 80119d2:	6123      	str	r3, [r4, #16]
 80119d4:	dc02      	bgt.n	80119dc <_printf_float+0x168>
 80119d6:	6822      	ldr	r2, [r4, #0]
 80119d8:	07d2      	lsls	r2, r2, #31
 80119da:	d501      	bpl.n	80119e0 <_printf_float+0x16c>
 80119dc:	3301      	adds	r3, #1
 80119de:	6123      	str	r3, [r4, #16]
 80119e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d09c      	beq.n	8011922 <_printf_float+0xae>
 80119e8:	232d      	movs	r3, #45	; 0x2d
 80119ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80119ee:	e798      	b.n	8011922 <_printf_float+0xae>
 80119f0:	9a06      	ldr	r2, [sp, #24]
 80119f2:	2a47      	cmp	r2, #71	; 0x47
 80119f4:	d1be      	bne.n	8011974 <_printf_float+0x100>
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d1bc      	bne.n	8011974 <_printf_float+0x100>
 80119fa:	2301      	movs	r3, #1
 80119fc:	e7b9      	b.n	8011972 <_printf_float+0xfe>
 80119fe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011a02:	d118      	bne.n	8011a36 <_printf_float+0x1c2>
 8011a04:	2900      	cmp	r1, #0
 8011a06:	6863      	ldr	r3, [r4, #4]
 8011a08:	dd0b      	ble.n	8011a22 <_printf_float+0x1ae>
 8011a0a:	6121      	str	r1, [r4, #16]
 8011a0c:	b913      	cbnz	r3, 8011a14 <_printf_float+0x1a0>
 8011a0e:	6822      	ldr	r2, [r4, #0]
 8011a10:	07d0      	lsls	r0, r2, #31
 8011a12:	d502      	bpl.n	8011a1a <_printf_float+0x1a6>
 8011a14:	3301      	adds	r3, #1
 8011a16:	440b      	add	r3, r1
 8011a18:	6123      	str	r3, [r4, #16]
 8011a1a:	65a1      	str	r1, [r4, #88]	; 0x58
 8011a1c:	f04f 0900 	mov.w	r9, #0
 8011a20:	e7de      	b.n	80119e0 <_printf_float+0x16c>
 8011a22:	b913      	cbnz	r3, 8011a2a <_printf_float+0x1b6>
 8011a24:	6822      	ldr	r2, [r4, #0]
 8011a26:	07d2      	lsls	r2, r2, #31
 8011a28:	d501      	bpl.n	8011a2e <_printf_float+0x1ba>
 8011a2a:	3302      	adds	r3, #2
 8011a2c:	e7f4      	b.n	8011a18 <_printf_float+0x1a4>
 8011a2e:	2301      	movs	r3, #1
 8011a30:	e7f2      	b.n	8011a18 <_printf_float+0x1a4>
 8011a32:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a38:	4299      	cmp	r1, r3
 8011a3a:	db05      	blt.n	8011a48 <_printf_float+0x1d4>
 8011a3c:	6823      	ldr	r3, [r4, #0]
 8011a3e:	6121      	str	r1, [r4, #16]
 8011a40:	07d8      	lsls	r0, r3, #31
 8011a42:	d5ea      	bpl.n	8011a1a <_printf_float+0x1a6>
 8011a44:	1c4b      	adds	r3, r1, #1
 8011a46:	e7e7      	b.n	8011a18 <_printf_float+0x1a4>
 8011a48:	2900      	cmp	r1, #0
 8011a4a:	bfd4      	ite	le
 8011a4c:	f1c1 0202 	rsble	r2, r1, #2
 8011a50:	2201      	movgt	r2, #1
 8011a52:	4413      	add	r3, r2
 8011a54:	e7e0      	b.n	8011a18 <_printf_float+0x1a4>
 8011a56:	6823      	ldr	r3, [r4, #0]
 8011a58:	055a      	lsls	r2, r3, #21
 8011a5a:	d407      	bmi.n	8011a6c <_printf_float+0x1f8>
 8011a5c:	6923      	ldr	r3, [r4, #16]
 8011a5e:	4642      	mov	r2, r8
 8011a60:	4631      	mov	r1, r6
 8011a62:	4628      	mov	r0, r5
 8011a64:	47b8      	blx	r7
 8011a66:	3001      	adds	r0, #1
 8011a68:	d12c      	bne.n	8011ac4 <_printf_float+0x250>
 8011a6a:	e764      	b.n	8011936 <_printf_float+0xc2>
 8011a6c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011a70:	f240 80e0 	bls.w	8011c34 <_printf_float+0x3c0>
 8011a74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011a78:	2200      	movs	r2, #0
 8011a7a:	2300      	movs	r3, #0
 8011a7c:	f7ef f834 	bl	8000ae8 <__aeabi_dcmpeq>
 8011a80:	2800      	cmp	r0, #0
 8011a82:	d034      	beq.n	8011aee <_printf_float+0x27a>
 8011a84:	4a37      	ldr	r2, [pc, #220]	; (8011b64 <_printf_float+0x2f0>)
 8011a86:	2301      	movs	r3, #1
 8011a88:	4631      	mov	r1, r6
 8011a8a:	4628      	mov	r0, r5
 8011a8c:	47b8      	blx	r7
 8011a8e:	3001      	adds	r0, #1
 8011a90:	f43f af51 	beq.w	8011936 <_printf_float+0xc2>
 8011a94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011a98:	429a      	cmp	r2, r3
 8011a9a:	db02      	blt.n	8011aa2 <_printf_float+0x22e>
 8011a9c:	6823      	ldr	r3, [r4, #0]
 8011a9e:	07d8      	lsls	r0, r3, #31
 8011aa0:	d510      	bpl.n	8011ac4 <_printf_float+0x250>
 8011aa2:	ee18 3a10 	vmov	r3, s16
 8011aa6:	4652      	mov	r2, sl
 8011aa8:	4631      	mov	r1, r6
 8011aaa:	4628      	mov	r0, r5
 8011aac:	47b8      	blx	r7
 8011aae:	3001      	adds	r0, #1
 8011ab0:	f43f af41 	beq.w	8011936 <_printf_float+0xc2>
 8011ab4:	f04f 0800 	mov.w	r8, #0
 8011ab8:	f104 091a 	add.w	r9, r4, #26
 8011abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011abe:	3b01      	subs	r3, #1
 8011ac0:	4543      	cmp	r3, r8
 8011ac2:	dc09      	bgt.n	8011ad8 <_printf_float+0x264>
 8011ac4:	6823      	ldr	r3, [r4, #0]
 8011ac6:	079b      	lsls	r3, r3, #30
 8011ac8:	f100 8105 	bmi.w	8011cd6 <_printf_float+0x462>
 8011acc:	68e0      	ldr	r0, [r4, #12]
 8011ace:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ad0:	4298      	cmp	r0, r3
 8011ad2:	bfb8      	it	lt
 8011ad4:	4618      	movlt	r0, r3
 8011ad6:	e730      	b.n	801193a <_printf_float+0xc6>
 8011ad8:	2301      	movs	r3, #1
 8011ada:	464a      	mov	r2, r9
 8011adc:	4631      	mov	r1, r6
 8011ade:	4628      	mov	r0, r5
 8011ae0:	47b8      	blx	r7
 8011ae2:	3001      	adds	r0, #1
 8011ae4:	f43f af27 	beq.w	8011936 <_printf_float+0xc2>
 8011ae8:	f108 0801 	add.w	r8, r8, #1
 8011aec:	e7e6      	b.n	8011abc <_printf_float+0x248>
 8011aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	dc39      	bgt.n	8011b68 <_printf_float+0x2f4>
 8011af4:	4a1b      	ldr	r2, [pc, #108]	; (8011b64 <_printf_float+0x2f0>)
 8011af6:	2301      	movs	r3, #1
 8011af8:	4631      	mov	r1, r6
 8011afa:	4628      	mov	r0, r5
 8011afc:	47b8      	blx	r7
 8011afe:	3001      	adds	r0, #1
 8011b00:	f43f af19 	beq.w	8011936 <_printf_float+0xc2>
 8011b04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011b08:	4313      	orrs	r3, r2
 8011b0a:	d102      	bne.n	8011b12 <_printf_float+0x29e>
 8011b0c:	6823      	ldr	r3, [r4, #0]
 8011b0e:	07d9      	lsls	r1, r3, #31
 8011b10:	d5d8      	bpl.n	8011ac4 <_printf_float+0x250>
 8011b12:	ee18 3a10 	vmov	r3, s16
 8011b16:	4652      	mov	r2, sl
 8011b18:	4631      	mov	r1, r6
 8011b1a:	4628      	mov	r0, r5
 8011b1c:	47b8      	blx	r7
 8011b1e:	3001      	adds	r0, #1
 8011b20:	f43f af09 	beq.w	8011936 <_printf_float+0xc2>
 8011b24:	f04f 0900 	mov.w	r9, #0
 8011b28:	f104 0a1a 	add.w	sl, r4, #26
 8011b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b2e:	425b      	negs	r3, r3
 8011b30:	454b      	cmp	r3, r9
 8011b32:	dc01      	bgt.n	8011b38 <_printf_float+0x2c4>
 8011b34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b36:	e792      	b.n	8011a5e <_printf_float+0x1ea>
 8011b38:	2301      	movs	r3, #1
 8011b3a:	4652      	mov	r2, sl
 8011b3c:	4631      	mov	r1, r6
 8011b3e:	4628      	mov	r0, r5
 8011b40:	47b8      	blx	r7
 8011b42:	3001      	adds	r0, #1
 8011b44:	f43f aef7 	beq.w	8011936 <_printf_float+0xc2>
 8011b48:	f109 0901 	add.w	r9, r9, #1
 8011b4c:	e7ee      	b.n	8011b2c <_printf_float+0x2b8>
 8011b4e:	bf00      	nop
 8011b50:	7fefffff 	.word	0x7fefffff
 8011b54:	08016b54 	.word	0x08016b54
 8011b58:	08016b58 	.word	0x08016b58
 8011b5c:	08016b60 	.word	0x08016b60
 8011b60:	08016b5c 	.word	0x08016b5c
 8011b64:	08016fa1 	.word	0x08016fa1
 8011b68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011b6c:	429a      	cmp	r2, r3
 8011b6e:	bfa8      	it	ge
 8011b70:	461a      	movge	r2, r3
 8011b72:	2a00      	cmp	r2, #0
 8011b74:	4691      	mov	r9, r2
 8011b76:	dc37      	bgt.n	8011be8 <_printf_float+0x374>
 8011b78:	f04f 0b00 	mov.w	fp, #0
 8011b7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011b80:	f104 021a 	add.w	r2, r4, #26
 8011b84:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011b86:	9305      	str	r3, [sp, #20]
 8011b88:	eba3 0309 	sub.w	r3, r3, r9
 8011b8c:	455b      	cmp	r3, fp
 8011b8e:	dc33      	bgt.n	8011bf8 <_printf_float+0x384>
 8011b90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011b94:	429a      	cmp	r2, r3
 8011b96:	db3b      	blt.n	8011c10 <_printf_float+0x39c>
 8011b98:	6823      	ldr	r3, [r4, #0]
 8011b9a:	07da      	lsls	r2, r3, #31
 8011b9c:	d438      	bmi.n	8011c10 <_printf_float+0x39c>
 8011b9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011ba0:	9b05      	ldr	r3, [sp, #20]
 8011ba2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011ba4:	1ad3      	subs	r3, r2, r3
 8011ba6:	eba2 0901 	sub.w	r9, r2, r1
 8011baa:	4599      	cmp	r9, r3
 8011bac:	bfa8      	it	ge
 8011bae:	4699      	movge	r9, r3
 8011bb0:	f1b9 0f00 	cmp.w	r9, #0
 8011bb4:	dc35      	bgt.n	8011c22 <_printf_float+0x3ae>
 8011bb6:	f04f 0800 	mov.w	r8, #0
 8011bba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011bbe:	f104 0a1a 	add.w	sl, r4, #26
 8011bc2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011bc6:	1a9b      	subs	r3, r3, r2
 8011bc8:	eba3 0309 	sub.w	r3, r3, r9
 8011bcc:	4543      	cmp	r3, r8
 8011bce:	f77f af79 	ble.w	8011ac4 <_printf_float+0x250>
 8011bd2:	2301      	movs	r3, #1
 8011bd4:	4652      	mov	r2, sl
 8011bd6:	4631      	mov	r1, r6
 8011bd8:	4628      	mov	r0, r5
 8011bda:	47b8      	blx	r7
 8011bdc:	3001      	adds	r0, #1
 8011bde:	f43f aeaa 	beq.w	8011936 <_printf_float+0xc2>
 8011be2:	f108 0801 	add.w	r8, r8, #1
 8011be6:	e7ec      	b.n	8011bc2 <_printf_float+0x34e>
 8011be8:	4613      	mov	r3, r2
 8011bea:	4631      	mov	r1, r6
 8011bec:	4642      	mov	r2, r8
 8011bee:	4628      	mov	r0, r5
 8011bf0:	47b8      	blx	r7
 8011bf2:	3001      	adds	r0, #1
 8011bf4:	d1c0      	bne.n	8011b78 <_printf_float+0x304>
 8011bf6:	e69e      	b.n	8011936 <_printf_float+0xc2>
 8011bf8:	2301      	movs	r3, #1
 8011bfa:	4631      	mov	r1, r6
 8011bfc:	4628      	mov	r0, r5
 8011bfe:	9205      	str	r2, [sp, #20]
 8011c00:	47b8      	blx	r7
 8011c02:	3001      	adds	r0, #1
 8011c04:	f43f ae97 	beq.w	8011936 <_printf_float+0xc2>
 8011c08:	9a05      	ldr	r2, [sp, #20]
 8011c0a:	f10b 0b01 	add.w	fp, fp, #1
 8011c0e:	e7b9      	b.n	8011b84 <_printf_float+0x310>
 8011c10:	ee18 3a10 	vmov	r3, s16
 8011c14:	4652      	mov	r2, sl
 8011c16:	4631      	mov	r1, r6
 8011c18:	4628      	mov	r0, r5
 8011c1a:	47b8      	blx	r7
 8011c1c:	3001      	adds	r0, #1
 8011c1e:	d1be      	bne.n	8011b9e <_printf_float+0x32a>
 8011c20:	e689      	b.n	8011936 <_printf_float+0xc2>
 8011c22:	9a05      	ldr	r2, [sp, #20]
 8011c24:	464b      	mov	r3, r9
 8011c26:	4442      	add	r2, r8
 8011c28:	4631      	mov	r1, r6
 8011c2a:	4628      	mov	r0, r5
 8011c2c:	47b8      	blx	r7
 8011c2e:	3001      	adds	r0, #1
 8011c30:	d1c1      	bne.n	8011bb6 <_printf_float+0x342>
 8011c32:	e680      	b.n	8011936 <_printf_float+0xc2>
 8011c34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011c36:	2a01      	cmp	r2, #1
 8011c38:	dc01      	bgt.n	8011c3e <_printf_float+0x3ca>
 8011c3a:	07db      	lsls	r3, r3, #31
 8011c3c:	d538      	bpl.n	8011cb0 <_printf_float+0x43c>
 8011c3e:	2301      	movs	r3, #1
 8011c40:	4642      	mov	r2, r8
 8011c42:	4631      	mov	r1, r6
 8011c44:	4628      	mov	r0, r5
 8011c46:	47b8      	blx	r7
 8011c48:	3001      	adds	r0, #1
 8011c4a:	f43f ae74 	beq.w	8011936 <_printf_float+0xc2>
 8011c4e:	ee18 3a10 	vmov	r3, s16
 8011c52:	4652      	mov	r2, sl
 8011c54:	4631      	mov	r1, r6
 8011c56:	4628      	mov	r0, r5
 8011c58:	47b8      	blx	r7
 8011c5a:	3001      	adds	r0, #1
 8011c5c:	f43f ae6b 	beq.w	8011936 <_printf_float+0xc2>
 8011c60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011c64:	2200      	movs	r2, #0
 8011c66:	2300      	movs	r3, #0
 8011c68:	f7ee ff3e 	bl	8000ae8 <__aeabi_dcmpeq>
 8011c6c:	b9d8      	cbnz	r0, 8011ca6 <_printf_float+0x432>
 8011c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c70:	f108 0201 	add.w	r2, r8, #1
 8011c74:	3b01      	subs	r3, #1
 8011c76:	4631      	mov	r1, r6
 8011c78:	4628      	mov	r0, r5
 8011c7a:	47b8      	blx	r7
 8011c7c:	3001      	adds	r0, #1
 8011c7e:	d10e      	bne.n	8011c9e <_printf_float+0x42a>
 8011c80:	e659      	b.n	8011936 <_printf_float+0xc2>
 8011c82:	2301      	movs	r3, #1
 8011c84:	4652      	mov	r2, sl
 8011c86:	4631      	mov	r1, r6
 8011c88:	4628      	mov	r0, r5
 8011c8a:	47b8      	blx	r7
 8011c8c:	3001      	adds	r0, #1
 8011c8e:	f43f ae52 	beq.w	8011936 <_printf_float+0xc2>
 8011c92:	f108 0801 	add.w	r8, r8, #1
 8011c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c98:	3b01      	subs	r3, #1
 8011c9a:	4543      	cmp	r3, r8
 8011c9c:	dcf1      	bgt.n	8011c82 <_printf_float+0x40e>
 8011c9e:	464b      	mov	r3, r9
 8011ca0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011ca4:	e6dc      	b.n	8011a60 <_printf_float+0x1ec>
 8011ca6:	f04f 0800 	mov.w	r8, #0
 8011caa:	f104 0a1a 	add.w	sl, r4, #26
 8011cae:	e7f2      	b.n	8011c96 <_printf_float+0x422>
 8011cb0:	2301      	movs	r3, #1
 8011cb2:	4642      	mov	r2, r8
 8011cb4:	e7df      	b.n	8011c76 <_printf_float+0x402>
 8011cb6:	2301      	movs	r3, #1
 8011cb8:	464a      	mov	r2, r9
 8011cba:	4631      	mov	r1, r6
 8011cbc:	4628      	mov	r0, r5
 8011cbe:	47b8      	blx	r7
 8011cc0:	3001      	adds	r0, #1
 8011cc2:	f43f ae38 	beq.w	8011936 <_printf_float+0xc2>
 8011cc6:	f108 0801 	add.w	r8, r8, #1
 8011cca:	68e3      	ldr	r3, [r4, #12]
 8011ccc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011cce:	1a5b      	subs	r3, r3, r1
 8011cd0:	4543      	cmp	r3, r8
 8011cd2:	dcf0      	bgt.n	8011cb6 <_printf_float+0x442>
 8011cd4:	e6fa      	b.n	8011acc <_printf_float+0x258>
 8011cd6:	f04f 0800 	mov.w	r8, #0
 8011cda:	f104 0919 	add.w	r9, r4, #25
 8011cde:	e7f4      	b.n	8011cca <_printf_float+0x456>

08011ce0 <_printf_common>:
 8011ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ce4:	4616      	mov	r6, r2
 8011ce6:	4699      	mov	r9, r3
 8011ce8:	688a      	ldr	r2, [r1, #8]
 8011cea:	690b      	ldr	r3, [r1, #16]
 8011cec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011cf0:	4293      	cmp	r3, r2
 8011cf2:	bfb8      	it	lt
 8011cf4:	4613      	movlt	r3, r2
 8011cf6:	6033      	str	r3, [r6, #0]
 8011cf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011cfc:	4607      	mov	r7, r0
 8011cfe:	460c      	mov	r4, r1
 8011d00:	b10a      	cbz	r2, 8011d06 <_printf_common+0x26>
 8011d02:	3301      	adds	r3, #1
 8011d04:	6033      	str	r3, [r6, #0]
 8011d06:	6823      	ldr	r3, [r4, #0]
 8011d08:	0699      	lsls	r1, r3, #26
 8011d0a:	bf42      	ittt	mi
 8011d0c:	6833      	ldrmi	r3, [r6, #0]
 8011d0e:	3302      	addmi	r3, #2
 8011d10:	6033      	strmi	r3, [r6, #0]
 8011d12:	6825      	ldr	r5, [r4, #0]
 8011d14:	f015 0506 	ands.w	r5, r5, #6
 8011d18:	d106      	bne.n	8011d28 <_printf_common+0x48>
 8011d1a:	f104 0a19 	add.w	sl, r4, #25
 8011d1e:	68e3      	ldr	r3, [r4, #12]
 8011d20:	6832      	ldr	r2, [r6, #0]
 8011d22:	1a9b      	subs	r3, r3, r2
 8011d24:	42ab      	cmp	r3, r5
 8011d26:	dc26      	bgt.n	8011d76 <_printf_common+0x96>
 8011d28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011d2c:	1e13      	subs	r3, r2, #0
 8011d2e:	6822      	ldr	r2, [r4, #0]
 8011d30:	bf18      	it	ne
 8011d32:	2301      	movne	r3, #1
 8011d34:	0692      	lsls	r2, r2, #26
 8011d36:	d42b      	bmi.n	8011d90 <_printf_common+0xb0>
 8011d38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011d3c:	4649      	mov	r1, r9
 8011d3e:	4638      	mov	r0, r7
 8011d40:	47c0      	blx	r8
 8011d42:	3001      	adds	r0, #1
 8011d44:	d01e      	beq.n	8011d84 <_printf_common+0xa4>
 8011d46:	6823      	ldr	r3, [r4, #0]
 8011d48:	68e5      	ldr	r5, [r4, #12]
 8011d4a:	6832      	ldr	r2, [r6, #0]
 8011d4c:	f003 0306 	and.w	r3, r3, #6
 8011d50:	2b04      	cmp	r3, #4
 8011d52:	bf08      	it	eq
 8011d54:	1aad      	subeq	r5, r5, r2
 8011d56:	68a3      	ldr	r3, [r4, #8]
 8011d58:	6922      	ldr	r2, [r4, #16]
 8011d5a:	bf0c      	ite	eq
 8011d5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011d60:	2500      	movne	r5, #0
 8011d62:	4293      	cmp	r3, r2
 8011d64:	bfc4      	itt	gt
 8011d66:	1a9b      	subgt	r3, r3, r2
 8011d68:	18ed      	addgt	r5, r5, r3
 8011d6a:	2600      	movs	r6, #0
 8011d6c:	341a      	adds	r4, #26
 8011d6e:	42b5      	cmp	r5, r6
 8011d70:	d11a      	bne.n	8011da8 <_printf_common+0xc8>
 8011d72:	2000      	movs	r0, #0
 8011d74:	e008      	b.n	8011d88 <_printf_common+0xa8>
 8011d76:	2301      	movs	r3, #1
 8011d78:	4652      	mov	r2, sl
 8011d7a:	4649      	mov	r1, r9
 8011d7c:	4638      	mov	r0, r7
 8011d7e:	47c0      	blx	r8
 8011d80:	3001      	adds	r0, #1
 8011d82:	d103      	bne.n	8011d8c <_printf_common+0xac>
 8011d84:	f04f 30ff 	mov.w	r0, #4294967295
 8011d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d8c:	3501      	adds	r5, #1
 8011d8e:	e7c6      	b.n	8011d1e <_printf_common+0x3e>
 8011d90:	18e1      	adds	r1, r4, r3
 8011d92:	1c5a      	adds	r2, r3, #1
 8011d94:	2030      	movs	r0, #48	; 0x30
 8011d96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011d9a:	4422      	add	r2, r4
 8011d9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011da0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011da4:	3302      	adds	r3, #2
 8011da6:	e7c7      	b.n	8011d38 <_printf_common+0x58>
 8011da8:	2301      	movs	r3, #1
 8011daa:	4622      	mov	r2, r4
 8011dac:	4649      	mov	r1, r9
 8011dae:	4638      	mov	r0, r7
 8011db0:	47c0      	blx	r8
 8011db2:	3001      	adds	r0, #1
 8011db4:	d0e6      	beq.n	8011d84 <_printf_common+0xa4>
 8011db6:	3601      	adds	r6, #1
 8011db8:	e7d9      	b.n	8011d6e <_printf_common+0x8e>
	...

08011dbc <_printf_i>:
 8011dbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011dc0:	460c      	mov	r4, r1
 8011dc2:	4691      	mov	r9, r2
 8011dc4:	7e27      	ldrb	r7, [r4, #24]
 8011dc6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011dc8:	2f78      	cmp	r7, #120	; 0x78
 8011dca:	4680      	mov	r8, r0
 8011dcc:	469a      	mov	sl, r3
 8011dce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011dd2:	d807      	bhi.n	8011de4 <_printf_i+0x28>
 8011dd4:	2f62      	cmp	r7, #98	; 0x62
 8011dd6:	d80a      	bhi.n	8011dee <_printf_i+0x32>
 8011dd8:	2f00      	cmp	r7, #0
 8011dda:	f000 80d8 	beq.w	8011f8e <_printf_i+0x1d2>
 8011dde:	2f58      	cmp	r7, #88	; 0x58
 8011de0:	f000 80a3 	beq.w	8011f2a <_printf_i+0x16e>
 8011de4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011de8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011dec:	e03a      	b.n	8011e64 <_printf_i+0xa8>
 8011dee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011df2:	2b15      	cmp	r3, #21
 8011df4:	d8f6      	bhi.n	8011de4 <_printf_i+0x28>
 8011df6:	a001      	add	r0, pc, #4	; (adr r0, 8011dfc <_printf_i+0x40>)
 8011df8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011dfc:	08011e55 	.word	0x08011e55
 8011e00:	08011e69 	.word	0x08011e69
 8011e04:	08011de5 	.word	0x08011de5
 8011e08:	08011de5 	.word	0x08011de5
 8011e0c:	08011de5 	.word	0x08011de5
 8011e10:	08011de5 	.word	0x08011de5
 8011e14:	08011e69 	.word	0x08011e69
 8011e18:	08011de5 	.word	0x08011de5
 8011e1c:	08011de5 	.word	0x08011de5
 8011e20:	08011de5 	.word	0x08011de5
 8011e24:	08011de5 	.word	0x08011de5
 8011e28:	08011f75 	.word	0x08011f75
 8011e2c:	08011e99 	.word	0x08011e99
 8011e30:	08011f57 	.word	0x08011f57
 8011e34:	08011de5 	.word	0x08011de5
 8011e38:	08011de5 	.word	0x08011de5
 8011e3c:	08011f97 	.word	0x08011f97
 8011e40:	08011de5 	.word	0x08011de5
 8011e44:	08011e99 	.word	0x08011e99
 8011e48:	08011de5 	.word	0x08011de5
 8011e4c:	08011de5 	.word	0x08011de5
 8011e50:	08011f5f 	.word	0x08011f5f
 8011e54:	680b      	ldr	r3, [r1, #0]
 8011e56:	1d1a      	adds	r2, r3, #4
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	600a      	str	r2, [r1, #0]
 8011e5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011e60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011e64:	2301      	movs	r3, #1
 8011e66:	e0a3      	b.n	8011fb0 <_printf_i+0x1f4>
 8011e68:	6825      	ldr	r5, [r4, #0]
 8011e6a:	6808      	ldr	r0, [r1, #0]
 8011e6c:	062e      	lsls	r6, r5, #24
 8011e6e:	f100 0304 	add.w	r3, r0, #4
 8011e72:	d50a      	bpl.n	8011e8a <_printf_i+0xce>
 8011e74:	6805      	ldr	r5, [r0, #0]
 8011e76:	600b      	str	r3, [r1, #0]
 8011e78:	2d00      	cmp	r5, #0
 8011e7a:	da03      	bge.n	8011e84 <_printf_i+0xc8>
 8011e7c:	232d      	movs	r3, #45	; 0x2d
 8011e7e:	426d      	negs	r5, r5
 8011e80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011e84:	485e      	ldr	r0, [pc, #376]	; (8012000 <_printf_i+0x244>)
 8011e86:	230a      	movs	r3, #10
 8011e88:	e019      	b.n	8011ebe <_printf_i+0x102>
 8011e8a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011e8e:	6805      	ldr	r5, [r0, #0]
 8011e90:	600b      	str	r3, [r1, #0]
 8011e92:	bf18      	it	ne
 8011e94:	b22d      	sxthne	r5, r5
 8011e96:	e7ef      	b.n	8011e78 <_printf_i+0xbc>
 8011e98:	680b      	ldr	r3, [r1, #0]
 8011e9a:	6825      	ldr	r5, [r4, #0]
 8011e9c:	1d18      	adds	r0, r3, #4
 8011e9e:	6008      	str	r0, [r1, #0]
 8011ea0:	0628      	lsls	r0, r5, #24
 8011ea2:	d501      	bpl.n	8011ea8 <_printf_i+0xec>
 8011ea4:	681d      	ldr	r5, [r3, #0]
 8011ea6:	e002      	b.n	8011eae <_printf_i+0xf2>
 8011ea8:	0669      	lsls	r1, r5, #25
 8011eaa:	d5fb      	bpl.n	8011ea4 <_printf_i+0xe8>
 8011eac:	881d      	ldrh	r5, [r3, #0]
 8011eae:	4854      	ldr	r0, [pc, #336]	; (8012000 <_printf_i+0x244>)
 8011eb0:	2f6f      	cmp	r7, #111	; 0x6f
 8011eb2:	bf0c      	ite	eq
 8011eb4:	2308      	moveq	r3, #8
 8011eb6:	230a      	movne	r3, #10
 8011eb8:	2100      	movs	r1, #0
 8011eba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011ebe:	6866      	ldr	r6, [r4, #4]
 8011ec0:	60a6      	str	r6, [r4, #8]
 8011ec2:	2e00      	cmp	r6, #0
 8011ec4:	bfa2      	ittt	ge
 8011ec6:	6821      	ldrge	r1, [r4, #0]
 8011ec8:	f021 0104 	bicge.w	r1, r1, #4
 8011ecc:	6021      	strge	r1, [r4, #0]
 8011ece:	b90d      	cbnz	r5, 8011ed4 <_printf_i+0x118>
 8011ed0:	2e00      	cmp	r6, #0
 8011ed2:	d04d      	beq.n	8011f70 <_printf_i+0x1b4>
 8011ed4:	4616      	mov	r6, r2
 8011ed6:	fbb5 f1f3 	udiv	r1, r5, r3
 8011eda:	fb03 5711 	mls	r7, r3, r1, r5
 8011ede:	5dc7      	ldrb	r7, [r0, r7]
 8011ee0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011ee4:	462f      	mov	r7, r5
 8011ee6:	42bb      	cmp	r3, r7
 8011ee8:	460d      	mov	r5, r1
 8011eea:	d9f4      	bls.n	8011ed6 <_printf_i+0x11a>
 8011eec:	2b08      	cmp	r3, #8
 8011eee:	d10b      	bne.n	8011f08 <_printf_i+0x14c>
 8011ef0:	6823      	ldr	r3, [r4, #0]
 8011ef2:	07df      	lsls	r7, r3, #31
 8011ef4:	d508      	bpl.n	8011f08 <_printf_i+0x14c>
 8011ef6:	6923      	ldr	r3, [r4, #16]
 8011ef8:	6861      	ldr	r1, [r4, #4]
 8011efa:	4299      	cmp	r1, r3
 8011efc:	bfde      	ittt	le
 8011efe:	2330      	movle	r3, #48	; 0x30
 8011f00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011f04:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011f08:	1b92      	subs	r2, r2, r6
 8011f0a:	6122      	str	r2, [r4, #16]
 8011f0c:	f8cd a000 	str.w	sl, [sp]
 8011f10:	464b      	mov	r3, r9
 8011f12:	aa03      	add	r2, sp, #12
 8011f14:	4621      	mov	r1, r4
 8011f16:	4640      	mov	r0, r8
 8011f18:	f7ff fee2 	bl	8011ce0 <_printf_common>
 8011f1c:	3001      	adds	r0, #1
 8011f1e:	d14c      	bne.n	8011fba <_printf_i+0x1fe>
 8011f20:	f04f 30ff 	mov.w	r0, #4294967295
 8011f24:	b004      	add	sp, #16
 8011f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f2a:	4835      	ldr	r0, [pc, #212]	; (8012000 <_printf_i+0x244>)
 8011f2c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011f30:	6823      	ldr	r3, [r4, #0]
 8011f32:	680e      	ldr	r6, [r1, #0]
 8011f34:	061f      	lsls	r7, r3, #24
 8011f36:	f856 5b04 	ldr.w	r5, [r6], #4
 8011f3a:	600e      	str	r6, [r1, #0]
 8011f3c:	d514      	bpl.n	8011f68 <_printf_i+0x1ac>
 8011f3e:	07d9      	lsls	r1, r3, #31
 8011f40:	bf44      	itt	mi
 8011f42:	f043 0320 	orrmi.w	r3, r3, #32
 8011f46:	6023      	strmi	r3, [r4, #0]
 8011f48:	b91d      	cbnz	r5, 8011f52 <_printf_i+0x196>
 8011f4a:	6823      	ldr	r3, [r4, #0]
 8011f4c:	f023 0320 	bic.w	r3, r3, #32
 8011f50:	6023      	str	r3, [r4, #0]
 8011f52:	2310      	movs	r3, #16
 8011f54:	e7b0      	b.n	8011eb8 <_printf_i+0xfc>
 8011f56:	6823      	ldr	r3, [r4, #0]
 8011f58:	f043 0320 	orr.w	r3, r3, #32
 8011f5c:	6023      	str	r3, [r4, #0]
 8011f5e:	2378      	movs	r3, #120	; 0x78
 8011f60:	4828      	ldr	r0, [pc, #160]	; (8012004 <_printf_i+0x248>)
 8011f62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011f66:	e7e3      	b.n	8011f30 <_printf_i+0x174>
 8011f68:	065e      	lsls	r6, r3, #25
 8011f6a:	bf48      	it	mi
 8011f6c:	b2ad      	uxthmi	r5, r5
 8011f6e:	e7e6      	b.n	8011f3e <_printf_i+0x182>
 8011f70:	4616      	mov	r6, r2
 8011f72:	e7bb      	b.n	8011eec <_printf_i+0x130>
 8011f74:	680b      	ldr	r3, [r1, #0]
 8011f76:	6826      	ldr	r6, [r4, #0]
 8011f78:	6960      	ldr	r0, [r4, #20]
 8011f7a:	1d1d      	adds	r5, r3, #4
 8011f7c:	600d      	str	r5, [r1, #0]
 8011f7e:	0635      	lsls	r5, r6, #24
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	d501      	bpl.n	8011f88 <_printf_i+0x1cc>
 8011f84:	6018      	str	r0, [r3, #0]
 8011f86:	e002      	b.n	8011f8e <_printf_i+0x1d2>
 8011f88:	0671      	lsls	r1, r6, #25
 8011f8a:	d5fb      	bpl.n	8011f84 <_printf_i+0x1c8>
 8011f8c:	8018      	strh	r0, [r3, #0]
 8011f8e:	2300      	movs	r3, #0
 8011f90:	6123      	str	r3, [r4, #16]
 8011f92:	4616      	mov	r6, r2
 8011f94:	e7ba      	b.n	8011f0c <_printf_i+0x150>
 8011f96:	680b      	ldr	r3, [r1, #0]
 8011f98:	1d1a      	adds	r2, r3, #4
 8011f9a:	600a      	str	r2, [r1, #0]
 8011f9c:	681e      	ldr	r6, [r3, #0]
 8011f9e:	6862      	ldr	r2, [r4, #4]
 8011fa0:	2100      	movs	r1, #0
 8011fa2:	4630      	mov	r0, r6
 8011fa4:	f7ee f92c 	bl	8000200 <memchr>
 8011fa8:	b108      	cbz	r0, 8011fae <_printf_i+0x1f2>
 8011faa:	1b80      	subs	r0, r0, r6
 8011fac:	6060      	str	r0, [r4, #4]
 8011fae:	6863      	ldr	r3, [r4, #4]
 8011fb0:	6123      	str	r3, [r4, #16]
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011fb8:	e7a8      	b.n	8011f0c <_printf_i+0x150>
 8011fba:	6923      	ldr	r3, [r4, #16]
 8011fbc:	4632      	mov	r2, r6
 8011fbe:	4649      	mov	r1, r9
 8011fc0:	4640      	mov	r0, r8
 8011fc2:	47d0      	blx	sl
 8011fc4:	3001      	adds	r0, #1
 8011fc6:	d0ab      	beq.n	8011f20 <_printf_i+0x164>
 8011fc8:	6823      	ldr	r3, [r4, #0]
 8011fca:	079b      	lsls	r3, r3, #30
 8011fcc:	d413      	bmi.n	8011ff6 <_printf_i+0x23a>
 8011fce:	68e0      	ldr	r0, [r4, #12]
 8011fd0:	9b03      	ldr	r3, [sp, #12]
 8011fd2:	4298      	cmp	r0, r3
 8011fd4:	bfb8      	it	lt
 8011fd6:	4618      	movlt	r0, r3
 8011fd8:	e7a4      	b.n	8011f24 <_printf_i+0x168>
 8011fda:	2301      	movs	r3, #1
 8011fdc:	4632      	mov	r2, r6
 8011fde:	4649      	mov	r1, r9
 8011fe0:	4640      	mov	r0, r8
 8011fe2:	47d0      	blx	sl
 8011fe4:	3001      	adds	r0, #1
 8011fe6:	d09b      	beq.n	8011f20 <_printf_i+0x164>
 8011fe8:	3501      	adds	r5, #1
 8011fea:	68e3      	ldr	r3, [r4, #12]
 8011fec:	9903      	ldr	r1, [sp, #12]
 8011fee:	1a5b      	subs	r3, r3, r1
 8011ff0:	42ab      	cmp	r3, r5
 8011ff2:	dcf2      	bgt.n	8011fda <_printf_i+0x21e>
 8011ff4:	e7eb      	b.n	8011fce <_printf_i+0x212>
 8011ff6:	2500      	movs	r5, #0
 8011ff8:	f104 0619 	add.w	r6, r4, #25
 8011ffc:	e7f5      	b.n	8011fea <_printf_i+0x22e>
 8011ffe:	bf00      	nop
 8012000:	08016b64 	.word	0x08016b64
 8012004:	08016b75 	.word	0x08016b75

08012008 <_scanf_float>:
 8012008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801200c:	b087      	sub	sp, #28
 801200e:	4617      	mov	r7, r2
 8012010:	9303      	str	r3, [sp, #12]
 8012012:	688b      	ldr	r3, [r1, #8]
 8012014:	1e5a      	subs	r2, r3, #1
 8012016:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801201a:	bf83      	ittte	hi
 801201c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012020:	195b      	addhi	r3, r3, r5
 8012022:	9302      	strhi	r3, [sp, #8]
 8012024:	2300      	movls	r3, #0
 8012026:	bf86      	itte	hi
 8012028:	f240 135d 	movwhi	r3, #349	; 0x15d
 801202c:	608b      	strhi	r3, [r1, #8]
 801202e:	9302      	strls	r3, [sp, #8]
 8012030:	680b      	ldr	r3, [r1, #0]
 8012032:	468b      	mov	fp, r1
 8012034:	2500      	movs	r5, #0
 8012036:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801203a:	f84b 3b1c 	str.w	r3, [fp], #28
 801203e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8012042:	4680      	mov	r8, r0
 8012044:	460c      	mov	r4, r1
 8012046:	465e      	mov	r6, fp
 8012048:	46aa      	mov	sl, r5
 801204a:	46a9      	mov	r9, r5
 801204c:	9501      	str	r5, [sp, #4]
 801204e:	68a2      	ldr	r2, [r4, #8]
 8012050:	b152      	cbz	r2, 8012068 <_scanf_float+0x60>
 8012052:	683b      	ldr	r3, [r7, #0]
 8012054:	781b      	ldrb	r3, [r3, #0]
 8012056:	2b4e      	cmp	r3, #78	; 0x4e
 8012058:	d864      	bhi.n	8012124 <_scanf_float+0x11c>
 801205a:	2b40      	cmp	r3, #64	; 0x40
 801205c:	d83c      	bhi.n	80120d8 <_scanf_float+0xd0>
 801205e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8012062:	b2c8      	uxtb	r0, r1
 8012064:	280e      	cmp	r0, #14
 8012066:	d93a      	bls.n	80120de <_scanf_float+0xd6>
 8012068:	f1b9 0f00 	cmp.w	r9, #0
 801206c:	d003      	beq.n	8012076 <_scanf_float+0x6e>
 801206e:	6823      	ldr	r3, [r4, #0]
 8012070:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012074:	6023      	str	r3, [r4, #0]
 8012076:	f10a 3aff 	add.w	sl, sl, #4294967295
 801207a:	f1ba 0f01 	cmp.w	sl, #1
 801207e:	f200 8113 	bhi.w	80122a8 <_scanf_float+0x2a0>
 8012082:	455e      	cmp	r6, fp
 8012084:	f200 8105 	bhi.w	8012292 <_scanf_float+0x28a>
 8012088:	2501      	movs	r5, #1
 801208a:	4628      	mov	r0, r5
 801208c:	b007      	add	sp, #28
 801208e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012092:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8012096:	2a0d      	cmp	r2, #13
 8012098:	d8e6      	bhi.n	8012068 <_scanf_float+0x60>
 801209a:	a101      	add	r1, pc, #4	; (adr r1, 80120a0 <_scanf_float+0x98>)
 801209c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80120a0:	080121df 	.word	0x080121df
 80120a4:	08012069 	.word	0x08012069
 80120a8:	08012069 	.word	0x08012069
 80120ac:	08012069 	.word	0x08012069
 80120b0:	0801223f 	.word	0x0801223f
 80120b4:	08012217 	.word	0x08012217
 80120b8:	08012069 	.word	0x08012069
 80120bc:	08012069 	.word	0x08012069
 80120c0:	080121ed 	.word	0x080121ed
 80120c4:	08012069 	.word	0x08012069
 80120c8:	08012069 	.word	0x08012069
 80120cc:	08012069 	.word	0x08012069
 80120d0:	08012069 	.word	0x08012069
 80120d4:	080121a5 	.word	0x080121a5
 80120d8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80120dc:	e7db      	b.n	8012096 <_scanf_float+0x8e>
 80120de:	290e      	cmp	r1, #14
 80120e0:	d8c2      	bhi.n	8012068 <_scanf_float+0x60>
 80120e2:	a001      	add	r0, pc, #4	; (adr r0, 80120e8 <_scanf_float+0xe0>)
 80120e4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80120e8:	08012197 	.word	0x08012197
 80120ec:	08012069 	.word	0x08012069
 80120f0:	08012197 	.word	0x08012197
 80120f4:	0801222b 	.word	0x0801222b
 80120f8:	08012069 	.word	0x08012069
 80120fc:	08012145 	.word	0x08012145
 8012100:	08012181 	.word	0x08012181
 8012104:	08012181 	.word	0x08012181
 8012108:	08012181 	.word	0x08012181
 801210c:	08012181 	.word	0x08012181
 8012110:	08012181 	.word	0x08012181
 8012114:	08012181 	.word	0x08012181
 8012118:	08012181 	.word	0x08012181
 801211c:	08012181 	.word	0x08012181
 8012120:	08012181 	.word	0x08012181
 8012124:	2b6e      	cmp	r3, #110	; 0x6e
 8012126:	d809      	bhi.n	801213c <_scanf_float+0x134>
 8012128:	2b60      	cmp	r3, #96	; 0x60
 801212a:	d8b2      	bhi.n	8012092 <_scanf_float+0x8a>
 801212c:	2b54      	cmp	r3, #84	; 0x54
 801212e:	d077      	beq.n	8012220 <_scanf_float+0x218>
 8012130:	2b59      	cmp	r3, #89	; 0x59
 8012132:	d199      	bne.n	8012068 <_scanf_float+0x60>
 8012134:	2d07      	cmp	r5, #7
 8012136:	d197      	bne.n	8012068 <_scanf_float+0x60>
 8012138:	2508      	movs	r5, #8
 801213a:	e029      	b.n	8012190 <_scanf_float+0x188>
 801213c:	2b74      	cmp	r3, #116	; 0x74
 801213e:	d06f      	beq.n	8012220 <_scanf_float+0x218>
 8012140:	2b79      	cmp	r3, #121	; 0x79
 8012142:	e7f6      	b.n	8012132 <_scanf_float+0x12a>
 8012144:	6821      	ldr	r1, [r4, #0]
 8012146:	05c8      	lsls	r0, r1, #23
 8012148:	d51a      	bpl.n	8012180 <_scanf_float+0x178>
 801214a:	9b02      	ldr	r3, [sp, #8]
 801214c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8012150:	6021      	str	r1, [r4, #0]
 8012152:	f109 0901 	add.w	r9, r9, #1
 8012156:	b11b      	cbz	r3, 8012160 <_scanf_float+0x158>
 8012158:	3b01      	subs	r3, #1
 801215a:	3201      	adds	r2, #1
 801215c:	9302      	str	r3, [sp, #8]
 801215e:	60a2      	str	r2, [r4, #8]
 8012160:	68a3      	ldr	r3, [r4, #8]
 8012162:	3b01      	subs	r3, #1
 8012164:	60a3      	str	r3, [r4, #8]
 8012166:	6923      	ldr	r3, [r4, #16]
 8012168:	3301      	adds	r3, #1
 801216a:	6123      	str	r3, [r4, #16]
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	3b01      	subs	r3, #1
 8012170:	2b00      	cmp	r3, #0
 8012172:	607b      	str	r3, [r7, #4]
 8012174:	f340 8084 	ble.w	8012280 <_scanf_float+0x278>
 8012178:	683b      	ldr	r3, [r7, #0]
 801217a:	3301      	adds	r3, #1
 801217c:	603b      	str	r3, [r7, #0]
 801217e:	e766      	b.n	801204e <_scanf_float+0x46>
 8012180:	eb1a 0f05 	cmn.w	sl, r5
 8012184:	f47f af70 	bne.w	8012068 <_scanf_float+0x60>
 8012188:	6822      	ldr	r2, [r4, #0]
 801218a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801218e:	6022      	str	r2, [r4, #0]
 8012190:	f806 3b01 	strb.w	r3, [r6], #1
 8012194:	e7e4      	b.n	8012160 <_scanf_float+0x158>
 8012196:	6822      	ldr	r2, [r4, #0]
 8012198:	0610      	lsls	r0, r2, #24
 801219a:	f57f af65 	bpl.w	8012068 <_scanf_float+0x60>
 801219e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80121a2:	e7f4      	b.n	801218e <_scanf_float+0x186>
 80121a4:	f1ba 0f00 	cmp.w	sl, #0
 80121a8:	d10e      	bne.n	80121c8 <_scanf_float+0x1c0>
 80121aa:	f1b9 0f00 	cmp.w	r9, #0
 80121ae:	d10e      	bne.n	80121ce <_scanf_float+0x1c6>
 80121b0:	6822      	ldr	r2, [r4, #0]
 80121b2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80121b6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80121ba:	d108      	bne.n	80121ce <_scanf_float+0x1c6>
 80121bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80121c0:	6022      	str	r2, [r4, #0]
 80121c2:	f04f 0a01 	mov.w	sl, #1
 80121c6:	e7e3      	b.n	8012190 <_scanf_float+0x188>
 80121c8:	f1ba 0f02 	cmp.w	sl, #2
 80121cc:	d055      	beq.n	801227a <_scanf_float+0x272>
 80121ce:	2d01      	cmp	r5, #1
 80121d0:	d002      	beq.n	80121d8 <_scanf_float+0x1d0>
 80121d2:	2d04      	cmp	r5, #4
 80121d4:	f47f af48 	bne.w	8012068 <_scanf_float+0x60>
 80121d8:	3501      	adds	r5, #1
 80121da:	b2ed      	uxtb	r5, r5
 80121dc:	e7d8      	b.n	8012190 <_scanf_float+0x188>
 80121de:	f1ba 0f01 	cmp.w	sl, #1
 80121e2:	f47f af41 	bne.w	8012068 <_scanf_float+0x60>
 80121e6:	f04f 0a02 	mov.w	sl, #2
 80121ea:	e7d1      	b.n	8012190 <_scanf_float+0x188>
 80121ec:	b97d      	cbnz	r5, 801220e <_scanf_float+0x206>
 80121ee:	f1b9 0f00 	cmp.w	r9, #0
 80121f2:	f47f af3c 	bne.w	801206e <_scanf_float+0x66>
 80121f6:	6822      	ldr	r2, [r4, #0]
 80121f8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80121fc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012200:	f47f af39 	bne.w	8012076 <_scanf_float+0x6e>
 8012204:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012208:	6022      	str	r2, [r4, #0]
 801220a:	2501      	movs	r5, #1
 801220c:	e7c0      	b.n	8012190 <_scanf_float+0x188>
 801220e:	2d03      	cmp	r5, #3
 8012210:	d0e2      	beq.n	80121d8 <_scanf_float+0x1d0>
 8012212:	2d05      	cmp	r5, #5
 8012214:	e7de      	b.n	80121d4 <_scanf_float+0x1cc>
 8012216:	2d02      	cmp	r5, #2
 8012218:	f47f af26 	bne.w	8012068 <_scanf_float+0x60>
 801221c:	2503      	movs	r5, #3
 801221e:	e7b7      	b.n	8012190 <_scanf_float+0x188>
 8012220:	2d06      	cmp	r5, #6
 8012222:	f47f af21 	bne.w	8012068 <_scanf_float+0x60>
 8012226:	2507      	movs	r5, #7
 8012228:	e7b2      	b.n	8012190 <_scanf_float+0x188>
 801222a:	6822      	ldr	r2, [r4, #0]
 801222c:	0591      	lsls	r1, r2, #22
 801222e:	f57f af1b 	bpl.w	8012068 <_scanf_float+0x60>
 8012232:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8012236:	6022      	str	r2, [r4, #0]
 8012238:	f8cd 9004 	str.w	r9, [sp, #4]
 801223c:	e7a8      	b.n	8012190 <_scanf_float+0x188>
 801223e:	6822      	ldr	r2, [r4, #0]
 8012240:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8012244:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8012248:	d006      	beq.n	8012258 <_scanf_float+0x250>
 801224a:	0550      	lsls	r0, r2, #21
 801224c:	f57f af0c 	bpl.w	8012068 <_scanf_float+0x60>
 8012250:	f1b9 0f00 	cmp.w	r9, #0
 8012254:	f43f af0f 	beq.w	8012076 <_scanf_float+0x6e>
 8012258:	0591      	lsls	r1, r2, #22
 801225a:	bf58      	it	pl
 801225c:	9901      	ldrpl	r1, [sp, #4]
 801225e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012262:	bf58      	it	pl
 8012264:	eba9 0101 	subpl.w	r1, r9, r1
 8012268:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801226c:	bf58      	it	pl
 801226e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8012272:	6022      	str	r2, [r4, #0]
 8012274:	f04f 0900 	mov.w	r9, #0
 8012278:	e78a      	b.n	8012190 <_scanf_float+0x188>
 801227a:	f04f 0a03 	mov.w	sl, #3
 801227e:	e787      	b.n	8012190 <_scanf_float+0x188>
 8012280:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012284:	4639      	mov	r1, r7
 8012286:	4640      	mov	r0, r8
 8012288:	4798      	blx	r3
 801228a:	2800      	cmp	r0, #0
 801228c:	f43f aedf 	beq.w	801204e <_scanf_float+0x46>
 8012290:	e6ea      	b.n	8012068 <_scanf_float+0x60>
 8012292:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012296:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801229a:	463a      	mov	r2, r7
 801229c:	4640      	mov	r0, r8
 801229e:	4798      	blx	r3
 80122a0:	6923      	ldr	r3, [r4, #16]
 80122a2:	3b01      	subs	r3, #1
 80122a4:	6123      	str	r3, [r4, #16]
 80122a6:	e6ec      	b.n	8012082 <_scanf_float+0x7a>
 80122a8:	1e6b      	subs	r3, r5, #1
 80122aa:	2b06      	cmp	r3, #6
 80122ac:	d825      	bhi.n	80122fa <_scanf_float+0x2f2>
 80122ae:	2d02      	cmp	r5, #2
 80122b0:	d836      	bhi.n	8012320 <_scanf_float+0x318>
 80122b2:	455e      	cmp	r6, fp
 80122b4:	f67f aee8 	bls.w	8012088 <_scanf_float+0x80>
 80122b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80122bc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80122c0:	463a      	mov	r2, r7
 80122c2:	4640      	mov	r0, r8
 80122c4:	4798      	blx	r3
 80122c6:	6923      	ldr	r3, [r4, #16]
 80122c8:	3b01      	subs	r3, #1
 80122ca:	6123      	str	r3, [r4, #16]
 80122cc:	e7f1      	b.n	80122b2 <_scanf_float+0x2aa>
 80122ce:	9802      	ldr	r0, [sp, #8]
 80122d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80122d4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80122d8:	9002      	str	r0, [sp, #8]
 80122da:	463a      	mov	r2, r7
 80122dc:	4640      	mov	r0, r8
 80122de:	4798      	blx	r3
 80122e0:	6923      	ldr	r3, [r4, #16]
 80122e2:	3b01      	subs	r3, #1
 80122e4:	6123      	str	r3, [r4, #16]
 80122e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80122ea:	fa5f fa8a 	uxtb.w	sl, sl
 80122ee:	f1ba 0f02 	cmp.w	sl, #2
 80122f2:	d1ec      	bne.n	80122ce <_scanf_float+0x2c6>
 80122f4:	3d03      	subs	r5, #3
 80122f6:	b2ed      	uxtb	r5, r5
 80122f8:	1b76      	subs	r6, r6, r5
 80122fa:	6823      	ldr	r3, [r4, #0]
 80122fc:	05da      	lsls	r2, r3, #23
 80122fe:	d52f      	bpl.n	8012360 <_scanf_float+0x358>
 8012300:	055b      	lsls	r3, r3, #21
 8012302:	d510      	bpl.n	8012326 <_scanf_float+0x31e>
 8012304:	455e      	cmp	r6, fp
 8012306:	f67f aebf 	bls.w	8012088 <_scanf_float+0x80>
 801230a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801230e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012312:	463a      	mov	r2, r7
 8012314:	4640      	mov	r0, r8
 8012316:	4798      	blx	r3
 8012318:	6923      	ldr	r3, [r4, #16]
 801231a:	3b01      	subs	r3, #1
 801231c:	6123      	str	r3, [r4, #16]
 801231e:	e7f1      	b.n	8012304 <_scanf_float+0x2fc>
 8012320:	46aa      	mov	sl, r5
 8012322:	9602      	str	r6, [sp, #8]
 8012324:	e7df      	b.n	80122e6 <_scanf_float+0x2de>
 8012326:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801232a:	6923      	ldr	r3, [r4, #16]
 801232c:	2965      	cmp	r1, #101	; 0x65
 801232e:	f103 33ff 	add.w	r3, r3, #4294967295
 8012332:	f106 35ff 	add.w	r5, r6, #4294967295
 8012336:	6123      	str	r3, [r4, #16]
 8012338:	d00c      	beq.n	8012354 <_scanf_float+0x34c>
 801233a:	2945      	cmp	r1, #69	; 0x45
 801233c:	d00a      	beq.n	8012354 <_scanf_float+0x34c>
 801233e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012342:	463a      	mov	r2, r7
 8012344:	4640      	mov	r0, r8
 8012346:	4798      	blx	r3
 8012348:	6923      	ldr	r3, [r4, #16]
 801234a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801234e:	3b01      	subs	r3, #1
 8012350:	1eb5      	subs	r5, r6, #2
 8012352:	6123      	str	r3, [r4, #16]
 8012354:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012358:	463a      	mov	r2, r7
 801235a:	4640      	mov	r0, r8
 801235c:	4798      	blx	r3
 801235e:	462e      	mov	r6, r5
 8012360:	6825      	ldr	r5, [r4, #0]
 8012362:	f015 0510 	ands.w	r5, r5, #16
 8012366:	d158      	bne.n	801241a <_scanf_float+0x412>
 8012368:	7035      	strb	r5, [r6, #0]
 801236a:	6823      	ldr	r3, [r4, #0]
 801236c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012374:	d11c      	bne.n	80123b0 <_scanf_float+0x3a8>
 8012376:	9b01      	ldr	r3, [sp, #4]
 8012378:	454b      	cmp	r3, r9
 801237a:	eba3 0209 	sub.w	r2, r3, r9
 801237e:	d124      	bne.n	80123ca <_scanf_float+0x3c2>
 8012380:	2200      	movs	r2, #0
 8012382:	4659      	mov	r1, fp
 8012384:	4640      	mov	r0, r8
 8012386:	f000 ffdd 	bl	8013344 <_strtod_r>
 801238a:	9b03      	ldr	r3, [sp, #12]
 801238c:	6821      	ldr	r1, [r4, #0]
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	f011 0f02 	tst.w	r1, #2
 8012394:	ec57 6b10 	vmov	r6, r7, d0
 8012398:	f103 0204 	add.w	r2, r3, #4
 801239c:	d020      	beq.n	80123e0 <_scanf_float+0x3d8>
 801239e:	9903      	ldr	r1, [sp, #12]
 80123a0:	600a      	str	r2, [r1, #0]
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	e9c3 6700 	strd	r6, r7, [r3]
 80123a8:	68e3      	ldr	r3, [r4, #12]
 80123aa:	3301      	adds	r3, #1
 80123ac:	60e3      	str	r3, [r4, #12]
 80123ae:	e66c      	b.n	801208a <_scanf_float+0x82>
 80123b0:	9b04      	ldr	r3, [sp, #16]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d0e4      	beq.n	8012380 <_scanf_float+0x378>
 80123b6:	9905      	ldr	r1, [sp, #20]
 80123b8:	230a      	movs	r3, #10
 80123ba:	462a      	mov	r2, r5
 80123bc:	3101      	adds	r1, #1
 80123be:	4640      	mov	r0, r8
 80123c0:	f001 f84a 	bl	8013458 <_strtol_r>
 80123c4:	9b04      	ldr	r3, [sp, #16]
 80123c6:	9e05      	ldr	r6, [sp, #20]
 80123c8:	1ac2      	subs	r2, r0, r3
 80123ca:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80123ce:	429e      	cmp	r6, r3
 80123d0:	bf28      	it	cs
 80123d2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80123d6:	4912      	ldr	r1, [pc, #72]	; (8012420 <_scanf_float+0x418>)
 80123d8:	4630      	mov	r0, r6
 80123da:	f000 f8e9 	bl	80125b0 <siprintf>
 80123de:	e7cf      	b.n	8012380 <_scanf_float+0x378>
 80123e0:	f011 0f04 	tst.w	r1, #4
 80123e4:	9903      	ldr	r1, [sp, #12]
 80123e6:	600a      	str	r2, [r1, #0]
 80123e8:	d1db      	bne.n	80123a2 <_scanf_float+0x39a>
 80123ea:	f8d3 8000 	ldr.w	r8, [r3]
 80123ee:	ee10 2a10 	vmov	r2, s0
 80123f2:	ee10 0a10 	vmov	r0, s0
 80123f6:	463b      	mov	r3, r7
 80123f8:	4639      	mov	r1, r7
 80123fa:	f7ee fba7 	bl	8000b4c <__aeabi_dcmpun>
 80123fe:	b128      	cbz	r0, 801240c <_scanf_float+0x404>
 8012400:	4808      	ldr	r0, [pc, #32]	; (8012424 <_scanf_float+0x41c>)
 8012402:	f000 f88b 	bl	801251c <nanf>
 8012406:	ed88 0a00 	vstr	s0, [r8]
 801240a:	e7cd      	b.n	80123a8 <_scanf_float+0x3a0>
 801240c:	4630      	mov	r0, r6
 801240e:	4639      	mov	r1, r7
 8012410:	f7ee fbfa 	bl	8000c08 <__aeabi_d2f>
 8012414:	f8c8 0000 	str.w	r0, [r8]
 8012418:	e7c6      	b.n	80123a8 <_scanf_float+0x3a0>
 801241a:	2500      	movs	r5, #0
 801241c:	e635      	b.n	801208a <_scanf_float+0x82>
 801241e:	bf00      	nop
 8012420:	08016b86 	.word	0x08016b86
 8012424:	08016c1b 	.word	0x08016c1b

08012428 <cleanup_glue>:
 8012428:	b538      	push	{r3, r4, r5, lr}
 801242a:	460c      	mov	r4, r1
 801242c:	6809      	ldr	r1, [r1, #0]
 801242e:	4605      	mov	r5, r0
 8012430:	b109      	cbz	r1, 8012436 <cleanup_glue+0xe>
 8012432:	f7ff fff9 	bl	8012428 <cleanup_glue>
 8012436:	4621      	mov	r1, r4
 8012438:	4628      	mov	r0, r5
 801243a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801243e:	f7ff b8cf 	b.w	80115e0 <_free_r>
	...

08012444 <_reclaim_reent>:
 8012444:	4b2c      	ldr	r3, [pc, #176]	; (80124f8 <_reclaim_reent+0xb4>)
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	4283      	cmp	r3, r0
 801244a:	b570      	push	{r4, r5, r6, lr}
 801244c:	4604      	mov	r4, r0
 801244e:	d051      	beq.n	80124f4 <_reclaim_reent+0xb0>
 8012450:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012452:	b143      	cbz	r3, 8012466 <_reclaim_reent+0x22>
 8012454:	68db      	ldr	r3, [r3, #12]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d14a      	bne.n	80124f0 <_reclaim_reent+0xac>
 801245a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801245c:	6819      	ldr	r1, [r3, #0]
 801245e:	b111      	cbz	r1, 8012466 <_reclaim_reent+0x22>
 8012460:	4620      	mov	r0, r4
 8012462:	f7ff f8bd 	bl	80115e0 <_free_r>
 8012466:	6961      	ldr	r1, [r4, #20]
 8012468:	b111      	cbz	r1, 8012470 <_reclaim_reent+0x2c>
 801246a:	4620      	mov	r0, r4
 801246c:	f7ff f8b8 	bl	80115e0 <_free_r>
 8012470:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012472:	b111      	cbz	r1, 801247a <_reclaim_reent+0x36>
 8012474:	4620      	mov	r0, r4
 8012476:	f7ff f8b3 	bl	80115e0 <_free_r>
 801247a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801247c:	b111      	cbz	r1, 8012484 <_reclaim_reent+0x40>
 801247e:	4620      	mov	r0, r4
 8012480:	f7ff f8ae 	bl	80115e0 <_free_r>
 8012484:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012486:	b111      	cbz	r1, 801248e <_reclaim_reent+0x4a>
 8012488:	4620      	mov	r0, r4
 801248a:	f7ff f8a9 	bl	80115e0 <_free_r>
 801248e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012490:	b111      	cbz	r1, 8012498 <_reclaim_reent+0x54>
 8012492:	4620      	mov	r0, r4
 8012494:	f7ff f8a4 	bl	80115e0 <_free_r>
 8012498:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801249a:	b111      	cbz	r1, 80124a2 <_reclaim_reent+0x5e>
 801249c:	4620      	mov	r0, r4
 801249e:	f7ff f89f 	bl	80115e0 <_free_r>
 80124a2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80124a4:	b111      	cbz	r1, 80124ac <_reclaim_reent+0x68>
 80124a6:	4620      	mov	r0, r4
 80124a8:	f7ff f89a 	bl	80115e0 <_free_r>
 80124ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80124ae:	b111      	cbz	r1, 80124b6 <_reclaim_reent+0x72>
 80124b0:	4620      	mov	r0, r4
 80124b2:	f7ff f895 	bl	80115e0 <_free_r>
 80124b6:	69a3      	ldr	r3, [r4, #24]
 80124b8:	b1e3      	cbz	r3, 80124f4 <_reclaim_reent+0xb0>
 80124ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80124bc:	4620      	mov	r0, r4
 80124be:	4798      	blx	r3
 80124c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80124c2:	b1b9      	cbz	r1, 80124f4 <_reclaim_reent+0xb0>
 80124c4:	4620      	mov	r0, r4
 80124c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80124ca:	f7ff bfad 	b.w	8012428 <cleanup_glue>
 80124ce:	5949      	ldr	r1, [r1, r5]
 80124d0:	b941      	cbnz	r1, 80124e4 <_reclaim_reent+0xa0>
 80124d2:	3504      	adds	r5, #4
 80124d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80124d6:	2d80      	cmp	r5, #128	; 0x80
 80124d8:	68d9      	ldr	r1, [r3, #12]
 80124da:	d1f8      	bne.n	80124ce <_reclaim_reent+0x8a>
 80124dc:	4620      	mov	r0, r4
 80124de:	f7ff f87f 	bl	80115e0 <_free_r>
 80124e2:	e7ba      	b.n	801245a <_reclaim_reent+0x16>
 80124e4:	680e      	ldr	r6, [r1, #0]
 80124e6:	4620      	mov	r0, r4
 80124e8:	f7ff f87a 	bl	80115e0 <_free_r>
 80124ec:	4631      	mov	r1, r6
 80124ee:	e7ef      	b.n	80124d0 <_reclaim_reent+0x8c>
 80124f0:	2500      	movs	r5, #0
 80124f2:	e7ef      	b.n	80124d4 <_reclaim_reent+0x90>
 80124f4:	bd70      	pop	{r4, r5, r6, pc}
 80124f6:	bf00      	nop
 80124f8:	20000188 	.word	0x20000188

080124fc <_sbrk_r>:
 80124fc:	b538      	push	{r3, r4, r5, lr}
 80124fe:	4d06      	ldr	r5, [pc, #24]	; (8012518 <_sbrk_r+0x1c>)
 8012500:	2300      	movs	r3, #0
 8012502:	4604      	mov	r4, r0
 8012504:	4608      	mov	r0, r1
 8012506:	602b      	str	r3, [r5, #0]
 8012508:	f7f0 fd6c 	bl	8002fe4 <_sbrk>
 801250c:	1c43      	adds	r3, r0, #1
 801250e:	d102      	bne.n	8012516 <_sbrk_r+0x1a>
 8012510:	682b      	ldr	r3, [r5, #0]
 8012512:	b103      	cbz	r3, 8012516 <_sbrk_r+0x1a>
 8012514:	6023      	str	r3, [r4, #0]
 8012516:	bd38      	pop	{r3, r4, r5, pc}
 8012518:	200070d4 	.word	0x200070d4

0801251c <nanf>:
 801251c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012524 <nanf+0x8>
 8012520:	4770      	bx	lr
 8012522:	bf00      	nop
 8012524:	7fc00000 	.word	0x7fc00000

08012528 <_raise_r>:
 8012528:	291f      	cmp	r1, #31
 801252a:	b538      	push	{r3, r4, r5, lr}
 801252c:	4604      	mov	r4, r0
 801252e:	460d      	mov	r5, r1
 8012530:	d904      	bls.n	801253c <_raise_r+0x14>
 8012532:	2316      	movs	r3, #22
 8012534:	6003      	str	r3, [r0, #0]
 8012536:	f04f 30ff 	mov.w	r0, #4294967295
 801253a:	bd38      	pop	{r3, r4, r5, pc}
 801253c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801253e:	b112      	cbz	r2, 8012546 <_raise_r+0x1e>
 8012540:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012544:	b94b      	cbnz	r3, 801255a <_raise_r+0x32>
 8012546:	4620      	mov	r0, r4
 8012548:	f000 f830 	bl	80125ac <_getpid_r>
 801254c:	462a      	mov	r2, r5
 801254e:	4601      	mov	r1, r0
 8012550:	4620      	mov	r0, r4
 8012552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012556:	f000 b817 	b.w	8012588 <_kill_r>
 801255a:	2b01      	cmp	r3, #1
 801255c:	d00a      	beq.n	8012574 <_raise_r+0x4c>
 801255e:	1c59      	adds	r1, r3, #1
 8012560:	d103      	bne.n	801256a <_raise_r+0x42>
 8012562:	2316      	movs	r3, #22
 8012564:	6003      	str	r3, [r0, #0]
 8012566:	2001      	movs	r0, #1
 8012568:	e7e7      	b.n	801253a <_raise_r+0x12>
 801256a:	2400      	movs	r4, #0
 801256c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012570:	4628      	mov	r0, r5
 8012572:	4798      	blx	r3
 8012574:	2000      	movs	r0, #0
 8012576:	e7e0      	b.n	801253a <_raise_r+0x12>

08012578 <raise>:
 8012578:	4b02      	ldr	r3, [pc, #8]	; (8012584 <raise+0xc>)
 801257a:	4601      	mov	r1, r0
 801257c:	6818      	ldr	r0, [r3, #0]
 801257e:	f7ff bfd3 	b.w	8012528 <_raise_r>
 8012582:	bf00      	nop
 8012584:	20000188 	.word	0x20000188

08012588 <_kill_r>:
 8012588:	b538      	push	{r3, r4, r5, lr}
 801258a:	4d07      	ldr	r5, [pc, #28]	; (80125a8 <_kill_r+0x20>)
 801258c:	2300      	movs	r3, #0
 801258e:	4604      	mov	r4, r0
 8012590:	4608      	mov	r0, r1
 8012592:	4611      	mov	r1, r2
 8012594:	602b      	str	r3, [r5, #0]
 8012596:	f7f0 fc9d 	bl	8002ed4 <_kill>
 801259a:	1c43      	adds	r3, r0, #1
 801259c:	d102      	bne.n	80125a4 <_kill_r+0x1c>
 801259e:	682b      	ldr	r3, [r5, #0]
 80125a0:	b103      	cbz	r3, 80125a4 <_kill_r+0x1c>
 80125a2:	6023      	str	r3, [r4, #0]
 80125a4:	bd38      	pop	{r3, r4, r5, pc}
 80125a6:	bf00      	nop
 80125a8:	200070d4 	.word	0x200070d4

080125ac <_getpid_r>:
 80125ac:	f7f0 bc8a 	b.w	8002ec4 <_getpid>

080125b0 <siprintf>:
 80125b0:	b40e      	push	{r1, r2, r3}
 80125b2:	b500      	push	{lr}
 80125b4:	b09c      	sub	sp, #112	; 0x70
 80125b6:	ab1d      	add	r3, sp, #116	; 0x74
 80125b8:	9002      	str	r0, [sp, #8]
 80125ba:	9006      	str	r0, [sp, #24]
 80125bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80125c0:	4809      	ldr	r0, [pc, #36]	; (80125e8 <siprintf+0x38>)
 80125c2:	9107      	str	r1, [sp, #28]
 80125c4:	9104      	str	r1, [sp, #16]
 80125c6:	4909      	ldr	r1, [pc, #36]	; (80125ec <siprintf+0x3c>)
 80125c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80125cc:	9105      	str	r1, [sp, #20]
 80125ce:	6800      	ldr	r0, [r0, #0]
 80125d0:	9301      	str	r3, [sp, #4]
 80125d2:	a902      	add	r1, sp, #8
 80125d4:	f003 f83c 	bl	8015650 <_svfiprintf_r>
 80125d8:	9b02      	ldr	r3, [sp, #8]
 80125da:	2200      	movs	r2, #0
 80125dc:	701a      	strb	r2, [r3, #0]
 80125de:	b01c      	add	sp, #112	; 0x70
 80125e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80125e4:	b003      	add	sp, #12
 80125e6:	4770      	bx	lr
 80125e8:	20000188 	.word	0x20000188
 80125ec:	ffff0208 	.word	0xffff0208

080125f0 <siscanf>:
 80125f0:	b40e      	push	{r1, r2, r3}
 80125f2:	b510      	push	{r4, lr}
 80125f4:	b09f      	sub	sp, #124	; 0x7c
 80125f6:	ac21      	add	r4, sp, #132	; 0x84
 80125f8:	f44f 7101 	mov.w	r1, #516	; 0x204
 80125fc:	f854 2b04 	ldr.w	r2, [r4], #4
 8012600:	9201      	str	r2, [sp, #4]
 8012602:	f8ad 101c 	strh.w	r1, [sp, #28]
 8012606:	9004      	str	r0, [sp, #16]
 8012608:	9008      	str	r0, [sp, #32]
 801260a:	f7ed fdf1 	bl	80001f0 <strlen>
 801260e:	4b0c      	ldr	r3, [pc, #48]	; (8012640 <siscanf+0x50>)
 8012610:	9005      	str	r0, [sp, #20]
 8012612:	9009      	str	r0, [sp, #36]	; 0x24
 8012614:	930d      	str	r3, [sp, #52]	; 0x34
 8012616:	480b      	ldr	r0, [pc, #44]	; (8012644 <siscanf+0x54>)
 8012618:	9a01      	ldr	r2, [sp, #4]
 801261a:	6800      	ldr	r0, [r0, #0]
 801261c:	9403      	str	r4, [sp, #12]
 801261e:	2300      	movs	r3, #0
 8012620:	9311      	str	r3, [sp, #68]	; 0x44
 8012622:	9316      	str	r3, [sp, #88]	; 0x58
 8012624:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012628:	f8ad 301e 	strh.w	r3, [sp, #30]
 801262c:	a904      	add	r1, sp, #16
 801262e:	4623      	mov	r3, r4
 8012630:	f003 f968 	bl	8015904 <__ssvfiscanf_r>
 8012634:	b01f      	add	sp, #124	; 0x7c
 8012636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801263a:	b003      	add	sp, #12
 801263c:	4770      	bx	lr
 801263e:	bf00      	nop
 8012640:	0801266b 	.word	0x0801266b
 8012644:	20000188 	.word	0x20000188

08012648 <__sread>:
 8012648:	b510      	push	{r4, lr}
 801264a:	460c      	mov	r4, r1
 801264c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012650:	f003 fd76 	bl	8016140 <_read_r>
 8012654:	2800      	cmp	r0, #0
 8012656:	bfab      	itete	ge
 8012658:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801265a:	89a3      	ldrhlt	r3, [r4, #12]
 801265c:	181b      	addge	r3, r3, r0
 801265e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012662:	bfac      	ite	ge
 8012664:	6563      	strge	r3, [r4, #84]	; 0x54
 8012666:	81a3      	strhlt	r3, [r4, #12]
 8012668:	bd10      	pop	{r4, pc}

0801266a <__seofread>:
 801266a:	2000      	movs	r0, #0
 801266c:	4770      	bx	lr

0801266e <__swrite>:
 801266e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012672:	461f      	mov	r7, r3
 8012674:	898b      	ldrh	r3, [r1, #12]
 8012676:	05db      	lsls	r3, r3, #23
 8012678:	4605      	mov	r5, r0
 801267a:	460c      	mov	r4, r1
 801267c:	4616      	mov	r6, r2
 801267e:	d505      	bpl.n	801268c <__swrite+0x1e>
 8012680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012684:	2302      	movs	r3, #2
 8012686:	2200      	movs	r2, #0
 8012688:	f002 fa66 	bl	8014b58 <_lseek_r>
 801268c:	89a3      	ldrh	r3, [r4, #12]
 801268e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012692:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012696:	81a3      	strh	r3, [r4, #12]
 8012698:	4632      	mov	r2, r6
 801269a:	463b      	mov	r3, r7
 801269c:	4628      	mov	r0, r5
 801269e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80126a2:	f000 bf59 	b.w	8013558 <_write_r>

080126a6 <__sseek>:
 80126a6:	b510      	push	{r4, lr}
 80126a8:	460c      	mov	r4, r1
 80126aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126ae:	f002 fa53 	bl	8014b58 <_lseek_r>
 80126b2:	1c43      	adds	r3, r0, #1
 80126b4:	89a3      	ldrh	r3, [r4, #12]
 80126b6:	bf15      	itete	ne
 80126b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80126ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80126be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80126c2:	81a3      	strheq	r3, [r4, #12]
 80126c4:	bf18      	it	ne
 80126c6:	81a3      	strhne	r3, [r4, #12]
 80126c8:	bd10      	pop	{r4, pc}

080126ca <__sclose>:
 80126ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126ce:	f000 bf73 	b.w	80135b8 <_close_r>

080126d2 <strncmp>:
 80126d2:	b510      	push	{r4, lr}
 80126d4:	b16a      	cbz	r2, 80126f2 <strncmp+0x20>
 80126d6:	3901      	subs	r1, #1
 80126d8:	1884      	adds	r4, r0, r2
 80126da:	f810 3b01 	ldrb.w	r3, [r0], #1
 80126de:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80126e2:	4293      	cmp	r3, r2
 80126e4:	d103      	bne.n	80126ee <strncmp+0x1c>
 80126e6:	42a0      	cmp	r0, r4
 80126e8:	d001      	beq.n	80126ee <strncmp+0x1c>
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d1f5      	bne.n	80126da <strncmp+0x8>
 80126ee:	1a98      	subs	r0, r3, r2
 80126f0:	bd10      	pop	{r4, pc}
 80126f2:	4610      	mov	r0, r2
 80126f4:	e7fc      	b.n	80126f0 <strncmp+0x1e>

080126f6 <sulp>:
 80126f6:	b570      	push	{r4, r5, r6, lr}
 80126f8:	4604      	mov	r4, r0
 80126fa:	460d      	mov	r5, r1
 80126fc:	ec45 4b10 	vmov	d0, r4, r5
 8012700:	4616      	mov	r6, r2
 8012702:	f002 fdc5 	bl	8015290 <__ulp>
 8012706:	ec51 0b10 	vmov	r0, r1, d0
 801270a:	b17e      	cbz	r6, 801272c <sulp+0x36>
 801270c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012710:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012714:	2b00      	cmp	r3, #0
 8012716:	dd09      	ble.n	801272c <sulp+0x36>
 8012718:	051b      	lsls	r3, r3, #20
 801271a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801271e:	2400      	movs	r4, #0
 8012720:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8012724:	4622      	mov	r2, r4
 8012726:	462b      	mov	r3, r5
 8012728:	f7ed ff76 	bl	8000618 <__aeabi_dmul>
 801272c:	bd70      	pop	{r4, r5, r6, pc}
	...

08012730 <_strtod_l>:
 8012730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012734:	b0a3      	sub	sp, #140	; 0x8c
 8012736:	461f      	mov	r7, r3
 8012738:	2300      	movs	r3, #0
 801273a:	931e      	str	r3, [sp, #120]	; 0x78
 801273c:	4ba4      	ldr	r3, [pc, #656]	; (80129d0 <_strtod_l+0x2a0>)
 801273e:	9219      	str	r2, [sp, #100]	; 0x64
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	9307      	str	r3, [sp, #28]
 8012744:	4604      	mov	r4, r0
 8012746:	4618      	mov	r0, r3
 8012748:	4688      	mov	r8, r1
 801274a:	f7ed fd51 	bl	80001f0 <strlen>
 801274e:	f04f 0a00 	mov.w	sl, #0
 8012752:	4605      	mov	r5, r0
 8012754:	f04f 0b00 	mov.w	fp, #0
 8012758:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801275c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801275e:	781a      	ldrb	r2, [r3, #0]
 8012760:	2a2b      	cmp	r2, #43	; 0x2b
 8012762:	d04c      	beq.n	80127fe <_strtod_l+0xce>
 8012764:	d839      	bhi.n	80127da <_strtod_l+0xaa>
 8012766:	2a0d      	cmp	r2, #13
 8012768:	d832      	bhi.n	80127d0 <_strtod_l+0xa0>
 801276a:	2a08      	cmp	r2, #8
 801276c:	d832      	bhi.n	80127d4 <_strtod_l+0xa4>
 801276e:	2a00      	cmp	r2, #0
 8012770:	d03c      	beq.n	80127ec <_strtod_l+0xbc>
 8012772:	2300      	movs	r3, #0
 8012774:	930e      	str	r3, [sp, #56]	; 0x38
 8012776:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8012778:	7833      	ldrb	r3, [r6, #0]
 801277a:	2b30      	cmp	r3, #48	; 0x30
 801277c:	f040 80b4 	bne.w	80128e8 <_strtod_l+0x1b8>
 8012780:	7873      	ldrb	r3, [r6, #1]
 8012782:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012786:	2b58      	cmp	r3, #88	; 0x58
 8012788:	d16c      	bne.n	8012864 <_strtod_l+0x134>
 801278a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801278c:	9301      	str	r3, [sp, #4]
 801278e:	ab1e      	add	r3, sp, #120	; 0x78
 8012790:	9702      	str	r7, [sp, #8]
 8012792:	9300      	str	r3, [sp, #0]
 8012794:	4a8f      	ldr	r2, [pc, #572]	; (80129d4 <_strtod_l+0x2a4>)
 8012796:	ab1f      	add	r3, sp, #124	; 0x7c
 8012798:	a91d      	add	r1, sp, #116	; 0x74
 801279a:	4620      	mov	r0, r4
 801279c:	f001 fed0 	bl	8014540 <__gethex>
 80127a0:	f010 0707 	ands.w	r7, r0, #7
 80127a4:	4605      	mov	r5, r0
 80127a6:	d005      	beq.n	80127b4 <_strtod_l+0x84>
 80127a8:	2f06      	cmp	r7, #6
 80127aa:	d12a      	bne.n	8012802 <_strtod_l+0xd2>
 80127ac:	3601      	adds	r6, #1
 80127ae:	2300      	movs	r3, #0
 80127b0:	961d      	str	r6, [sp, #116]	; 0x74
 80127b2:	930e      	str	r3, [sp, #56]	; 0x38
 80127b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	f040 8596 	bne.w	80132e8 <_strtod_l+0xbb8>
 80127bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80127be:	b1db      	cbz	r3, 80127f8 <_strtod_l+0xc8>
 80127c0:	4652      	mov	r2, sl
 80127c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80127c6:	ec43 2b10 	vmov	d0, r2, r3
 80127ca:	b023      	add	sp, #140	; 0x8c
 80127cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127d0:	2a20      	cmp	r2, #32
 80127d2:	d1ce      	bne.n	8012772 <_strtod_l+0x42>
 80127d4:	3301      	adds	r3, #1
 80127d6:	931d      	str	r3, [sp, #116]	; 0x74
 80127d8:	e7c0      	b.n	801275c <_strtod_l+0x2c>
 80127da:	2a2d      	cmp	r2, #45	; 0x2d
 80127dc:	d1c9      	bne.n	8012772 <_strtod_l+0x42>
 80127de:	2201      	movs	r2, #1
 80127e0:	920e      	str	r2, [sp, #56]	; 0x38
 80127e2:	1c5a      	adds	r2, r3, #1
 80127e4:	921d      	str	r2, [sp, #116]	; 0x74
 80127e6:	785b      	ldrb	r3, [r3, #1]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d1c4      	bne.n	8012776 <_strtod_l+0x46>
 80127ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80127ee:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	f040 8576 	bne.w	80132e4 <_strtod_l+0xbb4>
 80127f8:	4652      	mov	r2, sl
 80127fa:	465b      	mov	r3, fp
 80127fc:	e7e3      	b.n	80127c6 <_strtod_l+0x96>
 80127fe:	2200      	movs	r2, #0
 8012800:	e7ee      	b.n	80127e0 <_strtod_l+0xb0>
 8012802:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012804:	b13a      	cbz	r2, 8012816 <_strtod_l+0xe6>
 8012806:	2135      	movs	r1, #53	; 0x35
 8012808:	a820      	add	r0, sp, #128	; 0x80
 801280a:	f002 fe4c 	bl	80154a6 <__copybits>
 801280e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012810:	4620      	mov	r0, r4
 8012812:	f002 fa11 	bl	8014c38 <_Bfree>
 8012816:	3f01      	subs	r7, #1
 8012818:	2f05      	cmp	r7, #5
 801281a:	d807      	bhi.n	801282c <_strtod_l+0xfc>
 801281c:	e8df f007 	tbb	[pc, r7]
 8012820:	1d180b0e 	.word	0x1d180b0e
 8012824:	030e      	.short	0x030e
 8012826:	f04f 0b00 	mov.w	fp, #0
 801282a:	46da      	mov	sl, fp
 801282c:	0728      	lsls	r0, r5, #28
 801282e:	d5c1      	bpl.n	80127b4 <_strtod_l+0x84>
 8012830:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8012834:	e7be      	b.n	80127b4 <_strtod_l+0x84>
 8012836:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801283a:	e7f7      	b.n	801282c <_strtod_l+0xfc>
 801283c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8012840:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012842:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012846:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801284a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801284e:	e7ed      	b.n	801282c <_strtod_l+0xfc>
 8012850:	f8df b184 	ldr.w	fp, [pc, #388]	; 80129d8 <_strtod_l+0x2a8>
 8012854:	f04f 0a00 	mov.w	sl, #0
 8012858:	e7e8      	b.n	801282c <_strtod_l+0xfc>
 801285a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801285e:	f04f 3aff 	mov.w	sl, #4294967295
 8012862:	e7e3      	b.n	801282c <_strtod_l+0xfc>
 8012864:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012866:	1c5a      	adds	r2, r3, #1
 8012868:	921d      	str	r2, [sp, #116]	; 0x74
 801286a:	785b      	ldrb	r3, [r3, #1]
 801286c:	2b30      	cmp	r3, #48	; 0x30
 801286e:	d0f9      	beq.n	8012864 <_strtod_l+0x134>
 8012870:	2b00      	cmp	r3, #0
 8012872:	d09f      	beq.n	80127b4 <_strtod_l+0x84>
 8012874:	2301      	movs	r3, #1
 8012876:	f04f 0900 	mov.w	r9, #0
 801287a:	9304      	str	r3, [sp, #16]
 801287c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801287e:	930a      	str	r3, [sp, #40]	; 0x28
 8012880:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8012884:	464f      	mov	r7, r9
 8012886:	220a      	movs	r2, #10
 8012888:	981d      	ldr	r0, [sp, #116]	; 0x74
 801288a:	7806      	ldrb	r6, [r0, #0]
 801288c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8012890:	b2d9      	uxtb	r1, r3
 8012892:	2909      	cmp	r1, #9
 8012894:	d92a      	bls.n	80128ec <_strtod_l+0x1bc>
 8012896:	9907      	ldr	r1, [sp, #28]
 8012898:	462a      	mov	r2, r5
 801289a:	f7ff ff1a 	bl	80126d2 <strncmp>
 801289e:	b398      	cbz	r0, 8012908 <_strtod_l+0x1d8>
 80128a0:	2000      	movs	r0, #0
 80128a2:	4633      	mov	r3, r6
 80128a4:	463d      	mov	r5, r7
 80128a6:	9007      	str	r0, [sp, #28]
 80128a8:	4602      	mov	r2, r0
 80128aa:	2b65      	cmp	r3, #101	; 0x65
 80128ac:	d001      	beq.n	80128b2 <_strtod_l+0x182>
 80128ae:	2b45      	cmp	r3, #69	; 0x45
 80128b0:	d118      	bne.n	80128e4 <_strtod_l+0x1b4>
 80128b2:	b91d      	cbnz	r5, 80128bc <_strtod_l+0x18c>
 80128b4:	9b04      	ldr	r3, [sp, #16]
 80128b6:	4303      	orrs	r3, r0
 80128b8:	d098      	beq.n	80127ec <_strtod_l+0xbc>
 80128ba:	2500      	movs	r5, #0
 80128bc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80128c0:	f108 0301 	add.w	r3, r8, #1
 80128c4:	931d      	str	r3, [sp, #116]	; 0x74
 80128c6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80128ca:	2b2b      	cmp	r3, #43	; 0x2b
 80128cc:	d075      	beq.n	80129ba <_strtod_l+0x28a>
 80128ce:	2b2d      	cmp	r3, #45	; 0x2d
 80128d0:	d07b      	beq.n	80129ca <_strtod_l+0x29a>
 80128d2:	f04f 0c00 	mov.w	ip, #0
 80128d6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80128da:	2909      	cmp	r1, #9
 80128dc:	f240 8082 	bls.w	80129e4 <_strtod_l+0x2b4>
 80128e0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80128e4:	2600      	movs	r6, #0
 80128e6:	e09d      	b.n	8012a24 <_strtod_l+0x2f4>
 80128e8:	2300      	movs	r3, #0
 80128ea:	e7c4      	b.n	8012876 <_strtod_l+0x146>
 80128ec:	2f08      	cmp	r7, #8
 80128ee:	bfd8      	it	le
 80128f0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80128f2:	f100 0001 	add.w	r0, r0, #1
 80128f6:	bfda      	itte	le
 80128f8:	fb02 3301 	mlale	r3, r2, r1, r3
 80128fc:	9309      	strle	r3, [sp, #36]	; 0x24
 80128fe:	fb02 3909 	mlagt	r9, r2, r9, r3
 8012902:	3701      	adds	r7, #1
 8012904:	901d      	str	r0, [sp, #116]	; 0x74
 8012906:	e7bf      	b.n	8012888 <_strtod_l+0x158>
 8012908:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801290a:	195a      	adds	r2, r3, r5
 801290c:	921d      	str	r2, [sp, #116]	; 0x74
 801290e:	5d5b      	ldrb	r3, [r3, r5]
 8012910:	2f00      	cmp	r7, #0
 8012912:	d037      	beq.n	8012984 <_strtod_l+0x254>
 8012914:	9007      	str	r0, [sp, #28]
 8012916:	463d      	mov	r5, r7
 8012918:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801291c:	2a09      	cmp	r2, #9
 801291e:	d912      	bls.n	8012946 <_strtod_l+0x216>
 8012920:	2201      	movs	r2, #1
 8012922:	e7c2      	b.n	80128aa <_strtod_l+0x17a>
 8012924:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012926:	1c5a      	adds	r2, r3, #1
 8012928:	921d      	str	r2, [sp, #116]	; 0x74
 801292a:	785b      	ldrb	r3, [r3, #1]
 801292c:	3001      	adds	r0, #1
 801292e:	2b30      	cmp	r3, #48	; 0x30
 8012930:	d0f8      	beq.n	8012924 <_strtod_l+0x1f4>
 8012932:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8012936:	2a08      	cmp	r2, #8
 8012938:	f200 84db 	bhi.w	80132f2 <_strtod_l+0xbc2>
 801293c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801293e:	9007      	str	r0, [sp, #28]
 8012940:	2000      	movs	r0, #0
 8012942:	920a      	str	r2, [sp, #40]	; 0x28
 8012944:	4605      	mov	r5, r0
 8012946:	3b30      	subs	r3, #48	; 0x30
 8012948:	f100 0201 	add.w	r2, r0, #1
 801294c:	d014      	beq.n	8012978 <_strtod_l+0x248>
 801294e:	9907      	ldr	r1, [sp, #28]
 8012950:	4411      	add	r1, r2
 8012952:	9107      	str	r1, [sp, #28]
 8012954:	462a      	mov	r2, r5
 8012956:	eb00 0e05 	add.w	lr, r0, r5
 801295a:	210a      	movs	r1, #10
 801295c:	4572      	cmp	r2, lr
 801295e:	d113      	bne.n	8012988 <_strtod_l+0x258>
 8012960:	182a      	adds	r2, r5, r0
 8012962:	2a08      	cmp	r2, #8
 8012964:	f105 0501 	add.w	r5, r5, #1
 8012968:	4405      	add	r5, r0
 801296a:	dc1c      	bgt.n	80129a6 <_strtod_l+0x276>
 801296c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801296e:	220a      	movs	r2, #10
 8012970:	fb02 3301 	mla	r3, r2, r1, r3
 8012974:	9309      	str	r3, [sp, #36]	; 0x24
 8012976:	2200      	movs	r2, #0
 8012978:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801297a:	1c59      	adds	r1, r3, #1
 801297c:	911d      	str	r1, [sp, #116]	; 0x74
 801297e:	785b      	ldrb	r3, [r3, #1]
 8012980:	4610      	mov	r0, r2
 8012982:	e7c9      	b.n	8012918 <_strtod_l+0x1e8>
 8012984:	4638      	mov	r0, r7
 8012986:	e7d2      	b.n	801292e <_strtod_l+0x1fe>
 8012988:	2a08      	cmp	r2, #8
 801298a:	dc04      	bgt.n	8012996 <_strtod_l+0x266>
 801298c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801298e:	434e      	muls	r6, r1
 8012990:	9609      	str	r6, [sp, #36]	; 0x24
 8012992:	3201      	adds	r2, #1
 8012994:	e7e2      	b.n	801295c <_strtod_l+0x22c>
 8012996:	f102 0c01 	add.w	ip, r2, #1
 801299a:	f1bc 0f10 	cmp.w	ip, #16
 801299e:	bfd8      	it	le
 80129a0:	fb01 f909 	mulle.w	r9, r1, r9
 80129a4:	e7f5      	b.n	8012992 <_strtod_l+0x262>
 80129a6:	2d10      	cmp	r5, #16
 80129a8:	bfdc      	itt	le
 80129aa:	220a      	movle	r2, #10
 80129ac:	fb02 3909 	mlale	r9, r2, r9, r3
 80129b0:	e7e1      	b.n	8012976 <_strtod_l+0x246>
 80129b2:	2300      	movs	r3, #0
 80129b4:	9307      	str	r3, [sp, #28]
 80129b6:	2201      	movs	r2, #1
 80129b8:	e77c      	b.n	80128b4 <_strtod_l+0x184>
 80129ba:	f04f 0c00 	mov.w	ip, #0
 80129be:	f108 0302 	add.w	r3, r8, #2
 80129c2:	931d      	str	r3, [sp, #116]	; 0x74
 80129c4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80129c8:	e785      	b.n	80128d6 <_strtod_l+0x1a6>
 80129ca:	f04f 0c01 	mov.w	ip, #1
 80129ce:	e7f6      	b.n	80129be <_strtod_l+0x28e>
 80129d0:	08016e1c 	.word	0x08016e1c
 80129d4:	08016b8c 	.word	0x08016b8c
 80129d8:	7ff00000 	.word	0x7ff00000
 80129dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80129de:	1c59      	adds	r1, r3, #1
 80129e0:	911d      	str	r1, [sp, #116]	; 0x74
 80129e2:	785b      	ldrb	r3, [r3, #1]
 80129e4:	2b30      	cmp	r3, #48	; 0x30
 80129e6:	d0f9      	beq.n	80129dc <_strtod_l+0x2ac>
 80129e8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80129ec:	2908      	cmp	r1, #8
 80129ee:	f63f af79 	bhi.w	80128e4 <_strtod_l+0x1b4>
 80129f2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80129f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80129f8:	9308      	str	r3, [sp, #32]
 80129fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80129fc:	1c59      	adds	r1, r3, #1
 80129fe:	911d      	str	r1, [sp, #116]	; 0x74
 8012a00:	785b      	ldrb	r3, [r3, #1]
 8012a02:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8012a06:	2e09      	cmp	r6, #9
 8012a08:	d937      	bls.n	8012a7a <_strtod_l+0x34a>
 8012a0a:	9e08      	ldr	r6, [sp, #32]
 8012a0c:	1b89      	subs	r1, r1, r6
 8012a0e:	2908      	cmp	r1, #8
 8012a10:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8012a14:	dc02      	bgt.n	8012a1c <_strtod_l+0x2ec>
 8012a16:	4576      	cmp	r6, lr
 8012a18:	bfa8      	it	ge
 8012a1a:	4676      	movge	r6, lr
 8012a1c:	f1bc 0f00 	cmp.w	ip, #0
 8012a20:	d000      	beq.n	8012a24 <_strtod_l+0x2f4>
 8012a22:	4276      	negs	r6, r6
 8012a24:	2d00      	cmp	r5, #0
 8012a26:	d14f      	bne.n	8012ac8 <_strtod_l+0x398>
 8012a28:	9904      	ldr	r1, [sp, #16]
 8012a2a:	4301      	orrs	r1, r0
 8012a2c:	f47f aec2 	bne.w	80127b4 <_strtod_l+0x84>
 8012a30:	2a00      	cmp	r2, #0
 8012a32:	f47f aedb 	bne.w	80127ec <_strtod_l+0xbc>
 8012a36:	2b69      	cmp	r3, #105	; 0x69
 8012a38:	d027      	beq.n	8012a8a <_strtod_l+0x35a>
 8012a3a:	dc24      	bgt.n	8012a86 <_strtod_l+0x356>
 8012a3c:	2b49      	cmp	r3, #73	; 0x49
 8012a3e:	d024      	beq.n	8012a8a <_strtod_l+0x35a>
 8012a40:	2b4e      	cmp	r3, #78	; 0x4e
 8012a42:	f47f aed3 	bne.w	80127ec <_strtod_l+0xbc>
 8012a46:	499e      	ldr	r1, [pc, #632]	; (8012cc0 <_strtod_l+0x590>)
 8012a48:	a81d      	add	r0, sp, #116	; 0x74
 8012a4a:	f001 ffd1 	bl	80149f0 <__match>
 8012a4e:	2800      	cmp	r0, #0
 8012a50:	f43f aecc 	beq.w	80127ec <_strtod_l+0xbc>
 8012a54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012a56:	781b      	ldrb	r3, [r3, #0]
 8012a58:	2b28      	cmp	r3, #40	; 0x28
 8012a5a:	d12d      	bne.n	8012ab8 <_strtod_l+0x388>
 8012a5c:	4999      	ldr	r1, [pc, #612]	; (8012cc4 <_strtod_l+0x594>)
 8012a5e:	aa20      	add	r2, sp, #128	; 0x80
 8012a60:	a81d      	add	r0, sp, #116	; 0x74
 8012a62:	f001 ffd9 	bl	8014a18 <__hexnan>
 8012a66:	2805      	cmp	r0, #5
 8012a68:	d126      	bne.n	8012ab8 <_strtod_l+0x388>
 8012a6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012a6c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8012a70:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8012a74:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8012a78:	e69c      	b.n	80127b4 <_strtod_l+0x84>
 8012a7a:	210a      	movs	r1, #10
 8012a7c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8012a80:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8012a84:	e7b9      	b.n	80129fa <_strtod_l+0x2ca>
 8012a86:	2b6e      	cmp	r3, #110	; 0x6e
 8012a88:	e7db      	b.n	8012a42 <_strtod_l+0x312>
 8012a8a:	498f      	ldr	r1, [pc, #572]	; (8012cc8 <_strtod_l+0x598>)
 8012a8c:	a81d      	add	r0, sp, #116	; 0x74
 8012a8e:	f001 ffaf 	bl	80149f0 <__match>
 8012a92:	2800      	cmp	r0, #0
 8012a94:	f43f aeaa 	beq.w	80127ec <_strtod_l+0xbc>
 8012a98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012a9a:	498c      	ldr	r1, [pc, #560]	; (8012ccc <_strtod_l+0x59c>)
 8012a9c:	3b01      	subs	r3, #1
 8012a9e:	a81d      	add	r0, sp, #116	; 0x74
 8012aa0:	931d      	str	r3, [sp, #116]	; 0x74
 8012aa2:	f001 ffa5 	bl	80149f0 <__match>
 8012aa6:	b910      	cbnz	r0, 8012aae <_strtod_l+0x37e>
 8012aa8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012aaa:	3301      	adds	r3, #1
 8012aac:	931d      	str	r3, [sp, #116]	; 0x74
 8012aae:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8012cdc <_strtod_l+0x5ac>
 8012ab2:	f04f 0a00 	mov.w	sl, #0
 8012ab6:	e67d      	b.n	80127b4 <_strtod_l+0x84>
 8012ab8:	4885      	ldr	r0, [pc, #532]	; (8012cd0 <_strtod_l+0x5a0>)
 8012aba:	f003 fb55 	bl	8016168 <nan>
 8012abe:	ed8d 0b04 	vstr	d0, [sp, #16]
 8012ac2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8012ac6:	e675      	b.n	80127b4 <_strtod_l+0x84>
 8012ac8:	9b07      	ldr	r3, [sp, #28]
 8012aca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012acc:	1af3      	subs	r3, r6, r3
 8012ace:	2f00      	cmp	r7, #0
 8012ad0:	bf08      	it	eq
 8012ad2:	462f      	moveq	r7, r5
 8012ad4:	2d10      	cmp	r5, #16
 8012ad6:	9308      	str	r3, [sp, #32]
 8012ad8:	46a8      	mov	r8, r5
 8012ada:	bfa8      	it	ge
 8012adc:	f04f 0810 	movge.w	r8, #16
 8012ae0:	f7ed fd20 	bl	8000524 <__aeabi_ui2d>
 8012ae4:	2d09      	cmp	r5, #9
 8012ae6:	4682      	mov	sl, r0
 8012ae8:	468b      	mov	fp, r1
 8012aea:	dd13      	ble.n	8012b14 <_strtod_l+0x3e4>
 8012aec:	4b79      	ldr	r3, [pc, #484]	; (8012cd4 <_strtod_l+0x5a4>)
 8012aee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012af2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8012af6:	f7ed fd8f 	bl	8000618 <__aeabi_dmul>
 8012afa:	4682      	mov	sl, r0
 8012afc:	4648      	mov	r0, r9
 8012afe:	468b      	mov	fp, r1
 8012b00:	f7ed fd10 	bl	8000524 <__aeabi_ui2d>
 8012b04:	4602      	mov	r2, r0
 8012b06:	460b      	mov	r3, r1
 8012b08:	4650      	mov	r0, sl
 8012b0a:	4659      	mov	r1, fp
 8012b0c:	f7ed fbce 	bl	80002ac <__adddf3>
 8012b10:	4682      	mov	sl, r0
 8012b12:	468b      	mov	fp, r1
 8012b14:	2d0f      	cmp	r5, #15
 8012b16:	dc38      	bgt.n	8012b8a <_strtod_l+0x45a>
 8012b18:	9b08      	ldr	r3, [sp, #32]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	f43f ae4a 	beq.w	80127b4 <_strtod_l+0x84>
 8012b20:	dd24      	ble.n	8012b6c <_strtod_l+0x43c>
 8012b22:	2b16      	cmp	r3, #22
 8012b24:	dc0b      	bgt.n	8012b3e <_strtod_l+0x40e>
 8012b26:	4d6b      	ldr	r5, [pc, #428]	; (8012cd4 <_strtod_l+0x5a4>)
 8012b28:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8012b2c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012b30:	4652      	mov	r2, sl
 8012b32:	465b      	mov	r3, fp
 8012b34:	f7ed fd70 	bl	8000618 <__aeabi_dmul>
 8012b38:	4682      	mov	sl, r0
 8012b3a:	468b      	mov	fp, r1
 8012b3c:	e63a      	b.n	80127b4 <_strtod_l+0x84>
 8012b3e:	9a08      	ldr	r2, [sp, #32]
 8012b40:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8012b44:	4293      	cmp	r3, r2
 8012b46:	db20      	blt.n	8012b8a <_strtod_l+0x45a>
 8012b48:	4c62      	ldr	r4, [pc, #392]	; (8012cd4 <_strtod_l+0x5a4>)
 8012b4a:	f1c5 050f 	rsb	r5, r5, #15
 8012b4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8012b52:	4652      	mov	r2, sl
 8012b54:	465b      	mov	r3, fp
 8012b56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b5a:	f7ed fd5d 	bl	8000618 <__aeabi_dmul>
 8012b5e:	9b08      	ldr	r3, [sp, #32]
 8012b60:	1b5d      	subs	r5, r3, r5
 8012b62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8012b66:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012b6a:	e7e3      	b.n	8012b34 <_strtod_l+0x404>
 8012b6c:	9b08      	ldr	r3, [sp, #32]
 8012b6e:	3316      	adds	r3, #22
 8012b70:	db0b      	blt.n	8012b8a <_strtod_l+0x45a>
 8012b72:	9b07      	ldr	r3, [sp, #28]
 8012b74:	4a57      	ldr	r2, [pc, #348]	; (8012cd4 <_strtod_l+0x5a4>)
 8012b76:	1b9e      	subs	r6, r3, r6
 8012b78:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8012b7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012b80:	4650      	mov	r0, sl
 8012b82:	4659      	mov	r1, fp
 8012b84:	f7ed fe72 	bl	800086c <__aeabi_ddiv>
 8012b88:	e7d6      	b.n	8012b38 <_strtod_l+0x408>
 8012b8a:	9b08      	ldr	r3, [sp, #32]
 8012b8c:	eba5 0808 	sub.w	r8, r5, r8
 8012b90:	4498      	add	r8, r3
 8012b92:	f1b8 0f00 	cmp.w	r8, #0
 8012b96:	dd71      	ble.n	8012c7c <_strtod_l+0x54c>
 8012b98:	f018 030f 	ands.w	r3, r8, #15
 8012b9c:	d00a      	beq.n	8012bb4 <_strtod_l+0x484>
 8012b9e:	494d      	ldr	r1, [pc, #308]	; (8012cd4 <_strtod_l+0x5a4>)
 8012ba0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012ba4:	4652      	mov	r2, sl
 8012ba6:	465b      	mov	r3, fp
 8012ba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012bac:	f7ed fd34 	bl	8000618 <__aeabi_dmul>
 8012bb0:	4682      	mov	sl, r0
 8012bb2:	468b      	mov	fp, r1
 8012bb4:	f038 080f 	bics.w	r8, r8, #15
 8012bb8:	d04d      	beq.n	8012c56 <_strtod_l+0x526>
 8012bba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8012bbe:	dd22      	ble.n	8012c06 <_strtod_l+0x4d6>
 8012bc0:	2500      	movs	r5, #0
 8012bc2:	462e      	mov	r6, r5
 8012bc4:	9509      	str	r5, [sp, #36]	; 0x24
 8012bc6:	9507      	str	r5, [sp, #28]
 8012bc8:	2322      	movs	r3, #34	; 0x22
 8012bca:	f8df b110 	ldr.w	fp, [pc, #272]	; 8012cdc <_strtod_l+0x5ac>
 8012bce:	6023      	str	r3, [r4, #0]
 8012bd0:	f04f 0a00 	mov.w	sl, #0
 8012bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	f43f adec 	beq.w	80127b4 <_strtod_l+0x84>
 8012bdc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012bde:	4620      	mov	r0, r4
 8012be0:	f002 f82a 	bl	8014c38 <_Bfree>
 8012be4:	9907      	ldr	r1, [sp, #28]
 8012be6:	4620      	mov	r0, r4
 8012be8:	f002 f826 	bl	8014c38 <_Bfree>
 8012bec:	4631      	mov	r1, r6
 8012bee:	4620      	mov	r0, r4
 8012bf0:	f002 f822 	bl	8014c38 <_Bfree>
 8012bf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012bf6:	4620      	mov	r0, r4
 8012bf8:	f002 f81e 	bl	8014c38 <_Bfree>
 8012bfc:	4629      	mov	r1, r5
 8012bfe:	4620      	mov	r0, r4
 8012c00:	f002 f81a 	bl	8014c38 <_Bfree>
 8012c04:	e5d6      	b.n	80127b4 <_strtod_l+0x84>
 8012c06:	2300      	movs	r3, #0
 8012c08:	ea4f 1828 	mov.w	r8, r8, asr #4
 8012c0c:	4650      	mov	r0, sl
 8012c0e:	4659      	mov	r1, fp
 8012c10:	4699      	mov	r9, r3
 8012c12:	f1b8 0f01 	cmp.w	r8, #1
 8012c16:	dc21      	bgt.n	8012c5c <_strtod_l+0x52c>
 8012c18:	b10b      	cbz	r3, 8012c1e <_strtod_l+0x4ee>
 8012c1a:	4682      	mov	sl, r0
 8012c1c:	468b      	mov	fp, r1
 8012c1e:	4b2e      	ldr	r3, [pc, #184]	; (8012cd8 <_strtod_l+0x5a8>)
 8012c20:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8012c24:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8012c28:	4652      	mov	r2, sl
 8012c2a:	465b      	mov	r3, fp
 8012c2c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8012c30:	f7ed fcf2 	bl	8000618 <__aeabi_dmul>
 8012c34:	4b29      	ldr	r3, [pc, #164]	; (8012cdc <_strtod_l+0x5ac>)
 8012c36:	460a      	mov	r2, r1
 8012c38:	400b      	ands	r3, r1
 8012c3a:	4929      	ldr	r1, [pc, #164]	; (8012ce0 <_strtod_l+0x5b0>)
 8012c3c:	428b      	cmp	r3, r1
 8012c3e:	4682      	mov	sl, r0
 8012c40:	d8be      	bhi.n	8012bc0 <_strtod_l+0x490>
 8012c42:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8012c46:	428b      	cmp	r3, r1
 8012c48:	bf86      	itte	hi
 8012c4a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8012ce4 <_strtod_l+0x5b4>
 8012c4e:	f04f 3aff 	movhi.w	sl, #4294967295
 8012c52:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8012c56:	2300      	movs	r3, #0
 8012c58:	9304      	str	r3, [sp, #16]
 8012c5a:	e081      	b.n	8012d60 <_strtod_l+0x630>
 8012c5c:	f018 0f01 	tst.w	r8, #1
 8012c60:	d007      	beq.n	8012c72 <_strtod_l+0x542>
 8012c62:	4b1d      	ldr	r3, [pc, #116]	; (8012cd8 <_strtod_l+0x5a8>)
 8012c64:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8012c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c6c:	f7ed fcd4 	bl	8000618 <__aeabi_dmul>
 8012c70:	2301      	movs	r3, #1
 8012c72:	f109 0901 	add.w	r9, r9, #1
 8012c76:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012c7a:	e7ca      	b.n	8012c12 <_strtod_l+0x4e2>
 8012c7c:	d0eb      	beq.n	8012c56 <_strtod_l+0x526>
 8012c7e:	f1c8 0800 	rsb	r8, r8, #0
 8012c82:	f018 020f 	ands.w	r2, r8, #15
 8012c86:	d00a      	beq.n	8012c9e <_strtod_l+0x56e>
 8012c88:	4b12      	ldr	r3, [pc, #72]	; (8012cd4 <_strtod_l+0x5a4>)
 8012c8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012c8e:	4650      	mov	r0, sl
 8012c90:	4659      	mov	r1, fp
 8012c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c96:	f7ed fde9 	bl	800086c <__aeabi_ddiv>
 8012c9a:	4682      	mov	sl, r0
 8012c9c:	468b      	mov	fp, r1
 8012c9e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8012ca2:	d0d8      	beq.n	8012c56 <_strtod_l+0x526>
 8012ca4:	f1b8 0f1f 	cmp.w	r8, #31
 8012ca8:	dd1e      	ble.n	8012ce8 <_strtod_l+0x5b8>
 8012caa:	2500      	movs	r5, #0
 8012cac:	462e      	mov	r6, r5
 8012cae:	9509      	str	r5, [sp, #36]	; 0x24
 8012cb0:	9507      	str	r5, [sp, #28]
 8012cb2:	2322      	movs	r3, #34	; 0x22
 8012cb4:	f04f 0a00 	mov.w	sl, #0
 8012cb8:	f04f 0b00 	mov.w	fp, #0
 8012cbc:	6023      	str	r3, [r4, #0]
 8012cbe:	e789      	b.n	8012bd4 <_strtod_l+0x4a4>
 8012cc0:	08016b61 	.word	0x08016b61
 8012cc4:	08016ba0 	.word	0x08016ba0
 8012cc8:	08016b59 	.word	0x08016b59
 8012ccc:	08016d20 	.word	0x08016d20
 8012cd0:	08016c1b 	.word	0x08016c1b
 8012cd4:	08016eb8 	.word	0x08016eb8
 8012cd8:	08016e90 	.word	0x08016e90
 8012cdc:	7ff00000 	.word	0x7ff00000
 8012ce0:	7ca00000 	.word	0x7ca00000
 8012ce4:	7fefffff 	.word	0x7fefffff
 8012ce8:	f018 0310 	ands.w	r3, r8, #16
 8012cec:	bf18      	it	ne
 8012cee:	236a      	movne	r3, #106	; 0x6a
 8012cf0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80130a8 <_strtod_l+0x978>
 8012cf4:	9304      	str	r3, [sp, #16]
 8012cf6:	4650      	mov	r0, sl
 8012cf8:	4659      	mov	r1, fp
 8012cfa:	2300      	movs	r3, #0
 8012cfc:	f018 0f01 	tst.w	r8, #1
 8012d00:	d004      	beq.n	8012d0c <_strtod_l+0x5dc>
 8012d02:	e9d9 2300 	ldrd	r2, r3, [r9]
 8012d06:	f7ed fc87 	bl	8000618 <__aeabi_dmul>
 8012d0a:	2301      	movs	r3, #1
 8012d0c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8012d10:	f109 0908 	add.w	r9, r9, #8
 8012d14:	d1f2      	bne.n	8012cfc <_strtod_l+0x5cc>
 8012d16:	b10b      	cbz	r3, 8012d1c <_strtod_l+0x5ec>
 8012d18:	4682      	mov	sl, r0
 8012d1a:	468b      	mov	fp, r1
 8012d1c:	9b04      	ldr	r3, [sp, #16]
 8012d1e:	b1bb      	cbz	r3, 8012d50 <_strtod_l+0x620>
 8012d20:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8012d24:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	4659      	mov	r1, fp
 8012d2c:	dd10      	ble.n	8012d50 <_strtod_l+0x620>
 8012d2e:	2b1f      	cmp	r3, #31
 8012d30:	f340 8128 	ble.w	8012f84 <_strtod_l+0x854>
 8012d34:	2b34      	cmp	r3, #52	; 0x34
 8012d36:	bfde      	ittt	le
 8012d38:	3b20      	suble	r3, #32
 8012d3a:	f04f 32ff 	movle.w	r2, #4294967295
 8012d3e:	fa02 f303 	lslle.w	r3, r2, r3
 8012d42:	f04f 0a00 	mov.w	sl, #0
 8012d46:	bfcc      	ite	gt
 8012d48:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8012d4c:	ea03 0b01 	andle.w	fp, r3, r1
 8012d50:	2200      	movs	r2, #0
 8012d52:	2300      	movs	r3, #0
 8012d54:	4650      	mov	r0, sl
 8012d56:	4659      	mov	r1, fp
 8012d58:	f7ed fec6 	bl	8000ae8 <__aeabi_dcmpeq>
 8012d5c:	2800      	cmp	r0, #0
 8012d5e:	d1a4      	bne.n	8012caa <_strtod_l+0x57a>
 8012d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d62:	9300      	str	r3, [sp, #0]
 8012d64:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012d66:	462b      	mov	r3, r5
 8012d68:	463a      	mov	r2, r7
 8012d6a:	4620      	mov	r0, r4
 8012d6c:	f001 ffd0 	bl	8014d10 <__s2b>
 8012d70:	9009      	str	r0, [sp, #36]	; 0x24
 8012d72:	2800      	cmp	r0, #0
 8012d74:	f43f af24 	beq.w	8012bc0 <_strtod_l+0x490>
 8012d78:	9b07      	ldr	r3, [sp, #28]
 8012d7a:	1b9e      	subs	r6, r3, r6
 8012d7c:	9b08      	ldr	r3, [sp, #32]
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	bfb4      	ite	lt
 8012d82:	4633      	movlt	r3, r6
 8012d84:	2300      	movge	r3, #0
 8012d86:	9310      	str	r3, [sp, #64]	; 0x40
 8012d88:	9b08      	ldr	r3, [sp, #32]
 8012d8a:	2500      	movs	r5, #0
 8012d8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012d90:	9318      	str	r3, [sp, #96]	; 0x60
 8012d92:	462e      	mov	r6, r5
 8012d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d96:	4620      	mov	r0, r4
 8012d98:	6859      	ldr	r1, [r3, #4]
 8012d9a:	f001 ff0d 	bl	8014bb8 <_Balloc>
 8012d9e:	9007      	str	r0, [sp, #28]
 8012da0:	2800      	cmp	r0, #0
 8012da2:	f43f af11 	beq.w	8012bc8 <_strtod_l+0x498>
 8012da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012da8:	691a      	ldr	r2, [r3, #16]
 8012daa:	3202      	adds	r2, #2
 8012dac:	f103 010c 	add.w	r1, r3, #12
 8012db0:	0092      	lsls	r2, r2, #2
 8012db2:	300c      	adds	r0, #12
 8012db4:	f7fe fbe4 	bl	8011580 <memcpy>
 8012db8:	ec4b ab10 	vmov	d0, sl, fp
 8012dbc:	aa20      	add	r2, sp, #128	; 0x80
 8012dbe:	a91f      	add	r1, sp, #124	; 0x7c
 8012dc0:	4620      	mov	r0, r4
 8012dc2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8012dc6:	f002 fadf 	bl	8015388 <__d2b>
 8012dca:	901e      	str	r0, [sp, #120]	; 0x78
 8012dcc:	2800      	cmp	r0, #0
 8012dce:	f43f aefb 	beq.w	8012bc8 <_strtod_l+0x498>
 8012dd2:	2101      	movs	r1, #1
 8012dd4:	4620      	mov	r0, r4
 8012dd6:	f002 f835 	bl	8014e44 <__i2b>
 8012dda:	4606      	mov	r6, r0
 8012ddc:	2800      	cmp	r0, #0
 8012dde:	f43f aef3 	beq.w	8012bc8 <_strtod_l+0x498>
 8012de2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012de4:	9904      	ldr	r1, [sp, #16]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	bfab      	itete	ge
 8012dea:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8012dec:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8012dee:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8012df0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8012df4:	bfac      	ite	ge
 8012df6:	eb03 0902 	addge.w	r9, r3, r2
 8012dfa:	1ad7      	sublt	r7, r2, r3
 8012dfc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012dfe:	eba3 0801 	sub.w	r8, r3, r1
 8012e02:	4490      	add	r8, r2
 8012e04:	4ba3      	ldr	r3, [pc, #652]	; (8013094 <_strtod_l+0x964>)
 8012e06:	f108 38ff 	add.w	r8, r8, #4294967295
 8012e0a:	4598      	cmp	r8, r3
 8012e0c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012e10:	f280 80cc 	bge.w	8012fac <_strtod_l+0x87c>
 8012e14:	eba3 0308 	sub.w	r3, r3, r8
 8012e18:	2b1f      	cmp	r3, #31
 8012e1a:	eba2 0203 	sub.w	r2, r2, r3
 8012e1e:	f04f 0101 	mov.w	r1, #1
 8012e22:	f300 80b6 	bgt.w	8012f92 <_strtod_l+0x862>
 8012e26:	fa01 f303 	lsl.w	r3, r1, r3
 8012e2a:	9311      	str	r3, [sp, #68]	; 0x44
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	930c      	str	r3, [sp, #48]	; 0x30
 8012e30:	eb09 0802 	add.w	r8, r9, r2
 8012e34:	9b04      	ldr	r3, [sp, #16]
 8012e36:	45c1      	cmp	r9, r8
 8012e38:	4417      	add	r7, r2
 8012e3a:	441f      	add	r7, r3
 8012e3c:	464b      	mov	r3, r9
 8012e3e:	bfa8      	it	ge
 8012e40:	4643      	movge	r3, r8
 8012e42:	42bb      	cmp	r3, r7
 8012e44:	bfa8      	it	ge
 8012e46:	463b      	movge	r3, r7
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	bfc2      	ittt	gt
 8012e4c:	eba8 0803 	subgt.w	r8, r8, r3
 8012e50:	1aff      	subgt	r7, r7, r3
 8012e52:	eba9 0903 	subgt.w	r9, r9, r3
 8012e56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	dd17      	ble.n	8012e8c <_strtod_l+0x75c>
 8012e5c:	4631      	mov	r1, r6
 8012e5e:	461a      	mov	r2, r3
 8012e60:	4620      	mov	r0, r4
 8012e62:	f002 f8ab 	bl	8014fbc <__pow5mult>
 8012e66:	4606      	mov	r6, r0
 8012e68:	2800      	cmp	r0, #0
 8012e6a:	f43f aead 	beq.w	8012bc8 <_strtod_l+0x498>
 8012e6e:	4601      	mov	r1, r0
 8012e70:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012e72:	4620      	mov	r0, r4
 8012e74:	f001 fffc 	bl	8014e70 <__multiply>
 8012e78:	900f      	str	r0, [sp, #60]	; 0x3c
 8012e7a:	2800      	cmp	r0, #0
 8012e7c:	f43f aea4 	beq.w	8012bc8 <_strtod_l+0x498>
 8012e80:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012e82:	4620      	mov	r0, r4
 8012e84:	f001 fed8 	bl	8014c38 <_Bfree>
 8012e88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012e8a:	931e      	str	r3, [sp, #120]	; 0x78
 8012e8c:	f1b8 0f00 	cmp.w	r8, #0
 8012e90:	f300 8091 	bgt.w	8012fb6 <_strtod_l+0x886>
 8012e94:	9b08      	ldr	r3, [sp, #32]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	dd08      	ble.n	8012eac <_strtod_l+0x77c>
 8012e9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012e9c:	9907      	ldr	r1, [sp, #28]
 8012e9e:	4620      	mov	r0, r4
 8012ea0:	f002 f88c 	bl	8014fbc <__pow5mult>
 8012ea4:	9007      	str	r0, [sp, #28]
 8012ea6:	2800      	cmp	r0, #0
 8012ea8:	f43f ae8e 	beq.w	8012bc8 <_strtod_l+0x498>
 8012eac:	2f00      	cmp	r7, #0
 8012eae:	dd08      	ble.n	8012ec2 <_strtod_l+0x792>
 8012eb0:	9907      	ldr	r1, [sp, #28]
 8012eb2:	463a      	mov	r2, r7
 8012eb4:	4620      	mov	r0, r4
 8012eb6:	f002 f8db 	bl	8015070 <__lshift>
 8012eba:	9007      	str	r0, [sp, #28]
 8012ebc:	2800      	cmp	r0, #0
 8012ebe:	f43f ae83 	beq.w	8012bc8 <_strtod_l+0x498>
 8012ec2:	f1b9 0f00 	cmp.w	r9, #0
 8012ec6:	dd08      	ble.n	8012eda <_strtod_l+0x7aa>
 8012ec8:	4631      	mov	r1, r6
 8012eca:	464a      	mov	r2, r9
 8012ecc:	4620      	mov	r0, r4
 8012ece:	f002 f8cf 	bl	8015070 <__lshift>
 8012ed2:	4606      	mov	r6, r0
 8012ed4:	2800      	cmp	r0, #0
 8012ed6:	f43f ae77 	beq.w	8012bc8 <_strtod_l+0x498>
 8012eda:	9a07      	ldr	r2, [sp, #28]
 8012edc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012ede:	4620      	mov	r0, r4
 8012ee0:	f002 f94e 	bl	8015180 <__mdiff>
 8012ee4:	4605      	mov	r5, r0
 8012ee6:	2800      	cmp	r0, #0
 8012ee8:	f43f ae6e 	beq.w	8012bc8 <_strtod_l+0x498>
 8012eec:	68c3      	ldr	r3, [r0, #12]
 8012eee:	930f      	str	r3, [sp, #60]	; 0x3c
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	60c3      	str	r3, [r0, #12]
 8012ef4:	4631      	mov	r1, r6
 8012ef6:	f002 f927 	bl	8015148 <__mcmp>
 8012efa:	2800      	cmp	r0, #0
 8012efc:	da65      	bge.n	8012fca <_strtod_l+0x89a>
 8012efe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012f00:	ea53 030a 	orrs.w	r3, r3, sl
 8012f04:	f040 8087 	bne.w	8013016 <_strtod_l+0x8e6>
 8012f08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	f040 8082 	bne.w	8013016 <_strtod_l+0x8e6>
 8012f12:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012f16:	0d1b      	lsrs	r3, r3, #20
 8012f18:	051b      	lsls	r3, r3, #20
 8012f1a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012f1e:	d97a      	bls.n	8013016 <_strtod_l+0x8e6>
 8012f20:	696b      	ldr	r3, [r5, #20]
 8012f22:	b913      	cbnz	r3, 8012f2a <_strtod_l+0x7fa>
 8012f24:	692b      	ldr	r3, [r5, #16]
 8012f26:	2b01      	cmp	r3, #1
 8012f28:	dd75      	ble.n	8013016 <_strtod_l+0x8e6>
 8012f2a:	4629      	mov	r1, r5
 8012f2c:	2201      	movs	r2, #1
 8012f2e:	4620      	mov	r0, r4
 8012f30:	f002 f89e 	bl	8015070 <__lshift>
 8012f34:	4631      	mov	r1, r6
 8012f36:	4605      	mov	r5, r0
 8012f38:	f002 f906 	bl	8015148 <__mcmp>
 8012f3c:	2800      	cmp	r0, #0
 8012f3e:	dd6a      	ble.n	8013016 <_strtod_l+0x8e6>
 8012f40:	9904      	ldr	r1, [sp, #16]
 8012f42:	4a55      	ldr	r2, [pc, #340]	; (8013098 <_strtod_l+0x968>)
 8012f44:	465b      	mov	r3, fp
 8012f46:	2900      	cmp	r1, #0
 8012f48:	f000 8085 	beq.w	8013056 <_strtod_l+0x926>
 8012f4c:	ea02 010b 	and.w	r1, r2, fp
 8012f50:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8012f54:	dc7f      	bgt.n	8013056 <_strtod_l+0x926>
 8012f56:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012f5a:	f77f aeaa 	ble.w	8012cb2 <_strtod_l+0x582>
 8012f5e:	4a4f      	ldr	r2, [pc, #316]	; (801309c <_strtod_l+0x96c>)
 8012f60:	2300      	movs	r3, #0
 8012f62:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8012f66:	4650      	mov	r0, sl
 8012f68:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8012f6c:	4659      	mov	r1, fp
 8012f6e:	f7ed fb53 	bl	8000618 <__aeabi_dmul>
 8012f72:	460b      	mov	r3, r1
 8012f74:	4303      	orrs	r3, r0
 8012f76:	bf08      	it	eq
 8012f78:	2322      	moveq	r3, #34	; 0x22
 8012f7a:	4682      	mov	sl, r0
 8012f7c:	468b      	mov	fp, r1
 8012f7e:	bf08      	it	eq
 8012f80:	6023      	streq	r3, [r4, #0]
 8012f82:	e62b      	b.n	8012bdc <_strtod_l+0x4ac>
 8012f84:	f04f 32ff 	mov.w	r2, #4294967295
 8012f88:	fa02 f303 	lsl.w	r3, r2, r3
 8012f8c:	ea03 0a0a 	and.w	sl, r3, sl
 8012f90:	e6de      	b.n	8012d50 <_strtod_l+0x620>
 8012f92:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8012f96:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8012f9a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8012f9e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8012fa2:	fa01 f308 	lsl.w	r3, r1, r8
 8012fa6:	930c      	str	r3, [sp, #48]	; 0x30
 8012fa8:	9111      	str	r1, [sp, #68]	; 0x44
 8012faa:	e741      	b.n	8012e30 <_strtod_l+0x700>
 8012fac:	2300      	movs	r3, #0
 8012fae:	930c      	str	r3, [sp, #48]	; 0x30
 8012fb0:	2301      	movs	r3, #1
 8012fb2:	9311      	str	r3, [sp, #68]	; 0x44
 8012fb4:	e73c      	b.n	8012e30 <_strtod_l+0x700>
 8012fb6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012fb8:	4642      	mov	r2, r8
 8012fba:	4620      	mov	r0, r4
 8012fbc:	f002 f858 	bl	8015070 <__lshift>
 8012fc0:	901e      	str	r0, [sp, #120]	; 0x78
 8012fc2:	2800      	cmp	r0, #0
 8012fc4:	f47f af66 	bne.w	8012e94 <_strtod_l+0x764>
 8012fc8:	e5fe      	b.n	8012bc8 <_strtod_l+0x498>
 8012fca:	465f      	mov	r7, fp
 8012fcc:	d16e      	bne.n	80130ac <_strtod_l+0x97c>
 8012fce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012fd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012fd4:	b342      	cbz	r2, 8013028 <_strtod_l+0x8f8>
 8012fd6:	4a32      	ldr	r2, [pc, #200]	; (80130a0 <_strtod_l+0x970>)
 8012fd8:	4293      	cmp	r3, r2
 8012fda:	d128      	bne.n	801302e <_strtod_l+0x8fe>
 8012fdc:	9b04      	ldr	r3, [sp, #16]
 8012fde:	4650      	mov	r0, sl
 8012fe0:	b1eb      	cbz	r3, 801301e <_strtod_l+0x8ee>
 8012fe2:	4a2d      	ldr	r2, [pc, #180]	; (8013098 <_strtod_l+0x968>)
 8012fe4:	403a      	ands	r2, r7
 8012fe6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8012fea:	f04f 31ff 	mov.w	r1, #4294967295
 8012fee:	d819      	bhi.n	8013024 <_strtod_l+0x8f4>
 8012ff0:	0d12      	lsrs	r2, r2, #20
 8012ff2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8012ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8012ffa:	4298      	cmp	r0, r3
 8012ffc:	d117      	bne.n	801302e <_strtod_l+0x8fe>
 8012ffe:	4b29      	ldr	r3, [pc, #164]	; (80130a4 <_strtod_l+0x974>)
 8013000:	429f      	cmp	r7, r3
 8013002:	d102      	bne.n	801300a <_strtod_l+0x8da>
 8013004:	3001      	adds	r0, #1
 8013006:	f43f addf 	beq.w	8012bc8 <_strtod_l+0x498>
 801300a:	4b23      	ldr	r3, [pc, #140]	; (8013098 <_strtod_l+0x968>)
 801300c:	403b      	ands	r3, r7
 801300e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8013012:	f04f 0a00 	mov.w	sl, #0
 8013016:	9b04      	ldr	r3, [sp, #16]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d1a0      	bne.n	8012f5e <_strtod_l+0x82e>
 801301c:	e5de      	b.n	8012bdc <_strtod_l+0x4ac>
 801301e:	f04f 33ff 	mov.w	r3, #4294967295
 8013022:	e7ea      	b.n	8012ffa <_strtod_l+0x8ca>
 8013024:	460b      	mov	r3, r1
 8013026:	e7e8      	b.n	8012ffa <_strtod_l+0x8ca>
 8013028:	ea53 030a 	orrs.w	r3, r3, sl
 801302c:	d088      	beq.n	8012f40 <_strtod_l+0x810>
 801302e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013030:	b1db      	cbz	r3, 801306a <_strtod_l+0x93a>
 8013032:	423b      	tst	r3, r7
 8013034:	d0ef      	beq.n	8013016 <_strtod_l+0x8e6>
 8013036:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013038:	9a04      	ldr	r2, [sp, #16]
 801303a:	4650      	mov	r0, sl
 801303c:	4659      	mov	r1, fp
 801303e:	b1c3      	cbz	r3, 8013072 <_strtod_l+0x942>
 8013040:	f7ff fb59 	bl	80126f6 <sulp>
 8013044:	4602      	mov	r2, r0
 8013046:	460b      	mov	r3, r1
 8013048:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801304c:	f7ed f92e 	bl	80002ac <__adddf3>
 8013050:	4682      	mov	sl, r0
 8013052:	468b      	mov	fp, r1
 8013054:	e7df      	b.n	8013016 <_strtod_l+0x8e6>
 8013056:	4013      	ands	r3, r2
 8013058:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801305c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013060:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013064:	f04f 3aff 	mov.w	sl, #4294967295
 8013068:	e7d5      	b.n	8013016 <_strtod_l+0x8e6>
 801306a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801306c:	ea13 0f0a 	tst.w	r3, sl
 8013070:	e7e0      	b.n	8013034 <_strtod_l+0x904>
 8013072:	f7ff fb40 	bl	80126f6 <sulp>
 8013076:	4602      	mov	r2, r0
 8013078:	460b      	mov	r3, r1
 801307a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801307e:	f7ed f913 	bl	80002a8 <__aeabi_dsub>
 8013082:	2200      	movs	r2, #0
 8013084:	2300      	movs	r3, #0
 8013086:	4682      	mov	sl, r0
 8013088:	468b      	mov	fp, r1
 801308a:	f7ed fd2d 	bl	8000ae8 <__aeabi_dcmpeq>
 801308e:	2800      	cmp	r0, #0
 8013090:	d0c1      	beq.n	8013016 <_strtod_l+0x8e6>
 8013092:	e60e      	b.n	8012cb2 <_strtod_l+0x582>
 8013094:	fffffc02 	.word	0xfffffc02
 8013098:	7ff00000 	.word	0x7ff00000
 801309c:	39500000 	.word	0x39500000
 80130a0:	000fffff 	.word	0x000fffff
 80130a4:	7fefffff 	.word	0x7fefffff
 80130a8:	08016bb8 	.word	0x08016bb8
 80130ac:	4631      	mov	r1, r6
 80130ae:	4628      	mov	r0, r5
 80130b0:	f002 f9c6 	bl	8015440 <__ratio>
 80130b4:	ec59 8b10 	vmov	r8, r9, d0
 80130b8:	ee10 0a10 	vmov	r0, s0
 80130bc:	2200      	movs	r2, #0
 80130be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80130c2:	4649      	mov	r1, r9
 80130c4:	f7ed fd24 	bl	8000b10 <__aeabi_dcmple>
 80130c8:	2800      	cmp	r0, #0
 80130ca:	d07c      	beq.n	80131c6 <_strtod_l+0xa96>
 80130cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d04c      	beq.n	801316c <_strtod_l+0xa3c>
 80130d2:	4b95      	ldr	r3, [pc, #596]	; (8013328 <_strtod_l+0xbf8>)
 80130d4:	2200      	movs	r2, #0
 80130d6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80130da:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8013328 <_strtod_l+0xbf8>
 80130de:	f04f 0800 	mov.w	r8, #0
 80130e2:	4b92      	ldr	r3, [pc, #584]	; (801332c <_strtod_l+0xbfc>)
 80130e4:	403b      	ands	r3, r7
 80130e6:	9311      	str	r3, [sp, #68]	; 0x44
 80130e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80130ea:	4b91      	ldr	r3, [pc, #580]	; (8013330 <_strtod_l+0xc00>)
 80130ec:	429a      	cmp	r2, r3
 80130ee:	f040 80b2 	bne.w	8013256 <_strtod_l+0xb26>
 80130f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80130f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80130fa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80130fe:	ec4b ab10 	vmov	d0, sl, fp
 8013102:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8013106:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801310a:	f002 f8c1 	bl	8015290 <__ulp>
 801310e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013112:	ec53 2b10 	vmov	r2, r3, d0
 8013116:	f7ed fa7f 	bl	8000618 <__aeabi_dmul>
 801311a:	4652      	mov	r2, sl
 801311c:	465b      	mov	r3, fp
 801311e:	f7ed f8c5 	bl	80002ac <__adddf3>
 8013122:	460b      	mov	r3, r1
 8013124:	4981      	ldr	r1, [pc, #516]	; (801332c <_strtod_l+0xbfc>)
 8013126:	4a83      	ldr	r2, [pc, #524]	; (8013334 <_strtod_l+0xc04>)
 8013128:	4019      	ands	r1, r3
 801312a:	4291      	cmp	r1, r2
 801312c:	4682      	mov	sl, r0
 801312e:	d95e      	bls.n	80131ee <_strtod_l+0xabe>
 8013130:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013132:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8013136:	4293      	cmp	r3, r2
 8013138:	d103      	bne.n	8013142 <_strtod_l+0xa12>
 801313a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801313c:	3301      	adds	r3, #1
 801313e:	f43f ad43 	beq.w	8012bc8 <_strtod_l+0x498>
 8013142:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8013340 <_strtod_l+0xc10>
 8013146:	f04f 3aff 	mov.w	sl, #4294967295
 801314a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801314c:	4620      	mov	r0, r4
 801314e:	f001 fd73 	bl	8014c38 <_Bfree>
 8013152:	9907      	ldr	r1, [sp, #28]
 8013154:	4620      	mov	r0, r4
 8013156:	f001 fd6f 	bl	8014c38 <_Bfree>
 801315a:	4631      	mov	r1, r6
 801315c:	4620      	mov	r0, r4
 801315e:	f001 fd6b 	bl	8014c38 <_Bfree>
 8013162:	4629      	mov	r1, r5
 8013164:	4620      	mov	r0, r4
 8013166:	f001 fd67 	bl	8014c38 <_Bfree>
 801316a:	e613      	b.n	8012d94 <_strtod_l+0x664>
 801316c:	f1ba 0f00 	cmp.w	sl, #0
 8013170:	d11b      	bne.n	80131aa <_strtod_l+0xa7a>
 8013172:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013176:	b9f3      	cbnz	r3, 80131b6 <_strtod_l+0xa86>
 8013178:	4b6b      	ldr	r3, [pc, #428]	; (8013328 <_strtod_l+0xbf8>)
 801317a:	2200      	movs	r2, #0
 801317c:	4640      	mov	r0, r8
 801317e:	4649      	mov	r1, r9
 8013180:	f7ed fcbc 	bl	8000afc <__aeabi_dcmplt>
 8013184:	b9d0      	cbnz	r0, 80131bc <_strtod_l+0xa8c>
 8013186:	4640      	mov	r0, r8
 8013188:	4649      	mov	r1, r9
 801318a:	4b6b      	ldr	r3, [pc, #428]	; (8013338 <_strtod_l+0xc08>)
 801318c:	2200      	movs	r2, #0
 801318e:	f7ed fa43 	bl	8000618 <__aeabi_dmul>
 8013192:	4680      	mov	r8, r0
 8013194:	4689      	mov	r9, r1
 8013196:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801319a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801319e:	931b      	str	r3, [sp, #108]	; 0x6c
 80131a0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80131a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80131a8:	e79b      	b.n	80130e2 <_strtod_l+0x9b2>
 80131aa:	f1ba 0f01 	cmp.w	sl, #1
 80131ae:	d102      	bne.n	80131b6 <_strtod_l+0xa86>
 80131b0:	2f00      	cmp	r7, #0
 80131b2:	f43f ad7e 	beq.w	8012cb2 <_strtod_l+0x582>
 80131b6:	4b61      	ldr	r3, [pc, #388]	; (801333c <_strtod_l+0xc0c>)
 80131b8:	2200      	movs	r2, #0
 80131ba:	e78c      	b.n	80130d6 <_strtod_l+0x9a6>
 80131bc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8013338 <_strtod_l+0xc08>
 80131c0:	f04f 0800 	mov.w	r8, #0
 80131c4:	e7e7      	b.n	8013196 <_strtod_l+0xa66>
 80131c6:	4b5c      	ldr	r3, [pc, #368]	; (8013338 <_strtod_l+0xc08>)
 80131c8:	4640      	mov	r0, r8
 80131ca:	4649      	mov	r1, r9
 80131cc:	2200      	movs	r2, #0
 80131ce:	f7ed fa23 	bl	8000618 <__aeabi_dmul>
 80131d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80131d4:	4680      	mov	r8, r0
 80131d6:	4689      	mov	r9, r1
 80131d8:	b933      	cbnz	r3, 80131e8 <_strtod_l+0xab8>
 80131da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80131de:	9012      	str	r0, [sp, #72]	; 0x48
 80131e0:	9313      	str	r3, [sp, #76]	; 0x4c
 80131e2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80131e6:	e7dd      	b.n	80131a4 <_strtod_l+0xa74>
 80131e8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80131ec:	e7f9      	b.n	80131e2 <_strtod_l+0xab2>
 80131ee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80131f2:	9b04      	ldr	r3, [sp, #16]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d1a8      	bne.n	801314a <_strtod_l+0xa1a>
 80131f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80131fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80131fe:	0d1b      	lsrs	r3, r3, #20
 8013200:	051b      	lsls	r3, r3, #20
 8013202:	429a      	cmp	r2, r3
 8013204:	d1a1      	bne.n	801314a <_strtod_l+0xa1a>
 8013206:	4640      	mov	r0, r8
 8013208:	4649      	mov	r1, r9
 801320a:	f7ed fd65 	bl	8000cd8 <__aeabi_d2lz>
 801320e:	f7ed f9d5 	bl	80005bc <__aeabi_l2d>
 8013212:	4602      	mov	r2, r0
 8013214:	460b      	mov	r3, r1
 8013216:	4640      	mov	r0, r8
 8013218:	4649      	mov	r1, r9
 801321a:	f7ed f845 	bl	80002a8 <__aeabi_dsub>
 801321e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013220:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013224:	ea43 030a 	orr.w	r3, r3, sl
 8013228:	4313      	orrs	r3, r2
 801322a:	4680      	mov	r8, r0
 801322c:	4689      	mov	r9, r1
 801322e:	d053      	beq.n	80132d8 <_strtod_l+0xba8>
 8013230:	a335      	add	r3, pc, #212	; (adr r3, 8013308 <_strtod_l+0xbd8>)
 8013232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013236:	f7ed fc61 	bl	8000afc <__aeabi_dcmplt>
 801323a:	2800      	cmp	r0, #0
 801323c:	f47f acce 	bne.w	8012bdc <_strtod_l+0x4ac>
 8013240:	a333      	add	r3, pc, #204	; (adr r3, 8013310 <_strtod_l+0xbe0>)
 8013242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013246:	4640      	mov	r0, r8
 8013248:	4649      	mov	r1, r9
 801324a:	f7ed fc75 	bl	8000b38 <__aeabi_dcmpgt>
 801324e:	2800      	cmp	r0, #0
 8013250:	f43f af7b 	beq.w	801314a <_strtod_l+0xa1a>
 8013254:	e4c2      	b.n	8012bdc <_strtod_l+0x4ac>
 8013256:	9b04      	ldr	r3, [sp, #16]
 8013258:	b333      	cbz	r3, 80132a8 <_strtod_l+0xb78>
 801325a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801325c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013260:	d822      	bhi.n	80132a8 <_strtod_l+0xb78>
 8013262:	a32d      	add	r3, pc, #180	; (adr r3, 8013318 <_strtod_l+0xbe8>)
 8013264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013268:	4640      	mov	r0, r8
 801326a:	4649      	mov	r1, r9
 801326c:	f7ed fc50 	bl	8000b10 <__aeabi_dcmple>
 8013270:	b1a0      	cbz	r0, 801329c <_strtod_l+0xb6c>
 8013272:	4649      	mov	r1, r9
 8013274:	4640      	mov	r0, r8
 8013276:	f7ed fca7 	bl	8000bc8 <__aeabi_d2uiz>
 801327a:	2801      	cmp	r0, #1
 801327c:	bf38      	it	cc
 801327e:	2001      	movcc	r0, #1
 8013280:	f7ed f950 	bl	8000524 <__aeabi_ui2d>
 8013284:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013286:	4680      	mov	r8, r0
 8013288:	4689      	mov	r9, r1
 801328a:	bb13      	cbnz	r3, 80132d2 <_strtod_l+0xba2>
 801328c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013290:	9014      	str	r0, [sp, #80]	; 0x50
 8013292:	9315      	str	r3, [sp, #84]	; 0x54
 8013294:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8013298:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801329c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801329e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80132a0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80132a4:	1a9b      	subs	r3, r3, r2
 80132a6:	930d      	str	r3, [sp, #52]	; 0x34
 80132a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80132ac:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80132b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80132b4:	f001 ffec 	bl	8015290 <__ulp>
 80132b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80132bc:	ec53 2b10 	vmov	r2, r3, d0
 80132c0:	f7ed f9aa 	bl	8000618 <__aeabi_dmul>
 80132c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80132c8:	f7ec fff0 	bl	80002ac <__adddf3>
 80132cc:	4682      	mov	sl, r0
 80132ce:	468b      	mov	fp, r1
 80132d0:	e78f      	b.n	80131f2 <_strtod_l+0xac2>
 80132d2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80132d6:	e7dd      	b.n	8013294 <_strtod_l+0xb64>
 80132d8:	a311      	add	r3, pc, #68	; (adr r3, 8013320 <_strtod_l+0xbf0>)
 80132da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132de:	f7ed fc0d 	bl	8000afc <__aeabi_dcmplt>
 80132e2:	e7b4      	b.n	801324e <_strtod_l+0xb1e>
 80132e4:	2300      	movs	r3, #0
 80132e6:	930e      	str	r3, [sp, #56]	; 0x38
 80132e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80132ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80132ec:	6013      	str	r3, [r2, #0]
 80132ee:	f7ff ba65 	b.w	80127bc <_strtod_l+0x8c>
 80132f2:	2b65      	cmp	r3, #101	; 0x65
 80132f4:	f43f ab5d 	beq.w	80129b2 <_strtod_l+0x282>
 80132f8:	2b45      	cmp	r3, #69	; 0x45
 80132fa:	f43f ab5a 	beq.w	80129b2 <_strtod_l+0x282>
 80132fe:	2201      	movs	r2, #1
 8013300:	f7ff bb92 	b.w	8012a28 <_strtod_l+0x2f8>
 8013304:	f3af 8000 	nop.w
 8013308:	94a03595 	.word	0x94a03595
 801330c:	3fdfffff 	.word	0x3fdfffff
 8013310:	35afe535 	.word	0x35afe535
 8013314:	3fe00000 	.word	0x3fe00000
 8013318:	ffc00000 	.word	0xffc00000
 801331c:	41dfffff 	.word	0x41dfffff
 8013320:	94a03595 	.word	0x94a03595
 8013324:	3fcfffff 	.word	0x3fcfffff
 8013328:	3ff00000 	.word	0x3ff00000
 801332c:	7ff00000 	.word	0x7ff00000
 8013330:	7fe00000 	.word	0x7fe00000
 8013334:	7c9fffff 	.word	0x7c9fffff
 8013338:	3fe00000 	.word	0x3fe00000
 801333c:	bff00000 	.word	0xbff00000
 8013340:	7fefffff 	.word	0x7fefffff

08013344 <_strtod_r>:
 8013344:	4b01      	ldr	r3, [pc, #4]	; (801334c <_strtod_r+0x8>)
 8013346:	f7ff b9f3 	b.w	8012730 <_strtod_l>
 801334a:	bf00      	nop
 801334c:	200001f0 	.word	0x200001f0

08013350 <_strtol_l.isra.0>:
 8013350:	2b01      	cmp	r3, #1
 8013352:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013356:	d001      	beq.n	801335c <_strtol_l.isra.0+0xc>
 8013358:	2b24      	cmp	r3, #36	; 0x24
 801335a:	d906      	bls.n	801336a <_strtol_l.isra.0+0x1a>
 801335c:	f7fd ffe4 	bl	8011328 <__errno>
 8013360:	2316      	movs	r3, #22
 8013362:	6003      	str	r3, [r0, #0]
 8013364:	2000      	movs	r0, #0
 8013366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801336a:	4f3a      	ldr	r7, [pc, #232]	; (8013454 <_strtol_l.isra.0+0x104>)
 801336c:	468e      	mov	lr, r1
 801336e:	4676      	mov	r6, lr
 8013370:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8013374:	5de5      	ldrb	r5, [r4, r7]
 8013376:	f015 0508 	ands.w	r5, r5, #8
 801337a:	d1f8      	bne.n	801336e <_strtol_l.isra.0+0x1e>
 801337c:	2c2d      	cmp	r4, #45	; 0x2d
 801337e:	d134      	bne.n	80133ea <_strtol_l.isra.0+0x9a>
 8013380:	f89e 4000 	ldrb.w	r4, [lr]
 8013384:	f04f 0801 	mov.w	r8, #1
 8013388:	f106 0e02 	add.w	lr, r6, #2
 801338c:	2b00      	cmp	r3, #0
 801338e:	d05c      	beq.n	801344a <_strtol_l.isra.0+0xfa>
 8013390:	2b10      	cmp	r3, #16
 8013392:	d10c      	bne.n	80133ae <_strtol_l.isra.0+0x5e>
 8013394:	2c30      	cmp	r4, #48	; 0x30
 8013396:	d10a      	bne.n	80133ae <_strtol_l.isra.0+0x5e>
 8013398:	f89e 4000 	ldrb.w	r4, [lr]
 801339c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80133a0:	2c58      	cmp	r4, #88	; 0x58
 80133a2:	d14d      	bne.n	8013440 <_strtol_l.isra.0+0xf0>
 80133a4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80133a8:	2310      	movs	r3, #16
 80133aa:	f10e 0e02 	add.w	lr, lr, #2
 80133ae:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80133b2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80133b6:	2600      	movs	r6, #0
 80133b8:	fbbc f9f3 	udiv	r9, ip, r3
 80133bc:	4635      	mov	r5, r6
 80133be:	fb03 ca19 	mls	sl, r3, r9, ip
 80133c2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80133c6:	2f09      	cmp	r7, #9
 80133c8:	d818      	bhi.n	80133fc <_strtol_l.isra.0+0xac>
 80133ca:	463c      	mov	r4, r7
 80133cc:	42a3      	cmp	r3, r4
 80133ce:	dd24      	ble.n	801341a <_strtol_l.isra.0+0xca>
 80133d0:	2e00      	cmp	r6, #0
 80133d2:	db1f      	blt.n	8013414 <_strtol_l.isra.0+0xc4>
 80133d4:	45a9      	cmp	r9, r5
 80133d6:	d31d      	bcc.n	8013414 <_strtol_l.isra.0+0xc4>
 80133d8:	d101      	bne.n	80133de <_strtol_l.isra.0+0x8e>
 80133da:	45a2      	cmp	sl, r4
 80133dc:	db1a      	blt.n	8013414 <_strtol_l.isra.0+0xc4>
 80133de:	fb05 4503 	mla	r5, r5, r3, r4
 80133e2:	2601      	movs	r6, #1
 80133e4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80133e8:	e7eb      	b.n	80133c2 <_strtol_l.isra.0+0x72>
 80133ea:	2c2b      	cmp	r4, #43	; 0x2b
 80133ec:	bf08      	it	eq
 80133ee:	f89e 4000 	ldrbeq.w	r4, [lr]
 80133f2:	46a8      	mov	r8, r5
 80133f4:	bf08      	it	eq
 80133f6:	f106 0e02 	addeq.w	lr, r6, #2
 80133fa:	e7c7      	b.n	801338c <_strtol_l.isra.0+0x3c>
 80133fc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8013400:	2f19      	cmp	r7, #25
 8013402:	d801      	bhi.n	8013408 <_strtol_l.isra.0+0xb8>
 8013404:	3c37      	subs	r4, #55	; 0x37
 8013406:	e7e1      	b.n	80133cc <_strtol_l.isra.0+0x7c>
 8013408:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801340c:	2f19      	cmp	r7, #25
 801340e:	d804      	bhi.n	801341a <_strtol_l.isra.0+0xca>
 8013410:	3c57      	subs	r4, #87	; 0x57
 8013412:	e7db      	b.n	80133cc <_strtol_l.isra.0+0x7c>
 8013414:	f04f 36ff 	mov.w	r6, #4294967295
 8013418:	e7e4      	b.n	80133e4 <_strtol_l.isra.0+0x94>
 801341a:	2e00      	cmp	r6, #0
 801341c:	da05      	bge.n	801342a <_strtol_l.isra.0+0xda>
 801341e:	2322      	movs	r3, #34	; 0x22
 8013420:	6003      	str	r3, [r0, #0]
 8013422:	4665      	mov	r5, ip
 8013424:	b942      	cbnz	r2, 8013438 <_strtol_l.isra.0+0xe8>
 8013426:	4628      	mov	r0, r5
 8013428:	e79d      	b.n	8013366 <_strtol_l.isra.0+0x16>
 801342a:	f1b8 0f00 	cmp.w	r8, #0
 801342e:	d000      	beq.n	8013432 <_strtol_l.isra.0+0xe2>
 8013430:	426d      	negs	r5, r5
 8013432:	2a00      	cmp	r2, #0
 8013434:	d0f7      	beq.n	8013426 <_strtol_l.isra.0+0xd6>
 8013436:	b10e      	cbz	r6, 801343c <_strtol_l.isra.0+0xec>
 8013438:	f10e 31ff 	add.w	r1, lr, #4294967295
 801343c:	6011      	str	r1, [r2, #0]
 801343e:	e7f2      	b.n	8013426 <_strtol_l.isra.0+0xd6>
 8013440:	2430      	movs	r4, #48	; 0x30
 8013442:	2b00      	cmp	r3, #0
 8013444:	d1b3      	bne.n	80133ae <_strtol_l.isra.0+0x5e>
 8013446:	2308      	movs	r3, #8
 8013448:	e7b1      	b.n	80133ae <_strtol_l.isra.0+0x5e>
 801344a:	2c30      	cmp	r4, #48	; 0x30
 801344c:	d0a4      	beq.n	8013398 <_strtol_l.isra.0+0x48>
 801344e:	230a      	movs	r3, #10
 8013450:	e7ad      	b.n	80133ae <_strtol_l.isra.0+0x5e>
 8013452:	bf00      	nop
 8013454:	08016c1d 	.word	0x08016c1d

08013458 <_strtol_r>:
 8013458:	f7ff bf7a 	b.w	8013350 <_strtol_l.isra.0>

0801345c <_strtoul_l.isra.0>:
 801345c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013460:	4e3b      	ldr	r6, [pc, #236]	; (8013550 <_strtoul_l.isra.0+0xf4>)
 8013462:	4686      	mov	lr, r0
 8013464:	468c      	mov	ip, r1
 8013466:	4660      	mov	r0, ip
 8013468:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801346c:	5da5      	ldrb	r5, [r4, r6]
 801346e:	f015 0508 	ands.w	r5, r5, #8
 8013472:	d1f8      	bne.n	8013466 <_strtoul_l.isra.0+0xa>
 8013474:	2c2d      	cmp	r4, #45	; 0x2d
 8013476:	d134      	bne.n	80134e2 <_strtoul_l.isra.0+0x86>
 8013478:	f89c 4000 	ldrb.w	r4, [ip]
 801347c:	f04f 0801 	mov.w	r8, #1
 8013480:	f100 0c02 	add.w	ip, r0, #2
 8013484:	2b00      	cmp	r3, #0
 8013486:	d05e      	beq.n	8013546 <_strtoul_l.isra.0+0xea>
 8013488:	2b10      	cmp	r3, #16
 801348a:	d10c      	bne.n	80134a6 <_strtoul_l.isra.0+0x4a>
 801348c:	2c30      	cmp	r4, #48	; 0x30
 801348e:	d10a      	bne.n	80134a6 <_strtoul_l.isra.0+0x4a>
 8013490:	f89c 0000 	ldrb.w	r0, [ip]
 8013494:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8013498:	2858      	cmp	r0, #88	; 0x58
 801349a:	d14f      	bne.n	801353c <_strtoul_l.isra.0+0xe0>
 801349c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80134a0:	2310      	movs	r3, #16
 80134a2:	f10c 0c02 	add.w	ip, ip, #2
 80134a6:	f04f 37ff 	mov.w	r7, #4294967295
 80134aa:	2500      	movs	r5, #0
 80134ac:	fbb7 f7f3 	udiv	r7, r7, r3
 80134b0:	fb03 f907 	mul.w	r9, r3, r7
 80134b4:	ea6f 0909 	mvn.w	r9, r9
 80134b8:	4628      	mov	r0, r5
 80134ba:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80134be:	2e09      	cmp	r6, #9
 80134c0:	d818      	bhi.n	80134f4 <_strtoul_l.isra.0+0x98>
 80134c2:	4634      	mov	r4, r6
 80134c4:	42a3      	cmp	r3, r4
 80134c6:	dd24      	ble.n	8013512 <_strtoul_l.isra.0+0xb6>
 80134c8:	2d00      	cmp	r5, #0
 80134ca:	db1f      	blt.n	801350c <_strtoul_l.isra.0+0xb0>
 80134cc:	4287      	cmp	r7, r0
 80134ce:	d31d      	bcc.n	801350c <_strtoul_l.isra.0+0xb0>
 80134d0:	d101      	bne.n	80134d6 <_strtoul_l.isra.0+0x7a>
 80134d2:	45a1      	cmp	r9, r4
 80134d4:	db1a      	blt.n	801350c <_strtoul_l.isra.0+0xb0>
 80134d6:	fb00 4003 	mla	r0, r0, r3, r4
 80134da:	2501      	movs	r5, #1
 80134dc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80134e0:	e7eb      	b.n	80134ba <_strtoul_l.isra.0+0x5e>
 80134e2:	2c2b      	cmp	r4, #43	; 0x2b
 80134e4:	bf08      	it	eq
 80134e6:	f89c 4000 	ldrbeq.w	r4, [ip]
 80134ea:	46a8      	mov	r8, r5
 80134ec:	bf08      	it	eq
 80134ee:	f100 0c02 	addeq.w	ip, r0, #2
 80134f2:	e7c7      	b.n	8013484 <_strtoul_l.isra.0+0x28>
 80134f4:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80134f8:	2e19      	cmp	r6, #25
 80134fa:	d801      	bhi.n	8013500 <_strtoul_l.isra.0+0xa4>
 80134fc:	3c37      	subs	r4, #55	; 0x37
 80134fe:	e7e1      	b.n	80134c4 <_strtoul_l.isra.0+0x68>
 8013500:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8013504:	2e19      	cmp	r6, #25
 8013506:	d804      	bhi.n	8013512 <_strtoul_l.isra.0+0xb6>
 8013508:	3c57      	subs	r4, #87	; 0x57
 801350a:	e7db      	b.n	80134c4 <_strtoul_l.isra.0+0x68>
 801350c:	f04f 35ff 	mov.w	r5, #4294967295
 8013510:	e7e4      	b.n	80134dc <_strtoul_l.isra.0+0x80>
 8013512:	2d00      	cmp	r5, #0
 8013514:	da07      	bge.n	8013526 <_strtoul_l.isra.0+0xca>
 8013516:	2322      	movs	r3, #34	; 0x22
 8013518:	f8ce 3000 	str.w	r3, [lr]
 801351c:	f04f 30ff 	mov.w	r0, #4294967295
 8013520:	b942      	cbnz	r2, 8013534 <_strtoul_l.isra.0+0xd8>
 8013522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013526:	f1b8 0f00 	cmp.w	r8, #0
 801352a:	d000      	beq.n	801352e <_strtoul_l.isra.0+0xd2>
 801352c:	4240      	negs	r0, r0
 801352e:	2a00      	cmp	r2, #0
 8013530:	d0f7      	beq.n	8013522 <_strtoul_l.isra.0+0xc6>
 8013532:	b10d      	cbz	r5, 8013538 <_strtoul_l.isra.0+0xdc>
 8013534:	f10c 31ff 	add.w	r1, ip, #4294967295
 8013538:	6011      	str	r1, [r2, #0]
 801353a:	e7f2      	b.n	8013522 <_strtoul_l.isra.0+0xc6>
 801353c:	2430      	movs	r4, #48	; 0x30
 801353e:	2b00      	cmp	r3, #0
 8013540:	d1b1      	bne.n	80134a6 <_strtoul_l.isra.0+0x4a>
 8013542:	2308      	movs	r3, #8
 8013544:	e7af      	b.n	80134a6 <_strtoul_l.isra.0+0x4a>
 8013546:	2c30      	cmp	r4, #48	; 0x30
 8013548:	d0a2      	beq.n	8013490 <_strtoul_l.isra.0+0x34>
 801354a:	230a      	movs	r3, #10
 801354c:	e7ab      	b.n	80134a6 <_strtoul_l.isra.0+0x4a>
 801354e:	bf00      	nop
 8013550:	08016c1d 	.word	0x08016c1d

08013554 <_strtoul_r>:
 8013554:	f7ff bf82 	b.w	801345c <_strtoul_l.isra.0>

08013558 <_write_r>:
 8013558:	b538      	push	{r3, r4, r5, lr}
 801355a:	4d07      	ldr	r5, [pc, #28]	; (8013578 <_write_r+0x20>)
 801355c:	4604      	mov	r4, r0
 801355e:	4608      	mov	r0, r1
 8013560:	4611      	mov	r1, r2
 8013562:	2200      	movs	r2, #0
 8013564:	602a      	str	r2, [r5, #0]
 8013566:	461a      	mov	r2, r3
 8013568:	f7ef fceb 	bl	8002f42 <_write>
 801356c:	1c43      	adds	r3, r0, #1
 801356e:	d102      	bne.n	8013576 <_write_r+0x1e>
 8013570:	682b      	ldr	r3, [r5, #0]
 8013572:	b103      	cbz	r3, 8013576 <_write_r+0x1e>
 8013574:	6023      	str	r3, [r4, #0]
 8013576:	bd38      	pop	{r3, r4, r5, pc}
 8013578:	200070d4 	.word	0x200070d4

0801357c <__assert_func>:
 801357c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801357e:	4614      	mov	r4, r2
 8013580:	461a      	mov	r2, r3
 8013582:	4b09      	ldr	r3, [pc, #36]	; (80135a8 <__assert_func+0x2c>)
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	4605      	mov	r5, r0
 8013588:	68d8      	ldr	r0, [r3, #12]
 801358a:	b14c      	cbz	r4, 80135a0 <__assert_func+0x24>
 801358c:	4b07      	ldr	r3, [pc, #28]	; (80135ac <__assert_func+0x30>)
 801358e:	9100      	str	r1, [sp, #0]
 8013590:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013594:	4906      	ldr	r1, [pc, #24]	; (80135b0 <__assert_func+0x34>)
 8013596:	462b      	mov	r3, r5
 8013598:	f000 ff58 	bl	801444c <fiprintf>
 801359c:	f7fd febd 	bl	801131a <abort>
 80135a0:	4b04      	ldr	r3, [pc, #16]	; (80135b4 <__assert_func+0x38>)
 80135a2:	461c      	mov	r4, r3
 80135a4:	e7f3      	b.n	801358e <__assert_func+0x12>
 80135a6:	bf00      	nop
 80135a8:	20000188 	.word	0x20000188
 80135ac:	08016be0 	.word	0x08016be0
 80135b0:	08016bed 	.word	0x08016bed
 80135b4:	08016c1b 	.word	0x08016c1b

080135b8 <_close_r>:
 80135b8:	b538      	push	{r3, r4, r5, lr}
 80135ba:	4d06      	ldr	r5, [pc, #24]	; (80135d4 <_close_r+0x1c>)
 80135bc:	2300      	movs	r3, #0
 80135be:	4604      	mov	r4, r0
 80135c0:	4608      	mov	r0, r1
 80135c2:	602b      	str	r3, [r5, #0]
 80135c4:	f7ef fcd9 	bl	8002f7a <_close>
 80135c8:	1c43      	adds	r3, r0, #1
 80135ca:	d102      	bne.n	80135d2 <_close_r+0x1a>
 80135cc:	682b      	ldr	r3, [r5, #0]
 80135ce:	b103      	cbz	r3, 80135d2 <_close_r+0x1a>
 80135d0:	6023      	str	r3, [r4, #0]
 80135d2:	bd38      	pop	{r3, r4, r5, pc}
 80135d4:	200070d4 	.word	0x200070d4

080135d8 <quorem>:
 80135d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135dc:	6903      	ldr	r3, [r0, #16]
 80135de:	690c      	ldr	r4, [r1, #16]
 80135e0:	42a3      	cmp	r3, r4
 80135e2:	4607      	mov	r7, r0
 80135e4:	f2c0 8081 	blt.w	80136ea <quorem+0x112>
 80135e8:	3c01      	subs	r4, #1
 80135ea:	f101 0814 	add.w	r8, r1, #20
 80135ee:	f100 0514 	add.w	r5, r0, #20
 80135f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80135f6:	9301      	str	r3, [sp, #4]
 80135f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80135fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013600:	3301      	adds	r3, #1
 8013602:	429a      	cmp	r2, r3
 8013604:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013608:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801360c:	fbb2 f6f3 	udiv	r6, r2, r3
 8013610:	d331      	bcc.n	8013676 <quorem+0x9e>
 8013612:	f04f 0e00 	mov.w	lr, #0
 8013616:	4640      	mov	r0, r8
 8013618:	46ac      	mov	ip, r5
 801361a:	46f2      	mov	sl, lr
 801361c:	f850 2b04 	ldr.w	r2, [r0], #4
 8013620:	b293      	uxth	r3, r2
 8013622:	fb06 e303 	mla	r3, r6, r3, lr
 8013626:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801362a:	b29b      	uxth	r3, r3
 801362c:	ebaa 0303 	sub.w	r3, sl, r3
 8013630:	0c12      	lsrs	r2, r2, #16
 8013632:	f8dc a000 	ldr.w	sl, [ip]
 8013636:	fb06 e202 	mla	r2, r6, r2, lr
 801363a:	fa13 f38a 	uxtah	r3, r3, sl
 801363e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013642:	fa1f fa82 	uxth.w	sl, r2
 8013646:	f8dc 2000 	ldr.w	r2, [ip]
 801364a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801364e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013652:	b29b      	uxth	r3, r3
 8013654:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013658:	4581      	cmp	r9, r0
 801365a:	f84c 3b04 	str.w	r3, [ip], #4
 801365e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013662:	d2db      	bcs.n	801361c <quorem+0x44>
 8013664:	f855 300b 	ldr.w	r3, [r5, fp]
 8013668:	b92b      	cbnz	r3, 8013676 <quorem+0x9e>
 801366a:	9b01      	ldr	r3, [sp, #4]
 801366c:	3b04      	subs	r3, #4
 801366e:	429d      	cmp	r5, r3
 8013670:	461a      	mov	r2, r3
 8013672:	d32e      	bcc.n	80136d2 <quorem+0xfa>
 8013674:	613c      	str	r4, [r7, #16]
 8013676:	4638      	mov	r0, r7
 8013678:	f001 fd66 	bl	8015148 <__mcmp>
 801367c:	2800      	cmp	r0, #0
 801367e:	db24      	blt.n	80136ca <quorem+0xf2>
 8013680:	3601      	adds	r6, #1
 8013682:	4628      	mov	r0, r5
 8013684:	f04f 0c00 	mov.w	ip, #0
 8013688:	f858 2b04 	ldr.w	r2, [r8], #4
 801368c:	f8d0 e000 	ldr.w	lr, [r0]
 8013690:	b293      	uxth	r3, r2
 8013692:	ebac 0303 	sub.w	r3, ip, r3
 8013696:	0c12      	lsrs	r2, r2, #16
 8013698:	fa13 f38e 	uxtah	r3, r3, lr
 801369c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80136a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80136a4:	b29b      	uxth	r3, r3
 80136a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80136aa:	45c1      	cmp	r9, r8
 80136ac:	f840 3b04 	str.w	r3, [r0], #4
 80136b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80136b4:	d2e8      	bcs.n	8013688 <quorem+0xb0>
 80136b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80136ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80136be:	b922      	cbnz	r2, 80136ca <quorem+0xf2>
 80136c0:	3b04      	subs	r3, #4
 80136c2:	429d      	cmp	r5, r3
 80136c4:	461a      	mov	r2, r3
 80136c6:	d30a      	bcc.n	80136de <quorem+0x106>
 80136c8:	613c      	str	r4, [r7, #16]
 80136ca:	4630      	mov	r0, r6
 80136cc:	b003      	add	sp, #12
 80136ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136d2:	6812      	ldr	r2, [r2, #0]
 80136d4:	3b04      	subs	r3, #4
 80136d6:	2a00      	cmp	r2, #0
 80136d8:	d1cc      	bne.n	8013674 <quorem+0x9c>
 80136da:	3c01      	subs	r4, #1
 80136dc:	e7c7      	b.n	801366e <quorem+0x96>
 80136de:	6812      	ldr	r2, [r2, #0]
 80136e0:	3b04      	subs	r3, #4
 80136e2:	2a00      	cmp	r2, #0
 80136e4:	d1f0      	bne.n	80136c8 <quorem+0xf0>
 80136e6:	3c01      	subs	r4, #1
 80136e8:	e7eb      	b.n	80136c2 <quorem+0xea>
 80136ea:	2000      	movs	r0, #0
 80136ec:	e7ee      	b.n	80136cc <quorem+0xf4>
	...

080136f0 <_dtoa_r>:
 80136f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136f4:	ed2d 8b02 	vpush	{d8}
 80136f8:	ec57 6b10 	vmov	r6, r7, d0
 80136fc:	b095      	sub	sp, #84	; 0x54
 80136fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013700:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013704:	9105      	str	r1, [sp, #20]
 8013706:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801370a:	4604      	mov	r4, r0
 801370c:	9209      	str	r2, [sp, #36]	; 0x24
 801370e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013710:	b975      	cbnz	r5, 8013730 <_dtoa_r+0x40>
 8013712:	2010      	movs	r0, #16
 8013714:	f7fd ff2c 	bl	8011570 <malloc>
 8013718:	4602      	mov	r2, r0
 801371a:	6260      	str	r0, [r4, #36]	; 0x24
 801371c:	b920      	cbnz	r0, 8013728 <_dtoa_r+0x38>
 801371e:	4bb2      	ldr	r3, [pc, #712]	; (80139e8 <_dtoa_r+0x2f8>)
 8013720:	21ea      	movs	r1, #234	; 0xea
 8013722:	48b2      	ldr	r0, [pc, #712]	; (80139ec <_dtoa_r+0x2fc>)
 8013724:	f7ff ff2a 	bl	801357c <__assert_func>
 8013728:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801372c:	6005      	str	r5, [r0, #0]
 801372e:	60c5      	str	r5, [r0, #12]
 8013730:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013732:	6819      	ldr	r1, [r3, #0]
 8013734:	b151      	cbz	r1, 801374c <_dtoa_r+0x5c>
 8013736:	685a      	ldr	r2, [r3, #4]
 8013738:	604a      	str	r2, [r1, #4]
 801373a:	2301      	movs	r3, #1
 801373c:	4093      	lsls	r3, r2
 801373e:	608b      	str	r3, [r1, #8]
 8013740:	4620      	mov	r0, r4
 8013742:	f001 fa79 	bl	8014c38 <_Bfree>
 8013746:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013748:	2200      	movs	r2, #0
 801374a:	601a      	str	r2, [r3, #0]
 801374c:	1e3b      	subs	r3, r7, #0
 801374e:	bfb9      	ittee	lt
 8013750:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013754:	9303      	strlt	r3, [sp, #12]
 8013756:	2300      	movge	r3, #0
 8013758:	f8c8 3000 	strge.w	r3, [r8]
 801375c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8013760:	4ba3      	ldr	r3, [pc, #652]	; (80139f0 <_dtoa_r+0x300>)
 8013762:	bfbc      	itt	lt
 8013764:	2201      	movlt	r2, #1
 8013766:	f8c8 2000 	strlt.w	r2, [r8]
 801376a:	ea33 0309 	bics.w	r3, r3, r9
 801376e:	d11b      	bne.n	80137a8 <_dtoa_r+0xb8>
 8013770:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013772:	f242 730f 	movw	r3, #9999	; 0x270f
 8013776:	6013      	str	r3, [r2, #0]
 8013778:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801377c:	4333      	orrs	r3, r6
 801377e:	f000 857a 	beq.w	8014276 <_dtoa_r+0xb86>
 8013782:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013784:	b963      	cbnz	r3, 80137a0 <_dtoa_r+0xb0>
 8013786:	4b9b      	ldr	r3, [pc, #620]	; (80139f4 <_dtoa_r+0x304>)
 8013788:	e024      	b.n	80137d4 <_dtoa_r+0xe4>
 801378a:	4b9b      	ldr	r3, [pc, #620]	; (80139f8 <_dtoa_r+0x308>)
 801378c:	9300      	str	r3, [sp, #0]
 801378e:	3308      	adds	r3, #8
 8013790:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013792:	6013      	str	r3, [r2, #0]
 8013794:	9800      	ldr	r0, [sp, #0]
 8013796:	b015      	add	sp, #84	; 0x54
 8013798:	ecbd 8b02 	vpop	{d8}
 801379c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137a0:	4b94      	ldr	r3, [pc, #592]	; (80139f4 <_dtoa_r+0x304>)
 80137a2:	9300      	str	r3, [sp, #0]
 80137a4:	3303      	adds	r3, #3
 80137a6:	e7f3      	b.n	8013790 <_dtoa_r+0xa0>
 80137a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80137ac:	2200      	movs	r2, #0
 80137ae:	ec51 0b17 	vmov	r0, r1, d7
 80137b2:	2300      	movs	r3, #0
 80137b4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80137b8:	f7ed f996 	bl	8000ae8 <__aeabi_dcmpeq>
 80137bc:	4680      	mov	r8, r0
 80137be:	b158      	cbz	r0, 80137d8 <_dtoa_r+0xe8>
 80137c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80137c2:	2301      	movs	r3, #1
 80137c4:	6013      	str	r3, [r2, #0]
 80137c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	f000 8551 	beq.w	8014270 <_dtoa_r+0xb80>
 80137ce:	488b      	ldr	r0, [pc, #556]	; (80139fc <_dtoa_r+0x30c>)
 80137d0:	6018      	str	r0, [r3, #0]
 80137d2:	1e43      	subs	r3, r0, #1
 80137d4:	9300      	str	r3, [sp, #0]
 80137d6:	e7dd      	b.n	8013794 <_dtoa_r+0xa4>
 80137d8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80137dc:	aa12      	add	r2, sp, #72	; 0x48
 80137de:	a913      	add	r1, sp, #76	; 0x4c
 80137e0:	4620      	mov	r0, r4
 80137e2:	f001 fdd1 	bl	8015388 <__d2b>
 80137e6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80137ea:	4683      	mov	fp, r0
 80137ec:	2d00      	cmp	r5, #0
 80137ee:	d07c      	beq.n	80138ea <_dtoa_r+0x1fa>
 80137f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80137f2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80137f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80137fa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80137fe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8013802:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8013806:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801380a:	4b7d      	ldr	r3, [pc, #500]	; (8013a00 <_dtoa_r+0x310>)
 801380c:	2200      	movs	r2, #0
 801380e:	4630      	mov	r0, r6
 8013810:	4639      	mov	r1, r7
 8013812:	f7ec fd49 	bl	80002a8 <__aeabi_dsub>
 8013816:	a36e      	add	r3, pc, #440	; (adr r3, 80139d0 <_dtoa_r+0x2e0>)
 8013818:	e9d3 2300 	ldrd	r2, r3, [r3]
 801381c:	f7ec fefc 	bl	8000618 <__aeabi_dmul>
 8013820:	a36d      	add	r3, pc, #436	; (adr r3, 80139d8 <_dtoa_r+0x2e8>)
 8013822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013826:	f7ec fd41 	bl	80002ac <__adddf3>
 801382a:	4606      	mov	r6, r0
 801382c:	4628      	mov	r0, r5
 801382e:	460f      	mov	r7, r1
 8013830:	f7ec fe88 	bl	8000544 <__aeabi_i2d>
 8013834:	a36a      	add	r3, pc, #424	; (adr r3, 80139e0 <_dtoa_r+0x2f0>)
 8013836:	e9d3 2300 	ldrd	r2, r3, [r3]
 801383a:	f7ec feed 	bl	8000618 <__aeabi_dmul>
 801383e:	4602      	mov	r2, r0
 8013840:	460b      	mov	r3, r1
 8013842:	4630      	mov	r0, r6
 8013844:	4639      	mov	r1, r7
 8013846:	f7ec fd31 	bl	80002ac <__adddf3>
 801384a:	4606      	mov	r6, r0
 801384c:	460f      	mov	r7, r1
 801384e:	f7ed f993 	bl	8000b78 <__aeabi_d2iz>
 8013852:	2200      	movs	r2, #0
 8013854:	4682      	mov	sl, r0
 8013856:	2300      	movs	r3, #0
 8013858:	4630      	mov	r0, r6
 801385a:	4639      	mov	r1, r7
 801385c:	f7ed f94e 	bl	8000afc <__aeabi_dcmplt>
 8013860:	b148      	cbz	r0, 8013876 <_dtoa_r+0x186>
 8013862:	4650      	mov	r0, sl
 8013864:	f7ec fe6e 	bl	8000544 <__aeabi_i2d>
 8013868:	4632      	mov	r2, r6
 801386a:	463b      	mov	r3, r7
 801386c:	f7ed f93c 	bl	8000ae8 <__aeabi_dcmpeq>
 8013870:	b908      	cbnz	r0, 8013876 <_dtoa_r+0x186>
 8013872:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013876:	f1ba 0f16 	cmp.w	sl, #22
 801387a:	d854      	bhi.n	8013926 <_dtoa_r+0x236>
 801387c:	4b61      	ldr	r3, [pc, #388]	; (8013a04 <_dtoa_r+0x314>)
 801387e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013886:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801388a:	f7ed f937 	bl	8000afc <__aeabi_dcmplt>
 801388e:	2800      	cmp	r0, #0
 8013890:	d04b      	beq.n	801392a <_dtoa_r+0x23a>
 8013892:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013896:	2300      	movs	r3, #0
 8013898:	930e      	str	r3, [sp, #56]	; 0x38
 801389a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801389c:	1b5d      	subs	r5, r3, r5
 801389e:	1e6b      	subs	r3, r5, #1
 80138a0:	9304      	str	r3, [sp, #16]
 80138a2:	bf43      	ittte	mi
 80138a4:	2300      	movmi	r3, #0
 80138a6:	f1c5 0801 	rsbmi	r8, r5, #1
 80138aa:	9304      	strmi	r3, [sp, #16]
 80138ac:	f04f 0800 	movpl.w	r8, #0
 80138b0:	f1ba 0f00 	cmp.w	sl, #0
 80138b4:	db3b      	blt.n	801392e <_dtoa_r+0x23e>
 80138b6:	9b04      	ldr	r3, [sp, #16]
 80138b8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80138bc:	4453      	add	r3, sl
 80138be:	9304      	str	r3, [sp, #16]
 80138c0:	2300      	movs	r3, #0
 80138c2:	9306      	str	r3, [sp, #24]
 80138c4:	9b05      	ldr	r3, [sp, #20]
 80138c6:	2b09      	cmp	r3, #9
 80138c8:	d869      	bhi.n	801399e <_dtoa_r+0x2ae>
 80138ca:	2b05      	cmp	r3, #5
 80138cc:	bfc4      	itt	gt
 80138ce:	3b04      	subgt	r3, #4
 80138d0:	9305      	strgt	r3, [sp, #20]
 80138d2:	9b05      	ldr	r3, [sp, #20]
 80138d4:	f1a3 0302 	sub.w	r3, r3, #2
 80138d8:	bfcc      	ite	gt
 80138da:	2500      	movgt	r5, #0
 80138dc:	2501      	movle	r5, #1
 80138de:	2b03      	cmp	r3, #3
 80138e0:	d869      	bhi.n	80139b6 <_dtoa_r+0x2c6>
 80138e2:	e8df f003 	tbb	[pc, r3]
 80138e6:	4e2c      	.short	0x4e2c
 80138e8:	5a4c      	.short	0x5a4c
 80138ea:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80138ee:	441d      	add	r5, r3
 80138f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80138f4:	2b20      	cmp	r3, #32
 80138f6:	bfc1      	itttt	gt
 80138f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80138fc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8013900:	fa09 f303 	lslgt.w	r3, r9, r3
 8013904:	fa26 f000 	lsrgt.w	r0, r6, r0
 8013908:	bfda      	itte	le
 801390a:	f1c3 0320 	rsble	r3, r3, #32
 801390e:	fa06 f003 	lslle.w	r0, r6, r3
 8013912:	4318      	orrgt	r0, r3
 8013914:	f7ec fe06 	bl	8000524 <__aeabi_ui2d>
 8013918:	2301      	movs	r3, #1
 801391a:	4606      	mov	r6, r0
 801391c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8013920:	3d01      	subs	r5, #1
 8013922:	9310      	str	r3, [sp, #64]	; 0x40
 8013924:	e771      	b.n	801380a <_dtoa_r+0x11a>
 8013926:	2301      	movs	r3, #1
 8013928:	e7b6      	b.n	8013898 <_dtoa_r+0x1a8>
 801392a:	900e      	str	r0, [sp, #56]	; 0x38
 801392c:	e7b5      	b.n	801389a <_dtoa_r+0x1aa>
 801392e:	f1ca 0300 	rsb	r3, sl, #0
 8013932:	9306      	str	r3, [sp, #24]
 8013934:	2300      	movs	r3, #0
 8013936:	eba8 080a 	sub.w	r8, r8, sl
 801393a:	930d      	str	r3, [sp, #52]	; 0x34
 801393c:	e7c2      	b.n	80138c4 <_dtoa_r+0x1d4>
 801393e:	2300      	movs	r3, #0
 8013940:	9308      	str	r3, [sp, #32]
 8013942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013944:	2b00      	cmp	r3, #0
 8013946:	dc39      	bgt.n	80139bc <_dtoa_r+0x2cc>
 8013948:	f04f 0901 	mov.w	r9, #1
 801394c:	f8cd 9004 	str.w	r9, [sp, #4]
 8013950:	464b      	mov	r3, r9
 8013952:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8013956:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8013958:	2200      	movs	r2, #0
 801395a:	6042      	str	r2, [r0, #4]
 801395c:	2204      	movs	r2, #4
 801395e:	f102 0614 	add.w	r6, r2, #20
 8013962:	429e      	cmp	r6, r3
 8013964:	6841      	ldr	r1, [r0, #4]
 8013966:	d92f      	bls.n	80139c8 <_dtoa_r+0x2d8>
 8013968:	4620      	mov	r0, r4
 801396a:	f001 f925 	bl	8014bb8 <_Balloc>
 801396e:	9000      	str	r0, [sp, #0]
 8013970:	2800      	cmp	r0, #0
 8013972:	d14b      	bne.n	8013a0c <_dtoa_r+0x31c>
 8013974:	4b24      	ldr	r3, [pc, #144]	; (8013a08 <_dtoa_r+0x318>)
 8013976:	4602      	mov	r2, r0
 8013978:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801397c:	e6d1      	b.n	8013722 <_dtoa_r+0x32>
 801397e:	2301      	movs	r3, #1
 8013980:	e7de      	b.n	8013940 <_dtoa_r+0x250>
 8013982:	2300      	movs	r3, #0
 8013984:	9308      	str	r3, [sp, #32]
 8013986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013988:	eb0a 0903 	add.w	r9, sl, r3
 801398c:	f109 0301 	add.w	r3, r9, #1
 8013990:	2b01      	cmp	r3, #1
 8013992:	9301      	str	r3, [sp, #4]
 8013994:	bfb8      	it	lt
 8013996:	2301      	movlt	r3, #1
 8013998:	e7dd      	b.n	8013956 <_dtoa_r+0x266>
 801399a:	2301      	movs	r3, #1
 801399c:	e7f2      	b.n	8013984 <_dtoa_r+0x294>
 801399e:	2501      	movs	r5, #1
 80139a0:	2300      	movs	r3, #0
 80139a2:	9305      	str	r3, [sp, #20]
 80139a4:	9508      	str	r5, [sp, #32]
 80139a6:	f04f 39ff 	mov.w	r9, #4294967295
 80139aa:	2200      	movs	r2, #0
 80139ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80139b0:	2312      	movs	r3, #18
 80139b2:	9209      	str	r2, [sp, #36]	; 0x24
 80139b4:	e7cf      	b.n	8013956 <_dtoa_r+0x266>
 80139b6:	2301      	movs	r3, #1
 80139b8:	9308      	str	r3, [sp, #32]
 80139ba:	e7f4      	b.n	80139a6 <_dtoa_r+0x2b6>
 80139bc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80139c0:	f8cd 9004 	str.w	r9, [sp, #4]
 80139c4:	464b      	mov	r3, r9
 80139c6:	e7c6      	b.n	8013956 <_dtoa_r+0x266>
 80139c8:	3101      	adds	r1, #1
 80139ca:	6041      	str	r1, [r0, #4]
 80139cc:	0052      	lsls	r2, r2, #1
 80139ce:	e7c6      	b.n	801395e <_dtoa_r+0x26e>
 80139d0:	636f4361 	.word	0x636f4361
 80139d4:	3fd287a7 	.word	0x3fd287a7
 80139d8:	8b60c8b3 	.word	0x8b60c8b3
 80139dc:	3fc68a28 	.word	0x3fc68a28
 80139e0:	509f79fb 	.word	0x509f79fb
 80139e4:	3fd34413 	.word	0x3fd34413
 80139e8:	08016d2a 	.word	0x08016d2a
 80139ec:	08016d41 	.word	0x08016d41
 80139f0:	7ff00000 	.word	0x7ff00000
 80139f4:	08016d26 	.word	0x08016d26
 80139f8:	08016d1d 	.word	0x08016d1d
 80139fc:	08016fa2 	.word	0x08016fa2
 8013a00:	3ff80000 	.word	0x3ff80000
 8013a04:	08016eb8 	.word	0x08016eb8
 8013a08:	08016da0 	.word	0x08016da0
 8013a0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013a0e:	9a00      	ldr	r2, [sp, #0]
 8013a10:	601a      	str	r2, [r3, #0]
 8013a12:	9b01      	ldr	r3, [sp, #4]
 8013a14:	2b0e      	cmp	r3, #14
 8013a16:	f200 80ad 	bhi.w	8013b74 <_dtoa_r+0x484>
 8013a1a:	2d00      	cmp	r5, #0
 8013a1c:	f000 80aa 	beq.w	8013b74 <_dtoa_r+0x484>
 8013a20:	f1ba 0f00 	cmp.w	sl, #0
 8013a24:	dd36      	ble.n	8013a94 <_dtoa_r+0x3a4>
 8013a26:	4ac3      	ldr	r2, [pc, #780]	; (8013d34 <_dtoa_r+0x644>)
 8013a28:	f00a 030f 	and.w	r3, sl, #15
 8013a2c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013a30:	ed93 7b00 	vldr	d7, [r3]
 8013a34:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8013a38:	ea4f 172a 	mov.w	r7, sl, asr #4
 8013a3c:	eeb0 8a47 	vmov.f32	s16, s14
 8013a40:	eef0 8a67 	vmov.f32	s17, s15
 8013a44:	d016      	beq.n	8013a74 <_dtoa_r+0x384>
 8013a46:	4bbc      	ldr	r3, [pc, #752]	; (8013d38 <_dtoa_r+0x648>)
 8013a48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013a4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013a50:	f7ec ff0c 	bl	800086c <__aeabi_ddiv>
 8013a54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013a58:	f007 070f 	and.w	r7, r7, #15
 8013a5c:	2503      	movs	r5, #3
 8013a5e:	4eb6      	ldr	r6, [pc, #728]	; (8013d38 <_dtoa_r+0x648>)
 8013a60:	b957      	cbnz	r7, 8013a78 <_dtoa_r+0x388>
 8013a62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013a66:	ec53 2b18 	vmov	r2, r3, d8
 8013a6a:	f7ec feff 	bl	800086c <__aeabi_ddiv>
 8013a6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013a72:	e029      	b.n	8013ac8 <_dtoa_r+0x3d8>
 8013a74:	2502      	movs	r5, #2
 8013a76:	e7f2      	b.n	8013a5e <_dtoa_r+0x36e>
 8013a78:	07f9      	lsls	r1, r7, #31
 8013a7a:	d508      	bpl.n	8013a8e <_dtoa_r+0x39e>
 8013a7c:	ec51 0b18 	vmov	r0, r1, d8
 8013a80:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013a84:	f7ec fdc8 	bl	8000618 <__aeabi_dmul>
 8013a88:	ec41 0b18 	vmov	d8, r0, r1
 8013a8c:	3501      	adds	r5, #1
 8013a8e:	107f      	asrs	r7, r7, #1
 8013a90:	3608      	adds	r6, #8
 8013a92:	e7e5      	b.n	8013a60 <_dtoa_r+0x370>
 8013a94:	f000 80a6 	beq.w	8013be4 <_dtoa_r+0x4f4>
 8013a98:	f1ca 0600 	rsb	r6, sl, #0
 8013a9c:	4ba5      	ldr	r3, [pc, #660]	; (8013d34 <_dtoa_r+0x644>)
 8013a9e:	4fa6      	ldr	r7, [pc, #664]	; (8013d38 <_dtoa_r+0x648>)
 8013aa0:	f006 020f 	and.w	r2, r6, #15
 8013aa4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013ab0:	f7ec fdb2 	bl	8000618 <__aeabi_dmul>
 8013ab4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013ab8:	1136      	asrs	r6, r6, #4
 8013aba:	2300      	movs	r3, #0
 8013abc:	2502      	movs	r5, #2
 8013abe:	2e00      	cmp	r6, #0
 8013ac0:	f040 8085 	bne.w	8013bce <_dtoa_r+0x4de>
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d1d2      	bne.n	8013a6e <_dtoa_r+0x37e>
 8013ac8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	f000 808c 	beq.w	8013be8 <_dtoa_r+0x4f8>
 8013ad0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013ad4:	4b99      	ldr	r3, [pc, #612]	; (8013d3c <_dtoa_r+0x64c>)
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	4630      	mov	r0, r6
 8013ada:	4639      	mov	r1, r7
 8013adc:	f7ed f80e 	bl	8000afc <__aeabi_dcmplt>
 8013ae0:	2800      	cmp	r0, #0
 8013ae2:	f000 8081 	beq.w	8013be8 <_dtoa_r+0x4f8>
 8013ae6:	9b01      	ldr	r3, [sp, #4]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d07d      	beq.n	8013be8 <_dtoa_r+0x4f8>
 8013aec:	f1b9 0f00 	cmp.w	r9, #0
 8013af0:	dd3c      	ble.n	8013b6c <_dtoa_r+0x47c>
 8013af2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8013af6:	9307      	str	r3, [sp, #28]
 8013af8:	2200      	movs	r2, #0
 8013afa:	4b91      	ldr	r3, [pc, #580]	; (8013d40 <_dtoa_r+0x650>)
 8013afc:	4630      	mov	r0, r6
 8013afe:	4639      	mov	r1, r7
 8013b00:	f7ec fd8a 	bl	8000618 <__aeabi_dmul>
 8013b04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013b08:	3501      	adds	r5, #1
 8013b0a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8013b0e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013b12:	4628      	mov	r0, r5
 8013b14:	f7ec fd16 	bl	8000544 <__aeabi_i2d>
 8013b18:	4632      	mov	r2, r6
 8013b1a:	463b      	mov	r3, r7
 8013b1c:	f7ec fd7c 	bl	8000618 <__aeabi_dmul>
 8013b20:	4b88      	ldr	r3, [pc, #544]	; (8013d44 <_dtoa_r+0x654>)
 8013b22:	2200      	movs	r2, #0
 8013b24:	f7ec fbc2 	bl	80002ac <__adddf3>
 8013b28:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8013b2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013b30:	9303      	str	r3, [sp, #12]
 8013b32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d15c      	bne.n	8013bf2 <_dtoa_r+0x502>
 8013b38:	4b83      	ldr	r3, [pc, #524]	; (8013d48 <_dtoa_r+0x658>)
 8013b3a:	2200      	movs	r2, #0
 8013b3c:	4630      	mov	r0, r6
 8013b3e:	4639      	mov	r1, r7
 8013b40:	f7ec fbb2 	bl	80002a8 <__aeabi_dsub>
 8013b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013b48:	4606      	mov	r6, r0
 8013b4a:	460f      	mov	r7, r1
 8013b4c:	f7ec fff4 	bl	8000b38 <__aeabi_dcmpgt>
 8013b50:	2800      	cmp	r0, #0
 8013b52:	f040 8296 	bne.w	8014082 <_dtoa_r+0x992>
 8013b56:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013b5a:	4630      	mov	r0, r6
 8013b5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013b60:	4639      	mov	r1, r7
 8013b62:	f7ec ffcb 	bl	8000afc <__aeabi_dcmplt>
 8013b66:	2800      	cmp	r0, #0
 8013b68:	f040 8288 	bne.w	801407c <_dtoa_r+0x98c>
 8013b6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013b70:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013b74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	f2c0 8158 	blt.w	8013e2c <_dtoa_r+0x73c>
 8013b7c:	f1ba 0f0e 	cmp.w	sl, #14
 8013b80:	f300 8154 	bgt.w	8013e2c <_dtoa_r+0x73c>
 8013b84:	4b6b      	ldr	r3, [pc, #428]	; (8013d34 <_dtoa_r+0x644>)
 8013b86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013b8a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	f280 80e3 	bge.w	8013d5c <_dtoa_r+0x66c>
 8013b96:	9b01      	ldr	r3, [sp, #4]
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	f300 80df 	bgt.w	8013d5c <_dtoa_r+0x66c>
 8013b9e:	f040 826d 	bne.w	801407c <_dtoa_r+0x98c>
 8013ba2:	4b69      	ldr	r3, [pc, #420]	; (8013d48 <_dtoa_r+0x658>)
 8013ba4:	2200      	movs	r2, #0
 8013ba6:	4640      	mov	r0, r8
 8013ba8:	4649      	mov	r1, r9
 8013baa:	f7ec fd35 	bl	8000618 <__aeabi_dmul>
 8013bae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013bb2:	f7ec ffb7 	bl	8000b24 <__aeabi_dcmpge>
 8013bb6:	9e01      	ldr	r6, [sp, #4]
 8013bb8:	4637      	mov	r7, r6
 8013bba:	2800      	cmp	r0, #0
 8013bbc:	f040 8243 	bne.w	8014046 <_dtoa_r+0x956>
 8013bc0:	9d00      	ldr	r5, [sp, #0]
 8013bc2:	2331      	movs	r3, #49	; 0x31
 8013bc4:	f805 3b01 	strb.w	r3, [r5], #1
 8013bc8:	f10a 0a01 	add.w	sl, sl, #1
 8013bcc:	e23f      	b.n	801404e <_dtoa_r+0x95e>
 8013bce:	07f2      	lsls	r2, r6, #31
 8013bd0:	d505      	bpl.n	8013bde <_dtoa_r+0x4ee>
 8013bd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013bd6:	f7ec fd1f 	bl	8000618 <__aeabi_dmul>
 8013bda:	3501      	adds	r5, #1
 8013bdc:	2301      	movs	r3, #1
 8013bde:	1076      	asrs	r6, r6, #1
 8013be0:	3708      	adds	r7, #8
 8013be2:	e76c      	b.n	8013abe <_dtoa_r+0x3ce>
 8013be4:	2502      	movs	r5, #2
 8013be6:	e76f      	b.n	8013ac8 <_dtoa_r+0x3d8>
 8013be8:	9b01      	ldr	r3, [sp, #4]
 8013bea:	f8cd a01c 	str.w	sl, [sp, #28]
 8013bee:	930c      	str	r3, [sp, #48]	; 0x30
 8013bf0:	e78d      	b.n	8013b0e <_dtoa_r+0x41e>
 8013bf2:	9900      	ldr	r1, [sp, #0]
 8013bf4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013bf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013bf8:	4b4e      	ldr	r3, [pc, #312]	; (8013d34 <_dtoa_r+0x644>)
 8013bfa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013bfe:	4401      	add	r1, r0
 8013c00:	9102      	str	r1, [sp, #8]
 8013c02:	9908      	ldr	r1, [sp, #32]
 8013c04:	eeb0 8a47 	vmov.f32	s16, s14
 8013c08:	eef0 8a67 	vmov.f32	s17, s15
 8013c0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013c10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013c14:	2900      	cmp	r1, #0
 8013c16:	d045      	beq.n	8013ca4 <_dtoa_r+0x5b4>
 8013c18:	494c      	ldr	r1, [pc, #304]	; (8013d4c <_dtoa_r+0x65c>)
 8013c1a:	2000      	movs	r0, #0
 8013c1c:	f7ec fe26 	bl	800086c <__aeabi_ddiv>
 8013c20:	ec53 2b18 	vmov	r2, r3, d8
 8013c24:	f7ec fb40 	bl	80002a8 <__aeabi_dsub>
 8013c28:	9d00      	ldr	r5, [sp, #0]
 8013c2a:	ec41 0b18 	vmov	d8, r0, r1
 8013c2e:	4639      	mov	r1, r7
 8013c30:	4630      	mov	r0, r6
 8013c32:	f7ec ffa1 	bl	8000b78 <__aeabi_d2iz>
 8013c36:	900c      	str	r0, [sp, #48]	; 0x30
 8013c38:	f7ec fc84 	bl	8000544 <__aeabi_i2d>
 8013c3c:	4602      	mov	r2, r0
 8013c3e:	460b      	mov	r3, r1
 8013c40:	4630      	mov	r0, r6
 8013c42:	4639      	mov	r1, r7
 8013c44:	f7ec fb30 	bl	80002a8 <__aeabi_dsub>
 8013c48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c4a:	3330      	adds	r3, #48	; 0x30
 8013c4c:	f805 3b01 	strb.w	r3, [r5], #1
 8013c50:	ec53 2b18 	vmov	r2, r3, d8
 8013c54:	4606      	mov	r6, r0
 8013c56:	460f      	mov	r7, r1
 8013c58:	f7ec ff50 	bl	8000afc <__aeabi_dcmplt>
 8013c5c:	2800      	cmp	r0, #0
 8013c5e:	d165      	bne.n	8013d2c <_dtoa_r+0x63c>
 8013c60:	4632      	mov	r2, r6
 8013c62:	463b      	mov	r3, r7
 8013c64:	4935      	ldr	r1, [pc, #212]	; (8013d3c <_dtoa_r+0x64c>)
 8013c66:	2000      	movs	r0, #0
 8013c68:	f7ec fb1e 	bl	80002a8 <__aeabi_dsub>
 8013c6c:	ec53 2b18 	vmov	r2, r3, d8
 8013c70:	f7ec ff44 	bl	8000afc <__aeabi_dcmplt>
 8013c74:	2800      	cmp	r0, #0
 8013c76:	f040 80b9 	bne.w	8013dec <_dtoa_r+0x6fc>
 8013c7a:	9b02      	ldr	r3, [sp, #8]
 8013c7c:	429d      	cmp	r5, r3
 8013c7e:	f43f af75 	beq.w	8013b6c <_dtoa_r+0x47c>
 8013c82:	4b2f      	ldr	r3, [pc, #188]	; (8013d40 <_dtoa_r+0x650>)
 8013c84:	ec51 0b18 	vmov	r0, r1, d8
 8013c88:	2200      	movs	r2, #0
 8013c8a:	f7ec fcc5 	bl	8000618 <__aeabi_dmul>
 8013c8e:	4b2c      	ldr	r3, [pc, #176]	; (8013d40 <_dtoa_r+0x650>)
 8013c90:	ec41 0b18 	vmov	d8, r0, r1
 8013c94:	2200      	movs	r2, #0
 8013c96:	4630      	mov	r0, r6
 8013c98:	4639      	mov	r1, r7
 8013c9a:	f7ec fcbd 	bl	8000618 <__aeabi_dmul>
 8013c9e:	4606      	mov	r6, r0
 8013ca0:	460f      	mov	r7, r1
 8013ca2:	e7c4      	b.n	8013c2e <_dtoa_r+0x53e>
 8013ca4:	ec51 0b17 	vmov	r0, r1, d7
 8013ca8:	f7ec fcb6 	bl	8000618 <__aeabi_dmul>
 8013cac:	9b02      	ldr	r3, [sp, #8]
 8013cae:	9d00      	ldr	r5, [sp, #0]
 8013cb0:	930c      	str	r3, [sp, #48]	; 0x30
 8013cb2:	ec41 0b18 	vmov	d8, r0, r1
 8013cb6:	4639      	mov	r1, r7
 8013cb8:	4630      	mov	r0, r6
 8013cba:	f7ec ff5d 	bl	8000b78 <__aeabi_d2iz>
 8013cbe:	9011      	str	r0, [sp, #68]	; 0x44
 8013cc0:	f7ec fc40 	bl	8000544 <__aeabi_i2d>
 8013cc4:	4602      	mov	r2, r0
 8013cc6:	460b      	mov	r3, r1
 8013cc8:	4630      	mov	r0, r6
 8013cca:	4639      	mov	r1, r7
 8013ccc:	f7ec faec 	bl	80002a8 <__aeabi_dsub>
 8013cd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013cd2:	3330      	adds	r3, #48	; 0x30
 8013cd4:	f805 3b01 	strb.w	r3, [r5], #1
 8013cd8:	9b02      	ldr	r3, [sp, #8]
 8013cda:	429d      	cmp	r5, r3
 8013cdc:	4606      	mov	r6, r0
 8013cde:	460f      	mov	r7, r1
 8013ce0:	f04f 0200 	mov.w	r2, #0
 8013ce4:	d134      	bne.n	8013d50 <_dtoa_r+0x660>
 8013ce6:	4b19      	ldr	r3, [pc, #100]	; (8013d4c <_dtoa_r+0x65c>)
 8013ce8:	ec51 0b18 	vmov	r0, r1, d8
 8013cec:	f7ec fade 	bl	80002ac <__adddf3>
 8013cf0:	4602      	mov	r2, r0
 8013cf2:	460b      	mov	r3, r1
 8013cf4:	4630      	mov	r0, r6
 8013cf6:	4639      	mov	r1, r7
 8013cf8:	f7ec ff1e 	bl	8000b38 <__aeabi_dcmpgt>
 8013cfc:	2800      	cmp	r0, #0
 8013cfe:	d175      	bne.n	8013dec <_dtoa_r+0x6fc>
 8013d00:	ec53 2b18 	vmov	r2, r3, d8
 8013d04:	4911      	ldr	r1, [pc, #68]	; (8013d4c <_dtoa_r+0x65c>)
 8013d06:	2000      	movs	r0, #0
 8013d08:	f7ec face 	bl	80002a8 <__aeabi_dsub>
 8013d0c:	4602      	mov	r2, r0
 8013d0e:	460b      	mov	r3, r1
 8013d10:	4630      	mov	r0, r6
 8013d12:	4639      	mov	r1, r7
 8013d14:	f7ec fef2 	bl	8000afc <__aeabi_dcmplt>
 8013d18:	2800      	cmp	r0, #0
 8013d1a:	f43f af27 	beq.w	8013b6c <_dtoa_r+0x47c>
 8013d1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013d20:	1e6b      	subs	r3, r5, #1
 8013d22:	930c      	str	r3, [sp, #48]	; 0x30
 8013d24:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013d28:	2b30      	cmp	r3, #48	; 0x30
 8013d2a:	d0f8      	beq.n	8013d1e <_dtoa_r+0x62e>
 8013d2c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8013d30:	e04a      	b.n	8013dc8 <_dtoa_r+0x6d8>
 8013d32:	bf00      	nop
 8013d34:	08016eb8 	.word	0x08016eb8
 8013d38:	08016e90 	.word	0x08016e90
 8013d3c:	3ff00000 	.word	0x3ff00000
 8013d40:	40240000 	.word	0x40240000
 8013d44:	401c0000 	.word	0x401c0000
 8013d48:	40140000 	.word	0x40140000
 8013d4c:	3fe00000 	.word	0x3fe00000
 8013d50:	4baf      	ldr	r3, [pc, #700]	; (8014010 <_dtoa_r+0x920>)
 8013d52:	f7ec fc61 	bl	8000618 <__aeabi_dmul>
 8013d56:	4606      	mov	r6, r0
 8013d58:	460f      	mov	r7, r1
 8013d5a:	e7ac      	b.n	8013cb6 <_dtoa_r+0x5c6>
 8013d5c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013d60:	9d00      	ldr	r5, [sp, #0]
 8013d62:	4642      	mov	r2, r8
 8013d64:	464b      	mov	r3, r9
 8013d66:	4630      	mov	r0, r6
 8013d68:	4639      	mov	r1, r7
 8013d6a:	f7ec fd7f 	bl	800086c <__aeabi_ddiv>
 8013d6e:	f7ec ff03 	bl	8000b78 <__aeabi_d2iz>
 8013d72:	9002      	str	r0, [sp, #8]
 8013d74:	f7ec fbe6 	bl	8000544 <__aeabi_i2d>
 8013d78:	4642      	mov	r2, r8
 8013d7a:	464b      	mov	r3, r9
 8013d7c:	f7ec fc4c 	bl	8000618 <__aeabi_dmul>
 8013d80:	4602      	mov	r2, r0
 8013d82:	460b      	mov	r3, r1
 8013d84:	4630      	mov	r0, r6
 8013d86:	4639      	mov	r1, r7
 8013d88:	f7ec fa8e 	bl	80002a8 <__aeabi_dsub>
 8013d8c:	9e02      	ldr	r6, [sp, #8]
 8013d8e:	9f01      	ldr	r7, [sp, #4]
 8013d90:	3630      	adds	r6, #48	; 0x30
 8013d92:	f805 6b01 	strb.w	r6, [r5], #1
 8013d96:	9e00      	ldr	r6, [sp, #0]
 8013d98:	1bae      	subs	r6, r5, r6
 8013d9a:	42b7      	cmp	r7, r6
 8013d9c:	4602      	mov	r2, r0
 8013d9e:	460b      	mov	r3, r1
 8013da0:	d137      	bne.n	8013e12 <_dtoa_r+0x722>
 8013da2:	f7ec fa83 	bl	80002ac <__adddf3>
 8013da6:	4642      	mov	r2, r8
 8013da8:	464b      	mov	r3, r9
 8013daa:	4606      	mov	r6, r0
 8013dac:	460f      	mov	r7, r1
 8013dae:	f7ec fec3 	bl	8000b38 <__aeabi_dcmpgt>
 8013db2:	b9c8      	cbnz	r0, 8013de8 <_dtoa_r+0x6f8>
 8013db4:	4642      	mov	r2, r8
 8013db6:	464b      	mov	r3, r9
 8013db8:	4630      	mov	r0, r6
 8013dba:	4639      	mov	r1, r7
 8013dbc:	f7ec fe94 	bl	8000ae8 <__aeabi_dcmpeq>
 8013dc0:	b110      	cbz	r0, 8013dc8 <_dtoa_r+0x6d8>
 8013dc2:	9b02      	ldr	r3, [sp, #8]
 8013dc4:	07d9      	lsls	r1, r3, #31
 8013dc6:	d40f      	bmi.n	8013de8 <_dtoa_r+0x6f8>
 8013dc8:	4620      	mov	r0, r4
 8013dca:	4659      	mov	r1, fp
 8013dcc:	f000 ff34 	bl	8014c38 <_Bfree>
 8013dd0:	2300      	movs	r3, #0
 8013dd2:	702b      	strb	r3, [r5, #0]
 8013dd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013dd6:	f10a 0001 	add.w	r0, sl, #1
 8013dda:	6018      	str	r0, [r3, #0]
 8013ddc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	f43f acd8 	beq.w	8013794 <_dtoa_r+0xa4>
 8013de4:	601d      	str	r5, [r3, #0]
 8013de6:	e4d5      	b.n	8013794 <_dtoa_r+0xa4>
 8013de8:	f8cd a01c 	str.w	sl, [sp, #28]
 8013dec:	462b      	mov	r3, r5
 8013dee:	461d      	mov	r5, r3
 8013df0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013df4:	2a39      	cmp	r2, #57	; 0x39
 8013df6:	d108      	bne.n	8013e0a <_dtoa_r+0x71a>
 8013df8:	9a00      	ldr	r2, [sp, #0]
 8013dfa:	429a      	cmp	r2, r3
 8013dfc:	d1f7      	bne.n	8013dee <_dtoa_r+0x6fe>
 8013dfe:	9a07      	ldr	r2, [sp, #28]
 8013e00:	9900      	ldr	r1, [sp, #0]
 8013e02:	3201      	adds	r2, #1
 8013e04:	9207      	str	r2, [sp, #28]
 8013e06:	2230      	movs	r2, #48	; 0x30
 8013e08:	700a      	strb	r2, [r1, #0]
 8013e0a:	781a      	ldrb	r2, [r3, #0]
 8013e0c:	3201      	adds	r2, #1
 8013e0e:	701a      	strb	r2, [r3, #0]
 8013e10:	e78c      	b.n	8013d2c <_dtoa_r+0x63c>
 8013e12:	4b7f      	ldr	r3, [pc, #508]	; (8014010 <_dtoa_r+0x920>)
 8013e14:	2200      	movs	r2, #0
 8013e16:	f7ec fbff 	bl	8000618 <__aeabi_dmul>
 8013e1a:	2200      	movs	r2, #0
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	4606      	mov	r6, r0
 8013e20:	460f      	mov	r7, r1
 8013e22:	f7ec fe61 	bl	8000ae8 <__aeabi_dcmpeq>
 8013e26:	2800      	cmp	r0, #0
 8013e28:	d09b      	beq.n	8013d62 <_dtoa_r+0x672>
 8013e2a:	e7cd      	b.n	8013dc8 <_dtoa_r+0x6d8>
 8013e2c:	9a08      	ldr	r2, [sp, #32]
 8013e2e:	2a00      	cmp	r2, #0
 8013e30:	f000 80c4 	beq.w	8013fbc <_dtoa_r+0x8cc>
 8013e34:	9a05      	ldr	r2, [sp, #20]
 8013e36:	2a01      	cmp	r2, #1
 8013e38:	f300 80a8 	bgt.w	8013f8c <_dtoa_r+0x89c>
 8013e3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013e3e:	2a00      	cmp	r2, #0
 8013e40:	f000 80a0 	beq.w	8013f84 <_dtoa_r+0x894>
 8013e44:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013e48:	9e06      	ldr	r6, [sp, #24]
 8013e4a:	4645      	mov	r5, r8
 8013e4c:	9a04      	ldr	r2, [sp, #16]
 8013e4e:	2101      	movs	r1, #1
 8013e50:	441a      	add	r2, r3
 8013e52:	4620      	mov	r0, r4
 8013e54:	4498      	add	r8, r3
 8013e56:	9204      	str	r2, [sp, #16]
 8013e58:	f000 fff4 	bl	8014e44 <__i2b>
 8013e5c:	4607      	mov	r7, r0
 8013e5e:	2d00      	cmp	r5, #0
 8013e60:	dd0b      	ble.n	8013e7a <_dtoa_r+0x78a>
 8013e62:	9b04      	ldr	r3, [sp, #16]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	dd08      	ble.n	8013e7a <_dtoa_r+0x78a>
 8013e68:	42ab      	cmp	r3, r5
 8013e6a:	9a04      	ldr	r2, [sp, #16]
 8013e6c:	bfa8      	it	ge
 8013e6e:	462b      	movge	r3, r5
 8013e70:	eba8 0803 	sub.w	r8, r8, r3
 8013e74:	1aed      	subs	r5, r5, r3
 8013e76:	1ad3      	subs	r3, r2, r3
 8013e78:	9304      	str	r3, [sp, #16]
 8013e7a:	9b06      	ldr	r3, [sp, #24]
 8013e7c:	b1fb      	cbz	r3, 8013ebe <_dtoa_r+0x7ce>
 8013e7e:	9b08      	ldr	r3, [sp, #32]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	f000 809f 	beq.w	8013fc4 <_dtoa_r+0x8d4>
 8013e86:	2e00      	cmp	r6, #0
 8013e88:	dd11      	ble.n	8013eae <_dtoa_r+0x7be>
 8013e8a:	4639      	mov	r1, r7
 8013e8c:	4632      	mov	r2, r6
 8013e8e:	4620      	mov	r0, r4
 8013e90:	f001 f894 	bl	8014fbc <__pow5mult>
 8013e94:	465a      	mov	r2, fp
 8013e96:	4601      	mov	r1, r0
 8013e98:	4607      	mov	r7, r0
 8013e9a:	4620      	mov	r0, r4
 8013e9c:	f000 ffe8 	bl	8014e70 <__multiply>
 8013ea0:	4659      	mov	r1, fp
 8013ea2:	9007      	str	r0, [sp, #28]
 8013ea4:	4620      	mov	r0, r4
 8013ea6:	f000 fec7 	bl	8014c38 <_Bfree>
 8013eaa:	9b07      	ldr	r3, [sp, #28]
 8013eac:	469b      	mov	fp, r3
 8013eae:	9b06      	ldr	r3, [sp, #24]
 8013eb0:	1b9a      	subs	r2, r3, r6
 8013eb2:	d004      	beq.n	8013ebe <_dtoa_r+0x7ce>
 8013eb4:	4659      	mov	r1, fp
 8013eb6:	4620      	mov	r0, r4
 8013eb8:	f001 f880 	bl	8014fbc <__pow5mult>
 8013ebc:	4683      	mov	fp, r0
 8013ebe:	2101      	movs	r1, #1
 8013ec0:	4620      	mov	r0, r4
 8013ec2:	f000 ffbf 	bl	8014e44 <__i2b>
 8013ec6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	4606      	mov	r6, r0
 8013ecc:	dd7c      	ble.n	8013fc8 <_dtoa_r+0x8d8>
 8013ece:	461a      	mov	r2, r3
 8013ed0:	4601      	mov	r1, r0
 8013ed2:	4620      	mov	r0, r4
 8013ed4:	f001 f872 	bl	8014fbc <__pow5mult>
 8013ed8:	9b05      	ldr	r3, [sp, #20]
 8013eda:	2b01      	cmp	r3, #1
 8013edc:	4606      	mov	r6, r0
 8013ede:	dd76      	ble.n	8013fce <_dtoa_r+0x8de>
 8013ee0:	2300      	movs	r3, #0
 8013ee2:	9306      	str	r3, [sp, #24]
 8013ee4:	6933      	ldr	r3, [r6, #16]
 8013ee6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013eea:	6918      	ldr	r0, [r3, #16]
 8013eec:	f000 ff5a 	bl	8014da4 <__hi0bits>
 8013ef0:	f1c0 0020 	rsb	r0, r0, #32
 8013ef4:	9b04      	ldr	r3, [sp, #16]
 8013ef6:	4418      	add	r0, r3
 8013ef8:	f010 001f 	ands.w	r0, r0, #31
 8013efc:	f000 8086 	beq.w	801400c <_dtoa_r+0x91c>
 8013f00:	f1c0 0320 	rsb	r3, r0, #32
 8013f04:	2b04      	cmp	r3, #4
 8013f06:	dd7f      	ble.n	8014008 <_dtoa_r+0x918>
 8013f08:	f1c0 001c 	rsb	r0, r0, #28
 8013f0c:	9b04      	ldr	r3, [sp, #16]
 8013f0e:	4403      	add	r3, r0
 8013f10:	4480      	add	r8, r0
 8013f12:	4405      	add	r5, r0
 8013f14:	9304      	str	r3, [sp, #16]
 8013f16:	f1b8 0f00 	cmp.w	r8, #0
 8013f1a:	dd05      	ble.n	8013f28 <_dtoa_r+0x838>
 8013f1c:	4659      	mov	r1, fp
 8013f1e:	4642      	mov	r2, r8
 8013f20:	4620      	mov	r0, r4
 8013f22:	f001 f8a5 	bl	8015070 <__lshift>
 8013f26:	4683      	mov	fp, r0
 8013f28:	9b04      	ldr	r3, [sp, #16]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	dd05      	ble.n	8013f3a <_dtoa_r+0x84a>
 8013f2e:	4631      	mov	r1, r6
 8013f30:	461a      	mov	r2, r3
 8013f32:	4620      	mov	r0, r4
 8013f34:	f001 f89c 	bl	8015070 <__lshift>
 8013f38:	4606      	mov	r6, r0
 8013f3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d069      	beq.n	8014014 <_dtoa_r+0x924>
 8013f40:	4631      	mov	r1, r6
 8013f42:	4658      	mov	r0, fp
 8013f44:	f001 f900 	bl	8015148 <__mcmp>
 8013f48:	2800      	cmp	r0, #0
 8013f4a:	da63      	bge.n	8014014 <_dtoa_r+0x924>
 8013f4c:	2300      	movs	r3, #0
 8013f4e:	4659      	mov	r1, fp
 8013f50:	220a      	movs	r2, #10
 8013f52:	4620      	mov	r0, r4
 8013f54:	f000 fe92 	bl	8014c7c <__multadd>
 8013f58:	9b08      	ldr	r3, [sp, #32]
 8013f5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013f5e:	4683      	mov	fp, r0
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	f000 818f 	beq.w	8014284 <_dtoa_r+0xb94>
 8013f66:	4639      	mov	r1, r7
 8013f68:	2300      	movs	r3, #0
 8013f6a:	220a      	movs	r2, #10
 8013f6c:	4620      	mov	r0, r4
 8013f6e:	f000 fe85 	bl	8014c7c <__multadd>
 8013f72:	f1b9 0f00 	cmp.w	r9, #0
 8013f76:	4607      	mov	r7, r0
 8013f78:	f300 808e 	bgt.w	8014098 <_dtoa_r+0x9a8>
 8013f7c:	9b05      	ldr	r3, [sp, #20]
 8013f7e:	2b02      	cmp	r3, #2
 8013f80:	dc50      	bgt.n	8014024 <_dtoa_r+0x934>
 8013f82:	e089      	b.n	8014098 <_dtoa_r+0x9a8>
 8013f84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013f86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013f8a:	e75d      	b.n	8013e48 <_dtoa_r+0x758>
 8013f8c:	9b01      	ldr	r3, [sp, #4]
 8013f8e:	1e5e      	subs	r6, r3, #1
 8013f90:	9b06      	ldr	r3, [sp, #24]
 8013f92:	42b3      	cmp	r3, r6
 8013f94:	bfbf      	itttt	lt
 8013f96:	9b06      	ldrlt	r3, [sp, #24]
 8013f98:	9606      	strlt	r6, [sp, #24]
 8013f9a:	1af2      	sublt	r2, r6, r3
 8013f9c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8013f9e:	bfb6      	itet	lt
 8013fa0:	189b      	addlt	r3, r3, r2
 8013fa2:	1b9e      	subge	r6, r3, r6
 8013fa4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8013fa6:	9b01      	ldr	r3, [sp, #4]
 8013fa8:	bfb8      	it	lt
 8013faa:	2600      	movlt	r6, #0
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	bfb5      	itete	lt
 8013fb0:	eba8 0503 	sublt.w	r5, r8, r3
 8013fb4:	9b01      	ldrge	r3, [sp, #4]
 8013fb6:	2300      	movlt	r3, #0
 8013fb8:	4645      	movge	r5, r8
 8013fba:	e747      	b.n	8013e4c <_dtoa_r+0x75c>
 8013fbc:	9e06      	ldr	r6, [sp, #24]
 8013fbe:	9f08      	ldr	r7, [sp, #32]
 8013fc0:	4645      	mov	r5, r8
 8013fc2:	e74c      	b.n	8013e5e <_dtoa_r+0x76e>
 8013fc4:	9a06      	ldr	r2, [sp, #24]
 8013fc6:	e775      	b.n	8013eb4 <_dtoa_r+0x7c4>
 8013fc8:	9b05      	ldr	r3, [sp, #20]
 8013fca:	2b01      	cmp	r3, #1
 8013fcc:	dc18      	bgt.n	8014000 <_dtoa_r+0x910>
 8013fce:	9b02      	ldr	r3, [sp, #8]
 8013fd0:	b9b3      	cbnz	r3, 8014000 <_dtoa_r+0x910>
 8013fd2:	9b03      	ldr	r3, [sp, #12]
 8013fd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013fd8:	b9a3      	cbnz	r3, 8014004 <_dtoa_r+0x914>
 8013fda:	9b03      	ldr	r3, [sp, #12]
 8013fdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013fe0:	0d1b      	lsrs	r3, r3, #20
 8013fe2:	051b      	lsls	r3, r3, #20
 8013fe4:	b12b      	cbz	r3, 8013ff2 <_dtoa_r+0x902>
 8013fe6:	9b04      	ldr	r3, [sp, #16]
 8013fe8:	3301      	adds	r3, #1
 8013fea:	9304      	str	r3, [sp, #16]
 8013fec:	f108 0801 	add.w	r8, r8, #1
 8013ff0:	2301      	movs	r3, #1
 8013ff2:	9306      	str	r3, [sp, #24]
 8013ff4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	f47f af74 	bne.w	8013ee4 <_dtoa_r+0x7f4>
 8013ffc:	2001      	movs	r0, #1
 8013ffe:	e779      	b.n	8013ef4 <_dtoa_r+0x804>
 8014000:	2300      	movs	r3, #0
 8014002:	e7f6      	b.n	8013ff2 <_dtoa_r+0x902>
 8014004:	9b02      	ldr	r3, [sp, #8]
 8014006:	e7f4      	b.n	8013ff2 <_dtoa_r+0x902>
 8014008:	d085      	beq.n	8013f16 <_dtoa_r+0x826>
 801400a:	4618      	mov	r0, r3
 801400c:	301c      	adds	r0, #28
 801400e:	e77d      	b.n	8013f0c <_dtoa_r+0x81c>
 8014010:	40240000 	.word	0x40240000
 8014014:	9b01      	ldr	r3, [sp, #4]
 8014016:	2b00      	cmp	r3, #0
 8014018:	dc38      	bgt.n	801408c <_dtoa_r+0x99c>
 801401a:	9b05      	ldr	r3, [sp, #20]
 801401c:	2b02      	cmp	r3, #2
 801401e:	dd35      	ble.n	801408c <_dtoa_r+0x99c>
 8014020:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8014024:	f1b9 0f00 	cmp.w	r9, #0
 8014028:	d10d      	bne.n	8014046 <_dtoa_r+0x956>
 801402a:	4631      	mov	r1, r6
 801402c:	464b      	mov	r3, r9
 801402e:	2205      	movs	r2, #5
 8014030:	4620      	mov	r0, r4
 8014032:	f000 fe23 	bl	8014c7c <__multadd>
 8014036:	4601      	mov	r1, r0
 8014038:	4606      	mov	r6, r0
 801403a:	4658      	mov	r0, fp
 801403c:	f001 f884 	bl	8015148 <__mcmp>
 8014040:	2800      	cmp	r0, #0
 8014042:	f73f adbd 	bgt.w	8013bc0 <_dtoa_r+0x4d0>
 8014046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014048:	9d00      	ldr	r5, [sp, #0]
 801404a:	ea6f 0a03 	mvn.w	sl, r3
 801404e:	f04f 0800 	mov.w	r8, #0
 8014052:	4631      	mov	r1, r6
 8014054:	4620      	mov	r0, r4
 8014056:	f000 fdef 	bl	8014c38 <_Bfree>
 801405a:	2f00      	cmp	r7, #0
 801405c:	f43f aeb4 	beq.w	8013dc8 <_dtoa_r+0x6d8>
 8014060:	f1b8 0f00 	cmp.w	r8, #0
 8014064:	d005      	beq.n	8014072 <_dtoa_r+0x982>
 8014066:	45b8      	cmp	r8, r7
 8014068:	d003      	beq.n	8014072 <_dtoa_r+0x982>
 801406a:	4641      	mov	r1, r8
 801406c:	4620      	mov	r0, r4
 801406e:	f000 fde3 	bl	8014c38 <_Bfree>
 8014072:	4639      	mov	r1, r7
 8014074:	4620      	mov	r0, r4
 8014076:	f000 fddf 	bl	8014c38 <_Bfree>
 801407a:	e6a5      	b.n	8013dc8 <_dtoa_r+0x6d8>
 801407c:	2600      	movs	r6, #0
 801407e:	4637      	mov	r7, r6
 8014080:	e7e1      	b.n	8014046 <_dtoa_r+0x956>
 8014082:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8014084:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8014088:	4637      	mov	r7, r6
 801408a:	e599      	b.n	8013bc0 <_dtoa_r+0x4d0>
 801408c:	9b08      	ldr	r3, [sp, #32]
 801408e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8014092:	2b00      	cmp	r3, #0
 8014094:	f000 80fd 	beq.w	8014292 <_dtoa_r+0xba2>
 8014098:	2d00      	cmp	r5, #0
 801409a:	dd05      	ble.n	80140a8 <_dtoa_r+0x9b8>
 801409c:	4639      	mov	r1, r7
 801409e:	462a      	mov	r2, r5
 80140a0:	4620      	mov	r0, r4
 80140a2:	f000 ffe5 	bl	8015070 <__lshift>
 80140a6:	4607      	mov	r7, r0
 80140a8:	9b06      	ldr	r3, [sp, #24]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d05c      	beq.n	8014168 <_dtoa_r+0xa78>
 80140ae:	6879      	ldr	r1, [r7, #4]
 80140b0:	4620      	mov	r0, r4
 80140b2:	f000 fd81 	bl	8014bb8 <_Balloc>
 80140b6:	4605      	mov	r5, r0
 80140b8:	b928      	cbnz	r0, 80140c6 <_dtoa_r+0x9d6>
 80140ba:	4b80      	ldr	r3, [pc, #512]	; (80142bc <_dtoa_r+0xbcc>)
 80140bc:	4602      	mov	r2, r0
 80140be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80140c2:	f7ff bb2e 	b.w	8013722 <_dtoa_r+0x32>
 80140c6:	693a      	ldr	r2, [r7, #16]
 80140c8:	3202      	adds	r2, #2
 80140ca:	0092      	lsls	r2, r2, #2
 80140cc:	f107 010c 	add.w	r1, r7, #12
 80140d0:	300c      	adds	r0, #12
 80140d2:	f7fd fa55 	bl	8011580 <memcpy>
 80140d6:	2201      	movs	r2, #1
 80140d8:	4629      	mov	r1, r5
 80140da:	4620      	mov	r0, r4
 80140dc:	f000 ffc8 	bl	8015070 <__lshift>
 80140e0:	9b00      	ldr	r3, [sp, #0]
 80140e2:	3301      	adds	r3, #1
 80140e4:	9301      	str	r3, [sp, #4]
 80140e6:	9b00      	ldr	r3, [sp, #0]
 80140e8:	444b      	add	r3, r9
 80140ea:	9307      	str	r3, [sp, #28]
 80140ec:	9b02      	ldr	r3, [sp, #8]
 80140ee:	f003 0301 	and.w	r3, r3, #1
 80140f2:	46b8      	mov	r8, r7
 80140f4:	9306      	str	r3, [sp, #24]
 80140f6:	4607      	mov	r7, r0
 80140f8:	9b01      	ldr	r3, [sp, #4]
 80140fa:	4631      	mov	r1, r6
 80140fc:	3b01      	subs	r3, #1
 80140fe:	4658      	mov	r0, fp
 8014100:	9302      	str	r3, [sp, #8]
 8014102:	f7ff fa69 	bl	80135d8 <quorem>
 8014106:	4603      	mov	r3, r0
 8014108:	3330      	adds	r3, #48	; 0x30
 801410a:	9004      	str	r0, [sp, #16]
 801410c:	4641      	mov	r1, r8
 801410e:	4658      	mov	r0, fp
 8014110:	9308      	str	r3, [sp, #32]
 8014112:	f001 f819 	bl	8015148 <__mcmp>
 8014116:	463a      	mov	r2, r7
 8014118:	4681      	mov	r9, r0
 801411a:	4631      	mov	r1, r6
 801411c:	4620      	mov	r0, r4
 801411e:	f001 f82f 	bl	8015180 <__mdiff>
 8014122:	68c2      	ldr	r2, [r0, #12]
 8014124:	9b08      	ldr	r3, [sp, #32]
 8014126:	4605      	mov	r5, r0
 8014128:	bb02      	cbnz	r2, 801416c <_dtoa_r+0xa7c>
 801412a:	4601      	mov	r1, r0
 801412c:	4658      	mov	r0, fp
 801412e:	f001 f80b 	bl	8015148 <__mcmp>
 8014132:	9b08      	ldr	r3, [sp, #32]
 8014134:	4602      	mov	r2, r0
 8014136:	4629      	mov	r1, r5
 8014138:	4620      	mov	r0, r4
 801413a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801413e:	f000 fd7b 	bl	8014c38 <_Bfree>
 8014142:	9b05      	ldr	r3, [sp, #20]
 8014144:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014146:	9d01      	ldr	r5, [sp, #4]
 8014148:	ea43 0102 	orr.w	r1, r3, r2
 801414c:	9b06      	ldr	r3, [sp, #24]
 801414e:	430b      	orrs	r3, r1
 8014150:	9b08      	ldr	r3, [sp, #32]
 8014152:	d10d      	bne.n	8014170 <_dtoa_r+0xa80>
 8014154:	2b39      	cmp	r3, #57	; 0x39
 8014156:	d029      	beq.n	80141ac <_dtoa_r+0xabc>
 8014158:	f1b9 0f00 	cmp.w	r9, #0
 801415c:	dd01      	ble.n	8014162 <_dtoa_r+0xa72>
 801415e:	9b04      	ldr	r3, [sp, #16]
 8014160:	3331      	adds	r3, #49	; 0x31
 8014162:	9a02      	ldr	r2, [sp, #8]
 8014164:	7013      	strb	r3, [r2, #0]
 8014166:	e774      	b.n	8014052 <_dtoa_r+0x962>
 8014168:	4638      	mov	r0, r7
 801416a:	e7b9      	b.n	80140e0 <_dtoa_r+0x9f0>
 801416c:	2201      	movs	r2, #1
 801416e:	e7e2      	b.n	8014136 <_dtoa_r+0xa46>
 8014170:	f1b9 0f00 	cmp.w	r9, #0
 8014174:	db06      	blt.n	8014184 <_dtoa_r+0xa94>
 8014176:	9905      	ldr	r1, [sp, #20]
 8014178:	ea41 0909 	orr.w	r9, r1, r9
 801417c:	9906      	ldr	r1, [sp, #24]
 801417e:	ea59 0101 	orrs.w	r1, r9, r1
 8014182:	d120      	bne.n	80141c6 <_dtoa_r+0xad6>
 8014184:	2a00      	cmp	r2, #0
 8014186:	ddec      	ble.n	8014162 <_dtoa_r+0xa72>
 8014188:	4659      	mov	r1, fp
 801418a:	2201      	movs	r2, #1
 801418c:	4620      	mov	r0, r4
 801418e:	9301      	str	r3, [sp, #4]
 8014190:	f000 ff6e 	bl	8015070 <__lshift>
 8014194:	4631      	mov	r1, r6
 8014196:	4683      	mov	fp, r0
 8014198:	f000 ffd6 	bl	8015148 <__mcmp>
 801419c:	2800      	cmp	r0, #0
 801419e:	9b01      	ldr	r3, [sp, #4]
 80141a0:	dc02      	bgt.n	80141a8 <_dtoa_r+0xab8>
 80141a2:	d1de      	bne.n	8014162 <_dtoa_r+0xa72>
 80141a4:	07da      	lsls	r2, r3, #31
 80141a6:	d5dc      	bpl.n	8014162 <_dtoa_r+0xa72>
 80141a8:	2b39      	cmp	r3, #57	; 0x39
 80141aa:	d1d8      	bne.n	801415e <_dtoa_r+0xa6e>
 80141ac:	9a02      	ldr	r2, [sp, #8]
 80141ae:	2339      	movs	r3, #57	; 0x39
 80141b0:	7013      	strb	r3, [r2, #0]
 80141b2:	462b      	mov	r3, r5
 80141b4:	461d      	mov	r5, r3
 80141b6:	3b01      	subs	r3, #1
 80141b8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80141bc:	2a39      	cmp	r2, #57	; 0x39
 80141be:	d050      	beq.n	8014262 <_dtoa_r+0xb72>
 80141c0:	3201      	adds	r2, #1
 80141c2:	701a      	strb	r2, [r3, #0]
 80141c4:	e745      	b.n	8014052 <_dtoa_r+0x962>
 80141c6:	2a00      	cmp	r2, #0
 80141c8:	dd03      	ble.n	80141d2 <_dtoa_r+0xae2>
 80141ca:	2b39      	cmp	r3, #57	; 0x39
 80141cc:	d0ee      	beq.n	80141ac <_dtoa_r+0xabc>
 80141ce:	3301      	adds	r3, #1
 80141d0:	e7c7      	b.n	8014162 <_dtoa_r+0xa72>
 80141d2:	9a01      	ldr	r2, [sp, #4]
 80141d4:	9907      	ldr	r1, [sp, #28]
 80141d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80141da:	428a      	cmp	r2, r1
 80141dc:	d02a      	beq.n	8014234 <_dtoa_r+0xb44>
 80141de:	4659      	mov	r1, fp
 80141e0:	2300      	movs	r3, #0
 80141e2:	220a      	movs	r2, #10
 80141e4:	4620      	mov	r0, r4
 80141e6:	f000 fd49 	bl	8014c7c <__multadd>
 80141ea:	45b8      	cmp	r8, r7
 80141ec:	4683      	mov	fp, r0
 80141ee:	f04f 0300 	mov.w	r3, #0
 80141f2:	f04f 020a 	mov.w	r2, #10
 80141f6:	4641      	mov	r1, r8
 80141f8:	4620      	mov	r0, r4
 80141fa:	d107      	bne.n	801420c <_dtoa_r+0xb1c>
 80141fc:	f000 fd3e 	bl	8014c7c <__multadd>
 8014200:	4680      	mov	r8, r0
 8014202:	4607      	mov	r7, r0
 8014204:	9b01      	ldr	r3, [sp, #4]
 8014206:	3301      	adds	r3, #1
 8014208:	9301      	str	r3, [sp, #4]
 801420a:	e775      	b.n	80140f8 <_dtoa_r+0xa08>
 801420c:	f000 fd36 	bl	8014c7c <__multadd>
 8014210:	4639      	mov	r1, r7
 8014212:	4680      	mov	r8, r0
 8014214:	2300      	movs	r3, #0
 8014216:	220a      	movs	r2, #10
 8014218:	4620      	mov	r0, r4
 801421a:	f000 fd2f 	bl	8014c7c <__multadd>
 801421e:	4607      	mov	r7, r0
 8014220:	e7f0      	b.n	8014204 <_dtoa_r+0xb14>
 8014222:	f1b9 0f00 	cmp.w	r9, #0
 8014226:	9a00      	ldr	r2, [sp, #0]
 8014228:	bfcc      	ite	gt
 801422a:	464d      	movgt	r5, r9
 801422c:	2501      	movle	r5, #1
 801422e:	4415      	add	r5, r2
 8014230:	f04f 0800 	mov.w	r8, #0
 8014234:	4659      	mov	r1, fp
 8014236:	2201      	movs	r2, #1
 8014238:	4620      	mov	r0, r4
 801423a:	9301      	str	r3, [sp, #4]
 801423c:	f000 ff18 	bl	8015070 <__lshift>
 8014240:	4631      	mov	r1, r6
 8014242:	4683      	mov	fp, r0
 8014244:	f000 ff80 	bl	8015148 <__mcmp>
 8014248:	2800      	cmp	r0, #0
 801424a:	dcb2      	bgt.n	80141b2 <_dtoa_r+0xac2>
 801424c:	d102      	bne.n	8014254 <_dtoa_r+0xb64>
 801424e:	9b01      	ldr	r3, [sp, #4]
 8014250:	07db      	lsls	r3, r3, #31
 8014252:	d4ae      	bmi.n	80141b2 <_dtoa_r+0xac2>
 8014254:	462b      	mov	r3, r5
 8014256:	461d      	mov	r5, r3
 8014258:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801425c:	2a30      	cmp	r2, #48	; 0x30
 801425e:	d0fa      	beq.n	8014256 <_dtoa_r+0xb66>
 8014260:	e6f7      	b.n	8014052 <_dtoa_r+0x962>
 8014262:	9a00      	ldr	r2, [sp, #0]
 8014264:	429a      	cmp	r2, r3
 8014266:	d1a5      	bne.n	80141b4 <_dtoa_r+0xac4>
 8014268:	f10a 0a01 	add.w	sl, sl, #1
 801426c:	2331      	movs	r3, #49	; 0x31
 801426e:	e779      	b.n	8014164 <_dtoa_r+0xa74>
 8014270:	4b13      	ldr	r3, [pc, #76]	; (80142c0 <_dtoa_r+0xbd0>)
 8014272:	f7ff baaf 	b.w	80137d4 <_dtoa_r+0xe4>
 8014276:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014278:	2b00      	cmp	r3, #0
 801427a:	f47f aa86 	bne.w	801378a <_dtoa_r+0x9a>
 801427e:	4b11      	ldr	r3, [pc, #68]	; (80142c4 <_dtoa_r+0xbd4>)
 8014280:	f7ff baa8 	b.w	80137d4 <_dtoa_r+0xe4>
 8014284:	f1b9 0f00 	cmp.w	r9, #0
 8014288:	dc03      	bgt.n	8014292 <_dtoa_r+0xba2>
 801428a:	9b05      	ldr	r3, [sp, #20]
 801428c:	2b02      	cmp	r3, #2
 801428e:	f73f aec9 	bgt.w	8014024 <_dtoa_r+0x934>
 8014292:	9d00      	ldr	r5, [sp, #0]
 8014294:	4631      	mov	r1, r6
 8014296:	4658      	mov	r0, fp
 8014298:	f7ff f99e 	bl	80135d8 <quorem>
 801429c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80142a0:	f805 3b01 	strb.w	r3, [r5], #1
 80142a4:	9a00      	ldr	r2, [sp, #0]
 80142a6:	1aaa      	subs	r2, r5, r2
 80142a8:	4591      	cmp	r9, r2
 80142aa:	ddba      	ble.n	8014222 <_dtoa_r+0xb32>
 80142ac:	4659      	mov	r1, fp
 80142ae:	2300      	movs	r3, #0
 80142b0:	220a      	movs	r2, #10
 80142b2:	4620      	mov	r0, r4
 80142b4:	f000 fce2 	bl	8014c7c <__multadd>
 80142b8:	4683      	mov	fp, r0
 80142ba:	e7eb      	b.n	8014294 <_dtoa_r+0xba4>
 80142bc:	08016da0 	.word	0x08016da0
 80142c0:	08016fa1 	.word	0x08016fa1
 80142c4:	08016d1d 	.word	0x08016d1d

080142c8 <__sflush_r>:
 80142c8:	898a      	ldrh	r2, [r1, #12]
 80142ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142ce:	4605      	mov	r5, r0
 80142d0:	0710      	lsls	r0, r2, #28
 80142d2:	460c      	mov	r4, r1
 80142d4:	d458      	bmi.n	8014388 <__sflush_r+0xc0>
 80142d6:	684b      	ldr	r3, [r1, #4]
 80142d8:	2b00      	cmp	r3, #0
 80142da:	dc05      	bgt.n	80142e8 <__sflush_r+0x20>
 80142dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80142de:	2b00      	cmp	r3, #0
 80142e0:	dc02      	bgt.n	80142e8 <__sflush_r+0x20>
 80142e2:	2000      	movs	r0, #0
 80142e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80142ea:	2e00      	cmp	r6, #0
 80142ec:	d0f9      	beq.n	80142e2 <__sflush_r+0x1a>
 80142ee:	2300      	movs	r3, #0
 80142f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80142f4:	682f      	ldr	r7, [r5, #0]
 80142f6:	602b      	str	r3, [r5, #0]
 80142f8:	d032      	beq.n	8014360 <__sflush_r+0x98>
 80142fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80142fc:	89a3      	ldrh	r3, [r4, #12]
 80142fe:	075a      	lsls	r2, r3, #29
 8014300:	d505      	bpl.n	801430e <__sflush_r+0x46>
 8014302:	6863      	ldr	r3, [r4, #4]
 8014304:	1ac0      	subs	r0, r0, r3
 8014306:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014308:	b10b      	cbz	r3, 801430e <__sflush_r+0x46>
 801430a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801430c:	1ac0      	subs	r0, r0, r3
 801430e:	2300      	movs	r3, #0
 8014310:	4602      	mov	r2, r0
 8014312:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014314:	6a21      	ldr	r1, [r4, #32]
 8014316:	4628      	mov	r0, r5
 8014318:	47b0      	blx	r6
 801431a:	1c43      	adds	r3, r0, #1
 801431c:	89a3      	ldrh	r3, [r4, #12]
 801431e:	d106      	bne.n	801432e <__sflush_r+0x66>
 8014320:	6829      	ldr	r1, [r5, #0]
 8014322:	291d      	cmp	r1, #29
 8014324:	d82c      	bhi.n	8014380 <__sflush_r+0xb8>
 8014326:	4a2a      	ldr	r2, [pc, #168]	; (80143d0 <__sflush_r+0x108>)
 8014328:	40ca      	lsrs	r2, r1
 801432a:	07d6      	lsls	r6, r2, #31
 801432c:	d528      	bpl.n	8014380 <__sflush_r+0xb8>
 801432e:	2200      	movs	r2, #0
 8014330:	6062      	str	r2, [r4, #4]
 8014332:	04d9      	lsls	r1, r3, #19
 8014334:	6922      	ldr	r2, [r4, #16]
 8014336:	6022      	str	r2, [r4, #0]
 8014338:	d504      	bpl.n	8014344 <__sflush_r+0x7c>
 801433a:	1c42      	adds	r2, r0, #1
 801433c:	d101      	bne.n	8014342 <__sflush_r+0x7a>
 801433e:	682b      	ldr	r3, [r5, #0]
 8014340:	b903      	cbnz	r3, 8014344 <__sflush_r+0x7c>
 8014342:	6560      	str	r0, [r4, #84]	; 0x54
 8014344:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014346:	602f      	str	r7, [r5, #0]
 8014348:	2900      	cmp	r1, #0
 801434a:	d0ca      	beq.n	80142e2 <__sflush_r+0x1a>
 801434c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014350:	4299      	cmp	r1, r3
 8014352:	d002      	beq.n	801435a <__sflush_r+0x92>
 8014354:	4628      	mov	r0, r5
 8014356:	f7fd f943 	bl	80115e0 <_free_r>
 801435a:	2000      	movs	r0, #0
 801435c:	6360      	str	r0, [r4, #52]	; 0x34
 801435e:	e7c1      	b.n	80142e4 <__sflush_r+0x1c>
 8014360:	6a21      	ldr	r1, [r4, #32]
 8014362:	2301      	movs	r3, #1
 8014364:	4628      	mov	r0, r5
 8014366:	47b0      	blx	r6
 8014368:	1c41      	adds	r1, r0, #1
 801436a:	d1c7      	bne.n	80142fc <__sflush_r+0x34>
 801436c:	682b      	ldr	r3, [r5, #0]
 801436e:	2b00      	cmp	r3, #0
 8014370:	d0c4      	beq.n	80142fc <__sflush_r+0x34>
 8014372:	2b1d      	cmp	r3, #29
 8014374:	d001      	beq.n	801437a <__sflush_r+0xb2>
 8014376:	2b16      	cmp	r3, #22
 8014378:	d101      	bne.n	801437e <__sflush_r+0xb6>
 801437a:	602f      	str	r7, [r5, #0]
 801437c:	e7b1      	b.n	80142e2 <__sflush_r+0x1a>
 801437e:	89a3      	ldrh	r3, [r4, #12]
 8014380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014384:	81a3      	strh	r3, [r4, #12]
 8014386:	e7ad      	b.n	80142e4 <__sflush_r+0x1c>
 8014388:	690f      	ldr	r7, [r1, #16]
 801438a:	2f00      	cmp	r7, #0
 801438c:	d0a9      	beq.n	80142e2 <__sflush_r+0x1a>
 801438e:	0793      	lsls	r3, r2, #30
 8014390:	680e      	ldr	r6, [r1, #0]
 8014392:	bf08      	it	eq
 8014394:	694b      	ldreq	r3, [r1, #20]
 8014396:	600f      	str	r7, [r1, #0]
 8014398:	bf18      	it	ne
 801439a:	2300      	movne	r3, #0
 801439c:	eba6 0807 	sub.w	r8, r6, r7
 80143a0:	608b      	str	r3, [r1, #8]
 80143a2:	f1b8 0f00 	cmp.w	r8, #0
 80143a6:	dd9c      	ble.n	80142e2 <__sflush_r+0x1a>
 80143a8:	6a21      	ldr	r1, [r4, #32]
 80143aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80143ac:	4643      	mov	r3, r8
 80143ae:	463a      	mov	r2, r7
 80143b0:	4628      	mov	r0, r5
 80143b2:	47b0      	blx	r6
 80143b4:	2800      	cmp	r0, #0
 80143b6:	dc06      	bgt.n	80143c6 <__sflush_r+0xfe>
 80143b8:	89a3      	ldrh	r3, [r4, #12]
 80143ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80143be:	81a3      	strh	r3, [r4, #12]
 80143c0:	f04f 30ff 	mov.w	r0, #4294967295
 80143c4:	e78e      	b.n	80142e4 <__sflush_r+0x1c>
 80143c6:	4407      	add	r7, r0
 80143c8:	eba8 0800 	sub.w	r8, r8, r0
 80143cc:	e7e9      	b.n	80143a2 <__sflush_r+0xda>
 80143ce:	bf00      	nop
 80143d0:	20400001 	.word	0x20400001

080143d4 <_fflush_r>:
 80143d4:	b538      	push	{r3, r4, r5, lr}
 80143d6:	690b      	ldr	r3, [r1, #16]
 80143d8:	4605      	mov	r5, r0
 80143da:	460c      	mov	r4, r1
 80143dc:	b913      	cbnz	r3, 80143e4 <_fflush_r+0x10>
 80143de:	2500      	movs	r5, #0
 80143e0:	4628      	mov	r0, r5
 80143e2:	bd38      	pop	{r3, r4, r5, pc}
 80143e4:	b118      	cbz	r0, 80143ee <_fflush_r+0x1a>
 80143e6:	6983      	ldr	r3, [r0, #24]
 80143e8:	b90b      	cbnz	r3, 80143ee <_fflush_r+0x1a>
 80143ea:	f7fc fffb 	bl	80113e4 <__sinit>
 80143ee:	4b14      	ldr	r3, [pc, #80]	; (8014440 <_fflush_r+0x6c>)
 80143f0:	429c      	cmp	r4, r3
 80143f2:	d11b      	bne.n	801442c <_fflush_r+0x58>
 80143f4:	686c      	ldr	r4, [r5, #4]
 80143f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d0ef      	beq.n	80143de <_fflush_r+0xa>
 80143fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014400:	07d0      	lsls	r0, r2, #31
 8014402:	d404      	bmi.n	801440e <_fflush_r+0x3a>
 8014404:	0599      	lsls	r1, r3, #22
 8014406:	d402      	bmi.n	801440e <_fflush_r+0x3a>
 8014408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801440a:	f7fd f8ae 	bl	801156a <__retarget_lock_acquire_recursive>
 801440e:	4628      	mov	r0, r5
 8014410:	4621      	mov	r1, r4
 8014412:	f7ff ff59 	bl	80142c8 <__sflush_r>
 8014416:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014418:	07da      	lsls	r2, r3, #31
 801441a:	4605      	mov	r5, r0
 801441c:	d4e0      	bmi.n	80143e0 <_fflush_r+0xc>
 801441e:	89a3      	ldrh	r3, [r4, #12]
 8014420:	059b      	lsls	r3, r3, #22
 8014422:	d4dd      	bmi.n	80143e0 <_fflush_r+0xc>
 8014424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014426:	f7fd f8a1 	bl	801156c <__retarget_lock_release_recursive>
 801442a:	e7d9      	b.n	80143e0 <_fflush_r+0xc>
 801442c:	4b05      	ldr	r3, [pc, #20]	; (8014444 <_fflush_r+0x70>)
 801442e:	429c      	cmp	r4, r3
 8014430:	d101      	bne.n	8014436 <_fflush_r+0x62>
 8014432:	68ac      	ldr	r4, [r5, #8]
 8014434:	e7df      	b.n	80143f6 <_fflush_r+0x22>
 8014436:	4b04      	ldr	r3, [pc, #16]	; (8014448 <_fflush_r+0x74>)
 8014438:	429c      	cmp	r4, r3
 801443a:	bf08      	it	eq
 801443c:	68ec      	ldreq	r4, [r5, #12]
 801443e:	e7da      	b.n	80143f6 <_fflush_r+0x22>
 8014440:	08016b10 	.word	0x08016b10
 8014444:	08016b30 	.word	0x08016b30
 8014448:	08016af0 	.word	0x08016af0

0801444c <fiprintf>:
 801444c:	b40e      	push	{r1, r2, r3}
 801444e:	b503      	push	{r0, r1, lr}
 8014450:	4601      	mov	r1, r0
 8014452:	ab03      	add	r3, sp, #12
 8014454:	4805      	ldr	r0, [pc, #20]	; (801446c <fiprintf+0x20>)
 8014456:	f853 2b04 	ldr.w	r2, [r3], #4
 801445a:	6800      	ldr	r0, [r0, #0]
 801445c:	9301      	str	r3, [sp, #4]
 801445e:	f001 fbf3 	bl	8015c48 <_vfiprintf_r>
 8014462:	b002      	add	sp, #8
 8014464:	f85d eb04 	ldr.w	lr, [sp], #4
 8014468:	b003      	add	sp, #12
 801446a:	4770      	bx	lr
 801446c:	20000188 	.word	0x20000188

08014470 <rshift>:
 8014470:	6903      	ldr	r3, [r0, #16]
 8014472:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014476:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801447a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801447e:	f100 0414 	add.w	r4, r0, #20
 8014482:	dd45      	ble.n	8014510 <rshift+0xa0>
 8014484:	f011 011f 	ands.w	r1, r1, #31
 8014488:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801448c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014490:	d10c      	bne.n	80144ac <rshift+0x3c>
 8014492:	f100 0710 	add.w	r7, r0, #16
 8014496:	4629      	mov	r1, r5
 8014498:	42b1      	cmp	r1, r6
 801449a:	d334      	bcc.n	8014506 <rshift+0x96>
 801449c:	1a9b      	subs	r3, r3, r2
 801449e:	009b      	lsls	r3, r3, #2
 80144a0:	1eea      	subs	r2, r5, #3
 80144a2:	4296      	cmp	r6, r2
 80144a4:	bf38      	it	cc
 80144a6:	2300      	movcc	r3, #0
 80144a8:	4423      	add	r3, r4
 80144aa:	e015      	b.n	80144d8 <rshift+0x68>
 80144ac:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80144b0:	f1c1 0820 	rsb	r8, r1, #32
 80144b4:	40cf      	lsrs	r7, r1
 80144b6:	f105 0e04 	add.w	lr, r5, #4
 80144ba:	46a1      	mov	r9, r4
 80144bc:	4576      	cmp	r6, lr
 80144be:	46f4      	mov	ip, lr
 80144c0:	d815      	bhi.n	80144ee <rshift+0x7e>
 80144c2:	1a9b      	subs	r3, r3, r2
 80144c4:	009a      	lsls	r2, r3, #2
 80144c6:	3a04      	subs	r2, #4
 80144c8:	3501      	adds	r5, #1
 80144ca:	42ae      	cmp	r6, r5
 80144cc:	bf38      	it	cc
 80144ce:	2200      	movcc	r2, #0
 80144d0:	18a3      	adds	r3, r4, r2
 80144d2:	50a7      	str	r7, [r4, r2]
 80144d4:	b107      	cbz	r7, 80144d8 <rshift+0x68>
 80144d6:	3304      	adds	r3, #4
 80144d8:	1b1a      	subs	r2, r3, r4
 80144da:	42a3      	cmp	r3, r4
 80144dc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80144e0:	bf08      	it	eq
 80144e2:	2300      	moveq	r3, #0
 80144e4:	6102      	str	r2, [r0, #16]
 80144e6:	bf08      	it	eq
 80144e8:	6143      	streq	r3, [r0, #20]
 80144ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80144ee:	f8dc c000 	ldr.w	ip, [ip]
 80144f2:	fa0c fc08 	lsl.w	ip, ip, r8
 80144f6:	ea4c 0707 	orr.w	r7, ip, r7
 80144fa:	f849 7b04 	str.w	r7, [r9], #4
 80144fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014502:	40cf      	lsrs	r7, r1
 8014504:	e7da      	b.n	80144bc <rshift+0x4c>
 8014506:	f851 cb04 	ldr.w	ip, [r1], #4
 801450a:	f847 cf04 	str.w	ip, [r7, #4]!
 801450e:	e7c3      	b.n	8014498 <rshift+0x28>
 8014510:	4623      	mov	r3, r4
 8014512:	e7e1      	b.n	80144d8 <rshift+0x68>

08014514 <__hexdig_fun>:
 8014514:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014518:	2b09      	cmp	r3, #9
 801451a:	d802      	bhi.n	8014522 <__hexdig_fun+0xe>
 801451c:	3820      	subs	r0, #32
 801451e:	b2c0      	uxtb	r0, r0
 8014520:	4770      	bx	lr
 8014522:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014526:	2b05      	cmp	r3, #5
 8014528:	d801      	bhi.n	801452e <__hexdig_fun+0x1a>
 801452a:	3847      	subs	r0, #71	; 0x47
 801452c:	e7f7      	b.n	801451e <__hexdig_fun+0xa>
 801452e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014532:	2b05      	cmp	r3, #5
 8014534:	d801      	bhi.n	801453a <__hexdig_fun+0x26>
 8014536:	3827      	subs	r0, #39	; 0x27
 8014538:	e7f1      	b.n	801451e <__hexdig_fun+0xa>
 801453a:	2000      	movs	r0, #0
 801453c:	4770      	bx	lr
	...

08014540 <__gethex>:
 8014540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014544:	ed2d 8b02 	vpush	{d8}
 8014548:	b089      	sub	sp, #36	; 0x24
 801454a:	ee08 0a10 	vmov	s16, r0
 801454e:	9304      	str	r3, [sp, #16]
 8014550:	4bbc      	ldr	r3, [pc, #752]	; (8014844 <__gethex+0x304>)
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	9301      	str	r3, [sp, #4]
 8014556:	4618      	mov	r0, r3
 8014558:	468b      	mov	fp, r1
 801455a:	4690      	mov	r8, r2
 801455c:	f7eb fe48 	bl	80001f0 <strlen>
 8014560:	9b01      	ldr	r3, [sp, #4]
 8014562:	f8db 2000 	ldr.w	r2, [fp]
 8014566:	4403      	add	r3, r0
 8014568:	4682      	mov	sl, r0
 801456a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801456e:	9305      	str	r3, [sp, #20]
 8014570:	1c93      	adds	r3, r2, #2
 8014572:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8014576:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801457a:	32fe      	adds	r2, #254	; 0xfe
 801457c:	18d1      	adds	r1, r2, r3
 801457e:	461f      	mov	r7, r3
 8014580:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014584:	9100      	str	r1, [sp, #0]
 8014586:	2830      	cmp	r0, #48	; 0x30
 8014588:	d0f8      	beq.n	801457c <__gethex+0x3c>
 801458a:	f7ff ffc3 	bl	8014514 <__hexdig_fun>
 801458e:	4604      	mov	r4, r0
 8014590:	2800      	cmp	r0, #0
 8014592:	d13a      	bne.n	801460a <__gethex+0xca>
 8014594:	9901      	ldr	r1, [sp, #4]
 8014596:	4652      	mov	r2, sl
 8014598:	4638      	mov	r0, r7
 801459a:	f7fe f89a 	bl	80126d2 <strncmp>
 801459e:	4605      	mov	r5, r0
 80145a0:	2800      	cmp	r0, #0
 80145a2:	d168      	bne.n	8014676 <__gethex+0x136>
 80145a4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80145a8:	eb07 060a 	add.w	r6, r7, sl
 80145ac:	f7ff ffb2 	bl	8014514 <__hexdig_fun>
 80145b0:	2800      	cmp	r0, #0
 80145b2:	d062      	beq.n	801467a <__gethex+0x13a>
 80145b4:	4633      	mov	r3, r6
 80145b6:	7818      	ldrb	r0, [r3, #0]
 80145b8:	2830      	cmp	r0, #48	; 0x30
 80145ba:	461f      	mov	r7, r3
 80145bc:	f103 0301 	add.w	r3, r3, #1
 80145c0:	d0f9      	beq.n	80145b6 <__gethex+0x76>
 80145c2:	f7ff ffa7 	bl	8014514 <__hexdig_fun>
 80145c6:	2301      	movs	r3, #1
 80145c8:	fab0 f480 	clz	r4, r0
 80145cc:	0964      	lsrs	r4, r4, #5
 80145ce:	4635      	mov	r5, r6
 80145d0:	9300      	str	r3, [sp, #0]
 80145d2:	463a      	mov	r2, r7
 80145d4:	4616      	mov	r6, r2
 80145d6:	3201      	adds	r2, #1
 80145d8:	7830      	ldrb	r0, [r6, #0]
 80145da:	f7ff ff9b 	bl	8014514 <__hexdig_fun>
 80145de:	2800      	cmp	r0, #0
 80145e0:	d1f8      	bne.n	80145d4 <__gethex+0x94>
 80145e2:	9901      	ldr	r1, [sp, #4]
 80145e4:	4652      	mov	r2, sl
 80145e6:	4630      	mov	r0, r6
 80145e8:	f7fe f873 	bl	80126d2 <strncmp>
 80145ec:	b980      	cbnz	r0, 8014610 <__gethex+0xd0>
 80145ee:	b94d      	cbnz	r5, 8014604 <__gethex+0xc4>
 80145f0:	eb06 050a 	add.w	r5, r6, sl
 80145f4:	462a      	mov	r2, r5
 80145f6:	4616      	mov	r6, r2
 80145f8:	3201      	adds	r2, #1
 80145fa:	7830      	ldrb	r0, [r6, #0]
 80145fc:	f7ff ff8a 	bl	8014514 <__hexdig_fun>
 8014600:	2800      	cmp	r0, #0
 8014602:	d1f8      	bne.n	80145f6 <__gethex+0xb6>
 8014604:	1bad      	subs	r5, r5, r6
 8014606:	00ad      	lsls	r5, r5, #2
 8014608:	e004      	b.n	8014614 <__gethex+0xd4>
 801460a:	2400      	movs	r4, #0
 801460c:	4625      	mov	r5, r4
 801460e:	e7e0      	b.n	80145d2 <__gethex+0x92>
 8014610:	2d00      	cmp	r5, #0
 8014612:	d1f7      	bne.n	8014604 <__gethex+0xc4>
 8014614:	7833      	ldrb	r3, [r6, #0]
 8014616:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801461a:	2b50      	cmp	r3, #80	; 0x50
 801461c:	d13b      	bne.n	8014696 <__gethex+0x156>
 801461e:	7873      	ldrb	r3, [r6, #1]
 8014620:	2b2b      	cmp	r3, #43	; 0x2b
 8014622:	d02c      	beq.n	801467e <__gethex+0x13e>
 8014624:	2b2d      	cmp	r3, #45	; 0x2d
 8014626:	d02e      	beq.n	8014686 <__gethex+0x146>
 8014628:	1c71      	adds	r1, r6, #1
 801462a:	f04f 0900 	mov.w	r9, #0
 801462e:	7808      	ldrb	r0, [r1, #0]
 8014630:	f7ff ff70 	bl	8014514 <__hexdig_fun>
 8014634:	1e43      	subs	r3, r0, #1
 8014636:	b2db      	uxtb	r3, r3
 8014638:	2b18      	cmp	r3, #24
 801463a:	d82c      	bhi.n	8014696 <__gethex+0x156>
 801463c:	f1a0 0210 	sub.w	r2, r0, #16
 8014640:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014644:	f7ff ff66 	bl	8014514 <__hexdig_fun>
 8014648:	1e43      	subs	r3, r0, #1
 801464a:	b2db      	uxtb	r3, r3
 801464c:	2b18      	cmp	r3, #24
 801464e:	d91d      	bls.n	801468c <__gethex+0x14c>
 8014650:	f1b9 0f00 	cmp.w	r9, #0
 8014654:	d000      	beq.n	8014658 <__gethex+0x118>
 8014656:	4252      	negs	r2, r2
 8014658:	4415      	add	r5, r2
 801465a:	f8cb 1000 	str.w	r1, [fp]
 801465e:	b1e4      	cbz	r4, 801469a <__gethex+0x15a>
 8014660:	9b00      	ldr	r3, [sp, #0]
 8014662:	2b00      	cmp	r3, #0
 8014664:	bf14      	ite	ne
 8014666:	2700      	movne	r7, #0
 8014668:	2706      	moveq	r7, #6
 801466a:	4638      	mov	r0, r7
 801466c:	b009      	add	sp, #36	; 0x24
 801466e:	ecbd 8b02 	vpop	{d8}
 8014672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014676:	463e      	mov	r6, r7
 8014678:	4625      	mov	r5, r4
 801467a:	2401      	movs	r4, #1
 801467c:	e7ca      	b.n	8014614 <__gethex+0xd4>
 801467e:	f04f 0900 	mov.w	r9, #0
 8014682:	1cb1      	adds	r1, r6, #2
 8014684:	e7d3      	b.n	801462e <__gethex+0xee>
 8014686:	f04f 0901 	mov.w	r9, #1
 801468a:	e7fa      	b.n	8014682 <__gethex+0x142>
 801468c:	230a      	movs	r3, #10
 801468e:	fb03 0202 	mla	r2, r3, r2, r0
 8014692:	3a10      	subs	r2, #16
 8014694:	e7d4      	b.n	8014640 <__gethex+0x100>
 8014696:	4631      	mov	r1, r6
 8014698:	e7df      	b.n	801465a <__gethex+0x11a>
 801469a:	1bf3      	subs	r3, r6, r7
 801469c:	3b01      	subs	r3, #1
 801469e:	4621      	mov	r1, r4
 80146a0:	2b07      	cmp	r3, #7
 80146a2:	dc0b      	bgt.n	80146bc <__gethex+0x17c>
 80146a4:	ee18 0a10 	vmov	r0, s16
 80146a8:	f000 fa86 	bl	8014bb8 <_Balloc>
 80146ac:	4604      	mov	r4, r0
 80146ae:	b940      	cbnz	r0, 80146c2 <__gethex+0x182>
 80146b0:	4b65      	ldr	r3, [pc, #404]	; (8014848 <__gethex+0x308>)
 80146b2:	4602      	mov	r2, r0
 80146b4:	21de      	movs	r1, #222	; 0xde
 80146b6:	4865      	ldr	r0, [pc, #404]	; (801484c <__gethex+0x30c>)
 80146b8:	f7fe ff60 	bl	801357c <__assert_func>
 80146bc:	3101      	adds	r1, #1
 80146be:	105b      	asrs	r3, r3, #1
 80146c0:	e7ee      	b.n	80146a0 <__gethex+0x160>
 80146c2:	f100 0914 	add.w	r9, r0, #20
 80146c6:	f04f 0b00 	mov.w	fp, #0
 80146ca:	f1ca 0301 	rsb	r3, sl, #1
 80146ce:	f8cd 9008 	str.w	r9, [sp, #8]
 80146d2:	f8cd b000 	str.w	fp, [sp]
 80146d6:	9306      	str	r3, [sp, #24]
 80146d8:	42b7      	cmp	r7, r6
 80146da:	d340      	bcc.n	801475e <__gethex+0x21e>
 80146dc:	9802      	ldr	r0, [sp, #8]
 80146de:	9b00      	ldr	r3, [sp, #0]
 80146e0:	f840 3b04 	str.w	r3, [r0], #4
 80146e4:	eba0 0009 	sub.w	r0, r0, r9
 80146e8:	1080      	asrs	r0, r0, #2
 80146ea:	0146      	lsls	r6, r0, #5
 80146ec:	6120      	str	r0, [r4, #16]
 80146ee:	4618      	mov	r0, r3
 80146f0:	f000 fb58 	bl	8014da4 <__hi0bits>
 80146f4:	1a30      	subs	r0, r6, r0
 80146f6:	f8d8 6000 	ldr.w	r6, [r8]
 80146fa:	42b0      	cmp	r0, r6
 80146fc:	dd63      	ble.n	80147c6 <__gethex+0x286>
 80146fe:	1b87      	subs	r7, r0, r6
 8014700:	4639      	mov	r1, r7
 8014702:	4620      	mov	r0, r4
 8014704:	f000 fef2 	bl	80154ec <__any_on>
 8014708:	4682      	mov	sl, r0
 801470a:	b1a8      	cbz	r0, 8014738 <__gethex+0x1f8>
 801470c:	1e7b      	subs	r3, r7, #1
 801470e:	1159      	asrs	r1, r3, #5
 8014710:	f003 021f 	and.w	r2, r3, #31
 8014714:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8014718:	f04f 0a01 	mov.w	sl, #1
 801471c:	fa0a f202 	lsl.w	r2, sl, r2
 8014720:	420a      	tst	r2, r1
 8014722:	d009      	beq.n	8014738 <__gethex+0x1f8>
 8014724:	4553      	cmp	r3, sl
 8014726:	dd05      	ble.n	8014734 <__gethex+0x1f4>
 8014728:	1eb9      	subs	r1, r7, #2
 801472a:	4620      	mov	r0, r4
 801472c:	f000 fede 	bl	80154ec <__any_on>
 8014730:	2800      	cmp	r0, #0
 8014732:	d145      	bne.n	80147c0 <__gethex+0x280>
 8014734:	f04f 0a02 	mov.w	sl, #2
 8014738:	4639      	mov	r1, r7
 801473a:	4620      	mov	r0, r4
 801473c:	f7ff fe98 	bl	8014470 <rshift>
 8014740:	443d      	add	r5, r7
 8014742:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014746:	42ab      	cmp	r3, r5
 8014748:	da4c      	bge.n	80147e4 <__gethex+0x2a4>
 801474a:	ee18 0a10 	vmov	r0, s16
 801474e:	4621      	mov	r1, r4
 8014750:	f000 fa72 	bl	8014c38 <_Bfree>
 8014754:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014756:	2300      	movs	r3, #0
 8014758:	6013      	str	r3, [r2, #0]
 801475a:	27a3      	movs	r7, #163	; 0xa3
 801475c:	e785      	b.n	801466a <__gethex+0x12a>
 801475e:	1e73      	subs	r3, r6, #1
 8014760:	9a05      	ldr	r2, [sp, #20]
 8014762:	9303      	str	r3, [sp, #12]
 8014764:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014768:	4293      	cmp	r3, r2
 801476a:	d019      	beq.n	80147a0 <__gethex+0x260>
 801476c:	f1bb 0f20 	cmp.w	fp, #32
 8014770:	d107      	bne.n	8014782 <__gethex+0x242>
 8014772:	9b02      	ldr	r3, [sp, #8]
 8014774:	9a00      	ldr	r2, [sp, #0]
 8014776:	f843 2b04 	str.w	r2, [r3], #4
 801477a:	9302      	str	r3, [sp, #8]
 801477c:	2300      	movs	r3, #0
 801477e:	9300      	str	r3, [sp, #0]
 8014780:	469b      	mov	fp, r3
 8014782:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8014786:	f7ff fec5 	bl	8014514 <__hexdig_fun>
 801478a:	9b00      	ldr	r3, [sp, #0]
 801478c:	f000 000f 	and.w	r0, r0, #15
 8014790:	fa00 f00b 	lsl.w	r0, r0, fp
 8014794:	4303      	orrs	r3, r0
 8014796:	9300      	str	r3, [sp, #0]
 8014798:	f10b 0b04 	add.w	fp, fp, #4
 801479c:	9b03      	ldr	r3, [sp, #12]
 801479e:	e00d      	b.n	80147bc <__gethex+0x27c>
 80147a0:	9b03      	ldr	r3, [sp, #12]
 80147a2:	9a06      	ldr	r2, [sp, #24]
 80147a4:	4413      	add	r3, r2
 80147a6:	42bb      	cmp	r3, r7
 80147a8:	d3e0      	bcc.n	801476c <__gethex+0x22c>
 80147aa:	4618      	mov	r0, r3
 80147ac:	9901      	ldr	r1, [sp, #4]
 80147ae:	9307      	str	r3, [sp, #28]
 80147b0:	4652      	mov	r2, sl
 80147b2:	f7fd ff8e 	bl	80126d2 <strncmp>
 80147b6:	9b07      	ldr	r3, [sp, #28]
 80147b8:	2800      	cmp	r0, #0
 80147ba:	d1d7      	bne.n	801476c <__gethex+0x22c>
 80147bc:	461e      	mov	r6, r3
 80147be:	e78b      	b.n	80146d8 <__gethex+0x198>
 80147c0:	f04f 0a03 	mov.w	sl, #3
 80147c4:	e7b8      	b.n	8014738 <__gethex+0x1f8>
 80147c6:	da0a      	bge.n	80147de <__gethex+0x29e>
 80147c8:	1a37      	subs	r7, r6, r0
 80147ca:	4621      	mov	r1, r4
 80147cc:	ee18 0a10 	vmov	r0, s16
 80147d0:	463a      	mov	r2, r7
 80147d2:	f000 fc4d 	bl	8015070 <__lshift>
 80147d6:	1bed      	subs	r5, r5, r7
 80147d8:	4604      	mov	r4, r0
 80147da:	f100 0914 	add.w	r9, r0, #20
 80147de:	f04f 0a00 	mov.w	sl, #0
 80147e2:	e7ae      	b.n	8014742 <__gethex+0x202>
 80147e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80147e8:	42a8      	cmp	r0, r5
 80147ea:	dd72      	ble.n	80148d2 <__gethex+0x392>
 80147ec:	1b45      	subs	r5, r0, r5
 80147ee:	42ae      	cmp	r6, r5
 80147f0:	dc36      	bgt.n	8014860 <__gethex+0x320>
 80147f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80147f6:	2b02      	cmp	r3, #2
 80147f8:	d02a      	beq.n	8014850 <__gethex+0x310>
 80147fa:	2b03      	cmp	r3, #3
 80147fc:	d02c      	beq.n	8014858 <__gethex+0x318>
 80147fe:	2b01      	cmp	r3, #1
 8014800:	d115      	bne.n	801482e <__gethex+0x2ee>
 8014802:	42ae      	cmp	r6, r5
 8014804:	d113      	bne.n	801482e <__gethex+0x2ee>
 8014806:	2e01      	cmp	r6, #1
 8014808:	d10b      	bne.n	8014822 <__gethex+0x2e2>
 801480a:	9a04      	ldr	r2, [sp, #16]
 801480c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014810:	6013      	str	r3, [r2, #0]
 8014812:	2301      	movs	r3, #1
 8014814:	6123      	str	r3, [r4, #16]
 8014816:	f8c9 3000 	str.w	r3, [r9]
 801481a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801481c:	2762      	movs	r7, #98	; 0x62
 801481e:	601c      	str	r4, [r3, #0]
 8014820:	e723      	b.n	801466a <__gethex+0x12a>
 8014822:	1e71      	subs	r1, r6, #1
 8014824:	4620      	mov	r0, r4
 8014826:	f000 fe61 	bl	80154ec <__any_on>
 801482a:	2800      	cmp	r0, #0
 801482c:	d1ed      	bne.n	801480a <__gethex+0x2ca>
 801482e:	ee18 0a10 	vmov	r0, s16
 8014832:	4621      	mov	r1, r4
 8014834:	f000 fa00 	bl	8014c38 <_Bfree>
 8014838:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801483a:	2300      	movs	r3, #0
 801483c:	6013      	str	r3, [r2, #0]
 801483e:	2750      	movs	r7, #80	; 0x50
 8014840:	e713      	b.n	801466a <__gethex+0x12a>
 8014842:	bf00      	nop
 8014844:	08016e1c 	.word	0x08016e1c
 8014848:	08016da0 	.word	0x08016da0
 801484c:	08016db1 	.word	0x08016db1
 8014850:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014852:	2b00      	cmp	r3, #0
 8014854:	d1eb      	bne.n	801482e <__gethex+0x2ee>
 8014856:	e7d8      	b.n	801480a <__gethex+0x2ca>
 8014858:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801485a:	2b00      	cmp	r3, #0
 801485c:	d1d5      	bne.n	801480a <__gethex+0x2ca>
 801485e:	e7e6      	b.n	801482e <__gethex+0x2ee>
 8014860:	1e6f      	subs	r7, r5, #1
 8014862:	f1ba 0f00 	cmp.w	sl, #0
 8014866:	d131      	bne.n	80148cc <__gethex+0x38c>
 8014868:	b127      	cbz	r7, 8014874 <__gethex+0x334>
 801486a:	4639      	mov	r1, r7
 801486c:	4620      	mov	r0, r4
 801486e:	f000 fe3d 	bl	80154ec <__any_on>
 8014872:	4682      	mov	sl, r0
 8014874:	117b      	asrs	r3, r7, #5
 8014876:	2101      	movs	r1, #1
 8014878:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801487c:	f007 071f 	and.w	r7, r7, #31
 8014880:	fa01 f707 	lsl.w	r7, r1, r7
 8014884:	421f      	tst	r7, r3
 8014886:	4629      	mov	r1, r5
 8014888:	4620      	mov	r0, r4
 801488a:	bf18      	it	ne
 801488c:	f04a 0a02 	orrne.w	sl, sl, #2
 8014890:	1b76      	subs	r6, r6, r5
 8014892:	f7ff fded 	bl	8014470 <rshift>
 8014896:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801489a:	2702      	movs	r7, #2
 801489c:	f1ba 0f00 	cmp.w	sl, #0
 80148a0:	d048      	beq.n	8014934 <__gethex+0x3f4>
 80148a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80148a6:	2b02      	cmp	r3, #2
 80148a8:	d015      	beq.n	80148d6 <__gethex+0x396>
 80148aa:	2b03      	cmp	r3, #3
 80148ac:	d017      	beq.n	80148de <__gethex+0x39e>
 80148ae:	2b01      	cmp	r3, #1
 80148b0:	d109      	bne.n	80148c6 <__gethex+0x386>
 80148b2:	f01a 0f02 	tst.w	sl, #2
 80148b6:	d006      	beq.n	80148c6 <__gethex+0x386>
 80148b8:	f8d9 0000 	ldr.w	r0, [r9]
 80148bc:	ea4a 0a00 	orr.w	sl, sl, r0
 80148c0:	f01a 0f01 	tst.w	sl, #1
 80148c4:	d10e      	bne.n	80148e4 <__gethex+0x3a4>
 80148c6:	f047 0710 	orr.w	r7, r7, #16
 80148ca:	e033      	b.n	8014934 <__gethex+0x3f4>
 80148cc:	f04f 0a01 	mov.w	sl, #1
 80148d0:	e7d0      	b.n	8014874 <__gethex+0x334>
 80148d2:	2701      	movs	r7, #1
 80148d4:	e7e2      	b.n	801489c <__gethex+0x35c>
 80148d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80148d8:	f1c3 0301 	rsb	r3, r3, #1
 80148dc:	9315      	str	r3, [sp, #84]	; 0x54
 80148de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d0f0      	beq.n	80148c6 <__gethex+0x386>
 80148e4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80148e8:	f104 0314 	add.w	r3, r4, #20
 80148ec:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80148f0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80148f4:	f04f 0c00 	mov.w	ip, #0
 80148f8:	4618      	mov	r0, r3
 80148fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80148fe:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014902:	d01c      	beq.n	801493e <__gethex+0x3fe>
 8014904:	3201      	adds	r2, #1
 8014906:	6002      	str	r2, [r0, #0]
 8014908:	2f02      	cmp	r7, #2
 801490a:	f104 0314 	add.w	r3, r4, #20
 801490e:	d13f      	bne.n	8014990 <__gethex+0x450>
 8014910:	f8d8 2000 	ldr.w	r2, [r8]
 8014914:	3a01      	subs	r2, #1
 8014916:	42b2      	cmp	r2, r6
 8014918:	d10a      	bne.n	8014930 <__gethex+0x3f0>
 801491a:	1171      	asrs	r1, r6, #5
 801491c:	2201      	movs	r2, #1
 801491e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014922:	f006 061f 	and.w	r6, r6, #31
 8014926:	fa02 f606 	lsl.w	r6, r2, r6
 801492a:	421e      	tst	r6, r3
 801492c:	bf18      	it	ne
 801492e:	4617      	movne	r7, r2
 8014930:	f047 0720 	orr.w	r7, r7, #32
 8014934:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014936:	601c      	str	r4, [r3, #0]
 8014938:	9b04      	ldr	r3, [sp, #16]
 801493a:	601d      	str	r5, [r3, #0]
 801493c:	e695      	b.n	801466a <__gethex+0x12a>
 801493e:	4299      	cmp	r1, r3
 8014940:	f843 cc04 	str.w	ip, [r3, #-4]
 8014944:	d8d8      	bhi.n	80148f8 <__gethex+0x3b8>
 8014946:	68a3      	ldr	r3, [r4, #8]
 8014948:	459b      	cmp	fp, r3
 801494a:	db19      	blt.n	8014980 <__gethex+0x440>
 801494c:	6861      	ldr	r1, [r4, #4]
 801494e:	ee18 0a10 	vmov	r0, s16
 8014952:	3101      	adds	r1, #1
 8014954:	f000 f930 	bl	8014bb8 <_Balloc>
 8014958:	4681      	mov	r9, r0
 801495a:	b918      	cbnz	r0, 8014964 <__gethex+0x424>
 801495c:	4b1a      	ldr	r3, [pc, #104]	; (80149c8 <__gethex+0x488>)
 801495e:	4602      	mov	r2, r0
 8014960:	2184      	movs	r1, #132	; 0x84
 8014962:	e6a8      	b.n	80146b6 <__gethex+0x176>
 8014964:	6922      	ldr	r2, [r4, #16]
 8014966:	3202      	adds	r2, #2
 8014968:	f104 010c 	add.w	r1, r4, #12
 801496c:	0092      	lsls	r2, r2, #2
 801496e:	300c      	adds	r0, #12
 8014970:	f7fc fe06 	bl	8011580 <memcpy>
 8014974:	4621      	mov	r1, r4
 8014976:	ee18 0a10 	vmov	r0, s16
 801497a:	f000 f95d 	bl	8014c38 <_Bfree>
 801497e:	464c      	mov	r4, r9
 8014980:	6923      	ldr	r3, [r4, #16]
 8014982:	1c5a      	adds	r2, r3, #1
 8014984:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014988:	6122      	str	r2, [r4, #16]
 801498a:	2201      	movs	r2, #1
 801498c:	615a      	str	r2, [r3, #20]
 801498e:	e7bb      	b.n	8014908 <__gethex+0x3c8>
 8014990:	6922      	ldr	r2, [r4, #16]
 8014992:	455a      	cmp	r2, fp
 8014994:	dd0b      	ble.n	80149ae <__gethex+0x46e>
 8014996:	2101      	movs	r1, #1
 8014998:	4620      	mov	r0, r4
 801499a:	f7ff fd69 	bl	8014470 <rshift>
 801499e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80149a2:	3501      	adds	r5, #1
 80149a4:	42ab      	cmp	r3, r5
 80149a6:	f6ff aed0 	blt.w	801474a <__gethex+0x20a>
 80149aa:	2701      	movs	r7, #1
 80149ac:	e7c0      	b.n	8014930 <__gethex+0x3f0>
 80149ae:	f016 061f 	ands.w	r6, r6, #31
 80149b2:	d0fa      	beq.n	80149aa <__gethex+0x46a>
 80149b4:	449a      	add	sl, r3
 80149b6:	f1c6 0620 	rsb	r6, r6, #32
 80149ba:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80149be:	f000 f9f1 	bl	8014da4 <__hi0bits>
 80149c2:	42b0      	cmp	r0, r6
 80149c4:	dbe7      	blt.n	8014996 <__gethex+0x456>
 80149c6:	e7f0      	b.n	80149aa <__gethex+0x46a>
 80149c8:	08016da0 	.word	0x08016da0

080149cc <L_shift>:
 80149cc:	f1c2 0208 	rsb	r2, r2, #8
 80149d0:	0092      	lsls	r2, r2, #2
 80149d2:	b570      	push	{r4, r5, r6, lr}
 80149d4:	f1c2 0620 	rsb	r6, r2, #32
 80149d8:	6843      	ldr	r3, [r0, #4]
 80149da:	6804      	ldr	r4, [r0, #0]
 80149dc:	fa03 f506 	lsl.w	r5, r3, r6
 80149e0:	432c      	orrs	r4, r5
 80149e2:	40d3      	lsrs	r3, r2
 80149e4:	6004      	str	r4, [r0, #0]
 80149e6:	f840 3f04 	str.w	r3, [r0, #4]!
 80149ea:	4288      	cmp	r0, r1
 80149ec:	d3f4      	bcc.n	80149d8 <L_shift+0xc>
 80149ee:	bd70      	pop	{r4, r5, r6, pc}

080149f0 <__match>:
 80149f0:	b530      	push	{r4, r5, lr}
 80149f2:	6803      	ldr	r3, [r0, #0]
 80149f4:	3301      	adds	r3, #1
 80149f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80149fa:	b914      	cbnz	r4, 8014a02 <__match+0x12>
 80149fc:	6003      	str	r3, [r0, #0]
 80149fe:	2001      	movs	r0, #1
 8014a00:	bd30      	pop	{r4, r5, pc}
 8014a02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014a06:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014a0a:	2d19      	cmp	r5, #25
 8014a0c:	bf98      	it	ls
 8014a0e:	3220      	addls	r2, #32
 8014a10:	42a2      	cmp	r2, r4
 8014a12:	d0f0      	beq.n	80149f6 <__match+0x6>
 8014a14:	2000      	movs	r0, #0
 8014a16:	e7f3      	b.n	8014a00 <__match+0x10>

08014a18 <__hexnan>:
 8014a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a1c:	680b      	ldr	r3, [r1, #0]
 8014a1e:	6801      	ldr	r1, [r0, #0]
 8014a20:	115e      	asrs	r6, r3, #5
 8014a22:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014a26:	f013 031f 	ands.w	r3, r3, #31
 8014a2a:	b087      	sub	sp, #28
 8014a2c:	bf18      	it	ne
 8014a2e:	3604      	addne	r6, #4
 8014a30:	2500      	movs	r5, #0
 8014a32:	1f37      	subs	r7, r6, #4
 8014a34:	4682      	mov	sl, r0
 8014a36:	4690      	mov	r8, r2
 8014a38:	9301      	str	r3, [sp, #4]
 8014a3a:	f846 5c04 	str.w	r5, [r6, #-4]
 8014a3e:	46b9      	mov	r9, r7
 8014a40:	463c      	mov	r4, r7
 8014a42:	9502      	str	r5, [sp, #8]
 8014a44:	46ab      	mov	fp, r5
 8014a46:	784a      	ldrb	r2, [r1, #1]
 8014a48:	1c4b      	adds	r3, r1, #1
 8014a4a:	9303      	str	r3, [sp, #12]
 8014a4c:	b342      	cbz	r2, 8014aa0 <__hexnan+0x88>
 8014a4e:	4610      	mov	r0, r2
 8014a50:	9105      	str	r1, [sp, #20]
 8014a52:	9204      	str	r2, [sp, #16]
 8014a54:	f7ff fd5e 	bl	8014514 <__hexdig_fun>
 8014a58:	2800      	cmp	r0, #0
 8014a5a:	d14f      	bne.n	8014afc <__hexnan+0xe4>
 8014a5c:	9a04      	ldr	r2, [sp, #16]
 8014a5e:	9905      	ldr	r1, [sp, #20]
 8014a60:	2a20      	cmp	r2, #32
 8014a62:	d818      	bhi.n	8014a96 <__hexnan+0x7e>
 8014a64:	9b02      	ldr	r3, [sp, #8]
 8014a66:	459b      	cmp	fp, r3
 8014a68:	dd13      	ble.n	8014a92 <__hexnan+0x7a>
 8014a6a:	454c      	cmp	r4, r9
 8014a6c:	d206      	bcs.n	8014a7c <__hexnan+0x64>
 8014a6e:	2d07      	cmp	r5, #7
 8014a70:	dc04      	bgt.n	8014a7c <__hexnan+0x64>
 8014a72:	462a      	mov	r2, r5
 8014a74:	4649      	mov	r1, r9
 8014a76:	4620      	mov	r0, r4
 8014a78:	f7ff ffa8 	bl	80149cc <L_shift>
 8014a7c:	4544      	cmp	r4, r8
 8014a7e:	d950      	bls.n	8014b22 <__hexnan+0x10a>
 8014a80:	2300      	movs	r3, #0
 8014a82:	f1a4 0904 	sub.w	r9, r4, #4
 8014a86:	f844 3c04 	str.w	r3, [r4, #-4]
 8014a8a:	f8cd b008 	str.w	fp, [sp, #8]
 8014a8e:	464c      	mov	r4, r9
 8014a90:	461d      	mov	r5, r3
 8014a92:	9903      	ldr	r1, [sp, #12]
 8014a94:	e7d7      	b.n	8014a46 <__hexnan+0x2e>
 8014a96:	2a29      	cmp	r2, #41	; 0x29
 8014a98:	d156      	bne.n	8014b48 <__hexnan+0x130>
 8014a9a:	3102      	adds	r1, #2
 8014a9c:	f8ca 1000 	str.w	r1, [sl]
 8014aa0:	f1bb 0f00 	cmp.w	fp, #0
 8014aa4:	d050      	beq.n	8014b48 <__hexnan+0x130>
 8014aa6:	454c      	cmp	r4, r9
 8014aa8:	d206      	bcs.n	8014ab8 <__hexnan+0xa0>
 8014aaa:	2d07      	cmp	r5, #7
 8014aac:	dc04      	bgt.n	8014ab8 <__hexnan+0xa0>
 8014aae:	462a      	mov	r2, r5
 8014ab0:	4649      	mov	r1, r9
 8014ab2:	4620      	mov	r0, r4
 8014ab4:	f7ff ff8a 	bl	80149cc <L_shift>
 8014ab8:	4544      	cmp	r4, r8
 8014aba:	d934      	bls.n	8014b26 <__hexnan+0x10e>
 8014abc:	f1a8 0204 	sub.w	r2, r8, #4
 8014ac0:	4623      	mov	r3, r4
 8014ac2:	f853 1b04 	ldr.w	r1, [r3], #4
 8014ac6:	f842 1f04 	str.w	r1, [r2, #4]!
 8014aca:	429f      	cmp	r7, r3
 8014acc:	d2f9      	bcs.n	8014ac2 <__hexnan+0xaa>
 8014ace:	1b3b      	subs	r3, r7, r4
 8014ad0:	f023 0303 	bic.w	r3, r3, #3
 8014ad4:	3304      	adds	r3, #4
 8014ad6:	3401      	adds	r4, #1
 8014ad8:	3e03      	subs	r6, #3
 8014ada:	42b4      	cmp	r4, r6
 8014adc:	bf88      	it	hi
 8014ade:	2304      	movhi	r3, #4
 8014ae0:	4443      	add	r3, r8
 8014ae2:	2200      	movs	r2, #0
 8014ae4:	f843 2b04 	str.w	r2, [r3], #4
 8014ae8:	429f      	cmp	r7, r3
 8014aea:	d2fb      	bcs.n	8014ae4 <__hexnan+0xcc>
 8014aec:	683b      	ldr	r3, [r7, #0]
 8014aee:	b91b      	cbnz	r3, 8014af8 <__hexnan+0xe0>
 8014af0:	4547      	cmp	r7, r8
 8014af2:	d127      	bne.n	8014b44 <__hexnan+0x12c>
 8014af4:	2301      	movs	r3, #1
 8014af6:	603b      	str	r3, [r7, #0]
 8014af8:	2005      	movs	r0, #5
 8014afa:	e026      	b.n	8014b4a <__hexnan+0x132>
 8014afc:	3501      	adds	r5, #1
 8014afe:	2d08      	cmp	r5, #8
 8014b00:	f10b 0b01 	add.w	fp, fp, #1
 8014b04:	dd06      	ble.n	8014b14 <__hexnan+0xfc>
 8014b06:	4544      	cmp	r4, r8
 8014b08:	d9c3      	bls.n	8014a92 <__hexnan+0x7a>
 8014b0a:	2300      	movs	r3, #0
 8014b0c:	f844 3c04 	str.w	r3, [r4, #-4]
 8014b10:	2501      	movs	r5, #1
 8014b12:	3c04      	subs	r4, #4
 8014b14:	6822      	ldr	r2, [r4, #0]
 8014b16:	f000 000f 	and.w	r0, r0, #15
 8014b1a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8014b1e:	6022      	str	r2, [r4, #0]
 8014b20:	e7b7      	b.n	8014a92 <__hexnan+0x7a>
 8014b22:	2508      	movs	r5, #8
 8014b24:	e7b5      	b.n	8014a92 <__hexnan+0x7a>
 8014b26:	9b01      	ldr	r3, [sp, #4]
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d0df      	beq.n	8014aec <__hexnan+0xd4>
 8014b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8014b30:	f1c3 0320 	rsb	r3, r3, #32
 8014b34:	fa22 f303 	lsr.w	r3, r2, r3
 8014b38:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014b3c:	401a      	ands	r2, r3
 8014b3e:	f846 2c04 	str.w	r2, [r6, #-4]
 8014b42:	e7d3      	b.n	8014aec <__hexnan+0xd4>
 8014b44:	3f04      	subs	r7, #4
 8014b46:	e7d1      	b.n	8014aec <__hexnan+0xd4>
 8014b48:	2004      	movs	r0, #4
 8014b4a:	b007      	add	sp, #28
 8014b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014b50 <_localeconv_r>:
 8014b50:	4800      	ldr	r0, [pc, #0]	; (8014b54 <_localeconv_r+0x4>)
 8014b52:	4770      	bx	lr
 8014b54:	200002e0 	.word	0x200002e0

08014b58 <_lseek_r>:
 8014b58:	b538      	push	{r3, r4, r5, lr}
 8014b5a:	4d07      	ldr	r5, [pc, #28]	; (8014b78 <_lseek_r+0x20>)
 8014b5c:	4604      	mov	r4, r0
 8014b5e:	4608      	mov	r0, r1
 8014b60:	4611      	mov	r1, r2
 8014b62:	2200      	movs	r2, #0
 8014b64:	602a      	str	r2, [r5, #0]
 8014b66:	461a      	mov	r2, r3
 8014b68:	f7ee fa2e 	bl	8002fc8 <_lseek>
 8014b6c:	1c43      	adds	r3, r0, #1
 8014b6e:	d102      	bne.n	8014b76 <_lseek_r+0x1e>
 8014b70:	682b      	ldr	r3, [r5, #0]
 8014b72:	b103      	cbz	r3, 8014b76 <_lseek_r+0x1e>
 8014b74:	6023      	str	r3, [r4, #0]
 8014b76:	bd38      	pop	{r3, r4, r5, pc}
 8014b78:	200070d4 	.word	0x200070d4

08014b7c <__ascii_mbtowc>:
 8014b7c:	b082      	sub	sp, #8
 8014b7e:	b901      	cbnz	r1, 8014b82 <__ascii_mbtowc+0x6>
 8014b80:	a901      	add	r1, sp, #4
 8014b82:	b142      	cbz	r2, 8014b96 <__ascii_mbtowc+0x1a>
 8014b84:	b14b      	cbz	r3, 8014b9a <__ascii_mbtowc+0x1e>
 8014b86:	7813      	ldrb	r3, [r2, #0]
 8014b88:	600b      	str	r3, [r1, #0]
 8014b8a:	7812      	ldrb	r2, [r2, #0]
 8014b8c:	1e10      	subs	r0, r2, #0
 8014b8e:	bf18      	it	ne
 8014b90:	2001      	movne	r0, #1
 8014b92:	b002      	add	sp, #8
 8014b94:	4770      	bx	lr
 8014b96:	4610      	mov	r0, r2
 8014b98:	e7fb      	b.n	8014b92 <__ascii_mbtowc+0x16>
 8014b9a:	f06f 0001 	mvn.w	r0, #1
 8014b9e:	e7f8      	b.n	8014b92 <__ascii_mbtowc+0x16>

08014ba0 <__malloc_lock>:
 8014ba0:	4801      	ldr	r0, [pc, #4]	; (8014ba8 <__malloc_lock+0x8>)
 8014ba2:	f7fc bce2 	b.w	801156a <__retarget_lock_acquire_recursive>
 8014ba6:	bf00      	nop
 8014ba8:	200070cc 	.word	0x200070cc

08014bac <__malloc_unlock>:
 8014bac:	4801      	ldr	r0, [pc, #4]	; (8014bb4 <__malloc_unlock+0x8>)
 8014bae:	f7fc bcdd 	b.w	801156c <__retarget_lock_release_recursive>
 8014bb2:	bf00      	nop
 8014bb4:	200070cc 	.word	0x200070cc

08014bb8 <_Balloc>:
 8014bb8:	b570      	push	{r4, r5, r6, lr}
 8014bba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014bbc:	4604      	mov	r4, r0
 8014bbe:	460d      	mov	r5, r1
 8014bc0:	b976      	cbnz	r6, 8014be0 <_Balloc+0x28>
 8014bc2:	2010      	movs	r0, #16
 8014bc4:	f7fc fcd4 	bl	8011570 <malloc>
 8014bc8:	4602      	mov	r2, r0
 8014bca:	6260      	str	r0, [r4, #36]	; 0x24
 8014bcc:	b920      	cbnz	r0, 8014bd8 <_Balloc+0x20>
 8014bce:	4b18      	ldr	r3, [pc, #96]	; (8014c30 <_Balloc+0x78>)
 8014bd0:	4818      	ldr	r0, [pc, #96]	; (8014c34 <_Balloc+0x7c>)
 8014bd2:	2166      	movs	r1, #102	; 0x66
 8014bd4:	f7fe fcd2 	bl	801357c <__assert_func>
 8014bd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014bdc:	6006      	str	r6, [r0, #0]
 8014bde:	60c6      	str	r6, [r0, #12]
 8014be0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014be2:	68f3      	ldr	r3, [r6, #12]
 8014be4:	b183      	cbz	r3, 8014c08 <_Balloc+0x50>
 8014be6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014be8:	68db      	ldr	r3, [r3, #12]
 8014bea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014bee:	b9b8      	cbnz	r0, 8014c20 <_Balloc+0x68>
 8014bf0:	2101      	movs	r1, #1
 8014bf2:	fa01 f605 	lsl.w	r6, r1, r5
 8014bf6:	1d72      	adds	r2, r6, #5
 8014bf8:	0092      	lsls	r2, r2, #2
 8014bfa:	4620      	mov	r0, r4
 8014bfc:	f000 fc97 	bl	801552e <_calloc_r>
 8014c00:	b160      	cbz	r0, 8014c1c <_Balloc+0x64>
 8014c02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014c06:	e00e      	b.n	8014c26 <_Balloc+0x6e>
 8014c08:	2221      	movs	r2, #33	; 0x21
 8014c0a:	2104      	movs	r1, #4
 8014c0c:	4620      	mov	r0, r4
 8014c0e:	f000 fc8e 	bl	801552e <_calloc_r>
 8014c12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014c14:	60f0      	str	r0, [r6, #12]
 8014c16:	68db      	ldr	r3, [r3, #12]
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d1e4      	bne.n	8014be6 <_Balloc+0x2e>
 8014c1c:	2000      	movs	r0, #0
 8014c1e:	bd70      	pop	{r4, r5, r6, pc}
 8014c20:	6802      	ldr	r2, [r0, #0]
 8014c22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014c26:	2300      	movs	r3, #0
 8014c28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014c2c:	e7f7      	b.n	8014c1e <_Balloc+0x66>
 8014c2e:	bf00      	nop
 8014c30:	08016d2a 	.word	0x08016d2a
 8014c34:	08016e30 	.word	0x08016e30

08014c38 <_Bfree>:
 8014c38:	b570      	push	{r4, r5, r6, lr}
 8014c3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014c3c:	4605      	mov	r5, r0
 8014c3e:	460c      	mov	r4, r1
 8014c40:	b976      	cbnz	r6, 8014c60 <_Bfree+0x28>
 8014c42:	2010      	movs	r0, #16
 8014c44:	f7fc fc94 	bl	8011570 <malloc>
 8014c48:	4602      	mov	r2, r0
 8014c4a:	6268      	str	r0, [r5, #36]	; 0x24
 8014c4c:	b920      	cbnz	r0, 8014c58 <_Bfree+0x20>
 8014c4e:	4b09      	ldr	r3, [pc, #36]	; (8014c74 <_Bfree+0x3c>)
 8014c50:	4809      	ldr	r0, [pc, #36]	; (8014c78 <_Bfree+0x40>)
 8014c52:	218a      	movs	r1, #138	; 0x8a
 8014c54:	f7fe fc92 	bl	801357c <__assert_func>
 8014c58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014c5c:	6006      	str	r6, [r0, #0]
 8014c5e:	60c6      	str	r6, [r0, #12]
 8014c60:	b13c      	cbz	r4, 8014c72 <_Bfree+0x3a>
 8014c62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014c64:	6862      	ldr	r2, [r4, #4]
 8014c66:	68db      	ldr	r3, [r3, #12]
 8014c68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014c6c:	6021      	str	r1, [r4, #0]
 8014c6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014c72:	bd70      	pop	{r4, r5, r6, pc}
 8014c74:	08016d2a 	.word	0x08016d2a
 8014c78:	08016e30 	.word	0x08016e30

08014c7c <__multadd>:
 8014c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c80:	690e      	ldr	r6, [r1, #16]
 8014c82:	4607      	mov	r7, r0
 8014c84:	4698      	mov	r8, r3
 8014c86:	460c      	mov	r4, r1
 8014c88:	f101 0014 	add.w	r0, r1, #20
 8014c8c:	2300      	movs	r3, #0
 8014c8e:	6805      	ldr	r5, [r0, #0]
 8014c90:	b2a9      	uxth	r1, r5
 8014c92:	fb02 8101 	mla	r1, r2, r1, r8
 8014c96:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8014c9a:	0c2d      	lsrs	r5, r5, #16
 8014c9c:	fb02 c505 	mla	r5, r2, r5, ip
 8014ca0:	b289      	uxth	r1, r1
 8014ca2:	3301      	adds	r3, #1
 8014ca4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8014ca8:	429e      	cmp	r6, r3
 8014caa:	f840 1b04 	str.w	r1, [r0], #4
 8014cae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8014cb2:	dcec      	bgt.n	8014c8e <__multadd+0x12>
 8014cb4:	f1b8 0f00 	cmp.w	r8, #0
 8014cb8:	d022      	beq.n	8014d00 <__multadd+0x84>
 8014cba:	68a3      	ldr	r3, [r4, #8]
 8014cbc:	42b3      	cmp	r3, r6
 8014cbe:	dc19      	bgt.n	8014cf4 <__multadd+0x78>
 8014cc0:	6861      	ldr	r1, [r4, #4]
 8014cc2:	4638      	mov	r0, r7
 8014cc4:	3101      	adds	r1, #1
 8014cc6:	f7ff ff77 	bl	8014bb8 <_Balloc>
 8014cca:	4605      	mov	r5, r0
 8014ccc:	b928      	cbnz	r0, 8014cda <__multadd+0x5e>
 8014cce:	4602      	mov	r2, r0
 8014cd0:	4b0d      	ldr	r3, [pc, #52]	; (8014d08 <__multadd+0x8c>)
 8014cd2:	480e      	ldr	r0, [pc, #56]	; (8014d0c <__multadd+0x90>)
 8014cd4:	21b5      	movs	r1, #181	; 0xb5
 8014cd6:	f7fe fc51 	bl	801357c <__assert_func>
 8014cda:	6922      	ldr	r2, [r4, #16]
 8014cdc:	3202      	adds	r2, #2
 8014cde:	f104 010c 	add.w	r1, r4, #12
 8014ce2:	0092      	lsls	r2, r2, #2
 8014ce4:	300c      	adds	r0, #12
 8014ce6:	f7fc fc4b 	bl	8011580 <memcpy>
 8014cea:	4621      	mov	r1, r4
 8014cec:	4638      	mov	r0, r7
 8014cee:	f7ff ffa3 	bl	8014c38 <_Bfree>
 8014cf2:	462c      	mov	r4, r5
 8014cf4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8014cf8:	3601      	adds	r6, #1
 8014cfa:	f8c3 8014 	str.w	r8, [r3, #20]
 8014cfe:	6126      	str	r6, [r4, #16]
 8014d00:	4620      	mov	r0, r4
 8014d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d06:	bf00      	nop
 8014d08:	08016da0 	.word	0x08016da0
 8014d0c:	08016e30 	.word	0x08016e30

08014d10 <__s2b>:
 8014d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014d14:	460c      	mov	r4, r1
 8014d16:	4615      	mov	r5, r2
 8014d18:	461f      	mov	r7, r3
 8014d1a:	2209      	movs	r2, #9
 8014d1c:	3308      	adds	r3, #8
 8014d1e:	4606      	mov	r6, r0
 8014d20:	fb93 f3f2 	sdiv	r3, r3, r2
 8014d24:	2100      	movs	r1, #0
 8014d26:	2201      	movs	r2, #1
 8014d28:	429a      	cmp	r2, r3
 8014d2a:	db09      	blt.n	8014d40 <__s2b+0x30>
 8014d2c:	4630      	mov	r0, r6
 8014d2e:	f7ff ff43 	bl	8014bb8 <_Balloc>
 8014d32:	b940      	cbnz	r0, 8014d46 <__s2b+0x36>
 8014d34:	4602      	mov	r2, r0
 8014d36:	4b19      	ldr	r3, [pc, #100]	; (8014d9c <__s2b+0x8c>)
 8014d38:	4819      	ldr	r0, [pc, #100]	; (8014da0 <__s2b+0x90>)
 8014d3a:	21ce      	movs	r1, #206	; 0xce
 8014d3c:	f7fe fc1e 	bl	801357c <__assert_func>
 8014d40:	0052      	lsls	r2, r2, #1
 8014d42:	3101      	adds	r1, #1
 8014d44:	e7f0      	b.n	8014d28 <__s2b+0x18>
 8014d46:	9b08      	ldr	r3, [sp, #32]
 8014d48:	6143      	str	r3, [r0, #20]
 8014d4a:	2d09      	cmp	r5, #9
 8014d4c:	f04f 0301 	mov.w	r3, #1
 8014d50:	6103      	str	r3, [r0, #16]
 8014d52:	dd16      	ble.n	8014d82 <__s2b+0x72>
 8014d54:	f104 0909 	add.w	r9, r4, #9
 8014d58:	46c8      	mov	r8, r9
 8014d5a:	442c      	add	r4, r5
 8014d5c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8014d60:	4601      	mov	r1, r0
 8014d62:	3b30      	subs	r3, #48	; 0x30
 8014d64:	220a      	movs	r2, #10
 8014d66:	4630      	mov	r0, r6
 8014d68:	f7ff ff88 	bl	8014c7c <__multadd>
 8014d6c:	45a0      	cmp	r8, r4
 8014d6e:	d1f5      	bne.n	8014d5c <__s2b+0x4c>
 8014d70:	f1a5 0408 	sub.w	r4, r5, #8
 8014d74:	444c      	add	r4, r9
 8014d76:	1b2d      	subs	r5, r5, r4
 8014d78:	1963      	adds	r3, r4, r5
 8014d7a:	42bb      	cmp	r3, r7
 8014d7c:	db04      	blt.n	8014d88 <__s2b+0x78>
 8014d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d82:	340a      	adds	r4, #10
 8014d84:	2509      	movs	r5, #9
 8014d86:	e7f6      	b.n	8014d76 <__s2b+0x66>
 8014d88:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014d8c:	4601      	mov	r1, r0
 8014d8e:	3b30      	subs	r3, #48	; 0x30
 8014d90:	220a      	movs	r2, #10
 8014d92:	4630      	mov	r0, r6
 8014d94:	f7ff ff72 	bl	8014c7c <__multadd>
 8014d98:	e7ee      	b.n	8014d78 <__s2b+0x68>
 8014d9a:	bf00      	nop
 8014d9c:	08016da0 	.word	0x08016da0
 8014da0:	08016e30 	.word	0x08016e30

08014da4 <__hi0bits>:
 8014da4:	0c03      	lsrs	r3, r0, #16
 8014da6:	041b      	lsls	r3, r3, #16
 8014da8:	b9d3      	cbnz	r3, 8014de0 <__hi0bits+0x3c>
 8014daa:	0400      	lsls	r0, r0, #16
 8014dac:	2310      	movs	r3, #16
 8014dae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014db2:	bf04      	itt	eq
 8014db4:	0200      	lsleq	r0, r0, #8
 8014db6:	3308      	addeq	r3, #8
 8014db8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014dbc:	bf04      	itt	eq
 8014dbe:	0100      	lsleq	r0, r0, #4
 8014dc0:	3304      	addeq	r3, #4
 8014dc2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8014dc6:	bf04      	itt	eq
 8014dc8:	0080      	lsleq	r0, r0, #2
 8014dca:	3302      	addeq	r3, #2
 8014dcc:	2800      	cmp	r0, #0
 8014dce:	db05      	blt.n	8014ddc <__hi0bits+0x38>
 8014dd0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014dd4:	f103 0301 	add.w	r3, r3, #1
 8014dd8:	bf08      	it	eq
 8014dda:	2320      	moveq	r3, #32
 8014ddc:	4618      	mov	r0, r3
 8014dde:	4770      	bx	lr
 8014de0:	2300      	movs	r3, #0
 8014de2:	e7e4      	b.n	8014dae <__hi0bits+0xa>

08014de4 <__lo0bits>:
 8014de4:	6803      	ldr	r3, [r0, #0]
 8014de6:	f013 0207 	ands.w	r2, r3, #7
 8014dea:	4601      	mov	r1, r0
 8014dec:	d00b      	beq.n	8014e06 <__lo0bits+0x22>
 8014dee:	07da      	lsls	r2, r3, #31
 8014df0:	d424      	bmi.n	8014e3c <__lo0bits+0x58>
 8014df2:	0798      	lsls	r0, r3, #30
 8014df4:	bf49      	itett	mi
 8014df6:	085b      	lsrmi	r3, r3, #1
 8014df8:	089b      	lsrpl	r3, r3, #2
 8014dfa:	2001      	movmi	r0, #1
 8014dfc:	600b      	strmi	r3, [r1, #0]
 8014dfe:	bf5c      	itt	pl
 8014e00:	600b      	strpl	r3, [r1, #0]
 8014e02:	2002      	movpl	r0, #2
 8014e04:	4770      	bx	lr
 8014e06:	b298      	uxth	r0, r3
 8014e08:	b9b0      	cbnz	r0, 8014e38 <__lo0bits+0x54>
 8014e0a:	0c1b      	lsrs	r3, r3, #16
 8014e0c:	2010      	movs	r0, #16
 8014e0e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014e12:	bf04      	itt	eq
 8014e14:	0a1b      	lsreq	r3, r3, #8
 8014e16:	3008      	addeq	r0, #8
 8014e18:	071a      	lsls	r2, r3, #28
 8014e1a:	bf04      	itt	eq
 8014e1c:	091b      	lsreq	r3, r3, #4
 8014e1e:	3004      	addeq	r0, #4
 8014e20:	079a      	lsls	r2, r3, #30
 8014e22:	bf04      	itt	eq
 8014e24:	089b      	lsreq	r3, r3, #2
 8014e26:	3002      	addeq	r0, #2
 8014e28:	07da      	lsls	r2, r3, #31
 8014e2a:	d403      	bmi.n	8014e34 <__lo0bits+0x50>
 8014e2c:	085b      	lsrs	r3, r3, #1
 8014e2e:	f100 0001 	add.w	r0, r0, #1
 8014e32:	d005      	beq.n	8014e40 <__lo0bits+0x5c>
 8014e34:	600b      	str	r3, [r1, #0]
 8014e36:	4770      	bx	lr
 8014e38:	4610      	mov	r0, r2
 8014e3a:	e7e8      	b.n	8014e0e <__lo0bits+0x2a>
 8014e3c:	2000      	movs	r0, #0
 8014e3e:	4770      	bx	lr
 8014e40:	2020      	movs	r0, #32
 8014e42:	4770      	bx	lr

08014e44 <__i2b>:
 8014e44:	b510      	push	{r4, lr}
 8014e46:	460c      	mov	r4, r1
 8014e48:	2101      	movs	r1, #1
 8014e4a:	f7ff feb5 	bl	8014bb8 <_Balloc>
 8014e4e:	4602      	mov	r2, r0
 8014e50:	b928      	cbnz	r0, 8014e5e <__i2b+0x1a>
 8014e52:	4b05      	ldr	r3, [pc, #20]	; (8014e68 <__i2b+0x24>)
 8014e54:	4805      	ldr	r0, [pc, #20]	; (8014e6c <__i2b+0x28>)
 8014e56:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014e5a:	f7fe fb8f 	bl	801357c <__assert_func>
 8014e5e:	2301      	movs	r3, #1
 8014e60:	6144      	str	r4, [r0, #20]
 8014e62:	6103      	str	r3, [r0, #16]
 8014e64:	bd10      	pop	{r4, pc}
 8014e66:	bf00      	nop
 8014e68:	08016da0 	.word	0x08016da0
 8014e6c:	08016e30 	.word	0x08016e30

08014e70 <__multiply>:
 8014e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e74:	4614      	mov	r4, r2
 8014e76:	690a      	ldr	r2, [r1, #16]
 8014e78:	6923      	ldr	r3, [r4, #16]
 8014e7a:	429a      	cmp	r2, r3
 8014e7c:	bfb8      	it	lt
 8014e7e:	460b      	movlt	r3, r1
 8014e80:	460d      	mov	r5, r1
 8014e82:	bfbc      	itt	lt
 8014e84:	4625      	movlt	r5, r4
 8014e86:	461c      	movlt	r4, r3
 8014e88:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8014e8c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8014e90:	68ab      	ldr	r3, [r5, #8]
 8014e92:	6869      	ldr	r1, [r5, #4]
 8014e94:	eb0a 0709 	add.w	r7, sl, r9
 8014e98:	42bb      	cmp	r3, r7
 8014e9a:	b085      	sub	sp, #20
 8014e9c:	bfb8      	it	lt
 8014e9e:	3101      	addlt	r1, #1
 8014ea0:	f7ff fe8a 	bl	8014bb8 <_Balloc>
 8014ea4:	b930      	cbnz	r0, 8014eb4 <__multiply+0x44>
 8014ea6:	4602      	mov	r2, r0
 8014ea8:	4b42      	ldr	r3, [pc, #264]	; (8014fb4 <__multiply+0x144>)
 8014eaa:	4843      	ldr	r0, [pc, #268]	; (8014fb8 <__multiply+0x148>)
 8014eac:	f240 115d 	movw	r1, #349	; 0x15d
 8014eb0:	f7fe fb64 	bl	801357c <__assert_func>
 8014eb4:	f100 0614 	add.w	r6, r0, #20
 8014eb8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8014ebc:	4633      	mov	r3, r6
 8014ebe:	2200      	movs	r2, #0
 8014ec0:	4543      	cmp	r3, r8
 8014ec2:	d31e      	bcc.n	8014f02 <__multiply+0x92>
 8014ec4:	f105 0c14 	add.w	ip, r5, #20
 8014ec8:	f104 0314 	add.w	r3, r4, #20
 8014ecc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8014ed0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8014ed4:	9202      	str	r2, [sp, #8]
 8014ed6:	ebac 0205 	sub.w	r2, ip, r5
 8014eda:	3a15      	subs	r2, #21
 8014edc:	f022 0203 	bic.w	r2, r2, #3
 8014ee0:	3204      	adds	r2, #4
 8014ee2:	f105 0115 	add.w	r1, r5, #21
 8014ee6:	458c      	cmp	ip, r1
 8014ee8:	bf38      	it	cc
 8014eea:	2204      	movcc	r2, #4
 8014eec:	9201      	str	r2, [sp, #4]
 8014eee:	9a02      	ldr	r2, [sp, #8]
 8014ef0:	9303      	str	r3, [sp, #12]
 8014ef2:	429a      	cmp	r2, r3
 8014ef4:	d808      	bhi.n	8014f08 <__multiply+0x98>
 8014ef6:	2f00      	cmp	r7, #0
 8014ef8:	dc55      	bgt.n	8014fa6 <__multiply+0x136>
 8014efa:	6107      	str	r7, [r0, #16]
 8014efc:	b005      	add	sp, #20
 8014efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f02:	f843 2b04 	str.w	r2, [r3], #4
 8014f06:	e7db      	b.n	8014ec0 <__multiply+0x50>
 8014f08:	f8b3 a000 	ldrh.w	sl, [r3]
 8014f0c:	f1ba 0f00 	cmp.w	sl, #0
 8014f10:	d020      	beq.n	8014f54 <__multiply+0xe4>
 8014f12:	f105 0e14 	add.w	lr, r5, #20
 8014f16:	46b1      	mov	r9, r6
 8014f18:	2200      	movs	r2, #0
 8014f1a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8014f1e:	f8d9 b000 	ldr.w	fp, [r9]
 8014f22:	b2a1      	uxth	r1, r4
 8014f24:	fa1f fb8b 	uxth.w	fp, fp
 8014f28:	fb0a b101 	mla	r1, sl, r1, fp
 8014f2c:	4411      	add	r1, r2
 8014f2e:	f8d9 2000 	ldr.w	r2, [r9]
 8014f32:	0c24      	lsrs	r4, r4, #16
 8014f34:	0c12      	lsrs	r2, r2, #16
 8014f36:	fb0a 2404 	mla	r4, sl, r4, r2
 8014f3a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8014f3e:	b289      	uxth	r1, r1
 8014f40:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8014f44:	45f4      	cmp	ip, lr
 8014f46:	f849 1b04 	str.w	r1, [r9], #4
 8014f4a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8014f4e:	d8e4      	bhi.n	8014f1a <__multiply+0xaa>
 8014f50:	9901      	ldr	r1, [sp, #4]
 8014f52:	5072      	str	r2, [r6, r1]
 8014f54:	9a03      	ldr	r2, [sp, #12]
 8014f56:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014f5a:	3304      	adds	r3, #4
 8014f5c:	f1b9 0f00 	cmp.w	r9, #0
 8014f60:	d01f      	beq.n	8014fa2 <__multiply+0x132>
 8014f62:	6834      	ldr	r4, [r6, #0]
 8014f64:	f105 0114 	add.w	r1, r5, #20
 8014f68:	46b6      	mov	lr, r6
 8014f6a:	f04f 0a00 	mov.w	sl, #0
 8014f6e:	880a      	ldrh	r2, [r1, #0]
 8014f70:	f8be b002 	ldrh.w	fp, [lr, #2]
 8014f74:	fb09 b202 	mla	r2, r9, r2, fp
 8014f78:	4492      	add	sl, r2
 8014f7a:	b2a4      	uxth	r4, r4
 8014f7c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8014f80:	f84e 4b04 	str.w	r4, [lr], #4
 8014f84:	f851 4b04 	ldr.w	r4, [r1], #4
 8014f88:	f8be 2000 	ldrh.w	r2, [lr]
 8014f8c:	0c24      	lsrs	r4, r4, #16
 8014f8e:	fb09 2404 	mla	r4, r9, r4, r2
 8014f92:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8014f96:	458c      	cmp	ip, r1
 8014f98:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014f9c:	d8e7      	bhi.n	8014f6e <__multiply+0xfe>
 8014f9e:	9a01      	ldr	r2, [sp, #4]
 8014fa0:	50b4      	str	r4, [r6, r2]
 8014fa2:	3604      	adds	r6, #4
 8014fa4:	e7a3      	b.n	8014eee <__multiply+0x7e>
 8014fa6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d1a5      	bne.n	8014efa <__multiply+0x8a>
 8014fae:	3f01      	subs	r7, #1
 8014fb0:	e7a1      	b.n	8014ef6 <__multiply+0x86>
 8014fb2:	bf00      	nop
 8014fb4:	08016da0 	.word	0x08016da0
 8014fb8:	08016e30 	.word	0x08016e30

08014fbc <__pow5mult>:
 8014fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014fc0:	4615      	mov	r5, r2
 8014fc2:	f012 0203 	ands.w	r2, r2, #3
 8014fc6:	4606      	mov	r6, r0
 8014fc8:	460f      	mov	r7, r1
 8014fca:	d007      	beq.n	8014fdc <__pow5mult+0x20>
 8014fcc:	4c25      	ldr	r4, [pc, #148]	; (8015064 <__pow5mult+0xa8>)
 8014fce:	3a01      	subs	r2, #1
 8014fd0:	2300      	movs	r3, #0
 8014fd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014fd6:	f7ff fe51 	bl	8014c7c <__multadd>
 8014fda:	4607      	mov	r7, r0
 8014fdc:	10ad      	asrs	r5, r5, #2
 8014fde:	d03d      	beq.n	801505c <__pow5mult+0xa0>
 8014fe0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014fe2:	b97c      	cbnz	r4, 8015004 <__pow5mult+0x48>
 8014fe4:	2010      	movs	r0, #16
 8014fe6:	f7fc fac3 	bl	8011570 <malloc>
 8014fea:	4602      	mov	r2, r0
 8014fec:	6270      	str	r0, [r6, #36]	; 0x24
 8014fee:	b928      	cbnz	r0, 8014ffc <__pow5mult+0x40>
 8014ff0:	4b1d      	ldr	r3, [pc, #116]	; (8015068 <__pow5mult+0xac>)
 8014ff2:	481e      	ldr	r0, [pc, #120]	; (801506c <__pow5mult+0xb0>)
 8014ff4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014ff8:	f7fe fac0 	bl	801357c <__assert_func>
 8014ffc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015000:	6004      	str	r4, [r0, #0]
 8015002:	60c4      	str	r4, [r0, #12]
 8015004:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015008:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801500c:	b94c      	cbnz	r4, 8015022 <__pow5mult+0x66>
 801500e:	f240 2171 	movw	r1, #625	; 0x271
 8015012:	4630      	mov	r0, r6
 8015014:	f7ff ff16 	bl	8014e44 <__i2b>
 8015018:	2300      	movs	r3, #0
 801501a:	f8c8 0008 	str.w	r0, [r8, #8]
 801501e:	4604      	mov	r4, r0
 8015020:	6003      	str	r3, [r0, #0]
 8015022:	f04f 0900 	mov.w	r9, #0
 8015026:	07eb      	lsls	r3, r5, #31
 8015028:	d50a      	bpl.n	8015040 <__pow5mult+0x84>
 801502a:	4639      	mov	r1, r7
 801502c:	4622      	mov	r2, r4
 801502e:	4630      	mov	r0, r6
 8015030:	f7ff ff1e 	bl	8014e70 <__multiply>
 8015034:	4639      	mov	r1, r7
 8015036:	4680      	mov	r8, r0
 8015038:	4630      	mov	r0, r6
 801503a:	f7ff fdfd 	bl	8014c38 <_Bfree>
 801503e:	4647      	mov	r7, r8
 8015040:	106d      	asrs	r5, r5, #1
 8015042:	d00b      	beq.n	801505c <__pow5mult+0xa0>
 8015044:	6820      	ldr	r0, [r4, #0]
 8015046:	b938      	cbnz	r0, 8015058 <__pow5mult+0x9c>
 8015048:	4622      	mov	r2, r4
 801504a:	4621      	mov	r1, r4
 801504c:	4630      	mov	r0, r6
 801504e:	f7ff ff0f 	bl	8014e70 <__multiply>
 8015052:	6020      	str	r0, [r4, #0]
 8015054:	f8c0 9000 	str.w	r9, [r0]
 8015058:	4604      	mov	r4, r0
 801505a:	e7e4      	b.n	8015026 <__pow5mult+0x6a>
 801505c:	4638      	mov	r0, r7
 801505e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015062:	bf00      	nop
 8015064:	08016f80 	.word	0x08016f80
 8015068:	08016d2a 	.word	0x08016d2a
 801506c:	08016e30 	.word	0x08016e30

08015070 <__lshift>:
 8015070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015074:	460c      	mov	r4, r1
 8015076:	6849      	ldr	r1, [r1, #4]
 8015078:	6923      	ldr	r3, [r4, #16]
 801507a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801507e:	68a3      	ldr	r3, [r4, #8]
 8015080:	4607      	mov	r7, r0
 8015082:	4691      	mov	r9, r2
 8015084:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015088:	f108 0601 	add.w	r6, r8, #1
 801508c:	42b3      	cmp	r3, r6
 801508e:	db0b      	blt.n	80150a8 <__lshift+0x38>
 8015090:	4638      	mov	r0, r7
 8015092:	f7ff fd91 	bl	8014bb8 <_Balloc>
 8015096:	4605      	mov	r5, r0
 8015098:	b948      	cbnz	r0, 80150ae <__lshift+0x3e>
 801509a:	4602      	mov	r2, r0
 801509c:	4b28      	ldr	r3, [pc, #160]	; (8015140 <__lshift+0xd0>)
 801509e:	4829      	ldr	r0, [pc, #164]	; (8015144 <__lshift+0xd4>)
 80150a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80150a4:	f7fe fa6a 	bl	801357c <__assert_func>
 80150a8:	3101      	adds	r1, #1
 80150aa:	005b      	lsls	r3, r3, #1
 80150ac:	e7ee      	b.n	801508c <__lshift+0x1c>
 80150ae:	2300      	movs	r3, #0
 80150b0:	f100 0114 	add.w	r1, r0, #20
 80150b4:	f100 0210 	add.w	r2, r0, #16
 80150b8:	4618      	mov	r0, r3
 80150ba:	4553      	cmp	r3, sl
 80150bc:	db33      	blt.n	8015126 <__lshift+0xb6>
 80150be:	6920      	ldr	r0, [r4, #16]
 80150c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80150c4:	f104 0314 	add.w	r3, r4, #20
 80150c8:	f019 091f 	ands.w	r9, r9, #31
 80150cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80150d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80150d4:	d02b      	beq.n	801512e <__lshift+0xbe>
 80150d6:	f1c9 0e20 	rsb	lr, r9, #32
 80150da:	468a      	mov	sl, r1
 80150dc:	2200      	movs	r2, #0
 80150de:	6818      	ldr	r0, [r3, #0]
 80150e0:	fa00 f009 	lsl.w	r0, r0, r9
 80150e4:	4302      	orrs	r2, r0
 80150e6:	f84a 2b04 	str.w	r2, [sl], #4
 80150ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80150ee:	459c      	cmp	ip, r3
 80150f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80150f4:	d8f3      	bhi.n	80150de <__lshift+0x6e>
 80150f6:	ebac 0304 	sub.w	r3, ip, r4
 80150fa:	3b15      	subs	r3, #21
 80150fc:	f023 0303 	bic.w	r3, r3, #3
 8015100:	3304      	adds	r3, #4
 8015102:	f104 0015 	add.w	r0, r4, #21
 8015106:	4584      	cmp	ip, r0
 8015108:	bf38      	it	cc
 801510a:	2304      	movcc	r3, #4
 801510c:	50ca      	str	r2, [r1, r3]
 801510e:	b10a      	cbz	r2, 8015114 <__lshift+0xa4>
 8015110:	f108 0602 	add.w	r6, r8, #2
 8015114:	3e01      	subs	r6, #1
 8015116:	4638      	mov	r0, r7
 8015118:	612e      	str	r6, [r5, #16]
 801511a:	4621      	mov	r1, r4
 801511c:	f7ff fd8c 	bl	8014c38 <_Bfree>
 8015120:	4628      	mov	r0, r5
 8015122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015126:	f842 0f04 	str.w	r0, [r2, #4]!
 801512a:	3301      	adds	r3, #1
 801512c:	e7c5      	b.n	80150ba <__lshift+0x4a>
 801512e:	3904      	subs	r1, #4
 8015130:	f853 2b04 	ldr.w	r2, [r3], #4
 8015134:	f841 2f04 	str.w	r2, [r1, #4]!
 8015138:	459c      	cmp	ip, r3
 801513a:	d8f9      	bhi.n	8015130 <__lshift+0xc0>
 801513c:	e7ea      	b.n	8015114 <__lshift+0xa4>
 801513e:	bf00      	nop
 8015140:	08016da0 	.word	0x08016da0
 8015144:	08016e30 	.word	0x08016e30

08015148 <__mcmp>:
 8015148:	b530      	push	{r4, r5, lr}
 801514a:	6902      	ldr	r2, [r0, #16]
 801514c:	690c      	ldr	r4, [r1, #16]
 801514e:	1b12      	subs	r2, r2, r4
 8015150:	d10e      	bne.n	8015170 <__mcmp+0x28>
 8015152:	f100 0314 	add.w	r3, r0, #20
 8015156:	3114      	adds	r1, #20
 8015158:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801515c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015160:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015164:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015168:	42a5      	cmp	r5, r4
 801516a:	d003      	beq.n	8015174 <__mcmp+0x2c>
 801516c:	d305      	bcc.n	801517a <__mcmp+0x32>
 801516e:	2201      	movs	r2, #1
 8015170:	4610      	mov	r0, r2
 8015172:	bd30      	pop	{r4, r5, pc}
 8015174:	4283      	cmp	r3, r0
 8015176:	d3f3      	bcc.n	8015160 <__mcmp+0x18>
 8015178:	e7fa      	b.n	8015170 <__mcmp+0x28>
 801517a:	f04f 32ff 	mov.w	r2, #4294967295
 801517e:	e7f7      	b.n	8015170 <__mcmp+0x28>

08015180 <__mdiff>:
 8015180:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015184:	460c      	mov	r4, r1
 8015186:	4606      	mov	r6, r0
 8015188:	4611      	mov	r1, r2
 801518a:	4620      	mov	r0, r4
 801518c:	4617      	mov	r7, r2
 801518e:	f7ff ffdb 	bl	8015148 <__mcmp>
 8015192:	1e05      	subs	r5, r0, #0
 8015194:	d110      	bne.n	80151b8 <__mdiff+0x38>
 8015196:	4629      	mov	r1, r5
 8015198:	4630      	mov	r0, r6
 801519a:	f7ff fd0d 	bl	8014bb8 <_Balloc>
 801519e:	b930      	cbnz	r0, 80151ae <__mdiff+0x2e>
 80151a0:	4b39      	ldr	r3, [pc, #228]	; (8015288 <__mdiff+0x108>)
 80151a2:	4602      	mov	r2, r0
 80151a4:	f240 2132 	movw	r1, #562	; 0x232
 80151a8:	4838      	ldr	r0, [pc, #224]	; (801528c <__mdiff+0x10c>)
 80151aa:	f7fe f9e7 	bl	801357c <__assert_func>
 80151ae:	2301      	movs	r3, #1
 80151b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80151b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151b8:	bfa4      	itt	ge
 80151ba:	463b      	movge	r3, r7
 80151bc:	4627      	movge	r7, r4
 80151be:	4630      	mov	r0, r6
 80151c0:	6879      	ldr	r1, [r7, #4]
 80151c2:	bfa6      	itte	ge
 80151c4:	461c      	movge	r4, r3
 80151c6:	2500      	movge	r5, #0
 80151c8:	2501      	movlt	r5, #1
 80151ca:	f7ff fcf5 	bl	8014bb8 <_Balloc>
 80151ce:	b920      	cbnz	r0, 80151da <__mdiff+0x5a>
 80151d0:	4b2d      	ldr	r3, [pc, #180]	; (8015288 <__mdiff+0x108>)
 80151d2:	4602      	mov	r2, r0
 80151d4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80151d8:	e7e6      	b.n	80151a8 <__mdiff+0x28>
 80151da:	693e      	ldr	r6, [r7, #16]
 80151dc:	60c5      	str	r5, [r0, #12]
 80151de:	6925      	ldr	r5, [r4, #16]
 80151e0:	f107 0114 	add.w	r1, r7, #20
 80151e4:	f104 0914 	add.w	r9, r4, #20
 80151e8:	f100 0e14 	add.w	lr, r0, #20
 80151ec:	f107 0210 	add.w	r2, r7, #16
 80151f0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80151f4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80151f8:	46f2      	mov	sl, lr
 80151fa:	2700      	movs	r7, #0
 80151fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8015200:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015204:	fa1f f883 	uxth.w	r8, r3
 8015208:	fa17 f78b 	uxtah	r7, r7, fp
 801520c:	0c1b      	lsrs	r3, r3, #16
 801520e:	eba7 0808 	sub.w	r8, r7, r8
 8015212:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015216:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801521a:	fa1f f888 	uxth.w	r8, r8
 801521e:	141f      	asrs	r7, r3, #16
 8015220:	454d      	cmp	r5, r9
 8015222:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015226:	f84a 3b04 	str.w	r3, [sl], #4
 801522a:	d8e7      	bhi.n	80151fc <__mdiff+0x7c>
 801522c:	1b2b      	subs	r3, r5, r4
 801522e:	3b15      	subs	r3, #21
 8015230:	f023 0303 	bic.w	r3, r3, #3
 8015234:	3304      	adds	r3, #4
 8015236:	3415      	adds	r4, #21
 8015238:	42a5      	cmp	r5, r4
 801523a:	bf38      	it	cc
 801523c:	2304      	movcc	r3, #4
 801523e:	4419      	add	r1, r3
 8015240:	4473      	add	r3, lr
 8015242:	469e      	mov	lr, r3
 8015244:	460d      	mov	r5, r1
 8015246:	4565      	cmp	r5, ip
 8015248:	d30e      	bcc.n	8015268 <__mdiff+0xe8>
 801524a:	f10c 0203 	add.w	r2, ip, #3
 801524e:	1a52      	subs	r2, r2, r1
 8015250:	f022 0203 	bic.w	r2, r2, #3
 8015254:	3903      	subs	r1, #3
 8015256:	458c      	cmp	ip, r1
 8015258:	bf38      	it	cc
 801525a:	2200      	movcc	r2, #0
 801525c:	441a      	add	r2, r3
 801525e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8015262:	b17b      	cbz	r3, 8015284 <__mdiff+0x104>
 8015264:	6106      	str	r6, [r0, #16]
 8015266:	e7a5      	b.n	80151b4 <__mdiff+0x34>
 8015268:	f855 8b04 	ldr.w	r8, [r5], #4
 801526c:	fa17 f488 	uxtah	r4, r7, r8
 8015270:	1422      	asrs	r2, r4, #16
 8015272:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8015276:	b2a4      	uxth	r4, r4
 8015278:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801527c:	f84e 4b04 	str.w	r4, [lr], #4
 8015280:	1417      	asrs	r7, r2, #16
 8015282:	e7e0      	b.n	8015246 <__mdiff+0xc6>
 8015284:	3e01      	subs	r6, #1
 8015286:	e7ea      	b.n	801525e <__mdiff+0xde>
 8015288:	08016da0 	.word	0x08016da0
 801528c:	08016e30 	.word	0x08016e30

08015290 <__ulp>:
 8015290:	b082      	sub	sp, #8
 8015292:	ed8d 0b00 	vstr	d0, [sp]
 8015296:	9b01      	ldr	r3, [sp, #4]
 8015298:	4912      	ldr	r1, [pc, #72]	; (80152e4 <__ulp+0x54>)
 801529a:	4019      	ands	r1, r3
 801529c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80152a0:	2900      	cmp	r1, #0
 80152a2:	dd05      	ble.n	80152b0 <__ulp+0x20>
 80152a4:	2200      	movs	r2, #0
 80152a6:	460b      	mov	r3, r1
 80152a8:	ec43 2b10 	vmov	d0, r2, r3
 80152ac:	b002      	add	sp, #8
 80152ae:	4770      	bx	lr
 80152b0:	4249      	negs	r1, r1
 80152b2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80152b6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80152ba:	f04f 0200 	mov.w	r2, #0
 80152be:	f04f 0300 	mov.w	r3, #0
 80152c2:	da04      	bge.n	80152ce <__ulp+0x3e>
 80152c4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80152c8:	fa41 f300 	asr.w	r3, r1, r0
 80152cc:	e7ec      	b.n	80152a8 <__ulp+0x18>
 80152ce:	f1a0 0114 	sub.w	r1, r0, #20
 80152d2:	291e      	cmp	r1, #30
 80152d4:	bfda      	itte	le
 80152d6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80152da:	fa20 f101 	lsrle.w	r1, r0, r1
 80152de:	2101      	movgt	r1, #1
 80152e0:	460a      	mov	r2, r1
 80152e2:	e7e1      	b.n	80152a8 <__ulp+0x18>
 80152e4:	7ff00000 	.word	0x7ff00000

080152e8 <__b2d>:
 80152e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152ea:	6905      	ldr	r5, [r0, #16]
 80152ec:	f100 0714 	add.w	r7, r0, #20
 80152f0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80152f4:	1f2e      	subs	r6, r5, #4
 80152f6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80152fa:	4620      	mov	r0, r4
 80152fc:	f7ff fd52 	bl	8014da4 <__hi0bits>
 8015300:	f1c0 0320 	rsb	r3, r0, #32
 8015304:	280a      	cmp	r0, #10
 8015306:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8015384 <__b2d+0x9c>
 801530a:	600b      	str	r3, [r1, #0]
 801530c:	dc14      	bgt.n	8015338 <__b2d+0x50>
 801530e:	f1c0 0e0b 	rsb	lr, r0, #11
 8015312:	fa24 f10e 	lsr.w	r1, r4, lr
 8015316:	42b7      	cmp	r7, r6
 8015318:	ea41 030c 	orr.w	r3, r1, ip
 801531c:	bf34      	ite	cc
 801531e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015322:	2100      	movcs	r1, #0
 8015324:	3015      	adds	r0, #21
 8015326:	fa04 f000 	lsl.w	r0, r4, r0
 801532a:	fa21 f10e 	lsr.w	r1, r1, lr
 801532e:	ea40 0201 	orr.w	r2, r0, r1
 8015332:	ec43 2b10 	vmov	d0, r2, r3
 8015336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015338:	42b7      	cmp	r7, r6
 801533a:	bf3a      	itte	cc
 801533c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015340:	f1a5 0608 	subcc.w	r6, r5, #8
 8015344:	2100      	movcs	r1, #0
 8015346:	380b      	subs	r0, #11
 8015348:	d017      	beq.n	801537a <__b2d+0x92>
 801534a:	f1c0 0c20 	rsb	ip, r0, #32
 801534e:	fa04 f500 	lsl.w	r5, r4, r0
 8015352:	42be      	cmp	r6, r7
 8015354:	fa21 f40c 	lsr.w	r4, r1, ip
 8015358:	ea45 0504 	orr.w	r5, r5, r4
 801535c:	bf8c      	ite	hi
 801535e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8015362:	2400      	movls	r4, #0
 8015364:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8015368:	fa01 f000 	lsl.w	r0, r1, r0
 801536c:	fa24 f40c 	lsr.w	r4, r4, ip
 8015370:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015374:	ea40 0204 	orr.w	r2, r0, r4
 8015378:	e7db      	b.n	8015332 <__b2d+0x4a>
 801537a:	ea44 030c 	orr.w	r3, r4, ip
 801537e:	460a      	mov	r2, r1
 8015380:	e7d7      	b.n	8015332 <__b2d+0x4a>
 8015382:	bf00      	nop
 8015384:	3ff00000 	.word	0x3ff00000

08015388 <__d2b>:
 8015388:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801538c:	4689      	mov	r9, r1
 801538e:	2101      	movs	r1, #1
 8015390:	ec57 6b10 	vmov	r6, r7, d0
 8015394:	4690      	mov	r8, r2
 8015396:	f7ff fc0f 	bl	8014bb8 <_Balloc>
 801539a:	4604      	mov	r4, r0
 801539c:	b930      	cbnz	r0, 80153ac <__d2b+0x24>
 801539e:	4602      	mov	r2, r0
 80153a0:	4b25      	ldr	r3, [pc, #148]	; (8015438 <__d2b+0xb0>)
 80153a2:	4826      	ldr	r0, [pc, #152]	; (801543c <__d2b+0xb4>)
 80153a4:	f240 310a 	movw	r1, #778	; 0x30a
 80153a8:	f7fe f8e8 	bl	801357c <__assert_func>
 80153ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80153b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80153b4:	bb35      	cbnz	r5, 8015404 <__d2b+0x7c>
 80153b6:	2e00      	cmp	r6, #0
 80153b8:	9301      	str	r3, [sp, #4]
 80153ba:	d028      	beq.n	801540e <__d2b+0x86>
 80153bc:	4668      	mov	r0, sp
 80153be:	9600      	str	r6, [sp, #0]
 80153c0:	f7ff fd10 	bl	8014de4 <__lo0bits>
 80153c4:	9900      	ldr	r1, [sp, #0]
 80153c6:	b300      	cbz	r0, 801540a <__d2b+0x82>
 80153c8:	9a01      	ldr	r2, [sp, #4]
 80153ca:	f1c0 0320 	rsb	r3, r0, #32
 80153ce:	fa02 f303 	lsl.w	r3, r2, r3
 80153d2:	430b      	orrs	r3, r1
 80153d4:	40c2      	lsrs	r2, r0
 80153d6:	6163      	str	r3, [r4, #20]
 80153d8:	9201      	str	r2, [sp, #4]
 80153da:	9b01      	ldr	r3, [sp, #4]
 80153dc:	61a3      	str	r3, [r4, #24]
 80153de:	2b00      	cmp	r3, #0
 80153e0:	bf14      	ite	ne
 80153e2:	2202      	movne	r2, #2
 80153e4:	2201      	moveq	r2, #1
 80153e6:	6122      	str	r2, [r4, #16]
 80153e8:	b1d5      	cbz	r5, 8015420 <__d2b+0x98>
 80153ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80153ee:	4405      	add	r5, r0
 80153f0:	f8c9 5000 	str.w	r5, [r9]
 80153f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80153f8:	f8c8 0000 	str.w	r0, [r8]
 80153fc:	4620      	mov	r0, r4
 80153fe:	b003      	add	sp, #12
 8015400:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015404:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015408:	e7d5      	b.n	80153b6 <__d2b+0x2e>
 801540a:	6161      	str	r1, [r4, #20]
 801540c:	e7e5      	b.n	80153da <__d2b+0x52>
 801540e:	a801      	add	r0, sp, #4
 8015410:	f7ff fce8 	bl	8014de4 <__lo0bits>
 8015414:	9b01      	ldr	r3, [sp, #4]
 8015416:	6163      	str	r3, [r4, #20]
 8015418:	2201      	movs	r2, #1
 801541a:	6122      	str	r2, [r4, #16]
 801541c:	3020      	adds	r0, #32
 801541e:	e7e3      	b.n	80153e8 <__d2b+0x60>
 8015420:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015424:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015428:	f8c9 0000 	str.w	r0, [r9]
 801542c:	6918      	ldr	r0, [r3, #16]
 801542e:	f7ff fcb9 	bl	8014da4 <__hi0bits>
 8015432:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015436:	e7df      	b.n	80153f8 <__d2b+0x70>
 8015438:	08016da0 	.word	0x08016da0
 801543c:	08016e30 	.word	0x08016e30

08015440 <__ratio>:
 8015440:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015444:	4688      	mov	r8, r1
 8015446:	4669      	mov	r1, sp
 8015448:	4681      	mov	r9, r0
 801544a:	f7ff ff4d 	bl	80152e8 <__b2d>
 801544e:	a901      	add	r1, sp, #4
 8015450:	4640      	mov	r0, r8
 8015452:	ec55 4b10 	vmov	r4, r5, d0
 8015456:	f7ff ff47 	bl	80152e8 <__b2d>
 801545a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801545e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015462:	eba3 0c02 	sub.w	ip, r3, r2
 8015466:	e9dd 3200 	ldrd	r3, r2, [sp]
 801546a:	1a9b      	subs	r3, r3, r2
 801546c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015470:	ec51 0b10 	vmov	r0, r1, d0
 8015474:	2b00      	cmp	r3, #0
 8015476:	bfd6      	itet	le
 8015478:	460a      	movle	r2, r1
 801547a:	462a      	movgt	r2, r5
 801547c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015480:	468b      	mov	fp, r1
 8015482:	462f      	mov	r7, r5
 8015484:	bfd4      	ite	le
 8015486:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801548a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801548e:	4620      	mov	r0, r4
 8015490:	ee10 2a10 	vmov	r2, s0
 8015494:	465b      	mov	r3, fp
 8015496:	4639      	mov	r1, r7
 8015498:	f7eb f9e8 	bl	800086c <__aeabi_ddiv>
 801549c:	ec41 0b10 	vmov	d0, r0, r1
 80154a0:	b003      	add	sp, #12
 80154a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080154a6 <__copybits>:
 80154a6:	3901      	subs	r1, #1
 80154a8:	b570      	push	{r4, r5, r6, lr}
 80154aa:	1149      	asrs	r1, r1, #5
 80154ac:	6914      	ldr	r4, [r2, #16]
 80154ae:	3101      	adds	r1, #1
 80154b0:	f102 0314 	add.w	r3, r2, #20
 80154b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80154b8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80154bc:	1f05      	subs	r5, r0, #4
 80154be:	42a3      	cmp	r3, r4
 80154c0:	d30c      	bcc.n	80154dc <__copybits+0x36>
 80154c2:	1aa3      	subs	r3, r4, r2
 80154c4:	3b11      	subs	r3, #17
 80154c6:	f023 0303 	bic.w	r3, r3, #3
 80154ca:	3211      	adds	r2, #17
 80154cc:	42a2      	cmp	r2, r4
 80154ce:	bf88      	it	hi
 80154d0:	2300      	movhi	r3, #0
 80154d2:	4418      	add	r0, r3
 80154d4:	2300      	movs	r3, #0
 80154d6:	4288      	cmp	r0, r1
 80154d8:	d305      	bcc.n	80154e6 <__copybits+0x40>
 80154da:	bd70      	pop	{r4, r5, r6, pc}
 80154dc:	f853 6b04 	ldr.w	r6, [r3], #4
 80154e0:	f845 6f04 	str.w	r6, [r5, #4]!
 80154e4:	e7eb      	b.n	80154be <__copybits+0x18>
 80154e6:	f840 3b04 	str.w	r3, [r0], #4
 80154ea:	e7f4      	b.n	80154d6 <__copybits+0x30>

080154ec <__any_on>:
 80154ec:	f100 0214 	add.w	r2, r0, #20
 80154f0:	6900      	ldr	r0, [r0, #16]
 80154f2:	114b      	asrs	r3, r1, #5
 80154f4:	4298      	cmp	r0, r3
 80154f6:	b510      	push	{r4, lr}
 80154f8:	db11      	blt.n	801551e <__any_on+0x32>
 80154fa:	dd0a      	ble.n	8015512 <__any_on+0x26>
 80154fc:	f011 011f 	ands.w	r1, r1, #31
 8015500:	d007      	beq.n	8015512 <__any_on+0x26>
 8015502:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015506:	fa24 f001 	lsr.w	r0, r4, r1
 801550a:	fa00 f101 	lsl.w	r1, r0, r1
 801550e:	428c      	cmp	r4, r1
 8015510:	d10b      	bne.n	801552a <__any_on+0x3e>
 8015512:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015516:	4293      	cmp	r3, r2
 8015518:	d803      	bhi.n	8015522 <__any_on+0x36>
 801551a:	2000      	movs	r0, #0
 801551c:	bd10      	pop	{r4, pc}
 801551e:	4603      	mov	r3, r0
 8015520:	e7f7      	b.n	8015512 <__any_on+0x26>
 8015522:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015526:	2900      	cmp	r1, #0
 8015528:	d0f5      	beq.n	8015516 <__any_on+0x2a>
 801552a:	2001      	movs	r0, #1
 801552c:	e7f6      	b.n	801551c <__any_on+0x30>

0801552e <_calloc_r>:
 801552e:	b513      	push	{r0, r1, r4, lr}
 8015530:	434a      	muls	r2, r1
 8015532:	4611      	mov	r1, r2
 8015534:	9201      	str	r2, [sp, #4]
 8015536:	f7fc f8a3 	bl	8011680 <_malloc_r>
 801553a:	4604      	mov	r4, r0
 801553c:	b118      	cbz	r0, 8015546 <_calloc_r+0x18>
 801553e:	9a01      	ldr	r2, [sp, #4]
 8015540:	2100      	movs	r1, #0
 8015542:	f7fc f845 	bl	80115d0 <memset>
 8015546:	4620      	mov	r0, r4
 8015548:	b002      	add	sp, #8
 801554a:	bd10      	pop	{r4, pc}

0801554c <_realloc_r>:
 801554c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801554e:	4607      	mov	r7, r0
 8015550:	4614      	mov	r4, r2
 8015552:	460e      	mov	r6, r1
 8015554:	b921      	cbnz	r1, 8015560 <_realloc_r+0x14>
 8015556:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801555a:	4611      	mov	r1, r2
 801555c:	f7fc b890 	b.w	8011680 <_malloc_r>
 8015560:	b922      	cbnz	r2, 801556c <_realloc_r+0x20>
 8015562:	f7fc f83d 	bl	80115e0 <_free_r>
 8015566:	4625      	mov	r5, r4
 8015568:	4628      	mov	r0, r5
 801556a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801556c:	f000 ffaa 	bl	80164c4 <_malloc_usable_size_r>
 8015570:	42a0      	cmp	r0, r4
 8015572:	d20f      	bcs.n	8015594 <_realloc_r+0x48>
 8015574:	4621      	mov	r1, r4
 8015576:	4638      	mov	r0, r7
 8015578:	f7fc f882 	bl	8011680 <_malloc_r>
 801557c:	4605      	mov	r5, r0
 801557e:	2800      	cmp	r0, #0
 8015580:	d0f2      	beq.n	8015568 <_realloc_r+0x1c>
 8015582:	4631      	mov	r1, r6
 8015584:	4622      	mov	r2, r4
 8015586:	f7fb fffb 	bl	8011580 <memcpy>
 801558a:	4631      	mov	r1, r6
 801558c:	4638      	mov	r0, r7
 801558e:	f7fc f827 	bl	80115e0 <_free_r>
 8015592:	e7e9      	b.n	8015568 <_realloc_r+0x1c>
 8015594:	4635      	mov	r5, r6
 8015596:	e7e7      	b.n	8015568 <_realloc_r+0x1c>

08015598 <__ssputs_r>:
 8015598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801559c:	688e      	ldr	r6, [r1, #8]
 801559e:	429e      	cmp	r6, r3
 80155a0:	4682      	mov	sl, r0
 80155a2:	460c      	mov	r4, r1
 80155a4:	4690      	mov	r8, r2
 80155a6:	461f      	mov	r7, r3
 80155a8:	d838      	bhi.n	801561c <__ssputs_r+0x84>
 80155aa:	898a      	ldrh	r2, [r1, #12]
 80155ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80155b0:	d032      	beq.n	8015618 <__ssputs_r+0x80>
 80155b2:	6825      	ldr	r5, [r4, #0]
 80155b4:	6909      	ldr	r1, [r1, #16]
 80155b6:	eba5 0901 	sub.w	r9, r5, r1
 80155ba:	6965      	ldr	r5, [r4, #20]
 80155bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80155c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80155c4:	3301      	adds	r3, #1
 80155c6:	444b      	add	r3, r9
 80155c8:	106d      	asrs	r5, r5, #1
 80155ca:	429d      	cmp	r5, r3
 80155cc:	bf38      	it	cc
 80155ce:	461d      	movcc	r5, r3
 80155d0:	0553      	lsls	r3, r2, #21
 80155d2:	d531      	bpl.n	8015638 <__ssputs_r+0xa0>
 80155d4:	4629      	mov	r1, r5
 80155d6:	f7fc f853 	bl	8011680 <_malloc_r>
 80155da:	4606      	mov	r6, r0
 80155dc:	b950      	cbnz	r0, 80155f4 <__ssputs_r+0x5c>
 80155de:	230c      	movs	r3, #12
 80155e0:	f8ca 3000 	str.w	r3, [sl]
 80155e4:	89a3      	ldrh	r3, [r4, #12]
 80155e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80155ea:	81a3      	strh	r3, [r4, #12]
 80155ec:	f04f 30ff 	mov.w	r0, #4294967295
 80155f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155f4:	6921      	ldr	r1, [r4, #16]
 80155f6:	464a      	mov	r2, r9
 80155f8:	f7fb ffc2 	bl	8011580 <memcpy>
 80155fc:	89a3      	ldrh	r3, [r4, #12]
 80155fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015606:	81a3      	strh	r3, [r4, #12]
 8015608:	6126      	str	r6, [r4, #16]
 801560a:	6165      	str	r5, [r4, #20]
 801560c:	444e      	add	r6, r9
 801560e:	eba5 0509 	sub.w	r5, r5, r9
 8015612:	6026      	str	r6, [r4, #0]
 8015614:	60a5      	str	r5, [r4, #8]
 8015616:	463e      	mov	r6, r7
 8015618:	42be      	cmp	r6, r7
 801561a:	d900      	bls.n	801561e <__ssputs_r+0x86>
 801561c:	463e      	mov	r6, r7
 801561e:	4632      	mov	r2, r6
 8015620:	6820      	ldr	r0, [r4, #0]
 8015622:	4641      	mov	r1, r8
 8015624:	f7fb ffba 	bl	801159c <memmove>
 8015628:	68a3      	ldr	r3, [r4, #8]
 801562a:	6822      	ldr	r2, [r4, #0]
 801562c:	1b9b      	subs	r3, r3, r6
 801562e:	4432      	add	r2, r6
 8015630:	60a3      	str	r3, [r4, #8]
 8015632:	6022      	str	r2, [r4, #0]
 8015634:	2000      	movs	r0, #0
 8015636:	e7db      	b.n	80155f0 <__ssputs_r+0x58>
 8015638:	462a      	mov	r2, r5
 801563a:	f7ff ff87 	bl	801554c <_realloc_r>
 801563e:	4606      	mov	r6, r0
 8015640:	2800      	cmp	r0, #0
 8015642:	d1e1      	bne.n	8015608 <__ssputs_r+0x70>
 8015644:	6921      	ldr	r1, [r4, #16]
 8015646:	4650      	mov	r0, sl
 8015648:	f7fb ffca 	bl	80115e0 <_free_r>
 801564c:	e7c7      	b.n	80155de <__ssputs_r+0x46>
	...

08015650 <_svfiprintf_r>:
 8015650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015654:	4698      	mov	r8, r3
 8015656:	898b      	ldrh	r3, [r1, #12]
 8015658:	061b      	lsls	r3, r3, #24
 801565a:	b09d      	sub	sp, #116	; 0x74
 801565c:	4607      	mov	r7, r0
 801565e:	460d      	mov	r5, r1
 8015660:	4614      	mov	r4, r2
 8015662:	d50e      	bpl.n	8015682 <_svfiprintf_r+0x32>
 8015664:	690b      	ldr	r3, [r1, #16]
 8015666:	b963      	cbnz	r3, 8015682 <_svfiprintf_r+0x32>
 8015668:	2140      	movs	r1, #64	; 0x40
 801566a:	f7fc f809 	bl	8011680 <_malloc_r>
 801566e:	6028      	str	r0, [r5, #0]
 8015670:	6128      	str	r0, [r5, #16]
 8015672:	b920      	cbnz	r0, 801567e <_svfiprintf_r+0x2e>
 8015674:	230c      	movs	r3, #12
 8015676:	603b      	str	r3, [r7, #0]
 8015678:	f04f 30ff 	mov.w	r0, #4294967295
 801567c:	e0d1      	b.n	8015822 <_svfiprintf_r+0x1d2>
 801567e:	2340      	movs	r3, #64	; 0x40
 8015680:	616b      	str	r3, [r5, #20]
 8015682:	2300      	movs	r3, #0
 8015684:	9309      	str	r3, [sp, #36]	; 0x24
 8015686:	2320      	movs	r3, #32
 8015688:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801568c:	f8cd 800c 	str.w	r8, [sp, #12]
 8015690:	2330      	movs	r3, #48	; 0x30
 8015692:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801583c <_svfiprintf_r+0x1ec>
 8015696:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801569a:	f04f 0901 	mov.w	r9, #1
 801569e:	4623      	mov	r3, r4
 80156a0:	469a      	mov	sl, r3
 80156a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80156a6:	b10a      	cbz	r2, 80156ac <_svfiprintf_r+0x5c>
 80156a8:	2a25      	cmp	r2, #37	; 0x25
 80156aa:	d1f9      	bne.n	80156a0 <_svfiprintf_r+0x50>
 80156ac:	ebba 0b04 	subs.w	fp, sl, r4
 80156b0:	d00b      	beq.n	80156ca <_svfiprintf_r+0x7a>
 80156b2:	465b      	mov	r3, fp
 80156b4:	4622      	mov	r2, r4
 80156b6:	4629      	mov	r1, r5
 80156b8:	4638      	mov	r0, r7
 80156ba:	f7ff ff6d 	bl	8015598 <__ssputs_r>
 80156be:	3001      	adds	r0, #1
 80156c0:	f000 80aa 	beq.w	8015818 <_svfiprintf_r+0x1c8>
 80156c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80156c6:	445a      	add	r2, fp
 80156c8:	9209      	str	r2, [sp, #36]	; 0x24
 80156ca:	f89a 3000 	ldrb.w	r3, [sl]
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	f000 80a2 	beq.w	8015818 <_svfiprintf_r+0x1c8>
 80156d4:	2300      	movs	r3, #0
 80156d6:	f04f 32ff 	mov.w	r2, #4294967295
 80156da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80156de:	f10a 0a01 	add.w	sl, sl, #1
 80156e2:	9304      	str	r3, [sp, #16]
 80156e4:	9307      	str	r3, [sp, #28]
 80156e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80156ea:	931a      	str	r3, [sp, #104]	; 0x68
 80156ec:	4654      	mov	r4, sl
 80156ee:	2205      	movs	r2, #5
 80156f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80156f4:	4851      	ldr	r0, [pc, #324]	; (801583c <_svfiprintf_r+0x1ec>)
 80156f6:	f7ea fd83 	bl	8000200 <memchr>
 80156fa:	9a04      	ldr	r2, [sp, #16]
 80156fc:	b9d8      	cbnz	r0, 8015736 <_svfiprintf_r+0xe6>
 80156fe:	06d0      	lsls	r0, r2, #27
 8015700:	bf44      	itt	mi
 8015702:	2320      	movmi	r3, #32
 8015704:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015708:	0711      	lsls	r1, r2, #28
 801570a:	bf44      	itt	mi
 801570c:	232b      	movmi	r3, #43	; 0x2b
 801570e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015712:	f89a 3000 	ldrb.w	r3, [sl]
 8015716:	2b2a      	cmp	r3, #42	; 0x2a
 8015718:	d015      	beq.n	8015746 <_svfiprintf_r+0xf6>
 801571a:	9a07      	ldr	r2, [sp, #28]
 801571c:	4654      	mov	r4, sl
 801571e:	2000      	movs	r0, #0
 8015720:	f04f 0c0a 	mov.w	ip, #10
 8015724:	4621      	mov	r1, r4
 8015726:	f811 3b01 	ldrb.w	r3, [r1], #1
 801572a:	3b30      	subs	r3, #48	; 0x30
 801572c:	2b09      	cmp	r3, #9
 801572e:	d94e      	bls.n	80157ce <_svfiprintf_r+0x17e>
 8015730:	b1b0      	cbz	r0, 8015760 <_svfiprintf_r+0x110>
 8015732:	9207      	str	r2, [sp, #28]
 8015734:	e014      	b.n	8015760 <_svfiprintf_r+0x110>
 8015736:	eba0 0308 	sub.w	r3, r0, r8
 801573a:	fa09 f303 	lsl.w	r3, r9, r3
 801573e:	4313      	orrs	r3, r2
 8015740:	9304      	str	r3, [sp, #16]
 8015742:	46a2      	mov	sl, r4
 8015744:	e7d2      	b.n	80156ec <_svfiprintf_r+0x9c>
 8015746:	9b03      	ldr	r3, [sp, #12]
 8015748:	1d19      	adds	r1, r3, #4
 801574a:	681b      	ldr	r3, [r3, #0]
 801574c:	9103      	str	r1, [sp, #12]
 801574e:	2b00      	cmp	r3, #0
 8015750:	bfbb      	ittet	lt
 8015752:	425b      	neglt	r3, r3
 8015754:	f042 0202 	orrlt.w	r2, r2, #2
 8015758:	9307      	strge	r3, [sp, #28]
 801575a:	9307      	strlt	r3, [sp, #28]
 801575c:	bfb8      	it	lt
 801575e:	9204      	strlt	r2, [sp, #16]
 8015760:	7823      	ldrb	r3, [r4, #0]
 8015762:	2b2e      	cmp	r3, #46	; 0x2e
 8015764:	d10c      	bne.n	8015780 <_svfiprintf_r+0x130>
 8015766:	7863      	ldrb	r3, [r4, #1]
 8015768:	2b2a      	cmp	r3, #42	; 0x2a
 801576a:	d135      	bne.n	80157d8 <_svfiprintf_r+0x188>
 801576c:	9b03      	ldr	r3, [sp, #12]
 801576e:	1d1a      	adds	r2, r3, #4
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	9203      	str	r2, [sp, #12]
 8015774:	2b00      	cmp	r3, #0
 8015776:	bfb8      	it	lt
 8015778:	f04f 33ff 	movlt.w	r3, #4294967295
 801577c:	3402      	adds	r4, #2
 801577e:	9305      	str	r3, [sp, #20]
 8015780:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801584c <_svfiprintf_r+0x1fc>
 8015784:	7821      	ldrb	r1, [r4, #0]
 8015786:	2203      	movs	r2, #3
 8015788:	4650      	mov	r0, sl
 801578a:	f7ea fd39 	bl	8000200 <memchr>
 801578e:	b140      	cbz	r0, 80157a2 <_svfiprintf_r+0x152>
 8015790:	2340      	movs	r3, #64	; 0x40
 8015792:	eba0 000a 	sub.w	r0, r0, sl
 8015796:	fa03 f000 	lsl.w	r0, r3, r0
 801579a:	9b04      	ldr	r3, [sp, #16]
 801579c:	4303      	orrs	r3, r0
 801579e:	3401      	adds	r4, #1
 80157a0:	9304      	str	r3, [sp, #16]
 80157a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80157a6:	4826      	ldr	r0, [pc, #152]	; (8015840 <_svfiprintf_r+0x1f0>)
 80157a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80157ac:	2206      	movs	r2, #6
 80157ae:	f7ea fd27 	bl	8000200 <memchr>
 80157b2:	2800      	cmp	r0, #0
 80157b4:	d038      	beq.n	8015828 <_svfiprintf_r+0x1d8>
 80157b6:	4b23      	ldr	r3, [pc, #140]	; (8015844 <_svfiprintf_r+0x1f4>)
 80157b8:	bb1b      	cbnz	r3, 8015802 <_svfiprintf_r+0x1b2>
 80157ba:	9b03      	ldr	r3, [sp, #12]
 80157bc:	3307      	adds	r3, #7
 80157be:	f023 0307 	bic.w	r3, r3, #7
 80157c2:	3308      	adds	r3, #8
 80157c4:	9303      	str	r3, [sp, #12]
 80157c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157c8:	4433      	add	r3, r6
 80157ca:	9309      	str	r3, [sp, #36]	; 0x24
 80157cc:	e767      	b.n	801569e <_svfiprintf_r+0x4e>
 80157ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80157d2:	460c      	mov	r4, r1
 80157d4:	2001      	movs	r0, #1
 80157d6:	e7a5      	b.n	8015724 <_svfiprintf_r+0xd4>
 80157d8:	2300      	movs	r3, #0
 80157da:	3401      	adds	r4, #1
 80157dc:	9305      	str	r3, [sp, #20]
 80157de:	4619      	mov	r1, r3
 80157e0:	f04f 0c0a 	mov.w	ip, #10
 80157e4:	4620      	mov	r0, r4
 80157e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80157ea:	3a30      	subs	r2, #48	; 0x30
 80157ec:	2a09      	cmp	r2, #9
 80157ee:	d903      	bls.n	80157f8 <_svfiprintf_r+0x1a8>
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d0c5      	beq.n	8015780 <_svfiprintf_r+0x130>
 80157f4:	9105      	str	r1, [sp, #20]
 80157f6:	e7c3      	b.n	8015780 <_svfiprintf_r+0x130>
 80157f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80157fc:	4604      	mov	r4, r0
 80157fe:	2301      	movs	r3, #1
 8015800:	e7f0      	b.n	80157e4 <_svfiprintf_r+0x194>
 8015802:	ab03      	add	r3, sp, #12
 8015804:	9300      	str	r3, [sp, #0]
 8015806:	462a      	mov	r2, r5
 8015808:	4b0f      	ldr	r3, [pc, #60]	; (8015848 <_svfiprintf_r+0x1f8>)
 801580a:	a904      	add	r1, sp, #16
 801580c:	4638      	mov	r0, r7
 801580e:	f7fc f831 	bl	8011874 <_printf_float>
 8015812:	1c42      	adds	r2, r0, #1
 8015814:	4606      	mov	r6, r0
 8015816:	d1d6      	bne.n	80157c6 <_svfiprintf_r+0x176>
 8015818:	89ab      	ldrh	r3, [r5, #12]
 801581a:	065b      	lsls	r3, r3, #25
 801581c:	f53f af2c 	bmi.w	8015678 <_svfiprintf_r+0x28>
 8015820:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015822:	b01d      	add	sp, #116	; 0x74
 8015824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015828:	ab03      	add	r3, sp, #12
 801582a:	9300      	str	r3, [sp, #0]
 801582c:	462a      	mov	r2, r5
 801582e:	4b06      	ldr	r3, [pc, #24]	; (8015848 <_svfiprintf_r+0x1f8>)
 8015830:	a904      	add	r1, sp, #16
 8015832:	4638      	mov	r0, r7
 8015834:	f7fc fac2 	bl	8011dbc <_printf_i>
 8015838:	e7eb      	b.n	8015812 <_svfiprintf_r+0x1c2>
 801583a:	bf00      	nop
 801583c:	08016f8c 	.word	0x08016f8c
 8015840:	08016f96 	.word	0x08016f96
 8015844:	08011875 	.word	0x08011875
 8015848:	08015599 	.word	0x08015599
 801584c:	08016f92 	.word	0x08016f92

08015850 <_sungetc_r>:
 8015850:	b538      	push	{r3, r4, r5, lr}
 8015852:	1c4b      	adds	r3, r1, #1
 8015854:	4614      	mov	r4, r2
 8015856:	d103      	bne.n	8015860 <_sungetc_r+0x10>
 8015858:	f04f 35ff 	mov.w	r5, #4294967295
 801585c:	4628      	mov	r0, r5
 801585e:	bd38      	pop	{r3, r4, r5, pc}
 8015860:	8993      	ldrh	r3, [r2, #12]
 8015862:	f023 0320 	bic.w	r3, r3, #32
 8015866:	8193      	strh	r3, [r2, #12]
 8015868:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801586a:	6852      	ldr	r2, [r2, #4]
 801586c:	b2cd      	uxtb	r5, r1
 801586e:	b18b      	cbz	r3, 8015894 <_sungetc_r+0x44>
 8015870:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015872:	4293      	cmp	r3, r2
 8015874:	dd08      	ble.n	8015888 <_sungetc_r+0x38>
 8015876:	6823      	ldr	r3, [r4, #0]
 8015878:	1e5a      	subs	r2, r3, #1
 801587a:	6022      	str	r2, [r4, #0]
 801587c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8015880:	6863      	ldr	r3, [r4, #4]
 8015882:	3301      	adds	r3, #1
 8015884:	6063      	str	r3, [r4, #4]
 8015886:	e7e9      	b.n	801585c <_sungetc_r+0xc>
 8015888:	4621      	mov	r1, r4
 801588a:	f000 fcaf 	bl	80161ec <__submore>
 801588e:	2800      	cmp	r0, #0
 8015890:	d0f1      	beq.n	8015876 <_sungetc_r+0x26>
 8015892:	e7e1      	b.n	8015858 <_sungetc_r+0x8>
 8015894:	6921      	ldr	r1, [r4, #16]
 8015896:	6823      	ldr	r3, [r4, #0]
 8015898:	b151      	cbz	r1, 80158b0 <_sungetc_r+0x60>
 801589a:	4299      	cmp	r1, r3
 801589c:	d208      	bcs.n	80158b0 <_sungetc_r+0x60>
 801589e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80158a2:	42a9      	cmp	r1, r5
 80158a4:	d104      	bne.n	80158b0 <_sungetc_r+0x60>
 80158a6:	3b01      	subs	r3, #1
 80158a8:	3201      	adds	r2, #1
 80158aa:	6023      	str	r3, [r4, #0]
 80158ac:	6062      	str	r2, [r4, #4]
 80158ae:	e7d5      	b.n	801585c <_sungetc_r+0xc>
 80158b0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80158b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80158b8:	6363      	str	r3, [r4, #52]	; 0x34
 80158ba:	2303      	movs	r3, #3
 80158bc:	63a3      	str	r3, [r4, #56]	; 0x38
 80158be:	4623      	mov	r3, r4
 80158c0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80158c4:	6023      	str	r3, [r4, #0]
 80158c6:	2301      	movs	r3, #1
 80158c8:	e7dc      	b.n	8015884 <_sungetc_r+0x34>

080158ca <__ssrefill_r>:
 80158ca:	b510      	push	{r4, lr}
 80158cc:	460c      	mov	r4, r1
 80158ce:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80158d0:	b169      	cbz	r1, 80158ee <__ssrefill_r+0x24>
 80158d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80158d6:	4299      	cmp	r1, r3
 80158d8:	d001      	beq.n	80158de <__ssrefill_r+0x14>
 80158da:	f7fb fe81 	bl	80115e0 <_free_r>
 80158de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80158e0:	6063      	str	r3, [r4, #4]
 80158e2:	2000      	movs	r0, #0
 80158e4:	6360      	str	r0, [r4, #52]	; 0x34
 80158e6:	b113      	cbz	r3, 80158ee <__ssrefill_r+0x24>
 80158e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80158ea:	6023      	str	r3, [r4, #0]
 80158ec:	bd10      	pop	{r4, pc}
 80158ee:	6923      	ldr	r3, [r4, #16]
 80158f0:	6023      	str	r3, [r4, #0]
 80158f2:	2300      	movs	r3, #0
 80158f4:	6063      	str	r3, [r4, #4]
 80158f6:	89a3      	ldrh	r3, [r4, #12]
 80158f8:	f043 0320 	orr.w	r3, r3, #32
 80158fc:	81a3      	strh	r3, [r4, #12]
 80158fe:	f04f 30ff 	mov.w	r0, #4294967295
 8015902:	e7f3      	b.n	80158ec <__ssrefill_r+0x22>

08015904 <__ssvfiscanf_r>:
 8015904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015908:	460c      	mov	r4, r1
 801590a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801590e:	2100      	movs	r1, #0
 8015910:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8015914:	49b2      	ldr	r1, [pc, #712]	; (8015be0 <__ssvfiscanf_r+0x2dc>)
 8015916:	91a0      	str	r1, [sp, #640]	; 0x280
 8015918:	f10d 0804 	add.w	r8, sp, #4
 801591c:	49b1      	ldr	r1, [pc, #708]	; (8015be4 <__ssvfiscanf_r+0x2e0>)
 801591e:	4fb2      	ldr	r7, [pc, #712]	; (8015be8 <__ssvfiscanf_r+0x2e4>)
 8015920:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8015bec <__ssvfiscanf_r+0x2e8>
 8015924:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8015928:	4606      	mov	r6, r0
 801592a:	91a1      	str	r1, [sp, #644]	; 0x284
 801592c:	9300      	str	r3, [sp, #0]
 801592e:	f892 a000 	ldrb.w	sl, [r2]
 8015932:	f1ba 0f00 	cmp.w	sl, #0
 8015936:	f000 8151 	beq.w	8015bdc <__ssvfiscanf_r+0x2d8>
 801593a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801593e:	f013 0308 	ands.w	r3, r3, #8
 8015942:	f102 0501 	add.w	r5, r2, #1
 8015946:	d019      	beq.n	801597c <__ssvfiscanf_r+0x78>
 8015948:	6863      	ldr	r3, [r4, #4]
 801594a:	2b00      	cmp	r3, #0
 801594c:	dd0f      	ble.n	801596e <__ssvfiscanf_r+0x6a>
 801594e:	6823      	ldr	r3, [r4, #0]
 8015950:	781a      	ldrb	r2, [r3, #0]
 8015952:	5cba      	ldrb	r2, [r7, r2]
 8015954:	0712      	lsls	r2, r2, #28
 8015956:	d401      	bmi.n	801595c <__ssvfiscanf_r+0x58>
 8015958:	462a      	mov	r2, r5
 801595a:	e7e8      	b.n	801592e <__ssvfiscanf_r+0x2a>
 801595c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801595e:	3201      	adds	r2, #1
 8015960:	9245      	str	r2, [sp, #276]	; 0x114
 8015962:	6862      	ldr	r2, [r4, #4]
 8015964:	3301      	adds	r3, #1
 8015966:	3a01      	subs	r2, #1
 8015968:	6062      	str	r2, [r4, #4]
 801596a:	6023      	str	r3, [r4, #0]
 801596c:	e7ec      	b.n	8015948 <__ssvfiscanf_r+0x44>
 801596e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015970:	4621      	mov	r1, r4
 8015972:	4630      	mov	r0, r6
 8015974:	4798      	blx	r3
 8015976:	2800      	cmp	r0, #0
 8015978:	d0e9      	beq.n	801594e <__ssvfiscanf_r+0x4a>
 801597a:	e7ed      	b.n	8015958 <__ssvfiscanf_r+0x54>
 801597c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8015980:	f040 8083 	bne.w	8015a8a <__ssvfiscanf_r+0x186>
 8015984:	9341      	str	r3, [sp, #260]	; 0x104
 8015986:	9343      	str	r3, [sp, #268]	; 0x10c
 8015988:	7853      	ldrb	r3, [r2, #1]
 801598a:	2b2a      	cmp	r3, #42	; 0x2a
 801598c:	bf02      	ittt	eq
 801598e:	2310      	moveq	r3, #16
 8015990:	1c95      	addeq	r5, r2, #2
 8015992:	9341      	streq	r3, [sp, #260]	; 0x104
 8015994:	220a      	movs	r2, #10
 8015996:	46ab      	mov	fp, r5
 8015998:	f81b 1b01 	ldrb.w	r1, [fp], #1
 801599c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80159a0:	2b09      	cmp	r3, #9
 80159a2:	d91d      	bls.n	80159e0 <__ssvfiscanf_r+0xdc>
 80159a4:	4891      	ldr	r0, [pc, #580]	; (8015bec <__ssvfiscanf_r+0x2e8>)
 80159a6:	2203      	movs	r2, #3
 80159a8:	f7ea fc2a 	bl	8000200 <memchr>
 80159ac:	b140      	cbz	r0, 80159c0 <__ssvfiscanf_r+0xbc>
 80159ae:	2301      	movs	r3, #1
 80159b0:	eba0 0009 	sub.w	r0, r0, r9
 80159b4:	fa03 f000 	lsl.w	r0, r3, r0
 80159b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80159ba:	4318      	orrs	r0, r3
 80159bc:	9041      	str	r0, [sp, #260]	; 0x104
 80159be:	465d      	mov	r5, fp
 80159c0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80159c4:	2b78      	cmp	r3, #120	; 0x78
 80159c6:	d806      	bhi.n	80159d6 <__ssvfiscanf_r+0xd2>
 80159c8:	2b57      	cmp	r3, #87	; 0x57
 80159ca:	d810      	bhi.n	80159ee <__ssvfiscanf_r+0xea>
 80159cc:	2b25      	cmp	r3, #37	; 0x25
 80159ce:	d05c      	beq.n	8015a8a <__ssvfiscanf_r+0x186>
 80159d0:	d856      	bhi.n	8015a80 <__ssvfiscanf_r+0x17c>
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d074      	beq.n	8015ac0 <__ssvfiscanf_r+0x1bc>
 80159d6:	2303      	movs	r3, #3
 80159d8:	9347      	str	r3, [sp, #284]	; 0x11c
 80159da:	230a      	movs	r3, #10
 80159dc:	9342      	str	r3, [sp, #264]	; 0x108
 80159de:	e081      	b.n	8015ae4 <__ssvfiscanf_r+0x1e0>
 80159e0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80159e2:	fb02 1303 	mla	r3, r2, r3, r1
 80159e6:	3b30      	subs	r3, #48	; 0x30
 80159e8:	9343      	str	r3, [sp, #268]	; 0x10c
 80159ea:	465d      	mov	r5, fp
 80159ec:	e7d3      	b.n	8015996 <__ssvfiscanf_r+0x92>
 80159ee:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80159f2:	2a20      	cmp	r2, #32
 80159f4:	d8ef      	bhi.n	80159d6 <__ssvfiscanf_r+0xd2>
 80159f6:	a101      	add	r1, pc, #4	; (adr r1, 80159fc <__ssvfiscanf_r+0xf8>)
 80159f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80159fc:	08015acf 	.word	0x08015acf
 8015a00:	080159d7 	.word	0x080159d7
 8015a04:	080159d7 	.word	0x080159d7
 8015a08:	08015b2d 	.word	0x08015b2d
 8015a0c:	080159d7 	.word	0x080159d7
 8015a10:	080159d7 	.word	0x080159d7
 8015a14:	080159d7 	.word	0x080159d7
 8015a18:	080159d7 	.word	0x080159d7
 8015a1c:	080159d7 	.word	0x080159d7
 8015a20:	080159d7 	.word	0x080159d7
 8015a24:	080159d7 	.word	0x080159d7
 8015a28:	08015b43 	.word	0x08015b43
 8015a2c:	08015b19 	.word	0x08015b19
 8015a30:	08015a87 	.word	0x08015a87
 8015a34:	08015a87 	.word	0x08015a87
 8015a38:	08015a87 	.word	0x08015a87
 8015a3c:	080159d7 	.word	0x080159d7
 8015a40:	08015b1d 	.word	0x08015b1d
 8015a44:	080159d7 	.word	0x080159d7
 8015a48:	080159d7 	.word	0x080159d7
 8015a4c:	080159d7 	.word	0x080159d7
 8015a50:	080159d7 	.word	0x080159d7
 8015a54:	08015b53 	.word	0x08015b53
 8015a58:	08015b25 	.word	0x08015b25
 8015a5c:	08015ac7 	.word	0x08015ac7
 8015a60:	080159d7 	.word	0x080159d7
 8015a64:	080159d7 	.word	0x080159d7
 8015a68:	08015b4f 	.word	0x08015b4f
 8015a6c:	080159d7 	.word	0x080159d7
 8015a70:	08015b19 	.word	0x08015b19
 8015a74:	080159d7 	.word	0x080159d7
 8015a78:	080159d7 	.word	0x080159d7
 8015a7c:	08015acf 	.word	0x08015acf
 8015a80:	3b45      	subs	r3, #69	; 0x45
 8015a82:	2b02      	cmp	r3, #2
 8015a84:	d8a7      	bhi.n	80159d6 <__ssvfiscanf_r+0xd2>
 8015a86:	2305      	movs	r3, #5
 8015a88:	e02b      	b.n	8015ae2 <__ssvfiscanf_r+0x1de>
 8015a8a:	6863      	ldr	r3, [r4, #4]
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	dd0d      	ble.n	8015aac <__ssvfiscanf_r+0x1a8>
 8015a90:	6823      	ldr	r3, [r4, #0]
 8015a92:	781a      	ldrb	r2, [r3, #0]
 8015a94:	4552      	cmp	r2, sl
 8015a96:	f040 80a1 	bne.w	8015bdc <__ssvfiscanf_r+0x2d8>
 8015a9a:	3301      	adds	r3, #1
 8015a9c:	6862      	ldr	r2, [r4, #4]
 8015a9e:	6023      	str	r3, [r4, #0]
 8015aa0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8015aa2:	3a01      	subs	r2, #1
 8015aa4:	3301      	adds	r3, #1
 8015aa6:	6062      	str	r2, [r4, #4]
 8015aa8:	9345      	str	r3, [sp, #276]	; 0x114
 8015aaa:	e755      	b.n	8015958 <__ssvfiscanf_r+0x54>
 8015aac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015aae:	4621      	mov	r1, r4
 8015ab0:	4630      	mov	r0, r6
 8015ab2:	4798      	blx	r3
 8015ab4:	2800      	cmp	r0, #0
 8015ab6:	d0eb      	beq.n	8015a90 <__ssvfiscanf_r+0x18c>
 8015ab8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8015aba:	2800      	cmp	r0, #0
 8015abc:	f040 8084 	bne.w	8015bc8 <__ssvfiscanf_r+0x2c4>
 8015ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8015ac4:	e086      	b.n	8015bd4 <__ssvfiscanf_r+0x2d0>
 8015ac6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8015ac8:	f042 0220 	orr.w	r2, r2, #32
 8015acc:	9241      	str	r2, [sp, #260]	; 0x104
 8015ace:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8015ad0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015ad4:	9241      	str	r2, [sp, #260]	; 0x104
 8015ad6:	2210      	movs	r2, #16
 8015ad8:	2b6f      	cmp	r3, #111	; 0x6f
 8015ada:	9242      	str	r2, [sp, #264]	; 0x108
 8015adc:	bf34      	ite	cc
 8015ade:	2303      	movcc	r3, #3
 8015ae0:	2304      	movcs	r3, #4
 8015ae2:	9347      	str	r3, [sp, #284]	; 0x11c
 8015ae4:	6863      	ldr	r3, [r4, #4]
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	dd41      	ble.n	8015b6e <__ssvfiscanf_r+0x26a>
 8015aea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015aec:	0659      	lsls	r1, r3, #25
 8015aee:	d404      	bmi.n	8015afa <__ssvfiscanf_r+0x1f6>
 8015af0:	6823      	ldr	r3, [r4, #0]
 8015af2:	781a      	ldrb	r2, [r3, #0]
 8015af4:	5cba      	ldrb	r2, [r7, r2]
 8015af6:	0712      	lsls	r2, r2, #28
 8015af8:	d440      	bmi.n	8015b7c <__ssvfiscanf_r+0x278>
 8015afa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8015afc:	2b02      	cmp	r3, #2
 8015afe:	dc4f      	bgt.n	8015ba0 <__ssvfiscanf_r+0x29c>
 8015b00:	466b      	mov	r3, sp
 8015b02:	4622      	mov	r2, r4
 8015b04:	a941      	add	r1, sp, #260	; 0x104
 8015b06:	4630      	mov	r0, r6
 8015b08:	f000 f9ce 	bl	8015ea8 <_scanf_chars>
 8015b0c:	2801      	cmp	r0, #1
 8015b0e:	d065      	beq.n	8015bdc <__ssvfiscanf_r+0x2d8>
 8015b10:	2802      	cmp	r0, #2
 8015b12:	f47f af21 	bne.w	8015958 <__ssvfiscanf_r+0x54>
 8015b16:	e7cf      	b.n	8015ab8 <__ssvfiscanf_r+0x1b4>
 8015b18:	220a      	movs	r2, #10
 8015b1a:	e7dd      	b.n	8015ad8 <__ssvfiscanf_r+0x1d4>
 8015b1c:	2300      	movs	r3, #0
 8015b1e:	9342      	str	r3, [sp, #264]	; 0x108
 8015b20:	2303      	movs	r3, #3
 8015b22:	e7de      	b.n	8015ae2 <__ssvfiscanf_r+0x1de>
 8015b24:	2308      	movs	r3, #8
 8015b26:	9342      	str	r3, [sp, #264]	; 0x108
 8015b28:	2304      	movs	r3, #4
 8015b2a:	e7da      	b.n	8015ae2 <__ssvfiscanf_r+0x1de>
 8015b2c:	4629      	mov	r1, r5
 8015b2e:	4640      	mov	r0, r8
 8015b30:	f000 fb22 	bl	8016178 <__sccl>
 8015b34:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015b36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015b3a:	9341      	str	r3, [sp, #260]	; 0x104
 8015b3c:	4605      	mov	r5, r0
 8015b3e:	2301      	movs	r3, #1
 8015b40:	e7cf      	b.n	8015ae2 <__ssvfiscanf_r+0x1de>
 8015b42:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015b48:	9341      	str	r3, [sp, #260]	; 0x104
 8015b4a:	2300      	movs	r3, #0
 8015b4c:	e7c9      	b.n	8015ae2 <__ssvfiscanf_r+0x1de>
 8015b4e:	2302      	movs	r3, #2
 8015b50:	e7c7      	b.n	8015ae2 <__ssvfiscanf_r+0x1de>
 8015b52:	9841      	ldr	r0, [sp, #260]	; 0x104
 8015b54:	06c3      	lsls	r3, r0, #27
 8015b56:	f53f aeff 	bmi.w	8015958 <__ssvfiscanf_r+0x54>
 8015b5a:	9b00      	ldr	r3, [sp, #0]
 8015b5c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015b5e:	1d19      	adds	r1, r3, #4
 8015b60:	9100      	str	r1, [sp, #0]
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	07c0      	lsls	r0, r0, #31
 8015b66:	bf4c      	ite	mi
 8015b68:	801a      	strhmi	r2, [r3, #0]
 8015b6a:	601a      	strpl	r2, [r3, #0]
 8015b6c:	e6f4      	b.n	8015958 <__ssvfiscanf_r+0x54>
 8015b6e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015b70:	4621      	mov	r1, r4
 8015b72:	4630      	mov	r0, r6
 8015b74:	4798      	blx	r3
 8015b76:	2800      	cmp	r0, #0
 8015b78:	d0b7      	beq.n	8015aea <__ssvfiscanf_r+0x1e6>
 8015b7a:	e79d      	b.n	8015ab8 <__ssvfiscanf_r+0x1b4>
 8015b7c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015b7e:	3201      	adds	r2, #1
 8015b80:	9245      	str	r2, [sp, #276]	; 0x114
 8015b82:	6862      	ldr	r2, [r4, #4]
 8015b84:	3a01      	subs	r2, #1
 8015b86:	2a00      	cmp	r2, #0
 8015b88:	6062      	str	r2, [r4, #4]
 8015b8a:	dd02      	ble.n	8015b92 <__ssvfiscanf_r+0x28e>
 8015b8c:	3301      	adds	r3, #1
 8015b8e:	6023      	str	r3, [r4, #0]
 8015b90:	e7ae      	b.n	8015af0 <__ssvfiscanf_r+0x1ec>
 8015b92:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015b94:	4621      	mov	r1, r4
 8015b96:	4630      	mov	r0, r6
 8015b98:	4798      	blx	r3
 8015b9a:	2800      	cmp	r0, #0
 8015b9c:	d0a8      	beq.n	8015af0 <__ssvfiscanf_r+0x1ec>
 8015b9e:	e78b      	b.n	8015ab8 <__ssvfiscanf_r+0x1b4>
 8015ba0:	2b04      	cmp	r3, #4
 8015ba2:	dc06      	bgt.n	8015bb2 <__ssvfiscanf_r+0x2ae>
 8015ba4:	466b      	mov	r3, sp
 8015ba6:	4622      	mov	r2, r4
 8015ba8:	a941      	add	r1, sp, #260	; 0x104
 8015baa:	4630      	mov	r0, r6
 8015bac:	f000 f9d4 	bl	8015f58 <_scanf_i>
 8015bb0:	e7ac      	b.n	8015b0c <__ssvfiscanf_r+0x208>
 8015bb2:	4b0f      	ldr	r3, [pc, #60]	; (8015bf0 <__ssvfiscanf_r+0x2ec>)
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	f43f aecf 	beq.w	8015958 <__ssvfiscanf_r+0x54>
 8015bba:	466b      	mov	r3, sp
 8015bbc:	4622      	mov	r2, r4
 8015bbe:	a941      	add	r1, sp, #260	; 0x104
 8015bc0:	4630      	mov	r0, r6
 8015bc2:	f7fc fa21 	bl	8012008 <_scanf_float>
 8015bc6:	e7a1      	b.n	8015b0c <__ssvfiscanf_r+0x208>
 8015bc8:	89a3      	ldrh	r3, [r4, #12]
 8015bca:	f013 0f40 	tst.w	r3, #64	; 0x40
 8015bce:	bf18      	it	ne
 8015bd0:	f04f 30ff 	movne.w	r0, #4294967295
 8015bd4:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8015bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bdc:	9844      	ldr	r0, [sp, #272]	; 0x110
 8015bde:	e7f9      	b.n	8015bd4 <__ssvfiscanf_r+0x2d0>
 8015be0:	08015851 	.word	0x08015851
 8015be4:	080158cb 	.word	0x080158cb
 8015be8:	08016c1d 	.word	0x08016c1d
 8015bec:	08016f92 	.word	0x08016f92
 8015bf0:	08012009 	.word	0x08012009

08015bf4 <__sfputc_r>:
 8015bf4:	6893      	ldr	r3, [r2, #8]
 8015bf6:	3b01      	subs	r3, #1
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	b410      	push	{r4}
 8015bfc:	6093      	str	r3, [r2, #8]
 8015bfe:	da08      	bge.n	8015c12 <__sfputc_r+0x1e>
 8015c00:	6994      	ldr	r4, [r2, #24]
 8015c02:	42a3      	cmp	r3, r4
 8015c04:	db01      	blt.n	8015c0a <__sfputc_r+0x16>
 8015c06:	290a      	cmp	r1, #10
 8015c08:	d103      	bne.n	8015c12 <__sfputc_r+0x1e>
 8015c0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c0e:	f000 bb27 	b.w	8016260 <__swbuf_r>
 8015c12:	6813      	ldr	r3, [r2, #0]
 8015c14:	1c58      	adds	r0, r3, #1
 8015c16:	6010      	str	r0, [r2, #0]
 8015c18:	7019      	strb	r1, [r3, #0]
 8015c1a:	4608      	mov	r0, r1
 8015c1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c20:	4770      	bx	lr

08015c22 <__sfputs_r>:
 8015c22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c24:	4606      	mov	r6, r0
 8015c26:	460f      	mov	r7, r1
 8015c28:	4614      	mov	r4, r2
 8015c2a:	18d5      	adds	r5, r2, r3
 8015c2c:	42ac      	cmp	r4, r5
 8015c2e:	d101      	bne.n	8015c34 <__sfputs_r+0x12>
 8015c30:	2000      	movs	r0, #0
 8015c32:	e007      	b.n	8015c44 <__sfputs_r+0x22>
 8015c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c38:	463a      	mov	r2, r7
 8015c3a:	4630      	mov	r0, r6
 8015c3c:	f7ff ffda 	bl	8015bf4 <__sfputc_r>
 8015c40:	1c43      	adds	r3, r0, #1
 8015c42:	d1f3      	bne.n	8015c2c <__sfputs_r+0xa>
 8015c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015c48 <_vfiprintf_r>:
 8015c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c4c:	460d      	mov	r5, r1
 8015c4e:	b09d      	sub	sp, #116	; 0x74
 8015c50:	4614      	mov	r4, r2
 8015c52:	4698      	mov	r8, r3
 8015c54:	4606      	mov	r6, r0
 8015c56:	b118      	cbz	r0, 8015c60 <_vfiprintf_r+0x18>
 8015c58:	6983      	ldr	r3, [r0, #24]
 8015c5a:	b90b      	cbnz	r3, 8015c60 <_vfiprintf_r+0x18>
 8015c5c:	f7fb fbc2 	bl	80113e4 <__sinit>
 8015c60:	4b89      	ldr	r3, [pc, #548]	; (8015e88 <_vfiprintf_r+0x240>)
 8015c62:	429d      	cmp	r5, r3
 8015c64:	d11b      	bne.n	8015c9e <_vfiprintf_r+0x56>
 8015c66:	6875      	ldr	r5, [r6, #4]
 8015c68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015c6a:	07d9      	lsls	r1, r3, #31
 8015c6c:	d405      	bmi.n	8015c7a <_vfiprintf_r+0x32>
 8015c6e:	89ab      	ldrh	r3, [r5, #12]
 8015c70:	059a      	lsls	r2, r3, #22
 8015c72:	d402      	bmi.n	8015c7a <_vfiprintf_r+0x32>
 8015c74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015c76:	f7fb fc78 	bl	801156a <__retarget_lock_acquire_recursive>
 8015c7a:	89ab      	ldrh	r3, [r5, #12]
 8015c7c:	071b      	lsls	r3, r3, #28
 8015c7e:	d501      	bpl.n	8015c84 <_vfiprintf_r+0x3c>
 8015c80:	692b      	ldr	r3, [r5, #16]
 8015c82:	b9eb      	cbnz	r3, 8015cc0 <_vfiprintf_r+0x78>
 8015c84:	4629      	mov	r1, r5
 8015c86:	4630      	mov	r0, r6
 8015c88:	f000 fb4a 	bl	8016320 <__swsetup_r>
 8015c8c:	b1c0      	cbz	r0, 8015cc0 <_vfiprintf_r+0x78>
 8015c8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015c90:	07dc      	lsls	r4, r3, #31
 8015c92:	d50e      	bpl.n	8015cb2 <_vfiprintf_r+0x6a>
 8015c94:	f04f 30ff 	mov.w	r0, #4294967295
 8015c98:	b01d      	add	sp, #116	; 0x74
 8015c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c9e:	4b7b      	ldr	r3, [pc, #492]	; (8015e8c <_vfiprintf_r+0x244>)
 8015ca0:	429d      	cmp	r5, r3
 8015ca2:	d101      	bne.n	8015ca8 <_vfiprintf_r+0x60>
 8015ca4:	68b5      	ldr	r5, [r6, #8]
 8015ca6:	e7df      	b.n	8015c68 <_vfiprintf_r+0x20>
 8015ca8:	4b79      	ldr	r3, [pc, #484]	; (8015e90 <_vfiprintf_r+0x248>)
 8015caa:	429d      	cmp	r5, r3
 8015cac:	bf08      	it	eq
 8015cae:	68f5      	ldreq	r5, [r6, #12]
 8015cb0:	e7da      	b.n	8015c68 <_vfiprintf_r+0x20>
 8015cb2:	89ab      	ldrh	r3, [r5, #12]
 8015cb4:	0598      	lsls	r0, r3, #22
 8015cb6:	d4ed      	bmi.n	8015c94 <_vfiprintf_r+0x4c>
 8015cb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015cba:	f7fb fc57 	bl	801156c <__retarget_lock_release_recursive>
 8015cbe:	e7e9      	b.n	8015c94 <_vfiprintf_r+0x4c>
 8015cc0:	2300      	movs	r3, #0
 8015cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8015cc4:	2320      	movs	r3, #32
 8015cc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015cca:	f8cd 800c 	str.w	r8, [sp, #12]
 8015cce:	2330      	movs	r3, #48	; 0x30
 8015cd0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015e94 <_vfiprintf_r+0x24c>
 8015cd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015cd8:	f04f 0901 	mov.w	r9, #1
 8015cdc:	4623      	mov	r3, r4
 8015cde:	469a      	mov	sl, r3
 8015ce0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015ce4:	b10a      	cbz	r2, 8015cea <_vfiprintf_r+0xa2>
 8015ce6:	2a25      	cmp	r2, #37	; 0x25
 8015ce8:	d1f9      	bne.n	8015cde <_vfiprintf_r+0x96>
 8015cea:	ebba 0b04 	subs.w	fp, sl, r4
 8015cee:	d00b      	beq.n	8015d08 <_vfiprintf_r+0xc0>
 8015cf0:	465b      	mov	r3, fp
 8015cf2:	4622      	mov	r2, r4
 8015cf4:	4629      	mov	r1, r5
 8015cf6:	4630      	mov	r0, r6
 8015cf8:	f7ff ff93 	bl	8015c22 <__sfputs_r>
 8015cfc:	3001      	adds	r0, #1
 8015cfe:	f000 80aa 	beq.w	8015e56 <_vfiprintf_r+0x20e>
 8015d02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015d04:	445a      	add	r2, fp
 8015d06:	9209      	str	r2, [sp, #36]	; 0x24
 8015d08:	f89a 3000 	ldrb.w	r3, [sl]
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	f000 80a2 	beq.w	8015e56 <_vfiprintf_r+0x20e>
 8015d12:	2300      	movs	r3, #0
 8015d14:	f04f 32ff 	mov.w	r2, #4294967295
 8015d18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015d1c:	f10a 0a01 	add.w	sl, sl, #1
 8015d20:	9304      	str	r3, [sp, #16]
 8015d22:	9307      	str	r3, [sp, #28]
 8015d24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015d28:	931a      	str	r3, [sp, #104]	; 0x68
 8015d2a:	4654      	mov	r4, sl
 8015d2c:	2205      	movs	r2, #5
 8015d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d32:	4858      	ldr	r0, [pc, #352]	; (8015e94 <_vfiprintf_r+0x24c>)
 8015d34:	f7ea fa64 	bl	8000200 <memchr>
 8015d38:	9a04      	ldr	r2, [sp, #16]
 8015d3a:	b9d8      	cbnz	r0, 8015d74 <_vfiprintf_r+0x12c>
 8015d3c:	06d1      	lsls	r1, r2, #27
 8015d3e:	bf44      	itt	mi
 8015d40:	2320      	movmi	r3, #32
 8015d42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015d46:	0713      	lsls	r3, r2, #28
 8015d48:	bf44      	itt	mi
 8015d4a:	232b      	movmi	r3, #43	; 0x2b
 8015d4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015d50:	f89a 3000 	ldrb.w	r3, [sl]
 8015d54:	2b2a      	cmp	r3, #42	; 0x2a
 8015d56:	d015      	beq.n	8015d84 <_vfiprintf_r+0x13c>
 8015d58:	9a07      	ldr	r2, [sp, #28]
 8015d5a:	4654      	mov	r4, sl
 8015d5c:	2000      	movs	r0, #0
 8015d5e:	f04f 0c0a 	mov.w	ip, #10
 8015d62:	4621      	mov	r1, r4
 8015d64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015d68:	3b30      	subs	r3, #48	; 0x30
 8015d6a:	2b09      	cmp	r3, #9
 8015d6c:	d94e      	bls.n	8015e0c <_vfiprintf_r+0x1c4>
 8015d6e:	b1b0      	cbz	r0, 8015d9e <_vfiprintf_r+0x156>
 8015d70:	9207      	str	r2, [sp, #28]
 8015d72:	e014      	b.n	8015d9e <_vfiprintf_r+0x156>
 8015d74:	eba0 0308 	sub.w	r3, r0, r8
 8015d78:	fa09 f303 	lsl.w	r3, r9, r3
 8015d7c:	4313      	orrs	r3, r2
 8015d7e:	9304      	str	r3, [sp, #16]
 8015d80:	46a2      	mov	sl, r4
 8015d82:	e7d2      	b.n	8015d2a <_vfiprintf_r+0xe2>
 8015d84:	9b03      	ldr	r3, [sp, #12]
 8015d86:	1d19      	adds	r1, r3, #4
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	9103      	str	r1, [sp, #12]
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	bfbb      	ittet	lt
 8015d90:	425b      	neglt	r3, r3
 8015d92:	f042 0202 	orrlt.w	r2, r2, #2
 8015d96:	9307      	strge	r3, [sp, #28]
 8015d98:	9307      	strlt	r3, [sp, #28]
 8015d9a:	bfb8      	it	lt
 8015d9c:	9204      	strlt	r2, [sp, #16]
 8015d9e:	7823      	ldrb	r3, [r4, #0]
 8015da0:	2b2e      	cmp	r3, #46	; 0x2e
 8015da2:	d10c      	bne.n	8015dbe <_vfiprintf_r+0x176>
 8015da4:	7863      	ldrb	r3, [r4, #1]
 8015da6:	2b2a      	cmp	r3, #42	; 0x2a
 8015da8:	d135      	bne.n	8015e16 <_vfiprintf_r+0x1ce>
 8015daa:	9b03      	ldr	r3, [sp, #12]
 8015dac:	1d1a      	adds	r2, r3, #4
 8015dae:	681b      	ldr	r3, [r3, #0]
 8015db0:	9203      	str	r2, [sp, #12]
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	bfb8      	it	lt
 8015db6:	f04f 33ff 	movlt.w	r3, #4294967295
 8015dba:	3402      	adds	r4, #2
 8015dbc:	9305      	str	r3, [sp, #20]
 8015dbe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015ea4 <_vfiprintf_r+0x25c>
 8015dc2:	7821      	ldrb	r1, [r4, #0]
 8015dc4:	2203      	movs	r2, #3
 8015dc6:	4650      	mov	r0, sl
 8015dc8:	f7ea fa1a 	bl	8000200 <memchr>
 8015dcc:	b140      	cbz	r0, 8015de0 <_vfiprintf_r+0x198>
 8015dce:	2340      	movs	r3, #64	; 0x40
 8015dd0:	eba0 000a 	sub.w	r0, r0, sl
 8015dd4:	fa03 f000 	lsl.w	r0, r3, r0
 8015dd8:	9b04      	ldr	r3, [sp, #16]
 8015dda:	4303      	orrs	r3, r0
 8015ddc:	3401      	adds	r4, #1
 8015dde:	9304      	str	r3, [sp, #16]
 8015de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015de4:	482c      	ldr	r0, [pc, #176]	; (8015e98 <_vfiprintf_r+0x250>)
 8015de6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015dea:	2206      	movs	r2, #6
 8015dec:	f7ea fa08 	bl	8000200 <memchr>
 8015df0:	2800      	cmp	r0, #0
 8015df2:	d03f      	beq.n	8015e74 <_vfiprintf_r+0x22c>
 8015df4:	4b29      	ldr	r3, [pc, #164]	; (8015e9c <_vfiprintf_r+0x254>)
 8015df6:	bb1b      	cbnz	r3, 8015e40 <_vfiprintf_r+0x1f8>
 8015df8:	9b03      	ldr	r3, [sp, #12]
 8015dfa:	3307      	adds	r3, #7
 8015dfc:	f023 0307 	bic.w	r3, r3, #7
 8015e00:	3308      	adds	r3, #8
 8015e02:	9303      	str	r3, [sp, #12]
 8015e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e06:	443b      	add	r3, r7
 8015e08:	9309      	str	r3, [sp, #36]	; 0x24
 8015e0a:	e767      	b.n	8015cdc <_vfiprintf_r+0x94>
 8015e0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8015e10:	460c      	mov	r4, r1
 8015e12:	2001      	movs	r0, #1
 8015e14:	e7a5      	b.n	8015d62 <_vfiprintf_r+0x11a>
 8015e16:	2300      	movs	r3, #0
 8015e18:	3401      	adds	r4, #1
 8015e1a:	9305      	str	r3, [sp, #20]
 8015e1c:	4619      	mov	r1, r3
 8015e1e:	f04f 0c0a 	mov.w	ip, #10
 8015e22:	4620      	mov	r0, r4
 8015e24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015e28:	3a30      	subs	r2, #48	; 0x30
 8015e2a:	2a09      	cmp	r2, #9
 8015e2c:	d903      	bls.n	8015e36 <_vfiprintf_r+0x1ee>
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d0c5      	beq.n	8015dbe <_vfiprintf_r+0x176>
 8015e32:	9105      	str	r1, [sp, #20]
 8015e34:	e7c3      	b.n	8015dbe <_vfiprintf_r+0x176>
 8015e36:	fb0c 2101 	mla	r1, ip, r1, r2
 8015e3a:	4604      	mov	r4, r0
 8015e3c:	2301      	movs	r3, #1
 8015e3e:	e7f0      	b.n	8015e22 <_vfiprintf_r+0x1da>
 8015e40:	ab03      	add	r3, sp, #12
 8015e42:	9300      	str	r3, [sp, #0]
 8015e44:	462a      	mov	r2, r5
 8015e46:	4b16      	ldr	r3, [pc, #88]	; (8015ea0 <_vfiprintf_r+0x258>)
 8015e48:	a904      	add	r1, sp, #16
 8015e4a:	4630      	mov	r0, r6
 8015e4c:	f7fb fd12 	bl	8011874 <_printf_float>
 8015e50:	4607      	mov	r7, r0
 8015e52:	1c78      	adds	r0, r7, #1
 8015e54:	d1d6      	bne.n	8015e04 <_vfiprintf_r+0x1bc>
 8015e56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015e58:	07d9      	lsls	r1, r3, #31
 8015e5a:	d405      	bmi.n	8015e68 <_vfiprintf_r+0x220>
 8015e5c:	89ab      	ldrh	r3, [r5, #12]
 8015e5e:	059a      	lsls	r2, r3, #22
 8015e60:	d402      	bmi.n	8015e68 <_vfiprintf_r+0x220>
 8015e62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015e64:	f7fb fb82 	bl	801156c <__retarget_lock_release_recursive>
 8015e68:	89ab      	ldrh	r3, [r5, #12]
 8015e6a:	065b      	lsls	r3, r3, #25
 8015e6c:	f53f af12 	bmi.w	8015c94 <_vfiprintf_r+0x4c>
 8015e70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015e72:	e711      	b.n	8015c98 <_vfiprintf_r+0x50>
 8015e74:	ab03      	add	r3, sp, #12
 8015e76:	9300      	str	r3, [sp, #0]
 8015e78:	462a      	mov	r2, r5
 8015e7a:	4b09      	ldr	r3, [pc, #36]	; (8015ea0 <_vfiprintf_r+0x258>)
 8015e7c:	a904      	add	r1, sp, #16
 8015e7e:	4630      	mov	r0, r6
 8015e80:	f7fb ff9c 	bl	8011dbc <_printf_i>
 8015e84:	e7e4      	b.n	8015e50 <_vfiprintf_r+0x208>
 8015e86:	bf00      	nop
 8015e88:	08016b10 	.word	0x08016b10
 8015e8c:	08016b30 	.word	0x08016b30
 8015e90:	08016af0 	.word	0x08016af0
 8015e94:	08016f8c 	.word	0x08016f8c
 8015e98:	08016f96 	.word	0x08016f96
 8015e9c:	08011875 	.word	0x08011875
 8015ea0:	08015c23 	.word	0x08015c23
 8015ea4:	08016f92 	.word	0x08016f92

08015ea8 <_scanf_chars>:
 8015ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015eac:	4615      	mov	r5, r2
 8015eae:	688a      	ldr	r2, [r1, #8]
 8015eb0:	4680      	mov	r8, r0
 8015eb2:	460c      	mov	r4, r1
 8015eb4:	b932      	cbnz	r2, 8015ec4 <_scanf_chars+0x1c>
 8015eb6:	698a      	ldr	r2, [r1, #24]
 8015eb8:	2a00      	cmp	r2, #0
 8015eba:	bf0c      	ite	eq
 8015ebc:	2201      	moveq	r2, #1
 8015ebe:	f04f 32ff 	movne.w	r2, #4294967295
 8015ec2:	608a      	str	r2, [r1, #8]
 8015ec4:	6822      	ldr	r2, [r4, #0]
 8015ec6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8015f54 <_scanf_chars+0xac>
 8015eca:	06d1      	lsls	r1, r2, #27
 8015ecc:	bf5f      	itttt	pl
 8015ece:	681a      	ldrpl	r2, [r3, #0]
 8015ed0:	1d11      	addpl	r1, r2, #4
 8015ed2:	6019      	strpl	r1, [r3, #0]
 8015ed4:	6816      	ldrpl	r6, [r2, #0]
 8015ed6:	2700      	movs	r7, #0
 8015ed8:	69a0      	ldr	r0, [r4, #24]
 8015eda:	b188      	cbz	r0, 8015f00 <_scanf_chars+0x58>
 8015edc:	2801      	cmp	r0, #1
 8015ede:	d107      	bne.n	8015ef0 <_scanf_chars+0x48>
 8015ee0:	682b      	ldr	r3, [r5, #0]
 8015ee2:	781a      	ldrb	r2, [r3, #0]
 8015ee4:	6963      	ldr	r3, [r4, #20]
 8015ee6:	5c9b      	ldrb	r3, [r3, r2]
 8015ee8:	b953      	cbnz	r3, 8015f00 <_scanf_chars+0x58>
 8015eea:	bb27      	cbnz	r7, 8015f36 <_scanf_chars+0x8e>
 8015eec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ef0:	2802      	cmp	r0, #2
 8015ef2:	d120      	bne.n	8015f36 <_scanf_chars+0x8e>
 8015ef4:	682b      	ldr	r3, [r5, #0]
 8015ef6:	781b      	ldrb	r3, [r3, #0]
 8015ef8:	f813 3009 	ldrb.w	r3, [r3, r9]
 8015efc:	071b      	lsls	r3, r3, #28
 8015efe:	d41a      	bmi.n	8015f36 <_scanf_chars+0x8e>
 8015f00:	6823      	ldr	r3, [r4, #0]
 8015f02:	06da      	lsls	r2, r3, #27
 8015f04:	bf5e      	ittt	pl
 8015f06:	682b      	ldrpl	r3, [r5, #0]
 8015f08:	781b      	ldrbpl	r3, [r3, #0]
 8015f0a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8015f0e:	682a      	ldr	r2, [r5, #0]
 8015f10:	686b      	ldr	r3, [r5, #4]
 8015f12:	3201      	adds	r2, #1
 8015f14:	602a      	str	r2, [r5, #0]
 8015f16:	68a2      	ldr	r2, [r4, #8]
 8015f18:	3b01      	subs	r3, #1
 8015f1a:	3a01      	subs	r2, #1
 8015f1c:	606b      	str	r3, [r5, #4]
 8015f1e:	3701      	adds	r7, #1
 8015f20:	60a2      	str	r2, [r4, #8]
 8015f22:	b142      	cbz	r2, 8015f36 <_scanf_chars+0x8e>
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	dcd7      	bgt.n	8015ed8 <_scanf_chars+0x30>
 8015f28:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015f2c:	4629      	mov	r1, r5
 8015f2e:	4640      	mov	r0, r8
 8015f30:	4798      	blx	r3
 8015f32:	2800      	cmp	r0, #0
 8015f34:	d0d0      	beq.n	8015ed8 <_scanf_chars+0x30>
 8015f36:	6823      	ldr	r3, [r4, #0]
 8015f38:	f013 0310 	ands.w	r3, r3, #16
 8015f3c:	d105      	bne.n	8015f4a <_scanf_chars+0xa2>
 8015f3e:	68e2      	ldr	r2, [r4, #12]
 8015f40:	3201      	adds	r2, #1
 8015f42:	60e2      	str	r2, [r4, #12]
 8015f44:	69a2      	ldr	r2, [r4, #24]
 8015f46:	b102      	cbz	r2, 8015f4a <_scanf_chars+0xa2>
 8015f48:	7033      	strb	r3, [r6, #0]
 8015f4a:	6923      	ldr	r3, [r4, #16]
 8015f4c:	441f      	add	r7, r3
 8015f4e:	6127      	str	r7, [r4, #16]
 8015f50:	2000      	movs	r0, #0
 8015f52:	e7cb      	b.n	8015eec <_scanf_chars+0x44>
 8015f54:	08016c1d 	.word	0x08016c1d

08015f58 <_scanf_i>:
 8015f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f5c:	4698      	mov	r8, r3
 8015f5e:	4b74      	ldr	r3, [pc, #464]	; (8016130 <_scanf_i+0x1d8>)
 8015f60:	460c      	mov	r4, r1
 8015f62:	4682      	mov	sl, r0
 8015f64:	4616      	mov	r6, r2
 8015f66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015f6a:	b087      	sub	sp, #28
 8015f6c:	ab03      	add	r3, sp, #12
 8015f6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015f72:	4b70      	ldr	r3, [pc, #448]	; (8016134 <_scanf_i+0x1dc>)
 8015f74:	69a1      	ldr	r1, [r4, #24]
 8015f76:	4a70      	ldr	r2, [pc, #448]	; (8016138 <_scanf_i+0x1e0>)
 8015f78:	2903      	cmp	r1, #3
 8015f7a:	bf18      	it	ne
 8015f7c:	461a      	movne	r2, r3
 8015f7e:	68a3      	ldr	r3, [r4, #8]
 8015f80:	9201      	str	r2, [sp, #4]
 8015f82:	1e5a      	subs	r2, r3, #1
 8015f84:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015f88:	bf88      	it	hi
 8015f8a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8015f8e:	4627      	mov	r7, r4
 8015f90:	bf82      	ittt	hi
 8015f92:	eb03 0905 	addhi.w	r9, r3, r5
 8015f96:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015f9a:	60a3      	strhi	r3, [r4, #8]
 8015f9c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8015fa0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8015fa4:	bf98      	it	ls
 8015fa6:	f04f 0900 	movls.w	r9, #0
 8015faa:	6023      	str	r3, [r4, #0]
 8015fac:	463d      	mov	r5, r7
 8015fae:	f04f 0b00 	mov.w	fp, #0
 8015fb2:	6831      	ldr	r1, [r6, #0]
 8015fb4:	ab03      	add	r3, sp, #12
 8015fb6:	7809      	ldrb	r1, [r1, #0]
 8015fb8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8015fbc:	2202      	movs	r2, #2
 8015fbe:	f7ea f91f 	bl	8000200 <memchr>
 8015fc2:	b328      	cbz	r0, 8016010 <_scanf_i+0xb8>
 8015fc4:	f1bb 0f01 	cmp.w	fp, #1
 8015fc8:	d159      	bne.n	801607e <_scanf_i+0x126>
 8015fca:	6862      	ldr	r2, [r4, #4]
 8015fcc:	b92a      	cbnz	r2, 8015fda <_scanf_i+0x82>
 8015fce:	6822      	ldr	r2, [r4, #0]
 8015fd0:	2308      	movs	r3, #8
 8015fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015fd6:	6063      	str	r3, [r4, #4]
 8015fd8:	6022      	str	r2, [r4, #0]
 8015fda:	6822      	ldr	r2, [r4, #0]
 8015fdc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8015fe0:	6022      	str	r2, [r4, #0]
 8015fe2:	68a2      	ldr	r2, [r4, #8]
 8015fe4:	1e51      	subs	r1, r2, #1
 8015fe6:	60a1      	str	r1, [r4, #8]
 8015fe8:	b192      	cbz	r2, 8016010 <_scanf_i+0xb8>
 8015fea:	6832      	ldr	r2, [r6, #0]
 8015fec:	1c51      	adds	r1, r2, #1
 8015fee:	6031      	str	r1, [r6, #0]
 8015ff0:	7812      	ldrb	r2, [r2, #0]
 8015ff2:	f805 2b01 	strb.w	r2, [r5], #1
 8015ff6:	6872      	ldr	r2, [r6, #4]
 8015ff8:	3a01      	subs	r2, #1
 8015ffa:	2a00      	cmp	r2, #0
 8015ffc:	6072      	str	r2, [r6, #4]
 8015ffe:	dc07      	bgt.n	8016010 <_scanf_i+0xb8>
 8016000:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8016004:	4631      	mov	r1, r6
 8016006:	4650      	mov	r0, sl
 8016008:	4790      	blx	r2
 801600a:	2800      	cmp	r0, #0
 801600c:	f040 8085 	bne.w	801611a <_scanf_i+0x1c2>
 8016010:	f10b 0b01 	add.w	fp, fp, #1
 8016014:	f1bb 0f03 	cmp.w	fp, #3
 8016018:	d1cb      	bne.n	8015fb2 <_scanf_i+0x5a>
 801601a:	6863      	ldr	r3, [r4, #4]
 801601c:	b90b      	cbnz	r3, 8016022 <_scanf_i+0xca>
 801601e:	230a      	movs	r3, #10
 8016020:	6063      	str	r3, [r4, #4]
 8016022:	6863      	ldr	r3, [r4, #4]
 8016024:	4945      	ldr	r1, [pc, #276]	; (801613c <_scanf_i+0x1e4>)
 8016026:	6960      	ldr	r0, [r4, #20]
 8016028:	1ac9      	subs	r1, r1, r3
 801602a:	f000 f8a5 	bl	8016178 <__sccl>
 801602e:	f04f 0b00 	mov.w	fp, #0
 8016032:	68a3      	ldr	r3, [r4, #8]
 8016034:	6822      	ldr	r2, [r4, #0]
 8016036:	2b00      	cmp	r3, #0
 8016038:	d03d      	beq.n	80160b6 <_scanf_i+0x15e>
 801603a:	6831      	ldr	r1, [r6, #0]
 801603c:	6960      	ldr	r0, [r4, #20]
 801603e:	f891 c000 	ldrb.w	ip, [r1]
 8016042:	f810 000c 	ldrb.w	r0, [r0, ip]
 8016046:	2800      	cmp	r0, #0
 8016048:	d035      	beq.n	80160b6 <_scanf_i+0x15e>
 801604a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801604e:	d124      	bne.n	801609a <_scanf_i+0x142>
 8016050:	0510      	lsls	r0, r2, #20
 8016052:	d522      	bpl.n	801609a <_scanf_i+0x142>
 8016054:	f10b 0b01 	add.w	fp, fp, #1
 8016058:	f1b9 0f00 	cmp.w	r9, #0
 801605c:	d003      	beq.n	8016066 <_scanf_i+0x10e>
 801605e:	3301      	adds	r3, #1
 8016060:	f109 39ff 	add.w	r9, r9, #4294967295
 8016064:	60a3      	str	r3, [r4, #8]
 8016066:	6873      	ldr	r3, [r6, #4]
 8016068:	3b01      	subs	r3, #1
 801606a:	2b00      	cmp	r3, #0
 801606c:	6073      	str	r3, [r6, #4]
 801606e:	dd1b      	ble.n	80160a8 <_scanf_i+0x150>
 8016070:	6833      	ldr	r3, [r6, #0]
 8016072:	3301      	adds	r3, #1
 8016074:	6033      	str	r3, [r6, #0]
 8016076:	68a3      	ldr	r3, [r4, #8]
 8016078:	3b01      	subs	r3, #1
 801607a:	60a3      	str	r3, [r4, #8]
 801607c:	e7d9      	b.n	8016032 <_scanf_i+0xda>
 801607e:	f1bb 0f02 	cmp.w	fp, #2
 8016082:	d1ae      	bne.n	8015fe2 <_scanf_i+0x8a>
 8016084:	6822      	ldr	r2, [r4, #0]
 8016086:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801608a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801608e:	d1bf      	bne.n	8016010 <_scanf_i+0xb8>
 8016090:	2310      	movs	r3, #16
 8016092:	6063      	str	r3, [r4, #4]
 8016094:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016098:	e7a2      	b.n	8015fe0 <_scanf_i+0x88>
 801609a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801609e:	6022      	str	r2, [r4, #0]
 80160a0:	780b      	ldrb	r3, [r1, #0]
 80160a2:	f805 3b01 	strb.w	r3, [r5], #1
 80160a6:	e7de      	b.n	8016066 <_scanf_i+0x10e>
 80160a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80160ac:	4631      	mov	r1, r6
 80160ae:	4650      	mov	r0, sl
 80160b0:	4798      	blx	r3
 80160b2:	2800      	cmp	r0, #0
 80160b4:	d0df      	beq.n	8016076 <_scanf_i+0x11e>
 80160b6:	6823      	ldr	r3, [r4, #0]
 80160b8:	05d9      	lsls	r1, r3, #23
 80160ba:	d50d      	bpl.n	80160d8 <_scanf_i+0x180>
 80160bc:	42bd      	cmp	r5, r7
 80160be:	d909      	bls.n	80160d4 <_scanf_i+0x17c>
 80160c0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80160c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80160c8:	4632      	mov	r2, r6
 80160ca:	4650      	mov	r0, sl
 80160cc:	4798      	blx	r3
 80160ce:	f105 39ff 	add.w	r9, r5, #4294967295
 80160d2:	464d      	mov	r5, r9
 80160d4:	42bd      	cmp	r5, r7
 80160d6:	d028      	beq.n	801612a <_scanf_i+0x1d2>
 80160d8:	6822      	ldr	r2, [r4, #0]
 80160da:	f012 0210 	ands.w	r2, r2, #16
 80160de:	d113      	bne.n	8016108 <_scanf_i+0x1b0>
 80160e0:	702a      	strb	r2, [r5, #0]
 80160e2:	6863      	ldr	r3, [r4, #4]
 80160e4:	9e01      	ldr	r6, [sp, #4]
 80160e6:	4639      	mov	r1, r7
 80160e8:	4650      	mov	r0, sl
 80160ea:	47b0      	blx	r6
 80160ec:	f8d8 3000 	ldr.w	r3, [r8]
 80160f0:	6821      	ldr	r1, [r4, #0]
 80160f2:	1d1a      	adds	r2, r3, #4
 80160f4:	f8c8 2000 	str.w	r2, [r8]
 80160f8:	f011 0f20 	tst.w	r1, #32
 80160fc:	681b      	ldr	r3, [r3, #0]
 80160fe:	d00f      	beq.n	8016120 <_scanf_i+0x1c8>
 8016100:	6018      	str	r0, [r3, #0]
 8016102:	68e3      	ldr	r3, [r4, #12]
 8016104:	3301      	adds	r3, #1
 8016106:	60e3      	str	r3, [r4, #12]
 8016108:	1bed      	subs	r5, r5, r7
 801610a:	44ab      	add	fp, r5
 801610c:	6925      	ldr	r5, [r4, #16]
 801610e:	445d      	add	r5, fp
 8016110:	6125      	str	r5, [r4, #16]
 8016112:	2000      	movs	r0, #0
 8016114:	b007      	add	sp, #28
 8016116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801611a:	f04f 0b00 	mov.w	fp, #0
 801611e:	e7ca      	b.n	80160b6 <_scanf_i+0x15e>
 8016120:	07ca      	lsls	r2, r1, #31
 8016122:	bf4c      	ite	mi
 8016124:	8018      	strhmi	r0, [r3, #0]
 8016126:	6018      	strpl	r0, [r3, #0]
 8016128:	e7eb      	b.n	8016102 <_scanf_i+0x1aa>
 801612a:	2001      	movs	r0, #1
 801612c:	e7f2      	b.n	8016114 <_scanf_i+0x1bc>
 801612e:	bf00      	nop
 8016130:	08016974 	.word	0x08016974
 8016134:	08013555 	.word	0x08013555
 8016138:	08013459 	.word	0x08013459
 801613c:	08016fb6 	.word	0x08016fb6

08016140 <_read_r>:
 8016140:	b538      	push	{r3, r4, r5, lr}
 8016142:	4d07      	ldr	r5, [pc, #28]	; (8016160 <_read_r+0x20>)
 8016144:	4604      	mov	r4, r0
 8016146:	4608      	mov	r0, r1
 8016148:	4611      	mov	r1, r2
 801614a:	2200      	movs	r2, #0
 801614c:	602a      	str	r2, [r5, #0]
 801614e:	461a      	mov	r2, r3
 8016150:	f7ec feda 	bl	8002f08 <_read>
 8016154:	1c43      	adds	r3, r0, #1
 8016156:	d102      	bne.n	801615e <_read_r+0x1e>
 8016158:	682b      	ldr	r3, [r5, #0]
 801615a:	b103      	cbz	r3, 801615e <_read_r+0x1e>
 801615c:	6023      	str	r3, [r4, #0]
 801615e:	bd38      	pop	{r3, r4, r5, pc}
 8016160:	200070d4 	.word	0x200070d4
 8016164:	00000000 	.word	0x00000000

08016168 <nan>:
 8016168:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016170 <nan+0x8>
 801616c:	4770      	bx	lr
 801616e:	bf00      	nop
 8016170:	00000000 	.word	0x00000000
 8016174:	7ff80000 	.word	0x7ff80000

08016178 <__sccl>:
 8016178:	b570      	push	{r4, r5, r6, lr}
 801617a:	780b      	ldrb	r3, [r1, #0]
 801617c:	4604      	mov	r4, r0
 801617e:	2b5e      	cmp	r3, #94	; 0x5e
 8016180:	bf0b      	itete	eq
 8016182:	784b      	ldrbeq	r3, [r1, #1]
 8016184:	1c48      	addne	r0, r1, #1
 8016186:	1c88      	addeq	r0, r1, #2
 8016188:	2200      	movne	r2, #0
 801618a:	bf08      	it	eq
 801618c:	2201      	moveq	r2, #1
 801618e:	1e61      	subs	r1, r4, #1
 8016190:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8016194:	f801 2f01 	strb.w	r2, [r1, #1]!
 8016198:	42a9      	cmp	r1, r5
 801619a:	d1fb      	bne.n	8016194 <__sccl+0x1c>
 801619c:	b90b      	cbnz	r3, 80161a2 <__sccl+0x2a>
 801619e:	3801      	subs	r0, #1
 80161a0:	bd70      	pop	{r4, r5, r6, pc}
 80161a2:	f082 0101 	eor.w	r1, r2, #1
 80161a6:	54e1      	strb	r1, [r4, r3]
 80161a8:	1c42      	adds	r2, r0, #1
 80161aa:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80161ae:	2d2d      	cmp	r5, #45	; 0x2d
 80161b0:	f102 36ff 	add.w	r6, r2, #4294967295
 80161b4:	4610      	mov	r0, r2
 80161b6:	d006      	beq.n	80161c6 <__sccl+0x4e>
 80161b8:	2d5d      	cmp	r5, #93	; 0x5d
 80161ba:	d0f1      	beq.n	80161a0 <__sccl+0x28>
 80161bc:	b90d      	cbnz	r5, 80161c2 <__sccl+0x4a>
 80161be:	4630      	mov	r0, r6
 80161c0:	e7ee      	b.n	80161a0 <__sccl+0x28>
 80161c2:	462b      	mov	r3, r5
 80161c4:	e7ef      	b.n	80161a6 <__sccl+0x2e>
 80161c6:	7816      	ldrb	r6, [r2, #0]
 80161c8:	2e5d      	cmp	r6, #93	; 0x5d
 80161ca:	d0fa      	beq.n	80161c2 <__sccl+0x4a>
 80161cc:	42b3      	cmp	r3, r6
 80161ce:	dcf8      	bgt.n	80161c2 <__sccl+0x4a>
 80161d0:	4618      	mov	r0, r3
 80161d2:	3001      	adds	r0, #1
 80161d4:	4286      	cmp	r6, r0
 80161d6:	5421      	strb	r1, [r4, r0]
 80161d8:	dcfb      	bgt.n	80161d2 <__sccl+0x5a>
 80161da:	43d8      	mvns	r0, r3
 80161dc:	4430      	add	r0, r6
 80161de:	1c5d      	adds	r5, r3, #1
 80161e0:	42b3      	cmp	r3, r6
 80161e2:	bfa8      	it	ge
 80161e4:	2000      	movge	r0, #0
 80161e6:	182b      	adds	r3, r5, r0
 80161e8:	3202      	adds	r2, #2
 80161ea:	e7de      	b.n	80161aa <__sccl+0x32>

080161ec <__submore>:
 80161ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161f0:	460c      	mov	r4, r1
 80161f2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80161f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80161f8:	4299      	cmp	r1, r3
 80161fa:	d11d      	bne.n	8016238 <__submore+0x4c>
 80161fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016200:	f7fb fa3e 	bl	8011680 <_malloc_r>
 8016204:	b918      	cbnz	r0, 801620e <__submore+0x22>
 8016206:	f04f 30ff 	mov.w	r0, #4294967295
 801620a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801620e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016212:	63a3      	str	r3, [r4, #56]	; 0x38
 8016214:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8016218:	6360      	str	r0, [r4, #52]	; 0x34
 801621a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801621e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8016222:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8016226:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801622a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801622e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8016232:	6020      	str	r0, [r4, #0]
 8016234:	2000      	movs	r0, #0
 8016236:	e7e8      	b.n	801620a <__submore+0x1e>
 8016238:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801623a:	0077      	lsls	r7, r6, #1
 801623c:	463a      	mov	r2, r7
 801623e:	f7ff f985 	bl	801554c <_realloc_r>
 8016242:	4605      	mov	r5, r0
 8016244:	2800      	cmp	r0, #0
 8016246:	d0de      	beq.n	8016206 <__submore+0x1a>
 8016248:	eb00 0806 	add.w	r8, r0, r6
 801624c:	4601      	mov	r1, r0
 801624e:	4632      	mov	r2, r6
 8016250:	4640      	mov	r0, r8
 8016252:	f7fb f995 	bl	8011580 <memcpy>
 8016256:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801625a:	f8c4 8000 	str.w	r8, [r4]
 801625e:	e7e9      	b.n	8016234 <__submore+0x48>

08016260 <__swbuf_r>:
 8016260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016262:	460e      	mov	r6, r1
 8016264:	4614      	mov	r4, r2
 8016266:	4605      	mov	r5, r0
 8016268:	b118      	cbz	r0, 8016272 <__swbuf_r+0x12>
 801626a:	6983      	ldr	r3, [r0, #24]
 801626c:	b90b      	cbnz	r3, 8016272 <__swbuf_r+0x12>
 801626e:	f7fb f8b9 	bl	80113e4 <__sinit>
 8016272:	4b21      	ldr	r3, [pc, #132]	; (80162f8 <__swbuf_r+0x98>)
 8016274:	429c      	cmp	r4, r3
 8016276:	d12b      	bne.n	80162d0 <__swbuf_r+0x70>
 8016278:	686c      	ldr	r4, [r5, #4]
 801627a:	69a3      	ldr	r3, [r4, #24]
 801627c:	60a3      	str	r3, [r4, #8]
 801627e:	89a3      	ldrh	r3, [r4, #12]
 8016280:	071a      	lsls	r2, r3, #28
 8016282:	d52f      	bpl.n	80162e4 <__swbuf_r+0x84>
 8016284:	6923      	ldr	r3, [r4, #16]
 8016286:	b36b      	cbz	r3, 80162e4 <__swbuf_r+0x84>
 8016288:	6923      	ldr	r3, [r4, #16]
 801628a:	6820      	ldr	r0, [r4, #0]
 801628c:	1ac0      	subs	r0, r0, r3
 801628e:	6963      	ldr	r3, [r4, #20]
 8016290:	b2f6      	uxtb	r6, r6
 8016292:	4283      	cmp	r3, r0
 8016294:	4637      	mov	r7, r6
 8016296:	dc04      	bgt.n	80162a2 <__swbuf_r+0x42>
 8016298:	4621      	mov	r1, r4
 801629a:	4628      	mov	r0, r5
 801629c:	f7fe f89a 	bl	80143d4 <_fflush_r>
 80162a0:	bb30      	cbnz	r0, 80162f0 <__swbuf_r+0x90>
 80162a2:	68a3      	ldr	r3, [r4, #8]
 80162a4:	3b01      	subs	r3, #1
 80162a6:	60a3      	str	r3, [r4, #8]
 80162a8:	6823      	ldr	r3, [r4, #0]
 80162aa:	1c5a      	adds	r2, r3, #1
 80162ac:	6022      	str	r2, [r4, #0]
 80162ae:	701e      	strb	r6, [r3, #0]
 80162b0:	6963      	ldr	r3, [r4, #20]
 80162b2:	3001      	adds	r0, #1
 80162b4:	4283      	cmp	r3, r0
 80162b6:	d004      	beq.n	80162c2 <__swbuf_r+0x62>
 80162b8:	89a3      	ldrh	r3, [r4, #12]
 80162ba:	07db      	lsls	r3, r3, #31
 80162bc:	d506      	bpl.n	80162cc <__swbuf_r+0x6c>
 80162be:	2e0a      	cmp	r6, #10
 80162c0:	d104      	bne.n	80162cc <__swbuf_r+0x6c>
 80162c2:	4621      	mov	r1, r4
 80162c4:	4628      	mov	r0, r5
 80162c6:	f7fe f885 	bl	80143d4 <_fflush_r>
 80162ca:	b988      	cbnz	r0, 80162f0 <__swbuf_r+0x90>
 80162cc:	4638      	mov	r0, r7
 80162ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80162d0:	4b0a      	ldr	r3, [pc, #40]	; (80162fc <__swbuf_r+0x9c>)
 80162d2:	429c      	cmp	r4, r3
 80162d4:	d101      	bne.n	80162da <__swbuf_r+0x7a>
 80162d6:	68ac      	ldr	r4, [r5, #8]
 80162d8:	e7cf      	b.n	801627a <__swbuf_r+0x1a>
 80162da:	4b09      	ldr	r3, [pc, #36]	; (8016300 <__swbuf_r+0xa0>)
 80162dc:	429c      	cmp	r4, r3
 80162de:	bf08      	it	eq
 80162e0:	68ec      	ldreq	r4, [r5, #12]
 80162e2:	e7ca      	b.n	801627a <__swbuf_r+0x1a>
 80162e4:	4621      	mov	r1, r4
 80162e6:	4628      	mov	r0, r5
 80162e8:	f000 f81a 	bl	8016320 <__swsetup_r>
 80162ec:	2800      	cmp	r0, #0
 80162ee:	d0cb      	beq.n	8016288 <__swbuf_r+0x28>
 80162f0:	f04f 37ff 	mov.w	r7, #4294967295
 80162f4:	e7ea      	b.n	80162cc <__swbuf_r+0x6c>
 80162f6:	bf00      	nop
 80162f8:	08016b10 	.word	0x08016b10
 80162fc:	08016b30 	.word	0x08016b30
 8016300:	08016af0 	.word	0x08016af0

08016304 <__ascii_wctomb>:
 8016304:	b149      	cbz	r1, 801631a <__ascii_wctomb+0x16>
 8016306:	2aff      	cmp	r2, #255	; 0xff
 8016308:	bf85      	ittet	hi
 801630a:	238a      	movhi	r3, #138	; 0x8a
 801630c:	6003      	strhi	r3, [r0, #0]
 801630e:	700a      	strbls	r2, [r1, #0]
 8016310:	f04f 30ff 	movhi.w	r0, #4294967295
 8016314:	bf98      	it	ls
 8016316:	2001      	movls	r0, #1
 8016318:	4770      	bx	lr
 801631a:	4608      	mov	r0, r1
 801631c:	4770      	bx	lr
	...

08016320 <__swsetup_r>:
 8016320:	4b32      	ldr	r3, [pc, #200]	; (80163ec <__swsetup_r+0xcc>)
 8016322:	b570      	push	{r4, r5, r6, lr}
 8016324:	681d      	ldr	r5, [r3, #0]
 8016326:	4606      	mov	r6, r0
 8016328:	460c      	mov	r4, r1
 801632a:	b125      	cbz	r5, 8016336 <__swsetup_r+0x16>
 801632c:	69ab      	ldr	r3, [r5, #24]
 801632e:	b913      	cbnz	r3, 8016336 <__swsetup_r+0x16>
 8016330:	4628      	mov	r0, r5
 8016332:	f7fb f857 	bl	80113e4 <__sinit>
 8016336:	4b2e      	ldr	r3, [pc, #184]	; (80163f0 <__swsetup_r+0xd0>)
 8016338:	429c      	cmp	r4, r3
 801633a:	d10f      	bne.n	801635c <__swsetup_r+0x3c>
 801633c:	686c      	ldr	r4, [r5, #4]
 801633e:	89a3      	ldrh	r3, [r4, #12]
 8016340:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016344:	0719      	lsls	r1, r3, #28
 8016346:	d42c      	bmi.n	80163a2 <__swsetup_r+0x82>
 8016348:	06dd      	lsls	r5, r3, #27
 801634a:	d411      	bmi.n	8016370 <__swsetup_r+0x50>
 801634c:	2309      	movs	r3, #9
 801634e:	6033      	str	r3, [r6, #0]
 8016350:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016354:	81a3      	strh	r3, [r4, #12]
 8016356:	f04f 30ff 	mov.w	r0, #4294967295
 801635a:	e03e      	b.n	80163da <__swsetup_r+0xba>
 801635c:	4b25      	ldr	r3, [pc, #148]	; (80163f4 <__swsetup_r+0xd4>)
 801635e:	429c      	cmp	r4, r3
 8016360:	d101      	bne.n	8016366 <__swsetup_r+0x46>
 8016362:	68ac      	ldr	r4, [r5, #8]
 8016364:	e7eb      	b.n	801633e <__swsetup_r+0x1e>
 8016366:	4b24      	ldr	r3, [pc, #144]	; (80163f8 <__swsetup_r+0xd8>)
 8016368:	429c      	cmp	r4, r3
 801636a:	bf08      	it	eq
 801636c:	68ec      	ldreq	r4, [r5, #12]
 801636e:	e7e6      	b.n	801633e <__swsetup_r+0x1e>
 8016370:	0758      	lsls	r0, r3, #29
 8016372:	d512      	bpl.n	801639a <__swsetup_r+0x7a>
 8016374:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016376:	b141      	cbz	r1, 801638a <__swsetup_r+0x6a>
 8016378:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801637c:	4299      	cmp	r1, r3
 801637e:	d002      	beq.n	8016386 <__swsetup_r+0x66>
 8016380:	4630      	mov	r0, r6
 8016382:	f7fb f92d 	bl	80115e0 <_free_r>
 8016386:	2300      	movs	r3, #0
 8016388:	6363      	str	r3, [r4, #52]	; 0x34
 801638a:	89a3      	ldrh	r3, [r4, #12]
 801638c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016390:	81a3      	strh	r3, [r4, #12]
 8016392:	2300      	movs	r3, #0
 8016394:	6063      	str	r3, [r4, #4]
 8016396:	6923      	ldr	r3, [r4, #16]
 8016398:	6023      	str	r3, [r4, #0]
 801639a:	89a3      	ldrh	r3, [r4, #12]
 801639c:	f043 0308 	orr.w	r3, r3, #8
 80163a0:	81a3      	strh	r3, [r4, #12]
 80163a2:	6923      	ldr	r3, [r4, #16]
 80163a4:	b94b      	cbnz	r3, 80163ba <__swsetup_r+0x9a>
 80163a6:	89a3      	ldrh	r3, [r4, #12]
 80163a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80163ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80163b0:	d003      	beq.n	80163ba <__swsetup_r+0x9a>
 80163b2:	4621      	mov	r1, r4
 80163b4:	4630      	mov	r0, r6
 80163b6:	f000 f845 	bl	8016444 <__smakebuf_r>
 80163ba:	89a0      	ldrh	r0, [r4, #12]
 80163bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80163c0:	f010 0301 	ands.w	r3, r0, #1
 80163c4:	d00a      	beq.n	80163dc <__swsetup_r+0xbc>
 80163c6:	2300      	movs	r3, #0
 80163c8:	60a3      	str	r3, [r4, #8]
 80163ca:	6963      	ldr	r3, [r4, #20]
 80163cc:	425b      	negs	r3, r3
 80163ce:	61a3      	str	r3, [r4, #24]
 80163d0:	6923      	ldr	r3, [r4, #16]
 80163d2:	b943      	cbnz	r3, 80163e6 <__swsetup_r+0xc6>
 80163d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80163d8:	d1ba      	bne.n	8016350 <__swsetup_r+0x30>
 80163da:	bd70      	pop	{r4, r5, r6, pc}
 80163dc:	0781      	lsls	r1, r0, #30
 80163de:	bf58      	it	pl
 80163e0:	6963      	ldrpl	r3, [r4, #20]
 80163e2:	60a3      	str	r3, [r4, #8]
 80163e4:	e7f4      	b.n	80163d0 <__swsetup_r+0xb0>
 80163e6:	2000      	movs	r0, #0
 80163e8:	e7f7      	b.n	80163da <__swsetup_r+0xba>
 80163ea:	bf00      	nop
 80163ec:	20000188 	.word	0x20000188
 80163f0:	08016b10 	.word	0x08016b10
 80163f4:	08016b30 	.word	0x08016b30
 80163f8:	08016af0 	.word	0x08016af0

080163fc <__swhatbuf_r>:
 80163fc:	b570      	push	{r4, r5, r6, lr}
 80163fe:	460e      	mov	r6, r1
 8016400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016404:	2900      	cmp	r1, #0
 8016406:	b096      	sub	sp, #88	; 0x58
 8016408:	4614      	mov	r4, r2
 801640a:	461d      	mov	r5, r3
 801640c:	da07      	bge.n	801641e <__swhatbuf_r+0x22>
 801640e:	2300      	movs	r3, #0
 8016410:	602b      	str	r3, [r5, #0]
 8016412:	89b3      	ldrh	r3, [r6, #12]
 8016414:	061a      	lsls	r2, r3, #24
 8016416:	d410      	bmi.n	801643a <__swhatbuf_r+0x3e>
 8016418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801641c:	e00e      	b.n	801643c <__swhatbuf_r+0x40>
 801641e:	466a      	mov	r2, sp
 8016420:	f000 f858 	bl	80164d4 <_fstat_r>
 8016424:	2800      	cmp	r0, #0
 8016426:	dbf2      	blt.n	801640e <__swhatbuf_r+0x12>
 8016428:	9a01      	ldr	r2, [sp, #4]
 801642a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801642e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016432:	425a      	negs	r2, r3
 8016434:	415a      	adcs	r2, r3
 8016436:	602a      	str	r2, [r5, #0]
 8016438:	e7ee      	b.n	8016418 <__swhatbuf_r+0x1c>
 801643a:	2340      	movs	r3, #64	; 0x40
 801643c:	2000      	movs	r0, #0
 801643e:	6023      	str	r3, [r4, #0]
 8016440:	b016      	add	sp, #88	; 0x58
 8016442:	bd70      	pop	{r4, r5, r6, pc}

08016444 <__smakebuf_r>:
 8016444:	898b      	ldrh	r3, [r1, #12]
 8016446:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016448:	079d      	lsls	r5, r3, #30
 801644a:	4606      	mov	r6, r0
 801644c:	460c      	mov	r4, r1
 801644e:	d507      	bpl.n	8016460 <__smakebuf_r+0x1c>
 8016450:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016454:	6023      	str	r3, [r4, #0]
 8016456:	6123      	str	r3, [r4, #16]
 8016458:	2301      	movs	r3, #1
 801645a:	6163      	str	r3, [r4, #20]
 801645c:	b002      	add	sp, #8
 801645e:	bd70      	pop	{r4, r5, r6, pc}
 8016460:	ab01      	add	r3, sp, #4
 8016462:	466a      	mov	r2, sp
 8016464:	f7ff ffca 	bl	80163fc <__swhatbuf_r>
 8016468:	9900      	ldr	r1, [sp, #0]
 801646a:	4605      	mov	r5, r0
 801646c:	4630      	mov	r0, r6
 801646e:	f7fb f907 	bl	8011680 <_malloc_r>
 8016472:	b948      	cbnz	r0, 8016488 <__smakebuf_r+0x44>
 8016474:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016478:	059a      	lsls	r2, r3, #22
 801647a:	d4ef      	bmi.n	801645c <__smakebuf_r+0x18>
 801647c:	f023 0303 	bic.w	r3, r3, #3
 8016480:	f043 0302 	orr.w	r3, r3, #2
 8016484:	81a3      	strh	r3, [r4, #12]
 8016486:	e7e3      	b.n	8016450 <__smakebuf_r+0xc>
 8016488:	4b0d      	ldr	r3, [pc, #52]	; (80164c0 <__smakebuf_r+0x7c>)
 801648a:	62b3      	str	r3, [r6, #40]	; 0x28
 801648c:	89a3      	ldrh	r3, [r4, #12]
 801648e:	6020      	str	r0, [r4, #0]
 8016490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016494:	81a3      	strh	r3, [r4, #12]
 8016496:	9b00      	ldr	r3, [sp, #0]
 8016498:	6163      	str	r3, [r4, #20]
 801649a:	9b01      	ldr	r3, [sp, #4]
 801649c:	6120      	str	r0, [r4, #16]
 801649e:	b15b      	cbz	r3, 80164b8 <__smakebuf_r+0x74>
 80164a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80164a4:	4630      	mov	r0, r6
 80164a6:	f000 f827 	bl	80164f8 <_isatty_r>
 80164aa:	b128      	cbz	r0, 80164b8 <__smakebuf_r+0x74>
 80164ac:	89a3      	ldrh	r3, [r4, #12]
 80164ae:	f023 0303 	bic.w	r3, r3, #3
 80164b2:	f043 0301 	orr.w	r3, r3, #1
 80164b6:	81a3      	strh	r3, [r4, #12]
 80164b8:	89a0      	ldrh	r0, [r4, #12]
 80164ba:	4305      	orrs	r5, r0
 80164bc:	81a5      	strh	r5, [r4, #12]
 80164be:	e7cd      	b.n	801645c <__smakebuf_r+0x18>
 80164c0:	0801137d 	.word	0x0801137d

080164c4 <_malloc_usable_size_r>:
 80164c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80164c8:	1f18      	subs	r0, r3, #4
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	bfbc      	itt	lt
 80164ce:	580b      	ldrlt	r3, [r1, r0]
 80164d0:	18c0      	addlt	r0, r0, r3
 80164d2:	4770      	bx	lr

080164d4 <_fstat_r>:
 80164d4:	b538      	push	{r3, r4, r5, lr}
 80164d6:	4d07      	ldr	r5, [pc, #28]	; (80164f4 <_fstat_r+0x20>)
 80164d8:	2300      	movs	r3, #0
 80164da:	4604      	mov	r4, r0
 80164dc:	4608      	mov	r0, r1
 80164de:	4611      	mov	r1, r2
 80164e0:	602b      	str	r3, [r5, #0]
 80164e2:	f7ec fd56 	bl	8002f92 <_fstat>
 80164e6:	1c43      	adds	r3, r0, #1
 80164e8:	d102      	bne.n	80164f0 <_fstat_r+0x1c>
 80164ea:	682b      	ldr	r3, [r5, #0]
 80164ec:	b103      	cbz	r3, 80164f0 <_fstat_r+0x1c>
 80164ee:	6023      	str	r3, [r4, #0]
 80164f0:	bd38      	pop	{r3, r4, r5, pc}
 80164f2:	bf00      	nop
 80164f4:	200070d4 	.word	0x200070d4

080164f8 <_isatty_r>:
 80164f8:	b538      	push	{r3, r4, r5, lr}
 80164fa:	4d06      	ldr	r5, [pc, #24]	; (8016514 <_isatty_r+0x1c>)
 80164fc:	2300      	movs	r3, #0
 80164fe:	4604      	mov	r4, r0
 8016500:	4608      	mov	r0, r1
 8016502:	602b      	str	r3, [r5, #0]
 8016504:	f7ec fd55 	bl	8002fb2 <_isatty>
 8016508:	1c43      	adds	r3, r0, #1
 801650a:	d102      	bne.n	8016512 <_isatty_r+0x1a>
 801650c:	682b      	ldr	r3, [r5, #0]
 801650e:	b103      	cbz	r3, 8016512 <_isatty_r+0x1a>
 8016510:	6023      	str	r3, [r4, #0]
 8016512:	bd38      	pop	{r3, r4, r5, pc}
 8016514:	200070d4 	.word	0x200070d4

08016518 <_init>:
 8016518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801651a:	bf00      	nop
 801651c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801651e:	bc08      	pop	{r3}
 8016520:	469e      	mov	lr, r3
 8016522:	4770      	bx	lr

08016524 <_fini>:
 8016524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016526:	bf00      	nop
 8016528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801652a:	bc08      	pop	{r3}
 801652c:	469e      	mov	lr, r3
 801652e:	4770      	bx	lr
