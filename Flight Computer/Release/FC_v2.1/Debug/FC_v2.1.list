
FC_v2.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001672c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002130  080168e0  080168e0  000268e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018a10  08018a10  00030220  2**0
                  CONTENTS
  4 .ARM          00000008  08018a10  08018a10  00028a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018a18  08018a18  00030220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08018a18  08018a18  00028a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018a20  08018a20  00028a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08018a24  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030220  2**0
                  CONTENTS
 10 .bss          00005efc  20000220  20000220  00030220  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  2000611c  2000611c  00030220  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 13 .debug_info   000571ad  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007a53  00000000  00000000  000873fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000036b0  00000000  00000000  0008ee50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000034c8  00000000  00000000  00092500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000dd62  00000000  00000000  000959c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00035bdd  00000000  00000000  000a372a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00112f8c  00000000  00000000  000d9307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001ec293  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000106f8  00000000  00000000  001ec2e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000220 	.word	0x20000220
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080168c4 	.word	0x080168c4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000224 	.word	0x20000224
 80001ec:	080168c4 	.word	0x080168c4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <lsm_write>:
/*
 * LSM6DSR
 */

static int32_t lsm_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af04      	add	r7, sp, #16
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	461a      	mov	r2, r3
 8001018:	460b      	mov	r3, r1
 800101a:	72fb      	strb	r3, [r7, #11]
 800101c:	4613      	mov	r3, r2
 800101e:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8001020:	7afb      	ldrb	r3, [r7, #11]
 8001022:	b29a      	uxth	r2, r3
 8001024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001028:	9302      	str	r3, [sp, #8]
 800102a:	893b      	ldrh	r3, [r7, #8]
 800102c:	9301      	str	r3, [sp, #4]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	21d5      	movs	r1, #213	; 0xd5
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f007 fc42 	bl	80088c0 <HAL_I2C_Mem_Write>
  return 0;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <lsm_read>:

static int32_t lsm_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b088      	sub	sp, #32
 800104a:	af04      	add	r7, sp, #16
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	607a      	str	r2, [r7, #4]
 8001050:	461a      	mov	r2, r3
 8001052:	460b      	mov	r3, r1
 8001054:	72fb      	strb	r3, [r7, #11]
 8001056:	4613      	mov	r3, r2
 8001058:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LSM6DSR_I2C_ADD_L, reg,
 800105a:	7afb      	ldrb	r3, [r7, #11]
 800105c:	b29a      	uxth	r2, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	9302      	str	r3, [sp, #8]
 8001064:	893b      	ldrh	r3, [r7, #8]
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2301      	movs	r3, #1
 800106e:	21d5      	movs	r1, #213	; 0xd5
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f007 fd1f 	bl	8008ab4 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <MRT_LSM6DSR_Setup>:




stmdev_ctx_t  MRT_LSM6DSR_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b08b      	sub	sp, #44	; 0x2c
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
	  Guart = uart;
 800108c:	4a53      	ldr	r2, [pc, #332]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LSM6DSR Setup Starts\n\r", 22, HAL_MAX_DELAY);
 8001092:	4b52      	ldr	r3, [pc, #328]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 8001094:	6818      	ldr	r0, [r3, #0]
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	2216      	movs	r2, #22
 800109c:	4950      	ldr	r1, [pc, #320]	; (80011e0 <MRT_LSM6DSR_Setup+0x160>)
 800109e:	f00b fbe0 	bl	800c862 <HAL_UART_Transmit>


	  stmdev_ctx_t lsm_ctx;

	  /* Initialize mems driver interface */
	  lsm_ctx.write_reg = lsm_write;
 80010a2:	4b50      	ldr	r3, [pc, #320]	; (80011e4 <MRT_LSM6DSR_Setup+0x164>)
 80010a4:	61fb      	str	r3, [r7, #28]
	  lsm_ctx.read_reg = lsm_read;
 80010a6:	4b50      	ldr	r3, [pc, #320]	; (80011e8 <MRT_LSM6DSR_Setup+0x168>)
 80010a8:	623b      	str	r3, [r7, #32]
	  lsm_ctx.handle = SENSOR_BUS;
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 80010ae:	2064      	movs	r0, #100	; 0x64
 80010b0:	f006 fd22 	bl	8007af8 <HAL_Delay>
	  /* Check device ID */
	  lsm6dsr_device_id_get(&lsm_ctx, &lsm_whoamI);
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	494c      	ldr	r1, [pc, #304]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010ba:	4618      	mov	r0, r3
 80010bc:	f006 f9d2 	bl	8007464 <lsm6dsr_device_id_get>

	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 21, HAL_MAX_DELAY);
 80010c0:	4b46      	ldr	r3, [pc, #280]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
 80010c8:	2215      	movs	r2, #21
 80010ca:	4949      	ldr	r1, [pc, #292]	; (80011f0 <MRT_LSM6DSR_Setup+0x170>)
 80010cc:	f00b fbc9 	bl	800c862 <HAL_UART_Transmit>


	  if (lsm_whoamI != LSM6DSR_ID){
 80010d0:	4b46      	ldr	r3, [pc, #280]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b6a      	cmp	r3, #106	; 0x6a
 80010d6:	d032      	beq.n	800113e <MRT_LSM6DSR_Setup+0xbe>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 80010d8:	4b40      	ldr	r3, [pc, #256]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295
 80010e0:	2208      	movs	r2, #8
 80010e2:	4944      	ldr	r1, [pc, #272]	; (80011f4 <MRT_LSM6DSR_Setup+0x174>)
 80010e4:	f00b fbbd 	bl	800c862 <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 80010e8:	4b3c      	ldr	r3, [pc, #240]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295
 80010f0:	2210      	movs	r2, #16
 80010f2:	4941      	ldr	r1, [pc, #260]	; (80011f8 <MRT_LSM6DSR_Setup+0x178>)
 80010f4:	f00b fbb5 	bl	800c862 <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lsm_whoamI);
 80010f8:	4b3c      	ldr	r3, [pc, #240]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	493e      	ldr	r1, [pc, #248]	; (80011fc <MRT_LSM6DSR_Setup+0x17c>)
 8001104:	4618      	mov	r0, r3
 8001106:	f011 fc27 	bl	8012958 <siprintf>

			__BKPT();
 800110a:	be00      	bkpt	0x0000

		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 800110c:	4b33      	ldr	r3, [pc, #204]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800110e:	681c      	ldr	r4, [r3, #0]
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f86b 	bl	80001f0 <strlen>
 800111a:	4603      	mov	r3, r0
 800111c:	b29a      	uxth	r2, r3
 800111e:	f107 0110 	add.w	r1, r7, #16
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	4620      	mov	r0, r4
 8001128:	f00b fb9b 	bl	800c862 <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 800112c:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800112e:	6818      	ldr	r0, [r3, #0]
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	2216      	movs	r2, #22
 8001136:	4932      	ldr	r1, [pc, #200]	; (8001200 <MRT_LSM6DSR_Setup+0x180>)
 8001138:	f00b fb93 	bl	800c862 <HAL_UART_Transmit>
		  while(1);
 800113c:	e7fe      	b.n	800113c <MRT_LSM6DSR_Setup+0xbc>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 6, HAL_MAX_DELAY);
 800113e:	4b27      	ldr	r3, [pc, #156]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 8001140:	6818      	ldr	r0, [r3, #0]
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	2206      	movs	r2, #6
 8001148:	492e      	ldr	r1, [pc, #184]	; (8001204 <MRT_LSM6DSR_Setup+0x184>)
 800114a:	f00b fb8a 	bl	800c862 <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lsm6dsr_reset_set(&lsm_ctx, PROPERTY_ENABLE);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	2101      	movs	r1, #1
 8001154:	4618      	mov	r0, r3
 8001156:	f006 f996 	bl	8007486 <lsm6dsr_reset_set>


	  HAL_Delay(1000);
 800115a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800115e:	f006 fccb 	bl	8007af8 <HAL_Delay>

	  do {
	    lsm6dsr_reset_get(&lsm_ctx, &lsm_rst);
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	4928      	ldr	r1, [pc, #160]	; (8001208 <MRT_LSM6DSR_Setup+0x188>)
 8001168:	4618      	mov	r0, r3
 800116a:	f006 f9b2 	bl	80074d2 <lsm6dsr_reset_get>
	  } while (lsm_rst);
 800116e:	4b26      	ldr	r3, [pc, #152]	; (8001208 <MRT_LSM6DSR_Setup+0x188>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f5      	bne.n	8001162 <MRT_LSM6DSR_Setup+0xe2>

	  /* Disable I3C interface */
	  //TODO JASPER lsm6dsr_i3c_disable_set(&lsm_ctx, LSM6DSR_I3C_DISABLE);

	  /* Enable Block Data Update */
	  lsm6dsr_block_data_update_set(&lsm_ctx, PROPERTY_ENABLE);
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	2101      	movs	r1, #1
 800117c:	4618      	mov	r0, r3
 800117e:	f006 f821 	bl	80071c4 <lsm6dsr_block_data_update_set>
	  /* Set Output Data Rate */
	  lsm6dsr_xl_data_rate_set(&lsm_ctx, LSM6DSR_XL_ODR_12Hz5);
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	2101      	movs	r1, #1
 8001188:	4618      	mov	r0, r3
 800118a:	f005 fdfd 	bl	8006d88 <lsm6dsr_xl_data_rate_set>
	  lsm6dsr_gy_data_rate_set(&lsm_ctx, LSM6DSR_GY_ODR_12Hz5);
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	2101      	movs	r1, #1
 8001194:	4618      	mov	r0, r3
 8001196:	f005 ff19 	bl	8006fcc <lsm6dsr_gy_data_rate_set>
	  /* Set full scale */
	  lsm6dsr_xl_full_scale_set(&lsm_ctx, LSM6DSR_2g);
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f005 fdcb 	bl	8006d3c <lsm6dsr_xl_full_scale_set>
	  lsm6dsr_gy_full_scale_set(&lsm_ctx, LSM6DSR_2000dps);
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	210c      	movs	r1, #12
 80011ac:	4618      	mov	r0, r3
 80011ae:	f005 fee7 	bl	8006f80 <lsm6dsr_gy_full_scale_set>
	  /* Configure filtering chain(No aux interface)
	   * Accelerometer - LPF1 + LPF2 path
	   */
	  //TODO JASPER lsm6dsr_xl_hp_path_on_out_set(&lsm_ctx, LSM6DSR_LP_ODR_DIV_100);
	  //TODO JASPER lsm6dsr_xl_filter_lp2_set(&lsm_ctx, PROPERTY_ENABLE);
	  HAL_UART_Transmit(Guart,"LLSM6DSR Setup Ends\n\r", 25, HAL_MAX_DELAY);
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80011b4:	6818      	ldr	r0, [r3, #0]
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	2219      	movs	r2, #25
 80011bc:	4913      	ldr	r1, [pc, #76]	; (800120c <MRT_LSM6DSR_Setup+0x18c>)
 80011be:	f00b fb50 	bl	800c862 <HAL_UART_Transmit>

	  return lsm_ctx;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	461c      	mov	r4, r3
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	372c      	adds	r7, #44	; 0x2c
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd90      	pop	{r4, r7, pc}
 80011da:	bf00      	nop
 80011dc:	200059b8 	.word	0x200059b8
 80011e0:	080168e0 	.word	0x080168e0
 80011e4:	0800100d 	.word	0x0800100d
 80011e8:	08001047 	.word	0x08001047
 80011ec:	2000024c 	.word	0x2000024c
 80011f0:	080168f8 	.word	0x080168f8
 80011f4:	08016910 	.word	0x08016910
 80011f8:	0801691c 	.word	0x0801691c
 80011fc:	08016930 	.word	0x08016930
 8001200:	08016938 	.word	0x08016938
 8001204:	08016950 	.word	0x08016950
 8001208:	2000024d 	.word	0x2000024d
 800120c:	08016958 	.word	0x08016958

08001210 <MRT_LSM6DSR_getAcceleration>:


/*
 * Get acceleration values
 */
void MRT_LSM6DSR_getAcceleration(stmdev_ctx_t lsm_ctx,float acceleration_mg[3]){
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b087      	sub	sp, #28
 8001214:	af00      	add	r7, sp, #0
 8001216:	1d3c      	adds	r4, r7, #4
 8001218:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800121c:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_xl_flag_data_ready_get(&lsm_ctx, &reg);
 800121e:	f107 0217 	add.w	r2, r7, #23
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	4611      	mov	r1, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f005 fff2 	bl	8007210 <lsm6dsr_xl_flag_data_ready_get>

		//if (reg.status_reg.gda) {
	    if(reg){
 800122c:	7dfb      	ldrb	r3, [r7, #23]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d02d      	beq.n	800128e <MRT_LSM6DSR_getAcceleration+0x7e>
		/* Read magnetic field data */
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001232:	2206      	movs	r2, #6
 8001234:	2100      	movs	r1, #0
 8001236:	4818      	ldr	r0, [pc, #96]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001238:	f010 fb10 	bl	801185c <memset>
        lsm6dsr_acceleration_raw_get(&lsm_ctx, data_raw_acceleration);
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	4916      	ldr	r1, [pc, #88]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001240:	4618      	mov	r0, r3
 8001242:	f006 f89e 	bl	8007382 <lsm6dsr_acceleration_raw_get>
        acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800124c:	4618      	mov	r0, r3
 800124e:	f005 fd29 	bl	8006ca4 <lsm6dsr_from_fs2g_to_mg>
 8001252:	eef0 7a40 	vmov.f32	s15, s0
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	edc3 7a00 	vstr	s15, [r3]
                               data_raw_acceleration[0]);
        acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 800125e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	1d1c      	adds	r4, r3, #4
 8001266:	4610      	mov	r0, r2
 8001268:	f005 fd1c 	bl	8006ca4 <lsm6dsr_from_fs2g_to_mg>
 800126c:	eef0 7a40 	vmov.f32	s15, s0
 8001270:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[1]);
        acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001276:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	f103 0408 	add.w	r4, r3, #8
 8001280:	4610      	mov	r0, r2
 8001282:	f005 fd0f 	bl	8006ca4 <lsm6dsr_from_fs2g_to_mg>
 8001286:	eef0 7a40 	vmov.f32	s15, s0
 800128a:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[2]);
      }
}
 800128e:	bf00      	nop
 8001290:	371c      	adds	r7, #28
 8001292:	46bd      	mov	sp, r7
 8001294:	bd90      	pop	{r4, r7, pc}
 8001296:	bf00      	nop
 8001298:	2000023c 	.word	0x2000023c

0800129c <MRT_LSM6DSR_getTemperature>:


/*
 * Get temperature value
 */
void MRT_LSM6DSR_getTemperature(stmdev_ctx_t lsm_ctx,float* temperature_degC){
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b087      	sub	sp, #28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	1d3c      	adds	r4, r7, #4
 80012a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012a8:	603b      	str	r3, [r7, #0]
	//lsm6dsr_reg_t reg;
	//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    uint8_t reg;
    lsm6dsr_temp_flag_data_ready_get(&lsm_ctx, &reg);
 80012aa:	f107 0217 	add.w	r2, r7, #23
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f005 ffde 	bl	8007274 <lsm6dsr_temp_flag_data_ready_get>

	//if (reg.status_reg.tda) {
    if(reg){
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d012      	beq.n	80012e4 <MRT_LSM6DSR_getTemperature+0x48>
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <MRT_LSM6DSR_getTemperature+0x50>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	801a      	strh	r2, [r3, #0]
		//Read temperature data
		memset(&lsm_data_raw_temperature, 0x00, sizeof(int16_t));
		lsm6dsr_temperature_raw_get(&lsm_ctx, &lsm_data_raw_temperature);
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	4909      	ldr	r1, [pc, #36]	; (80012ec <MRT_LSM6DSR_getTemperature+0x50>)
 80012c8:	4618      	mov	r0, r3
 80012ca:	f005 ffec 	bl	80072a6 <lsm6dsr_temperature_raw_get>
		*temperature_degC = lsm6dsr_from_lsb_to_celsius(lsm_data_raw_temperature);
 80012ce:	4b07      	ldr	r3, [pc, #28]	; (80012ec <MRT_LSM6DSR_getTemperature+0x50>)
 80012d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f005 fd15 	bl	8006d04 <lsm6dsr_from_lsb_to_celsius>
 80012da:	eef0 7a40 	vmov.f32	s15, s0
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	edc3 7a00 	vstr	s15, [r3]

	}
}
 80012e4:	bf00      	nop
 80012e6:	371c      	adds	r7, #28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd90      	pop	{r4, r7, pc}
 80012ec:	2000024a 	.word	0x2000024a

080012f0 <MRT_LSM6DSR_getAngularRate>:


/*
 * Get angular rate values
 */
void MRT_LSM6DSR_getAngularRate(stmdev_ctx_t lsm_ctx,float angular_rate_mdps[3]){
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b087      	sub	sp, #28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	1d3c      	adds	r4, r7, #4
 80012f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012fc:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_gy_flag_data_ready_get(&lsm_ctx, &reg);
 80012fe:	f107 0217 	add.w	r2, r7, #23
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	4611      	mov	r1, r2
 8001306:	4618      	mov	r0, r3
 8001308:	f005 ff9b 	bl	8007242 <lsm6dsr_gy_flag_data_ready_get>

		//if (reg.status_reg.xlda) {
	    if(reg){
 800130c:	7dfb      	ldrb	r3, [r7, #23]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d02d      	beq.n	800136e <MRT_LSM6DSR_getAngularRate+0x7e>
		/* Read magnetic field data */
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8001312:	2206      	movs	r2, #6
 8001314:	2100      	movs	r1, #0
 8001316:	4818      	ldr	r0, [pc, #96]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001318:	f010 faa0 	bl	801185c <memset>
		lsm6dsr_angular_rate_raw_get(&lsm_ctx, data_raw_angular_rate);
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	4916      	ldr	r1, [pc, #88]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001320:	4618      	mov	r0, r3
 8001322:	f005 ffe3 	bl	80072ec <lsm6dsr_angular_rate_raw_get>
		angular_rate_mdps[0] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8001326:	4b14      	ldr	r3, [pc, #80]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001328:	f9b3 3000 	ldrsh.w	r3, [r3]
 800132c:	4618      	mov	r0, r3
 800132e:	f005 fcd1 	bl	8006cd4 <lsm6dsr_from_fs2000dps_to_mdps>
 8001332:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[0] =
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	edc3 7a00 	vstr	s15, [r3]
		angular_rate_mdps[1] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 800133c:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 800133e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
		angular_rate_mdps[1] =
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	1d1c      	adds	r4, r3, #4
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001346:	4610      	mov	r0, r2
 8001348:	f005 fcc4 	bl	8006cd4 <lsm6dsr_from_fs2000dps_to_mdps>
 800134c:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[1] =
 8001350:	edc4 7a00 	vstr	s15, [r4]
		angular_rate_mdps[2] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001356:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		angular_rate_mdps[2] =
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	f103 0408 	add.w	r4, r3, #8
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001360:	4610      	mov	r0, r2
 8001362:	f005 fcb7 	bl	8006cd4 <lsm6dsr_from_fs2000dps_to_mdps>
 8001366:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[2] =
 800136a:	edc4 7a00 	vstr	s15, [r4]
		fs2000dps_to_mdps
		*/

		}

}
 800136e:	bf00      	nop
 8001370:	371c      	adds	r7, #28
 8001372:	46bd      	mov	sp, r7
 8001374:	bd90      	pop	{r4, r7, pc}
 8001376:	bf00      	nop
 8001378:	20000244 	.word	0x20000244

0800137c <MRT_LPS22HH_Setup>:
 * LPS22HH
 */


stmdev_ctx_t  MRT_LPS22HH_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b08d      	sub	sp, #52	; 0x34
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]

	  Guart = uart;
 8001388:	4a4b      	ldr	r2, [pc, #300]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Starts\n\r", 22, HAL_MAX_DELAY);
 800138e:	4b4a      	ldr	r3, [pc, #296]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 8001390:	6818      	ldr	r0, [r3, #0]
 8001392:	f04f 33ff 	mov.w	r3, #4294967295
 8001396:	2216      	movs	r2, #22
 8001398:	4948      	ldr	r1, [pc, #288]	; (80014bc <MRT_LPS22HH_Setup+0x140>)
 800139a:	f00b fa62 	bl	800c862 <HAL_UART_Transmit>

	  stmdev_ctx_t lps_ctx;

	  lps22hh_reg_t reg;
	  /* Initialize mems driver interface */
	  lps_ctx.write_reg = lps_write;
 800139e:	4b48      	ldr	r3, [pc, #288]	; (80014c0 <MRT_LPS22HH_Setup+0x144>)
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
	  lps_ctx.read_reg = lps_read;
 80013a2:	4b48      	ldr	r3, [pc, #288]	; (80014c4 <MRT_LPS22HH_Setup+0x148>)
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
	  lps_ctx.handle = SENSOR_BUS;
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 80013aa:	2064      	movs	r0, #100	; 0x64
 80013ac:	f006 fba4 	bl	8007af8 <HAL_Delay>
	  /* Check device ID */
	  lps_whoamI = 0;
 80013b0:	4b45      	ldr	r3, [pc, #276]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
	  lps22hh_device_id_get(&lps_ctx, &lps_whoamI);
 80013b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ba:	4943      	ldr	r1, [pc, #268]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013bc:	4618      	mov	r0, r3
 80013be:	f005 fbf0 	bl	8006ba2 <lps22hh_device_id_get>



  	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 22, HAL_MAX_DELAY);
 80013c2:	4b3d      	ldr	r3, [pc, #244]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 80013c4:	6818      	ldr	r0, [r3, #0]
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ca:	2216      	movs	r2, #22
 80013cc:	493f      	ldr	r1, [pc, #252]	; (80014cc <MRT_LPS22HH_Setup+0x150>)
 80013ce:	f00b fa48 	bl	800c862 <HAL_UART_Transmit>
	  if ( lps_whoamI != LPS22HH_ID ){
 80013d2:	4b3d      	ldr	r3, [pc, #244]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2bb3      	cmp	r3, #179	; 0xb3
 80013d8:	d031      	beq.n	800143e <MRT_LPS22HH_Setup+0xc2>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 80013da:	4b37      	ldr	r3, [pc, #220]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 80013dc:	6818      	ldr	r0, [r3, #0]
 80013de:	f04f 33ff 	mov.w	r3, #4294967295
 80013e2:	2208      	movs	r2, #8
 80013e4:	493a      	ldr	r1, [pc, #232]	; (80014d0 <MRT_LPS22HH_Setup+0x154>)
 80013e6:	f00b fa3c 	bl	800c862 <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 80013ea:	4b33      	ldr	r3, [pc, #204]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 80013ec:	6818      	ldr	r0, [r3, #0]
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	2210      	movs	r2, #16
 80013f4:	4937      	ldr	r1, [pc, #220]	; (80014d4 <MRT_LPS22HH_Setup+0x158>)
 80013f6:	f00b fa34 	bl	800c862 <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lps_whoamI);
 80013fa:	4b33      	ldr	r3, [pc, #204]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	4934      	ldr	r1, [pc, #208]	; (80014d8 <MRT_LPS22HH_Setup+0x15c>)
 8001406:	4618      	mov	r0, r3
 8001408:	f011 faa6 	bl	8012958 <siprintf>
		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 800140c:	4b2a      	ldr	r3, [pc, #168]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 800140e:	681c      	ldr	r4, [r3, #0]
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	4618      	mov	r0, r3
 8001416:	f7fe feeb 	bl	80001f0 <strlen>
 800141a:	4603      	mov	r3, r0
 800141c:	b29a      	uxth	r2, r3
 800141e:	f107 0114 	add.w	r1, r7, #20
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
 8001426:	4620      	mov	r0, r4
 8001428:	f00b fa1b 	bl	800c862 <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 800142c:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 800142e:	6818      	ldr	r0, [r3, #0]
 8001430:	f04f 33ff 	mov.w	r3, #4294967295
 8001434:	2216      	movs	r2, #22
 8001436:	4929      	ldr	r1, [pc, #164]	; (80014dc <MRT_LPS22HH_Setup+0x160>)
 8001438:	f00b fa13 	bl	800c862 <HAL_UART_Transmit>
		  while(1);
 800143c:	e7fe      	b.n	800143c <MRT_LPS22HH_Setup+0xc0>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 4, HAL_MAX_DELAY);
 800143e:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 8001440:	6818      	ldr	r0, [r3, #0]
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
 8001446:	2204      	movs	r2, #4
 8001448:	4925      	ldr	r1, [pc, #148]	; (80014e0 <MRT_LPS22HH_Setup+0x164>)
 800144a:	f00b fa0a 	bl	800c862 <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lps22hh_reset_set(&lps_ctx, PROPERTY_ENABLE);
 800144e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001452:	2101      	movs	r1, #1
 8001454:	4618      	mov	r0, r3
 8001456:	f005 fbb5 	bl	8006bc4 <lps22hh_reset_set>

	  HAL_Delay(1000);
 800145a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800145e:	f006 fb4b 	bl	8007af8 <HAL_Delay>

	  do {
	    lps22hh_reset_get(&lps_ctx, &lps_rst);
 8001462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001466:	491f      	ldr	r1, [pc, #124]	; (80014e4 <MRT_LPS22HH_Setup+0x168>)
 8001468:	4618      	mov	r0, r3
 800146a:	f005 fbd1 	bl	8006c10 <lps22hh_reset_get>
	  } while (lps_rst);
 800146e:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <MRT_LPS22HH_Setup+0x168>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f5      	bne.n	8001462 <MRT_LPS22HH_Setup+0xe6>


	  /* Enable Block Data Update */
	  lps22hh_block_data_update_set(&lps_ctx, PROPERTY_ENABLE);
 8001476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147a:	2101      	movs	r1, #1
 800147c:	4618      	mov	r0, r3
 800147e:	f005 fab7 	bl	80069f0 <lps22hh_block_data_update_set>
	  /* Set Output Data Rate */
	  lps22hh_data_rate_set(&lps_ctx, LPS22HH_75_Hz_LOW_NOISE);
 8001482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001486:	2115      	movs	r1, #21
 8001488:	4618      	mov	r0, r3
 800148a:	f005 fad7 	bl	8006a3c <lps22hh_data_rate_set>
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Ends\n\r", 24, HAL_MAX_DELAY);
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 8001490:	6818      	ldr	r0, [r3, #0]
 8001492:	f04f 33ff 	mov.w	r3, #4294967295
 8001496:	2218      	movs	r2, #24
 8001498:	4913      	ldr	r1, [pc, #76]	; (80014e8 <MRT_LPS22HH_Setup+0x16c>)
 800149a:	f00b f9e2 	bl	800c862 <HAL_UART_Transmit>

	  return lps_ctx;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	461c      	mov	r4, r3
 80014a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	}
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	3734      	adds	r7, #52	; 0x34
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd90      	pop	{r4, r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200059b8 	.word	0x200059b8
 80014bc:	08016970 	.word	0x08016970
 80014c0:	08001599 	.word	0x08001599
 80014c4:	080015d3 	.word	0x080015d3
 80014c8:	20000256 	.word	0x20000256
 80014cc:	080168f8 	.word	0x080168f8
 80014d0:	08016910 	.word	0x08016910
 80014d4:	0801691c 	.word	0x0801691c
 80014d8:	08016930 	.word	0x08016930
 80014dc:	08016938 	.word	0x08016938
 80014e0:	08016950 	.word	0x08016950
 80014e4:	20000257 	.word	0x20000257
 80014e8:	08016988 	.word	0x08016988

080014ec <MRT_LPS22HH_getPressure>:



void MRT_LPS22HH_getPressure(stmdev_ctx_t lps_ctx,float* pressure){
 80014ec:	b590      	push	{r4, r7, lr}
 80014ee:	b087      	sub	sp, #28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	1d3c      	adds	r4, r7, #4
 80014f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80014f8:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 80014fa:	f107 0214 	add.w	r2, r7, #20
 80014fe:	1d38      	adds	r0, r7, #4
 8001500:	2301      	movs	r3, #1
 8001502:	2127      	movs	r1, #39	; 0x27
 8001504:	f005 fa12 	bl	800692c <lps22hh_read_reg>

	//uint8_t reg;
	//lps22hh_press_flag_data_ready_get(&lps_ctx, &reg);

	if (reg.status.p_da) {
 8001508:	7d3b      	ldrb	r3, [r7, #20]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	d011      	beq.n	8001538 <MRT_LPS22HH_getPressure+0x4c>
 8001514:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <MRT_LPS22HH_getPressure+0x54>)
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
	//if (reg) {
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t)); //TODO CAN CAUSE AN HARDFAULT
	  lps22hh_pressure_raw_get(&lps_ctx, &data_raw_pressure);
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	4908      	ldr	r1, [pc, #32]	; (8001540 <MRT_LPS22HH_getPressure+0x54>)
 800151e:	4618      	mov	r0, r3
 8001520:	f005 faf3 	bl	8006b0a <lps22hh_pressure_raw_get>
	  *pressure = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MRT_LPS22HH_getPressure+0x54>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f005 fa2f 	bl	800698c <lps22hh_from_lsb_to_hpa>
 800152e:	eef0 7a40 	vmov.f32	s15, s0
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001538:	bf00      	nop
 800153a:	371c      	adds	r7, #28
 800153c:	46bd      	mov	sp, r7
 800153e:	bd90      	pop	{r4, r7, pc}
 8001540:	20000250 	.word	0x20000250

08001544 <MRT_LPS22HH_getTemperature>:

void MRT_LPS22HH_getTemperature(stmdev_ctx_t lps_ctx,float* temperature_degC){
 8001544:	b590      	push	{r4, r7, lr}
 8001546:	b087      	sub	sp, #28
 8001548:	af00      	add	r7, sp, #0
 800154a:	1d3c      	adds	r4, r7, #4
 800154c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001550:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	//lps22hh_reg_t reg;
	//lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);

	uint8_t reg;
	lps22hh_temp_flag_data_ready_get(&lps_ctx, &reg);
 8001552:	f107 0217 	add.w	r2, r7, #23
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f005 fabc 	bl	8006ad8 <lps22hh_temp_flag_data_ready_get>

	//if (reg.status.t_da) {
	if (reg) {
 8001560:	7dfb      	ldrb	r3, [r7, #23]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d012      	beq.n	800158c <MRT_LPS22HH_getTemperature+0x48>
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <MRT_LPS22HH_getTemperature+0x50>)
 8001568:	2200      	movs	r2, #0
 800156a:	801a      	strh	r2, [r3, #0]
	  memset(&lps_data_raw_temperature, 0x00, sizeof(int16_t));
	  lps22hh_temperature_raw_get(&lps_ctx, &lps_data_raw_temperature);
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	4909      	ldr	r1, [pc, #36]	; (8001594 <MRT_LPS22HH_getTemperature+0x50>)
 8001570:	4618      	mov	r0, r3
 8001572:	f005 faf3 	bl	8006b5c <lps22hh_temperature_raw_get>
	  *temperature_degC = lps22hh_from_lsb_to_celsius(lps_data_raw_temperature);
 8001576:	4b07      	ldr	r3, [pc, #28]	; (8001594 <MRT_LPS22HH_getTemperature+0x50>)
 8001578:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157c:	4618      	mov	r0, r3
 800157e:	f005 fa1d 	bl	80069bc <lps22hh_from_lsb_to_celsius>
 8001582:	eef0 7a40 	vmov.f32	s15, s0
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800158c:	bf00      	nop
 800158e:	371c      	adds	r7, #28
 8001590:	46bd      	mov	sp, r7
 8001592:	bd90      	pop	{r4, r7, pc}
 8001594:	20000254 	.word	0x20000254

08001598 <lps_write>:




static int32_t lps_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af04      	add	r7, sp, #16
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	461a      	mov	r2, r3
 80015a4:	460b      	mov	r3, r1
 80015a6:	72fb      	strb	r3, [r7, #11]
 80015a8:	4613      	mov	r3, r2
 80015aa:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80015ac:	7afb      	ldrb	r3, [r7, #11]
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b4:	9302      	str	r3, [sp, #8]
 80015b6:	893b      	ldrh	r3, [r7, #8]
 80015b8:	9301      	str	r3, [sp, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	2301      	movs	r3, #1
 80015c0:	21b9      	movs	r1, #185	; 0xb9
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f007 f97c 	bl	80088c0 <HAL_I2C_Mem_Write>
  return 0;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <lps_read>:

static int32_t lps_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b088      	sub	sp, #32
 80015d6:	af04      	add	r7, sp, #16
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	461a      	mov	r2, r3
 80015de:	460b      	mov	r3, r1
 80015e0:	72fb      	strb	r3, [r7, #11]
 80015e2:	4613      	mov	r3, r2
 80015e4:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80015e6:	7afb      	ldrb	r3, [r7, #11]
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ee:	9302      	str	r3, [sp, #8]
 80015f0:	893b      	ldrh	r3, [r7, #8]
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	2301      	movs	r3, #1
 80015fa:	21b9      	movs	r1, #185	; 0xb9
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f007 fa59 	bl	8008ab4 <HAL_I2C_Mem_Read>
  return 0;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001610:	f3bf 8f4f 	dsb	sy
}
 8001614:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <__NVIC_SystemReset+0x24>)
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800161e:	4904      	ldr	r1, [pc, #16]	; (8001630 <__NVIC_SystemReset+0x24>)
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <__NVIC_SystemReset+0x28>)
 8001622:	4313      	orrs	r3, r2
 8001624:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001626:	f3bf 8f4f 	dsb	sy
}
 800162a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <__NVIC_SystemReset+0x20>
 8001630:	e000ed00 	.word	0xe000ed00
 8001634:	05fa0004 	.word	0x05fa0004

08001638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800163a:	b09d      	sub	sp, #116	; 0x74
 800163c:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800163e:	f006 fa19 	bl	8007a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001642:	f000 f999 	bl	8001978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001646:	f000 fd29 	bl	800209c <MX_GPIO_Init>
  MX_ADC1_Init();
 800164a:	f000 f9f7 	bl	8001a3c <MX_ADC1_Init>
  MX_I2C1_Init();
 800164e:	f000 fa47 	bl	8001ae0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001652:	f000 fa85 	bl	8001b60 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001656:	f000 fac3 	bl	8001be0 <MX_I2C3_Init>
  MX_SPI2_Init();
 800165a:	f000 fba7 	bl	8001dac <MX_SPI2_Init>
  MX_SPI4_Init();
 800165e:	f000 fbdb 	bl	8001e18 <MX_SPI4_Init>
  MX_SPI5_Init();
 8001662:	f000 fc0f 	bl	8001e84 <MX_SPI5_Init>
  MX_TIM2_Init();
 8001666:	f000 fc43 	bl	8001ef0 <MX_TIM2_Init>
  MX_UART8_Init();
 800166a:	f000 fc99 	bl	8001fa0 <MX_UART8_Init>
  MX_USART3_UART_Init();
 800166e:	f000 fcc1 	bl	8001ff4 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001672:	f000 fce9 	bl	8002048 <MX_USART6_UART_Init>
  MX_RTC_Init();
 8001676:	f000 fb0d 	bl	8001c94 <MX_RTC_Init>
  /*
   * Reinitialize all peripherals
   */

  // reset LEDs
  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 800167a:	2200      	movs	r2, #0
 800167c:	2102      	movs	r1, #2
 800167e:	4898      	ldr	r0, [pc, #608]	; (80018e0 <main+0x2a8>)
 8001680:	f006 ffa8 	bl	80085d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001684:	2200      	movs	r2, #0
 8001686:	2104      	movs	r1, #4
 8001688:	4895      	ldr	r0, [pc, #596]	; (80018e0 <main+0x2a8>)
 800168a:	f006 ffa3 	bl	80085d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 800168e:	2200      	movs	r2, #0
 8001690:	2108      	movs	r1, #8
 8001692:	4893      	ldr	r0, [pc, #588]	; (80018e0 <main+0x2a8>)
 8001694:	f006 ff9e 	bl	80085d4 <HAL_GPIO_WritePin>

  // reset recovery pyro pins
  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 8001698:	2201      	movs	r2, #1
 800169a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800169e:	4891      	ldr	r0, [pc, #580]	; (80018e4 <main+0x2ac>)
 80016a0:	f006 ff98 	bl	80085d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 80016a4:	2200      	movs	r2, #0
 80016a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016aa:	488e      	ldr	r0, [pc, #568]	; (80018e4 <main+0x2ac>)
 80016ac:	f006 ff92 	bl	80085d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 80016b0:	2200      	movs	r2, #0
 80016b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016b6:	488b      	ldr	r0, [pc, #556]	; (80018e4 <main+0x2ac>)
 80016b8:	f006 ff8c 	bl	80085d4 <HAL_GPIO_WritePin>

  // reset prop pyro pins
  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET); //PG1 ARMING_PROP
 80016bc:	2201      	movs	r2, #1
 80016be:	2102      	movs	r1, #2
 80016c0:	4888      	ldr	r0, [pc, #544]	; (80018e4 <main+0x2ac>)
 80016c2:	f006 ff87 	bl	80085d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 80016c6:	2200      	movs	r2, #0
 80016c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016cc:	4886      	ldr	r0, [pc, #536]	; (80018e8 <main+0x2b0>)
 80016ce:	f006 ff81 	bl	80085d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 80016d2:	2200      	movs	r2, #0
 80016d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016d8:	4883      	ldr	r0, [pc, #524]	; (80018e8 <main+0x2b0>)
 80016da:	f006 ff7b 	bl	80085d4 <HAL_GPIO_WritePin>

  // reset 12 V buck converter enable pin (disable converter)
  HAL_GPIO_WritePin(EN_12V_Buck_GPIO_Port, EN_12V_Buck_Pin, RESET); //PE2 Buck converter enable
 80016de:	2200      	movs	r2, #0
 80016e0:	2104      	movs	r1, #4
 80016e2:	4882      	ldr	r0, [pc, #520]	; (80018ec <main+0x2b4>)
 80016e4:	f006 ff76 	bl	80085d4 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET); //This was in the previous code
  //HAL_GPIO_WritePin(OUT_Prop_ActuatedVent_Gate_GPIO_Port, OUT_Prop_ActuatedVent_Gate_Pin, RESET); //PE7 (MAY NOT BE THE RIGHT ONE)


  // reset payload EN signal
  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 80016e8:	2200      	movs	r2, #0
 80016ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016ee:	487f      	ldr	r0, [pc, #508]	; (80018ec <main+0x2b4>)
 80016f0:	f006 ff70 	bl	80085d4 <HAL_GPIO_WritePin>

  // set CS pin for thermocouple chip high
  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

  // set power off for VR
  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 80016f4:	2200      	movs	r2, #0
 80016f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016fa:	487a      	ldr	r0, [pc, #488]	; (80018e4 <main+0x2ac>)
 80016fc:	f006 ff6a 	bl	80085d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 8001700:	2200      	movs	r2, #0
 8001702:	2180      	movs	r1, #128	; 0x80
 8001704:	487a      	ldr	r0, [pc, #488]	; (80018f0 <main+0x2b8>)
 8001706:	f006 ff65 	bl	80085d4 <HAL_GPIO_WritePin>

  // FLASH set CS, WP and IO3 pins high
  HAL_GPIO_WritePin(OUT_FLASH_CS_GPIO_Port, OUT_FLASH_CS_Pin, SET);
 800170a:	2201      	movs	r2, #1
 800170c:	2140      	movs	r1, #64	; 0x40
 800170e:	4878      	ldr	r0, [pc, #480]	; (80018f0 <main+0x2b8>)
 8001710:	f006 ff60 	bl	80085d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_FLASH_WP_GPIO_Port, OUT_FLASH_WP_Pin, SET);
 8001714:	2201      	movs	r2, #1
 8001716:	2120      	movs	r1, #32
 8001718:	4875      	ldr	r0, [pc, #468]	; (80018f0 <main+0x2b8>)
 800171a:	f006 ff5b 	bl	80085d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_FLASH_IO3_GPIO_Port, OUT_FLASH_IO3_Pin, SET);
 800171e:	2201      	movs	r2, #1
 8001720:	2110      	movs	r1, #16
 8001722:	4873      	ldr	r0, [pc, #460]	; (80018f0 <main+0x2b8>)
 8001724:	f006 ff56 	bl	80085d4 <HAL_GPIO_WritePin>
   *-Activate freeRTOS
   *-Change SysTic to any other timer (done in .ioc)
   *-Include the path to all includes folders of the drivers (for C and C++ linkers)
   */

  HAL_UART_Transmit(&DEBUG_UART,"\r\n\r\nStarting FC\r\n\r\n",19,HAL_MAX_DELAY);
 8001728:	f04f 33ff 	mov.w	r3, #4294967295
 800172c:	2213      	movs	r2, #19
 800172e:	4971      	ldr	r1, [pc, #452]	; (80018f4 <main+0x2bc>)
 8001730:	4871      	ldr	r0, [pc, #452]	; (80018f8 <main+0x2c0>)
 8001732:	f00b f896 	bl	800c862 <HAL_UART_Transmit>

  /*
   * For external FLASH memory
   *-Put before RTOS setup because you need the external flash in its setup
   */
    MRT_SetupRTOS(DEBUG_UART,SLEEP_TIME); //Put here so we can pass the uart value to the setup
 8001736:	4e70      	ldr	r6, [pc, #448]	; (80018f8 <main+0x2c0>)
 8001738:	231e      	movs	r3, #30
 800173a:	930d      	str	r3, [sp, #52]	; 0x34
 800173c:	466d      	mov	r5, sp
 800173e:	f106 0410 	add.w	r4, r6, #16
 8001742:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001744:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001748:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800174c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174e:	6823      	ldr	r3, [r4, #0]
 8001750:	602b      	str	r3, [r5, #0]
 8001752:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001756:	f005 ff61 	bl	800761c <MRT_SetupRTOS>
	MRT_externalFlashSetup(&DEBUG_UART);
 800175a:	4867      	ldr	r0, [pc, #412]	; (80018f8 <main+0x2c0>)
 800175c:	f001 fecc 	bl	80034f8 <MRT_externalFlashSetup>
   * You can access the flag of both alarm A and B with the variables flagA and flagB
   */

//TODO doesn't work on wakeup (in the thread it seems)
  char tmp_buffer[20];
  sprintf(tmp_buffer,"Prev_Sec %i\r\n",prev_sec);
 8001760:	4b66      	ldr	r3, [pc, #408]	; (80018fc <main+0x2c4>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	461a      	mov	r2, r3
 8001766:	f107 0310 	add.w	r3, r7, #16
 800176a:	4965      	ldr	r1, [pc, #404]	; (8001900 <main+0x2c8>)
 800176c:	4618      	mov	r0, r3
 800176e:	f011 f8f3 	bl	8012958 <siprintf>
  HAL_UART_Transmit(&DEBUG_UART,tmp_buffer,strlen(tmp_buffer),HAL_MAX_DELAY);
 8001772:	f107 0310 	add.w	r3, r7, #16
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fd3a 	bl	80001f0 <strlen>
 800177c:	4603      	mov	r3, r0
 800177e:	b29a      	uxth	r2, r3
 8001780:	f107 0110 	add.w	r1, r7, #16
 8001784:	f04f 33ff 	mov.w	r3, #4294967295
 8001788:	485b      	ldr	r0, [pc, #364]	; (80018f8 <main+0x2c0>)
 800178a:	f00b f86a 	bl	800c862 <HAL_UART_Transmit>
  MRT_setRTC(prev_hours,prev_min,prev_sec);
 800178e:	4b5d      	ldr	r3, [pc, #372]	; (8001904 <main+0x2cc>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	4a5d      	ldr	r2, [pc, #372]	; (8001908 <main+0x2d0>)
 8001794:	7811      	ldrb	r1, [r2, #0]
 8001796:	4a59      	ldr	r2, [pc, #356]	; (80018fc <main+0x2c4>)
 8001798:	7812      	ldrb	r2, [r2, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f006 f898 	bl	80078d0 <MRT_setRTC>
  MRT_setAlarmA(WHEN_SLEEP_TIME_HOURS, WHEN_SLEEP_TIME_MIN, WHEN_SLEEP_TIME_SEC);
 80017a0:	2215      	movs	r2, #21
 80017a2:	2100      	movs	r1, #0
 80017a4:	2000      	movs	r0, #0
 80017a6:	f006 f855 	bl	8007854 <MRT_setAlarmA>

  /*
   * For Iridium:
   * -Set the project as c++
   */
	HAL_GPIO_WritePin(Iridium_RST_GPIO_Port, Iridium_RST_Pin, SET);
 80017aa:	2201      	movs	r2, #1
 80017ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017b0:	484e      	ldr	r0, [pc, #312]	; (80018ec <main+0x2b4>)
 80017b2:	f006 ff0f 	bl	80085d4 <HAL_GPIO_WritePin>
   uint8_t lol = MRT_Static_Iridium_Setup(DEBUG_UART);
 80017b6:	4e50      	ldr	r6, [pc, #320]	; (80018f8 <main+0x2c0>)
 80017b8:	466d      	mov	r5, sp
 80017ba:	f106 0410 	add.w	r4, r6, #16
 80017be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ca:	6823      	ldr	r3, [r4, #0]
 80017cc:	602b      	str	r3, [r5, #0]
 80017ce:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80017d2:	f004 fb11 	bl	8005df8 <MRT_Static_Iridium_Setup>
 80017d6:	4603      	mov	r3, r0
 80017d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
   * For LSM6DSR
   *-Enable float formatting for sprintf (go to Project->Properties->C/C++ Build->Settings->MCU Settings->Check the box "Use float with printf")
   */
  lsm_ctx = MRT_LSM6DSR_Setup(&LSM_I2C, &DEBUG_UART);
 80017dc:	4c4b      	ldr	r4, [pc, #300]	; (800190c <main+0x2d4>)
 80017de:	463b      	mov	r3, r7
 80017e0:	4a45      	ldr	r2, [pc, #276]	; (80018f8 <main+0x2c0>)
 80017e2:	494b      	ldr	r1, [pc, #300]	; (8001910 <main+0x2d8>)
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fc4b 	bl	8001080 <MRT_LSM6DSR_Setup>
 80017ea:	463b      	mov	r3, r7
 80017ec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}

   /*
    * For LPS22HH
    *-Enable float formatting for sprintf (go to Project->Properties->C/C++ Build->Settings->MCU Settings->Check the box "Use float with printf")
    */
  lps_ctx = MRT_LPS22HH_Setup(&LPS_I2C, &DEBUG_UART);
 80017f4:	4c47      	ldr	r4, [pc, #284]	; (8001914 <main+0x2dc>)
 80017f6:	463b      	mov	r3, r7
 80017f8:	4a3f      	ldr	r2, [pc, #252]	; (80018f8 <main+0x2c0>)
 80017fa:	4945      	ldr	r1, [pc, #276]	; (8001910 <main+0x2d8>)
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fdbd 	bl	800137c <MRT_LPS22HH_Setup>
 8001802:	463b      	mov	r3, r7
 8001804:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001808:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    * For the GPS:
    * -huart6 on v4.3
    * -Set its uart to 9600
    *
    */
   GPS_init(&GPS_UART, &DEBUG_UART);
 800180c:	493a      	ldr	r1, [pc, #232]	; (80018f8 <main+0x2c0>)
 800180e:	4842      	ldr	r0, [pc, #264]	; (8001918 <main+0x2e0>)
 8001810:	f001 fe3e 	bl	8003490 <GPS_init>

   /*
    * For the xtend
    * -huart3 on v4.3
    */
   HAL_GPIO_WritePin(XTend_CTS_Pin, GPIO_PIN_10, GPIO_PIN_RESET); //TODO is it necessary?
 8001814:	2200      	movs	r2, #0
 8001816:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800181a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800181e:	f006 fed9 	bl	80085d4 <HAL_GPIO_WritePin>

   /*
    * For the SRadio
    * -SPI2 on v4.3
    */
	set_hspi(SRADIO_SPI);
 8001822:	4c3e      	ldr	r4, [pc, #248]	; (800191c <main+0x2e4>)
 8001824:	4668      	mov	r0, sp
 8001826:	f104 0310 	add.w	r3, r4, #16
 800182a:	2248      	movs	r2, #72	; 0x48
 800182c:	4619      	mov	r1, r3
 800182e:	f00f ffed 	bl	801180c <memcpy>
 8001832:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001836:	f00b fc67 	bl	800d108 <set_hspi>
	// SPI2_SX_CS_GPIO_Port
	set_NSS_pin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin);
 800183a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800183e:	4838      	ldr	r0, [pc, #224]	; (8001920 <main+0x2e8>)
 8001840:	f00b fc0a 	bl	800d058 <set_NSS_pin>
	set_BUSY_pin(SX_BUSY_GPIO_Port, SX_BUSY_Pin);
 8001844:	2108      	movs	r1, #8
 8001846:	4827      	ldr	r0, [pc, #156]	; (80018e4 <main+0x2ac>)
 8001848:	f00b fc1c 	bl	800d084 <set_BUSY_pin>
	set_NRESET_pin(SX_RST_GPIO_Port, SX_RST_Pin);
 800184c:	2104      	movs	r1, #4
 800184e:	4825      	ldr	r0, [pc, #148]	; (80018e4 <main+0x2ac>)
 8001850:	f00b fc2e 	bl	800d0b0 <set_NRESET_pin>
	set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
 8001854:	2110      	movs	r1, #16
 8001856:	4823      	ldr	r0, [pc, #140]	; (80018e4 <main+0x2ac>)
 8001858:	f00b fc40 	bl	800d0dc <set_DIO1_pin>
	Tx_setup();
 800185c:	f00b fc6c 	bl	800d138 <Tx_setup>
   *random resets. Now the problem is how do we start the FC from the beginning if we have a random
   *amount of resets?
   *Solution : We use the external IN_Button has an external reset that resets the board from
   *the beginning using the callback function (defined in MRT_Helpers.c)
   */
  MX_IWDG_Init();
 8001860:	f000 f9fe 	bl	8001c60 <MX_IWDG_Init>
//TODO DISABLE EXTERNAL BUTTON INTERRUPT ONCE ROCKET IS ARMED

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001864:	f00c f8a6 	bl	800d9b4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Memory0 */
  Memory0Handle = osThreadNew(StartMemory0, NULL, &Memory0_attributes);
 8001868:	4a2e      	ldr	r2, [pc, #184]	; (8001924 <main+0x2ec>)
 800186a:	2100      	movs	r1, #0
 800186c:	482e      	ldr	r0, [pc, #184]	; (8001928 <main+0x2f0>)
 800186e:	f00c f8eb 	bl	800da48 <osThreadNew>
 8001872:	4603      	mov	r3, r0
 8001874:	4a2d      	ldr	r2, [pc, #180]	; (800192c <main+0x2f4>)
 8001876:	6013      	str	r3, [r2, #0]

  /* creation of Ejection1 */
  Ejection1Handle = osThreadNew(StartEjection1, NULL, &Ejection1_attributes);
 8001878:	4a2d      	ldr	r2, [pc, #180]	; (8001930 <main+0x2f8>)
 800187a:	2100      	movs	r1, #0
 800187c:	482d      	ldr	r0, [pc, #180]	; (8001934 <main+0x2fc>)
 800187e:	f00c f8e3 	bl	800da48 <osThreadNew>
 8001882:	4603      	mov	r3, r0
 8001884:	4a2c      	ldr	r2, [pc, #176]	; (8001938 <main+0x300>)
 8001886:	6013      	str	r3, [r2, #0]

  /* creation of Telemetry2 */
  Telemetry2Handle = osThreadNew(StartTelemetry2, NULL, &Telemetry2_attributes);
 8001888:	4a2c      	ldr	r2, [pc, #176]	; (800193c <main+0x304>)
 800188a:	2100      	movs	r1, #0
 800188c:	482c      	ldr	r0, [pc, #176]	; (8001940 <main+0x308>)
 800188e:	f00c f8db 	bl	800da48 <osThreadNew>
 8001892:	4603      	mov	r3, r0
 8001894:	4a2b      	ldr	r2, [pc, #172]	; (8001944 <main+0x30c>)
 8001896:	6013      	str	r3, [r2, #0]

  /* creation of Sensors3 */
  Sensors3Handle = osThreadNew(StartSensors3, NULL, &Sensors3_attributes);
 8001898:	4a2b      	ldr	r2, [pc, #172]	; (8001948 <main+0x310>)
 800189a:	2100      	movs	r1, #0
 800189c:	482b      	ldr	r0, [pc, #172]	; (800194c <main+0x314>)
 800189e:	f00c f8d3 	bl	800da48 <osThreadNew>
 80018a2:	4603      	mov	r3, r0
 80018a4:	4a2a      	ldr	r2, [pc, #168]	; (8001950 <main+0x318>)
 80018a6:	6013      	str	r3, [r2, #0]

  /* creation of Propulsion4 */
  Propulsion4Handle = osThreadNew(StartPropulsion4, NULL, &Propulsion4_attributes);
 80018a8:	4a2a      	ldr	r2, [pc, #168]	; (8001954 <main+0x31c>)
 80018aa:	2100      	movs	r1, #0
 80018ac:	482a      	ldr	r0, [pc, #168]	; (8001958 <main+0x320>)
 80018ae:	f00c f8cb 	bl	800da48 <osThreadNew>
 80018b2:	4603      	mov	r3, r0
 80018b4:	4a29      	ldr	r2, [pc, #164]	; (800195c <main+0x324>)
 80018b6:	6013      	str	r3, [r2, #0]

  /* creation of Printing */
  PrintingHandle = osThreadNew(StartPrinting, NULL, &Printing_attributes);
 80018b8:	4a29      	ldr	r2, [pc, #164]	; (8001960 <main+0x328>)
 80018ba:	2100      	movs	r1, #0
 80018bc:	4829      	ldr	r0, [pc, #164]	; (8001964 <main+0x32c>)
 80018be:	f00c f8c3 	bl	800da48 <osThreadNew>
 80018c2:	4603      	mov	r3, r0
 80018c4:	4a28      	ldr	r2, [pc, #160]	; (8001968 <main+0x330>)
 80018c6:	6013      	str	r3, [r2, #0]

  /* creation of WatchDog */
  WatchDogHandle = osThreadNew(StartWatchDog, NULL, &WatchDog_attributes);
 80018c8:	4a28      	ldr	r2, [pc, #160]	; (800196c <main+0x334>)
 80018ca:	2100      	movs	r1, #0
 80018cc:	4828      	ldr	r0, [pc, #160]	; (8001970 <main+0x338>)
 80018ce:	f00c f8bb 	bl	800da48 <osThreadNew>
 80018d2:	4603      	mov	r3, r0
 80018d4:	4a27      	ldr	r2, [pc, #156]	; (8001974 <main+0x33c>)
 80018d6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80018d8:	f00c f890 	bl	800d9fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018dc:	e7fe      	b.n	80018dc <main+0x2a4>
 80018de:	bf00      	nop
 80018e0:	40020800 	.word	0x40020800
 80018e4:	40021800 	.word	0x40021800
 80018e8:	40021400 	.word	0x40021400
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40020c00 	.word	0x40020c00
 80018f4:	080169f0 	.word	0x080169f0
 80018f8:	20005e3c 	.word	0x20005e3c
 80018fc:	2000028a 	.word	0x2000028a
 8001900:	08016a04 	.word	0x08016a04
 8001904:	20000288 	.word	0x20000288
 8001908:	20000289 	.word	0x20000289
 800190c:	20005f28 	.word	0x20005f28
 8001910:	200059bc 	.word	0x200059bc
 8001914:	20005f1c 	.word	0x20005f1c
 8001918:	20005e80 	.word	0x20005e80
 800191c:	20005a10 	.word	0x20005a10
 8001920:	40020400 	.word	0x40020400
 8001924:	08018398 	.word	0x08018398
 8001928:	080023c1 	.word	0x080023c1
 800192c:	20005bec 	.word	0x20005bec
 8001930:	080183bc 	.word	0x080183bc
 8001934:	08002419 	.word	0x08002419
 8001938:	20005e34 	.word	0x20005e34
 800193c:	080183e0 	.word	0x080183e0
 8001940:	08002427 	.word	0x08002427
 8001944:	20005e38 	.word	0x20005e38
 8001948:	08018404 	.word	0x08018404
 800194c:	08002435 	.word	0x08002435
 8001950:	20005f18 	.word	0x20005f18
 8001954:	08018428 	.word	0x08018428
 8001958:	080024f1 	.word	0x080024f1
 800195c:	20005f34 	.word	0x20005f34
 8001960:	0801844c 	.word	0x0801844c
 8001964:	080024fd 	.word	0x080024fd
 8001968:	20005dc4 	.word	0x20005dc4
 800196c:	08018470 	.word	0x08018470
 8001970:	0800250d 	.word	0x0800250d
 8001974:	20005bd8 	.word	0x20005bd8

08001978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b094      	sub	sp, #80	; 0x50
 800197c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800197e:	f107 0320 	add.w	r3, r7, #32
 8001982:	2230      	movs	r2, #48	; 0x30
 8001984:	2100      	movs	r1, #0
 8001986:	4618      	mov	r0, r3
 8001988:	f00f ff68 	bl	801185c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800198c:	f107 030c 	add.w	r3, r7, #12
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800199c:	2300      	movs	r3, #0
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	4b24      	ldr	r3, [pc, #144]	; (8001a34 <SystemClock_Config+0xbc>)
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	4a23      	ldr	r2, [pc, #140]	; (8001a34 <SystemClock_Config+0xbc>)
 80019a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019aa:	6413      	str	r3, [r2, #64]	; 0x40
 80019ac:	4b21      	ldr	r3, [pc, #132]	; (8001a34 <SystemClock_Config+0xbc>)
 80019ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019b8:	2300      	movs	r3, #0
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	4b1e      	ldr	r3, [pc, #120]	; (8001a38 <SystemClock_Config+0xc0>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019c4:	4a1c      	ldr	r2, [pc, #112]	; (8001a38 <SystemClock_Config+0xc0>)
 80019c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <SystemClock_Config+0xc0>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80019d8:	2309      	movs	r3, #9
 80019da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019e2:	2301      	movs	r3, #1
 80019e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ea:	f107 0320 	add.w	r3, r7, #32
 80019ee:	4618      	mov	r0, r3
 80019f0:	f007 ff22 	bl	8009838 <HAL_RCC_OscConfig>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <SystemClock_Config+0x86>
  {
    Error_Handler();
 80019fa:	f000 fe0f 	bl	800261c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019fe:	230f      	movs	r3, #15
 8001a00:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001a02:	2301      	movs	r3, #1
 8001a04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a0e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a14:	f107 030c 	add.w	r3, r7, #12
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f008 f984 	bl	8009d28 <HAL_RCC_ClockConfig>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001a26:	f000 fdf9 	bl	800261c <Error_Handler>
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	3750      	adds	r7, #80	; 0x50
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40007000 	.word	0x40007000

08001a3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a42:	463b      	mov	r3, r7
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a4e:	4b21      	ldr	r3, [pc, #132]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a50:	4a21      	ldr	r2, [pc, #132]	; (8001ad8 <MX_ADC1_Init+0x9c>)
 8001a52:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a54:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a60:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a66:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a6c:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a74:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a7a:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a7c:	4a17      	ldr	r2, [pc, #92]	; (8001adc <MX_ADC1_Init+0xa0>)
 8001a7e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a80:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a86:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a94:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a96:	2201      	movs	r2, #1
 8001a98:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a9a:	480e      	ldr	r0, [pc, #56]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001a9c:	f006 f850 	bl	8007b40 <HAL_ADC_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001aa6:	f000 fdb9 	bl	800261c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001aaa:	2306      	movs	r3, #6
 8001aac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ab6:	463b      	mov	r3, r7
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4806      	ldr	r0, [pc, #24]	; (8001ad4 <MX_ADC1_Init+0x98>)
 8001abc:	f006 f884 	bl	8007bc8 <HAL_ADC_ConfigChannel>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001ac6:	f000 fda9 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001aca:	bf00      	nop
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20005bf4 	.word	0x20005bf4
 8001ad8:	40012000 	.word	0x40012000
 8001adc:	0f000001 	.word	0x0f000001

08001ae0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ae4:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001ae6:	4a1c      	ldr	r2, [pc, #112]	; (8001b58 <MX_I2C1_Init+0x78>)
 8001ae8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001aea:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001aec:	4a1b      	ldr	r2, [pc, #108]	; (8001b5c <MX_I2C1_Init+0x7c>)
 8001aee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001af0:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001af6:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001afc:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001afe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b04:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b0a:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b10:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b16:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b1c:	480d      	ldr	r0, [pc, #52]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001b1e:	f006 fd8b 	bl	8008638 <HAL_I2C_Init>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b28:	f000 fd78 	bl	800261c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4809      	ldr	r0, [pc, #36]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001b30:	f007 fd77 	bl	8009622 <HAL_I2CEx_ConfigAnalogFilter>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001b3a:	f000 fd6f 	bl	800261c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4804      	ldr	r0, [pc, #16]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001b42:	f007 fdaa 	bl	800969a <HAL_I2CEx_ConfigDigitalFilter>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001b4c:	f000 fd66 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20005b24 	.word	0x20005b24
 8001b58:	40005400 	.word	0x40005400
 8001b5c:	000186a0 	.word	0x000186a0

08001b60 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b64:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <MX_I2C2_Init+0x74>)
 8001b66:	4a1c      	ldr	r2, [pc, #112]	; (8001bd8 <MX_I2C2_Init+0x78>)
 8001b68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001b6a:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <MX_I2C2_Init+0x74>)
 8001b6c:	4a1b      	ldr	r2, [pc, #108]	; (8001bdc <MX_I2C2_Init+0x7c>)
 8001b6e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b70:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <MX_I2C2_Init+0x74>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b76:	4b17      	ldr	r3, [pc, #92]	; (8001bd4 <MX_I2C2_Init+0x74>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b7c:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <MX_I2C2_Init+0x74>)
 8001b7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b82:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b84:	4b13      	ldr	r3, [pc, #76]	; (8001bd4 <MX_I2C2_Init+0x74>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b8a:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <MX_I2C2_Init+0x74>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b90:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <MX_I2C2_Init+0x74>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b96:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <MX_I2C2_Init+0x74>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b9c:	480d      	ldr	r0, [pc, #52]	; (8001bd4 <MX_I2C2_Init+0x74>)
 8001b9e:	f006 fd4b 	bl	8008638 <HAL_I2C_Init>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001ba8:	f000 fd38 	bl	800261c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bac:	2100      	movs	r1, #0
 8001bae:	4809      	ldr	r0, [pc, #36]	; (8001bd4 <MX_I2C2_Init+0x74>)
 8001bb0:	f007 fd37 	bl	8009622 <HAL_I2CEx_ConfigAnalogFilter>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001bba:	f000 fd2f 	bl	800261c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4804      	ldr	r0, [pc, #16]	; (8001bd4 <MX_I2C2_Init+0x74>)
 8001bc2:	f007 fd6a 	bl	800969a <HAL_I2CEx_ConfigDigitalFilter>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001bcc:	f000 fd26 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20005b84 	.word	0x20005b84
 8001bd8:	40005800 	.word	0x40005800
 8001bdc:	000186a0 	.word	0x000186a0

08001be0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001be4:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <MX_I2C3_Init+0x74>)
 8001be6:	4a1c      	ldr	r2, [pc, #112]	; (8001c58 <MX_I2C3_Init+0x78>)
 8001be8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001bea:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <MX_I2C3_Init+0x74>)
 8001bec:	4a1b      	ldr	r2, [pc, #108]	; (8001c5c <MX_I2C3_Init+0x7c>)
 8001bee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bf0:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <MX_I2C3_Init+0x74>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001bf6:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <MX_I2C3_Init+0x74>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bfc:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <MX_I2C3_Init+0x74>)
 8001bfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c02:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c04:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <MX_I2C3_Init+0x74>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001c0a:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <MX_I2C3_Init+0x74>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c10:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <MX_I2C3_Init+0x74>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c16:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <MX_I2C3_Init+0x74>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001c1c:	480d      	ldr	r0, [pc, #52]	; (8001c54 <MX_I2C3_Init+0x74>)
 8001c1e:	f006 fd0b 	bl	8008638 <HAL_I2C_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001c28:	f000 fcf8 	bl	800261c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4809      	ldr	r0, [pc, #36]	; (8001c54 <MX_I2C3_Init+0x74>)
 8001c30:	f007 fcf7 	bl	8009622 <HAL_I2CEx_ConfigAnalogFilter>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001c3a:	f000 fcef 	bl	800261c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4804      	ldr	r0, [pc, #16]	; (8001c54 <MX_I2C3_Init+0x74>)
 8001c42:	f007 fd2a 	bl	800969a <HAL_I2CEx_ConfigDigitalFilter>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001c4c:	f000 fce6 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	200059bc 	.word	0x200059bc
 8001c58:	40005c00 	.word	0x40005c00
 8001c5c:	000186a0 	.word	0x000186a0

08001c60 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <MX_IWDG_Init+0x2c>)
 8001c66:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <MX_IWDG_Init+0x30>)
 8001c68:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8001c6a:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <MX_IWDG_Init+0x2c>)
 8001c6c:	2204      	movs	r2, #4
 8001c6e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2499;
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <MX_IWDG_Init+0x2c>)
 8001c72:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001c76:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001c78:	4804      	ldr	r0, [pc, #16]	; (8001c8c <MX_IWDG_Init+0x2c>)
 8001c7a:	f007 fd4d 	bl	8009718 <HAL_IWDG_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001c84:	f000 fcca 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001c88:	bf00      	nop
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20005b78 	.word	0x20005b78
 8001c90:	40003000 	.word	0x40003000

08001c94 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b090      	sub	sp, #64	; 0x40
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001c9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	605a      	str	r2, [r3, #4]
 8001ca4:	609a      	str	r2, [r3, #8]
 8001ca6:	60da      	str	r2, [r3, #12]
 8001ca8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001caa:	2300      	movs	r3, #0
 8001cac:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001cae:	463b      	mov	r3, r7
 8001cb0:	2228      	movs	r2, #40	; 0x28
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f00f fdd1 	bl	801185c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001cba:	4b3a      	ldr	r3, [pc, #232]	; (8001da4 <MX_RTC_Init+0x110>)
 8001cbc:	4a3a      	ldr	r2, [pc, #232]	; (8001da8 <MX_RTC_Init+0x114>)
 8001cbe:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001cc0:	4b38      	ldr	r3, [pc, #224]	; (8001da4 <MX_RTC_Init+0x110>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001cc6:	4b37      	ldr	r3, [pc, #220]	; (8001da4 <MX_RTC_Init+0x110>)
 8001cc8:	227f      	movs	r2, #127	; 0x7f
 8001cca:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001ccc:	4b35      	ldr	r3, [pc, #212]	; (8001da4 <MX_RTC_Init+0x110>)
 8001cce:	22ff      	movs	r2, #255	; 0xff
 8001cd0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001cd2:	4b34      	ldr	r3, [pc, #208]	; (8001da4 <MX_RTC_Init+0x110>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001cd8:	4b32      	ldr	r3, [pc, #200]	; (8001da4 <MX_RTC_Init+0x110>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001cde:	4b31      	ldr	r3, [pc, #196]	; (8001da4 <MX_RTC_Init+0x110>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ce4:	482f      	ldr	r0, [pc, #188]	; (8001da4 <MX_RTC_Init+0x110>)
 8001ce6:	f008 fc09 	bl	800a4fc <HAL_RTC_Init>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001cf0:	f000 fc94 	bl	800261c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d12:	2201      	movs	r2, #1
 8001d14:	4619      	mov	r1, r3
 8001d16:	4823      	ldr	r0, [pc, #140]	; (8001da4 <MX_RTC_Init+0x110>)
 8001d18:	f008 fc81 	bl	800a61e <HAL_RTC_SetTime>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001d22:	f000 fc7b 	bl	800261c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001d26:	2301      	movs	r3, #1
 8001d28:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001d32:	2301      	movs	r3, #1
 8001d34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001d3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d42:	2201      	movs	r2, #1
 8001d44:	4619      	mov	r1, r3
 8001d46:	4817      	ldr	r0, [pc, #92]	; (8001da4 <MX_RTC_Init+0x110>)
 8001d48:	f008 fd84 	bl	800a854 <HAL_RTC_SetDate>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001d52:	f000 fc63 	bl	800261c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001d80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d86:	463b      	mov	r3, r7
 8001d88:	2201      	movs	r2, #1
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4805      	ldr	r0, [pc, #20]	; (8001da4 <MX_RTC_Init+0x110>)
 8001d8e:	f008 fe57 	bl	800aa40 <HAL_RTC_SetAlarm_IT>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001d98:	f000 fc40 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001d9c:	bf00      	nop
 8001d9e:	3740      	adds	r7, #64	; 0x40
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20005da0 	.word	0x20005da0
 8001da8:	40002800 	.word	0x40002800

08001dac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001db0:	4b17      	ldr	r3, [pc, #92]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001db2:	4a18      	ldr	r2, [pc, #96]	; (8001e14 <MX_SPI2_Init+0x68>)
 8001db4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001db6:	4b16      	ldr	r3, [pc, #88]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001db8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001dbc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001dbe:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dc4:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dca:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dd0:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ddc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dde:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001de4:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dea:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001df0:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001df6:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001df8:	220a      	movs	r2, #10
 8001dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001dfc:	4804      	ldr	r0, [pc, #16]	; (8001e10 <MX_SPI2_Init+0x64>)
 8001dfe:	f009 f94f 	bl	800b0a0 <HAL_SPI_Init>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001e08:	f000 fc08 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20005a10 	.word	0x20005a10
 8001e14:	40003800 	.word	0x40003800

08001e18 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001e1c:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e1e:	4a18      	ldr	r2, [pc, #96]	; (8001e80 <MX_SPI4_Init+0x68>)
 8001e20:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001e22:	4b16      	ldr	r3, [pc, #88]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e28:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001e2a:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e30:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e36:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001e42:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e48:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e4a:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e50:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e5c:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e64:	220a      	movs	r2, #10
 8001e66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001e68:	4804      	ldr	r0, [pc, #16]	; (8001e7c <MX_SPI4_Init+0x64>)
 8001e6a:	f009 f919 	bl	800b0a0 <HAL_SPI_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001e74:	f000 fbd2 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20005d48 	.word	0x20005d48
 8001e80:	40013400 	.word	0x40013400

08001e84 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001e88:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001e8a:	4a18      	ldr	r2, [pc, #96]	; (8001eec <MX_SPI5_Init+0x68>)
 8001e8c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001e8e:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001e90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e94:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001e96:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ea2:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eb4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ec2:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ec8:	4b07      	ldr	r3, [pc, #28]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001ece:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001ed0:	220a      	movs	r2, #10
 8001ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001ed4:	4804      	ldr	r0, [pc, #16]	; (8001ee8 <MX_SPI5_Init+0x64>)
 8001ed6:	f009 f8e3 	bl	800b0a0 <HAL_SPI_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001ee0:	f000 fb9c 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20005a6c 	.word	0x20005a6c
 8001eec:	40015000 	.word	0x40015000

08001ef0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	; 0x28
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef6:	f107 0320 	add.w	r3, r7, #32
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	605a      	str	r2, [r3, #4]
 8001f08:	609a      	str	r2, [r3, #8]
 8001f0a:	60da      	str	r2, [r3, #12]
 8001f0c:	611a      	str	r2, [r3, #16]
 8001f0e:	615a      	str	r2, [r3, #20]
 8001f10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f12:	4b22      	ldr	r3, [pc, #136]	; (8001f9c <MX_TIM2_Init+0xac>)
 8001f14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f18:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f1a:	4b20      	ldr	r3, [pc, #128]	; (8001f9c <MX_TIM2_Init+0xac>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f20:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <MX_TIM2_Init+0xac>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001f26:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <MX_TIM2_Init+0xac>)
 8001f28:	f04f 32ff 	mov.w	r2, #4294967295
 8001f2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f2e:	4b1b      	ldr	r3, [pc, #108]	; (8001f9c <MX_TIM2_Init+0xac>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f34:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <MX_TIM2_Init+0xac>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f3a:	4818      	ldr	r0, [pc, #96]	; (8001f9c <MX_TIM2_Init+0xac>)
 8001f3c:	f009 ff22 	bl	800bd84 <HAL_TIM_PWM_Init>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001f46:	f000 fb69 	bl	800261c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f52:	f107 0320 	add.w	r3, r7, #32
 8001f56:	4619      	mov	r1, r3
 8001f58:	4810      	ldr	r0, [pc, #64]	; (8001f9c <MX_TIM2_Init+0xac>)
 8001f5a:	f00a fba5 	bl	800c6a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001f64:	f000 fb5a 	bl	800261c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f68:	2360      	movs	r3, #96	; 0x60
 8001f6a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	2208      	movs	r2, #8
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4807      	ldr	r0, [pc, #28]	; (8001f9c <MX_TIM2_Init+0xac>)
 8001f80:	f00a f858 	bl	800c034 <HAL_TIM_PWM_ConfigChannel>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001f8a:	f000 fb47 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f8e:	4803      	ldr	r0, [pc, #12]	; (8001f9c <MX_TIM2_Init+0xac>)
 8001f90:	f000 fd9a 	bl	8002ac8 <HAL_TIM_MspPostInit>

}
 8001f94:	bf00      	nop
 8001f96:	3728      	adds	r7, #40	; 0x28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20005ed0 	.word	0x20005ed0

08001fa0 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001fa4:	4b11      	ldr	r3, [pc, #68]	; (8001fec <MX_UART8_Init+0x4c>)
 8001fa6:	4a12      	ldr	r2, [pc, #72]	; (8001ff0 <MX_UART8_Init+0x50>)
 8001fa8:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001faa:	4b10      	ldr	r3, [pc, #64]	; (8001fec <MX_UART8_Init+0x4c>)
 8001fac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fb0:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001fb2:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <MX_UART8_Init+0x4c>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001fb8:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <MX_UART8_Init+0x4c>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001fbe:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <MX_UART8_Init+0x4c>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001fc4:	4b09      	ldr	r3, [pc, #36]	; (8001fec <MX_UART8_Init+0x4c>)
 8001fc6:	220c      	movs	r2, #12
 8001fc8:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fca:	4b08      	ldr	r3, [pc, #32]	; (8001fec <MX_UART8_Init+0x4c>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd0:	4b06      	ldr	r3, [pc, #24]	; (8001fec <MX_UART8_Init+0x4c>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001fd6:	4805      	ldr	r0, [pc, #20]	; (8001fec <MX_UART8_Init+0x4c>)
 8001fd8:	f00a fbf6 	bl	800c7c8 <HAL_UART_Init>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8001fe2:	f000 fb1b 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20005e3c 	.word	0x20005e3c
 8001ff0:	40007c00 	.word	0x40007c00

08001ff4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ff8:	4b11      	ldr	r3, [pc, #68]	; (8002040 <MX_USART3_UART_Init+0x4c>)
 8001ffa:	4a12      	ldr	r2, [pc, #72]	; (8002044 <MX_USART3_UART_Init+0x50>)
 8001ffc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001ffe:	4b10      	ldr	r3, [pc, #64]	; (8002040 <MX_USART3_UART_Init+0x4c>)
 8002000:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002004:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002006:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <MX_USART3_UART_Init+0x4c>)
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800200c:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <MX_USART3_UART_Init+0x4c>)
 800200e:	2200      	movs	r2, #0
 8002010:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002012:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <MX_USART3_UART_Init+0x4c>)
 8002014:	2200      	movs	r2, #0
 8002016:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002018:	4b09      	ldr	r3, [pc, #36]	; (8002040 <MX_USART3_UART_Init+0x4c>)
 800201a:	220c      	movs	r2, #12
 800201c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800201e:	4b08      	ldr	r3, [pc, #32]	; (8002040 <MX_USART3_UART_Init+0x4c>)
 8002020:	2200      	movs	r2, #0
 8002022:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002024:	4b06      	ldr	r3, [pc, #24]	; (8002040 <MX_USART3_UART_Init+0x4c>)
 8002026:	2200      	movs	r2, #0
 8002028:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800202a:	4805      	ldr	r0, [pc, #20]	; (8002040 <MX_USART3_UART_Init+0x4c>)
 800202c:	f00a fbcc 	bl	800c7c8 <HAL_UART_Init>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002036:	f000 faf1 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20005ac8 	.word	0x20005ac8
 8002044:	40004800 	.word	0x40004800

08002048 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <MX_USART6_UART_Init+0x4c>)
 800204e:	4a12      	ldr	r2, [pc, #72]	; (8002098 <MX_USART6_UART_Init+0x50>)
 8002050:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002052:	4b10      	ldr	r3, [pc, #64]	; (8002094 <MX_USART6_UART_Init+0x4c>)
 8002054:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002058:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800205a:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <MX_USART6_UART_Init+0x4c>)
 800205c:	2200      	movs	r2, #0
 800205e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <MX_USART6_UART_Init+0x4c>)
 8002062:	2200      	movs	r2, #0
 8002064:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002066:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <MX_USART6_UART_Init+0x4c>)
 8002068:	2200      	movs	r2, #0
 800206a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800206c:	4b09      	ldr	r3, [pc, #36]	; (8002094 <MX_USART6_UART_Init+0x4c>)
 800206e:	220c      	movs	r2, #12
 8002070:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002072:	4b08      	ldr	r3, [pc, #32]	; (8002094 <MX_USART6_UART_Init+0x4c>)
 8002074:	2200      	movs	r2, #0
 8002076:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002078:	4b06      	ldr	r3, [pc, #24]	; (8002094 <MX_USART6_UART_Init+0x4c>)
 800207a:	2200      	movs	r2, #0
 800207c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800207e:	4805      	ldr	r0, [pc, #20]	; (8002094 <MX_USART6_UART_Init+0x4c>)
 8002080:	f00a fba2 	bl	800c7c8 <HAL_UART_Init>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800208a:	f000 fac7 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20005e80 	.word	0x20005e80
 8002098:	40011400 	.word	0x40011400

0800209c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08e      	sub	sp, #56	; 0x38
 80020a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	605a      	str	r2, [r3, #4]
 80020ac:	609a      	str	r2, [r3, #8]
 80020ae:	60da      	str	r2, [r3, #12]
 80020b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	623b      	str	r3, [r7, #32]
 80020b6:	4bb5      	ldr	r3, [pc, #724]	; (800238c <MX_GPIO_Init+0x2f0>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4ab4      	ldr	r2, [pc, #720]	; (800238c <MX_GPIO_Init+0x2f0>)
 80020bc:	f043 0310 	orr.w	r3, r3, #16
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4bb2      	ldr	r3, [pc, #712]	; (800238c <MX_GPIO_Init+0x2f0>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0310 	and.w	r3, r3, #16
 80020ca:	623b      	str	r3, [r7, #32]
 80020cc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	61fb      	str	r3, [r7, #28]
 80020d2:	4bae      	ldr	r3, [pc, #696]	; (800238c <MX_GPIO_Init+0x2f0>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	4aad      	ldr	r2, [pc, #692]	; (800238c <MX_GPIO_Init+0x2f0>)
 80020d8:	f043 0304 	orr.w	r3, r3, #4
 80020dc:	6313      	str	r3, [r2, #48]	; 0x30
 80020de:	4bab      	ldr	r3, [pc, #684]	; (800238c <MX_GPIO_Init+0x2f0>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	61fb      	str	r3, [r7, #28]
 80020e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	61bb      	str	r3, [r7, #24]
 80020ee:	4ba7      	ldr	r3, [pc, #668]	; (800238c <MX_GPIO_Init+0x2f0>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4aa6      	ldr	r2, [pc, #664]	; (800238c <MX_GPIO_Init+0x2f0>)
 80020f4:	f043 0320 	orr.w	r3, r3, #32
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
 80020fa:	4ba4      	ldr	r3, [pc, #656]	; (800238c <MX_GPIO_Init+0x2f0>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f003 0320 	and.w	r3, r3, #32
 8002102:	61bb      	str	r3, [r7, #24]
 8002104:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	4ba0      	ldr	r3, [pc, #640]	; (800238c <MX_GPIO_Init+0x2f0>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	4a9f      	ldr	r2, [pc, #636]	; (800238c <MX_GPIO_Init+0x2f0>)
 8002110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002114:	6313      	str	r3, [r2, #48]	; 0x30
 8002116:	4b9d      	ldr	r3, [pc, #628]	; (800238c <MX_GPIO_Init+0x2f0>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	613b      	str	r3, [r7, #16]
 8002126:	4b99      	ldr	r3, [pc, #612]	; (800238c <MX_GPIO_Init+0x2f0>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	4a98      	ldr	r2, [pc, #608]	; (800238c <MX_GPIO_Init+0x2f0>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	6313      	str	r3, [r2, #48]	; 0x30
 8002132:	4b96      	ldr	r3, [pc, #600]	; (800238c <MX_GPIO_Init+0x2f0>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	4b92      	ldr	r3, [pc, #584]	; (800238c <MX_GPIO_Init+0x2f0>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	4a91      	ldr	r2, [pc, #580]	; (800238c <MX_GPIO_Init+0x2f0>)
 8002148:	f043 0302 	orr.w	r3, r3, #2
 800214c:	6313      	str	r3, [r2, #48]	; 0x30
 800214e:	4b8f      	ldr	r3, [pc, #572]	; (800238c <MX_GPIO_Init+0x2f0>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	4b8b      	ldr	r3, [pc, #556]	; (800238c <MX_GPIO_Init+0x2f0>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	4a8a      	ldr	r2, [pc, #552]	; (800238c <MX_GPIO_Init+0x2f0>)
 8002164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002168:	6313      	str	r3, [r2, #48]	; 0x30
 800216a:	4b88      	ldr	r3, [pc, #544]	; (800238c <MX_GPIO_Init+0x2f0>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	607b      	str	r3, [r7, #4]
 800217a:	4b84      	ldr	r3, [pc, #528]	; (800238c <MX_GPIO_Init+0x2f0>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	4a83      	ldr	r2, [pc, #524]	; (800238c <MX_GPIO_Init+0x2f0>)
 8002180:	f043 0308 	orr.w	r3, r3, #8
 8002184:	6313      	str	r3, [r2, #48]	; 0x30
 8002186:	4b81      	ldr	r3, [pc, #516]	; (800238c <MX_GPIO_Init+0x2f0>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	607b      	str	r3, [r7, #4]
 8002190:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 8002192:	2200      	movs	r2, #0
 8002194:	f248 4184 	movw	r1, #33924	; 0x8484
 8002198:	487d      	ldr	r0, [pc, #500]	; (8002390 <MX_GPIO_Init+0x2f4>)
 800219a:	f006 fa1b 	bl	80085d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI5_SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 800219e:	2200      	movs	r2, #0
 80021a0:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 80021a4:	487b      	ldr	r0, [pc, #492]	; (8002394 <MX_GPIO_Init+0x2f8>)
 80021a6:	f006 fa15 	bl	80085d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 80021aa:	2200      	movs	r2, #0
 80021ac:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80021b0:	4879      	ldr	r0, [pc, #484]	; (8002398 <MX_GPIO_Init+0x2fc>)
 80021b2:	f006 fa0f 	bl	80085d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 80021b6:	2200      	movs	r2, #0
 80021b8:	2108      	movs	r1, #8
 80021ba:	4878      	ldr	r0, [pc, #480]	; (800239c <MX_GPIO_Init+0x300>)
 80021bc:	f006 fa0a 	bl	80085d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 80021c0:	2200      	movs	r2, #0
 80021c2:	f645 213e 	movw	r1, #23102	; 0x5a3e
 80021c6:	4876      	ldr	r0, [pc, #472]	; (80023a0 <MX_GPIO_Init+0x304>)
 80021c8:	f006 fa04 	bl	80085d4 <HAL_GPIO_WritePin>
                          |SX_RF_SW_Pin|OUT_VR_PWR_Pin|OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin
                          |OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin, GPIO_PIN_RESET);
 80021cc:	2200      	movs	r2, #0
 80021ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021d2:	4874      	ldr	r0, [pc, #464]	; (80023a4 <MX_GPIO_Init+0x308>)
 80021d4:	f006 f9fe 	bl	80085d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 80021d8:	2200      	movs	r2, #0
 80021da:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 80021de:	4872      	ldr	r0, [pc, #456]	; (80023a8 <MX_GPIO_Init+0x30c>)
 80021e0:	f006 f9f8 	bl	80085d4 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_12V_Buck_Pin OUT_Prop_ActuatedVent_Gate_Pin SPI4_CS_Thermocouple_Pin Iridium_RST_Pin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 80021e4:	f248 4384 	movw	r3, #33924	; 0x8484
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ea:	2301      	movs	r3, #1
 80021ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f2:	2300      	movs	r3, #0
 80021f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021fa:	4619      	mov	r1, r3
 80021fc:	4864      	ldr	r0, [pc, #400]	; (8002390 <MX_GPIO_Init+0x2f4>)
 80021fe:	f006 f825 	bl	800824c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SD_CS_Pin OUT_PyroValve_Gate_2_Pin OUT_PyroValve_Gate_1_Pin */
  GPIO_InitStruct.Pin = SPI5_SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 8002202:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8002206:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002208:	2301      	movs	r3, #1
 800220a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002210:	2300      	movs	r3, #0
 8002212:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002218:	4619      	mov	r1, r3
 800221a:	485e      	ldr	r0, [pc, #376]	; (8002394 <MX_GPIO_Init+0x2f8>)
 800221c:	f006 f816 	bl	800824c <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Button_Pin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 8002220:	2301      	movs	r3, #1
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002224:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002228:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 800222e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002232:	4619      	mov	r1, r3
 8002234:	4858      	ldr	r0, [pc, #352]	; (8002398 <MX_GPIO_Init+0x2fc>)
 8002236:	f006 f809 	bl	800824c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_LED1_Pin OUT_LED2_Pin OUT_LED3_Pin SX_AMPLIFIER_Pin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 800223a:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800223e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002240:	2301      	movs	r3, #1
 8002242:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002248:	2300      	movs	r3, #0
 800224a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800224c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002250:	4619      	mov	r1, r3
 8002252:	4851      	ldr	r0, [pc, #324]	; (8002398 <MX_GPIO_Init+0x2fc>)
 8002254:	f005 fffa 	bl	800824c <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_LEDF_Pin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 8002258:	2308      	movs	r3, #8
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800225c:	2301      	movs	r3, #1
 800225e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002264:	2300      	movs	r3, #0
 8002266:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 8002268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800226c:	4619      	mov	r1, r3
 800226e:	484b      	ldr	r0, [pc, #300]	; (800239c <MX_GPIO_Init+0x300>)
 8002270:	f005 ffec 	bl	800824c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_Prop_PyroTurboValve_LimitSwitch_Pin IN_SD_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 8002274:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8002278:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800227a:	2300      	movs	r3, #0
 800227c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	2300      	movs	r3, #0
 8002280:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002286:	4619      	mov	r1, r3
 8002288:	4843      	ldr	r0, [pc, #268]	; (8002398 <MX_GPIO_Init+0x2fc>)
 800228a:	f005 ffdf 	bl	800824c <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Prop_ActuatedVent_Feedback_Pin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 800228e:	2302      	movs	r3, #2
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002292:	2300      	movs	r3, #0
 8002294:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 800229a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800229e:	4619      	mov	r1, r3
 80022a0:	4840      	ldr	r0, [pc, #256]	; (80023a4 <MX_GPIO_Init+0x308>)
 80022a2:	f005 ffd3 	bl	800824c <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_PyroValve_Cont_2_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 80022a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ac:	2300      	movs	r3, #0
 80022ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 80022b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022b8:	4619      	mov	r1, r3
 80022ba:	4836      	ldr	r0, [pc, #216]	; (8002394 <MX_GPIO_Init+0x2f8>)
 80022bc:	f005 ffc6 	bl	800824c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_PyroValve_Cont_1_Pin IN_EJ_Main_Cont_Pin IN_EJ_Drogue_Cont_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|IN_EJ_Main_Cont_Pin|IN_EJ_Drogue_Cont_Pin;
 80022c0:	f242 4301 	movw	r3, #9217	; 0x2401
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c6:	2300      	movs	r3, #0
 80022c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d2:	4619      	mov	r1, r3
 80022d4:	4832      	ldr	r0, [pc, #200]	; (80023a0 <MX_GPIO_Init+0x304>)
 80022d6:	f005 ffb9 	bl	800824c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_PyroValve_Arming_Pin SX_RST_Pin SX_BUSY_Pin SX_DIO_Pin
                           SX_RF_SW_Pin OUT_VR_PWR_Pin OUT_EJ_Main_Gate_Pin OUT_EJ_Drogue_Gate_Pin
                           OUT_EJ_Arming_Pin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 80022da:	f645 233e 	movw	r3, #23102	; 0x5a3e
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
                          |SX_RF_SW_Pin|OUT_VR_PWR_Pin|OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin
                          |OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e0:	2301      	movs	r3, #1
 80022e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e8:	2300      	movs	r3, #0
 80022ea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f0:	4619      	mov	r1, r3
 80022f2:	482b      	ldr	r0, [pc, #172]	; (80023a0 <MX_GPIO_Init+0x304>)
 80022f4:	f005 ffaa 	bl	800824c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAYLOAD_I2C_EN_Pin IN_XTend_Continuity_Pin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 80022f8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022fe:	2300      	movs	r3, #0
 8002300:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800230a:	4619      	mov	r1, r3
 800230c:	4820      	ldr	r0, [pc, #128]	; (8002390 <MX_GPIO_Init+0x2f4>)
 800230e:	f005 ff9d 	bl	800824c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SX_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin;
 8002312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002318:	2301      	movs	r3, #1
 800231a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002320:	2300      	movs	r3, #0
 8002322:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_SX_CS_GPIO_Port, &GPIO_InitStruct);
 8002324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002328:	4619      	mov	r1, r3
 800232a:	481e      	ldr	r0, [pc, #120]	; (80023a4 <MX_GPIO_Init+0x308>)
 800232c:	f005 ff8e 	bl	800824c <HAL_GPIO_Init>

  /*Configure GPIO pins : XTend_CTS_Pin XTend_RTS_Pin XTend_SLEEP_Pin XTend_RX_LED_Pin
                           XTend_TX_PWR_Pin OUT_FLASH_IO3_Pin OUT_FLASH_WP_Pin OUT_FLASH_CS_Pin
                           OUT_VR_REC_Pin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8002330:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002336:	2301      	movs	r3, #1
 8002338:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233e:	2300      	movs	r3, #0
 8002340:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002346:	4619      	mov	r1, r3
 8002348:	4817      	ldr	r0, [pc, #92]	; (80023a8 <MX_GPIO_Init+0x30c>)
 800234a:	f005 ff7f 	bl	800824c <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BANDPASS_FILTER_Pin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 800234e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002354:	2300      	movs	r3, #0
 8002356:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 800235c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002360:	4619      	mov	r1, r3
 8002362:	4811      	ldr	r0, [pc, #68]	; (80023a8 <MX_GPIO_Init+0x30c>)
 8002364:	f005 ff72 	bl	800824c <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_LPS22HH_DRDY_Pin EXTI_ISM330DCL_INT2_Pin EXTI_LSM6DSR_INT1_Pin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 8002368:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800236e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002372:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002374:	2300      	movs	r3, #0
 8002376:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002378:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800237c:	4619      	mov	r1, r3
 800237e:	4808      	ldr	r0, [pc, #32]	; (80023a0 <MX_GPIO_Init+0x304>)
 8002380:	f005 ff64 	bl	800824c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002384:	2200      	movs	r2, #0
 8002386:	2105      	movs	r1, #5
 8002388:	2006      	movs	r0, #6
 800238a:	e00f      	b.n	80023ac <MX_GPIO_Init+0x310>
 800238c:	40023800 	.word	0x40023800
 8002390:	40021000 	.word	0x40021000
 8002394:	40021400 	.word	0x40021400
 8002398:	40020800 	.word	0x40020800
 800239c:	40020000 	.word	0x40020000
 80023a0:	40021800 	.word	0x40021800
 80023a4:	40020400 	.word	0x40020400
 80023a8:	40020c00 	.word	0x40020c00
 80023ac:	f005 ff16 	bl	80081dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80023b0:	2006      	movs	r0, #6
 80023b2:	f005 ff2f 	bl	8008214 <HAL_NVIC_EnableIRQ>

}
 80023b6:	bf00      	nop
 80023b8:	3738      	adds	r7, #56	; 0x38
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop

080023c0 <StartMemory0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMemory0 */
void StartMemory0(void *argument)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	//osThreadExit();

	//Add thread id to the list
	threadID[0]=osThreadGetId();
 80023c8:	f00b fbd0 	bl	800db6c <osThreadGetId>
 80023cc:	4603      	mov	r3, r0
 80023ce:	4a0e      	ldr	r2, [pc, #56]	; (8002408 <StartMemory0+0x48>)
 80023d0:	6013      	str	r3, [r2, #0]
		  //Write data to sd and flash


		  //Check if it's sleep time
		//if (flagA==1 && wu_flag !=1){
		  if (flagA==1){
 80023d2:	4b0e      	ldr	r3, [pc, #56]	; (800240c <StartMemory0+0x4c>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d111      	bne.n	80023fe <StartMemory0+0x3e>
			//Update iwdg_flag
			iwdg_flag = 1;
 80023da:	4b0d      	ldr	r3, [pc, #52]	; (8002410 <StartMemory0+0x50>)
 80023dc:	2201      	movs	r2, #1
 80023de:	701a      	strb	r2, [r3, #0]
			flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 80023e0:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <StartMemory0+0x50>)
 80023e2:	781a      	ldrb	r2, [r3, #0]
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <StartMemory0+0x54>)
 80023e6:	709a      	strb	r2, [r3, #2]
			W25qxx_EraseSector(1);
 80023e8:	2001      	movs	r0, #1
 80023ea:	f001 fd49 	bl	8003e80 <W25qxx_EraseSector>
			W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80023ee:	2303      	movs	r3, #3
 80023f0:	2200      	movs	r2, #0
 80023f2:	2101      	movs	r1, #1
 80023f4:	4807      	ldr	r0, [pc, #28]	; (8002414 <StartMemory0+0x54>)
 80023f6:	f001 fe8d 	bl	8004114 <W25qxx_WriteSector>

			//Reset to deactivate IWDG
			NVIC_SystemReset();
 80023fa:	f7ff f907 	bl	800160c <__NVIC_SystemReset>
		}

		  //osDelay(1000/DATA_FREQ);
		osDelay(3000);
 80023fe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002402:	f00b fbc4 	bl	800db8e <osDelay>
		  if (flagA==1){
 8002406:	e7e4      	b.n	80023d2 <StartMemory0+0x12>
 8002408:	20005b10 	.word	0x20005b10
 800240c:	200004bc 	.word	0x200004bc
 8002410:	20000287 	.word	0x20000287
 8002414:	20005b0c 	.word	0x20005b0c

08002418 <StartEjection1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEjection1 */
void StartEjection1(void *argument)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b0c2      	sub	sp, #264	; 0x108
 800241c:	af00      	add	r7, sp, #0
 800241e:	1d3b      	adds	r3, r7, #4
 8002420:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartEjection1 */

	osThreadExit();
 8002422:	f00b fbae 	bl	800db82 <osThreadExit>

08002426 <StartTelemetry2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry2 */
void StartTelemetry2(void *argument)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTelemetry2 */

	osThreadExit();
 800242e:	f00b fba8 	bl	800db82 <osThreadExit>
	...

08002434 <StartSensors3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensors3 */
void StartSensors3(void *argument)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensors3 */

	//osThreadExit();

	//Add thread id to the list
	threadID[3]=osThreadGetId();
 800243c:	f00b fb96 	bl	800db6c <osThreadGetId>
 8002440:	4603      	mov	r3, r0
 8002442:	4a1e      	ldr	r2, [pc, #120]	; (80024bc <StartSensors3+0x88>)
 8002444:	60d3      	str	r3, [r2, #12]

  for(;;)
  {

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 8002446:	2201      	movs	r2, #1
 8002448:	2102      	movs	r1, #2
 800244a:	481d      	ldr	r0, [pc, #116]	; (80024c0 <StartSensors3+0x8c>)
 800244c:	f006 f8c2 	bl	80085d4 <HAL_GPIO_WritePin>


	  //GPS
	  GPS_Poll(&latitude, &longitude, &time);
 8002450:	4a1c      	ldr	r2, [pc, #112]	; (80024c4 <StartSensors3+0x90>)
 8002452:	491d      	ldr	r1, [pc, #116]	; (80024c8 <StartSensors3+0x94>)
 8002454:	481d      	ldr	r0, [pc, #116]	; (80024cc <StartSensors3+0x98>)
 8002456:	f000 fdb9 	bl	8002fcc <GPS_Poll>

  	  //LSM6DSR
  	  MRT_LSM6DSR_getAcceleration(lsm_ctx,acceleration_mg);
 800245a:	4a1d      	ldr	r2, [pc, #116]	; (80024d0 <StartSensors3+0x9c>)
 800245c:	4b1d      	ldr	r3, [pc, #116]	; (80024d4 <StartSensors3+0xa0>)
 800245e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002460:	f7fe fed6 	bl	8001210 <MRT_LSM6DSR_getAcceleration>
  	  MRT_LSM6DSR_getAngularRate(lsm_ctx,angular_rate_mdps);
 8002464:	4a1a      	ldr	r2, [pc, #104]	; (80024d0 <StartSensors3+0x9c>)
 8002466:	4b1c      	ldr	r3, [pc, #112]	; (80024d8 <StartSensors3+0xa4>)
 8002468:	ca07      	ldmia	r2, {r0, r1, r2}
 800246a:	f7fe ff41 	bl	80012f0 <MRT_LSM6DSR_getAngularRate>
	  MRT_LSM6DSR_getTemperature(lsm_ctx,&lsm_temperature_degC);
 800246e:	4a18      	ldr	r2, [pc, #96]	; (80024d0 <StartSensors3+0x9c>)
 8002470:	4b1a      	ldr	r3, [pc, #104]	; (80024dc <StartSensors3+0xa8>)
 8002472:	ca07      	ldmia	r2, {r0, r1, r2}
 8002474:	f7fe ff12 	bl	800129c <MRT_LSM6DSR_getTemperature>

	  //LPS22HH
  	  MRT_LPS22HH_getPressure(lps_ctx,&pressure_hPa);
 8002478:	4a19      	ldr	r2, [pc, #100]	; (80024e0 <StartSensors3+0xac>)
 800247a:	4b1a      	ldr	r3, [pc, #104]	; (80024e4 <StartSensors3+0xb0>)
 800247c:	ca07      	ldmia	r2, {r0, r1, r2}
 800247e:	f7ff f835 	bl	80014ec <MRT_LPS22HH_getPressure>
	  MRT_LPS22HH_getTemperature(lps_ctx,&lps_temperature_degC);
 8002482:	4a17      	ldr	r2, [pc, #92]	; (80024e0 <StartSensors3+0xac>)
 8002484:	4b18      	ldr	r3, [pc, #96]	; (80024e8 <StartSensors3+0xb4>)
 8002486:	ca07      	ldmia	r2, {r0, r1, r2}
 8002488:	f7ff f85c 	bl	8001544 <MRT_LPS22HH_getTemperature>
	  altitude_m = MRT_getAltitude(pressure_hPa); //Update altitude
 800248c:	4b15      	ldr	r3, [pc, #84]	; (80024e4 <StartSensors3+0xb0>)
 800248e:	edd3 7a00 	vldr	s15, [r3]
 8002492:	eeb0 0a67 	vmov.f32	s0, s15
 8002496:	f001 fa4b 	bl	8003930 <MRT_getAltitude>
 800249a:	eef0 7a40 	vmov.f32	s15, s0
 800249e:	4b13      	ldr	r3, [pc, #76]	; (80024ec <StartSensors3+0xb8>)
 80024a0:	edc3 7a00 	vstr	s15, [r3]

	  //TODO Pressure tank (just use an analog sensor if you don't have it)


	  //Thermocouple
	  Max31855_Read_Temp();
 80024a4:	f005 fa52 	bl	800794c <Max31855_Read_Temp>

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 80024a8:	2200      	movs	r2, #0
 80024aa:	2102      	movs	r1, #2
 80024ac:	4804      	ldr	r0, [pc, #16]	; (80024c0 <StartSensors3+0x8c>)
 80024ae:	f006 f891 	bl	80085d4 <HAL_GPIO_WritePin>

	  osDelay(1000/POLL_FREQ);
 80024b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024b6:	f00b fb6a 	bl	800db8e <osDelay>
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 80024ba:	e7c4      	b.n	8002446 <StartSensors3+0x12>
 80024bc:	20005b10 	.word	0x20005b10
 80024c0:	40020800 	.word	0x40020800
 80024c4:	20005e2c 	.word	0x20005e2c
 80024c8:	20005dc0 	.word	0x20005dc0
 80024cc:	20005ec8 	.word	0x20005ec8
 80024d0:	20005f28 	.word	0x20005f28
 80024d4:	20000260 	.word	0x20000260
 80024d8:	2000026c 	.word	0x2000026c
 80024dc:	20000278 	.word	0x20000278
 80024e0:	20005f1c 	.word	0x20005f1c
 80024e4:	20000258 	.word	0x20000258
 80024e8:	2000025c 	.word	0x2000025c
 80024ec:	2000027c 	.word	0x2000027c

080024f0 <StartPropulsion4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPropulsion4 */
void StartPropulsion4(void *argument)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPropulsion4 */

	osThreadExit();
 80024f8:	f00b fb43 	bl	800db82 <osThreadExit>

080024fc <StartPrinting>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPrinting */
void StartPrinting(void *argument)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b0c2      	sub	sp, #264	; 0x108
 8002500:	af00      	add	r7, sp, #0
 8002502:	1d3b      	adds	r3, r7, #4
 8002504:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartPrinting */

	osThreadExit();
 8002506:	f00b fb3c 	bl	800db82 <osThreadExit>
	...

0800250c <StartWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWatchDog */
void StartWatchDog(void *argument)
{
 800250c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800250e:	b0c7      	sub	sp, #284	; 0x11c
 8002510:	af04      	add	r7, sp, #16
 8002512:	1d3b      	adds	r3, r7, #4
 8002514:	6018      	str	r0, [r3, #0]

	char buffer[TX_BUF_DIM];
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 8002516:	2201      	movs	r2, #1
 8002518:	2104      	movs	r1, #4
 800251a:	482c      	ldr	r0, [pc, #176]	; (80025cc <StartWatchDog+0xc0>)
 800251c:	f006 f85a 	bl	80085d4 <HAL_GPIO_WritePin>
	 HAL_IWDG_Refresh(&hiwdg);
 8002520:	482b      	ldr	r0, [pc, #172]	; (80025d0 <StartWatchDog+0xc4>)
 8002522:	f007 f93b 	bl	800979c <HAL_IWDG_Refresh>

	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002526:	2200      	movs	r2, #0
 8002528:	492a      	ldr	r1, [pc, #168]	; (80025d4 <StartWatchDog+0xc8>)
 800252a:	482b      	ldr	r0, [pc, #172]	; (80025d8 <StartWatchDog+0xcc>)
 800252c:	f008 f934 	bl	800a798 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002530:	2200      	movs	r2, #0
 8002532:	492a      	ldr	r1, [pc, #168]	; (80025dc <StartWatchDog+0xd0>)
 8002534:	4828      	ldr	r0, [pc, #160]	; (80025d8 <StartWatchDog+0xcc>)
 8002536:	f008 fa34 	bl	800a9a2 <HAL_RTC_GetDate>

	 prev_hours = sTime.Hours;
 800253a:	4b26      	ldr	r3, [pc, #152]	; (80025d4 <StartWatchDog+0xc8>)
 800253c:	781a      	ldrb	r2, [r3, #0]
 800253e:	4b28      	ldr	r3, [pc, #160]	; (80025e0 <StartWatchDog+0xd4>)
 8002540:	701a      	strb	r2, [r3, #0]
	 prev_min = sTime.Minutes;
 8002542:	4b24      	ldr	r3, [pc, #144]	; (80025d4 <StartWatchDog+0xc8>)
 8002544:	785a      	ldrb	r2, [r3, #1]
 8002546:	4b27      	ldr	r3, [pc, #156]	; (80025e4 <StartWatchDog+0xd8>)
 8002548:	701a      	strb	r2, [r3, #0]
	 prev_sec = sTime.Seconds;
 800254a:	4b22      	ldr	r3, [pc, #136]	; (80025d4 <StartWatchDog+0xc8>)
 800254c:	789a      	ldrb	r2, [r3, #2]
 800254e:	4b26      	ldr	r3, [pc, #152]	; (80025e8 <StartWatchDog+0xdc>)
 8002550:	701a      	strb	r2, [r3, #0]



	  memset(buffer, 0, TX_BUF_DIM);
 8002552:	f107 0308 	add.w	r3, r7, #8
 8002556:	f44f 7280 	mov.w	r2, #256	; 0x100
 800255a:	2100      	movs	r1, #0
 800255c:	4618      	mov	r0, r3
 800255e:	f00f f97d 	bl	801185c <memset>
	  sprintf(buffer, "Time: %i:%i:%i	Date: \r\n %f\r\n", prev_hours,prev_min,prev_sec, altitude_m);
 8002562:	4b1f      	ldr	r3, [pc, #124]	; (80025e0 <StartWatchDog+0xd4>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	461d      	mov	r5, r3
 8002568:	4b1e      	ldr	r3, [pc, #120]	; (80025e4 <StartWatchDog+0xd8>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	461e      	mov	r6, r3
 800256e:	4b1e      	ldr	r3, [pc, #120]	; (80025e8 <StartWatchDog+0xdc>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	461c      	mov	r4, r3
 8002574:	4b1d      	ldr	r3, [pc, #116]	; (80025ec <StartWatchDog+0xe0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f7fd fff5 	bl	8000568 <__aeabi_f2d>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	f107 0008 	add.w	r0, r7, #8
 8002586:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800258a:	9400      	str	r4, [sp, #0]
 800258c:	4633      	mov	r3, r6
 800258e:	462a      	mov	r2, r5
 8002590:	4917      	ldr	r1, [pc, #92]	; (80025f0 <StartWatchDog+0xe4>)
 8002592:	f010 f9e1 	bl	8012958 <siprintf>
	  HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 8002596:	f107 0308 	add.w	r3, r7, #8
 800259a:	4618      	mov	r0, r3
 800259c:	f7fd fe28 	bl	80001f0 <strlen>
 80025a0:	4603      	mov	r3, r0
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	f107 0108 	add.w	r1, r7, #8
 80025a8:	f04f 33ff 	mov.w	r3, #4294967295
 80025ac:	4811      	ldr	r0, [pc, #68]	; (80025f4 <StartWatchDog+0xe8>)
 80025ae:	f00a f958 	bl	800c862 <HAL_UART_Transmit>


	  //Save the time
	  MRT_saveRTCTime();
 80025b2:	f001 f9a9 	bl	8003908 <MRT_saveRTCTime>

	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 80025b6:	2200      	movs	r2, #0
 80025b8:	2104      	movs	r1, #4
 80025ba:	4804      	ldr	r0, [pc, #16]	; (80025cc <StartWatchDog+0xc0>)
 80025bc:	f006 f80a 	bl	80085d4 <HAL_GPIO_WritePin>

	  osDelay(1000/WD_FREQ);
 80025c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025c4:	f00b fae3 	bl	800db8e <osDelay>
  {
 80025c8:	e7a5      	b.n	8002516 <StartWatchDog+0xa>
 80025ca:	bf00      	nop
 80025cc:	40020800 	.word	0x40020800
 80025d0:	20005b78 	.word	0x20005b78
 80025d4:	200004c0 	.word	0x200004c0
 80025d8:	20005da0 	.word	0x20005da0
 80025dc:	200004d4 	.word	0x200004d4
 80025e0:	20000288 	.word	0x20000288
 80025e4:	20000289 	.word	0x20000289
 80025e8:	2000028a 	.word	0x2000028a
 80025ec:	2000027c 	.word	0x2000027c
 80025f0:	08016a14 	.word	0x08016a14
 80025f4:	20005e3c 	.word	0x20005e3c

080025f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a04      	ldr	r2, [pc, #16]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d101      	bne.n	800260e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800260a:	f005 fa55 	bl	8007ab8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40001000 	.word	0x40001000

0800261c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002620:	bf00      	nop
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
	...

0800262c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	607b      	str	r3, [r7, #4]
 8002636:	4b12      	ldr	r3, [pc, #72]	; (8002680 <HAL_MspInit+0x54>)
 8002638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263a:	4a11      	ldr	r2, [pc, #68]	; (8002680 <HAL_MspInit+0x54>)
 800263c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002640:	6453      	str	r3, [r2, #68]	; 0x44
 8002642:	4b0f      	ldr	r3, [pc, #60]	; (8002680 <HAL_MspInit+0x54>)
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800264a:	607b      	str	r3, [r7, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	603b      	str	r3, [r7, #0]
 8002652:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <HAL_MspInit+0x54>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	4a0a      	ldr	r2, [pc, #40]	; (8002680 <HAL_MspInit+0x54>)
 8002658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800265c:	6413      	str	r3, [r2, #64]	; 0x40
 800265e:	4b08      	ldr	r3, [pc, #32]	; (8002680 <HAL_MspInit+0x54>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002666:	603b      	str	r3, [r7, #0]
 8002668:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800266a:	2200      	movs	r2, #0
 800266c:	210f      	movs	r1, #15
 800266e:	f06f 0001 	mvn.w	r0, #1
 8002672:	f005 fdb3 	bl	80081dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40023800 	.word	0x40023800

08002684 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08a      	sub	sp, #40	; 0x28
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268c:	f107 0314 	add.w	r3, r7, #20
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	60da      	str	r2, [r3, #12]
 800269a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a17      	ldr	r2, [pc, #92]	; (8002700 <HAL_ADC_MspInit+0x7c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d127      	bne.n	80026f6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	4b16      	ldr	r3, [pc, #88]	; (8002704 <HAL_ADC_MspInit+0x80>)
 80026ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ae:	4a15      	ldr	r2, [pc, #84]	; (8002704 <HAL_ADC_MspInit+0x80>)
 80026b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b4:	6453      	str	r3, [r2, #68]	; 0x44
 80026b6:	4b13      	ldr	r3, [pc, #76]	; (8002704 <HAL_ADC_MspInit+0x80>)
 80026b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026be:	613b      	str	r3, [r7, #16]
 80026c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	4b0f      	ldr	r3, [pc, #60]	; (8002704 <HAL_ADC_MspInit+0x80>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	4a0e      	ldr	r2, [pc, #56]	; (8002704 <HAL_ADC_MspInit+0x80>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	6313      	str	r3, [r2, #48]	; 0x30
 80026d2:	4b0c      	ldr	r3, [pc, #48]	; (8002704 <HAL_ADC_MspInit+0x80>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 80026de:	2340      	movs	r3, #64	; 0x40
 80026e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026e2:	2303      	movs	r3, #3
 80026e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 80026ea:	f107 0314 	add.w	r3, r7, #20
 80026ee:	4619      	mov	r1, r3
 80026f0:	4805      	ldr	r0, [pc, #20]	; (8002708 <HAL_ADC_MspInit+0x84>)
 80026f2:	f005 fdab 	bl	800824c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80026f6:	bf00      	nop
 80026f8:	3728      	adds	r7, #40	; 0x28
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40012000 	.word	0x40012000
 8002704:	40023800 	.word	0x40023800
 8002708:	40020000 	.word	0x40020000

0800270c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b08e      	sub	sp, #56	; 0x38
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	605a      	str	r2, [r3, #4]
 800271e:	609a      	str	r2, [r3, #8]
 8002720:	60da      	str	r2, [r3, #12]
 8002722:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a5c      	ldr	r2, [pc, #368]	; (800289c <HAL_I2C_MspInit+0x190>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d12d      	bne.n	800278a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	623b      	str	r3, [r7, #32]
 8002732:	4b5b      	ldr	r3, [pc, #364]	; (80028a0 <HAL_I2C_MspInit+0x194>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	4a5a      	ldr	r2, [pc, #360]	; (80028a0 <HAL_I2C_MspInit+0x194>)
 8002738:	f043 0302 	orr.w	r3, r3, #2
 800273c:	6313      	str	r3, [r2, #48]	; 0x30
 800273e:	4b58      	ldr	r3, [pc, #352]	; (80028a0 <HAL_I2C_MspInit+0x194>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	623b      	str	r3, [r7, #32]
 8002748:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800274a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800274e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002750:	2312      	movs	r3, #18
 8002752:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002754:	2301      	movs	r3, #1
 8002756:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002758:	2303      	movs	r3, #3
 800275a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800275c:	2304      	movs	r3, #4
 800275e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002764:	4619      	mov	r1, r3
 8002766:	484f      	ldr	r0, [pc, #316]	; (80028a4 <HAL_I2C_MspInit+0x198>)
 8002768:	f005 fd70 	bl	800824c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800276c:	2300      	movs	r3, #0
 800276e:	61fb      	str	r3, [r7, #28]
 8002770:	4b4b      	ldr	r3, [pc, #300]	; (80028a0 <HAL_I2C_MspInit+0x194>)
 8002772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002774:	4a4a      	ldr	r2, [pc, #296]	; (80028a0 <HAL_I2C_MspInit+0x194>)
 8002776:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800277a:	6413      	str	r3, [r2, #64]	; 0x40
 800277c:	4b48      	ldr	r3, [pc, #288]	; (80028a0 <HAL_I2C_MspInit+0x194>)
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002784:	61fb      	str	r3, [r7, #28]
 8002786:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002788:	e083      	b.n	8002892 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a46      	ldr	r2, [pc, #280]	; (80028a8 <HAL_I2C_MspInit+0x19c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d12d      	bne.n	80027f0 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002794:	2300      	movs	r3, #0
 8002796:	61bb      	str	r3, [r7, #24]
 8002798:	4b41      	ldr	r3, [pc, #260]	; (80028a0 <HAL_I2C_MspInit+0x194>)
 800279a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279c:	4a40      	ldr	r2, [pc, #256]	; (80028a0 <HAL_I2C_MspInit+0x194>)
 800279e:	f043 0302 	orr.w	r3, r3, #2
 80027a2:	6313      	str	r3, [r2, #48]	; 0x30
 80027a4:	4b3e      	ldr	r3, [pc, #248]	; (80028a0 <HAL_I2C_MspInit+0x194>)
 80027a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	61bb      	str	r3, [r7, #24]
 80027ae:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80027b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027b6:	2312      	movs	r3, #18
 80027b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027ba:	2301      	movs	r3, #1
 80027bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027be:	2303      	movs	r3, #3
 80027c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80027c2:	2304      	movs	r3, #4
 80027c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027ca:	4619      	mov	r1, r3
 80027cc:	4835      	ldr	r0, [pc, #212]	; (80028a4 <HAL_I2C_MspInit+0x198>)
 80027ce:	f005 fd3d 	bl	800824c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	4b32      	ldr	r3, [pc, #200]	; (80028a0 <HAL_I2C_MspInit+0x194>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	4a31      	ldr	r2, [pc, #196]	; (80028a0 <HAL_I2C_MspInit+0x194>)
 80027dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027e0:	6413      	str	r3, [r2, #64]	; 0x40
 80027e2:	4b2f      	ldr	r3, [pc, #188]	; (80028a0 <HAL_I2C_MspInit+0x194>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ea:	617b      	str	r3, [r7, #20]
 80027ec:	697b      	ldr	r3, [r7, #20]
}
 80027ee:	e050      	b.n	8002892 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a2d      	ldr	r2, [pc, #180]	; (80028ac <HAL_I2C_MspInit+0x1a0>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d14b      	bne.n	8002892 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	4b28      	ldr	r3, [pc, #160]	; (80028a0 <HAL_I2C_MspInit+0x194>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	4a27      	ldr	r2, [pc, #156]	; (80028a0 <HAL_I2C_MspInit+0x194>)
 8002804:	f043 0304 	orr.w	r3, r3, #4
 8002808:	6313      	str	r3, [r2, #48]	; 0x30
 800280a:	4b25      	ldr	r3, [pc, #148]	; (80028a0 <HAL_I2C_MspInit+0x194>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	4b21      	ldr	r3, [pc, #132]	; (80028a0 <HAL_I2C_MspInit+0x194>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	4a20      	ldr	r2, [pc, #128]	; (80028a0 <HAL_I2C_MspInit+0x194>)
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	6313      	str	r3, [r2, #48]	; 0x30
 8002826:	4b1e      	ldr	r3, [pc, #120]	; (80028a0 <HAL_I2C_MspInit+0x194>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002832:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002838:	2312      	movs	r3, #18
 800283a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800283c:	2301      	movs	r3, #1
 800283e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002840:	2303      	movs	r3, #3
 8002842:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002844:	2304      	movs	r3, #4
 8002846:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800284c:	4619      	mov	r1, r3
 800284e:	4818      	ldr	r0, [pc, #96]	; (80028b0 <HAL_I2C_MspInit+0x1a4>)
 8002850:	f005 fcfc 	bl	800824c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002854:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800285a:	2312      	movs	r3, #18
 800285c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800285e:	2301      	movs	r3, #1
 8002860:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002862:	2303      	movs	r3, #3
 8002864:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002866:	2304      	movs	r3, #4
 8002868:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800286a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800286e:	4619      	mov	r1, r3
 8002870:	4810      	ldr	r0, [pc, #64]	; (80028b4 <HAL_I2C_MspInit+0x1a8>)
 8002872:	f005 fceb 	bl	800824c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	60bb      	str	r3, [r7, #8]
 800287a:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <HAL_I2C_MspInit+0x194>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	4a08      	ldr	r2, [pc, #32]	; (80028a0 <HAL_I2C_MspInit+0x194>)
 8002880:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002884:	6413      	str	r3, [r2, #64]	; 0x40
 8002886:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <HAL_I2C_MspInit+0x194>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800288e:	60bb      	str	r3, [r7, #8]
 8002890:	68bb      	ldr	r3, [r7, #8]
}
 8002892:	bf00      	nop
 8002894:	3738      	adds	r7, #56	; 0x38
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40005400 	.word	0x40005400
 80028a0:	40023800 	.word	0x40023800
 80028a4:	40020400 	.word	0x40020400
 80028a8:	40005800 	.word	0x40005800
 80028ac:	40005c00 	.word	0x40005c00
 80028b0:	40020800 	.word	0x40020800
 80028b4:	40020000 	.word	0x40020000

080028b8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08e      	sub	sp, #56	; 0x38
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028c0:	f107 0308 	add.w	r3, r7, #8
 80028c4:	2230      	movs	r2, #48	; 0x30
 80028c6:	2100      	movs	r1, #0
 80028c8:	4618      	mov	r0, r3
 80028ca:	f00e ffc7 	bl	801185c <memset>
  if(hrtc->Instance==RTC)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a10      	ldr	r2, [pc, #64]	; (8002914 <HAL_RTC_MspInit+0x5c>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d119      	bne.n	800290c <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80028d8:	2320      	movs	r3, #32
 80028da:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80028dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028e0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028e2:	f107 0308 	add.w	r3, r7, #8
 80028e6:	4618      	mov	r0, r3
 80028e8:	f007 fc4a 	bl	800a180 <HAL_RCCEx_PeriphCLKConfig>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80028f2:	f7ff fe93 	bl	800261c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80028f6:	4b08      	ldr	r3, [pc, #32]	; (8002918 <HAL_RTC_MspInit+0x60>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 80028fc:	2200      	movs	r2, #0
 80028fe:	2105      	movs	r1, #5
 8002900:	2029      	movs	r0, #41	; 0x29
 8002902:	f005 fc6b 	bl	80081dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002906:	2029      	movs	r0, #41	; 0x29
 8002908:	f005 fc84 	bl	8008214 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800290c:	bf00      	nop
 800290e:	3738      	adds	r7, #56	; 0x38
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40002800 	.word	0x40002800
 8002918:	42470e3c 	.word	0x42470e3c

0800291c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08e      	sub	sp, #56	; 0x38
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	60da      	str	r2, [r3, #12]
 8002932:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a4c      	ldr	r2, [pc, #304]	; (8002a6c <HAL_SPI_MspInit+0x150>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d12d      	bne.n	800299a <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	623b      	str	r3, [r7, #32]
 8002942:	4b4b      	ldr	r3, [pc, #300]	; (8002a70 <HAL_SPI_MspInit+0x154>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	4a4a      	ldr	r2, [pc, #296]	; (8002a70 <HAL_SPI_MspInit+0x154>)
 8002948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800294c:	6413      	str	r3, [r2, #64]	; 0x40
 800294e:	4b48      	ldr	r3, [pc, #288]	; (8002a70 <HAL_SPI_MspInit+0x154>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002956:	623b      	str	r3, [r7, #32]
 8002958:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	61fb      	str	r3, [r7, #28]
 800295e:	4b44      	ldr	r3, [pc, #272]	; (8002a70 <HAL_SPI_MspInit+0x154>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	4a43      	ldr	r2, [pc, #268]	; (8002a70 <HAL_SPI_MspInit+0x154>)
 8002964:	f043 0302 	orr.w	r3, r3, #2
 8002968:	6313      	str	r3, [r2, #48]	; 0x30
 800296a:	4b41      	ldr	r3, [pc, #260]	; (8002a70 <HAL_SPI_MspInit+0x154>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	61fb      	str	r3, [r7, #28]
 8002974:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002976:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297c:	2302      	movs	r3, #2
 800297e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	2300      	movs	r3, #0
 8002982:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002984:	2303      	movs	r3, #3
 8002986:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002988:	2305      	movs	r3, #5
 800298a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800298c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002990:	4619      	mov	r1, r3
 8002992:	4838      	ldr	r0, [pc, #224]	; (8002a74 <HAL_SPI_MspInit+0x158>)
 8002994:	f005 fc5a 	bl	800824c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002998:	e064      	b.n	8002a64 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI4)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a36      	ldr	r2, [pc, #216]	; (8002a78 <HAL_SPI_MspInit+0x15c>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d12d      	bne.n	8002a00 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80029a4:	2300      	movs	r3, #0
 80029a6:	61bb      	str	r3, [r7, #24]
 80029a8:	4b31      	ldr	r3, [pc, #196]	; (8002a70 <HAL_SPI_MspInit+0x154>)
 80029aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ac:	4a30      	ldr	r2, [pc, #192]	; (8002a70 <HAL_SPI_MspInit+0x154>)
 80029ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029b2:	6453      	str	r3, [r2, #68]	; 0x44
 80029b4:	4b2e      	ldr	r3, [pc, #184]	; (8002a70 <HAL_SPI_MspInit+0x154>)
 80029b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029bc:	61bb      	str	r3, [r7, #24]
 80029be:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029c0:	2300      	movs	r3, #0
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	4b2a      	ldr	r3, [pc, #168]	; (8002a70 <HAL_SPI_MspInit+0x154>)
 80029c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c8:	4a29      	ldr	r2, [pc, #164]	; (8002a70 <HAL_SPI_MspInit+0x154>)
 80029ca:	f043 0310 	orr.w	r3, r3, #16
 80029ce:	6313      	str	r3, [r2, #48]	; 0x30
 80029d0:	4b27      	ldr	r3, [pc, #156]	; (8002a70 <HAL_SPI_MspInit+0x154>)
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	617b      	str	r3, [r7, #20]
 80029da:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80029dc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e2:	2302      	movs	r3, #2
 80029e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ea:	2303      	movs	r3, #3
 80029ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80029ee:	2305      	movs	r3, #5
 80029f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029f6:	4619      	mov	r1, r3
 80029f8:	4820      	ldr	r0, [pc, #128]	; (8002a7c <HAL_SPI_MspInit+0x160>)
 80029fa:	f005 fc27 	bl	800824c <HAL_GPIO_Init>
}
 80029fe:	e031      	b.n	8002a64 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI5)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a1e      	ldr	r2, [pc, #120]	; (8002a80 <HAL_SPI_MspInit+0x164>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d12c      	bne.n	8002a64 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	613b      	str	r3, [r7, #16]
 8002a0e:	4b18      	ldr	r3, [pc, #96]	; (8002a70 <HAL_SPI_MspInit+0x154>)
 8002a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a12:	4a17      	ldr	r2, [pc, #92]	; (8002a70 <HAL_SPI_MspInit+0x154>)
 8002a14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a18:	6453      	str	r3, [r2, #68]	; 0x44
 8002a1a:	4b15      	ldr	r3, [pc, #84]	; (8002a70 <HAL_SPI_MspInit+0x154>)
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a22:	613b      	str	r3, [r7, #16]
 8002a24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a26:	2300      	movs	r3, #0
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <HAL_SPI_MspInit+0x154>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	4a10      	ldr	r2, [pc, #64]	; (8002a70 <HAL_SPI_MspInit+0x154>)
 8002a30:	f043 0320 	orr.w	r3, r3, #32
 8002a34:	6313      	str	r3, [r2, #48]	; 0x30
 8002a36:	4b0e      	ldr	r3, [pc, #56]	; (8002a70 <HAL_SPI_MspInit+0x154>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	f003 0320 	and.w	r3, r3, #32
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002a42:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a50:	2303      	movs	r3, #3
 8002a52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002a54:	2305      	movs	r3, #5
 8002a56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4809      	ldr	r0, [pc, #36]	; (8002a84 <HAL_SPI_MspInit+0x168>)
 8002a60:	f005 fbf4 	bl	800824c <HAL_GPIO_Init>
}
 8002a64:	bf00      	nop
 8002a66:	3738      	adds	r7, #56	; 0x38
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40003800 	.word	0x40003800
 8002a70:	40023800 	.word	0x40023800
 8002a74:	40020400 	.word	0x40020400
 8002a78:	40013400 	.word	0x40013400
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	40015000 	.word	0x40015000
 8002a84:	40021400 	.word	0x40021400

08002a88 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a98:	d10d      	bne.n	8002ab6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	4a08      	ldr	r2, [pc, #32]	; (8002ac4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aaa:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002ab6:	bf00      	nop
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	40023800 	.word	0x40023800

08002ac8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b088      	sub	sp, #32
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad0:	f107 030c 	add.w	r3, r7, #12
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	605a      	str	r2, [r3, #4]
 8002ada:	609a      	str	r2, [r3, #8]
 8002adc:	60da      	str	r2, [r3, #12]
 8002ade:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae8:	d11d      	bne.n	8002b26 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	4b10      	ldr	r3, [pc, #64]	; (8002b30 <HAL_TIM_MspPostInit+0x68>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	4a0f      	ldr	r2, [pc, #60]	; (8002b30 <HAL_TIM_MspPostInit+0x68>)
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	6313      	str	r3, [r2, #48]	; 0x30
 8002afa:	4b0d      	ldr	r3, [pc, #52]	; (8002b30 <HAL_TIM_MspPostInit+0x68>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	60bb      	str	r3, [r7, #8]
 8002b04:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8002b06:	2304      	movs	r3, #4
 8002b08:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b12:	2300      	movs	r3, #0
 8002b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b16:	2301      	movs	r3, #1
 8002b18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8002b1a:	f107 030c 	add.w	r3, r7, #12
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4804      	ldr	r0, [pc, #16]	; (8002b34 <HAL_TIM_MspPostInit+0x6c>)
 8002b22:	f005 fb93 	bl	800824c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002b26:	bf00      	nop
 8002b28:	3720      	adds	r7, #32
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40023800 	.word	0x40023800
 8002b34:	40020000 	.word	0x40020000

08002b38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08e      	sub	sp, #56	; 0x38
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	605a      	str	r2, [r3, #4]
 8002b4a:	609a      	str	r2, [r3, #8]
 8002b4c:	60da      	str	r2, [r3, #12]
 8002b4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a4b      	ldr	r2, [pc, #300]	; (8002c84 <HAL_UART_MspInit+0x14c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d12c      	bne.n	8002bb4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	623b      	str	r3, [r7, #32]
 8002b5e:	4b4a      	ldr	r3, [pc, #296]	; (8002c88 <HAL_UART_MspInit+0x150>)
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	4a49      	ldr	r2, [pc, #292]	; (8002c88 <HAL_UART_MspInit+0x150>)
 8002b64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b68:	6413      	str	r3, [r2, #64]	; 0x40
 8002b6a:	4b47      	ldr	r3, [pc, #284]	; (8002c88 <HAL_UART_MspInit+0x150>)
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b72:	623b      	str	r3, [r7, #32]
 8002b74:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b76:	2300      	movs	r3, #0
 8002b78:	61fb      	str	r3, [r7, #28]
 8002b7a:	4b43      	ldr	r3, [pc, #268]	; (8002c88 <HAL_UART_MspInit+0x150>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7e:	4a42      	ldr	r2, [pc, #264]	; (8002c88 <HAL_UART_MspInit+0x150>)
 8002b80:	f043 0310 	orr.w	r3, r3, #16
 8002b84:	6313      	str	r3, [r2, #48]	; 0x30
 8002b86:	4b40      	ldr	r3, [pc, #256]	; (8002c88 <HAL_UART_MspInit+0x150>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	f003 0310 	and.w	r3, r3, #16
 8002b8e:	61fb      	str	r3, [r7, #28]
 8002b90:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8002b92:	2303      	movs	r3, #3
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b96:	2302      	movs	r3, #2
 8002b98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002ba2:	2308      	movs	r3, #8
 8002ba4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002baa:	4619      	mov	r1, r3
 8002bac:	4837      	ldr	r0, [pc, #220]	; (8002c8c <HAL_UART_MspInit+0x154>)
 8002bae:	f005 fb4d 	bl	800824c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002bb2:	e063      	b.n	8002c7c <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a35      	ldr	r2, [pc, #212]	; (8002c90 <HAL_UART_MspInit+0x158>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d12d      	bne.n	8002c1a <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61bb      	str	r3, [r7, #24]
 8002bc2:	4b31      	ldr	r3, [pc, #196]	; (8002c88 <HAL_UART_MspInit+0x150>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	4a30      	ldr	r2, [pc, #192]	; (8002c88 <HAL_UART_MspInit+0x150>)
 8002bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bce:	4b2e      	ldr	r3, [pc, #184]	; (8002c88 <HAL_UART_MspInit+0x150>)
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bd6:	61bb      	str	r3, [r7, #24]
 8002bd8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	4b2a      	ldr	r3, [pc, #168]	; (8002c88 <HAL_UART_MspInit+0x150>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	4a29      	ldr	r2, [pc, #164]	; (8002c88 <HAL_UART_MspInit+0x150>)
 8002be4:	f043 0308 	orr.w	r3, r3, #8
 8002be8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bea:	4b27      	ldr	r3, [pc, #156]	; (8002c88 <HAL_UART_MspInit+0x150>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	617b      	str	r3, [r7, #20]
 8002bf4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8002bf6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c04:	2303      	movs	r3, #3
 8002c06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c08:	2307      	movs	r3, #7
 8002c0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c10:	4619      	mov	r1, r3
 8002c12:	4820      	ldr	r0, [pc, #128]	; (8002c94 <HAL_UART_MspInit+0x15c>)
 8002c14:	f005 fb1a 	bl	800824c <HAL_GPIO_Init>
}
 8002c18:	e030      	b.n	8002c7c <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a1e      	ldr	r2, [pc, #120]	; (8002c98 <HAL_UART_MspInit+0x160>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d12b      	bne.n	8002c7c <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002c24:	2300      	movs	r3, #0
 8002c26:	613b      	str	r3, [r7, #16]
 8002c28:	4b17      	ldr	r3, [pc, #92]	; (8002c88 <HAL_UART_MspInit+0x150>)
 8002c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2c:	4a16      	ldr	r2, [pc, #88]	; (8002c88 <HAL_UART_MspInit+0x150>)
 8002c2e:	f043 0320 	orr.w	r3, r3, #32
 8002c32:	6453      	str	r3, [r2, #68]	; 0x44
 8002c34:	4b14      	ldr	r3, [pc, #80]	; (8002c88 <HAL_UART_MspInit+0x150>)
 8002c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c38:	f003 0320 	and.w	r3, r3, #32
 8002c3c:	613b      	str	r3, [r7, #16]
 8002c3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <HAL_UART_MspInit+0x150>)
 8002c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c48:	4a0f      	ldr	r2, [pc, #60]	; (8002c88 <HAL_UART_MspInit+0x150>)
 8002c4a:	f043 0304 	orr.w	r3, r3, #4
 8002c4e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c50:	4b0d      	ldr	r3, [pc, #52]	; (8002c88 <HAL_UART_MspInit+0x150>)
 8002c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8002c5c:	23c0      	movs	r3, #192	; 0xc0
 8002c5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c60:	2302      	movs	r3, #2
 8002c62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002c6c:	2308      	movs	r3, #8
 8002c6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c74:	4619      	mov	r1, r3
 8002c76:	4809      	ldr	r0, [pc, #36]	; (8002c9c <HAL_UART_MspInit+0x164>)
 8002c78:	f005 fae8 	bl	800824c <HAL_GPIO_Init>
}
 8002c7c:	bf00      	nop
 8002c7e:	3738      	adds	r7, #56	; 0x38
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40007c00 	.word	0x40007c00
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	40004800 	.word	0x40004800
 8002c94:	40020c00 	.word	0x40020c00
 8002c98:	40011400 	.word	0x40011400
 8002c9c:	40020800 	.word	0x40020800

08002ca0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08c      	sub	sp, #48	; 0x30
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002cac:	2300      	movs	r3, #0
 8002cae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	2036      	movs	r0, #54	; 0x36
 8002cb6:	f005 fa91 	bl	80081dc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002cba:	2036      	movs	r0, #54	; 0x36
 8002cbc:	f005 faaa 	bl	8008214 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	4b1f      	ldr	r3, [pc, #124]	; (8002d44 <HAL_InitTick+0xa4>)
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	4a1e      	ldr	r2, [pc, #120]	; (8002d44 <HAL_InitTick+0xa4>)
 8002cca:	f043 0310 	orr.w	r3, r3, #16
 8002cce:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd0:	4b1c      	ldr	r3, [pc, #112]	; (8002d44 <HAL_InitTick+0xa4>)
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	f003 0310 	and.w	r3, r3, #16
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002cdc:	f107 0210 	add.w	r2, r7, #16
 8002ce0:	f107 0314 	add.w	r3, r7, #20
 8002ce4:	4611      	mov	r1, r2
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f007 fa18 	bl	800a11c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002cec:	f007 f9ee 	bl	800a0cc <HAL_RCC_GetPCLK1Freq>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf8:	4a13      	ldr	r2, [pc, #76]	; (8002d48 <HAL_InitTick+0xa8>)
 8002cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfe:	0c9b      	lsrs	r3, r3, #18
 8002d00:	3b01      	subs	r3, #1
 8002d02:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002d04:	4b11      	ldr	r3, [pc, #68]	; (8002d4c <HAL_InitTick+0xac>)
 8002d06:	4a12      	ldr	r2, [pc, #72]	; (8002d50 <HAL_InitTick+0xb0>)
 8002d08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002d0a:	4b10      	ldr	r3, [pc, #64]	; (8002d4c <HAL_InitTick+0xac>)
 8002d0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d10:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002d12:	4a0e      	ldr	r2, [pc, #56]	; (8002d4c <HAL_InitTick+0xac>)
 8002d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d16:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002d18:	4b0c      	ldr	r3, [pc, #48]	; (8002d4c <HAL_InitTick+0xac>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d1e:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <HAL_InitTick+0xac>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002d24:	4809      	ldr	r0, [pc, #36]	; (8002d4c <HAL_InitTick+0xac>)
 8002d26:	f008 ff63 	bl	800bbf0 <HAL_TIM_Base_Init>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d104      	bne.n	8002d3a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002d30:	4806      	ldr	r0, [pc, #24]	; (8002d4c <HAL_InitTick+0xac>)
 8002d32:	f008 ffb7 	bl	800bca4 <HAL_TIM_Base_Start_IT>
 8002d36:	4603      	mov	r3, r0
 8002d38:	e000      	b.n	8002d3c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3730      	adds	r7, #48	; 0x30
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40023800 	.word	0x40023800
 8002d48:	431bde83 	.word	0x431bde83
 8002d4c:	20005f48 	.word	0x20005f48
 8002d50:	40001000 	.word	0x40001000

08002d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d58:	bf00      	nop
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d62:	b480      	push	{r7}
 8002d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d66:	e7fe      	b.n	8002d66 <HardFault_Handler+0x4>

08002d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d6c:	e7fe      	b.n	8002d6c <MemManage_Handler+0x4>

08002d6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d72:	e7fe      	b.n	8002d72 <BusFault_Handler+0x4>

08002d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d78:	e7fe      	b.n	8002d78 <UsageFault_Handler+0x4>

08002d7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d7e:	bf00      	nop
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002d8c:	2001      	movs	r0, #1
 8002d8e:	f005 fc3b 	bl	8008608 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002d92:	bf00      	nop
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002d9c:	4802      	ldr	r0, [pc, #8]	; (8002da8 <RTC_Alarm_IRQHandler+0x10>)
 8002d9e:	f007 ff87 	bl	800acb0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002da2:	bf00      	nop
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20005da0 	.word	0x20005da0

08002dac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002db0:	4802      	ldr	r0, [pc, #8]	; (8002dbc <TIM6_DAC_IRQHandler+0x10>)
 8002db2:	f009 f836 	bl	800be22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002db6:	bf00      	nop
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	20005f48 	.word	0x20005f48

08002dc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
	return 1;
 8002dc4:	2301      	movs	r3, #1
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <_kill>:

int _kill(int pid, int sig)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002dda:	f00e fbe3 	bl	80115a4 <__errno>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2216      	movs	r2, #22
 8002de2:	601a      	str	r2, [r3, #0]
	return -1;
 8002de4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <_exit>:

void _exit (int status)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002df8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f7ff ffe7 	bl	8002dd0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e02:	e7fe      	b.n	8002e02 <_exit+0x12>

08002e04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e10:	2300      	movs	r3, #0
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	e00a      	b.n	8002e2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e16:	f3af 8000 	nop.w
 8002e1a:	4601      	mov	r1, r0
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	1c5a      	adds	r2, r3, #1
 8002e20:	60ba      	str	r2, [r7, #8]
 8002e22:	b2ca      	uxtb	r2, r1
 8002e24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	617b      	str	r3, [r7, #20]
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	dbf0      	blt.n	8002e16 <_read+0x12>
	}

return len;
 8002e34:	687b      	ldr	r3, [r7, #4]
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b086      	sub	sp, #24
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	60f8      	str	r0, [r7, #12]
 8002e46:	60b9      	str	r1, [r7, #8]
 8002e48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	e009      	b.n	8002e64 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	1c5a      	adds	r2, r3, #1
 8002e54:	60ba      	str	r2, [r7, #8]
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	3301      	adds	r3, #1
 8002e62:	617b      	str	r3, [r7, #20]
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	dbf1      	blt.n	8002e50 <_write+0x12>
	}
	return len;
 8002e6c:	687b      	ldr	r3, [r7, #4]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <_close>:

int _close(int file)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
	return -1;
 8002e7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
 8002e96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e9e:	605a      	str	r2, [r3, #4]
	return 0;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <_isatty>:

int _isatty(int file)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
	return 1;
 8002eb6:	2301      	movs	r3, #1
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
	return 0;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3714      	adds	r7, #20
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
	...

08002ee0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ee8:	4a14      	ldr	r2, [pc, #80]	; (8002f3c <_sbrk+0x5c>)
 8002eea:	4b15      	ldr	r3, [pc, #84]	; (8002f40 <_sbrk+0x60>)
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ef4:	4b13      	ldr	r3, [pc, #76]	; (8002f44 <_sbrk+0x64>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d102      	bne.n	8002f02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002efc:	4b11      	ldr	r3, [pc, #68]	; (8002f44 <_sbrk+0x64>)
 8002efe:	4a12      	ldr	r2, [pc, #72]	; (8002f48 <_sbrk+0x68>)
 8002f00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f02:	4b10      	ldr	r3, [pc, #64]	; (8002f44 <_sbrk+0x64>)
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4413      	add	r3, r2
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d207      	bcs.n	8002f20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f10:	f00e fb48 	bl	80115a4 <__errno>
 8002f14:	4603      	mov	r3, r0
 8002f16:	220c      	movs	r2, #12
 8002f18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f1e:	e009      	b.n	8002f34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f20:	4b08      	ldr	r3, [pc, #32]	; (8002f44 <_sbrk+0x64>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f26:	4b07      	ldr	r3, [pc, #28]	; (8002f44 <_sbrk+0x64>)
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	4a05      	ldr	r2, [pc, #20]	; (8002f44 <_sbrk+0x64>)
 8002f30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f32:	68fb      	ldr	r3, [r7, #12]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3718      	adds	r7, #24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	20030000 	.word	0x20030000
 8002f40:	00000400 	.word	0x00000400
 8002f44:	20000280 	.word	0x20000280
 8002f48:	20006120 	.word	0x20006120

08002f4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f50:	4b08      	ldr	r3, [pc, #32]	; (8002f74 <SystemInit+0x28>)
 8002f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f56:	4a07      	ldr	r2, [pc, #28]	; (8002f74 <SystemInit+0x28>)
 8002f58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f60:	4b04      	ldr	r3, [pc, #16]	; (8002f74 <SystemInit+0x28>)
 8002f62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f66:	609a      	str	r2, [r3, #8]
#endif
}
 8002f68:	bf00      	nop
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	e000ed00 	.word	0xe000ed00

08002f78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fb0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002f7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002f7e:	e003      	b.n	8002f88 <LoopCopyDataInit>

08002f80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002f80:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002f82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002f84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002f86:	3104      	adds	r1, #4

08002f88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002f88:	480b      	ldr	r0, [pc, #44]	; (8002fb8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002f8a:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002f8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002f8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002f90:	d3f6      	bcc.n	8002f80 <CopyDataInit>
  ldr  r2, =_sbss
 8002f92:	4a0b      	ldr	r2, [pc, #44]	; (8002fc0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002f94:	e002      	b.n	8002f9c <LoopFillZerobss>

08002f96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002f96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002f98:	f842 3b04 	str.w	r3, [r2], #4

08002f9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002f9c:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002f9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002fa0:	d3f9      	bcc.n	8002f96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002fa2:	f7ff ffd3 	bl	8002f4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fa6:	f00e fbf9 	bl	801179c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002faa:	f7fe fb45 	bl	8001638 <main>
  bx  lr    
 8002fae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002fb0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002fb4:	08018a24 	.word	0x08018a24
  ldr  r0, =_sdata
 8002fb8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002fbc:	20000220 	.word	0x20000220
  ldr  r2, =_sbss
 8002fc0:	20000220 	.word	0x20000220
  ldr  r3, = _ebss
 8002fc4:	2000611c 	.word	0x2000611c

08002fc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fc8:	e7fe      	b.n	8002fc8 <ADC_IRQHandler>
	...

08002fcc <GPS_Poll>:
UART_HandleTypeDef* SERIAL_USART;



void GPS_Poll(float *latitude, float *longitude, float *time)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08c      	sub	sp, #48	; 0x30
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 8002fd8:	2364      	movs	r3, #100	; 0x64
 8002fda:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	62bb      	str	r3, [r7, #40]	; 0x28
	while(loop_count < max_loop_count && !done){
 8002fe4:	e073      	b.n	80030ce <GPS_Poll+0x102>
		HAL_UART_Receive(GPS_USART, (uint8_t*)&rx_current, 1, 100);
 8002fe6:	4b3f      	ldr	r3, [pc, #252]	; (80030e4 <GPS_Poll+0x118>)
 8002fe8:	6818      	ldr	r0, [r3, #0]
 8002fea:	2364      	movs	r3, #100	; 0x64
 8002fec:	2201      	movs	r2, #1
 8002fee:	493e      	ldr	r1, [pc, #248]	; (80030e8 <GPS_Poll+0x11c>)
 8002ff0:	f009 fcc9 	bl	800c986 <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 8002ff4:	4b3c      	ldr	r3, [pc, #240]	; (80030e8 <GPS_Poll+0x11c>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b0a      	cmp	r3, #10
 8002ffa:	d00f      	beq.n	800301c <GPS_Poll+0x50>
 8002ffc:	4b3b      	ldr	r3, [pc, #236]	; (80030ec <GPS_Poll+0x120>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b63      	cmp	r3, #99	; 0x63
 8003002:	d80b      	bhi.n	800301c <GPS_Poll+0x50>
			rx_buffer[rx_index++] = rx_current;
 8003004:	4b39      	ldr	r3, [pc, #228]	; (80030ec <GPS_Poll+0x120>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	1c5a      	adds	r2, r3, #1
 800300a:	b2d1      	uxtb	r1, r2
 800300c:	4a37      	ldr	r2, [pc, #220]	; (80030ec <GPS_Poll+0x120>)
 800300e:	7011      	strb	r1, [r2, #0]
 8003010:	461a      	mov	r2, r3
 8003012:	4b35      	ldr	r3, [pc, #212]	; (80030e8 <GPS_Poll+0x11c>)
 8003014:	7819      	ldrb	r1, [r3, #0]
 8003016:	4b36      	ldr	r3, [pc, #216]	; (80030f0 <GPS_Poll+0x124>)
 8003018:	5499      	strb	r1, [r3, r2]
 800301a:	e021      	b.n	8003060 <GPS_Poll+0x94>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 800301c:	4834      	ldr	r0, [pc, #208]	; (80030f0 <GPS_Poll+0x124>)
 800301e:	f000 f86b 	bl	80030f8 <GPS_validate>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d013      	beq.n	8003050 <GPS_Poll+0x84>
				if(GPS_parse((char*) rx_buffer)){
 8003028:	4831      	ldr	r0, [pc, #196]	; (80030f0 <GPS_Poll+0x124>)
 800302a:	f000 f8c7 	bl	80031bc <GPS_parse>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00d      	beq.n	8003050 <GPS_Poll+0x84>
					*latitude = GPS.dec_latitude;
 8003034:	4b2f      	ldr	r3, [pc, #188]	; (80030f4 <GPS_Poll+0x128>)
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 800303c:	4b2d      	ldr	r3, [pc, #180]	; (80030f4 <GPS_Poll+0x128>)
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 8003044:	4b2b      	ldr	r3, [pc, #172]	; (80030f4 <GPS_Poll+0x128>)
 8003046:	695a      	ldr	r2, [r3, #20]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	601a      	str	r2, [r3, #0]
					done = 1;
 800304c:	2301      	movs	r3, #1
 800304e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 8003050:	4b26      	ldr	r3, [pc, #152]	; (80030ec <GPS_Poll+0x120>)
 8003052:	2200      	movs	r2, #0
 8003054:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 8003056:	2264      	movs	r2, #100	; 0x64
 8003058:	2100      	movs	r1, #0
 800305a:	4825      	ldr	r0, [pc, #148]	; (80030f0 <GPS_Poll+0x124>)
 800305c:	f00e fbfe 	bl	801185c <memset>
		}

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS_USART);
 8003060:	2300      	movs	r3, #0
 8003062:	623b      	str	r3, [r7, #32]
 8003064:	4b1f      	ldr	r3, [pc, #124]	; (80030e4 <GPS_Poll+0x118>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	623b      	str	r3, [r7, #32]
 800306e:	4b1d      	ldr	r3, [pc, #116]	; (80030e4 <GPS_Poll+0x118>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	623b      	str	r3, [r7, #32]
 8003078:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS_USART);
 800307a:	2300      	movs	r3, #0
 800307c:	61fb      	str	r3, [r7, #28]
 800307e:	4b19      	ldr	r3, [pc, #100]	; (80030e4 <GPS_Poll+0x118>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	61fb      	str	r3, [r7, #28]
 8003088:	4b16      	ldr	r3, [pc, #88]	; (80030e4 <GPS_Poll+0x118>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	61fb      	str	r3, [r7, #28]
 8003092:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS_USART);
 8003094:	2300      	movs	r3, #0
 8003096:	61bb      	str	r3, [r7, #24]
 8003098:	4b12      	ldr	r3, [pc, #72]	; (80030e4 <GPS_Poll+0x118>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	61bb      	str	r3, [r7, #24]
 80030a2:	4b10      	ldr	r3, [pc, #64]	; (80030e4 <GPS_Poll+0x118>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	61bb      	str	r3, [r7, #24]
 80030ac:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS_USART);
 80030ae:	2300      	movs	r3, #0
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <GPS_Poll+0x118>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	617b      	str	r3, [r7, #20]
 80030bc:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <GPS_Poll+0x118>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	617b      	str	r3, [r7, #20]
 80030c6:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 80030c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80030ca:	3301      	adds	r3, #1
 80030cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 80030ce:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80030d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d202      	bcs.n	80030dc <GPS_Poll+0x110>
 80030d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d084      	beq.n	8002fe6 <GPS_Poll+0x1a>
	}
}
 80030dc:	bf00      	nop
 80030de:	3730      	adds	r7, #48	; 0x30
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	20005a68 	.word	0x20005a68
 80030e8:	20000284 	.word	0x20000284
 80030ec:	20000285 	.word	0x20000285
 80030f0:	20005fe8 	.word	0x20005fe8
 80030f4:	20005f90 	.word	0x20005f90

080030f8 <GPS_validate>:

int GPS_validate(char *nmeastr){
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8003100:	2300      	movs	r3, #0
 8003102:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8003104:	2300      	movs	r3, #0
 8003106:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	4413      	add	r3, r2
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	2b24      	cmp	r3, #36	; 0x24
 8003112:	d103      	bne.n	800311c <GPS_validate+0x24>
        i++;
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	3301      	adds	r3, #1
 8003118:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800311a:	e00c      	b.n	8003136 <GPS_validate+0x3e>
        return 0;
 800311c:	2300      	movs	r3, #0
 800311e:	e047      	b.n	80031b0 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	4413      	add	r3, r2
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	461a      	mov	r2, r3
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	4053      	eors	r3, r2
 800312e:	613b      	str	r3, [r7, #16]
        i++;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	3301      	adds	r3, #1
 8003134:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	4413      	add	r3, r2
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d008      	beq.n	8003154 <GPS_validate+0x5c>
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	4413      	add	r3, r2
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b2a      	cmp	r3, #42	; 0x2a
 800314c:	d002      	beq.n	8003154 <GPS_validate+0x5c>
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	2b4a      	cmp	r3, #74	; 0x4a
 8003152:	dde5      	ble.n	8003120 <GPS_validate+0x28>
    }

    if(i >= 75){
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	2b4a      	cmp	r3, #74	; 0x4a
 8003158:	dd01      	ble.n	800315e <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 800315a:	2300      	movs	r3, #0
 800315c:	e028      	b.n	80031b0 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	4413      	add	r3, r2
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b2a      	cmp	r3, #42	; 0x2a
 8003168:	d119      	bne.n	800319e <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	3301      	adds	r3, #1
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	4413      	add	r3, r2
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	3302      	adds	r3, #2
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	4413      	add	r3, r2
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8003182:	2300      	movs	r3, #0
 8003184:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 8003186:	f107 0308 	add.w	r3, r7, #8
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	490a      	ldr	r1, [pc, #40]	; (80031b8 <GPS_validate+0xc0>)
 800318e:	4618      	mov	r0, r3
 8003190:	f00f fbe2 	bl	8012958 <siprintf>
    return((checkcalcstr[0] == check[0])
 8003194:	7a3a      	ldrb	r2, [r7, #8]
 8003196:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8003198:	429a      	cmp	r2, r3
 800319a:	d108      	bne.n	80031ae <GPS_validate+0xb6>
 800319c:	e001      	b.n	80031a2 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 800319e:	2300      	movs	r3, #0
 80031a0:	e006      	b.n	80031b0 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80031a2:	7a7a      	ldrb	r2, [r7, #9]
 80031a4:	7b7b      	ldrb	r3, [r7, #13]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d101      	bne.n	80031ae <GPS_validate+0xb6>
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <GPS_validate+0xb8>
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	08016a34 	.word	0x08016a34

080031bc <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08a      	sub	sp, #40	; 0x28
 80031c0:	af08      	add	r7, sp, #32
 80031c2:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 80031c4:	2206      	movs	r2, #6
 80031c6:	496d      	ldr	r1, [pc, #436]	; (800337c <GPS_parse+0x1c0>)
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f00f fc56 	bl	8012a7a <strncmp>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d139      	bne.n	8003248 <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 80031d4:	4b6a      	ldr	r3, [pc, #424]	; (8003380 <GPS_parse+0x1c4>)
 80031d6:	9307      	str	r3, [sp, #28]
 80031d8:	4b6a      	ldr	r3, [pc, #424]	; (8003384 <GPS_parse+0x1c8>)
 80031da:	9306      	str	r3, [sp, #24]
 80031dc:	4b6a      	ldr	r3, [pc, #424]	; (8003388 <GPS_parse+0x1cc>)
 80031de:	9305      	str	r3, [sp, #20]
 80031e0:	4b6a      	ldr	r3, [pc, #424]	; (800338c <GPS_parse+0x1d0>)
 80031e2:	9304      	str	r3, [sp, #16]
 80031e4:	4b6a      	ldr	r3, [pc, #424]	; (8003390 <GPS_parse+0x1d4>)
 80031e6:	9303      	str	r3, [sp, #12]
 80031e8:	4b6a      	ldr	r3, [pc, #424]	; (8003394 <GPS_parse+0x1d8>)
 80031ea:	9302      	str	r3, [sp, #8]
 80031ec:	4b6a      	ldr	r3, [pc, #424]	; (8003398 <GPS_parse+0x1dc>)
 80031ee:	9301      	str	r3, [sp, #4]
 80031f0:	4b6a      	ldr	r3, [pc, #424]	; (800339c <GPS_parse+0x1e0>)
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	4b6a      	ldr	r3, [pc, #424]	; (80033a0 <GPS_parse+0x1e4>)
 80031f6:	4a6b      	ldr	r2, [pc, #428]	; (80033a4 <GPS_parse+0x1e8>)
 80031f8:	496b      	ldr	r1, [pc, #428]	; (80033a8 <GPS_parse+0x1ec>)
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f00f fbcc 	bl	8012998 <siscanf>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	f340 80b5 	ble.w	8003372 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8003208:	4b68      	ldr	r3, [pc, #416]	; (80033ac <GPS_parse+0x1f0>)
 800320a:	edd3 7a04 	vldr	s15, [r3, #16]
 800320e:	4b67      	ldr	r3, [pc, #412]	; (80033ac <GPS_parse+0x1f0>)
 8003210:	7e1b      	ldrb	r3, [r3, #24]
 8003212:	4618      	mov	r0, r3
 8003214:	eeb0 0a67 	vmov.f32	s0, s15
 8003218:	f000 f8ec 	bl	80033f4 <GPS_nmea_to_dec>
 800321c:	eef0 7a40 	vmov.f32	s15, s0
 8003220:	4b62      	ldr	r3, [pc, #392]	; (80033ac <GPS_parse+0x1f0>)
 8003222:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8003226:	4b61      	ldr	r3, [pc, #388]	; (80033ac <GPS_parse+0x1f0>)
 8003228:	edd3 7a03 	vldr	s15, [r3, #12]
 800322c:	4b5f      	ldr	r3, [pc, #380]	; (80033ac <GPS_parse+0x1f0>)
 800322e:	7e5b      	ldrb	r3, [r3, #25]
 8003230:	4618      	mov	r0, r3
 8003232:	eeb0 0a67 	vmov.f32	s0, s15
 8003236:	f000 f8dd 	bl	80033f4 <GPS_nmea_to_dec>
 800323a:	eef0 7a40 	vmov.f32	s15, s0
 800323e:	4b5b      	ldr	r3, [pc, #364]	; (80033ac <GPS_parse+0x1f0>)
 8003240:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8003244:	2301      	movs	r3, #1
 8003246:	e095      	b.n	8003374 <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 8003248:	2206      	movs	r2, #6
 800324a:	4959      	ldr	r1, [pc, #356]	; (80033b0 <GPS_parse+0x1f4>)
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f00f fc14 	bl	8012a7a <strncmp>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d134      	bne.n	80032c2 <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 8003258:	4b56      	ldr	r3, [pc, #344]	; (80033b4 <GPS_parse+0x1f8>)
 800325a:	9305      	str	r3, [sp, #20]
 800325c:	4b56      	ldr	r3, [pc, #344]	; (80033b8 <GPS_parse+0x1fc>)
 800325e:	9304      	str	r3, [sp, #16]
 8003260:	4b56      	ldr	r3, [pc, #344]	; (80033bc <GPS_parse+0x200>)
 8003262:	9303      	str	r3, [sp, #12]
 8003264:	4b4b      	ldr	r3, [pc, #300]	; (8003394 <GPS_parse+0x1d8>)
 8003266:	9302      	str	r3, [sp, #8]
 8003268:	4b4b      	ldr	r3, [pc, #300]	; (8003398 <GPS_parse+0x1dc>)
 800326a:	9301      	str	r3, [sp, #4]
 800326c:	4b4b      	ldr	r3, [pc, #300]	; (800339c <GPS_parse+0x1e0>)
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	4b4b      	ldr	r3, [pc, #300]	; (80033a0 <GPS_parse+0x1e4>)
 8003272:	4a4c      	ldr	r2, [pc, #304]	; (80033a4 <GPS_parse+0x1e8>)
 8003274:	4952      	ldr	r1, [pc, #328]	; (80033c0 <GPS_parse+0x204>)
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f00f fb8e 	bl	8012998 <siscanf>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	dd77      	ble.n	8003372 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8003282:	4b4a      	ldr	r3, [pc, #296]	; (80033ac <GPS_parse+0x1f0>)
 8003284:	edd3 7a04 	vldr	s15, [r3, #16]
 8003288:	4b48      	ldr	r3, [pc, #288]	; (80033ac <GPS_parse+0x1f0>)
 800328a:	7e1b      	ldrb	r3, [r3, #24]
 800328c:	4618      	mov	r0, r3
 800328e:	eeb0 0a67 	vmov.f32	s0, s15
 8003292:	f000 f8af 	bl	80033f4 <GPS_nmea_to_dec>
 8003296:	eef0 7a40 	vmov.f32	s15, s0
 800329a:	4b44      	ldr	r3, [pc, #272]	; (80033ac <GPS_parse+0x1f0>)
 800329c:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80032a0:	4b42      	ldr	r3, [pc, #264]	; (80033ac <GPS_parse+0x1f0>)
 80032a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80032a6:	4b41      	ldr	r3, [pc, #260]	; (80033ac <GPS_parse+0x1f0>)
 80032a8:	7e5b      	ldrb	r3, [r3, #25]
 80032aa:	4618      	mov	r0, r3
 80032ac:	eeb0 0a67 	vmov.f32	s0, s15
 80032b0:	f000 f8a0 	bl	80033f4 <GPS_nmea_to_dec>
 80032b4:	eef0 7a40 	vmov.f32	s15, s0
 80032b8:	4b3c      	ldr	r3, [pc, #240]	; (80033ac <GPS_parse+0x1f0>)
 80032ba:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 80032be:	2301      	movs	r3, #1
 80032c0:	e058      	b.n	8003374 <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 80032c2:	2206      	movs	r2, #6
 80032c4:	493f      	ldr	r1, [pc, #252]	; (80033c4 <GPS_parse+0x208>)
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f00f fbd7 	bl	8012a7a <strncmp>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d130      	bne.n	8003334 <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 80032d2:	4b3d      	ldr	r3, [pc, #244]	; (80033c8 <GPS_parse+0x20c>)
 80032d4:	9303      	str	r3, [sp, #12]
 80032d6:	4b33      	ldr	r3, [pc, #204]	; (80033a4 <GPS_parse+0x1e8>)
 80032d8:	9302      	str	r3, [sp, #8]
 80032da:	4b2e      	ldr	r3, [pc, #184]	; (8003394 <GPS_parse+0x1d8>)
 80032dc:	9301      	str	r3, [sp, #4]
 80032de:	4b2e      	ldr	r3, [pc, #184]	; (8003398 <GPS_parse+0x1dc>)
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	4b2e      	ldr	r3, [pc, #184]	; (800339c <GPS_parse+0x1e0>)
 80032e4:	4a2e      	ldr	r2, [pc, #184]	; (80033a0 <GPS_parse+0x1e4>)
 80032e6:	4939      	ldr	r1, [pc, #228]	; (80033cc <GPS_parse+0x210>)
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f00f fb55 	bl	8012998 <siscanf>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	dd3e      	ble.n	8003372 <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80032f4:	4b2d      	ldr	r3, [pc, #180]	; (80033ac <GPS_parse+0x1f0>)
 80032f6:	edd3 7a04 	vldr	s15, [r3, #16]
 80032fa:	4b2c      	ldr	r3, [pc, #176]	; (80033ac <GPS_parse+0x1f0>)
 80032fc:	7e1b      	ldrb	r3, [r3, #24]
 80032fe:	4618      	mov	r0, r3
 8003300:	eeb0 0a67 	vmov.f32	s0, s15
 8003304:	f000 f876 	bl	80033f4 <GPS_nmea_to_dec>
 8003308:	eef0 7a40 	vmov.f32	s15, s0
 800330c:	4b27      	ldr	r3, [pc, #156]	; (80033ac <GPS_parse+0x1f0>)
 800330e:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8003312:	4b26      	ldr	r3, [pc, #152]	; (80033ac <GPS_parse+0x1f0>)
 8003314:	edd3 7a03 	vldr	s15, [r3, #12]
 8003318:	4b24      	ldr	r3, [pc, #144]	; (80033ac <GPS_parse+0x1f0>)
 800331a:	7e5b      	ldrb	r3, [r3, #25]
 800331c:	4618      	mov	r0, r3
 800331e:	eeb0 0a67 	vmov.f32	s0, s15
 8003322:	f000 f867 	bl	80033f4 <GPS_nmea_to_dec>
 8003326:	eef0 7a40 	vmov.f32	s15, s0
 800332a:	4b20      	ldr	r3, [pc, #128]	; (80033ac <GPS_parse+0x1f0>)
 800332c:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 8003330:	2301      	movs	r3, #1
 8003332:	e01f      	b.n	8003374 <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 8003334:	2206      	movs	r2, #6
 8003336:	4926      	ldr	r1, [pc, #152]	; (80033d0 <GPS_parse+0x214>)
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f00f fb9e 	bl	8012a7a <strncmp>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d116      	bne.n	8003372 <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8003344:	4b23      	ldr	r3, [pc, #140]	; (80033d4 <GPS_parse+0x218>)
 8003346:	9305      	str	r3, [sp, #20]
 8003348:	4b23      	ldr	r3, [pc, #140]	; (80033d8 <GPS_parse+0x21c>)
 800334a:	9304      	str	r3, [sp, #16]
 800334c:	4b23      	ldr	r3, [pc, #140]	; (80033dc <GPS_parse+0x220>)
 800334e:	9303      	str	r3, [sp, #12]
 8003350:	4b1a      	ldr	r3, [pc, #104]	; (80033bc <GPS_parse+0x200>)
 8003352:	9302      	str	r3, [sp, #8]
 8003354:	4b22      	ldr	r3, [pc, #136]	; (80033e0 <GPS_parse+0x224>)
 8003356:	9301      	str	r3, [sp, #4]
 8003358:	4b22      	ldr	r3, [pc, #136]	; (80033e4 <GPS_parse+0x228>)
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	4b22      	ldr	r3, [pc, #136]	; (80033e8 <GPS_parse+0x22c>)
 800335e:	4a23      	ldr	r2, [pc, #140]	; (80033ec <GPS_parse+0x230>)
 8003360:	4923      	ldr	r1, [pc, #140]	; (80033f0 <GPS_parse+0x234>)
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f00f fb18 	bl	8012998 <siscanf>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	dd01      	ble.n	8003372 <GPS_parse+0x1b6>
            return 0;
 800336e:	2300      	movs	r3, #0
 8003370:	e000      	b.n	8003374 <GPS_parse+0x1b8>
    }
    return 0;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	08016a3c 	.word	0x08016a3c
 8003380:	20005fbc 	.word	0x20005fbc
 8003384:	20005fb8 	.word	0x20005fb8
 8003388:	20005fb4 	.word	0x20005fb4
 800338c:	20005fb0 	.word	0x20005fb0
 8003390:	20005fac 	.word	0x20005fac
 8003394:	20005fa9 	.word	0x20005fa9
 8003398:	20005f9c 	.word	0x20005f9c
 800339c:	20005fa8 	.word	0x20005fa8
 80033a0:	20005fa0 	.word	0x20005fa0
 80033a4:	20005fa4 	.word	0x20005fa4
 80033a8:	08016a44 	.word	0x08016a44
 80033ac:	20005f90 	.word	0x20005f90
 80033b0:	08016a6c 	.word	0x08016a6c
 80033b4:	20005fc8 	.word	0x20005fc8
 80033b8:	20005fc4 	.word	0x20005fc4
 80033bc:	20005fc0 	.word	0x20005fc0
 80033c0:	08016a74 	.word	0x08016a74
 80033c4:	08016a94 	.word	0x08016a94
 80033c8:	20005fcc 	.word	0x20005fcc
 80033cc:	08016a9c 	.word	0x08016a9c
 80033d0:	08016ab8 	.word	0x08016ab8
 80033d4:	20005fe4 	.word	0x20005fe4
 80033d8:	20005fe0 	.word	0x20005fe0
 80033dc:	20005fdd 	.word	0x20005fdd
 80033e0:	20005fdc 	.word	0x20005fdc
 80033e4:	20005fd8 	.word	0x20005fd8
 80033e8:	20005fd4 	.word	0x20005fd4
 80033ec:	20005fd0 	.word	0x20005fd0
 80033f0:	08016ac0 	.word	0x08016ac0

080033f4 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	ed87 0a01 	vstr	s0, [r7, #4]
 80033fe:	4603      	mov	r3, r0
 8003400:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8003402:	ed97 7a01 	vldr	s14, [r7, #4]
 8003406:	eddf 6a20 	vldr	s13, [pc, #128]	; 8003488 <GPS_nmea_to_dec+0x94>
 800340a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800340e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003412:	ee17 3a90 	vmov	r3, s15
 8003416:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	2264      	movs	r2, #100	; 0x64
 800341c:	fb02 f303 	mul.w	r3, r2, r3
 8003420:	ee07 3a90 	vmov	s15, r3
 8003424:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003428:	ed97 7a01 	vldr	s14, [r7, #4]
 800342c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003430:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8003434:	ed97 7a03 	vldr	s14, [r7, #12]
 8003438:	eddf 6a14 	vldr	s13, [pc, #80]	; 800348c <GPS_nmea_to_dec+0x98>
 800343c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003440:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	ee07 3a90 	vmov	s15, r3
 800344a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800344e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003452:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003456:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 800345a:	78fb      	ldrb	r3, [r7, #3]
 800345c:	2b53      	cmp	r3, #83	; 0x53
 800345e:	d002      	beq.n	8003466 <GPS_nmea_to_dec+0x72>
 8003460:	78fb      	ldrb	r3, [r7, #3]
 8003462:	2b57      	cmp	r3, #87	; 0x57
 8003464:	d105      	bne.n	8003472 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8003466:	edd7 7a05 	vldr	s15, [r7, #20]
 800346a:	eef1 7a67 	vneg.f32	s15, s15
 800346e:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	ee07 3a90 	vmov	s15, r3
}
 8003478:	eeb0 0a67 	vmov.f32	s0, s15
 800347c:	371c      	adds	r7, #28
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	42c80000 	.word	0x42c80000
 800348c:	42700000 	.word	0x42700000

08003490 <GPS_init>:

/*
 * TODO MRT code
 */

void GPS_init(UART_HandleTypeDef* data_uart, UART_HandleTypeDef* transmit_uart){
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
	GPS_USART = data_uart;
 800349a:	4a09      	ldr	r2, [pc, #36]	; (80034c0 <GPS_init+0x30>)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6013      	str	r3, [r2, #0]
	SERIAL_USART = transmit_uart;
 80034a0:	4a08      	ldr	r2, [pc, #32]	; (80034c4 <GPS_init+0x34>)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(SERIAL_USART,"\r\n\r\nGPS Init\r\n\r\n",16,HAL_MAX_DELAY);
 80034a6:	4b07      	ldr	r3, [pc, #28]	; (80034c4 <GPS_init+0x34>)
 80034a8:	6818      	ldr	r0, [r3, #0]
 80034aa:	f04f 33ff 	mov.w	r3, #4294967295
 80034ae:	2210      	movs	r2, #16
 80034b0:	4905      	ldr	r1, [pc, #20]	; (80034c8 <GPS_init+0x38>)
 80034b2:	f009 f9d6 	bl	800c862 <HAL_UART_Transmit>
}
 80034b6:	bf00      	nop
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20005a68 	.word	0x20005a68
 80034c4:	2000604c 	.word	0x2000604c
 80034c8:	08016ae0 	.word	0x08016ae0

080034cc <__NVIC_SystemReset>:
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80034d0:	f3bf 8f4f 	dsb	sy
}
 80034d4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80034d6:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <__NVIC_SystemReset+0x24>)
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80034de:	4904      	ldr	r1, [pc, #16]	; (80034f0 <__NVIC_SystemReset+0x24>)
 80034e0:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <__NVIC_SystemReset+0x28>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80034e6:	f3bf 8f4f 	dsb	sy
}
 80034ea:	bf00      	nop
    __NOP();
 80034ec:	bf00      	nop
 80034ee:	e7fd      	b.n	80034ec <__NVIC_SystemReset+0x20>
 80034f0:	e000ed00 	.word	0xe000ed00
 80034f4:	05fa0004 	.word	0x05fa0004

080034f8 <MRT_externalFlashSetup>:


/*
 * User functions
 */
void MRT_externalFlashSetup(UART_HandleTypeDef* uart){
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003500:	2300      	movs	r3, #0
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	e007      	b.n	8003516 <MRT_externalFlashSetup+0x1e>
		FLAGS_NULL_BUFFER[i] = 0; //Setup the flags null buffer for the correct number of values
 8003506:	4a10      	ldr	r2, [pc, #64]	; (8003548 <MRT_externalFlashSetup+0x50>)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	4413      	add	r3, r2
 800350c:	2200      	movs	r2, #0
 800350e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	3301      	adds	r3, #1
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2b02      	cmp	r3, #2
 800351a:	ddf4      	ble.n	8003506 <MRT_externalFlashSetup+0xe>
	}

	if (!W25qxx_Init()) {
 800351c:	f000 fb5e 	bl	8003bdc <W25qxx_Init>
 8003520:	4603      	mov	r3, r0
 8003522:	f083 0301 	eor.w	r3, r3, #1
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <MRT_externalFlashSetup+0x38>
		Error_Handler(); // hangs and blinks LEDF
 800352c:	f7ff f876 	bl	800261c <Error_Handler>
	}
	MRT_WUProcedure(); //Needs to be called before getFlags() and after the W25xx_Init()
 8003530:	f004 f89a 	bl	8007668 <MRT_WUProcedure>
	MRT_getFlags();
 8003534:	f000 f86c 	bl	8003610 <MRT_getFlags>
	MRT_resetInfo(uart);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 f949 	bl	80037d0 <MRT_resetInfo>
}
 800353e:	bf00      	nop
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	20006050 	.word	0x20006050

0800354c <HAL_GPIO_EXTI_Callback>:


/*
 * Helper functions
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	4603      	mov	r3, r0
 8003554:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == IN_Button_Pin){
 8003556:	88fb      	ldrh	r3, [r7, #6]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_GPIO_EXTI_Callback+0x14>
		//Manual reset from external button
		MRT_resetFromStart();
 800355c:	f000 f804 	bl	8003568 <MRT_resetFromStart>
	}

}
 8003560:	bf00      	nop
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <MRT_resetFromStart>:


void MRT_resetFromStart(void){
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
	//Clear wakeup and reset flags
	W25qxx_EraseSector(1);
 800356c:	2001      	movs	r0, #1
 800356e:	f000 fc87 	bl	8003e80 <W25qxx_EraseSector>
	W25qxx_WriteSector(FLAGS_NULL_BUFFER, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003572:	2303      	movs	r3, #3
 8003574:	2200      	movs	r2, #0
 8003576:	2101      	movs	r1, #1
 8003578:	4807      	ldr	r0, [pc, #28]	; (8003598 <MRT_resetFromStart+0x30>)
 800357a:	f000 fdcb 	bl	8004114 <W25qxx_WriteSector>

	//Clear RTC time (last recorded)
	W25qxx_EraseSector(2);
 800357e:	2002      	movs	r0, #2
 8003580:	f000 fc7e 	bl	8003e80 <W25qxx_EraseSector>
	W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, 2, RTC_TIME_OFFSET, 3);
 8003584:	2303      	movs	r3, #3
 8003586:	2200      	movs	r2, #0
 8003588:	2102      	movs	r1, #2
 800358a:	4804      	ldr	r0, [pc, #16]	; (800359c <MRT_resetFromStart+0x34>)
 800358c:	f000 fdc2 	bl	8004114 <W25qxx_WriteSector>

	//Clear all saved data of stages
	//TODO

	//Shutdown Iridium
	MRT_Static_Iridium_Shutdown();
 8003590:	f002 fc5c 	bl	8005e4c <MRT_Static_Iridium_Shutdown>

	//Reset function
	NVIC_SystemReset();
 8003594:	f7ff ff9a 	bl	80034cc <__NVIC_SystemReset>
 8003598:	20006050 	.word	0x20006050
 800359c:	2000028c 	.word	0x2000028c

080035a0 <MRT_updateExternalFlashBuffers>:
}


void MRT_updateExternalFlashBuffers(void){
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 80035a6:	2300      	movs	r3, #0
 80035a8:	607b      	str	r3, [r7, #4]
 80035aa:	e00c      	b.n	80035c6 <MRT_updateExternalFlashBuffers+0x26>
		flash_flags_buffer[i] = *flash_flags[i];
 80035ac:	4a14      	ldr	r2, [pc, #80]	; (8003600 <MRT_updateExternalFlashBuffers+0x60>)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b4:	7819      	ldrb	r1, [r3, #0]
 80035b6:	4a13      	ldr	r2, [pc, #76]	; (8003604 <MRT_updateExternalFlashBuffers+0x64>)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4413      	add	r3, r2
 80035bc:	460a      	mov	r2, r1
 80035be:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3301      	adds	r3, #1
 80035c4:	607b      	str	r3, [r7, #4]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	ddef      	ble.n	80035ac <MRT_updateExternalFlashBuffers+0xc>
	}
	for (int i = 0; i < 3; i++){
 80035cc:	2300      	movs	r3, #0
 80035ce:	603b      	str	r3, [r7, #0]
 80035d0:	e00c      	b.n	80035ec <MRT_updateExternalFlashBuffers+0x4c>
		flash_time_buffer[i] = *flash_time[i];
 80035d2:	4a0d      	ldr	r2, [pc, #52]	; (8003608 <MRT_updateExternalFlashBuffers+0x68>)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035da:	7819      	ldrb	r1, [r3, #0]
 80035dc:	4a0b      	ldr	r2, [pc, #44]	; (800360c <MRT_updateExternalFlashBuffers+0x6c>)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	4413      	add	r3, r2
 80035e2:	460a      	mov	r2, r1
 80035e4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++){
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	3301      	adds	r3, #1
 80035ea:	603b      	str	r3, [r7, #0]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	ddef      	ble.n	80035d2 <MRT_updateExternalFlashBuffers+0x32>
	}
}
 80035f2:	bf00      	nop
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	20000004 	.word	0x20000004
 8003604:	20005b0c 	.word	0x20005b0c
 8003608:	20000010 	.word	0x20000010
 800360c:	20005c3c 	.word	0x20005c3c

08003610 <MRT_getFlags>:


void MRT_getFlags(void){
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0

	//Retrieve flags
	W25qxx_ReadSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003616:	2303      	movs	r3, #3
 8003618:	2200      	movs	r2, #0
 800361a:	2101      	movs	r1, #1
 800361c:	4862      	ldr	r0, [pc, #392]	; (80037a8 <MRT_getFlags+0x198>)
 800361e:	f000 feb7 	bl	8004390 <W25qxx_ReadSector>

	//Retrieve RTC time (last recorded)
	W25qxx_ReadSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003622:	2303      	movs	r3, #3
 8003624:	2200      	movs	r2, #0
 8003626:	2102      	movs	r1, #2
 8003628:	4860      	ldr	r0, [pc, #384]	; (80037ac <MRT_getFlags+0x19c>)
 800362a:	f000 feb1 	bl	8004390 <W25qxx_ReadSector>

	//If RTC detected a wake up, update the flash memory
	if (wu_flag == 1){
 800362e:	4b60      	ldr	r3, [pc, #384]	; (80037b0 <MRT_getFlags+0x1a0>)
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d10c      	bne.n	8003650 <MRT_getFlags+0x40>
		flash_flags_buffer[WU_FLAG_OFFSET] = wu_flag;
 8003636:	4b5e      	ldr	r3, [pc, #376]	; (80037b0 <MRT_getFlags+0x1a0>)
 8003638:	781a      	ldrb	r2, [r3, #0]
 800363a:	4b5b      	ldr	r3, [pc, #364]	; (80037a8 <MRT_getFlags+0x198>)
 800363c:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 800363e:	2001      	movs	r0, #1
 8003640:	f000 fc1e 	bl	8003e80 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003644:	2303      	movs	r3, #3
 8003646:	2200      	movs	r2, #0
 8003648:	2101      	movs	r1, #1
 800364a:	4857      	ldr	r0, [pc, #348]	; (80037a8 <MRT_getFlags+0x198>)
 800364c:	f000 fd62 	bl	8004114 <W25qxx_WriteSector>
	}

	//Assign each value read to their variable
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003650:	2300      	movs	r3, #0
 8003652:	607b      	str	r3, [r7, #4]
 8003654:	e00b      	b.n	800366e <MRT_getFlags+0x5e>
		*flash_flags[i] = flash_flags_buffer[i];
 8003656:	4a57      	ldr	r2, [pc, #348]	; (80037b4 <MRT_getFlags+0x1a4>)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800365e:	4952      	ldr	r1, [pc, #328]	; (80037a8 <MRT_getFlags+0x198>)
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	440a      	add	r2, r1
 8003664:	7812      	ldrb	r2, [r2, #0]
 8003666:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3301      	adds	r3, #1
 800366c:	607b      	str	r3, [r7, #4]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b02      	cmp	r3, #2
 8003672:	ddf0      	ble.n	8003656 <MRT_getFlags+0x46>
	}
	for (int i = 0; i < 3; i++){
 8003674:	2300      	movs	r3, #0
 8003676:	603b      	str	r3, [r7, #0]
 8003678:	e00b      	b.n	8003692 <MRT_getFlags+0x82>
		*flash_time[i] = flash_time_buffer[i];
 800367a:	4a4f      	ldr	r2, [pc, #316]	; (80037b8 <MRT_getFlags+0x1a8>)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003682:	494a      	ldr	r1, [pc, #296]	; (80037ac <MRT_getFlags+0x19c>)
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	440a      	add	r2, r1
 8003688:	7812      	ldrb	r2, [r2, #0]
 800368a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++){
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	3301      	adds	r3, #1
 8003690:	603b      	str	r3, [r7, #0]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2b02      	cmp	r3, #2
 8003696:	ddf0      	ble.n	800367a <MRT_getFlags+0x6a>
	}


	//Check flags values
	//Reset flag
	if (reset_flag != 0 && reset_flag !=1){ //If random value (none was written)
 8003698:	4b48      	ldr	r3, [pc, #288]	; (80037bc <MRT_getFlags+0x1ac>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d013      	beq.n	80036c8 <MRT_getFlags+0xb8>
 80036a0:	4b46      	ldr	r3, [pc, #280]	; (80037bc <MRT_getFlags+0x1ac>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d00f      	beq.n	80036c8 <MRT_getFlags+0xb8>
		reset_flag = 0;
 80036a8:	4b44      	ldr	r3, [pc, #272]	; (80037bc <MRT_getFlags+0x1ac>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 80036ae:	4b43      	ldr	r3, [pc, #268]	; (80037bc <MRT_getFlags+0x1ac>)
 80036b0:	781a      	ldrb	r2, [r3, #0]
 80036b2:	4b3d      	ldr	r3, [pc, #244]	; (80037a8 <MRT_getFlags+0x198>)
 80036b4:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(1);
 80036b6:	2001      	movs	r0, #1
 80036b8:	f000 fbe2 	bl	8003e80 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80036bc:	2303      	movs	r3, #3
 80036be:	2200      	movs	r2, #0
 80036c0:	2101      	movs	r1, #1
 80036c2:	4839      	ldr	r0, [pc, #228]	; (80037a8 <MRT_getFlags+0x198>)
 80036c4:	f000 fd26 	bl	8004114 <W25qxx_WriteSector>
	}

	//Wake up flag
	if (wu_flag != 0 && wu_flag !=1){ //If random value (none was written)
 80036c8:	4b39      	ldr	r3, [pc, #228]	; (80037b0 <MRT_getFlags+0x1a0>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d013      	beq.n	80036f8 <MRT_getFlags+0xe8>
 80036d0:	4b37      	ldr	r3, [pc, #220]	; (80037b0 <MRT_getFlags+0x1a0>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d00f      	beq.n	80036f8 <MRT_getFlags+0xe8>
		wu_flag = 0;
 80036d8:	4b35      	ldr	r3, [pc, #212]	; (80037b0 <MRT_getFlags+0x1a0>)
 80036da:	2200      	movs	r2, #0
 80036dc:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[WU_FLAG_OFFSET] = wu_flag;
 80036de:	4b34      	ldr	r3, [pc, #208]	; (80037b0 <MRT_getFlags+0x1a0>)
 80036e0:	781a      	ldrb	r2, [r3, #0]
 80036e2:	4b31      	ldr	r3, [pc, #196]	; (80037a8 <MRT_getFlags+0x198>)
 80036e4:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 80036e6:	2001      	movs	r0, #1
 80036e8:	f000 fbca 	bl	8003e80 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80036ec:	2303      	movs	r3, #3
 80036ee:	2200      	movs	r2, #0
 80036f0:	2101      	movs	r1, #1
 80036f2:	482d      	ldr	r0, [pc, #180]	; (80037a8 <MRT_getFlags+0x198>)
 80036f4:	f000 fd0e 	bl	8004114 <W25qxx_WriteSector>
	}

	//IWDG flag
	if (iwdg_flag != 0 && iwdg_flag !=1){ //If random value (none was written)
 80036f8:	4b31      	ldr	r3, [pc, #196]	; (80037c0 <MRT_getFlags+0x1b0>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d013      	beq.n	8003728 <MRT_getFlags+0x118>
 8003700:	4b2f      	ldr	r3, [pc, #188]	; (80037c0 <MRT_getFlags+0x1b0>)
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d00f      	beq.n	8003728 <MRT_getFlags+0x118>
		iwdg_flag = 0;
 8003708:	4b2d      	ldr	r3, [pc, #180]	; (80037c0 <MRT_getFlags+0x1b0>)
 800370a:	2200      	movs	r2, #0
 800370c:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 800370e:	4b2c      	ldr	r3, [pc, #176]	; (80037c0 <MRT_getFlags+0x1b0>)
 8003710:	781a      	ldrb	r2, [r3, #0]
 8003712:	4b25      	ldr	r3, [pc, #148]	; (80037a8 <MRT_getFlags+0x198>)
 8003714:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(1);
 8003716:	2001      	movs	r0, #1
 8003718:	f000 fbb2 	bl	8003e80 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 800371c:	2303      	movs	r3, #3
 800371e:	2200      	movs	r2, #0
 8003720:	2101      	movs	r1, #1
 8003722:	4821      	ldr	r0, [pc, #132]	; (80037a8 <MRT_getFlags+0x198>)
 8003724:	f000 fcf6 	bl	8004114 <W25qxx_WriteSector>
	}


	//Check RTC time values
	//Hours
	if (!(prev_hours >= 0 && prev_hours < 24)){ //If random value (none was written)
 8003728:	4b26      	ldr	r3, [pc, #152]	; (80037c4 <MRT_getFlags+0x1b4>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b17      	cmp	r3, #23
 800372e:	d90f      	bls.n	8003750 <MRT_getFlags+0x140>
		prev_hours = 0;
 8003730:	4b24      	ldr	r3, [pc, #144]	; (80037c4 <MRT_getFlags+0x1b4>)
 8003732:	2200      	movs	r2, #0
 8003734:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_HOURS_OFFSET] = prev_hours;
 8003736:	4b23      	ldr	r3, [pc, #140]	; (80037c4 <MRT_getFlags+0x1b4>)
 8003738:	781a      	ldrb	r2, [r3, #0]
 800373a:	4b1c      	ldr	r3, [pc, #112]	; (80037ac <MRT_getFlags+0x19c>)
 800373c:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(2);
 800373e:	2002      	movs	r0, #2
 8003740:	f000 fb9e 	bl	8003e80 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003744:	2303      	movs	r3, #3
 8003746:	2200      	movs	r2, #0
 8003748:	2102      	movs	r1, #2
 800374a:	4818      	ldr	r0, [pc, #96]	; (80037ac <MRT_getFlags+0x19c>)
 800374c:	f000 fce2 	bl	8004114 <W25qxx_WriteSector>
	}

	//Minutes
	if (!(prev_min >= 0 && prev_min < 60)){ //If random value (none was written)
 8003750:	4b1d      	ldr	r3, [pc, #116]	; (80037c8 <MRT_getFlags+0x1b8>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	2b3b      	cmp	r3, #59	; 0x3b
 8003756:	d90f      	bls.n	8003778 <MRT_getFlags+0x168>
		prev_min = 0;
 8003758:	4b1b      	ldr	r3, [pc, #108]	; (80037c8 <MRT_getFlags+0x1b8>)
 800375a:	2200      	movs	r2, #0
 800375c:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_MIN_OFFSET] = prev_min;
 800375e:	4b1a      	ldr	r3, [pc, #104]	; (80037c8 <MRT_getFlags+0x1b8>)
 8003760:	781a      	ldrb	r2, [r3, #0]
 8003762:	4b12      	ldr	r3, [pc, #72]	; (80037ac <MRT_getFlags+0x19c>)
 8003764:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(2);
 8003766:	2002      	movs	r0, #2
 8003768:	f000 fb8a 	bl	8003e80 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 800376c:	2303      	movs	r3, #3
 800376e:	2200      	movs	r2, #0
 8003770:	2102      	movs	r1, #2
 8003772:	480e      	ldr	r0, [pc, #56]	; (80037ac <MRT_getFlags+0x19c>)
 8003774:	f000 fcce 	bl	8004114 <W25qxx_WriteSector>
	}

	//Seconds
	if (!(prev_sec >= 0 && prev_sec < 60)){ //If random value (none was written)
 8003778:	4b14      	ldr	r3, [pc, #80]	; (80037cc <MRT_getFlags+0x1bc>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	2b3b      	cmp	r3, #59	; 0x3b
 800377e:	d90f      	bls.n	80037a0 <MRT_getFlags+0x190>
		prev_sec = 0;
 8003780:	4b12      	ldr	r3, [pc, #72]	; (80037cc <MRT_getFlags+0x1bc>)
 8003782:	2200      	movs	r2, #0
 8003784:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_SEC_OFFSET] = prev_sec;
 8003786:	4b11      	ldr	r3, [pc, #68]	; (80037cc <MRT_getFlags+0x1bc>)
 8003788:	781a      	ldrb	r2, [r3, #0]
 800378a:	4b08      	ldr	r3, [pc, #32]	; (80037ac <MRT_getFlags+0x19c>)
 800378c:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(2);
 800378e:	2002      	movs	r0, #2
 8003790:	f000 fb76 	bl	8003e80 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003794:	2303      	movs	r3, #3
 8003796:	2200      	movs	r2, #0
 8003798:	2102      	movs	r1, #2
 800379a:	4804      	ldr	r0, [pc, #16]	; (80037ac <MRT_getFlags+0x19c>)
 800379c:	f000 fcba 	bl	8004114 <W25qxx_WriteSector>
	}
}
 80037a0:	bf00      	nop
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	20005b0c 	.word	0x20005b0c
 80037ac:	20005c3c 	.word	0x20005c3c
 80037b0:	200004bd 	.word	0x200004bd
 80037b4:	20000004 	.word	0x20000004
 80037b8:	20000010 	.word	0x20000010
 80037bc:	20000286 	.word	0x20000286
 80037c0:	20000287 	.word	0x20000287
 80037c4:	20000288 	.word	0x20000288
 80037c8:	20000289 	.word	0x20000289
 80037cc:	2000028a 	.word	0x2000028a

080037d0 <MRT_resetInfo>:


void MRT_resetInfo(UART_HandleTypeDef* uart){
 80037d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037d2:	b0a1      	sub	sp, #132	; 0x84
 80037d4:	af04      	add	r7, sp, #16
 80037d6:	6078      	str	r0, [r7, #4]

	  char buffer[100];
	  sprintf(buffer,"Reset: %i,  WU: %i,  IWDG: %i\r\nPrevious RTC time: %i:%i:%i\r\n",reset_flag, wu_flag, iwdg_flag, prev_hours, prev_min, prev_sec);
 80037d8:	4b3f      	ldr	r3, [pc, #252]	; (80038d8 <MRT_resetInfo+0x108>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	461d      	mov	r5, r3
 80037de:	4b3f      	ldr	r3, [pc, #252]	; (80038dc <MRT_resetInfo+0x10c>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	461e      	mov	r6, r3
 80037e4:	4b3e      	ldr	r3, [pc, #248]	; (80038e0 <MRT_resetInfo+0x110>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	461a      	mov	r2, r3
 80037ea:	4b3e      	ldr	r3, [pc, #248]	; (80038e4 <MRT_resetInfo+0x114>)
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	4619      	mov	r1, r3
 80037f0:	4b3d      	ldr	r3, [pc, #244]	; (80038e8 <MRT_resetInfo+0x118>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	461c      	mov	r4, r3
 80037f6:	4b3d      	ldr	r3, [pc, #244]	; (80038ec <MRT_resetInfo+0x11c>)
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	f107 000c 	add.w	r0, r7, #12
 80037fe:	9303      	str	r3, [sp, #12]
 8003800:	9402      	str	r4, [sp, #8]
 8003802:	9101      	str	r1, [sp, #4]
 8003804:	9200      	str	r2, [sp, #0]
 8003806:	4633      	mov	r3, r6
 8003808:	462a      	mov	r2, r5
 800380a:	4939      	ldr	r1, [pc, #228]	; (80038f0 <MRT_resetInfo+0x120>)
 800380c:	f00f f8a4 	bl	8012958 <siprintf>
	  HAL_UART_Transmit(uart, buffer, strlen(buffer), HAL_MAX_DELAY);
 8003810:	f107 030c 	add.w	r3, r7, #12
 8003814:	4618      	mov	r0, r3
 8003816:	f7fc fceb 	bl	80001f0 <strlen>
 800381a:	4603      	mov	r3, r0
 800381c:	b29a      	uxth	r2, r3
 800381e:	f107 010c 	add.w	r1, r7, #12
 8003822:	f04f 33ff 	mov.w	r3, #4294967295
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f009 f81b 	bl	800c862 <HAL_UART_Transmit>

	  //Check if IWDG is being deactivated
	  if (iwdg_flag==1){
 800382c:	4b2c      	ldr	r3, [pc, #176]	; (80038e0 <MRT_resetInfo+0x110>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d11d      	bne.n	8003870 <MRT_resetInfo+0xa0>
		  HAL_UART_Transmit(uart, "Deactivating IWDG\r\n", 19, HAL_MAX_DELAY);
 8003834:	f04f 33ff 	mov.w	r3, #4294967295
 8003838:	2213      	movs	r2, #19
 800383a:	492e      	ldr	r1, [pc, #184]	; (80038f4 <MRT_resetInfo+0x124>)
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f009 f810 	bl	800c862 <HAL_UART_Transmit>

		  iwdg_flag = 0; //Flip flag
 8003842:	4b27      	ldr	r3, [pc, #156]	; (80038e0 <MRT_resetInfo+0x110>)
 8003844:	2200      	movs	r2, #0
 8003846:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
		  flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 8003848:	4b25      	ldr	r3, [pc, #148]	; (80038e0 <MRT_resetInfo+0x110>)
 800384a:	781a      	ldrb	r2, [r3, #0]
 800384c:	4b2a      	ldr	r3, [pc, #168]	; (80038f8 <MRT_resetInfo+0x128>)
 800384e:	709a      	strb	r2, [r3, #2]
		  W25qxx_EraseSector(1);
 8003850:	2001      	movs	r0, #1
 8003852:	f000 fb15 	bl	8003e80 <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003856:	2303      	movs	r3, #3
 8003858:	2200      	movs	r2, #0
 800385a:	2101      	movs	r1, #1
 800385c:	4826      	ldr	r0, [pc, #152]	; (80038f8 <MRT_resetInfo+0x128>)
 800385e:	f000 fc59 	bl	8004114 <W25qxx_WriteSector>

		  //Disable alarm A only
		  //MRT_setAlarmA(0,0,0); TODO can be removed?

		  HAL_Delay(1000);
 8003862:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003866:	f004 f947 	bl	8007af8 <HAL_Delay>

		  //Go to sleep
		  MRT_StandByMode(SLEEP_TIME);
 800386a:	201e      	movs	r0, #30
 800386c:	f003 ffaa 	bl	80077c4 <MRT_StandByMode>
	  }


	  //Check if we are after waking up
	  if (wu_flag==1){
 8003870:	4b1a      	ldr	r3, [pc, #104]	; (80038dc <MRT_resetInfo+0x10c>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d10f      	bne.n	8003898 <MRT_resetInfo+0xc8>
		  HAL_UART_Transmit(uart, "FC wake up\r\n", 12, HAL_MAX_DELAY);
 8003878:	f04f 33ff 	mov.w	r3, #4294967295
 800387c:	220c      	movs	r2, #12
 800387e:	491f      	ldr	r1, [pc, #124]	; (80038fc <MRT_resetInfo+0x12c>)
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f008 ffee 	bl	800c862 <HAL_UART_Transmit>

		  //Deactivate alarm interrupts
		  HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);
 8003886:	2029      	movs	r0, #41	; 0x29
 8003888:	f004 fcd2 	bl	8008230 <HAL_NVIC_DisableIRQ>
		  __HAL_RTC_ALARM_EXTI_DISABLE_IT();
 800388c:	4b1c      	ldr	r3, [pc, #112]	; (8003900 <MRT_resetInfo+0x130>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a1b      	ldr	r2, [pc, #108]	; (8003900 <MRT_resetInfo+0x130>)
 8003892:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003896:	6013      	str	r3, [r2, #0]
	  }


	  //Check if we start from the beginning
	  if (reset_flag==0){
 8003898:	4b0f      	ldr	r3, [pc, #60]	; (80038d8 <MRT_resetInfo+0x108>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d116      	bne.n	80038ce <MRT_resetInfo+0xfe>
		  HAL_UART_Transmit(uart, "FC restarted\r\n", 14, HAL_MAX_DELAY);
 80038a0:	f04f 33ff 	mov.w	r3, #4294967295
 80038a4:	220e      	movs	r2, #14
 80038a6:	4917      	ldr	r1, [pc, #92]	; (8003904 <MRT_resetInfo+0x134>)
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f008 ffda 	bl	800c862 <HAL_UART_Transmit>

		  reset_flag = 1; //Flip flag
 80038ae:	4b0a      	ldr	r3, [pc, #40]	; (80038d8 <MRT_resetInfo+0x108>)
 80038b0:	2201      	movs	r2, #1
 80038b2:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
	      flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 80038b4:	4b08      	ldr	r3, [pc, #32]	; (80038d8 <MRT_resetInfo+0x108>)
 80038b6:	781a      	ldrb	r2, [r3, #0]
 80038b8:	4b0f      	ldr	r3, [pc, #60]	; (80038f8 <MRT_resetInfo+0x128>)
 80038ba:	701a      	strb	r2, [r3, #0]
		  W25qxx_EraseSector(1);
 80038bc:	2001      	movs	r0, #1
 80038be:	f000 fadf 	bl	8003e80 <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80038c2:	2303      	movs	r3, #3
 80038c4:	2200      	movs	r2, #0
 80038c6:	2101      	movs	r1, #1
 80038c8:	480b      	ldr	r0, [pc, #44]	; (80038f8 <MRT_resetInfo+0x128>)
 80038ca:	f000 fc23 	bl	8004114 <W25qxx_WriteSector>
	  }
}
 80038ce:	bf00      	nop
 80038d0:	3774      	adds	r7, #116	; 0x74
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038d6:	bf00      	nop
 80038d8:	20000286 	.word	0x20000286
 80038dc:	200004bd 	.word	0x200004bd
 80038e0:	20000287 	.word	0x20000287
 80038e4:	20000288 	.word	0x20000288
 80038e8:	20000289 	.word	0x20000289
 80038ec:	2000028a 	.word	0x2000028a
 80038f0:	08016b24 	.word	0x08016b24
 80038f4:	08016b64 	.word	0x08016b64
 80038f8:	20005b0c 	.word	0x20005b0c
 80038fc:	08016b78 	.word	0x08016b78
 8003900:	40013c00 	.word	0x40013c00
 8003904:	08016b88 	.word	0x08016b88

08003908 <MRT_saveRTCTime>:


/*
 * Update and save the RTC time in external flash memory
 */
void MRT_saveRTCTime(void){
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
	MRT_updateExternalFlashBuffers();
 800390c:	f7ff fe48 	bl	80035a0 <MRT_updateExternalFlashBuffers>

	//Write new RTC time to flash memory
	W25qxx_EraseSector(2);
 8003910:	2002      	movs	r0, #2
 8003912:	f000 fab5 	bl	8003e80 <W25qxx_EraseSector>
	W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003916:	2303      	movs	r3, #3
 8003918:	2200      	movs	r2, #0
 800391a:	2102      	movs	r1, #2
 800391c:	4802      	ldr	r0, [pc, #8]	; (8003928 <MRT_saveRTCTime+0x20>)
 800391e:	f000 fbf9 	bl	8004114 <W25qxx_WriteSector>
}
 8003922:	bf00      	nop
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	20005c3c 	.word	0x20005c3c
 800392c:	00000000 	.word	0x00000000

08003930 <MRT_getAltitude>:

/*
 * Gets the altitude using temperature, pressure and sea-level pressure
 *https://www.mide.com/air-pressure-at-altitude-calculator
 */
float MRT_getAltitude(float pressure){
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	ed87 0a01 	vstr	s0, [r7, #4]
	return BASE_HEIGHT+(SEA_LEVEL_TEMPERATURE/-0.0065)*(pow(pressure/SEA_LEVEL_PRESSURE,(-R*-0.0065/(go*M)))-1);
 800393a:	edd7 7a01 	vldr	s15, [r7, #4]
 800393e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80039c0 <MRT_getAltitude+0x90>
 8003942:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003946:	ee16 0a90 	vmov	r0, s13
 800394a:	f7fc fe0d 	bl	8000568 <__aeabi_f2d>
 800394e:	4602      	mov	r2, r0
 8003950:	460b      	mov	r3, r1
 8003952:	ed9f 1b17 	vldr	d1, [pc, #92]	; 80039b0 <MRT_getAltitude+0x80>
 8003956:	ec43 2b10 	vmov	d0, r2, r3
 800395a:	f00c fe65 	bl	8010628 <pow>
 800395e:	ec51 0b10 	vmov	r0, r1, d0
 8003962:	f04f 0200 	mov.w	r2, #0
 8003966:	4b17      	ldr	r3, [pc, #92]	; (80039c4 <MRT_getAltitude+0x94>)
 8003968:	f7fc fc9e 	bl	80002a8 <__aeabi_dsub>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4610      	mov	r0, r2
 8003972:	4619      	mov	r1, r3
 8003974:	a310      	add	r3, pc, #64	; (adr r3, 80039b8 <MRT_getAltitude+0x88>)
 8003976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397a:	f7fc fe4d 	bl	8000618 <__aeabi_dmul>
 800397e:	4602      	mov	r2, r0
 8003980:	460b      	mov	r3, r1
 8003982:	4610      	mov	r0, r2
 8003984:	4619      	mov	r1, r3
 8003986:	f04f 0200 	mov.w	r2, #0
 800398a:	4b0f      	ldr	r3, [pc, #60]	; (80039c8 <MRT_getAltitude+0x98>)
 800398c:	f7fc fc8e 	bl	80002ac <__adddf3>
 8003990:	4602      	mov	r2, r0
 8003992:	460b      	mov	r3, r1
 8003994:	4610      	mov	r0, r2
 8003996:	4619      	mov	r1, r3
 8003998:	f7fd f936 	bl	8000c08 <__aeabi_d2f>
 800399c:	4603      	mov	r3, r0
 800399e:	ee07 3a90 	vmov	s15, r3
}
 80039a2:	eeb0 0a67 	vmov.f32	s0, s15
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	f3af 8000 	nop.w
 80039b0:	b537afba 	.word	0xb537afba
 80039b4:	3fc85a8b 	.word	0x3fc85a8b
 80039b8:	76276276 	.word	0x76276276
 80039bc:	c0e481c2 	.word	0xc0e481c2
 80039c0:	447d8000 	.word	0x447d8000
 80039c4:	3ff00000 	.word	0x3ff00000
 80039c8:	40590000 	.word	0x40590000

080039cc <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af02      	add	r7, sp, #8
 80039d2:	4603      	mov	r3, r0
 80039d4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 80039d6:	f107 020f 	add.w	r2, r7, #15
 80039da:	1df9      	adds	r1, r7, #7
 80039dc:	2364      	movs	r3, #100	; 0x64
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	2301      	movs	r3, #1
 80039e2:	4804      	ldr	r0, [pc, #16]	; (80039f4 <W25qxx_Spi+0x28>)
 80039e4:	f007 fe32 	bl	800b64c <HAL_SPI_TransmitReceive>
	return ret;
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	20005a6c 	.word	0x20005a6c

080039f8 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]
 8003a02:	2300      	movs	r3, #0
 8003a04:	60bb      	str	r3, [r7, #8]
 8003a06:	2300      	movs	r3, #0
 8003a08:	607b      	str	r3, [r7, #4]
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003a0e:	2200      	movs	r2, #0
 8003a10:	2140      	movs	r1, #64	; 0x40
 8003a12:	4813      	ldr	r0, [pc, #76]	; (8003a60 <W25qxx_ReadID+0x68>)
 8003a14:	f004 fdde 	bl	80085d4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8003a18:	209f      	movs	r0, #159	; 0x9f
 8003a1a:	f7ff ffd7 	bl	80039cc <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003a1e:	20a5      	movs	r0, #165	; 0xa5
 8003a20:	f7ff ffd4 	bl	80039cc <W25qxx_Spi>
 8003a24:	4603      	mov	r3, r0
 8003a26:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003a28:	20a5      	movs	r0, #165	; 0xa5
 8003a2a:	f7ff ffcf 	bl	80039cc <W25qxx_Spi>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003a32:	20a5      	movs	r0, #165	; 0xa5
 8003a34:	f7ff ffca 	bl	80039cc <W25qxx_Spi>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	2140      	movs	r1, #64	; 0x40
 8003a40:	4807      	ldr	r0, [pc, #28]	; (8003a60 <W25qxx_ReadID+0x68>)
 8003a42:	f004 fdc7 	bl	80085d4 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	041a      	lsls	r2, r3, #16
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	021b      	lsls	r3, r3, #8
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]
	return Temp;
 8003a56:	68fb      	ldr	r3, [r7, #12]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40020c00 	.word	0x40020c00

08003a64 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8003a64:	b590      	push	{r4, r7, lr}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	2140      	movs	r1, #64	; 0x40
 8003a6e:	4816      	ldr	r0, [pc, #88]	; (8003ac8 <W25qxx_ReadUniqID+0x64>)
 8003a70:	f004 fdb0 	bl	80085d4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8003a74:	204b      	movs	r0, #75	; 0x4b
 8003a76:	f7ff ffa9 	bl	80039cc <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	71fb      	strb	r3, [r7, #7]
 8003a7e:	e005      	b.n	8003a8c <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003a80:	20a5      	movs	r0, #165	; 0xa5
 8003a82:	f7ff ffa3 	bl	80039cc <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003a86:	79fb      	ldrb	r3, [r7, #7]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	71fb      	strb	r3, [r7, #7]
 8003a8c:	79fb      	ldrb	r3, [r7, #7]
 8003a8e:	2b03      	cmp	r3, #3
 8003a90:	d9f6      	bls.n	8003a80 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8003a92:	2300      	movs	r3, #0
 8003a94:	71bb      	strb	r3, [r7, #6]
 8003a96:	e00b      	b.n	8003ab0 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003a98:	79bc      	ldrb	r4, [r7, #6]
 8003a9a:	20a5      	movs	r0, #165	; 0xa5
 8003a9c:	f7ff ff96 	bl	80039cc <W25qxx_Spi>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	4b09      	ldr	r3, [pc, #36]	; (8003acc <W25qxx_ReadUniqID+0x68>)
 8003aa6:	4423      	add	r3, r4
 8003aa8:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8003aaa:	79bb      	ldrb	r3, [r7, #6]
 8003aac:	3301      	adds	r3, #1
 8003aae:	71bb      	strb	r3, [r7, #6]
 8003ab0:	79bb      	ldrb	r3, [r7, #6]
 8003ab2:	2b07      	cmp	r3, #7
 8003ab4:	d9f0      	bls.n	8003a98 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	2140      	movs	r1, #64	; 0x40
 8003aba:	4803      	ldr	r0, [pc, #12]	; (8003ac8 <W25qxx_ReadUniqID+0x64>)
 8003abc:	f004 fd8a 	bl	80085d4 <HAL_GPIO_WritePin>
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd90      	pop	{r4, r7, pc}
 8003ac8:	40020c00 	.word	0x40020c00
 8003acc:	20006054 	.word	0x20006054

08003ad0 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	2140      	movs	r1, #64	; 0x40
 8003ad8:	4807      	ldr	r0, [pc, #28]	; (8003af8 <W25qxx_WriteEnable+0x28>)
 8003ada:	f004 fd7b 	bl	80085d4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8003ade:	2006      	movs	r0, #6
 8003ae0:	f7ff ff74 	bl	80039cc <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	2140      	movs	r1, #64	; 0x40
 8003ae8:	4803      	ldr	r0, [pc, #12]	; (8003af8 <W25qxx_WriteEnable+0x28>)
 8003aea:	f004 fd73 	bl	80085d4 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8003aee:	2001      	movs	r0, #1
 8003af0:	f00a f84d 	bl	800db8e <osDelay>
}
 8003af4:	bf00      	nop
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40020c00 	.word	0x40020c00

08003afc <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	4603      	mov	r3, r0
 8003b04:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8003b06:	2300      	movs	r3, #0
 8003b08:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	2140      	movs	r1, #64	; 0x40
 8003b0e:	481c      	ldr	r0, [pc, #112]	; (8003b80 <W25qxx_ReadStatusRegister+0x84>)
 8003b10:	f004 fd60 	bl	80085d4 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8003b14:	79fb      	ldrb	r3, [r7, #7]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d10c      	bne.n	8003b34 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8003b1a:	2005      	movs	r0, #5
 8003b1c:	f7ff ff56 	bl	80039cc <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003b20:	20a5      	movs	r0, #165	; 0xa5
 8003b22:	f7ff ff53 	bl	80039cc <W25qxx_Spi>
 8003b26:	4603      	mov	r3, r0
 8003b28:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8003b2a:	4a16      	ldr	r2, [pc, #88]	; (8003b84 <W25qxx_ReadStatusRegister+0x88>)
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
 8003b2e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8003b32:	e01b      	b.n	8003b6c <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8003b34:	79fb      	ldrb	r3, [r7, #7]
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d10c      	bne.n	8003b54 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8003b3a:	2035      	movs	r0, #53	; 0x35
 8003b3c:	f7ff ff46 	bl	80039cc <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003b40:	20a5      	movs	r0, #165	; 0xa5
 8003b42:	f7ff ff43 	bl	80039cc <W25qxx_Spi>
 8003b46:	4603      	mov	r3, r0
 8003b48:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8003b4a:	4a0e      	ldr	r2, [pc, #56]	; (8003b84 <W25qxx_ReadStatusRegister+0x88>)
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
 8003b4e:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8003b52:	e00b      	b.n	8003b6c <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8003b54:	2015      	movs	r0, #21
 8003b56:	f7ff ff39 	bl	80039cc <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003b5a:	20a5      	movs	r0, #165	; 0xa5
 8003b5c:	f7ff ff36 	bl	80039cc <W25qxx_Spi>
 8003b60:	4603      	mov	r3, r0
 8003b62:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8003b64:	4a07      	ldr	r2, [pc, #28]	; (8003b84 <W25qxx_ReadStatusRegister+0x88>)
 8003b66:	7bfb      	ldrb	r3, [r7, #15]
 8003b68:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	2140      	movs	r1, #64	; 0x40
 8003b70:	4803      	ldr	r0, [pc, #12]	; (8003b80 <W25qxx_ReadStatusRegister+0x84>)
 8003b72:	f004 fd2f 	bl	80085d4 <HAL_GPIO_WritePin>
	return status;
 8003b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40020c00 	.word	0x40020c00
 8003b84:	20006054 	.word	0x20006054

08003b88 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8003b8c:	2001      	movs	r0, #1
 8003b8e:	f009 fffe 	bl	800db8e <osDelay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003b92:	2200      	movs	r2, #0
 8003b94:	2140      	movs	r1, #64	; 0x40
 8003b96:	480f      	ldr	r0, [pc, #60]	; (8003bd4 <W25qxx_WaitForWriteEnd+0x4c>)
 8003b98:	f004 fd1c 	bl	80085d4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8003b9c:	2005      	movs	r0, #5
 8003b9e:	f7ff ff15 	bl	80039cc <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003ba2:	20a5      	movs	r0, #165	; 0xa5
 8003ba4:	f7ff ff12 	bl	80039cc <W25qxx_Spi>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	461a      	mov	r2, r3
 8003bac:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <W25qxx_WaitForWriteEnd+0x50>)
 8003bae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8003bb2:	2001      	movs	r0, #1
 8003bb4:	f009 ffeb 	bl	800db8e <osDelay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8003bb8:	4b07      	ldr	r3, [pc, #28]	; (8003bd8 <W25qxx_WaitForWriteEnd+0x50>)
 8003bba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1ed      	bne.n	8003ba2 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	2140      	movs	r1, #64	; 0x40
 8003bca:	4802      	ldr	r0, [pc, #8]	; (8003bd4 <W25qxx_WaitForWriteEnd+0x4c>)
 8003bcc:	f004 fd02 	bl	80085d4 <HAL_GPIO_WritePin>
}
 8003bd0:	bf00      	nop
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40020c00 	.word	0x40020c00
 8003bd8:	20006054 	.word	0x20006054

08003bdc <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8003be2:	4b90      	ldr	r3, [pc, #576]	; (8003e24 <W25qxx_Init+0x248>)
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8003bea:	e002      	b.n	8003bf2 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8003bec:	2001      	movs	r0, #1
 8003bee:	f009 ffce 	bl	800db8e <osDelay>
	while (HAL_GetTick() < 100)
 8003bf2:	f003 ff75 	bl	8007ae0 <HAL_GetTick>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b63      	cmp	r3, #99	; 0x63
 8003bfa:	d9f7      	bls.n	8003bec <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	2140      	movs	r1, #64	; 0x40
 8003c00:	4889      	ldr	r0, [pc, #548]	; (8003e28 <W25qxx_Init+0x24c>)
 8003c02:	f004 fce7 	bl	80085d4 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8003c06:	2064      	movs	r0, #100	; 0x64
 8003c08:	f009 ffc1 	bl	800db8e <osDelay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 8003c0c:	4887      	ldr	r0, [pc, #540]	; (8003e2c <W25qxx_Init+0x250>)
 8003c0e:	f00e fdd7 	bl	80127c0 <puts>
#endif
	id = W25qxx_ReadID();
 8003c12:	f7ff fef1 	bl	80039f8 <W25qxx_ReadID>
 8003c16:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	4885      	ldr	r0, [pc, #532]	; (8003e30 <W25qxx_Init+0x254>)
 8003c1c:	f00e fd4a 	bl	80126b4 <iprintf>
#endif
	switch (id & 0x000000FF)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	3b11      	subs	r3, #17
 8003c26:	2b0f      	cmp	r3, #15
 8003c28:	f200 808b 	bhi.w	8003d42 <W25qxx_Init+0x166>
 8003c2c:	a201      	add	r2, pc, #4	; (adr r2, 8003c34 <W25qxx_Init+0x58>)
 8003c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c32:	bf00      	nop
 8003c34:	08003d2f 	.word	0x08003d2f
 8003c38:	08003d1b 	.word	0x08003d1b
 8003c3c:	08003d07 	.word	0x08003d07
 8003c40:	08003cf3 	.word	0x08003cf3
 8003c44:	08003cdf 	.word	0x08003cdf
 8003c48:	08003ccb 	.word	0x08003ccb
 8003c4c:	08003cb7 	.word	0x08003cb7
 8003c50:	08003ca1 	.word	0x08003ca1
 8003c54:	08003c8b 	.word	0x08003c8b
 8003c58:	08003d43 	.word	0x08003d43
 8003c5c:	08003d43 	.word	0x08003d43
 8003c60:	08003d43 	.word	0x08003d43
 8003c64:	08003d43 	.word	0x08003d43
 8003c68:	08003d43 	.word	0x08003d43
 8003c6c:	08003d43 	.word	0x08003d43
 8003c70:	08003c75 	.word	0x08003c75
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8003c74:	4b6b      	ldr	r3, [pc, #428]	; (8003e24 <W25qxx_Init+0x248>)
 8003c76:	220a      	movs	r2, #10
 8003c78:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8003c7a:	4b6a      	ldr	r3, [pc, #424]	; (8003e24 <W25qxx_Init+0x248>)
 8003c7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c80:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 8003c82:	486c      	ldr	r0, [pc, #432]	; (8003e34 <W25qxx_Init+0x258>)
 8003c84:	f00e fd9c 	bl	80127c0 <puts>
#endif
		break;
 8003c88:	e064      	b.n	8003d54 <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8003c8a:	4b66      	ldr	r3, [pc, #408]	; (8003e24 <W25qxx_Init+0x248>)
 8003c8c:	2209      	movs	r2, #9
 8003c8e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8003c90:	4b64      	ldr	r3, [pc, #400]	; (8003e24 <W25qxx_Init+0x248>)
 8003c92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c96:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 8003c98:	4867      	ldr	r0, [pc, #412]	; (8003e38 <W25qxx_Init+0x25c>)
 8003c9a:	f00e fd91 	bl	80127c0 <puts>
#endif
		break;
 8003c9e:	e059      	b.n	8003d54 <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8003ca0:	4b60      	ldr	r3, [pc, #384]	; (8003e24 <W25qxx_Init+0x248>)
 8003ca2:	2208      	movs	r2, #8
 8003ca4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8003ca6:	4b5f      	ldr	r3, [pc, #380]	; (8003e24 <W25qxx_Init+0x248>)
 8003ca8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cac:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 8003cae:	4863      	ldr	r0, [pc, #396]	; (8003e3c <W25qxx_Init+0x260>)
 8003cb0:	f00e fd86 	bl	80127c0 <puts>
#endif
		break;
 8003cb4:	e04e      	b.n	8003d54 <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8003cb6:	4b5b      	ldr	r3, [pc, #364]	; (8003e24 <W25qxx_Init+0x248>)
 8003cb8:	2207      	movs	r2, #7
 8003cba:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8003cbc:	4b59      	ldr	r3, [pc, #356]	; (8003e24 <W25qxx_Init+0x248>)
 8003cbe:	2280      	movs	r2, #128	; 0x80
 8003cc0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 8003cc2:	485f      	ldr	r0, [pc, #380]	; (8003e40 <W25qxx_Init+0x264>)
 8003cc4:	f00e fd7c 	bl	80127c0 <puts>
#endif
		break;
 8003cc8:	e044      	b.n	8003d54 <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8003cca:	4b56      	ldr	r3, [pc, #344]	; (8003e24 <W25qxx_Init+0x248>)
 8003ccc:	2206      	movs	r2, #6
 8003cce:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8003cd0:	4b54      	ldr	r3, [pc, #336]	; (8003e24 <W25qxx_Init+0x248>)
 8003cd2:	2240      	movs	r2, #64	; 0x40
 8003cd4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 8003cd6:	485b      	ldr	r0, [pc, #364]	; (8003e44 <W25qxx_Init+0x268>)
 8003cd8:	f00e fd72 	bl	80127c0 <puts>
#endif
		break;
 8003cdc:	e03a      	b.n	8003d54 <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8003cde:	4b51      	ldr	r3, [pc, #324]	; (8003e24 <W25qxx_Init+0x248>)
 8003ce0:	2205      	movs	r2, #5
 8003ce2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8003ce4:	4b4f      	ldr	r3, [pc, #316]	; (8003e24 <W25qxx_Init+0x248>)
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 8003cea:	4857      	ldr	r0, [pc, #348]	; (8003e48 <W25qxx_Init+0x26c>)
 8003cec:	f00e fd68 	bl	80127c0 <puts>
#endif
		break;
 8003cf0:	e030      	b.n	8003d54 <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8003cf2:	4b4c      	ldr	r3, [pc, #304]	; (8003e24 <W25qxx_Init+0x248>)
 8003cf4:	2204      	movs	r2, #4
 8003cf6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8003cf8:	4b4a      	ldr	r3, [pc, #296]	; (8003e24 <W25qxx_Init+0x248>)
 8003cfa:	2210      	movs	r2, #16
 8003cfc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 8003cfe:	4853      	ldr	r0, [pc, #332]	; (8003e4c <W25qxx_Init+0x270>)
 8003d00:	f00e fd5e 	bl	80127c0 <puts>
#endif
		break;
 8003d04:	e026      	b.n	8003d54 <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8003d06:	4b47      	ldr	r3, [pc, #284]	; (8003e24 <W25qxx_Init+0x248>)
 8003d08:	2203      	movs	r2, #3
 8003d0a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8003d0c:	4b45      	ldr	r3, [pc, #276]	; (8003e24 <W25qxx_Init+0x248>)
 8003d0e:	2208      	movs	r2, #8
 8003d10:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 8003d12:	484f      	ldr	r0, [pc, #316]	; (8003e50 <W25qxx_Init+0x274>)
 8003d14:	f00e fd54 	bl	80127c0 <puts>
#endif
		break;
 8003d18:	e01c      	b.n	8003d54 <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8003d1a:	4b42      	ldr	r3, [pc, #264]	; (8003e24 <W25qxx_Init+0x248>)
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8003d20:	4b40      	ldr	r3, [pc, #256]	; (8003e24 <W25qxx_Init+0x248>)
 8003d22:	2204      	movs	r2, #4
 8003d24:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 8003d26:	484b      	ldr	r0, [pc, #300]	; (8003e54 <W25qxx_Init+0x278>)
 8003d28:	f00e fd4a 	bl	80127c0 <puts>
#endif
		break;
 8003d2c:	e012      	b.n	8003d54 <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8003d2e:	4b3d      	ldr	r3, [pc, #244]	; (8003e24 <W25qxx_Init+0x248>)
 8003d30:	2201      	movs	r2, #1
 8003d32:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8003d34:	4b3b      	ldr	r3, [pc, #236]	; (8003e24 <W25qxx_Init+0x248>)
 8003d36:	2202      	movs	r2, #2
 8003d38:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 8003d3a:	4847      	ldr	r0, [pc, #284]	; (8003e58 <W25qxx_Init+0x27c>)
 8003d3c:	f00e fd40 	bl	80127c0 <puts>
#endif
		break;
 8003d40:	e008      	b.n	8003d54 <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 8003d42:	4846      	ldr	r0, [pc, #280]	; (8003e5c <W25qxx_Init+0x280>)
 8003d44:	f00e fd3c 	bl	80127c0 <puts>
#endif
		w25qxx.Lock = 0;
 8003d48:	4b36      	ldr	r3, [pc, #216]	; (8003e24 <W25qxx_Init+0x248>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8003d50:	2300      	movs	r3, #0
 8003d52:	e063      	b.n	8003e1c <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 8003d54:	4b33      	ldr	r3, [pc, #204]	; (8003e24 <W25qxx_Init+0x248>)
 8003d56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d5a:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8003d5c:	4b31      	ldr	r3, [pc, #196]	; (8003e24 <W25qxx_Init+0x248>)
 8003d5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d62:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8003d64:	4b2f      	ldr	r3, [pc, #188]	; (8003e24 <W25qxx_Init+0x248>)
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	4a2e      	ldr	r2, [pc, #184]	; (8003e24 <W25qxx_Init+0x248>)
 8003d6c:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8003d6e:	4b2d      	ldr	r3, [pc, #180]	; (8003e24 <W25qxx_Init+0x248>)
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	4a2c      	ldr	r2, [pc, #176]	; (8003e24 <W25qxx_Init+0x248>)
 8003d74:	6912      	ldr	r2, [r2, #16]
 8003d76:	fb02 f303 	mul.w	r3, r2, r3
 8003d7a:	4a2a      	ldr	r2, [pc, #168]	; (8003e24 <W25qxx_Init+0x248>)
 8003d7c:	8952      	ldrh	r2, [r2, #10]
 8003d7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d82:	4a28      	ldr	r2, [pc, #160]	; (8003e24 <W25qxx_Init+0x248>)
 8003d84:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8003d86:	4b27      	ldr	r3, [pc, #156]	; (8003e24 <W25qxx_Init+0x248>)
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	011b      	lsls	r3, r3, #4
 8003d8c:	4a25      	ldr	r2, [pc, #148]	; (8003e24 <W25qxx_Init+0x248>)
 8003d8e:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8003d90:	4b24      	ldr	r3, [pc, #144]	; (8003e24 <W25qxx_Init+0x248>)
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	4a23      	ldr	r2, [pc, #140]	; (8003e24 <W25qxx_Init+0x248>)
 8003d96:	6912      	ldr	r2, [r2, #16]
 8003d98:	fb02 f303 	mul.w	r3, r2, r3
 8003d9c:	0a9b      	lsrs	r3, r3, #10
 8003d9e:	4a21      	ldr	r2, [pc, #132]	; (8003e24 <W25qxx_Init+0x248>)
 8003da0:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8003da2:	f7ff fe5f 	bl	8003a64 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8003da6:	2001      	movs	r0, #1
 8003da8:	f7ff fea8 	bl	8003afc <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8003dac:	2002      	movs	r0, #2
 8003dae:	f7ff fea5 	bl	8003afc <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8003db2:	2003      	movs	r0, #3
 8003db4:	f7ff fea2 	bl	8003afc <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 8003db8:	4b1a      	ldr	r3, [pc, #104]	; (8003e24 <W25qxx_Init+0x248>)
 8003dba:	895b      	ldrh	r3, [r3, #10]
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4828      	ldr	r0, [pc, #160]	; (8003e60 <W25qxx_Init+0x284>)
 8003dc0:	f00e fc78 	bl	80126b4 <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 8003dc4:	4b17      	ldr	r3, [pc, #92]	; (8003e24 <W25qxx_Init+0x248>)
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4826      	ldr	r0, [pc, #152]	; (8003e64 <W25qxx_Init+0x288>)
 8003dcc:	f00e fc72 	bl	80126b4 <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 8003dd0:	4b14      	ldr	r3, [pc, #80]	; (8003e24 <W25qxx_Init+0x248>)
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	4824      	ldr	r0, [pc, #144]	; (8003e68 <W25qxx_Init+0x28c>)
 8003dd8:	f00e fc6c 	bl	80126b4 <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 8003ddc:	4b11      	ldr	r3, [pc, #68]	; (8003e24 <W25qxx_Init+0x248>)
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	4619      	mov	r1, r3
 8003de2:	4822      	ldr	r0, [pc, #136]	; (8003e6c <W25qxx_Init+0x290>)
 8003de4:	f00e fc66 	bl	80126b4 <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 8003de8:	4b0e      	ldr	r3, [pc, #56]	; (8003e24 <W25qxx_Init+0x248>)
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	4619      	mov	r1, r3
 8003dee:	4820      	ldr	r0, [pc, #128]	; (8003e70 <W25qxx_Init+0x294>)
 8003df0:	f00e fc60 	bl	80126b4 <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 8003df4:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <W25qxx_Init+0x248>)
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	4619      	mov	r1, r3
 8003dfa:	481e      	ldr	r0, [pc, #120]	; (8003e74 <W25qxx_Init+0x298>)
 8003dfc:	f00e fc5a 	bl	80126b4 <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 8003e00:	4b08      	ldr	r3, [pc, #32]	; (8003e24 <W25qxx_Init+0x248>)
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	4619      	mov	r1, r3
 8003e06:	481c      	ldr	r0, [pc, #112]	; (8003e78 <W25qxx_Init+0x29c>)
 8003e08:	f00e fc54 	bl	80126b4 <iprintf>
	printf("w25qxx Init Done\r\n");
 8003e0c:	481b      	ldr	r0, [pc, #108]	; (8003e7c <W25qxx_Init+0x2a0>)
 8003e0e:	f00e fcd7 	bl	80127c0 <puts>
#endif
	w25qxx.Lock = 0;
 8003e12:	4b04      	ldr	r3, [pc, #16]	; (8003e24 <W25qxx_Init+0x248>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8003e1a:	2301      	movs	r3, #1
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	20006054 	.word	0x20006054
 8003e28:	40020c00 	.word	0x40020c00
 8003e2c:	08016b98 	.word	0x08016b98
 8003e30:	08016bb0 	.word	0x08016bb0
 8003e34:	08016bc4 	.word	0x08016bc4
 8003e38:	08016bdc 	.word	0x08016bdc
 8003e3c:	08016bf4 	.word	0x08016bf4
 8003e40:	08016c0c 	.word	0x08016c0c
 8003e44:	08016c24 	.word	0x08016c24
 8003e48:	08016c3c 	.word	0x08016c3c
 8003e4c:	08016c54 	.word	0x08016c54
 8003e50:	08016c6c 	.word	0x08016c6c
 8003e54:	08016c84 	.word	0x08016c84
 8003e58:	08016c9c 	.word	0x08016c9c
 8003e5c:	08016cb4 	.word	0x08016cb4
 8003e60:	08016cc8 	.word	0x08016cc8
 8003e64:	08016ce8 	.word	0x08016ce8
 8003e68:	08016d00 	.word	0x08016d00
 8003e6c:	08016d20 	.word	0x08016d20
 8003e70:	08016d3c 	.word	0x08016d3c
 8003e74:	08016d5c 	.word	0x08016d5c
 8003e78:	08016d78 	.word	0x08016d78
 8003e7c:	08016d98 	.word	0x08016d98

08003e80 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8003e88:	e002      	b.n	8003e90 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8003e8a:	2001      	movs	r0, #1
 8003e8c:	f009 fe7f 	bl	800db8e <osDelay>
	while (w25qxx.Lock == 1)
 8003e90:	4b2d      	ldr	r3, [pc, #180]	; (8003f48 <W25qxx_EraseSector+0xc8>)
 8003e92:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d0f7      	beq.n	8003e8a <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8003e9a:	4b2b      	ldr	r3, [pc, #172]	; (8003f48 <W25qxx_EraseSector+0xc8>)
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
 8003ea2:	f003 fe1d 	bl	8007ae0 <HAL_GetTick>
 8003ea6:	60f8      	str	r0, [r7, #12]
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	4828      	ldr	r0, [pc, #160]	; (8003f4c <W25qxx_EraseSector+0xcc>)
 8003eac:	f00e fc02 	bl	80126b4 <iprintf>
#endif
	W25qxx_WaitForWriteEnd();
 8003eb0:	f7ff fe6a 	bl	8003b88 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8003eb4:	4b24      	ldr	r3, [pc, #144]	; (8003f48 <W25qxx_EraseSector+0xc8>)
 8003eb6:	691a      	ldr	r2, [r3, #16]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	fb02 f303 	mul.w	r3, r2, r3
 8003ebe:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8003ec0:	f7ff fe06 	bl	8003ad0 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	2140      	movs	r1, #64	; 0x40
 8003ec8:	4821      	ldr	r0, [pc, #132]	; (8003f50 <W25qxx_EraseSector+0xd0>)
 8003eca:	f004 fb83 	bl	80085d4 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8003ece:	4b1e      	ldr	r3, [pc, #120]	; (8003f48 <W25qxx_EraseSector+0xc8>)
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	2b08      	cmp	r3, #8
 8003ed4:	d909      	bls.n	8003eea <W25qxx_EraseSector+0x6a>
	{
		W25qxx_Spi(0x21);
 8003ed6:	2021      	movs	r0, #33	; 0x21
 8003ed8:	f7ff fd78 	bl	80039cc <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	0e1b      	lsrs	r3, r3, #24
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff fd72 	bl	80039cc <W25qxx_Spi>
 8003ee8:	e002      	b.n	8003ef0 <W25qxx_EraseSector+0x70>
	}
	else
	{
		W25qxx_Spi(0x20);
 8003eea:	2020      	movs	r0, #32
 8003eec:	f7ff fd6e 	bl	80039cc <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	0c1b      	lsrs	r3, r3, #16
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7ff fd68 	bl	80039cc <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	0a1b      	lsrs	r3, r3, #8
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7ff fd62 	bl	80039cc <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7ff fd5d 	bl	80039cc <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003f12:	2201      	movs	r2, #1
 8003f14:	2140      	movs	r1, #64	; 0x40
 8003f16:	480e      	ldr	r0, [pc, #56]	; (8003f50 <W25qxx_EraseSector+0xd0>)
 8003f18:	f004 fb5c 	bl	80085d4 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8003f1c:	f7ff fe34 	bl	8003b88 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
 8003f20:	f003 fdde 	bl	8007ae0 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	4809      	ldr	r0, [pc, #36]	; (8003f54 <W25qxx_EraseSector+0xd4>)
 8003f2e:	f00e fbc1 	bl	80126b4 <iprintf>
#endif
	W25qxx_Delay(1);
 8003f32:	2001      	movs	r0, #1
 8003f34:	f009 fe2b 	bl	800db8e <osDelay>
	w25qxx.Lock = 0;
 8003f38:	4b03      	ldr	r3, [pc, #12]	; (8003f48 <W25qxx_EraseSector+0xc8>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003f40:	bf00      	nop
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	20006054 	.word	0x20006054
 8003f4c:	08016df0 	.word	0x08016df0
 8003f50:	40020c00 	.word	0x40020c00
 8003f54:	08016e14 	.word	0x08016e14

08003f58 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8003f60:	4b07      	ldr	r3, [pc, #28]	; (8003f80 <W25qxx_SectorToPage+0x28>)
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	fb02 f303 	mul.w	r3, r2, r3
 8003f6a:	4a05      	ldr	r2, [pc, #20]	; (8003f80 <W25qxx_SectorToPage+0x28>)
 8003f6c:	8952      	ldrh	r2, [r2, #10]
 8003f6e:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	20006054 	.word	0x20006054

08003f84 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
 8003f90:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8003f92:	e002      	b.n	8003f9a <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8003f94:	2001      	movs	r0, #1
 8003f96:	f009 fdfa 	bl	800db8e <osDelay>
	while (w25qxx.Lock == 1)
 8003f9a:	4b57      	ldr	r3, [pc, #348]	; (80040f8 <W25qxx_WritePage+0x174>)
 8003f9c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d0f7      	beq.n	8003f94 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8003fa4:	4b54      	ldr	r3, [pc, #336]	; (80040f8 <W25qxx_WritePage+0x174>)
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	4a51      	ldr	r2, [pc, #324]	; (80040f8 <W25qxx_WritePage+0x174>)
 8003fb4:	8952      	ldrh	r2, [r2, #10]
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d802      	bhi.n	8003fc0 <W25qxx_WritePage+0x3c>
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d105      	bne.n	8003fcc <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003fc0:	4b4d      	ldr	r3, [pc, #308]	; (80040f8 <W25qxx_WritePage+0x174>)
 8003fc2:	895b      	ldrh	r3, [r3, #10]
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	4a49      	ldr	r2, [pc, #292]	; (80040f8 <W25qxx_WritePage+0x174>)
 8003fd4:	8952      	ldrh	r2, [r2, #10]
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d905      	bls.n	8003fe6 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003fda:	4b47      	ldr	r3, [pc, #284]	; (80040f8 <W25qxx_WritePage+0x174>)
 8003fdc:	895b      	ldrh	r3, [r3, #10]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	68b9      	ldr	r1, [r7, #8]
 8003fec:	4843      	ldr	r0, [pc, #268]	; (80040fc <W25qxx_WritePage+0x178>)
 8003fee:	f00e fb61 	bl	80126b4 <iprintf>
	W25qxx_Delay(100);
 8003ff2:	2064      	movs	r0, #100	; 0x64
 8003ff4:	f009 fdcb 	bl	800db8e <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8003ff8:	f003 fd72 	bl	8007ae0 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]
#endif
	W25qxx_WaitForWriteEnd();
 8003ffe:	f7ff fdc3 	bl	8003b88 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8004002:	f7ff fd65 	bl	8003ad0 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004006:	2200      	movs	r2, #0
 8004008:	2140      	movs	r1, #64	; 0x40
 800400a:	483d      	ldr	r0, [pc, #244]	; (8004100 <W25qxx_WritePage+0x17c>)
 800400c:	f004 fae2 	bl	80085d4 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8004010:	4b39      	ldr	r3, [pc, #228]	; (80040f8 <W25qxx_WritePage+0x174>)
 8004012:	895b      	ldrh	r3, [r3, #10]
 8004014:	461a      	mov	r2, r3
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	fb03 f302 	mul.w	r3, r3, r2
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	4413      	add	r3, r2
 8004020:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8004022:	4b35      	ldr	r3, [pc, #212]	; (80040f8 <W25qxx_WritePage+0x174>)
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	2b08      	cmp	r3, #8
 8004028:	d909      	bls.n	800403e <W25qxx_WritePage+0xba>
	{
		W25qxx_Spi(0x12);
 800402a:	2012      	movs	r0, #18
 800402c:	f7ff fcce 	bl	80039cc <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	0e1b      	lsrs	r3, r3, #24
 8004034:	b2db      	uxtb	r3, r3
 8004036:	4618      	mov	r0, r3
 8004038:	f7ff fcc8 	bl	80039cc <W25qxx_Spi>
 800403c:	e002      	b.n	8004044 <W25qxx_WritePage+0xc0>
	}
	else
	{
		W25qxx_Spi(0x02);
 800403e:	2002      	movs	r0, #2
 8004040:	f7ff fcc4 	bl	80039cc <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	0c1b      	lsrs	r3, r3, #16
 8004048:	b2db      	uxtb	r3, r3
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff fcbe 	bl	80039cc <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	0a1b      	lsrs	r3, r3, #8
 8004054:	b2db      	uxtb	r3, r3
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff fcb8 	bl	80039cc <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	b2db      	uxtb	r3, r3
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff fcb3 	bl	80039cc <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	b29a      	uxth	r2, r3
 800406a:	2364      	movs	r3, #100	; 0x64
 800406c:	68f9      	ldr	r1, [r7, #12]
 800406e:	4825      	ldr	r0, [pc, #148]	; (8004104 <W25qxx_WritePage+0x180>)
 8004070:	f007 f89f 	bl	800b1b2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004074:	2201      	movs	r2, #1
 8004076:	2140      	movs	r1, #64	; 0x40
 8004078:	4821      	ldr	r0, [pc, #132]	; (8004100 <W25qxx_WritePage+0x17c>)
 800407a:	f004 faab 	bl	80085d4 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800407e:	f7ff fd83 	bl	8003b88 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 8004082:	f003 fd2d 	bl	8007ae0 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 800408e:	2300      	movs	r3, #0
 8004090:	617b      	str	r3, [r7, #20]
 8004092:	e018      	b.n	80040c6 <W25qxx_WritePage+0x142>
	{
		if ((i % 8 == 0) && (i > 2))
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	f003 0307 	and.w	r3, r3, #7
 800409a:	2b00      	cmp	r3, #0
 800409c:	d108      	bne.n	80040b0 <W25qxx_WritePage+0x12c>
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d905      	bls.n	80040b0 <W25qxx_WritePage+0x12c>
		{
			printf("\r\n");
 80040a4:	4818      	ldr	r0, [pc, #96]	; (8004108 <W25qxx_WritePage+0x184>)
 80040a6:	f00e fb8b 	bl	80127c0 <puts>
			W25qxx_Delay(10);
 80040aa:	200a      	movs	r0, #10
 80040ac:	f009 fd6f 	bl	800db8e <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	4413      	add	r3, r2
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	4619      	mov	r1, r3
 80040ba:	4814      	ldr	r0, [pc, #80]	; (800410c <W25qxx_WritePage+0x188>)
 80040bc:	f00e fafa 	bl	80126b4 <iprintf>
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	3301      	adds	r3, #1
 80040c4:	617b      	str	r3, [r7, #20]
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d3e2      	bcc.n	8004094 <W25qxx_WritePage+0x110>
	}
	printf("\r\n");
 80040ce:	480e      	ldr	r0, [pc, #56]	; (8004108 <W25qxx_WritePage+0x184>)
 80040d0:	f00e fb76 	bl	80127c0 <puts>
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
 80040d4:	6939      	ldr	r1, [r7, #16]
 80040d6:	480e      	ldr	r0, [pc, #56]	; (8004110 <W25qxx_WritePage+0x18c>)
 80040d8:	f00e faec 	bl	80126b4 <iprintf>
	W25qxx_Delay(100);
 80040dc:	2064      	movs	r0, #100	; 0x64
 80040de:	f009 fd56 	bl	800db8e <osDelay>
#endif
	W25qxx_Delay(1);
 80040e2:	2001      	movs	r0, #1
 80040e4:	f009 fd53 	bl	800db8e <osDelay>
	w25qxx.Lock = 0;
 80040e8:	4b03      	ldr	r3, [pc, #12]	; (80040f8 <W25qxx_WritePage+0x174>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80040f0:	bf00      	nop
 80040f2:	3718      	adds	r7, #24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	20006054 	.word	0x20006054
 80040fc:	08017078 	.word	0x08017078
 8004100:	40020c00 	.word	0x40020c00
 8004104:	20005a6c 	.word	0x20005a6c
 8004108:	080170b4 	.word	0x080170b4
 800410c:	080170b8 	.word	0x080170b8
 8004110:	080170c0 	.word	0x080170c0

08004114 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b088      	sub	sp, #32
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
 8004120:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8004122:	4b36      	ldr	r3, [pc, #216]	; (80041fc <W25qxx_WriteSector+0xe8>)
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	429a      	cmp	r2, r3
 800412a:	d802      	bhi.n	8004132 <W25qxx_WriteSector+0x1e>
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d102      	bne.n	8004138 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8004132:	4b32      	ldr	r3, [pc, #200]	; (80041fc <W25qxx_WriteSector+0xe8>)
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	68b9      	ldr	r1, [r7, #8]
 800413e:	4830      	ldr	r0, [pc, #192]	; (8004200 <W25qxx_WriteSector+0xec>)
 8004140:	f00e fab8 	bl	80126b4 <iprintf>
	W25qxx_Delay(100);
 8004144:	2064      	movs	r0, #100	; 0x64
 8004146:	f009 fd22 	bl	800db8e <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 800414a:	4b2c      	ldr	r3, [pc, #176]	; (80041fc <W25qxx_WriteSector+0xe8>)
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	429a      	cmp	r2, r3
 8004152:	d306      	bcc.n	8004162 <W25qxx_WriteSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
 8004154:	482b      	ldr	r0, [pc, #172]	; (8004204 <W25qxx_WriteSector+0xf0>)
 8004156:	f00e fb33 	bl	80127c0 <puts>
		W25qxx_Delay(100);
 800415a:	2064      	movs	r0, #100	; 0x64
 800415c:	f009 fd17 	bl	800db8e <osDelay>
#endif
		return;
 8004160:	e048      	b.n	80041f4 <W25qxx_WriteSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	441a      	add	r2, r3
 8004168:	4b24      	ldr	r3, [pc, #144]	; (80041fc <W25qxx_WriteSector+0xe8>)
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	429a      	cmp	r2, r3
 800416e:	d905      	bls.n	800417c <W25qxx_WriteSector+0x68>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8004170:	4b22      	ldr	r3, [pc, #136]	; (80041fc <W25qxx_WriteSector+0xe8>)
 8004172:	691a      	ldr	r2, [r3, #16]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	61bb      	str	r3, [r7, #24]
 800417a:	e001      	b.n	8004180 <W25qxx_WriteSector+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004180:	68b8      	ldr	r0, [r7, #8]
 8004182:	f7ff fee9 	bl	8003f58 <W25qxx_SectorToPage>
 8004186:	4602      	mov	r2, r0
 8004188:	4b1c      	ldr	r3, [pc, #112]	; (80041fc <W25qxx_WriteSector+0xe8>)
 800418a:	895b      	ldrh	r3, [r3, #10]
 800418c:	4619      	mov	r1, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	fbb3 f3f1 	udiv	r3, r3, r1
 8004194:	4413      	add	r3, r2
 8004196:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004198:	4b18      	ldr	r3, [pc, #96]	; (80041fc <W25qxx_WriteSector+0xe8>)
 800419a:	895b      	ldrh	r3, [r3, #10]
 800419c:	461a      	mov	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80041a4:	fb02 f201 	mul.w	r2, r2, r1
 80041a8:	1a9b      	subs	r3, r3, r2
 80041aa:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	69f9      	ldr	r1, [r7, #28]
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f7ff fee6 	bl	8003f84 <W25qxx_WritePage>
		StartPage++;
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	3301      	adds	r3, #1
 80041bc:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 80041be:	4b0f      	ldr	r3, [pc, #60]	; (80041fc <W25qxx_WriteSector+0xe8>)
 80041c0:	895b      	ldrh	r3, [r3, #10]
 80041c2:	461a      	mov	r2, r3
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	1a9a      	subs	r2, r3, r2
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	4413      	add	r3, r2
 80041cc:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80041ce:	4b0b      	ldr	r3, [pc, #44]	; (80041fc <W25qxx_WriteSector+0xe8>)
 80041d0:	895b      	ldrh	r3, [r3, #10]
 80041d2:	461a      	mov	r2, r3
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	4413      	add	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80041de:	2300      	movs	r3, #0
 80041e0:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	dce1      	bgt.n	80041ac <W25qxx_WriteSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
 80041e8:	4807      	ldr	r0, [pc, #28]	; (8004208 <W25qxx_WriteSector+0xf4>)
 80041ea:	f00e fae9 	bl	80127c0 <puts>
	W25qxx_Delay(100);
 80041ee:	2064      	movs	r0, #100	; 0x64
 80041f0:	f009 fccd 	bl	800db8e <osDelay>
#endif
}
 80041f4:	3720      	adds	r7, #32
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	20006054 	.word	0x20006054
 8004200:	080170e4 	.word	0x080170e4
 8004204:	08017124 	.word	0x08017124
 8004208:	08017144 	.word	0x08017144

0800420c <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
 8004218:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800421a:	e002      	b.n	8004222 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 800421c:	2001      	movs	r0, #1
 800421e:	f009 fcb6 	bl	800db8e <osDelay>
	while (w25qxx.Lock == 1)
 8004222:	4b54      	ldr	r3, [pc, #336]	; (8004374 <W25qxx_ReadPage+0x168>)
 8004224:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004228:	2b01      	cmp	r3, #1
 800422a:	d0f7      	beq.n	800421c <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 800422c:	4b51      	ldr	r3, [pc, #324]	; (8004374 <W25qxx_ReadPage+0x168>)
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8004234:	4b4f      	ldr	r3, [pc, #316]	; (8004374 <W25qxx_ReadPage+0x168>)
 8004236:	895b      	ldrh	r3, [r3, #10]
 8004238:	461a      	mov	r2, r3
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	4293      	cmp	r3, r2
 800423e:	d802      	bhi.n	8004246 <W25qxx_ReadPage+0x3a>
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d102      	bne.n	800424c <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8004246:	4b4b      	ldr	r3, [pc, #300]	; (8004374 <W25qxx_ReadPage+0x168>)
 8004248:	895b      	ldrh	r3, [r3, #10]
 800424a:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	4413      	add	r3, r2
 8004252:	4a48      	ldr	r2, [pc, #288]	; (8004374 <W25qxx_ReadPage+0x168>)
 8004254:	8952      	ldrh	r2, [r2, #10]
 8004256:	4293      	cmp	r3, r2
 8004258:	d905      	bls.n	8004266 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800425a:	4b46      	ldr	r3, [pc, #280]	; (8004374 <W25qxx_ReadPage+0x168>)
 800425c:	895b      	ldrh	r3, [r3, #10]
 800425e:	461a      	mov	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	68b9      	ldr	r1, [r7, #8]
 800426c:	4842      	ldr	r0, [pc, #264]	; (8004378 <W25qxx_ReadPage+0x16c>)
 800426e:	f00e fa21 	bl	80126b4 <iprintf>
	W25qxx_Delay(100);
 8004272:	2064      	movs	r0, #100	; 0x64
 8004274:	f009 fc8b 	bl	800db8e <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8004278:	f003 fc32 	bl	8007ae0 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 800427e:	4b3d      	ldr	r3, [pc, #244]	; (8004374 <W25qxx_ReadPage+0x168>)
 8004280:	895b      	ldrh	r3, [r3, #10]
 8004282:	461a      	mov	r2, r3
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	fb03 f302 	mul.w	r3, r3, r2
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	4413      	add	r3, r2
 800428e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004290:	2200      	movs	r2, #0
 8004292:	2140      	movs	r1, #64	; 0x40
 8004294:	4839      	ldr	r0, [pc, #228]	; (800437c <W25qxx_ReadPage+0x170>)
 8004296:	f004 f99d 	bl	80085d4 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 800429a:	4b36      	ldr	r3, [pc, #216]	; (8004374 <W25qxx_ReadPage+0x168>)
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	2b08      	cmp	r3, #8
 80042a0:	d909      	bls.n	80042b6 <W25qxx_ReadPage+0xaa>
	{
		W25qxx_Spi(0x0C);
 80042a2:	200c      	movs	r0, #12
 80042a4:	f7ff fb92 	bl	80039cc <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	0e1b      	lsrs	r3, r3, #24
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff fb8c 	bl	80039cc <W25qxx_Spi>
 80042b4:	e002      	b.n	80042bc <W25qxx_ReadPage+0xb0>
	}
	else
	{
		W25qxx_Spi(0x0B);
 80042b6:	200b      	movs	r0, #11
 80042b8:	f7ff fb88 	bl	80039cc <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	0c1b      	lsrs	r3, r3, #16
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff fb82 	bl	80039cc <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	0a1b      	lsrs	r3, r3, #8
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7ff fb7c 	bl	80039cc <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	4618      	mov	r0, r3
 80042da:	f7ff fb77 	bl	80039cc <W25qxx_Spi>
	W25qxx_Spi(0);
 80042de:	2000      	movs	r0, #0
 80042e0:	f7ff fb74 	bl	80039cc <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	2364      	movs	r3, #100	; 0x64
 80042ea:	68f9      	ldr	r1, [r7, #12]
 80042ec:	4824      	ldr	r0, [pc, #144]	; (8004380 <W25qxx_ReadPage+0x174>)
 80042ee:	f007 f89c 	bl	800b42a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80042f2:	2201      	movs	r2, #1
 80042f4:	2140      	movs	r1, #64	; 0x40
 80042f6:	4821      	ldr	r0, [pc, #132]	; (800437c <W25qxx_ReadPage+0x170>)
 80042f8:	f004 f96c 	bl	80085d4 <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 80042fc:	f003 fbf0 	bl	8007ae0 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8004308:	2300      	movs	r3, #0
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	e018      	b.n	8004340 <W25qxx_ReadPage+0x134>
	{
		if ((i % 8 == 0) && (i > 2))
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	2b00      	cmp	r3, #0
 8004316:	d108      	bne.n	800432a <W25qxx_ReadPage+0x11e>
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	2b02      	cmp	r3, #2
 800431c:	d905      	bls.n	800432a <W25qxx_ReadPage+0x11e>
		{
			printf("\r\n");
 800431e:	4819      	ldr	r0, [pc, #100]	; (8004384 <W25qxx_ReadPage+0x178>)
 8004320:	f00e fa4e 	bl	80127c0 <puts>
			W25qxx_Delay(10);
 8004324:	200a      	movs	r0, #10
 8004326:	f009 fc32 	bl	800db8e <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	4413      	add	r3, r2
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	4619      	mov	r1, r3
 8004334:	4814      	ldr	r0, [pc, #80]	; (8004388 <W25qxx_ReadPage+0x17c>)
 8004336:	f00e f9bd 	bl	80126b4 <iprintf>
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	3301      	adds	r3, #1
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	429a      	cmp	r2, r3
 8004346:	d3e2      	bcc.n	800430e <W25qxx_ReadPage+0x102>
	}
	printf("\r\n");
 8004348:	480e      	ldr	r0, [pc, #56]	; (8004384 <W25qxx_ReadPage+0x178>)
 800434a:	f00e fa39 	bl	80127c0 <puts>
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
 800434e:	6939      	ldr	r1, [r7, #16]
 8004350:	480e      	ldr	r0, [pc, #56]	; (800438c <W25qxx_ReadPage+0x180>)
 8004352:	f00e f9af 	bl	80126b4 <iprintf>
	W25qxx_Delay(100);
 8004356:	2064      	movs	r0, #100	; 0x64
 8004358:	f009 fc19 	bl	800db8e <osDelay>
#endif
	W25qxx_Delay(1);
 800435c:	2001      	movs	r0, #1
 800435e:	f009 fc16 	bl	800db8e <osDelay>
	w25qxx.Lock = 0;
 8004362:	4b04      	ldr	r3, [pc, #16]	; (8004374 <W25qxx_ReadPage+0x168>)
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800436a:	bf00      	nop
 800436c:	3718      	adds	r7, #24
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	20006054 	.word	0x20006054
 8004378:	08017290 	.word	0x08017290
 800437c:	40020c00 	.word	0x40020c00
 8004380:	20005a6c 	.word	0x20005a6c
 8004384:	080170b4 	.word	0x080170b4
 8004388:	080170b8 	.word	0x080170b8
 800438c:	080172cc 	.word	0x080172cc

08004390 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b088      	sub	sp, #32
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
 800439c:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 800439e:	4b36      	ldr	r3, [pc, #216]	; (8004478 <W25qxx_ReadSector+0xe8>)
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d802      	bhi.n	80043ae <W25qxx_ReadSector+0x1e>
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d102      	bne.n	80043b4 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 80043ae:	4b32      	ldr	r3, [pc, #200]	; (8004478 <W25qxx_ReadSector+0xe8>)
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	68b9      	ldr	r1, [r7, #8]
 80043ba:	4830      	ldr	r0, [pc, #192]	; (800447c <W25qxx_ReadSector+0xec>)
 80043bc:	f00e f97a 	bl	80126b4 <iprintf>
	W25qxx_Delay(100);
 80043c0:	2064      	movs	r0, #100	; 0x64
 80043c2:	f009 fbe4 	bl	800db8e <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 80043c6:	4b2c      	ldr	r3, [pc, #176]	; (8004478 <W25qxx_ReadSector+0xe8>)
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d306      	bcc.n	80043de <W25qxx_ReadSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
 80043d0:	482b      	ldr	r0, [pc, #172]	; (8004480 <W25qxx_ReadSector+0xf0>)
 80043d2:	f00e f9f5 	bl	80127c0 <puts>
		W25qxx_Delay(100);
 80043d6:	2064      	movs	r0, #100	; 0x64
 80043d8:	f009 fbd9 	bl	800db8e <osDelay>
#endif
		return;
 80043dc:	e048      	b.n	8004470 <W25qxx_ReadSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	441a      	add	r2, r3
 80043e4:	4b24      	ldr	r3, [pc, #144]	; (8004478 <W25qxx_ReadSector+0xe8>)
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d905      	bls.n	80043f8 <W25qxx_ReadSector+0x68>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 80043ec:	4b22      	ldr	r3, [pc, #136]	; (8004478 <W25qxx_ReadSector+0xe8>)
 80043ee:	691a      	ldr	r2, [r3, #16]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	61bb      	str	r3, [r7, #24]
 80043f6:	e001      	b.n	80043fc <W25qxx_ReadSector+0x6c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80043fc:	68b8      	ldr	r0, [r7, #8]
 80043fe:	f7ff fdab 	bl	8003f58 <W25qxx_SectorToPage>
 8004402:	4602      	mov	r2, r0
 8004404:	4b1c      	ldr	r3, [pc, #112]	; (8004478 <W25qxx_ReadSector+0xe8>)
 8004406:	895b      	ldrh	r3, [r3, #10]
 8004408:	4619      	mov	r1, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004410:	4413      	add	r3, r2
 8004412:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004414:	4b18      	ldr	r3, [pc, #96]	; (8004478 <W25qxx_ReadSector+0xe8>)
 8004416:	895b      	ldrh	r3, [r3, #10]
 8004418:	461a      	mov	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004420:	fb02 f201 	mul.w	r2, r2, r1
 8004424:	1a9b      	subs	r3, r3, r2
 8004426:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	69f9      	ldr	r1, [r7, #28]
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f7ff feec 	bl	800420c <W25qxx_ReadPage>
		StartPage++;
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	3301      	adds	r3, #1
 8004438:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 800443a:	4b0f      	ldr	r3, [pc, #60]	; (8004478 <W25qxx_ReadSector+0xe8>)
 800443c:	895b      	ldrh	r3, [r3, #10]
 800443e:	461a      	mov	r2, r3
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	1a9a      	subs	r2, r3, r2
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	4413      	add	r3, r2
 8004448:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800444a:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <W25qxx_ReadSector+0xe8>)
 800444c:	895b      	ldrh	r3, [r3, #10]
 800444e:	461a      	mov	r2, r3
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	4413      	add	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800445a:	2300      	movs	r3, #0
 800445c:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	2b00      	cmp	r3, #0
 8004462:	dce1      	bgt.n	8004428 <W25qxx_ReadSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
 8004464:	4807      	ldr	r0, [pc, #28]	; (8004484 <W25qxx_ReadSector+0xf4>)
 8004466:	f00e f9ab 	bl	80127c0 <puts>
	W25qxx_Delay(100);
 800446a:	2064      	movs	r0, #100	; 0x64
 800446c:	f009 fb8f 	bl	800db8e <osDelay>
#endif
}
 8004470:	3720      	adds	r7, #32
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	20006054 	.word	0x20006054
 800447c:	080172f0 	.word	0x080172f0
 8004480:	08017330 	.word	0x08017330
 8004484:	08017350 	.word	0x08017350

08004488 <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	b2d2      	uxtb	r2, r2
 800449c:	4611      	mov	r1, r2
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	4798      	blx	r3
 80044a2:	4603      	mov	r3, r0
 80044a4:	4618      	mov	r0, r3
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <_Z12ISBDCallbackv>:

bool ISBDCallback() __attribute__((weak));
void ISBDConsoleCallback(IridiumSBD *device, char c) __attribute__((weak));
void ISBDDiagsCallback(IridiumSBD *device, char c) __attribute__((weak));

bool ISBDCallback() { return true; }
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	2301      	movs	r3, #1
 80044b2:	4618      	mov	r0, r3
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <_Z19ISBDConsoleCallbackP10IridiumSBDc>:
void ISBDConsoleCallback(IridiumSBD *device, char c) { }
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	460b      	mov	r3, r1
 80044c6:	70fb      	strb	r3, [r7, #3]
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <_Z17ISBDDiagsCallbackP10IridiumSBDc>:
void ISBDDiagsCallback(IridiumSBD *device, char c) { }
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	460b      	mov	r3, r1
 80044de:	70fb      	strb	r3, [r7, #3]
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <_ZN10IridiumSBD5beginEv>:



// Power on the RockBLOCK or return from sleep
int IridiumSBD::begin()
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <_ZN10IridiumSBD5beginEv+0x16>
      return ISBD_REENTRANT;
 80044fe:	2309      	movs	r3, #9
 8004500:	e01b      	b.n	800453a <_ZN10IridiumSBD5beginEv+0x4e>

   this->reentrant = true;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   int ret = internalBegin();
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f9e6 	bl	80048dc <_ZN10IridiumSBD13internalBeginEv>
 8004510:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

   // Absent a successful startup, keep the device turned off
   if (ret != ISBD_SUCCESS)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00b      	beq.n	8004538 <_ZN10IridiumSBD5beginEv+0x4c>
   {
      if (this->useSerial)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <_ZN10IridiumSBD5beginEv+0x44>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 fd1c 	bl	8004f68 <_ZN10IridiumSBD13endSerialPortEv>
      power(false);
 8004530:	2100      	movs	r1, #0
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 fc66 	bl	8004e04 <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 8004538:	68fb      	ldr	r3, [r7, #12]
}
 800453a:	4618      	mov	r0, r3
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <_ZN10IridiumSBD5sleepEv>:
   return ret;
}

// Gracefully put device to lower power mode (if sleep pin provided)
int IridiumSBD::sleep()
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b084      	sub	sp, #16
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <_ZN10IridiumSBD5sleepEv+0x16>
      return ISBD_REENTRANT;
 8004554:	2309      	movs	r3, #9
 8004556:	e028      	b.n	80045aa <_ZN10IridiumSBD5sleepEv+0x68>

   if (this->useSerial && (this->sleepPin == -1))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800455e:	2b00      	cmp	r3, #0
 8004560:	d007      	beq.n	8004572 <_ZN10IridiumSBD5sleepEv+0x30>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456c:	d101      	bne.n	8004572 <_ZN10IridiumSBD5sleepEv+0x30>
      return ISBD_NO_SLEEP_PIN;
 800456e:	230b      	movs	r3, #11
 8004570:	e01b      	b.n	80045aa <_ZN10IridiumSBD5sleepEv+0x68>

   this->reentrant = true;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   int ret = internalSleep();
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 fb38 	bl	8004bf0 <_ZN10IridiumSBD13internalSleepEv>
 8004580:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

   if (ret == ISBD_SUCCESS)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10b      	bne.n	80045a8 <_ZN10IridiumSBD5sleepEv+0x66>
   {
      if (this->useSerial)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004596:	2b00      	cmp	r3, #0
 8004598:	d002      	beq.n	80045a0 <_ZN10IridiumSBD5sleepEv+0x5e>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 fce4 	bl	8004f68 <_ZN10IridiumSBD13endSerialPortEv>
      power(false); // power off
 80045a0:	2100      	movs	r1, #0
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 fc2e 	bl	8004e04 <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 80045a8:	68fb      	ldr	r3, [r7, #12]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <_ZN10IridiumSBD16enableRingAlertsEb>:
{
   this->msstmWorkaroundRequested = useWorkAround;
}

void IridiumSBD::enableRingAlerts(bool enable) // true to enable SBDRING alerts and RING signal pin
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b082      	sub	sp, #8
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
 80045ba:	460b      	mov	r3, r1
 80045bc:	70fb      	strb	r3, [r7, #3]
   this->ringAlertsEnabled = enable;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	78fa      	ldrb	r2, [r7, #3]
 80045c2:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
   if (enable)
 80045c6:	78fb      	ldrb	r3, [r7, #3]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00e      	beq.n	80045ea <_ZN10IridiumSBD16enableRingAlertsEb+0x38>
   {
      this->ringAsserted = false;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
      if (!this->useSerial) // If we are using I2C, clear the ring indicator flag
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045da:	f083 0301 	eor.w	r3, r3, #1
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d002      	beq.n	80045ea <_ZN10IridiumSBD16enableRingAlertsEb+0x38>
      {
        clearRingIndicator();
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 f923 	bl	8004830 <_ZN10IridiumSBD18clearRingIndicatorEv>
      }
   }
}
 80045ea:	bf00      	nop
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
	...

080045f4 <_ZN10IridiumSBD18getFirmwareVersionEPcj>:
   memcpy(&tm, localtime(&now), sizeof tm);
   return ISBD_SUCCESS;
}

int IridiumSBD::getFirmwareVersion(char *version, size_t bufferSize)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af02      	add	r7, sp, #8
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
   if (bufferSize < 8)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b07      	cmp	r3, #7
 8004604:	d801      	bhi.n	800460a <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x16>
      return ISBD_RX_OVERFLOW;
 8004606:	2308      	movs	r3, #8
 8004608:	e01e      	b.n	8004648 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   send(F("AT+CGMR\r"));
 800460a:	2301      	movs	r3, #1
 800460c:	2201      	movs	r2, #1
 800460e:	4910      	ldr	r1, [pc, #64]	; (8004650 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x5c>)
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 fcb7 	bl	8004f84 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(version, bufferSize, "Call Processor Version: "))
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	4b0e      	ldr	r3, [pc, #56]	; (8004654 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x60>)
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	4b0e      	ldr	r3, [pc, #56]	; (8004658 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x64>)
 800461e:	68b9      	ldr	r1, [r7, #8]
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 faf7 	bl	8004c14 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8004626:	4603      	mov	r3, r0
 8004628:	f083 0301 	eor.w	r3, r3, #1
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d009      	beq.n	8004646 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x52>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f000 fbb4 	bl	8004da0 <_ZN10IridiumSBD9cancelledEv>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x4e>
 800463e:	2304      	movs	r3, #4
 8004640:	e002      	b.n	8004648 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>
 8004642:	2303      	movs	r3, #3
 8004644:	e000      	b.n	8004648 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   return ISBD_SUCCESS;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	0801742c 	.word	0x0801742c
 8004654:	08017424 	.word	0x08017424
 8004658:	08017438 	.word	0x08017438

0800465c <_ZN10IridiumSBD21enableSuperCapChargerEb>:

void IridiumSBD::enableSuperCapCharger(bool enable)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	460b      	mov	r3, r1
 8004666:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the charger manually)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800466e:	2b00      	cmp	r3, #0
 8004670:	d004      	beq.n	800467c <_ZN10IridiumSBD21enableSuperCapChargerEb+0x20>
  {
    diagprint(F("enableSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8004672:	4918      	ldr	r1, [pc, #96]	; (80046d4 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x78>)
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 fd2d 	bl	80050d4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 800467a:	e028      	b.n	80046ce <_ZN10IridiumSBD21enableSuperCapChargerEb+0x72>
  }

  // Enable/disable the supercapacitor charger by pulling its SHDN pin high/low
  check9603pins(); // Update IO_REGISTER
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f001 f80b 	bl	8005698 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8004682:	78fb      	ldrb	r3, [r7, #3]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00b      	beq.n	80046a0 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x44>
  {
    IO_REGISTER |= IO_SHDN; // Set the SHDN bit
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8004694:	4313      	orrs	r3, r2
 8004696:	b2da      	uxtb	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 800469e:	e00f      	b.n	80046c0 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_SHDN; // Clear the SHDN bit
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80046a6:	b25a      	sxtb	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80046ae:	b25b      	sxtb	r3, r3
 80046b0:	43db      	mvns	r3, r3
 80046b2:	b25b      	sxtb	r3, r3
 80046b4:	4013      	ands	r3, r2
 80046b6:	b25b      	sxtb	r3, r3
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80046c6:	4619      	mov	r1, r3
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f001 f820 	bl	800570e <_ZN10IridiumSBD11set9603pinsEh>
}
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	08017454 	.word	0x08017454

080046d8 <_ZN10IridiumSBD20checkSuperCapChargerEv>:

bool IridiumSBD::checkSuperCapCharger()
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial (the user will have to check PGOOD manually)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d005      	beq.n	80046f6 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x1e>
  {
    diagprint(F("checkSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 80046ea:	4912      	ldr	r1, [pc, #72]	; (8004734 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x5c>)
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 fcf1 	bl	80050d4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return(false);
 80046f2:	2300      	movs	r3, #0
 80046f4:	e01a      	b.n	800472c <_ZN10IridiumSBD20checkSuperCapChargerEv+0x54>
  }

  // Check the status of the supercapacitor charger PGOOD pin
  check9603pins(); // Update IO_REGISTER
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 ffce 	bl	8005698 <_ZN10IridiumSBD13check9603pinsEv>
  if (IO_REGISTER &= IO_PGOOD) // If the PGOOD bit is set, return true
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8004708:	4013      	ands	r3, r2
 800470a:	b2da      	uxtb	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004718:	2b00      	cmp	r3, #0
 800471a:	bf14      	ite	ne
 800471c:	2301      	movne	r3, #1
 800471e:	2300      	moveq	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <_ZN10IridiumSBD20checkSuperCapChargerEv+0x52>
  {
    return(true);
 8004726:	2301      	movs	r3, #1
 8004728:	e000      	b.n	800472c <_ZN10IridiumSBD20checkSuperCapChargerEv+0x54>
  }
  else
  {
    return(false);
 800472a:	2300      	movs	r3, #0
  }
}
 800472c:	4618      	mov	r0, r3
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	080174a0 	.word	0x080174a0

08004738 <_ZN10IridiumSBD16enable9603NpowerEb>:

void IridiumSBD::enable9603Npower(bool enable)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	460b      	mov	r3, r1
 8004742:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N power manually)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800474a:	2b00      	cmp	r3, #0
 800474c:	d004      	beq.n	8004758 <_ZN10IridiumSBD16enable9603NpowerEb+0x20>
  {
    diagprint(F("enable9603Npower is only valid when using I2C on the Qwiic Iridium\r\n"));
 800474e:	4918      	ldr	r1, [pc, #96]	; (80047b0 <_ZN10IridiumSBD16enable9603NpowerEb+0x78>)
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 fcbf 	bl	80050d4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8004756:	e028      	b.n	80047aa <_ZN10IridiumSBD16enable9603NpowerEb+0x72>
  }

  // Enable/disable power to the 9603N by pulling PWR_EN high/low
  check9603pins(); // Update IO_REGISTER
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 ff9d 	bl	8005698 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 800475e:	78fb      	ldrb	r3, [r7, #3]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00b      	beq.n	800477c <_ZN10IridiumSBD16enable9603NpowerEb+0x44>
  {
    IO_REGISTER |= IO_PWR_EN; // Set the PWR_EN bit
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8004770:	4313      	orrs	r3, r2
 8004772:	b2da      	uxtb	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 800477a:	e00f      	b.n	800479c <_ZN10IridiumSBD16enable9603NpowerEb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_PWR_EN; // Clear the PWR_EN bit
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004782:	b25a      	sxtb	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 800478a:	b25b      	sxtb	r3, r3
 800478c:	43db      	mvns	r3, r3
 800478e:	b25b      	sxtb	r3, r3
 8004790:	4013      	ands	r3, r2
 8004792:	b25b      	sxtb	r3, r3
 8004794:	b2da      	uxtb	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80047a2:	4619      	mov	r1, r3
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 ffb2 	bl	800570e <_ZN10IridiumSBD11set9603pinsEh>
}
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	080174ec 	.word	0x080174ec

080047b4 <_ZN10IridiumSBD10enable9603Eb>:

void IridiumSBD::enable9603(bool enable)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	460b      	mov	r3, r1
 80047be:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N manually)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d004      	beq.n	80047d4 <_ZN10IridiumSBD10enable9603Eb+0x20>
  {
    diagprint(F("enable9603 is only valid when using I2C on the Qwiic Iridium\r\n"));
 80047ca:	4918      	ldr	r1, [pc, #96]	; (800482c <_ZN10IridiumSBD10enable9603Eb+0x78>)
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 fc81 	bl	80050d4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 80047d2:	e028      	b.n	8004826 <_ZN10IridiumSBD10enable9603Eb+0x72>
  }

  // Enable/disable the 9603 by pulling ON_OFF high/low
  check9603pins(); // Update IO_REGISTER
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 ff5f 	bl	8005698 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 80047da:	78fb      	ldrb	r3, [r7, #3]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00b      	beq.n	80047f8 <_ZN10IridiumSBD10enable9603Eb+0x44>
  {
    IO_REGISTER |= IO_ON_OFF; // Set the ON_OFF bit
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 80047ec:	4313      	orrs	r3, r2
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 80047f6:	e00f      	b.n	8004818 <_ZN10IridiumSBD10enable9603Eb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_ON_OFF; // Clear the ON_OFF bit
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80047fe:	b25a      	sxtb	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8004806:	b25b      	sxtb	r3, r3
 8004808:	43db      	mvns	r3, r3
 800480a:	b25b      	sxtb	r3, r3
 800480c:	4013      	ands	r3, r2
 800480e:	b25b      	sxtb	r3, r3
 8004810:	b2da      	uxtb	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800481e:	4619      	mov	r1, r3
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 ff74 	bl	800570e <_ZN10IridiumSBD11set9603pinsEh>
}
 8004826:	3708      	adds	r7, #8
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	08017534 	.word	0x08017534

08004830 <_ZN10IridiumSBD18clearRingIndicatorEv>:
    return(false);
  }
}

void IridiumSBD::clearRingIndicator()
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800483e:	2b00      	cmp	r3, #0
 8004840:	d004      	beq.n	800484c <_ZN10IridiumSBD18clearRingIndicatorEv+0x1c>
  {
    diagprint(F("clearRingIndicator is only valid when using I2C on the Qwiic Iridium\r\n"));
 8004842:	4913      	ldr	r1, [pc, #76]	; (8004890 <_ZN10IridiumSBD18clearRingIndicatorEv+0x60>)
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 fc45 	bl	80050d4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 800484a:	e01d      	b.n	8004888 <_ZN10IridiumSBD18clearRingIndicatorEv+0x58>
  }

  // Clear the 9603 RI flag
  check9603pins(); // Update IO_REGISTER
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 ff23 	bl	8005698 <_ZN10IridiumSBD13check9603pinsEv>
  IO_REGISTER &= ~IO_RI; // Clear the RI bit
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004858:	b25a      	sxtb	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8004860:	b25b      	sxtb	r3, r3
 8004862:	43db      	mvns	r3, r3
 8004864:	b25b      	sxtb	r3, r3
 8004866:	4013      	ands	r3, r2
 8004868:	b25b      	sxtb	r3, r3
 800486a:	b2da      	uxtb	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  set9603pins(IO_REGISTER); // Update the pins
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004878:	4619      	mov	r1, r3
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 ff47 	bl	800570e <_ZN10IridiumSBD11set9603pinsEh>
  this->ringAsserted = false; // Also clear the ringAsserted flag
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
}
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	08017604 	.word	0x08017604

08004894 <_ZN10IridiumSBD11isConnectedEv>:

//Returns true if the I2C device is connected
//Always returns true for serial
//boolean IridiumSBD::isConnected() TODO
bool IridiumSBD::isConnected()
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
   if (this->useSerial) // If we are using Serial
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <_ZN10IridiumSBD11isConnectedEv+0x16>
   {
		return true;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e013      	b.n	80048d2 <_ZN10IridiumSBD11isConnectedEv+0x3e>
   }
   else
   {
		wireport->beginTransmission((uint8_t)deviceaddress);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048b4:	4619      	mov	r1, r3
 80048b6:	4610      	mov	r0, r2
 80048b8:	f001 fbee 	bl	8006098 <_ZN7TwoWire17beginTransmissionEh>
		return (wireport->endTransmission() == 0); // Check that the device ack's
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048c0:	4618      	mov	r0, r3
 80048c2:	f001 fc33 	bl	800612c <_ZN7TwoWire15endTransmissionEv>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	bf0c      	ite	eq
 80048cc:	2301      	moveq	r3, #1
 80048ce:	2300      	movne	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
   }
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
	...

080048dc <_ZN10IridiumSBD13internalBeginEv>:
/*
Private interface
*/

int IridiumSBD::internalBegin()
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b090      	sub	sp, #64	; 0x40
 80048e0:	af02      	add	r7, sp, #8
 80048e2:	6078      	str	r0, [r7, #4]
   diagprint(F("Calling internalBegin\r\n"));
 80048e4:	49b1      	ldr	r1, [pc, #708]	; (8004bac <_ZN10IridiumSBD13internalBeginEv+0x2d0>)
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 fbf4 	bl	80050d4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (!this->asleep)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80048f2:	f083 0301 	eor.w	r3, r3, #1
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d001      	beq.n	8004900 <_ZN10IridiumSBD13internalBeginEv+0x24>
      return ISBD_ALREADY_AWAKE;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e150      	b.n	8004ba2 <_ZN10IridiumSBD13internalBeginEv+0x2c6>

   if (!this->useSerial) // If we are using I2C
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004906:	f083 0301 	eor.w	r3, r3, #1
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2b00      	cmp	r3, #0
 800490e:	d005      	beq.n	800491c <_ZN10IridiumSBD13internalBeginEv+0x40>
   {
      check9603pins(); // Update IO_REGISTER with the status of the 9603 pins
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 fec1 	bl	8005698 <_ZN10IridiumSBD13check9603pinsEv>
      check9603data(); // Get any waiting 9603 serial data
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 fde6 	bl	80054e8 <_ZN10IridiumSBD13check9603dataEv>
   }

   power(true); // power on
 800491c:	2101      	movs	r1, #1
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 fa70 	bl	8004e04 <_ZN10IridiumSBD5powerEb>

   bool modemAlive = false;
 8004924:	2300      	movs	r3, #0
 8004926:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

   unsigned long startupTime = 500; //ms
 800492a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800492e:	62fb      	str	r3, [r7, #44]	; 0x2c
   for (unsigned long start = millis(); millis() - start < startupTime;)
 8004930:	f003 f8d6 	bl	8007ae0 <HAL_GetTick>
 8004934:	62b8      	str	r0, [r7, #40]	; 0x28
 8004936:	f003 f8d3 	bl	8007ae0 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004942:	429a      	cmp	r2, r3
 8004944:	bf8c      	ite	hi
 8004946:	2301      	movhi	r3, #1
 8004948:	2300      	movls	r3, #0
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b00      	cmp	r3, #0
 800494e:	d007      	beq.n	8004960 <_ZN10IridiumSBD13internalBeginEv+0x84>
      if (cancelled())
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 fa25 	bl	8004da0 <_ZN10IridiumSBD9cancelledEv>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d0ec      	beq.n	8004936 <_ZN10IridiumSBD13internalBeginEv+0x5a>
         return ISBD_CANCELLED;
 800495c:	2304      	movs	r3, #4
 800495e:	e120      	b.n	8004ba2 <_ZN10IridiumSBD13internalBeginEv+0x2c6>

   if (this->useSerial) // If we are using Serial
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <_ZN10IridiumSBD13internalBeginEv+0x94>
      beginSerialPort(); // Apollo3 v2.1 Serial fix - begin the Serial port 500ms after power(true)
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 faee 	bl	8004f4c <_ZN10IridiumSBD15beginSerialPortEv>

   // Turn on modem and wait for a response from "AT" command to begin
   for (unsigned long start = millis(); !modemAlive && millis() - start < 1000UL * this->startupTimeout;)
 8004970:	f003 f8b6 	bl	8007ae0 <HAL_GetTick>
 8004974:	6278      	str	r0, [r7, #36]	; 0x24
 8004976:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800497a:	f083 0301 	eor.w	r3, r3, #1
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	d010      	beq.n	80049a6 <_ZN10IridiumSBD13internalBeginEv+0xca>
 8004984:	f003 f8ac 	bl	8007ae0 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	1ad2      	subs	r2, r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004994:	4619      	mov	r1, r3
 8004996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800499a:	fb03 f301 	mul.w	r3, r3, r1
 800499e:	429a      	cmp	r2, r3
 80049a0:	d201      	bcs.n	80049a6 <_ZN10IridiumSBD13internalBeginEv+0xca>
 80049a2:	2301      	movs	r3, #1
 80049a4:	e000      	b.n	80049a8 <_ZN10IridiumSBD13internalBeginEv+0xcc>
 80049a6:	2300      	movs	r3, #0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d018      	beq.n	80049de <_ZN10IridiumSBD13internalBeginEv+0x102>
   {
      send(F("AT\r"));
 80049ac:	2301      	movs	r3, #1
 80049ae:	2201      	movs	r2, #1
 80049b0:	497f      	ldr	r1, [pc, #508]	; (8004bb0 <_ZN10IridiumSBD13internalBeginEv+0x2d4>)
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 fae6 	bl	8004f84 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      modemAlive = waitForATResponse();
 80049b8:	4b7e      	ldr	r3, [pc, #504]	; (8004bb4 <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	2300      	movs	r3, #0
 80049be:	2200      	movs	r2, #0
 80049c0:	2100      	movs	r1, #0
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f926 	bl	8004c14 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80049c8:	4603      	mov	r3, r0
 80049ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (cancelled())
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f9e6 	bl	8004da0 <_ZN10IridiumSBD9cancelledEv>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0cd      	beq.n	8004976 <_ZN10IridiumSBD13internalBeginEv+0x9a>
         return ISBD_CANCELLED;
 80049da:	2304      	movs	r3, #4
 80049dc:	e0e1      	b.n	8004ba2 <_ZN10IridiumSBD13internalBeginEv+0x2c6>
   }

   if (!modemAlive)
 80049de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80049e2:	f083 0301 	eor.w	r3, r3, #1
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d005      	beq.n	80049f8 <_ZN10IridiumSBD13internalBeginEv+0x11c>
   {
      diagprint(F("No modem detected.\r\n"));
 80049ec:	4972      	ldr	r1, [pc, #456]	; (8004bb8 <_ZN10IridiumSBD13internalBeginEv+0x2dc>)
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 fb70 	bl	80050d4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      return ISBD_NO_MODEM_DETECTED;
 80049f4:	2305      	movs	r3, #5
 80049f6:	e0d4      	b.n	8004ba2 <_ZN10IridiumSBD13internalBeginEv+0x2c6>
   }

   // The usual initialization sequence
   const char *strings[3] = { "ATE1\r", "AT&D0\r", "AT&K0\r" };
 80049f8:	4a70      	ldr	r2, [pc, #448]	; (8004bbc <_ZN10IridiumSBD13internalBeginEv+0x2e0>)
 80049fa:	f107 0310 	add.w	r3, r7, #16
 80049fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8004a00:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   for (int i=0; i<3; ++i)
 8004a04:	2300      	movs	r3, #0
 8004a06:	633b      	str	r3, [r7, #48]	; 0x30
 8004a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	dc26      	bgt.n	8004a5c <_ZN10IridiumSBD13internalBeginEv+0x180>
   {
      send(strings[i]);
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004a16:	4413      	add	r3, r2
 8004a18:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 fb0a 	bl	8005038 <_ZN10IridiumSBD4sendEPKc>
      if (!waitForATResponse())
 8004a24:	4b63      	ldr	r3, [pc, #396]	; (8004bb4 <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	2300      	movs	r3, #0
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f8f0 	bl	8004c14 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8004a34:	4603      	mov	r3, r0
 8004a36:	f083 0301 	eor.w	r3, r3, #1
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d009      	beq.n	8004a54 <_ZN10IridiumSBD13internalBeginEv+0x178>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f9ad 	bl	8004da0 <_ZN10IridiumSBD9cancelledEv>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <_ZN10IridiumSBD13internalBeginEv+0x174>
 8004a4c:	2304      	movs	r3, #4
 8004a4e:	e0a8      	b.n	8004ba2 <_ZN10IridiumSBD13internalBeginEv+0x2c6>
 8004a50:	2303      	movs	r3, #3
 8004a52:	e0a6      	b.n	8004ba2 <_ZN10IridiumSBD13internalBeginEv+0x2c6>
   for (int i=0; i<3; ++i)
 8004a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a56:	3301      	adds	r3, #1
 8004a58:	633b      	str	r3, [r7, #48]	; 0x30
 8004a5a:	e7d5      	b.n	8004a08 <_ZN10IridiumSBD13internalBeginEv+0x12c>
   }

   // Enable or disable RING alerts as requested by user
   // By default they are on if a RING pin was supplied on constructor
   diagprint(F("Ring alerts are")); diagprint(ringAlertsEnabled ? F("") : F(" NOT")); diagprint(F(" enabled.\r\n"));
 8004a5c:	4958      	ldr	r1, [pc, #352]	; (8004bc0 <_ZN10IridiumSBD13internalBeginEv+0x2e4>)
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 fb38 	bl	80050d4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <_ZN10IridiumSBD13internalBeginEv+0x196>
 8004a6e:	4b55      	ldr	r3, [pc, #340]	; (8004bc4 <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 8004a70:	e000      	b.n	8004a74 <_ZN10IridiumSBD13internalBeginEv+0x198>
 8004a72:	4b55      	ldr	r3, [pc, #340]	; (8004bc8 <_ZN10IridiumSBD13internalBeginEv+0x2ec>)
 8004a74:	4619      	mov	r1, r3
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 fb2c 	bl	80050d4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8004a7c:	4953      	ldr	r1, [pc, #332]	; (8004bcc <_ZN10IridiumSBD13internalBeginEv+0x2f0>)
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 fb28 	bl	80050d4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (ringAlertsEnabled) enableRingAlerts(true); // This will clear ringAsserted and the Ring Indicator flag
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d004      	beq.n	8004a98 <_ZN10IridiumSBD13internalBeginEv+0x1bc>
 8004a8e:	2101      	movs	r1, #1
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f7ff fd8e 	bl	80045b2 <_ZN10IridiumSBD16enableRingAlertsEb>
 8004a96:	e00a      	b.n	8004aae <_ZN10IridiumSBD13internalBeginEv+0x1d2>
   else {
	   if (!this->useSerial) clearRingIndicator(); // If ring alerts are not enabled and using I2C, make sure the Ring Indicator flag is clear
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a9e:	f083 0301 	eor.w	r3, r3, #1
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d002      	beq.n	8004aae <_ZN10IridiumSBD13internalBeginEv+0x1d2>
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7ff fec1 	bl	8004830 <_ZN10IridiumSBD18clearRingIndicatorEv>
   }

   send(ringAlertsEnabled ? F("AT+SBDMTA=1\r") : F("AT+SBDMTA=0\r"));
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <_ZN10IridiumSBD13internalBeginEv+0x1e0>
 8004ab8:	4945      	ldr	r1, [pc, #276]	; (8004bd0 <_ZN10IridiumSBD13internalBeginEv+0x2f4>)
 8004aba:	e000      	b.n	8004abe <_ZN10IridiumSBD13internalBeginEv+0x1e2>
 8004abc:	4945      	ldr	r1, [pc, #276]	; (8004bd4 <_ZN10IridiumSBD13internalBeginEv+0x2f8>)
 8004abe:	2301      	movs	r3, #1
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fa5e 	bl	8004f84 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse())
 8004ac8:	4b3a      	ldr	r3, [pc, #232]	; (8004bb4 <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	2300      	movs	r3, #0
 8004ace:	2200      	movs	r2, #0
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f89e 	bl	8004c14 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	f083 0301 	eor.w	r3, r3, #1
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d009      	beq.n	8004af8 <_ZN10IridiumSBD13internalBeginEv+0x21c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f95b 	bl	8004da0 <_ZN10IridiumSBD9cancelledEv>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d001      	beq.n	8004af4 <_ZN10IridiumSBD13internalBeginEv+0x218>
 8004af0:	2304      	movs	r3, #4
 8004af2:	e056      	b.n	8004ba2 <_ZN10IridiumSBD13internalBeginEv+0x2c6>
 8004af4:	2303      	movs	r3, #3
 8004af6:	e054      	b.n	8004ba2 <_ZN10IridiumSBD13internalBeginEv+0x2c6>

   // Decide whether the internal MSSTM workaround should be enforced on TX/RX
   // By default it is unless the firmware rev is >= TA13001
   char version[8];
   int ret = getFirmwareVersion(version, sizeof(version));
 8004af8:	f107 0308 	add.w	r3, r7, #8
 8004afc:	2208      	movs	r2, #8
 8004afe:	4619      	mov	r1, r3
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7ff fd77 	bl	80045f4 <_ZN10IridiumSBD18getFirmwareVersionEPcj>
 8004b06:	6238      	str	r0, [r7, #32]
   if (ret != ISBD_SUCCESS)
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d008      	beq.n	8004b20 <_ZN10IridiumSBD13internalBeginEv+0x244>
   {
      diagprint(F("Unknown FW version\r\n"));
 8004b0e:	4932      	ldr	r1, [pc, #200]	; (8004bd8 <_ZN10IridiumSBD13internalBeginEv+0x2fc>)
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 fadf 	bl	80050d4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      msstmWorkaroundRequested = true;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8004b1e:	e027      	b.n	8004b70 <_ZN10IridiumSBD13internalBeginEv+0x294>
   }
   else
   {
      diagprint(F("Firmware version is ")); diagprint(version); diagprint(F("\r\n"));
 8004b20:	492e      	ldr	r1, [pc, #184]	; (8004bdc <_ZN10IridiumSBD13internalBeginEv+0x300>)
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 fad6 	bl	80050d4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8004b28:	f107 0308 	add.w	r3, r7, #8
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 faf6 	bl	8005120 <_ZN10IridiumSBD9diagprintEPKc>
 8004b34:	492a      	ldr	r1, [pc, #168]	; (8004be0 <_ZN10IridiumSBD13internalBeginEv+0x304>)
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 facc 	bl	80050d4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (version[0] == 'T' && version[1] == 'A')
 8004b3c:	7a3b      	ldrb	r3, [r7, #8]
 8004b3e:	2b54      	cmp	r3, #84	; 0x54
 8004b40:	d116      	bne.n	8004b70 <_ZN10IridiumSBD13internalBeginEv+0x294>
 8004b42:	7a7b      	ldrb	r3, [r7, #9]
 8004b44:	2b41      	cmp	r3, #65	; 0x41
 8004b46:	d113      	bne.n	8004b70 <_ZN10IridiumSBD13internalBeginEv+0x294>
      {
         unsigned long ver = strtoul(version + 2, NULL, 10);
 8004b48:	f107 0308 	add.w	r3, r7, #8
 8004b4c:	3302      	adds	r3, #2
 8004b4e:	220a      	movs	r2, #10
 8004b50:	2100      	movs	r1, #0
 8004b52:	4618      	mov	r0, r3
 8004b54:	f00e fed4 	bl	8013900 <strtoul>
 8004b58:	61f8      	str	r0, [r7, #28]
         msstmWorkaroundRequested = ver < ISBD_MSSTM_WORKAROUND_FW_VER;
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8004b60:	4293      	cmp	r3, r2
 8004b62:	bf94      	ite	ls
 8004b64:	2301      	movls	r3, #1
 8004b66:	2300      	movhi	r3, #0
 8004b68:	b2da      	uxtb	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
      }
   }
   diagprint(F("MSSTM workaround is")); diagprint(msstmWorkaroundRequested ? F("") : F(" NOT")); diagprint(F(" enforced.\r\n"));
 8004b70:	491c      	ldr	r1, [pc, #112]	; (8004be4 <_ZN10IridiumSBD13internalBeginEv+0x308>)
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 faae 	bl	80050d4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <_ZN10IridiumSBD13internalBeginEv+0x2aa>
 8004b82:	4b10      	ldr	r3, [pc, #64]	; (8004bc4 <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 8004b84:	e000      	b.n	8004b88 <_ZN10IridiumSBD13internalBeginEv+0x2ac>
 8004b86:	4b10      	ldr	r3, [pc, #64]	; (8004bc8 <_ZN10IridiumSBD13internalBeginEv+0x2ec>)
 8004b88:	4619      	mov	r1, r3
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 faa2 	bl	80050d4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8004b90:	4915      	ldr	r1, [pc, #84]	; (8004be8 <_ZN10IridiumSBD13internalBeginEv+0x30c>)
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 fa9e 	bl	80050d4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   // Done!
   diagprint(F("InternalBegin: success!\r\n"));
 8004b98:	4914      	ldr	r1, [pc, #80]	; (8004bec <_ZN10IridiumSBD13internalBeginEv+0x310>)
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 fa9a 	bl	80050d4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   return ISBD_SUCCESS;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3738      	adds	r7, #56	; 0x38
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	08017724 	.word	0x08017724
 8004bb0:	0801773c 	.word	0x0801773c
 8004bb4:	08017424 	.word	0x08017424
 8004bb8:	08017740 	.word	0x08017740
 8004bbc:	08017814 	.word	0x08017814
 8004bc0:	08017758 	.word	0x08017758
 8004bc4:	08017768 	.word	0x08017768
 8004bc8:	0801776c 	.word	0x0801776c
 8004bcc:	08017774 	.word	0x08017774
 8004bd0:	08017780 	.word	0x08017780
 8004bd4:	08017790 	.word	0x08017790
 8004bd8:	080177a0 	.word	0x080177a0
 8004bdc:	080177b8 	.word	0x080177b8
 8004be0:	080177d0 	.word	0x080177d0
 8004be4:	080177d4 	.word	0x080177d4
 8004be8:	080177e8 	.word	0x080177e8
 8004bec:	080177f8 	.word	0x080177f8

08004bf0 <_ZN10IridiumSBD13internalSleepEv>:
   okToProceed = isxdigit(msstmResponseBuf[0]);
   return ISBD_SUCCESS;
}

int IridiumSBD::internalSleep()
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
   if (this->asleep)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <_ZN10IridiumSBD13internalSleepEv+0x16>
      return ISBD_IS_ASLEEP;
 8004c02:	230a      	movs	r3, #10
 8004c04:	e000      	b.n	8004c08 <_ZN10IridiumSBD13internalSleepEv+0x18>

   if (!waitForATResponse())
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
#endif

   return ISBD_SUCCESS;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>:

// Wait for response from previous AT command.  This process terminates when "terminator" string is seen or upon timeout.
// If "prompt" string is provided (example "+CSQ:"), then all characters following prompt up to the next CRLF are
// stored in response buffer for later parsing by caller.
bool IridiumSBD::waitForATResponse(char *response, int responseSize, const char *prompt, const char *terminator)
{
 8004c14:	b590      	push	{r4, r7, lr}
 8004c16:	b08b      	sub	sp, #44	; 0x2c
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
 8004c20:	603b      	str	r3, [r7, #0]
   diagprint(F("Waiting for response "));
 8004c22:	495d      	ldr	r1, [pc, #372]	; (8004d98 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x184>)
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f000 fa55 	bl	80050d4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   diagprint(terminator);
 8004c2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f000 fa77 	bl	8005120 <_ZN10IridiumSBD9diagprintEPKc>
   HAL_UART_Transmit(&(this->uart),(uint8_t*) terminator, strlen(terminator), HAL_MAX_DELAY); //TODO doesn't print otherwise
 8004c32:	68fc      	ldr	r4, [r7, #12]
 8004c34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004c36:	f7fb fadb 	bl	80001f0 <strlen>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c44:	4620      	mov	r0, r4
 8004c46:	f007 fe0c 	bl	800c862 <HAL_UART_Transmit>
   diagprint(F("\r\n"));
 8004c4a:	4954      	ldr	r1, [pc, #336]	; (8004d9c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x188>)
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 fa41 	bl	80050d4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (response)
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d005      	beq.n	8004c64 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x50>
      memset(response, 0, responseSize);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	68b8      	ldr	r0, [r7, #8]
 8004c60:	f00c fdfc 	bl	801185c <memset>

   int matchPromptPos = 0; // Matches chars in prompt
 8004c64:	2300      	movs	r3, #0
 8004c66:	627b      	str	r3, [r7, #36]	; 0x24
   int matchTerminatorPos = 0; // Matches chars in terminator
 8004c68:	2300      	movs	r3, #0
 8004c6a:	623b      	str	r3, [r7, #32]
   enum {LOOKING_FOR_PROMPT, GATHERING_RESPONSE, LOOKING_FOR_TERMINATOR};
   int promptState = prompt ? LOOKING_FOR_PROMPT : LOOKING_FOR_TERMINATOR;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x62>
 8004c72:	2300      	movs	r3, #0
 8004c74:	e000      	b.n	8004c78 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x64>
 8004c76:	2302      	movs	r3, #2
 8004c78:	61fb      	str	r3, [r7, #28]
   //consoleprint(F("<< ")); //TODO If we comment out this it looks cleaner in the serial
   for (unsigned long start=millis(); millis() - start < 1000UL * atTimeout;)
 8004c7a:	f002 ff31 	bl	8007ae0 <HAL_GetTick>
 8004c7e:	61b8      	str	r0, [r7, #24]
 8004c80:	f002 ff2e 	bl	8007ae0 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	1ad2      	subs	r2, r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004c90:	4619      	mov	r1, r3
 8004c92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c96:	fb03 f301 	mul.w	r3, r3, r1
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	bf34      	ite	cc
 8004c9e:	2301      	movcc	r3, #1
 8004ca0:	2300      	movcs	r3, #0
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d072      	beq.n	8004d8e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x17a>
   {
      if (cancelled())
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 f879 	bl	8004da0 <_ZN10IridiumSBD9cancelledEv>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xa4>
         return false;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	e06b      	b.n	8004d90 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x17c>

      while (filteredavailable() > 0)
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f000 fbb3 	bl	8005424 <_ZN10IridiumSBD17filteredavailableEv>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	bfcc      	ite	gt
 8004cc4:	2301      	movgt	r3, #1
 8004cc6:	2300      	movle	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d0d8      	beq.n	8004c80 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x6c>
      {
         char c = filteredread();
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f000 fbc4 	bl	800545c <_ZN10IridiumSBD12filteredreadEv>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	75fb      	strb	r3, [r7, #23]
         if (prompt)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d03b      	beq.n	8004d56 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x142>
         {
            switch (promptState)
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d003      	beq.n	8004cec <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xd8>
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d01d      	beq.n	8004d26 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x112>
 8004cea:	e034      	b.n	8004d56 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x142>
            {
            case LOOKING_FOR_PROMPT:
               if (c == prompt[matchPromptPos])
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	7dfa      	ldrb	r2, [r7, #23]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d10b      	bne.n	8004d12 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xfe>
               {
                  ++matchPromptPos;
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	627b      	str	r3, [r7, #36]	; 0x24
                  if (prompt[matchPromptPos] == '\0')
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	4413      	add	r3, r2
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d121      	bne.n	8004d50 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x13c>
                     promptState = GATHERING_RESPONSE;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	61fb      	str	r3, [r7, #28]
               else
               {
                  matchPromptPos = c == prompt[0] ? 1 : 0;
               }

               break;
 8004d10:	e01e      	b.n	8004d50 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x13c>
                  matchPromptPos = c == prompt[0] ? 1 : 0;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	7dfa      	ldrb	r2, [r7, #23]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d101      	bne.n	8004d20 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x10c>
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e000      	b.n	8004d22 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x10e>
 8004d20:	2300      	movs	r3, #0
 8004d22:	627b      	str	r3, [r7, #36]	; 0x24
               break;
 8004d24:	e014      	b.n	8004d50 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x13c>
            case GATHERING_RESPONSE: // gathering response from end of prompt to first \r
               if (response)
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d013      	beq.n	8004d54 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x140>
               {
                  if (c == '\r' || responseSize < 2)
 8004d2c:	7dfb      	ldrb	r3, [r7, #23]
 8004d2e:	2b0d      	cmp	r3, #13
 8004d30:	d002      	beq.n	8004d38 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x124>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	dc02      	bgt.n	8004d3e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12a>
                  {
                     promptState = LOOKING_FOR_TERMINATOR;
 8004d38:	2302      	movs	r3, #2
 8004d3a:	61fb      	str	r3, [r7, #28]
                  {
                     *response++ = c;
                     responseSize--;
                  }
               }
               break;
 8004d3c:	e00a      	b.n	8004d54 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x140>
                     *response++ = c;
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	1c5a      	adds	r2, r3, #1
 8004d42:	60ba      	str	r2, [r7, #8]
 8004d44:	7dfa      	ldrb	r2, [r7, #23]
 8004d46:	701a      	strb	r2, [r3, #0]
                     responseSize--;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	607b      	str	r3, [r7, #4]
               break;
 8004d4e:	e001      	b.n	8004d54 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x140>
               break;
 8004d50:	bf00      	nop
 8004d52:	e000      	b.n	8004d56 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x142>
               break;
 8004d54:	bf00      	nop
            }
         }

         if (c == terminator[matchTerminatorPos])
 8004d56:	6a3b      	ldr	r3, [r7, #32]
 8004d58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d5a:	4413      	add	r3, r2
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	7dfa      	ldrb	r2, [r7, #23]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d10a      	bne.n	8004d7a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x166>
         {
            ++matchTerminatorPos;
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	3301      	adds	r3, #1
 8004d68:	623b      	str	r3, [r7, #32]
            if (terminator[matchTerminatorPos] == '\0')
 8004d6a:	6a3b      	ldr	r3, [r7, #32]
 8004d6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d6e:	4413      	add	r3, r2
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1a0      	bne.n	8004cb8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xa4>
               return true;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e00a      	b.n	8004d90 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x17c>
         }
         else
         {
            matchTerminatorPos = c == terminator[0] ? 1 : 0;
 8004d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	7dfa      	ldrb	r2, [r7, #23]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d101      	bne.n	8004d88 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x174>
 8004d84:	2301      	movs	r3, #1
 8004d86:	e000      	b.n	8004d8a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x176>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	623b      	str	r3, [r7, #32]
      while (filteredavailable() > 0)
 8004d8c:	e794      	b.n	8004cb8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xa4>
         }
      } // while (filteredavailable() > 0)
   } // timer loop
   return false;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	372c      	adds	r7, #44	; 0x2c
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd90      	pop	{r4, r7, pc}
 8004d98:	08017958 	.word	0x08017958
 8004d9c:	080177d0 	.word	0x080177d0

08004da0 <_ZN10IridiumSBD9cancelledEv>:

bool IridiumSBD::cancelled()
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
   if (this->useSerial)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d019      	beq.n	8004de6 <_ZN10IridiumSBD9cancelledEv+0x46>
   {
	   //TODO For some reason when using digitalRead here it didn't work so simply replaced with HAL function
	   //if ((ringPin != -1) && digitalRead(ringPin) == LOW)
	     if ((ringPin != -1) && HAL_GPIO_ReadPin(ringPin_GPIO_Port,ringPin_Pin) == LOW)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dbc:	d008      	beq.n	8004dd0 <_ZN10IridiumSBD9cancelledEv+0x30>
 8004dbe:	2110      	movs	r1, #16
 8004dc0:	480e      	ldr	r0, [pc, #56]	; (8004dfc <_ZN10IridiumSBD9cancelledEv+0x5c>)
 8004dc2:	f003 fbef 	bl	80085a4 <HAL_GPIO_ReadPin>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <_ZN10IridiumSBD9cancelledEv+0x30>
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e000      	b.n	8004dd2 <_ZN10IridiumSBD9cancelledEv+0x32>
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d007      	beq.n	8004de6 <_ZN10IridiumSBD9cancelledEv+0x46>
	  {
         ringAsserted = true;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
		 diagprint(F("ringPin seen!\r\n"));
 8004dde:	4908      	ldr	r1, [pc, #32]	; (8004e00 <_ZN10IridiumSBD9cancelledEv+0x60>)
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 f977 	bl	80050d4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
	  }
   }

   return !ISBDCallback();
 8004de6:	f7ff fb61 	bl	80044ac <_Z12ISBDCallbackv>
 8004dea:	4603      	mov	r3, r0
 8004dec:	f083 0301 	eor.w	r3, r3, #1
 8004df0:	b2db      	uxtb	r3, r3
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3708      	adds	r7, #8
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	40020800 	.word	0x40020800
 8004e00:	08017970 	.word	0x08017970

08004e04 <_ZN10IridiumSBD5powerEb>:

   return rxOverflow ? ISBD_RX_OVERFLOW : ISBD_SUCCESS;
}

void IridiumSBD::power(bool on)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	70fb      	strb	r3, [r7, #3]
   this->asleep = !on;
 8004e10:	78fb      	ldrb	r3, [r7, #3]
 8004e12:	f083 0301 	eor.w	r3, r3, #1
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

   if (this->useSerial)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d011      	beq.n	8004e4c <_ZN10IridiumSBD5powerEb+0x48>
   {
      if (this->sleepPin == -1)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e32:	d04c      	beq.n	8004ece <_ZN10IridiumSBD5powerEb+0xca>
      {
         return;
      }
      else
      {
          if (this->sleepPinConfigured == false)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d106      	bne.n	8004e4c <_ZN10IridiumSBD5powerEb+0x48>
          {
             configureSleepPin();
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f84e 	bl	8004ee0 <_ZN10IridiumSBD17configureSleepPinEv>
             this->sleepPinConfigured = true;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
          }
      }
   }

   if (on)
 8004e4c:	78fb      	ldrb	r3, [r7, #3]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d018      	beq.n	8004e84 <_ZN10IridiumSBD5powerEb+0x80>
   {
      diagprint(F("Powering on modem...\r\n"));
 8004e52:	4921      	ldr	r1, [pc, #132]	; (8004ed8 <_ZN10IridiumSBD5powerEb+0xd4>)
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f93d 	bl	80050d4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d004      	beq.n	8004e6e <_ZN10IridiumSBD5powerEb+0x6a>
      {
         setSleepPin(HIGH); // HIGH = awake
 8004e64:	2101      	movs	r1, #1
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f848 	bl	8004efc <_ZN10IridiumSBD11setSleepPinEh>
 8004e6c:	e003      	b.n	8004e76 <_ZN10IridiumSBD5powerEb+0x72>
      }
      else
      {
         enable9603(true);
 8004e6e:	2101      	movs	r1, #1
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7ff fc9f 	bl	80047b4 <_ZN10IridiumSBD10enable9603Eb>
      }
      lastPowerOnTime = millis();
 8004e76:	f002 fe33 	bl	8007ae0 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8004e82:	e025      	b.n	8004ed0 <_ZN10IridiumSBD5powerEb+0xcc>
   }
   else
   {
      // Best Practices Guide suggests waiting at least 2 seconds
      // before powering off again
      unsigned long elapsed = millis() - lastPowerOnTime;
 8004e84:	f002 fe2c 	bl	8007ae0 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	60fb      	str	r3, [r7, #12]
      if (elapsed < 2000UL)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004e9a:	d205      	bcs.n	8004ea8 <_ZN10IridiumSBD5powerEb+0xa4>
         //delay(2000UL - elapsed); TODO
    	  HAL_Delay(2000UL - elapsed);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f002 fe28 	bl	8007af8 <HAL_Delay>

      diagprint(F("Powering off modem...\r\n"));
 8004ea8:	490c      	ldr	r1, [pc, #48]	; (8004edc <_ZN10IridiumSBD5powerEb+0xd8>)
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f912 	bl	80050d4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d004      	beq.n	8004ec4 <_ZN10IridiumSBD5powerEb+0xc0>
      {
         setSleepPin(LOW); // LOW = asleep
 8004eba:	2100      	movs	r1, #0
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f81d 	bl	8004efc <_ZN10IridiumSBD11setSleepPinEh>
 8004ec2:	e005      	b.n	8004ed0 <_ZN10IridiumSBD5powerEb+0xcc>
      }
      else
      {
         enable9603(false);
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7ff fc74 	bl	80047b4 <_ZN10IridiumSBD10enable9603Eb>
 8004ecc:	e000      	b.n	8004ed0 <_ZN10IridiumSBD5powerEb+0xcc>
         return;
 8004ece:	bf00      	nop
      }
   }
}
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	080179c4 	.word	0x080179c4
 8004edc:	080179dc 	.word	0x080179dc

08004ee0 <_ZN10IridiumSBD17configureSleepPinEv>:

void IridiumSBD::configureSleepPin()
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
	//pinMode(sleepPin, OUTPUT); // Make the sleep pin an output TODO (doesnt work with this)
   //pinMode(sleepPin, OUTPUT_PP); // Make the sleep pin an output
   diagprint(F("configureSleepPin: sleepPin configured\r\n"));
 8004ee8:	4903      	ldr	r1, [pc, #12]	; (8004ef8 <_ZN10IridiumSBD17configureSleepPinEv+0x18>)
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f8f2 	bl	80050d4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8004ef0:	bf00      	nop
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	080179f4 	.word	0x080179f4

08004efc <_ZN10IridiumSBD11setSleepPinEh>:

void IridiumSBD::setSleepPin(uint8_t enable)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	460b      	mov	r3, r1
 8004f06:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(sleepPin_GPIO_Port,sleepPin_Pin,GPIO_PIN_SET);
 8004f08:	2201      	movs	r2, #1
 8004f0a:	2108      	movs	r1, #8
 8004f0c:	480b      	ldr	r0, [pc, #44]	; (8004f3c <_ZN10IridiumSBD11setSleepPinEh+0x40>)
 8004f0e:	f003 fb61 	bl	80085d4 <HAL_GPIO_WritePin>
   //digitalWrite(this->sleepPin, enable); // HIGH = awake, LOW = asleep TODO
   diagprint(F("setSleepPin: sleepPin set "));
 8004f12:	490b      	ldr	r1, [pc, #44]	; (8004f40 <_ZN10IridiumSBD11setSleepPinEh+0x44>)
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f8dd 	bl	80050d4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   if (enable == HIGH)
 8004f1a:	78fb      	ldrb	r3, [r7, #3]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d104      	bne.n	8004f2a <_ZN10IridiumSBD11setSleepPinEh+0x2e>
      diagprint(F("HIGH\r\n"));
 8004f20:	4908      	ldr	r1, [pc, #32]	; (8004f44 <_ZN10IridiumSBD11setSleepPinEh+0x48>)
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f8d6 	bl	80050d4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   else
      diagprint(F("LOW\r\n"));
}
 8004f28:	e003      	b.n	8004f32 <_ZN10IridiumSBD11setSleepPinEh+0x36>
      diagprint(F("LOW\r\n"));
 8004f2a:	4907      	ldr	r1, [pc, #28]	; (8004f48 <_ZN10IridiumSBD11setSleepPinEh+0x4c>)
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 f8d1 	bl	80050d4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8004f32:	bf00      	nop
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	40020800 	.word	0x40020800
 8004f40:	08017a20 	.word	0x08017a20
 8004f44:	08017a3c 	.word	0x08017a3c
 8004f48:	08017a44 	.word	0x08017a44

08004f4c <_ZN10IridiumSBD15beginSerialPortEv>:

void IridiumSBD::beginSerialPort()
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::beginSerialPort\r\n"));
 8004f54:	4903      	ldr	r1, [pc, #12]	; (8004f64 <_ZN10IridiumSBD15beginSerialPortEv+0x18>)
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f8bc 	bl	80050d4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8004f5c:	bf00      	nop
 8004f5e:	3708      	adds	r7, #8
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	08017a4c 	.word	0x08017a4c

08004f68 <_ZN10IridiumSBD13endSerialPortEv>:

void IridiumSBD::endSerialPort()
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::endSerialPort\r\n"));
 8004f70:	4903      	ldr	r1, [pc, #12]	; (8004f80 <_ZN10IridiumSBD13endSerialPortEv+0x18>)
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f8ae 	bl	80050d4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8004f78:	bf00      	nop
 8004f7a:	3708      	adds	r7, #8
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	08017a6c 	.word	0x08017a6c

08004f84 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>:

void IridiumSBD::send(FlashString str, bool beginLine, bool endLine)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	4611      	mov	r1, r2
 8004f90:	461a      	mov	r2, r3
 8004f92:	460b      	mov	r3, r1
 8004f94:	71fb      	strb	r3, [r7, #7]
 8004f96:	4613      	mov	r3, r2
 8004f98:	71bb      	strb	r3, [r7, #6]
   if (beginLine)
 8004f9a:	79fb      	ldrb	r3, [r7, #7]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d003      	beq.n	8004fa8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x24>
      consoleprint(F(">> "));
 8004fa0:	4922      	ldr	r1, [pc, #136]	; (800502c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xa8>)
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 f8de 	bl	8005164 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 8004fa8:	68b9      	ldr	r1, [r7, #8]
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f000 f8da 	bl	8005164 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (endLine)
 8004fb0:	79bb      	ldrb	r3, [r7, #6]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x3a>
      consoleprint(F("\r\n"));
 8004fb6:	491e      	ldr	r1, [pc, #120]	; (8005030 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xac>)
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f000 f8d3 	bl	8005164 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d006      	beq.n	8004fd6 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x52>
   {
      stream->print(str);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fcc:	68b9      	ldr	r1, [r7, #8]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 ff96 	bl	8005f00 <_ZN5Print5printEPK19__FlashStringHelper>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 8004fd4:	e025      	b.n	8005022 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x9e>
      wireport->beginTransmission((uint8_t)deviceaddress);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	4610      	mov	r0, r2
 8004fe4:	f001 f858 	bl	8006098 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fec:	21ff      	movs	r1, #255	; 0xff
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7ff fa4a 	bl	8004488 <_ZN7TwoWire5writeEi>
      wireport->print(str);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ff8:	68b9      	ldr	r1, [r7, #8]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 ff80 	bl	8005f00 <_ZN5Print5printEPK19__FlashStringHelper>
      if (wireport->endTransmission() != 0) //Release bus
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005004:	4618      	mov	r0, r3
 8005006:	f001 f891 	bl	800612c <_ZN7TwoWire15endTransmissionEv>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	bf14      	ite	ne
 8005010:	2301      	movne	r3, #1
 8005012:	2300      	moveq	r3, #0
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x9e>
         diagprint(F("I2C write was not successful!\r\n"));
 800501a:	4906      	ldr	r1, [pc, #24]	; (8005034 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xb0>)
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 f859 	bl	80050d4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8005022:	bf00      	nop
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	08017a88 	.word	0x08017a88
 8005030:	080177d0 	.word	0x080177d0
 8005034:	08017850 	.word	0x08017850

08005038 <_ZN10IridiumSBD4sendEPKc>:

void IridiumSBD::send(const char *str)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
   consoleprint(F(">> "));
 8005042:	4921      	ldr	r1, [pc, #132]	; (80050c8 <_ZN10IridiumSBD4sendEPKc+0x90>)
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f88d 	bl	8005164 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 800504a:	6839      	ldr	r1, [r7, #0]
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 f8af 	bl	80051b0 <_ZN10IridiumSBD12consoleprintEPKc>
   consoleprint(F("\r\n"));
 8005052:	491e      	ldr	r1, [pc, #120]	; (80050cc <_ZN10IridiumSBD4sendEPKc+0x94>)
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 f885 	bl	8005164 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005060:	2b00      	cmp	r3, #0
 8005062:	d006      	beq.n	8005072 <_ZN10IridiumSBD4sendEPKc+0x3a>
   {
      stream->print(str);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005068:	6839      	ldr	r1, [r7, #0]
 800506a:	4618      	mov	r0, r3
 800506c:	f000 ff56 	bl	8005f1c <_ZN5Print5printEPKc>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 8005070:	e025      	b.n	80050be <_ZN10IridiumSBD4sendEPKc+0x86>
      wireport->beginTransmission((uint8_t)deviceaddress);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800507c:	4619      	mov	r1, r3
 800507e:	4610      	mov	r0, r2
 8005080:	f001 f80a 	bl	8006098 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005088:	21ff      	movs	r1, #255	; 0xff
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff f9fc 	bl	8004488 <_ZN7TwoWire5writeEi>
      wireport->print(str);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005094:	6839      	ldr	r1, [r7, #0]
 8005096:	4618      	mov	r0, r3
 8005098:	f000 ff40 	bl	8005f1c <_ZN5Print5printEPKc>
      if (wireport->endTransmission() != 0) //Release bus
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050a0:	4618      	mov	r0, r3
 80050a2:	f001 f843 	bl	800612c <_ZN7TwoWire15endTransmissionEv>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	bf14      	ite	ne
 80050ac:	2301      	movne	r3, #1
 80050ae:	2300      	moveq	r3, #0
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <_ZN10IridiumSBD4sendEPKc+0x86>
         diagprint(F("I2C write was not successful!\r\n"));
 80050b6:	4906      	ldr	r1, [pc, #24]	; (80050d0 <_ZN10IridiumSBD4sendEPKc+0x98>)
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 f80b 	bl	80050d4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80050be:	bf00      	nop
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	08017a88 	.word	0x08017a88
 80050cc:	080177d0 	.word	0x080177d0
 80050d0:	08017850 	.word	0x08017850

080050d4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>:
         diagprint(F("I2C write was not successful!\r\n"));
   }
}

void IridiumSBD::diagprint(FlashString str)
{
 80050d4:	b590      	push	{r4, r7, lr}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	1c5a      	adds	r2, r3, #1
 80050e6:	60fa      	str	r2, [r7, #12]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 80050ec:	7afb      	ldrb	r3, [r7, #11]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d005      	beq.n	80050fe <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0x2a>
      ISBDDiagsCallback(this, c);
 80050f2:	7afb      	ldrb	r3, [r7, #11]
 80050f4:	4619      	mov	r1, r3
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7ff f9ec 	bl	80044d4 <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   }
 80050fc:	e7f1      	b.n	80050e2 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 80050fe:	bf00      	nop

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen((const char*)str), HAL_MAX_DELAY);
 8005100:	687c      	ldr	r4, [r7, #4]
 8005102:	6838      	ldr	r0, [r7, #0]
 8005104:	f7fb f874 	bl	80001f0 <strlen>
 8005108:	4603      	mov	r3, r0
 800510a:	b29a      	uxth	r2, r3
 800510c:	f04f 33ff 	mov.w	r3, #4294967295
 8005110:	6839      	ldr	r1, [r7, #0]
 8005112:	4620      	mov	r0, r4
 8005114:	f007 fba5 	bl	800c862 <HAL_UART_Transmit>
}
 8005118:	bf00      	nop
 800511a:	3714      	adds	r7, #20
 800511c:	46bd      	mov	sp, r7
 800511e:	bd90      	pop	{r4, r7, pc}

08005120 <_ZN10IridiumSBD9diagprintEPKc>:

void IridiumSBD::diagprint(const char *str)
{
 8005120:	b590      	push	{r4, r7, lr}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
   while (*str)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d008      	beq.n	8005144 <_ZN10IridiumSBD9diagprintEPKc+0x24>
      ISBDDiagsCallback(this, *str++);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	1c5a      	adds	r2, r3, #1
 8005136:	603a      	str	r2, [r7, #0]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	4619      	mov	r1, r3
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f7ff f9c9 	bl	80044d4 <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   while (*str)
 8005142:	e7f2      	b.n	800512a <_ZN10IridiumSBD9diagprintEPKc+0xa>

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8005144:	687c      	ldr	r4, [r7, #4]
 8005146:	6838      	ldr	r0, [r7, #0]
 8005148:	f7fb f852 	bl	80001f0 <strlen>
 800514c:	4603      	mov	r3, r0
 800514e:	b29a      	uxth	r2, r3
 8005150:	f04f 33ff 	mov.w	r3, #4294967295
 8005154:	6839      	ldr	r1, [r7, #0]
 8005156:	4620      	mov	r0, r4
 8005158:	f007 fb83 	bl	800c862 <HAL_UART_Transmit>
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	bd90      	pop	{r4, r7, pc}

08005164 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>:
   diagprint(str); //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
}

void IridiumSBD::consoleprint(FlashString str)
{
 8005164:	b590      	push	{r4, r7, lr}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	60fa      	str	r2, [r7, #12]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 800517c:	7afb      	ldrb	r3, [r7, #11]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d005      	beq.n	800518e <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0x2a>
      ISBDConsoleCallback(this, c);
 8005182:	7afb      	ldrb	r3, [r7, #11]
 8005184:	4619      	mov	r1, r3
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7ff f998 	bl	80044bc <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   }
 800518c:	e7f1      	b.n	8005172 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 800518e:	bf00      	nop

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen((const char*) str), HAL_MAX_DELAY);
 8005190:	687c      	ldr	r4, [r7, #4]
 8005192:	6838      	ldr	r0, [r7, #0]
 8005194:	f7fb f82c 	bl	80001f0 <strlen>
 8005198:	4603      	mov	r3, r0
 800519a:	b29a      	uxth	r2, r3
 800519c:	f04f 33ff 	mov.w	r3, #4294967295
 80051a0:	6839      	ldr	r1, [r7, #0]
 80051a2:	4620      	mov	r0, r4
 80051a4:	f007 fb5d 	bl	800c862 <HAL_UART_Transmit>
}
 80051a8:	bf00      	nop
 80051aa:	3714      	adds	r7, #20
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd90      	pop	{r4, r7, pc}

080051b0 <_ZN10IridiumSBD12consoleprintEPKc>:

void IridiumSBD::consoleprint(const char *str)
{
 80051b0:	b590      	push	{r4, r7, lr}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
   while (*str)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d008      	beq.n	80051d4 <_ZN10IridiumSBD12consoleprintEPKc+0x24>
      ISBDConsoleCallback(this, *str++);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	1c5a      	adds	r2, r3, #1
 80051c6:	603a      	str	r2, [r7, #0]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	4619      	mov	r1, r3
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f7ff f975 	bl	80044bc <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   while (*str)
 80051d2:	e7f2      	b.n	80051ba <_ZN10IridiumSBD12consoleprintEPKc+0xa>

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 80051d4:	687c      	ldr	r4, [r7, #4]
 80051d6:	6838      	ldr	r0, [r7, #0]
 80051d8:	f7fb f80a 	bl	80001f0 <strlen>
 80051dc:	4603      	mov	r3, r0
 80051de:	b29a      	uxth	r2, r3
 80051e0:	f04f 33ff 	mov.w	r3, #4294967295
 80051e4:	6839      	ldr	r1, [r7, #0]
 80051e6:	4620      	mov	r0, r4
 80051e8:	f007 fb3b 	bl	800c862 <HAL_UART_Transmit>
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd90      	pop	{r4, r7, pc}

080051f4 <_ZN10IridiumSBD12consoleprintEc>:
   //consoleprint((const char*) str);
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
}

void IridiumSBD::consoleprint(char c)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	460b      	mov	r3, r1
 80051fe:	70fb      	strb	r3, [r7, #3]
   ISBDConsoleCallback(this, c);
 8005200:	78fb      	ldrb	r3, [r7, #3]
 8005202:	4619      	mov	r1, r3
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f7ff f959 	bl	80044bc <_Z19ISBDConsoleCallbackP10IridiumSBDc>
}
 800520a:	bf00      	nop
 800520c:	3708      	adds	r7, #8
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
	...

08005214 <_ZN10IridiumSBD11SBDRINGSeenEv>:

void IridiumSBD::SBDRINGSeen()
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
   ringAsserted = true;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
   diagprint(F("SBDRING alert seen!\r\n"));
 8005224:	4903      	ldr	r1, [pc, #12]	; (8005234 <_ZN10IridiumSBD11SBDRINGSeenEv+0x20>)
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f7ff ff54 	bl	80050d4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 800522c:	bf00      	nop
 800522e:	3708      	adds	r7, #8
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	08017a90 	.word	0x08017a90

08005238 <_ZN10IridiumSBD13filterSBDRINGEv>:
// Read characters until we find one that doesn't match SBDRING
// If nextChar is -1 it means we are still entertaining a possible
// match with SBDRING\r\n.  Once we find a mismatch, stuff it into
// nextChar.
void IridiumSBD::filterSBDRING()
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
   if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005246:	f083 0301 	eor.w	r3, r3, #1
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b00      	cmp	r3, #0
 800524e:	d002      	beq.n	8005256 <_ZN10IridiumSBD13filterSBDRINGEv+0x1e>
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 f949 	bl	80054e8 <_ZN10IridiumSBD13check9603dataEv>
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00b      	beq.n	8005278 <_ZN10IridiumSBD13filterSBDRINGEv+0x40>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	3308      	adds	r3, #8
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4610      	mov	r0, r2
 8005270:	4798      	blx	r3
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	dc0d      	bgt.n	8005294 <_ZN10IridiumSBD13filterSBDRINGEv+0x5c>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800527e:	f083 0301 	eor.w	r3, r3, #1
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00d      	beq.n	80052a4 <_ZN10IridiumSBD13filterSBDRINGEv+0x6c>
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 fa67 	bl	800575c <_ZN10IridiumSBD15i2cSerAvailableEv>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	dd07      	ble.n	80052a4 <_ZN10IridiumSBD13filterSBDRINGEv+0x6c>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800529a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800529e:	d101      	bne.n	80052a4 <_ZN10IridiumSBD13filterSBDRINGEv+0x6c>
 80052a0:	2301      	movs	r3, #1
 80052a2:	e000      	b.n	80052a6 <_ZN10IridiumSBD13filterSBDRINGEv+0x6e>
 80052a4:	2300      	movs	r3, #0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f000 80b6 	beq.w	8005418 <_ZN10IridiumSBD13filterSBDRINGEv+0x1e0>
   {
      char c;
      if (this->useSerial)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00b      	beq.n	80052ce <_ZN10IridiumSBD13filterSBDRINGEv+0x96>
      {
         c = stream->read();
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	330c      	adds	r3, #12
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4610      	mov	r0, r2
 80052c6:	4798      	blx	r3
 80052c8:	4603      	mov	r3, r0
 80052ca:	73fb      	strb	r3, [r7, #15]
 80052cc:	e004      	b.n	80052d8 <_ZN10IridiumSBD13filterSBDRINGEv+0xa0>
      }
      else
      {
         c = i2cSerRead();
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fa5e 	bl	8005790 <_ZN10IridiumSBD10i2cSerReadEv>
 80052d4:	4603      	mov	r3, r0
 80052d6:	73fb      	strb	r3, [r7, #15]
      }
      consoleprint(c);
 80052d8:	7bfb      	ldrb	r3, [r7, #15]
 80052da:	4619      	mov	r1, r3
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f7ff ff89 	bl	80051f4 <_ZN10IridiumSBD12consoleprintEc>
      if (*head != 0 && c == *head)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f000 808d 	beq.w	800540a <_ZN10IridiumSBD13filterSBDRINGEv+0x1d2>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	7bfa      	ldrb	r2, [r7, #15]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	f040 8085 	bne.w	800540a <_ZN10IridiumSBD13filterSBDRINGEv+0x1d2>
      {
         ++head;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005306:	1c5a      	adds	r2, r3, #1
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
         if (*head == 0)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10d      	bne.n	8005336 <_ZN10IridiumSBD13filterSBDRINGEv+0xfe>
         {
            SBDRINGSeen();
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7ff ff7a 	bl	8005214 <_ZN10IridiumSBD11SBDRINGSeenEv>
            head = tail = SBDRING;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a3f      	ldr	r2, [pc, #252]	; (8005420 <_ZN10IridiumSBD13filterSBDRINGEv+0x1e8>)
 8005324:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
            {
               --head;
               nextChar = c;
            }
         }
 8005334:	e06e      	b.n	8005414 <_ZN10IridiumSBD13filterSBDRINGEv+0x1dc>
            for (unsigned long start = millis(); ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) && millis() - start < FILTERTIMEOUT; );
 8005336:	f002 fbd3 	bl	8007ae0 <HAL_GetTick>
 800533a:	60b8      	str	r0, [r7, #8]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00b      	beq.n	800535e <_ZN10IridiumSBD13filterSBDRINGEv+0x126>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	3308      	adds	r3, #8
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4610      	mov	r0, r2
 8005356:	4798      	blx	r3
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00d      	beq.n	800537a <_ZN10IridiumSBD13filterSBDRINGEv+0x142>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005364:	f083 0301 	eor.w	r3, r3, #1
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00e      	beq.n	800538c <_ZN10IridiumSBD13filterSBDRINGEv+0x154>
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f9f4 	bl	800575c <_ZN10IridiumSBD15i2cSerAvailableEv>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d108      	bne.n	800538c <_ZN10IridiumSBD13filterSBDRINGEv+0x154>
 800537a:	f002 fbb1 	bl	8007ae0 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b09      	cmp	r3, #9
 8005386:	d801      	bhi.n	800538c <_ZN10IridiumSBD13filterSBDRINGEv+0x154>
 8005388:	2301      	movs	r3, #1
 800538a:	e000      	b.n	800538e <_ZN10IridiumSBD13filterSBDRINGEv+0x156>
 800538c:	2300      	movs	r3, #0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d000      	beq.n	8005394 <_ZN10IridiumSBD13filterSBDRINGEv+0x15c>
 8005392:	e7d3      	b.n	800533c <_ZN10IridiumSBD13filterSBDRINGEv+0x104>
            if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800539a:	f083 0301 	eor.w	r3, r3, #1
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d002      	beq.n	80053aa <_ZN10IridiumSBD13filterSBDRINGEv+0x172>
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 f89f 	bl	80054e8 <_ZN10IridiumSBD13check9603dataEv>
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00b      	beq.n	80053cc <_ZN10IridiumSBD13filterSBDRINGEv+0x194>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	3308      	adds	r3, #8
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4610      	mov	r0, r2
 80053c4:	4798      	blx	r3
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00d      	beq.n	80053e8 <_ZN10IridiumSBD13filterSBDRINGEv+0x1b0>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053d2:	f083 0301 	eor.w	r3, r3, #1
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d007      	beq.n	80053ec <_ZN10IridiumSBD13filterSBDRINGEv+0x1b4>
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f9bd 	bl	800575c <_ZN10IridiumSBD15i2cSerAvailableEv>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d101      	bne.n	80053ec <_ZN10IridiumSBD13filterSBDRINGEv+0x1b4>
 80053e8:	2301      	movs	r3, #1
 80053ea:	e000      	b.n	80053ee <_ZN10IridiumSBD13filterSBDRINGEv+0x1b6>
 80053ec:	2300      	movs	r3, #0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d010      	beq.n	8005414 <_ZN10IridiumSBD13filterSBDRINGEv+0x1dc>
               --head;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80053f8:	1e5a      	subs	r2, r3, #1
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
               nextChar = c;
 8005400:	7bfa      	ldrb	r2, [r7, #15]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
         }
 8005408:	e004      	b.n	8005414 <_ZN10IridiumSBD13filterSBDRINGEv+0x1dc>
      }
      else
      {
         nextChar = c;
 800540a:	7bfa      	ldrb	r2, [r7, #15]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8005412:	e720      	b.n	8005256 <_ZN10IridiumSBD13filterSBDRINGEv+0x1e>
         }
 8005414:	bf00      	nop
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 8005416:	e71e      	b.n	8005256 <_ZN10IridiumSBD13filterSBDRINGEv+0x1e>
      }
   }
}
 8005418:	bf00      	nop
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	080184ac 	.word	0x080184ac

08005424 <_ZN10IridiumSBD17filteredavailableEv>:

const char IridiumSBD::SBDRING[] = "SBDRING\r\n";

int IridiumSBD::filteredavailable()
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f7ff ff03 	bl	8005238 <_ZN10IridiumSBD13filterSBDRINGEv>
   return head - tail + (nextChar != -1 ? 1 : 0);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	f8d2 20d8 	ldr.w	r2, [r2, #216]	; 0xd8
 8005446:	f1b2 3fff 	cmp.w	r2, #4294967295
 800544a:	d001      	beq.n	8005450 <_ZN10IridiumSBD17filteredavailableEv+0x2c>
 800544c:	2201      	movs	r2, #1
 800544e:	e000      	b.n	8005452 <_ZN10IridiumSBD17filteredavailableEv+0x2e>
 8005450:	2200      	movs	r2, #0
 8005452:	4413      	add	r3, r2
}
 8005454:	4618      	mov	r0, r3
 8005456:	3708      	adds	r7, #8
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <_ZN10IridiumSBD12filteredreadEv>:

int IridiumSBD::filteredread()
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f7ff fee7 	bl	8005238 <_ZN10IridiumSBD13filterSBDRINGEv>

   // Use up the queue first
   if (head > tail)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005476:	429a      	cmp	r2, r3
 8005478:	d91c      	bls.n	80054b4 <_ZN10IridiumSBD12filteredreadEv+0x58>
   {
      char c = *tail++;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005480:	1c59      	adds	r1, r3, #1
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	f8c2 10d4 	str.w	r1, [r2, #212]	; 0xd4
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	73bb      	strb	r3, [r7, #14]
      if (head == tail)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005498:	429a      	cmp	r2, r3
 800549a:	d109      	bne.n	80054b0 <_ZN10IridiumSBD12filteredreadEv+0x54>
         head = tail = SBDRING;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a11      	ldr	r2, [pc, #68]	; (80054e4 <_ZN10IridiumSBD12filteredreadEv+0x88>)
 80054a0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
      return c;
 80054b0:	7bbb      	ldrb	r3, [r7, #14]
 80054b2:	e012      	b.n	80054da <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   // Then the "extra" char
   else if (nextChar != -1)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80054ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054be:	d00a      	beq.n	80054d6 <_ZN10IridiumSBD12filteredreadEv+0x7a>
   {
      char c = (char)nextChar;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80054c6:	73fb      	strb	r3, [r7, #15]
      nextChar = -1;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f04f 32ff 	mov.w	r2, #4294967295
 80054ce:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
      return c;
 80054d2:	7bfb      	ldrb	r3, [r7, #15]
 80054d4:	e001      	b.n	80054da <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   return -1;
 80054d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	080184ac 	.word	0x080184ac

080054e8 <_ZN10IridiumSBD13check9603dataEv>:

//Checks the number of available serial bytes
//Reads the available serial bytes (if any) and stores them in i2c_ser_buffer
void IridiumSBD::check9603data()
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  if (millis() - lastCheck >= I2C_POLLING_WAIT_MS)
 80054f0:	f002 faf6 	bl	8007ae0 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
 8005504:	4293      	cmp	r3, r2
 8005506:	bf2c      	ite	cs
 8005508:	2301      	movcs	r3, #1
 800550a:	2300      	movcc	r3, #0
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	f000 80be 	beq.w	8005690 <_ZN10IridiumSBD13check9603dataEv+0x1a8>
  {
    //Check how many serial bytes are waiting to be read
    uint16_t bytesAvailable = 0;
 8005514:	2300      	movs	r3, #0
 8005516:	81fb      	strh	r3, [r7, #14]
    wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005522:	4619      	mov	r1, r3
 8005524:	4610      	mov	r0, r2
 8005526:	f000 fdb7 	bl	8006098 <_ZN7TwoWire17beginTransmissionEh>
    wireport->write(LEN_REG); // Point to the serial buffer length
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800552e:	21fd      	movs	r1, #253	; 0xfd
 8005530:	4618      	mov	r0, r3
 8005532:	f7fe ffa9 	bl	8004488 <_ZN7TwoWire5writeEi>
    wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800553a:	4618      	mov	r0, r3
 800553c:	f000 fdf6 	bl	800612c <_ZN7TwoWire15endTransmissionEv>
    if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)2) == 2) // Request two bytes
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800554a:	2202      	movs	r2, #2
 800554c:	4619      	mov	r1, r3
 800554e:	f000 fd90 	bl	8006072 <_ZN7TwoWire11requestFromEhh>
 8005552:	4603      	mov	r3, r0
 8005554:	2b02      	cmp	r3, #2
 8005556:	bf0c      	ite	eq
 8005558:	2301      	moveq	r3, #1
 800555a:	2300      	movne	r3, #0
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d01d      	beq.n	800559e <_ZN10IridiumSBD13check9603dataEv+0xb6>
    {
      uint8_t msb = wireport->read();
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	330c      	adds	r3, #12
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4610      	mov	r0, r2
 8005572:	4798      	blx	r3
 8005574:	4603      	mov	r3, r0
 8005576:	737b      	strb	r3, [r7, #13]
      uint8_t lsb = wireport->read();
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	330c      	adds	r3, #12
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4610      	mov	r0, r2
 8005588:	4798      	blx	r3
 800558a:	4603      	mov	r3, r0
 800558c:	733b      	strb	r3, [r7, #12]
      bytesAvailable = (((uint16_t)msb) << 8) | lsb;
 800558e:	7b7b      	ldrb	r3, [r7, #13]
 8005590:	021b      	lsls	r3, r3, #8
 8005592:	b21a      	sxth	r2, r3
 8005594:	7b3b      	ldrb	r3, [r7, #12]
 8005596:	b21b      	sxth	r3, r3
 8005598:	4313      	orrs	r3, r2
 800559a:	b21b      	sxth	r3, r3
 800559c:	81fb      	strh	r3, [r7, #14]
    }

    //Now read the serial bytes (if any)
    if (bytesAvailable > 0)
 800559e:	89fb      	ldrh	r3, [r7, #14]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d06f      	beq.n	8005684 <_ZN10IridiumSBD13check9603dataEv+0x19c>
    {
      // Request the bytes
      // Poke them into the i2c_serial buffer
      // Release the bus afterwards
      wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055ae:	4619      	mov	r1, r3
 80055b0:	4610      	mov	r0, r2
 80055b2:	f000 fd71 	bl	8006098 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the serial buffer
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ba:	21ff      	movs	r1, #255	; 0xff
 80055bc:	4618      	mov	r0, r3
 80055be:	f7fe ff63 	bl	8004488 <_ZN7TwoWire5writeEi>
      wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 fdb0 	bl	800612c <_ZN7TwoWire15endTransmissionEv>
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 80055cc:	89fb      	ldrh	r3, [r7, #14]
 80055ce:	2b08      	cmp	r3, #8
 80055d0:	d92d      	bls.n	800562e <_ZN10IridiumSBD13check9603dataEv+0x146>
      {
        wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)SER_PACKET_SIZE, (uint8_t)false); // Request SER_PACKET_SIZE bytes, don't release the bus
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 80055dc:	2300      	movs	r3, #0
 80055de:	2208      	movs	r2, #8
 80055e0:	f000 fd0c 	bl	8005ffc <_ZN7TwoWire11requestFromEhhh>
        while (wireport->available())
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	3308      	adds	r3, #8
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4610      	mov	r0, r2
 80055f4:	4798      	blx	r3
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	bf14      	ite	ne
 80055fc:	2301      	movne	r3, #1
 80055fe:	2300      	moveq	r3, #0
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00f      	beq.n	8005626 <_ZN10IridiumSBD13check9603dataEv+0x13e>
        {
          i2cSerPoke(wireport->read()); // Read and store each byte
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	330c      	adds	r3, #12
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4610      	mov	r0, r2
 8005616:	4798      	blx	r3
 8005618:	4603      	mov	r3, r0
 800561a:	b2db      	uxtb	r3, r3
 800561c:	4619      	mov	r1, r3
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f8e2 	bl	80057e8 <_ZN10IridiumSBD10i2cSerPokeEc>
        while (wireport->available())
 8005624:	e7de      	b.n	80055e4 <_ZN10IridiumSBD13check9603dataEv+0xfc>
        }
        bytesAvailable -= SER_PACKET_SIZE; // Decrease the number of bytes available by SER_PACKET_SIZE
 8005626:	89fb      	ldrh	r3, [r7, #14]
 8005628:	3b08      	subs	r3, #8
 800562a:	81fb      	strh	r3, [r7, #14]
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 800562c:	e7ce      	b.n	80055cc <_ZN10IridiumSBD13check9603dataEv+0xe4>
      }
      wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)bytesAvailable); // Request remaining bytes, release the bus
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005638:	89fa      	ldrh	r2, [r7, #14]
 800563a:	b2d2      	uxtb	r2, r2
 800563c:	4619      	mov	r1, r3
 800563e:	f000 fd18 	bl	8006072 <_ZN7TwoWire11requestFromEhh>
      while (wireport->available())
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	3308      	adds	r3, #8
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4610      	mov	r0, r2
 8005652:	4798      	blx	r3
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	bf14      	ite	ne
 800565a:	2301      	movne	r3, #1
 800565c:	2300      	moveq	r3, #0
 800565e:	b2db      	uxtb	r3, r3
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00f      	beq.n	8005684 <_ZN10IridiumSBD13check9603dataEv+0x19c>
      {
        i2cSerPoke(wireport->read()); // Read and store each byte
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	330c      	adds	r3, #12
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4610      	mov	r0, r2
 8005674:	4798      	blx	r3
 8005676:	4603      	mov	r3, r0
 8005678:	b2db      	uxtb	r3, r3
 800567a:	4619      	mov	r1, r3
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f8b3 	bl	80057e8 <_ZN10IridiumSBD10i2cSerPokeEc>
      while (wireport->available())
 8005682:	e7de      	b.n	8005642 <_ZN10IridiumSBD13check9603dataEv+0x15a>
      }
    }

    lastCheck = millis(); //Put off checking to avoid excessive I2C bus traffic
 8005684:	f002 fa2c 	bl	8007ae0 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  }
}
 8005690:	bf00      	nop
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <_ZN10IridiumSBD13check9603pinsEv>:

//Reads the IO pins and update IO_REGISTER
void IridiumSBD::check9603pins()
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  //Read the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056aa:	4619      	mov	r1, r3
 80056ac:	4610      	mov	r0, r2
 80056ae:	f000 fcf3 	bl	8006098 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b6:	2110      	movs	r1, #16
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7fe fee5 	bl	8004488 <_ZN7TwoWire5writeEi>
  wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 fd32 	bl	800612c <_ZN7TwoWire15endTransmissionEv>
  if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)1) == 1) // Request one byte from the IO register
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056d2:	2201      	movs	r2, #1
 80056d4:	4619      	mov	r1, r3
 80056d6:	f000 fccc 	bl	8006072 <_ZN7TwoWire11requestFromEhh>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b01      	cmp	r3, #1
 80056de:	bf0c      	ite	eq
 80056e0:	2301      	moveq	r3, #1
 80056e2:	2300      	movne	r3, #0
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00d      	beq.n	8005706 <_ZN10IridiumSBD13check9603pinsEv+0x6e>
  {
    IO_REGISTER = wireport->read(); // Read the IO register
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	330c      	adds	r3, #12
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4610      	mov	r0, r2
 80056fa:	4798      	blx	r3
 80056fc:	4603      	mov	r3, r0
 80056fe:	b2da      	uxtb	r2, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
}
 8005706:	bf00      	nop
 8005708:	3708      	adds	r7, #8
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <_ZN10IridiumSBD11set9603pinsEh>:

//Set the IO pins
void IridiumSBD::set9603pins(uint8_t pins)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b082      	sub	sp, #8
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
 8005716:	460b      	mov	r3, r1
 8005718:	70fb      	strb	r3, [r7, #3]
  //Write to the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005724:	4619      	mov	r1, r3
 8005726:	4610      	mov	r0, r2
 8005728:	f000 fcb6 	bl	8006098 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005730:	2110      	movs	r1, #16
 8005732:	4618      	mov	r0, r3
 8005734:	f7fe fea8 	bl	8004488 <_ZN7TwoWire5writeEi>
  wireport->write(pins); // Set the pins
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	78f9      	ldrb	r1, [r7, #3]
 8005746:	4610      	mov	r0, r2
 8005748:	4798      	blx	r3
  wireport->endTransmission(); // Send data and surrender the bus
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800574e:	4618      	mov	r0, r3
 8005750:	f000 fcec 	bl	800612c <_ZN7TwoWire15endTransmissionEv>
}
 8005754:	bf00      	nop
 8005756:	3708      	adds	r7, #8
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <_ZN10IridiumSBD15i2cSerAvailableEv>:
    return(ISBD_SUCCESS);
}

// I2C_SER functions
int IridiumSBD::i2cSerAvailable()
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  return (i2c_ser_buffer_tail + I2C_SER_MAX_BUFF - i2c_ser_buffer_head) % I2C_SER_MAX_BUFF;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800576a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	425a      	negs	r2, r3
 8005778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800577c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005780:	bf58      	it	pl
 8005782:	4253      	negpl	r3, r2
}
 8005784:	4618      	mov	r0, r3
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <_ZN10IridiumSBD10i2cSerReadEv>:

int IridiumSBD::i2cSerRead()
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  // Empty buffer?
  if (i2c_ser_buffer_head == i2c_ser_buffer_tail)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d102      	bne.n	80057ae <_ZN10IridiumSBD10i2cSerReadEv+0x1e>
    return -1;
 80057a8:	f04f 33ff 	mov.w	r3, #4294967295
 80057ac:	e016      	b.n	80057dc <_ZN10IridiumSBD10i2cSerReadEv+0x4c>

  // Read from "head"
  uint8_t d = i2c_ser_buffer[i2c_ser_buffer_head]; // grab next byte
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	4413      	add	r3, r2
 80057b8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80057bc:	73fb      	strb	r3, [r7, #15]
  i2c_ser_buffer_head = (i2c_ser_buffer_head + 1) % I2C_SER_MAX_BUFF; // update head
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057c4:	3301      	adds	r3, #1
 80057c6:	425a      	negs	r2, r3
 80057c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057cc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80057d0:	bf58      	it	pl
 80057d2:	4253      	negpl	r3, r2
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  return d;
 80057da:	7bfb      	ldrb	r3, [r7, #15]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3714      	adds	r7, #20
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <_ZN10IridiumSBD10i2cSerPokeEc>:

void IridiumSBD::i2cSerPoke(char serChar)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	460b      	mov	r3, r1
 80057f2:	70fb      	strb	r3, [r7, #3]
  // Calculate the new value for the tail
  int next = (i2c_ser_buffer_tail + 1) % I2C_SER_MAX_BUFF;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057fa:	3301      	adds	r3, #1
 80057fc:	425a      	negs	r2, r3
 80057fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005802:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005806:	bf58      	it	pl
 8005808:	4253      	negpl	r3, r2
 800580a:	60fb      	str	r3, [r7, #12]
  // If the buffer is not full (i.e. we are not about to overwrite the head byte)
  // If the buffer is full, the byte is lost
  if (next != i2c_ser_buffer_head)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	429a      	cmp	r2, r3
 8005816:	d00b      	beq.n	8005830 <_ZN10IridiumSBD10i2cSerPokeEc+0x48>
  {
    // save new data in buffer: tail points to where byte goes
    i2c_ser_buffer[i2c_ser_buffer_tail] = serChar; // save new byte
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	4413      	add	r3, r2
 8005822:	78fa      	ldrb	r2, [r7, #3]
 8005824:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    i2c_ser_buffer_tail = next;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }
}
 8005830:	bf00      	nop
 8005832:	3714      	adds	r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef>:
	#endif
}


//uint8_t IridiumSBD::MRT_Iridium_setup(UART_HandleTypeDef huart,POWERPROFILE profile){ TODO
uint8_t IridiumSBD::MRT_Iridium_setup(UART_HandleTypeDef huart){
 800583c:	b084      	sub	sp, #16
 800583e:	b580      	push	{r7, lr}
 8005840:	b084      	sub	sp, #16
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
 8005846:	f107 001c 	add.w	r0, r7, #28
 800584a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->uart = huart;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4618      	mov	r0, r3
 8005852:	f107 031c 	add.w	r3, r7, #28
 8005856:	2244      	movs	r2, #68	; 0x44
 8005858:	4619      	mov	r1, r3
 800585a:	f00b ffd7 	bl	801180c <memcpy>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nSetting up the Iridium 9603N\r\n", 32, HAL_MAX_DELAY);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f04f 33ff 	mov.w	r3, #4294967295
 8005864:	2220      	movs	r2, #32
 8005866:	4962      	ldr	r1, [pc, #392]	; (80059f0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1b4>)
 8005868:	f006 fffb 	bl	800c862 <HAL_UART_Transmit>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Checking for the device...", 28, HAL_MAX_DELAY);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f04f 33ff 	mov.w	r3, #4294967295
 8005872:	221c      	movs	r2, #28
 8005874:	495f      	ldr	r1, [pc, #380]	; (80059f4 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1b8>)
 8005876:	f006 fff4 	bl	800c862 <HAL_UART_Transmit>
	while(!this->isConnected()){
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7ff f80a 	bl	8004894 <_ZN10IridiumSBD11isConnectedEv>
 8005880:	4603      	mov	r3, r0
 8005882:	f083 0301 	eor.w	r3, r3, #1
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b00      	cmp	r3, #0
 800588a:	d02c      	beq.n	80058e6 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0xaa>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Check if the device is connected. Trying again in\r\n", 53, HAL_MAX_DELAY);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f04f 33ff 	mov.w	r3, #4294967295
 8005892:	2235      	movs	r2, #53	; 0x35
 8005894:	4958      	ldr	r1, [pc, #352]	; (80059f8 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1bc>)
 8005896:	f006 ffe4 	bl	800c862 <HAL_UART_Transmit>
		HAL_Delay(500);
 800589a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800589e:	f002 f92b 	bl	8007af8 <HAL_Delay>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r3", 3, HAL_MAX_DELAY);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f04f 33ff 	mov.w	r3, #4294967295
 80058a8:	2203      	movs	r2, #3
 80058aa:	4954      	ldr	r1, [pc, #336]	; (80059fc <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1c0>)
 80058ac:	f006 ffd9 	bl	800c862 <HAL_UART_Transmit>
		HAL_Delay(1000);
 80058b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80058b4:	f002 f920 	bl	8007af8 <HAL_Delay>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r2", 3, HAL_MAX_DELAY);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f04f 33ff 	mov.w	r3, #4294967295
 80058be:	2203      	movs	r2, #3
 80058c0:	494f      	ldr	r1, [pc, #316]	; (8005a00 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1c4>)
 80058c2:	f006 ffce 	bl	800c862 <HAL_UART_Transmit>
		HAL_Delay(1000);
 80058c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80058ca:	f002 f915 	bl	8007af8 <HAL_Delay>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r1\r\n", 7, HAL_MAX_DELAY);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f04f 33ff 	mov.w	r3, #4294967295
 80058d4:	2207      	movs	r2, #7
 80058d6:	494b      	ldr	r1, [pc, #300]	; (8005a04 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1c8>)
 80058d8:	f006 ffc3 	bl	800c862 <HAL_UART_Transmit>
		HAL_Delay(1000);
 80058dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80058e0:	f002 f90a 	bl	8007af8 <HAL_Delay>
	while(!this->isConnected()){
 80058e4:	e7c9      	b.n	800587a <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x3e>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f04f 33ff 	mov.w	r3, #4294967295
 80058ec:	2206      	movs	r2, #6
 80058ee:	4946      	ldr	r1, [pc, #280]	; (8005a08 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1cc>)
 80058f0:	f006 ffb7 	bl	800c862 <HAL_UART_Transmit>

	//Activate the superchargers
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Activating the superchargers...", 31, HAL_MAX_DELAY);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f04f 33ff 	mov.w	r3, #4294967295
 80058fa:	221f      	movs	r2, #31
 80058fc:	4943      	ldr	r1, [pc, #268]	; (8005a0c <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1d0>)
 80058fe:	f006 ffb0 	bl	800c862 <HAL_UART_Transmit>
	this->enableSuperCapCharger(true);
 8005902:	2101      	movs	r1, #1
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f7fe fea9 	bl	800465c <_ZN10IridiumSBD21enableSuperCapChargerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f04f 33ff 	mov.w	r3, #4294967295
 8005910:	2206      	movs	r2, #6
 8005912:	493d      	ldr	r1, [pc, #244]	; (8005a08 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1cc>)
 8005914:	f006 ffa5 	bl	800c862 <HAL_UART_Transmit>


	//Wait for the supercapacitors to charge
	//int start=millis();
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Waiting for the supercapacitors to charge...", 44, HAL_MAX_DELAY);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f04f 33ff 	mov.w	r3, #4294967295
 800591e:	222c      	movs	r2, #44	; 0x2c
 8005920:	493b      	ldr	r1, [pc, #236]	; (8005a10 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1d4>)
 8005922:	f006 ff9e 	bl	800c862 <HAL_UART_Transmit>
	while (!this->checkSuperCapCharger()){
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7fe fed6 	bl	80046d8 <_ZN10IridiumSBD20checkSuperCapChargerEv>
 800592c:	4603      	mov	r3, r0
 800592e:	f083 0301 	eor.w	r3, r3, #1
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b00      	cmp	r3, #0
 8005936:	d004      	beq.n	8005942 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x106>
		HAL_Delay(333);
 8005938:	f240 104d 	movw	r0, #333	; 0x14d
 800593c:	f002 f8dc 	bl	8007af8 <HAL_Delay>
	while (!this->checkSuperCapCharger()){
 8005940:	e7f1      	b.n	8005926 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0xea>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f04f 33ff 	mov.w	r3, #4294967295
 8005948:	2206      	movs	r2, #6
 800594a:	492f      	ldr	r1, [pc, #188]	; (8005a08 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1cc>)
 800594c:	f006 ff89 	bl	800c862 <HAL_UART_Transmit>


	//Enable power for the 9603N
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Enabling 9603N power...", 23, HAL_MAX_DELAY);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f04f 33ff 	mov.w	r3, #4294967295
 8005956:	2217      	movs	r2, #23
 8005958:	492e      	ldr	r1, [pc, #184]	; (8005a14 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1d8>)
 800595a:	f006 ff82 	bl	800c862 <HAL_UART_Transmit>
	this->enable9603Npower(true);
 800595e:	2101      	movs	r1, #1
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f7fe fee9 	bl	8004738 <_ZN10IridiumSBD16enable9603NpowerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f04f 33ff 	mov.w	r3, #4294967295
 800596c:	2206      	movs	r2, #6
 800596e:	4926      	ldr	r1, [pc, #152]	; (8005a08 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1cc>)
 8005970:	f006 ff77 	bl	800c862 <HAL_UART_Transmit>
	/*
	 * Begin satellite modem operation
	 */

	//Power on the rockblock
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Starting Modem...", 17, HAL_MAX_DELAY);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f04f 33ff 	mov.w	r3, #4294967295
 800597a:	2211      	movs	r2, #17
 800597c:	4926      	ldr	r1, [pc, #152]	; (8005a18 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1dc>)
 800597e:	f006 ff70 	bl	800c862 <HAL_UART_Transmit>
	//this->setPowerProfile(profile);
	int err = this->begin();
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7fe fdb2 	bl	80044ec <_ZN10IridiumSBD5beginEv>
 8005988:	60f8      	str	r0, [r7, #12]
	if (err != ISBD_SUCCESS)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d015      	beq.n	80059bc <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x180>
	  {
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Failed: ", 8, HAL_MAX_DELAY);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f04f 33ff 	mov.w	r3, #4294967295
 8005996:	2208      	movs	r2, #8
 8005998:	4920      	ldr	r1, [pc, #128]	; (8005a1c <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1e0>)
 800599a:	f006 ff62 	bl	800c862 <HAL_UART_Transmit>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) err, 4, HAL_MAX_DELAY);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	68f9      	ldr	r1, [r7, #12]
 80059a2:	f04f 33ff 	mov.w	r3, #4294967295
 80059a6:	2204      	movs	r2, #4
 80059a8:	f006 ff5b 	bl	800c862 <HAL_UART_Transmit>
		this->MRT_Iridium_ErrorMessage(err);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	4619      	mov	r1, r3
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f8b0 	bl	8005b18 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>

	    return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e011      	b.n	80059e0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1a4>
	  }
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "...OK\r\n", 7, HAL_MAX_DELAY);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f04f 33ff 	mov.w	r3, #4294967295
 80059c2:	2207      	movs	r2, #7
 80059c4:	4916      	ldr	r1, [pc, #88]	; (8005a20 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1e4>)
 80059c6:	f006 ff4c 	bl	800c862 <HAL_UART_Transmit>

	//Setup default IMEI to 000000000000000 (no IMEI)
	IMEI="000000000000000";
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a15      	ldr	r2, [pc, #84]	; (8005a24 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1e8>)
 80059ce:	645a      	str	r2, [r3, #68]	; 0x44

	HAL_UART_Transmit(&(this->uart),(uint8_t*) "End of setup\r\n\r\n", 16, HAL_MAX_DELAY);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f04f 33ff 	mov.w	r3, #4294967295
 80059d6:	2210      	movs	r2, #16
 80059d8:	4913      	ldr	r1, [pc, #76]	; (8005a28 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1ec>)
 80059da:	f006 ff42 	bl	800c862 <HAL_UART_Transmit>

	return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059ea:	b004      	add	sp, #16
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	08017b10 	.word	0x08017b10
 80059f4:	08017b34 	.word	0x08017b34
 80059f8:	08017b50 	.word	0x08017b50
 80059fc:	08017b84 	.word	0x08017b84
 8005a00:	08017b88 	.word	0x08017b88
 8005a04:	08017b8c 	.word	0x08017b8c
 8005a08:	08017424 	.word	0x08017424
 8005a0c:	08017b94 	.word	0x08017b94
 8005a10:	08017bb4 	.word	0x08017bb4
 8005a14:	08017be4 	.word	0x08017be4
 8005a18:	08017bfc 	.word	0x08017bfc
 8005a1c:	08017c10 	.word	0x08017c10
 8005a20:	08017c1c 	.word	0x08017c1c
 8005a24:	08017c24 	.word	0x08017c24
 8005a28:	08017c34 	.word	0x08017c34

08005a2c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>:


boolean IridiumSBD::MRT_Iridium_shutdown(void){
 8005a2c:	b590      	push	{r4, r7, lr}
 8005a2e:	b08b      	sub	sp, #44	; 0x2c
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nShutting down the Iridium\r\n", 29, HAL_MAX_DELAY);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f04f 33ff 	mov.w	r3, #4294967295
 8005a3a:	221d      	movs	r2, #29
 8005a3c:	492f      	ldr	r1, [pc, #188]	; (8005afc <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd0>)
 8005a3e:	f006 ff10 	bl	800c862 <HAL_UART_Transmit>

	// Power down the modem
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Putting the 9603N to sleep...", 29, HAL_MAX_DELAY);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f04f 33ff 	mov.w	r3, #4294967295
 8005a48:	221d      	movs	r2, #29
 8005a4a:	492d      	ldr	r1, [pc, #180]	; (8005b00 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd4>)
 8005a4c:	f006 ff09 	bl	800c862 <HAL_UART_Transmit>
	int err = this->sleep();
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f7fe fd76 	bl	8004542 <_ZN10IridiumSBD5sleepEv>
 8005a56:	6278      	str	r0, [r7, #36]	; 0x24
	if (err != ISBD_SUCCESS)
 8005a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d017      	beq.n	8005a8e <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x62>
	{
		char str[24+sizeof(int)];
		sprintf(str, "sleep failed: error  %i\r\n", err);
 8005a5e:	f107 0308 	add.w	r3, r7, #8
 8005a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a64:	4927      	ldr	r1, [pc, #156]	; (8005b04 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd8>)
 8005a66:	4618      	mov	r0, r3
 8005a68:	f00c ff76 	bl	8012958 <siprintf>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8005a6c:	687c      	ldr	r4, [r7, #4]
 8005a6e:	f107 0308 	add.w	r3, r7, #8
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7fa fbbc 	bl	80001f0 <strlen>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	f107 0108 	add.w	r1, r7, #8
 8005a80:	f04f 33ff 	mov.w	r3, #4294967295
 8005a84:	4620      	mov	r0, r4
 8005a86:	f006 feec 	bl	800c862 <HAL_UART_Transmit>
		return false;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	e032      	b.n	8005af4 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xc8>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f04f 33ff 	mov.w	r3, #4294967295
 8005a94:	2204      	movs	r2, #4
 8005a96:	491c      	ldr	r1, [pc, #112]	; (8005b08 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8005a98:	f006 fee3 	bl	800c862 <HAL_UART_Transmit>

	// Disable 9603N power
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Disabling 9603N power...", 24, HAL_MAX_DELAY);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005aa2:	2218      	movs	r2, #24
 8005aa4:	4919      	ldr	r1, [pc, #100]	; (8005b0c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe0>)
 8005aa6:	f006 fedc 	bl	800c862 <HAL_UART_Transmit>
	this->enable9603Npower(false);
 8005aaa:	2100      	movs	r1, #0
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f7fe fe43 	bl	8004738 <_ZN10IridiumSBD16enable9603NpowerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ab8:	2204      	movs	r2, #4
 8005aba:	4913      	ldr	r1, [pc, #76]	; (8005b08 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8005abc:	f006 fed1 	bl	800c862 <HAL_UART_Transmit>

	// Disable the supercapacitor charger
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Disabling the supercapacitor charger...", 39, HAL_MAX_DELAY);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ac6:	2227      	movs	r2, #39	; 0x27
 8005ac8:	4911      	ldr	r1, [pc, #68]	; (8005b10 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe4>)
 8005aca:	f006 feca 	bl	800c862 <HAL_UART_Transmit>
	this->enableSuperCapCharger(false);
 8005ace:	2100      	movs	r1, #0
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f7fe fdc3 	bl	800465c <_ZN10IridiumSBD21enableSuperCapChargerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8005adc:	2204      	movs	r2, #4
 8005ade:	490a      	ldr	r1, [pc, #40]	; (8005b08 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8005ae0:	f006 febf 	bl	800c862 <HAL_UART_Transmit>

	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Iridium successfully shutdown\r\n", 32, HAL_MAX_DELAY);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8005aea:	2220      	movs	r2, #32
 8005aec:	4909      	ldr	r1, [pc, #36]	; (8005b14 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe8>)
 8005aee:	f006 feb8 	bl	800c862 <HAL_UART_Transmit>
	return true;
 8005af2:	2301      	movs	r3, #1
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	372c      	adds	r7, #44	; 0x2c
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd90      	pop	{r4, r7, pc}
 8005afc:	08017c48 	.word	0x08017c48
 8005b00:	08017c68 	.word	0x08017c68
 8005b04:	08017c88 	.word	0x08017c88
 8005b08:	08017424 	.word	0x08017424
 8005b0c:	08017ca4 	.word	0x08017ca4
 8005b10:	08017cc0 	.word	0x08017cc0
 8005b14:	08017ce8 	.word	0x08017ce8

08005b18 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>:



void IridiumSBD::MRT_Iridium_ErrorMessage(uint8_t error){
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	460b      	mov	r3, r1
 8005b22:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nError:\t", 12, HAL_MAX_DELAY);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f04f 33ff 	mov.w	r3, #4294967295
 8005b2a:	220c      	movs	r2, #12
 8005b2c:	4948      	ldr	r1, [pc, #288]	; (8005c50 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x138>)
 8005b2e:	f006 fe98 	bl	800c862 <HAL_UART_Transmit>
	if (error == ISBD_ALREADY_AWAKE){
 8005b32:	78fb      	ldrb	r3, [r7, #3]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d107      	bne.n	8005b48 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x30>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Already Awake\r\n", 17, HAL_MAX_DELAY);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b3e:	2211      	movs	r2, #17
 8005b40:	4944      	ldr	r1, [pc, #272]	; (8005c54 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x13c>)
 8005b42:	f006 fe8e 	bl	800c862 <HAL_UART_Transmit>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "DEBUG LINE REACHED\r\n", 22, HAL_MAX_DELAY);
	}
	else{
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "UNKNOWN\r\n", 11, HAL_MAX_DELAY);
	}
}
 8005b46:	e07f      	b.n	8005c48 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_SERIAL_FAILURE){
 8005b48:	78fb      	ldrb	r3, [r7, #3]
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d107      	bne.n	8005b5e <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x46>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Serial Failure\r\n", 18, HAL_MAX_DELAY);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f04f 33ff 	mov.w	r3, #4294967295
 8005b54:	2212      	movs	r2, #18
 8005b56:	4940      	ldr	r1, [pc, #256]	; (8005c58 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x140>)
 8005b58:	f006 fe83 	bl	800c862 <HAL_UART_Transmit>
}
 8005b5c:	e074      	b.n	8005c48 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_PROTOCOL_ERROR){
 8005b5e:	78fb      	ldrb	r3, [r7, #3]
 8005b60:	2b03      	cmp	r3, #3
 8005b62:	d107      	bne.n	8005b74 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x5c>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Protocol Error\r\n", 18, HAL_MAX_DELAY);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f04f 33ff 	mov.w	r3, #4294967295
 8005b6a:	2212      	movs	r2, #18
 8005b6c:	493b      	ldr	r1, [pc, #236]	; (8005c5c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x144>)
 8005b6e:	f006 fe78 	bl	800c862 <HAL_UART_Transmit>
}
 8005b72:	e069      	b.n	8005c48 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_CANCELLED){
 8005b74:	78fb      	ldrb	r3, [r7, #3]
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	d107      	bne.n	8005b8a <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x72>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nCancelled", 13, HAL_MAX_DELAY);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b80:	220d      	movs	r2, #13
 8005b82:	4937      	ldr	r1, [pc, #220]	; (8005c60 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x148>)
 8005b84:	f006 fe6d 	bl	800c862 <HAL_UART_Transmit>
}
 8005b88:	e05e      	b.n	8005c48 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_NO_MODEM_DETECTED){
 8005b8a:	78fb      	ldrb	r3, [r7, #3]
 8005b8c:	2b05      	cmp	r3, #5
 8005b8e:	d107      	bne.n	8005ba0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x88>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nNo modem detected: check wiring.", 36, HAL_MAX_DELAY);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f04f 33ff 	mov.w	r3, #4294967295
 8005b96:	2224      	movs	r2, #36	; 0x24
 8005b98:	4932      	ldr	r1, [pc, #200]	; (8005c64 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x14c>)
 8005b9a:	f006 fe62 	bl	800c862 <HAL_UART_Transmit>
}
 8005b9e:	e053      	b.n	8005c48 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_SBDIX_FATAL_ERROR){
 8005ba0:	78fb      	ldrb	r3, [r7, #3]
 8005ba2:	2b06      	cmp	r3, #6
 8005ba4:	d107      	bne.n	8005bb6 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x9e>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "SDBIX Fatal Error\r\n", 21, HAL_MAX_DELAY);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8005bac:	2215      	movs	r2, #21
 8005bae:	492e      	ldr	r1, [pc, #184]	; (8005c68 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x150>)
 8005bb0:	f006 fe57 	bl	800c862 <HAL_UART_Transmit>
}
 8005bb4:	e048      	b.n	8005c48 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_SENDRECEIVE_TIMEOUT){
 8005bb6:	78fb      	ldrb	r3, [r7, #3]
 8005bb8:	2b07      	cmp	r3, #7
 8005bba:	d107      	bne.n	8005bcc <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xb4>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Send-Receive Timeout\r\n", 24, HAL_MAX_DELAY);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8005bc2:	2218      	movs	r2, #24
 8005bc4:	4929      	ldr	r1, [pc, #164]	; (8005c6c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x154>)
 8005bc6:	f006 fe4c 	bl	800c862 <HAL_UART_Transmit>
}
 8005bca:	e03d      	b.n	8005c48 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_RX_OVERFLOW){
 8005bcc:	78fb      	ldrb	r3, [r7, #3]
 8005bce:	2b08      	cmp	r3, #8
 8005bd0:	d107      	bne.n	8005be2 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xca>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "RX Overflow\r\n", 15, HAL_MAX_DELAY);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd8:	220f      	movs	r2, #15
 8005bda:	4925      	ldr	r1, [pc, #148]	; (8005c70 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x158>)
 8005bdc:	f006 fe41 	bl	800c862 <HAL_UART_Transmit>
}
 8005be0:	e032      	b.n	8005c48 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_REENTRANT){
 8005be2:	78fb      	ldrb	r3, [r7, #3]
 8005be4:	2b09      	cmp	r3, #9
 8005be6:	d107      	bne.n	8005bf8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xe0>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "REENTRANT\r\n", 13, HAL_MAX_DELAY);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f04f 33ff 	mov.w	r3, #4294967295
 8005bee:	220d      	movs	r2, #13
 8005bf0:	4920      	ldr	r1, [pc, #128]	; (8005c74 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x15c>)
 8005bf2:	f006 fe36 	bl	800c862 <HAL_UART_Transmit>
}
 8005bf6:	e027      	b.n	8005c48 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_IS_ASLEEP){
 8005bf8:	78fb      	ldrb	r3, [r7, #3]
 8005bfa:	2b0a      	cmp	r3, #10
 8005bfc:	d107      	bne.n	8005c0e <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xf6>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Is Asleep\r\n", 13, HAL_MAX_DELAY);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f04f 33ff 	mov.w	r3, #4294967295
 8005c04:	220d      	movs	r2, #13
 8005c06:	491c      	ldr	r1, [pc, #112]	; (8005c78 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x160>)
 8005c08:	f006 fe2b 	bl	800c862 <HAL_UART_Transmit>
}
 8005c0c:	e01c      	b.n	8005c48 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_NO_SLEEP_PIN){
 8005c0e:	78fb      	ldrb	r3, [r7, #3]
 8005c10:	2b0b      	cmp	r3, #11
 8005c12:	d107      	bne.n	8005c24 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x10c>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "No Sleep Pin\r\n", 16, HAL_MAX_DELAY);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f04f 33ff 	mov.w	r3, #4294967295
 8005c1a:	2210      	movs	r2, #16
 8005c1c:	4917      	ldr	r1, [pc, #92]	; (8005c7c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x164>)
 8005c1e:	f006 fe20 	bl	800c862 <HAL_UART_Transmit>
}
 8005c22:	e011      	b.n	8005c48 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if(error == 20){
 8005c24:	78fb      	ldrb	r3, [r7, #3]
 8005c26:	2b14      	cmp	r3, #20
 8005c28:	d107      	bne.n	8005c3a <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x122>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "DEBUG LINE REACHED\r\n", 22, HAL_MAX_DELAY);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c30:	2216      	movs	r2, #22
 8005c32:	4913      	ldr	r1, [pc, #76]	; (8005c80 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x168>)
 8005c34:	f006 fe15 	bl	800c862 <HAL_UART_Transmit>
}
 8005c38:	e006      	b.n	8005c48 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "UNKNOWN\r\n", 11, HAL_MAX_DELAY);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c40:	220b      	movs	r2, #11
 8005c42:	4910      	ldr	r1, [pc, #64]	; (8005c84 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x16c>)
 8005c44:	f006 fe0d 	bl	800c862 <HAL_UART_Transmit>
}
 8005c48:	bf00      	nop
 8005c4a:	3708      	adds	r7, #8
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	08017d08 	.word	0x08017d08
 8005c54:	08017d14 	.word	0x08017d14
 8005c58:	08017d24 	.word	0x08017d24
 8005c5c:	08017d38 	.word	0x08017d38
 8005c60:	08017d4c 	.word	0x08017d4c
 8005c64:	08017d58 	.word	0x08017d58
 8005c68:	08017d7c 	.word	0x08017d7c
 8005c6c:	08017d90 	.word	0x08017d90
 8005c70:	08017da8 	.word	0x08017da8
 8005c74:	08017db8 	.word	0x08017db8
 8005c78:	08017dc4 	.word	0x08017dc4
 8005c7c:	08017dd0 	.word	0x08017dd0
 8005c80:	08017de0 	.word	0x08017de0
 8005c84:	08017df8 	.word	0x08017df8

08005c88 <_ZN10IridiumSBDC1ER7TwoWireh>:
      if (ringPin != -1)
         pinMode(ringPin, INPUT);
   }
   */

IridiumSBD(TwoWire &wirePort = MRT_IRIDIUM_I2C, uint8_t deviceAddress = 0x63)
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	4613      	mov	r3, r2
 8005c94:	71fb      	strb	r3, [r7, #7]
   {
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2205      	movs	r2, #5
 8005ca2:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2202      	movs	r2, #2
 8005cb2:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2204      	movs	r2, #4
 8005cba:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2208      	movs	r2, #8
 8005cc2:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2210      	movs	r2, #16
 8005cca:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2240      	movs	r2, #64	; 0x40
 8005cda:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
      useSerial = false;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      wireport = &wirePort;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	64da      	str	r2, [r3, #76]	; 0x4c
      deviceaddress = deviceAddress;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	79fa      	ldrb	r2, [r7, #7]
 8005cf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      sbdixInterval = ISBD_USB_SBDIX_INTERVAL;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	221e      	movs	r2, #30
 8005cf8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      atTimeout = ISBD_DEFAULT_AT_TIMEOUT;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	221e      	movs	r2, #30
 8005d00:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      sendReceiveTimeout = ISBD_DEFAULT_SENDRECEIVE_TIME;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005d0a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
      startupTimeout = ISBD_STARTUP_MAX_TIME;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	22f0      	movs	r2, #240	; 0xf0
 8005d12:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
      remainingMessages = -1;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f04f 32ff 	mov.w	r2, #4294967295
 8005d1c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
      asleep = true;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
      reentrant = false;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
      sleepPin = -1;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f04f 32ff 	mov.w	r2, #4294967295
 8005d36:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
      sleepPinConfigured = false;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
      ringPin = -1;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f04f 32ff 	mov.w	r2, #4294967295
 8005d48:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
      msstmWorkaroundRequested = false;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
      ringAlertsEnabled = true;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
      ringAsserted = false;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
      lastPowerOnTime = 0UL;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
      head = SBDRING;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	4a0d      	ldr	r2, [pc, #52]	; (8005da4 <_ZN10IridiumSBDC1ER7TwoWireh+0x11c>)
 8005d70:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
      tail = SBDRING;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4a0b      	ldr	r2, [pc, #44]	; (8005da4 <_ZN10IridiumSBDC1ER7TwoWireh+0x11c>)
 8005d78:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
      nextChar = -1;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d82:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
      i2c_ser_buffer_tail = 0;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      i2c_ser_buffer_head = 0;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   }
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3714      	adds	r7, #20
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr
 8005da4:	080184ac 	.word	0x080184ac

08005da8 <MRT_Static_Iridium_Constructor>:
#endif

static IridiumSBD *E_T = NULL;


void MRT_Static_Iridium_Constructor(){
 8005da8:	b598      	push	{r3, r4, r7, lr}
 8005daa:	af00      	add	r7, sp, #0
	if (E_T==NULL){
 8005dac:	4b08      	ldr	r3, [pc, #32]	; (8005dd0 <MRT_Static_Iridium_Constructor+0x28>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10b      	bne.n	8005dcc <MRT_Static_Iridium_Constructor+0x24>
		E_T = new IridiumSBD();
 8005db4:	20e4      	movs	r0, #228	; 0xe4
 8005db6:	f00a fc09 	bl	80105cc <_Znwj>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	461c      	mov	r4, r3
 8005dbe:	2263      	movs	r2, #99	; 0x63
 8005dc0:	4904      	ldr	r1, [pc, #16]	; (8005dd4 <MRT_Static_Iridium_Constructor+0x2c>)
 8005dc2:	4620      	mov	r0, r4
 8005dc4:	f7ff ff60 	bl	8005c88 <_ZN10IridiumSBDC1ER7TwoWireh>
 8005dc8:	4b01      	ldr	r3, [pc, #4]	; (8005dd0 <MRT_Static_Iridium_Constructor+0x28>)
 8005dca:	601c      	str	r4, [r3, #0]
	}
}
 8005dcc:	bf00      	nop
 8005dce:	bd98      	pop	{r3, r4, r7, pc}
 8005dd0:	20000290 	.word	0x20000290
 8005dd4:	2000034c 	.word	0x2000034c

08005dd8 <MRT_Static_Iridium_Destructor>:

void MRT_Static_Iridium_Destructor(){
 8005dd8:	b480      	push	{r7}
 8005dda:	af00      	add	r7, sp, #0
	if (E_T!=NULL){
 8005ddc:	4b05      	ldr	r3, [pc, #20]	; (8005df4 <MRT_Static_Iridium_Destructor+0x1c>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d002      	beq.n	8005dea <MRT_Static_Iridium_Destructor+0x12>
		E_T = NULL;
 8005de4:	4b03      	ldr	r3, [pc, #12]	; (8005df4 <MRT_Static_Iridium_Destructor+0x1c>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	601a      	str	r2, [r3, #0]
	}
}
 8005dea:	bf00      	nop
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr
 8005df4:	20000290 	.word	0x20000290

08005df8 <MRT_Static_Iridium_Setup>:


uint8_t MRT_Static_Iridium_Setup(UART_HandleTypeDef huart){
 8005df8:	b084      	sub	sp, #16
 8005dfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dfc:	b08f      	sub	sp, #60	; 0x3c
 8005dfe:	af0e      	add	r7, sp, #56	; 0x38
 8005e00:	f107 0418 	add.w	r4, r7, #24
 8005e04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MRT_Static_Iridium_Constructor();
 8005e08:	f7ff ffce 	bl	8005da8 <MRT_Static_Iridium_Constructor>
	return E_T->MRT_Iridium_setup(huart);
 8005e0c:	4b0e      	ldr	r3, [pc, #56]	; (8005e48 <MRT_Static_Iridium_Setup+0x50>)
 8005e0e:	681e      	ldr	r6, [r3, #0]
 8005e10:	466d      	mov	r5, sp
 8005e12:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8005e16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005e26:	e885 0003 	stmia.w	r5, {r0, r1}
 8005e2a:	f107 0318 	add.w	r3, r7, #24
 8005e2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e30:	4630      	mov	r0, r6
 8005e32:	f7ff fd03 	bl	800583c <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef>
 8005e36:	4603      	mov	r3, r0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3704      	adds	r7, #4
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005e42:	b004      	add	sp, #16
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	20000290 	.word	0x20000290

08005e4c <MRT_Static_Iridium_Shutdown>:

bool MRT_Static_Iridium_Shutdown(void){
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
	bool b = E_T->MRT_Iridium_shutdown();
 8005e52:	4b09      	ldr	r3, [pc, #36]	; (8005e78 <MRT_Static_Iridium_Shutdown+0x2c>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7ff fde8 	bl	8005a2c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	bf14      	ite	ne
 8005e62:	2301      	movne	r3, #1
 8005e64:	2300      	moveq	r3, #0
 8005e66:	71fb      	strb	r3, [r7, #7]
	MRT_Static_Iridium_Destructor();
 8005e68:	f7ff ffb6 	bl	8005dd8 <MRT_Static_Iridium_Destructor>
	return b;
 8005e6c:	79fb      	ldrb	r3, [r7, #7]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3708      	adds	r7, #8
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	20000290 	.word	0x20000290

08005e7c <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8005e7c:	b590      	push	{r4, r7, lr}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <_ZN5Print5writeEPKc+0x14>
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	e00d      	b.n	8005eac <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	3304      	adds	r3, #4
 8005e96:	681c      	ldr	r4, [r3, #0]
 8005e98:	6838      	ldr	r0, [r7, #0]
 8005e9a:	f7fa f9a9 	bl	80001f0 <strlen>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	6839      	ldr	r1, [r7, #0]
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	47a0      	blx	r4
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	bf00      	nop
    }
 8005eac:	4618      	mov	r0, r3
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd90      	pop	{r4, r7, pc}

08005eb4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b086      	sub	sp, #24
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	617b      	str	r3, [r7, #20]
  while (size--) {
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	1e5a      	subs	r2, r3, #1
 8005ec8:	607a      	str	r2, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	bf14      	ite	ne
 8005ece:	2301      	movne	r3, #1
 8005ed0:	2300      	moveq	r3, #0
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00e      	beq.n	8005ef6 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	1c59      	adds	r1, r3, #1
 8005ee2:	60b9      	str	r1, [r7, #8]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	4790      	blx	r2
 8005eec:	4602      	mov	r2, r0
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	617b      	str	r3, [r7, #20]
  while (size--) {
 8005ef4:	e7e6      	b.n	8005ec4 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8005ef6:	697b      	ldr	r3, [r7, #20]
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3718      	adds	r7, #24
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 8005f0a:	6839      	ldr	r1, [r7, #0]
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 f805 	bl	8005f1c <_ZN5Print5printEPKc>
 8005f12:	4603      	mov	r3, r0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3708      	adds	r7, #8
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  return write(str);
 8005f26:	6839      	ldr	r1, [r7, #0]
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7ff ffa7 	bl	8005e7c <_ZN5Print5writeEPKc>
 8005f2e:	4603      	mov	r3, r0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3708      	adds	r7, #8
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	4a06      	ldr	r2, [pc, #24]	; (8005f5c <_ZN5PrintC1Ev+0x24>)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	601a      	str	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	605a      	str	r2, [r3, #4]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4618      	mov	r0, r3
 8005f50:	370c      	adds	r7, #12
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	080184c0 	.word	0x080184c0

08005f60 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7ff ffe4 	bl	8005f38 <_ZN5PrintC1Ev>
 8005f70:	4a05      	ldr	r2, [pc, #20]	; (8005f88 <_ZN6StreamC1Ev+0x28>)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	601a      	str	r2, [r3, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f7c:	609a      	str	r2, [r3, #8]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4618      	mov	r0, r3
 8005f82:	3708      	adds	r7, #8
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	080184f0 	.word	0x080184f0

08005f8c <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7ff ffe1 	bl	8005f60 <_ZN6StreamC1Ev>
 8005f9e:	4a16      	ldr	r2, [pc, #88]	; (8005ff8 <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	3390      	adds	r3, #144	; 0x90
 8005fae:	2220      	movs	r2, #32
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f00b fc52 	bl	801185c <memset>
  rxBufferIndex = 0;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3708      	adds	r7, #8
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	080184d0 	.word	0x080184d0

08005ffc <_ZN7TwoWire11requestFromEhhh>:
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
  HAL_I2C_Init(&I2cHandle);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af02      	add	r7, sp, #8
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	4608      	mov	r0, r1
 8006006:	4611      	mov	r1, r2
 8006008:	461a      	mov	r2, r3
 800600a:	4603      	mov	r3, r0
 800600c:	70fb      	strb	r3, [r7, #3]
 800600e:	460b      	mov	r3, r1
 8006010:	70bb      	strb	r3, [r7, #2]
 8006012:	4613      	mov	r3, r2
 8006014:	707b      	strb	r3, [r7, #1]
  uint8_t ret_val;

  disableInterrupt();
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 fc24 	bl	8006864 <_ZN7TwoWire16disableInterruptEv>

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
 800601c:	78bb      	ldrb	r3, [r7, #2]
 800601e:	2b20      	cmp	r3, #32
 8006020:	d901      	bls.n	8006026 <_ZN7TwoWire11requestFromEhhh+0x2a>
    quantity = BUFFER_LENGTH;
 8006022:	2320      	movs	r3, #32
 8006024:	70bb      	strb	r3, [r7, #2]
  }
  // perform blocking read into buffer
  int read = i2c_master_read((address << 1), (char *)rxBuffer, quantity, sendStop);
 8006026:	78fb      	ldrb	r3, [r7, #3]
 8006028:	005b      	lsls	r3, r3, #1
 800602a:	b2d9      	uxtb	r1, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8006032:	78b8      	ldrb	r0, [r7, #2]
 8006034:	787b      	ldrb	r3, [r7, #1]
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	4603      	mov	r3, r0
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f9cf 	bl	80063de <_ZN7TwoWire15i2c_master_readEhPchh>
 8006040:	60b8      	str	r0, [r7, #8]

  if(read < 0)
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	2b00      	cmp	r3, #0
 8006046:	da02      	bge.n	800604e <_ZN7TwoWire11requestFromEhhh+0x52>
  {
    ret_val = 0;
 8006048:	2300      	movs	r3, #0
 800604a:	73fb      	strb	r3, [r7, #15]
 800604c:	e001      	b.n	8006052 <_ZN7TwoWire11requestFromEhhh+0x56>
  }else
  {
    ret_val = read;
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	73fb      	strb	r3, [r7, #15]
  }

  // set rx buffer iterator vars
  rxBufferIndex = 0;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = ret_val;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	7bfa      	ldrb	r2, [r7, #15]
 800605e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

  enableInterrupt();
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 fbcc 	bl	8006800 <_ZN7TwoWire15enableInterruptEv>

  return ret_val;
 8006068:	7bfb      	ldrb	r3, [r7, #15]
}
 800606a:	4618      	mov	r0, r3
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b082      	sub	sp, #8
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
 800607a:	460b      	mov	r3, r1
 800607c:	70fb      	strb	r3, [r7, #3]
 800607e:	4613      	mov	r3, r2
 8006080:	70bb      	strb	r3, [r7, #2]
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 8006082:	78ba      	ldrb	r2, [r7, #2]
 8006084:	78f9      	ldrb	r1, [r7, #3]
 8006086:	2301      	movs	r3, #1
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f7ff ffb7 	bl	8005ffc <_ZN7TwoWire11requestFromEhhh>
 800608e:	4603      	mov	r3, r0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3708      	adds	r7, #8
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <_ZN7TwoWire17beginTransmissionEh>:
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	460b      	mov	r3, r1
 80060a2:	70fb      	strb	r3, [r7, #3]
  // indicate that we are transmitting
  transmitting = 1;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  // set address of targeted slave
  txAddress = address;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	78fa      	ldrb	r2, [r7, #3]
 80060b0:	741a      	strb	r2, [r3, #16]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 80060c2:	bf00      	nop
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <_ZN7TwoWire15endTransmissionEh>:
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b086      	sub	sp, #24
 80060d2:	af02      	add	r7, sp, #8
 80060d4:	6078      	str	r0, [r7, #4]
 80060d6:	460b      	mov	r3, r1
 80060d8:	70fb      	strb	r3, [r7, #3]
  // transmit buffer (blocking)
  disableInterrupt();
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 fbc2 	bl	8006864 <_ZN7TwoWire16disableInterruptEv>

  int8_t ret = i2c_master_write((txAddress << 1), (const char *)txBuffer, txBufferLength, sendStop);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	7c1b      	ldrb	r3, [r3, #16]
 80060e4:	0059      	lsls	r1, r3, #1
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f103 0211 	add.w	r2, r3, #17
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80060f2:	4618      	mov	r0, r3
 80060f4:	78fb      	ldrb	r3, [r7, #3]
 80060f6:	9300      	str	r3, [sp, #0]
 80060f8:	4603      	mov	r3, r0
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 fa00 	bl	8006500 <_ZN7TwoWire16i2c_master_writeEiPKcii>
 8006100:	4603      	mov	r3, r0
 8006102:	73fb      	strb	r3, [r7, #15]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  // indicate that we are done transmitting
  transmitting = 0;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  enableInterrupt();
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 fb6f 	bl	8006800 <_ZN7TwoWire15enableInterruptEv>

  return ret;
 8006122:	7bfb      	ldrb	r3, [r7, #15]
}
 8006124:	4618      	mov	r0, r3
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <_ZN7TwoWire15endTransmissionEv>:

//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  return endTransmission(true);
 8006134:	2101      	movs	r1, #1
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f7ff ffc9 	bl	80060ce <_ZN7TwoWire15endTransmissionEh>
 800613c:	4603      	mov	r3, r0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3708      	adds	r7, #8
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 8006146:	b580      	push	{r7, lr}
 8006148:	b082      	sub	sp, #8
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
 800614e:	460b      	mov	r3, r1
 8006150:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8006158:	2b00      	cmp	r3, #0
 800615a:	d01d      	beq.n	8006198 <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006162:	2b1f      	cmp	r3, #31
 8006164:	d901      	bls.n	800616a <_ZN7TwoWire5writeEh+0x24>
      return 0;
 8006166:	2300      	movs	r3, #0
 8006168:	e028      	b.n	80061bc <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006170:	4619      	mov	r1, r3
 8006172:	78fa      	ldrb	r2, [r7, #3]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	440b      	add	r3, r1
 8006178:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006180:	3301      	adds	r3, #1
 8006182:	b2da      	uxtb	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8006196:	e010      	b.n	80061ba <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 fb63 	bl	8006864 <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 800619e:	1cfb      	adds	r3, r7, #3
 80061a0:	2201      	movs	r2, #1
 80061a2:	4619      	mov	r1, r3
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 fa95 	bl	80066d4 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 fb28 	bl	8006800 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	333c      	adds	r3, #60	; 0x3c
 80061b4:	4618      	mov	r0, r3
 80061b6:	f002 fea3 	bl	8008f00 <HAL_I2C_EnableListen_IT>
  }
  return 1;
 80061ba:	2301      	movs	r3, #1
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b086      	sub	sp, #24
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
  if(transmitting){
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d013      	beq.n	8006202 <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 80061da:	2300      	movs	r3, #0
 80061dc:	617b      	str	r3, [r7, #20]
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d21e      	bcs.n	8006224 <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68b9      	ldr	r1, [r7, #8]
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	440a      	add	r2, r1
 80061f2:	7812      	ldrb	r2, [r2, #0]
 80061f4:	4611      	mov	r1, r2
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	3301      	adds	r3, #1
 80061fe:	617b      	str	r3, [r7, #20]
 8006200:	e7ed      	b.n	80061de <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 8006202:	68f8      	ldr	r0, [r7, #12]
 8006204:	f000 fb2e 	bl	8006864 <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	461a      	mov	r2, r3
 800620c:	68b9      	ldr	r1, [r7, #8]
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f000 fa60 	bl	80066d4 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 faf3 	bl	8006800 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	333c      	adds	r3, #60	; 0x3c
 800621e:	4618      	mov	r0, r3
 8006220:	f002 fe6e 	bl	8008f00 <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 8006224:	687b      	ldr	r3, [r7, #4]
}
 8006226:	4618      	mov	r0, r3
 8006228:	3718      	adds	r7, #24
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 800622e:	b480      	push	{r7}
 8006230:	b083      	sub	sp, #12
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800623c:	b2db      	uxtb	r3, r3
 800623e:	461a      	mov	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006246:	b2db      	uxtb	r3, r3
 8006248:	1ad3      	subs	r3, r2, r3
}
 800624a:	4618      	mov	r0, r3
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 8006256:	b480      	push	{r7}
 8006258:	b085      	sub	sp, #20
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
  int value = -1;
 800625e:	f04f 33ff 	mov.w	r3, #4294967295
 8006262:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800626a:	b2da      	uxtb	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006272:	b2db      	uxtb	r3, r3
 8006274:	429a      	cmp	r2, r3
 8006276:	bf34      	ite	cc
 8006278:	2301      	movcc	r3, #1
 800627a:	2300      	movcs	r3, #0
 800627c:	b2db      	uxtb	r3, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	d012      	beq.n	80062a8 <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006288:	b2db      	uxtb	r3, r3
 800628a:	461a      	mov	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4413      	add	r3, r2
 8006290:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8006294:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800629c:	b2db      	uxtb	r3, r3
 800629e:	3301      	adds	r3, #1
 80062a0:	b2da      	uxtb	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 80062a8:	68fb      	ldr	r3, [r7, #12]
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3714      	adds	r7, #20
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b085      	sub	sp, #20
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  int value = -1;
 80062be:	f04f 33ff 	mov.w	r3, #4294967295
 80062c2:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	429a      	cmp	r2, r3
 80062d6:	bf34      	ite	cc
 80062d8:	2301      	movcc	r3, #1
 80062da:	2300      	movcs	r3, #0
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d009      	beq.n	80062f6 <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	461a      	mov	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4413      	add	r3, r2
 80062f0:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80062f4:	60fb      	str	r3, [r7, #12]
  }

  return value;
 80062f6:	68fb      	ldr	r3, [r7, #12]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3714      	adds	r7, #20
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 800630c:	bf00      	nop
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <_ZN7TwoWire16i2c_master_startEv>:
{
  user_onRequest = function;
}

int TwoWire::i2c_master_start()
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006324:	60bb      	str	r3, [r7, #8]

    int timeout;

    // Clear Acknowledge failure flag
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800632a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800632e:	615a      	str	r2, [r3, #20]

    // Wait the STOP condition has been previously correctly sent
  // This timeout can be avoid in some specific cases by simply clearing the STOP bit
    timeout = FLAG_TIMEOUT;
 8006330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006334:	60fb      	str	r3, [r7, #12]
    while ((i2c->CR1 & I2C_CR1_STOP) == I2C_CR1_STOP) {
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800633e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006342:	bf0c      	ite	eq
 8006344:	2301      	moveq	r3, #1
 8006346:	2300      	movne	r3, #0
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00b      	beq.n	8006366 <_ZN7TwoWire16i2c_master_startEv+0x4e>
        if ((timeout--) == 0) {
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	1e5a      	subs	r2, r3, #1
 8006352:	60fa      	str	r2, [r7, #12]
 8006354:	2b00      	cmp	r3, #0
 8006356:	bf0c      	ite	eq
 8006358:	2301      	moveq	r3, #1
 800635a:	2300      	movne	r3, #0
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b00      	cmp	r3, #0
 8006360:	d0e9      	beq.n	8006336 <_ZN7TwoWire16i2c_master_startEv+0x1e>
            return 1;
 8006362:	2301      	movs	r3, #1
 8006364:	e021      	b.n	80063aa <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    // Generate the START condition
    i2c->CR1 |= I2C_CR1_START;
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	601a      	str	r2, [r3, #0]

    // Wait the START condition has been correctly sent
    timeout = FLAG_TIMEOUT;
 8006372:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006376:	60fb      	str	r3, [r7, #12]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	2b01      	cmp	r3, #1
 8006384:	bf14      	ite	ne
 8006386:	2301      	movne	r3, #1
 8006388:	2300      	moveq	r3, #0
 800638a:	b2db      	uxtb	r3, r3
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00b      	beq.n	80063a8 <_ZN7TwoWire16i2c_master_startEv+0x90>
        if ((timeout--) == 0) {
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	1e5a      	subs	r2, r3, #1
 8006394:	60fa      	str	r2, [r7, #12]
 8006396:	2b00      	cmp	r3, #0
 8006398:	bf0c      	ite	eq
 800639a:	2301      	moveq	r3, #1
 800639c:	2300      	movne	r3, #0
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d0e9      	beq.n	8006378 <_ZN7TwoWire16i2c_master_startEv+0x60>
            return 1;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e000      	b.n	80063aa <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    return 0;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3714      	adds	r7, #20
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <_ZN7TwoWire15i2c_master_stopEv>:

int TwoWire::i2c_master_stop()
{
 80063b6:	b480      	push	{r7}
 80063b8:	b085      	sub	sp, #20
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c2:	60fb      	str	r3, [r7, #12]

    // Generate the STOP condition
    i2c->CR1 |= I2C_CR1_STOP;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	601a      	str	r2, [r3, #0]

    return 0;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3714      	adds	r7, #20
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <_ZN7TwoWire15i2c_master_readEhPchh>:

int TwoWire::i2c_master_read(uint8_t address, char *data, uint8_t length, uint8_t stop)
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b08a      	sub	sp, #40	; 0x28
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	60f8      	str	r0, [r7, #12]
 80063e6:	607a      	str	r2, [r7, #4]
 80063e8:	461a      	mov	r2, r3
 80063ea:	460b      	mov	r3, r1
 80063ec:	72fb      	strb	r3, [r7, #11]
 80063ee:	4613      	mov	r3, r2
 80063f0:	72bb      	strb	r3, [r7, #10]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f6:	61fb      	str	r3, [r7, #28]
    int timeout;
    int count;
    int value;
    int ret;

    i2c_master_start();
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f7ff ff8d 	bl	8006318 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 80063fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006402:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	2b01      	cmp	r3, #1
 8006410:	bf14      	ite	ne
 8006412:	2301      	movne	r3, #1
 8006414:	2300      	moveq	r3, #0
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b00      	cmp	r3, #0
 800641a:	d008      	beq.n	800642e <_ZN7TwoWire15i2c_master_readEhPchh+0x50>
        timeout--;
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	3b01      	subs	r3, #1
 8006420:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 8006422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1ed      	bne.n	8006404 <_ZN7TwoWire15i2c_master_readEhPchh+0x26>
            return -1;
 8006428:	f04f 33ff 	mov.w	r3, #4294967295
 800642c:	e064      	b.n	80064f8 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_READ(address);
 800642e:	7afb      	ldrb	r3, [r7, #11]
 8006430:	f043 0301 	orr.w	r3, r3, #1
 8006434:	b2db      	uxtb	r3, r3
 8006436:	461a      	mov	r2, r3
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 800643c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006440:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006446:	695b      	ldr	r3, [r3, #20]
 8006448:	f003 0302 	and.w	r3, r3, #2
 800644c:	2b02      	cmp	r3, #2
 800644e:	bf14      	ite	ne
 8006450:	2301      	movne	r3, #1
 8006452:	2300      	moveq	r3, #0
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d008      	beq.n	800646c <_ZN7TwoWire15i2c_master_readEhPchh+0x8e>
        timeout--;
 800645a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645c:	3b01      	subs	r3, #1
 800645e:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 8006460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1ed      	bne.n	8006442 <_ZN7TwoWire15i2c_master_readEhPchh+0x64>
            return -1;
 8006466:	f04f 33ff 	mov.w	r3, #4294967295
 800646a:	e045      	b.n	80064f8 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 800646c:	2300      	movs	r3, #0
 800646e:	613b      	str	r3, [r7, #16]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	613b      	str	r3, [r7, #16]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	613b      	str	r3, [r7, #16]
 8006480:	693b      	ldr	r3, [r7, #16]

    // Read all bytes except last one
    for (count = 0; count < (length - 1); count++) {
 8006482:	2300      	movs	r3, #0
 8006484:	623b      	str	r3, [r7, #32]
 8006486:	7abb      	ldrb	r3, [r7, #10]
 8006488:	3b01      	subs	r3, #1
 800648a:	6a3a      	ldr	r2, [r7, #32]
 800648c:	429a      	cmp	r2, r3
 800648e:	da17      	bge.n	80064c0 <_ZN7TwoWire15i2c_master_readEhPchh+0xe2>
        ret = i2c_master_byte_read(&value, 0);
 8006490:	f107 0314 	add.w	r3, r7, #20
 8006494:	2200      	movs	r2, #0
 8006496:	4619      	mov	r1, r3
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f000 f8a4 	bl	80065e6 <_ZN7TwoWire20i2c_master_byte_readEPii>
 800649e:	61b8      	str	r0, [r7, #24]
        if(ret)
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d002      	beq.n	80064ac <_ZN7TwoWire15i2c_master_readEhPchh+0xce>
        {
          return -1;
 80064a6:	f04f 33ff 	mov.w	r3, #4294967295
 80064aa:	e025      	b.n	80064f8 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
        data[count] = (char)value;
 80064ac:	6979      	ldr	r1, [r7, #20]
 80064ae:	6a3b      	ldr	r3, [r7, #32]
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	4413      	add	r3, r2
 80064b4:	b2ca      	uxtb	r2, r1
 80064b6:	701a      	strb	r2, [r3, #0]
    for (count = 0; count < (length - 1); count++) {
 80064b8:	6a3b      	ldr	r3, [r7, #32]
 80064ba:	3301      	adds	r3, #1
 80064bc:	623b      	str	r3, [r7, #32]
 80064be:	e7e2      	b.n	8006486 <_ZN7TwoWire15i2c_master_readEhPchh+0xa8>
    }

    // If not repeated start, send stop.
    // Warning: must be done BEFORE the data is read.
    if (stop) {
 80064c0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d002      	beq.n	80064ce <_ZN7TwoWire15i2c_master_readEhPchh+0xf0>
        i2c_master_stop();
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f7ff ff74 	bl	80063b6 <_ZN7TwoWire15i2c_master_stopEv>
    }

    // Read the last byte
    ret = i2c_master_byte_read(&value, 1);
 80064ce:	f107 0314 	add.w	r3, r7, #20
 80064d2:	2201      	movs	r2, #1
 80064d4:	4619      	mov	r1, r3
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f000 f885 	bl	80065e6 <_ZN7TwoWire20i2c_master_byte_readEPii>
 80064dc:	61b8      	str	r0, [r7, #24]
    if(ret)
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d002      	beq.n	80064ea <_ZN7TwoWire15i2c_master_readEhPchh+0x10c>
    {
      return -1;
 80064e4:	f04f 33ff 	mov.w	r3, #4294967295
 80064e8:	e006      	b.n	80064f8 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
    }
    data[count] = (char)value;
 80064ea:	6979      	ldr	r1, [r7, #20]
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	4413      	add	r3, r2
 80064f2:	b2ca      	uxtb	r2, r1
 80064f4:	701a      	strb	r2, [r3, #0]

    return length;
 80064f6:	7abb      	ldrb	r3, [r7, #10]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3728      	adds	r7, #40	; 0x28
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <_ZN7TwoWire16i2c_master_writeEiPKcii>:

int TwoWire::i2c_master_write(int address, const char *data, int length, int stop)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b088      	sub	sp, #32
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
 800650c:	603b      	str	r3, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006512:	617b      	str	r3, [r7, #20]
    int timeout;
    int count;

    i2c_master_start();
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f7ff feff 	bl	8006318 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 800651a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800651e:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	2b01      	cmp	r3, #1
 800652c:	bf14      	ite	ne
 800652e:	2301      	movne	r3, #1
 8006530:	2300      	moveq	r3, #0
 8006532:	b2db      	uxtb	r3, r3
 8006534:	2b00      	cmp	r3, #0
 8006536:	d007      	beq.n	8006548 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x48>
        timeout--;
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	3b01      	subs	r3, #1
 800653c:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1ed      	bne.n	8006520 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x20>
            return 4;
 8006544:	2304      	movs	r3, #4
 8006546:	e04a      	b.n	80065de <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_WRITE(address);
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	b2db      	uxtb	r3, r3
 800654c:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 8006554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006558:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800655e:	695b      	ldr	r3, [r3, #20]
 8006560:	f003 0302 	and.w	r3, r3, #2
 8006564:	2b02      	cmp	r3, #2
 8006566:	bf14      	ite	ne
 8006568:	2301      	movne	r3, #1
 800656a:	2300      	moveq	r3, #0
 800656c:	b2db      	uxtb	r3, r3
 800656e:	2b00      	cmp	r3, #0
 8006570:	d007      	beq.n	8006582 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x82>
        timeout--;
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	3b01      	subs	r3, #1
 8006576:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1ed      	bne.n	800655a <_ZN7TwoWire16i2c_master_writeEiPKcii+0x5a>
            return 2;
 800657e:	2302      	movs	r3, #2
 8006580:	e02d      	b.n	80065de <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 8006582:	2300      	movs	r3, #0
 8006584:	613b      	str	r3, [r7, #16]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800658a:	695b      	ldr	r3, [r3, #20]
 800658c:	613b      	str	r3, [r7, #16]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	613b      	str	r3, [r7, #16]
 8006596:	693b      	ldr	r3, [r7, #16]

    for (count = 0; count < length; count++) {
 8006598:	2300      	movs	r3, #0
 800659a:	61bb      	str	r3, [r7, #24]
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	da15      	bge.n	80065d0 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xd0>
        if (i2c_master_byte_write(data[count]) != 1) {
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	4413      	add	r3, r2
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	4619      	mov	r1, r3
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f000 f85a 	bl	8006668 <_ZN7TwoWire21i2c_master_byte_writeEi>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	bf14      	ite	ne
 80065ba:	2301      	movne	r3, #1
 80065bc:	2300      	moveq	r3, #0
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d001      	beq.n	80065c8 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xc8>
            return 3;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e00a      	b.n	80065de <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
    for (count = 0; count < length; count++) {
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	3301      	adds	r3, #1
 80065cc:	61bb      	str	r3, [r7, #24]
 80065ce:	e7e5      	b.n	800659c <_ZN7TwoWire16i2c_master_writeEiPKcii+0x9c>
        }
    }

    // If not repeated start, send stop.
    if (stop) {
 80065d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d002      	beq.n	80065dc <_ZN7TwoWire16i2c_master_writeEiPKcii+0xdc>
        i2c_master_stop();
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	f7ff feed 	bl	80063b6 <_ZN7TwoWire15i2c_master_stopEv>
    }

    return 0;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3720      	adds	r7, #32
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <_ZN7TwoWire20i2c_master_byte_readEPii>:

int TwoWire::i2c_master_byte_read(int *value, int last)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b087      	sub	sp, #28
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	60f8      	str	r0, [r7, #12]
 80065ee:	60b9      	str	r1, [r7, #8]
 80065f0:	607a      	str	r2, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f6:	613b      	str	r3, [r7, #16]
    int timeout;

    if (last) {
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d006      	beq.n	800660c <_ZN7TwoWire20i2c_master_byte_readEPii+0x26>
        // Don't acknowledge the last byte
        i2c->CR1 &= ~I2C_CR1_ACK;
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	601a      	str	r2, [r3, #0]
 800660a:	e005      	b.n	8006618 <_ZN7TwoWire20i2c_master_byte_readEPii+0x32>
    } else {
        // Acknowledge the byte
        i2c->CR1 |= I2C_CR1_ACK;
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	601a      	str	r2, [r3, #0]
    }

    // Wait until the byte is received
    timeout = FLAG_TIMEOUT;
 8006618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800661c:	617b      	str	r3, [r7, #20]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_RXNE) == RESET) {
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006622:	695b      	ldr	r3, [r3, #20]
 8006624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006628:	2b40      	cmp	r3, #64	; 0x40
 800662a:	bf14      	ite	ne
 800662c:	2301      	movne	r3, #1
 800662e:	2300      	moveq	r3, #0
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00c      	beq.n	8006650 <_ZN7TwoWire20i2c_master_byte_readEPii+0x6a>
        if ((timeout--) == 0) {
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	1e5a      	subs	r2, r3, #1
 800663a:	617a      	str	r2, [r7, #20]
 800663c:	2b00      	cmp	r3, #0
 800663e:	bf0c      	ite	eq
 8006640:	2301      	moveq	r3, #1
 8006642:	2300      	movne	r3, #0
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d0e9      	beq.n	800661e <_ZN7TwoWire20i2c_master_byte_readEPii+0x38>
            return -1;
 800664a:	f04f 33ff 	mov.w	r3, #4294967295
 800664e:	e005      	b.n	800665c <_ZN7TwoWire20i2c_master_byte_readEPii+0x76>
        }
    }

    *value = (int)i2c->DR;
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	461a      	mov	r2, r3
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	601a      	str	r2, [r3, #0]

    return 0;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	371c      	adds	r7, #28
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <_ZN7TwoWire21i2c_master_byte_writeEi>:

int TwoWire::i2c_master_byte_write(int data)
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006676:	60bb      	str	r3, [r7, #8]
    int timeout;

    i2c->DR = (uint8_t)data;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	b2db      	uxtb	r3, r3
 800667c:	461a      	mov	r2, r3
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	611a      	str	r2, [r3, #16]

    // Wait until the byte is transmitted
    timeout = FLAG_TIMEOUT;
 8006682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006686:	60fb      	str	r3, [r7, #12]
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800668c:	695b      	ldr	r3, [r3, #20]
 800668e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006692:	2b80      	cmp	r3, #128	; 0x80
 8006694:	d008      	beq.n	80066a8 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
            (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == RESET)) {
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800669a:	695b      	ldr	r3, [r3, #20]
 800669c:	f003 0304 	and.w	r3, r3, #4
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 80066a0:	2b04      	cmp	r3, #4
 80066a2:	d001      	beq.n	80066a8 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
 80066a4:	2301      	movs	r3, #1
 80066a6:	e000      	b.n	80066aa <_ZN7TwoWire21i2c_master_byte_writeEi+0x42>
 80066a8:	2300      	movs	r3, #0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00b      	beq.n	80066c6 <_ZN7TwoWire21i2c_master_byte_writeEi+0x5e>
        if ((timeout--) == 0) {
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	1e5a      	subs	r2, r3, #1
 80066b2:	60fa      	str	r2, [r7, #12]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	bf0c      	ite	eq
 80066b8:	2301      	moveq	r3, #1
 80066ba:	2300      	movne	r3, #0
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d0e2      	beq.n	8006688 <_ZN7TwoWire21i2c_master_byte_writeEi+0x20>
            return 0;
 80066c2:	2300      	movs	r3, #0
 80066c4:	e000      	b.n	80066c8 <_ZN7TwoWire21i2c_master_byte_writeEi+0x60>
        }
    }

    return 1;
 80066c6:	2301      	movs	r3, #1
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3714      	adds	r7, #20
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <_ZN7TwoWire15i2c_slave_writeEPKci>:

int TwoWire::i2c_slave_write(const char *data, int length)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b089      	sub	sp, #36	; 0x24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 80066e0:	2300      	movs	r3, #0
 80066e2:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e8:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	dd41      	ble.n	8006774 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 80066f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066f4:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066fa:	695b      	ldr	r3, [r3, #20]
 80066fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006700:	2b80      	cmp	r3, #128	; 0x80
 8006702:	bf14      	ite	ne
 8006704:	2301      	movne	r3, #1
 8006706:	2300      	moveq	r3, #0
 8006708:	b2db      	uxtb	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d008      	beq.n	8006720 <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	3b01      	subs	r3, #1
 8006712:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1ed      	bne.n	80066f6 <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 800671a:	f04f 33ff 	mov.w	r3, #4294967295
 800671e:	e068      	b.n	80067f2 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	1c5a      	adds	r2, r3, #1
 8006724:	60ba      	str	r2, [r7, #8]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	461a      	mov	r2, r3
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	611a      	str	r2, [r3, #16]
        length--;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	3b01      	subs	r3, #1
 8006732:	607b      	str	r3, [r7, #4]
        size++;
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	3301      	adds	r3, #1
 8006738:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	f003 0304 	and.w	r3, r3, #4
 8006744:	2b04      	cmp	r3, #4
 8006746:	d104      	bne.n	8006752 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d001      	beq.n	8006752 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 800674e:	2301      	movs	r3, #1
 8006750:	e000      	b.n	8006754 <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 8006752:	2300      	movs	r3, #0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d0c8      	beq.n	80066ea <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	1c5a      	adds	r2, r3, #1
 800675c:	60ba      	str	r2, [r7, #8]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	461a      	mov	r2, r3
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	611a      	str	r2, [r3, #16]
            length--;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	3b01      	subs	r3, #1
 800676a:	607b      	str	r3, [r7, #4]
            size++;
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	3301      	adds	r3, #1
 8006770:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 8006772:	e7ba      	b.n	80066ea <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 8006774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006778:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800677e:	695b      	ldr	r3, [r3, #20]
 8006780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006788:	bf14      	ite	ne
 800678a:	2301      	movne	r3, #1
 800678c:	2300      	moveq	r3, #0
 800678e:	b2db      	uxtb	r3, r3
 8006790:	2b00      	cmp	r3, #0
 8006792:	d008      	beq.n	80067a6 <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	3b01      	subs	r3, #1
 8006798:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1ec      	bne.n	800677a <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 80067a0:	f04f 33ff 	mov.w	r3, #4294967295
 80067a4:	e025      	b.n	80067f2 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067ae:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 80067b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067b4:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	bf0c      	ite	eq
 80067c4:	2301      	moveq	r3, #1
 80067c6:	2300      	movne	r3, #0
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d008      	beq.n	80067e0 <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	3b01      	subs	r3, #1
 80067d2:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1ed      	bne.n	80067b6 <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 80067da:	f04f 33ff 	mov.w	r3, #4294967295
 80067de:	e008      	b.n	80067f2 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2220      	movs	r2, #32
 80067e4:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 80067f0:	69bb      	ldr	r3, [r7, #24]
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3724      	adds	r7, #36	; 0x24
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
	...

08006800 <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800680c:	4a12      	ldr	r2, [pc, #72]	; (8006858 <_ZN7TwoWire15enableInterruptEv+0x58>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d106      	bne.n	8006820 <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8006812:	2049      	movs	r0, #73	; 0x49
 8006814:	f001 fcfe 	bl	8008214 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8006818:	2048      	movs	r0, #72	; 0x48
 800681a:	f001 fcfb 	bl	8008214 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 800681e:	e016      	b.n	800684e <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006824:	4a0d      	ldr	r2, [pc, #52]	; (800685c <_ZN7TwoWire15enableInterruptEv+0x5c>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d106      	bne.n	8006838 <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800682a:	2022      	movs	r0, #34	; 0x22
 800682c:	f001 fcf2 	bl	8008214 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8006830:	2021      	movs	r0, #33	; 0x21
 8006832:	f001 fcef 	bl	8008214 <HAL_NVIC_EnableIRQ>
}
 8006836:	e00a      	b.n	800684e <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800683c:	4a08      	ldr	r2, [pc, #32]	; (8006860 <_ZN7TwoWire15enableInterruptEv+0x60>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d105      	bne.n	800684e <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8006842:	2020      	movs	r0, #32
 8006844:	f001 fce6 	bl	8008214 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8006848:	201f      	movs	r0, #31
 800684a:	f001 fce3 	bl	8008214 <HAL_NVIC_EnableIRQ>
}
 800684e:	bf00      	nop
 8006850:	3708      	adds	r7, #8
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	40005c00 	.word	0x40005c00
 800685c:	40005800 	.word	0x40005800
 8006860:	40005400 	.word	0x40005400

08006864 <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006870:	4a12      	ldr	r2, [pc, #72]	; (80068bc <_ZN7TwoWire16disableInterruptEv+0x58>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d106      	bne.n	8006884 <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8006876:	2049      	movs	r0, #73	; 0x49
 8006878:	f001 fcda 	bl	8008230 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 800687c:	2048      	movs	r0, #72	; 0x48
 800687e:	f001 fcd7 	bl	8008230 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8006882:	e016      	b.n	80068b2 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006888:	4a0d      	ldr	r2, [pc, #52]	; (80068c0 <_ZN7TwoWire16disableInterruptEv+0x5c>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d106      	bne.n	800689c <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 800688e:	2022      	movs	r0, #34	; 0x22
 8006890:	f001 fcce 	bl	8008230 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8006894:	2021      	movs	r0, #33	; 0x21
 8006896:	f001 fccb 	bl	8008230 <HAL_NVIC_DisableIRQ>
}
 800689a:	e00a      	b.n	80068b2 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068a0:	4a08      	ldr	r2, [pc, #32]	; (80068c4 <_ZN7TwoWire16disableInterruptEv+0x60>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d105      	bne.n	80068b2 <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 80068a6:	2020      	movs	r0, #32
 80068a8:	f001 fcc2 	bl	8008230 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 80068ac:	201f      	movs	r0, #31
 80068ae:	f001 fcbf 	bl	8008230 <HAL_NVIC_DisableIRQ>
}
 80068b2:	bf00      	nop
 80068b4:	3708      	adds	r7, #8
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	40005c00 	.word	0x40005c00
 80068c0:	40005800 	.word	0x40005800
 80068c4:	40005400 	.word	0x40005400

080068c8 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d110      	bne.n	80068fa <_Z41__static_initialization_and_destruction_0ii+0x32>
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80068de:	4293      	cmp	r3, r2
 80068e0:	d10b      	bne.n	80068fa <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 80068e2:	4908      	ldr	r1, [pc, #32]	; (8006904 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80068e4:	4808      	ldr	r0, [pc, #32]	; (8006908 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80068e6:	f7ff fb51 	bl	8005f8c <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 80068ea:	4908      	ldr	r1, [pc, #32]	; (800690c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80068ec:	4808      	ldr	r0, [pc, #32]	; (8006910 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80068ee:	f7ff fb4d 	bl	8005f8c <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 80068f2:	4908      	ldr	r1, [pc, #32]	; (8006914 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80068f4:	4808      	ldr	r0, [pc, #32]	; (8006918 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80068f6:	f7ff fb49 	bl	8005f8c <_ZN7TwoWireC1EP11I2C_TypeDef>
 80068fa:	bf00      	nop
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	40005400 	.word	0x40005400
 8006908:	20000294 	.word	0x20000294
 800690c:	40005800 	.word	0x40005800
 8006910:	2000034c 	.word	0x2000034c
 8006914:	40005c00 	.word	0x40005c00
 8006918:	20000404 	.word	0x20000404

0800691c <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 800691c:	b580      	push	{r7, lr}
 800691e:	af00      	add	r7, sp, #0
 8006920:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006924:	2001      	movs	r0, #1
 8006926:	f7ff ffcf 	bl	80068c8 <_Z41__static_initialization_and_destruction_0ii>
 800692a:	bd80      	pop	{r7, pc}

0800692c <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800692c:	b590      	push	{r4, r7, lr}
 800692e:	b087      	sub	sp, #28
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	607a      	str	r2, [r7, #4]
 8006936:	461a      	mov	r2, r3
 8006938:	460b      	mov	r3, r1
 800693a:	72fb      	strb	r3, [r7, #11]
 800693c:	4613      	mov	r3, r2
 800693e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	685c      	ldr	r4, [r3, #4]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6898      	ldr	r0, [r3, #8]
 8006948:	893b      	ldrh	r3, [r7, #8]
 800694a:	7af9      	ldrb	r1, [r7, #11]
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	47a0      	blx	r4
 8006950:	6178      	str	r0, [r7, #20]

  return ret;
 8006952:	697b      	ldr	r3, [r7, #20]
}
 8006954:	4618      	mov	r0, r3
 8006956:	371c      	adds	r7, #28
 8006958:	46bd      	mov	sp, r7
 800695a:	bd90      	pop	{r4, r7, pc}

0800695c <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800695c:	b590      	push	{r4, r7, lr}
 800695e:	b087      	sub	sp, #28
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	607a      	str	r2, [r7, #4]
 8006966:	461a      	mov	r2, r3
 8006968:	460b      	mov	r3, r1
 800696a:	72fb      	strb	r3, [r7, #11]
 800696c:	4613      	mov	r3, r2
 800696e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681c      	ldr	r4, [r3, #0]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6898      	ldr	r0, [r3, #8]
 8006978:	893b      	ldrh	r3, [r7, #8]
 800697a:	7af9      	ldrb	r1, [r7, #11]
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	47a0      	blx	r4
 8006980:	6178      	str	r0, [r7, #20]

  return ret;
 8006982:	697b      	ldr	r3, [r7, #20]
}
 8006984:	4618      	mov	r0, r3
 8006986:	371c      	adds	r7, #28
 8006988:	46bd      	mov	sp, r7
 800698a:	bd90      	pop	{r4, r7, pc}

0800698c <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	ee07 3a90 	vmov	s15, r3
 800699a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800699e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80069b8 <lps22hh_from_lsb_to_hpa+0x2c>
 80069a2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80069a6:	eef0 7a66 	vmov.f32	s15, s13
}
 80069aa:	eeb0 0a67 	vmov.f32	s0, s15
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	49800000 	.word	0x49800000

080069bc <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	4603      	mov	r3, r0
 80069c4:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 80069c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069ca:	ee07 3a90 	vmov	s15, r3
 80069ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069d2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80069ec <lps22hh_from_lsb_to_celsius+0x30>
 80069d6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80069da:	eef0 7a66 	vmov.f32	s15, s13
}
 80069de:	eeb0 0a67 	vmov.f32	s0, s15
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr
 80069ec:	42c80000 	.word	0x42c80000

080069f0 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	460b      	mov	r3, r1
 80069fa:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80069fc:	f107 0208 	add.w	r2, r7, #8
 8006a00:	2301      	movs	r3, #1
 8006a02:	2110      	movs	r1, #16
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f7ff ff91 	bl	800692c <lps22hh_read_reg>
 8006a0a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10f      	bne.n	8006a32 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8006a12:	78fb      	ldrb	r3, [r7, #3]
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	b2da      	uxtb	r2, r3
 8006a1a:	7a3b      	ldrb	r3, [r7, #8]
 8006a1c:	f362 0341 	bfi	r3, r2, #1, #1
 8006a20:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006a22:	f107 0208 	add.w	r2, r7, #8
 8006a26:	2301      	movs	r3, #1
 8006a28:	2110      	movs	r1, #16
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f7ff ff96 	bl	800695c <lps22hh_write_reg>
 8006a30:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006a32:	68fb      	ldr	r3, [r7, #12]
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	460b      	mov	r3, r1
 8006a46:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8006a48:	f107 0210 	add.w	r2, r7, #16
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	2110      	movs	r1, #16
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f7ff ff6b 	bl	800692c <lps22hh_read_reg>
 8006a56:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d107      	bne.n	8006a6e <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8006a5e:	f107 020c 	add.w	r2, r7, #12
 8006a62:	2301      	movs	r3, #1
 8006a64:	2111      	movs	r1, #17
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7ff ff60 	bl	800692c <lps22hh_read_reg>
 8006a6c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d10f      	bne.n	8006a94 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8006a74:	78fb      	ldrb	r3, [r7, #3]
 8006a76:	f003 0307 	and.w	r3, r3, #7
 8006a7a:	b2da      	uxtb	r2, r3
 8006a7c:	7c3b      	ldrb	r3, [r7, #16]
 8006a7e:	f362 1306 	bfi	r3, r2, #4, #3
 8006a82:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8006a84:	f107 0210 	add.w	r2, r7, #16
 8006a88:	2301      	movs	r3, #1
 8006a8a:	2110      	movs	r1, #16
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f7ff ff65 	bl	800695c <lps22hh_write_reg>
 8006a92:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d119      	bne.n	8006ace <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8006a9a:	78fb      	ldrb	r3, [r7, #3]
 8006a9c:	091b      	lsrs	r3, r3, #4
 8006a9e:	f003 0301 	and.w	r3, r3, #1
 8006aa2:	b2da      	uxtb	r2, r3
 8006aa4:	7b3b      	ldrb	r3, [r7, #12]
 8006aa6:	f362 0341 	bfi	r3, r2, #1, #1
 8006aaa:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8006aac:	78fb      	ldrb	r3, [r7, #3]
 8006aae:	08db      	lsrs	r3, r3, #3
 8006ab0:	f003 0301 	and.w	r3, r3, #1
 8006ab4:	b2da      	uxtb	r2, r3
 8006ab6:	7b3b      	ldrb	r3, [r7, #12]
 8006ab8:	f362 0300 	bfi	r3, r2, #0, #1
 8006abc:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8006abe:	f107 020c 	add.w	r2, r7, #12
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	2111      	movs	r1, #17
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7ff ff48 	bl	800695c <lps22hh_write_reg>
 8006acc:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8006ace:	697b      	ldr	r3, [r7, #20]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3718      	adds	r7, #24
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <lps22hh_temp_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8006ae2:	f107 0208 	add.w	r2, r7, #8
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	2127      	movs	r1, #39	; 0x27
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f7ff ff1e 	bl	800692c <lps22hh_read_reg>
 8006af0:	60f8      	str	r0, [r7, #12]
  *val = reg.t_da;
 8006af2:	7a3b      	ldrb	r3, [r7, #8]
 8006af4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	461a      	mov	r2, r3
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	701a      	strb	r2, [r3, #0]

  return ret;
 8006b00:	68fb      	ldr	r3, [r7, #12]
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b084      	sub	sp, #16
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
 8006b12:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8006b14:	f107 0208 	add.w	r2, r7, #8
 8006b18:	2303      	movs	r3, #3
 8006b1a:	2128      	movs	r1, #40	; 0x28
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f7ff ff05 	bl	800692c <lps22hh_read_reg>
 8006b22:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8006b24:	7abb      	ldrb	r3, [r7, #10]
 8006b26:	461a      	mov	r2, r3
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	021b      	lsls	r3, r3, #8
 8006b32:	7a7a      	ldrb	r2, [r7, #9]
 8006b34:	441a      	add	r2, r3
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	021b      	lsls	r3, r3, #8
 8006b40:	7a3a      	ldrb	r2, [r7, #8]
 8006b42:	441a      	add	r2, r3
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	021a      	lsls	r2, r3, #8
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	601a      	str	r2, [r3, #0]

  return ret;
 8006b52:	68fb      	ldr	r3, [r7, #12]
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8006b66:	f107 0208 	add.w	r2, r7, #8
 8006b6a:	2302      	movs	r3, #2
 8006b6c:	212b      	movs	r1, #43	; 0x2b
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f7ff fedc 	bl	800692c <lps22hh_read_reg>
 8006b74:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8006b76:	7a7b      	ldrb	r3, [r7, #9]
 8006b78:	b21a      	sxth	r2, r3
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	021b      	lsls	r3, r3, #8
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	7a3b      	ldrb	r3, [r7, #8]
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	4413      	add	r3, r2
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	b21a      	sxth	r2, r3
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	801a      	strh	r2, [r3, #0]

  return ret;
 8006b98:	68fb      	ldr	r3, [r7, #12]
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b084      	sub	sp, #16
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
 8006baa:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8006bac:	2301      	movs	r3, #1
 8006bae:	683a      	ldr	r2, [r7, #0]
 8006bb0:	210f      	movs	r1, #15
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f7ff feba 	bl	800692c <lps22hh_read_reg>
 8006bb8:	60f8      	str	r0, [r7, #12]

  return ret;
 8006bba:	68fb      	ldr	r3, [r7, #12]
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	460b      	mov	r3, r1
 8006bce:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8006bd0:	f107 0208 	add.w	r2, r7, #8
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	2111      	movs	r1, #17
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f7ff fea7 	bl	800692c <lps22hh_read_reg>
 8006bde:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10f      	bne.n	8006c06 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8006be6:	78fb      	ldrb	r3, [r7, #3]
 8006be8:	f003 0301 	and.w	r3, r3, #1
 8006bec:	b2da      	uxtb	r2, r3
 8006bee:	7a3b      	ldrb	r3, [r7, #8]
 8006bf0:	f362 0382 	bfi	r3, r2, #2, #1
 8006bf4:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8006bf6:	f107 0208 	add.w	r2, r7, #8
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	2111      	movs	r1, #17
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f7ff feac 	bl	800695c <lps22hh_write_reg>
 8006c04:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006c06:	68fb      	ldr	r3, [r7, #12]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8006c1a:	f107 0208 	add.w	r2, r7, #8
 8006c1e:	2301      	movs	r3, #1
 8006c20:	2111      	movs	r1, #17
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f7ff fe82 	bl	800692c <lps22hh_read_reg>
 8006c28:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8006c2a:	7a3b      	ldrb	r3, [r7, #8]
 8006c2c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	461a      	mov	r2, r3
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	701a      	strb	r2, [r3, #0]

  return ret;
 8006c38:	68fb      	ldr	r3, [r7, #12]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3710      	adds	r7, #16
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8006c42:	b590      	push	{r4, r7, lr}
 8006c44:	b087      	sub	sp, #28
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	60f8      	str	r0, [r7, #12]
 8006c4a:	607a      	str	r2, [r7, #4]
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	460b      	mov	r3, r1
 8006c50:	72fb      	strb	r3, [r7, #11]
 8006c52:	4613      	mov	r3, r2
 8006c54:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	685c      	ldr	r4, [r3, #4]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6898      	ldr	r0, [r3, #8]
 8006c5e:	893b      	ldrh	r3, [r7, #8]
 8006c60:	7af9      	ldrb	r1, [r7, #11]
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	47a0      	blx	r4
 8006c66:	6178      	str	r0, [r7, #20]

  return ret;
 8006c68:	697b      	ldr	r3, [r7, #20]
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	371c      	adds	r7, #28
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd90      	pop	{r4, r7, pc}

08006c72 <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8006c72:	b590      	push	{r4, r7, lr}
 8006c74:	b087      	sub	sp, #28
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	60f8      	str	r0, [r7, #12]
 8006c7a:	607a      	str	r2, [r7, #4]
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	460b      	mov	r3, r1
 8006c80:	72fb      	strb	r3, [r7, #11]
 8006c82:	4613      	mov	r3, r2
 8006c84:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681c      	ldr	r4, [r3, #0]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6898      	ldr	r0, [r3, #8]
 8006c8e:	893b      	ldrh	r3, [r7, #8]
 8006c90:	7af9      	ldrb	r1, [r7, #11]
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	47a0      	blx	r4
 8006c96:	6178      	str	r0, [r7, #20]

  return ret;
 8006c98:	697b      	ldr	r3, [r7, #20]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	371c      	adds	r7, #28
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd90      	pop	{r4, r7, pc}
	...

08006ca4 <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	4603      	mov	r3, r0
 8006cac:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8006cae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006cb2:	ee07 3a90 	vmov	s15, r3
 8006cb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006cba:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8006cd0 <lsm6dsr_from_fs2g_to_mg+0x2c>
 8006cbe:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr
 8006cd0:	3d79db23 	.word	0x3d79db23

08006cd4 <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	4603      	mov	r3, r0
 8006cdc:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8006cde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ce2:	ee07 3a90 	vmov	s15, r3
 8006ce6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006cea:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8006d00 <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 8006cee:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006cf2:	eeb0 0a67 	vmov.f32	s0, s15
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr
 8006d00:	428c0000 	.word	0x428c0000

08006d04 <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 8006d0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d12:	ee07 3a90 	vmov	s15, r3
 8006d16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d1a:	eddf 6a07 	vldr	s13, [pc, #28]	; 8006d38 <lsm6dsr_from_lsb_to_celsius+0x34>
 8006d1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006d22:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8006d26:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8006d2a:	eeb0 0a67 	vmov.f32	s0, s15
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	43800000 	.word	0x43800000

08006d3c <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	460b      	mov	r3, r1
 8006d46:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006d48:	f107 0208 	add.w	r2, r7, #8
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	2110      	movs	r1, #16
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f7ff ff76 	bl	8006c42 <lsm6dsr_read_reg>
 8006d56:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d10f      	bne.n	8006d7e <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8006d5e:	78fb      	ldrb	r3, [r7, #3]
 8006d60:	f003 0303 	and.w	r3, r3, #3
 8006d64:	b2da      	uxtb	r2, r3
 8006d66:	7a3b      	ldrb	r3, [r7, #8]
 8006d68:	f362 0383 	bfi	r3, r2, #2, #2
 8006d6c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8006d6e:	f107 0208 	add.w	r2, r7, #8
 8006d72:	2301      	movs	r3, #1
 8006d74:	2110      	movs	r1, #16
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7ff ff7b 	bl	8006c72 <lsm6dsr_write_reg>
 8006d7c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b086      	sub	sp, #24
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	460b      	mov	r3, r1
 8006d92:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 8006d94:	78fb      	ldrb	r3, [r7, #3]
 8006d96:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8006d98:	f107 030c 	add.w	r3, r7, #12
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fbb0 	bl	8007504 <lsm6dsr_fsm_enable_get>
 8006da4:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f040 80c4 	bne.w	8006f36 <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006dae:	7b3b      	ldrb	r3, [r7, #12]
 8006db0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006db4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006db6:	7b3b      	ldrb	r3, [r7, #12]
 8006db8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006dbc:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006dc2:	7b3b      	ldrb	r3, [r7, #12]
 8006dc4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006dc8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006dce:	7b3b      	ldrb	r3, [r7, #12]
 8006dd0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006dd4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006dda:	7b3b      	ldrb	r3, [r7, #12]
 8006ddc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006de0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006de2:	4313      	orrs	r3, r2
 8006de4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006de6:	7b3b      	ldrb	r3, [r7, #12]
 8006de8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006dec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006dee:	4313      	orrs	r3, r2
 8006df0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006df2:	7b3b      	ldrb	r3, [r7, #12]
 8006df4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006df8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006dfe:	7b3b      	ldrb	r3, [r7, #12]
 8006e00:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006e04:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006e06:	4313      	orrs	r3, r2
 8006e08:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006e0a:	7b7b      	ldrb	r3, [r7, #13]
 8006e0c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006e10:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006e12:	4313      	orrs	r3, r2
 8006e14:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006e16:	7b7b      	ldrb	r3, [r7, #13]
 8006e18:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006e1c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006e22:	7b7b      	ldrb	r3, [r7, #13]
 8006e24:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006e28:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006e2e:	7b7b      	ldrb	r3, [r7, #13]
 8006e30:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006e34:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006e36:	4313      	orrs	r3, r2
 8006e38:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006e3a:	7b7b      	ldrb	r3, [r7, #13]
 8006e3c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006e40:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006e42:	4313      	orrs	r3, r2
 8006e44:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006e46:	7b7b      	ldrb	r3, [r7, #13]
 8006e48:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006e4c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006e52:	7b7b      	ldrb	r3, [r7, #13]
 8006e54:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006e58:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8006e5e:	7b7b      	ldrb	r3, [r7, #13]
 8006e60:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006e64:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006e66:	4313      	orrs	r3, r2
 8006e68:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d163      	bne.n	8006f36 <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8006e6e:	f107 030b 	add.w	r3, r7, #11
 8006e72:	4619      	mov	r1, r3
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 fb71 	bl	800755c <lsm6dsr_fsm_data_rate_get>
 8006e7a:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d159      	bne.n	8006f36 <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8006e82:	7afb      	ldrb	r3, [r7, #11]
 8006e84:	2b03      	cmp	r3, #3
 8006e86:	d853      	bhi.n	8006f30 <lsm6dsr_xl_data_rate_set+0x1a8>
 8006e88:	a201      	add	r2, pc, #4	; (adr r2, 8006e90 <lsm6dsr_xl_data_rate_set+0x108>)
 8006e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e8e:	bf00      	nop
 8006e90:	08006ea1 	.word	0x08006ea1
 8006e94:	08006eb3 	.word	0x08006eb3
 8006e98:	08006ed1 	.word	0x08006ed1
 8006e9c:	08006efb 	.word	0x08006efb
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 8006ea0:	78fb      	ldrb	r3, [r7, #3]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d102      	bne.n	8006eac <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006eaa:	e045      	b.n	8006f38 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006eac:	78fb      	ldrb	r3, [r7, #3]
 8006eae:	75fb      	strb	r3, [r7, #23]
            break;
 8006eb0:	e042      	b.n	8006f38 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8006eb2:	78fb      	ldrb	r3, [r7, #3]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d102      	bne.n	8006ebe <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8006eb8:	2302      	movs	r3, #2
 8006eba:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006ebc:	e03c      	b.n	8006f38 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8006ebe:	78fb      	ldrb	r3, [r7, #3]
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d102      	bne.n	8006eca <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	75fb      	strb	r3, [r7, #23]
            break;
 8006ec8:	e036      	b.n	8006f38 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006eca:	78fb      	ldrb	r3, [r7, #3]
 8006ecc:	75fb      	strb	r3, [r7, #23]
            break;
 8006ece:	e033      	b.n	8006f38 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8006ed0:	78fb      	ldrb	r3, [r7, #3]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d102      	bne.n	8006edc <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006eda:	e02d      	b.n	8006f38 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8006edc:	78fb      	ldrb	r3, [r7, #3]
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d102      	bne.n	8006ee8 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	75fb      	strb	r3, [r7, #23]
            break;
 8006ee6:	e027      	b.n	8006f38 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8006ee8:	78fb      	ldrb	r3, [r7, #3]
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d102      	bne.n	8006ef4 <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	75fb      	strb	r3, [r7, #23]
            break;
 8006ef2:	e021      	b.n	8006f38 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006ef4:	78fb      	ldrb	r3, [r7, #3]
 8006ef6:	75fb      	strb	r3, [r7, #23]
            break;
 8006ef8:	e01e      	b.n	8006f38 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8006efa:	78fb      	ldrb	r3, [r7, #3]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d102      	bne.n	8006f06 <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8006f00:	2304      	movs	r3, #4
 8006f02:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006f04:	e018      	b.n	8006f38 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8006f06:	78fb      	ldrb	r3, [r7, #3]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d102      	bne.n	8006f12 <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8006f0c:	2304      	movs	r3, #4
 8006f0e:	75fb      	strb	r3, [r7, #23]
            break;
 8006f10:	e012      	b.n	8006f38 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8006f12:	78fb      	ldrb	r3, [r7, #3]
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d102      	bne.n	8006f1e <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8006f18:	2304      	movs	r3, #4
 8006f1a:	75fb      	strb	r3, [r7, #23]
            break;
 8006f1c:	e00c      	b.n	8006f38 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 8006f1e:	78fb      	ldrb	r3, [r7, #3]
 8006f20:	2b03      	cmp	r3, #3
 8006f22:	d102      	bne.n	8006f2a <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8006f24:	2304      	movs	r3, #4
 8006f26:	75fb      	strb	r3, [r7, #23]
            break;
 8006f28:	e006      	b.n	8006f38 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006f2a:	78fb      	ldrb	r3, [r7, #3]
 8006f2c:	75fb      	strb	r3, [r7, #23]
            break;
 8006f2e:	e003      	b.n	8006f38 <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8006f30:	78fb      	ldrb	r3, [r7, #3]
 8006f32:	75fb      	strb	r3, [r7, #23]
            break;
 8006f34:	e000      	b.n	8006f38 <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 8006f36:	bf00      	nop
    }
  }

  if (ret == 0)
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d107      	bne.n	8006f4e <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006f3e:	f107 0208 	add.w	r2, r7, #8
 8006f42:	2301      	movs	r3, #1
 8006f44:	2110      	movs	r1, #16
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f7ff fe7b 	bl	8006c42 <lsm6dsr_read_reg>
 8006f4c:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d10f      	bne.n	8006f74 <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8006f54:	7dfb      	ldrb	r3, [r7, #23]
 8006f56:	f003 030f 	and.w	r3, r3, #15
 8006f5a:	b2da      	uxtb	r2, r3
 8006f5c:	7a3b      	ldrb	r3, [r7, #8]
 8006f5e:	f362 1307 	bfi	r3, r2, #4, #4
 8006f62:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8006f64:	f107 0208 	add.w	r2, r7, #8
 8006f68:	2301      	movs	r3, #1
 8006f6a:	2110      	movs	r1, #16
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f7ff fe80 	bl	8006c72 <lsm6dsr_write_reg>
 8006f72:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8006f74:	693b      	ldr	r3, [r7, #16]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3718      	adds	r7, #24
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop

08006f80 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	460b      	mov	r3, r1
 8006f8a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006f8c:	f107 0208 	add.w	r2, r7, #8
 8006f90:	2301      	movs	r3, #1
 8006f92:	2111      	movs	r1, #17
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f7ff fe54 	bl	8006c42 <lsm6dsr_read_reg>
 8006f9a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10f      	bne.n	8006fc2 <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8006fa2:	78fb      	ldrb	r3, [r7, #3]
 8006fa4:	f003 030f 	and.w	r3, r3, #15
 8006fa8:	b2da      	uxtb	r2, r3
 8006faa:	7a3b      	ldrb	r3, [r7, #8]
 8006fac:	f362 0303 	bfi	r3, r2, #0, #4
 8006fb0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006fb2:	f107 0208 	add.w	r2, r7, #8
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	2111      	movs	r1, #17
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7ff fe59 	bl	8006c72 <lsm6dsr_write_reg>
 8006fc0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3710      	adds	r7, #16
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 8006fd8:	78fb      	ldrb	r3, [r7, #3]
 8006fda:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8006fdc:	f107 030c 	add.w	r3, r7, #12
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fa8e 	bl	8007504 <lsm6dsr_fsm_enable_get>
 8006fe8:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f040 80c4 	bne.w	800717a <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006ff2:	7b3b      	ldrb	r3, [r7, #12]
 8006ff4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006ff8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006ffa:	7b3b      	ldrb	r3, [r7, #12]
 8006ffc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007000:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007002:	4313      	orrs	r3, r2
 8007004:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8007006:	7b3b      	ldrb	r3, [r7, #12]
 8007008:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800700c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800700e:	4313      	orrs	r3, r2
 8007010:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8007012:	7b3b      	ldrb	r3, [r7, #12]
 8007014:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007018:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800701a:	4313      	orrs	r3, r2
 800701c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800701e:	7b3b      	ldrb	r3, [r7, #12]
 8007020:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007024:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8007026:	4313      	orrs	r3, r2
 8007028:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800702a:	7b3b      	ldrb	r3, [r7, #12]
 800702c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007030:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8007032:	4313      	orrs	r3, r2
 8007034:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8007036:	7b3b      	ldrb	r3, [r7, #12]
 8007038:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800703c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800703e:	4313      	orrs	r3, r2
 8007040:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8007042:	7b3b      	ldrb	r3, [r7, #12]
 8007044:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007048:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800704a:	4313      	orrs	r3, r2
 800704c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800704e:	7b7b      	ldrb	r3, [r7, #13]
 8007050:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007054:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8007056:	4313      	orrs	r3, r2
 8007058:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800705a:	7b7b      	ldrb	r3, [r7, #13]
 800705c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007060:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8007062:	4313      	orrs	r3, r2
 8007064:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8007066:	7b7b      	ldrb	r3, [r7, #13]
 8007068:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800706c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800706e:	4313      	orrs	r3, r2
 8007070:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8007072:	7b7b      	ldrb	r3, [r7, #13]
 8007074:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007078:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800707a:	4313      	orrs	r3, r2
 800707c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800707e:	7b7b      	ldrb	r3, [r7, #13]
 8007080:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007084:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8007086:	4313      	orrs	r3, r2
 8007088:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800708a:	7b7b      	ldrb	r3, [r7, #13]
 800708c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007090:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8007092:	4313      	orrs	r3, r2
 8007094:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8007096:	7b7b      	ldrb	r3, [r7, #13]
 8007098:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800709c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800709e:	4313      	orrs	r3, r2
 80070a0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80070a2:	7b7b      	ldrb	r3, [r7, #13]
 80070a4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80070a8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80070aa:	4313      	orrs	r3, r2
 80070ac:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d163      	bne.n	800717a <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 80070b2:	f107 030b 	add.w	r3, r7, #11
 80070b6:	4619      	mov	r1, r3
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 fa4f 	bl	800755c <lsm6dsr_fsm_data_rate_get>
 80070be:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d159      	bne.n	800717a <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80070c6:	7afb      	ldrb	r3, [r7, #11]
 80070c8:	2b03      	cmp	r3, #3
 80070ca:	d853      	bhi.n	8007174 <lsm6dsr_gy_data_rate_set+0x1a8>
 80070cc:	a201      	add	r2, pc, #4	; (adr r2, 80070d4 <lsm6dsr_gy_data_rate_set+0x108>)
 80070ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d2:	bf00      	nop
 80070d4:	080070e5 	.word	0x080070e5
 80070d8:	080070f7 	.word	0x080070f7
 80070dc:	08007115 	.word	0x08007115
 80070e0:	0800713f 	.word	0x0800713f
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 80070e4:	78fb      	ldrb	r3, [r7, #3]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d102      	bne.n	80070f0 <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 80070ea:	2301      	movs	r3, #1
 80070ec:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80070ee:	e045      	b.n	800717c <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80070f0:	78fb      	ldrb	r3, [r7, #3]
 80070f2:	75fb      	strb	r3, [r7, #23]
            break;
 80070f4:	e042      	b.n	800717c <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80070f6:	78fb      	ldrb	r3, [r7, #3]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d102      	bne.n	8007102 <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 80070fc:	2302      	movs	r3, #2
 80070fe:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8007100:	e03c      	b.n	800717c <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8007102:	78fb      	ldrb	r3, [r7, #3]
 8007104:	2b01      	cmp	r3, #1
 8007106:	d102      	bne.n	800710e <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8007108:	2302      	movs	r3, #2
 800710a:	75fb      	strb	r3, [r7, #23]
            break;
 800710c:	e036      	b.n	800717c <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800710e:	78fb      	ldrb	r3, [r7, #3]
 8007110:	75fb      	strb	r3, [r7, #23]
            break;
 8007112:	e033      	b.n	800717c <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8007114:	78fb      	ldrb	r3, [r7, #3]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d102      	bne.n	8007120 <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800711a:	2303      	movs	r3, #3
 800711c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800711e:	e02d      	b.n	800717c <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8007120:	78fb      	ldrb	r3, [r7, #3]
 8007122:	2b01      	cmp	r3, #1
 8007124:	d102      	bne.n	800712c <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8007126:	2303      	movs	r3, #3
 8007128:	75fb      	strb	r3, [r7, #23]
            break;
 800712a:	e027      	b.n	800717c <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 800712c:	78fb      	ldrb	r3, [r7, #3]
 800712e:	2b02      	cmp	r3, #2
 8007130:	d102      	bne.n	8007138 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8007132:	2303      	movs	r3, #3
 8007134:	75fb      	strb	r3, [r7, #23]
            break;
 8007136:	e021      	b.n	800717c <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8007138:	78fb      	ldrb	r3, [r7, #3]
 800713a:	75fb      	strb	r3, [r7, #23]
            break;
 800713c:	e01e      	b.n	800717c <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 800713e:	78fb      	ldrb	r3, [r7, #3]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d102      	bne.n	800714a <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8007144:	2304      	movs	r3, #4
 8007146:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8007148:	e018      	b.n	800717c <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 800714a:	78fb      	ldrb	r3, [r7, #3]
 800714c:	2b01      	cmp	r3, #1
 800714e:	d102      	bne.n	8007156 <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8007150:	2304      	movs	r3, #4
 8007152:	75fb      	strb	r3, [r7, #23]
            break;
 8007154:	e012      	b.n	800717c <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8007156:	78fb      	ldrb	r3, [r7, #3]
 8007158:	2b02      	cmp	r3, #2
 800715a:	d102      	bne.n	8007162 <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 800715c:	2304      	movs	r3, #4
 800715e:	75fb      	strb	r3, [r7, #23]
            break;
 8007160:	e00c      	b.n	800717c <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 8007162:	78fb      	ldrb	r3, [r7, #3]
 8007164:	2b03      	cmp	r3, #3
 8007166:	d102      	bne.n	800716e <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8007168:	2304      	movs	r3, #4
 800716a:	75fb      	strb	r3, [r7, #23]
            break;
 800716c:	e006      	b.n	800717c <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800716e:	78fb      	ldrb	r3, [r7, #3]
 8007170:	75fb      	strb	r3, [r7, #23]
            break;
 8007172:	e003      	b.n	800717c <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8007174:	78fb      	ldrb	r3, [r7, #3]
 8007176:	75fb      	strb	r3, [r7, #23]
            break;
 8007178:	e000      	b.n	800717c <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 800717a:	bf00      	nop
    }
  }

  if (ret == 0)
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d107      	bne.n	8007192 <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007182:	f107 0208 	add.w	r2, r7, #8
 8007186:	2301      	movs	r3, #1
 8007188:	2111      	movs	r1, #17
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f7ff fd59 	bl	8006c42 <lsm6dsr_read_reg>
 8007190:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d10f      	bne.n	80071b8 <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8007198:	7dfb      	ldrb	r3, [r7, #23]
 800719a:	f003 030f 	and.w	r3, r3, #15
 800719e:	b2da      	uxtb	r2, r3
 80071a0:	7a3b      	ldrb	r3, [r7, #8]
 80071a2:	f362 1307 	bfi	r3, r2, #4, #4
 80071a6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80071a8:	f107 0208 	add.w	r2, r7, #8
 80071ac:	2301      	movs	r3, #1
 80071ae:	2111      	movs	r1, #17
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f7ff fd5e 	bl	8006c72 <lsm6dsr_write_reg>
 80071b6:	6138      	str	r0, [r7, #16]
  }

  return ret;
 80071b8:	693b      	ldr	r3, [r7, #16]
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3718      	adds	r7, #24
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop

080071c4 <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	460b      	mov	r3, r1
 80071ce:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80071d0:	f107 0208 	add.w	r2, r7, #8
 80071d4:	2301      	movs	r3, #1
 80071d6:	2112      	movs	r1, #18
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f7ff fd32 	bl	8006c42 <lsm6dsr_read_reg>
 80071de:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10f      	bne.n	8007206 <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 80071e6:	78fb      	ldrb	r3, [r7, #3]
 80071e8:	f003 0301 	and.w	r3, r3, #1
 80071ec:	b2da      	uxtb	r2, r3
 80071ee:	7a3b      	ldrb	r3, [r7, #8]
 80071f0:	f362 1386 	bfi	r3, r2, #6, #1
 80071f4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80071f6:	f107 0208 	add.w	r2, r7, #8
 80071fa:	2301      	movs	r3, #1
 80071fc:	2112      	movs	r1, #18
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f7ff fd37 	bl	8006c72 <lsm6dsr_write_reg>
 8007204:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007206:	68fb      	ldr	r3, [r7, #12]
}
 8007208:	4618      	mov	r0, r3
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 800721a:	f107 0208 	add.w	r2, r7, #8
 800721e:	2301      	movs	r3, #1
 8007220:	211e      	movs	r1, #30
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f7ff fd0d 	bl	8006c42 <lsm6dsr_read_reg>
 8007228:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 800722a:	7a3b      	ldrb	r3, [r7, #8]
 800722c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007230:	b2db      	uxtb	r3, r3
 8007232:	461a      	mov	r2, r3
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	701a      	strb	r2, [r3, #0]

  return ret;
 8007238:	68fb      	ldr	r3, [r7, #12]
}
 800723a:	4618      	mov	r0, r3
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b084      	sub	sp, #16
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
 800724a:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 800724c:	f107 0208 	add.w	r2, r7, #8
 8007250:	2301      	movs	r3, #1
 8007252:	211e      	movs	r1, #30
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f7ff fcf4 	bl	8006c42 <lsm6dsr_read_reg>
 800725a:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 800725c:	7a3b      	ldrb	r3, [r7, #8]
 800725e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007262:	b2db      	uxtb	r3, r3
 8007264:	461a      	mov	r2, r3
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	701a      	strb	r2, [r3, #0]

  return ret;
 800726a:	68fb      	ldr	r3, [r7, #12]
}
 800726c:	4618      	mov	r0, r3
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 800727e:	f107 0208 	add.w	r2, r7, #8
 8007282:	2301      	movs	r3, #1
 8007284:	211e      	movs	r1, #30
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f7ff fcdb 	bl	8006c42 <lsm6dsr_read_reg>
 800728c:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 800728e:	7a3b      	ldrb	r3, [r7, #8]
 8007290:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007294:	b2db      	uxtb	r3, r3
 8007296:	461a      	mov	r2, r3
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	701a      	strb	r2, [r3, #0]

  return ret;
 800729c:	68fb      	ldr	r3, [r7, #12]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b084      	sub	sp, #16
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
 80072ae:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 80072b0:	f107 0208 	add.w	r2, r7, #8
 80072b4:	2302      	movs	r3, #2
 80072b6:	2120      	movs	r1, #32
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f7ff fcc2 	bl	8006c42 <lsm6dsr_read_reg>
 80072be:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 80072c0:	7a7b      	ldrb	r3, [r7, #9]
 80072c2:	b21a      	sxth	r2, r3
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	021b      	lsls	r3, r3, #8
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	7a3b      	ldrb	r3, [r7, #8]
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	4413      	add	r3, r2
 80072da:	b29b      	uxth	r3, r3
 80072dc:	b21a      	sxth	r2, r3
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	801a      	strh	r2, [r3, #0]

  return ret;
 80072e2:	68fb      	ldr	r3, [r7, #12]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3710      	adds	r7, #16
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b086      	sub	sp, #24
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 80072f6:	f107 020c 	add.w	r2, r7, #12
 80072fa:	2306      	movs	r3, #6
 80072fc:	2122      	movs	r1, #34	; 0x22
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f7ff fc9f 	bl	8006c42 <lsm6dsr_read_reg>
 8007304:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007306:	7b7b      	ldrb	r3, [r7, #13]
 8007308:	b21a      	sxth	r2, r3
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007314:	b29b      	uxth	r3, r3
 8007316:	021b      	lsls	r3, r3, #8
 8007318:	b29a      	uxth	r2, r3
 800731a:	7b3b      	ldrb	r3, [r7, #12]
 800731c:	b29b      	uxth	r3, r3
 800731e:	4413      	add	r3, r2
 8007320:	b29b      	uxth	r3, r3
 8007322:	b21a      	sxth	r2, r3
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007328:	7bfa      	ldrb	r2, [r7, #15]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	3302      	adds	r3, #2
 800732e:	b212      	sxth	r2, r2
 8007330:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	3302      	adds	r3, #2
 8007336:	f9b3 3000 	ldrsh.w	r3, [r3]
 800733a:	b29b      	uxth	r3, r3
 800733c:	021b      	lsls	r3, r3, #8
 800733e:	b29a      	uxth	r2, r3
 8007340:	7bbb      	ldrb	r3, [r7, #14]
 8007342:	b29b      	uxth	r3, r3
 8007344:	4413      	add	r3, r2
 8007346:	b29a      	uxth	r2, r3
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	3302      	adds	r3, #2
 800734c:	b212      	sxth	r2, r2
 800734e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007350:	7c7a      	ldrb	r2, [r7, #17]
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	3304      	adds	r3, #4
 8007356:	b212      	sxth	r2, r2
 8007358:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	3304      	adds	r3, #4
 800735e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007362:	b29b      	uxth	r3, r3
 8007364:	021b      	lsls	r3, r3, #8
 8007366:	b29a      	uxth	r2, r3
 8007368:	7c3b      	ldrb	r3, [r7, #16]
 800736a:	b29b      	uxth	r3, r3
 800736c:	4413      	add	r3, r2
 800736e:	b29a      	uxth	r2, r3
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	3304      	adds	r3, #4
 8007374:	b212      	sxth	r2, r2
 8007376:	801a      	strh	r2, [r3, #0]

  return ret;
 8007378:	697b      	ldr	r3, [r7, #20]
}
 800737a:	4618      	mov	r0, r3
 800737c:	3718      	adds	r7, #24
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b086      	sub	sp, #24
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
 800738a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 800738c:	f107 020c 	add.w	r2, r7, #12
 8007390:	2306      	movs	r3, #6
 8007392:	2128      	movs	r1, #40	; 0x28
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f7ff fc54 	bl	8006c42 <lsm6dsr_read_reg>
 800739a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800739c:	7b7b      	ldrb	r3, [r7, #13]
 800739e:	b21a      	sxth	r2, r3
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	021b      	lsls	r3, r3, #8
 80073ae:	b29a      	uxth	r2, r3
 80073b0:	7b3b      	ldrb	r3, [r7, #12]
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	4413      	add	r3, r2
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	b21a      	sxth	r2, r3
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80073be:	7bfa      	ldrb	r2, [r7, #15]
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	3302      	adds	r3, #2
 80073c4:	b212      	sxth	r2, r2
 80073c6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	3302      	adds	r3, #2
 80073cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	021b      	lsls	r3, r3, #8
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	7bbb      	ldrb	r3, [r7, #14]
 80073d8:	b29b      	uxth	r3, r3
 80073da:	4413      	add	r3, r2
 80073dc:	b29a      	uxth	r2, r3
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	3302      	adds	r3, #2
 80073e2:	b212      	sxth	r2, r2
 80073e4:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80073e6:	7c7a      	ldrb	r2, [r7, #17]
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	3304      	adds	r3, #4
 80073ec:	b212      	sxth	r2, r2
 80073ee:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	3304      	adds	r3, #4
 80073f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	021b      	lsls	r3, r3, #8
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	7c3b      	ldrb	r3, [r7, #16]
 8007400:	b29b      	uxth	r3, r3
 8007402:	4413      	add	r3, r2
 8007404:	b29a      	uxth	r2, r3
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	3304      	adds	r3, #4
 800740a:	b212      	sxth	r2, r2
 800740c:	801a      	strh	r2, [r3, #0]

  return ret;
 800740e:	697b      	ldr	r3, [r7, #20]
}
 8007410:	4618      	mov	r0, r3
 8007412:	3718      	adds	r7, #24
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	460b      	mov	r3, r1
 8007422:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8007424:	f107 0208 	add.w	r2, r7, #8
 8007428:	2301      	movs	r3, #1
 800742a:	2101      	movs	r1, #1
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f7ff fc08 	bl	8006c42 <lsm6dsr_read_reg>
 8007432:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10f      	bne.n	800745a <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 800743a:	78fb      	ldrb	r3, [r7, #3]
 800743c:	f003 0303 	and.w	r3, r3, #3
 8007440:	b2da      	uxtb	r2, r3
 8007442:	7a3b      	ldrb	r3, [r7, #8]
 8007444:	f362 1387 	bfi	r3, r2, #6, #2
 8007448:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 800744a:	f107 0208 	add.w	r2, r7, #8
 800744e:	2301      	movs	r3, #1
 8007450:	2101      	movs	r1, #1
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7ff fc0d 	bl	8006c72 <lsm6dsr_write_reg>
 8007458:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 800745a:	68fb      	ldr	r3, [r7, #12]
}
 800745c:	4618      	mov	r0, r3
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 800746e:	2301      	movs	r3, #1
 8007470:	683a      	ldr	r2, [r7, #0]
 8007472:	210f      	movs	r1, #15
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f7ff fbe4 	bl	8006c42 <lsm6dsr_read_reg>
 800747a:	60f8      	str	r0, [r7, #12]

  return ret;
 800747c:	68fb      	ldr	r3, [r7, #12]
}
 800747e:	4618      	mov	r0, r3
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b084      	sub	sp, #16
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
 800748e:	460b      	mov	r3, r1
 8007490:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007492:	f107 0208 	add.w	r2, r7, #8
 8007496:	2301      	movs	r3, #1
 8007498:	2112      	movs	r1, #18
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f7ff fbd1 	bl	8006c42 <lsm6dsr_read_reg>
 80074a0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d10f      	bne.n	80074c8 <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 80074a8:	78fb      	ldrb	r3, [r7, #3]
 80074aa:	f003 0301 	and.w	r3, r3, #1
 80074ae:	b2da      	uxtb	r2, r3
 80074b0:	7a3b      	ldrb	r3, [r7, #8]
 80074b2:	f362 0300 	bfi	r3, r2, #0, #1
 80074b6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80074b8:	f107 0208 	add.w	r2, r7, #8
 80074bc:	2301      	movs	r3, #1
 80074be:	2112      	movs	r1, #18
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f7ff fbd6 	bl	8006c72 <lsm6dsr_write_reg>
 80074c6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80074c8:	68fb      	ldr	r3, [r7, #12]
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b084      	sub	sp, #16
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
 80074da:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80074dc:	f107 0208 	add.w	r2, r7, #8
 80074e0:	2301      	movs	r3, #1
 80074e2:	2112      	movs	r1, #18
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f7ff fbac 	bl	8006c42 <lsm6dsr_read_reg>
 80074ea:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 80074ec:	7a3b      	ldrb	r3, [r7, #8]
 80074ee:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	461a      	mov	r2, r3
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	701a      	strb	r2, [r3, #0]

  return ret;
 80074fa:	68fb      	ldr	r3, [r7, #12]
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800750e:	2102      	movs	r1, #2
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f7ff ff81 	bl	8007418 <lsm6dsr_mem_bank_set>
 8007516:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d106      	bne.n	800752c <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 800751e:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 8007520:	2301      	movs	r3, #1
 8007522:	2146      	movs	r1, #70	; 0x46
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f7ff fb8c 	bl	8006c42 <lsm6dsr_read_reg>
 800752a:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d107      	bne.n	8007542 <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 8007536:	2301      	movs	r3, #1
 8007538:	2147      	movs	r1, #71	; 0x47
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f7ff fb81 	bl	8006c42 <lsm6dsr_read_reg>
 8007540:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d104      	bne.n	8007552 <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8007548:	2100      	movs	r1, #0
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f7ff ff64 	bl	8007418 <lsm6dsr_mem_bank_set>
 8007550:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007552:	68fb      	ldr	r3, [r7, #12]
}
 8007554:	4618      	mov	r0, r3
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8007566:	2102      	movs	r1, #2
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f7ff ff55 	bl	8007418 <lsm6dsr_mem_bank_set>
 800756e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d107      	bne.n	8007586 <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 8007576:	f107 0208 	add.w	r2, r7, #8
 800757a:	2301      	movs	r3, #1
 800757c:	215f      	movs	r1, #95	; 0x5f
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f7ff fb5f 	bl	8006c42 <lsm6dsr_read_reg>
 8007584:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d104      	bne.n	8007596 <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 800758c:	2100      	movs	r1, #0
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f7ff ff42 	bl	8007418 <lsm6dsr_mem_bank_set>
 8007594:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 8007596:	7a3b      	ldrb	r3, [r7, #8]
 8007598:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b03      	cmp	r3, #3
 80075a0:	d81a      	bhi.n	80075d8 <lsm6dsr_fsm_data_rate_get+0x7c>
 80075a2:	a201      	add	r2, pc, #4	; (adr r2, 80075a8 <lsm6dsr_fsm_data_rate_get+0x4c>)
 80075a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a8:	080075b9 	.word	0x080075b9
 80075ac:	080075c1 	.word	0x080075c1
 80075b0:	080075c9 	.word	0x080075c9
 80075b4:	080075d1 	.word	0x080075d1
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	2200      	movs	r2, #0
 80075bc:	701a      	strb	r2, [r3, #0]
      break;
 80075be:	e00f      	b.n	80075e0 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	2201      	movs	r2, #1
 80075c4:	701a      	strb	r2, [r3, #0]
      break;
 80075c6:	e00b      	b.n	80075e0 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	2202      	movs	r2, #2
 80075cc:	701a      	strb	r2, [r3, #0]
      break;
 80075ce:	e007      	b.n	80075e0 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	2203      	movs	r2, #3
 80075d4:	701a      	strb	r2, [r3, #0]
      break;
 80075d6:	e003      	b.n	80075e0 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	2200      	movs	r2, #0
 80075dc:	701a      	strb	r2, [r3, #0]
      break;
 80075de:	bf00      	nop
  }

  return ret;
 80075e0:	68fb      	ldr	r3, [r7, #12]
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop

080075ec <HAL_RTC_AlarmAEventCallback>:
RTC_TimeTypeDef sTime = {0};
RTC_DateTypeDef sDate = {0};
RTC_AlarmTypeDef sAlarm = {0};

/*You cannot put these in the user callbacks section and I don't know why (can put in user begin 4)*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),(uint8_t*)"AlarmA\r\n", 8, HAL_MAX_DELAY);
 80075f4:	f04f 33ff 	mov.w	r3, #4294967295
 80075f8:	2208      	movs	r2, #8
 80075fa:	4905      	ldr	r1, [pc, #20]	; (8007610 <HAL_RTC_AlarmAEventCallback+0x24>)
 80075fc:	4805      	ldr	r0, [pc, #20]	; (8007614 <HAL_RTC_AlarmAEventCallback+0x28>)
 80075fe:	f005 f930 	bl	800c862 <HAL_UART_Transmit>
	flagA = 1;
 8007602:	4b05      	ldr	r3, [pc, #20]	; (8007618 <HAL_RTC_AlarmAEventCallback+0x2c>)
 8007604:	2201      	movs	r2, #1
 8007606:	701a      	strb	r2, [r3, #0]
}
 8007608:	bf00      	nop
 800760a:	3708      	adds	r7, #8
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	08018200 	.word	0x08018200
 8007614:	2000607c 	.word	0x2000607c
 8007618:	200004bc 	.word	0x200004bc

0800761c <MRT_SetupRTOS>:
}




void MRT_SetupRTOS(UART_HandleTypeDef uart,uint8_t sleepT){
 800761c:	b084      	sub	sp, #16
 800761e:	b580      	push	{r7, lr}
 8007620:	af00      	add	r7, sp, #0
 8007622:	f107 0c08 	add.w	ip, r7, #8
 8007626:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	rtos.huart = uart;
 800762a:	4b0d      	ldr	r3, [pc, #52]	; (8007660 <MRT_SetupRTOS+0x44>)
 800762c:	4618      	mov	r0, r3
 800762e:	f107 0308 	add.w	r3, r7, #8
 8007632:	2244      	movs	r2, #68	; 0x44
 8007634:	4619      	mov	r1, r3
 8007636:	f00a f8e9 	bl	801180c <memcpy>
	rtos.sleepTime = sleepT;
 800763a:	4a09      	ldr	r2, [pc, #36]	; (8007660 <MRT_SetupRTOS+0x44>)
 800763c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8007640:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTOS\r\n", 17, HAL_MAX_DELAY);
 8007644:	f04f 33ff 	mov.w	r3, #4294967295
 8007648:	2211      	movs	r2, #17
 800764a:	4906      	ldr	r1, [pc, #24]	; (8007664 <MRT_SetupRTOS+0x48>)
 800764c:	4804      	ldr	r0, [pc, #16]	; (8007660 <MRT_SetupRTOS+0x44>)
 800764e:	f005 f908 	bl	800c862 <HAL_UART_Transmit>
}
 8007652:	bf00      	nop
 8007654:	46bd      	mov	sp, r7
 8007656:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800765a:	b004      	add	sp, #16
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	2000607c 	.word	0x2000607c
 8007664:	08018218 	.word	0x08018218

08007668 <MRT_WUProcedure>:



void MRT_WUProcedure(void){
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0

	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 800766e:	4b14      	ldr	r3, [pc, #80]	; (80076c0 <MRT_WUProcedure+0x58>)
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	f003 0302 	and.w	r3, r3, #2
 8007676:	2b02      	cmp	r3, #2
 8007678:	d11c      	bne.n	80076b4 <MRT_WUProcedure+0x4c>
	{

		wu_flag = 1;
 800767a:	4b12      	ldr	r3, [pc, #72]	; (80076c4 <MRT_WUProcedure+0x5c>)
 800767c:	2201      	movs	r2, #1
 800767e:	701a      	strb	r2, [r3, #0]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 8007680:	4b0f      	ldr	r3, [pc, #60]	; (80076c0 <MRT_WUProcedure+0x58>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a0e      	ldr	r2, [pc, #56]	; (80076c0 <MRT_WUProcedure+0x58>)
 8007686:	f043 0308 	orr.w	r3, r3, #8
 800768a:	6013      	str	r3, [r2, #0]

		/** display  the string **/
		char *str = "Wakeup from the STANDBY MODE\r\n";
 800768c:	4b0e      	ldr	r3, [pc, #56]	; (80076c8 <MRT_WUProcedure+0x60>)
 800768e:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit(&(rtos.huart), (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f7f8 fdad 	bl	80001f0 <strlen>
 8007696:	4603      	mov	r3, r0
 8007698:	b29a      	uxth	r2, r3
 800769a:	f04f 33ff 	mov.w	r3, #4294967295
 800769e:	6879      	ldr	r1, [r7, #4]
 80076a0:	480a      	ldr	r0, [pc, #40]	; (80076cc <MRT_WUProcedure+0x64>)
 80076a2:	f005 f8de 	bl	800c862 <HAL_UART_Transmit>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 80076a6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80076aa:	f002 f899 	bl	80097e0 <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80076ae:	4808      	ldr	r0, [pc, #32]	; (80076d0 <MRT_WUProcedure+0x68>)
 80076b0:	f003 fc94 	bl	800afdc <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_ClearFlags();
 80076b4:	f000 f80e 	bl	80076d4 <MRT_ClearFlags>
}
 80076b8:	bf00      	nop
 80076ba:	3708      	adds	r7, #8
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	40007000 	.word	0x40007000
 80076c4:	200004bd 	.word	0x200004bd
 80076c8:	0801822c 	.word	0x0801822c
 80076cc:	2000607c 	.word	0x2000607c
 80076d0:	20005da0 	.word	0x20005da0

080076d4 <MRT_ClearFlags>:


void MRT_ClearFlags(void){
 80076d4:	b580      	push	{r7, lr}
 80076d6:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	HAL_UART_Transmit(&(rtos.huart),"Clearing the flags\r\n", 20, HAL_MAX_DELAY);
 80076d8:	f04f 33ff 	mov.w	r3, #4294967295
 80076dc:	2214      	movs	r2, #20
 80076de:	4932      	ldr	r1, [pc, #200]	; (80077a8 <MRT_ClearFlags+0xd4>)
 80076e0:	4832      	ldr	r0, [pc, #200]	; (80077ac <MRT_ClearFlags+0xd8>)
 80076e2:	f005 f8be 	bl	800c862 <HAL_UART_Transmit>
	  	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 80076e6:	4b32      	ldr	r3, [pc, #200]	; (80077b0 <MRT_ClearFlags+0xdc>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	22ca      	movs	r2, #202	; 0xca
 80076ec:	625a      	str	r2, [r3, #36]	; 0x24
 80076ee:	4b30      	ldr	r3, [pc, #192]	; (80077b0 <MRT_ClearFlags+0xdc>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2253      	movs	r2, #83	; 0x53
 80076f4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 80076f6:	e00f      	b.n	8007718 <MRT_ClearFlags+0x44>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm A flag\r\n", 23, HAL_MAX_DELAY);
 80076f8:	f04f 33ff 	mov.w	r3, #4294967295
 80076fc:	2217      	movs	r2, #23
 80076fe:	492d      	ldr	r1, [pc, #180]	; (80077b4 <MRT_ClearFlags+0xe0>)
 8007700:	482a      	ldr	r0, [pc, #168]	; (80077ac <MRT_ClearFlags+0xd8>)
 8007702:	f005 f8ae 	bl	800c862 <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8007706:	4b2a      	ldr	r3, [pc, #168]	; (80077b0 <MRT_ClearFlags+0xdc>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	b2da      	uxtb	r2, r3
 800770e:	4b28      	ldr	r3, [pc, #160]	; (80077b0 <MRT_ClearFlags+0xdc>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007716:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8007718:	4b25      	ldr	r3, [pc, #148]	; (80077b0 <MRT_ClearFlags+0xdc>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1e8      	bne.n	80076f8 <MRT_ClearFlags+0x24>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8007726:	4b22      	ldr	r3, [pc, #136]	; (80077b0 <MRT_ClearFlags+0xdc>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	22ff      	movs	r2, #255	; 0xff
 800772c:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800772e:	4b22      	ldr	r3, [pc, #136]	; (80077b8 <MRT_ClearFlags+0xe4>)
 8007730:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007734:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8007736:	4b1e      	ldr	r3, [pc, #120]	; (80077b0 <MRT_ClearFlags+0xdc>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	22ca      	movs	r2, #202	; 0xca
 800773c:	625a      	str	r2, [r3, #36]	; 0x24
 800773e:	4b1c      	ldr	r3, [pc, #112]	; (80077b0 <MRT_ClearFlags+0xdc>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2253      	movs	r2, #83	; 0x53
 8007744:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8007746:	e00f      	b.n	8007768 <MRT_ClearFlags+0x94>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm B flag\r\n", 23, HAL_MAX_DELAY);
 8007748:	f04f 33ff 	mov.w	r3, #4294967295
 800774c:	2217      	movs	r2, #23
 800774e:	491b      	ldr	r1, [pc, #108]	; (80077bc <MRT_ClearFlags+0xe8>)
 8007750:	4816      	ldr	r0, [pc, #88]	; (80077ac <MRT_ClearFlags+0xd8>)
 8007752:	f005 f886 	bl	800c862 <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRBF);
 8007756:	4b16      	ldr	r3, [pc, #88]	; (80077b0 <MRT_ClearFlags+0xdc>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	b2da      	uxtb	r2, r3
 800775e:	4b14      	ldr	r3, [pc, #80]	; (80077b0 <MRT_ClearFlags+0xdc>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007766:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8007768:	4b11      	ldr	r3, [pc, #68]	; (80077b0 <MRT_ClearFlags+0xdc>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1e8      	bne.n	8007748 <MRT_ClearFlags+0x74>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8007776:	4b0e      	ldr	r3, [pc, #56]	; (80077b0 <MRT_ClearFlags+0xdc>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	22ff      	movs	r2, #255	; 0xff
 800777c:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800777e:	4b0e      	ldr	r3, [pc, #56]	; (80077b8 <MRT_ClearFlags+0xe4>)
 8007780:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007784:	615a      	str	r2, [r3, #20]


	/* Clear the WU FLAG */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing WU flag\r\n", 18, HAL_MAX_DELAY);
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8007786:	4b0e      	ldr	r3, [pc, #56]	; (80077c0 <MRT_ClearFlags+0xec>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a0d      	ldr	r2, [pc, #52]	; (80077c0 <MRT_ClearFlags+0xec>)
 800778c:	f043 0304 	orr.w	r3, r3, #4
 8007790:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing RTC WU flag\r\n", 22, HAL_MAX_DELAY);
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8007792:	4b07      	ldr	r3, [pc, #28]	; (80077b0 <MRT_ClearFlags+0xdc>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	b2da      	uxtb	r2, r3
 800779a:	4b05      	ldr	r3, [pc, #20]	; (80077b0 <MRT_ClearFlags+0xdc>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80077a2:	60da      	str	r2, [r3, #12]
}
 80077a4:	bf00      	nop
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	0801824c 	.word	0x0801824c
 80077ac:	2000607c 	.word	0x2000607c
 80077b0:	20005da0 	.word	0x20005da0
 80077b4:	08018264 	.word	0x08018264
 80077b8:	40013c00 	.word	0x40013c00
 80077bc:	0801827c 	.word	0x0801827c
 80077c0:	40007000 	.word	0x40007000

080077c4 <MRT_StandByMode>:

/*
 * This function is called to enter standby mode
 * @param seconds: time before it wakes up (max of 36 hours)
 */
void MRT_StandByMode( uint32_t seconds){
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b0a4      	sub	sp, #144	; 0x90
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),"\r\nStandByMode\r\n", 15, HAL_MAX_DELAY);
 80077cc:	f04f 33ff 	mov.w	r3, #4294967295
 80077d0:	220f      	movs	r2, #15
 80077d2:	491b      	ldr	r1, [pc, #108]	; (8007840 <MRT_StandByMode+0x7c>)
 80077d4:	481b      	ldr	r0, [pc, #108]	; (8007844 <MRT_StandByMode+0x80>)
 80077d6:	f005 f844 	bl	800c862 <HAL_UART_Transmit>

	/* Enable the WAKEUP PIN
	 * (Needs to be placed BEFORE clearing up the flags or else it wakes up as soon as we enter standby mode)*/
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 80077da:	f44f 7080 	mov.w	r0, #256	; 0x100
 80077de:	f001 ffed 	bl	80097bc <HAL_PWR_EnableWakeUpPin>

	/*Clear the flags so it doesn't wake up as soon as it goes to sleep*/
	MRT_ClearFlags();
 80077e2:	f7ff ff77 	bl	80076d4 <MRT_ClearFlags>

	//Setup RTC wake up timer
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTCW\r\n", 17, HAL_MAX_DELAY);
 80077e6:	f04f 33ff 	mov.w	r3, #4294967295
 80077ea:	2211      	movs	r2, #17
 80077ec:	4916      	ldr	r1, [pc, #88]	; (8007848 <MRT_StandByMode+0x84>)
 80077ee:	4815      	ldr	r0, [pc, #84]	; (8007844 <MRT_StandByMode+0x80>)
 80077f0:	f005 f837 	bl	800c862 <HAL_UART_Transmit>
	  Error_Handler();
	}
	*/

	char* msg[30+sizeof(uint32_t)];
	sprintf(msg,"Going to sleep for %i seconds\r\n",seconds);
 80077f4:	f107 0308 	add.w	r3, r7, #8
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	4914      	ldr	r1, [pc, #80]	; (800784c <MRT_StandByMode+0x88>)
 80077fc:	4618      	mov	r0, r3
 80077fe:	f00b f8ab 	bl	8012958 <siprintf>
	HAL_UART_Transmit(&(rtos.huart), msg,strlen(msg),HAL_MAX_DELAY);
 8007802:	f107 0308 	add.w	r3, r7, #8
 8007806:	4618      	mov	r0, r3
 8007808:	f7f8 fcf2 	bl	80001f0 <strlen>
 800780c:	4603      	mov	r3, r0
 800780e:	b29a      	uxth	r2, r3
 8007810:	f107 0108 	add.w	r1, r7, #8
 8007814:	f04f 33ff 	mov.w	r3, #4294967295
 8007818:	480a      	ldr	r0, [pc, #40]	; (8007844 <MRT_StandByMode+0x80>)
 800781a:	f005 f822 	bl	800c862 <HAL_UART_Transmit>

	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 800781e:	2204      	movs	r2, #4
 8007820:	6879      	ldr	r1, [r7, #4]
 8007822:	480b      	ldr	r0, [pc, #44]	; (8007850 <MRT_StandByMode+0x8c>)
 8007824:	f003 fb1a 	bl	800ae5c <HAL_RTCEx_SetWakeUpTimer_IT>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d001      	beq.n	8007832 <MRT_StandByMode+0x6e>
	{
	  Error_Handler();
 800782e:	f7fa fef5 	bl	800261c <Error_Handler>
	}

	HAL_PWR_EnterSTANDBYMode();
 8007832:	f001 ffe9 	bl	8009808 <HAL_PWR_EnterSTANDBYMode>
}
 8007836:	bf00      	nop
 8007838:	3790      	adds	r7, #144	; 0x90
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	08018294 	.word	0x08018294
 8007844:	2000607c 	.word	0x2000607c
 8007848:	080182a4 	.word	0x080182a4
 800784c:	080182b8 	.word	0x080182b8
 8007850:	20005da0 	.word	0x20005da0

08007854 <MRT_setAlarmA>:
	  }
}



void MRT_setAlarmA(uint8_t h, uint8_t m, uint8_t s){
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	4603      	mov	r3, r0
 800785c:	71fb      	strb	r3, [r7, #7]
 800785e:	460b      	mov	r3, r1
 8007860:	71bb      	strb	r3, [r7, #6]
 8007862:	4613      	mov	r3, r2
 8007864:	717b      	strb	r3, [r7, #5]
	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = h;
 8007866:	4a18      	ldr	r2, [pc, #96]	; (80078c8 <MRT_setAlarmA+0x74>)
 8007868:	79fb      	ldrb	r3, [r7, #7]
 800786a:	7013      	strb	r3, [r2, #0]
	  sAlarm.AlarmTime.Minutes = m;
 800786c:	4a16      	ldr	r2, [pc, #88]	; (80078c8 <MRT_setAlarmA+0x74>)
 800786e:	79bb      	ldrb	r3, [r7, #6]
 8007870:	7053      	strb	r3, [r2, #1]
	  sAlarm.AlarmTime.Seconds = s;
 8007872:	4a15      	ldr	r2, [pc, #84]	; (80078c8 <MRT_setAlarmA+0x74>)
 8007874:	797b      	ldrb	r3, [r7, #5]
 8007876:	7093      	strb	r3, [r2, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 8007878:	4b13      	ldr	r3, [pc, #76]	; (80078c8 <MRT_setAlarmA+0x74>)
 800787a:	2200      	movs	r2, #0
 800787c:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800787e:	4b12      	ldr	r3, [pc, #72]	; (80078c8 <MRT_setAlarmA+0x74>)
 8007880:	2200      	movs	r2, #0
 8007882:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8007884:	4b10      	ldr	r3, [pc, #64]	; (80078c8 <MRT_setAlarmA+0x74>)
 8007886:	2200      	movs	r2, #0
 8007888:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800788a:	4b0f      	ldr	r3, [pc, #60]	; (80078c8 <MRT_setAlarmA+0x74>)
 800788c:	2200      	movs	r2, #0
 800788e:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8007890:	4b0d      	ldr	r3, [pc, #52]	; (80078c8 <MRT_setAlarmA+0x74>)
 8007892:	2200      	movs	r2, #0
 8007894:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8007896:	4b0c      	ldr	r3, [pc, #48]	; (80078c8 <MRT_setAlarmA+0x74>)
 8007898:	2200      	movs	r2, #0
 800789a:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 800789c:	4b0a      	ldr	r3, [pc, #40]	; (80078c8 <MRT_setAlarmA+0x74>)
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 80078a4:	4b08      	ldr	r3, [pc, #32]	; (80078c8 <MRT_setAlarmA+0x74>)
 80078a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078aa:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80078ac:	2201      	movs	r2, #1
 80078ae:	4906      	ldr	r1, [pc, #24]	; (80078c8 <MRT_setAlarmA+0x74>)
 80078b0:	4806      	ldr	r0, [pc, #24]	; (80078cc <MRT_setAlarmA+0x78>)
 80078b2:	f003 f8c5 	bl	800aa40 <HAL_RTC_SetAlarm_IT>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d001      	beq.n	80078c0 <MRT_setAlarmA+0x6c>
	  {
	    Error_Handler();
 80078bc:	f7fa feae 	bl	800261c <Error_Handler>
	  }
}
 80078c0:	bf00      	nop
 80078c2:	3708      	adds	r7, #8
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	200004d8 	.word	0x200004d8
 80078cc:	20005da0 	.word	0x20005da0

080078d0 <MRT_setRTC>:


void MRT_setRTC(uint8_t h, uint8_t m, uint8_t s){
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b088      	sub	sp, #32
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	4603      	mov	r3, r0
 80078d8:	71fb      	strb	r3, [r7, #7]
 80078da:	460b      	mov	r3, r1
 80078dc:	71bb      	strb	r3, [r7, #6]
 80078de:	4613      	mov	r3, r2
 80078e0:	717b      	strb	r3, [r7, #5]
	  /** Initialize RTC and set the Time and Date
	  */
	  RTC_TimeTypeDef sTime;

	  sTime.Hours = h;
 80078e2:	79fb      	ldrb	r3, [r7, #7]
 80078e4:	733b      	strb	r3, [r7, #12]
	  sTime.Minutes = m;
 80078e6:	79bb      	ldrb	r3, [r7, #6]
 80078e8:	737b      	strb	r3, [r7, #13]
	  sTime.Seconds = s;
 80078ea:	797b      	ldrb	r3, [r7, #5]
 80078ec:	73bb      	strb	r3, [r7, #14]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80078ee:	2300      	movs	r3, #0
 80078f0:	61bb      	str	r3, [r7, #24]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80078f2:	2300      	movs	r3, #0
 80078f4:	61fb      	str	r3, [r7, #28]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80078f6:	f107 030c 	add.w	r3, r7, #12
 80078fa:	2201      	movs	r2, #1
 80078fc:	4619      	mov	r1, r3
 80078fe:	4811      	ldr	r0, [pc, #68]	; (8007944 <MRT_setRTC+0x74>)
 8007900:	f002 fe8d 	bl	800a61e <HAL_RTC_SetTime>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d001      	beq.n	800790e <MRT_setRTC+0x3e>
	  {
	    Error_Handler();
 800790a:	f7fa fe87 	bl	800261c <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800790e:	4b0e      	ldr	r3, [pc, #56]	; (8007948 <MRT_setRTC+0x78>)
 8007910:	2201      	movs	r2, #1
 8007912:	701a      	strb	r2, [r3, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 8007914:	4b0c      	ldr	r3, [pc, #48]	; (8007948 <MRT_setRTC+0x78>)
 8007916:	2201      	movs	r2, #1
 8007918:	705a      	strb	r2, [r3, #1]
	  sDate.Date = 0x1;
 800791a:	4b0b      	ldr	r3, [pc, #44]	; (8007948 <MRT_setRTC+0x78>)
 800791c:	2201      	movs	r2, #1
 800791e:	709a      	strb	r2, [r3, #2]
	  sDate.Year = 0x0;
 8007920:	4b09      	ldr	r3, [pc, #36]	; (8007948 <MRT_setRTC+0x78>)
 8007922:	2200      	movs	r2, #0
 8007924:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8007926:	2201      	movs	r2, #1
 8007928:	4907      	ldr	r1, [pc, #28]	; (8007948 <MRT_setRTC+0x78>)
 800792a:	4806      	ldr	r0, [pc, #24]	; (8007944 <MRT_setRTC+0x74>)
 800792c:	f002 ff92 	bl	800a854 <HAL_RTC_SetDate>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d001      	beq.n	800793a <MRT_setRTC+0x6a>
	  {
	    Error_Handler();
 8007936:	f7fa fe71 	bl	800261c <Error_Handler>
	  }
}
 800793a:	bf00      	nop
 800793c:	3720      	adds	r7, #32
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	20005da0 	.word	0x20005da0
 8007948:	200004d4 	.word	0x200004d4

0800794c <Max31855_Read_Temp>:
uint32_t sign=0;									  // Sign bit
uint8_t DATARX[4];                                    // Raw Data from MAX6675
//uint8_t DATATX = {0xFF, 0xFF, 0xFF, 0xFF};                                    // Raw Data from MAX6675

// ------------------- Functions ----------------
void Max31855_Read_Temp(void) {
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
	int Temp = 0;                                        // Temperature Variable
 8007952:	2300      	movs	r3, #0
 8007954:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_RESET); // Low State for SPI Communication
 8007956:	2200      	movs	r2, #0
 8007958:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800795c:	483f      	ldr	r0, [pc, #252]	; (8007a5c <Max31855_Read_Temp+0x110>)
 800795e:	f000 fe39 	bl	80085d4 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi4, DATARX, 4, 1000);                // DATA Transfer
 8007962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007966:	2204      	movs	r2, #4
 8007968:	493d      	ldr	r1, [pc, #244]	; (8007a60 <Max31855_Read_Temp+0x114>)
 800796a:	483e      	ldr	r0, [pc, #248]	; (8007a64 <Max31855_Read_Temp+0x118>)
 800796c:	f003 fd5d 	bl	800b42a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_SET); // High State for SPI Communication
 8007970:	2201      	movs	r2, #1
 8007972:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007976:	4839      	ldr	r0, [pc, #228]	; (8007a5c <Max31855_Read_Temp+0x110>)
 8007978:	f000 fe2c 	bl	80085d4 <HAL_GPIO_WritePin>


	uint32_t v = DATARX[3] | (DATARX[2] << 8) | (DATARX[1] << 16) | (DATARX[0] << 24);
 800797c:	4b38      	ldr	r3, [pc, #224]	; (8007a60 <Max31855_Read_Temp+0x114>)
 800797e:	78db      	ldrb	r3, [r3, #3]
 8007980:	461a      	mov	r2, r3
 8007982:	4b37      	ldr	r3, [pc, #220]	; (8007a60 <Max31855_Read_Temp+0x114>)
 8007984:	789b      	ldrb	r3, [r3, #2]
 8007986:	021b      	lsls	r3, r3, #8
 8007988:	431a      	orrs	r2, r3
 800798a:	4b35      	ldr	r3, [pc, #212]	; (8007a60 <Max31855_Read_Temp+0x114>)
 800798c:	785b      	ldrb	r3, [r3, #1]
 800798e:	041b      	lsls	r3, r3, #16
 8007990:	431a      	orrs	r2, r3
 8007992:	4b33      	ldr	r3, [pc, #204]	; (8007a60 <Max31855_Read_Temp+0x114>)
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	061b      	lsls	r3, r3, #24
 8007998:	4313      	orrs	r3, r2
 800799a:	603b      	str	r3, [r7, #0]

	Error = v & 0x07;								  // Error Detection
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	f003 0307 	and.w	r3, r3, #7
 80079a4:	b2da      	uxtb	r2, r3
 80079a6:	4b30      	ldr	r3, [pc, #192]	; (8007a68 <Max31855_Read_Temp+0x11c>)
 80079a8:	701a      	strb	r2, [r3, #0]



		sign = (DATARX[0] & (0x80)) >> 7;					// Sign Bit calculation
 80079aa:	4b2d      	ldr	r3, [pc, #180]	; (8007a60 <Max31855_Read_Temp+0x114>)
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	09db      	lsrs	r3, r3, #7
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	461a      	mov	r2, r3
 80079b4:	4b2d      	ldr	r3, [pc, #180]	; (8007a6c <Max31855_Read_Temp+0x120>)
 80079b6:	601a      	str	r2, [r3, #0]

		if (DATARX[3] & 0x07)								 // Returns Error Number
 80079b8:	4b29      	ldr	r3, [pc, #164]	; (8007a60 <Max31855_Read_Temp+0x114>)
 80079ba:	78db      	ldrb	r3, [r3, #3]
 80079bc:	f003 0307 	and.w	r3, r3, #7
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d00c      	beq.n	80079de <Max31855_Read_Temp+0x92>
			THERMO_TEMP = (-1 * (DATARX[3] & 0x07));
 80079c4:	4b26      	ldr	r3, [pc, #152]	; (8007a60 <Max31855_Read_Temp+0x114>)
 80079c6:	78db      	ldrb	r3, [r3, #3]
 80079c8:	f003 0307 	and.w	r3, r3, #7
 80079cc:	425b      	negs	r3, r3
 80079ce:	ee07 3a90 	vmov	s15, r3
 80079d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80079d6:	4b26      	ldr	r3, [pc, #152]	; (8007a70 <Max31855_Read_Temp+0x124>)
 80079d8:	edc3 7a00 	vstr	s15, [r3]

	// LSB = 0.25 degrees C
	centigrade *= 0.25;
	return centigrade;
	*/
}
 80079dc:	e039      	b.n	8007a52 <Max31855_Read_Temp+0x106>
		else if (sign == 1) {								// Negative Temperature
 80079de:	4b23      	ldr	r3, [pc, #140]	; (8007a6c <Max31855_Read_Temp+0x120>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d120      	bne.n	8007a28 <Max31855_Read_Temp+0xdc>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 80079e6:	4b1e      	ldr	r3, [pc, #120]	; (8007a60 <Max31855_Read_Temp+0x114>)
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	019b      	lsls	r3, r3, #6
 80079ec:	4a1c      	ldr	r2, [pc, #112]	; (8007a60 <Max31855_Read_Temp+0x114>)
 80079ee:	7852      	ldrb	r2, [r2, #1]
 80079f0:	0892      	lsrs	r2, r2, #2
 80079f2:	b2d2      	uxtb	r2, r2
 80079f4:	4313      	orrs	r3, r2
 80079f6:	607b      	str	r3, [r7, #4]
			Temp &= 0b01111111111111;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80079fe:	607b      	str	r3, [r7, #4]
			Temp ^= 0b01111111111111;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f483 53ff 	eor.w	r3, r3, #8160	; 0x1fe0
 8007a06:	f083 031f 	eor.w	r3, r3, #31
 8007a0a:	607b      	str	r3, [r7, #4]
			THERMO_TEMP = ((float) -Temp / 4);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	425b      	negs	r3, r3
 8007a10:	ee07 3a90 	vmov	s15, r3
 8007a14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007a18:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8007a1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007a20:	4b13      	ldr	r3, [pc, #76]	; (8007a70 <Max31855_Read_Temp+0x124>)
 8007a22:	edc3 7a00 	vstr	s15, [r3]
}
 8007a26:	e014      	b.n	8007a52 <Max31855_Read_Temp+0x106>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8007a28:	4b0d      	ldr	r3, [pc, #52]	; (8007a60 <Max31855_Read_Temp+0x114>)
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	019b      	lsls	r3, r3, #6
 8007a2e:	4a0c      	ldr	r2, [pc, #48]	; (8007a60 <Max31855_Read_Temp+0x114>)
 8007a30:	7852      	ldrb	r2, [r2, #1]
 8007a32:	0892      	lsrs	r2, r2, #2
 8007a34:	b2d2      	uxtb	r2, r2
 8007a36:	4313      	orrs	r3, r2
 8007a38:	607b      	str	r3, [r7, #4]
			THERMO_TEMP = ((float) Temp / 4.0);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	ee07 3a90 	vmov	s15, r3
 8007a40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007a44:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8007a48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007a4c:	4b08      	ldr	r3, [pc, #32]	; (8007a70 <Max31855_Read_Temp+0x124>)
 8007a4e:	edc3 7a00 	vstr	s15, [r3]
}
 8007a52:	bf00      	nop
 8007a54:	3708      	adds	r7, #8
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	40021000 	.word	0x40021000
 8007a60:	200060c4 	.word	0x200060c4
 8007a64:	20005d48 	.word	0x20005d48
 8007a68:	20000500 	.word	0x20000500
 8007a6c:	20000504 	.word	0x20000504
 8007a70:	20005ecc 	.word	0x20005ecc

08007a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007a78:	4b0e      	ldr	r3, [pc, #56]	; (8007ab4 <HAL_Init+0x40>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a0d      	ldr	r2, [pc, #52]	; (8007ab4 <HAL_Init+0x40>)
 8007a7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007a82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007a84:	4b0b      	ldr	r3, [pc, #44]	; (8007ab4 <HAL_Init+0x40>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a0a      	ldr	r2, [pc, #40]	; (8007ab4 <HAL_Init+0x40>)
 8007a8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007a8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007a90:	4b08      	ldr	r3, [pc, #32]	; (8007ab4 <HAL_Init+0x40>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a07      	ldr	r2, [pc, #28]	; (8007ab4 <HAL_Init+0x40>)
 8007a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007a9c:	2003      	movs	r0, #3
 8007a9e:	f000 fb92 	bl	80081c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007aa2:	2000      	movs	r0, #0
 8007aa4:	f7fb f8fc 	bl	8002ca0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007aa8:	f7fa fdc0 	bl	800262c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	40023c00 	.word	0x40023c00

08007ab8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007abc:	4b06      	ldr	r3, [pc, #24]	; (8007ad8 <HAL_IncTick+0x20>)
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	4b06      	ldr	r3, [pc, #24]	; (8007adc <HAL_IncTick+0x24>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	4a04      	ldr	r2, [pc, #16]	; (8007adc <HAL_IncTick+0x24>)
 8007aca:	6013      	str	r3, [r2, #0]
}
 8007acc:	bf00      	nop
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	20000020 	.word	0x20000020
 8007adc:	200060c8 	.word	0x200060c8

08007ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8007ae4:	4b03      	ldr	r3, [pc, #12]	; (8007af4 <HAL_GetTick+0x14>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	200060c8 	.word	0x200060c8

08007af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007b00:	f7ff ffee 	bl	8007ae0 <HAL_GetTick>
 8007b04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b10:	d005      	beq.n	8007b1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007b12:	4b0a      	ldr	r3, [pc, #40]	; (8007b3c <HAL_Delay+0x44>)
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	461a      	mov	r2, r3
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007b1e:	bf00      	nop
 8007b20:	f7ff ffde 	bl	8007ae0 <HAL_GetTick>
 8007b24:	4602      	mov	r2, r0
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d8f7      	bhi.n	8007b20 <HAL_Delay+0x28>
  {
  }
}
 8007b30:	bf00      	nop
 8007b32:	bf00      	nop
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	20000020 	.word	0x20000020

08007b40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d101      	bne.n	8007b56 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e033      	b.n	8007bbe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d109      	bne.n	8007b72 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f7fa fd90 	bl	8002684 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b76:	f003 0310 	and.w	r3, r3, #16
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d118      	bne.n	8007bb0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b82:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007b86:	f023 0302 	bic.w	r3, r3, #2
 8007b8a:	f043 0202 	orr.w	r2, r3, #2
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f94a 	bl	8007e2c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba2:	f023 0303 	bic.w	r3, r3, #3
 8007ba6:	f043 0201 	orr.w	r2, r3, #1
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	641a      	str	r2, [r3, #64]	; 0x40
 8007bae:	e001      	b.n	8007bb4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3710      	adds	r7, #16
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
	...

08007bc8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d101      	bne.n	8007be4 <HAL_ADC_ConfigChannel+0x1c>
 8007be0:	2302      	movs	r3, #2
 8007be2:	e113      	b.n	8007e0c <HAL_ADC_ConfigChannel+0x244>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2b09      	cmp	r3, #9
 8007bf2:	d925      	bls.n	8007c40 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68d9      	ldr	r1, [r3, #12]
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	461a      	mov	r2, r3
 8007c02:	4613      	mov	r3, r2
 8007c04:	005b      	lsls	r3, r3, #1
 8007c06:	4413      	add	r3, r2
 8007c08:	3b1e      	subs	r3, #30
 8007c0a:	2207      	movs	r2, #7
 8007c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c10:	43da      	mvns	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	400a      	ands	r2, r1
 8007c18:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	68d9      	ldr	r1, [r3, #12]
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	689a      	ldr	r2, [r3, #8]
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	005b      	lsls	r3, r3, #1
 8007c30:	4403      	add	r3, r0
 8007c32:	3b1e      	subs	r3, #30
 8007c34:	409a      	lsls	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	430a      	orrs	r2, r1
 8007c3c:	60da      	str	r2, [r3, #12]
 8007c3e:	e022      	b.n	8007c86 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	6919      	ldr	r1, [r3, #16]
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	4613      	mov	r3, r2
 8007c50:	005b      	lsls	r3, r3, #1
 8007c52:	4413      	add	r3, r2
 8007c54:	2207      	movs	r2, #7
 8007c56:	fa02 f303 	lsl.w	r3, r2, r3
 8007c5a:	43da      	mvns	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	400a      	ands	r2, r1
 8007c62:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	6919      	ldr	r1, [r3, #16]
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	689a      	ldr	r2, [r3, #8]
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	4618      	mov	r0, r3
 8007c76:	4603      	mov	r3, r0
 8007c78:	005b      	lsls	r3, r3, #1
 8007c7a:	4403      	add	r3, r0
 8007c7c:	409a      	lsls	r2, r3
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	430a      	orrs	r2, r1
 8007c84:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	2b06      	cmp	r3, #6
 8007c8c:	d824      	bhi.n	8007cd8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	685a      	ldr	r2, [r3, #4]
 8007c98:	4613      	mov	r3, r2
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	4413      	add	r3, r2
 8007c9e:	3b05      	subs	r3, #5
 8007ca0:	221f      	movs	r2, #31
 8007ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca6:	43da      	mvns	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	400a      	ands	r2, r1
 8007cae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	685a      	ldr	r2, [r3, #4]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	4413      	add	r3, r2
 8007cc8:	3b05      	subs	r3, #5
 8007cca:	fa00 f203 	lsl.w	r2, r0, r3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	430a      	orrs	r2, r1
 8007cd4:	635a      	str	r2, [r3, #52]	; 0x34
 8007cd6:	e04c      	b.n	8007d72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	2b0c      	cmp	r3, #12
 8007cde:	d824      	bhi.n	8007d2a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	685a      	ldr	r2, [r3, #4]
 8007cea:	4613      	mov	r3, r2
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4413      	add	r3, r2
 8007cf0:	3b23      	subs	r3, #35	; 0x23
 8007cf2:	221f      	movs	r2, #31
 8007cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf8:	43da      	mvns	r2, r3
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	400a      	ands	r2, r1
 8007d00:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	4618      	mov	r0, r3
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	685a      	ldr	r2, [r3, #4]
 8007d14:	4613      	mov	r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4413      	add	r3, r2
 8007d1a:	3b23      	subs	r3, #35	; 0x23
 8007d1c:	fa00 f203 	lsl.w	r2, r0, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	430a      	orrs	r2, r1
 8007d26:	631a      	str	r2, [r3, #48]	; 0x30
 8007d28:	e023      	b.n	8007d72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	685a      	ldr	r2, [r3, #4]
 8007d34:	4613      	mov	r3, r2
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	4413      	add	r3, r2
 8007d3a:	3b41      	subs	r3, #65	; 0x41
 8007d3c:	221f      	movs	r2, #31
 8007d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d42:	43da      	mvns	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	400a      	ands	r2, r1
 8007d4a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	4618      	mov	r0, r3
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	685a      	ldr	r2, [r3, #4]
 8007d5e:	4613      	mov	r3, r2
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	4413      	add	r3, r2
 8007d64:	3b41      	subs	r3, #65	; 0x41
 8007d66:	fa00 f203 	lsl.w	r2, r0, r3
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	430a      	orrs	r2, r1
 8007d70:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007d72:	4b29      	ldr	r3, [pc, #164]	; (8007e18 <HAL_ADC_ConfigChannel+0x250>)
 8007d74:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a28      	ldr	r2, [pc, #160]	; (8007e1c <HAL_ADC_ConfigChannel+0x254>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d10f      	bne.n	8007da0 <HAL_ADC_ConfigChannel+0x1d8>
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2b12      	cmp	r3, #18
 8007d86:	d10b      	bne.n	8007da0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a1d      	ldr	r2, [pc, #116]	; (8007e1c <HAL_ADC_ConfigChannel+0x254>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d12b      	bne.n	8007e02 <HAL_ADC_ConfigChannel+0x23a>
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a1c      	ldr	r2, [pc, #112]	; (8007e20 <HAL_ADC_ConfigChannel+0x258>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d003      	beq.n	8007dbc <HAL_ADC_ConfigChannel+0x1f4>
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	2b11      	cmp	r3, #17
 8007dba:	d122      	bne.n	8007e02 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a11      	ldr	r2, [pc, #68]	; (8007e20 <HAL_ADC_ConfigChannel+0x258>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d111      	bne.n	8007e02 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007dde:	4b11      	ldr	r3, [pc, #68]	; (8007e24 <HAL_ADC_ConfigChannel+0x25c>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a11      	ldr	r2, [pc, #68]	; (8007e28 <HAL_ADC_ConfigChannel+0x260>)
 8007de4:	fba2 2303 	umull	r2, r3, r2, r3
 8007de8:	0c9a      	lsrs	r2, r3, #18
 8007dea:	4613      	mov	r3, r2
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	4413      	add	r3, r2
 8007df0:	005b      	lsls	r3, r3, #1
 8007df2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007df4:	e002      	b.n	8007dfc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1f9      	bne.n	8007df6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3714      	adds	r7, #20
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr
 8007e18:	40012300 	.word	0x40012300
 8007e1c:	40012000 	.word	0x40012000
 8007e20:	10000012 	.word	0x10000012
 8007e24:	20000000 	.word	0x20000000
 8007e28:	431bde83 	.word	0x431bde83

08007e2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007e34:	4b79      	ldr	r3, [pc, #484]	; (800801c <ADC_Init+0x1f0>)
 8007e36:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	685a      	ldr	r2, [r3, #4]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	431a      	orrs	r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	685a      	ldr	r2, [r3, #4]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	6859      	ldr	r1, [r3, #4]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	021a      	lsls	r2, r3, #8
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	430a      	orrs	r2, r1
 8007e74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	685a      	ldr	r2, [r3, #4]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007e84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	6859      	ldr	r1, [r3, #4]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	689a      	ldr	r2, [r3, #8]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	430a      	orrs	r2, r1
 8007e96:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	689a      	ldr	r2, [r3, #8]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ea6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6899      	ldr	r1, [r3, #8]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	68da      	ldr	r2, [r3, #12]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	430a      	orrs	r2, r1
 8007eb8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ebe:	4a58      	ldr	r2, [pc, #352]	; (8008020 <ADC_Init+0x1f4>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d022      	beq.n	8007f0a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	689a      	ldr	r2, [r3, #8]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007ed2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	6899      	ldr	r1, [r3, #8]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	430a      	orrs	r2, r1
 8007ee4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	689a      	ldr	r2, [r3, #8]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007ef4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	6899      	ldr	r1, [r3, #8]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	430a      	orrs	r2, r1
 8007f06:	609a      	str	r2, [r3, #8]
 8007f08:	e00f      	b.n	8007f2a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	689a      	ldr	r2, [r3, #8]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007f18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	689a      	ldr	r2, [r3, #8]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007f28:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	689a      	ldr	r2, [r3, #8]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f022 0202 	bic.w	r2, r2, #2
 8007f38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	6899      	ldr	r1, [r3, #8]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	7e1b      	ldrb	r3, [r3, #24]
 8007f44:	005a      	lsls	r2, r3, #1
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	430a      	orrs	r2, r1
 8007f4c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d01b      	beq.n	8007f90 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	685a      	ldr	r2, [r3, #4]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f66:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	685a      	ldr	r2, [r3, #4]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007f76:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	6859      	ldr	r1, [r3, #4]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f82:	3b01      	subs	r3, #1
 8007f84:	035a      	lsls	r2, r3, #13
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	430a      	orrs	r2, r1
 8007f8c:	605a      	str	r2, [r3, #4]
 8007f8e:	e007      	b.n	8007fa0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	685a      	ldr	r2, [r3, #4]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f9e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007fae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	69db      	ldr	r3, [r3, #28]
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	051a      	lsls	r2, r3, #20
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	430a      	orrs	r2, r1
 8007fc4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	689a      	ldr	r2, [r3, #8]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007fd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	6899      	ldr	r1, [r3, #8]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007fe2:	025a      	lsls	r2, r3, #9
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	430a      	orrs	r2, r1
 8007fea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	689a      	ldr	r2, [r3, #8]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ffa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	6899      	ldr	r1, [r3, #8]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	695b      	ldr	r3, [r3, #20]
 8008006:	029a      	lsls	r2, r3, #10
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	430a      	orrs	r2, r1
 800800e:	609a      	str	r2, [r3, #8]
}
 8008010:	bf00      	nop
 8008012:	3714      	adds	r7, #20
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr
 800801c:	40012300 	.word	0x40012300
 8008020:	0f000001 	.word	0x0f000001

08008024 <__NVIC_SetPriorityGrouping>:
{
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f003 0307 	and.w	r3, r3, #7
 8008032:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008034:	4b0c      	ldr	r3, [pc, #48]	; (8008068 <__NVIC_SetPriorityGrouping+0x44>)
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800803a:	68ba      	ldr	r2, [r7, #8]
 800803c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008040:	4013      	ands	r3, r2
 8008042:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800804c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008056:	4a04      	ldr	r2, [pc, #16]	; (8008068 <__NVIC_SetPriorityGrouping+0x44>)
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	60d3      	str	r3, [r2, #12]
}
 800805c:	bf00      	nop
 800805e:	3714      	adds	r7, #20
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr
 8008068:	e000ed00 	.word	0xe000ed00

0800806c <__NVIC_GetPriorityGrouping>:
{
 800806c:	b480      	push	{r7}
 800806e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008070:	4b04      	ldr	r3, [pc, #16]	; (8008084 <__NVIC_GetPriorityGrouping+0x18>)
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	0a1b      	lsrs	r3, r3, #8
 8008076:	f003 0307 	and.w	r3, r3, #7
}
 800807a:	4618      	mov	r0, r3
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr
 8008084:	e000ed00 	.word	0xe000ed00

08008088 <__NVIC_EnableIRQ>:
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	4603      	mov	r3, r0
 8008090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008096:	2b00      	cmp	r3, #0
 8008098:	db0b      	blt.n	80080b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800809a:	79fb      	ldrb	r3, [r7, #7]
 800809c:	f003 021f 	and.w	r2, r3, #31
 80080a0:	4907      	ldr	r1, [pc, #28]	; (80080c0 <__NVIC_EnableIRQ+0x38>)
 80080a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080a6:	095b      	lsrs	r3, r3, #5
 80080a8:	2001      	movs	r0, #1
 80080aa:	fa00 f202 	lsl.w	r2, r0, r2
 80080ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80080b2:	bf00      	nop
 80080b4:	370c      	adds	r7, #12
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	e000e100 	.word	0xe000e100

080080c4 <__NVIC_DisableIRQ>:
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	4603      	mov	r3, r0
 80080cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80080ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	db12      	blt.n	80080fc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80080d6:	79fb      	ldrb	r3, [r7, #7]
 80080d8:	f003 021f 	and.w	r2, r3, #31
 80080dc:	490a      	ldr	r1, [pc, #40]	; (8008108 <__NVIC_DisableIRQ+0x44>)
 80080de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080e2:	095b      	lsrs	r3, r3, #5
 80080e4:	2001      	movs	r0, #1
 80080e6:	fa00 f202 	lsl.w	r2, r0, r2
 80080ea:	3320      	adds	r3, #32
 80080ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80080f0:	f3bf 8f4f 	dsb	sy
}
 80080f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80080f6:	f3bf 8f6f 	isb	sy
}
 80080fa:	bf00      	nop
}
 80080fc:	bf00      	nop
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr
 8008108:	e000e100 	.word	0xe000e100

0800810c <__NVIC_SetPriority>:
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	4603      	mov	r3, r0
 8008114:	6039      	str	r1, [r7, #0]
 8008116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800811c:	2b00      	cmp	r3, #0
 800811e:	db0a      	blt.n	8008136 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	b2da      	uxtb	r2, r3
 8008124:	490c      	ldr	r1, [pc, #48]	; (8008158 <__NVIC_SetPriority+0x4c>)
 8008126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800812a:	0112      	lsls	r2, r2, #4
 800812c:	b2d2      	uxtb	r2, r2
 800812e:	440b      	add	r3, r1
 8008130:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008134:	e00a      	b.n	800814c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	b2da      	uxtb	r2, r3
 800813a:	4908      	ldr	r1, [pc, #32]	; (800815c <__NVIC_SetPriority+0x50>)
 800813c:	79fb      	ldrb	r3, [r7, #7]
 800813e:	f003 030f 	and.w	r3, r3, #15
 8008142:	3b04      	subs	r3, #4
 8008144:	0112      	lsls	r2, r2, #4
 8008146:	b2d2      	uxtb	r2, r2
 8008148:	440b      	add	r3, r1
 800814a:	761a      	strb	r2, [r3, #24]
}
 800814c:	bf00      	nop
 800814e:	370c      	adds	r7, #12
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr
 8008158:	e000e100 	.word	0xe000e100
 800815c:	e000ed00 	.word	0xe000ed00

08008160 <NVIC_EncodePriority>:
{
 8008160:	b480      	push	{r7}
 8008162:	b089      	sub	sp, #36	; 0x24
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f003 0307 	and.w	r3, r3, #7
 8008172:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	f1c3 0307 	rsb	r3, r3, #7
 800817a:	2b04      	cmp	r3, #4
 800817c:	bf28      	it	cs
 800817e:	2304      	movcs	r3, #4
 8008180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	3304      	adds	r3, #4
 8008186:	2b06      	cmp	r3, #6
 8008188:	d902      	bls.n	8008190 <NVIC_EncodePriority+0x30>
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	3b03      	subs	r3, #3
 800818e:	e000      	b.n	8008192 <NVIC_EncodePriority+0x32>
 8008190:	2300      	movs	r3, #0
 8008192:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008194:	f04f 32ff 	mov.w	r2, #4294967295
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	fa02 f303 	lsl.w	r3, r2, r3
 800819e:	43da      	mvns	r2, r3
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	401a      	ands	r2, r3
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80081a8:	f04f 31ff 	mov.w	r1, #4294967295
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	fa01 f303 	lsl.w	r3, r1, r3
 80081b2:	43d9      	mvns	r1, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80081b8:	4313      	orrs	r3, r2
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3724      	adds	r7, #36	; 0x24
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b082      	sub	sp, #8
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f7ff ff28 	bl	8008024 <__NVIC_SetPriorityGrouping>
}
 80081d4:	bf00      	nop
 80081d6:	3708      	adds	r7, #8
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80081dc:	b580      	push	{r7, lr}
 80081de:	b086      	sub	sp, #24
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	4603      	mov	r3, r0
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	607a      	str	r2, [r7, #4]
 80081e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80081ea:	2300      	movs	r3, #0
 80081ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80081ee:	f7ff ff3d 	bl	800806c <__NVIC_GetPriorityGrouping>
 80081f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	68b9      	ldr	r1, [r7, #8]
 80081f8:	6978      	ldr	r0, [r7, #20]
 80081fa:	f7ff ffb1 	bl	8008160 <NVIC_EncodePriority>
 80081fe:	4602      	mov	r2, r0
 8008200:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008204:	4611      	mov	r1, r2
 8008206:	4618      	mov	r0, r3
 8008208:	f7ff ff80 	bl	800810c <__NVIC_SetPriority>
}
 800820c:	bf00      	nop
 800820e:	3718      	adds	r7, #24
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	4603      	mov	r3, r0
 800821c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800821e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008222:	4618      	mov	r0, r3
 8008224:	f7ff ff30 	bl	8008088 <__NVIC_EnableIRQ>
}
 8008228:	bf00      	nop
 800822a:	3708      	adds	r7, #8
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	4603      	mov	r3, r0
 8008238:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800823a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800823e:	4618      	mov	r0, r3
 8008240:	f7ff ff40 	bl	80080c4 <__NVIC_DisableIRQ>
}
 8008244:	bf00      	nop
 8008246:	3708      	adds	r7, #8
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800824c:	b480      	push	{r7}
 800824e:	b089      	sub	sp, #36	; 0x24
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008256:	2300      	movs	r3, #0
 8008258:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800825a:	2300      	movs	r3, #0
 800825c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800825e:	2300      	movs	r3, #0
 8008260:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008262:	2300      	movs	r3, #0
 8008264:	61fb      	str	r3, [r7, #28]
 8008266:	e177      	b.n	8008558 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008268:	2201      	movs	r2, #1
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	fa02 f303 	lsl.w	r3, r2, r3
 8008270:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	697a      	ldr	r2, [r7, #20]
 8008278:	4013      	ands	r3, r2
 800827a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800827c:	693a      	ldr	r2, [r7, #16]
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	429a      	cmp	r2, r3
 8008282:	f040 8166 	bne.w	8008552 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	f003 0303 	and.w	r3, r3, #3
 800828e:	2b01      	cmp	r3, #1
 8008290:	d005      	beq.n	800829e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800829a:	2b02      	cmp	r3, #2
 800829c:	d130      	bne.n	8008300 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	005b      	lsls	r3, r3, #1
 80082a8:	2203      	movs	r2, #3
 80082aa:	fa02 f303 	lsl.w	r3, r2, r3
 80082ae:	43db      	mvns	r3, r3
 80082b0:	69ba      	ldr	r2, [r7, #24]
 80082b2:	4013      	ands	r3, r2
 80082b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	68da      	ldr	r2, [r3, #12]
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	005b      	lsls	r3, r3, #1
 80082be:	fa02 f303 	lsl.w	r3, r2, r3
 80082c2:	69ba      	ldr	r2, [r7, #24]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	69ba      	ldr	r2, [r7, #24]
 80082cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80082d4:	2201      	movs	r2, #1
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	fa02 f303 	lsl.w	r3, r2, r3
 80082dc:	43db      	mvns	r3, r3
 80082de:	69ba      	ldr	r2, [r7, #24]
 80082e0:	4013      	ands	r3, r2
 80082e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	091b      	lsrs	r3, r3, #4
 80082ea:	f003 0201 	and.w	r2, r3, #1
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	fa02 f303 	lsl.w	r3, r2, r3
 80082f4:	69ba      	ldr	r2, [r7, #24]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	69ba      	ldr	r2, [r7, #24]
 80082fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	f003 0303 	and.w	r3, r3, #3
 8008308:	2b03      	cmp	r3, #3
 800830a:	d017      	beq.n	800833c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	005b      	lsls	r3, r3, #1
 8008316:	2203      	movs	r2, #3
 8008318:	fa02 f303 	lsl.w	r3, r2, r3
 800831c:	43db      	mvns	r3, r3
 800831e:	69ba      	ldr	r2, [r7, #24]
 8008320:	4013      	ands	r3, r2
 8008322:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	689a      	ldr	r2, [r3, #8]
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	005b      	lsls	r3, r3, #1
 800832c:	fa02 f303 	lsl.w	r3, r2, r3
 8008330:	69ba      	ldr	r2, [r7, #24]
 8008332:	4313      	orrs	r3, r2
 8008334:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	69ba      	ldr	r2, [r7, #24]
 800833a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	f003 0303 	and.w	r3, r3, #3
 8008344:	2b02      	cmp	r3, #2
 8008346:	d123      	bne.n	8008390 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	08da      	lsrs	r2, r3, #3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	3208      	adds	r2, #8
 8008350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008354:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	f003 0307 	and.w	r3, r3, #7
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	220f      	movs	r2, #15
 8008360:	fa02 f303 	lsl.w	r3, r2, r3
 8008364:	43db      	mvns	r3, r3
 8008366:	69ba      	ldr	r2, [r7, #24]
 8008368:	4013      	ands	r3, r2
 800836a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	691a      	ldr	r2, [r3, #16]
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	f003 0307 	and.w	r3, r3, #7
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	fa02 f303 	lsl.w	r3, r2, r3
 800837c:	69ba      	ldr	r2, [r7, #24]
 800837e:	4313      	orrs	r3, r2
 8008380:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	08da      	lsrs	r2, r3, #3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	3208      	adds	r2, #8
 800838a:	69b9      	ldr	r1, [r7, #24]
 800838c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	005b      	lsls	r3, r3, #1
 800839a:	2203      	movs	r2, #3
 800839c:	fa02 f303 	lsl.w	r3, r2, r3
 80083a0:	43db      	mvns	r3, r3
 80083a2:	69ba      	ldr	r2, [r7, #24]
 80083a4:	4013      	ands	r3, r2
 80083a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	f003 0203 	and.w	r2, r3, #3
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	005b      	lsls	r3, r3, #1
 80083b4:	fa02 f303 	lsl.w	r3, r2, r3
 80083b8:	69ba      	ldr	r2, [r7, #24]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	69ba      	ldr	r2, [r7, #24]
 80083c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f000 80c0 	beq.w	8008552 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80083d2:	2300      	movs	r3, #0
 80083d4:	60fb      	str	r3, [r7, #12]
 80083d6:	4b66      	ldr	r3, [pc, #408]	; (8008570 <HAL_GPIO_Init+0x324>)
 80083d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083da:	4a65      	ldr	r2, [pc, #404]	; (8008570 <HAL_GPIO_Init+0x324>)
 80083dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083e0:	6453      	str	r3, [r2, #68]	; 0x44
 80083e2:	4b63      	ldr	r3, [pc, #396]	; (8008570 <HAL_GPIO_Init+0x324>)
 80083e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083ea:	60fb      	str	r3, [r7, #12]
 80083ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80083ee:	4a61      	ldr	r2, [pc, #388]	; (8008574 <HAL_GPIO_Init+0x328>)
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	089b      	lsrs	r3, r3, #2
 80083f4:	3302      	adds	r3, #2
 80083f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	f003 0303 	and.w	r3, r3, #3
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	220f      	movs	r2, #15
 8008406:	fa02 f303 	lsl.w	r3, r2, r3
 800840a:	43db      	mvns	r3, r3
 800840c:	69ba      	ldr	r2, [r7, #24]
 800840e:	4013      	ands	r3, r2
 8008410:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a58      	ldr	r2, [pc, #352]	; (8008578 <HAL_GPIO_Init+0x32c>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d037      	beq.n	800848a <HAL_GPIO_Init+0x23e>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a57      	ldr	r2, [pc, #348]	; (800857c <HAL_GPIO_Init+0x330>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d031      	beq.n	8008486 <HAL_GPIO_Init+0x23a>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a56      	ldr	r2, [pc, #344]	; (8008580 <HAL_GPIO_Init+0x334>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d02b      	beq.n	8008482 <HAL_GPIO_Init+0x236>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a55      	ldr	r2, [pc, #340]	; (8008584 <HAL_GPIO_Init+0x338>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d025      	beq.n	800847e <HAL_GPIO_Init+0x232>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a54      	ldr	r2, [pc, #336]	; (8008588 <HAL_GPIO_Init+0x33c>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d01f      	beq.n	800847a <HAL_GPIO_Init+0x22e>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a53      	ldr	r2, [pc, #332]	; (800858c <HAL_GPIO_Init+0x340>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d019      	beq.n	8008476 <HAL_GPIO_Init+0x22a>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4a52      	ldr	r2, [pc, #328]	; (8008590 <HAL_GPIO_Init+0x344>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d013      	beq.n	8008472 <HAL_GPIO_Init+0x226>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4a51      	ldr	r2, [pc, #324]	; (8008594 <HAL_GPIO_Init+0x348>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d00d      	beq.n	800846e <HAL_GPIO_Init+0x222>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4a50      	ldr	r2, [pc, #320]	; (8008598 <HAL_GPIO_Init+0x34c>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d007      	beq.n	800846a <HAL_GPIO_Init+0x21e>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4a4f      	ldr	r2, [pc, #316]	; (800859c <HAL_GPIO_Init+0x350>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d101      	bne.n	8008466 <HAL_GPIO_Init+0x21a>
 8008462:	2309      	movs	r3, #9
 8008464:	e012      	b.n	800848c <HAL_GPIO_Init+0x240>
 8008466:	230a      	movs	r3, #10
 8008468:	e010      	b.n	800848c <HAL_GPIO_Init+0x240>
 800846a:	2308      	movs	r3, #8
 800846c:	e00e      	b.n	800848c <HAL_GPIO_Init+0x240>
 800846e:	2307      	movs	r3, #7
 8008470:	e00c      	b.n	800848c <HAL_GPIO_Init+0x240>
 8008472:	2306      	movs	r3, #6
 8008474:	e00a      	b.n	800848c <HAL_GPIO_Init+0x240>
 8008476:	2305      	movs	r3, #5
 8008478:	e008      	b.n	800848c <HAL_GPIO_Init+0x240>
 800847a:	2304      	movs	r3, #4
 800847c:	e006      	b.n	800848c <HAL_GPIO_Init+0x240>
 800847e:	2303      	movs	r3, #3
 8008480:	e004      	b.n	800848c <HAL_GPIO_Init+0x240>
 8008482:	2302      	movs	r3, #2
 8008484:	e002      	b.n	800848c <HAL_GPIO_Init+0x240>
 8008486:	2301      	movs	r3, #1
 8008488:	e000      	b.n	800848c <HAL_GPIO_Init+0x240>
 800848a:	2300      	movs	r3, #0
 800848c:	69fa      	ldr	r2, [r7, #28]
 800848e:	f002 0203 	and.w	r2, r2, #3
 8008492:	0092      	lsls	r2, r2, #2
 8008494:	4093      	lsls	r3, r2
 8008496:	69ba      	ldr	r2, [r7, #24]
 8008498:	4313      	orrs	r3, r2
 800849a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800849c:	4935      	ldr	r1, [pc, #212]	; (8008574 <HAL_GPIO_Init+0x328>)
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	089b      	lsrs	r3, r3, #2
 80084a2:	3302      	adds	r3, #2
 80084a4:	69ba      	ldr	r2, [r7, #24]
 80084a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80084aa:	4b3d      	ldr	r3, [pc, #244]	; (80085a0 <HAL_GPIO_Init+0x354>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	43db      	mvns	r3, r3
 80084b4:	69ba      	ldr	r2, [r7, #24]
 80084b6:	4013      	ands	r3, r2
 80084b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d003      	beq.n	80084ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80084c6:	69ba      	ldr	r2, [r7, #24]
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80084ce:	4a34      	ldr	r2, [pc, #208]	; (80085a0 <HAL_GPIO_Init+0x354>)
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80084d4:	4b32      	ldr	r3, [pc, #200]	; (80085a0 <HAL_GPIO_Init+0x354>)
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	43db      	mvns	r3, r3
 80084de:	69ba      	ldr	r2, [r7, #24]
 80084e0:	4013      	ands	r3, r2
 80084e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d003      	beq.n	80084f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80084f0:	69ba      	ldr	r2, [r7, #24]
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	4313      	orrs	r3, r2
 80084f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80084f8:	4a29      	ldr	r2, [pc, #164]	; (80085a0 <HAL_GPIO_Init+0x354>)
 80084fa:	69bb      	ldr	r3, [r7, #24]
 80084fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80084fe:	4b28      	ldr	r3, [pc, #160]	; (80085a0 <HAL_GPIO_Init+0x354>)
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	43db      	mvns	r3, r3
 8008508:	69ba      	ldr	r2, [r7, #24]
 800850a:	4013      	ands	r3, r2
 800850c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008516:	2b00      	cmp	r3, #0
 8008518:	d003      	beq.n	8008522 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800851a:	69ba      	ldr	r2, [r7, #24]
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	4313      	orrs	r3, r2
 8008520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008522:	4a1f      	ldr	r2, [pc, #124]	; (80085a0 <HAL_GPIO_Init+0x354>)
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008528:	4b1d      	ldr	r3, [pc, #116]	; (80085a0 <HAL_GPIO_Init+0x354>)
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	43db      	mvns	r3, r3
 8008532:	69ba      	ldr	r2, [r7, #24]
 8008534:	4013      	ands	r3, r2
 8008536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008540:	2b00      	cmp	r3, #0
 8008542:	d003      	beq.n	800854c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008544:	69ba      	ldr	r2, [r7, #24]
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	4313      	orrs	r3, r2
 800854a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800854c:	4a14      	ldr	r2, [pc, #80]	; (80085a0 <HAL_GPIO_Init+0x354>)
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	3301      	adds	r3, #1
 8008556:	61fb      	str	r3, [r7, #28]
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	2b0f      	cmp	r3, #15
 800855c:	f67f ae84 	bls.w	8008268 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008560:	bf00      	nop
 8008562:	bf00      	nop
 8008564:	3724      	adds	r7, #36	; 0x24
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr
 800856e:	bf00      	nop
 8008570:	40023800 	.word	0x40023800
 8008574:	40013800 	.word	0x40013800
 8008578:	40020000 	.word	0x40020000
 800857c:	40020400 	.word	0x40020400
 8008580:	40020800 	.word	0x40020800
 8008584:	40020c00 	.word	0x40020c00
 8008588:	40021000 	.word	0x40021000
 800858c:	40021400 	.word	0x40021400
 8008590:	40021800 	.word	0x40021800
 8008594:	40021c00 	.word	0x40021c00
 8008598:	40022000 	.word	0x40022000
 800859c:	40022400 	.word	0x40022400
 80085a0:	40013c00 	.word	0x40013c00

080085a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	460b      	mov	r3, r1
 80085ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	691a      	ldr	r2, [r3, #16]
 80085b4:	887b      	ldrh	r3, [r7, #2]
 80085b6:	4013      	ands	r3, r2
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d002      	beq.n	80085c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80085bc:	2301      	movs	r3, #1
 80085be:	73fb      	strb	r3, [r7, #15]
 80085c0:	e001      	b.n	80085c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80085c2:	2300      	movs	r3, #0
 80085c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80085c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3714      	adds	r7, #20
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	460b      	mov	r3, r1
 80085de:	807b      	strh	r3, [r7, #2]
 80085e0:	4613      	mov	r3, r2
 80085e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80085e4:	787b      	ldrb	r3, [r7, #1]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d003      	beq.n	80085f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80085ea:	887a      	ldrh	r2, [r7, #2]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80085f0:	e003      	b.n	80085fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80085f2:	887b      	ldrh	r3, [r7, #2]
 80085f4:	041a      	lsls	r2, r3, #16
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	619a      	str	r2, [r3, #24]
}
 80085fa:	bf00      	nop
 80085fc:	370c      	adds	r7, #12
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr
	...

08008608 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	4603      	mov	r3, r0
 8008610:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008612:	4b08      	ldr	r3, [pc, #32]	; (8008634 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008614:	695a      	ldr	r2, [r3, #20]
 8008616:	88fb      	ldrh	r3, [r7, #6]
 8008618:	4013      	ands	r3, r2
 800861a:	2b00      	cmp	r3, #0
 800861c:	d006      	beq.n	800862c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800861e:	4a05      	ldr	r2, [pc, #20]	; (8008634 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008620:	88fb      	ldrh	r3, [r7, #6]
 8008622:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008624:	88fb      	ldrh	r3, [r7, #6]
 8008626:	4618      	mov	r0, r3
 8008628:	f7fa ff90 	bl	800354c <HAL_GPIO_EXTI_Callback>
  }
}
 800862c:	bf00      	nop
 800862e:	3708      	adds	r7, #8
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}
 8008634:	40013c00 	.word	0x40013c00

08008638 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d101      	bne.n	800864a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	e12b      	b.n	80088a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008650:	b2db      	uxtb	r3, r3
 8008652:	2b00      	cmp	r3, #0
 8008654:	d106      	bne.n	8008664 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f7fa f854 	bl	800270c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2224      	movs	r2, #36	; 0x24
 8008668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f022 0201 	bic.w	r2, r2, #1
 800867a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800868a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800869a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800869c:	f001 fd16 	bl	800a0cc <HAL_RCC_GetPCLK1Freq>
 80086a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	4a81      	ldr	r2, [pc, #516]	; (80088ac <HAL_I2C_Init+0x274>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d807      	bhi.n	80086bc <HAL_I2C_Init+0x84>
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	4a80      	ldr	r2, [pc, #512]	; (80088b0 <HAL_I2C_Init+0x278>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	bf94      	ite	ls
 80086b4:	2301      	movls	r3, #1
 80086b6:	2300      	movhi	r3, #0
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	e006      	b.n	80086ca <HAL_I2C_Init+0x92>
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	4a7d      	ldr	r2, [pc, #500]	; (80088b4 <HAL_I2C_Init+0x27c>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	bf94      	ite	ls
 80086c4:	2301      	movls	r3, #1
 80086c6:	2300      	movhi	r3, #0
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d001      	beq.n	80086d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	e0e7      	b.n	80088a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	4a78      	ldr	r2, [pc, #480]	; (80088b8 <HAL_I2C_Init+0x280>)
 80086d6:	fba2 2303 	umull	r2, r3, r2, r3
 80086da:	0c9b      	lsrs	r3, r3, #18
 80086dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	430a      	orrs	r2, r1
 80086f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	6a1b      	ldr	r3, [r3, #32]
 80086f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	4a6a      	ldr	r2, [pc, #424]	; (80088ac <HAL_I2C_Init+0x274>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d802      	bhi.n	800870c <HAL_I2C_Init+0xd4>
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	3301      	adds	r3, #1
 800870a:	e009      	b.n	8008720 <HAL_I2C_Init+0xe8>
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008712:	fb02 f303 	mul.w	r3, r2, r3
 8008716:	4a69      	ldr	r2, [pc, #420]	; (80088bc <HAL_I2C_Init+0x284>)
 8008718:	fba2 2303 	umull	r2, r3, r2, r3
 800871c:	099b      	lsrs	r3, r3, #6
 800871e:	3301      	adds	r3, #1
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	6812      	ldr	r2, [r2, #0]
 8008724:	430b      	orrs	r3, r1
 8008726:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	69db      	ldr	r3, [r3, #28]
 800872e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008732:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	495c      	ldr	r1, [pc, #368]	; (80088ac <HAL_I2C_Init+0x274>)
 800873c:	428b      	cmp	r3, r1
 800873e:	d819      	bhi.n	8008774 <HAL_I2C_Init+0x13c>
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	1e59      	subs	r1, r3, #1
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	005b      	lsls	r3, r3, #1
 800874a:	fbb1 f3f3 	udiv	r3, r1, r3
 800874e:	1c59      	adds	r1, r3, #1
 8008750:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008754:	400b      	ands	r3, r1
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00a      	beq.n	8008770 <HAL_I2C_Init+0x138>
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	1e59      	subs	r1, r3, #1
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	005b      	lsls	r3, r3, #1
 8008764:	fbb1 f3f3 	udiv	r3, r1, r3
 8008768:	3301      	adds	r3, #1
 800876a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800876e:	e051      	b.n	8008814 <HAL_I2C_Init+0x1dc>
 8008770:	2304      	movs	r3, #4
 8008772:	e04f      	b.n	8008814 <HAL_I2C_Init+0x1dc>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d111      	bne.n	80087a0 <HAL_I2C_Init+0x168>
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	1e58      	subs	r0, r3, #1
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6859      	ldr	r1, [r3, #4]
 8008784:	460b      	mov	r3, r1
 8008786:	005b      	lsls	r3, r3, #1
 8008788:	440b      	add	r3, r1
 800878a:	fbb0 f3f3 	udiv	r3, r0, r3
 800878e:	3301      	adds	r3, #1
 8008790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008794:	2b00      	cmp	r3, #0
 8008796:	bf0c      	ite	eq
 8008798:	2301      	moveq	r3, #1
 800879a:	2300      	movne	r3, #0
 800879c:	b2db      	uxtb	r3, r3
 800879e:	e012      	b.n	80087c6 <HAL_I2C_Init+0x18e>
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	1e58      	subs	r0, r3, #1
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6859      	ldr	r1, [r3, #4]
 80087a8:	460b      	mov	r3, r1
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	440b      	add	r3, r1
 80087ae:	0099      	lsls	r1, r3, #2
 80087b0:	440b      	add	r3, r1
 80087b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80087b6:	3301      	adds	r3, #1
 80087b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087bc:	2b00      	cmp	r3, #0
 80087be:	bf0c      	ite	eq
 80087c0:	2301      	moveq	r3, #1
 80087c2:	2300      	movne	r3, #0
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d001      	beq.n	80087ce <HAL_I2C_Init+0x196>
 80087ca:	2301      	movs	r3, #1
 80087cc:	e022      	b.n	8008814 <HAL_I2C_Init+0x1dc>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d10e      	bne.n	80087f4 <HAL_I2C_Init+0x1bc>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	1e58      	subs	r0, r3, #1
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6859      	ldr	r1, [r3, #4]
 80087de:	460b      	mov	r3, r1
 80087e0:	005b      	lsls	r3, r3, #1
 80087e2:	440b      	add	r3, r1
 80087e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80087e8:	3301      	adds	r3, #1
 80087ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087f2:	e00f      	b.n	8008814 <HAL_I2C_Init+0x1dc>
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	1e58      	subs	r0, r3, #1
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6859      	ldr	r1, [r3, #4]
 80087fc:	460b      	mov	r3, r1
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	440b      	add	r3, r1
 8008802:	0099      	lsls	r1, r3, #2
 8008804:	440b      	add	r3, r1
 8008806:	fbb0 f3f3 	udiv	r3, r0, r3
 800880a:	3301      	adds	r3, #1
 800880c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008810:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008814:	6879      	ldr	r1, [r7, #4]
 8008816:	6809      	ldr	r1, [r1, #0]
 8008818:	4313      	orrs	r3, r2
 800881a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	69da      	ldr	r2, [r3, #28]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6a1b      	ldr	r3, [r3, #32]
 800882e:	431a      	orrs	r2, r3
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	430a      	orrs	r2, r1
 8008836:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008842:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	6911      	ldr	r1, [r2, #16]
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	68d2      	ldr	r2, [r2, #12]
 800884e:	4311      	orrs	r1, r2
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	6812      	ldr	r2, [r2, #0]
 8008854:	430b      	orrs	r3, r1
 8008856:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	695a      	ldr	r2, [r3, #20]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	431a      	orrs	r2, r3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	430a      	orrs	r2, r1
 8008872:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f042 0201 	orr.w	r2, r2, #1
 8008882:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2220      	movs	r2, #32
 800888e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2200      	movs	r2, #0
 8008896:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	000186a0 	.word	0x000186a0
 80088b0:	001e847f 	.word	0x001e847f
 80088b4:	003d08ff 	.word	0x003d08ff
 80088b8:	431bde83 	.word	0x431bde83
 80088bc:	10624dd3 	.word	0x10624dd3

080088c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b088      	sub	sp, #32
 80088c4:	af02      	add	r7, sp, #8
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	4608      	mov	r0, r1
 80088ca:	4611      	mov	r1, r2
 80088cc:	461a      	mov	r2, r3
 80088ce:	4603      	mov	r3, r0
 80088d0:	817b      	strh	r3, [r7, #10]
 80088d2:	460b      	mov	r3, r1
 80088d4:	813b      	strh	r3, [r7, #8]
 80088d6:	4613      	mov	r3, r2
 80088d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80088da:	f7ff f901 	bl	8007ae0 <HAL_GetTick>
 80088de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	2b20      	cmp	r3, #32
 80088ea:	f040 80d9 	bne.w	8008aa0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	9300      	str	r3, [sp, #0]
 80088f2:	2319      	movs	r3, #25
 80088f4:	2201      	movs	r2, #1
 80088f6:	496d      	ldr	r1, [pc, #436]	; (8008aac <HAL_I2C_Mem_Write+0x1ec>)
 80088f8:	68f8      	ldr	r0, [r7, #12]
 80088fa:	f000 fcb5 	bl	8009268 <I2C_WaitOnFlagUntilTimeout>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d001      	beq.n	8008908 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008904:	2302      	movs	r3, #2
 8008906:	e0cc      	b.n	8008aa2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800890e:	2b01      	cmp	r3, #1
 8008910:	d101      	bne.n	8008916 <HAL_I2C_Mem_Write+0x56>
 8008912:	2302      	movs	r3, #2
 8008914:	e0c5      	b.n	8008aa2 <HAL_I2C_Mem_Write+0x1e2>
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2201      	movs	r2, #1
 800891a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 0301 	and.w	r3, r3, #1
 8008928:	2b01      	cmp	r3, #1
 800892a:	d007      	beq.n	800893c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f042 0201 	orr.w	r2, r2, #1
 800893a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800894a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2221      	movs	r2, #33	; 0x21
 8008950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2240      	movs	r2, #64	; 0x40
 8008958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2200      	movs	r2, #0
 8008960:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	6a3a      	ldr	r2, [r7, #32]
 8008966:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800896c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008972:	b29a      	uxth	r2, r3
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	4a4d      	ldr	r2, [pc, #308]	; (8008ab0 <HAL_I2C_Mem_Write+0x1f0>)
 800897c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800897e:	88f8      	ldrh	r0, [r7, #6]
 8008980:	893a      	ldrh	r2, [r7, #8]
 8008982:	8979      	ldrh	r1, [r7, #10]
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	9301      	str	r3, [sp, #4]
 8008988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898a:	9300      	str	r3, [sp, #0]
 800898c:	4603      	mov	r3, r0
 800898e:	68f8      	ldr	r0, [r7, #12]
 8008990:	f000 faec 	bl	8008f6c <I2C_RequestMemoryWrite>
 8008994:	4603      	mov	r3, r0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d052      	beq.n	8008a40 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800899a:	2301      	movs	r3, #1
 800899c:	e081      	b.n	8008aa2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800899e:	697a      	ldr	r2, [r7, #20]
 80089a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089a2:	68f8      	ldr	r0, [r7, #12]
 80089a4:	f000 fd36 	bl	8009414 <I2C_WaitOnTXEFlagUntilTimeout>
 80089a8:	4603      	mov	r3, r0
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d00d      	beq.n	80089ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b2:	2b04      	cmp	r3, #4
 80089b4:	d107      	bne.n	80089c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80089c6:	2301      	movs	r3, #1
 80089c8:	e06b      	b.n	8008aa2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ce:	781a      	ldrb	r2, [r3, #0]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089da:	1c5a      	adds	r2, r3, #1
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089e4:	3b01      	subs	r3, #1
 80089e6:	b29a      	uxth	r2, r3
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	3b01      	subs	r3, #1
 80089f4:	b29a      	uxth	r2, r3
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	695b      	ldr	r3, [r3, #20]
 8008a00:	f003 0304 	and.w	r3, r3, #4
 8008a04:	2b04      	cmp	r3, #4
 8008a06:	d11b      	bne.n	8008a40 <HAL_I2C_Mem_Write+0x180>
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d017      	beq.n	8008a40 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a14:	781a      	ldrb	r2, [r3, #0]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a20:	1c5a      	adds	r2, r3, #1
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a2a:	3b01      	subs	r3, #1
 8008a2c:	b29a      	uxth	r2, r3
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	3b01      	subs	r3, #1
 8008a3a:	b29a      	uxth	r2, r3
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d1aa      	bne.n	800899e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a48:	697a      	ldr	r2, [r7, #20]
 8008a4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a4c:	68f8      	ldr	r0, [r7, #12]
 8008a4e:	f000 fd22 	bl	8009496 <I2C_WaitOnBTFFlagUntilTimeout>
 8008a52:	4603      	mov	r3, r0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00d      	beq.n	8008a74 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5c:	2b04      	cmp	r3, #4
 8008a5e:	d107      	bne.n	8008a70 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a6e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e016      	b.n	8008aa2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2220      	movs	r2, #32
 8008a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2200      	movs	r2, #0
 8008a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	e000      	b.n	8008aa2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008aa0:	2302      	movs	r3, #2
  }
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3718      	adds	r7, #24
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	00100002 	.word	0x00100002
 8008ab0:	ffff0000 	.word	0xffff0000

08008ab4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b08c      	sub	sp, #48	; 0x30
 8008ab8:	af02      	add	r7, sp, #8
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	4608      	mov	r0, r1
 8008abe:	4611      	mov	r1, r2
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	817b      	strh	r3, [r7, #10]
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	813b      	strh	r3, [r7, #8]
 8008aca:	4613      	mov	r3, r2
 8008acc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008ace:	f7ff f807 	bl	8007ae0 <HAL_GetTick>
 8008ad2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	2b20      	cmp	r3, #32
 8008ade:	f040 8208 	bne.w	8008ef2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae4:	9300      	str	r3, [sp, #0]
 8008ae6:	2319      	movs	r3, #25
 8008ae8:	2201      	movs	r2, #1
 8008aea:	497b      	ldr	r1, [pc, #492]	; (8008cd8 <HAL_I2C_Mem_Read+0x224>)
 8008aec:	68f8      	ldr	r0, [r7, #12]
 8008aee:	f000 fbbb 	bl	8009268 <I2C_WaitOnFlagUntilTimeout>
 8008af2:	4603      	mov	r3, r0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d001      	beq.n	8008afc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008af8:	2302      	movs	r3, #2
 8008afa:	e1fb      	b.n	8008ef4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d101      	bne.n	8008b0a <HAL_I2C_Mem_Read+0x56>
 8008b06:	2302      	movs	r3, #2
 8008b08:	e1f4      	b.n	8008ef4 <HAL_I2C_Mem_Read+0x440>
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f003 0301 	and.w	r3, r3, #1
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d007      	beq.n	8008b30 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f042 0201 	orr.w	r2, r2, #1
 8008b2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2222      	movs	r2, #34	; 0x22
 8008b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2240      	movs	r2, #64	; 0x40
 8008b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2200      	movs	r2, #0
 8008b54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008b60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b66:	b29a      	uxth	r2, r3
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	4a5b      	ldr	r2, [pc, #364]	; (8008cdc <HAL_I2C_Mem_Read+0x228>)
 8008b70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008b72:	88f8      	ldrh	r0, [r7, #6]
 8008b74:	893a      	ldrh	r2, [r7, #8]
 8008b76:	8979      	ldrh	r1, [r7, #10]
 8008b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7a:	9301      	str	r3, [sp, #4]
 8008b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b7e:	9300      	str	r3, [sp, #0]
 8008b80:	4603      	mov	r3, r0
 8008b82:	68f8      	ldr	r0, [r7, #12]
 8008b84:	f000 fa88 	bl	8009098 <I2C_RequestMemoryRead>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d001      	beq.n	8008b92 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e1b0      	b.n	8008ef4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d113      	bne.n	8008bc2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	623b      	str	r3, [r7, #32]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	695b      	ldr	r3, [r3, #20]
 8008ba4:	623b      	str	r3, [r7, #32]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	699b      	ldr	r3, [r3, #24]
 8008bac:	623b      	str	r3, [r7, #32]
 8008bae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bbe:	601a      	str	r2, [r3, #0]
 8008bc0:	e184      	b.n	8008ecc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d11b      	bne.n	8008c02 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bda:	2300      	movs	r3, #0
 8008bdc:	61fb      	str	r3, [r7, #28]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	695b      	ldr	r3, [r3, #20]
 8008be4:	61fb      	str	r3, [r7, #28]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	699b      	ldr	r3, [r3, #24]
 8008bec:	61fb      	str	r3, [r7, #28]
 8008bee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bfe:	601a      	str	r2, [r3, #0]
 8008c00:	e164      	b.n	8008ecc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	d11b      	bne.n	8008c42 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c18:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	61bb      	str	r3, [r7, #24]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	695b      	ldr	r3, [r3, #20]
 8008c34:	61bb      	str	r3, [r7, #24]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	699b      	ldr	r3, [r3, #24]
 8008c3c:	61bb      	str	r3, [r7, #24]
 8008c3e:	69bb      	ldr	r3, [r7, #24]
 8008c40:	e144      	b.n	8008ecc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c42:	2300      	movs	r3, #0
 8008c44:	617b      	str	r3, [r7, #20]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	695b      	ldr	r3, [r3, #20]
 8008c4c:	617b      	str	r3, [r7, #20]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	699b      	ldr	r3, [r3, #24]
 8008c54:	617b      	str	r3, [r7, #20]
 8008c56:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008c58:	e138      	b.n	8008ecc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c5e:	2b03      	cmp	r3, #3
 8008c60:	f200 80f1 	bhi.w	8008e46 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d123      	bne.n	8008cb4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008c70:	68f8      	ldr	r0, [r7, #12]
 8008c72:	f000 fc51 	bl	8009518 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d001      	beq.n	8008c80 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e139      	b.n	8008ef4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	691a      	ldr	r2, [r3, #16]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8a:	b2d2      	uxtb	r2, r2
 8008c8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c92:	1c5a      	adds	r2, r3, #1
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	b29a      	uxth	r2, r3
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	3b01      	subs	r3, #1
 8008cac:	b29a      	uxth	r2, r3
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008cb2:	e10b      	b.n	8008ecc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	d14e      	bne.n	8008d5a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbe:	9300      	str	r3, [sp, #0]
 8008cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	4906      	ldr	r1, [pc, #24]	; (8008ce0 <HAL_I2C_Mem_Read+0x22c>)
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f000 face 	bl	8009268 <I2C_WaitOnFlagUntilTimeout>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d008      	beq.n	8008ce4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e10e      	b.n	8008ef4 <HAL_I2C_Mem_Read+0x440>
 8008cd6:	bf00      	nop
 8008cd8:	00100002 	.word	0x00100002
 8008cdc:	ffff0000 	.word	0xffff0000
 8008ce0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	691a      	ldr	r2, [r3, #16]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfe:	b2d2      	uxtb	r2, r2
 8008d00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d06:	1c5a      	adds	r2, r3, #1
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d10:	3b01      	subs	r3, #1
 8008d12:	b29a      	uxth	r2, r3
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	3b01      	subs	r3, #1
 8008d20:	b29a      	uxth	r2, r3
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	691a      	ldr	r2, [r3, #16]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d30:	b2d2      	uxtb	r2, r2
 8008d32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d38:	1c5a      	adds	r2, r3, #1
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d42:	3b01      	subs	r3, #1
 8008d44:	b29a      	uxth	r2, r3
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	3b01      	subs	r3, #1
 8008d52:	b29a      	uxth	r2, r3
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008d58:	e0b8      	b.n	8008ecc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5c:	9300      	str	r3, [sp, #0]
 8008d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d60:	2200      	movs	r2, #0
 8008d62:	4966      	ldr	r1, [pc, #408]	; (8008efc <HAL_I2C_Mem_Read+0x448>)
 8008d64:	68f8      	ldr	r0, [r7, #12]
 8008d66:	f000 fa7f 	bl	8009268 <I2C_WaitOnFlagUntilTimeout>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d001      	beq.n	8008d74 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	e0bf      	b.n	8008ef4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	691a      	ldr	r2, [r3, #16]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8e:	b2d2      	uxtb	r2, r2
 8008d90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d96:	1c5a      	adds	r2, r3, #1
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008da0:	3b01      	subs	r3, #1
 8008da2:	b29a      	uxth	r2, r3
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	3b01      	subs	r3, #1
 8008db0:	b29a      	uxth	r2, r3
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db8:	9300      	str	r3, [sp, #0]
 8008dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	494f      	ldr	r1, [pc, #316]	; (8008efc <HAL_I2C_Mem_Read+0x448>)
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	f000 fa51 	bl	8009268 <I2C_WaitOnFlagUntilTimeout>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d001      	beq.n	8008dd0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e091      	b.n	8008ef4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008dde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	691a      	ldr	r2, [r3, #16]
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dea:	b2d2      	uxtb	r2, r2
 8008dec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df2:	1c5a      	adds	r2, r3, #1
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	b29a      	uxth	r2, r3
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	3b01      	subs	r3, #1
 8008e0c:	b29a      	uxth	r2, r3
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	691a      	ldr	r2, [r3, #16]
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1c:	b2d2      	uxtb	r2, r2
 8008e1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e24:	1c5a      	adds	r2, r3, #1
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	b29a      	uxth	r2, r3
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	b29a      	uxth	r2, r3
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008e44:	e042      	b.n	8008ecc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	f000 fb64 	bl	8009518 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d001      	beq.n	8008e5a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	e04c      	b.n	8008ef4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	691a      	ldr	r2, [r3, #16]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e64:	b2d2      	uxtb	r2, r2
 8008e66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6c:	1c5a      	adds	r2, r3, #1
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e76:	3b01      	subs	r3, #1
 8008e78:	b29a      	uxth	r2, r3
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	3b01      	subs	r3, #1
 8008e86:	b29a      	uxth	r2, r3
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	695b      	ldr	r3, [r3, #20]
 8008e92:	f003 0304 	and.w	r3, r3, #4
 8008e96:	2b04      	cmp	r3, #4
 8008e98:	d118      	bne.n	8008ecc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	691a      	ldr	r2, [r3, #16]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea4:	b2d2      	uxtb	r2, r2
 8008ea6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eac:	1c5a      	adds	r2, r3, #1
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eb6:	3b01      	subs	r3, #1
 8008eb8:	b29a      	uxth	r2, r3
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	3b01      	subs	r3, #1
 8008ec6:	b29a      	uxth	r2, r3
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	f47f aec2 	bne.w	8008c5a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2220      	movs	r2, #32
 8008eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	e000      	b.n	8008ef4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008ef2:	2302      	movs	r3, #2
  }
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3728      	adds	r7, #40	; 0x28
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	00010004 	.word	0x00010004

08008f00 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	2b20      	cmp	r3, #32
 8008f12:	d124      	bne.n	8008f5e <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2228      	movs	r2, #40	; 0x28
 8008f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f003 0301 	and.w	r3, r3, #1
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d007      	beq.n	8008f3a <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f042 0201 	orr.w	r2, r2, #1
 8008f38:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008f48:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	685a      	ldr	r2, [r3, #4]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8008f58:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	e000      	b.n	8008f60 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8008f5e:	2302      	movs	r3, #2
  }
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b088      	sub	sp, #32
 8008f70:	af02      	add	r7, sp, #8
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	4608      	mov	r0, r1
 8008f76:	4611      	mov	r1, r2
 8008f78:	461a      	mov	r2, r3
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	817b      	strh	r3, [r7, #10]
 8008f7e:	460b      	mov	r3, r1
 8008f80:	813b      	strh	r3, [r7, #8]
 8008f82:	4613      	mov	r3, r2
 8008f84:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f98:	9300      	str	r3, [sp, #0]
 8008f9a:	6a3b      	ldr	r3, [r7, #32]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008fa2:	68f8      	ldr	r0, [r7, #12]
 8008fa4:	f000 f960 	bl	8009268 <I2C_WaitOnFlagUntilTimeout>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d00d      	beq.n	8008fca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fbc:	d103      	bne.n	8008fc6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008fc4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008fc6:	2303      	movs	r3, #3
 8008fc8:	e05f      	b.n	800908a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008fca:	897b      	ldrh	r3, [r7, #10]
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	461a      	mov	r2, r3
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008fd8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fdc:	6a3a      	ldr	r2, [r7, #32]
 8008fde:	492d      	ldr	r1, [pc, #180]	; (8009094 <I2C_RequestMemoryWrite+0x128>)
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f000 f998 	bl	8009316 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d001      	beq.n	8008ff0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008fec:	2301      	movs	r3, #1
 8008fee:	e04c      	b.n	800908a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	617b      	str	r3, [r7, #20]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	695b      	ldr	r3, [r3, #20]
 8008ffa:	617b      	str	r3, [r7, #20]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	699b      	ldr	r3, [r3, #24]
 8009002:	617b      	str	r3, [r7, #20]
 8009004:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009008:	6a39      	ldr	r1, [r7, #32]
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f000 fa02 	bl	8009414 <I2C_WaitOnTXEFlagUntilTimeout>
 8009010:	4603      	mov	r3, r0
 8009012:	2b00      	cmp	r3, #0
 8009014:	d00d      	beq.n	8009032 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800901a:	2b04      	cmp	r3, #4
 800901c:	d107      	bne.n	800902e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800902c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	e02b      	b.n	800908a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009032:	88fb      	ldrh	r3, [r7, #6]
 8009034:	2b01      	cmp	r3, #1
 8009036:	d105      	bne.n	8009044 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009038:	893b      	ldrh	r3, [r7, #8]
 800903a:	b2da      	uxtb	r2, r3
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	611a      	str	r2, [r3, #16]
 8009042:	e021      	b.n	8009088 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009044:	893b      	ldrh	r3, [r7, #8]
 8009046:	0a1b      	lsrs	r3, r3, #8
 8009048:	b29b      	uxth	r3, r3
 800904a:	b2da      	uxtb	r2, r3
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009054:	6a39      	ldr	r1, [r7, #32]
 8009056:	68f8      	ldr	r0, [r7, #12]
 8009058:	f000 f9dc 	bl	8009414 <I2C_WaitOnTXEFlagUntilTimeout>
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d00d      	beq.n	800907e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009066:	2b04      	cmp	r3, #4
 8009068:	d107      	bne.n	800907a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009078:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	e005      	b.n	800908a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800907e:	893b      	ldrh	r3, [r7, #8]
 8009080:	b2da      	uxtb	r2, r3
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009088:	2300      	movs	r3, #0
}
 800908a:	4618      	mov	r0, r3
 800908c:	3718      	adds	r7, #24
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	00010002 	.word	0x00010002

08009098 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b088      	sub	sp, #32
 800909c:	af02      	add	r7, sp, #8
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	4608      	mov	r0, r1
 80090a2:	4611      	mov	r1, r2
 80090a4:	461a      	mov	r2, r3
 80090a6:	4603      	mov	r3, r0
 80090a8:	817b      	strh	r3, [r7, #10]
 80090aa:	460b      	mov	r3, r1
 80090ac:	813b      	strh	r3, [r7, #8]
 80090ae:	4613      	mov	r3, r2
 80090b0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80090c0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80090d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d4:	9300      	str	r3, [sp, #0]
 80090d6:	6a3b      	ldr	r3, [r7, #32]
 80090d8:	2200      	movs	r2, #0
 80090da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80090de:	68f8      	ldr	r0, [r7, #12]
 80090e0:	f000 f8c2 	bl	8009268 <I2C_WaitOnFlagUntilTimeout>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d00d      	beq.n	8009106 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090f8:	d103      	bne.n	8009102 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009100:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009102:	2303      	movs	r3, #3
 8009104:	e0aa      	b.n	800925c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009106:	897b      	ldrh	r3, [r7, #10]
 8009108:	b2db      	uxtb	r3, r3
 800910a:	461a      	mov	r2, r3
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009114:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009118:	6a3a      	ldr	r2, [r7, #32]
 800911a:	4952      	ldr	r1, [pc, #328]	; (8009264 <I2C_RequestMemoryRead+0x1cc>)
 800911c:	68f8      	ldr	r0, [r7, #12]
 800911e:	f000 f8fa 	bl	8009316 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009122:	4603      	mov	r3, r0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d001      	beq.n	800912c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	e097      	b.n	800925c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800912c:	2300      	movs	r3, #0
 800912e:	617b      	str	r3, [r7, #20]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	695b      	ldr	r3, [r3, #20]
 8009136:	617b      	str	r3, [r7, #20]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	699b      	ldr	r3, [r3, #24]
 800913e:	617b      	str	r3, [r7, #20]
 8009140:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009144:	6a39      	ldr	r1, [r7, #32]
 8009146:	68f8      	ldr	r0, [r7, #12]
 8009148:	f000 f964 	bl	8009414 <I2C_WaitOnTXEFlagUntilTimeout>
 800914c:	4603      	mov	r3, r0
 800914e:	2b00      	cmp	r3, #0
 8009150:	d00d      	beq.n	800916e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009156:	2b04      	cmp	r3, #4
 8009158:	d107      	bne.n	800916a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009168:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	e076      	b.n	800925c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800916e:	88fb      	ldrh	r3, [r7, #6]
 8009170:	2b01      	cmp	r3, #1
 8009172:	d105      	bne.n	8009180 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009174:	893b      	ldrh	r3, [r7, #8]
 8009176:	b2da      	uxtb	r2, r3
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	611a      	str	r2, [r3, #16]
 800917e:	e021      	b.n	80091c4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009180:	893b      	ldrh	r3, [r7, #8]
 8009182:	0a1b      	lsrs	r3, r3, #8
 8009184:	b29b      	uxth	r3, r3
 8009186:	b2da      	uxtb	r2, r3
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800918e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009190:	6a39      	ldr	r1, [r7, #32]
 8009192:	68f8      	ldr	r0, [r7, #12]
 8009194:	f000 f93e 	bl	8009414 <I2C_WaitOnTXEFlagUntilTimeout>
 8009198:	4603      	mov	r3, r0
 800919a:	2b00      	cmp	r3, #0
 800919c:	d00d      	beq.n	80091ba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091a2:	2b04      	cmp	r3, #4
 80091a4:	d107      	bne.n	80091b6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	e050      	b.n	800925c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80091ba:	893b      	ldrh	r3, [r7, #8]
 80091bc:	b2da      	uxtb	r2, r3
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80091c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091c6:	6a39      	ldr	r1, [r7, #32]
 80091c8:	68f8      	ldr	r0, [r7, #12]
 80091ca:	f000 f923 	bl	8009414 <I2C_WaitOnTXEFlagUntilTimeout>
 80091ce:	4603      	mov	r3, r0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00d      	beq.n	80091f0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d8:	2b04      	cmp	r3, #4
 80091da:	d107      	bne.n	80091ec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091ea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80091ec:	2301      	movs	r3, #1
 80091ee:	e035      	b.n	800925c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80091fe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009202:	9300      	str	r3, [sp, #0]
 8009204:	6a3b      	ldr	r3, [r7, #32]
 8009206:	2200      	movs	r2, #0
 8009208:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800920c:	68f8      	ldr	r0, [r7, #12]
 800920e:	f000 f82b 	bl	8009268 <I2C_WaitOnFlagUntilTimeout>
 8009212:	4603      	mov	r3, r0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00d      	beq.n	8009234 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009226:	d103      	bne.n	8009230 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800922e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009230:	2303      	movs	r3, #3
 8009232:	e013      	b.n	800925c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009234:	897b      	ldrh	r3, [r7, #10]
 8009236:	b2db      	uxtb	r3, r3
 8009238:	f043 0301 	orr.w	r3, r3, #1
 800923c:	b2da      	uxtb	r2, r3
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009246:	6a3a      	ldr	r2, [r7, #32]
 8009248:	4906      	ldr	r1, [pc, #24]	; (8009264 <I2C_RequestMemoryRead+0x1cc>)
 800924a:	68f8      	ldr	r0, [r7, #12]
 800924c:	f000 f863 	bl	8009316 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009250:	4603      	mov	r3, r0
 8009252:	2b00      	cmp	r3, #0
 8009254:	d001      	beq.n	800925a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009256:	2301      	movs	r3, #1
 8009258:	e000      	b.n	800925c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800925a:	2300      	movs	r3, #0
}
 800925c:	4618      	mov	r0, r3
 800925e:	3718      	adds	r7, #24
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}
 8009264:	00010002 	.word	0x00010002

08009268 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	603b      	str	r3, [r7, #0]
 8009274:	4613      	mov	r3, r2
 8009276:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009278:	e025      	b.n	80092c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009280:	d021      	beq.n	80092c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009282:	f7fe fc2d 	bl	8007ae0 <HAL_GetTick>
 8009286:	4602      	mov	r2, r0
 8009288:	69bb      	ldr	r3, [r7, #24]
 800928a:	1ad3      	subs	r3, r2, r3
 800928c:	683a      	ldr	r2, [r7, #0]
 800928e:	429a      	cmp	r2, r3
 8009290:	d302      	bcc.n	8009298 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d116      	bne.n	80092c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2200      	movs	r2, #0
 800929c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2220      	movs	r2, #32
 80092a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2200      	movs	r2, #0
 80092aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b2:	f043 0220 	orr.w	r2, r3, #32
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2200      	movs	r2, #0
 80092be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80092c2:	2301      	movs	r3, #1
 80092c4:	e023      	b.n	800930e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	0c1b      	lsrs	r3, r3, #16
 80092ca:	b2db      	uxtb	r3, r3
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d10d      	bne.n	80092ec <I2C_WaitOnFlagUntilTimeout+0x84>
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	695b      	ldr	r3, [r3, #20]
 80092d6:	43da      	mvns	r2, r3
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	4013      	ands	r3, r2
 80092dc:	b29b      	uxth	r3, r3
 80092de:	2b00      	cmp	r3, #0
 80092e0:	bf0c      	ite	eq
 80092e2:	2301      	moveq	r3, #1
 80092e4:	2300      	movne	r3, #0
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	461a      	mov	r2, r3
 80092ea:	e00c      	b.n	8009306 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	699b      	ldr	r3, [r3, #24]
 80092f2:	43da      	mvns	r2, r3
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	4013      	ands	r3, r2
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	bf0c      	ite	eq
 80092fe:	2301      	moveq	r3, #1
 8009300:	2300      	movne	r3, #0
 8009302:	b2db      	uxtb	r3, r3
 8009304:	461a      	mov	r2, r3
 8009306:	79fb      	ldrb	r3, [r7, #7]
 8009308:	429a      	cmp	r2, r3
 800930a:	d0b6      	beq.n	800927a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800930c:	2300      	movs	r3, #0
}
 800930e:	4618      	mov	r0, r3
 8009310:	3710      	adds	r7, #16
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009316:	b580      	push	{r7, lr}
 8009318:	b084      	sub	sp, #16
 800931a:	af00      	add	r7, sp, #0
 800931c:	60f8      	str	r0, [r7, #12]
 800931e:	60b9      	str	r1, [r7, #8]
 8009320:	607a      	str	r2, [r7, #4]
 8009322:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009324:	e051      	b.n	80093ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	695b      	ldr	r3, [r3, #20]
 800932c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009334:	d123      	bne.n	800937e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009344:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800934e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2200      	movs	r2, #0
 8009354:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2220      	movs	r2, #32
 800935a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2200      	movs	r2, #0
 8009362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800936a:	f043 0204 	orr.w	r2, r3, #4
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2200      	movs	r2, #0
 8009376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800937a:	2301      	movs	r3, #1
 800937c:	e046      	b.n	800940c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009384:	d021      	beq.n	80093ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009386:	f7fe fbab 	bl	8007ae0 <HAL_GetTick>
 800938a:	4602      	mov	r2, r0
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	1ad3      	subs	r3, r2, r3
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	429a      	cmp	r2, r3
 8009394:	d302      	bcc.n	800939c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d116      	bne.n	80093ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2200      	movs	r2, #0
 80093a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2220      	movs	r2, #32
 80093a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2200      	movs	r2, #0
 80093ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b6:	f043 0220 	orr.w	r2, r3, #32
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2200      	movs	r2, #0
 80093c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	e020      	b.n	800940c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	0c1b      	lsrs	r3, r3, #16
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d10c      	bne.n	80093ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	695b      	ldr	r3, [r3, #20]
 80093da:	43da      	mvns	r2, r3
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	4013      	ands	r3, r2
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	bf14      	ite	ne
 80093e6:	2301      	movne	r3, #1
 80093e8:	2300      	moveq	r3, #0
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	e00b      	b.n	8009406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	699b      	ldr	r3, [r3, #24]
 80093f4:	43da      	mvns	r2, r3
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	4013      	ands	r3, r2
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	bf14      	ite	ne
 8009400:	2301      	movne	r3, #1
 8009402:	2300      	moveq	r3, #0
 8009404:	b2db      	uxtb	r3, r3
 8009406:	2b00      	cmp	r3, #0
 8009408:	d18d      	bne.n	8009326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009420:	e02d      	b.n	800947e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	f000 f8ce 	bl	80095c4 <I2C_IsAcknowledgeFailed>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d001      	beq.n	8009432 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	e02d      	b.n	800948e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009438:	d021      	beq.n	800947e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800943a:	f7fe fb51 	bl	8007ae0 <HAL_GetTick>
 800943e:	4602      	mov	r2, r0
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	1ad3      	subs	r3, r2, r3
 8009444:	68ba      	ldr	r2, [r7, #8]
 8009446:	429a      	cmp	r2, r3
 8009448:	d302      	bcc.n	8009450 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d116      	bne.n	800947e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2200      	movs	r2, #0
 8009454:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2220      	movs	r2, #32
 800945a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2200      	movs	r2, #0
 8009462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946a:	f043 0220 	orr.w	r2, r3, #32
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2200      	movs	r2, #0
 8009476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800947a:	2301      	movs	r3, #1
 800947c:	e007      	b.n	800948e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	695b      	ldr	r3, [r3, #20]
 8009484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009488:	2b80      	cmp	r3, #128	; 0x80
 800948a:	d1ca      	bne.n	8009422 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800948c:	2300      	movs	r3, #0
}
 800948e:	4618      	mov	r0, r3
 8009490:	3710      	adds	r7, #16
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}

08009496 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009496:	b580      	push	{r7, lr}
 8009498:	b084      	sub	sp, #16
 800949a:	af00      	add	r7, sp, #0
 800949c:	60f8      	str	r0, [r7, #12]
 800949e:	60b9      	str	r1, [r7, #8]
 80094a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80094a2:	e02d      	b.n	8009500 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80094a4:	68f8      	ldr	r0, [r7, #12]
 80094a6:	f000 f88d 	bl	80095c4 <I2C_IsAcknowledgeFailed>
 80094aa:	4603      	mov	r3, r0
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d001      	beq.n	80094b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80094b0:	2301      	movs	r3, #1
 80094b2:	e02d      	b.n	8009510 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ba:	d021      	beq.n	8009500 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094bc:	f7fe fb10 	bl	8007ae0 <HAL_GetTick>
 80094c0:	4602      	mov	r2, r0
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	1ad3      	subs	r3, r2, r3
 80094c6:	68ba      	ldr	r2, [r7, #8]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d302      	bcc.n	80094d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d116      	bne.n	8009500 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2200      	movs	r2, #0
 80094d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2220      	movs	r2, #32
 80094dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2200      	movs	r2, #0
 80094e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ec:	f043 0220 	orr.w	r2, r3, #32
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2200      	movs	r2, #0
 80094f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80094fc:	2301      	movs	r3, #1
 80094fe:	e007      	b.n	8009510 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	695b      	ldr	r3, [r3, #20]
 8009506:	f003 0304 	and.w	r3, r3, #4
 800950a:	2b04      	cmp	r3, #4
 800950c:	d1ca      	bne.n	80094a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800950e:	2300      	movs	r3, #0
}
 8009510:	4618      	mov	r0, r3
 8009512:	3710      	adds	r7, #16
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009524:	e042      	b.n	80095ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	695b      	ldr	r3, [r3, #20]
 800952c:	f003 0310 	and.w	r3, r3, #16
 8009530:	2b10      	cmp	r3, #16
 8009532:	d119      	bne.n	8009568 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f06f 0210 	mvn.w	r2, #16
 800953c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2200      	movs	r2, #0
 8009542:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2220      	movs	r2, #32
 8009548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2200      	movs	r2, #0
 8009550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2200      	movs	r2, #0
 8009560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009564:	2301      	movs	r3, #1
 8009566:	e029      	b.n	80095bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009568:	f7fe faba 	bl	8007ae0 <HAL_GetTick>
 800956c:	4602      	mov	r2, r0
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	1ad3      	subs	r3, r2, r3
 8009572:	68ba      	ldr	r2, [r7, #8]
 8009574:	429a      	cmp	r2, r3
 8009576:	d302      	bcc.n	800957e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d116      	bne.n	80095ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2200      	movs	r2, #0
 8009582:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2220      	movs	r2, #32
 8009588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2200      	movs	r2, #0
 8009590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009598:	f043 0220 	orr.w	r2, r3, #32
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80095a8:	2301      	movs	r3, #1
 80095aa:	e007      	b.n	80095bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	695b      	ldr	r3, [r3, #20]
 80095b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095b6:	2b40      	cmp	r3, #64	; 0x40
 80095b8:	d1b5      	bne.n	8009526 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80095ba:	2300      	movs	r3, #0
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3710      	adds	r7, #16
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	695b      	ldr	r3, [r3, #20]
 80095d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095da:	d11b      	bne.n	8009614 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80095e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2220      	movs	r2, #32
 80095f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009600:	f043 0204 	orr.w	r2, r3, #4
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009610:	2301      	movs	r3, #1
 8009612:	e000      	b.n	8009616 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009614:	2300      	movs	r3, #0
}
 8009616:	4618      	mov	r0, r3
 8009618:	370c      	adds	r7, #12
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr

08009622 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009622:	b480      	push	{r7}
 8009624:	b083      	sub	sp, #12
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
 800962a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009632:	b2db      	uxtb	r3, r3
 8009634:	2b20      	cmp	r3, #32
 8009636:	d129      	bne.n	800968c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2224      	movs	r2, #36	; 0x24
 800963c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f022 0201 	bic.w	r2, r2, #1
 800964e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f022 0210 	bic.w	r2, r2, #16
 800965e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	683a      	ldr	r2, [r7, #0]
 800966c:	430a      	orrs	r2, r1
 800966e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	681a      	ldr	r2, [r3, #0]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f042 0201 	orr.w	r2, r2, #1
 800967e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2220      	movs	r2, #32
 8009684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009688:	2300      	movs	r3, #0
 800968a:	e000      	b.n	800968e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800968c:	2302      	movs	r3, #2
  }
}
 800968e:	4618      	mov	r0, r3
 8009690:	370c      	adds	r7, #12
 8009692:	46bd      	mov	sp, r7
 8009694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009698:	4770      	bx	lr

0800969a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800969a:	b480      	push	{r7}
 800969c:	b085      	sub	sp, #20
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
 80096a2:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80096a4:	2300      	movs	r3, #0
 80096a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	2b20      	cmp	r3, #32
 80096b2:	d12a      	bne.n	800970a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2224      	movs	r2, #36	; 0x24
 80096b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f022 0201 	bic.w	r2, r2, #1
 80096ca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80096d4:	89fb      	ldrh	r3, [r7, #14]
 80096d6:	f023 030f 	bic.w	r3, r3, #15
 80096da:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	b29a      	uxth	r2, r3
 80096e0:	89fb      	ldrh	r3, [r7, #14]
 80096e2:	4313      	orrs	r3, r2
 80096e4:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	89fa      	ldrh	r2, [r7, #14]
 80096ec:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f042 0201 	orr.w	r2, r2, #1
 80096fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2220      	movs	r2, #32
 8009702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009706:	2300      	movs	r3, #0
 8009708:	e000      	b.n	800970c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800970a:	2302      	movs	r3, #2
  }
}
 800970c:	4618      	mov	r0, r3
 800970e:	3714      	adds	r7, #20
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr

08009718 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d101      	bne.n	800972a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	e034      	b.n	8009794 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8009732:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f245 5255 	movw	r2, #21845	; 0x5555
 800973c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	6852      	ldr	r2, [r2, #4]
 8009746:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	6892      	ldr	r2, [r2, #8]
 8009750:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8009752:	f7fe f9c5 	bl	8007ae0 <HAL_GetTick>
 8009756:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009758:	e00f      	b.n	800977a <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800975a:	f7fe f9c1 	bl	8007ae0 <HAL_GetTick>
 800975e:	4602      	mov	r2, r0
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	1ad3      	subs	r3, r2, r3
 8009764:	2b31      	cmp	r3, #49	; 0x31
 8009766:	d908      	bls.n	800977a <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	f003 0303 	and.w	r3, r3, #3
 8009772:	2b00      	cmp	r3, #0
 8009774:	d001      	beq.n	800977a <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8009776:	2303      	movs	r3, #3
 8009778:	e00c      	b.n	8009794 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	f003 0303 	and.w	r3, r3, #3
 8009784:	2b00      	cmp	r3, #0
 8009786:	d1e8      	bne.n	800975a <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8009790:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009792:	2300      	movs	r3, #0
}
 8009794:	4618      	mov	r0, r3
 8009796:	3710      	adds	r7, #16
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800979c:	b480      	push	{r7}
 800979e:	b083      	sub	sp, #12
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80097ac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80097ae:	2300      	movs	r3, #0
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	370c      	adds	r7, #12
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 80097c4:	4b05      	ldr	r3, [pc, #20]	; (80097dc <HAL_PWR_EnableWakeUpPin+0x20>)
 80097c6:	685a      	ldr	r2, [r3, #4]
 80097c8:	4904      	ldr	r1, [pc, #16]	; (80097dc <HAL_PWR_EnableWakeUpPin+0x20>)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4313      	orrs	r3, r2
 80097ce:	604b      	str	r3, [r1, #4]
}
 80097d0:	bf00      	nop
 80097d2:	370c      	adds	r7, #12
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr
 80097dc:	40007000 	.word	0x40007000

080097e0 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 80097e8:	4b06      	ldr	r3, [pc, #24]	; (8009804 <HAL_PWR_DisableWakeUpPin+0x24>)
 80097ea:	685a      	ldr	r2, [r3, #4]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	43db      	mvns	r3, r3
 80097f0:	4904      	ldr	r1, [pc, #16]	; (8009804 <HAL_PWR_DisableWakeUpPin+0x24>)
 80097f2:	4013      	ands	r3, r2
 80097f4:	604b      	str	r3, [r1, #4]
}
 80097f6:	bf00      	nop
 80097f8:	370c      	adds	r7, #12
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	40007000 	.word	0x40007000

08009808 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8009808:	b480      	push	{r7}
 800980a:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 800980c:	4b08      	ldr	r3, [pc, #32]	; (8009830 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a07      	ldr	r2, [pc, #28]	; (8009830 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8009812:	f043 0302 	orr.w	r3, r3, #2
 8009816:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009818:	4b06      	ldr	r3, [pc, #24]	; (8009834 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800981a:	691b      	ldr	r3, [r3, #16]
 800981c:	4a05      	ldr	r2, [pc, #20]	; (8009834 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800981e:	f043 0304 	orr.w	r3, r3, #4
 8009822:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8009824:	bf30      	wfi
}
 8009826:	bf00      	nop
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr
 8009830:	40007000 	.word	0x40007000
 8009834:	e000ed00 	.word	0xe000ed00

08009838 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b086      	sub	sp, #24
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d101      	bne.n	800984a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009846:	2301      	movs	r3, #1
 8009848:	e264      	b.n	8009d14 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f003 0301 	and.w	r3, r3, #1
 8009852:	2b00      	cmp	r3, #0
 8009854:	d075      	beq.n	8009942 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009856:	4ba3      	ldr	r3, [pc, #652]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	f003 030c 	and.w	r3, r3, #12
 800985e:	2b04      	cmp	r3, #4
 8009860:	d00c      	beq.n	800987c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009862:	4ba0      	ldr	r3, [pc, #640]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 8009864:	689b      	ldr	r3, [r3, #8]
 8009866:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800986a:	2b08      	cmp	r3, #8
 800986c:	d112      	bne.n	8009894 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800986e:	4b9d      	ldr	r3, [pc, #628]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009876:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800987a:	d10b      	bne.n	8009894 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800987c:	4b99      	ldr	r3, [pc, #612]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009884:	2b00      	cmp	r3, #0
 8009886:	d05b      	beq.n	8009940 <HAL_RCC_OscConfig+0x108>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d157      	bne.n	8009940 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009890:	2301      	movs	r3, #1
 8009892:	e23f      	b.n	8009d14 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800989c:	d106      	bne.n	80098ac <HAL_RCC_OscConfig+0x74>
 800989e:	4b91      	ldr	r3, [pc, #580]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a90      	ldr	r2, [pc, #576]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 80098a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098a8:	6013      	str	r3, [r2, #0]
 80098aa:	e01d      	b.n	80098e8 <HAL_RCC_OscConfig+0xb0>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80098b4:	d10c      	bne.n	80098d0 <HAL_RCC_OscConfig+0x98>
 80098b6:	4b8b      	ldr	r3, [pc, #556]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a8a      	ldr	r2, [pc, #552]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 80098bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80098c0:	6013      	str	r3, [r2, #0]
 80098c2:	4b88      	ldr	r3, [pc, #544]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a87      	ldr	r2, [pc, #540]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 80098c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098cc:	6013      	str	r3, [r2, #0]
 80098ce:	e00b      	b.n	80098e8 <HAL_RCC_OscConfig+0xb0>
 80098d0:	4b84      	ldr	r3, [pc, #528]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a83      	ldr	r2, [pc, #524]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 80098d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098da:	6013      	str	r3, [r2, #0]
 80098dc:	4b81      	ldr	r3, [pc, #516]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a80      	ldr	r2, [pc, #512]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 80098e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80098e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d013      	beq.n	8009918 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80098f0:	f7fe f8f6 	bl	8007ae0 <HAL_GetTick>
 80098f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80098f6:	e008      	b.n	800990a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80098f8:	f7fe f8f2 	bl	8007ae0 <HAL_GetTick>
 80098fc:	4602      	mov	r2, r0
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	1ad3      	subs	r3, r2, r3
 8009902:	2b64      	cmp	r3, #100	; 0x64
 8009904:	d901      	bls.n	800990a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009906:	2303      	movs	r3, #3
 8009908:	e204      	b.n	8009d14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800990a:	4b76      	ldr	r3, [pc, #472]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009912:	2b00      	cmp	r3, #0
 8009914:	d0f0      	beq.n	80098f8 <HAL_RCC_OscConfig+0xc0>
 8009916:	e014      	b.n	8009942 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009918:	f7fe f8e2 	bl	8007ae0 <HAL_GetTick>
 800991c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800991e:	e008      	b.n	8009932 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009920:	f7fe f8de 	bl	8007ae0 <HAL_GetTick>
 8009924:	4602      	mov	r2, r0
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	1ad3      	subs	r3, r2, r3
 800992a:	2b64      	cmp	r3, #100	; 0x64
 800992c:	d901      	bls.n	8009932 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800992e:	2303      	movs	r3, #3
 8009930:	e1f0      	b.n	8009d14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009932:	4b6c      	ldr	r3, [pc, #432]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800993a:	2b00      	cmp	r3, #0
 800993c:	d1f0      	bne.n	8009920 <HAL_RCC_OscConfig+0xe8>
 800993e:	e000      	b.n	8009942 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f003 0302 	and.w	r3, r3, #2
 800994a:	2b00      	cmp	r3, #0
 800994c:	d063      	beq.n	8009a16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800994e:	4b65      	ldr	r3, [pc, #404]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	f003 030c 	and.w	r3, r3, #12
 8009956:	2b00      	cmp	r3, #0
 8009958:	d00b      	beq.n	8009972 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800995a:	4b62      	ldr	r3, [pc, #392]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 800995c:	689b      	ldr	r3, [r3, #8]
 800995e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009962:	2b08      	cmp	r3, #8
 8009964:	d11c      	bne.n	80099a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009966:	4b5f      	ldr	r3, [pc, #380]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800996e:	2b00      	cmp	r3, #0
 8009970:	d116      	bne.n	80099a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009972:	4b5c      	ldr	r3, [pc, #368]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f003 0302 	and.w	r3, r3, #2
 800997a:	2b00      	cmp	r3, #0
 800997c:	d005      	beq.n	800998a <HAL_RCC_OscConfig+0x152>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	68db      	ldr	r3, [r3, #12]
 8009982:	2b01      	cmp	r3, #1
 8009984:	d001      	beq.n	800998a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009986:	2301      	movs	r3, #1
 8009988:	e1c4      	b.n	8009d14 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800998a:	4b56      	ldr	r3, [pc, #344]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	691b      	ldr	r3, [r3, #16]
 8009996:	00db      	lsls	r3, r3, #3
 8009998:	4952      	ldr	r1, [pc, #328]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 800999a:	4313      	orrs	r3, r2
 800999c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800999e:	e03a      	b.n	8009a16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	68db      	ldr	r3, [r3, #12]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d020      	beq.n	80099ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80099a8:	4b4f      	ldr	r3, [pc, #316]	; (8009ae8 <HAL_RCC_OscConfig+0x2b0>)
 80099aa:	2201      	movs	r2, #1
 80099ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099ae:	f7fe f897 	bl	8007ae0 <HAL_GetTick>
 80099b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099b4:	e008      	b.n	80099c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80099b6:	f7fe f893 	bl	8007ae0 <HAL_GetTick>
 80099ba:	4602      	mov	r2, r0
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	2b02      	cmp	r3, #2
 80099c2:	d901      	bls.n	80099c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80099c4:	2303      	movs	r3, #3
 80099c6:	e1a5      	b.n	8009d14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099c8:	4b46      	ldr	r3, [pc, #280]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f003 0302 	and.w	r3, r3, #2
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d0f0      	beq.n	80099b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099d4:	4b43      	ldr	r3, [pc, #268]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	691b      	ldr	r3, [r3, #16]
 80099e0:	00db      	lsls	r3, r3, #3
 80099e2:	4940      	ldr	r1, [pc, #256]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 80099e4:	4313      	orrs	r3, r2
 80099e6:	600b      	str	r3, [r1, #0]
 80099e8:	e015      	b.n	8009a16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80099ea:	4b3f      	ldr	r3, [pc, #252]	; (8009ae8 <HAL_RCC_OscConfig+0x2b0>)
 80099ec:	2200      	movs	r2, #0
 80099ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099f0:	f7fe f876 	bl	8007ae0 <HAL_GetTick>
 80099f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80099f6:	e008      	b.n	8009a0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80099f8:	f7fe f872 	bl	8007ae0 <HAL_GetTick>
 80099fc:	4602      	mov	r2, r0
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	1ad3      	subs	r3, r2, r3
 8009a02:	2b02      	cmp	r3, #2
 8009a04:	d901      	bls.n	8009a0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009a06:	2303      	movs	r3, #3
 8009a08:	e184      	b.n	8009d14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009a0a:	4b36      	ldr	r3, [pc, #216]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f003 0302 	and.w	r3, r3, #2
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d1f0      	bne.n	80099f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f003 0308 	and.w	r3, r3, #8
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d030      	beq.n	8009a84 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	695b      	ldr	r3, [r3, #20]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d016      	beq.n	8009a58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009a2a:	4b30      	ldr	r3, [pc, #192]	; (8009aec <HAL_RCC_OscConfig+0x2b4>)
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a30:	f7fe f856 	bl	8007ae0 <HAL_GetTick>
 8009a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a36:	e008      	b.n	8009a4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009a38:	f7fe f852 	bl	8007ae0 <HAL_GetTick>
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	1ad3      	subs	r3, r2, r3
 8009a42:	2b02      	cmp	r3, #2
 8009a44:	d901      	bls.n	8009a4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009a46:	2303      	movs	r3, #3
 8009a48:	e164      	b.n	8009d14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a4a:	4b26      	ldr	r3, [pc, #152]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 8009a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a4e:	f003 0302 	and.w	r3, r3, #2
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d0f0      	beq.n	8009a38 <HAL_RCC_OscConfig+0x200>
 8009a56:	e015      	b.n	8009a84 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009a58:	4b24      	ldr	r3, [pc, #144]	; (8009aec <HAL_RCC_OscConfig+0x2b4>)
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009a5e:	f7fe f83f 	bl	8007ae0 <HAL_GetTick>
 8009a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a64:	e008      	b.n	8009a78 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009a66:	f7fe f83b 	bl	8007ae0 <HAL_GetTick>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	1ad3      	subs	r3, r2, r3
 8009a70:	2b02      	cmp	r3, #2
 8009a72:	d901      	bls.n	8009a78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009a74:	2303      	movs	r3, #3
 8009a76:	e14d      	b.n	8009d14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a78:	4b1a      	ldr	r3, [pc, #104]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 8009a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a7c:	f003 0302 	and.w	r3, r3, #2
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d1f0      	bne.n	8009a66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f003 0304 	and.w	r3, r3, #4
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	f000 80a0 	beq.w	8009bd2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009a92:	2300      	movs	r3, #0
 8009a94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009a96:	4b13      	ldr	r3, [pc, #76]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 8009a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d10f      	bne.n	8009ac2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	60bb      	str	r3, [r7, #8]
 8009aa6:	4b0f      	ldr	r3, [pc, #60]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 8009aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aaa:	4a0e      	ldr	r2, [pc, #56]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 8009aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8009ab2:	4b0c      	ldr	r3, [pc, #48]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 8009ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009aba:	60bb      	str	r3, [r7, #8]
 8009abc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ac2:	4b0b      	ldr	r3, [pc, #44]	; (8009af0 <HAL_RCC_OscConfig+0x2b8>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d121      	bne.n	8009b12 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009ace:	4b08      	ldr	r3, [pc, #32]	; (8009af0 <HAL_RCC_OscConfig+0x2b8>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a07      	ldr	r2, [pc, #28]	; (8009af0 <HAL_RCC_OscConfig+0x2b8>)
 8009ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ad8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009ada:	f7fe f801 	bl	8007ae0 <HAL_GetTick>
 8009ade:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ae0:	e011      	b.n	8009b06 <HAL_RCC_OscConfig+0x2ce>
 8009ae2:	bf00      	nop
 8009ae4:	40023800 	.word	0x40023800
 8009ae8:	42470000 	.word	0x42470000
 8009aec:	42470e80 	.word	0x42470e80
 8009af0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009af4:	f7fd fff4 	bl	8007ae0 <HAL_GetTick>
 8009af8:	4602      	mov	r2, r0
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	1ad3      	subs	r3, r2, r3
 8009afe:	2b02      	cmp	r3, #2
 8009b00:	d901      	bls.n	8009b06 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009b02:	2303      	movs	r3, #3
 8009b04:	e106      	b.n	8009d14 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009b06:	4b85      	ldr	r3, [pc, #532]	; (8009d1c <HAL_RCC_OscConfig+0x4e4>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d0f0      	beq.n	8009af4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d106      	bne.n	8009b28 <HAL_RCC_OscConfig+0x2f0>
 8009b1a:	4b81      	ldr	r3, [pc, #516]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b1e:	4a80      	ldr	r2, [pc, #512]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009b20:	f043 0301 	orr.w	r3, r3, #1
 8009b24:	6713      	str	r3, [r2, #112]	; 0x70
 8009b26:	e01c      	b.n	8009b62 <HAL_RCC_OscConfig+0x32a>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	2b05      	cmp	r3, #5
 8009b2e:	d10c      	bne.n	8009b4a <HAL_RCC_OscConfig+0x312>
 8009b30:	4b7b      	ldr	r3, [pc, #492]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b34:	4a7a      	ldr	r2, [pc, #488]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009b36:	f043 0304 	orr.w	r3, r3, #4
 8009b3a:	6713      	str	r3, [r2, #112]	; 0x70
 8009b3c:	4b78      	ldr	r3, [pc, #480]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b40:	4a77      	ldr	r2, [pc, #476]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009b42:	f043 0301 	orr.w	r3, r3, #1
 8009b46:	6713      	str	r3, [r2, #112]	; 0x70
 8009b48:	e00b      	b.n	8009b62 <HAL_RCC_OscConfig+0x32a>
 8009b4a:	4b75      	ldr	r3, [pc, #468]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b4e:	4a74      	ldr	r2, [pc, #464]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009b50:	f023 0301 	bic.w	r3, r3, #1
 8009b54:	6713      	str	r3, [r2, #112]	; 0x70
 8009b56:	4b72      	ldr	r3, [pc, #456]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b5a:	4a71      	ldr	r2, [pc, #452]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009b5c:	f023 0304 	bic.w	r3, r3, #4
 8009b60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	689b      	ldr	r3, [r3, #8]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d015      	beq.n	8009b96 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b6a:	f7fd ffb9 	bl	8007ae0 <HAL_GetTick>
 8009b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b70:	e00a      	b.n	8009b88 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009b72:	f7fd ffb5 	bl	8007ae0 <HAL_GetTick>
 8009b76:	4602      	mov	r2, r0
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	1ad3      	subs	r3, r2, r3
 8009b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d901      	bls.n	8009b88 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009b84:	2303      	movs	r3, #3
 8009b86:	e0c5      	b.n	8009d14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b88:	4b65      	ldr	r3, [pc, #404]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b8c:	f003 0302 	and.w	r3, r3, #2
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d0ee      	beq.n	8009b72 <HAL_RCC_OscConfig+0x33a>
 8009b94:	e014      	b.n	8009bc0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009b96:	f7fd ffa3 	bl	8007ae0 <HAL_GetTick>
 8009b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009b9c:	e00a      	b.n	8009bb4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009b9e:	f7fd ff9f 	bl	8007ae0 <HAL_GetTick>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	1ad3      	subs	r3, r2, r3
 8009ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d901      	bls.n	8009bb4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009bb0:	2303      	movs	r3, #3
 8009bb2:	e0af      	b.n	8009d14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009bb4:	4b5a      	ldr	r3, [pc, #360]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bb8:	f003 0302 	and.w	r3, r3, #2
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d1ee      	bne.n	8009b9e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009bc0:	7dfb      	ldrb	r3, [r7, #23]
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d105      	bne.n	8009bd2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009bc6:	4b56      	ldr	r3, [pc, #344]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bca:	4a55      	ldr	r2, [pc, #340]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009bd0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	699b      	ldr	r3, [r3, #24]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	f000 809b 	beq.w	8009d12 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009bdc:	4b50      	ldr	r3, [pc, #320]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009bde:	689b      	ldr	r3, [r3, #8]
 8009be0:	f003 030c 	and.w	r3, r3, #12
 8009be4:	2b08      	cmp	r3, #8
 8009be6:	d05c      	beq.n	8009ca2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	699b      	ldr	r3, [r3, #24]
 8009bec:	2b02      	cmp	r3, #2
 8009bee:	d141      	bne.n	8009c74 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009bf0:	4b4c      	ldr	r3, [pc, #304]	; (8009d24 <HAL_RCC_OscConfig+0x4ec>)
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009bf6:	f7fd ff73 	bl	8007ae0 <HAL_GetTick>
 8009bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009bfc:	e008      	b.n	8009c10 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009bfe:	f7fd ff6f 	bl	8007ae0 <HAL_GetTick>
 8009c02:	4602      	mov	r2, r0
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	1ad3      	subs	r3, r2, r3
 8009c08:	2b02      	cmp	r3, #2
 8009c0a:	d901      	bls.n	8009c10 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009c0c:	2303      	movs	r3, #3
 8009c0e:	e081      	b.n	8009d14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c10:	4b43      	ldr	r3, [pc, #268]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d1f0      	bne.n	8009bfe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	69da      	ldr	r2, [r3, #28]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6a1b      	ldr	r3, [r3, #32]
 8009c24:	431a      	orrs	r2, r3
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c2a:	019b      	lsls	r3, r3, #6
 8009c2c:	431a      	orrs	r2, r3
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c32:	085b      	lsrs	r3, r3, #1
 8009c34:	3b01      	subs	r3, #1
 8009c36:	041b      	lsls	r3, r3, #16
 8009c38:	431a      	orrs	r2, r3
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c3e:	061b      	lsls	r3, r3, #24
 8009c40:	4937      	ldr	r1, [pc, #220]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009c42:	4313      	orrs	r3, r2
 8009c44:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009c46:	4b37      	ldr	r3, [pc, #220]	; (8009d24 <HAL_RCC_OscConfig+0x4ec>)
 8009c48:	2201      	movs	r2, #1
 8009c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c4c:	f7fd ff48 	bl	8007ae0 <HAL_GetTick>
 8009c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c52:	e008      	b.n	8009c66 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c54:	f7fd ff44 	bl	8007ae0 <HAL_GetTick>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	1ad3      	subs	r3, r2, r3
 8009c5e:	2b02      	cmp	r3, #2
 8009c60:	d901      	bls.n	8009c66 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009c62:	2303      	movs	r3, #3
 8009c64:	e056      	b.n	8009d14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c66:	4b2e      	ldr	r3, [pc, #184]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d0f0      	beq.n	8009c54 <HAL_RCC_OscConfig+0x41c>
 8009c72:	e04e      	b.n	8009d12 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c74:	4b2b      	ldr	r3, [pc, #172]	; (8009d24 <HAL_RCC_OscConfig+0x4ec>)
 8009c76:	2200      	movs	r2, #0
 8009c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c7a:	f7fd ff31 	bl	8007ae0 <HAL_GetTick>
 8009c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c80:	e008      	b.n	8009c94 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c82:	f7fd ff2d 	bl	8007ae0 <HAL_GetTick>
 8009c86:	4602      	mov	r2, r0
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	1ad3      	subs	r3, r2, r3
 8009c8c:	2b02      	cmp	r3, #2
 8009c8e:	d901      	bls.n	8009c94 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009c90:	2303      	movs	r3, #3
 8009c92:	e03f      	b.n	8009d14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c94:	4b22      	ldr	r3, [pc, #136]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d1f0      	bne.n	8009c82 <HAL_RCC_OscConfig+0x44a>
 8009ca0:	e037      	b.n	8009d12 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	699b      	ldr	r3, [r3, #24]
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d101      	bne.n	8009cae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009caa:	2301      	movs	r3, #1
 8009cac:	e032      	b.n	8009d14 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009cae:	4b1c      	ldr	r3, [pc, #112]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	699b      	ldr	r3, [r3, #24]
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d028      	beq.n	8009d0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d121      	bne.n	8009d0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d11a      	bne.n	8009d0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009cd8:	68fa      	ldr	r2, [r7, #12]
 8009cda:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009cde:	4013      	ands	r3, r2
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009ce4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d111      	bne.n	8009d0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cf4:	085b      	lsrs	r3, r3, #1
 8009cf6:	3b01      	subs	r3, #1
 8009cf8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d107      	bne.n	8009d0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d08:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d001      	beq.n	8009d12 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	e000      	b.n	8009d14 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8009d12:	2300      	movs	r3, #0
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3718      	adds	r7, #24
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}
 8009d1c:	40007000 	.word	0x40007000
 8009d20:	40023800 	.word	0x40023800
 8009d24:	42470060 	.word	0x42470060

08009d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d101      	bne.n	8009d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	e0cc      	b.n	8009ed6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009d3c:	4b68      	ldr	r3, [pc, #416]	; (8009ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f003 030f 	and.w	r3, r3, #15
 8009d44:	683a      	ldr	r2, [r7, #0]
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d90c      	bls.n	8009d64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d4a:	4b65      	ldr	r3, [pc, #404]	; (8009ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8009d4c:	683a      	ldr	r2, [r7, #0]
 8009d4e:	b2d2      	uxtb	r2, r2
 8009d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d52:	4b63      	ldr	r3, [pc, #396]	; (8009ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f003 030f 	and.w	r3, r3, #15
 8009d5a:	683a      	ldr	r2, [r7, #0]
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d001      	beq.n	8009d64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009d60:	2301      	movs	r3, #1
 8009d62:	e0b8      	b.n	8009ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f003 0302 	and.w	r3, r3, #2
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d020      	beq.n	8009db2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f003 0304 	and.w	r3, r3, #4
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d005      	beq.n	8009d88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009d7c:	4b59      	ldr	r3, [pc, #356]	; (8009ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8009d7e:	689b      	ldr	r3, [r3, #8]
 8009d80:	4a58      	ldr	r2, [pc, #352]	; (8009ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8009d82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009d86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f003 0308 	and.w	r3, r3, #8
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d005      	beq.n	8009da0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009d94:	4b53      	ldr	r3, [pc, #332]	; (8009ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	4a52      	ldr	r2, [pc, #328]	; (8009ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8009d9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009d9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009da0:	4b50      	ldr	r3, [pc, #320]	; (8009ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	494d      	ldr	r1, [pc, #308]	; (8009ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8009dae:	4313      	orrs	r3, r2
 8009db0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f003 0301 	and.w	r3, r3, #1
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d044      	beq.n	8009e48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d107      	bne.n	8009dd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009dc6:	4b47      	ldr	r3, [pc, #284]	; (8009ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d119      	bne.n	8009e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	e07f      	b.n	8009ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	2b02      	cmp	r3, #2
 8009ddc:	d003      	beq.n	8009de6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009de2:	2b03      	cmp	r3, #3
 8009de4:	d107      	bne.n	8009df6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009de6:	4b3f      	ldr	r3, [pc, #252]	; (8009ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d109      	bne.n	8009e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	e06f      	b.n	8009ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009df6:	4b3b      	ldr	r3, [pc, #236]	; (8009ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f003 0302 	and.w	r3, r3, #2
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d101      	bne.n	8009e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009e02:	2301      	movs	r3, #1
 8009e04:	e067      	b.n	8009ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009e06:	4b37      	ldr	r3, [pc, #220]	; (8009ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e08:	689b      	ldr	r3, [r3, #8]
 8009e0a:	f023 0203 	bic.w	r2, r3, #3
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	4934      	ldr	r1, [pc, #208]	; (8009ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e14:	4313      	orrs	r3, r2
 8009e16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009e18:	f7fd fe62 	bl	8007ae0 <HAL_GetTick>
 8009e1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e1e:	e00a      	b.n	8009e36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e20:	f7fd fe5e 	bl	8007ae0 <HAL_GetTick>
 8009e24:	4602      	mov	r2, r0
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	1ad3      	subs	r3, r2, r3
 8009e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d901      	bls.n	8009e36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009e32:	2303      	movs	r3, #3
 8009e34:	e04f      	b.n	8009ed6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e36:	4b2b      	ldr	r3, [pc, #172]	; (8009ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e38:	689b      	ldr	r3, [r3, #8]
 8009e3a:	f003 020c 	and.w	r2, r3, #12
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d1eb      	bne.n	8009e20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009e48:	4b25      	ldr	r3, [pc, #148]	; (8009ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f003 030f 	and.w	r3, r3, #15
 8009e50:	683a      	ldr	r2, [r7, #0]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d20c      	bcs.n	8009e70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e56:	4b22      	ldr	r3, [pc, #136]	; (8009ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8009e58:	683a      	ldr	r2, [r7, #0]
 8009e5a:	b2d2      	uxtb	r2, r2
 8009e5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e5e:	4b20      	ldr	r3, [pc, #128]	; (8009ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f003 030f 	and.w	r3, r3, #15
 8009e66:	683a      	ldr	r2, [r7, #0]
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d001      	beq.n	8009e70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	e032      	b.n	8009ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f003 0304 	and.w	r3, r3, #4
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d008      	beq.n	8009e8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009e7c:	4b19      	ldr	r3, [pc, #100]	; (8009ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e7e:	689b      	ldr	r3, [r3, #8]
 8009e80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	4916      	ldr	r1, [pc, #88]	; (8009ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f003 0308 	and.w	r3, r3, #8
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d009      	beq.n	8009eae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009e9a:	4b12      	ldr	r3, [pc, #72]	; (8009ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e9c:	689b      	ldr	r3, [r3, #8]
 8009e9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	691b      	ldr	r3, [r3, #16]
 8009ea6:	00db      	lsls	r3, r3, #3
 8009ea8:	490e      	ldr	r1, [pc, #56]	; (8009ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009eae:	f000 f821 	bl	8009ef4 <HAL_RCC_GetSysClockFreq>
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	4b0b      	ldr	r3, [pc, #44]	; (8009ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8009eb6:	689b      	ldr	r3, [r3, #8]
 8009eb8:	091b      	lsrs	r3, r3, #4
 8009eba:	f003 030f 	and.w	r3, r3, #15
 8009ebe:	490a      	ldr	r1, [pc, #40]	; (8009ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8009ec0:	5ccb      	ldrb	r3, [r1, r3]
 8009ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8009ec6:	4a09      	ldr	r2, [pc, #36]	; (8009eec <HAL_RCC_ClockConfig+0x1c4>)
 8009ec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009eca:	4b09      	ldr	r3, [pc, #36]	; (8009ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7f8 fee6 	bl	8002ca0 <HAL_InitTick>

  return HAL_OK;
 8009ed4:	2300      	movs	r3, #0
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3710      	adds	r7, #16
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	bf00      	nop
 8009ee0:	40023c00 	.word	0x40023c00
 8009ee4:	40023800 	.word	0x40023800
 8009ee8:	08018494 	.word	0x08018494
 8009eec:	20000000 	.word	0x20000000
 8009ef0:	2000001c 	.word	0x2000001c

08009ef4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009ef4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009ef8:	b084      	sub	sp, #16
 8009efa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009efc:	2300      	movs	r3, #0
 8009efe:	607b      	str	r3, [r7, #4]
 8009f00:	2300      	movs	r3, #0
 8009f02:	60fb      	str	r3, [r7, #12]
 8009f04:	2300      	movs	r3, #0
 8009f06:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009f0c:	4b67      	ldr	r3, [pc, #412]	; (800a0ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	f003 030c 	and.w	r3, r3, #12
 8009f14:	2b08      	cmp	r3, #8
 8009f16:	d00d      	beq.n	8009f34 <HAL_RCC_GetSysClockFreq+0x40>
 8009f18:	2b08      	cmp	r3, #8
 8009f1a:	f200 80bd 	bhi.w	800a098 <HAL_RCC_GetSysClockFreq+0x1a4>
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d002      	beq.n	8009f28 <HAL_RCC_GetSysClockFreq+0x34>
 8009f22:	2b04      	cmp	r3, #4
 8009f24:	d003      	beq.n	8009f2e <HAL_RCC_GetSysClockFreq+0x3a>
 8009f26:	e0b7      	b.n	800a098 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009f28:	4b61      	ldr	r3, [pc, #388]	; (800a0b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009f2a:	60bb      	str	r3, [r7, #8]
       break;
 8009f2c:	e0b7      	b.n	800a09e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009f2e:	4b60      	ldr	r3, [pc, #384]	; (800a0b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009f30:	60bb      	str	r3, [r7, #8]
      break;
 8009f32:	e0b4      	b.n	800a09e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009f34:	4b5d      	ldr	r3, [pc, #372]	; (800a0ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f3c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009f3e:	4b5b      	ldr	r3, [pc, #364]	; (800a0ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d04d      	beq.n	8009fe6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009f4a:	4b58      	ldr	r3, [pc, #352]	; (800a0ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	099b      	lsrs	r3, r3, #6
 8009f50:	461a      	mov	r2, r3
 8009f52:	f04f 0300 	mov.w	r3, #0
 8009f56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009f5a:	f04f 0100 	mov.w	r1, #0
 8009f5e:	ea02 0800 	and.w	r8, r2, r0
 8009f62:	ea03 0901 	and.w	r9, r3, r1
 8009f66:	4640      	mov	r0, r8
 8009f68:	4649      	mov	r1, r9
 8009f6a:	f04f 0200 	mov.w	r2, #0
 8009f6e:	f04f 0300 	mov.w	r3, #0
 8009f72:	014b      	lsls	r3, r1, #5
 8009f74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009f78:	0142      	lsls	r2, r0, #5
 8009f7a:	4610      	mov	r0, r2
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	ebb0 0008 	subs.w	r0, r0, r8
 8009f82:	eb61 0109 	sbc.w	r1, r1, r9
 8009f86:	f04f 0200 	mov.w	r2, #0
 8009f8a:	f04f 0300 	mov.w	r3, #0
 8009f8e:	018b      	lsls	r3, r1, #6
 8009f90:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009f94:	0182      	lsls	r2, r0, #6
 8009f96:	1a12      	subs	r2, r2, r0
 8009f98:	eb63 0301 	sbc.w	r3, r3, r1
 8009f9c:	f04f 0000 	mov.w	r0, #0
 8009fa0:	f04f 0100 	mov.w	r1, #0
 8009fa4:	00d9      	lsls	r1, r3, #3
 8009fa6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009faa:	00d0      	lsls	r0, r2, #3
 8009fac:	4602      	mov	r2, r0
 8009fae:	460b      	mov	r3, r1
 8009fb0:	eb12 0208 	adds.w	r2, r2, r8
 8009fb4:	eb43 0309 	adc.w	r3, r3, r9
 8009fb8:	f04f 0000 	mov.w	r0, #0
 8009fbc:	f04f 0100 	mov.w	r1, #0
 8009fc0:	0299      	lsls	r1, r3, #10
 8009fc2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009fc6:	0290      	lsls	r0, r2, #10
 8009fc8:	4602      	mov	r2, r0
 8009fca:	460b      	mov	r3, r1
 8009fcc:	4610      	mov	r0, r2
 8009fce:	4619      	mov	r1, r3
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	f04f 0300 	mov.w	r3, #0
 8009fd8:	f7f6 fe66 	bl	8000ca8 <__aeabi_uldivmod>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	460b      	mov	r3, r1
 8009fe0:	4613      	mov	r3, r2
 8009fe2:	60fb      	str	r3, [r7, #12]
 8009fe4:	e04a      	b.n	800a07c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009fe6:	4b31      	ldr	r3, [pc, #196]	; (800a0ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	099b      	lsrs	r3, r3, #6
 8009fec:	461a      	mov	r2, r3
 8009fee:	f04f 0300 	mov.w	r3, #0
 8009ff2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009ff6:	f04f 0100 	mov.w	r1, #0
 8009ffa:	ea02 0400 	and.w	r4, r2, r0
 8009ffe:	ea03 0501 	and.w	r5, r3, r1
 800a002:	4620      	mov	r0, r4
 800a004:	4629      	mov	r1, r5
 800a006:	f04f 0200 	mov.w	r2, #0
 800a00a:	f04f 0300 	mov.w	r3, #0
 800a00e:	014b      	lsls	r3, r1, #5
 800a010:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a014:	0142      	lsls	r2, r0, #5
 800a016:	4610      	mov	r0, r2
 800a018:	4619      	mov	r1, r3
 800a01a:	1b00      	subs	r0, r0, r4
 800a01c:	eb61 0105 	sbc.w	r1, r1, r5
 800a020:	f04f 0200 	mov.w	r2, #0
 800a024:	f04f 0300 	mov.w	r3, #0
 800a028:	018b      	lsls	r3, r1, #6
 800a02a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a02e:	0182      	lsls	r2, r0, #6
 800a030:	1a12      	subs	r2, r2, r0
 800a032:	eb63 0301 	sbc.w	r3, r3, r1
 800a036:	f04f 0000 	mov.w	r0, #0
 800a03a:	f04f 0100 	mov.w	r1, #0
 800a03e:	00d9      	lsls	r1, r3, #3
 800a040:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a044:	00d0      	lsls	r0, r2, #3
 800a046:	4602      	mov	r2, r0
 800a048:	460b      	mov	r3, r1
 800a04a:	1912      	adds	r2, r2, r4
 800a04c:	eb45 0303 	adc.w	r3, r5, r3
 800a050:	f04f 0000 	mov.w	r0, #0
 800a054:	f04f 0100 	mov.w	r1, #0
 800a058:	0299      	lsls	r1, r3, #10
 800a05a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a05e:	0290      	lsls	r0, r2, #10
 800a060:	4602      	mov	r2, r0
 800a062:	460b      	mov	r3, r1
 800a064:	4610      	mov	r0, r2
 800a066:	4619      	mov	r1, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	461a      	mov	r2, r3
 800a06c:	f04f 0300 	mov.w	r3, #0
 800a070:	f7f6 fe1a 	bl	8000ca8 <__aeabi_uldivmod>
 800a074:	4602      	mov	r2, r0
 800a076:	460b      	mov	r3, r1
 800a078:	4613      	mov	r3, r2
 800a07a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a07c:	4b0b      	ldr	r3, [pc, #44]	; (800a0ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	0c1b      	lsrs	r3, r3, #16
 800a082:	f003 0303 	and.w	r3, r3, #3
 800a086:	3301      	adds	r3, #1
 800a088:	005b      	lsls	r3, r3, #1
 800a08a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a08c:	68fa      	ldr	r2, [r7, #12]
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	fbb2 f3f3 	udiv	r3, r2, r3
 800a094:	60bb      	str	r3, [r7, #8]
      break;
 800a096:	e002      	b.n	800a09e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a098:	4b05      	ldr	r3, [pc, #20]	; (800a0b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800a09a:	60bb      	str	r3, [r7, #8]
      break;
 800a09c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a09e:	68bb      	ldr	r3, [r7, #8]
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3710      	adds	r7, #16
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a0aa:	bf00      	nop
 800a0ac:	40023800 	.word	0x40023800
 800a0b0:	00f42400 	.word	0x00f42400

0800a0b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a0b8:	4b03      	ldr	r3, [pc, #12]	; (800a0c8 <HAL_RCC_GetHCLKFreq+0x14>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c4:	4770      	bx	lr
 800a0c6:	bf00      	nop
 800a0c8:	20000000 	.word	0x20000000

0800a0cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a0d0:	f7ff fff0 	bl	800a0b4 <HAL_RCC_GetHCLKFreq>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	4b05      	ldr	r3, [pc, #20]	; (800a0ec <HAL_RCC_GetPCLK1Freq+0x20>)
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	0a9b      	lsrs	r3, r3, #10
 800a0dc:	f003 0307 	and.w	r3, r3, #7
 800a0e0:	4903      	ldr	r1, [pc, #12]	; (800a0f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a0e2:	5ccb      	ldrb	r3, [r1, r3]
 800a0e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	bd80      	pop	{r7, pc}
 800a0ec:	40023800 	.word	0x40023800
 800a0f0:	080184a4 	.word	0x080184a4

0800a0f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a0f8:	f7ff ffdc 	bl	800a0b4 <HAL_RCC_GetHCLKFreq>
 800a0fc:	4602      	mov	r2, r0
 800a0fe:	4b05      	ldr	r3, [pc, #20]	; (800a114 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a100:	689b      	ldr	r3, [r3, #8]
 800a102:	0b5b      	lsrs	r3, r3, #13
 800a104:	f003 0307 	and.w	r3, r3, #7
 800a108:	4903      	ldr	r1, [pc, #12]	; (800a118 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a10a:	5ccb      	ldrb	r3, [r1, r3]
 800a10c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a110:	4618      	mov	r0, r3
 800a112:	bd80      	pop	{r7, pc}
 800a114:	40023800 	.word	0x40023800
 800a118:	080184a4 	.word	0x080184a4

0800a11c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b083      	sub	sp, #12
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	220f      	movs	r2, #15
 800a12a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a12c:	4b12      	ldr	r3, [pc, #72]	; (800a178 <HAL_RCC_GetClockConfig+0x5c>)
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	f003 0203 	and.w	r2, r3, #3
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a138:	4b0f      	ldr	r3, [pc, #60]	; (800a178 <HAL_RCC_GetClockConfig+0x5c>)
 800a13a:	689b      	ldr	r3, [r3, #8]
 800a13c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a144:	4b0c      	ldr	r3, [pc, #48]	; (800a178 <HAL_RCC_GetClockConfig+0x5c>)
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a150:	4b09      	ldr	r3, [pc, #36]	; (800a178 <HAL_RCC_GetClockConfig+0x5c>)
 800a152:	689b      	ldr	r3, [r3, #8]
 800a154:	08db      	lsrs	r3, r3, #3
 800a156:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a15e:	4b07      	ldr	r3, [pc, #28]	; (800a17c <HAL_RCC_GetClockConfig+0x60>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f003 020f 	and.w	r2, r3, #15
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	601a      	str	r2, [r3, #0]
}
 800a16a:	bf00      	nop
 800a16c:	370c      	adds	r7, #12
 800a16e:	46bd      	mov	sp, r7
 800a170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a174:	4770      	bx	lr
 800a176:	bf00      	nop
 800a178:	40023800 	.word	0x40023800
 800a17c:	40023c00 	.word	0x40023c00

0800a180 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b086      	sub	sp, #24
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a188:	2300      	movs	r3, #0
 800a18a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800a18c:	2300      	movs	r3, #0
 800a18e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f003 0301 	and.w	r3, r3, #1
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d10b      	bne.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d105      	bne.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d075      	beq.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a1b4:	4bad      	ldr	r3, [pc, #692]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a1ba:	f7fd fc91 	bl	8007ae0 <HAL_GetTick>
 800a1be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a1c0:	e008      	b.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a1c2:	f7fd fc8d 	bl	8007ae0 <HAL_GetTick>
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	1ad3      	subs	r3, r2, r3
 800a1cc:	2b02      	cmp	r3, #2
 800a1ce:	d901      	bls.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a1d0:	2303      	movs	r3, #3
 800a1d2:	e18b      	b.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a1d4:	4ba6      	ldr	r3, [pc, #664]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d1f0      	bne.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f003 0301 	and.w	r3, r3, #1
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d009      	beq.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	019a      	lsls	r2, r3, #6
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	689b      	ldr	r3, [r3, #8]
 800a1f6:	071b      	lsls	r3, r3, #28
 800a1f8:	499d      	ldr	r1, [pc, #628]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f003 0302 	and.w	r3, r3, #2
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d01f      	beq.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a20c:	4b98      	ldr	r3, [pc, #608]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a20e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a212:	0f1b      	lsrs	r3, r3, #28
 800a214:	f003 0307 	and.w	r3, r3, #7
 800a218:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	019a      	lsls	r2, r3, #6
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	68db      	ldr	r3, [r3, #12]
 800a224:	061b      	lsls	r3, r3, #24
 800a226:	431a      	orrs	r2, r3
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	071b      	lsls	r3, r3, #28
 800a22c:	4990      	ldr	r1, [pc, #576]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a22e:	4313      	orrs	r3, r2
 800a230:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a234:	4b8e      	ldr	r3, [pc, #568]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a236:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a23a:	f023 021f 	bic.w	r2, r3, #31
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	69db      	ldr	r3, [r3, #28]
 800a242:	3b01      	subs	r3, #1
 800a244:	498a      	ldr	r1, [pc, #552]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a246:	4313      	orrs	r3, r2
 800a248:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a254:	2b00      	cmp	r3, #0
 800a256:	d00d      	beq.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	019a      	lsls	r2, r3, #6
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	68db      	ldr	r3, [r3, #12]
 800a262:	061b      	lsls	r3, r3, #24
 800a264:	431a      	orrs	r2, r3
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	689b      	ldr	r3, [r3, #8]
 800a26a:	071b      	lsls	r3, r3, #28
 800a26c:	4980      	ldr	r1, [pc, #512]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a26e:	4313      	orrs	r3, r2
 800a270:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a274:	4b7d      	ldr	r3, [pc, #500]	; (800a46c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800a276:	2201      	movs	r2, #1
 800a278:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a27a:	f7fd fc31 	bl	8007ae0 <HAL_GetTick>
 800a27e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a280:	e008      	b.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a282:	f7fd fc2d 	bl	8007ae0 <HAL_GetTick>
 800a286:	4602      	mov	r2, r0
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	1ad3      	subs	r3, r2, r3
 800a28c:	2b02      	cmp	r3, #2
 800a28e:	d901      	bls.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a290:	2303      	movs	r3, #3
 800a292:	e12b      	b.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a294:	4b76      	ldr	r3, [pc, #472]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d0f0      	beq.n	800a282 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f003 0304 	and.w	r3, r3, #4
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d105      	bne.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d079      	beq.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a2b8:	4b6e      	ldr	r3, [pc, #440]	; (800a474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a2be:	f7fd fc0f 	bl	8007ae0 <HAL_GetTick>
 800a2c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a2c4:	e008      	b.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a2c6:	f7fd fc0b 	bl	8007ae0 <HAL_GetTick>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	1ad3      	subs	r3, r2, r3
 800a2d0:	2b02      	cmp	r3, #2
 800a2d2:	d901      	bls.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a2d4:	2303      	movs	r3, #3
 800a2d6:	e109      	b.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a2d8:	4b65      	ldr	r3, [pc, #404]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a2e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2e4:	d0ef      	beq.n	800a2c6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f003 0304 	and.w	r3, r3, #4
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d020      	beq.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a2f2:	4b5f      	ldr	r3, [pc, #380]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a2f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2f8:	0f1b      	lsrs	r3, r3, #28
 800a2fa:	f003 0307 	and.w	r3, r3, #7
 800a2fe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	691b      	ldr	r3, [r3, #16]
 800a304:	019a      	lsls	r2, r3, #6
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	695b      	ldr	r3, [r3, #20]
 800a30a:	061b      	lsls	r3, r3, #24
 800a30c:	431a      	orrs	r2, r3
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	071b      	lsls	r3, r3, #28
 800a312:	4957      	ldr	r1, [pc, #348]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a314:	4313      	orrs	r3, r2
 800a316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a31a:	4b55      	ldr	r3, [pc, #340]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a31c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a320:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6a1b      	ldr	r3, [r3, #32]
 800a328:	3b01      	subs	r3, #1
 800a32a:	021b      	lsls	r3, r3, #8
 800a32c:	4950      	ldr	r1, [pc, #320]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a32e:	4313      	orrs	r3, r2
 800a330:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f003 0308 	and.w	r3, r3, #8
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d01e      	beq.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a340:	4b4b      	ldr	r3, [pc, #300]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a346:	0e1b      	lsrs	r3, r3, #24
 800a348:	f003 030f 	and.w	r3, r3, #15
 800a34c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	691b      	ldr	r3, [r3, #16]
 800a352:	019a      	lsls	r2, r3, #6
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	061b      	lsls	r3, r3, #24
 800a358:	431a      	orrs	r2, r3
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	699b      	ldr	r3, [r3, #24]
 800a35e:	071b      	lsls	r3, r3, #28
 800a360:	4943      	ldr	r1, [pc, #268]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a362:	4313      	orrs	r3, r2
 800a364:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a368:	4b41      	ldr	r3, [pc, #260]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a36a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a36e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a376:	493e      	ldr	r1, [pc, #248]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a378:	4313      	orrs	r3, r2
 800a37a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a37e:	4b3d      	ldr	r3, [pc, #244]	; (800a474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a380:	2201      	movs	r2, #1
 800a382:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a384:	f7fd fbac 	bl	8007ae0 <HAL_GetTick>
 800a388:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a38a:	e008      	b.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a38c:	f7fd fba8 	bl	8007ae0 <HAL_GetTick>
 800a390:	4602      	mov	r2, r0
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	1ad3      	subs	r3, r2, r3
 800a396:	2b02      	cmp	r3, #2
 800a398:	d901      	bls.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a39a:	2303      	movs	r3, #3
 800a39c:	e0a6      	b.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a39e:	4b34      	ldr	r3, [pc, #208]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a3a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3aa:	d1ef      	bne.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f003 0320 	and.w	r3, r3, #32
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	f000 808d 	beq.w	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	60fb      	str	r3, [r7, #12]
 800a3be:	4b2c      	ldr	r3, [pc, #176]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a3c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3c2:	4a2b      	ldr	r2, [pc, #172]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a3c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3c8:	6413      	str	r3, [r2, #64]	; 0x40
 800a3ca:	4b29      	ldr	r3, [pc, #164]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a3cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3d2:	60fb      	str	r3, [r7, #12]
 800a3d4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a3d6:	4b28      	ldr	r3, [pc, #160]	; (800a478 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4a27      	ldr	r2, [pc, #156]	; (800a478 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a3dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3e0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a3e2:	f7fd fb7d 	bl	8007ae0 <HAL_GetTick>
 800a3e6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a3e8:	e008      	b.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a3ea:	f7fd fb79 	bl	8007ae0 <HAL_GetTick>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	1ad3      	subs	r3, r2, r3
 800a3f4:	2b02      	cmp	r3, #2
 800a3f6:	d901      	bls.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800a3f8:	2303      	movs	r3, #3
 800a3fa:	e077      	b.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a3fc:	4b1e      	ldr	r3, [pc, #120]	; (800a478 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a404:	2b00      	cmp	r3, #0
 800a406:	d0f0      	beq.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a408:	4b19      	ldr	r3, [pc, #100]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a40a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a40c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a410:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d039      	beq.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a41c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a420:	693a      	ldr	r2, [r7, #16]
 800a422:	429a      	cmp	r2, r3
 800a424:	d032      	beq.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a426:	4b12      	ldr	r3, [pc, #72]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a42a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a42e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a430:	4b12      	ldr	r3, [pc, #72]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800a432:	2201      	movs	r2, #1
 800a434:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a436:	4b11      	ldr	r3, [pc, #68]	; (800a47c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800a438:	2200      	movs	r2, #0
 800a43a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a43c:	4a0c      	ldr	r2, [pc, #48]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a442:	4b0b      	ldr	r3, [pc, #44]	; (800a470 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a446:	f003 0301 	and.w	r3, r3, #1
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	d11e      	bne.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a44e:	f7fd fb47 	bl	8007ae0 <HAL_GetTick>
 800a452:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a454:	e014      	b.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a456:	f7fd fb43 	bl	8007ae0 <HAL_GetTick>
 800a45a:	4602      	mov	r2, r0
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	1ad3      	subs	r3, r2, r3
 800a460:	f241 3288 	movw	r2, #5000	; 0x1388
 800a464:	4293      	cmp	r3, r2
 800a466:	d90b      	bls.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800a468:	2303      	movs	r3, #3
 800a46a:	e03f      	b.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800a46c:	42470068 	.word	0x42470068
 800a470:	40023800 	.word	0x40023800
 800a474:	42470070 	.word	0x42470070
 800a478:	40007000 	.word	0x40007000
 800a47c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a480:	4b1c      	ldr	r3, [pc, #112]	; (800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a484:	f003 0302 	and.w	r3, r3, #2
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d0e4      	beq.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a490:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a494:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a498:	d10d      	bne.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800a49a:	4b16      	ldr	r3, [pc, #88]	; (800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4a6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a4aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4ae:	4911      	ldr	r1, [pc, #68]	; (800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	608b      	str	r3, [r1, #8]
 800a4b4:	e005      	b.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800a4b6:	4b0f      	ldr	r3, [pc, #60]	; (800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a4b8:	689b      	ldr	r3, [r3, #8]
 800a4ba:	4a0e      	ldr	r2, [pc, #56]	; (800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a4bc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a4c0:	6093      	str	r3, [r2, #8]
 800a4c2:	4b0c      	ldr	r3, [pc, #48]	; (800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a4c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4ce:	4909      	ldr	r1, [pc, #36]	; (800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f003 0310 	and.w	r3, r3, #16
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d004      	beq.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800a4e6:	4b04      	ldr	r3, [pc, #16]	; (800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800a4e8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800a4ea:	2300      	movs	r3, #0
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3718      	adds	r7, #24
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	40023800 	.word	0x40023800
 800a4f8:	424711e0 	.word	0x424711e0

0800a4fc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b082      	sub	sp, #8
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d101      	bne.n	800a50e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800a50a:	2301      	movs	r3, #1
 800a50c:	e083      	b.n	800a616 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	7f5b      	ldrb	r3, [r3, #29]
 800a512:	b2db      	uxtb	r3, r3
 800a514:	2b00      	cmp	r3, #0
 800a516:	d105      	bne.n	800a524 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2200      	movs	r2, #0
 800a51c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f7f8 f9ca 	bl	80028b8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2202      	movs	r2, #2
 800a528:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	22ca      	movs	r2, #202	; 0xca
 800a530:	625a      	str	r2, [r3, #36]	; 0x24
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	2253      	movs	r2, #83	; 0x53
 800a538:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 fc26 	bl	800ad8c <RTC_EnterInitMode>
 800a540:	4603      	mov	r3, r0
 800a542:	2b00      	cmp	r3, #0
 800a544:	d008      	beq.n	800a558 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	22ff      	movs	r2, #255	; 0xff
 800a54c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2204      	movs	r2, #4
 800a552:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800a554:	2301      	movs	r3, #1
 800a556:	e05e      	b.n	800a616 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	6812      	ldr	r2, [r2, #0]
 800a562:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a566:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a56a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	6899      	ldr	r1, [r3, #8]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	685a      	ldr	r2, [r3, #4]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	691b      	ldr	r3, [r3, #16]
 800a57a:	431a      	orrs	r2, r3
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	695b      	ldr	r3, [r3, #20]
 800a580:	431a      	orrs	r2, r3
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	430a      	orrs	r2, r1
 800a588:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	68d2      	ldr	r2, [r2, #12]
 800a592:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	6919      	ldr	r1, [r3, #16]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	689b      	ldr	r3, [r3, #8]
 800a59e:	041a      	lsls	r2, r3, #16
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	430a      	orrs	r2, r1
 800a5a6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	68da      	ldr	r2, [r3, #12]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5b6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	689b      	ldr	r3, [r3, #8]
 800a5be:	f003 0320 	and.w	r3, r3, #32
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d10e      	bne.n	800a5e4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f000 fbb8 	bl	800ad3c <HAL_RTC_WaitForSynchro>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d008      	beq.n	800a5e4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	22ff      	movs	r2, #255	; 0xff
 800a5d8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2204      	movs	r2, #4
 800a5de:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	e018      	b.n	800a616 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a5f2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	699a      	ldr	r2, [r3, #24]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	430a      	orrs	r2, r1
 800a604:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	22ff      	movs	r2, #255	; 0xff
 800a60c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2201      	movs	r2, #1
 800a612:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800a614:	2300      	movs	r3, #0
  }
}
 800a616:	4618      	mov	r0, r3
 800a618:	3708      	adds	r7, #8
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}

0800a61e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a61e:	b590      	push	{r4, r7, lr}
 800a620:	b087      	sub	sp, #28
 800a622:	af00      	add	r7, sp, #0
 800a624:	60f8      	str	r0, [r7, #12]
 800a626:	60b9      	str	r1, [r7, #8]
 800a628:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a62a:	2300      	movs	r3, #0
 800a62c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	7f1b      	ldrb	r3, [r3, #28]
 800a632:	2b01      	cmp	r3, #1
 800a634:	d101      	bne.n	800a63a <HAL_RTC_SetTime+0x1c>
 800a636:	2302      	movs	r3, #2
 800a638:	e0aa      	b.n	800a790 <HAL_RTC_SetTime+0x172>
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2201      	movs	r2, #1
 800a63e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2202      	movs	r2, #2
 800a644:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d126      	bne.n	800a69a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	689b      	ldr	r3, [r3, #8]
 800a652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a656:	2b00      	cmp	r3, #0
 800a658:	d102      	bne.n	800a660 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	2200      	movs	r2, #0
 800a65e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	781b      	ldrb	r3, [r3, #0]
 800a664:	4618      	mov	r0, r3
 800a666:	f000 fbbd 	bl	800ade4 <RTC_ByteToBcd2>
 800a66a:	4603      	mov	r3, r0
 800a66c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	785b      	ldrb	r3, [r3, #1]
 800a672:	4618      	mov	r0, r3
 800a674:	f000 fbb6 	bl	800ade4 <RTC_ByteToBcd2>
 800a678:	4603      	mov	r3, r0
 800a67a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800a67c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	789b      	ldrb	r3, [r3, #2]
 800a682:	4618      	mov	r0, r3
 800a684:	f000 fbae 	bl	800ade4 <RTC_ByteToBcd2>
 800a688:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800a68a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	78db      	ldrb	r3, [r3, #3]
 800a692:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800a694:	4313      	orrs	r3, r2
 800a696:	617b      	str	r3, [r7, #20]
 800a698:	e018      	b.n	800a6cc <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	689b      	ldr	r3, [r3, #8]
 800a6a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d102      	bne.n	800a6ae <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	781b      	ldrb	r3, [r3, #0]
 800a6b2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	785b      	ldrb	r3, [r3, #1]
 800a6b8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800a6ba:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800a6bc:	68ba      	ldr	r2, [r7, #8]
 800a6be:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800a6c0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	78db      	ldrb	r3, [r3, #3]
 800a6c6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	22ca      	movs	r2, #202	; 0xca
 800a6d2:	625a      	str	r2, [r3, #36]	; 0x24
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	2253      	movs	r2, #83	; 0x53
 800a6da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a6dc:	68f8      	ldr	r0, [r7, #12]
 800a6de:	f000 fb55 	bl	800ad8c <RTC_EnterInitMode>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d00b      	beq.n	800a700 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	22ff      	movs	r2, #255	; 0xff
 800a6ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2204      	movs	r2, #4
 800a6f4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	e047      	b.n	800a790 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681a      	ldr	r2, [r3, #0]
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a70a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a70e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	689a      	ldr	r2, [r3, #8]
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a71e:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	6899      	ldr	r1, [r3, #8]
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	68da      	ldr	r2, [r3, #12]
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	691b      	ldr	r3, [r3, #16]
 800a72e:	431a      	orrs	r2, r3
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	430a      	orrs	r2, r1
 800a736:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	68da      	ldr	r2, [r3, #12]
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a746:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	689b      	ldr	r3, [r3, #8]
 800a74e:	f003 0320 	and.w	r3, r3, #32
 800a752:	2b00      	cmp	r3, #0
 800a754:	d111      	bne.n	800a77a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a756:	68f8      	ldr	r0, [r7, #12]
 800a758:	f000 faf0 	bl	800ad3c <HAL_RTC_WaitForSynchro>
 800a75c:	4603      	mov	r3, r0
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d00b      	beq.n	800a77a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	22ff      	movs	r2, #255	; 0xff
 800a768:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2204      	movs	r2, #4
 800a76e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2200      	movs	r2, #0
 800a774:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a776:	2301      	movs	r3, #1
 800a778:	e00a      	b.n	800a790 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	22ff      	movs	r2, #255	; 0xff
 800a780:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2201      	movs	r2, #1
 800a786:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2200      	movs	r2, #0
 800a78c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800a78e:	2300      	movs	r3, #0
  }
}
 800a790:	4618      	mov	r0, r3
 800a792:	371c      	adds	r7, #28
 800a794:	46bd      	mov	sp, r7
 800a796:	bd90      	pop	{r4, r7, pc}

0800a798 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b086      	sub	sp, #24
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	60b9      	str	r1, [r7, #8]
 800a7a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	691b      	ldr	r3, [r3, #16]
 800a7b8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a7ca:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a7ce:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	0c1b      	lsrs	r3, r3, #16
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a7da:	b2da      	uxtb	r2, r3
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	0a1b      	lsrs	r3, r3, #8
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7ea:	b2da      	uxtb	r2, r3
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7f8:	b2da      	uxtb	r2, r3
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	0c1b      	lsrs	r3, r3, #16
 800a802:	b2db      	uxtb	r3, r3
 800a804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a808:	b2da      	uxtb	r2, r3
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d11a      	bne.n	800a84a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	4618      	mov	r0, r3
 800a81a:	f000 fb01 	bl	800ae20 <RTC_Bcd2ToByte>
 800a81e:	4603      	mov	r3, r0
 800a820:	461a      	mov	r2, r3
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	785b      	ldrb	r3, [r3, #1]
 800a82a:	4618      	mov	r0, r3
 800a82c:	f000 faf8 	bl	800ae20 <RTC_Bcd2ToByte>
 800a830:	4603      	mov	r3, r0
 800a832:	461a      	mov	r2, r3
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	789b      	ldrb	r3, [r3, #2]
 800a83c:	4618      	mov	r0, r3
 800a83e:	f000 faef 	bl	800ae20 <RTC_Bcd2ToByte>
 800a842:	4603      	mov	r3, r0
 800a844:	461a      	mov	r2, r3
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a84a:	2300      	movs	r3, #0
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3718      	adds	r7, #24
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a854:	b590      	push	{r4, r7, lr}
 800a856:	b087      	sub	sp, #28
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	60b9      	str	r1, [r7, #8]
 800a85e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a860:	2300      	movs	r3, #0
 800a862:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	7f1b      	ldrb	r3, [r3, #28]
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d101      	bne.n	800a870 <HAL_RTC_SetDate+0x1c>
 800a86c:	2302      	movs	r3, #2
 800a86e:	e094      	b.n	800a99a <HAL_RTC_SetDate+0x146>
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2201      	movs	r2, #1
 800a874:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2202      	movs	r2, #2
 800a87a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d10e      	bne.n	800a8a0 <HAL_RTC_SetDate+0x4c>
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	785b      	ldrb	r3, [r3, #1]
 800a886:	f003 0310 	and.w	r3, r3, #16
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d008      	beq.n	800a8a0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	785b      	ldrb	r3, [r3, #1]
 800a892:	f023 0310 	bic.w	r3, r3, #16
 800a896:	b2db      	uxtb	r3, r3
 800a898:	330a      	adds	r3, #10
 800a89a:	b2da      	uxtb	r2, r3
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d11c      	bne.n	800a8e0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	78db      	ldrb	r3, [r3, #3]
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f000 fa9a 	bl	800ade4 <RTC_ByteToBcd2>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	785b      	ldrb	r3, [r3, #1]
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f000 fa93 	bl	800ade4 <RTC_ByteToBcd2>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a8c2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	789b      	ldrb	r3, [r3, #2]
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f000 fa8b 	bl	800ade4 <RTC_ByteToBcd2>
 800a8ce:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800a8d0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	617b      	str	r3, [r7, #20]
 800a8de:	e00e      	b.n	800a8fe <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	78db      	ldrb	r3, [r3, #3]
 800a8e4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	785b      	ldrb	r3, [r3, #1]
 800a8ea:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a8ec:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800a8ee:	68ba      	ldr	r2, [r7, #8]
 800a8f0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800a8f2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	22ca      	movs	r2, #202	; 0xca
 800a904:	625a      	str	r2, [r3, #36]	; 0x24
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	2253      	movs	r2, #83	; 0x53
 800a90c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a90e:	68f8      	ldr	r0, [r7, #12]
 800a910:	f000 fa3c 	bl	800ad8c <RTC_EnterInitMode>
 800a914:	4603      	mov	r3, r0
 800a916:	2b00      	cmp	r3, #0
 800a918:	d00b      	beq.n	800a932 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	22ff      	movs	r2, #255	; 0xff
 800a920:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2204      	movs	r2, #4
 800a926:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2200      	movs	r2, #0
 800a92c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a92e:	2301      	movs	r3, #1
 800a930:	e033      	b.n	800a99a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a93c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a940:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	68da      	ldr	r2, [r3, #12]
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a950:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	689b      	ldr	r3, [r3, #8]
 800a958:	f003 0320 	and.w	r3, r3, #32
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d111      	bne.n	800a984 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a960:	68f8      	ldr	r0, [r7, #12]
 800a962:	f000 f9eb 	bl	800ad3c <HAL_RTC_WaitForSynchro>
 800a966:	4603      	mov	r3, r0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d00b      	beq.n	800a984 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	22ff      	movs	r2, #255	; 0xff
 800a972:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2204      	movs	r2, #4
 800a978:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2200      	movs	r2, #0
 800a97e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a980:	2301      	movs	r3, #1
 800a982:	e00a      	b.n	800a99a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	22ff      	movs	r2, #255	; 0xff
 800a98a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2201      	movs	r2, #1
 800a990:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2200      	movs	r2, #0
 800a996:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800a998:	2300      	movs	r3, #0
  }
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	371c      	adds	r7, #28
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd90      	pop	{r4, r7, pc}

0800a9a2 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a9a2:	b580      	push	{r7, lr}
 800a9a4:	b086      	sub	sp, #24
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	60f8      	str	r0, [r7, #12]
 800a9aa:	60b9      	str	r1, [r7, #8]
 800a9ac:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a9bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a9c0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	0c1b      	lsrs	r3, r3, #16
 800a9c6:	b2da      	uxtb	r2, r3
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	0a1b      	lsrs	r3, r3, #8
 800a9d0:	b2db      	uxtb	r3, r3
 800a9d2:	f003 031f 	and.w	r3, r3, #31
 800a9d6:	b2da      	uxtb	r2, r3
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	b2db      	uxtb	r3, r3
 800a9e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9e4:	b2da      	uxtb	r2, r3
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	0b5b      	lsrs	r3, r3, #13
 800a9ee:	b2db      	uxtb	r3, r3
 800a9f0:	f003 0307 	and.w	r3, r3, #7
 800a9f4:	b2da      	uxtb	r2, r3
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d11a      	bne.n	800aa36 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	78db      	ldrb	r3, [r3, #3]
 800aa04:	4618      	mov	r0, r3
 800aa06:	f000 fa0b 	bl	800ae20 <RTC_Bcd2ToByte>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	785b      	ldrb	r3, [r3, #1]
 800aa16:	4618      	mov	r0, r3
 800aa18:	f000 fa02 	bl	800ae20 <RTC_Bcd2ToByte>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	461a      	mov	r2, r3
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	789b      	ldrb	r3, [r3, #2]
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f000 f9f9 	bl	800ae20 <RTC_Bcd2ToByte>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	461a      	mov	r2, r3
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800aa36:	2300      	movs	r3, #0
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3718      	adds	r7, #24
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800aa40:	b590      	push	{r4, r7, lr}
 800aa42:	b089      	sub	sp, #36	; 0x24
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	60f8      	str	r0, [r7, #12]
 800aa48:	60b9      	str	r1, [r7, #8]
 800aa4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	61fb      	str	r3, [r7, #28]
 800aa50:	2300      	movs	r3, #0
 800aa52:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 800aa54:	4b93      	ldr	r3, [pc, #588]	; (800aca4 <HAL_RTC_SetAlarm_IT+0x264>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4a93      	ldr	r2, [pc, #588]	; (800aca8 <HAL_RTC_SetAlarm_IT+0x268>)
 800aa5a:	fba2 2303 	umull	r2, r3, r2, r3
 800aa5e:	0adb      	lsrs	r3, r3, #11
 800aa60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aa64:	fb02 f303 	mul.w	r3, r2, r3
 800aa68:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	7f1b      	ldrb	r3, [r3, #28]
 800aa6e:	2b01      	cmp	r3, #1
 800aa70:	d101      	bne.n	800aa76 <HAL_RTC_SetAlarm_IT+0x36>
 800aa72:	2302      	movs	r3, #2
 800aa74:	e111      	b.n	800ac9a <HAL_RTC_SetAlarm_IT+0x25a>
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2201      	movs	r2, #1
 800aa7a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2202      	movs	r2, #2
 800aa80:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d137      	bne.n	800aaf8 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	689b      	ldr	r3, [r3, #8]
 800aa8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d102      	bne.n	800aa9c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f000 f99f 	bl	800ade4 <RTC_ByteToBcd2>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	785b      	ldrb	r3, [r3, #1]
 800aaae:	4618      	mov	r0, r3
 800aab0:	f000 f998 	bl	800ade4 <RTC_ByteToBcd2>
 800aab4:	4603      	mov	r3, r0
 800aab6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800aab8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	789b      	ldrb	r3, [r3, #2]
 800aabe:	4618      	mov	r0, r3
 800aac0:	f000 f990 	bl	800ade4 <RTC_ByteToBcd2>
 800aac4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800aac6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	78db      	ldrb	r3, [r3, #3]
 800aace:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800aad0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aada:	4618      	mov	r0, r3
 800aadc:	f000 f982 	bl	800ade4 <RTC_ByteToBcd2>
 800aae0:	4603      	mov	r3, r0
 800aae2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800aae4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800aaec:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	61fb      	str	r3, [r7, #28]
 800aaf6:	e023      	b.n	800ab40 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	689b      	ldr	r3, [r3, #8]
 800aafe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d102      	bne.n	800ab0c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	785b      	ldrb	r3, [r3, #1]
 800ab16:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800ab18:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800ab1a:	68ba      	ldr	r2, [r7, #8]
 800ab1c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800ab1e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	78db      	ldrb	r3, [r3, #3]
 800ab24:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800ab26:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ab2e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800ab30:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800ab36:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	685a      	ldr	r2, [r3, #4]
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	699b      	ldr	r3, [r3, #24]
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	22ca      	movs	r2, #202	; 0xca
 800ab52:	625a      	str	r2, [r3, #36]	; 0x24
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	2253      	movs	r2, #83	; 0x53
 800ab5a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab64:	d141      	bne.n	800abea <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	689a      	ldr	r2, [r3, #8]
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ab74:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	68db      	ldr	r3, [r3, #12]
 800ab7c:	b2da      	uxtb	r2, r3
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800ab86:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	1e5a      	subs	r2, r3, #1
 800ab8c:	617a      	str	r2, [r7, #20]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d10b      	bne.n	800abaa <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	22ff      	movs	r2, #255	; 0xff
 800ab98:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2203      	movs	r2, #3
 800ab9e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2200      	movs	r2, #0
 800aba4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800aba6:	2303      	movs	r3, #3
 800aba8:	e077      	b.n	800ac9a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	68db      	ldr	r3, [r3, #12]
 800abb0:	f003 0301 	and.w	r3, r3, #1
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d0e7      	beq.n	800ab88 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	69fa      	ldr	r2, [r7, #28]
 800abbe:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	69ba      	ldr	r2, [r7, #24]
 800abc6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	689a      	ldr	r2, [r3, #8]
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800abd6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	689a      	ldr	r2, [r3, #8]
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800abe6:	609a      	str	r2, [r3, #8]
 800abe8:	e040      	b.n	800ac6c <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	689a      	ldr	r2, [r3, #8]
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800abf8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	68db      	ldr	r3, [r3, #12]
 800ac00:	b2da      	uxtb	r2, r3
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f462 7220 	orn	r2, r2, #640	; 0x280
 800ac0a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	1e5a      	subs	r2, r3, #1
 800ac10:	617a      	str	r2, [r7, #20]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d10b      	bne.n	800ac2e <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	22ff      	movs	r2, #255	; 0xff
 800ac1c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2203      	movs	r2, #3
 800ac22:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2200      	movs	r2, #0
 800ac28:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800ac2a:	2303      	movs	r3, #3
 800ac2c:	e035      	b.n	800ac9a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	68db      	ldr	r3, [r3, #12]
 800ac34:	f003 0302 	and.w	r3, r3, #2
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d0e7      	beq.n	800ac0c <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	69fa      	ldr	r2, [r7, #28]
 800ac42:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	69ba      	ldr	r2, [r7, #24]
 800ac4a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	689a      	ldr	r2, [r3, #8]
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac5a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	689a      	ldr	r2, [r3, #8]
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ac6a:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800ac6c:	4b0f      	ldr	r3, [pc, #60]	; (800acac <HAL_RTC_SetAlarm_IT+0x26c>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	4a0e      	ldr	r2, [pc, #56]	; (800acac <HAL_RTC_SetAlarm_IT+0x26c>)
 800ac72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac76:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 800ac78:	4b0c      	ldr	r3, [pc, #48]	; (800acac <HAL_RTC_SetAlarm_IT+0x26c>)
 800ac7a:	689b      	ldr	r3, [r3, #8]
 800ac7c:	4a0b      	ldr	r2, [pc, #44]	; (800acac <HAL_RTC_SetAlarm_IT+0x26c>)
 800ac7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac82:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	22ff      	movs	r2, #255	; 0xff
 800ac8a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	2201      	movs	r2, #1
 800ac90:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2200      	movs	r2, #0
 800ac96:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800ac98:	2300      	movs	r3, #0
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3724      	adds	r7, #36	; 0x24
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd90      	pop	{r4, r7, pc}
 800aca2:	bf00      	nop
 800aca4:	20000000 	.word	0x20000000
 800aca8:	10624dd3 	.word	0x10624dd3
 800acac:	40013c00 	.word	0x40013c00

0800acb0 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	689b      	ldr	r3, [r3, #8]
 800acbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d012      	beq.n	800acec <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	68db      	ldr	r3, [r3, #12]
 800accc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d00b      	beq.n	800acec <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f7fc fc89 	bl	80075ec <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	68db      	ldr	r3, [r3, #12]
 800ace0:	b2da      	uxtb	r2, r3
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800acea:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	689b      	ldr	r3, [r3, #8]
 800acf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d012      	beq.n	800ad20 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d00b      	beq.n	800ad20 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f000 f9bf 	bl	800b08c <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	b2da      	uxtb	r2, r3
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800ad1e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800ad20:	4b05      	ldr	r3, [pc, #20]	; (800ad38 <HAL_RTC_AlarmIRQHandler+0x88>)
 800ad22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ad26:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	775a      	strb	r2, [r3, #29]
}
 800ad2e:	bf00      	nop
 800ad30:	3708      	adds	r7, #8
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop
 800ad38:	40013c00 	.word	0x40013c00

0800ad3c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ad44:	2300      	movs	r3, #0
 800ad46:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	68da      	ldr	r2, [r3, #12]
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800ad56:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ad58:	f7fc fec2 	bl	8007ae0 <HAL_GetTick>
 800ad5c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800ad5e:	e009      	b.n	800ad74 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800ad60:	f7fc febe 	bl	8007ae0 <HAL_GetTick>
 800ad64:	4602      	mov	r2, r0
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	1ad3      	subs	r3, r2, r3
 800ad6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad6e:	d901      	bls.n	800ad74 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800ad70:	2303      	movs	r3, #3
 800ad72:	e007      	b.n	800ad84 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	68db      	ldr	r3, [r3, #12]
 800ad7a:	f003 0320 	and.w	r3, r3, #32
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d0ee      	beq.n	800ad60 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800ad82:	2300      	movs	r3, #0
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3710      	adds	r7, #16
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b084      	sub	sp, #16
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ad94:	2300      	movs	r3, #0
 800ad96:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d119      	bne.n	800adda <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f04f 32ff 	mov.w	r2, #4294967295
 800adae:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800adb0:	f7fc fe96 	bl	8007ae0 <HAL_GetTick>
 800adb4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800adb6:	e009      	b.n	800adcc <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800adb8:	f7fc fe92 	bl	8007ae0 <HAL_GetTick>
 800adbc:	4602      	mov	r2, r0
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	1ad3      	subs	r3, r2, r3
 800adc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800adc6:	d901      	bls.n	800adcc <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800adc8:	2303      	movs	r3, #3
 800adca:	e007      	b.n	800addc <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	68db      	ldr	r3, [r3, #12]
 800add2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800add6:	2b00      	cmp	r3, #0
 800add8:	d0ee      	beq.n	800adb8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800adda:	2300      	movs	r3, #0
}
 800addc:	4618      	mov	r0, r3
 800adde:	3710      	adds	r7, #16
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b085      	sub	sp, #20
 800ade8:	af00      	add	r7, sp, #0
 800adea:	4603      	mov	r3, r0
 800adec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800adee:	2300      	movs	r3, #0
 800adf0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800adf2:	e005      	b.n	800ae00 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	3301      	adds	r3, #1
 800adf8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800adfa:	79fb      	ldrb	r3, [r7, #7]
 800adfc:	3b0a      	subs	r3, #10
 800adfe:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800ae00:	79fb      	ldrb	r3, [r7, #7]
 800ae02:	2b09      	cmp	r3, #9
 800ae04:	d8f6      	bhi.n	800adf4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	b2db      	uxtb	r3, r3
 800ae0a:	011b      	lsls	r3, r3, #4
 800ae0c:	b2da      	uxtb	r2, r3
 800ae0e:	79fb      	ldrb	r3, [r7, #7]
 800ae10:	4313      	orrs	r3, r2
 800ae12:	b2db      	uxtb	r3, r3
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3714      	adds	r7, #20
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr

0800ae20 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b085      	sub	sp, #20
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	4603      	mov	r3, r0
 800ae28:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800ae2e:	79fb      	ldrb	r3, [r7, #7]
 800ae30:	091b      	lsrs	r3, r3, #4
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	461a      	mov	r2, r3
 800ae36:	4613      	mov	r3, r2
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	4413      	add	r3, r2
 800ae3c:	005b      	lsls	r3, r3, #1
 800ae3e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800ae40:	79fb      	ldrb	r3, [r7, #7]
 800ae42:	f003 030f 	and.w	r3, r3, #15
 800ae46:	b2da      	uxtb	r2, r3
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	b2db      	uxtb	r3, r3
 800ae4c:	4413      	add	r3, r2
 800ae4e:	b2db      	uxtb	r3, r3
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3714      	adds	r7, #20
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr

0800ae5c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b087      	sub	sp, #28
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	60f8      	str	r0, [r7, #12]
 800ae64:	60b9      	str	r1, [r7, #8]
 800ae66:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	7f1b      	ldrb	r3, [r3, #28]
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d101      	bne.n	800ae74 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 800ae70:	2302      	movs	r3, #2
 800ae72:	e0a6      	b.n	800afc2 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	2201      	movs	r2, #1
 800ae78:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2202      	movs	r2, #2
 800ae7e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	22ca      	movs	r2, #202	; 0xca
 800ae86:	625a      	str	r2, [r3, #36]	; 0x24
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	2253      	movs	r2, #83	; 0x53
 800ae8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	689b      	ldr	r3, [r3, #8]
 800ae96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d022      	beq.n	800aee4 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800ae9e:	4b4c      	ldr	r3, [pc, #304]	; (800afd0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	4a4c      	ldr	r2, [pc, #304]	; (800afd4 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800aea4:	fba2 2303 	umull	r2, r3, r2, r3
 800aea8:	0adb      	lsrs	r3, r3, #11
 800aeaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aeae:	fb02 f303 	mul.w	r3, r2, r3
 800aeb2:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	1e5a      	subs	r2, r3, #1
 800aeb8:	617a      	str	r2, [r7, #20]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d10b      	bne.n	800aed6 <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	22ff      	movs	r2, #255	; 0xff
 800aec4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	2203      	movs	r2, #3
 800aeca:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2200      	movs	r2, #0
 800aed0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800aed2:	2303      	movs	r3, #3
 800aed4:	e075      	b.n	800afc2 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	68db      	ldr	r3, [r3, #12]
 800aedc:	f003 0304 	and.w	r3, r3, #4
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d1e7      	bne.n	800aeb4 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	689a      	ldr	r2, [r3, #8]
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aef2:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800aef4:	4b36      	ldr	r3, [pc, #216]	; (800afd0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	4a36      	ldr	r2, [pc, #216]	; (800afd4 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800aefa:	fba2 2303 	umull	r2, r3, r2, r3
 800aefe:	0adb      	lsrs	r3, r3, #11
 800af00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800af04:	fb02 f303 	mul.w	r3, r2, r3
 800af08:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	1e5a      	subs	r2, r3, #1
 800af0e:	617a      	str	r2, [r7, #20]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d10b      	bne.n	800af2c <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	22ff      	movs	r2, #255	; 0xff
 800af1a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	2203      	movs	r2, #3
 800af20:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2200      	movs	r2, #0
 800af26:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800af28:	2303      	movs	r3, #3
 800af2a:	e04a      	b.n	800afc2 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	68db      	ldr	r3, [r3, #12]
 800af32:	f003 0304 	and.w	r3, r3, #4
 800af36:	2b00      	cmp	r3, #0
 800af38:	d0e7      	beq.n	800af0a <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	68ba      	ldr	r2, [r7, #8]
 800af40:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	689a      	ldr	r2, [r3, #8]
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f022 0207 	bic.w	r2, r2, #7
 800af50:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	6899      	ldr	r1, [r3, #8]
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	430a      	orrs	r2, r1
 800af60:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800af62:	4b1d      	ldr	r3, [pc, #116]	; (800afd8 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	4a1c      	ldr	r2, [pc, #112]	; (800afd8 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800af68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800af6c:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800af6e:	4b1a      	ldr	r3, [pc, #104]	; (800afd8 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800af70:	689b      	ldr	r3, [r3, #8]
 800af72:	4a19      	ldr	r2, [pc, #100]	; (800afd8 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800af74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800af78:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	68db      	ldr	r3, [r3, #12]
 800af80:	b2da      	uxtb	r2, r3
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800af8a:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	689a      	ldr	r2, [r3, #8]
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800af9a:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	689a      	ldr	r2, [r3, #8]
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800afaa:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	22ff      	movs	r2, #255	; 0xff
 800afb2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2201      	movs	r2, #1
 800afb8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2200      	movs	r2, #0
 800afbe:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800afc0:	2300      	movs	r3, #0
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	371c      	adds	r7, #28
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr
 800afce:	bf00      	nop
 800afd0:	20000000 	.word	0x20000000
 800afd4:	10624dd3 	.word	0x10624dd3
 800afd8:	40013c00 	.word	0x40013c00

0800afdc <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800afe4:	2300      	movs	r3, #0
 800afe6:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	7f1b      	ldrb	r3, [r3, #28]
 800afec:	2b01      	cmp	r3, #1
 800afee:	d101      	bne.n	800aff4 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 800aff0:	2302      	movs	r3, #2
 800aff2:	e047      	b.n	800b084 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2201      	movs	r2, #1
 800aff8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2202      	movs	r2, #2
 800affe:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	22ca      	movs	r2, #202	; 0xca
 800b006:	625a      	str	r2, [r3, #36]	; 0x24
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	2253      	movs	r2, #83	; 0x53
 800b00e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	689a      	ldr	r2, [r3, #8]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b01e:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	689a      	ldr	r2, [r3, #8]
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b02e:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b030:	f7fc fd56 	bl	8007ae0 <HAL_GetTick>
 800b034:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800b036:	e013      	b.n	800b060 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b038:	f7fc fd52 	bl	8007ae0 <HAL_GetTick>
 800b03c:	4602      	mov	r2, r0
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	1ad3      	subs	r3, r2, r3
 800b042:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b046:	d90b      	bls.n	800b060 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	22ff      	movs	r2, #255	; 0xff
 800b04e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2203      	movs	r2, #3
 800b054:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800b05c:	2303      	movs	r3, #3
 800b05e:	e011      	b.n	800b084 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	68db      	ldr	r3, [r3, #12]
 800b066:	f003 0304 	and.w	r3, r3, #4
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d0e4      	beq.n	800b038 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	22ff      	movs	r2, #255	; 0xff
 800b074:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2201      	movs	r2, #1
 800b07a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2200      	movs	r2, #0
 800b080:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800b082:	2300      	movs	r3, #0
}
 800b084:	4618      	mov	r0, r3
 800b086:	3710      	adds	r7, #16
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b083      	sub	sp, #12
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 800b094:	bf00      	nop
 800b096:	370c      	adds	r7, #12
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr

0800b0a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d101      	bne.n	800b0b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	e07b      	b.n	800b1aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d108      	bne.n	800b0cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b0c2:	d009      	beq.n	800b0d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	61da      	str	r2, [r3, #28]
 800b0ca:	e005      	b.n	800b0d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d106      	bne.n	800b0f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f7f7 fc12 	bl	800291c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2202      	movs	r2, #2
 800b0fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	681a      	ldr	r2, [r3, #0]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b10e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	685b      	ldr	r3, [r3, #4]
 800b114:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	689b      	ldr	r3, [r3, #8]
 800b11c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b120:	431a      	orrs	r2, r3
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	68db      	ldr	r3, [r3, #12]
 800b126:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b12a:	431a      	orrs	r2, r3
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	691b      	ldr	r3, [r3, #16]
 800b130:	f003 0302 	and.w	r3, r3, #2
 800b134:	431a      	orrs	r2, r3
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	695b      	ldr	r3, [r3, #20]
 800b13a:	f003 0301 	and.w	r3, r3, #1
 800b13e:	431a      	orrs	r2, r3
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	699b      	ldr	r3, [r3, #24]
 800b144:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b148:	431a      	orrs	r2, r3
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	69db      	ldr	r3, [r3, #28]
 800b14e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b152:	431a      	orrs	r2, r3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6a1b      	ldr	r3, [r3, #32]
 800b158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b15c:	ea42 0103 	orr.w	r1, r2, r3
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b164:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	430a      	orrs	r2, r1
 800b16e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	699b      	ldr	r3, [r3, #24]
 800b174:	0c1b      	lsrs	r3, r3, #16
 800b176:	f003 0104 	and.w	r1, r3, #4
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b17e:	f003 0210 	and.w	r2, r3, #16
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	430a      	orrs	r2, r1
 800b188:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	69da      	ldr	r2, [r3, #28]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b198:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2200      	movs	r2, #0
 800b19e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b1a8:	2300      	movs	r3, #0
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3708      	adds	r7, #8
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}

0800b1b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b1b2:	b580      	push	{r7, lr}
 800b1b4:	b088      	sub	sp, #32
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	60f8      	str	r0, [r7, #12]
 800b1ba:	60b9      	str	r1, [r7, #8]
 800b1bc:	603b      	str	r3, [r7, #0]
 800b1be:	4613      	mov	r3, r2
 800b1c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d101      	bne.n	800b1d4 <HAL_SPI_Transmit+0x22>
 800b1d0:	2302      	movs	r3, #2
 800b1d2:	e126      	b.n	800b422 <HAL_SPI_Transmit+0x270>
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b1dc:	f7fc fc80 	bl	8007ae0 <HAL_GetTick>
 800b1e0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b1e2:	88fb      	ldrh	r3, [r7, #6]
 800b1e4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b1ec:	b2db      	uxtb	r3, r3
 800b1ee:	2b01      	cmp	r3, #1
 800b1f0:	d002      	beq.n	800b1f8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b1f2:	2302      	movs	r3, #2
 800b1f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b1f6:	e10b      	b.n	800b410 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d002      	beq.n	800b204 <HAL_SPI_Transmit+0x52>
 800b1fe:	88fb      	ldrh	r3, [r7, #6]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d102      	bne.n	800b20a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b204:	2301      	movs	r3, #1
 800b206:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b208:	e102      	b.n	800b410 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2203      	movs	r2, #3
 800b20e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2200      	movs	r2, #0
 800b216:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	68ba      	ldr	r2, [r7, #8]
 800b21c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	88fa      	ldrh	r2, [r7, #6]
 800b222:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	88fa      	ldrh	r2, [r7, #6]
 800b228:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	2200      	movs	r2, #0
 800b22e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	2200      	movs	r2, #0
 800b234:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	2200      	movs	r2, #0
 800b23a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2200      	movs	r2, #0
 800b240:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2200      	movs	r2, #0
 800b246:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	689b      	ldr	r3, [r3, #8]
 800b24c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b250:	d10f      	bne.n	800b272 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	681a      	ldr	r2, [r3, #0]
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b260:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	681a      	ldr	r2, [r3, #0]
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b270:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b27c:	2b40      	cmp	r3, #64	; 0x40
 800b27e:	d007      	beq.n	800b290 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b28e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	68db      	ldr	r3, [r3, #12]
 800b294:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b298:	d14b      	bne.n	800b332 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d002      	beq.n	800b2a8 <HAL_SPI_Transmit+0xf6>
 800b2a2:	8afb      	ldrh	r3, [r7, #22]
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	d13e      	bne.n	800b326 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ac:	881a      	ldrh	r2, [r3, #0]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2b8:	1c9a      	adds	r2, r3, #2
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	3b01      	subs	r3, #1
 800b2c6:	b29a      	uxth	r2, r3
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b2cc:	e02b      	b.n	800b326 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	689b      	ldr	r3, [r3, #8]
 800b2d4:	f003 0302 	and.w	r3, r3, #2
 800b2d8:	2b02      	cmp	r3, #2
 800b2da:	d112      	bne.n	800b302 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2e0:	881a      	ldrh	r2, [r3, #0]
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ec:	1c9a      	adds	r2, r3, #2
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b2f6:	b29b      	uxth	r3, r3
 800b2f8:	3b01      	subs	r3, #1
 800b2fa:	b29a      	uxth	r2, r3
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	86da      	strh	r2, [r3, #54]	; 0x36
 800b300:	e011      	b.n	800b326 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b302:	f7fc fbed 	bl	8007ae0 <HAL_GetTick>
 800b306:	4602      	mov	r2, r0
 800b308:	69bb      	ldr	r3, [r7, #24]
 800b30a:	1ad3      	subs	r3, r2, r3
 800b30c:	683a      	ldr	r2, [r7, #0]
 800b30e:	429a      	cmp	r2, r3
 800b310:	d803      	bhi.n	800b31a <HAL_SPI_Transmit+0x168>
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b318:	d102      	bne.n	800b320 <HAL_SPI_Transmit+0x16e>
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d102      	bne.n	800b326 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800b320:	2303      	movs	r3, #3
 800b322:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b324:	e074      	b.n	800b410 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b32a:	b29b      	uxth	r3, r3
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d1ce      	bne.n	800b2ce <HAL_SPI_Transmit+0x11c>
 800b330:	e04c      	b.n	800b3cc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d002      	beq.n	800b340 <HAL_SPI_Transmit+0x18e>
 800b33a:	8afb      	ldrh	r3, [r7, #22]
 800b33c:	2b01      	cmp	r3, #1
 800b33e:	d140      	bne.n	800b3c2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	330c      	adds	r3, #12
 800b34a:	7812      	ldrb	r2, [r2, #0]
 800b34c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b352:	1c5a      	adds	r2, r3, #1
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	3b01      	subs	r3, #1
 800b360:	b29a      	uxth	r2, r3
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b366:	e02c      	b.n	800b3c2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	689b      	ldr	r3, [r3, #8]
 800b36e:	f003 0302 	and.w	r3, r3, #2
 800b372:	2b02      	cmp	r3, #2
 800b374:	d113      	bne.n	800b39e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	330c      	adds	r3, #12
 800b380:	7812      	ldrb	r2, [r2, #0]
 800b382:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b388:	1c5a      	adds	r2, r3, #1
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b392:	b29b      	uxth	r3, r3
 800b394:	3b01      	subs	r3, #1
 800b396:	b29a      	uxth	r2, r3
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	86da      	strh	r2, [r3, #54]	; 0x36
 800b39c:	e011      	b.n	800b3c2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b39e:	f7fc fb9f 	bl	8007ae0 <HAL_GetTick>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	69bb      	ldr	r3, [r7, #24]
 800b3a6:	1ad3      	subs	r3, r2, r3
 800b3a8:	683a      	ldr	r2, [r7, #0]
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d803      	bhi.n	800b3b6 <HAL_SPI_Transmit+0x204>
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3b4:	d102      	bne.n	800b3bc <HAL_SPI_Transmit+0x20a>
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d102      	bne.n	800b3c2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800b3bc:	2303      	movs	r3, #3
 800b3be:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b3c0:	e026      	b.n	800b410 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b3c6:	b29b      	uxth	r3, r3
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d1cd      	bne.n	800b368 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b3cc:	69ba      	ldr	r2, [r7, #24]
 800b3ce:	6839      	ldr	r1, [r7, #0]
 800b3d0:	68f8      	ldr	r0, [r7, #12]
 800b3d2:	f000 fbcb 	bl	800bb6c <SPI_EndRxTxTransaction>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d002      	beq.n	800b3e2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	2220      	movs	r2, #32
 800b3e0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	689b      	ldr	r3, [r3, #8]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d10a      	bne.n	800b400 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	613b      	str	r3, [r7, #16]
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	68db      	ldr	r3, [r3, #12]
 800b3f4:	613b      	str	r3, [r7, #16]
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	689b      	ldr	r3, [r3, #8]
 800b3fc:	613b      	str	r3, [r7, #16]
 800b3fe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b404:	2b00      	cmp	r3, #0
 800b406:	d002      	beq.n	800b40e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800b408:	2301      	movs	r3, #1
 800b40a:	77fb      	strb	r3, [r7, #31]
 800b40c:	e000      	b.n	800b410 <HAL_SPI_Transmit+0x25e>
  }

error:
 800b40e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	2201      	movs	r2, #1
 800b414:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	2200      	movs	r2, #0
 800b41c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b420:	7ffb      	ldrb	r3, [r7, #31]
}
 800b422:	4618      	mov	r0, r3
 800b424:	3720      	adds	r7, #32
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}

0800b42a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b42a:	b580      	push	{r7, lr}
 800b42c:	b088      	sub	sp, #32
 800b42e:	af02      	add	r7, sp, #8
 800b430:	60f8      	str	r0, [r7, #12]
 800b432:	60b9      	str	r1, [r7, #8]
 800b434:	603b      	str	r3, [r7, #0]
 800b436:	4613      	mov	r3, r2
 800b438:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b43a:	2300      	movs	r3, #0
 800b43c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b446:	d112      	bne.n	800b46e <HAL_SPI_Receive+0x44>
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	689b      	ldr	r3, [r3, #8]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d10e      	bne.n	800b46e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2204      	movs	r2, #4
 800b454:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b458:	88fa      	ldrh	r2, [r7, #6]
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	9300      	str	r3, [sp, #0]
 800b45e:	4613      	mov	r3, r2
 800b460:	68ba      	ldr	r2, [r7, #8]
 800b462:	68b9      	ldr	r1, [r7, #8]
 800b464:	68f8      	ldr	r0, [r7, #12]
 800b466:	f000 f8f1 	bl	800b64c <HAL_SPI_TransmitReceive>
 800b46a:	4603      	mov	r3, r0
 800b46c:	e0ea      	b.n	800b644 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b474:	2b01      	cmp	r3, #1
 800b476:	d101      	bne.n	800b47c <HAL_SPI_Receive+0x52>
 800b478:	2302      	movs	r3, #2
 800b47a:	e0e3      	b.n	800b644 <HAL_SPI_Receive+0x21a>
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	2201      	movs	r2, #1
 800b480:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b484:	f7fc fb2c 	bl	8007ae0 <HAL_GetTick>
 800b488:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b490:	b2db      	uxtb	r3, r3
 800b492:	2b01      	cmp	r3, #1
 800b494:	d002      	beq.n	800b49c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800b496:	2302      	movs	r3, #2
 800b498:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b49a:	e0ca      	b.n	800b632 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d002      	beq.n	800b4a8 <HAL_SPI_Receive+0x7e>
 800b4a2:	88fb      	ldrh	r3, [r7, #6]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d102      	bne.n	800b4ae <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b4ac:	e0c1      	b.n	800b632 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2204      	movs	r2, #4
 800b4b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	68ba      	ldr	r2, [r7, #8]
 800b4c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	88fa      	ldrh	r2, [r7, #6]
 800b4c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	88fa      	ldrh	r2, [r7, #6]
 800b4cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	689b      	ldr	r3, [r3, #8]
 800b4f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4f4:	d10f      	bne.n	800b516 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	681a      	ldr	r2, [r3, #0]
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b504:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b514:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b520:	2b40      	cmp	r3, #64	; 0x40
 800b522:	d007      	beq.n	800b534 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	681a      	ldr	r2, [r3, #0]
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b532:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	68db      	ldr	r3, [r3, #12]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d162      	bne.n	800b602 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b53c:	e02e      	b.n	800b59c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	689b      	ldr	r3, [r3, #8]
 800b544:	f003 0301 	and.w	r3, r3, #1
 800b548:	2b01      	cmp	r3, #1
 800b54a:	d115      	bne.n	800b578 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f103 020c 	add.w	r2, r3, #12
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b558:	7812      	ldrb	r2, [r2, #0]
 800b55a:	b2d2      	uxtb	r2, r2
 800b55c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b562:	1c5a      	adds	r2, r3, #1
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	3b01      	subs	r3, #1
 800b570:	b29a      	uxth	r2, r3
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b576:	e011      	b.n	800b59c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b578:	f7fc fab2 	bl	8007ae0 <HAL_GetTick>
 800b57c:	4602      	mov	r2, r0
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	1ad3      	subs	r3, r2, r3
 800b582:	683a      	ldr	r2, [r7, #0]
 800b584:	429a      	cmp	r2, r3
 800b586:	d803      	bhi.n	800b590 <HAL_SPI_Receive+0x166>
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b58e:	d102      	bne.n	800b596 <HAL_SPI_Receive+0x16c>
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d102      	bne.n	800b59c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800b596:	2303      	movs	r3, #3
 800b598:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b59a:	e04a      	b.n	800b632 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5a0:	b29b      	uxth	r3, r3
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d1cb      	bne.n	800b53e <HAL_SPI_Receive+0x114>
 800b5a6:	e031      	b.n	800b60c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	689b      	ldr	r3, [r3, #8]
 800b5ae:	f003 0301 	and.w	r3, r3, #1
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	d113      	bne.n	800b5de <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	68da      	ldr	r2, [r3, #12]
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5c0:	b292      	uxth	r2, r2
 800b5c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5c8:	1c9a      	adds	r2, r3, #2
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5d2:	b29b      	uxth	r3, r3
 800b5d4:	3b01      	subs	r3, #1
 800b5d6:	b29a      	uxth	r2, r3
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b5dc:	e011      	b.n	800b602 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b5de:	f7fc fa7f 	bl	8007ae0 <HAL_GetTick>
 800b5e2:	4602      	mov	r2, r0
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	1ad3      	subs	r3, r2, r3
 800b5e8:	683a      	ldr	r2, [r7, #0]
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	d803      	bhi.n	800b5f6 <HAL_SPI_Receive+0x1cc>
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5f4:	d102      	bne.n	800b5fc <HAL_SPI_Receive+0x1d2>
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d102      	bne.n	800b602 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800b5fc:	2303      	movs	r3, #3
 800b5fe:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b600:	e017      	b.n	800b632 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b606:	b29b      	uxth	r3, r3
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d1cd      	bne.n	800b5a8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b60c:	693a      	ldr	r2, [r7, #16]
 800b60e:	6839      	ldr	r1, [r7, #0]
 800b610:	68f8      	ldr	r0, [r7, #12]
 800b612:	f000 fa45 	bl	800baa0 <SPI_EndRxTransaction>
 800b616:	4603      	mov	r3, r0
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d002      	beq.n	800b622 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2220      	movs	r2, #32
 800b620:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b626:	2b00      	cmp	r3, #0
 800b628:	d002      	beq.n	800b630 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800b62a:	2301      	movs	r3, #1
 800b62c:	75fb      	strb	r3, [r7, #23]
 800b62e:	e000      	b.n	800b632 <HAL_SPI_Receive+0x208>
  }

error :
 800b630:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	2201      	movs	r2, #1
 800b636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	2200      	movs	r2, #0
 800b63e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b642:	7dfb      	ldrb	r3, [r7, #23]
}
 800b644:	4618      	mov	r0, r3
 800b646:	3718      	adds	r7, #24
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b08c      	sub	sp, #48	; 0x30
 800b650:	af00      	add	r7, sp, #0
 800b652:	60f8      	str	r0, [r7, #12]
 800b654:	60b9      	str	r1, [r7, #8]
 800b656:	607a      	str	r2, [r7, #4]
 800b658:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b65a:	2301      	movs	r3, #1
 800b65c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b65e:	2300      	movs	r3, #0
 800b660:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b66a:	2b01      	cmp	r3, #1
 800b66c:	d101      	bne.n	800b672 <HAL_SPI_TransmitReceive+0x26>
 800b66e:	2302      	movs	r3, #2
 800b670:	e18a      	b.n	800b988 <HAL_SPI_TransmitReceive+0x33c>
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2201      	movs	r2, #1
 800b676:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b67a:	f7fc fa31 	bl	8007ae0 <HAL_GetTick>
 800b67e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b690:	887b      	ldrh	r3, [r7, #2]
 800b692:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b694:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b698:	2b01      	cmp	r3, #1
 800b69a:	d00f      	beq.n	800b6bc <HAL_SPI_TransmitReceive+0x70>
 800b69c:	69fb      	ldr	r3, [r7, #28]
 800b69e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b6a2:	d107      	bne.n	800b6b4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d103      	bne.n	800b6b4 <HAL_SPI_TransmitReceive+0x68>
 800b6ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b6b0:	2b04      	cmp	r3, #4
 800b6b2:	d003      	beq.n	800b6bc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b6b4:	2302      	movs	r3, #2
 800b6b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b6ba:	e15b      	b.n	800b974 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d005      	beq.n	800b6ce <HAL_SPI_TransmitReceive+0x82>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d002      	beq.n	800b6ce <HAL_SPI_TransmitReceive+0x82>
 800b6c8:	887b      	ldrh	r3, [r7, #2]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d103      	bne.n	800b6d6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b6d4:	e14e      	b.n	800b974 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b6dc:	b2db      	uxtb	r3, r3
 800b6de:	2b04      	cmp	r3, #4
 800b6e0:	d003      	beq.n	800b6ea <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	2205      	movs	r2, #5
 800b6e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	687a      	ldr	r2, [r7, #4]
 800b6f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	887a      	ldrh	r2, [r7, #2]
 800b6fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	887a      	ldrh	r2, [r7, #2]
 800b700:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	68ba      	ldr	r2, [r7, #8]
 800b706:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	887a      	ldrh	r2, [r7, #2]
 800b70c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	887a      	ldrh	r2, [r7, #2]
 800b712:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2200      	movs	r2, #0
 800b718:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2200      	movs	r2, #0
 800b71e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b72a:	2b40      	cmp	r3, #64	; 0x40
 800b72c:	d007      	beq.n	800b73e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	681a      	ldr	r2, [r3, #0]
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b73c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	68db      	ldr	r3, [r3, #12]
 800b742:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b746:	d178      	bne.n	800b83a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	685b      	ldr	r3, [r3, #4]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d002      	beq.n	800b756 <HAL_SPI_TransmitReceive+0x10a>
 800b750:	8b7b      	ldrh	r3, [r7, #26]
 800b752:	2b01      	cmp	r3, #1
 800b754:	d166      	bne.n	800b824 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b75a:	881a      	ldrh	r2, [r3, #0]
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b766:	1c9a      	adds	r2, r3, #2
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b770:	b29b      	uxth	r3, r3
 800b772:	3b01      	subs	r3, #1
 800b774:	b29a      	uxth	r2, r3
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b77a:	e053      	b.n	800b824 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	689b      	ldr	r3, [r3, #8]
 800b782:	f003 0302 	and.w	r3, r3, #2
 800b786:	2b02      	cmp	r3, #2
 800b788:	d11b      	bne.n	800b7c2 <HAL_SPI_TransmitReceive+0x176>
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b78e:	b29b      	uxth	r3, r3
 800b790:	2b00      	cmp	r3, #0
 800b792:	d016      	beq.n	800b7c2 <HAL_SPI_TransmitReceive+0x176>
 800b794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b796:	2b01      	cmp	r3, #1
 800b798:	d113      	bne.n	800b7c2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b79e:	881a      	ldrh	r2, [r3, #0]
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7aa:	1c9a      	adds	r2, r3, #2
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	3b01      	subs	r3, #1
 800b7b8:	b29a      	uxth	r2, r3
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	689b      	ldr	r3, [r3, #8]
 800b7c8:	f003 0301 	and.w	r3, r3, #1
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	d119      	bne.n	800b804 <HAL_SPI_TransmitReceive+0x1b8>
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7d4:	b29b      	uxth	r3, r3
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d014      	beq.n	800b804 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	68da      	ldr	r2, [r3, #12]
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7e4:	b292      	uxth	r2, r2
 800b7e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ec:	1c9a      	adds	r2, r3, #2
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7f6:	b29b      	uxth	r3, r3
 800b7f8:	3b01      	subs	r3, #1
 800b7fa:	b29a      	uxth	r2, r3
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b800:	2301      	movs	r3, #1
 800b802:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b804:	f7fc f96c 	bl	8007ae0 <HAL_GetTick>
 800b808:	4602      	mov	r2, r0
 800b80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b80c:	1ad3      	subs	r3, r2, r3
 800b80e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b810:	429a      	cmp	r2, r3
 800b812:	d807      	bhi.n	800b824 <HAL_SPI_TransmitReceive+0x1d8>
 800b814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b81a:	d003      	beq.n	800b824 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b81c:	2303      	movs	r3, #3
 800b81e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b822:	e0a7      	b.n	800b974 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b828:	b29b      	uxth	r3, r3
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d1a6      	bne.n	800b77c <HAL_SPI_TransmitReceive+0x130>
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b832:	b29b      	uxth	r3, r3
 800b834:	2b00      	cmp	r3, #0
 800b836:	d1a1      	bne.n	800b77c <HAL_SPI_TransmitReceive+0x130>
 800b838:	e07c      	b.n	800b934 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d002      	beq.n	800b848 <HAL_SPI_TransmitReceive+0x1fc>
 800b842:	8b7b      	ldrh	r3, [r7, #26]
 800b844:	2b01      	cmp	r3, #1
 800b846:	d16b      	bne.n	800b920 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	330c      	adds	r3, #12
 800b852:	7812      	ldrb	r2, [r2, #0]
 800b854:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b85a:	1c5a      	adds	r2, r3, #1
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b864:	b29b      	uxth	r3, r3
 800b866:	3b01      	subs	r3, #1
 800b868:	b29a      	uxth	r2, r3
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b86e:	e057      	b.n	800b920 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	689b      	ldr	r3, [r3, #8]
 800b876:	f003 0302 	and.w	r3, r3, #2
 800b87a:	2b02      	cmp	r3, #2
 800b87c:	d11c      	bne.n	800b8b8 <HAL_SPI_TransmitReceive+0x26c>
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b882:	b29b      	uxth	r3, r3
 800b884:	2b00      	cmp	r3, #0
 800b886:	d017      	beq.n	800b8b8 <HAL_SPI_TransmitReceive+0x26c>
 800b888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	d114      	bne.n	800b8b8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	330c      	adds	r3, #12
 800b898:	7812      	ldrb	r2, [r2, #0]
 800b89a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8a0:	1c5a      	adds	r2, r3, #1
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b8aa:	b29b      	uxth	r3, r3
 800b8ac:	3b01      	subs	r3, #1
 800b8ae:	b29a      	uxth	r2, r3
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	689b      	ldr	r3, [r3, #8]
 800b8be:	f003 0301 	and.w	r3, r3, #1
 800b8c2:	2b01      	cmp	r3, #1
 800b8c4:	d119      	bne.n	800b8fa <HAL_SPI_TransmitReceive+0x2ae>
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8ca:	b29b      	uxth	r3, r3
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d014      	beq.n	800b8fa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	68da      	ldr	r2, [r3, #12]
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8da:	b2d2      	uxtb	r2, r2
 800b8dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8e2:	1c5a      	adds	r2, r3, #1
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	3b01      	subs	r3, #1
 800b8f0:	b29a      	uxth	r2, r3
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b8fa:	f7fc f8f1 	bl	8007ae0 <HAL_GetTick>
 800b8fe:	4602      	mov	r2, r0
 800b900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b902:	1ad3      	subs	r3, r2, r3
 800b904:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b906:	429a      	cmp	r2, r3
 800b908:	d803      	bhi.n	800b912 <HAL_SPI_TransmitReceive+0x2c6>
 800b90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b90c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b910:	d102      	bne.n	800b918 <HAL_SPI_TransmitReceive+0x2cc>
 800b912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b914:	2b00      	cmp	r3, #0
 800b916:	d103      	bne.n	800b920 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800b918:	2303      	movs	r3, #3
 800b91a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b91e:	e029      	b.n	800b974 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b924:	b29b      	uxth	r3, r3
 800b926:	2b00      	cmp	r3, #0
 800b928:	d1a2      	bne.n	800b870 <HAL_SPI_TransmitReceive+0x224>
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b92e:	b29b      	uxth	r3, r3
 800b930:	2b00      	cmp	r3, #0
 800b932:	d19d      	bne.n	800b870 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b936:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b938:	68f8      	ldr	r0, [r7, #12]
 800b93a:	f000 f917 	bl	800bb6c <SPI_EndRxTxTransaction>
 800b93e:	4603      	mov	r3, r0
 800b940:	2b00      	cmp	r3, #0
 800b942:	d006      	beq.n	800b952 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800b944:	2301      	movs	r3, #1
 800b946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2220      	movs	r2, #32
 800b94e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b950:	e010      	b.n	800b974 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	689b      	ldr	r3, [r3, #8]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d10b      	bne.n	800b972 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b95a:	2300      	movs	r3, #0
 800b95c:	617b      	str	r3, [r7, #20]
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	68db      	ldr	r3, [r3, #12]
 800b964:	617b      	str	r3, [r7, #20]
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	689b      	ldr	r3, [r3, #8]
 800b96c:	617b      	str	r3, [r7, #20]
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	e000      	b.n	800b974 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800b972:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2201      	movs	r2, #1
 800b978:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2200      	movs	r2, #0
 800b980:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b984:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3730      	adds	r7, #48	; 0x30
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}

0800b990 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b088      	sub	sp, #32
 800b994:	af00      	add	r7, sp, #0
 800b996:	60f8      	str	r0, [r7, #12]
 800b998:	60b9      	str	r1, [r7, #8]
 800b99a:	603b      	str	r3, [r7, #0]
 800b99c:	4613      	mov	r3, r2
 800b99e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b9a0:	f7fc f89e 	bl	8007ae0 <HAL_GetTick>
 800b9a4:	4602      	mov	r2, r0
 800b9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a8:	1a9b      	subs	r3, r3, r2
 800b9aa:	683a      	ldr	r2, [r7, #0]
 800b9ac:	4413      	add	r3, r2
 800b9ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b9b0:	f7fc f896 	bl	8007ae0 <HAL_GetTick>
 800b9b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b9b6:	4b39      	ldr	r3, [pc, #228]	; (800ba9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	015b      	lsls	r3, r3, #5
 800b9bc:	0d1b      	lsrs	r3, r3, #20
 800b9be:	69fa      	ldr	r2, [r7, #28]
 800b9c0:	fb02 f303 	mul.w	r3, r2, r3
 800b9c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b9c6:	e054      	b.n	800ba72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ce:	d050      	beq.n	800ba72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b9d0:	f7fc f886 	bl	8007ae0 <HAL_GetTick>
 800b9d4:	4602      	mov	r2, r0
 800b9d6:	69bb      	ldr	r3, [r7, #24]
 800b9d8:	1ad3      	subs	r3, r2, r3
 800b9da:	69fa      	ldr	r2, [r7, #28]
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d902      	bls.n	800b9e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b9e0:	69fb      	ldr	r3, [r7, #28]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d13d      	bne.n	800ba62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	685a      	ldr	r2, [r3, #4]
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b9f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	685b      	ldr	r3, [r3, #4]
 800b9fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b9fe:	d111      	bne.n	800ba24 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	689b      	ldr	r3, [r3, #8]
 800ba04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba08:	d004      	beq.n	800ba14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	689b      	ldr	r3, [r3, #8]
 800ba0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba12:	d107      	bne.n	800ba24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	681a      	ldr	r2, [r3, #0]
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba2c:	d10f      	bne.n	800ba4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	681a      	ldr	r2, [r3, #0]
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ba3c:	601a      	str	r2, [r3, #0]
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	681a      	ldr	r2, [r3, #0]
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ba4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	2201      	movs	r2, #1
 800ba52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ba5e:	2303      	movs	r3, #3
 800ba60:	e017      	b.n	800ba92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d101      	bne.n	800ba6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	3b01      	subs	r3, #1
 800ba70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	689a      	ldr	r2, [r3, #8]
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	4013      	ands	r3, r2
 800ba7c:	68ba      	ldr	r2, [r7, #8]
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	bf0c      	ite	eq
 800ba82:	2301      	moveq	r3, #1
 800ba84:	2300      	movne	r3, #0
 800ba86:	b2db      	uxtb	r3, r3
 800ba88:	461a      	mov	r2, r3
 800ba8a:	79fb      	ldrb	r3, [r7, #7]
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	d19b      	bne.n	800b9c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ba90:	2300      	movs	r3, #0
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3720      	adds	r7, #32
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}
 800ba9a:	bf00      	nop
 800ba9c:	20000000 	.word	0x20000000

0800baa0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b086      	sub	sp, #24
 800baa4:	af02      	add	r7, sp, #8
 800baa6:	60f8      	str	r0, [r7, #12]
 800baa8:	60b9      	str	r1, [r7, #8]
 800baaa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	685b      	ldr	r3, [r3, #4]
 800bab0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bab4:	d111      	bne.n	800bada <SPI_EndRxTransaction+0x3a>
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	689b      	ldr	r3, [r3, #8]
 800baba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800babe:	d004      	beq.n	800baca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	689b      	ldr	r3, [r3, #8]
 800bac4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bac8:	d107      	bne.n	800bada <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bad8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bae2:	d12a      	bne.n	800bb3a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800baec:	d012      	beq.n	800bb14 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	9300      	str	r3, [sp, #0]
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	2200      	movs	r2, #0
 800baf6:	2180      	movs	r1, #128	; 0x80
 800baf8:	68f8      	ldr	r0, [r7, #12]
 800bafa:	f7ff ff49 	bl	800b990 <SPI_WaitFlagStateUntilTimeout>
 800bafe:	4603      	mov	r3, r0
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d02d      	beq.n	800bb60 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb08:	f043 0220 	orr.w	r2, r3, #32
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800bb10:	2303      	movs	r3, #3
 800bb12:	e026      	b.n	800bb62 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	9300      	str	r3, [sp, #0]
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	2101      	movs	r1, #1
 800bb1e:	68f8      	ldr	r0, [r7, #12]
 800bb20:	f7ff ff36 	bl	800b990 <SPI_WaitFlagStateUntilTimeout>
 800bb24:	4603      	mov	r3, r0
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d01a      	beq.n	800bb60 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb2e:	f043 0220 	orr.w	r2, r3, #32
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800bb36:	2303      	movs	r3, #3
 800bb38:	e013      	b.n	800bb62 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	9300      	str	r3, [sp, #0]
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	2200      	movs	r2, #0
 800bb42:	2101      	movs	r1, #1
 800bb44:	68f8      	ldr	r0, [r7, #12]
 800bb46:	f7ff ff23 	bl	800b990 <SPI_WaitFlagStateUntilTimeout>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d007      	beq.n	800bb60 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb54:	f043 0220 	orr.w	r2, r3, #32
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bb5c:	2303      	movs	r3, #3
 800bb5e:	e000      	b.n	800bb62 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800bb60:	2300      	movs	r3, #0
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3710      	adds	r7, #16
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}
	...

0800bb6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b088      	sub	sp, #32
 800bb70:	af02      	add	r7, sp, #8
 800bb72:	60f8      	str	r0, [r7, #12]
 800bb74:	60b9      	str	r1, [r7, #8]
 800bb76:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bb78:	4b1b      	ldr	r3, [pc, #108]	; (800bbe8 <SPI_EndRxTxTransaction+0x7c>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	4a1b      	ldr	r2, [pc, #108]	; (800bbec <SPI_EndRxTxTransaction+0x80>)
 800bb7e:	fba2 2303 	umull	r2, r3, r2, r3
 800bb82:	0d5b      	lsrs	r3, r3, #21
 800bb84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bb88:	fb02 f303 	mul.w	r3, r2, r3
 800bb8c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	685b      	ldr	r3, [r3, #4]
 800bb92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bb96:	d112      	bne.n	800bbbe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	9300      	str	r3, [sp, #0]
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	2180      	movs	r1, #128	; 0x80
 800bba2:	68f8      	ldr	r0, [r7, #12]
 800bba4:	f7ff fef4 	bl	800b990 <SPI_WaitFlagStateUntilTimeout>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d016      	beq.n	800bbdc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbb2:	f043 0220 	orr.w	r2, r3, #32
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bbba:	2303      	movs	r3, #3
 800bbbc:	e00f      	b.n	800bbde <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d00a      	beq.n	800bbda <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800bbc4:	697b      	ldr	r3, [r7, #20]
 800bbc6:	3b01      	subs	r3, #1
 800bbc8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	689b      	ldr	r3, [r3, #8]
 800bbd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbd4:	2b80      	cmp	r3, #128	; 0x80
 800bbd6:	d0f2      	beq.n	800bbbe <SPI_EndRxTxTransaction+0x52>
 800bbd8:	e000      	b.n	800bbdc <SPI_EndRxTxTransaction+0x70>
        break;
 800bbda:	bf00      	nop
  }

  return HAL_OK;
 800bbdc:	2300      	movs	r3, #0
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3718      	adds	r7, #24
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
 800bbe6:	bf00      	nop
 800bbe8:	20000000 	.word	0x20000000
 800bbec:	165e9f81 	.word	0x165e9f81

0800bbf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b082      	sub	sp, #8
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d101      	bne.n	800bc02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bbfe:	2301      	movs	r3, #1
 800bc00:	e041      	b.n	800bc86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc08:	b2db      	uxtb	r3, r3
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d106      	bne.n	800bc1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2200      	movs	r2, #0
 800bc12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 f839 	bl	800bc8e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2202      	movs	r2, #2
 800bc20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681a      	ldr	r2, [r3, #0]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	3304      	adds	r3, #4
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	4610      	mov	r0, r2
 800bc30:	f000 faea 	bl	800c208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2201      	movs	r2, #1
 800bc38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2201      	movs	r2, #1
 800bc40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2201      	movs	r2, #1
 800bc48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2201      	movs	r2, #1
 800bc50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2201      	movs	r2, #1
 800bc58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2201      	movs	r2, #1
 800bc60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2201      	movs	r2, #1
 800bc68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2201      	movs	r2, #1
 800bc70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2201      	movs	r2, #1
 800bc78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2201      	movs	r2, #1
 800bc80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bc84:	2300      	movs	r3, #0
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3708      	adds	r7, #8
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}

0800bc8e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800bc8e:	b480      	push	{r7}
 800bc90:	b083      	sub	sp, #12
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800bc96:	bf00      	nop
 800bc98:	370c      	adds	r7, #12
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr
	...

0800bca4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b085      	sub	sp, #20
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bcb2:	b2db      	uxtb	r3, r3
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	d001      	beq.n	800bcbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bcb8:	2301      	movs	r3, #1
 800bcba:	e04e      	b.n	800bd5a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2202      	movs	r2, #2
 800bcc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	68da      	ldr	r2, [r3, #12]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f042 0201 	orr.w	r2, r2, #1
 800bcd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	4a23      	ldr	r2, [pc, #140]	; (800bd68 <HAL_TIM_Base_Start_IT+0xc4>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d022      	beq.n	800bd24 <HAL_TIM_Base_Start_IT+0x80>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bce6:	d01d      	beq.n	800bd24 <HAL_TIM_Base_Start_IT+0x80>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4a1f      	ldr	r2, [pc, #124]	; (800bd6c <HAL_TIM_Base_Start_IT+0xc8>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d018      	beq.n	800bd24 <HAL_TIM_Base_Start_IT+0x80>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4a1e      	ldr	r2, [pc, #120]	; (800bd70 <HAL_TIM_Base_Start_IT+0xcc>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d013      	beq.n	800bd24 <HAL_TIM_Base_Start_IT+0x80>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4a1c      	ldr	r2, [pc, #112]	; (800bd74 <HAL_TIM_Base_Start_IT+0xd0>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d00e      	beq.n	800bd24 <HAL_TIM_Base_Start_IT+0x80>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	4a1b      	ldr	r2, [pc, #108]	; (800bd78 <HAL_TIM_Base_Start_IT+0xd4>)
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d009      	beq.n	800bd24 <HAL_TIM_Base_Start_IT+0x80>
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	4a19      	ldr	r2, [pc, #100]	; (800bd7c <HAL_TIM_Base_Start_IT+0xd8>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d004      	beq.n	800bd24 <HAL_TIM_Base_Start_IT+0x80>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	4a18      	ldr	r2, [pc, #96]	; (800bd80 <HAL_TIM_Base_Start_IT+0xdc>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d111      	bne.n	800bd48 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	689b      	ldr	r3, [r3, #8]
 800bd2a:	f003 0307 	and.w	r3, r3, #7
 800bd2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	2b06      	cmp	r3, #6
 800bd34:	d010      	beq.n	800bd58 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	681a      	ldr	r2, [r3, #0]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f042 0201 	orr.w	r2, r2, #1
 800bd44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd46:	e007      	b.n	800bd58 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	681a      	ldr	r2, [r3, #0]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f042 0201 	orr.w	r2, r2, #1
 800bd56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bd58:	2300      	movs	r3, #0
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3714      	adds	r7, #20
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd64:	4770      	bx	lr
 800bd66:	bf00      	nop
 800bd68:	40010000 	.word	0x40010000
 800bd6c:	40000400 	.word	0x40000400
 800bd70:	40000800 	.word	0x40000800
 800bd74:	40000c00 	.word	0x40000c00
 800bd78:	40010400 	.word	0x40010400
 800bd7c:	40014000 	.word	0x40014000
 800bd80:	40001800 	.word	0x40001800

0800bd84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b082      	sub	sp, #8
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d101      	bne.n	800bd96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bd92:	2301      	movs	r3, #1
 800bd94:	e041      	b.n	800be1a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd9c:	b2db      	uxtb	r3, r3
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d106      	bne.n	800bdb0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2200      	movs	r2, #0
 800bda6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f7f6 fe6c 	bl	8002a88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2202      	movs	r2, #2
 800bdb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681a      	ldr	r2, [r3, #0]
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	3304      	adds	r3, #4
 800bdc0:	4619      	mov	r1, r3
 800bdc2:	4610      	mov	r0, r2
 800bdc4:	f000 fa20 	bl	800c208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2201      	movs	r2, #1
 800bdcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2201      	movs	r2, #1
 800bdd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2201      	movs	r2, #1
 800bddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2201      	movs	r2, #1
 800bde4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2201      	movs	r2, #1
 800bdec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2201      	movs	r2, #1
 800bdf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2201      	movs	r2, #1
 800be04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2201      	movs	r2, #1
 800be0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2201      	movs	r2, #1
 800be14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800be18:	2300      	movs	r3, #0
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3708      	adds	r7, #8
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}

0800be22 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800be22:	b580      	push	{r7, lr}
 800be24:	b082      	sub	sp, #8
 800be26:	af00      	add	r7, sp, #0
 800be28:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	691b      	ldr	r3, [r3, #16]
 800be30:	f003 0302 	and.w	r3, r3, #2
 800be34:	2b02      	cmp	r3, #2
 800be36:	d122      	bne.n	800be7e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	68db      	ldr	r3, [r3, #12]
 800be3e:	f003 0302 	and.w	r3, r3, #2
 800be42:	2b02      	cmp	r3, #2
 800be44:	d11b      	bne.n	800be7e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f06f 0202 	mvn.w	r2, #2
 800be4e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2201      	movs	r2, #1
 800be54:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	699b      	ldr	r3, [r3, #24]
 800be5c:	f003 0303 	and.w	r3, r3, #3
 800be60:	2b00      	cmp	r3, #0
 800be62:	d003      	beq.n	800be6c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f000 f9b1 	bl	800c1cc <HAL_TIM_IC_CaptureCallback>
 800be6a:	e005      	b.n	800be78 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f000 f9a3 	bl	800c1b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f000 f9b4 	bl	800c1e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2200      	movs	r2, #0
 800be7c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	691b      	ldr	r3, [r3, #16]
 800be84:	f003 0304 	and.w	r3, r3, #4
 800be88:	2b04      	cmp	r3, #4
 800be8a:	d122      	bne.n	800bed2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	68db      	ldr	r3, [r3, #12]
 800be92:	f003 0304 	and.w	r3, r3, #4
 800be96:	2b04      	cmp	r3, #4
 800be98:	d11b      	bne.n	800bed2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f06f 0204 	mvn.w	r2, #4
 800bea2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2202      	movs	r2, #2
 800bea8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	699b      	ldr	r3, [r3, #24]
 800beb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d003      	beq.n	800bec0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f000 f987 	bl	800c1cc <HAL_TIM_IC_CaptureCallback>
 800bebe:	e005      	b.n	800becc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f000 f979 	bl	800c1b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f000 f98a 	bl	800c1e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2200      	movs	r2, #0
 800bed0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	691b      	ldr	r3, [r3, #16]
 800bed8:	f003 0308 	and.w	r3, r3, #8
 800bedc:	2b08      	cmp	r3, #8
 800bede:	d122      	bne.n	800bf26 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	68db      	ldr	r3, [r3, #12]
 800bee6:	f003 0308 	and.w	r3, r3, #8
 800beea:	2b08      	cmp	r3, #8
 800beec:	d11b      	bne.n	800bf26 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f06f 0208 	mvn.w	r2, #8
 800bef6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2204      	movs	r2, #4
 800befc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	69db      	ldr	r3, [r3, #28]
 800bf04:	f003 0303 	and.w	r3, r3, #3
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d003      	beq.n	800bf14 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f000 f95d 	bl	800c1cc <HAL_TIM_IC_CaptureCallback>
 800bf12:	e005      	b.n	800bf20 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f000 f94f 	bl	800c1b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f000 f960 	bl	800c1e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2200      	movs	r2, #0
 800bf24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	691b      	ldr	r3, [r3, #16]
 800bf2c:	f003 0310 	and.w	r3, r3, #16
 800bf30:	2b10      	cmp	r3, #16
 800bf32:	d122      	bne.n	800bf7a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	68db      	ldr	r3, [r3, #12]
 800bf3a:	f003 0310 	and.w	r3, r3, #16
 800bf3e:	2b10      	cmp	r3, #16
 800bf40:	d11b      	bne.n	800bf7a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f06f 0210 	mvn.w	r2, #16
 800bf4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2208      	movs	r2, #8
 800bf50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	69db      	ldr	r3, [r3, #28]
 800bf58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d003      	beq.n	800bf68 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f000 f933 	bl	800c1cc <HAL_TIM_IC_CaptureCallback>
 800bf66:	e005      	b.n	800bf74 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f000 f925 	bl	800c1b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 f936 	bl	800c1e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2200      	movs	r2, #0
 800bf78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	691b      	ldr	r3, [r3, #16]
 800bf80:	f003 0301 	and.w	r3, r3, #1
 800bf84:	2b01      	cmp	r3, #1
 800bf86:	d10e      	bne.n	800bfa6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	68db      	ldr	r3, [r3, #12]
 800bf8e:	f003 0301 	and.w	r3, r3, #1
 800bf92:	2b01      	cmp	r3, #1
 800bf94:	d107      	bne.n	800bfa6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	f06f 0201 	mvn.w	r2, #1
 800bf9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f7f6 fb29 	bl	80025f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	691b      	ldr	r3, [r3, #16]
 800bfac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfb0:	2b80      	cmp	r3, #128	; 0x80
 800bfb2:	d10e      	bne.n	800bfd2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	68db      	ldr	r3, [r3, #12]
 800bfba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfbe:	2b80      	cmp	r3, #128	; 0x80
 800bfc0:	d107      	bne.n	800bfd2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bfca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f000 fbf1 	bl	800c7b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	691b      	ldr	r3, [r3, #16]
 800bfd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfdc:	2b40      	cmp	r3, #64	; 0x40
 800bfde:	d10e      	bne.n	800bffe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	68db      	ldr	r3, [r3, #12]
 800bfe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfea:	2b40      	cmp	r3, #64	; 0x40
 800bfec:	d107      	bne.n	800bffe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f000 f8fb 	bl	800c1f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	691b      	ldr	r3, [r3, #16]
 800c004:	f003 0320 	and.w	r3, r3, #32
 800c008:	2b20      	cmp	r3, #32
 800c00a:	d10e      	bne.n	800c02a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	68db      	ldr	r3, [r3, #12]
 800c012:	f003 0320 	and.w	r3, r3, #32
 800c016:	2b20      	cmp	r3, #32
 800c018:	d107      	bne.n	800c02a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f06f 0220 	mvn.w	r2, #32
 800c022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f000 fbbb 	bl	800c7a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c02a:	bf00      	nop
 800c02c:	3708      	adds	r7, #8
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
	...

0800c034 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b086      	sub	sp, #24
 800c038:	af00      	add	r7, sp, #0
 800c03a:	60f8      	str	r0, [r7, #12]
 800c03c:	60b9      	str	r1, [r7, #8]
 800c03e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c040:	2300      	movs	r3, #0
 800c042:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c04a:	2b01      	cmp	r3, #1
 800c04c:	d101      	bne.n	800c052 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c04e:	2302      	movs	r3, #2
 800c050:	e0ae      	b.n	800c1b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	2201      	movs	r2, #1
 800c056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2b0c      	cmp	r3, #12
 800c05e:	f200 809f 	bhi.w	800c1a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c062:	a201      	add	r2, pc, #4	; (adr r2, 800c068 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c068:	0800c09d 	.word	0x0800c09d
 800c06c:	0800c1a1 	.word	0x0800c1a1
 800c070:	0800c1a1 	.word	0x0800c1a1
 800c074:	0800c1a1 	.word	0x0800c1a1
 800c078:	0800c0dd 	.word	0x0800c0dd
 800c07c:	0800c1a1 	.word	0x0800c1a1
 800c080:	0800c1a1 	.word	0x0800c1a1
 800c084:	0800c1a1 	.word	0x0800c1a1
 800c088:	0800c11f 	.word	0x0800c11f
 800c08c:	0800c1a1 	.word	0x0800c1a1
 800c090:	0800c1a1 	.word	0x0800c1a1
 800c094:	0800c1a1 	.word	0x0800c1a1
 800c098:	0800c15f 	.word	0x0800c15f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	68b9      	ldr	r1, [r7, #8]
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f000 f950 	bl	800c348 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	699a      	ldr	r2, [r3, #24]
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f042 0208 	orr.w	r2, r2, #8
 800c0b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	699a      	ldr	r2, [r3, #24]
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f022 0204 	bic.w	r2, r2, #4
 800c0c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	6999      	ldr	r1, [r3, #24]
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	691a      	ldr	r2, [r3, #16]
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	430a      	orrs	r2, r1
 800c0d8:	619a      	str	r2, [r3, #24]
      break;
 800c0da:	e064      	b.n	800c1a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	68b9      	ldr	r1, [r7, #8]
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f000 f9a0 	bl	800c428 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	699a      	ldr	r2, [r3, #24]
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c0f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	699a      	ldr	r2, [r3, #24]
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c106:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	6999      	ldr	r1, [r3, #24]
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	691b      	ldr	r3, [r3, #16]
 800c112:	021a      	lsls	r2, r3, #8
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	430a      	orrs	r2, r1
 800c11a:	619a      	str	r2, [r3, #24]
      break;
 800c11c:	e043      	b.n	800c1a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	68b9      	ldr	r1, [r7, #8]
 800c124:	4618      	mov	r0, r3
 800c126:	f000 f9f5 	bl	800c514 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	69da      	ldr	r2, [r3, #28]
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f042 0208 	orr.w	r2, r2, #8
 800c138:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	69da      	ldr	r2, [r3, #28]
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f022 0204 	bic.w	r2, r2, #4
 800c148:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	69d9      	ldr	r1, [r3, #28]
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	691a      	ldr	r2, [r3, #16]
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	430a      	orrs	r2, r1
 800c15a:	61da      	str	r2, [r3, #28]
      break;
 800c15c:	e023      	b.n	800c1a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	68b9      	ldr	r1, [r7, #8]
 800c164:	4618      	mov	r0, r3
 800c166:	f000 fa49 	bl	800c5fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	69da      	ldr	r2, [r3, #28]
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c178:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	69da      	ldr	r2, [r3, #28]
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c188:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	69d9      	ldr	r1, [r3, #28]
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	691b      	ldr	r3, [r3, #16]
 800c194:	021a      	lsls	r2, r3, #8
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	430a      	orrs	r2, r1
 800c19c:	61da      	str	r2, [r3, #28]
      break;
 800c19e:	e002      	b.n	800c1a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	75fb      	strb	r3, [r7, #23]
      break;
 800c1a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c1ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3718      	adds	r7, #24
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}

0800c1b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c1b8:	b480      	push	{r7}
 800c1ba:	b083      	sub	sp, #12
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c1c0:	bf00      	nop
 800c1c2:	370c      	adds	r7, #12
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ca:	4770      	bx	lr

0800c1cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b083      	sub	sp, #12
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c1d4:	bf00      	nop
 800c1d6:	370c      	adds	r7, #12
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1de:	4770      	bx	lr

0800c1e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	b083      	sub	sp, #12
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c1e8:	bf00      	nop
 800c1ea:	370c      	adds	r7, #12
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f2:	4770      	bx	lr

0800c1f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b083      	sub	sp, #12
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c1fc:	bf00      	nop
 800c1fe:	370c      	adds	r7, #12
 800c200:	46bd      	mov	sp, r7
 800c202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c206:	4770      	bx	lr

0800c208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c208:	b480      	push	{r7}
 800c20a:	b085      	sub	sp, #20
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	4a40      	ldr	r2, [pc, #256]	; (800c31c <TIM_Base_SetConfig+0x114>)
 800c21c:	4293      	cmp	r3, r2
 800c21e:	d013      	beq.n	800c248 <TIM_Base_SetConfig+0x40>
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c226:	d00f      	beq.n	800c248 <TIM_Base_SetConfig+0x40>
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	4a3d      	ldr	r2, [pc, #244]	; (800c320 <TIM_Base_SetConfig+0x118>)
 800c22c:	4293      	cmp	r3, r2
 800c22e:	d00b      	beq.n	800c248 <TIM_Base_SetConfig+0x40>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	4a3c      	ldr	r2, [pc, #240]	; (800c324 <TIM_Base_SetConfig+0x11c>)
 800c234:	4293      	cmp	r3, r2
 800c236:	d007      	beq.n	800c248 <TIM_Base_SetConfig+0x40>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	4a3b      	ldr	r2, [pc, #236]	; (800c328 <TIM_Base_SetConfig+0x120>)
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d003      	beq.n	800c248 <TIM_Base_SetConfig+0x40>
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	4a3a      	ldr	r2, [pc, #232]	; (800c32c <TIM_Base_SetConfig+0x124>)
 800c244:	4293      	cmp	r3, r2
 800c246:	d108      	bne.n	800c25a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c24e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	685b      	ldr	r3, [r3, #4]
 800c254:	68fa      	ldr	r2, [r7, #12]
 800c256:	4313      	orrs	r3, r2
 800c258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	4a2f      	ldr	r2, [pc, #188]	; (800c31c <TIM_Base_SetConfig+0x114>)
 800c25e:	4293      	cmp	r3, r2
 800c260:	d02b      	beq.n	800c2ba <TIM_Base_SetConfig+0xb2>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c268:	d027      	beq.n	800c2ba <TIM_Base_SetConfig+0xb2>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	4a2c      	ldr	r2, [pc, #176]	; (800c320 <TIM_Base_SetConfig+0x118>)
 800c26e:	4293      	cmp	r3, r2
 800c270:	d023      	beq.n	800c2ba <TIM_Base_SetConfig+0xb2>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	4a2b      	ldr	r2, [pc, #172]	; (800c324 <TIM_Base_SetConfig+0x11c>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d01f      	beq.n	800c2ba <TIM_Base_SetConfig+0xb2>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	4a2a      	ldr	r2, [pc, #168]	; (800c328 <TIM_Base_SetConfig+0x120>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d01b      	beq.n	800c2ba <TIM_Base_SetConfig+0xb2>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	4a29      	ldr	r2, [pc, #164]	; (800c32c <TIM_Base_SetConfig+0x124>)
 800c286:	4293      	cmp	r3, r2
 800c288:	d017      	beq.n	800c2ba <TIM_Base_SetConfig+0xb2>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	4a28      	ldr	r2, [pc, #160]	; (800c330 <TIM_Base_SetConfig+0x128>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d013      	beq.n	800c2ba <TIM_Base_SetConfig+0xb2>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	4a27      	ldr	r2, [pc, #156]	; (800c334 <TIM_Base_SetConfig+0x12c>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d00f      	beq.n	800c2ba <TIM_Base_SetConfig+0xb2>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	4a26      	ldr	r2, [pc, #152]	; (800c338 <TIM_Base_SetConfig+0x130>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d00b      	beq.n	800c2ba <TIM_Base_SetConfig+0xb2>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	4a25      	ldr	r2, [pc, #148]	; (800c33c <TIM_Base_SetConfig+0x134>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d007      	beq.n	800c2ba <TIM_Base_SetConfig+0xb2>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	4a24      	ldr	r2, [pc, #144]	; (800c340 <TIM_Base_SetConfig+0x138>)
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d003      	beq.n	800c2ba <TIM_Base_SetConfig+0xb2>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	4a23      	ldr	r2, [pc, #140]	; (800c344 <TIM_Base_SetConfig+0x13c>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d108      	bne.n	800c2cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c2c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	68db      	ldr	r3, [r3, #12]
 800c2c6:	68fa      	ldr	r2, [r7, #12]
 800c2c8:	4313      	orrs	r3, r2
 800c2ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	695b      	ldr	r3, [r3, #20]
 800c2d6:	4313      	orrs	r3, r2
 800c2d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	68fa      	ldr	r2, [r7, #12]
 800c2de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	689a      	ldr	r2, [r3, #8]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	681a      	ldr	r2, [r3, #0]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	4a0a      	ldr	r2, [pc, #40]	; (800c31c <TIM_Base_SetConfig+0x114>)
 800c2f4:	4293      	cmp	r3, r2
 800c2f6:	d003      	beq.n	800c300 <TIM_Base_SetConfig+0xf8>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	4a0c      	ldr	r2, [pc, #48]	; (800c32c <TIM_Base_SetConfig+0x124>)
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	d103      	bne.n	800c308 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	691a      	ldr	r2, [r3, #16]
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2201      	movs	r2, #1
 800c30c:	615a      	str	r2, [r3, #20]
}
 800c30e:	bf00      	nop
 800c310:	3714      	adds	r7, #20
 800c312:	46bd      	mov	sp, r7
 800c314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c318:	4770      	bx	lr
 800c31a:	bf00      	nop
 800c31c:	40010000 	.word	0x40010000
 800c320:	40000400 	.word	0x40000400
 800c324:	40000800 	.word	0x40000800
 800c328:	40000c00 	.word	0x40000c00
 800c32c:	40010400 	.word	0x40010400
 800c330:	40014000 	.word	0x40014000
 800c334:	40014400 	.word	0x40014400
 800c338:	40014800 	.word	0x40014800
 800c33c:	40001800 	.word	0x40001800
 800c340:	40001c00 	.word	0x40001c00
 800c344:	40002000 	.word	0x40002000

0800c348 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c348:	b480      	push	{r7}
 800c34a:	b087      	sub	sp, #28
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6a1b      	ldr	r3, [r3, #32]
 800c356:	f023 0201 	bic.w	r2, r3, #1
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6a1b      	ldr	r3, [r3, #32]
 800c362:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	685b      	ldr	r3, [r3, #4]
 800c368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	699b      	ldr	r3, [r3, #24]
 800c36e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	f023 0303 	bic.w	r3, r3, #3
 800c37e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	68fa      	ldr	r2, [r7, #12]
 800c386:	4313      	orrs	r3, r2
 800c388:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	f023 0302 	bic.w	r3, r3, #2
 800c390:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	689b      	ldr	r3, [r3, #8]
 800c396:	697a      	ldr	r2, [r7, #20]
 800c398:	4313      	orrs	r3, r2
 800c39a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	4a20      	ldr	r2, [pc, #128]	; (800c420 <TIM_OC1_SetConfig+0xd8>)
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d003      	beq.n	800c3ac <TIM_OC1_SetConfig+0x64>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	4a1f      	ldr	r2, [pc, #124]	; (800c424 <TIM_OC1_SetConfig+0xdc>)
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	d10c      	bne.n	800c3c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	f023 0308 	bic.w	r3, r3, #8
 800c3b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	68db      	ldr	r3, [r3, #12]
 800c3b8:	697a      	ldr	r2, [r7, #20]
 800c3ba:	4313      	orrs	r3, r2
 800c3bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	f023 0304 	bic.w	r3, r3, #4
 800c3c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	4a15      	ldr	r2, [pc, #84]	; (800c420 <TIM_OC1_SetConfig+0xd8>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d003      	beq.n	800c3d6 <TIM_OC1_SetConfig+0x8e>
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	4a14      	ldr	r2, [pc, #80]	; (800c424 <TIM_OC1_SetConfig+0xdc>)
 800c3d2:	4293      	cmp	r3, r2
 800c3d4:	d111      	bne.n	800c3fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c3d6:	693b      	ldr	r3, [r7, #16]
 800c3d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c3dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c3de:	693b      	ldr	r3, [r7, #16]
 800c3e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c3e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	695b      	ldr	r3, [r3, #20]
 800c3ea:	693a      	ldr	r2, [r7, #16]
 800c3ec:	4313      	orrs	r3, r2
 800c3ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	699b      	ldr	r3, [r3, #24]
 800c3f4:	693a      	ldr	r2, [r7, #16]
 800c3f6:	4313      	orrs	r3, r2
 800c3f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	693a      	ldr	r2, [r7, #16]
 800c3fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	68fa      	ldr	r2, [r7, #12]
 800c404:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	685a      	ldr	r2, [r3, #4]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	697a      	ldr	r2, [r7, #20]
 800c412:	621a      	str	r2, [r3, #32]
}
 800c414:	bf00      	nop
 800c416:	371c      	adds	r7, #28
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr
 800c420:	40010000 	.word	0x40010000
 800c424:	40010400 	.word	0x40010400

0800c428 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c428:	b480      	push	{r7}
 800c42a:	b087      	sub	sp, #28
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
 800c430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6a1b      	ldr	r3, [r3, #32]
 800c436:	f023 0210 	bic.w	r2, r3, #16
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6a1b      	ldr	r3, [r3, #32]
 800c442:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	699b      	ldr	r3, [r3, #24]
 800c44e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c45e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	021b      	lsls	r3, r3, #8
 800c466:	68fa      	ldr	r2, [r7, #12]
 800c468:	4313      	orrs	r3, r2
 800c46a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	f023 0320 	bic.w	r3, r3, #32
 800c472:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	689b      	ldr	r3, [r3, #8]
 800c478:	011b      	lsls	r3, r3, #4
 800c47a:	697a      	ldr	r2, [r7, #20]
 800c47c:	4313      	orrs	r3, r2
 800c47e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	4a22      	ldr	r2, [pc, #136]	; (800c50c <TIM_OC2_SetConfig+0xe4>)
 800c484:	4293      	cmp	r3, r2
 800c486:	d003      	beq.n	800c490 <TIM_OC2_SetConfig+0x68>
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	4a21      	ldr	r2, [pc, #132]	; (800c510 <TIM_OC2_SetConfig+0xe8>)
 800c48c:	4293      	cmp	r3, r2
 800c48e:	d10d      	bne.n	800c4ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c490:	697b      	ldr	r3, [r7, #20]
 800c492:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c496:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	68db      	ldr	r3, [r3, #12]
 800c49c:	011b      	lsls	r3, r3, #4
 800c49e:	697a      	ldr	r2, [r7, #20]
 800c4a0:	4313      	orrs	r3, r2
 800c4a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	4a17      	ldr	r2, [pc, #92]	; (800c50c <TIM_OC2_SetConfig+0xe4>)
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	d003      	beq.n	800c4bc <TIM_OC2_SetConfig+0x94>
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	4a16      	ldr	r2, [pc, #88]	; (800c510 <TIM_OC2_SetConfig+0xe8>)
 800c4b8:	4293      	cmp	r3, r2
 800c4ba:	d113      	bne.n	800c4e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c4c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c4c4:	693b      	ldr	r3, [r7, #16]
 800c4c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c4ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	695b      	ldr	r3, [r3, #20]
 800c4d0:	009b      	lsls	r3, r3, #2
 800c4d2:	693a      	ldr	r2, [r7, #16]
 800c4d4:	4313      	orrs	r3, r2
 800c4d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	699b      	ldr	r3, [r3, #24]
 800c4dc:	009b      	lsls	r3, r3, #2
 800c4de:	693a      	ldr	r2, [r7, #16]
 800c4e0:	4313      	orrs	r3, r2
 800c4e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	693a      	ldr	r2, [r7, #16]
 800c4e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	68fa      	ldr	r2, [r7, #12]
 800c4ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	685a      	ldr	r2, [r3, #4]
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	697a      	ldr	r2, [r7, #20]
 800c4fc:	621a      	str	r2, [r3, #32]
}
 800c4fe:	bf00      	nop
 800c500:	371c      	adds	r7, #28
 800c502:	46bd      	mov	sp, r7
 800c504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c508:	4770      	bx	lr
 800c50a:	bf00      	nop
 800c50c:	40010000 	.word	0x40010000
 800c510:	40010400 	.word	0x40010400

0800c514 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c514:	b480      	push	{r7}
 800c516:	b087      	sub	sp, #28
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6a1b      	ldr	r3, [r3, #32]
 800c522:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6a1b      	ldr	r3, [r3, #32]
 800c52e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	685b      	ldr	r3, [r3, #4]
 800c534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	69db      	ldr	r3, [r3, #28]
 800c53a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	f023 0303 	bic.w	r3, r3, #3
 800c54a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	68fa      	ldr	r2, [r7, #12]
 800c552:	4313      	orrs	r3, r2
 800c554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c55c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	689b      	ldr	r3, [r3, #8]
 800c562:	021b      	lsls	r3, r3, #8
 800c564:	697a      	ldr	r2, [r7, #20]
 800c566:	4313      	orrs	r3, r2
 800c568:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	4a21      	ldr	r2, [pc, #132]	; (800c5f4 <TIM_OC3_SetConfig+0xe0>)
 800c56e:	4293      	cmp	r3, r2
 800c570:	d003      	beq.n	800c57a <TIM_OC3_SetConfig+0x66>
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	4a20      	ldr	r2, [pc, #128]	; (800c5f8 <TIM_OC3_SetConfig+0xe4>)
 800c576:	4293      	cmp	r3, r2
 800c578:	d10d      	bne.n	800c596 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c580:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	68db      	ldr	r3, [r3, #12]
 800c586:	021b      	lsls	r3, r3, #8
 800c588:	697a      	ldr	r2, [r7, #20]
 800c58a:	4313      	orrs	r3, r2
 800c58c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	4a16      	ldr	r2, [pc, #88]	; (800c5f4 <TIM_OC3_SetConfig+0xe0>)
 800c59a:	4293      	cmp	r3, r2
 800c59c:	d003      	beq.n	800c5a6 <TIM_OC3_SetConfig+0x92>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	4a15      	ldr	r2, [pc, #84]	; (800c5f8 <TIM_OC3_SetConfig+0xe4>)
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d113      	bne.n	800c5ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c5ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c5ae:	693b      	ldr	r3, [r7, #16]
 800c5b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c5b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	695b      	ldr	r3, [r3, #20]
 800c5ba:	011b      	lsls	r3, r3, #4
 800c5bc:	693a      	ldr	r2, [r7, #16]
 800c5be:	4313      	orrs	r3, r2
 800c5c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	699b      	ldr	r3, [r3, #24]
 800c5c6:	011b      	lsls	r3, r3, #4
 800c5c8:	693a      	ldr	r2, [r7, #16]
 800c5ca:	4313      	orrs	r3, r2
 800c5cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	693a      	ldr	r2, [r7, #16]
 800c5d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	68fa      	ldr	r2, [r7, #12]
 800c5d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	685a      	ldr	r2, [r3, #4]
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	697a      	ldr	r2, [r7, #20]
 800c5e6:	621a      	str	r2, [r3, #32]
}
 800c5e8:	bf00      	nop
 800c5ea:	371c      	adds	r7, #28
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f2:	4770      	bx	lr
 800c5f4:	40010000 	.word	0x40010000
 800c5f8:	40010400 	.word	0x40010400

0800c5fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c5fc:	b480      	push	{r7}
 800c5fe:	b087      	sub	sp, #28
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
 800c604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6a1b      	ldr	r3, [r3, #32]
 800c60a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6a1b      	ldr	r3, [r3, #32]
 800c616:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	685b      	ldr	r3, [r3, #4]
 800c61c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	69db      	ldr	r3, [r3, #28]
 800c622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c62a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c632:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	021b      	lsls	r3, r3, #8
 800c63a:	68fa      	ldr	r2, [r7, #12]
 800c63c:	4313      	orrs	r3, r2
 800c63e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c646:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	689b      	ldr	r3, [r3, #8]
 800c64c:	031b      	lsls	r3, r3, #12
 800c64e:	693a      	ldr	r2, [r7, #16]
 800c650:	4313      	orrs	r3, r2
 800c652:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	4a12      	ldr	r2, [pc, #72]	; (800c6a0 <TIM_OC4_SetConfig+0xa4>)
 800c658:	4293      	cmp	r3, r2
 800c65a:	d003      	beq.n	800c664 <TIM_OC4_SetConfig+0x68>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	4a11      	ldr	r2, [pc, #68]	; (800c6a4 <TIM_OC4_SetConfig+0xa8>)
 800c660:	4293      	cmp	r3, r2
 800c662:	d109      	bne.n	800c678 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c66a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	695b      	ldr	r3, [r3, #20]
 800c670:	019b      	lsls	r3, r3, #6
 800c672:	697a      	ldr	r2, [r7, #20]
 800c674:	4313      	orrs	r3, r2
 800c676:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	697a      	ldr	r2, [r7, #20]
 800c67c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	68fa      	ldr	r2, [r7, #12]
 800c682:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	685a      	ldr	r2, [r3, #4]
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	693a      	ldr	r2, [r7, #16]
 800c690:	621a      	str	r2, [r3, #32]
}
 800c692:	bf00      	nop
 800c694:	371c      	adds	r7, #28
 800c696:	46bd      	mov	sp, r7
 800c698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69c:	4770      	bx	lr
 800c69e:	bf00      	nop
 800c6a0:	40010000 	.word	0x40010000
 800c6a4:	40010400 	.word	0x40010400

0800c6a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b085      	sub	sp, #20
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
 800c6b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c6b8:	2b01      	cmp	r3, #1
 800c6ba:	d101      	bne.n	800c6c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c6bc:	2302      	movs	r3, #2
 800c6be:	e05a      	b.n	800c776 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2201      	movs	r2, #1
 800c6c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2202      	movs	r2, #2
 800c6cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	685b      	ldr	r3, [r3, #4]
 800c6d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	689b      	ldr	r3, [r3, #8]
 800c6de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	68fa      	ldr	r2, [r7, #12]
 800c6ee:	4313      	orrs	r3, r2
 800c6f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	68fa      	ldr	r2, [r7, #12]
 800c6f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	4a21      	ldr	r2, [pc, #132]	; (800c784 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c700:	4293      	cmp	r3, r2
 800c702:	d022      	beq.n	800c74a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c70c:	d01d      	beq.n	800c74a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	4a1d      	ldr	r2, [pc, #116]	; (800c788 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c714:	4293      	cmp	r3, r2
 800c716:	d018      	beq.n	800c74a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4a1b      	ldr	r2, [pc, #108]	; (800c78c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c71e:	4293      	cmp	r3, r2
 800c720:	d013      	beq.n	800c74a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	4a1a      	ldr	r2, [pc, #104]	; (800c790 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c728:	4293      	cmp	r3, r2
 800c72a:	d00e      	beq.n	800c74a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	4a18      	ldr	r2, [pc, #96]	; (800c794 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c732:	4293      	cmp	r3, r2
 800c734:	d009      	beq.n	800c74a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4a17      	ldr	r2, [pc, #92]	; (800c798 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d004      	beq.n	800c74a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	4a15      	ldr	r2, [pc, #84]	; (800c79c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d10c      	bne.n	800c764 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c750:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	685b      	ldr	r3, [r3, #4]
 800c756:	68ba      	ldr	r2, [r7, #8]
 800c758:	4313      	orrs	r3, r2
 800c75a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	68ba      	ldr	r2, [r7, #8]
 800c762:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2201      	movs	r2, #1
 800c768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2200      	movs	r2, #0
 800c770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c774:	2300      	movs	r3, #0
}
 800c776:	4618      	mov	r0, r3
 800c778:	3714      	adds	r7, #20
 800c77a:	46bd      	mov	sp, r7
 800c77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c780:	4770      	bx	lr
 800c782:	bf00      	nop
 800c784:	40010000 	.word	0x40010000
 800c788:	40000400 	.word	0x40000400
 800c78c:	40000800 	.word	0x40000800
 800c790:	40000c00 	.word	0x40000c00
 800c794:	40010400 	.word	0x40010400
 800c798:	40014000 	.word	0x40014000
 800c79c:	40001800 	.word	0x40001800

0800c7a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b083      	sub	sp, #12
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c7a8:	bf00      	nop
 800c7aa:	370c      	adds	r7, #12
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b2:	4770      	bx	lr

0800c7b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b083      	sub	sp, #12
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c7bc:	bf00      	nop
 800c7be:	370c      	adds	r7, #12
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c6:	4770      	bx	lr

0800c7c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d101      	bne.n	800c7da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	e03f      	b.n	800c85a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7e0:	b2db      	uxtb	r3, r3
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d106      	bne.n	800c7f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f7f6 f9a2 	bl	8002b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2224      	movs	r2, #36	; 0x24
 800c7f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	68da      	ldr	r2, [r3, #12]
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c80a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f000 f9cb 	bl	800cba8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	691a      	ldr	r2, [r3, #16]
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c820:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	695a      	ldr	r2, [r3, #20]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c830:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	68da      	ldr	r2, [r3, #12]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c840:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2200      	movs	r2, #0
 800c846:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2220      	movs	r2, #32
 800c84c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2220      	movs	r2, #32
 800c854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c858:	2300      	movs	r3, #0
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3708      	adds	r7, #8
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}

0800c862 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c862:	b580      	push	{r7, lr}
 800c864:	b08a      	sub	sp, #40	; 0x28
 800c866:	af02      	add	r7, sp, #8
 800c868:	60f8      	str	r0, [r7, #12]
 800c86a:	60b9      	str	r1, [r7, #8]
 800c86c:	603b      	str	r3, [r7, #0]
 800c86e:	4613      	mov	r3, r2
 800c870:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c872:	2300      	movs	r3, #0
 800c874:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c87c:	b2db      	uxtb	r3, r3
 800c87e:	2b20      	cmp	r3, #32
 800c880:	d17c      	bne.n	800c97c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d002      	beq.n	800c88e <HAL_UART_Transmit+0x2c>
 800c888:	88fb      	ldrh	r3, [r7, #6]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d101      	bne.n	800c892 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c88e:	2301      	movs	r3, #1
 800c890:	e075      	b.n	800c97e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c898:	2b01      	cmp	r3, #1
 800c89a:	d101      	bne.n	800c8a0 <HAL_UART_Transmit+0x3e>
 800c89c:	2302      	movs	r3, #2
 800c89e:	e06e      	b.n	800c97e <HAL_UART_Transmit+0x11c>
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	2221      	movs	r2, #33	; 0x21
 800c8b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c8b6:	f7fb f913 	bl	8007ae0 <HAL_GetTick>
 800c8ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	88fa      	ldrh	r2, [r7, #6]
 800c8c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	88fa      	ldrh	r2, [r7, #6]
 800c8c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	689b      	ldr	r3, [r3, #8]
 800c8cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c8d0:	d108      	bne.n	800c8e4 <HAL_UART_Transmit+0x82>
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	691b      	ldr	r3, [r3, #16]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d104      	bne.n	800c8e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	61bb      	str	r3, [r7, #24]
 800c8e2:	e003      	b.n	800c8ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800c8f4:	e02a      	b.n	800c94c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	9300      	str	r3, [sp, #0]
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	2180      	movs	r1, #128	; 0x80
 800c900:	68f8      	ldr	r0, [r7, #12]
 800c902:	f000 f8e2 	bl	800caca <UART_WaitOnFlagUntilTimeout>
 800c906:	4603      	mov	r3, r0
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d001      	beq.n	800c910 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800c90c:	2303      	movs	r3, #3
 800c90e:	e036      	b.n	800c97e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800c910:	69fb      	ldr	r3, [r7, #28]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d10b      	bne.n	800c92e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c916:	69bb      	ldr	r3, [r7, #24]
 800c918:	881b      	ldrh	r3, [r3, #0]
 800c91a:	461a      	mov	r2, r3
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c924:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c926:	69bb      	ldr	r3, [r7, #24]
 800c928:	3302      	adds	r3, #2
 800c92a:	61bb      	str	r3, [r7, #24]
 800c92c:	e007      	b.n	800c93e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c92e:	69fb      	ldr	r3, [r7, #28]
 800c930:	781a      	ldrb	r2, [r3, #0]
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c938:	69fb      	ldr	r3, [r7, #28]
 800c93a:	3301      	adds	r3, #1
 800c93c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c942:	b29b      	uxth	r3, r3
 800c944:	3b01      	subs	r3, #1
 800c946:	b29a      	uxth	r2, r3
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c950:	b29b      	uxth	r3, r3
 800c952:	2b00      	cmp	r3, #0
 800c954:	d1cf      	bne.n	800c8f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	9300      	str	r3, [sp, #0]
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	2200      	movs	r2, #0
 800c95e:	2140      	movs	r1, #64	; 0x40
 800c960:	68f8      	ldr	r0, [r7, #12]
 800c962:	f000 f8b2 	bl	800caca <UART_WaitOnFlagUntilTimeout>
 800c966:	4603      	mov	r3, r0
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d001      	beq.n	800c970 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800c96c:	2303      	movs	r3, #3
 800c96e:	e006      	b.n	800c97e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	2220      	movs	r2, #32
 800c974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800c978:	2300      	movs	r3, #0
 800c97a:	e000      	b.n	800c97e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800c97c:	2302      	movs	r3, #2
  }
}
 800c97e:	4618      	mov	r0, r3
 800c980:	3720      	adds	r7, #32
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}

0800c986 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c986:	b580      	push	{r7, lr}
 800c988:	b08a      	sub	sp, #40	; 0x28
 800c98a:	af02      	add	r7, sp, #8
 800c98c:	60f8      	str	r0, [r7, #12]
 800c98e:	60b9      	str	r1, [r7, #8]
 800c990:	603b      	str	r3, [r7, #0]
 800c992:	4613      	mov	r3, r2
 800c994:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c996:	2300      	movs	r3, #0
 800c998:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c9a0:	b2db      	uxtb	r3, r3
 800c9a2:	2b20      	cmp	r3, #32
 800c9a4:	f040 808c 	bne.w	800cac0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d002      	beq.n	800c9b4 <HAL_UART_Receive+0x2e>
 800c9ae:	88fb      	ldrh	r3, [r7, #6]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d101      	bne.n	800c9b8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	e084      	b.n	800cac2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c9be:	2b01      	cmp	r3, #1
 800c9c0:	d101      	bne.n	800c9c6 <HAL_UART_Receive+0x40>
 800c9c2:	2302      	movs	r3, #2
 800c9c4:	e07d      	b.n	800cac2 <HAL_UART_Receive+0x13c>
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	2201      	movs	r2, #1
 800c9ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	2222      	movs	r2, #34	; 0x22
 800c9d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c9e2:	f7fb f87d 	bl	8007ae0 <HAL_GetTick>
 800c9e6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	88fa      	ldrh	r2, [r7, #6]
 800c9ec:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	88fa      	ldrh	r2, [r7, #6]
 800c9f2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	689b      	ldr	r3, [r3, #8]
 800c9f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9fc:	d108      	bne.n	800ca10 <HAL_UART_Receive+0x8a>
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	691b      	ldr	r3, [r3, #16]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d104      	bne.n	800ca10 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800ca06:	2300      	movs	r3, #0
 800ca08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	61bb      	str	r3, [r7, #24]
 800ca0e:	e003      	b.n	800ca18 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ca14:	2300      	movs	r3, #0
 800ca16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800ca20:	e043      	b.n	800caaa <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	9300      	str	r3, [sp, #0]
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	2200      	movs	r2, #0
 800ca2a:	2120      	movs	r1, #32
 800ca2c:	68f8      	ldr	r0, [r7, #12]
 800ca2e:	f000 f84c 	bl	800caca <UART_WaitOnFlagUntilTimeout>
 800ca32:	4603      	mov	r3, r0
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d001      	beq.n	800ca3c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800ca38:	2303      	movs	r3, #3
 800ca3a:	e042      	b.n	800cac2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800ca3c:	69fb      	ldr	r3, [r7, #28]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d10c      	bne.n	800ca5c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	685b      	ldr	r3, [r3, #4]
 800ca48:	b29b      	uxth	r3, r3
 800ca4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca4e:	b29a      	uxth	r2, r3
 800ca50:	69bb      	ldr	r3, [r7, #24]
 800ca52:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800ca54:	69bb      	ldr	r3, [r7, #24]
 800ca56:	3302      	adds	r3, #2
 800ca58:	61bb      	str	r3, [r7, #24]
 800ca5a:	e01f      	b.n	800ca9c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	689b      	ldr	r3, [r3, #8]
 800ca60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca64:	d007      	beq.n	800ca76 <HAL_UART_Receive+0xf0>
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	689b      	ldr	r3, [r3, #8]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d10a      	bne.n	800ca84 <HAL_UART_Receive+0xfe>
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	691b      	ldr	r3, [r3, #16]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d106      	bne.n	800ca84 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	685b      	ldr	r3, [r3, #4]
 800ca7c:	b2da      	uxtb	r2, r3
 800ca7e:	69fb      	ldr	r3, [r7, #28]
 800ca80:	701a      	strb	r2, [r3, #0]
 800ca82:	e008      	b.n	800ca96 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	685b      	ldr	r3, [r3, #4]
 800ca8a:	b2db      	uxtb	r3, r3
 800ca8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca90:	b2da      	uxtb	r2, r3
 800ca92:	69fb      	ldr	r3, [r7, #28]
 800ca94:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800ca96:	69fb      	ldr	r3, [r7, #28]
 800ca98:	3301      	adds	r3, #1
 800ca9a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800caa0:	b29b      	uxth	r3, r3
 800caa2:	3b01      	subs	r3, #1
 800caa4:	b29a      	uxth	r2, r3
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800caae:	b29b      	uxth	r3, r3
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d1b6      	bne.n	800ca22 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	2220      	movs	r2, #32
 800cab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800cabc:	2300      	movs	r3, #0
 800cabe:	e000      	b.n	800cac2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800cac0:	2302      	movs	r3, #2
  }
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3720      	adds	r7, #32
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}

0800caca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800caca:	b580      	push	{r7, lr}
 800cacc:	b090      	sub	sp, #64	; 0x40
 800cace:	af00      	add	r7, sp, #0
 800cad0:	60f8      	str	r0, [r7, #12]
 800cad2:	60b9      	str	r1, [r7, #8]
 800cad4:	603b      	str	r3, [r7, #0]
 800cad6:	4613      	mov	r3, r2
 800cad8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cada:	e050      	b.n	800cb7e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cadc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cade:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cae2:	d04c      	beq.n	800cb7e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800cae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d007      	beq.n	800cafa <UART_WaitOnFlagUntilTimeout+0x30>
 800caea:	f7fa fff9 	bl	8007ae0 <HAL_GetTick>
 800caee:	4602      	mov	r2, r0
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	1ad3      	subs	r3, r2, r3
 800caf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d241      	bcs.n	800cb7e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	330c      	adds	r3, #12
 800cb00:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb04:	e853 3f00 	ldrex	r3, [r3]
 800cb08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cb10:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	330c      	adds	r3, #12
 800cb18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cb1a:	637a      	str	r2, [r7, #52]	; 0x34
 800cb1c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cb20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb22:	e841 2300 	strex	r3, r2, [r1]
 800cb26:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cb28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d1e5      	bne.n	800cafa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	3314      	adds	r3, #20
 800cb34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	e853 3f00 	ldrex	r3, [r3]
 800cb3c:	613b      	str	r3, [r7, #16]
   return(result);
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	f023 0301 	bic.w	r3, r3, #1
 800cb44:	63bb      	str	r3, [r7, #56]	; 0x38
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	3314      	adds	r3, #20
 800cb4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb4e:	623a      	str	r2, [r7, #32]
 800cb50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb52:	69f9      	ldr	r1, [r7, #28]
 800cb54:	6a3a      	ldr	r2, [r7, #32]
 800cb56:	e841 2300 	strex	r3, r2, [r1]
 800cb5a:	61bb      	str	r3, [r7, #24]
   return(result);
 800cb5c:	69bb      	ldr	r3, [r7, #24]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d1e5      	bne.n	800cb2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	2220      	movs	r2, #32
 800cb66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	2220      	movs	r2, #32
 800cb6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	2200      	movs	r2, #0
 800cb76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800cb7a:	2303      	movs	r3, #3
 800cb7c:	e00f      	b.n	800cb9e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	681a      	ldr	r2, [r3, #0]
 800cb84:	68bb      	ldr	r3, [r7, #8]
 800cb86:	4013      	ands	r3, r2
 800cb88:	68ba      	ldr	r2, [r7, #8]
 800cb8a:	429a      	cmp	r2, r3
 800cb8c:	bf0c      	ite	eq
 800cb8e:	2301      	moveq	r3, #1
 800cb90:	2300      	movne	r3, #0
 800cb92:	b2db      	uxtb	r3, r3
 800cb94:	461a      	mov	r2, r3
 800cb96:	79fb      	ldrb	r3, [r7, #7]
 800cb98:	429a      	cmp	r2, r3
 800cb9a:	d09f      	beq.n	800cadc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800cb9c:	2300      	movs	r3, #0
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3740      	adds	r7, #64	; 0x40
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}
	...

0800cba8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbac:	b09f      	sub	sp, #124	; 0x7c
 800cbae:	af00      	add	r7, sp, #0
 800cbb0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cbb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	691b      	ldr	r3, [r3, #16]
 800cbb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800cbbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbbe:	68d9      	ldr	r1, [r3, #12]
 800cbc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbc2:	681a      	ldr	r2, [r3, #0]
 800cbc4:	ea40 0301 	orr.w	r3, r0, r1
 800cbc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cbca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbcc:	689a      	ldr	r2, [r3, #8]
 800cbce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbd0:	691b      	ldr	r3, [r3, #16]
 800cbd2:	431a      	orrs	r2, r3
 800cbd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbd6:	695b      	ldr	r3, [r3, #20]
 800cbd8:	431a      	orrs	r2, r3
 800cbda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbdc:	69db      	ldr	r3, [r3, #28]
 800cbde:	4313      	orrs	r3, r2
 800cbe0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800cbe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	68db      	ldr	r3, [r3, #12]
 800cbe8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800cbec:	f021 010c 	bic.w	r1, r1, #12
 800cbf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbf2:	681a      	ldr	r2, [r3, #0]
 800cbf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cbf6:	430b      	orrs	r3, r1
 800cbf8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cbfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	695b      	ldr	r3, [r3, #20]
 800cc00:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800cc04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc06:	6999      	ldr	r1, [r3, #24]
 800cc08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc0a:	681a      	ldr	r2, [r3, #0]
 800cc0c:	ea40 0301 	orr.w	r3, r0, r1
 800cc10:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cc12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc14:	681a      	ldr	r2, [r3, #0]
 800cc16:	4bc5      	ldr	r3, [pc, #788]	; (800cf2c <UART_SetConfig+0x384>)
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	d004      	beq.n	800cc26 <UART_SetConfig+0x7e>
 800cc1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc1e:	681a      	ldr	r2, [r3, #0]
 800cc20:	4bc3      	ldr	r3, [pc, #780]	; (800cf30 <UART_SetConfig+0x388>)
 800cc22:	429a      	cmp	r2, r3
 800cc24:	d103      	bne.n	800cc2e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cc26:	f7fd fa65 	bl	800a0f4 <HAL_RCC_GetPCLK2Freq>
 800cc2a:	6778      	str	r0, [r7, #116]	; 0x74
 800cc2c:	e002      	b.n	800cc34 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cc2e:	f7fd fa4d 	bl	800a0cc <HAL_RCC_GetPCLK1Freq>
 800cc32:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cc34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc36:	69db      	ldr	r3, [r3, #28]
 800cc38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc3c:	f040 80b6 	bne.w	800cdac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cc40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cc42:	461c      	mov	r4, r3
 800cc44:	f04f 0500 	mov.w	r5, #0
 800cc48:	4622      	mov	r2, r4
 800cc4a:	462b      	mov	r3, r5
 800cc4c:	1891      	adds	r1, r2, r2
 800cc4e:	6439      	str	r1, [r7, #64]	; 0x40
 800cc50:	415b      	adcs	r3, r3
 800cc52:	647b      	str	r3, [r7, #68]	; 0x44
 800cc54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cc58:	1912      	adds	r2, r2, r4
 800cc5a:	eb45 0303 	adc.w	r3, r5, r3
 800cc5e:	f04f 0000 	mov.w	r0, #0
 800cc62:	f04f 0100 	mov.w	r1, #0
 800cc66:	00d9      	lsls	r1, r3, #3
 800cc68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800cc6c:	00d0      	lsls	r0, r2, #3
 800cc6e:	4602      	mov	r2, r0
 800cc70:	460b      	mov	r3, r1
 800cc72:	1911      	adds	r1, r2, r4
 800cc74:	6639      	str	r1, [r7, #96]	; 0x60
 800cc76:	416b      	adcs	r3, r5
 800cc78:	667b      	str	r3, [r7, #100]	; 0x64
 800cc7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc7c:	685b      	ldr	r3, [r3, #4]
 800cc7e:	461a      	mov	r2, r3
 800cc80:	f04f 0300 	mov.w	r3, #0
 800cc84:	1891      	adds	r1, r2, r2
 800cc86:	63b9      	str	r1, [r7, #56]	; 0x38
 800cc88:	415b      	adcs	r3, r3
 800cc8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cc90:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800cc94:	f7f4 f808 	bl	8000ca8 <__aeabi_uldivmod>
 800cc98:	4602      	mov	r2, r0
 800cc9a:	460b      	mov	r3, r1
 800cc9c:	4ba5      	ldr	r3, [pc, #660]	; (800cf34 <UART_SetConfig+0x38c>)
 800cc9e:	fba3 2302 	umull	r2, r3, r3, r2
 800cca2:	095b      	lsrs	r3, r3, #5
 800cca4:	011e      	lsls	r6, r3, #4
 800cca6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cca8:	461c      	mov	r4, r3
 800ccaa:	f04f 0500 	mov.w	r5, #0
 800ccae:	4622      	mov	r2, r4
 800ccb0:	462b      	mov	r3, r5
 800ccb2:	1891      	adds	r1, r2, r2
 800ccb4:	6339      	str	r1, [r7, #48]	; 0x30
 800ccb6:	415b      	adcs	r3, r3
 800ccb8:	637b      	str	r3, [r7, #52]	; 0x34
 800ccba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ccbe:	1912      	adds	r2, r2, r4
 800ccc0:	eb45 0303 	adc.w	r3, r5, r3
 800ccc4:	f04f 0000 	mov.w	r0, #0
 800ccc8:	f04f 0100 	mov.w	r1, #0
 800cccc:	00d9      	lsls	r1, r3, #3
 800ccce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ccd2:	00d0      	lsls	r0, r2, #3
 800ccd4:	4602      	mov	r2, r0
 800ccd6:	460b      	mov	r3, r1
 800ccd8:	1911      	adds	r1, r2, r4
 800ccda:	65b9      	str	r1, [r7, #88]	; 0x58
 800ccdc:	416b      	adcs	r3, r5
 800ccde:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cce2:	685b      	ldr	r3, [r3, #4]
 800cce4:	461a      	mov	r2, r3
 800cce6:	f04f 0300 	mov.w	r3, #0
 800ccea:	1891      	adds	r1, r2, r2
 800ccec:	62b9      	str	r1, [r7, #40]	; 0x28
 800ccee:	415b      	adcs	r3, r3
 800ccf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ccf2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ccf6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800ccfa:	f7f3 ffd5 	bl	8000ca8 <__aeabi_uldivmod>
 800ccfe:	4602      	mov	r2, r0
 800cd00:	460b      	mov	r3, r1
 800cd02:	4b8c      	ldr	r3, [pc, #560]	; (800cf34 <UART_SetConfig+0x38c>)
 800cd04:	fba3 1302 	umull	r1, r3, r3, r2
 800cd08:	095b      	lsrs	r3, r3, #5
 800cd0a:	2164      	movs	r1, #100	; 0x64
 800cd0c:	fb01 f303 	mul.w	r3, r1, r3
 800cd10:	1ad3      	subs	r3, r2, r3
 800cd12:	00db      	lsls	r3, r3, #3
 800cd14:	3332      	adds	r3, #50	; 0x32
 800cd16:	4a87      	ldr	r2, [pc, #540]	; (800cf34 <UART_SetConfig+0x38c>)
 800cd18:	fba2 2303 	umull	r2, r3, r2, r3
 800cd1c:	095b      	lsrs	r3, r3, #5
 800cd1e:	005b      	lsls	r3, r3, #1
 800cd20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cd24:	441e      	add	r6, r3
 800cd26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f04f 0100 	mov.w	r1, #0
 800cd2e:	4602      	mov	r2, r0
 800cd30:	460b      	mov	r3, r1
 800cd32:	1894      	adds	r4, r2, r2
 800cd34:	623c      	str	r4, [r7, #32]
 800cd36:	415b      	adcs	r3, r3
 800cd38:	627b      	str	r3, [r7, #36]	; 0x24
 800cd3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cd3e:	1812      	adds	r2, r2, r0
 800cd40:	eb41 0303 	adc.w	r3, r1, r3
 800cd44:	f04f 0400 	mov.w	r4, #0
 800cd48:	f04f 0500 	mov.w	r5, #0
 800cd4c:	00dd      	lsls	r5, r3, #3
 800cd4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800cd52:	00d4      	lsls	r4, r2, #3
 800cd54:	4622      	mov	r2, r4
 800cd56:	462b      	mov	r3, r5
 800cd58:	1814      	adds	r4, r2, r0
 800cd5a:	653c      	str	r4, [r7, #80]	; 0x50
 800cd5c:	414b      	adcs	r3, r1
 800cd5e:	657b      	str	r3, [r7, #84]	; 0x54
 800cd60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd62:	685b      	ldr	r3, [r3, #4]
 800cd64:	461a      	mov	r2, r3
 800cd66:	f04f 0300 	mov.w	r3, #0
 800cd6a:	1891      	adds	r1, r2, r2
 800cd6c:	61b9      	str	r1, [r7, #24]
 800cd6e:	415b      	adcs	r3, r3
 800cd70:	61fb      	str	r3, [r7, #28]
 800cd72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cd76:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800cd7a:	f7f3 ff95 	bl	8000ca8 <__aeabi_uldivmod>
 800cd7e:	4602      	mov	r2, r0
 800cd80:	460b      	mov	r3, r1
 800cd82:	4b6c      	ldr	r3, [pc, #432]	; (800cf34 <UART_SetConfig+0x38c>)
 800cd84:	fba3 1302 	umull	r1, r3, r3, r2
 800cd88:	095b      	lsrs	r3, r3, #5
 800cd8a:	2164      	movs	r1, #100	; 0x64
 800cd8c:	fb01 f303 	mul.w	r3, r1, r3
 800cd90:	1ad3      	subs	r3, r2, r3
 800cd92:	00db      	lsls	r3, r3, #3
 800cd94:	3332      	adds	r3, #50	; 0x32
 800cd96:	4a67      	ldr	r2, [pc, #412]	; (800cf34 <UART_SetConfig+0x38c>)
 800cd98:	fba2 2303 	umull	r2, r3, r2, r3
 800cd9c:	095b      	lsrs	r3, r3, #5
 800cd9e:	f003 0207 	and.w	r2, r3, #7
 800cda2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	4432      	add	r2, r6
 800cda8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800cdaa:	e0b9      	b.n	800cf20 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cdac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cdae:	461c      	mov	r4, r3
 800cdb0:	f04f 0500 	mov.w	r5, #0
 800cdb4:	4622      	mov	r2, r4
 800cdb6:	462b      	mov	r3, r5
 800cdb8:	1891      	adds	r1, r2, r2
 800cdba:	6139      	str	r1, [r7, #16]
 800cdbc:	415b      	adcs	r3, r3
 800cdbe:	617b      	str	r3, [r7, #20]
 800cdc0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cdc4:	1912      	adds	r2, r2, r4
 800cdc6:	eb45 0303 	adc.w	r3, r5, r3
 800cdca:	f04f 0000 	mov.w	r0, #0
 800cdce:	f04f 0100 	mov.w	r1, #0
 800cdd2:	00d9      	lsls	r1, r3, #3
 800cdd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800cdd8:	00d0      	lsls	r0, r2, #3
 800cdda:	4602      	mov	r2, r0
 800cddc:	460b      	mov	r3, r1
 800cdde:	eb12 0804 	adds.w	r8, r2, r4
 800cde2:	eb43 0905 	adc.w	r9, r3, r5
 800cde6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cde8:	685b      	ldr	r3, [r3, #4]
 800cdea:	4618      	mov	r0, r3
 800cdec:	f04f 0100 	mov.w	r1, #0
 800cdf0:	f04f 0200 	mov.w	r2, #0
 800cdf4:	f04f 0300 	mov.w	r3, #0
 800cdf8:	008b      	lsls	r3, r1, #2
 800cdfa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800cdfe:	0082      	lsls	r2, r0, #2
 800ce00:	4640      	mov	r0, r8
 800ce02:	4649      	mov	r1, r9
 800ce04:	f7f3 ff50 	bl	8000ca8 <__aeabi_uldivmod>
 800ce08:	4602      	mov	r2, r0
 800ce0a:	460b      	mov	r3, r1
 800ce0c:	4b49      	ldr	r3, [pc, #292]	; (800cf34 <UART_SetConfig+0x38c>)
 800ce0e:	fba3 2302 	umull	r2, r3, r3, r2
 800ce12:	095b      	lsrs	r3, r3, #5
 800ce14:	011e      	lsls	r6, r3, #4
 800ce16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f04f 0100 	mov.w	r1, #0
 800ce1e:	4602      	mov	r2, r0
 800ce20:	460b      	mov	r3, r1
 800ce22:	1894      	adds	r4, r2, r2
 800ce24:	60bc      	str	r4, [r7, #8]
 800ce26:	415b      	adcs	r3, r3
 800ce28:	60fb      	str	r3, [r7, #12]
 800ce2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ce2e:	1812      	adds	r2, r2, r0
 800ce30:	eb41 0303 	adc.w	r3, r1, r3
 800ce34:	f04f 0400 	mov.w	r4, #0
 800ce38:	f04f 0500 	mov.w	r5, #0
 800ce3c:	00dd      	lsls	r5, r3, #3
 800ce3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ce42:	00d4      	lsls	r4, r2, #3
 800ce44:	4622      	mov	r2, r4
 800ce46:	462b      	mov	r3, r5
 800ce48:	1814      	adds	r4, r2, r0
 800ce4a:	64bc      	str	r4, [r7, #72]	; 0x48
 800ce4c:	414b      	adcs	r3, r1
 800ce4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ce50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce52:	685b      	ldr	r3, [r3, #4]
 800ce54:	4618      	mov	r0, r3
 800ce56:	f04f 0100 	mov.w	r1, #0
 800ce5a:	f04f 0200 	mov.w	r2, #0
 800ce5e:	f04f 0300 	mov.w	r3, #0
 800ce62:	008b      	lsls	r3, r1, #2
 800ce64:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ce68:	0082      	lsls	r2, r0, #2
 800ce6a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800ce6e:	f7f3 ff1b 	bl	8000ca8 <__aeabi_uldivmod>
 800ce72:	4602      	mov	r2, r0
 800ce74:	460b      	mov	r3, r1
 800ce76:	4b2f      	ldr	r3, [pc, #188]	; (800cf34 <UART_SetConfig+0x38c>)
 800ce78:	fba3 1302 	umull	r1, r3, r3, r2
 800ce7c:	095b      	lsrs	r3, r3, #5
 800ce7e:	2164      	movs	r1, #100	; 0x64
 800ce80:	fb01 f303 	mul.w	r3, r1, r3
 800ce84:	1ad3      	subs	r3, r2, r3
 800ce86:	011b      	lsls	r3, r3, #4
 800ce88:	3332      	adds	r3, #50	; 0x32
 800ce8a:	4a2a      	ldr	r2, [pc, #168]	; (800cf34 <UART_SetConfig+0x38c>)
 800ce8c:	fba2 2303 	umull	r2, r3, r2, r3
 800ce90:	095b      	lsrs	r3, r3, #5
 800ce92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ce96:	441e      	add	r6, r3
 800ce98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f04f 0100 	mov.w	r1, #0
 800cea0:	4602      	mov	r2, r0
 800cea2:	460b      	mov	r3, r1
 800cea4:	1894      	adds	r4, r2, r2
 800cea6:	603c      	str	r4, [r7, #0]
 800cea8:	415b      	adcs	r3, r3
 800ceaa:	607b      	str	r3, [r7, #4]
 800ceac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ceb0:	1812      	adds	r2, r2, r0
 800ceb2:	eb41 0303 	adc.w	r3, r1, r3
 800ceb6:	f04f 0400 	mov.w	r4, #0
 800ceba:	f04f 0500 	mov.w	r5, #0
 800cebe:	00dd      	lsls	r5, r3, #3
 800cec0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800cec4:	00d4      	lsls	r4, r2, #3
 800cec6:	4622      	mov	r2, r4
 800cec8:	462b      	mov	r3, r5
 800ceca:	eb12 0a00 	adds.w	sl, r2, r0
 800cece:	eb43 0b01 	adc.w	fp, r3, r1
 800ced2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ced4:	685b      	ldr	r3, [r3, #4]
 800ced6:	4618      	mov	r0, r3
 800ced8:	f04f 0100 	mov.w	r1, #0
 800cedc:	f04f 0200 	mov.w	r2, #0
 800cee0:	f04f 0300 	mov.w	r3, #0
 800cee4:	008b      	lsls	r3, r1, #2
 800cee6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ceea:	0082      	lsls	r2, r0, #2
 800ceec:	4650      	mov	r0, sl
 800ceee:	4659      	mov	r1, fp
 800cef0:	f7f3 feda 	bl	8000ca8 <__aeabi_uldivmod>
 800cef4:	4602      	mov	r2, r0
 800cef6:	460b      	mov	r3, r1
 800cef8:	4b0e      	ldr	r3, [pc, #56]	; (800cf34 <UART_SetConfig+0x38c>)
 800cefa:	fba3 1302 	umull	r1, r3, r3, r2
 800cefe:	095b      	lsrs	r3, r3, #5
 800cf00:	2164      	movs	r1, #100	; 0x64
 800cf02:	fb01 f303 	mul.w	r3, r1, r3
 800cf06:	1ad3      	subs	r3, r2, r3
 800cf08:	011b      	lsls	r3, r3, #4
 800cf0a:	3332      	adds	r3, #50	; 0x32
 800cf0c:	4a09      	ldr	r2, [pc, #36]	; (800cf34 <UART_SetConfig+0x38c>)
 800cf0e:	fba2 2303 	umull	r2, r3, r2, r3
 800cf12:	095b      	lsrs	r3, r3, #5
 800cf14:	f003 020f 	and.w	r2, r3, #15
 800cf18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	4432      	add	r2, r6
 800cf1e:	609a      	str	r2, [r3, #8]
}
 800cf20:	bf00      	nop
 800cf22:	377c      	adds	r7, #124	; 0x7c
 800cf24:	46bd      	mov	sp, r7
 800cf26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf2a:	bf00      	nop
 800cf2c:	40011000 	.word	0x40011000
 800cf30:	40011400 	.word	0x40011400
 800cf34:	51eb851f 	.word	0x51eb851f

0800cf38 <sx126x_hal_write>:
 * @returns Operation status
 */


sx126x_hal_status_t sx126x_hal_write( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                      const uint8_t* data, const uint16_t data_length ){
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b086      	sub	sp, #24
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	60f8      	str	r0, [r7, #12]
 800cf40:	60b9      	str	r1, [r7, #8]
 800cf42:	603b      	str	r3, [r7, #0]
 800cf44:	4613      	mov	r3, r2
 800cf46:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO,BUSY) == GPIO_PIN_SET);
 800cf48:	bf00      	nop
 800cf4a:	4b18      	ldr	r3, [pc, #96]	; (800cfac <sx126x_hal_write+0x74>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	4a18      	ldr	r2, [pc, #96]	; (800cfb0 <sx126x_hal_write+0x78>)
 800cf50:	8812      	ldrh	r2, [r2, #0]
 800cf52:	4611      	mov	r1, r2
 800cf54:	4618      	mov	r0, r3
 800cf56:	f7fb fb25 	bl	80085a4 <HAL_GPIO_ReadPin>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	2b01      	cmp	r3, #1
 800cf5e:	d0f4      	beq.n	800cf4a <sx126x_hal_write+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 800cf60:	4b14      	ldr	r3, [pc, #80]	; (800cfb4 <sx126x_hal_write+0x7c>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	4a14      	ldr	r2, [pc, #80]	; (800cfb8 <sx126x_hal_write+0x80>)
 800cf66:	8811      	ldrh	r1, [r2, #0]
 800cf68:	2200      	movs	r2, #0
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f7fb fb32 	bl	80085d4 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, command_length, 100);
 800cf70:	88fa      	ldrh	r2, [r7, #6]
 800cf72:	2364      	movs	r3, #100	; 0x64
 800cf74:	68b9      	ldr	r1, [r7, #8]
 800cf76:	68f8      	ldr	r0, [r7, #12]
 800cf78:	f7fe f91b 	bl	800b1b2 <HAL_SPI_Transmit>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_Transmit(hspi, data, data_length, 100);
 800cf80:	8c3a      	ldrh	r2, [r7, #32]
 800cf82:	2364      	movs	r3, #100	; 0x64
 800cf84:	6839      	ldr	r1, [r7, #0]
 800cf86:	68f8      	ldr	r0, [r7, #12]
 800cf88:	f7fe f913 	bl	800b1b2 <HAL_SPI_Transmit>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 800cf90:	4b08      	ldr	r3, [pc, #32]	; (800cfb4 <sx126x_hal_write+0x7c>)
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	4a08      	ldr	r2, [pc, #32]	; (800cfb8 <sx126x_hal_write+0x80>)
 800cf96:	8811      	ldrh	r1, [r2, #0]
 800cf98:	2201      	movs	r2, #1
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7fb fb1a 	bl	80085d4 <HAL_GPIO_WritePin>
    return status;
 800cfa0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3718      	adds	r7, #24
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
 800cfaa:	bf00      	nop
 800cfac:	2000051c 	.word	0x2000051c
 800cfb0:	20000518 	.word	0x20000518
 800cfb4:	2000050c 	.word	0x2000050c
 800cfb8:	20000508 	.word	0x20000508

0800cfbc <sx126x_hal_read>:
 * @param [in] data_length      Buffer size to be received
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_read( const void* hspi, const uint8_t* command, const uint16_t command_length,
                                     uint8_t* data, const uint8_t offset ){
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b088      	sub	sp, #32
 800cfc0:	af02      	add	r7, sp, #8
 800cfc2:	60f8      	str	r0, [r7, #12]
 800cfc4:	60b9      	str	r1, [r7, #8]
 800cfc6:	603b      	str	r3, [r7, #0]
 800cfc8:	4613      	mov	r3, r2
 800cfca:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    while(HAL_GPIO_ReadPin(BUSY_GPIO, BUSY) == GPIO_PIN_SET);
 800cfcc:	bf00      	nop
 800cfce:	4b1e      	ldr	r3, [pc, #120]	; (800d048 <sx126x_hal_read+0x8c>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	4a1e      	ldr	r2, [pc, #120]	; (800d04c <sx126x_hal_read+0x90>)
 800cfd4:	8812      	ldrh	r2, [r2, #0]
 800cfd6:	4611      	mov	r1, r2
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f7fb fae3 	bl	80085a4 <HAL_GPIO_ReadPin>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	2b01      	cmp	r3, #1
 800cfe2:	d0f4      	beq.n	800cfce <sx126x_hal_read+0x12>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 800cfe4:	4b1a      	ldr	r3, [pc, #104]	; (800d050 <sx126x_hal_read+0x94>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	4a1a      	ldr	r2, [pc, #104]	; (800d054 <sx126x_hal_read+0x98>)
 800cfea:	8811      	ldrh	r1, [r2, #0]
 800cfec:	2200      	movs	r2, #0
 800cfee:	4618      	mov	r0, r3
 800cff0:	f7fb faf0 	bl	80085d4 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(hspi, command, offset, 100);
 800cff4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cff8:	b29a      	uxth	r2, r3
 800cffa:	2364      	movs	r3, #100	; 0x64
 800cffc:	68b9      	ldr	r1, [r7, #8]
 800cffe:	68f8      	ldr	r0, [r7, #12]
 800d000:	f7fe f8d7 	bl	800b1b2 <HAL_SPI_Transmit>
 800d004:	4603      	mov	r3, r0
 800d006:	75fb      	strb	r3, [r7, #23]
    status = HAL_SPI_TransmitReceive(hspi, command+offset, data, command_length-offset, 100);
 800d008:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d00c:	68ba      	ldr	r2, [r7, #8]
 800d00e:	18d1      	adds	r1, r2, r3
 800d010:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d014:	b29b      	uxth	r3, r3
 800d016:	88fa      	ldrh	r2, [r7, #6]
 800d018:	1ad3      	subs	r3, r2, r3
 800d01a:	b29b      	uxth	r3, r3
 800d01c:	2264      	movs	r2, #100	; 0x64
 800d01e:	9200      	str	r2, [sp, #0]
 800d020:	683a      	ldr	r2, [r7, #0]
 800d022:	68f8      	ldr	r0, [r7, #12]
 800d024:	f7fe fb12 	bl	800b64c <HAL_SPI_TransmitReceive>
 800d028:	4603      	mov	r3, r0
 800d02a:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
 800d02c:	4b08      	ldr	r3, [pc, #32]	; (800d050 <sx126x_hal_read+0x94>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	4a08      	ldr	r2, [pc, #32]	; (800d054 <sx126x_hal_read+0x98>)
 800d032:	8811      	ldrh	r1, [r2, #0]
 800d034:	2201      	movs	r2, #1
 800d036:	4618      	mov	r0, r3
 800d038:	f7fb facc 	bl	80085d4 <HAL_GPIO_WritePin>
    return status;
 800d03c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3718      	adds	r7, #24
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}
 800d046:	bf00      	nop
 800d048:	2000051c 	.word	0x2000051c
 800d04c:	20000518 	.word	0x20000518
 800d050:	2000050c 	.word	0x2000050c
 800d054:	20000508 	.word	0x20000508

0800d058 <set_NSS_pin>:
    status = HAL_SPI_TransmitReceive(&hspi, (uint8_t*)params, (uint8_t*)response, numOfParams, 100);
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
    return status;
}

void set_NSS_pin(GPIO_TypeDef* _NSS_GPIO, uint16_t _NSS){
 800d058:	b480      	push	{r7}
 800d05a:	b083      	sub	sp, #12
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
 800d060:	460b      	mov	r3, r1
 800d062:	807b      	strh	r3, [r7, #2]
    NSS = _NSS;
 800d064:	4a05      	ldr	r2, [pc, #20]	; (800d07c <set_NSS_pin+0x24>)
 800d066:	887b      	ldrh	r3, [r7, #2]
 800d068:	8013      	strh	r3, [r2, #0]
    NSS_GPIO = _NSS_GPIO;
 800d06a:	4a05      	ldr	r2, [pc, #20]	; (800d080 <set_NSS_pin+0x28>)
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6013      	str	r3, [r2, #0]
}
 800d070:	bf00      	nop
 800d072:	370c      	adds	r7, #12
 800d074:	46bd      	mov	sp, r7
 800d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07a:	4770      	bx	lr
 800d07c:	20000508 	.word	0x20000508
 800d080:	2000050c 	.word	0x2000050c

0800d084 <set_BUSY_pin>:

void set_BUSY_pin(GPIO_TypeDef* _BUSY_GPIO, uint16_t _BUSY){
 800d084:	b480      	push	{r7}
 800d086:	b083      	sub	sp, #12
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
 800d08c:	460b      	mov	r3, r1
 800d08e:	807b      	strh	r3, [r7, #2]
    BUSY = _BUSY;
 800d090:	4a05      	ldr	r2, [pc, #20]	; (800d0a8 <set_BUSY_pin+0x24>)
 800d092:	887b      	ldrh	r3, [r7, #2]
 800d094:	8013      	strh	r3, [r2, #0]
    BUSY_GPIO = _BUSY_GPIO;
 800d096:	4a05      	ldr	r2, [pc, #20]	; (800d0ac <set_BUSY_pin+0x28>)
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6013      	str	r3, [r2, #0]
}
 800d09c:	bf00      	nop
 800d09e:	370c      	adds	r7, #12
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a6:	4770      	bx	lr
 800d0a8:	20000518 	.word	0x20000518
 800d0ac:	2000051c 	.word	0x2000051c

0800d0b0 <set_NRESET_pin>:

void set_NRESET_pin(GPIO_TypeDef* _NRESET_GPIO, uint16_t _NRESET){
 800d0b0:	b480      	push	{r7}
 800d0b2:	b083      	sub	sp, #12
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	460b      	mov	r3, r1
 800d0ba:	807b      	strh	r3, [r7, #2]
    NRESET = _NRESET;
 800d0bc:	4a05      	ldr	r2, [pc, #20]	; (800d0d4 <set_NRESET_pin+0x24>)
 800d0be:	887b      	ldrh	r3, [r7, #2]
 800d0c0:	8013      	strh	r3, [r2, #0]
    NRESET_GPIO = _NRESET_GPIO;
 800d0c2:	4a05      	ldr	r2, [pc, #20]	; (800d0d8 <set_NRESET_pin+0x28>)
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	6013      	str	r3, [r2, #0]
}
 800d0c8:	bf00      	nop
 800d0ca:	370c      	adds	r7, #12
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d2:	4770      	bx	lr
 800d0d4:	20000510 	.word	0x20000510
 800d0d8:	20000514 	.word	0x20000514

0800d0dc <set_DIO1_pin>:

void set_DIO1_pin(GPIO_TypeDef* _DIO1_GPIO, uint16_t _DIO1){
 800d0dc:	b480      	push	{r7}
 800d0de:	b083      	sub	sp, #12
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
 800d0e4:	460b      	mov	r3, r1
 800d0e6:	807b      	strh	r3, [r7, #2]
    DIO1 = _DIO1;
 800d0e8:	4a05      	ldr	r2, [pc, #20]	; (800d100 <set_DIO1_pin+0x24>)
 800d0ea:	887b      	ldrh	r3, [r7, #2]
 800d0ec:	8013      	strh	r3, [r2, #0]
    DIO1_GPIO = _DIO1_GPIO;
 800d0ee:	4a05      	ldr	r2, [pc, #20]	; (800d104 <set_DIO1_pin+0x28>)
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6013      	str	r3, [r2, #0]
}
 800d0f4:	bf00      	nop
 800d0f6:	370c      	adds	r7, #12
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fe:	4770      	bx	lr
 800d100:	20000520 	.word	0x20000520
 800d104:	20000524 	.word	0x20000524

0800d108 <set_hspi>:
void set_DIO3_pin(GPIO_TypeDef* _DIO3_GPIO, uint16_t _DIO3){
    DIO3 = _DIO3;
    DIO3_GPIO = _DIO3_GPIO;
}

void set_hspi(SPI_HandleTypeDef _hspi){
 800d108:	b084      	sub	sp, #16
 800d10a:	b580      	push	{r7, lr}
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	f107 0c08 	add.w	ip, r7, #8
 800d112:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    hspi = _hspi;
 800d116:	4b07      	ldr	r3, [pc, #28]	; (800d134 <set_hspi+0x2c>)
 800d118:	4618      	mov	r0, r3
 800d11a:	f107 0308 	add.w	r3, r7, #8
 800d11e:	2258      	movs	r2, #88	; 0x58
 800d120:	4619      	mov	r1, r3
 800d122:	f004 fb73 	bl	801180c <memcpy>
}
 800d126:	bf00      	nop
 800d128:	46bd      	mov	sp, r7
 800d12a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d12e:	b004      	add	sp, #16
 800d130:	4770      	bx	lr
 800d132:	bf00      	nop
 800d134:	20000528 	.word	0x20000528

0800d138 <Tx_setup>:

void Tx_setup(){
 800d138:	b580      	push	{r7, lr}
 800d13a:	b086      	sub	sp, #24
 800d13c:	af02      	add	r7, sp, #8
    //NEED TO ADD COMMAND ERROR HANDLING
    HAL_GPIO_WritePin(NRESET_GPIO, NRESET, GPIO_PIN_SET);
 800d13e:	4b66      	ldr	r3, [pc, #408]	; (800d2d8 <Tx_setup+0x1a0>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	4a66      	ldr	r2, [pc, #408]	; (800d2dc <Tx_setup+0x1a4>)
 800d144:	8811      	ldrh	r1, [r2, #0]
 800d146:	2201      	movs	r2, #1
 800d148:	4618      	mov	r0, r3
 800d14a:	f7fb fa43 	bl	80085d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_RESET);
 800d14e:	4b64      	ldr	r3, [pc, #400]	; (800d2e0 <Tx_setup+0x1a8>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	4a64      	ldr	r2, [pc, #400]	; (800d2e4 <Tx_setup+0x1ac>)
 800d154:	8811      	ldrh	r1, [r2, #0]
 800d156:	2200      	movs	r2, #0
 800d158:	4618      	mov	r0, r3
 800d15a:	f7fb fa3b 	bl	80085d4 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800d15e:	2032      	movs	r0, #50	; 0x32
 800d160:	f7fa fcca 	bl	8007af8 <HAL_Delay>
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);             //make sure chip select is off
 800d164:	4b5e      	ldr	r3, [pc, #376]	; (800d2e0 <Tx_setup+0x1a8>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	4a5e      	ldr	r2, [pc, #376]	; (800d2e4 <Tx_setup+0x1ac>)
 800d16a:	8811      	ldrh	r1, [r2, #0]
 800d16c:	2201      	movs	r2, #1
 800d16e:	4618      	mov	r0, r3
 800d170:	f7fb fa30 	bl	80085d4 <HAL_GPIO_WritePin>

    //set to standby for setup
    sx126x_set_standby(&hspi, 0);
 800d174:	2100      	movs	r1, #0
 800d176:	485c      	ldr	r0, [pc, #368]	; (800d2e8 <Tx_setup+0x1b0>)
 800d178:	f000 f8f2 	bl	800d360 <sx126x_set_standby>

    //set general parameters
    sx126x_set_rf_freq(&hspi, frequency);                       //set rf frequency
 800d17c:	4b5b      	ldr	r3, [pc, #364]	; (800d2ec <Tx_setup+0x1b4>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	4619      	mov	r1, r3
 800d182:	4859      	ldr	r0, [pc, #356]	; (800d2e8 <Tx_setup+0x1b0>)
 800d184:	f000 fa76 	bl	800d674 <sx126x_set_rf_freq>
    sx126x_set_pkt_type(&hspi, packet_type);                    //set packet type
 800d188:	4b59      	ldr	r3, [pc, #356]	; (800d2f0 <Tx_setup+0x1b8>)
 800d18a:	781b      	ldrb	r3, [r3, #0]
 800d18c:	4619      	mov	r1, r3
 800d18e:	4856      	ldr	r0, [pc, #344]	; (800d2e8 <Tx_setup+0x1b0>)
 800d190:	f000 faaa 	bl	800d6e8 <sx126x_set_pkt_type>
    sx126x_set_rx_tx_fallback_mode(&hspi, fallback_mode);       //set rx tx fallback mode
 800d194:	4b57      	ldr	r3, [pc, #348]	; (800d2f4 <Tx_setup+0x1bc>)
 800d196:	781b      	ldrb	r3, [r3, #0]
 800d198:	4619      	mov	r1, r3
 800d19a:	4853      	ldr	r0, [pc, #332]	; (800d2e8 <Tx_setup+0x1b0>)
 800d19c:	f000 f977 	bl	800d48e <sx126x_set_rx_tx_fallback_mode>
    sx126x_set_dio2_as_rf_sw_ctrl(&hspi, 1);                    //set dio2 as rf sw -> 1 is to activate it 0 would be to have it as regular irq
 800d1a0:	2101      	movs	r1, #1
 800d1a2:	4851      	ldr	r0, [pc, #324]	; (800d2e8 <Tx_setup+0x1b0>)
 800d1a4:	f000 fa24 	bl	800d5f0 <sx126x_set_dio2_as_rf_sw_ctrl>
    sx126x_set_dio3_as_tcxo_ctrl(&hspi, tcxo_voltage_ctrl, 100);//set dio3 as tcxo ctrl, 100 is for the delay in ms
 800d1a8:	4b53      	ldr	r3, [pc, #332]	; (800d2f8 <Tx_setup+0x1c0>)
 800d1aa:	781b      	ldrb	r3, [r3, #0]
 800d1ac:	2264      	movs	r2, #100	; 0x64
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	484d      	ldr	r0, [pc, #308]	; (800d2e8 <Tx_setup+0x1b0>)
 800d1b2:	f000 fa37 	bl	800d624 <sx126x_set_dio3_as_tcxo_ctrl>

    //calibrate functions
    sx126x_cal(&hspi, cal_mask);                                //calibrate radio, mask chooses what to calibrate
 800d1b6:	4b51      	ldr	r3, [pc, #324]	; (800d2fc <Tx_setup+0x1c4>)
 800d1b8:	781b      	ldrb	r3, [r3, #0]
 800d1ba:	4619      	mov	r1, r3
 800d1bc:	484a      	ldr	r0, [pc, #296]	; (800d2e8 <Tx_setup+0x1b0>)
 800d1be:	f000 f903 	bl	800d3c8 <sx126x_cal>
    HAL_Delay(50);
 800d1c2:	2032      	movs	r0, #50	; 0x32
 800d1c4:	f7fa fc98 	bl	8007af8 <HAL_Delay>
    sx126x_set_reg_mode(&hspi, regulator_mode);                 //ldo or dc-dc
 800d1c8:	4b4d      	ldr	r3, [pc, #308]	; (800d300 <Tx_setup+0x1c8>)
 800d1ca:	781b      	ldrb	r3, [r3, #0]
 800d1cc:	4619      	mov	r1, r3
 800d1ce:	4846      	ldr	r0, [pc, #280]	; (800d2e8 <Tx_setup+0x1b0>)
 800d1d0:	f000 f8e0 	bl	800d394 <sx126x_set_reg_mode>
    sx126x_cal_img_hex(&hspi, cal_low_freq, cal_hi_freq);       //image calibration frequencies
 800d1d4:	4b4b      	ldr	r3, [pc, #300]	; (800d304 <Tx_setup+0x1cc>)
 800d1d6:	781b      	ldrb	r3, [r3, #0]
 800d1d8:	4a4b      	ldr	r2, [pc, #300]	; (800d308 <Tx_setup+0x1d0>)
 800d1da:	7812      	ldrb	r2, [r2, #0]
 800d1dc:	4619      	mov	r1, r3
 800d1de:	4842      	ldr	r0, [pc, #264]	; (800d2e8 <Tx_setup+0x1b0>)
 800d1e0:	f000 f90c 	bl	800d3fc <sx126x_cal_img_hex>

    //set pa config
    struct sx126x_pa_cfg_params_s *params = malloc(sizeof(sx126x_pa_cfg_params_t));
 800d1e4:	2004      	movs	r0, #4
 800d1e6:	f004 fb01 	bl	80117ec <malloc>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	60fb      	str	r3, [r7, #12]
    params->pa_duty_cycle=pa_duty_cyc;
 800d1ee:	4b47      	ldr	r3, [pc, #284]	; (800d30c <Tx_setup+0x1d4>)
 800d1f0:	781a      	ldrb	r2, [r3, #0]
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	701a      	strb	r2, [r3, #0]
    params->hp_max=pa_hp_max;
 800d1f6:	4b46      	ldr	r3, [pc, #280]	; (800d310 <Tx_setup+0x1d8>)
 800d1f8:	781a      	ldrb	r2, [r3, #0]
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	705a      	strb	r2, [r3, #1]
    params->device_sel=pa_device_sel;
 800d1fe:	4b45      	ldr	r3, [pc, #276]	; (800d314 <Tx_setup+0x1dc>)
 800d200:	781a      	ldrb	r2, [r3, #0]
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	709a      	strb	r2, [r3, #2]
    params->pa_lut=pa_lut;
 800d206:	4b44      	ldr	r3, [pc, #272]	; (800d318 <Tx_setup+0x1e0>)
 800d208:	781a      	ldrb	r2, [r3, #0]
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	70da      	strb	r2, [r3, #3]
    sx126x_set_pa_cfg(&hspi, params);
 800d20e:	68f9      	ldr	r1, [r7, #12]
 800d210:	4835      	ldr	r0, [pc, #212]	; (800d2e8 <Tx_setup+0x1b0>)
 800d212:	f000 f917 	bl	800d444 <sx126x_set_pa_cfg>
    free(params);
 800d216:	68f8      	ldr	r0, [r7, #12]
 800d218:	f004 faf0 	bl	80117fc <free>

    //set transmission parameters
    sx126x_set_tx_params(&hspi, tx_power, ramp_time);
 800d21c:	4b3f      	ldr	r3, [pc, #252]	; (800d31c <Tx_setup+0x1e4>)
 800d21e:	781b      	ldrb	r3, [r3, #0]
 800d220:	b25b      	sxtb	r3, r3
 800d222:	4a3f      	ldr	r2, [pc, #252]	; (800d320 <Tx_setup+0x1e8>)
 800d224:	7812      	ldrb	r2, [r2, #0]
 800d226:	4619      	mov	r1, r3
 800d228:	482f      	ldr	r0, [pc, #188]	; (800d2e8 <Tx_setup+0x1b0>)
 800d22a:	f000 fa77 	bl	800d71c <sx126x_set_tx_params>
    sx126x_set_buffer_base_address(&hspi, tx_address_base, rx_address_base);
 800d22e:	4b3d      	ldr	r3, [pc, #244]	; (800d324 <Tx_setup+0x1ec>)
 800d230:	781b      	ldrb	r3, [r3, #0]
 800d232:	4a3d      	ldr	r2, [pc, #244]	; (800d328 <Tx_setup+0x1f0>)
 800d234:	7812      	ldrb	r2, [r2, #0]
 800d236:	4619      	mov	r1, r3
 800d238:	482b      	ldr	r0, [pc, #172]	; (800d2e8 <Tx_setup+0x1b0>)
 800d23a:	f000 fb2d 	bl	800d898 <sx126x_set_buffer_base_address>

    //set modulation parameters
    struct sx126x_mod_params_lora_s *mod_params = malloc(sizeof(sx126x_mod_params_lora_t));
 800d23e:	2004      	movs	r0, #4
 800d240:	f004 fad4 	bl	80117ec <malloc>
 800d244:	4603      	mov	r3, r0
 800d246:	60bb      	str	r3, [r7, #8]
    mod_params->sf=lora_sf;
 800d248:	4b38      	ldr	r3, [pc, #224]	; (800d32c <Tx_setup+0x1f4>)
 800d24a:	781a      	ldrb	r2, [r3, #0]
 800d24c:	68bb      	ldr	r3, [r7, #8]
 800d24e:	701a      	strb	r2, [r3, #0]
    mod_params->bw=lora_bw;
 800d250:	4b37      	ldr	r3, [pc, #220]	; (800d330 <Tx_setup+0x1f8>)
 800d252:	781a      	ldrb	r2, [r3, #0]
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	705a      	strb	r2, [r3, #1]
    mod_params->cr=lora_cr;
 800d258:	4b36      	ldr	r3, [pc, #216]	; (800d334 <Tx_setup+0x1fc>)
 800d25a:	781a      	ldrb	r2, [r3, #0]
 800d25c:	68bb      	ldr	r3, [r7, #8]
 800d25e:	709a      	strb	r2, [r3, #2]
    mod_params->ldro=lora_ldro;
 800d260:	4b35      	ldr	r3, [pc, #212]	; (800d338 <Tx_setup+0x200>)
 800d262:	781a      	ldrb	r2, [r3, #0]
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	70da      	strb	r2, [r3, #3]
    sx126x_set_lora_mod_params(&hspi, mod_params);
 800d268:	68b9      	ldr	r1, [r7, #8]
 800d26a:	481f      	ldr	r0, [pc, #124]	; (800d2e8 <Tx_setup+0x1b0>)
 800d26c:	f000 fa7a 	bl	800d764 <sx126x_set_lora_mod_params>
    free(mod_params);
 800d270:	68b8      	ldr	r0, [r7, #8]
 800d272:	f004 fac3 	bl	80117fc <free>

    //set lora packet params
    struct sx126x_pkt_params_lora_s *lora_params = malloc(sizeof(sx126x_pkt_params_lora_t));
 800d276:	2006      	movs	r0, #6
 800d278:	f004 fab8 	bl	80117ec <malloc>
 800d27c:	4603      	mov	r3, r0
 800d27e:	607b      	str	r3, [r7, #4]
    lora_params->preamble_len_in_symb=pkt_preamble_len;
 800d280:	4b2e      	ldr	r3, [pc, #184]	; (800d33c <Tx_setup+0x204>)
 800d282:	881a      	ldrh	r2, [r3, #0]
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	801a      	strh	r2, [r3, #0]
    lora_params->header_type=header_type;
 800d288:	4b2d      	ldr	r3, [pc, #180]	; (800d340 <Tx_setup+0x208>)
 800d28a:	781a      	ldrb	r2, [r3, #0]
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	709a      	strb	r2, [r3, #2]
    lora_params->pld_len_in_bytes=payload_len;
 800d290:	4b2c      	ldr	r3, [pc, #176]	; (800d344 <Tx_setup+0x20c>)
 800d292:	781a      	ldrb	r2, [r3, #0]
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	70da      	strb	r2, [r3, #3]
    lora_params->crc_is_on=crc_is_on;
 800d298:	4b2b      	ldr	r3, [pc, #172]	; (800d348 <Tx_setup+0x210>)
 800d29a:	781a      	ldrb	r2, [r3, #0]
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	711a      	strb	r2, [r3, #4]
    lora_params->invert_iq_is_on=invert_iq_is_on;
 800d2a0:	4b2a      	ldr	r3, [pc, #168]	; (800d34c <Tx_setup+0x214>)
 800d2a2:	781a      	ldrb	r2, [r3, #0]
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	715a      	strb	r2, [r3, #5]
    sx126x_set_lora_pkt_params(&hspi, lora_params);
 800d2a8:	6879      	ldr	r1, [r7, #4]
 800d2aa:	480f      	ldr	r0, [pc, #60]	; (800d2e8 <Tx_setup+0x1b0>)
 800d2ac:	f000 fa86 	bl	800d7bc <sx126x_set_lora_pkt_params>
    free(lora_params);
 800d2b0:	6878      	ldr	r0, [r7, #4]
 800d2b2:	f004 faa3 	bl	80117fc <free>

    //set dio and irq parameters
    sx126x_set_dio_irq_params(&hspi, irq_mask, dio1_mask, dio2_mask, dio3_mask);
 800d2b6:	4b26      	ldr	r3, [pc, #152]	; (800d350 <Tx_setup+0x218>)
 800d2b8:	8819      	ldrh	r1, [r3, #0]
 800d2ba:	4b26      	ldr	r3, [pc, #152]	; (800d354 <Tx_setup+0x21c>)
 800d2bc:	881a      	ldrh	r2, [r3, #0]
 800d2be:	4b26      	ldr	r3, [pc, #152]	; (800d358 <Tx_setup+0x220>)
 800d2c0:	8818      	ldrh	r0, [r3, #0]
 800d2c2:	4b26      	ldr	r3, [pc, #152]	; (800d35c <Tx_setup+0x224>)
 800d2c4:	881b      	ldrh	r3, [r3, #0]
 800d2c6:	9300      	str	r3, [sp, #0]
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	4807      	ldr	r0, [pc, #28]	; (800d2e8 <Tx_setup+0x1b0>)
 800d2cc:	f000 f94c 	bl	800d568 <sx126x_set_dio_irq_params>

}
 800d2d0:	bf00      	nop
 800d2d2:	3710      	adds	r7, #16
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}
 800d2d8:	20000514 	.word	0x20000514
 800d2dc:	20000510 	.word	0x20000510
 800d2e0:	2000050c 	.word	0x2000050c
 800d2e4:	20000508 	.word	0x20000508
 800d2e8:	20000528 	.word	0x20000528
 800d2ec:	20000024 	.word	0x20000024
 800d2f0:	20000028 	.word	0x20000028
 800d2f4:	20000029 	.word	0x20000029
 800d2f8:	2000002a 	.word	0x2000002a
 800d2fc:	2000002c 	.word	0x2000002c
 800d300:	2000002b 	.word	0x2000002b
 800d304:	2000002d 	.word	0x2000002d
 800d308:	2000002e 	.word	0x2000002e
 800d30c:	2000002f 	.word	0x2000002f
 800d310:	20000030 	.word	0x20000030
 800d314:	20000580 	.word	0x20000580
 800d318:	20000031 	.word	0x20000031
 800d31c:	20000032 	.word	0x20000032
 800d320:	20000033 	.word	0x20000033
 800d324:	20000581 	.word	0x20000581
 800d328:	20000582 	.word	0x20000582
 800d32c:	20000034 	.word	0x20000034
 800d330:	20000035 	.word	0x20000035
 800d334:	20000036 	.word	0x20000036
 800d338:	20000583 	.word	0x20000583
 800d33c:	20000038 	.word	0x20000038
 800d340:	20000584 	.word	0x20000584
 800d344:	2000003a 	.word	0x2000003a
 800d348:	2000003b 	.word	0x2000003b
 800d34c:	20000585 	.word	0x20000585
 800d350:	2000003c 	.word	0x2000003c
 800d354:	2000003e 	.word	0x2000003e
 800d358:	20000586 	.word	0x20000586
 800d35c:	20000588 	.word	0x20000588

0800d360 <sx126x_set_standby>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_SLEEP, 0, 0 );
}

sx126x_status_t sx126x_set_standby( const void* context, const sx126x_standby_cfg_t cfg )
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b086      	sub	sp, #24
 800d364:	af02      	add	r7, sp, #8
 800d366:	6078      	str	r0, [r7, #4]
 800d368:	460b      	mov	r3, r1
 800d36a:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_STANDBY] = { 0 };
 800d36c:	2300      	movs	r3, #0
 800d36e:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_STANDBY;
 800d370:	2380      	movs	r3, #128	; 0x80
 800d372:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) cfg;
 800d374:	78fb      	ldrb	r3, [r7, #3]
 800d376:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_STANDBY, 0, 0 );
 800d378:	f107 010c 	add.w	r1, r7, #12
 800d37c:	2300      	movs	r3, #0
 800d37e:	9300      	str	r3, [sp, #0]
 800d380:	2300      	movs	r3, #0
 800d382:	2202      	movs	r2, #2
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f7ff fdd7 	bl	800cf38 <sx126x_hal_write>
 800d38a:	4603      	mov	r3, r0
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3710      	adds	r7, #16
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}

0800d394 <sx126x_set_reg_mode>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_INFINITE_PREAMBLE, 0, 0 );
}

sx126x_status_t sx126x_set_reg_mode( const void* context, const sx126x_reg_mod_t mode )
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b086      	sub	sp, #24
 800d398:	af02      	add	r7, sp, #8
 800d39a:	6078      	str	r0, [r7, #4]
 800d39c:	460b      	mov	r3, r1
 800d39e:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_REGULATOR_MODE] = { 0 };
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_REGULATOR_MODE;
 800d3a4:	2396      	movs	r3, #150	; 0x96
 800d3a6:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) mode;
 800d3a8:	78fb      	ldrb	r3, [r7, #3]
 800d3aa:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_REGULATOR_MODE, 0, 0 );
 800d3ac:	f107 010c 	add.w	r1, r7, #12
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	9300      	str	r3, [sp, #0]
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	2202      	movs	r2, #2
 800d3b8:	6878      	ldr	r0, [r7, #4]
 800d3ba:	f7ff fdbd 	bl	800cf38 <sx126x_hal_write>
 800d3be:	4603      	mov	r3, r0
}
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	3710      	adds	r7, #16
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}

0800d3c8 <sx126x_cal>:

sx126x_status_t sx126x_cal( const void* context, const sx126x_cal_mask_t param )
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b086      	sub	sp, #24
 800d3cc:	af02      	add	r7, sp, #8
 800d3ce:	6078      	str	r0, [r7, #4]
 800d3d0:	460b      	mov	r3, r1
 800d3d2:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_CALIBRATE] = { 0 };
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_CALIBRATE;
 800d3d8:	2389      	movs	r3, #137	; 0x89
 800d3da:	733b      	strb	r3, [r7, #12]

    buf[1] = param;
 800d3dc:	78fb      	ldrb	r3, [r7, #3]
 800d3de:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE, 0, 0 );
 800d3e0:	f107 010c 	add.w	r1, r7, #12
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	9300      	str	r3, [sp, #0]
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	2202      	movs	r2, #2
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	f7ff fda3 	bl	800cf38 <sx126x_hal_write>
 800d3f2:	4603      	mov	r3, r0
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3710      	adds	r7, #16
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}

0800d3fc <sx126x_cal_img_hex>:

sx126x_status_t sx126x_cal_img_hex( const void* context, const uint8_t low_freq, const uint8_t high_freq)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b086      	sub	sp, #24
 800d400:	af02      	add	r7, sp, #8
 800d402:	6078      	str	r0, [r7, #4]
 800d404:	460b      	mov	r3, r1
 800d406:	70fb      	strb	r3, [r7, #3]
 800d408:	4613      	mov	r3, r2
 800d40a:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_CALIBRATE_IMAGE] = { 0 };
 800d40c:	4b0c      	ldr	r3, [pc, #48]	; (800d440 <sx126x_cal_img_hex+0x44>)
 800d40e:	881b      	ldrh	r3, [r3, #0]
 800d410:	81bb      	strh	r3, [r7, #12]
 800d412:	2300      	movs	r3, #0
 800d414:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_CALIBRATE_IMAGE;
 800d416:	2398      	movs	r3, #152	; 0x98
 800d418:	733b      	strb	r3, [r7, #12]
    buf[1] = low_freq;
 800d41a:	78fb      	ldrb	r3, [r7, #3]
 800d41c:	737b      	strb	r3, [r7, #13]
    buf[2] = high_freq;
 800d41e:	78bb      	ldrb	r3, [r7, #2]
 800d420:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
 800d422:	f107 010c 	add.w	r1, r7, #12
 800d426:	2300      	movs	r3, #0
 800d428:	9300      	str	r3, [sp, #0]
 800d42a:	2300      	movs	r3, #0
 800d42c:	2203      	movs	r2, #3
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f7ff fd82 	bl	800cf38 <sx126x_hal_write>
 800d434:	4603      	mov	r3, r0
}
 800d436:	4618      	mov	r0, r3
 800d438:	3710      	adds	r7, #16
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}
 800d43e:	bf00      	nop
 800d440:	08018370 	.word	0x08018370

0800d444 <sx126x_set_pa_cfg>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE_IMAGE, 0, 0 );
}

sx126x_status_t sx126x_set_pa_cfg( const void* context, const sx126x_pa_cfg_params_t* params )
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b086      	sub	sp, #24
 800d448:	af02      	add	r7, sp, #8
 800d44a:	6078      	str	r0, [r7, #4]
 800d44c:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_PA_CFG] = { 0 };
 800d44e:	2300      	movs	r3, #0
 800d450:	60bb      	str	r3, [r7, #8]
 800d452:	2300      	movs	r3, #0
 800d454:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_PA_CFG;
 800d456:	2395      	movs	r3, #149	; 0x95
 800d458:	723b      	strb	r3, [r7, #8]
    buf[1] = params->pa_duty_cycle;
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	781b      	ldrb	r3, [r3, #0]
 800d45e:	727b      	strb	r3, [r7, #9]
    buf[2] = params->hp_max;
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	785b      	ldrb	r3, [r3, #1]
 800d464:	72bb      	strb	r3, [r7, #10]
    buf[3] = params->device_sel;
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	789b      	ldrb	r3, [r3, #2]
 800d46a:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->pa_lut;
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	78db      	ldrb	r3, [r3, #3]
 800d470:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PA_CFG, 0, 0 );
 800d472:	f107 0108 	add.w	r1, r7, #8
 800d476:	2300      	movs	r3, #0
 800d478:	9300      	str	r3, [sp, #0]
 800d47a:	2300      	movs	r3, #0
 800d47c:	2205      	movs	r2, #5
 800d47e:	6878      	ldr	r0, [r7, #4]
 800d480:	f7ff fd5a 	bl	800cf38 <sx126x_hal_write>
 800d484:	4603      	mov	r3, r0
}
 800d486:	4618      	mov	r0, r3
 800d488:	3710      	adds	r7, #16
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}

0800d48e <sx126x_set_rx_tx_fallback_mode>:

sx126x_status_t sx126x_set_rx_tx_fallback_mode( const void* context, const sx126x_fallback_modes_t fallback_mode )
{
 800d48e:	b580      	push	{r7, lr}
 800d490:	b086      	sub	sp, #24
 800d492:	af02      	add	r7, sp, #8
 800d494:	6078      	str	r0, [r7, #4]
 800d496:	460b      	mov	r3, r1
 800d498:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_RX_TX_FALLBACK_MODE] = { 0 };
 800d49a:	2300      	movs	r3, #0
 800d49c:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_RX_TX_FALLBACK_MODE;
 800d49e:	2393      	movs	r3, #147	; 0x93
 800d4a0:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) fallback_mode;
 800d4a2:	78fb      	ldrb	r3, [r7, #3]
 800d4a4:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RX_TX_FALLBACK_MODE, 0, 0 );
 800d4a6:	f107 010c 	add.w	r1, r7, #12
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	9300      	str	r3, [sp, #0]
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	2202      	movs	r2, #2
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f7ff fd40 	bl	800cf38 <sx126x_hal_write>
 800d4b8:	4603      	mov	r3, r0
}
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	3710      	adds	r7, #16
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bd80      	pop	{r7, pc}
	...

0800d4c4 <sx126x_write_register>:
// Registers and buffer Access
//

sx126x_status_t sx126x_write_register( const void* context, const uint16_t address, const uint8_t* buffer,
                                       const uint8_t size )
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b088      	sub	sp, #32
 800d4c8:	af02      	add	r7, sp, #8
 800d4ca:	60f8      	str	r0, [r7, #12]
 800d4cc:	607a      	str	r2, [r7, #4]
 800d4ce:	461a      	mov	r2, r3
 800d4d0:	460b      	mov	r3, r1
 800d4d2:	817b      	strh	r3, [r7, #10]
 800d4d4:	4613      	mov	r3, r2
 800d4d6:	727b      	strb	r3, [r7, #9]
    uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = { 0 };
 800d4d8:	4b0e      	ldr	r3, [pc, #56]	; (800d514 <sx126x_write_register+0x50>)
 800d4da:	881b      	ldrh	r3, [r3, #0]
 800d4dc:	82bb      	strh	r3, [r7, #20]
 800d4de:	2300      	movs	r3, #0
 800d4e0:	75bb      	strb	r3, [r7, #22]

    buf[0] = SX126X_WRITE_REGISTER;
 800d4e2:	230d      	movs	r3, #13
 800d4e4:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( address >> 8 );
 800d4e6:	897b      	ldrh	r3, [r7, #10]
 800d4e8:	0a1b      	lsrs	r3, r3, #8
 800d4ea:	b29b      	uxth	r3, r3
 800d4ec:	b2db      	uxtb	r3, r3
 800d4ee:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( address >> 0 );
 800d4f0:	897b      	ldrh	r3, [r7, #10]
 800d4f2:	b2db      	uxtb	r3, r3
 800d4f4:	75bb      	strb	r3, [r7, #22]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_REGISTER, buffer, size );
 800d4f6:	7a7b      	ldrb	r3, [r7, #9]
 800d4f8:	b29b      	uxth	r3, r3
 800d4fa:	f107 0114 	add.w	r1, r7, #20
 800d4fe:	9300      	str	r3, [sp, #0]
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2203      	movs	r2, #3
 800d504:	68f8      	ldr	r0, [r7, #12]
 800d506:	f7ff fd17 	bl	800cf38 <sx126x_hal_write>
 800d50a:	4603      	mov	r3, r0
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3718      	adds	r7, #24
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}
 800d514:	08018370 	.word	0x08018370

0800d518 <sx126x_read_register>:

sx126x_status_t sx126x_read_register( const void* context, const uint16_t address, uint8_t* buffer, const uint8_t size )
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b088      	sub	sp, #32
 800d51c:	af02      	add	r7, sp, #8
 800d51e:	60f8      	str	r0, [r7, #12]
 800d520:	607a      	str	r2, [r7, #4]
 800d522:	461a      	mov	r2, r3
 800d524:	460b      	mov	r3, r1
 800d526:	817b      	strh	r3, [r7, #10]
 800d528:	4613      	mov	r3, r2
 800d52a:	727b      	strb	r3, [r7, #9]
    uint8_t         buf[SX126X_SIZE_READ_REGISTER] = { 0 };
 800d52c:	2300      	movs	r3, #0
 800d52e:	613b      	str	r3, [r7, #16]
    sx126x_status_t status                         = SX126X_STATUS_ERROR;
 800d530:	2303      	movs	r3, #3
 800d532:	75fb      	strb	r3, [r7, #23]

    buf[0] = SX126X_READ_REGISTER;
 800d534:	231d      	movs	r3, #29
 800d536:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( address >> 8 );
 800d538:	897b      	ldrh	r3, [r7, #10]
 800d53a:	0a1b      	lsrs	r3, r3, #8
 800d53c:	b29b      	uxth	r3, r3
 800d53e:	b2db      	uxtb	r3, r3
 800d540:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( address >> 0 );
 800d542:	897b      	ldrh	r3, [r7, #10]
 800d544:	b2db      	uxtb	r3, r3
 800d546:	74bb      	strb	r3, [r7, #18]

    status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_READ_REGISTER, buffer, size );
 800d548:	f107 0110 	add.w	r1, r7, #16
 800d54c:	7a7b      	ldrb	r3, [r7, #9]
 800d54e:	9300      	str	r3, [sp, #0]
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2204      	movs	r2, #4
 800d554:	68f8      	ldr	r0, [r7, #12]
 800d556:	f7ff fd31 	bl	800cfbc <sx126x_hal_read>
 800d55a:	4603      	mov	r3, r0
 800d55c:	75fb      	strb	r3, [r7, #23]

    return status;
 800d55e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d560:	4618      	mov	r0, r3
 800d562:	3718      	adds	r7, #24
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}

0800d568 <sx126x_set_dio_irq_params>:
//
// DIO and IRQ Control Functions
//
sx126x_status_t sx126x_set_dio_irq_params( const void* context, const uint16_t irq_mask, const uint16_t dio1_mask,
                                           const uint16_t dio2_mask, const uint16_t dio3_mask )
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b08a      	sub	sp, #40	; 0x28
 800d56c:	af02      	add	r7, sp, #8
 800d56e:	60f8      	str	r0, [r7, #12]
 800d570:	4608      	mov	r0, r1
 800d572:	4611      	mov	r1, r2
 800d574:	461a      	mov	r2, r3
 800d576:	4603      	mov	r3, r0
 800d578:	817b      	strh	r3, [r7, #10]
 800d57a:	460b      	mov	r3, r1
 800d57c:	813b      	strh	r3, [r7, #8]
 800d57e:	4613      	mov	r3, r2
 800d580:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = { 0 };
 800d582:	2300      	movs	r3, #0
 800d584:	617b      	str	r3, [r7, #20]
 800d586:	f107 0318 	add.w	r3, r7, #24
 800d58a:	2200      	movs	r2, #0
 800d58c:	601a      	str	r2, [r3, #0]
 800d58e:	711a      	strb	r2, [r3, #4]

    buf[0] = SX126X_SET_DIO_IRQ_PARAMS;
 800d590:	2308      	movs	r3, #8
 800d592:	753b      	strb	r3, [r7, #20]

    buf[1] = ( uint8_t )( irq_mask >> 8 );
 800d594:	897b      	ldrh	r3, [r7, #10]
 800d596:	0a1b      	lsrs	r3, r3, #8
 800d598:	b29b      	uxth	r3, r3
 800d59a:	b2db      	uxtb	r3, r3
 800d59c:	757b      	strb	r3, [r7, #21]
    buf[2] = ( uint8_t )( irq_mask >> 0 );
 800d59e:	897b      	ldrh	r3, [r7, #10]
 800d5a0:	b2db      	uxtb	r3, r3
 800d5a2:	75bb      	strb	r3, [r7, #22]

    buf[3] = ( uint8_t )( dio1_mask >> 8 );
 800d5a4:	893b      	ldrh	r3, [r7, #8]
 800d5a6:	0a1b      	lsrs	r3, r3, #8
 800d5a8:	b29b      	uxth	r3, r3
 800d5aa:	b2db      	uxtb	r3, r3
 800d5ac:	75fb      	strb	r3, [r7, #23]
    buf[4] = ( uint8_t )( dio1_mask >> 0 );
 800d5ae:	893b      	ldrh	r3, [r7, #8]
 800d5b0:	b2db      	uxtb	r3, r3
 800d5b2:	763b      	strb	r3, [r7, #24]

    buf[5] = ( uint8_t )( dio2_mask >> 8 );
 800d5b4:	88fb      	ldrh	r3, [r7, #6]
 800d5b6:	0a1b      	lsrs	r3, r3, #8
 800d5b8:	b29b      	uxth	r3, r3
 800d5ba:	b2db      	uxtb	r3, r3
 800d5bc:	767b      	strb	r3, [r7, #25]
    buf[6] = ( uint8_t )( dio2_mask >> 0 );
 800d5be:	88fb      	ldrh	r3, [r7, #6]
 800d5c0:	b2db      	uxtb	r3, r3
 800d5c2:	76bb      	strb	r3, [r7, #26]

    buf[7] = ( uint8_t )( dio3_mask >> 8 );
 800d5c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d5c6:	0a1b      	lsrs	r3, r3, #8
 800d5c8:	b29b      	uxth	r3, r3
 800d5ca:	b2db      	uxtb	r3, r3
 800d5cc:	76fb      	strb	r3, [r7, #27]
    buf[8] = ( uint8_t )( dio3_mask >> 0 );
 800d5ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d5d0:	b2db      	uxtb	r3, r3
 800d5d2:	773b      	strb	r3, [r7, #28]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO_IRQ_PARAMS, 0, 0 );
 800d5d4:	f107 0114 	add.w	r1, r7, #20
 800d5d8:	2300      	movs	r3, #0
 800d5da:	9300      	str	r3, [sp, #0]
 800d5dc:	2300      	movs	r3, #0
 800d5de:	2209      	movs	r2, #9
 800d5e0:	68f8      	ldr	r0, [r7, #12]
 800d5e2:	f7ff fca9 	bl	800cf38 <sx126x_hal_write>
 800d5e6:	4603      	mov	r3, r0
}
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	3720      	adds	r7, #32
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}

0800d5f0 <sx126x_set_dio2_as_rf_sw_ctrl>:
    }
    return status;
}

sx126x_status_t sx126x_set_dio2_as_rf_sw_ctrl( const void* context, const bool enable )
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b086      	sub	sp, #24
 800d5f4:	af02      	add	r7, sp, #8
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	460b      	mov	r3, r1
 800d5fa:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL] = { 0 };
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_DIO2_AS_RF_SWITCH_CTRL;
 800d600:	239d      	movs	r3, #157	; 0x9d
 800d602:	733b      	strb	r3, [r7, #12]

    buf[1] = ( enable == true ) ? 1 : 0;
 800d604:	78fb      	ldrb	r3, [r7, #3]
 800d606:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL, 0, 0 );
 800d608:	f107 010c 	add.w	r1, r7, #12
 800d60c:	2300      	movs	r3, #0
 800d60e:	9300      	str	r3, [sp, #0]
 800d610:	2300      	movs	r3, #0
 800d612:	2202      	movs	r2, #2
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f7ff fc8f 	bl	800cf38 <sx126x_hal_write>
 800d61a:	4603      	mov	r3, r0
}
 800d61c:	4618      	mov	r0, r3
 800d61e:	3710      	adds	r7, #16
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}

0800d624 <sx126x_set_dio3_as_tcxo_ctrl>:

sx126x_status_t sx126x_set_dio3_as_tcxo_ctrl( const void* context, const sx126x_tcxo_ctrl_voltages_t tcxo_voltage,
                                              const uint32_t timeout )
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b088      	sub	sp, #32
 800d628:	af02      	add	r7, sp, #8
 800d62a:	60f8      	str	r0, [r7, #12]
 800d62c:	460b      	mov	r3, r1
 800d62e:	607a      	str	r2, [r7, #4]
 800d630:	72fb      	strb	r3, [r7, #11]
    uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = { 0 };
 800d632:	2300      	movs	r3, #0
 800d634:	613b      	str	r3, [r7, #16]
 800d636:	2300      	movs	r3, #0
 800d638:	753b      	strb	r3, [r7, #20]

    buf[0] = SX126X_SET_DIO3_AS_TCXO_CTRL;
 800d63a:	2397      	movs	r3, #151	; 0x97
 800d63c:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t ) tcxo_voltage;
 800d63e:	7afb      	ldrb	r3, [r7, #11]
 800d640:	747b      	strb	r3, [r7, #17]

    buf[2] = ( uint8_t )( timeout >> 16 );
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	0c1b      	lsrs	r3, r3, #16
 800d646:	b2db      	uxtb	r3, r3
 800d648:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( timeout >> 8 );
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	0a1b      	lsrs	r3, r3, #8
 800d64e:	b2db      	uxtb	r3, r3
 800d650:	74fb      	strb	r3, [r7, #19]
    buf[4] = ( uint8_t )( timeout >> 0 );
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	b2db      	uxtb	r3, r3
 800d656:	753b      	strb	r3, [r7, #20]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL, 0, 0 );
 800d658:	f107 0110 	add.w	r1, r7, #16
 800d65c:	2300      	movs	r3, #0
 800d65e:	9300      	str	r3, [sp, #0]
 800d660:	2300      	movs	r3, #0
 800d662:	2205      	movs	r2, #5
 800d664:	68f8      	ldr	r0, [r7, #12]
 800d666:	f7ff fc67 	bl	800cf38 <sx126x_hal_write>
 800d66a:	4603      	mov	r3, r0
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	3718      	adds	r7, #24
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}

0800d674 <sx126x_set_rf_freq>:
//
// RF Modulation and Packet-Related Functions
//

sx126x_status_t sx126x_set_rf_freq( const void* context, const uint32_t freq_in_hz )
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b084      	sub	sp, #16
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
 800d67c:	6039      	str	r1, [r7, #0]
    const uint32_t freq = sx126x_convert_freq_in_hz_to_pll_step( freq_in_hz );
 800d67e:	6838      	ldr	r0, [r7, #0]
 800d680:	f000 f92e 	bl	800d8e0 <sx126x_convert_freq_in_hz_to_pll_step>
 800d684:	60f8      	str	r0, [r7, #12]

    return sx126x_set_rf_freq_in_pll_steps( context, freq );
 800d686:	68f9      	ldr	r1, [r7, #12]
 800d688:	6878      	ldr	r0, [r7, #4]
 800d68a:	f000 f805 	bl	800d698 <sx126x_set_rf_freq_in_pll_steps>
 800d68e:	4603      	mov	r3, r0
}
 800d690:	4618      	mov	r0, r3
 800d692:	3710      	adds	r7, #16
 800d694:	46bd      	mov	sp, r7
 800d696:	bd80      	pop	{r7, pc}

0800d698 <sx126x_set_rf_freq_in_pll_steps>:

sx126x_status_t sx126x_set_rf_freq_in_pll_steps( const void* context, const uint32_t freq )
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b086      	sub	sp, #24
 800d69c:	af02      	add	r7, sp, #8
 800d69e:	6078      	str	r0, [r7, #4]
 800d6a0:	6039      	str	r1, [r7, #0]
    uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = { 0 };
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	60bb      	str	r3, [r7, #8]
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_RF_FREQUENCY;
 800d6aa:	2386      	movs	r3, #134	; 0x86
 800d6ac:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( freq >> 24 );
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	0e1b      	lsrs	r3, r3, #24
 800d6b2:	b2db      	uxtb	r3, r3
 800d6b4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( freq >> 16 );
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	0c1b      	lsrs	r3, r3, #16
 800d6ba:	b2db      	uxtb	r3, r3
 800d6bc:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( freq >> 8 );
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	0a1b      	lsrs	r3, r3, #8
 800d6c2:	b2db      	uxtb	r3, r3
 800d6c4:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( freq >> 0 );
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	b2db      	uxtb	r3, r3
 800d6ca:	733b      	strb	r3, [r7, #12]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RF_FREQUENCY, 0, 0 );
 800d6cc:	f107 0108 	add.w	r1, r7, #8
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	9300      	str	r3, [sp, #0]
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	2205      	movs	r2, #5
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f7ff fc2d 	bl	800cf38 <sx126x_hal_write>
 800d6de:	4603      	mov	r3, r0
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	3710      	adds	r7, #16
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}

0800d6e8 <sx126x_set_pkt_type>:

sx126x_status_t sx126x_set_pkt_type( const void* context, const sx126x_pkt_type_t pkt_type )
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b086      	sub	sp, #24
 800d6ec:	af02      	add	r7, sp, #8
 800d6ee:	6078      	str	r0, [r7, #4]
 800d6f0:	460b      	mov	r3, r1
 800d6f2:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[SX126X_SIZE_SET_PKT_TYPE] = { 0 };
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	81bb      	strh	r3, [r7, #12]

    buf[0] = SX126X_SET_PKT_TYPE;
 800d6f8:	238a      	movs	r3, #138	; 0x8a
 800d6fa:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pkt_type;
 800d6fc:	78fb      	ldrb	r3, [r7, #3]
 800d6fe:	737b      	strb	r3, [r7, #13]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_TYPE, 0, 0 );
 800d700:	f107 010c 	add.w	r1, r7, #12
 800d704:	2300      	movs	r3, #0
 800d706:	9300      	str	r3, [sp, #0]
 800d708:	2300      	movs	r3, #0
 800d70a:	2202      	movs	r2, #2
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f7ff fc13 	bl	800cf38 <sx126x_hal_write>
 800d712:	4603      	mov	r3, r0
}
 800d714:	4618      	mov	r0, r3
 800d716:	3710      	adds	r7, #16
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}

0800d71c <sx126x_set_tx_params>:

    return status;
}

sx126x_status_t sx126x_set_tx_params( const void* context, const int8_t pwr_in_dbm, const sx126x_ramp_time_t ramp_time )
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b086      	sub	sp, #24
 800d720:	af02      	add	r7, sp, #8
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	460b      	mov	r3, r1
 800d726:	70fb      	strb	r3, [r7, #3]
 800d728:	4613      	mov	r3, r2
 800d72a:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = { 0 };
 800d72c:	4b0c      	ldr	r3, [pc, #48]	; (800d760 <sx126x_set_tx_params+0x44>)
 800d72e:	881b      	ldrh	r3, [r3, #0]
 800d730:	81bb      	strh	r3, [r7, #12]
 800d732:	2300      	movs	r3, #0
 800d734:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_TX_PARAMS;
 800d736:	238e      	movs	r3, #142	; 0x8e
 800d738:	733b      	strb	r3, [r7, #12]

    buf[1] = ( uint8_t ) pwr_in_dbm;
 800d73a:	78fb      	ldrb	r3, [r7, #3]
 800d73c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t ) ramp_time;
 800d73e:	78bb      	ldrb	r3, [r7, #2]
 800d740:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_PARAMS, 0, 0 );
 800d742:	f107 010c 	add.w	r1, r7, #12
 800d746:	2300      	movs	r3, #0
 800d748:	9300      	str	r3, [sp, #0]
 800d74a:	2300      	movs	r3, #0
 800d74c:	2203      	movs	r2, #3
 800d74e:	6878      	ldr	r0, [r7, #4]
 800d750:	f7ff fbf2 	bl	800cf38 <sx126x_hal_write>
 800d754:	4603      	mov	r3, r0
}
 800d756:	4618      	mov	r0, r3
 800d758:	3710      	adds	r7, #16
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}
 800d75e:	bf00      	nop
 800d760:	08018370 	.word	0x08018370

0800d764 <sx126x_set_lora_mod_params>:
    }
    return status;
}

sx126x_status_t sx126x_set_lora_mod_params( const void* context, const sx126x_mod_params_lora_t* params )
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b086      	sub	sp, #24
 800d768:	af02      	add	r7, sp, #8
 800d76a:	6078      	str	r0, [r7, #4]
 800d76c:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 800d76e:	2303      	movs	r3, #3
 800d770:	73fb      	strb	r3, [r7, #15]

    uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = { 0 };
 800d772:	2300      	movs	r3, #0
 800d774:	60bb      	str	r3, [r7, #8]
 800d776:	2300      	movs	r3, #0
 800d778:	733b      	strb	r3, [r7, #12]

    buf[0] = SX126X_SET_MODULATION_PARAMS;
 800d77a:	238b      	movs	r3, #139	; 0x8b
 800d77c:	723b      	strb	r3, [r7, #8]

    buf[1] = ( uint8_t )( params->sf );
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	781b      	ldrb	r3, [r3, #0]
 800d782:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( params->bw );
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	785b      	ldrb	r3, [r3, #1]
 800d788:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( params->cr );
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	789b      	ldrb	r3, [r3, #2]
 800d78e:	72fb      	strb	r3, [r7, #11]
    buf[4] = params->ldro & 0x01;
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	78db      	ldrb	r3, [r3, #3]
 800d794:	f003 0301 	and.w	r3, r3, #1
 800d798:	b2db      	uxtb	r3, r3
 800d79a:	733b      	strb	r3, [r7, #12]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_LORA, 0, 0 );
 800d79c:	f107 0108 	add.w	r1, r7, #8
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	9300      	str	r3, [sp, #0]
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	2205      	movs	r2, #5
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f7ff fbc5 	bl	800cf38 <sx126x_hal_write>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	73fb      	strb	r3, [r7, #15]
        status = sx126x_tx_modulation_workaround( context, SX126X_PKT_TYPE_LORA, params->bw );
        // WORKAROUND END
    }
    */

    return status;
 800d7b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	3710      	adds	r7, #16
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}

0800d7bc <sx126x_set_lora_pkt_params>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_GFSK, 0, 0 );
}

sx126x_status_t sx126x_set_lora_pkt_params( const void* context, const sx126x_pkt_params_lora_t* params )
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b088      	sub	sp, #32
 800d7c0:	af02      	add	r7, sp, #8
 800d7c2:	6078      	str	r0, [r7, #4]
 800d7c4:	6039      	str	r1, [r7, #0]
    sx126x_status_t status = SX126X_STATUS_ERROR;
 800d7c6:	2303      	movs	r3, #3
 800d7c8:	75fb      	strb	r3, [r7, #23]

    uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = { 0 };
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	613b      	str	r3, [r7, #16]
 800d7ce:	f107 0314 	add.w	r3, r7, #20
 800d7d2:	2100      	movs	r1, #0
 800d7d4:	460a      	mov	r2, r1
 800d7d6:	801a      	strh	r2, [r3, #0]
 800d7d8:	460a      	mov	r2, r1
 800d7da:	709a      	strb	r2, [r3, #2]

    buf[0] = SX126X_SET_PKT_PARAMS;
 800d7dc:	238c      	movs	r3, #140	; 0x8c
 800d7de:	743b      	strb	r3, [r7, #16]

    buf[1] = ( uint8_t )( params->preamble_len_in_symb >> 8 );
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	881b      	ldrh	r3, [r3, #0]
 800d7e4:	0a1b      	lsrs	r3, r3, #8
 800d7e6:	b29b      	uxth	r3, r3
 800d7e8:	b2db      	uxtb	r3, r3
 800d7ea:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( params->preamble_len_in_symb >> 0 );
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	881b      	ldrh	r3, [r3, #0]
 800d7f0:	b2db      	uxtb	r3, r3
 800d7f2:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( params->header_type );
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	789b      	ldrb	r3, [r3, #2]
 800d7f8:	74fb      	strb	r3, [r7, #19]
    buf[4] = params->pld_len_in_bytes;
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	78db      	ldrb	r3, [r3, #3]
 800d7fe:	753b      	strb	r3, [r7, #20]
    buf[5] = ( uint8_t )( params->crc_is_on ? 1 : 0 );
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	791b      	ldrb	r3, [r3, #4]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d001      	beq.n	800d80c <sx126x_set_lora_pkt_params+0x50>
 800d808:	2301      	movs	r3, #1
 800d80a:	e000      	b.n	800d80e <sx126x_set_lora_pkt_params+0x52>
 800d80c:	2300      	movs	r3, #0
 800d80e:	757b      	strb	r3, [r7, #21]
    buf[6] = ( uint8_t )( params->invert_iq_is_on ? 1 : 0 );
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	795b      	ldrb	r3, [r3, #5]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d001      	beq.n	800d81c <sx126x_set_lora_pkt_params+0x60>
 800d818:	2301      	movs	r3, #1
 800d81a:	e000      	b.n	800d81e <sx126x_set_lora_pkt_params+0x62>
 800d81c:	2300      	movs	r3, #0
 800d81e:	75bb      	strb	r3, [r7, #22]

    status = ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_LORA, 0, 0 );
 800d820:	f107 0110 	add.w	r1, r7, #16
 800d824:	2300      	movs	r3, #0
 800d826:	9300      	str	r3, [sp, #0]
 800d828:	2300      	movs	r3, #0
 800d82a:	2207      	movs	r2, #7
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f7ff fb83 	bl	800cf38 <sx126x_hal_write>
 800d832:	4603      	mov	r3, r0
 800d834:	75fb      	strb	r3, [r7, #23]

    // WORKAROUND - Optimizing the Inverted IQ Operation, see datasheet DS_SX1261-2_V1.2 §15.4
    if( status == SX126X_STATUS_OK )
 800d836:	7dfb      	ldrb	r3, [r7, #23]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d127      	bne.n	800d88c <sx126x_set_lora_pkt_params+0xd0>
    {
        uint8_t reg_value = 0;
 800d83c:	2300      	movs	r3, #0
 800d83e:	73fb      	strb	r3, [r7, #15]

        status = sx126x_read_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 800d840:	f107 020f 	add.w	r2, r7, #15
 800d844:	2301      	movs	r3, #1
 800d846:	f240 7136 	movw	r1, #1846	; 0x736
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f7ff fe64 	bl	800d518 <sx126x_read_register>
 800d850:	4603      	mov	r3, r0
 800d852:	75fb      	strb	r3, [r7, #23]
        if( status == SX126X_STATUS_OK )
 800d854:	7dfb      	ldrb	r3, [r7, #23]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d118      	bne.n	800d88c <sx126x_set_lora_pkt_params+0xd0>
        {
            if( params->invert_iq_is_on == true )
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	795b      	ldrb	r3, [r3, #5]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d005      	beq.n	800d86e <sx126x_set_lora_pkt_params+0xb2>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 when using inverted IQ polarity
 800d862:	7bfb      	ldrb	r3, [r7, #15]
 800d864:	f023 0304 	bic.w	r3, r3, #4
 800d868:	b2db      	uxtb	r3, r3
 800d86a:	73fb      	strb	r3, [r7, #15]
 800d86c:	e004      	b.n	800d878 <sx126x_set_lora_pkt_params+0xbc>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 when using standard IQ polarity
 800d86e:	7bfb      	ldrb	r3, [r7, #15]
 800d870:	f043 0304 	orr.w	r3, r3, #4
 800d874:	b2db      	uxtb	r3, r3
 800d876:	73fb      	strb	r3, [r7, #15]
            }
            status = sx126x_write_register( context, SX126X_REG_IRQ_POLARITY, &reg_value, 1 );
 800d878:	f107 020f 	add.w	r2, r7, #15
 800d87c:	2301      	movs	r3, #1
 800d87e:	f240 7136 	movw	r1, #1846	; 0x736
 800d882:	6878      	ldr	r0, [r7, #4]
 800d884:	f7ff fe1e 	bl	800d4c4 <sx126x_write_register>
 800d888:	4603      	mov	r3, r0
 800d88a:	75fb      	strb	r3, [r7, #23]
        }
    }
    // WORKAROUND END

    return status;
 800d88c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d88e:	4618      	mov	r0, r3
 800d890:	3718      	adds	r7, #24
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}
	...

0800d898 <sx126x_set_buffer_base_address>:
    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_CAD_PARAMS, 0, 0 );
}

sx126x_status_t sx126x_set_buffer_base_address( const void* context, const uint8_t tx_base_address,
                                                const uint8_t rx_base_address )
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b086      	sub	sp, #24
 800d89c:	af02      	add	r7, sp, #8
 800d89e:	6078      	str	r0, [r7, #4]
 800d8a0:	460b      	mov	r3, r1
 800d8a2:	70fb      	strb	r3, [r7, #3]
 800d8a4:	4613      	mov	r3, r2
 800d8a6:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[SX126X_SIZE_SET_BUFFER_BASE_ADDRESS] = { 0 };
 800d8a8:	4b0c      	ldr	r3, [pc, #48]	; (800d8dc <sx126x_set_buffer_base_address+0x44>)
 800d8aa:	881b      	ldrh	r3, [r3, #0]
 800d8ac:	81bb      	strh	r3, [r7, #12]
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	73bb      	strb	r3, [r7, #14]

    buf[0] = SX126X_SET_BUFFER_BASE_ADDRESS;
 800d8b2:	238f      	movs	r3, #143	; 0x8f
 800d8b4:	733b      	strb	r3, [r7, #12]

    buf[1] = tx_base_address;
 800d8b6:	78fb      	ldrb	r3, [r7, #3]
 800d8b8:	737b      	strb	r3, [r7, #13]
    buf[2] = rx_base_address;
 800d8ba:	78bb      	ldrb	r3, [r7, #2]
 800d8bc:	73bb      	strb	r3, [r7, #14]

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_BUFFER_BASE_ADDRESS, 0, 0 );
 800d8be:	f107 010c 	add.w	r1, r7, #12
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	9300      	str	r3, [sp, #0]
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	2203      	movs	r2, #3
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f7ff fb34 	bl	800cf38 <sx126x_hal_write>
 800d8d0:	4603      	mov	r3, r0
}
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	3710      	adds	r7, #16
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}
 800d8da:	bf00      	nop
 800d8dc:	08018370 	.word	0x08018370

0800d8e0 <sx126x_convert_freq_in_hz_to_pll_step>:

    return status;
}

uint32_t sx126x_convert_freq_in_hz_to_pll_step( uint32_t freq_in_hz )
{
 800d8e0:	b480      	push	{r7}
 800d8e2:	b085      	sub	sp, #20
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
    uint32_t steps_int;
    uint32_t steps_frac;

    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    steps_int  = freq_in_hz / SX126X_PLL_STEP_SCALED;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	4a0f      	ldr	r2, [pc, #60]	; (800d928 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800d8ec:	fba2 2303 	umull	r2, r3, r2, r3
 800d8f0:	0b1b      	lsrs	r3, r3, #12
 800d8f2:	60fb      	str	r3, [r7, #12]
    steps_frac = freq_in_hz - ( steps_int * SX126X_PLL_STEP_SCALED );
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	f643 5209 	movw	r2, #15625	; 0x3d09
 800d8fa:	fb02 f303 	mul.w	r3, r2, r3
 800d8fe:	687a      	ldr	r2, [r7, #4]
 800d900:	1ad3      	subs	r3, r2, r3
 800d902:	60bb      	str	r3, [r7, #8]

    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	039a      	lsls	r2, r3, #14
           ( ( ( steps_frac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	039b      	lsls	r3, r3, #14
 800d90c:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 800d910:	3304      	adds	r3, #4
 800d912:	4905      	ldr	r1, [pc, #20]	; (800d928 <sx126x_convert_freq_in_hz_to_pll_step+0x48>)
 800d914:	fba1 1303 	umull	r1, r3, r1, r3
 800d918:	0b1b      	lsrs	r3, r3, #12
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 800d91a:	4413      	add	r3, r2
             SX126X_PLL_STEP_SCALED );
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	3714      	adds	r7, #20
 800d920:	46bd      	mov	sp, r7
 800d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d926:	4770      	bx	lr
 800d928:	431bde83 	.word	0x431bde83

0800d92c <__NVIC_SetPriority>:
{
 800d92c:	b480      	push	{r7}
 800d92e:	b083      	sub	sp, #12
 800d930:	af00      	add	r7, sp, #0
 800d932:	4603      	mov	r3, r0
 800d934:	6039      	str	r1, [r7, #0]
 800d936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	db0a      	blt.n	800d956 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	b2da      	uxtb	r2, r3
 800d944:	490c      	ldr	r1, [pc, #48]	; (800d978 <__NVIC_SetPriority+0x4c>)
 800d946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d94a:	0112      	lsls	r2, r2, #4
 800d94c:	b2d2      	uxtb	r2, r2
 800d94e:	440b      	add	r3, r1
 800d950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d954:	e00a      	b.n	800d96c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	b2da      	uxtb	r2, r3
 800d95a:	4908      	ldr	r1, [pc, #32]	; (800d97c <__NVIC_SetPriority+0x50>)
 800d95c:	79fb      	ldrb	r3, [r7, #7]
 800d95e:	f003 030f 	and.w	r3, r3, #15
 800d962:	3b04      	subs	r3, #4
 800d964:	0112      	lsls	r2, r2, #4
 800d966:	b2d2      	uxtb	r2, r2
 800d968:	440b      	add	r3, r1
 800d96a:	761a      	strb	r2, [r3, #24]
}
 800d96c:	bf00      	nop
 800d96e:	370c      	adds	r7, #12
 800d970:	46bd      	mov	sp, r7
 800d972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d976:	4770      	bx	lr
 800d978:	e000e100 	.word	0xe000e100
 800d97c:	e000ed00 	.word	0xe000ed00

0800d980 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d980:	b580      	push	{r7, lr}
 800d982:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d984:	4b05      	ldr	r3, [pc, #20]	; (800d99c <SysTick_Handler+0x1c>)
 800d986:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d988:	f001 fdba 	bl	800f500 <xTaskGetSchedulerState>
 800d98c:	4603      	mov	r3, r0
 800d98e:	2b01      	cmp	r3, #1
 800d990:	d001      	beq.n	800d996 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d992:	f002 fba1 	bl	80100d8 <xPortSysTickHandler>
  }
}
 800d996:	bf00      	nop
 800d998:	bd80      	pop	{r7, pc}
 800d99a:	bf00      	nop
 800d99c:	e000e010 	.word	0xe000e010

0800d9a0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d9a4:	2100      	movs	r1, #0
 800d9a6:	f06f 0004 	mvn.w	r0, #4
 800d9aa:	f7ff ffbf 	bl	800d92c <__NVIC_SetPriority>
#endif
}
 800d9ae:	bf00      	nop
 800d9b0:	bd80      	pop	{r7, pc}
	...

0800d9b4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d9b4:	b480      	push	{r7}
 800d9b6:	b083      	sub	sp, #12
 800d9b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d9ba:	f3ef 8305 	mrs	r3, IPSR
 800d9be:	603b      	str	r3, [r7, #0]
  return(result);
 800d9c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d003      	beq.n	800d9ce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d9c6:	f06f 0305 	mvn.w	r3, #5
 800d9ca:	607b      	str	r3, [r7, #4]
 800d9cc:	e00c      	b.n	800d9e8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d9ce:	4b0a      	ldr	r3, [pc, #40]	; (800d9f8 <osKernelInitialize+0x44>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d105      	bne.n	800d9e2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d9d6:	4b08      	ldr	r3, [pc, #32]	; (800d9f8 <osKernelInitialize+0x44>)
 800d9d8:	2201      	movs	r2, #1
 800d9da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d9dc:	2300      	movs	r3, #0
 800d9de:	607b      	str	r3, [r7, #4]
 800d9e0:	e002      	b.n	800d9e8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d9e2:	f04f 33ff 	mov.w	r3, #4294967295
 800d9e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d9e8:	687b      	ldr	r3, [r7, #4]
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	370c      	adds	r7, #12
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f4:	4770      	bx	lr
 800d9f6:	bf00      	nop
 800d9f8:	2000058c 	.word	0x2000058c

0800d9fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b082      	sub	sp, #8
 800da00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da02:	f3ef 8305 	mrs	r3, IPSR
 800da06:	603b      	str	r3, [r7, #0]
  return(result);
 800da08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d003      	beq.n	800da16 <osKernelStart+0x1a>
    stat = osErrorISR;
 800da0e:	f06f 0305 	mvn.w	r3, #5
 800da12:	607b      	str	r3, [r7, #4]
 800da14:	e010      	b.n	800da38 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800da16:	4b0b      	ldr	r3, [pc, #44]	; (800da44 <osKernelStart+0x48>)
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	2b01      	cmp	r3, #1
 800da1c:	d109      	bne.n	800da32 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800da1e:	f7ff ffbf 	bl	800d9a0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800da22:	4b08      	ldr	r3, [pc, #32]	; (800da44 <osKernelStart+0x48>)
 800da24:	2202      	movs	r2, #2
 800da26:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800da28:	f001 f8fe 	bl	800ec28 <vTaskStartScheduler>
      stat = osOK;
 800da2c:	2300      	movs	r3, #0
 800da2e:	607b      	str	r3, [r7, #4]
 800da30:	e002      	b.n	800da38 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800da32:	f04f 33ff 	mov.w	r3, #4294967295
 800da36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800da38:	687b      	ldr	r3, [r7, #4]
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	3708      	adds	r7, #8
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}
 800da42:	bf00      	nop
 800da44:	2000058c 	.word	0x2000058c

0800da48 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800da48:	b580      	push	{r7, lr}
 800da4a:	b08e      	sub	sp, #56	; 0x38
 800da4c:	af04      	add	r7, sp, #16
 800da4e:	60f8      	str	r0, [r7, #12]
 800da50:	60b9      	str	r1, [r7, #8]
 800da52:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800da54:	2300      	movs	r3, #0
 800da56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da58:	f3ef 8305 	mrs	r3, IPSR
 800da5c:	617b      	str	r3, [r7, #20]
  return(result);
 800da5e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800da60:	2b00      	cmp	r3, #0
 800da62:	d17e      	bne.n	800db62 <osThreadNew+0x11a>
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d07b      	beq.n	800db62 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800da6a:	2380      	movs	r3, #128	; 0x80
 800da6c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800da6e:	2318      	movs	r3, #24
 800da70:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800da72:	2300      	movs	r3, #0
 800da74:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800da76:	f04f 33ff 	mov.w	r3, #4294967295
 800da7a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d045      	beq.n	800db0e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d002      	beq.n	800da90 <osThreadNew+0x48>
        name = attr->name;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	699b      	ldr	r3, [r3, #24]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d002      	beq.n	800da9e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	699b      	ldr	r3, [r3, #24]
 800da9c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800da9e:	69fb      	ldr	r3, [r7, #28]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d008      	beq.n	800dab6 <osThreadNew+0x6e>
 800daa4:	69fb      	ldr	r3, [r7, #28]
 800daa6:	2b38      	cmp	r3, #56	; 0x38
 800daa8:	d805      	bhi.n	800dab6 <osThreadNew+0x6e>
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	685b      	ldr	r3, [r3, #4]
 800daae:	f003 0301 	and.w	r3, r3, #1
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d001      	beq.n	800daba <osThreadNew+0x72>
        return (NULL);
 800dab6:	2300      	movs	r3, #0
 800dab8:	e054      	b.n	800db64 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	695b      	ldr	r3, [r3, #20]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d003      	beq.n	800daca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	695b      	ldr	r3, [r3, #20]
 800dac6:	089b      	lsrs	r3, r3, #2
 800dac8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	689b      	ldr	r3, [r3, #8]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d00e      	beq.n	800daf0 <osThreadNew+0xa8>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	68db      	ldr	r3, [r3, #12]
 800dad6:	2bbb      	cmp	r3, #187	; 0xbb
 800dad8:	d90a      	bls.n	800daf0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d006      	beq.n	800daf0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	695b      	ldr	r3, [r3, #20]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d002      	beq.n	800daf0 <osThreadNew+0xa8>
        mem = 1;
 800daea:	2301      	movs	r3, #1
 800daec:	61bb      	str	r3, [r7, #24]
 800daee:	e010      	b.n	800db12 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	689b      	ldr	r3, [r3, #8]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d10c      	bne.n	800db12 <osThreadNew+0xca>
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	68db      	ldr	r3, [r3, #12]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d108      	bne.n	800db12 <osThreadNew+0xca>
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	691b      	ldr	r3, [r3, #16]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d104      	bne.n	800db12 <osThreadNew+0xca>
          mem = 0;
 800db08:	2300      	movs	r3, #0
 800db0a:	61bb      	str	r3, [r7, #24]
 800db0c:	e001      	b.n	800db12 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800db0e:	2300      	movs	r3, #0
 800db10:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800db12:	69bb      	ldr	r3, [r7, #24]
 800db14:	2b01      	cmp	r3, #1
 800db16:	d110      	bne.n	800db3a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800db1c:	687a      	ldr	r2, [r7, #4]
 800db1e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800db20:	9202      	str	r2, [sp, #8]
 800db22:	9301      	str	r3, [sp, #4]
 800db24:	69fb      	ldr	r3, [r7, #28]
 800db26:	9300      	str	r3, [sp, #0]
 800db28:	68bb      	ldr	r3, [r7, #8]
 800db2a:	6a3a      	ldr	r2, [r7, #32]
 800db2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800db2e:	68f8      	ldr	r0, [r7, #12]
 800db30:	f000 fe1c 	bl	800e76c <xTaskCreateStatic>
 800db34:	4603      	mov	r3, r0
 800db36:	613b      	str	r3, [r7, #16]
 800db38:	e013      	b.n	800db62 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800db3a:	69bb      	ldr	r3, [r7, #24]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d110      	bne.n	800db62 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800db40:	6a3b      	ldr	r3, [r7, #32]
 800db42:	b29a      	uxth	r2, r3
 800db44:	f107 0310 	add.w	r3, r7, #16
 800db48:	9301      	str	r3, [sp, #4]
 800db4a:	69fb      	ldr	r3, [r7, #28]
 800db4c:	9300      	str	r3, [sp, #0]
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800db52:	68f8      	ldr	r0, [r7, #12]
 800db54:	f000 fe67 	bl	800e826 <xTaskCreate>
 800db58:	4603      	mov	r3, r0
 800db5a:	2b01      	cmp	r3, #1
 800db5c:	d001      	beq.n	800db62 <osThreadNew+0x11a>
            hTask = NULL;
 800db5e:	2300      	movs	r3, #0
 800db60:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800db62:	693b      	ldr	r3, [r7, #16]
}
 800db64:	4618      	mov	r0, r3
 800db66:	3728      	adds	r7, #40	; 0x28
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}

0800db6c <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b082      	sub	sp, #8
 800db70:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 800db72:	f001 fcb5 	bl	800f4e0 <xTaskGetCurrentTaskHandle>
 800db76:	6078      	str	r0, [r7, #4]

  return (id);
 800db78:	687b      	ldr	r3, [r7, #4]
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3708      	adds	r7, #8
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}

0800db82 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 800db82:	b580      	push	{r7, lr}
 800db84:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800db86:	2000      	movs	r0, #0
 800db88:	f000 ffa8 	bl	800eadc <vTaskDelete>
#endif
  for (;;);
 800db8c:	e7fe      	b.n	800db8c <osThreadExit+0xa>

0800db8e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800db8e:	b580      	push	{r7, lr}
 800db90:	b084      	sub	sp, #16
 800db92:	af00      	add	r7, sp, #0
 800db94:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db96:	f3ef 8305 	mrs	r3, IPSR
 800db9a:	60bb      	str	r3, [r7, #8]
  return(result);
 800db9c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d003      	beq.n	800dbaa <osDelay+0x1c>
    stat = osErrorISR;
 800dba2:	f06f 0305 	mvn.w	r3, #5
 800dba6:	60fb      	str	r3, [r7, #12]
 800dba8:	e007      	b.n	800dbba <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800dbaa:	2300      	movs	r3, #0
 800dbac:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d002      	beq.n	800dbba <osDelay+0x2c>
      vTaskDelay(ticks);
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f001 f803 	bl	800ebc0 <vTaskDelay>
    }
  }

  return (stat);
 800dbba:	68fb      	ldr	r3, [r7, #12]
}
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	3710      	adds	r7, #16
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}

0800dbc4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800dbc4:	b480      	push	{r7}
 800dbc6:	b085      	sub	sp, #20
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	60f8      	str	r0, [r7, #12]
 800dbcc:	60b9      	str	r1, [r7, #8]
 800dbce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	4a07      	ldr	r2, [pc, #28]	; (800dbf0 <vApplicationGetIdleTaskMemory+0x2c>)
 800dbd4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	4a06      	ldr	r2, [pc, #24]	; (800dbf4 <vApplicationGetIdleTaskMemory+0x30>)
 800dbda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2280      	movs	r2, #128	; 0x80
 800dbe0:	601a      	str	r2, [r3, #0]
}
 800dbe2:	bf00      	nop
 800dbe4:	3714      	adds	r7, #20
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbec:	4770      	bx	lr
 800dbee:	bf00      	nop
 800dbf0:	20000590 	.word	0x20000590
 800dbf4:	2000064c 	.word	0x2000064c

0800dbf8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800dbf8:	b480      	push	{r7}
 800dbfa:	b085      	sub	sp, #20
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	60f8      	str	r0, [r7, #12]
 800dc00:	60b9      	str	r1, [r7, #8]
 800dc02:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	4a07      	ldr	r2, [pc, #28]	; (800dc24 <vApplicationGetTimerTaskMemory+0x2c>)
 800dc08:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	4a06      	ldr	r2, [pc, #24]	; (800dc28 <vApplicationGetTimerTaskMemory+0x30>)
 800dc0e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dc16:	601a      	str	r2, [r3, #0]
}
 800dc18:	bf00      	nop
 800dc1a:	3714      	adds	r7, #20
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc22:	4770      	bx	lr
 800dc24:	2000084c 	.word	0x2000084c
 800dc28:	20000908 	.word	0x20000908

0800dc2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b083      	sub	sp, #12
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f103 0208 	add.w	r2, r3, #8
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	f04f 32ff 	mov.w	r2, #4294967295
 800dc44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	f103 0208 	add.w	r2, r3, #8
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f103 0208 	add.w	r2, r3, #8
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dc60:	bf00      	nop
 800dc62:	370c      	adds	r7, #12
 800dc64:	46bd      	mov	sp, r7
 800dc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6a:	4770      	bx	lr

0800dc6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800dc6c:	b480      	push	{r7}
 800dc6e:	b083      	sub	sp, #12
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2200      	movs	r2, #0
 800dc78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dc7a:	bf00      	nop
 800dc7c:	370c      	adds	r7, #12
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc84:	4770      	bx	lr

0800dc86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dc86:	b480      	push	{r7}
 800dc88:	b085      	sub	sp, #20
 800dc8a:	af00      	add	r7, sp, #0
 800dc8c:	6078      	str	r0, [r7, #4]
 800dc8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	685b      	ldr	r3, [r3, #4]
 800dc94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	68fa      	ldr	r2, [r7, #12]
 800dc9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	689a      	ldr	r2, [r3, #8]
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	689b      	ldr	r3, [r3, #8]
 800dca8:	683a      	ldr	r2, [r7, #0]
 800dcaa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	683a      	ldr	r2, [r7, #0]
 800dcb0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	687a      	ldr	r2, [r7, #4]
 800dcb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	1c5a      	adds	r2, r3, #1
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	601a      	str	r2, [r3, #0]
}
 800dcc2:	bf00      	nop
 800dcc4:	3714      	adds	r7, #20
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dccc:	4770      	bx	lr

0800dcce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dcce:	b480      	push	{r7}
 800dcd0:	b085      	sub	sp, #20
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	6078      	str	r0, [r7, #4]
 800dcd6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dcde:	68bb      	ldr	r3, [r7, #8]
 800dce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dce4:	d103      	bne.n	800dcee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	691b      	ldr	r3, [r3, #16]
 800dcea:	60fb      	str	r3, [r7, #12]
 800dcec:	e00c      	b.n	800dd08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	3308      	adds	r3, #8
 800dcf2:	60fb      	str	r3, [r7, #12]
 800dcf4:	e002      	b.n	800dcfc <vListInsert+0x2e>
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	685b      	ldr	r3, [r3, #4]
 800dcfa:	60fb      	str	r3, [r7, #12]
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	685b      	ldr	r3, [r3, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	68ba      	ldr	r2, [r7, #8]
 800dd04:	429a      	cmp	r2, r3
 800dd06:	d2f6      	bcs.n	800dcf6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	685a      	ldr	r2, [r3, #4]
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	685b      	ldr	r3, [r3, #4]
 800dd14:	683a      	ldr	r2, [r7, #0]
 800dd16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	68fa      	ldr	r2, [r7, #12]
 800dd1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	683a      	ldr	r2, [r7, #0]
 800dd22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	687a      	ldr	r2, [r7, #4]
 800dd28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	1c5a      	adds	r2, r3, #1
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	601a      	str	r2, [r3, #0]
}
 800dd34:	bf00      	nop
 800dd36:	3714      	adds	r7, #20
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3e:	4770      	bx	lr

0800dd40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dd40:	b480      	push	{r7}
 800dd42:	b085      	sub	sp, #20
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	691b      	ldr	r3, [r3, #16]
 800dd4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	685b      	ldr	r3, [r3, #4]
 800dd52:	687a      	ldr	r2, [r7, #4]
 800dd54:	6892      	ldr	r2, [r2, #8]
 800dd56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	689b      	ldr	r3, [r3, #8]
 800dd5c:	687a      	ldr	r2, [r7, #4]
 800dd5e:	6852      	ldr	r2, [r2, #4]
 800dd60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	685b      	ldr	r3, [r3, #4]
 800dd66:	687a      	ldr	r2, [r7, #4]
 800dd68:	429a      	cmp	r2, r3
 800dd6a:	d103      	bne.n	800dd74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	689a      	ldr	r2, [r3, #8]
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2200      	movs	r2, #0
 800dd78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	1e5a      	subs	r2, r3, #1
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	681b      	ldr	r3, [r3, #0]
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	3714      	adds	r7, #20
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd92:	4770      	bx	lr

0800dd94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b084      	sub	sp, #16
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
 800dd9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d10a      	bne.n	800ddbe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800dda8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddac:	f383 8811 	msr	BASEPRI, r3
 800ddb0:	f3bf 8f6f 	isb	sy
 800ddb4:	f3bf 8f4f 	dsb	sy
 800ddb8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ddba:	bf00      	nop
 800ddbc:	e7fe      	b.n	800ddbc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ddbe:	f002 f8f9 	bl	800ffb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	681a      	ldr	r2, [r3, #0]
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddca:	68f9      	ldr	r1, [r7, #12]
 800ddcc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ddce:	fb01 f303 	mul.w	r3, r1, r3
 800ddd2:	441a      	add	r2, r3
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	2200      	movs	r2, #0
 800dddc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	681a      	ldr	r2, [r3, #0]
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	681a      	ldr	r2, [r3, #0]
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddee:	3b01      	subs	r3, #1
 800ddf0:	68f9      	ldr	r1, [r7, #12]
 800ddf2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ddf4:	fb01 f303 	mul.w	r3, r1, r3
 800ddf8:	441a      	add	r2, r3
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	22ff      	movs	r2, #255	; 0xff
 800de02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	22ff      	movs	r2, #255	; 0xff
 800de0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800de0e:	683b      	ldr	r3, [r7, #0]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d114      	bne.n	800de3e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	691b      	ldr	r3, [r3, #16]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d01a      	beq.n	800de52 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	3310      	adds	r3, #16
 800de20:	4618      	mov	r0, r3
 800de22:	f001 f99b 	bl	800f15c <xTaskRemoveFromEventList>
 800de26:	4603      	mov	r3, r0
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d012      	beq.n	800de52 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800de2c:	4b0c      	ldr	r3, [pc, #48]	; (800de60 <xQueueGenericReset+0xcc>)
 800de2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de32:	601a      	str	r2, [r3, #0]
 800de34:	f3bf 8f4f 	dsb	sy
 800de38:	f3bf 8f6f 	isb	sy
 800de3c:	e009      	b.n	800de52 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	3310      	adds	r3, #16
 800de42:	4618      	mov	r0, r3
 800de44:	f7ff fef2 	bl	800dc2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	3324      	adds	r3, #36	; 0x24
 800de4c:	4618      	mov	r0, r3
 800de4e:	f7ff feed 	bl	800dc2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800de52:	f002 f8df 	bl	8010014 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800de56:	2301      	movs	r3, #1
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3710      	adds	r7, #16
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}
 800de60:	e000ed04 	.word	0xe000ed04

0800de64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800de64:	b580      	push	{r7, lr}
 800de66:	b08e      	sub	sp, #56	; 0x38
 800de68:	af02      	add	r7, sp, #8
 800de6a:	60f8      	str	r0, [r7, #12]
 800de6c:	60b9      	str	r1, [r7, #8]
 800de6e:	607a      	str	r2, [r7, #4]
 800de70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d10a      	bne.n	800de8e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800de78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de7c:	f383 8811 	msr	BASEPRI, r3
 800de80:	f3bf 8f6f 	isb	sy
 800de84:	f3bf 8f4f 	dsb	sy
 800de88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800de8a:	bf00      	nop
 800de8c:	e7fe      	b.n	800de8c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d10a      	bne.n	800deaa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800de94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de98:	f383 8811 	msr	BASEPRI, r3
 800de9c:	f3bf 8f6f 	isb	sy
 800dea0:	f3bf 8f4f 	dsb	sy
 800dea4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dea6:	bf00      	nop
 800dea8:	e7fe      	b.n	800dea8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d002      	beq.n	800deb6 <xQueueGenericCreateStatic+0x52>
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d001      	beq.n	800deba <xQueueGenericCreateStatic+0x56>
 800deb6:	2301      	movs	r3, #1
 800deb8:	e000      	b.n	800debc <xQueueGenericCreateStatic+0x58>
 800deba:	2300      	movs	r3, #0
 800debc:	2b00      	cmp	r3, #0
 800debe:	d10a      	bne.n	800ded6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800dec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dec4:	f383 8811 	msr	BASEPRI, r3
 800dec8:	f3bf 8f6f 	isb	sy
 800decc:	f3bf 8f4f 	dsb	sy
 800ded0:	623b      	str	r3, [r7, #32]
}
 800ded2:	bf00      	nop
 800ded4:	e7fe      	b.n	800ded4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d102      	bne.n	800dee2 <xQueueGenericCreateStatic+0x7e>
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d101      	bne.n	800dee6 <xQueueGenericCreateStatic+0x82>
 800dee2:	2301      	movs	r3, #1
 800dee4:	e000      	b.n	800dee8 <xQueueGenericCreateStatic+0x84>
 800dee6:	2300      	movs	r3, #0
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d10a      	bne.n	800df02 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800deec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800def0:	f383 8811 	msr	BASEPRI, r3
 800def4:	f3bf 8f6f 	isb	sy
 800def8:	f3bf 8f4f 	dsb	sy
 800defc:	61fb      	str	r3, [r7, #28]
}
 800defe:	bf00      	nop
 800df00:	e7fe      	b.n	800df00 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800df02:	2350      	movs	r3, #80	; 0x50
 800df04:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800df06:	697b      	ldr	r3, [r7, #20]
 800df08:	2b50      	cmp	r3, #80	; 0x50
 800df0a:	d00a      	beq.n	800df22 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800df0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df10:	f383 8811 	msr	BASEPRI, r3
 800df14:	f3bf 8f6f 	isb	sy
 800df18:	f3bf 8f4f 	dsb	sy
 800df1c:	61bb      	str	r3, [r7, #24]
}
 800df1e:	bf00      	nop
 800df20:	e7fe      	b.n	800df20 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800df22:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800df28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d00d      	beq.n	800df4a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800df2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df30:	2201      	movs	r2, #1
 800df32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800df36:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800df3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df3c:	9300      	str	r3, [sp, #0]
 800df3e:	4613      	mov	r3, r2
 800df40:	687a      	ldr	r2, [r7, #4]
 800df42:	68b9      	ldr	r1, [r7, #8]
 800df44:	68f8      	ldr	r0, [r7, #12]
 800df46:	f000 f805 	bl	800df54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800df4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800df4c:	4618      	mov	r0, r3
 800df4e:	3730      	adds	r7, #48	; 0x30
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}

0800df54 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b084      	sub	sp, #16
 800df58:	af00      	add	r7, sp, #0
 800df5a:	60f8      	str	r0, [r7, #12]
 800df5c:	60b9      	str	r1, [r7, #8]
 800df5e:	607a      	str	r2, [r7, #4]
 800df60:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d103      	bne.n	800df70 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800df68:	69bb      	ldr	r3, [r7, #24]
 800df6a:	69ba      	ldr	r2, [r7, #24]
 800df6c:	601a      	str	r2, [r3, #0]
 800df6e:	e002      	b.n	800df76 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800df70:	69bb      	ldr	r3, [r7, #24]
 800df72:	687a      	ldr	r2, [r7, #4]
 800df74:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800df76:	69bb      	ldr	r3, [r7, #24]
 800df78:	68fa      	ldr	r2, [r7, #12]
 800df7a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800df7c:	69bb      	ldr	r3, [r7, #24]
 800df7e:	68ba      	ldr	r2, [r7, #8]
 800df80:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800df82:	2101      	movs	r1, #1
 800df84:	69b8      	ldr	r0, [r7, #24]
 800df86:	f7ff ff05 	bl	800dd94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800df8a:	69bb      	ldr	r3, [r7, #24]
 800df8c:	78fa      	ldrb	r2, [r7, #3]
 800df8e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800df92:	bf00      	nop
 800df94:	3710      	adds	r7, #16
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}
	...

0800df9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b08e      	sub	sp, #56	; 0x38
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	60f8      	str	r0, [r7, #12]
 800dfa4:	60b9      	str	r1, [r7, #8]
 800dfa6:	607a      	str	r2, [r7, #4]
 800dfa8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800dfaa:	2300      	movs	r3, #0
 800dfac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d10a      	bne.n	800dfce <xQueueGenericSend+0x32>
	__asm volatile
 800dfb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfbc:	f383 8811 	msr	BASEPRI, r3
 800dfc0:	f3bf 8f6f 	isb	sy
 800dfc4:	f3bf 8f4f 	dsb	sy
 800dfc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800dfca:	bf00      	nop
 800dfcc:	e7fe      	b.n	800dfcc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d103      	bne.n	800dfdc <xQueueGenericSend+0x40>
 800dfd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d101      	bne.n	800dfe0 <xQueueGenericSend+0x44>
 800dfdc:	2301      	movs	r3, #1
 800dfde:	e000      	b.n	800dfe2 <xQueueGenericSend+0x46>
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d10a      	bne.n	800dffc <xQueueGenericSend+0x60>
	__asm volatile
 800dfe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfea:	f383 8811 	msr	BASEPRI, r3
 800dfee:	f3bf 8f6f 	isb	sy
 800dff2:	f3bf 8f4f 	dsb	sy
 800dff6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dff8:	bf00      	nop
 800dffa:	e7fe      	b.n	800dffa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	2b02      	cmp	r3, #2
 800e000:	d103      	bne.n	800e00a <xQueueGenericSend+0x6e>
 800e002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e006:	2b01      	cmp	r3, #1
 800e008:	d101      	bne.n	800e00e <xQueueGenericSend+0x72>
 800e00a:	2301      	movs	r3, #1
 800e00c:	e000      	b.n	800e010 <xQueueGenericSend+0x74>
 800e00e:	2300      	movs	r3, #0
 800e010:	2b00      	cmp	r3, #0
 800e012:	d10a      	bne.n	800e02a <xQueueGenericSend+0x8e>
	__asm volatile
 800e014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e018:	f383 8811 	msr	BASEPRI, r3
 800e01c:	f3bf 8f6f 	isb	sy
 800e020:	f3bf 8f4f 	dsb	sy
 800e024:	623b      	str	r3, [r7, #32]
}
 800e026:	bf00      	nop
 800e028:	e7fe      	b.n	800e028 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e02a:	f001 fa69 	bl	800f500 <xTaskGetSchedulerState>
 800e02e:	4603      	mov	r3, r0
 800e030:	2b00      	cmp	r3, #0
 800e032:	d102      	bne.n	800e03a <xQueueGenericSend+0x9e>
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d101      	bne.n	800e03e <xQueueGenericSend+0xa2>
 800e03a:	2301      	movs	r3, #1
 800e03c:	e000      	b.n	800e040 <xQueueGenericSend+0xa4>
 800e03e:	2300      	movs	r3, #0
 800e040:	2b00      	cmp	r3, #0
 800e042:	d10a      	bne.n	800e05a <xQueueGenericSend+0xbe>
	__asm volatile
 800e044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e048:	f383 8811 	msr	BASEPRI, r3
 800e04c:	f3bf 8f6f 	isb	sy
 800e050:	f3bf 8f4f 	dsb	sy
 800e054:	61fb      	str	r3, [r7, #28]
}
 800e056:	bf00      	nop
 800e058:	e7fe      	b.n	800e058 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e05a:	f001 ffab 	bl	800ffb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e066:	429a      	cmp	r2, r3
 800e068:	d302      	bcc.n	800e070 <xQueueGenericSend+0xd4>
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	2b02      	cmp	r3, #2
 800e06e:	d129      	bne.n	800e0c4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e070:	683a      	ldr	r2, [r7, #0]
 800e072:	68b9      	ldr	r1, [r7, #8]
 800e074:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e076:	f000 fa0b 	bl	800e490 <prvCopyDataToQueue>
 800e07a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e080:	2b00      	cmp	r3, #0
 800e082:	d010      	beq.n	800e0a6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e086:	3324      	adds	r3, #36	; 0x24
 800e088:	4618      	mov	r0, r3
 800e08a:	f001 f867 	bl	800f15c <xTaskRemoveFromEventList>
 800e08e:	4603      	mov	r3, r0
 800e090:	2b00      	cmp	r3, #0
 800e092:	d013      	beq.n	800e0bc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e094:	4b3f      	ldr	r3, [pc, #252]	; (800e194 <xQueueGenericSend+0x1f8>)
 800e096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e09a:	601a      	str	r2, [r3, #0]
 800e09c:	f3bf 8f4f 	dsb	sy
 800e0a0:	f3bf 8f6f 	isb	sy
 800e0a4:	e00a      	b.n	800e0bc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d007      	beq.n	800e0bc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e0ac:	4b39      	ldr	r3, [pc, #228]	; (800e194 <xQueueGenericSend+0x1f8>)
 800e0ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0b2:	601a      	str	r2, [r3, #0]
 800e0b4:	f3bf 8f4f 	dsb	sy
 800e0b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e0bc:	f001 ffaa 	bl	8010014 <vPortExitCritical>
				return pdPASS;
 800e0c0:	2301      	movs	r3, #1
 800e0c2:	e063      	b.n	800e18c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d103      	bne.n	800e0d2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e0ca:	f001 ffa3 	bl	8010014 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	e05c      	b.n	800e18c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e0d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d106      	bne.n	800e0e6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e0d8:	f107 0314 	add.w	r3, r7, #20
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f001 f8a1 	bl	800f224 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e0e2:	2301      	movs	r3, #1
 800e0e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e0e6:	f001 ff95 	bl	8010014 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e0ea:	f000 fe0d 	bl	800ed08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e0ee:	f001 ff61 	bl	800ffb4 <vPortEnterCritical>
 800e0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e0f8:	b25b      	sxtb	r3, r3
 800e0fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0fe:	d103      	bne.n	800e108 <xQueueGenericSend+0x16c>
 800e100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e102:	2200      	movs	r2, #0
 800e104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e10a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e10e:	b25b      	sxtb	r3, r3
 800e110:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e114:	d103      	bne.n	800e11e <xQueueGenericSend+0x182>
 800e116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e118:	2200      	movs	r2, #0
 800e11a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e11e:	f001 ff79 	bl	8010014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e122:	1d3a      	adds	r2, r7, #4
 800e124:	f107 0314 	add.w	r3, r7, #20
 800e128:	4611      	mov	r1, r2
 800e12a:	4618      	mov	r0, r3
 800e12c:	f001 f890 	bl	800f250 <xTaskCheckForTimeOut>
 800e130:	4603      	mov	r3, r0
 800e132:	2b00      	cmp	r3, #0
 800e134:	d124      	bne.n	800e180 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e136:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e138:	f000 faa2 	bl	800e680 <prvIsQueueFull>
 800e13c:	4603      	mov	r3, r0
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d018      	beq.n	800e174 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e144:	3310      	adds	r3, #16
 800e146:	687a      	ldr	r2, [r7, #4]
 800e148:	4611      	mov	r1, r2
 800e14a:	4618      	mov	r0, r3
 800e14c:	f000 ffb6 	bl	800f0bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e150:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e152:	f000 fa2d 	bl	800e5b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e156:	f000 fde5 	bl	800ed24 <xTaskResumeAll>
 800e15a:	4603      	mov	r3, r0
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	f47f af7c 	bne.w	800e05a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e162:	4b0c      	ldr	r3, [pc, #48]	; (800e194 <xQueueGenericSend+0x1f8>)
 800e164:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e168:	601a      	str	r2, [r3, #0]
 800e16a:	f3bf 8f4f 	dsb	sy
 800e16e:	f3bf 8f6f 	isb	sy
 800e172:	e772      	b.n	800e05a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e174:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e176:	f000 fa1b 	bl	800e5b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e17a:	f000 fdd3 	bl	800ed24 <xTaskResumeAll>
 800e17e:	e76c      	b.n	800e05a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e180:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e182:	f000 fa15 	bl	800e5b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e186:	f000 fdcd 	bl	800ed24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e18a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e18c:	4618      	mov	r0, r3
 800e18e:	3738      	adds	r7, #56	; 0x38
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}
 800e194:	e000ed04 	.word	0xe000ed04

0800e198 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b090      	sub	sp, #64	; 0x40
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	60f8      	str	r0, [r7, #12]
 800e1a0:	60b9      	str	r1, [r7, #8]
 800e1a2:	607a      	str	r2, [r7, #4]
 800e1a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d10a      	bne.n	800e1c6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b4:	f383 8811 	msr	BASEPRI, r3
 800e1b8:	f3bf 8f6f 	isb	sy
 800e1bc:	f3bf 8f4f 	dsb	sy
 800e1c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e1c2:	bf00      	nop
 800e1c4:	e7fe      	b.n	800e1c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e1c6:	68bb      	ldr	r3, [r7, #8]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d103      	bne.n	800e1d4 <xQueueGenericSendFromISR+0x3c>
 800e1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d101      	bne.n	800e1d8 <xQueueGenericSendFromISR+0x40>
 800e1d4:	2301      	movs	r3, #1
 800e1d6:	e000      	b.n	800e1da <xQueueGenericSendFromISR+0x42>
 800e1d8:	2300      	movs	r3, #0
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d10a      	bne.n	800e1f4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1e2:	f383 8811 	msr	BASEPRI, r3
 800e1e6:	f3bf 8f6f 	isb	sy
 800e1ea:	f3bf 8f4f 	dsb	sy
 800e1ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e1f0:	bf00      	nop
 800e1f2:	e7fe      	b.n	800e1f2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	2b02      	cmp	r3, #2
 800e1f8:	d103      	bne.n	800e202 <xQueueGenericSendFromISR+0x6a>
 800e1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1fe:	2b01      	cmp	r3, #1
 800e200:	d101      	bne.n	800e206 <xQueueGenericSendFromISR+0x6e>
 800e202:	2301      	movs	r3, #1
 800e204:	e000      	b.n	800e208 <xQueueGenericSendFromISR+0x70>
 800e206:	2300      	movs	r3, #0
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d10a      	bne.n	800e222 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e210:	f383 8811 	msr	BASEPRI, r3
 800e214:	f3bf 8f6f 	isb	sy
 800e218:	f3bf 8f4f 	dsb	sy
 800e21c:	623b      	str	r3, [r7, #32]
}
 800e21e:	bf00      	nop
 800e220:	e7fe      	b.n	800e220 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e222:	f001 ffa9 	bl	8010178 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e226:	f3ef 8211 	mrs	r2, BASEPRI
 800e22a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e22e:	f383 8811 	msr	BASEPRI, r3
 800e232:	f3bf 8f6f 	isb	sy
 800e236:	f3bf 8f4f 	dsb	sy
 800e23a:	61fa      	str	r2, [r7, #28]
 800e23c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e23e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e240:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e24a:	429a      	cmp	r2, r3
 800e24c:	d302      	bcc.n	800e254 <xQueueGenericSendFromISR+0xbc>
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	2b02      	cmp	r3, #2
 800e252:	d12f      	bne.n	800e2b4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e256:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e25a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e262:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e264:	683a      	ldr	r2, [r7, #0]
 800e266:	68b9      	ldr	r1, [r7, #8]
 800e268:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e26a:	f000 f911 	bl	800e490 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e26e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e272:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e276:	d112      	bne.n	800e29e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d016      	beq.n	800e2ae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e282:	3324      	adds	r3, #36	; 0x24
 800e284:	4618      	mov	r0, r3
 800e286:	f000 ff69 	bl	800f15c <xTaskRemoveFromEventList>
 800e28a:	4603      	mov	r3, r0
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d00e      	beq.n	800e2ae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d00b      	beq.n	800e2ae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	2201      	movs	r2, #1
 800e29a:	601a      	str	r2, [r3, #0]
 800e29c:	e007      	b.n	800e2ae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e29e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e2a2:	3301      	adds	r3, #1
 800e2a4:	b2db      	uxtb	r3, r3
 800e2a6:	b25a      	sxtb	r2, r3
 800e2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e2b2:	e001      	b.n	800e2b8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e2b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2ba:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e2bc:	697b      	ldr	r3, [r7, #20]
 800e2be:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e2c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e2c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	3740      	adds	r7, #64	; 0x40
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}
	...

0800e2d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b08c      	sub	sp, #48	; 0x30
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	60f8      	str	r0, [r7, #12]
 800e2d8:	60b9      	str	r1, [r7, #8]
 800e2da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e2dc:	2300      	movs	r3, #0
 800e2de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d10a      	bne.n	800e300 <xQueueReceive+0x30>
	__asm volatile
 800e2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ee:	f383 8811 	msr	BASEPRI, r3
 800e2f2:	f3bf 8f6f 	isb	sy
 800e2f6:	f3bf 8f4f 	dsb	sy
 800e2fa:	623b      	str	r3, [r7, #32]
}
 800e2fc:	bf00      	nop
 800e2fe:	e7fe      	b.n	800e2fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e300:	68bb      	ldr	r3, [r7, #8]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d103      	bne.n	800e30e <xQueueReceive+0x3e>
 800e306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d101      	bne.n	800e312 <xQueueReceive+0x42>
 800e30e:	2301      	movs	r3, #1
 800e310:	e000      	b.n	800e314 <xQueueReceive+0x44>
 800e312:	2300      	movs	r3, #0
 800e314:	2b00      	cmp	r3, #0
 800e316:	d10a      	bne.n	800e32e <xQueueReceive+0x5e>
	__asm volatile
 800e318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e31c:	f383 8811 	msr	BASEPRI, r3
 800e320:	f3bf 8f6f 	isb	sy
 800e324:	f3bf 8f4f 	dsb	sy
 800e328:	61fb      	str	r3, [r7, #28]
}
 800e32a:	bf00      	nop
 800e32c:	e7fe      	b.n	800e32c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e32e:	f001 f8e7 	bl	800f500 <xTaskGetSchedulerState>
 800e332:	4603      	mov	r3, r0
 800e334:	2b00      	cmp	r3, #0
 800e336:	d102      	bne.n	800e33e <xQueueReceive+0x6e>
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d101      	bne.n	800e342 <xQueueReceive+0x72>
 800e33e:	2301      	movs	r3, #1
 800e340:	e000      	b.n	800e344 <xQueueReceive+0x74>
 800e342:	2300      	movs	r3, #0
 800e344:	2b00      	cmp	r3, #0
 800e346:	d10a      	bne.n	800e35e <xQueueReceive+0x8e>
	__asm volatile
 800e348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e34c:	f383 8811 	msr	BASEPRI, r3
 800e350:	f3bf 8f6f 	isb	sy
 800e354:	f3bf 8f4f 	dsb	sy
 800e358:	61bb      	str	r3, [r7, #24]
}
 800e35a:	bf00      	nop
 800e35c:	e7fe      	b.n	800e35c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e35e:	f001 fe29 	bl	800ffb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e366:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d01f      	beq.n	800e3ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e36e:	68b9      	ldr	r1, [r7, #8]
 800e370:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e372:	f000 f8f7 	bl	800e564 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e378:	1e5a      	subs	r2, r3, #1
 800e37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e37c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e380:	691b      	ldr	r3, [r3, #16]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d00f      	beq.n	800e3a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e388:	3310      	adds	r3, #16
 800e38a:	4618      	mov	r0, r3
 800e38c:	f000 fee6 	bl	800f15c <xTaskRemoveFromEventList>
 800e390:	4603      	mov	r3, r0
 800e392:	2b00      	cmp	r3, #0
 800e394:	d007      	beq.n	800e3a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e396:	4b3d      	ldr	r3, [pc, #244]	; (800e48c <xQueueReceive+0x1bc>)
 800e398:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e39c:	601a      	str	r2, [r3, #0]
 800e39e:	f3bf 8f4f 	dsb	sy
 800e3a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e3a6:	f001 fe35 	bl	8010014 <vPortExitCritical>
				return pdPASS;
 800e3aa:	2301      	movs	r3, #1
 800e3ac:	e069      	b.n	800e482 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d103      	bne.n	800e3bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e3b4:	f001 fe2e 	bl	8010014 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	e062      	b.n	800e482 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d106      	bne.n	800e3d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e3c2:	f107 0310 	add.w	r3, r7, #16
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f000 ff2c 	bl	800f224 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e3d0:	f001 fe20 	bl	8010014 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e3d4:	f000 fc98 	bl	800ed08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e3d8:	f001 fdec 	bl	800ffb4 <vPortEnterCritical>
 800e3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e3e2:	b25b      	sxtb	r3, r3
 800e3e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3e8:	d103      	bne.n	800e3f2 <xQueueReceive+0x122>
 800e3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e3f8:	b25b      	sxtb	r3, r3
 800e3fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3fe:	d103      	bne.n	800e408 <xQueueReceive+0x138>
 800e400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e402:	2200      	movs	r2, #0
 800e404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e408:	f001 fe04 	bl	8010014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e40c:	1d3a      	adds	r2, r7, #4
 800e40e:	f107 0310 	add.w	r3, r7, #16
 800e412:	4611      	mov	r1, r2
 800e414:	4618      	mov	r0, r3
 800e416:	f000 ff1b 	bl	800f250 <xTaskCheckForTimeOut>
 800e41a:	4603      	mov	r3, r0
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d123      	bne.n	800e468 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e420:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e422:	f000 f917 	bl	800e654 <prvIsQueueEmpty>
 800e426:	4603      	mov	r3, r0
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d017      	beq.n	800e45c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e42e:	3324      	adds	r3, #36	; 0x24
 800e430:	687a      	ldr	r2, [r7, #4]
 800e432:	4611      	mov	r1, r2
 800e434:	4618      	mov	r0, r3
 800e436:	f000 fe41 	bl	800f0bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e43a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e43c:	f000 f8b8 	bl	800e5b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e440:	f000 fc70 	bl	800ed24 <xTaskResumeAll>
 800e444:	4603      	mov	r3, r0
 800e446:	2b00      	cmp	r3, #0
 800e448:	d189      	bne.n	800e35e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e44a:	4b10      	ldr	r3, [pc, #64]	; (800e48c <xQueueReceive+0x1bc>)
 800e44c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e450:	601a      	str	r2, [r3, #0]
 800e452:	f3bf 8f4f 	dsb	sy
 800e456:	f3bf 8f6f 	isb	sy
 800e45a:	e780      	b.n	800e35e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e45c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e45e:	f000 f8a7 	bl	800e5b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e462:	f000 fc5f 	bl	800ed24 <xTaskResumeAll>
 800e466:	e77a      	b.n	800e35e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e46a:	f000 f8a1 	bl	800e5b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e46e:	f000 fc59 	bl	800ed24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e472:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e474:	f000 f8ee 	bl	800e654 <prvIsQueueEmpty>
 800e478:	4603      	mov	r3, r0
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	f43f af6f 	beq.w	800e35e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e480:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e482:	4618      	mov	r0, r3
 800e484:	3730      	adds	r7, #48	; 0x30
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
 800e48a:	bf00      	nop
 800e48c:	e000ed04 	.word	0xe000ed04

0800e490 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b086      	sub	sp, #24
 800e494:	af00      	add	r7, sp, #0
 800e496:	60f8      	str	r0, [r7, #12]
 800e498:	60b9      	str	r1, [r7, #8]
 800e49a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e49c:	2300      	movs	r3, #0
 800e49e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d10d      	bne.n	800e4ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d14d      	bne.n	800e552 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	689b      	ldr	r3, [r3, #8]
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f001 f83e 	bl	800f53c <xTaskPriorityDisinherit>
 800e4c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	609a      	str	r2, [r3, #8]
 800e4c8:	e043      	b.n	800e552 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d119      	bne.n	800e504 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	6858      	ldr	r0, [r3, #4]
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4d8:	461a      	mov	r2, r3
 800e4da:	68b9      	ldr	r1, [r7, #8]
 800e4dc:	f003 f996 	bl	801180c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	685a      	ldr	r2, [r3, #4]
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4e8:	441a      	add	r2, r3
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	685a      	ldr	r2, [r3, #4]
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	689b      	ldr	r3, [r3, #8]
 800e4f6:	429a      	cmp	r2, r3
 800e4f8:	d32b      	bcc.n	800e552 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	681a      	ldr	r2, [r3, #0]
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	605a      	str	r2, [r3, #4]
 800e502:	e026      	b.n	800e552 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	68d8      	ldr	r0, [r3, #12]
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e50c:	461a      	mov	r2, r3
 800e50e:	68b9      	ldr	r1, [r7, #8]
 800e510:	f003 f97c 	bl	801180c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	68da      	ldr	r2, [r3, #12]
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e51c:	425b      	negs	r3, r3
 800e51e:	441a      	add	r2, r3
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	68da      	ldr	r2, [r3, #12]
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	429a      	cmp	r2, r3
 800e52e:	d207      	bcs.n	800e540 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	689a      	ldr	r2, [r3, #8]
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e538:	425b      	negs	r3, r3
 800e53a:	441a      	add	r2, r3
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2b02      	cmp	r3, #2
 800e544:	d105      	bne.n	800e552 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e546:	693b      	ldr	r3, [r7, #16]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d002      	beq.n	800e552 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e54c:	693b      	ldr	r3, [r7, #16]
 800e54e:	3b01      	subs	r3, #1
 800e550:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e552:	693b      	ldr	r3, [r7, #16]
 800e554:	1c5a      	adds	r2, r3, #1
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e55a:	697b      	ldr	r3, [r7, #20]
}
 800e55c:	4618      	mov	r0, r3
 800e55e:	3718      	adds	r7, #24
 800e560:	46bd      	mov	sp, r7
 800e562:	bd80      	pop	{r7, pc}

0800e564 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b082      	sub	sp, #8
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
 800e56c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e572:	2b00      	cmp	r3, #0
 800e574:	d018      	beq.n	800e5a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	68da      	ldr	r2, [r3, #12]
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e57e:	441a      	add	r2, r3
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	68da      	ldr	r2, [r3, #12]
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	689b      	ldr	r3, [r3, #8]
 800e58c:	429a      	cmp	r2, r3
 800e58e:	d303      	bcc.n	800e598 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	681a      	ldr	r2, [r3, #0]
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	68d9      	ldr	r1, [r3, #12]
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5a0:	461a      	mov	r2, r3
 800e5a2:	6838      	ldr	r0, [r7, #0]
 800e5a4:	f003 f932 	bl	801180c <memcpy>
	}
}
 800e5a8:	bf00      	nop
 800e5aa:	3708      	adds	r7, #8
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	bd80      	pop	{r7, pc}

0800e5b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b084      	sub	sp, #16
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e5b8:	f001 fcfc 	bl	800ffb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e5c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e5c4:	e011      	b.n	800e5ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d012      	beq.n	800e5f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	3324      	adds	r3, #36	; 0x24
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f000 fdc2 	bl	800f15c <xTaskRemoveFromEventList>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d001      	beq.n	800e5e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e5de:	f000 fe99 	bl	800f314 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e5e2:	7bfb      	ldrb	r3, [r7, #15]
 800e5e4:	3b01      	subs	r3, #1
 800e5e6:	b2db      	uxtb	r3, r3
 800e5e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e5ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	dce9      	bgt.n	800e5c6 <prvUnlockQueue+0x16>
 800e5f2:	e000      	b.n	800e5f6 <prvUnlockQueue+0x46>
					break;
 800e5f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	22ff      	movs	r2, #255	; 0xff
 800e5fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e5fe:	f001 fd09 	bl	8010014 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e602:	f001 fcd7 	bl	800ffb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e60c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e60e:	e011      	b.n	800e634 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	691b      	ldr	r3, [r3, #16]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d012      	beq.n	800e63e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	3310      	adds	r3, #16
 800e61c:	4618      	mov	r0, r3
 800e61e:	f000 fd9d 	bl	800f15c <xTaskRemoveFromEventList>
 800e622:	4603      	mov	r3, r0
 800e624:	2b00      	cmp	r3, #0
 800e626:	d001      	beq.n	800e62c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e628:	f000 fe74 	bl	800f314 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e62c:	7bbb      	ldrb	r3, [r7, #14]
 800e62e:	3b01      	subs	r3, #1
 800e630:	b2db      	uxtb	r3, r3
 800e632:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e634:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	dce9      	bgt.n	800e610 <prvUnlockQueue+0x60>
 800e63c:	e000      	b.n	800e640 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e63e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	22ff      	movs	r2, #255	; 0xff
 800e644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e648:	f001 fce4 	bl	8010014 <vPortExitCritical>
}
 800e64c:	bf00      	nop
 800e64e:	3710      	adds	r7, #16
 800e650:	46bd      	mov	sp, r7
 800e652:	bd80      	pop	{r7, pc}

0800e654 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b084      	sub	sp, #16
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e65c:	f001 fcaa 	bl	800ffb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e664:	2b00      	cmp	r3, #0
 800e666:	d102      	bne.n	800e66e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e668:	2301      	movs	r3, #1
 800e66a:	60fb      	str	r3, [r7, #12]
 800e66c:	e001      	b.n	800e672 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e66e:	2300      	movs	r3, #0
 800e670:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e672:	f001 fccf 	bl	8010014 <vPortExitCritical>

	return xReturn;
 800e676:	68fb      	ldr	r3, [r7, #12]
}
 800e678:	4618      	mov	r0, r3
 800e67a:	3710      	adds	r7, #16
 800e67c:	46bd      	mov	sp, r7
 800e67e:	bd80      	pop	{r7, pc}

0800e680 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b084      	sub	sp, #16
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e688:	f001 fc94 	bl	800ffb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e694:	429a      	cmp	r2, r3
 800e696:	d102      	bne.n	800e69e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e698:	2301      	movs	r3, #1
 800e69a:	60fb      	str	r3, [r7, #12]
 800e69c:	e001      	b.n	800e6a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e69e:	2300      	movs	r3, #0
 800e6a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e6a2:	f001 fcb7 	bl	8010014 <vPortExitCritical>

	return xReturn;
 800e6a6:	68fb      	ldr	r3, [r7, #12]
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3710      	adds	r7, #16
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}

0800e6b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e6b0:	b480      	push	{r7}
 800e6b2:	b085      	sub	sp, #20
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
 800e6b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	60fb      	str	r3, [r7, #12]
 800e6be:	e014      	b.n	800e6ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e6c0:	4a0f      	ldr	r2, [pc, #60]	; (800e700 <vQueueAddToRegistry+0x50>)
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d10b      	bne.n	800e6e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e6cc:	490c      	ldr	r1, [pc, #48]	; (800e700 <vQueueAddToRegistry+0x50>)
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	683a      	ldr	r2, [r7, #0]
 800e6d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e6d6:	4a0a      	ldr	r2, [pc, #40]	; (800e700 <vQueueAddToRegistry+0x50>)
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	00db      	lsls	r3, r3, #3
 800e6dc:	4413      	add	r3, r2
 800e6de:	687a      	ldr	r2, [r7, #4]
 800e6e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e6e2:	e006      	b.n	800e6f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	3301      	adds	r3, #1
 800e6e8:	60fb      	str	r3, [r7, #12]
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	2b07      	cmp	r3, #7
 800e6ee:	d9e7      	bls.n	800e6c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e6f0:	bf00      	nop
 800e6f2:	bf00      	nop
 800e6f4:	3714      	adds	r7, #20
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fc:	4770      	bx	lr
 800e6fe:	bf00      	nop
 800e700:	200060cc 	.word	0x200060cc

0800e704 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e704:	b580      	push	{r7, lr}
 800e706:	b086      	sub	sp, #24
 800e708:	af00      	add	r7, sp, #0
 800e70a:	60f8      	str	r0, [r7, #12]
 800e70c:	60b9      	str	r1, [r7, #8]
 800e70e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e714:	f001 fc4e 	bl	800ffb4 <vPortEnterCritical>
 800e718:	697b      	ldr	r3, [r7, #20]
 800e71a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e71e:	b25b      	sxtb	r3, r3
 800e720:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e724:	d103      	bne.n	800e72e <vQueueWaitForMessageRestricted+0x2a>
 800e726:	697b      	ldr	r3, [r7, #20]
 800e728:	2200      	movs	r2, #0
 800e72a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e72e:	697b      	ldr	r3, [r7, #20]
 800e730:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e734:	b25b      	sxtb	r3, r3
 800e736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e73a:	d103      	bne.n	800e744 <vQueueWaitForMessageRestricted+0x40>
 800e73c:	697b      	ldr	r3, [r7, #20]
 800e73e:	2200      	movs	r2, #0
 800e740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e744:	f001 fc66 	bl	8010014 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e748:	697b      	ldr	r3, [r7, #20]
 800e74a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d106      	bne.n	800e75e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e750:	697b      	ldr	r3, [r7, #20]
 800e752:	3324      	adds	r3, #36	; 0x24
 800e754:	687a      	ldr	r2, [r7, #4]
 800e756:	68b9      	ldr	r1, [r7, #8]
 800e758:	4618      	mov	r0, r3
 800e75a:	f000 fcd3 	bl	800f104 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e75e:	6978      	ldr	r0, [r7, #20]
 800e760:	f7ff ff26 	bl	800e5b0 <prvUnlockQueue>
	}
 800e764:	bf00      	nop
 800e766:	3718      	adds	r7, #24
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}

0800e76c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b08e      	sub	sp, #56	; 0x38
 800e770:	af04      	add	r7, sp, #16
 800e772:	60f8      	str	r0, [r7, #12]
 800e774:	60b9      	str	r1, [r7, #8]
 800e776:	607a      	str	r2, [r7, #4]
 800e778:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e77a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d10a      	bne.n	800e796 <xTaskCreateStatic+0x2a>
	__asm volatile
 800e780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e784:	f383 8811 	msr	BASEPRI, r3
 800e788:	f3bf 8f6f 	isb	sy
 800e78c:	f3bf 8f4f 	dsb	sy
 800e790:	623b      	str	r3, [r7, #32]
}
 800e792:	bf00      	nop
 800e794:	e7fe      	b.n	800e794 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d10a      	bne.n	800e7b2 <xTaskCreateStatic+0x46>
	__asm volatile
 800e79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7a0:	f383 8811 	msr	BASEPRI, r3
 800e7a4:	f3bf 8f6f 	isb	sy
 800e7a8:	f3bf 8f4f 	dsb	sy
 800e7ac:	61fb      	str	r3, [r7, #28]
}
 800e7ae:	bf00      	nop
 800e7b0:	e7fe      	b.n	800e7b0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e7b2:	23bc      	movs	r3, #188	; 0xbc
 800e7b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e7b6:	693b      	ldr	r3, [r7, #16]
 800e7b8:	2bbc      	cmp	r3, #188	; 0xbc
 800e7ba:	d00a      	beq.n	800e7d2 <xTaskCreateStatic+0x66>
	__asm volatile
 800e7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7c0:	f383 8811 	msr	BASEPRI, r3
 800e7c4:	f3bf 8f6f 	isb	sy
 800e7c8:	f3bf 8f4f 	dsb	sy
 800e7cc:	61bb      	str	r3, [r7, #24]
}
 800e7ce:	bf00      	nop
 800e7d0:	e7fe      	b.n	800e7d0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e7d2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d01e      	beq.n	800e818 <xTaskCreateStatic+0xac>
 800e7da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d01b      	beq.n	800e818 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7e2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e7e8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ec:	2202      	movs	r2, #2
 800e7ee:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	9303      	str	r3, [sp, #12]
 800e7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7f8:	9302      	str	r3, [sp, #8]
 800e7fa:	f107 0314 	add.w	r3, r7, #20
 800e7fe:	9301      	str	r3, [sp, #4]
 800e800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e802:	9300      	str	r3, [sp, #0]
 800e804:	683b      	ldr	r3, [r7, #0]
 800e806:	687a      	ldr	r2, [r7, #4]
 800e808:	68b9      	ldr	r1, [r7, #8]
 800e80a:	68f8      	ldr	r0, [r7, #12]
 800e80c:	f000 f850 	bl	800e8b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e810:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e812:	f000 f8f3 	bl	800e9fc <prvAddNewTaskToReadyList>
 800e816:	e001      	b.n	800e81c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e818:	2300      	movs	r3, #0
 800e81a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e81c:	697b      	ldr	r3, [r7, #20]
	}
 800e81e:	4618      	mov	r0, r3
 800e820:	3728      	adds	r7, #40	; 0x28
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}

0800e826 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e826:	b580      	push	{r7, lr}
 800e828:	b08c      	sub	sp, #48	; 0x30
 800e82a:	af04      	add	r7, sp, #16
 800e82c:	60f8      	str	r0, [r7, #12]
 800e82e:	60b9      	str	r1, [r7, #8]
 800e830:	603b      	str	r3, [r7, #0]
 800e832:	4613      	mov	r3, r2
 800e834:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e836:	88fb      	ldrh	r3, [r7, #6]
 800e838:	009b      	lsls	r3, r3, #2
 800e83a:	4618      	mov	r0, r3
 800e83c:	f001 fcdc 	bl	80101f8 <pvPortMalloc>
 800e840:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e842:	697b      	ldr	r3, [r7, #20]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d00e      	beq.n	800e866 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e848:	20bc      	movs	r0, #188	; 0xbc
 800e84a:	f001 fcd5 	bl	80101f8 <pvPortMalloc>
 800e84e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e850:	69fb      	ldr	r3, [r7, #28]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d003      	beq.n	800e85e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e856:	69fb      	ldr	r3, [r7, #28]
 800e858:	697a      	ldr	r2, [r7, #20]
 800e85a:	631a      	str	r2, [r3, #48]	; 0x30
 800e85c:	e005      	b.n	800e86a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e85e:	6978      	ldr	r0, [r7, #20]
 800e860:	f001 fd96 	bl	8010390 <vPortFree>
 800e864:	e001      	b.n	800e86a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e866:	2300      	movs	r3, #0
 800e868:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e86a:	69fb      	ldr	r3, [r7, #28]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d017      	beq.n	800e8a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e870:	69fb      	ldr	r3, [r7, #28]
 800e872:	2200      	movs	r2, #0
 800e874:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e878:	88fa      	ldrh	r2, [r7, #6]
 800e87a:	2300      	movs	r3, #0
 800e87c:	9303      	str	r3, [sp, #12]
 800e87e:	69fb      	ldr	r3, [r7, #28]
 800e880:	9302      	str	r3, [sp, #8]
 800e882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e884:	9301      	str	r3, [sp, #4]
 800e886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e888:	9300      	str	r3, [sp, #0]
 800e88a:	683b      	ldr	r3, [r7, #0]
 800e88c:	68b9      	ldr	r1, [r7, #8]
 800e88e:	68f8      	ldr	r0, [r7, #12]
 800e890:	f000 f80e 	bl	800e8b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e894:	69f8      	ldr	r0, [r7, #28]
 800e896:	f000 f8b1 	bl	800e9fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e89a:	2301      	movs	r3, #1
 800e89c:	61bb      	str	r3, [r7, #24]
 800e89e:	e002      	b.n	800e8a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e8a0:	f04f 33ff 	mov.w	r3, #4294967295
 800e8a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e8a6:	69bb      	ldr	r3, [r7, #24]
	}
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	3720      	adds	r7, #32
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	bd80      	pop	{r7, pc}

0800e8b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b088      	sub	sp, #32
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	60f8      	str	r0, [r7, #12]
 800e8b8:	60b9      	str	r1, [r7, #8]
 800e8ba:	607a      	str	r2, [r7, #4]
 800e8bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	009b      	lsls	r3, r3, #2
 800e8c6:	461a      	mov	r2, r3
 800e8c8:	21a5      	movs	r1, #165	; 0xa5
 800e8ca:	f002 ffc7 	bl	801185c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e8d8:	3b01      	subs	r3, #1
 800e8da:	009b      	lsls	r3, r3, #2
 800e8dc:	4413      	add	r3, r2
 800e8de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e8e0:	69bb      	ldr	r3, [r7, #24]
 800e8e2:	f023 0307 	bic.w	r3, r3, #7
 800e8e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e8e8:	69bb      	ldr	r3, [r7, #24]
 800e8ea:	f003 0307 	and.w	r3, r3, #7
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d00a      	beq.n	800e908 <prvInitialiseNewTask+0x58>
	__asm volatile
 800e8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8f6:	f383 8811 	msr	BASEPRI, r3
 800e8fa:	f3bf 8f6f 	isb	sy
 800e8fe:	f3bf 8f4f 	dsb	sy
 800e902:	617b      	str	r3, [r7, #20]
}
 800e904:	bf00      	nop
 800e906:	e7fe      	b.n	800e906 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e908:	68bb      	ldr	r3, [r7, #8]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d01f      	beq.n	800e94e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e90e:	2300      	movs	r3, #0
 800e910:	61fb      	str	r3, [r7, #28]
 800e912:	e012      	b.n	800e93a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e914:	68ba      	ldr	r2, [r7, #8]
 800e916:	69fb      	ldr	r3, [r7, #28]
 800e918:	4413      	add	r3, r2
 800e91a:	7819      	ldrb	r1, [r3, #0]
 800e91c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e91e:	69fb      	ldr	r3, [r7, #28]
 800e920:	4413      	add	r3, r2
 800e922:	3334      	adds	r3, #52	; 0x34
 800e924:	460a      	mov	r2, r1
 800e926:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e928:	68ba      	ldr	r2, [r7, #8]
 800e92a:	69fb      	ldr	r3, [r7, #28]
 800e92c:	4413      	add	r3, r2
 800e92e:	781b      	ldrb	r3, [r3, #0]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d006      	beq.n	800e942 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e934:	69fb      	ldr	r3, [r7, #28]
 800e936:	3301      	adds	r3, #1
 800e938:	61fb      	str	r3, [r7, #28]
 800e93a:	69fb      	ldr	r3, [r7, #28]
 800e93c:	2b0f      	cmp	r3, #15
 800e93e:	d9e9      	bls.n	800e914 <prvInitialiseNewTask+0x64>
 800e940:	e000      	b.n	800e944 <prvInitialiseNewTask+0x94>
			{
				break;
 800e942:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e946:	2200      	movs	r2, #0
 800e948:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e94c:	e003      	b.n	800e956 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e950:	2200      	movs	r2, #0
 800e952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e958:	2b37      	cmp	r3, #55	; 0x37
 800e95a:	d901      	bls.n	800e960 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e95c:	2337      	movs	r3, #55	; 0x37
 800e95e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e962:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e964:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e968:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e96a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e96e:	2200      	movs	r2, #0
 800e970:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e974:	3304      	adds	r3, #4
 800e976:	4618      	mov	r0, r3
 800e978:	f7ff f978 	bl	800dc6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e97e:	3318      	adds	r3, #24
 800e980:	4618      	mov	r0, r3
 800e982:	f7ff f973 	bl	800dc6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e98a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e98e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e994:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e99a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e99e:	2200      	movs	r2, #0
 800e9a0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ae:	3354      	adds	r3, #84	; 0x54
 800e9b0:	2260      	movs	r2, #96	; 0x60
 800e9b2:	2100      	movs	r1, #0
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	f002 ff51 	bl	801185c <memset>
 800e9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9bc:	4a0c      	ldr	r2, [pc, #48]	; (800e9f0 <prvInitialiseNewTask+0x140>)
 800e9be:	659a      	str	r2, [r3, #88]	; 0x58
 800e9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9c2:	4a0c      	ldr	r2, [pc, #48]	; (800e9f4 <prvInitialiseNewTask+0x144>)
 800e9c4:	65da      	str	r2, [r3, #92]	; 0x5c
 800e9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9c8:	4a0b      	ldr	r2, [pc, #44]	; (800e9f8 <prvInitialiseNewTask+0x148>)
 800e9ca:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e9cc:	683a      	ldr	r2, [r7, #0]
 800e9ce:	68f9      	ldr	r1, [r7, #12]
 800e9d0:	69b8      	ldr	r0, [r7, #24]
 800e9d2:	f001 f9c3 	bl	800fd5c <pxPortInitialiseStack>
 800e9d6:	4602      	mov	r2, r0
 800e9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9da:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d002      	beq.n	800e9e8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e9e8:	bf00      	nop
 800e9ea:	3720      	adds	r7, #32
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	bd80      	pop	{r7, pc}
 800e9f0:	08018568 	.word	0x08018568
 800e9f4:	08018588 	.word	0x08018588
 800e9f8:	08018548 	.word	0x08018548

0800e9fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b082      	sub	sp, #8
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ea04:	f001 fad6 	bl	800ffb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ea08:	4b2d      	ldr	r3, [pc, #180]	; (800eac0 <prvAddNewTaskToReadyList+0xc4>)
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	3301      	adds	r3, #1
 800ea0e:	4a2c      	ldr	r2, [pc, #176]	; (800eac0 <prvAddNewTaskToReadyList+0xc4>)
 800ea10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ea12:	4b2c      	ldr	r3, [pc, #176]	; (800eac4 <prvAddNewTaskToReadyList+0xc8>)
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d109      	bne.n	800ea2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ea1a:	4a2a      	ldr	r2, [pc, #168]	; (800eac4 <prvAddNewTaskToReadyList+0xc8>)
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ea20:	4b27      	ldr	r3, [pc, #156]	; (800eac0 <prvAddNewTaskToReadyList+0xc4>)
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	2b01      	cmp	r3, #1
 800ea26:	d110      	bne.n	800ea4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ea28:	f000 fc98 	bl	800f35c <prvInitialiseTaskLists>
 800ea2c:	e00d      	b.n	800ea4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ea2e:	4b26      	ldr	r3, [pc, #152]	; (800eac8 <prvAddNewTaskToReadyList+0xcc>)
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d109      	bne.n	800ea4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ea36:	4b23      	ldr	r3, [pc, #140]	; (800eac4 <prvAddNewTaskToReadyList+0xc8>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea40:	429a      	cmp	r2, r3
 800ea42:	d802      	bhi.n	800ea4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ea44:	4a1f      	ldr	r2, [pc, #124]	; (800eac4 <prvAddNewTaskToReadyList+0xc8>)
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ea4a:	4b20      	ldr	r3, [pc, #128]	; (800eacc <prvAddNewTaskToReadyList+0xd0>)
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	3301      	adds	r3, #1
 800ea50:	4a1e      	ldr	r2, [pc, #120]	; (800eacc <prvAddNewTaskToReadyList+0xd0>)
 800ea52:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ea54:	4b1d      	ldr	r3, [pc, #116]	; (800eacc <prvAddNewTaskToReadyList+0xd0>)
 800ea56:	681a      	ldr	r2, [r3, #0]
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea60:	4b1b      	ldr	r3, [pc, #108]	; (800ead0 <prvAddNewTaskToReadyList+0xd4>)
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	429a      	cmp	r2, r3
 800ea66:	d903      	bls.n	800ea70 <prvAddNewTaskToReadyList+0x74>
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea6c:	4a18      	ldr	r2, [pc, #96]	; (800ead0 <prvAddNewTaskToReadyList+0xd4>)
 800ea6e:	6013      	str	r3, [r2, #0]
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea74:	4613      	mov	r3, r2
 800ea76:	009b      	lsls	r3, r3, #2
 800ea78:	4413      	add	r3, r2
 800ea7a:	009b      	lsls	r3, r3, #2
 800ea7c:	4a15      	ldr	r2, [pc, #84]	; (800ead4 <prvAddNewTaskToReadyList+0xd8>)
 800ea7e:	441a      	add	r2, r3
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	3304      	adds	r3, #4
 800ea84:	4619      	mov	r1, r3
 800ea86:	4610      	mov	r0, r2
 800ea88:	f7ff f8fd 	bl	800dc86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ea8c:	f001 fac2 	bl	8010014 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ea90:	4b0d      	ldr	r3, [pc, #52]	; (800eac8 <prvAddNewTaskToReadyList+0xcc>)
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d00e      	beq.n	800eab6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ea98:	4b0a      	ldr	r3, [pc, #40]	; (800eac4 <prvAddNewTaskToReadyList+0xc8>)
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaa2:	429a      	cmp	r2, r3
 800eaa4:	d207      	bcs.n	800eab6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800eaa6:	4b0c      	ldr	r3, [pc, #48]	; (800ead8 <prvAddNewTaskToReadyList+0xdc>)
 800eaa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eaac:	601a      	str	r2, [r3, #0]
 800eaae:	f3bf 8f4f 	dsb	sy
 800eab2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eab6:	bf00      	nop
 800eab8:	3708      	adds	r7, #8
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}
 800eabe:	bf00      	nop
 800eac0:	200011dc 	.word	0x200011dc
 800eac4:	20000d08 	.word	0x20000d08
 800eac8:	200011e8 	.word	0x200011e8
 800eacc:	200011f8 	.word	0x200011f8
 800ead0:	200011e4 	.word	0x200011e4
 800ead4:	20000d0c 	.word	0x20000d0c
 800ead8:	e000ed04 	.word	0xe000ed04

0800eadc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b084      	sub	sp, #16
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800eae4:	f001 fa66 	bl	800ffb4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d102      	bne.n	800eaf4 <vTaskDelete+0x18>
 800eaee:	4b2c      	ldr	r3, [pc, #176]	; (800eba0 <vTaskDelete+0xc4>)
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	e000      	b.n	800eaf6 <vTaskDelete+0x1a>
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	3304      	adds	r3, #4
 800eafc:	4618      	mov	r0, r3
 800eafe:	f7ff f91f 	bl	800dd40 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d004      	beq.n	800eb14 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	3318      	adds	r3, #24
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f7ff f916 	bl	800dd40 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800eb14:	4b23      	ldr	r3, [pc, #140]	; (800eba4 <vTaskDelete+0xc8>)
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	3301      	adds	r3, #1
 800eb1a:	4a22      	ldr	r2, [pc, #136]	; (800eba4 <vTaskDelete+0xc8>)
 800eb1c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800eb1e:	4b20      	ldr	r3, [pc, #128]	; (800eba0 <vTaskDelete+0xc4>)
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	68fa      	ldr	r2, [r7, #12]
 800eb24:	429a      	cmp	r2, r3
 800eb26:	d10b      	bne.n	800eb40 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	3304      	adds	r3, #4
 800eb2c:	4619      	mov	r1, r3
 800eb2e:	481e      	ldr	r0, [pc, #120]	; (800eba8 <vTaskDelete+0xcc>)
 800eb30:	f7ff f8a9 	bl	800dc86 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800eb34:	4b1d      	ldr	r3, [pc, #116]	; (800ebac <vTaskDelete+0xd0>)
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	3301      	adds	r3, #1
 800eb3a:	4a1c      	ldr	r2, [pc, #112]	; (800ebac <vTaskDelete+0xd0>)
 800eb3c:	6013      	str	r3, [r2, #0]
 800eb3e:	e009      	b.n	800eb54 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800eb40:	4b1b      	ldr	r3, [pc, #108]	; (800ebb0 <vTaskDelete+0xd4>)
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	3b01      	subs	r3, #1
 800eb46:	4a1a      	ldr	r2, [pc, #104]	; (800ebb0 <vTaskDelete+0xd4>)
 800eb48:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800eb4a:	68f8      	ldr	r0, [r7, #12]
 800eb4c:	f000 fc74 	bl	800f438 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800eb50:	f000 fca6 	bl	800f4a0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800eb54:	f001 fa5e 	bl	8010014 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800eb58:	4b16      	ldr	r3, [pc, #88]	; (800ebb4 <vTaskDelete+0xd8>)
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d01b      	beq.n	800eb98 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800eb60:	4b0f      	ldr	r3, [pc, #60]	; (800eba0 <vTaskDelete+0xc4>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	68fa      	ldr	r2, [r7, #12]
 800eb66:	429a      	cmp	r2, r3
 800eb68:	d116      	bne.n	800eb98 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800eb6a:	4b13      	ldr	r3, [pc, #76]	; (800ebb8 <vTaskDelete+0xdc>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d00a      	beq.n	800eb88 <vTaskDelete+0xac>
	__asm volatile
 800eb72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb76:	f383 8811 	msr	BASEPRI, r3
 800eb7a:	f3bf 8f6f 	isb	sy
 800eb7e:	f3bf 8f4f 	dsb	sy
 800eb82:	60bb      	str	r3, [r7, #8]
}
 800eb84:	bf00      	nop
 800eb86:	e7fe      	b.n	800eb86 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800eb88:	4b0c      	ldr	r3, [pc, #48]	; (800ebbc <vTaskDelete+0xe0>)
 800eb8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb8e:	601a      	str	r2, [r3, #0]
 800eb90:	f3bf 8f4f 	dsb	sy
 800eb94:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800eb98:	bf00      	nop
 800eb9a:	3710      	adds	r7, #16
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}
 800eba0:	20000d08 	.word	0x20000d08
 800eba4:	200011f8 	.word	0x200011f8
 800eba8:	200011b0 	.word	0x200011b0
 800ebac:	200011c4 	.word	0x200011c4
 800ebb0:	200011dc 	.word	0x200011dc
 800ebb4:	200011e8 	.word	0x200011e8
 800ebb8:	20001204 	.word	0x20001204
 800ebbc:	e000ed04 	.word	0xe000ed04

0800ebc0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b084      	sub	sp, #16
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ebc8:	2300      	movs	r3, #0
 800ebca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d017      	beq.n	800ec02 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ebd2:	4b13      	ldr	r3, [pc, #76]	; (800ec20 <vTaskDelay+0x60>)
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d00a      	beq.n	800ebf0 <vTaskDelay+0x30>
	__asm volatile
 800ebda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebde:	f383 8811 	msr	BASEPRI, r3
 800ebe2:	f3bf 8f6f 	isb	sy
 800ebe6:	f3bf 8f4f 	dsb	sy
 800ebea:	60bb      	str	r3, [r7, #8]
}
 800ebec:	bf00      	nop
 800ebee:	e7fe      	b.n	800ebee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ebf0:	f000 f88a 	bl	800ed08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ebf4:	2100      	movs	r1, #0
 800ebf6:	6878      	ldr	r0, [r7, #4]
 800ebf8:	f000 fd0e 	bl	800f618 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ebfc:	f000 f892 	bl	800ed24 <xTaskResumeAll>
 800ec00:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d107      	bne.n	800ec18 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ec08:	4b06      	ldr	r3, [pc, #24]	; (800ec24 <vTaskDelay+0x64>)
 800ec0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec0e:	601a      	str	r2, [r3, #0]
 800ec10:	f3bf 8f4f 	dsb	sy
 800ec14:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ec18:	bf00      	nop
 800ec1a:	3710      	adds	r7, #16
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bd80      	pop	{r7, pc}
 800ec20:	20001204 	.word	0x20001204
 800ec24:	e000ed04 	.word	0xe000ed04

0800ec28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b08a      	sub	sp, #40	; 0x28
 800ec2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ec2e:	2300      	movs	r3, #0
 800ec30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ec32:	2300      	movs	r3, #0
 800ec34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ec36:	463a      	mov	r2, r7
 800ec38:	1d39      	adds	r1, r7, #4
 800ec3a:	f107 0308 	add.w	r3, r7, #8
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f7fe ffc0 	bl	800dbc4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ec44:	6839      	ldr	r1, [r7, #0]
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	68ba      	ldr	r2, [r7, #8]
 800ec4a:	9202      	str	r2, [sp, #8]
 800ec4c:	9301      	str	r3, [sp, #4]
 800ec4e:	2300      	movs	r3, #0
 800ec50:	9300      	str	r3, [sp, #0]
 800ec52:	2300      	movs	r3, #0
 800ec54:	460a      	mov	r2, r1
 800ec56:	4924      	ldr	r1, [pc, #144]	; (800ece8 <vTaskStartScheduler+0xc0>)
 800ec58:	4824      	ldr	r0, [pc, #144]	; (800ecec <vTaskStartScheduler+0xc4>)
 800ec5a:	f7ff fd87 	bl	800e76c <xTaskCreateStatic>
 800ec5e:	4603      	mov	r3, r0
 800ec60:	4a23      	ldr	r2, [pc, #140]	; (800ecf0 <vTaskStartScheduler+0xc8>)
 800ec62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ec64:	4b22      	ldr	r3, [pc, #136]	; (800ecf0 <vTaskStartScheduler+0xc8>)
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d002      	beq.n	800ec72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ec6c:	2301      	movs	r3, #1
 800ec6e:	617b      	str	r3, [r7, #20]
 800ec70:	e001      	b.n	800ec76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ec72:	2300      	movs	r3, #0
 800ec74:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	2b01      	cmp	r3, #1
 800ec7a:	d102      	bne.n	800ec82 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ec7c:	f000 fd20 	bl	800f6c0 <xTimerCreateTimerTask>
 800ec80:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ec82:	697b      	ldr	r3, [r7, #20]
 800ec84:	2b01      	cmp	r3, #1
 800ec86:	d11b      	bne.n	800ecc0 <vTaskStartScheduler+0x98>
	__asm volatile
 800ec88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec8c:	f383 8811 	msr	BASEPRI, r3
 800ec90:	f3bf 8f6f 	isb	sy
 800ec94:	f3bf 8f4f 	dsb	sy
 800ec98:	613b      	str	r3, [r7, #16]
}
 800ec9a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ec9c:	4b15      	ldr	r3, [pc, #84]	; (800ecf4 <vTaskStartScheduler+0xcc>)
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	3354      	adds	r3, #84	; 0x54
 800eca2:	4a15      	ldr	r2, [pc, #84]	; (800ecf8 <vTaskStartScheduler+0xd0>)
 800eca4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800eca6:	4b15      	ldr	r3, [pc, #84]	; (800ecfc <vTaskStartScheduler+0xd4>)
 800eca8:	f04f 32ff 	mov.w	r2, #4294967295
 800ecac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ecae:	4b14      	ldr	r3, [pc, #80]	; (800ed00 <vTaskStartScheduler+0xd8>)
 800ecb0:	2201      	movs	r2, #1
 800ecb2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ecb4:	4b13      	ldr	r3, [pc, #76]	; (800ed04 <vTaskStartScheduler+0xdc>)
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ecba:	f001 f8d9 	bl	800fe70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ecbe:	e00e      	b.n	800ecde <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ecc0:	697b      	ldr	r3, [r7, #20]
 800ecc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecc6:	d10a      	bne.n	800ecde <vTaskStartScheduler+0xb6>
	__asm volatile
 800ecc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eccc:	f383 8811 	msr	BASEPRI, r3
 800ecd0:	f3bf 8f6f 	isb	sy
 800ecd4:	f3bf 8f4f 	dsb	sy
 800ecd8:	60fb      	str	r3, [r7, #12]
}
 800ecda:	bf00      	nop
 800ecdc:	e7fe      	b.n	800ecdc <vTaskStartScheduler+0xb4>
}
 800ecde:	bf00      	nop
 800ece0:	3718      	adds	r7, #24
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}
 800ece6:	bf00      	nop
 800ece8:	08018374 	.word	0x08018374
 800ecec:	0800f32d 	.word	0x0800f32d
 800ecf0:	20001200 	.word	0x20001200
 800ecf4:	20000d08 	.word	0x20000d08
 800ecf8:	2000004c 	.word	0x2000004c
 800ecfc:	200011fc 	.word	0x200011fc
 800ed00:	200011e8 	.word	0x200011e8
 800ed04:	200011e0 	.word	0x200011e0

0800ed08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ed08:	b480      	push	{r7}
 800ed0a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ed0c:	4b04      	ldr	r3, [pc, #16]	; (800ed20 <vTaskSuspendAll+0x18>)
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	3301      	adds	r3, #1
 800ed12:	4a03      	ldr	r2, [pc, #12]	; (800ed20 <vTaskSuspendAll+0x18>)
 800ed14:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ed16:	bf00      	nop
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1e:	4770      	bx	lr
 800ed20:	20001204 	.word	0x20001204

0800ed24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b084      	sub	sp, #16
 800ed28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ed2e:	2300      	movs	r3, #0
 800ed30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ed32:	4b42      	ldr	r3, [pc, #264]	; (800ee3c <xTaskResumeAll+0x118>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d10a      	bne.n	800ed50 <xTaskResumeAll+0x2c>
	__asm volatile
 800ed3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed3e:	f383 8811 	msr	BASEPRI, r3
 800ed42:	f3bf 8f6f 	isb	sy
 800ed46:	f3bf 8f4f 	dsb	sy
 800ed4a:	603b      	str	r3, [r7, #0]
}
 800ed4c:	bf00      	nop
 800ed4e:	e7fe      	b.n	800ed4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ed50:	f001 f930 	bl	800ffb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ed54:	4b39      	ldr	r3, [pc, #228]	; (800ee3c <xTaskResumeAll+0x118>)
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	3b01      	subs	r3, #1
 800ed5a:	4a38      	ldr	r2, [pc, #224]	; (800ee3c <xTaskResumeAll+0x118>)
 800ed5c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed5e:	4b37      	ldr	r3, [pc, #220]	; (800ee3c <xTaskResumeAll+0x118>)
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d162      	bne.n	800ee2c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ed66:	4b36      	ldr	r3, [pc, #216]	; (800ee40 <xTaskResumeAll+0x11c>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d05e      	beq.n	800ee2c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ed6e:	e02f      	b.n	800edd0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed70:	4b34      	ldr	r3, [pc, #208]	; (800ee44 <xTaskResumeAll+0x120>)
 800ed72:	68db      	ldr	r3, [r3, #12]
 800ed74:	68db      	ldr	r3, [r3, #12]
 800ed76:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	3318      	adds	r3, #24
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f7fe ffdf 	bl	800dd40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	3304      	adds	r3, #4
 800ed86:	4618      	mov	r0, r3
 800ed88:	f7fe ffda 	bl	800dd40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed90:	4b2d      	ldr	r3, [pc, #180]	; (800ee48 <xTaskResumeAll+0x124>)
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	429a      	cmp	r2, r3
 800ed96:	d903      	bls.n	800eda0 <xTaskResumeAll+0x7c>
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed9c:	4a2a      	ldr	r2, [pc, #168]	; (800ee48 <xTaskResumeAll+0x124>)
 800ed9e:	6013      	str	r3, [r2, #0]
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eda4:	4613      	mov	r3, r2
 800eda6:	009b      	lsls	r3, r3, #2
 800eda8:	4413      	add	r3, r2
 800edaa:	009b      	lsls	r3, r3, #2
 800edac:	4a27      	ldr	r2, [pc, #156]	; (800ee4c <xTaskResumeAll+0x128>)
 800edae:	441a      	add	r2, r3
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	3304      	adds	r3, #4
 800edb4:	4619      	mov	r1, r3
 800edb6:	4610      	mov	r0, r2
 800edb8:	f7fe ff65 	bl	800dc86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edc0:	4b23      	ldr	r3, [pc, #140]	; (800ee50 <xTaskResumeAll+0x12c>)
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edc6:	429a      	cmp	r2, r3
 800edc8:	d302      	bcc.n	800edd0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800edca:	4b22      	ldr	r3, [pc, #136]	; (800ee54 <xTaskResumeAll+0x130>)
 800edcc:	2201      	movs	r2, #1
 800edce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800edd0:	4b1c      	ldr	r3, [pc, #112]	; (800ee44 <xTaskResumeAll+0x120>)
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d1cb      	bne.n	800ed70 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d001      	beq.n	800ede2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800edde:	f000 fb5f 	bl	800f4a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ede2:	4b1d      	ldr	r3, [pc, #116]	; (800ee58 <xTaskResumeAll+0x134>)
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d010      	beq.n	800ee10 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800edee:	f000 f847 	bl	800ee80 <xTaskIncrementTick>
 800edf2:	4603      	mov	r3, r0
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d002      	beq.n	800edfe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800edf8:	4b16      	ldr	r3, [pc, #88]	; (800ee54 <xTaskResumeAll+0x130>)
 800edfa:	2201      	movs	r2, #1
 800edfc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	3b01      	subs	r3, #1
 800ee02:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d1f1      	bne.n	800edee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ee0a:	4b13      	ldr	r3, [pc, #76]	; (800ee58 <xTaskResumeAll+0x134>)
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ee10:	4b10      	ldr	r3, [pc, #64]	; (800ee54 <xTaskResumeAll+0x130>)
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d009      	beq.n	800ee2c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ee18:	2301      	movs	r3, #1
 800ee1a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ee1c:	4b0f      	ldr	r3, [pc, #60]	; (800ee5c <xTaskResumeAll+0x138>)
 800ee1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee22:	601a      	str	r2, [r3, #0]
 800ee24:	f3bf 8f4f 	dsb	sy
 800ee28:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ee2c:	f001 f8f2 	bl	8010014 <vPortExitCritical>

	return xAlreadyYielded;
 800ee30:	68bb      	ldr	r3, [r7, #8]
}
 800ee32:	4618      	mov	r0, r3
 800ee34:	3710      	adds	r7, #16
 800ee36:	46bd      	mov	sp, r7
 800ee38:	bd80      	pop	{r7, pc}
 800ee3a:	bf00      	nop
 800ee3c:	20001204 	.word	0x20001204
 800ee40:	200011dc 	.word	0x200011dc
 800ee44:	2000119c 	.word	0x2000119c
 800ee48:	200011e4 	.word	0x200011e4
 800ee4c:	20000d0c 	.word	0x20000d0c
 800ee50:	20000d08 	.word	0x20000d08
 800ee54:	200011f0 	.word	0x200011f0
 800ee58:	200011ec 	.word	0x200011ec
 800ee5c:	e000ed04 	.word	0xe000ed04

0800ee60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ee60:	b480      	push	{r7}
 800ee62:	b083      	sub	sp, #12
 800ee64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ee66:	4b05      	ldr	r3, [pc, #20]	; (800ee7c <xTaskGetTickCount+0x1c>)
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ee6c:	687b      	ldr	r3, [r7, #4]
}
 800ee6e:	4618      	mov	r0, r3
 800ee70:	370c      	adds	r7, #12
 800ee72:	46bd      	mov	sp, r7
 800ee74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee78:	4770      	bx	lr
 800ee7a:	bf00      	nop
 800ee7c:	200011e0 	.word	0x200011e0

0800ee80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b086      	sub	sp, #24
 800ee84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ee86:	2300      	movs	r3, #0
 800ee88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ee8a:	4b4f      	ldr	r3, [pc, #316]	; (800efc8 <xTaskIncrementTick+0x148>)
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	f040 808f 	bne.w	800efb2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ee94:	4b4d      	ldr	r3, [pc, #308]	; (800efcc <xTaskIncrementTick+0x14c>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	3301      	adds	r3, #1
 800ee9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ee9c:	4a4b      	ldr	r2, [pc, #300]	; (800efcc <xTaskIncrementTick+0x14c>)
 800ee9e:	693b      	ldr	r3, [r7, #16]
 800eea0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800eea2:	693b      	ldr	r3, [r7, #16]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d120      	bne.n	800eeea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800eea8:	4b49      	ldr	r3, [pc, #292]	; (800efd0 <xTaskIncrementTick+0x150>)
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d00a      	beq.n	800eec8 <xTaskIncrementTick+0x48>
	__asm volatile
 800eeb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeb6:	f383 8811 	msr	BASEPRI, r3
 800eeba:	f3bf 8f6f 	isb	sy
 800eebe:	f3bf 8f4f 	dsb	sy
 800eec2:	603b      	str	r3, [r7, #0]
}
 800eec4:	bf00      	nop
 800eec6:	e7fe      	b.n	800eec6 <xTaskIncrementTick+0x46>
 800eec8:	4b41      	ldr	r3, [pc, #260]	; (800efd0 <xTaskIncrementTick+0x150>)
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	60fb      	str	r3, [r7, #12]
 800eece:	4b41      	ldr	r3, [pc, #260]	; (800efd4 <xTaskIncrementTick+0x154>)
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	4a3f      	ldr	r2, [pc, #252]	; (800efd0 <xTaskIncrementTick+0x150>)
 800eed4:	6013      	str	r3, [r2, #0]
 800eed6:	4a3f      	ldr	r2, [pc, #252]	; (800efd4 <xTaskIncrementTick+0x154>)
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	6013      	str	r3, [r2, #0]
 800eedc:	4b3e      	ldr	r3, [pc, #248]	; (800efd8 <xTaskIncrementTick+0x158>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	3301      	adds	r3, #1
 800eee2:	4a3d      	ldr	r2, [pc, #244]	; (800efd8 <xTaskIncrementTick+0x158>)
 800eee4:	6013      	str	r3, [r2, #0]
 800eee6:	f000 fadb 	bl	800f4a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800eeea:	4b3c      	ldr	r3, [pc, #240]	; (800efdc <xTaskIncrementTick+0x15c>)
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	693a      	ldr	r2, [r7, #16]
 800eef0:	429a      	cmp	r2, r3
 800eef2:	d349      	bcc.n	800ef88 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eef4:	4b36      	ldr	r3, [pc, #216]	; (800efd0 <xTaskIncrementTick+0x150>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d104      	bne.n	800ef08 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eefe:	4b37      	ldr	r3, [pc, #220]	; (800efdc <xTaskIncrementTick+0x15c>)
 800ef00:	f04f 32ff 	mov.w	r2, #4294967295
 800ef04:	601a      	str	r2, [r3, #0]
					break;
 800ef06:	e03f      	b.n	800ef88 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef08:	4b31      	ldr	r3, [pc, #196]	; (800efd0 <xTaskIncrementTick+0x150>)
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	68db      	ldr	r3, [r3, #12]
 800ef0e:	68db      	ldr	r3, [r3, #12]
 800ef10:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ef12:	68bb      	ldr	r3, [r7, #8]
 800ef14:	685b      	ldr	r3, [r3, #4]
 800ef16:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ef18:	693a      	ldr	r2, [r7, #16]
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	429a      	cmp	r2, r3
 800ef1e:	d203      	bcs.n	800ef28 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ef20:	4a2e      	ldr	r2, [pc, #184]	; (800efdc <xTaskIncrementTick+0x15c>)
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ef26:	e02f      	b.n	800ef88 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ef28:	68bb      	ldr	r3, [r7, #8]
 800ef2a:	3304      	adds	r3, #4
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	f7fe ff07 	bl	800dd40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ef32:	68bb      	ldr	r3, [r7, #8]
 800ef34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d004      	beq.n	800ef44 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ef3a:	68bb      	ldr	r3, [r7, #8]
 800ef3c:	3318      	adds	r3, #24
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f7fe fefe 	bl	800dd40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ef44:	68bb      	ldr	r3, [r7, #8]
 800ef46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef48:	4b25      	ldr	r3, [pc, #148]	; (800efe0 <xTaskIncrementTick+0x160>)
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	429a      	cmp	r2, r3
 800ef4e:	d903      	bls.n	800ef58 <xTaskIncrementTick+0xd8>
 800ef50:	68bb      	ldr	r3, [r7, #8]
 800ef52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef54:	4a22      	ldr	r2, [pc, #136]	; (800efe0 <xTaskIncrementTick+0x160>)
 800ef56:	6013      	str	r3, [r2, #0]
 800ef58:	68bb      	ldr	r3, [r7, #8]
 800ef5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef5c:	4613      	mov	r3, r2
 800ef5e:	009b      	lsls	r3, r3, #2
 800ef60:	4413      	add	r3, r2
 800ef62:	009b      	lsls	r3, r3, #2
 800ef64:	4a1f      	ldr	r2, [pc, #124]	; (800efe4 <xTaskIncrementTick+0x164>)
 800ef66:	441a      	add	r2, r3
 800ef68:	68bb      	ldr	r3, [r7, #8]
 800ef6a:	3304      	adds	r3, #4
 800ef6c:	4619      	mov	r1, r3
 800ef6e:	4610      	mov	r0, r2
 800ef70:	f7fe fe89 	bl	800dc86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef78:	4b1b      	ldr	r3, [pc, #108]	; (800efe8 <xTaskIncrementTick+0x168>)
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef7e:	429a      	cmp	r2, r3
 800ef80:	d3b8      	bcc.n	800eef4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ef82:	2301      	movs	r3, #1
 800ef84:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ef86:	e7b5      	b.n	800eef4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ef88:	4b17      	ldr	r3, [pc, #92]	; (800efe8 <xTaskIncrementTick+0x168>)
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef8e:	4915      	ldr	r1, [pc, #84]	; (800efe4 <xTaskIncrementTick+0x164>)
 800ef90:	4613      	mov	r3, r2
 800ef92:	009b      	lsls	r3, r3, #2
 800ef94:	4413      	add	r3, r2
 800ef96:	009b      	lsls	r3, r3, #2
 800ef98:	440b      	add	r3, r1
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	2b01      	cmp	r3, #1
 800ef9e:	d901      	bls.n	800efa4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800efa0:	2301      	movs	r3, #1
 800efa2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800efa4:	4b11      	ldr	r3, [pc, #68]	; (800efec <xTaskIncrementTick+0x16c>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d007      	beq.n	800efbc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800efac:	2301      	movs	r3, #1
 800efae:	617b      	str	r3, [r7, #20]
 800efb0:	e004      	b.n	800efbc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800efb2:	4b0f      	ldr	r3, [pc, #60]	; (800eff0 <xTaskIncrementTick+0x170>)
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	3301      	adds	r3, #1
 800efb8:	4a0d      	ldr	r2, [pc, #52]	; (800eff0 <xTaskIncrementTick+0x170>)
 800efba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800efbc:	697b      	ldr	r3, [r7, #20]
}
 800efbe:	4618      	mov	r0, r3
 800efc0:	3718      	adds	r7, #24
 800efc2:	46bd      	mov	sp, r7
 800efc4:	bd80      	pop	{r7, pc}
 800efc6:	bf00      	nop
 800efc8:	20001204 	.word	0x20001204
 800efcc:	200011e0 	.word	0x200011e0
 800efd0:	20001194 	.word	0x20001194
 800efd4:	20001198 	.word	0x20001198
 800efd8:	200011f4 	.word	0x200011f4
 800efdc:	200011fc 	.word	0x200011fc
 800efe0:	200011e4 	.word	0x200011e4
 800efe4:	20000d0c 	.word	0x20000d0c
 800efe8:	20000d08 	.word	0x20000d08
 800efec:	200011f0 	.word	0x200011f0
 800eff0:	200011ec 	.word	0x200011ec

0800eff4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800eff4:	b480      	push	{r7}
 800eff6:	b085      	sub	sp, #20
 800eff8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800effa:	4b2a      	ldr	r3, [pc, #168]	; (800f0a4 <vTaskSwitchContext+0xb0>)
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d003      	beq.n	800f00a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f002:	4b29      	ldr	r3, [pc, #164]	; (800f0a8 <vTaskSwitchContext+0xb4>)
 800f004:	2201      	movs	r2, #1
 800f006:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f008:	e046      	b.n	800f098 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800f00a:	4b27      	ldr	r3, [pc, #156]	; (800f0a8 <vTaskSwitchContext+0xb4>)
 800f00c:	2200      	movs	r2, #0
 800f00e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f010:	4b26      	ldr	r3, [pc, #152]	; (800f0ac <vTaskSwitchContext+0xb8>)
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	60fb      	str	r3, [r7, #12]
 800f016:	e010      	b.n	800f03a <vTaskSwitchContext+0x46>
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d10a      	bne.n	800f034 <vTaskSwitchContext+0x40>
	__asm volatile
 800f01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f022:	f383 8811 	msr	BASEPRI, r3
 800f026:	f3bf 8f6f 	isb	sy
 800f02a:	f3bf 8f4f 	dsb	sy
 800f02e:	607b      	str	r3, [r7, #4]
}
 800f030:	bf00      	nop
 800f032:	e7fe      	b.n	800f032 <vTaskSwitchContext+0x3e>
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	3b01      	subs	r3, #1
 800f038:	60fb      	str	r3, [r7, #12]
 800f03a:	491d      	ldr	r1, [pc, #116]	; (800f0b0 <vTaskSwitchContext+0xbc>)
 800f03c:	68fa      	ldr	r2, [r7, #12]
 800f03e:	4613      	mov	r3, r2
 800f040:	009b      	lsls	r3, r3, #2
 800f042:	4413      	add	r3, r2
 800f044:	009b      	lsls	r3, r3, #2
 800f046:	440b      	add	r3, r1
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d0e4      	beq.n	800f018 <vTaskSwitchContext+0x24>
 800f04e:	68fa      	ldr	r2, [r7, #12]
 800f050:	4613      	mov	r3, r2
 800f052:	009b      	lsls	r3, r3, #2
 800f054:	4413      	add	r3, r2
 800f056:	009b      	lsls	r3, r3, #2
 800f058:	4a15      	ldr	r2, [pc, #84]	; (800f0b0 <vTaskSwitchContext+0xbc>)
 800f05a:	4413      	add	r3, r2
 800f05c:	60bb      	str	r3, [r7, #8]
 800f05e:	68bb      	ldr	r3, [r7, #8]
 800f060:	685b      	ldr	r3, [r3, #4]
 800f062:	685a      	ldr	r2, [r3, #4]
 800f064:	68bb      	ldr	r3, [r7, #8]
 800f066:	605a      	str	r2, [r3, #4]
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	685a      	ldr	r2, [r3, #4]
 800f06c:	68bb      	ldr	r3, [r7, #8]
 800f06e:	3308      	adds	r3, #8
 800f070:	429a      	cmp	r2, r3
 800f072:	d104      	bne.n	800f07e <vTaskSwitchContext+0x8a>
 800f074:	68bb      	ldr	r3, [r7, #8]
 800f076:	685b      	ldr	r3, [r3, #4]
 800f078:	685a      	ldr	r2, [r3, #4]
 800f07a:	68bb      	ldr	r3, [r7, #8]
 800f07c:	605a      	str	r2, [r3, #4]
 800f07e:	68bb      	ldr	r3, [r7, #8]
 800f080:	685b      	ldr	r3, [r3, #4]
 800f082:	68db      	ldr	r3, [r3, #12]
 800f084:	4a0b      	ldr	r2, [pc, #44]	; (800f0b4 <vTaskSwitchContext+0xc0>)
 800f086:	6013      	str	r3, [r2, #0]
 800f088:	4a08      	ldr	r2, [pc, #32]	; (800f0ac <vTaskSwitchContext+0xb8>)
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f08e:	4b09      	ldr	r3, [pc, #36]	; (800f0b4 <vTaskSwitchContext+0xc0>)
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	3354      	adds	r3, #84	; 0x54
 800f094:	4a08      	ldr	r2, [pc, #32]	; (800f0b8 <vTaskSwitchContext+0xc4>)
 800f096:	6013      	str	r3, [r2, #0]
}
 800f098:	bf00      	nop
 800f09a:	3714      	adds	r7, #20
 800f09c:	46bd      	mov	sp, r7
 800f09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a2:	4770      	bx	lr
 800f0a4:	20001204 	.word	0x20001204
 800f0a8:	200011f0 	.word	0x200011f0
 800f0ac:	200011e4 	.word	0x200011e4
 800f0b0:	20000d0c 	.word	0x20000d0c
 800f0b4:	20000d08 	.word	0x20000d08
 800f0b8:	2000004c 	.word	0x2000004c

0800f0bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b084      	sub	sp, #16
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
 800f0c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d10a      	bne.n	800f0e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0d0:	f383 8811 	msr	BASEPRI, r3
 800f0d4:	f3bf 8f6f 	isb	sy
 800f0d8:	f3bf 8f4f 	dsb	sy
 800f0dc:	60fb      	str	r3, [r7, #12]
}
 800f0de:	bf00      	nop
 800f0e0:	e7fe      	b.n	800f0e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f0e2:	4b07      	ldr	r3, [pc, #28]	; (800f100 <vTaskPlaceOnEventList+0x44>)
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	3318      	adds	r3, #24
 800f0e8:	4619      	mov	r1, r3
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	f7fe fdef 	bl	800dcce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f0f0:	2101      	movs	r1, #1
 800f0f2:	6838      	ldr	r0, [r7, #0]
 800f0f4:	f000 fa90 	bl	800f618 <prvAddCurrentTaskToDelayedList>
}
 800f0f8:	bf00      	nop
 800f0fa:	3710      	adds	r7, #16
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	bd80      	pop	{r7, pc}
 800f100:	20000d08 	.word	0x20000d08

0800f104 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f104:	b580      	push	{r7, lr}
 800f106:	b086      	sub	sp, #24
 800f108:	af00      	add	r7, sp, #0
 800f10a:	60f8      	str	r0, [r7, #12]
 800f10c:	60b9      	str	r1, [r7, #8]
 800f10e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d10a      	bne.n	800f12c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f11a:	f383 8811 	msr	BASEPRI, r3
 800f11e:	f3bf 8f6f 	isb	sy
 800f122:	f3bf 8f4f 	dsb	sy
 800f126:	617b      	str	r3, [r7, #20]
}
 800f128:	bf00      	nop
 800f12a:	e7fe      	b.n	800f12a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f12c:	4b0a      	ldr	r3, [pc, #40]	; (800f158 <vTaskPlaceOnEventListRestricted+0x54>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	3318      	adds	r3, #24
 800f132:	4619      	mov	r1, r3
 800f134:	68f8      	ldr	r0, [r7, #12]
 800f136:	f7fe fda6 	bl	800dc86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d002      	beq.n	800f146 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f140:	f04f 33ff 	mov.w	r3, #4294967295
 800f144:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f146:	6879      	ldr	r1, [r7, #4]
 800f148:	68b8      	ldr	r0, [r7, #8]
 800f14a:	f000 fa65 	bl	800f618 <prvAddCurrentTaskToDelayedList>
	}
 800f14e:	bf00      	nop
 800f150:	3718      	adds	r7, #24
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}
 800f156:	bf00      	nop
 800f158:	20000d08 	.word	0x20000d08

0800f15c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b086      	sub	sp, #24
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	68db      	ldr	r3, [r3, #12]
 800f168:	68db      	ldr	r3, [r3, #12]
 800f16a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f16c:	693b      	ldr	r3, [r7, #16]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d10a      	bne.n	800f188 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f176:	f383 8811 	msr	BASEPRI, r3
 800f17a:	f3bf 8f6f 	isb	sy
 800f17e:	f3bf 8f4f 	dsb	sy
 800f182:	60fb      	str	r3, [r7, #12]
}
 800f184:	bf00      	nop
 800f186:	e7fe      	b.n	800f186 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f188:	693b      	ldr	r3, [r7, #16]
 800f18a:	3318      	adds	r3, #24
 800f18c:	4618      	mov	r0, r3
 800f18e:	f7fe fdd7 	bl	800dd40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f192:	4b1e      	ldr	r3, [pc, #120]	; (800f20c <xTaskRemoveFromEventList+0xb0>)
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d11d      	bne.n	800f1d6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f19a:	693b      	ldr	r3, [r7, #16]
 800f19c:	3304      	adds	r3, #4
 800f19e:	4618      	mov	r0, r3
 800f1a0:	f7fe fdce 	bl	800dd40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f1a4:	693b      	ldr	r3, [r7, #16]
 800f1a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1a8:	4b19      	ldr	r3, [pc, #100]	; (800f210 <xTaskRemoveFromEventList+0xb4>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	429a      	cmp	r2, r3
 800f1ae:	d903      	bls.n	800f1b8 <xTaskRemoveFromEventList+0x5c>
 800f1b0:	693b      	ldr	r3, [r7, #16]
 800f1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1b4:	4a16      	ldr	r2, [pc, #88]	; (800f210 <xTaskRemoveFromEventList+0xb4>)
 800f1b6:	6013      	str	r3, [r2, #0]
 800f1b8:	693b      	ldr	r3, [r7, #16]
 800f1ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1bc:	4613      	mov	r3, r2
 800f1be:	009b      	lsls	r3, r3, #2
 800f1c0:	4413      	add	r3, r2
 800f1c2:	009b      	lsls	r3, r3, #2
 800f1c4:	4a13      	ldr	r2, [pc, #76]	; (800f214 <xTaskRemoveFromEventList+0xb8>)
 800f1c6:	441a      	add	r2, r3
 800f1c8:	693b      	ldr	r3, [r7, #16]
 800f1ca:	3304      	adds	r3, #4
 800f1cc:	4619      	mov	r1, r3
 800f1ce:	4610      	mov	r0, r2
 800f1d0:	f7fe fd59 	bl	800dc86 <vListInsertEnd>
 800f1d4:	e005      	b.n	800f1e2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f1d6:	693b      	ldr	r3, [r7, #16]
 800f1d8:	3318      	adds	r3, #24
 800f1da:	4619      	mov	r1, r3
 800f1dc:	480e      	ldr	r0, [pc, #56]	; (800f218 <xTaskRemoveFromEventList+0xbc>)
 800f1de:	f7fe fd52 	bl	800dc86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f1e2:	693b      	ldr	r3, [r7, #16]
 800f1e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1e6:	4b0d      	ldr	r3, [pc, #52]	; (800f21c <xTaskRemoveFromEventList+0xc0>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1ec:	429a      	cmp	r2, r3
 800f1ee:	d905      	bls.n	800f1fc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f1f0:	2301      	movs	r3, #1
 800f1f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f1f4:	4b0a      	ldr	r3, [pc, #40]	; (800f220 <xTaskRemoveFromEventList+0xc4>)
 800f1f6:	2201      	movs	r2, #1
 800f1f8:	601a      	str	r2, [r3, #0]
 800f1fa:	e001      	b.n	800f200 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f200:	697b      	ldr	r3, [r7, #20]
}
 800f202:	4618      	mov	r0, r3
 800f204:	3718      	adds	r7, #24
 800f206:	46bd      	mov	sp, r7
 800f208:	bd80      	pop	{r7, pc}
 800f20a:	bf00      	nop
 800f20c:	20001204 	.word	0x20001204
 800f210:	200011e4 	.word	0x200011e4
 800f214:	20000d0c 	.word	0x20000d0c
 800f218:	2000119c 	.word	0x2000119c
 800f21c:	20000d08 	.word	0x20000d08
 800f220:	200011f0 	.word	0x200011f0

0800f224 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f224:	b480      	push	{r7}
 800f226:	b083      	sub	sp, #12
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f22c:	4b06      	ldr	r3, [pc, #24]	; (800f248 <vTaskInternalSetTimeOutState+0x24>)
 800f22e:	681a      	ldr	r2, [r3, #0]
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f234:	4b05      	ldr	r3, [pc, #20]	; (800f24c <vTaskInternalSetTimeOutState+0x28>)
 800f236:	681a      	ldr	r2, [r3, #0]
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	605a      	str	r2, [r3, #4]
}
 800f23c:	bf00      	nop
 800f23e:	370c      	adds	r7, #12
 800f240:	46bd      	mov	sp, r7
 800f242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f246:	4770      	bx	lr
 800f248:	200011f4 	.word	0x200011f4
 800f24c:	200011e0 	.word	0x200011e0

0800f250 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b088      	sub	sp, #32
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
 800f258:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d10a      	bne.n	800f276 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f264:	f383 8811 	msr	BASEPRI, r3
 800f268:	f3bf 8f6f 	isb	sy
 800f26c:	f3bf 8f4f 	dsb	sy
 800f270:	613b      	str	r3, [r7, #16]
}
 800f272:	bf00      	nop
 800f274:	e7fe      	b.n	800f274 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f276:	683b      	ldr	r3, [r7, #0]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d10a      	bne.n	800f292 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f280:	f383 8811 	msr	BASEPRI, r3
 800f284:	f3bf 8f6f 	isb	sy
 800f288:	f3bf 8f4f 	dsb	sy
 800f28c:	60fb      	str	r3, [r7, #12]
}
 800f28e:	bf00      	nop
 800f290:	e7fe      	b.n	800f290 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f292:	f000 fe8f 	bl	800ffb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f296:	4b1d      	ldr	r3, [pc, #116]	; (800f30c <xTaskCheckForTimeOut+0xbc>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	685b      	ldr	r3, [r3, #4]
 800f2a0:	69ba      	ldr	r2, [r7, #24]
 800f2a2:	1ad3      	subs	r3, r2, r3
 800f2a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f2a6:	683b      	ldr	r3, [r7, #0]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2ae:	d102      	bne.n	800f2b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	61fb      	str	r3, [r7, #28]
 800f2b4:	e023      	b.n	800f2fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681a      	ldr	r2, [r3, #0]
 800f2ba:	4b15      	ldr	r3, [pc, #84]	; (800f310 <xTaskCheckForTimeOut+0xc0>)
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	429a      	cmp	r2, r3
 800f2c0:	d007      	beq.n	800f2d2 <xTaskCheckForTimeOut+0x82>
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	685b      	ldr	r3, [r3, #4]
 800f2c6:	69ba      	ldr	r2, [r7, #24]
 800f2c8:	429a      	cmp	r2, r3
 800f2ca:	d302      	bcc.n	800f2d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f2cc:	2301      	movs	r3, #1
 800f2ce:	61fb      	str	r3, [r7, #28]
 800f2d0:	e015      	b.n	800f2fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	697a      	ldr	r2, [r7, #20]
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	d20b      	bcs.n	800f2f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	681a      	ldr	r2, [r3, #0]
 800f2e0:	697b      	ldr	r3, [r7, #20]
 800f2e2:	1ad2      	subs	r2, r2, r3
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	f7ff ff9b 	bl	800f224 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	61fb      	str	r3, [r7, #28]
 800f2f2:	e004      	b.n	800f2fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f2fa:	2301      	movs	r3, #1
 800f2fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f2fe:	f000 fe89 	bl	8010014 <vPortExitCritical>

	return xReturn;
 800f302:	69fb      	ldr	r3, [r7, #28]
}
 800f304:	4618      	mov	r0, r3
 800f306:	3720      	adds	r7, #32
 800f308:	46bd      	mov	sp, r7
 800f30a:	bd80      	pop	{r7, pc}
 800f30c:	200011e0 	.word	0x200011e0
 800f310:	200011f4 	.word	0x200011f4

0800f314 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f314:	b480      	push	{r7}
 800f316:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f318:	4b03      	ldr	r3, [pc, #12]	; (800f328 <vTaskMissedYield+0x14>)
 800f31a:	2201      	movs	r2, #1
 800f31c:	601a      	str	r2, [r3, #0]
}
 800f31e:	bf00      	nop
 800f320:	46bd      	mov	sp, r7
 800f322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f326:	4770      	bx	lr
 800f328:	200011f0 	.word	0x200011f0

0800f32c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b082      	sub	sp, #8
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f334:	f000 f852 	bl	800f3dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f338:	4b06      	ldr	r3, [pc, #24]	; (800f354 <prvIdleTask+0x28>)
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	2b01      	cmp	r3, #1
 800f33e:	d9f9      	bls.n	800f334 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f340:	4b05      	ldr	r3, [pc, #20]	; (800f358 <prvIdleTask+0x2c>)
 800f342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f346:	601a      	str	r2, [r3, #0]
 800f348:	f3bf 8f4f 	dsb	sy
 800f34c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f350:	e7f0      	b.n	800f334 <prvIdleTask+0x8>
 800f352:	bf00      	nop
 800f354:	20000d0c 	.word	0x20000d0c
 800f358:	e000ed04 	.word	0xe000ed04

0800f35c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b082      	sub	sp, #8
 800f360:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f362:	2300      	movs	r3, #0
 800f364:	607b      	str	r3, [r7, #4]
 800f366:	e00c      	b.n	800f382 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f368:	687a      	ldr	r2, [r7, #4]
 800f36a:	4613      	mov	r3, r2
 800f36c:	009b      	lsls	r3, r3, #2
 800f36e:	4413      	add	r3, r2
 800f370:	009b      	lsls	r3, r3, #2
 800f372:	4a12      	ldr	r2, [pc, #72]	; (800f3bc <prvInitialiseTaskLists+0x60>)
 800f374:	4413      	add	r3, r2
 800f376:	4618      	mov	r0, r3
 800f378:	f7fe fc58 	bl	800dc2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	3301      	adds	r3, #1
 800f380:	607b      	str	r3, [r7, #4]
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	2b37      	cmp	r3, #55	; 0x37
 800f386:	d9ef      	bls.n	800f368 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f388:	480d      	ldr	r0, [pc, #52]	; (800f3c0 <prvInitialiseTaskLists+0x64>)
 800f38a:	f7fe fc4f 	bl	800dc2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f38e:	480d      	ldr	r0, [pc, #52]	; (800f3c4 <prvInitialiseTaskLists+0x68>)
 800f390:	f7fe fc4c 	bl	800dc2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f394:	480c      	ldr	r0, [pc, #48]	; (800f3c8 <prvInitialiseTaskLists+0x6c>)
 800f396:	f7fe fc49 	bl	800dc2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f39a:	480c      	ldr	r0, [pc, #48]	; (800f3cc <prvInitialiseTaskLists+0x70>)
 800f39c:	f7fe fc46 	bl	800dc2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f3a0:	480b      	ldr	r0, [pc, #44]	; (800f3d0 <prvInitialiseTaskLists+0x74>)
 800f3a2:	f7fe fc43 	bl	800dc2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f3a6:	4b0b      	ldr	r3, [pc, #44]	; (800f3d4 <prvInitialiseTaskLists+0x78>)
 800f3a8:	4a05      	ldr	r2, [pc, #20]	; (800f3c0 <prvInitialiseTaskLists+0x64>)
 800f3aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f3ac:	4b0a      	ldr	r3, [pc, #40]	; (800f3d8 <prvInitialiseTaskLists+0x7c>)
 800f3ae:	4a05      	ldr	r2, [pc, #20]	; (800f3c4 <prvInitialiseTaskLists+0x68>)
 800f3b0:	601a      	str	r2, [r3, #0]
}
 800f3b2:	bf00      	nop
 800f3b4:	3708      	adds	r7, #8
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	bd80      	pop	{r7, pc}
 800f3ba:	bf00      	nop
 800f3bc:	20000d0c 	.word	0x20000d0c
 800f3c0:	2000116c 	.word	0x2000116c
 800f3c4:	20001180 	.word	0x20001180
 800f3c8:	2000119c 	.word	0x2000119c
 800f3cc:	200011b0 	.word	0x200011b0
 800f3d0:	200011c8 	.word	0x200011c8
 800f3d4:	20001194 	.word	0x20001194
 800f3d8:	20001198 	.word	0x20001198

0800f3dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b082      	sub	sp, #8
 800f3e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f3e2:	e019      	b.n	800f418 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f3e4:	f000 fde6 	bl	800ffb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3e8:	4b10      	ldr	r3, [pc, #64]	; (800f42c <prvCheckTasksWaitingTermination+0x50>)
 800f3ea:	68db      	ldr	r3, [r3, #12]
 800f3ec:	68db      	ldr	r3, [r3, #12]
 800f3ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	3304      	adds	r3, #4
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f7fe fca3 	bl	800dd40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f3fa:	4b0d      	ldr	r3, [pc, #52]	; (800f430 <prvCheckTasksWaitingTermination+0x54>)
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	3b01      	subs	r3, #1
 800f400:	4a0b      	ldr	r2, [pc, #44]	; (800f430 <prvCheckTasksWaitingTermination+0x54>)
 800f402:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f404:	4b0b      	ldr	r3, [pc, #44]	; (800f434 <prvCheckTasksWaitingTermination+0x58>)
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	3b01      	subs	r3, #1
 800f40a:	4a0a      	ldr	r2, [pc, #40]	; (800f434 <prvCheckTasksWaitingTermination+0x58>)
 800f40c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f40e:	f000 fe01 	bl	8010014 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f412:	6878      	ldr	r0, [r7, #4]
 800f414:	f000 f810 	bl	800f438 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f418:	4b06      	ldr	r3, [pc, #24]	; (800f434 <prvCheckTasksWaitingTermination+0x58>)
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d1e1      	bne.n	800f3e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f420:	bf00      	nop
 800f422:	bf00      	nop
 800f424:	3708      	adds	r7, #8
 800f426:	46bd      	mov	sp, r7
 800f428:	bd80      	pop	{r7, pc}
 800f42a:	bf00      	nop
 800f42c:	200011b0 	.word	0x200011b0
 800f430:	200011dc 	.word	0x200011dc
 800f434:	200011c4 	.word	0x200011c4

0800f438 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b084      	sub	sp, #16
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	3354      	adds	r3, #84	; 0x54
 800f444:	4618      	mov	r0, r3
 800f446:	f003 f9d1 	bl	80127ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f450:	2b00      	cmp	r3, #0
 800f452:	d108      	bne.n	800f466 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f458:	4618      	mov	r0, r3
 800f45a:	f000 ff99 	bl	8010390 <vPortFree>
				vPortFree( pxTCB );
 800f45e:	6878      	ldr	r0, [r7, #4]
 800f460:	f000 ff96 	bl	8010390 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f464:	e018      	b.n	800f498 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f46c:	2b01      	cmp	r3, #1
 800f46e:	d103      	bne.n	800f478 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	f000 ff8d 	bl	8010390 <vPortFree>
	}
 800f476:	e00f      	b.n	800f498 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f47e:	2b02      	cmp	r3, #2
 800f480:	d00a      	beq.n	800f498 <prvDeleteTCB+0x60>
	__asm volatile
 800f482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f486:	f383 8811 	msr	BASEPRI, r3
 800f48a:	f3bf 8f6f 	isb	sy
 800f48e:	f3bf 8f4f 	dsb	sy
 800f492:	60fb      	str	r3, [r7, #12]
}
 800f494:	bf00      	nop
 800f496:	e7fe      	b.n	800f496 <prvDeleteTCB+0x5e>
	}
 800f498:	bf00      	nop
 800f49a:	3710      	adds	r7, #16
 800f49c:	46bd      	mov	sp, r7
 800f49e:	bd80      	pop	{r7, pc}

0800f4a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f4a0:	b480      	push	{r7}
 800f4a2:	b083      	sub	sp, #12
 800f4a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f4a6:	4b0c      	ldr	r3, [pc, #48]	; (800f4d8 <prvResetNextTaskUnblockTime+0x38>)
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d104      	bne.n	800f4ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f4b0:	4b0a      	ldr	r3, [pc, #40]	; (800f4dc <prvResetNextTaskUnblockTime+0x3c>)
 800f4b2:	f04f 32ff 	mov.w	r2, #4294967295
 800f4b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f4b8:	e008      	b.n	800f4cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f4ba:	4b07      	ldr	r3, [pc, #28]	; (800f4d8 <prvResetNextTaskUnblockTime+0x38>)
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	68db      	ldr	r3, [r3, #12]
 800f4c0:	68db      	ldr	r3, [r3, #12]
 800f4c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	685b      	ldr	r3, [r3, #4]
 800f4c8:	4a04      	ldr	r2, [pc, #16]	; (800f4dc <prvResetNextTaskUnblockTime+0x3c>)
 800f4ca:	6013      	str	r3, [r2, #0]
}
 800f4cc:	bf00      	nop
 800f4ce:	370c      	adds	r7, #12
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d6:	4770      	bx	lr
 800f4d8:	20001194 	.word	0x20001194
 800f4dc:	200011fc 	.word	0x200011fc

0800f4e0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800f4e0:	b480      	push	{r7}
 800f4e2:	b083      	sub	sp, #12
 800f4e4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800f4e6:	4b05      	ldr	r3, [pc, #20]	; (800f4fc <xTaskGetCurrentTaskHandle+0x1c>)
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	607b      	str	r3, [r7, #4]

		return xReturn;
 800f4ec:	687b      	ldr	r3, [r7, #4]
	}
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	370c      	adds	r7, #12
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f8:	4770      	bx	lr
 800f4fa:	bf00      	nop
 800f4fc:	20000d08 	.word	0x20000d08

0800f500 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f500:	b480      	push	{r7}
 800f502:	b083      	sub	sp, #12
 800f504:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f506:	4b0b      	ldr	r3, [pc, #44]	; (800f534 <xTaskGetSchedulerState+0x34>)
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d102      	bne.n	800f514 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f50e:	2301      	movs	r3, #1
 800f510:	607b      	str	r3, [r7, #4]
 800f512:	e008      	b.n	800f526 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f514:	4b08      	ldr	r3, [pc, #32]	; (800f538 <xTaskGetSchedulerState+0x38>)
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d102      	bne.n	800f522 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f51c:	2302      	movs	r3, #2
 800f51e:	607b      	str	r3, [r7, #4]
 800f520:	e001      	b.n	800f526 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f522:	2300      	movs	r3, #0
 800f524:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f526:	687b      	ldr	r3, [r7, #4]
	}
 800f528:	4618      	mov	r0, r3
 800f52a:	370c      	adds	r7, #12
 800f52c:	46bd      	mov	sp, r7
 800f52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f532:	4770      	bx	lr
 800f534:	200011e8 	.word	0x200011e8
 800f538:	20001204 	.word	0x20001204

0800f53c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b086      	sub	sp, #24
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f548:	2300      	movs	r3, #0
 800f54a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d056      	beq.n	800f600 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f552:	4b2e      	ldr	r3, [pc, #184]	; (800f60c <xTaskPriorityDisinherit+0xd0>)
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	693a      	ldr	r2, [r7, #16]
 800f558:	429a      	cmp	r2, r3
 800f55a:	d00a      	beq.n	800f572 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f560:	f383 8811 	msr	BASEPRI, r3
 800f564:	f3bf 8f6f 	isb	sy
 800f568:	f3bf 8f4f 	dsb	sy
 800f56c:	60fb      	str	r3, [r7, #12]
}
 800f56e:	bf00      	nop
 800f570:	e7fe      	b.n	800f570 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f572:	693b      	ldr	r3, [r7, #16]
 800f574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f576:	2b00      	cmp	r3, #0
 800f578:	d10a      	bne.n	800f590 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f57e:	f383 8811 	msr	BASEPRI, r3
 800f582:	f3bf 8f6f 	isb	sy
 800f586:	f3bf 8f4f 	dsb	sy
 800f58a:	60bb      	str	r3, [r7, #8]
}
 800f58c:	bf00      	nop
 800f58e:	e7fe      	b.n	800f58e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f590:	693b      	ldr	r3, [r7, #16]
 800f592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f594:	1e5a      	subs	r2, r3, #1
 800f596:	693b      	ldr	r3, [r7, #16]
 800f598:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f59a:	693b      	ldr	r3, [r7, #16]
 800f59c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f59e:	693b      	ldr	r3, [r7, #16]
 800f5a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f5a2:	429a      	cmp	r2, r3
 800f5a4:	d02c      	beq.n	800f600 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f5a6:	693b      	ldr	r3, [r7, #16]
 800f5a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d128      	bne.n	800f600 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f5ae:	693b      	ldr	r3, [r7, #16]
 800f5b0:	3304      	adds	r3, #4
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	f7fe fbc4 	bl	800dd40 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f5b8:	693b      	ldr	r3, [r7, #16]
 800f5ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f5bc:	693b      	ldr	r3, [r7, #16]
 800f5be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f5c0:	693b      	ldr	r3, [r7, #16]
 800f5c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f5c8:	693b      	ldr	r3, [r7, #16]
 800f5ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f5cc:	693b      	ldr	r3, [r7, #16]
 800f5ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5d0:	4b0f      	ldr	r3, [pc, #60]	; (800f610 <xTaskPriorityDisinherit+0xd4>)
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	429a      	cmp	r2, r3
 800f5d6:	d903      	bls.n	800f5e0 <xTaskPriorityDisinherit+0xa4>
 800f5d8:	693b      	ldr	r3, [r7, #16]
 800f5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5dc:	4a0c      	ldr	r2, [pc, #48]	; (800f610 <xTaskPriorityDisinherit+0xd4>)
 800f5de:	6013      	str	r3, [r2, #0]
 800f5e0:	693b      	ldr	r3, [r7, #16]
 800f5e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5e4:	4613      	mov	r3, r2
 800f5e6:	009b      	lsls	r3, r3, #2
 800f5e8:	4413      	add	r3, r2
 800f5ea:	009b      	lsls	r3, r3, #2
 800f5ec:	4a09      	ldr	r2, [pc, #36]	; (800f614 <xTaskPriorityDisinherit+0xd8>)
 800f5ee:	441a      	add	r2, r3
 800f5f0:	693b      	ldr	r3, [r7, #16]
 800f5f2:	3304      	adds	r3, #4
 800f5f4:	4619      	mov	r1, r3
 800f5f6:	4610      	mov	r0, r2
 800f5f8:	f7fe fb45 	bl	800dc86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f5fc:	2301      	movs	r3, #1
 800f5fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f600:	697b      	ldr	r3, [r7, #20]
	}
 800f602:	4618      	mov	r0, r3
 800f604:	3718      	adds	r7, #24
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}
 800f60a:	bf00      	nop
 800f60c:	20000d08 	.word	0x20000d08
 800f610:	200011e4 	.word	0x200011e4
 800f614:	20000d0c 	.word	0x20000d0c

0800f618 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b084      	sub	sp, #16
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
 800f620:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f622:	4b21      	ldr	r3, [pc, #132]	; (800f6a8 <prvAddCurrentTaskToDelayedList+0x90>)
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f628:	4b20      	ldr	r3, [pc, #128]	; (800f6ac <prvAddCurrentTaskToDelayedList+0x94>)
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	3304      	adds	r3, #4
 800f62e:	4618      	mov	r0, r3
 800f630:	f7fe fb86 	bl	800dd40 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f63a:	d10a      	bne.n	800f652 <prvAddCurrentTaskToDelayedList+0x3a>
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d007      	beq.n	800f652 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f642:	4b1a      	ldr	r3, [pc, #104]	; (800f6ac <prvAddCurrentTaskToDelayedList+0x94>)
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	3304      	adds	r3, #4
 800f648:	4619      	mov	r1, r3
 800f64a:	4819      	ldr	r0, [pc, #100]	; (800f6b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800f64c:	f7fe fb1b 	bl	800dc86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f650:	e026      	b.n	800f6a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f652:	68fa      	ldr	r2, [r7, #12]
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	4413      	add	r3, r2
 800f658:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f65a:	4b14      	ldr	r3, [pc, #80]	; (800f6ac <prvAddCurrentTaskToDelayedList+0x94>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	68ba      	ldr	r2, [r7, #8]
 800f660:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f662:	68ba      	ldr	r2, [r7, #8]
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	429a      	cmp	r2, r3
 800f668:	d209      	bcs.n	800f67e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f66a:	4b12      	ldr	r3, [pc, #72]	; (800f6b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f66c:	681a      	ldr	r2, [r3, #0]
 800f66e:	4b0f      	ldr	r3, [pc, #60]	; (800f6ac <prvAddCurrentTaskToDelayedList+0x94>)
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	3304      	adds	r3, #4
 800f674:	4619      	mov	r1, r3
 800f676:	4610      	mov	r0, r2
 800f678:	f7fe fb29 	bl	800dcce <vListInsert>
}
 800f67c:	e010      	b.n	800f6a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f67e:	4b0e      	ldr	r3, [pc, #56]	; (800f6b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f680:	681a      	ldr	r2, [r3, #0]
 800f682:	4b0a      	ldr	r3, [pc, #40]	; (800f6ac <prvAddCurrentTaskToDelayedList+0x94>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	3304      	adds	r3, #4
 800f688:	4619      	mov	r1, r3
 800f68a:	4610      	mov	r0, r2
 800f68c:	f7fe fb1f 	bl	800dcce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f690:	4b0a      	ldr	r3, [pc, #40]	; (800f6bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	68ba      	ldr	r2, [r7, #8]
 800f696:	429a      	cmp	r2, r3
 800f698:	d202      	bcs.n	800f6a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f69a:	4a08      	ldr	r2, [pc, #32]	; (800f6bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800f69c:	68bb      	ldr	r3, [r7, #8]
 800f69e:	6013      	str	r3, [r2, #0]
}
 800f6a0:	bf00      	nop
 800f6a2:	3710      	adds	r7, #16
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	bd80      	pop	{r7, pc}
 800f6a8:	200011e0 	.word	0x200011e0
 800f6ac:	20000d08 	.word	0x20000d08
 800f6b0:	200011c8 	.word	0x200011c8
 800f6b4:	20001198 	.word	0x20001198
 800f6b8:	20001194 	.word	0x20001194
 800f6bc:	200011fc 	.word	0x200011fc

0800f6c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b08a      	sub	sp, #40	; 0x28
 800f6c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f6ca:	f000 fb07 	bl	800fcdc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f6ce:	4b1c      	ldr	r3, [pc, #112]	; (800f740 <xTimerCreateTimerTask+0x80>)
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d021      	beq.n	800f71a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f6da:	2300      	movs	r3, #0
 800f6dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f6de:	1d3a      	adds	r2, r7, #4
 800f6e0:	f107 0108 	add.w	r1, r7, #8
 800f6e4:	f107 030c 	add.w	r3, r7, #12
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	f7fe fa85 	bl	800dbf8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f6ee:	6879      	ldr	r1, [r7, #4]
 800f6f0:	68bb      	ldr	r3, [r7, #8]
 800f6f2:	68fa      	ldr	r2, [r7, #12]
 800f6f4:	9202      	str	r2, [sp, #8]
 800f6f6:	9301      	str	r3, [sp, #4]
 800f6f8:	2302      	movs	r3, #2
 800f6fa:	9300      	str	r3, [sp, #0]
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	460a      	mov	r2, r1
 800f700:	4910      	ldr	r1, [pc, #64]	; (800f744 <xTimerCreateTimerTask+0x84>)
 800f702:	4811      	ldr	r0, [pc, #68]	; (800f748 <xTimerCreateTimerTask+0x88>)
 800f704:	f7ff f832 	bl	800e76c <xTaskCreateStatic>
 800f708:	4603      	mov	r3, r0
 800f70a:	4a10      	ldr	r2, [pc, #64]	; (800f74c <xTimerCreateTimerTask+0x8c>)
 800f70c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f70e:	4b0f      	ldr	r3, [pc, #60]	; (800f74c <xTimerCreateTimerTask+0x8c>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d001      	beq.n	800f71a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f716:	2301      	movs	r3, #1
 800f718:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f71a:	697b      	ldr	r3, [r7, #20]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d10a      	bne.n	800f736 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f724:	f383 8811 	msr	BASEPRI, r3
 800f728:	f3bf 8f6f 	isb	sy
 800f72c:	f3bf 8f4f 	dsb	sy
 800f730:	613b      	str	r3, [r7, #16]
}
 800f732:	bf00      	nop
 800f734:	e7fe      	b.n	800f734 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f736:	697b      	ldr	r3, [r7, #20]
}
 800f738:	4618      	mov	r0, r3
 800f73a:	3718      	adds	r7, #24
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}
 800f740:	20001238 	.word	0x20001238
 800f744:	0801837c 	.word	0x0801837c
 800f748:	0800f885 	.word	0x0800f885
 800f74c:	2000123c 	.word	0x2000123c

0800f750 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b08a      	sub	sp, #40	; 0x28
 800f754:	af00      	add	r7, sp, #0
 800f756:	60f8      	str	r0, [r7, #12]
 800f758:	60b9      	str	r1, [r7, #8]
 800f75a:	607a      	str	r2, [r7, #4]
 800f75c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f75e:	2300      	movs	r3, #0
 800f760:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d10a      	bne.n	800f77e <xTimerGenericCommand+0x2e>
	__asm volatile
 800f768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f76c:	f383 8811 	msr	BASEPRI, r3
 800f770:	f3bf 8f6f 	isb	sy
 800f774:	f3bf 8f4f 	dsb	sy
 800f778:	623b      	str	r3, [r7, #32]
}
 800f77a:	bf00      	nop
 800f77c:	e7fe      	b.n	800f77c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f77e:	4b1a      	ldr	r3, [pc, #104]	; (800f7e8 <xTimerGenericCommand+0x98>)
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d02a      	beq.n	800f7dc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f786:	68bb      	ldr	r3, [r7, #8]
 800f788:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f792:	68bb      	ldr	r3, [r7, #8]
 800f794:	2b05      	cmp	r3, #5
 800f796:	dc18      	bgt.n	800f7ca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f798:	f7ff feb2 	bl	800f500 <xTaskGetSchedulerState>
 800f79c:	4603      	mov	r3, r0
 800f79e:	2b02      	cmp	r3, #2
 800f7a0:	d109      	bne.n	800f7b6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f7a2:	4b11      	ldr	r3, [pc, #68]	; (800f7e8 <xTimerGenericCommand+0x98>)
 800f7a4:	6818      	ldr	r0, [r3, #0]
 800f7a6:	f107 0110 	add.w	r1, r7, #16
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7ae:	f7fe fbf5 	bl	800df9c <xQueueGenericSend>
 800f7b2:	6278      	str	r0, [r7, #36]	; 0x24
 800f7b4:	e012      	b.n	800f7dc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f7b6:	4b0c      	ldr	r3, [pc, #48]	; (800f7e8 <xTimerGenericCommand+0x98>)
 800f7b8:	6818      	ldr	r0, [r3, #0]
 800f7ba:	f107 0110 	add.w	r1, r7, #16
 800f7be:	2300      	movs	r3, #0
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	f7fe fbeb 	bl	800df9c <xQueueGenericSend>
 800f7c6:	6278      	str	r0, [r7, #36]	; 0x24
 800f7c8:	e008      	b.n	800f7dc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f7ca:	4b07      	ldr	r3, [pc, #28]	; (800f7e8 <xTimerGenericCommand+0x98>)
 800f7cc:	6818      	ldr	r0, [r3, #0]
 800f7ce:	f107 0110 	add.w	r1, r7, #16
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	683a      	ldr	r2, [r7, #0]
 800f7d6:	f7fe fcdf 	bl	800e198 <xQueueGenericSendFromISR>
 800f7da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f7de:	4618      	mov	r0, r3
 800f7e0:	3728      	adds	r7, #40	; 0x28
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}
 800f7e6:	bf00      	nop
 800f7e8:	20001238 	.word	0x20001238

0800f7ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b088      	sub	sp, #32
 800f7f0:	af02      	add	r7, sp, #8
 800f7f2:	6078      	str	r0, [r7, #4]
 800f7f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f7f6:	4b22      	ldr	r3, [pc, #136]	; (800f880 <prvProcessExpiredTimer+0x94>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	68db      	ldr	r3, [r3, #12]
 800f7fc:	68db      	ldr	r3, [r3, #12]
 800f7fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f800:	697b      	ldr	r3, [r7, #20]
 800f802:	3304      	adds	r3, #4
 800f804:	4618      	mov	r0, r3
 800f806:	f7fe fa9b 	bl	800dd40 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f80a:	697b      	ldr	r3, [r7, #20]
 800f80c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f810:	f003 0304 	and.w	r3, r3, #4
 800f814:	2b00      	cmp	r3, #0
 800f816:	d022      	beq.n	800f85e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f818:	697b      	ldr	r3, [r7, #20]
 800f81a:	699a      	ldr	r2, [r3, #24]
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	18d1      	adds	r1, r2, r3
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	683a      	ldr	r2, [r7, #0]
 800f824:	6978      	ldr	r0, [r7, #20]
 800f826:	f000 f8d1 	bl	800f9cc <prvInsertTimerInActiveList>
 800f82a:	4603      	mov	r3, r0
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d01f      	beq.n	800f870 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f830:	2300      	movs	r3, #0
 800f832:	9300      	str	r3, [sp, #0]
 800f834:	2300      	movs	r3, #0
 800f836:	687a      	ldr	r2, [r7, #4]
 800f838:	2100      	movs	r1, #0
 800f83a:	6978      	ldr	r0, [r7, #20]
 800f83c:	f7ff ff88 	bl	800f750 <xTimerGenericCommand>
 800f840:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f842:	693b      	ldr	r3, [r7, #16]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d113      	bne.n	800f870 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f84c:	f383 8811 	msr	BASEPRI, r3
 800f850:	f3bf 8f6f 	isb	sy
 800f854:	f3bf 8f4f 	dsb	sy
 800f858:	60fb      	str	r3, [r7, #12]
}
 800f85a:	bf00      	nop
 800f85c:	e7fe      	b.n	800f85c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f85e:	697b      	ldr	r3, [r7, #20]
 800f860:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f864:	f023 0301 	bic.w	r3, r3, #1
 800f868:	b2da      	uxtb	r2, r3
 800f86a:	697b      	ldr	r3, [r7, #20]
 800f86c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f870:	697b      	ldr	r3, [r7, #20]
 800f872:	6a1b      	ldr	r3, [r3, #32]
 800f874:	6978      	ldr	r0, [r7, #20]
 800f876:	4798      	blx	r3
}
 800f878:	bf00      	nop
 800f87a:	3718      	adds	r7, #24
 800f87c:	46bd      	mov	sp, r7
 800f87e:	bd80      	pop	{r7, pc}
 800f880:	20001230 	.word	0x20001230

0800f884 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b084      	sub	sp, #16
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f88c:	f107 0308 	add.w	r3, r7, #8
 800f890:	4618      	mov	r0, r3
 800f892:	f000 f857 	bl	800f944 <prvGetNextExpireTime>
 800f896:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f898:	68bb      	ldr	r3, [r7, #8]
 800f89a:	4619      	mov	r1, r3
 800f89c:	68f8      	ldr	r0, [r7, #12]
 800f89e:	f000 f803 	bl	800f8a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f8a2:	f000 f8d5 	bl	800fa50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f8a6:	e7f1      	b.n	800f88c <prvTimerTask+0x8>

0800f8a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b084      	sub	sp, #16
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
 800f8b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f8b2:	f7ff fa29 	bl	800ed08 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f8b6:	f107 0308 	add.w	r3, r7, #8
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f000 f866 	bl	800f98c <prvSampleTimeNow>
 800f8c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f8c2:	68bb      	ldr	r3, [r7, #8]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d130      	bne.n	800f92a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f8c8:	683b      	ldr	r3, [r7, #0]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d10a      	bne.n	800f8e4 <prvProcessTimerOrBlockTask+0x3c>
 800f8ce:	687a      	ldr	r2, [r7, #4]
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	429a      	cmp	r2, r3
 800f8d4:	d806      	bhi.n	800f8e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f8d6:	f7ff fa25 	bl	800ed24 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f8da:	68f9      	ldr	r1, [r7, #12]
 800f8dc:	6878      	ldr	r0, [r7, #4]
 800f8de:	f7ff ff85 	bl	800f7ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f8e2:	e024      	b.n	800f92e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f8e4:	683b      	ldr	r3, [r7, #0]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d008      	beq.n	800f8fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f8ea:	4b13      	ldr	r3, [pc, #76]	; (800f938 <prvProcessTimerOrBlockTask+0x90>)
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d101      	bne.n	800f8f8 <prvProcessTimerOrBlockTask+0x50>
 800f8f4:	2301      	movs	r3, #1
 800f8f6:	e000      	b.n	800f8fa <prvProcessTimerOrBlockTask+0x52>
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f8fc:	4b0f      	ldr	r3, [pc, #60]	; (800f93c <prvProcessTimerOrBlockTask+0x94>)
 800f8fe:	6818      	ldr	r0, [r3, #0]
 800f900:	687a      	ldr	r2, [r7, #4]
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	1ad3      	subs	r3, r2, r3
 800f906:	683a      	ldr	r2, [r7, #0]
 800f908:	4619      	mov	r1, r3
 800f90a:	f7fe fefb 	bl	800e704 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f90e:	f7ff fa09 	bl	800ed24 <xTaskResumeAll>
 800f912:	4603      	mov	r3, r0
 800f914:	2b00      	cmp	r3, #0
 800f916:	d10a      	bne.n	800f92e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f918:	4b09      	ldr	r3, [pc, #36]	; (800f940 <prvProcessTimerOrBlockTask+0x98>)
 800f91a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f91e:	601a      	str	r2, [r3, #0]
 800f920:	f3bf 8f4f 	dsb	sy
 800f924:	f3bf 8f6f 	isb	sy
}
 800f928:	e001      	b.n	800f92e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f92a:	f7ff f9fb 	bl	800ed24 <xTaskResumeAll>
}
 800f92e:	bf00      	nop
 800f930:	3710      	adds	r7, #16
 800f932:	46bd      	mov	sp, r7
 800f934:	bd80      	pop	{r7, pc}
 800f936:	bf00      	nop
 800f938:	20001234 	.word	0x20001234
 800f93c:	20001238 	.word	0x20001238
 800f940:	e000ed04 	.word	0xe000ed04

0800f944 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f944:	b480      	push	{r7}
 800f946:	b085      	sub	sp, #20
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f94c:	4b0e      	ldr	r3, [pc, #56]	; (800f988 <prvGetNextExpireTime+0x44>)
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d101      	bne.n	800f95a <prvGetNextExpireTime+0x16>
 800f956:	2201      	movs	r2, #1
 800f958:	e000      	b.n	800f95c <prvGetNextExpireTime+0x18>
 800f95a:	2200      	movs	r2, #0
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d105      	bne.n	800f974 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f968:	4b07      	ldr	r3, [pc, #28]	; (800f988 <prvGetNextExpireTime+0x44>)
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	68db      	ldr	r3, [r3, #12]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	60fb      	str	r3, [r7, #12]
 800f972:	e001      	b.n	800f978 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f974:	2300      	movs	r3, #0
 800f976:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f978:	68fb      	ldr	r3, [r7, #12]
}
 800f97a:	4618      	mov	r0, r3
 800f97c:	3714      	adds	r7, #20
 800f97e:	46bd      	mov	sp, r7
 800f980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f984:	4770      	bx	lr
 800f986:	bf00      	nop
 800f988:	20001230 	.word	0x20001230

0800f98c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b084      	sub	sp, #16
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f994:	f7ff fa64 	bl	800ee60 <xTaskGetTickCount>
 800f998:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f99a:	4b0b      	ldr	r3, [pc, #44]	; (800f9c8 <prvSampleTimeNow+0x3c>)
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	68fa      	ldr	r2, [r7, #12]
 800f9a0:	429a      	cmp	r2, r3
 800f9a2:	d205      	bcs.n	800f9b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f9a4:	f000 f936 	bl	800fc14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	2201      	movs	r2, #1
 800f9ac:	601a      	str	r2, [r3, #0]
 800f9ae:	e002      	b.n	800f9b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f9b6:	4a04      	ldr	r2, [pc, #16]	; (800f9c8 <prvSampleTimeNow+0x3c>)
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
}
 800f9be:	4618      	mov	r0, r3
 800f9c0:	3710      	adds	r7, #16
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	bd80      	pop	{r7, pc}
 800f9c6:	bf00      	nop
 800f9c8:	20001240 	.word	0x20001240

0800f9cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b086      	sub	sp, #24
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	60f8      	str	r0, [r7, #12]
 800f9d4:	60b9      	str	r1, [r7, #8]
 800f9d6:	607a      	str	r2, [r7, #4]
 800f9d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f9da:	2300      	movs	r3, #0
 800f9dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	68ba      	ldr	r2, [r7, #8]
 800f9e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	68fa      	ldr	r2, [r7, #12]
 800f9e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f9ea:	68ba      	ldr	r2, [r7, #8]
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	429a      	cmp	r2, r3
 800f9f0:	d812      	bhi.n	800fa18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f9f2:	687a      	ldr	r2, [r7, #4]
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	1ad2      	subs	r2, r2, r3
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	699b      	ldr	r3, [r3, #24]
 800f9fc:	429a      	cmp	r2, r3
 800f9fe:	d302      	bcc.n	800fa06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fa00:	2301      	movs	r3, #1
 800fa02:	617b      	str	r3, [r7, #20]
 800fa04:	e01b      	b.n	800fa3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fa06:	4b10      	ldr	r3, [pc, #64]	; (800fa48 <prvInsertTimerInActiveList+0x7c>)
 800fa08:	681a      	ldr	r2, [r3, #0]
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	3304      	adds	r3, #4
 800fa0e:	4619      	mov	r1, r3
 800fa10:	4610      	mov	r0, r2
 800fa12:	f7fe f95c 	bl	800dcce <vListInsert>
 800fa16:	e012      	b.n	800fa3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fa18:	687a      	ldr	r2, [r7, #4]
 800fa1a:	683b      	ldr	r3, [r7, #0]
 800fa1c:	429a      	cmp	r2, r3
 800fa1e:	d206      	bcs.n	800fa2e <prvInsertTimerInActiveList+0x62>
 800fa20:	68ba      	ldr	r2, [r7, #8]
 800fa22:	683b      	ldr	r3, [r7, #0]
 800fa24:	429a      	cmp	r2, r3
 800fa26:	d302      	bcc.n	800fa2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fa28:	2301      	movs	r3, #1
 800fa2a:	617b      	str	r3, [r7, #20]
 800fa2c:	e007      	b.n	800fa3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fa2e:	4b07      	ldr	r3, [pc, #28]	; (800fa4c <prvInsertTimerInActiveList+0x80>)
 800fa30:	681a      	ldr	r2, [r3, #0]
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	3304      	adds	r3, #4
 800fa36:	4619      	mov	r1, r3
 800fa38:	4610      	mov	r0, r2
 800fa3a:	f7fe f948 	bl	800dcce <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fa3e:	697b      	ldr	r3, [r7, #20]
}
 800fa40:	4618      	mov	r0, r3
 800fa42:	3718      	adds	r7, #24
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}
 800fa48:	20001234 	.word	0x20001234
 800fa4c:	20001230 	.word	0x20001230

0800fa50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b08e      	sub	sp, #56	; 0x38
 800fa54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fa56:	e0ca      	b.n	800fbee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	da18      	bge.n	800fa90 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fa5e:	1d3b      	adds	r3, r7, #4
 800fa60:	3304      	adds	r3, #4
 800fa62:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fa64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d10a      	bne.n	800fa80 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800fa6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa6e:	f383 8811 	msr	BASEPRI, r3
 800fa72:	f3bf 8f6f 	isb	sy
 800fa76:	f3bf 8f4f 	dsb	sy
 800fa7a:	61fb      	str	r3, [r7, #28]
}
 800fa7c:	bf00      	nop
 800fa7e:	e7fe      	b.n	800fa7e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fa80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa86:	6850      	ldr	r0, [r2, #4]
 800fa88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa8a:	6892      	ldr	r2, [r2, #8]
 800fa8c:	4611      	mov	r1, r2
 800fa8e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	f2c0 80aa 	blt.w	800fbec <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fa9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa9e:	695b      	ldr	r3, [r3, #20]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d004      	beq.n	800faae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800faa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faa6:	3304      	adds	r3, #4
 800faa8:	4618      	mov	r0, r3
 800faaa:	f7fe f949 	bl	800dd40 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800faae:	463b      	mov	r3, r7
 800fab0:	4618      	mov	r0, r3
 800fab2:	f7ff ff6b 	bl	800f98c <prvSampleTimeNow>
 800fab6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	2b09      	cmp	r3, #9
 800fabc:	f200 8097 	bhi.w	800fbee <prvProcessReceivedCommands+0x19e>
 800fac0:	a201      	add	r2, pc, #4	; (adr r2, 800fac8 <prvProcessReceivedCommands+0x78>)
 800fac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fac6:	bf00      	nop
 800fac8:	0800faf1 	.word	0x0800faf1
 800facc:	0800faf1 	.word	0x0800faf1
 800fad0:	0800faf1 	.word	0x0800faf1
 800fad4:	0800fb65 	.word	0x0800fb65
 800fad8:	0800fb79 	.word	0x0800fb79
 800fadc:	0800fbc3 	.word	0x0800fbc3
 800fae0:	0800faf1 	.word	0x0800faf1
 800fae4:	0800faf1 	.word	0x0800faf1
 800fae8:	0800fb65 	.word	0x0800fb65
 800faec:	0800fb79 	.word	0x0800fb79
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800faf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800faf6:	f043 0301 	orr.w	r3, r3, #1
 800fafa:	b2da      	uxtb	r2, r3
 800fafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fafe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fb02:	68ba      	ldr	r2, [r7, #8]
 800fb04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb06:	699b      	ldr	r3, [r3, #24]
 800fb08:	18d1      	adds	r1, r2, r3
 800fb0a:	68bb      	ldr	r3, [r7, #8]
 800fb0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb10:	f7ff ff5c 	bl	800f9cc <prvInsertTimerInActiveList>
 800fb14:	4603      	mov	r3, r0
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d069      	beq.n	800fbee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb1c:	6a1b      	ldr	r3, [r3, #32]
 800fb1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb20:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fb22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb28:	f003 0304 	and.w	r3, r3, #4
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d05e      	beq.n	800fbee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fb30:	68ba      	ldr	r2, [r7, #8]
 800fb32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb34:	699b      	ldr	r3, [r3, #24]
 800fb36:	441a      	add	r2, r3
 800fb38:	2300      	movs	r3, #0
 800fb3a:	9300      	str	r3, [sp, #0]
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	2100      	movs	r1, #0
 800fb40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb42:	f7ff fe05 	bl	800f750 <xTimerGenericCommand>
 800fb46:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fb48:	6a3b      	ldr	r3, [r7, #32]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d14f      	bne.n	800fbee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800fb4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb52:	f383 8811 	msr	BASEPRI, r3
 800fb56:	f3bf 8f6f 	isb	sy
 800fb5a:	f3bf 8f4f 	dsb	sy
 800fb5e:	61bb      	str	r3, [r7, #24]
}
 800fb60:	bf00      	nop
 800fb62:	e7fe      	b.n	800fb62 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fb64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb6a:	f023 0301 	bic.w	r3, r3, #1
 800fb6e:	b2da      	uxtb	r2, r3
 800fb70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800fb76:	e03a      	b.n	800fbee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fb78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb7e:	f043 0301 	orr.w	r3, r3, #1
 800fb82:	b2da      	uxtb	r2, r3
 800fb84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fb8a:	68ba      	ldr	r2, [r7, #8]
 800fb8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb8e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fb90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb92:	699b      	ldr	r3, [r3, #24]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d10a      	bne.n	800fbae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800fb98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb9c:	f383 8811 	msr	BASEPRI, r3
 800fba0:	f3bf 8f6f 	isb	sy
 800fba4:	f3bf 8f4f 	dsb	sy
 800fba8:	617b      	str	r3, [r7, #20]
}
 800fbaa:	bf00      	nop
 800fbac:	e7fe      	b.n	800fbac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fbae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbb0:	699a      	ldr	r2, [r3, #24]
 800fbb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbb4:	18d1      	adds	r1, r2, r3
 800fbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fbba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fbbc:	f7ff ff06 	bl	800f9cc <prvInsertTimerInActiveList>
					break;
 800fbc0:	e015      	b.n	800fbee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fbc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fbc8:	f003 0302 	and.w	r3, r3, #2
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d103      	bne.n	800fbd8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800fbd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fbd2:	f000 fbdd 	bl	8010390 <vPortFree>
 800fbd6:	e00a      	b.n	800fbee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fbd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fbde:	f023 0301 	bic.w	r3, r3, #1
 800fbe2:	b2da      	uxtb	r2, r3
 800fbe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbe6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fbea:	e000      	b.n	800fbee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800fbec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fbee:	4b08      	ldr	r3, [pc, #32]	; (800fc10 <prvProcessReceivedCommands+0x1c0>)
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	1d39      	adds	r1, r7, #4
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	f7fe fb6a 	bl	800e2d0 <xQueueReceive>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	f47f af2a 	bne.w	800fa58 <prvProcessReceivedCommands+0x8>
	}
}
 800fc04:	bf00      	nop
 800fc06:	bf00      	nop
 800fc08:	3730      	adds	r7, #48	; 0x30
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	bd80      	pop	{r7, pc}
 800fc0e:	bf00      	nop
 800fc10:	20001238 	.word	0x20001238

0800fc14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b088      	sub	sp, #32
 800fc18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fc1a:	e048      	b.n	800fcae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fc1c:	4b2d      	ldr	r3, [pc, #180]	; (800fcd4 <prvSwitchTimerLists+0xc0>)
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	68db      	ldr	r3, [r3, #12]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc26:	4b2b      	ldr	r3, [pc, #172]	; (800fcd4 <prvSwitchTimerLists+0xc0>)
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	68db      	ldr	r3, [r3, #12]
 800fc2c:	68db      	ldr	r3, [r3, #12]
 800fc2e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	3304      	adds	r3, #4
 800fc34:	4618      	mov	r0, r3
 800fc36:	f7fe f883 	bl	800dd40 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	6a1b      	ldr	r3, [r3, #32]
 800fc3e:	68f8      	ldr	r0, [r7, #12]
 800fc40:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc48:	f003 0304 	and.w	r3, r3, #4
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d02e      	beq.n	800fcae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	699b      	ldr	r3, [r3, #24]
 800fc54:	693a      	ldr	r2, [r7, #16]
 800fc56:	4413      	add	r3, r2
 800fc58:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fc5a:	68ba      	ldr	r2, [r7, #8]
 800fc5c:	693b      	ldr	r3, [r7, #16]
 800fc5e:	429a      	cmp	r2, r3
 800fc60:	d90e      	bls.n	800fc80 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	68ba      	ldr	r2, [r7, #8]
 800fc66:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	68fa      	ldr	r2, [r7, #12]
 800fc6c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fc6e:	4b19      	ldr	r3, [pc, #100]	; (800fcd4 <prvSwitchTimerLists+0xc0>)
 800fc70:	681a      	ldr	r2, [r3, #0]
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	3304      	adds	r3, #4
 800fc76:	4619      	mov	r1, r3
 800fc78:	4610      	mov	r0, r2
 800fc7a:	f7fe f828 	bl	800dcce <vListInsert>
 800fc7e:	e016      	b.n	800fcae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fc80:	2300      	movs	r3, #0
 800fc82:	9300      	str	r3, [sp, #0]
 800fc84:	2300      	movs	r3, #0
 800fc86:	693a      	ldr	r2, [r7, #16]
 800fc88:	2100      	movs	r1, #0
 800fc8a:	68f8      	ldr	r0, [r7, #12]
 800fc8c:	f7ff fd60 	bl	800f750 <xTimerGenericCommand>
 800fc90:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d10a      	bne.n	800fcae <prvSwitchTimerLists+0x9a>
	__asm volatile
 800fc98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc9c:	f383 8811 	msr	BASEPRI, r3
 800fca0:	f3bf 8f6f 	isb	sy
 800fca4:	f3bf 8f4f 	dsb	sy
 800fca8:	603b      	str	r3, [r7, #0]
}
 800fcaa:	bf00      	nop
 800fcac:	e7fe      	b.n	800fcac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fcae:	4b09      	ldr	r3, [pc, #36]	; (800fcd4 <prvSwitchTimerLists+0xc0>)
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d1b1      	bne.n	800fc1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fcb8:	4b06      	ldr	r3, [pc, #24]	; (800fcd4 <prvSwitchTimerLists+0xc0>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fcbe:	4b06      	ldr	r3, [pc, #24]	; (800fcd8 <prvSwitchTimerLists+0xc4>)
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	4a04      	ldr	r2, [pc, #16]	; (800fcd4 <prvSwitchTimerLists+0xc0>)
 800fcc4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fcc6:	4a04      	ldr	r2, [pc, #16]	; (800fcd8 <prvSwitchTimerLists+0xc4>)
 800fcc8:	697b      	ldr	r3, [r7, #20]
 800fcca:	6013      	str	r3, [r2, #0]
}
 800fccc:	bf00      	nop
 800fcce:	3718      	adds	r7, #24
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	bd80      	pop	{r7, pc}
 800fcd4:	20001230 	.word	0x20001230
 800fcd8:	20001234 	.word	0x20001234

0800fcdc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b082      	sub	sp, #8
 800fce0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fce2:	f000 f967 	bl	800ffb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fce6:	4b15      	ldr	r3, [pc, #84]	; (800fd3c <prvCheckForValidListAndQueue+0x60>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d120      	bne.n	800fd30 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fcee:	4814      	ldr	r0, [pc, #80]	; (800fd40 <prvCheckForValidListAndQueue+0x64>)
 800fcf0:	f7fd ff9c 	bl	800dc2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fcf4:	4813      	ldr	r0, [pc, #76]	; (800fd44 <prvCheckForValidListAndQueue+0x68>)
 800fcf6:	f7fd ff99 	bl	800dc2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fcfa:	4b13      	ldr	r3, [pc, #76]	; (800fd48 <prvCheckForValidListAndQueue+0x6c>)
 800fcfc:	4a10      	ldr	r2, [pc, #64]	; (800fd40 <prvCheckForValidListAndQueue+0x64>)
 800fcfe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fd00:	4b12      	ldr	r3, [pc, #72]	; (800fd4c <prvCheckForValidListAndQueue+0x70>)
 800fd02:	4a10      	ldr	r2, [pc, #64]	; (800fd44 <prvCheckForValidListAndQueue+0x68>)
 800fd04:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fd06:	2300      	movs	r3, #0
 800fd08:	9300      	str	r3, [sp, #0]
 800fd0a:	4b11      	ldr	r3, [pc, #68]	; (800fd50 <prvCheckForValidListAndQueue+0x74>)
 800fd0c:	4a11      	ldr	r2, [pc, #68]	; (800fd54 <prvCheckForValidListAndQueue+0x78>)
 800fd0e:	2110      	movs	r1, #16
 800fd10:	200a      	movs	r0, #10
 800fd12:	f7fe f8a7 	bl	800de64 <xQueueGenericCreateStatic>
 800fd16:	4603      	mov	r3, r0
 800fd18:	4a08      	ldr	r2, [pc, #32]	; (800fd3c <prvCheckForValidListAndQueue+0x60>)
 800fd1a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fd1c:	4b07      	ldr	r3, [pc, #28]	; (800fd3c <prvCheckForValidListAndQueue+0x60>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d005      	beq.n	800fd30 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fd24:	4b05      	ldr	r3, [pc, #20]	; (800fd3c <prvCheckForValidListAndQueue+0x60>)
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	490b      	ldr	r1, [pc, #44]	; (800fd58 <prvCheckForValidListAndQueue+0x7c>)
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	f7fe fcc0 	bl	800e6b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fd30:	f000 f970 	bl	8010014 <vPortExitCritical>
}
 800fd34:	bf00      	nop
 800fd36:	46bd      	mov	sp, r7
 800fd38:	bd80      	pop	{r7, pc}
 800fd3a:	bf00      	nop
 800fd3c:	20001238 	.word	0x20001238
 800fd40:	20001208 	.word	0x20001208
 800fd44:	2000121c 	.word	0x2000121c
 800fd48:	20001230 	.word	0x20001230
 800fd4c:	20001234 	.word	0x20001234
 800fd50:	200012e4 	.word	0x200012e4
 800fd54:	20001244 	.word	0x20001244
 800fd58:	08018384 	.word	0x08018384

0800fd5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fd5c:	b480      	push	{r7}
 800fd5e:	b085      	sub	sp, #20
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	60f8      	str	r0, [r7, #12]
 800fd64:	60b9      	str	r1, [r7, #8]
 800fd66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	3b04      	subs	r3, #4
 800fd6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fd74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	3b04      	subs	r3, #4
 800fd7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fd7c:	68bb      	ldr	r3, [r7, #8]
 800fd7e:	f023 0201 	bic.w	r2, r3, #1
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	3b04      	subs	r3, #4
 800fd8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fd8c:	4a0c      	ldr	r2, [pc, #48]	; (800fdc0 <pxPortInitialiseStack+0x64>)
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	3b14      	subs	r3, #20
 800fd96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fd98:	687a      	ldr	r2, [r7, #4]
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	3b04      	subs	r3, #4
 800fda2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	f06f 0202 	mvn.w	r2, #2
 800fdaa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	3b20      	subs	r3, #32
 800fdb0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fdb2:	68fb      	ldr	r3, [r7, #12]
}
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	3714      	adds	r7, #20
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdbe:	4770      	bx	lr
 800fdc0:	0800fdc5 	.word	0x0800fdc5

0800fdc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fdc4:	b480      	push	{r7}
 800fdc6:	b085      	sub	sp, #20
 800fdc8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fdca:	2300      	movs	r3, #0
 800fdcc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fdce:	4b12      	ldr	r3, [pc, #72]	; (800fe18 <prvTaskExitError+0x54>)
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdd6:	d00a      	beq.n	800fdee <prvTaskExitError+0x2a>
	__asm volatile
 800fdd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fddc:	f383 8811 	msr	BASEPRI, r3
 800fde0:	f3bf 8f6f 	isb	sy
 800fde4:	f3bf 8f4f 	dsb	sy
 800fde8:	60fb      	str	r3, [r7, #12]
}
 800fdea:	bf00      	nop
 800fdec:	e7fe      	b.n	800fdec <prvTaskExitError+0x28>
	__asm volatile
 800fdee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdf2:	f383 8811 	msr	BASEPRI, r3
 800fdf6:	f3bf 8f6f 	isb	sy
 800fdfa:	f3bf 8f4f 	dsb	sy
 800fdfe:	60bb      	str	r3, [r7, #8]
}
 800fe00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fe02:	bf00      	nop
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d0fc      	beq.n	800fe04 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fe0a:	bf00      	nop
 800fe0c:	bf00      	nop
 800fe0e:	3714      	adds	r7, #20
 800fe10:	46bd      	mov	sp, r7
 800fe12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe16:	4770      	bx	lr
 800fe18:	20000040 	.word	0x20000040
 800fe1c:	00000000 	.word	0x00000000

0800fe20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fe20:	4b07      	ldr	r3, [pc, #28]	; (800fe40 <pxCurrentTCBConst2>)
 800fe22:	6819      	ldr	r1, [r3, #0]
 800fe24:	6808      	ldr	r0, [r1, #0]
 800fe26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe2a:	f380 8809 	msr	PSP, r0
 800fe2e:	f3bf 8f6f 	isb	sy
 800fe32:	f04f 0000 	mov.w	r0, #0
 800fe36:	f380 8811 	msr	BASEPRI, r0
 800fe3a:	4770      	bx	lr
 800fe3c:	f3af 8000 	nop.w

0800fe40 <pxCurrentTCBConst2>:
 800fe40:	20000d08 	.word	0x20000d08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fe44:	bf00      	nop
 800fe46:	bf00      	nop

0800fe48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fe48:	4808      	ldr	r0, [pc, #32]	; (800fe6c <prvPortStartFirstTask+0x24>)
 800fe4a:	6800      	ldr	r0, [r0, #0]
 800fe4c:	6800      	ldr	r0, [r0, #0]
 800fe4e:	f380 8808 	msr	MSP, r0
 800fe52:	f04f 0000 	mov.w	r0, #0
 800fe56:	f380 8814 	msr	CONTROL, r0
 800fe5a:	b662      	cpsie	i
 800fe5c:	b661      	cpsie	f
 800fe5e:	f3bf 8f4f 	dsb	sy
 800fe62:	f3bf 8f6f 	isb	sy
 800fe66:	df00      	svc	0
 800fe68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fe6a:	bf00      	nop
 800fe6c:	e000ed08 	.word	0xe000ed08

0800fe70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b086      	sub	sp, #24
 800fe74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fe76:	4b46      	ldr	r3, [pc, #280]	; (800ff90 <xPortStartScheduler+0x120>)
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	4a46      	ldr	r2, [pc, #280]	; (800ff94 <xPortStartScheduler+0x124>)
 800fe7c:	4293      	cmp	r3, r2
 800fe7e:	d10a      	bne.n	800fe96 <xPortStartScheduler+0x26>
	__asm volatile
 800fe80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe84:	f383 8811 	msr	BASEPRI, r3
 800fe88:	f3bf 8f6f 	isb	sy
 800fe8c:	f3bf 8f4f 	dsb	sy
 800fe90:	613b      	str	r3, [r7, #16]
}
 800fe92:	bf00      	nop
 800fe94:	e7fe      	b.n	800fe94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fe96:	4b3e      	ldr	r3, [pc, #248]	; (800ff90 <xPortStartScheduler+0x120>)
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	4a3f      	ldr	r2, [pc, #252]	; (800ff98 <xPortStartScheduler+0x128>)
 800fe9c:	4293      	cmp	r3, r2
 800fe9e:	d10a      	bne.n	800feb6 <xPortStartScheduler+0x46>
	__asm volatile
 800fea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fea4:	f383 8811 	msr	BASEPRI, r3
 800fea8:	f3bf 8f6f 	isb	sy
 800feac:	f3bf 8f4f 	dsb	sy
 800feb0:	60fb      	str	r3, [r7, #12]
}
 800feb2:	bf00      	nop
 800feb4:	e7fe      	b.n	800feb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800feb6:	4b39      	ldr	r3, [pc, #228]	; (800ff9c <xPortStartScheduler+0x12c>)
 800feb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800feba:	697b      	ldr	r3, [r7, #20]
 800febc:	781b      	ldrb	r3, [r3, #0]
 800febe:	b2db      	uxtb	r3, r3
 800fec0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fec2:	697b      	ldr	r3, [r7, #20]
 800fec4:	22ff      	movs	r2, #255	; 0xff
 800fec6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fec8:	697b      	ldr	r3, [r7, #20]
 800feca:	781b      	ldrb	r3, [r3, #0]
 800fecc:	b2db      	uxtb	r3, r3
 800fece:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fed0:	78fb      	ldrb	r3, [r7, #3]
 800fed2:	b2db      	uxtb	r3, r3
 800fed4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fed8:	b2da      	uxtb	r2, r3
 800feda:	4b31      	ldr	r3, [pc, #196]	; (800ffa0 <xPortStartScheduler+0x130>)
 800fedc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fede:	4b31      	ldr	r3, [pc, #196]	; (800ffa4 <xPortStartScheduler+0x134>)
 800fee0:	2207      	movs	r2, #7
 800fee2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fee4:	e009      	b.n	800fefa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800fee6:	4b2f      	ldr	r3, [pc, #188]	; (800ffa4 <xPortStartScheduler+0x134>)
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	3b01      	subs	r3, #1
 800feec:	4a2d      	ldr	r2, [pc, #180]	; (800ffa4 <xPortStartScheduler+0x134>)
 800feee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fef0:	78fb      	ldrb	r3, [r7, #3]
 800fef2:	b2db      	uxtb	r3, r3
 800fef4:	005b      	lsls	r3, r3, #1
 800fef6:	b2db      	uxtb	r3, r3
 800fef8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fefa:	78fb      	ldrb	r3, [r7, #3]
 800fefc:	b2db      	uxtb	r3, r3
 800fefe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff02:	2b80      	cmp	r3, #128	; 0x80
 800ff04:	d0ef      	beq.n	800fee6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ff06:	4b27      	ldr	r3, [pc, #156]	; (800ffa4 <xPortStartScheduler+0x134>)
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	f1c3 0307 	rsb	r3, r3, #7
 800ff0e:	2b04      	cmp	r3, #4
 800ff10:	d00a      	beq.n	800ff28 <xPortStartScheduler+0xb8>
	__asm volatile
 800ff12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff16:	f383 8811 	msr	BASEPRI, r3
 800ff1a:	f3bf 8f6f 	isb	sy
 800ff1e:	f3bf 8f4f 	dsb	sy
 800ff22:	60bb      	str	r3, [r7, #8]
}
 800ff24:	bf00      	nop
 800ff26:	e7fe      	b.n	800ff26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ff28:	4b1e      	ldr	r3, [pc, #120]	; (800ffa4 <xPortStartScheduler+0x134>)
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	021b      	lsls	r3, r3, #8
 800ff2e:	4a1d      	ldr	r2, [pc, #116]	; (800ffa4 <xPortStartScheduler+0x134>)
 800ff30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ff32:	4b1c      	ldr	r3, [pc, #112]	; (800ffa4 <xPortStartScheduler+0x134>)
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ff3a:	4a1a      	ldr	r2, [pc, #104]	; (800ffa4 <xPortStartScheduler+0x134>)
 800ff3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	b2da      	uxtb	r2, r3
 800ff42:	697b      	ldr	r3, [r7, #20]
 800ff44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ff46:	4b18      	ldr	r3, [pc, #96]	; (800ffa8 <xPortStartScheduler+0x138>)
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	4a17      	ldr	r2, [pc, #92]	; (800ffa8 <xPortStartScheduler+0x138>)
 800ff4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ff50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ff52:	4b15      	ldr	r3, [pc, #84]	; (800ffa8 <xPortStartScheduler+0x138>)
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	4a14      	ldr	r2, [pc, #80]	; (800ffa8 <xPortStartScheduler+0x138>)
 800ff58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ff5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ff5e:	f000 f8dd 	bl	801011c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ff62:	4b12      	ldr	r3, [pc, #72]	; (800ffac <xPortStartScheduler+0x13c>)
 800ff64:	2200      	movs	r2, #0
 800ff66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ff68:	f000 f8fc 	bl	8010164 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ff6c:	4b10      	ldr	r3, [pc, #64]	; (800ffb0 <xPortStartScheduler+0x140>)
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	4a0f      	ldr	r2, [pc, #60]	; (800ffb0 <xPortStartScheduler+0x140>)
 800ff72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ff76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ff78:	f7ff ff66 	bl	800fe48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ff7c:	f7ff f83a 	bl	800eff4 <vTaskSwitchContext>
	prvTaskExitError();
 800ff80:	f7ff ff20 	bl	800fdc4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ff84:	2300      	movs	r3, #0
}
 800ff86:	4618      	mov	r0, r3
 800ff88:	3718      	adds	r7, #24
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	bd80      	pop	{r7, pc}
 800ff8e:	bf00      	nop
 800ff90:	e000ed00 	.word	0xe000ed00
 800ff94:	410fc271 	.word	0x410fc271
 800ff98:	410fc270 	.word	0x410fc270
 800ff9c:	e000e400 	.word	0xe000e400
 800ffa0:	20001334 	.word	0x20001334
 800ffa4:	20001338 	.word	0x20001338
 800ffa8:	e000ed20 	.word	0xe000ed20
 800ffac:	20000040 	.word	0x20000040
 800ffb0:	e000ef34 	.word	0xe000ef34

0800ffb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ffb4:	b480      	push	{r7}
 800ffb6:	b083      	sub	sp, #12
 800ffb8:	af00      	add	r7, sp, #0
	__asm volatile
 800ffba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffbe:	f383 8811 	msr	BASEPRI, r3
 800ffc2:	f3bf 8f6f 	isb	sy
 800ffc6:	f3bf 8f4f 	dsb	sy
 800ffca:	607b      	str	r3, [r7, #4]
}
 800ffcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ffce:	4b0f      	ldr	r3, [pc, #60]	; (801000c <vPortEnterCritical+0x58>)
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	3301      	adds	r3, #1
 800ffd4:	4a0d      	ldr	r2, [pc, #52]	; (801000c <vPortEnterCritical+0x58>)
 800ffd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ffd8:	4b0c      	ldr	r3, [pc, #48]	; (801000c <vPortEnterCritical+0x58>)
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	2b01      	cmp	r3, #1
 800ffde:	d10f      	bne.n	8010000 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ffe0:	4b0b      	ldr	r3, [pc, #44]	; (8010010 <vPortEnterCritical+0x5c>)
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	b2db      	uxtb	r3, r3
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d00a      	beq.n	8010000 <vPortEnterCritical+0x4c>
	__asm volatile
 800ffea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffee:	f383 8811 	msr	BASEPRI, r3
 800fff2:	f3bf 8f6f 	isb	sy
 800fff6:	f3bf 8f4f 	dsb	sy
 800fffa:	603b      	str	r3, [r7, #0]
}
 800fffc:	bf00      	nop
 800fffe:	e7fe      	b.n	800fffe <vPortEnterCritical+0x4a>
	}
}
 8010000:	bf00      	nop
 8010002:	370c      	adds	r7, #12
 8010004:	46bd      	mov	sp, r7
 8010006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000a:	4770      	bx	lr
 801000c:	20000040 	.word	0x20000040
 8010010:	e000ed04 	.word	0xe000ed04

08010014 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010014:	b480      	push	{r7}
 8010016:	b083      	sub	sp, #12
 8010018:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801001a:	4b12      	ldr	r3, [pc, #72]	; (8010064 <vPortExitCritical+0x50>)
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d10a      	bne.n	8010038 <vPortExitCritical+0x24>
	__asm volatile
 8010022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010026:	f383 8811 	msr	BASEPRI, r3
 801002a:	f3bf 8f6f 	isb	sy
 801002e:	f3bf 8f4f 	dsb	sy
 8010032:	607b      	str	r3, [r7, #4]
}
 8010034:	bf00      	nop
 8010036:	e7fe      	b.n	8010036 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010038:	4b0a      	ldr	r3, [pc, #40]	; (8010064 <vPortExitCritical+0x50>)
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	3b01      	subs	r3, #1
 801003e:	4a09      	ldr	r2, [pc, #36]	; (8010064 <vPortExitCritical+0x50>)
 8010040:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010042:	4b08      	ldr	r3, [pc, #32]	; (8010064 <vPortExitCritical+0x50>)
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d105      	bne.n	8010056 <vPortExitCritical+0x42>
 801004a:	2300      	movs	r3, #0
 801004c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801004e:	683b      	ldr	r3, [r7, #0]
 8010050:	f383 8811 	msr	BASEPRI, r3
}
 8010054:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010056:	bf00      	nop
 8010058:	370c      	adds	r7, #12
 801005a:	46bd      	mov	sp, r7
 801005c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010060:	4770      	bx	lr
 8010062:	bf00      	nop
 8010064:	20000040 	.word	0x20000040
	...

08010070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010070:	f3ef 8009 	mrs	r0, PSP
 8010074:	f3bf 8f6f 	isb	sy
 8010078:	4b15      	ldr	r3, [pc, #84]	; (80100d0 <pxCurrentTCBConst>)
 801007a:	681a      	ldr	r2, [r3, #0]
 801007c:	f01e 0f10 	tst.w	lr, #16
 8010080:	bf08      	it	eq
 8010082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801008a:	6010      	str	r0, [r2, #0]
 801008c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010090:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010094:	f380 8811 	msr	BASEPRI, r0
 8010098:	f3bf 8f4f 	dsb	sy
 801009c:	f3bf 8f6f 	isb	sy
 80100a0:	f7fe ffa8 	bl	800eff4 <vTaskSwitchContext>
 80100a4:	f04f 0000 	mov.w	r0, #0
 80100a8:	f380 8811 	msr	BASEPRI, r0
 80100ac:	bc09      	pop	{r0, r3}
 80100ae:	6819      	ldr	r1, [r3, #0]
 80100b0:	6808      	ldr	r0, [r1, #0]
 80100b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100b6:	f01e 0f10 	tst.w	lr, #16
 80100ba:	bf08      	it	eq
 80100bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80100c0:	f380 8809 	msr	PSP, r0
 80100c4:	f3bf 8f6f 	isb	sy
 80100c8:	4770      	bx	lr
 80100ca:	bf00      	nop
 80100cc:	f3af 8000 	nop.w

080100d0 <pxCurrentTCBConst>:
 80100d0:	20000d08 	.word	0x20000d08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80100d4:	bf00      	nop
 80100d6:	bf00      	nop

080100d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b082      	sub	sp, #8
 80100dc:	af00      	add	r7, sp, #0
	__asm volatile
 80100de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100e2:	f383 8811 	msr	BASEPRI, r3
 80100e6:	f3bf 8f6f 	isb	sy
 80100ea:	f3bf 8f4f 	dsb	sy
 80100ee:	607b      	str	r3, [r7, #4]
}
 80100f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80100f2:	f7fe fec5 	bl	800ee80 <xTaskIncrementTick>
 80100f6:	4603      	mov	r3, r0
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d003      	beq.n	8010104 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80100fc:	4b06      	ldr	r3, [pc, #24]	; (8010118 <xPortSysTickHandler+0x40>)
 80100fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010102:	601a      	str	r2, [r3, #0]
 8010104:	2300      	movs	r3, #0
 8010106:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	f383 8811 	msr	BASEPRI, r3
}
 801010e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010110:	bf00      	nop
 8010112:	3708      	adds	r7, #8
 8010114:	46bd      	mov	sp, r7
 8010116:	bd80      	pop	{r7, pc}
 8010118:	e000ed04 	.word	0xe000ed04

0801011c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801011c:	b480      	push	{r7}
 801011e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010120:	4b0b      	ldr	r3, [pc, #44]	; (8010150 <vPortSetupTimerInterrupt+0x34>)
 8010122:	2200      	movs	r2, #0
 8010124:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010126:	4b0b      	ldr	r3, [pc, #44]	; (8010154 <vPortSetupTimerInterrupt+0x38>)
 8010128:	2200      	movs	r2, #0
 801012a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801012c:	4b0a      	ldr	r3, [pc, #40]	; (8010158 <vPortSetupTimerInterrupt+0x3c>)
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	4a0a      	ldr	r2, [pc, #40]	; (801015c <vPortSetupTimerInterrupt+0x40>)
 8010132:	fba2 2303 	umull	r2, r3, r2, r3
 8010136:	099b      	lsrs	r3, r3, #6
 8010138:	4a09      	ldr	r2, [pc, #36]	; (8010160 <vPortSetupTimerInterrupt+0x44>)
 801013a:	3b01      	subs	r3, #1
 801013c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801013e:	4b04      	ldr	r3, [pc, #16]	; (8010150 <vPortSetupTimerInterrupt+0x34>)
 8010140:	2207      	movs	r2, #7
 8010142:	601a      	str	r2, [r3, #0]
}
 8010144:	bf00      	nop
 8010146:	46bd      	mov	sp, r7
 8010148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014c:	4770      	bx	lr
 801014e:	bf00      	nop
 8010150:	e000e010 	.word	0xe000e010
 8010154:	e000e018 	.word	0xe000e018
 8010158:	20000000 	.word	0x20000000
 801015c:	10624dd3 	.word	0x10624dd3
 8010160:	e000e014 	.word	0xe000e014

08010164 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010164:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010174 <vPortEnableVFP+0x10>
 8010168:	6801      	ldr	r1, [r0, #0]
 801016a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801016e:	6001      	str	r1, [r0, #0]
 8010170:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010172:	bf00      	nop
 8010174:	e000ed88 	.word	0xe000ed88

08010178 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010178:	b480      	push	{r7}
 801017a:	b085      	sub	sp, #20
 801017c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801017e:	f3ef 8305 	mrs	r3, IPSR
 8010182:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	2b0f      	cmp	r3, #15
 8010188:	d914      	bls.n	80101b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801018a:	4a17      	ldr	r2, [pc, #92]	; (80101e8 <vPortValidateInterruptPriority+0x70>)
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	4413      	add	r3, r2
 8010190:	781b      	ldrb	r3, [r3, #0]
 8010192:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010194:	4b15      	ldr	r3, [pc, #84]	; (80101ec <vPortValidateInterruptPriority+0x74>)
 8010196:	781b      	ldrb	r3, [r3, #0]
 8010198:	7afa      	ldrb	r2, [r7, #11]
 801019a:	429a      	cmp	r2, r3
 801019c:	d20a      	bcs.n	80101b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801019e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101a2:	f383 8811 	msr	BASEPRI, r3
 80101a6:	f3bf 8f6f 	isb	sy
 80101aa:	f3bf 8f4f 	dsb	sy
 80101ae:	607b      	str	r3, [r7, #4]
}
 80101b0:	bf00      	nop
 80101b2:	e7fe      	b.n	80101b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80101b4:	4b0e      	ldr	r3, [pc, #56]	; (80101f0 <vPortValidateInterruptPriority+0x78>)
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80101bc:	4b0d      	ldr	r3, [pc, #52]	; (80101f4 <vPortValidateInterruptPriority+0x7c>)
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	429a      	cmp	r2, r3
 80101c2:	d90a      	bls.n	80101da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80101c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101c8:	f383 8811 	msr	BASEPRI, r3
 80101cc:	f3bf 8f6f 	isb	sy
 80101d0:	f3bf 8f4f 	dsb	sy
 80101d4:	603b      	str	r3, [r7, #0]
}
 80101d6:	bf00      	nop
 80101d8:	e7fe      	b.n	80101d8 <vPortValidateInterruptPriority+0x60>
	}
 80101da:	bf00      	nop
 80101dc:	3714      	adds	r7, #20
 80101de:	46bd      	mov	sp, r7
 80101e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e4:	4770      	bx	lr
 80101e6:	bf00      	nop
 80101e8:	e000e3f0 	.word	0xe000e3f0
 80101ec:	20001334 	.word	0x20001334
 80101f0:	e000ed0c 	.word	0xe000ed0c
 80101f4:	20001338 	.word	0x20001338

080101f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b08a      	sub	sp, #40	; 0x28
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010200:	2300      	movs	r3, #0
 8010202:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010204:	f7fe fd80 	bl	800ed08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010208:	4b5b      	ldr	r3, [pc, #364]	; (8010378 <pvPortMalloc+0x180>)
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d101      	bne.n	8010214 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010210:	f000 f920 	bl	8010454 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010214:	4b59      	ldr	r3, [pc, #356]	; (801037c <pvPortMalloc+0x184>)
 8010216:	681a      	ldr	r2, [r3, #0]
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	4013      	ands	r3, r2
 801021c:	2b00      	cmp	r3, #0
 801021e:	f040 8093 	bne.w	8010348 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d01d      	beq.n	8010264 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010228:	2208      	movs	r2, #8
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	4413      	add	r3, r2
 801022e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	f003 0307 	and.w	r3, r3, #7
 8010236:	2b00      	cmp	r3, #0
 8010238:	d014      	beq.n	8010264 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	f023 0307 	bic.w	r3, r3, #7
 8010240:	3308      	adds	r3, #8
 8010242:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	f003 0307 	and.w	r3, r3, #7
 801024a:	2b00      	cmp	r3, #0
 801024c:	d00a      	beq.n	8010264 <pvPortMalloc+0x6c>
	__asm volatile
 801024e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010252:	f383 8811 	msr	BASEPRI, r3
 8010256:	f3bf 8f6f 	isb	sy
 801025a:	f3bf 8f4f 	dsb	sy
 801025e:	617b      	str	r3, [r7, #20]
}
 8010260:	bf00      	nop
 8010262:	e7fe      	b.n	8010262 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d06e      	beq.n	8010348 <pvPortMalloc+0x150>
 801026a:	4b45      	ldr	r3, [pc, #276]	; (8010380 <pvPortMalloc+0x188>)
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	687a      	ldr	r2, [r7, #4]
 8010270:	429a      	cmp	r2, r3
 8010272:	d869      	bhi.n	8010348 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010274:	4b43      	ldr	r3, [pc, #268]	; (8010384 <pvPortMalloc+0x18c>)
 8010276:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010278:	4b42      	ldr	r3, [pc, #264]	; (8010384 <pvPortMalloc+0x18c>)
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801027e:	e004      	b.n	801028a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010282:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801028a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801028c:	685b      	ldr	r3, [r3, #4]
 801028e:	687a      	ldr	r2, [r7, #4]
 8010290:	429a      	cmp	r2, r3
 8010292:	d903      	bls.n	801029c <pvPortMalloc+0xa4>
 8010294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d1f1      	bne.n	8010280 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801029c:	4b36      	ldr	r3, [pc, #216]	; (8010378 <pvPortMalloc+0x180>)
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102a2:	429a      	cmp	r2, r3
 80102a4:	d050      	beq.n	8010348 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80102a6:	6a3b      	ldr	r3, [r7, #32]
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	2208      	movs	r2, #8
 80102ac:	4413      	add	r3, r2
 80102ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80102b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102b2:	681a      	ldr	r2, [r3, #0]
 80102b4:	6a3b      	ldr	r3, [r7, #32]
 80102b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80102b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102ba:	685a      	ldr	r2, [r3, #4]
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	1ad2      	subs	r2, r2, r3
 80102c0:	2308      	movs	r3, #8
 80102c2:	005b      	lsls	r3, r3, #1
 80102c4:	429a      	cmp	r2, r3
 80102c6:	d91f      	bls.n	8010308 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80102c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	4413      	add	r3, r2
 80102ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80102d0:	69bb      	ldr	r3, [r7, #24]
 80102d2:	f003 0307 	and.w	r3, r3, #7
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d00a      	beq.n	80102f0 <pvPortMalloc+0xf8>
	__asm volatile
 80102da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102de:	f383 8811 	msr	BASEPRI, r3
 80102e2:	f3bf 8f6f 	isb	sy
 80102e6:	f3bf 8f4f 	dsb	sy
 80102ea:	613b      	str	r3, [r7, #16]
}
 80102ec:	bf00      	nop
 80102ee:	e7fe      	b.n	80102ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80102f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102f2:	685a      	ldr	r2, [r3, #4]
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	1ad2      	subs	r2, r2, r3
 80102f8:	69bb      	ldr	r3, [r7, #24]
 80102fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80102fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102fe:	687a      	ldr	r2, [r7, #4]
 8010300:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010302:	69b8      	ldr	r0, [r7, #24]
 8010304:	f000 f908 	bl	8010518 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010308:	4b1d      	ldr	r3, [pc, #116]	; (8010380 <pvPortMalloc+0x188>)
 801030a:	681a      	ldr	r2, [r3, #0]
 801030c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801030e:	685b      	ldr	r3, [r3, #4]
 8010310:	1ad3      	subs	r3, r2, r3
 8010312:	4a1b      	ldr	r2, [pc, #108]	; (8010380 <pvPortMalloc+0x188>)
 8010314:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010316:	4b1a      	ldr	r3, [pc, #104]	; (8010380 <pvPortMalloc+0x188>)
 8010318:	681a      	ldr	r2, [r3, #0]
 801031a:	4b1b      	ldr	r3, [pc, #108]	; (8010388 <pvPortMalloc+0x190>)
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	429a      	cmp	r2, r3
 8010320:	d203      	bcs.n	801032a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010322:	4b17      	ldr	r3, [pc, #92]	; (8010380 <pvPortMalloc+0x188>)
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	4a18      	ldr	r2, [pc, #96]	; (8010388 <pvPortMalloc+0x190>)
 8010328:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801032a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801032c:	685a      	ldr	r2, [r3, #4]
 801032e:	4b13      	ldr	r3, [pc, #76]	; (801037c <pvPortMalloc+0x184>)
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	431a      	orrs	r2, r3
 8010334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010336:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801033a:	2200      	movs	r2, #0
 801033c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801033e:	4b13      	ldr	r3, [pc, #76]	; (801038c <pvPortMalloc+0x194>)
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	3301      	adds	r3, #1
 8010344:	4a11      	ldr	r2, [pc, #68]	; (801038c <pvPortMalloc+0x194>)
 8010346:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010348:	f7fe fcec 	bl	800ed24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801034c:	69fb      	ldr	r3, [r7, #28]
 801034e:	f003 0307 	and.w	r3, r3, #7
 8010352:	2b00      	cmp	r3, #0
 8010354:	d00a      	beq.n	801036c <pvPortMalloc+0x174>
	__asm volatile
 8010356:	f04f 0350 	mov.w	r3, #80	; 0x50
 801035a:	f383 8811 	msr	BASEPRI, r3
 801035e:	f3bf 8f6f 	isb	sy
 8010362:	f3bf 8f4f 	dsb	sy
 8010366:	60fb      	str	r3, [r7, #12]
}
 8010368:	bf00      	nop
 801036a:	e7fe      	b.n	801036a <pvPortMalloc+0x172>
	return pvReturn;
 801036c:	69fb      	ldr	r3, [r7, #28]
}
 801036e:	4618      	mov	r0, r3
 8010370:	3728      	adds	r7, #40	; 0x28
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}
 8010376:	bf00      	nop
 8010378:	20005994 	.word	0x20005994
 801037c:	200059a8 	.word	0x200059a8
 8010380:	20005998 	.word	0x20005998
 8010384:	2000598c 	.word	0x2000598c
 8010388:	2000599c 	.word	0x2000599c
 801038c:	200059a0 	.word	0x200059a0

08010390 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b086      	sub	sp, #24
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d04d      	beq.n	801043e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80103a2:	2308      	movs	r3, #8
 80103a4:	425b      	negs	r3, r3
 80103a6:	697a      	ldr	r2, [r7, #20]
 80103a8:	4413      	add	r3, r2
 80103aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80103ac:	697b      	ldr	r3, [r7, #20]
 80103ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80103b0:	693b      	ldr	r3, [r7, #16]
 80103b2:	685a      	ldr	r2, [r3, #4]
 80103b4:	4b24      	ldr	r3, [pc, #144]	; (8010448 <vPortFree+0xb8>)
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	4013      	ands	r3, r2
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d10a      	bne.n	80103d4 <vPortFree+0x44>
	__asm volatile
 80103be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103c2:	f383 8811 	msr	BASEPRI, r3
 80103c6:	f3bf 8f6f 	isb	sy
 80103ca:	f3bf 8f4f 	dsb	sy
 80103ce:	60fb      	str	r3, [r7, #12]
}
 80103d0:	bf00      	nop
 80103d2:	e7fe      	b.n	80103d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80103d4:	693b      	ldr	r3, [r7, #16]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d00a      	beq.n	80103f2 <vPortFree+0x62>
	__asm volatile
 80103dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103e0:	f383 8811 	msr	BASEPRI, r3
 80103e4:	f3bf 8f6f 	isb	sy
 80103e8:	f3bf 8f4f 	dsb	sy
 80103ec:	60bb      	str	r3, [r7, #8]
}
 80103ee:	bf00      	nop
 80103f0:	e7fe      	b.n	80103f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80103f2:	693b      	ldr	r3, [r7, #16]
 80103f4:	685a      	ldr	r2, [r3, #4]
 80103f6:	4b14      	ldr	r3, [pc, #80]	; (8010448 <vPortFree+0xb8>)
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	4013      	ands	r3, r2
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d01e      	beq.n	801043e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010400:	693b      	ldr	r3, [r7, #16]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d11a      	bne.n	801043e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010408:	693b      	ldr	r3, [r7, #16]
 801040a:	685a      	ldr	r2, [r3, #4]
 801040c:	4b0e      	ldr	r3, [pc, #56]	; (8010448 <vPortFree+0xb8>)
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	43db      	mvns	r3, r3
 8010412:	401a      	ands	r2, r3
 8010414:	693b      	ldr	r3, [r7, #16]
 8010416:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010418:	f7fe fc76 	bl	800ed08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801041c:	693b      	ldr	r3, [r7, #16]
 801041e:	685a      	ldr	r2, [r3, #4]
 8010420:	4b0a      	ldr	r3, [pc, #40]	; (801044c <vPortFree+0xbc>)
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	4413      	add	r3, r2
 8010426:	4a09      	ldr	r2, [pc, #36]	; (801044c <vPortFree+0xbc>)
 8010428:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801042a:	6938      	ldr	r0, [r7, #16]
 801042c:	f000 f874 	bl	8010518 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010430:	4b07      	ldr	r3, [pc, #28]	; (8010450 <vPortFree+0xc0>)
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	3301      	adds	r3, #1
 8010436:	4a06      	ldr	r2, [pc, #24]	; (8010450 <vPortFree+0xc0>)
 8010438:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801043a:	f7fe fc73 	bl	800ed24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801043e:	bf00      	nop
 8010440:	3718      	adds	r7, #24
 8010442:	46bd      	mov	sp, r7
 8010444:	bd80      	pop	{r7, pc}
 8010446:	bf00      	nop
 8010448:	200059a8 	.word	0x200059a8
 801044c:	20005998 	.word	0x20005998
 8010450:	200059a4 	.word	0x200059a4

08010454 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010454:	b480      	push	{r7}
 8010456:	b085      	sub	sp, #20
 8010458:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801045a:	f244 6350 	movw	r3, #18000	; 0x4650
 801045e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010460:	4b27      	ldr	r3, [pc, #156]	; (8010500 <prvHeapInit+0xac>)
 8010462:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	f003 0307 	and.w	r3, r3, #7
 801046a:	2b00      	cmp	r3, #0
 801046c:	d00c      	beq.n	8010488 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	3307      	adds	r3, #7
 8010472:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	f023 0307 	bic.w	r3, r3, #7
 801047a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801047c:	68ba      	ldr	r2, [r7, #8]
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	1ad3      	subs	r3, r2, r3
 8010482:	4a1f      	ldr	r2, [pc, #124]	; (8010500 <prvHeapInit+0xac>)
 8010484:	4413      	add	r3, r2
 8010486:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801048c:	4a1d      	ldr	r2, [pc, #116]	; (8010504 <prvHeapInit+0xb0>)
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010492:	4b1c      	ldr	r3, [pc, #112]	; (8010504 <prvHeapInit+0xb0>)
 8010494:	2200      	movs	r2, #0
 8010496:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	68ba      	ldr	r2, [r7, #8]
 801049c:	4413      	add	r3, r2
 801049e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80104a0:	2208      	movs	r2, #8
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	1a9b      	subs	r3, r3, r2
 80104a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	f023 0307 	bic.w	r3, r3, #7
 80104ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	4a15      	ldr	r2, [pc, #84]	; (8010508 <prvHeapInit+0xb4>)
 80104b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80104b6:	4b14      	ldr	r3, [pc, #80]	; (8010508 <prvHeapInit+0xb4>)
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	2200      	movs	r2, #0
 80104bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80104be:	4b12      	ldr	r3, [pc, #72]	; (8010508 <prvHeapInit+0xb4>)
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	2200      	movs	r2, #0
 80104c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80104ca:	683b      	ldr	r3, [r7, #0]
 80104cc:	68fa      	ldr	r2, [r7, #12]
 80104ce:	1ad2      	subs	r2, r2, r3
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80104d4:	4b0c      	ldr	r3, [pc, #48]	; (8010508 <prvHeapInit+0xb4>)
 80104d6:	681a      	ldr	r2, [r3, #0]
 80104d8:	683b      	ldr	r3, [r7, #0]
 80104da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80104dc:	683b      	ldr	r3, [r7, #0]
 80104de:	685b      	ldr	r3, [r3, #4]
 80104e0:	4a0a      	ldr	r2, [pc, #40]	; (801050c <prvHeapInit+0xb8>)
 80104e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80104e4:	683b      	ldr	r3, [r7, #0]
 80104e6:	685b      	ldr	r3, [r3, #4]
 80104e8:	4a09      	ldr	r2, [pc, #36]	; (8010510 <prvHeapInit+0xbc>)
 80104ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80104ec:	4b09      	ldr	r3, [pc, #36]	; (8010514 <prvHeapInit+0xc0>)
 80104ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80104f2:	601a      	str	r2, [r3, #0]
}
 80104f4:	bf00      	nop
 80104f6:	3714      	adds	r7, #20
 80104f8:	46bd      	mov	sp, r7
 80104fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fe:	4770      	bx	lr
 8010500:	2000133c 	.word	0x2000133c
 8010504:	2000598c 	.word	0x2000598c
 8010508:	20005994 	.word	0x20005994
 801050c:	2000599c 	.word	0x2000599c
 8010510:	20005998 	.word	0x20005998
 8010514:	200059a8 	.word	0x200059a8

08010518 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010518:	b480      	push	{r7}
 801051a:	b085      	sub	sp, #20
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010520:	4b28      	ldr	r3, [pc, #160]	; (80105c4 <prvInsertBlockIntoFreeList+0xac>)
 8010522:	60fb      	str	r3, [r7, #12]
 8010524:	e002      	b.n	801052c <prvInsertBlockIntoFreeList+0x14>
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	60fb      	str	r3, [r7, #12]
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	687a      	ldr	r2, [r7, #4]
 8010532:	429a      	cmp	r2, r3
 8010534:	d8f7      	bhi.n	8010526 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	685b      	ldr	r3, [r3, #4]
 801053e:	68ba      	ldr	r2, [r7, #8]
 8010540:	4413      	add	r3, r2
 8010542:	687a      	ldr	r2, [r7, #4]
 8010544:	429a      	cmp	r2, r3
 8010546:	d108      	bne.n	801055a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	685a      	ldr	r2, [r3, #4]
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	685b      	ldr	r3, [r3, #4]
 8010550:	441a      	add	r2, r3
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	685b      	ldr	r3, [r3, #4]
 8010562:	68ba      	ldr	r2, [r7, #8]
 8010564:	441a      	add	r2, r3
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	429a      	cmp	r2, r3
 801056c:	d118      	bne.n	80105a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	681a      	ldr	r2, [r3, #0]
 8010572:	4b15      	ldr	r3, [pc, #84]	; (80105c8 <prvInsertBlockIntoFreeList+0xb0>)
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	429a      	cmp	r2, r3
 8010578:	d00d      	beq.n	8010596 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	685a      	ldr	r2, [r3, #4]
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	685b      	ldr	r3, [r3, #4]
 8010584:	441a      	add	r2, r3
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	681a      	ldr	r2, [r3, #0]
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	601a      	str	r2, [r3, #0]
 8010594:	e008      	b.n	80105a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010596:	4b0c      	ldr	r3, [pc, #48]	; (80105c8 <prvInsertBlockIntoFreeList+0xb0>)
 8010598:	681a      	ldr	r2, [r3, #0]
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	601a      	str	r2, [r3, #0]
 801059e:	e003      	b.n	80105a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	681a      	ldr	r2, [r3, #0]
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80105a8:	68fa      	ldr	r2, [r7, #12]
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	429a      	cmp	r2, r3
 80105ae:	d002      	beq.n	80105b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	687a      	ldr	r2, [r7, #4]
 80105b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80105b6:	bf00      	nop
 80105b8:	3714      	adds	r7, #20
 80105ba:	46bd      	mov	sp, r7
 80105bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c0:	4770      	bx	lr
 80105c2:	bf00      	nop
 80105c4:	2000598c 	.word	0x2000598c
 80105c8:	20005994 	.word	0x20005994

080105cc <_Znwj>:
 80105cc:	2801      	cmp	r0, #1
 80105ce:	bf38      	it	cc
 80105d0:	2001      	movcc	r0, #1
 80105d2:	b510      	push	{r4, lr}
 80105d4:	4604      	mov	r4, r0
 80105d6:	4620      	mov	r0, r4
 80105d8:	f001 f908 	bl	80117ec <malloc>
 80105dc:	b930      	cbnz	r0, 80105ec <_Znwj+0x20>
 80105de:	f000 f81b 	bl	8010618 <_ZSt15get_new_handlerv>
 80105e2:	b908      	cbnz	r0, 80105e8 <_Znwj+0x1c>
 80105e4:	f000 ffd6 	bl	8011594 <abort>
 80105e8:	4780      	blx	r0
 80105ea:	e7f4      	b.n	80105d6 <_Znwj+0xa>
 80105ec:	bd10      	pop	{r4, pc}

080105ee <__cxa_pure_virtual>:
 80105ee:	b508      	push	{r3, lr}
 80105f0:	f000 f80c 	bl	801060c <_ZSt9terminatev>

080105f4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80105f4:	b508      	push	{r3, lr}
 80105f6:	4780      	blx	r0
 80105f8:	f000 ffcc 	bl	8011594 <abort>

080105fc <_ZSt13get_terminatev>:
 80105fc:	4b02      	ldr	r3, [pc, #8]	; (8010608 <_ZSt13get_terminatev+0xc>)
 80105fe:	6818      	ldr	r0, [r3, #0]
 8010600:	f3bf 8f5b 	dmb	ish
 8010604:	4770      	bx	lr
 8010606:	bf00      	nop
 8010608:	20000044 	.word	0x20000044

0801060c <_ZSt9terminatev>:
 801060c:	b508      	push	{r3, lr}
 801060e:	f7ff fff5 	bl	80105fc <_ZSt13get_terminatev>
 8010612:	f7ff ffef 	bl	80105f4 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08010618 <_ZSt15get_new_handlerv>:
 8010618:	4b02      	ldr	r3, [pc, #8]	; (8010624 <_ZSt15get_new_handlerv+0xc>)
 801061a:	6818      	ldr	r0, [r3, #0]
 801061c:	f3bf 8f5b 	dmb	ish
 8010620:	4770      	bx	lr
 8010622:	bf00      	nop
 8010624:	200059ac 	.word	0x200059ac

08010628 <pow>:
 8010628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801062c:	ec59 8b10 	vmov	r8, r9, d0
 8010630:	ec57 6b11 	vmov	r6, r7, d1
 8010634:	f000 f8a8 	bl	8010788 <__ieee754_pow>
 8010638:	4b4e      	ldr	r3, [pc, #312]	; (8010774 <pow+0x14c>)
 801063a:	f993 3000 	ldrsb.w	r3, [r3]
 801063e:	3301      	adds	r3, #1
 8010640:	ec55 4b10 	vmov	r4, r5, d0
 8010644:	d015      	beq.n	8010672 <pow+0x4a>
 8010646:	4632      	mov	r2, r6
 8010648:	463b      	mov	r3, r7
 801064a:	4630      	mov	r0, r6
 801064c:	4639      	mov	r1, r7
 801064e:	f7f0 fa7d 	bl	8000b4c <__aeabi_dcmpun>
 8010652:	b970      	cbnz	r0, 8010672 <pow+0x4a>
 8010654:	4642      	mov	r2, r8
 8010656:	464b      	mov	r3, r9
 8010658:	4640      	mov	r0, r8
 801065a:	4649      	mov	r1, r9
 801065c:	f7f0 fa76 	bl	8000b4c <__aeabi_dcmpun>
 8010660:	2200      	movs	r2, #0
 8010662:	2300      	movs	r3, #0
 8010664:	b148      	cbz	r0, 801067a <pow+0x52>
 8010666:	4630      	mov	r0, r6
 8010668:	4639      	mov	r1, r7
 801066a:	f7f0 fa3d 	bl	8000ae8 <__aeabi_dcmpeq>
 801066e:	2800      	cmp	r0, #0
 8010670:	d17d      	bne.n	801076e <pow+0x146>
 8010672:	ec45 4b10 	vmov	d0, r4, r5
 8010676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801067a:	4640      	mov	r0, r8
 801067c:	4649      	mov	r1, r9
 801067e:	f7f0 fa33 	bl	8000ae8 <__aeabi_dcmpeq>
 8010682:	b1e0      	cbz	r0, 80106be <pow+0x96>
 8010684:	2200      	movs	r2, #0
 8010686:	2300      	movs	r3, #0
 8010688:	4630      	mov	r0, r6
 801068a:	4639      	mov	r1, r7
 801068c:	f7f0 fa2c 	bl	8000ae8 <__aeabi_dcmpeq>
 8010690:	2800      	cmp	r0, #0
 8010692:	d16c      	bne.n	801076e <pow+0x146>
 8010694:	ec47 6b10 	vmov	d0, r6, r7
 8010698:	f000 fe55 	bl	8011346 <finite>
 801069c:	2800      	cmp	r0, #0
 801069e:	d0e8      	beq.n	8010672 <pow+0x4a>
 80106a0:	2200      	movs	r2, #0
 80106a2:	2300      	movs	r3, #0
 80106a4:	4630      	mov	r0, r6
 80106a6:	4639      	mov	r1, r7
 80106a8:	f7f0 fa28 	bl	8000afc <__aeabi_dcmplt>
 80106ac:	2800      	cmp	r0, #0
 80106ae:	d0e0      	beq.n	8010672 <pow+0x4a>
 80106b0:	f000 ff78 	bl	80115a4 <__errno>
 80106b4:	2321      	movs	r3, #33	; 0x21
 80106b6:	6003      	str	r3, [r0, #0]
 80106b8:	2400      	movs	r4, #0
 80106ba:	4d2f      	ldr	r5, [pc, #188]	; (8010778 <pow+0x150>)
 80106bc:	e7d9      	b.n	8010672 <pow+0x4a>
 80106be:	ec45 4b10 	vmov	d0, r4, r5
 80106c2:	f000 fe40 	bl	8011346 <finite>
 80106c6:	bbb8      	cbnz	r0, 8010738 <pow+0x110>
 80106c8:	ec49 8b10 	vmov	d0, r8, r9
 80106cc:	f000 fe3b 	bl	8011346 <finite>
 80106d0:	b390      	cbz	r0, 8010738 <pow+0x110>
 80106d2:	ec47 6b10 	vmov	d0, r6, r7
 80106d6:	f000 fe36 	bl	8011346 <finite>
 80106da:	b368      	cbz	r0, 8010738 <pow+0x110>
 80106dc:	4622      	mov	r2, r4
 80106de:	462b      	mov	r3, r5
 80106e0:	4620      	mov	r0, r4
 80106e2:	4629      	mov	r1, r5
 80106e4:	f7f0 fa32 	bl	8000b4c <__aeabi_dcmpun>
 80106e8:	b160      	cbz	r0, 8010704 <pow+0xdc>
 80106ea:	f000 ff5b 	bl	80115a4 <__errno>
 80106ee:	2321      	movs	r3, #33	; 0x21
 80106f0:	6003      	str	r3, [r0, #0]
 80106f2:	2200      	movs	r2, #0
 80106f4:	2300      	movs	r3, #0
 80106f6:	4610      	mov	r0, r2
 80106f8:	4619      	mov	r1, r3
 80106fa:	f7f0 f8b7 	bl	800086c <__aeabi_ddiv>
 80106fe:	4604      	mov	r4, r0
 8010700:	460d      	mov	r5, r1
 8010702:	e7b6      	b.n	8010672 <pow+0x4a>
 8010704:	f000 ff4e 	bl	80115a4 <__errno>
 8010708:	2322      	movs	r3, #34	; 0x22
 801070a:	6003      	str	r3, [r0, #0]
 801070c:	2200      	movs	r2, #0
 801070e:	2300      	movs	r3, #0
 8010710:	4640      	mov	r0, r8
 8010712:	4649      	mov	r1, r9
 8010714:	f7f0 f9f2 	bl	8000afc <__aeabi_dcmplt>
 8010718:	2400      	movs	r4, #0
 801071a:	b158      	cbz	r0, 8010734 <pow+0x10c>
 801071c:	ec47 6b10 	vmov	d0, r6, r7
 8010720:	f000 fe26 	bl	8011370 <rint>
 8010724:	4632      	mov	r2, r6
 8010726:	ec51 0b10 	vmov	r0, r1, d0
 801072a:	463b      	mov	r3, r7
 801072c:	f7f0 f9dc 	bl	8000ae8 <__aeabi_dcmpeq>
 8010730:	2800      	cmp	r0, #0
 8010732:	d0c2      	beq.n	80106ba <pow+0x92>
 8010734:	4d11      	ldr	r5, [pc, #68]	; (801077c <pow+0x154>)
 8010736:	e79c      	b.n	8010672 <pow+0x4a>
 8010738:	2200      	movs	r2, #0
 801073a:	2300      	movs	r3, #0
 801073c:	4620      	mov	r0, r4
 801073e:	4629      	mov	r1, r5
 8010740:	f7f0 f9d2 	bl	8000ae8 <__aeabi_dcmpeq>
 8010744:	2800      	cmp	r0, #0
 8010746:	d094      	beq.n	8010672 <pow+0x4a>
 8010748:	ec49 8b10 	vmov	d0, r8, r9
 801074c:	f000 fdfb 	bl	8011346 <finite>
 8010750:	2800      	cmp	r0, #0
 8010752:	d08e      	beq.n	8010672 <pow+0x4a>
 8010754:	ec47 6b10 	vmov	d0, r6, r7
 8010758:	f000 fdf5 	bl	8011346 <finite>
 801075c:	2800      	cmp	r0, #0
 801075e:	d088      	beq.n	8010672 <pow+0x4a>
 8010760:	f000 ff20 	bl	80115a4 <__errno>
 8010764:	2322      	movs	r3, #34	; 0x22
 8010766:	6003      	str	r3, [r0, #0]
 8010768:	2400      	movs	r4, #0
 801076a:	2500      	movs	r5, #0
 801076c:	e781      	b.n	8010672 <pow+0x4a>
 801076e:	4d04      	ldr	r5, [pc, #16]	; (8010780 <pow+0x158>)
 8010770:	2400      	movs	r4, #0
 8010772:	e77e      	b.n	8010672 <pow+0x4a>
 8010774:	20000048 	.word	0x20000048
 8010778:	fff00000 	.word	0xfff00000
 801077c:	7ff00000 	.word	0x7ff00000
 8010780:	3ff00000 	.word	0x3ff00000
 8010784:	00000000 	.word	0x00000000

08010788 <__ieee754_pow>:
 8010788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801078c:	ed2d 8b06 	vpush	{d8-d10}
 8010790:	b08d      	sub	sp, #52	; 0x34
 8010792:	ed8d 1b02 	vstr	d1, [sp, #8]
 8010796:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 801079a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 801079e:	ea56 0100 	orrs.w	r1, r6, r0
 80107a2:	ec53 2b10 	vmov	r2, r3, d0
 80107a6:	f000 84d1 	beq.w	801114c <__ieee754_pow+0x9c4>
 80107aa:	497f      	ldr	r1, [pc, #508]	; (80109a8 <__ieee754_pow+0x220>)
 80107ac:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80107b0:	428c      	cmp	r4, r1
 80107b2:	ee10 8a10 	vmov	r8, s0
 80107b6:	4699      	mov	r9, r3
 80107b8:	dc09      	bgt.n	80107ce <__ieee754_pow+0x46>
 80107ba:	d103      	bne.n	80107c4 <__ieee754_pow+0x3c>
 80107bc:	b97a      	cbnz	r2, 80107de <__ieee754_pow+0x56>
 80107be:	42a6      	cmp	r6, r4
 80107c0:	dd02      	ble.n	80107c8 <__ieee754_pow+0x40>
 80107c2:	e00c      	b.n	80107de <__ieee754_pow+0x56>
 80107c4:	428e      	cmp	r6, r1
 80107c6:	dc02      	bgt.n	80107ce <__ieee754_pow+0x46>
 80107c8:	428e      	cmp	r6, r1
 80107ca:	d110      	bne.n	80107ee <__ieee754_pow+0x66>
 80107cc:	b178      	cbz	r0, 80107ee <__ieee754_pow+0x66>
 80107ce:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80107d2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80107d6:	ea54 0308 	orrs.w	r3, r4, r8
 80107da:	f000 84b7 	beq.w	801114c <__ieee754_pow+0x9c4>
 80107de:	4873      	ldr	r0, [pc, #460]	; (80109ac <__ieee754_pow+0x224>)
 80107e0:	b00d      	add	sp, #52	; 0x34
 80107e2:	ecbd 8b06 	vpop	{d8-d10}
 80107e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107ea:	f000 bdb9 	b.w	8011360 <nan>
 80107ee:	f1b9 0f00 	cmp.w	r9, #0
 80107f2:	da36      	bge.n	8010862 <__ieee754_pow+0xda>
 80107f4:	496e      	ldr	r1, [pc, #440]	; (80109b0 <__ieee754_pow+0x228>)
 80107f6:	428e      	cmp	r6, r1
 80107f8:	dc51      	bgt.n	801089e <__ieee754_pow+0x116>
 80107fa:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80107fe:	428e      	cmp	r6, r1
 8010800:	f340 84af 	ble.w	8011162 <__ieee754_pow+0x9da>
 8010804:	1531      	asrs	r1, r6, #20
 8010806:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801080a:	2914      	cmp	r1, #20
 801080c:	dd0f      	ble.n	801082e <__ieee754_pow+0xa6>
 801080e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8010812:	fa20 fc01 	lsr.w	ip, r0, r1
 8010816:	fa0c f101 	lsl.w	r1, ip, r1
 801081a:	4281      	cmp	r1, r0
 801081c:	f040 84a1 	bne.w	8011162 <__ieee754_pow+0x9da>
 8010820:	f00c 0c01 	and.w	ip, ip, #1
 8010824:	f1cc 0102 	rsb	r1, ip, #2
 8010828:	9100      	str	r1, [sp, #0]
 801082a:	b180      	cbz	r0, 801084e <__ieee754_pow+0xc6>
 801082c:	e059      	b.n	80108e2 <__ieee754_pow+0x15a>
 801082e:	2800      	cmp	r0, #0
 8010830:	d155      	bne.n	80108de <__ieee754_pow+0x156>
 8010832:	f1c1 0114 	rsb	r1, r1, #20
 8010836:	fa46 fc01 	asr.w	ip, r6, r1
 801083a:	fa0c f101 	lsl.w	r1, ip, r1
 801083e:	42b1      	cmp	r1, r6
 8010840:	f040 848c 	bne.w	801115c <__ieee754_pow+0x9d4>
 8010844:	f00c 0c01 	and.w	ip, ip, #1
 8010848:	f1cc 0102 	rsb	r1, ip, #2
 801084c:	9100      	str	r1, [sp, #0]
 801084e:	4959      	ldr	r1, [pc, #356]	; (80109b4 <__ieee754_pow+0x22c>)
 8010850:	428e      	cmp	r6, r1
 8010852:	d12d      	bne.n	80108b0 <__ieee754_pow+0x128>
 8010854:	2f00      	cmp	r7, #0
 8010856:	da79      	bge.n	801094c <__ieee754_pow+0x1c4>
 8010858:	4956      	ldr	r1, [pc, #344]	; (80109b4 <__ieee754_pow+0x22c>)
 801085a:	2000      	movs	r0, #0
 801085c:	f7f0 f806 	bl	800086c <__aeabi_ddiv>
 8010860:	e016      	b.n	8010890 <__ieee754_pow+0x108>
 8010862:	2100      	movs	r1, #0
 8010864:	9100      	str	r1, [sp, #0]
 8010866:	2800      	cmp	r0, #0
 8010868:	d13b      	bne.n	80108e2 <__ieee754_pow+0x15a>
 801086a:	494f      	ldr	r1, [pc, #316]	; (80109a8 <__ieee754_pow+0x220>)
 801086c:	428e      	cmp	r6, r1
 801086e:	d1ee      	bne.n	801084e <__ieee754_pow+0xc6>
 8010870:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010874:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010878:	ea53 0308 	orrs.w	r3, r3, r8
 801087c:	f000 8466 	beq.w	801114c <__ieee754_pow+0x9c4>
 8010880:	4b4d      	ldr	r3, [pc, #308]	; (80109b8 <__ieee754_pow+0x230>)
 8010882:	429c      	cmp	r4, r3
 8010884:	dd0d      	ble.n	80108a2 <__ieee754_pow+0x11a>
 8010886:	2f00      	cmp	r7, #0
 8010888:	f280 8464 	bge.w	8011154 <__ieee754_pow+0x9cc>
 801088c:	2000      	movs	r0, #0
 801088e:	2100      	movs	r1, #0
 8010890:	ec41 0b10 	vmov	d0, r0, r1
 8010894:	b00d      	add	sp, #52	; 0x34
 8010896:	ecbd 8b06 	vpop	{d8-d10}
 801089a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801089e:	2102      	movs	r1, #2
 80108a0:	e7e0      	b.n	8010864 <__ieee754_pow+0xdc>
 80108a2:	2f00      	cmp	r7, #0
 80108a4:	daf2      	bge.n	801088c <__ieee754_pow+0x104>
 80108a6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80108aa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80108ae:	e7ef      	b.n	8010890 <__ieee754_pow+0x108>
 80108b0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80108b4:	d104      	bne.n	80108c0 <__ieee754_pow+0x138>
 80108b6:	4610      	mov	r0, r2
 80108b8:	4619      	mov	r1, r3
 80108ba:	f7ef fead 	bl	8000618 <__aeabi_dmul>
 80108be:	e7e7      	b.n	8010890 <__ieee754_pow+0x108>
 80108c0:	493e      	ldr	r1, [pc, #248]	; (80109bc <__ieee754_pow+0x234>)
 80108c2:	428f      	cmp	r7, r1
 80108c4:	d10d      	bne.n	80108e2 <__ieee754_pow+0x15a>
 80108c6:	f1b9 0f00 	cmp.w	r9, #0
 80108ca:	db0a      	blt.n	80108e2 <__ieee754_pow+0x15a>
 80108cc:	ec43 2b10 	vmov	d0, r2, r3
 80108d0:	b00d      	add	sp, #52	; 0x34
 80108d2:	ecbd 8b06 	vpop	{d8-d10}
 80108d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108da:	f000 bc77 	b.w	80111cc <__ieee754_sqrt>
 80108de:	2100      	movs	r1, #0
 80108e0:	9100      	str	r1, [sp, #0]
 80108e2:	ec43 2b10 	vmov	d0, r2, r3
 80108e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80108ea:	f000 fd23 	bl	8011334 <fabs>
 80108ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80108f2:	ec51 0b10 	vmov	r0, r1, d0
 80108f6:	f1b8 0f00 	cmp.w	r8, #0
 80108fa:	d12a      	bne.n	8010952 <__ieee754_pow+0x1ca>
 80108fc:	b12c      	cbz	r4, 801090a <__ieee754_pow+0x182>
 80108fe:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80109b4 <__ieee754_pow+0x22c>
 8010902:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8010906:	45e6      	cmp	lr, ip
 8010908:	d123      	bne.n	8010952 <__ieee754_pow+0x1ca>
 801090a:	2f00      	cmp	r7, #0
 801090c:	da05      	bge.n	801091a <__ieee754_pow+0x192>
 801090e:	4602      	mov	r2, r0
 8010910:	460b      	mov	r3, r1
 8010912:	2000      	movs	r0, #0
 8010914:	4927      	ldr	r1, [pc, #156]	; (80109b4 <__ieee754_pow+0x22c>)
 8010916:	f7ef ffa9 	bl	800086c <__aeabi_ddiv>
 801091a:	f1b9 0f00 	cmp.w	r9, #0
 801091e:	dab7      	bge.n	8010890 <__ieee754_pow+0x108>
 8010920:	9b00      	ldr	r3, [sp, #0]
 8010922:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010926:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801092a:	4323      	orrs	r3, r4
 801092c:	d108      	bne.n	8010940 <__ieee754_pow+0x1b8>
 801092e:	4602      	mov	r2, r0
 8010930:	460b      	mov	r3, r1
 8010932:	4610      	mov	r0, r2
 8010934:	4619      	mov	r1, r3
 8010936:	f7ef fcb7 	bl	80002a8 <__aeabi_dsub>
 801093a:	4602      	mov	r2, r0
 801093c:	460b      	mov	r3, r1
 801093e:	e78d      	b.n	801085c <__ieee754_pow+0xd4>
 8010940:	9b00      	ldr	r3, [sp, #0]
 8010942:	2b01      	cmp	r3, #1
 8010944:	d1a4      	bne.n	8010890 <__ieee754_pow+0x108>
 8010946:	4602      	mov	r2, r0
 8010948:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801094c:	4610      	mov	r0, r2
 801094e:	4619      	mov	r1, r3
 8010950:	e79e      	b.n	8010890 <__ieee754_pow+0x108>
 8010952:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8010956:	f10c 35ff 	add.w	r5, ip, #4294967295
 801095a:	950a      	str	r5, [sp, #40]	; 0x28
 801095c:	9d00      	ldr	r5, [sp, #0]
 801095e:	46ac      	mov	ip, r5
 8010960:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8010962:	ea5c 0505 	orrs.w	r5, ip, r5
 8010966:	d0e4      	beq.n	8010932 <__ieee754_pow+0x1aa>
 8010968:	4b15      	ldr	r3, [pc, #84]	; (80109c0 <__ieee754_pow+0x238>)
 801096a:	429e      	cmp	r6, r3
 801096c:	f340 80fc 	ble.w	8010b68 <__ieee754_pow+0x3e0>
 8010970:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010974:	429e      	cmp	r6, r3
 8010976:	4b10      	ldr	r3, [pc, #64]	; (80109b8 <__ieee754_pow+0x230>)
 8010978:	dd07      	ble.n	801098a <__ieee754_pow+0x202>
 801097a:	429c      	cmp	r4, r3
 801097c:	dc0a      	bgt.n	8010994 <__ieee754_pow+0x20c>
 801097e:	2f00      	cmp	r7, #0
 8010980:	da84      	bge.n	801088c <__ieee754_pow+0x104>
 8010982:	a307      	add	r3, pc, #28	; (adr r3, 80109a0 <__ieee754_pow+0x218>)
 8010984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010988:	e795      	b.n	80108b6 <__ieee754_pow+0x12e>
 801098a:	429c      	cmp	r4, r3
 801098c:	dbf7      	blt.n	801097e <__ieee754_pow+0x1f6>
 801098e:	4b09      	ldr	r3, [pc, #36]	; (80109b4 <__ieee754_pow+0x22c>)
 8010990:	429c      	cmp	r4, r3
 8010992:	dd17      	ble.n	80109c4 <__ieee754_pow+0x23c>
 8010994:	2f00      	cmp	r7, #0
 8010996:	dcf4      	bgt.n	8010982 <__ieee754_pow+0x1fa>
 8010998:	e778      	b.n	801088c <__ieee754_pow+0x104>
 801099a:	bf00      	nop
 801099c:	f3af 8000 	nop.w
 80109a0:	8800759c 	.word	0x8800759c
 80109a4:	7e37e43c 	.word	0x7e37e43c
 80109a8:	7ff00000 	.word	0x7ff00000
 80109ac:	08018673 	.word	0x08018673
 80109b0:	433fffff 	.word	0x433fffff
 80109b4:	3ff00000 	.word	0x3ff00000
 80109b8:	3fefffff 	.word	0x3fefffff
 80109bc:	3fe00000 	.word	0x3fe00000
 80109c0:	41e00000 	.word	0x41e00000
 80109c4:	4b64      	ldr	r3, [pc, #400]	; (8010b58 <__ieee754_pow+0x3d0>)
 80109c6:	2200      	movs	r2, #0
 80109c8:	f7ef fc6e 	bl	80002a8 <__aeabi_dsub>
 80109cc:	a356      	add	r3, pc, #344	; (adr r3, 8010b28 <__ieee754_pow+0x3a0>)
 80109ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109d2:	4604      	mov	r4, r0
 80109d4:	460d      	mov	r5, r1
 80109d6:	f7ef fe1f 	bl	8000618 <__aeabi_dmul>
 80109da:	a355      	add	r3, pc, #340	; (adr r3, 8010b30 <__ieee754_pow+0x3a8>)
 80109dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109e0:	4606      	mov	r6, r0
 80109e2:	460f      	mov	r7, r1
 80109e4:	4620      	mov	r0, r4
 80109e6:	4629      	mov	r1, r5
 80109e8:	f7ef fe16 	bl	8000618 <__aeabi_dmul>
 80109ec:	4b5b      	ldr	r3, [pc, #364]	; (8010b5c <__ieee754_pow+0x3d4>)
 80109ee:	4682      	mov	sl, r0
 80109f0:	468b      	mov	fp, r1
 80109f2:	2200      	movs	r2, #0
 80109f4:	4620      	mov	r0, r4
 80109f6:	4629      	mov	r1, r5
 80109f8:	f7ef fe0e 	bl	8000618 <__aeabi_dmul>
 80109fc:	4602      	mov	r2, r0
 80109fe:	460b      	mov	r3, r1
 8010a00:	a14d      	add	r1, pc, #308	; (adr r1, 8010b38 <__ieee754_pow+0x3b0>)
 8010a02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a06:	f7ef fc4f 	bl	80002a8 <__aeabi_dsub>
 8010a0a:	4622      	mov	r2, r4
 8010a0c:	462b      	mov	r3, r5
 8010a0e:	f7ef fe03 	bl	8000618 <__aeabi_dmul>
 8010a12:	4602      	mov	r2, r0
 8010a14:	460b      	mov	r3, r1
 8010a16:	2000      	movs	r0, #0
 8010a18:	4951      	ldr	r1, [pc, #324]	; (8010b60 <__ieee754_pow+0x3d8>)
 8010a1a:	f7ef fc45 	bl	80002a8 <__aeabi_dsub>
 8010a1e:	4622      	mov	r2, r4
 8010a20:	4680      	mov	r8, r0
 8010a22:	4689      	mov	r9, r1
 8010a24:	462b      	mov	r3, r5
 8010a26:	4620      	mov	r0, r4
 8010a28:	4629      	mov	r1, r5
 8010a2a:	f7ef fdf5 	bl	8000618 <__aeabi_dmul>
 8010a2e:	4602      	mov	r2, r0
 8010a30:	460b      	mov	r3, r1
 8010a32:	4640      	mov	r0, r8
 8010a34:	4649      	mov	r1, r9
 8010a36:	f7ef fdef 	bl	8000618 <__aeabi_dmul>
 8010a3a:	a341      	add	r3, pc, #260	; (adr r3, 8010b40 <__ieee754_pow+0x3b8>)
 8010a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a40:	f7ef fdea 	bl	8000618 <__aeabi_dmul>
 8010a44:	4602      	mov	r2, r0
 8010a46:	460b      	mov	r3, r1
 8010a48:	4650      	mov	r0, sl
 8010a4a:	4659      	mov	r1, fp
 8010a4c:	f7ef fc2c 	bl	80002a8 <__aeabi_dsub>
 8010a50:	4602      	mov	r2, r0
 8010a52:	460b      	mov	r3, r1
 8010a54:	4680      	mov	r8, r0
 8010a56:	4689      	mov	r9, r1
 8010a58:	4630      	mov	r0, r6
 8010a5a:	4639      	mov	r1, r7
 8010a5c:	f7ef fc26 	bl	80002ac <__adddf3>
 8010a60:	2400      	movs	r4, #0
 8010a62:	4632      	mov	r2, r6
 8010a64:	463b      	mov	r3, r7
 8010a66:	4620      	mov	r0, r4
 8010a68:	460d      	mov	r5, r1
 8010a6a:	f7ef fc1d 	bl	80002a8 <__aeabi_dsub>
 8010a6e:	4602      	mov	r2, r0
 8010a70:	460b      	mov	r3, r1
 8010a72:	4640      	mov	r0, r8
 8010a74:	4649      	mov	r1, r9
 8010a76:	f7ef fc17 	bl	80002a8 <__aeabi_dsub>
 8010a7a:	9b00      	ldr	r3, [sp, #0]
 8010a7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010a7e:	3b01      	subs	r3, #1
 8010a80:	4313      	orrs	r3, r2
 8010a82:	4682      	mov	sl, r0
 8010a84:	468b      	mov	fp, r1
 8010a86:	f040 81f1 	bne.w	8010e6c <__ieee754_pow+0x6e4>
 8010a8a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8010b48 <__ieee754_pow+0x3c0>
 8010a8e:	eeb0 8a47 	vmov.f32	s16, s14
 8010a92:	eef0 8a67 	vmov.f32	s17, s15
 8010a96:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010a9a:	2600      	movs	r6, #0
 8010a9c:	4632      	mov	r2, r6
 8010a9e:	463b      	mov	r3, r7
 8010aa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010aa4:	f7ef fc00 	bl	80002a8 <__aeabi_dsub>
 8010aa8:	4622      	mov	r2, r4
 8010aaa:	462b      	mov	r3, r5
 8010aac:	f7ef fdb4 	bl	8000618 <__aeabi_dmul>
 8010ab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010ab4:	4680      	mov	r8, r0
 8010ab6:	4689      	mov	r9, r1
 8010ab8:	4650      	mov	r0, sl
 8010aba:	4659      	mov	r1, fp
 8010abc:	f7ef fdac 	bl	8000618 <__aeabi_dmul>
 8010ac0:	4602      	mov	r2, r0
 8010ac2:	460b      	mov	r3, r1
 8010ac4:	4640      	mov	r0, r8
 8010ac6:	4649      	mov	r1, r9
 8010ac8:	f7ef fbf0 	bl	80002ac <__adddf3>
 8010acc:	4632      	mov	r2, r6
 8010ace:	463b      	mov	r3, r7
 8010ad0:	4680      	mov	r8, r0
 8010ad2:	4689      	mov	r9, r1
 8010ad4:	4620      	mov	r0, r4
 8010ad6:	4629      	mov	r1, r5
 8010ad8:	f7ef fd9e 	bl	8000618 <__aeabi_dmul>
 8010adc:	460b      	mov	r3, r1
 8010ade:	4604      	mov	r4, r0
 8010ae0:	460d      	mov	r5, r1
 8010ae2:	4602      	mov	r2, r0
 8010ae4:	4649      	mov	r1, r9
 8010ae6:	4640      	mov	r0, r8
 8010ae8:	f7ef fbe0 	bl	80002ac <__adddf3>
 8010aec:	4b1d      	ldr	r3, [pc, #116]	; (8010b64 <__ieee754_pow+0x3dc>)
 8010aee:	4299      	cmp	r1, r3
 8010af0:	ec45 4b19 	vmov	d9, r4, r5
 8010af4:	4606      	mov	r6, r0
 8010af6:	460f      	mov	r7, r1
 8010af8:	468b      	mov	fp, r1
 8010afa:	f340 82fe 	ble.w	80110fa <__ieee754_pow+0x972>
 8010afe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010b02:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010b06:	4303      	orrs	r3, r0
 8010b08:	f000 81f0 	beq.w	8010eec <__ieee754_pow+0x764>
 8010b0c:	a310      	add	r3, pc, #64	; (adr r3, 8010b50 <__ieee754_pow+0x3c8>)
 8010b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b12:	ec51 0b18 	vmov	r0, r1, d8
 8010b16:	f7ef fd7f 	bl	8000618 <__aeabi_dmul>
 8010b1a:	a30d      	add	r3, pc, #52	; (adr r3, 8010b50 <__ieee754_pow+0x3c8>)
 8010b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b20:	e6cb      	b.n	80108ba <__ieee754_pow+0x132>
 8010b22:	bf00      	nop
 8010b24:	f3af 8000 	nop.w
 8010b28:	60000000 	.word	0x60000000
 8010b2c:	3ff71547 	.word	0x3ff71547
 8010b30:	f85ddf44 	.word	0xf85ddf44
 8010b34:	3e54ae0b 	.word	0x3e54ae0b
 8010b38:	55555555 	.word	0x55555555
 8010b3c:	3fd55555 	.word	0x3fd55555
 8010b40:	652b82fe 	.word	0x652b82fe
 8010b44:	3ff71547 	.word	0x3ff71547
 8010b48:	00000000 	.word	0x00000000
 8010b4c:	bff00000 	.word	0xbff00000
 8010b50:	8800759c 	.word	0x8800759c
 8010b54:	7e37e43c 	.word	0x7e37e43c
 8010b58:	3ff00000 	.word	0x3ff00000
 8010b5c:	3fd00000 	.word	0x3fd00000
 8010b60:	3fe00000 	.word	0x3fe00000
 8010b64:	408fffff 	.word	0x408fffff
 8010b68:	4bd7      	ldr	r3, [pc, #860]	; (8010ec8 <__ieee754_pow+0x740>)
 8010b6a:	ea03 0309 	and.w	r3, r3, r9
 8010b6e:	2200      	movs	r2, #0
 8010b70:	b92b      	cbnz	r3, 8010b7e <__ieee754_pow+0x3f6>
 8010b72:	4bd6      	ldr	r3, [pc, #856]	; (8010ecc <__ieee754_pow+0x744>)
 8010b74:	f7ef fd50 	bl	8000618 <__aeabi_dmul>
 8010b78:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8010b7c:	460c      	mov	r4, r1
 8010b7e:	1523      	asrs	r3, r4, #20
 8010b80:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010b84:	4413      	add	r3, r2
 8010b86:	9309      	str	r3, [sp, #36]	; 0x24
 8010b88:	4bd1      	ldr	r3, [pc, #836]	; (8010ed0 <__ieee754_pow+0x748>)
 8010b8a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010b8e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010b92:	429c      	cmp	r4, r3
 8010b94:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010b98:	dd08      	ble.n	8010bac <__ieee754_pow+0x424>
 8010b9a:	4bce      	ldr	r3, [pc, #824]	; (8010ed4 <__ieee754_pow+0x74c>)
 8010b9c:	429c      	cmp	r4, r3
 8010b9e:	f340 8163 	ble.w	8010e68 <__ieee754_pow+0x6e0>
 8010ba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ba4:	3301      	adds	r3, #1
 8010ba6:	9309      	str	r3, [sp, #36]	; 0x24
 8010ba8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8010bac:	2400      	movs	r4, #0
 8010bae:	00e3      	lsls	r3, r4, #3
 8010bb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8010bb2:	4bc9      	ldr	r3, [pc, #804]	; (8010ed8 <__ieee754_pow+0x750>)
 8010bb4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010bb8:	ed93 7b00 	vldr	d7, [r3]
 8010bbc:	4629      	mov	r1, r5
 8010bbe:	ec53 2b17 	vmov	r2, r3, d7
 8010bc2:	eeb0 8a47 	vmov.f32	s16, s14
 8010bc6:	eef0 8a67 	vmov.f32	s17, s15
 8010bca:	4682      	mov	sl, r0
 8010bcc:	f7ef fb6c 	bl	80002a8 <__aeabi_dsub>
 8010bd0:	4652      	mov	r2, sl
 8010bd2:	4606      	mov	r6, r0
 8010bd4:	460f      	mov	r7, r1
 8010bd6:	462b      	mov	r3, r5
 8010bd8:	ec51 0b18 	vmov	r0, r1, d8
 8010bdc:	f7ef fb66 	bl	80002ac <__adddf3>
 8010be0:	4602      	mov	r2, r0
 8010be2:	460b      	mov	r3, r1
 8010be4:	2000      	movs	r0, #0
 8010be6:	49bd      	ldr	r1, [pc, #756]	; (8010edc <__ieee754_pow+0x754>)
 8010be8:	f7ef fe40 	bl	800086c <__aeabi_ddiv>
 8010bec:	ec41 0b19 	vmov	d9, r0, r1
 8010bf0:	4602      	mov	r2, r0
 8010bf2:	460b      	mov	r3, r1
 8010bf4:	4630      	mov	r0, r6
 8010bf6:	4639      	mov	r1, r7
 8010bf8:	f7ef fd0e 	bl	8000618 <__aeabi_dmul>
 8010bfc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010c00:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010c04:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010c08:	2300      	movs	r3, #0
 8010c0a:	9304      	str	r3, [sp, #16]
 8010c0c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8010c10:	46ab      	mov	fp, r5
 8010c12:	106d      	asrs	r5, r5, #1
 8010c14:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010c18:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8010c1c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8010c20:	2200      	movs	r2, #0
 8010c22:	4640      	mov	r0, r8
 8010c24:	4649      	mov	r1, r9
 8010c26:	4614      	mov	r4, r2
 8010c28:	461d      	mov	r5, r3
 8010c2a:	f7ef fcf5 	bl	8000618 <__aeabi_dmul>
 8010c2e:	4602      	mov	r2, r0
 8010c30:	460b      	mov	r3, r1
 8010c32:	4630      	mov	r0, r6
 8010c34:	4639      	mov	r1, r7
 8010c36:	f7ef fb37 	bl	80002a8 <__aeabi_dsub>
 8010c3a:	ec53 2b18 	vmov	r2, r3, d8
 8010c3e:	4606      	mov	r6, r0
 8010c40:	460f      	mov	r7, r1
 8010c42:	4620      	mov	r0, r4
 8010c44:	4629      	mov	r1, r5
 8010c46:	f7ef fb2f 	bl	80002a8 <__aeabi_dsub>
 8010c4a:	4602      	mov	r2, r0
 8010c4c:	460b      	mov	r3, r1
 8010c4e:	4650      	mov	r0, sl
 8010c50:	4659      	mov	r1, fp
 8010c52:	f7ef fb29 	bl	80002a8 <__aeabi_dsub>
 8010c56:	4642      	mov	r2, r8
 8010c58:	464b      	mov	r3, r9
 8010c5a:	f7ef fcdd 	bl	8000618 <__aeabi_dmul>
 8010c5e:	4602      	mov	r2, r0
 8010c60:	460b      	mov	r3, r1
 8010c62:	4630      	mov	r0, r6
 8010c64:	4639      	mov	r1, r7
 8010c66:	f7ef fb1f 	bl	80002a8 <__aeabi_dsub>
 8010c6a:	ec53 2b19 	vmov	r2, r3, d9
 8010c6e:	f7ef fcd3 	bl	8000618 <__aeabi_dmul>
 8010c72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010c76:	ec41 0b18 	vmov	d8, r0, r1
 8010c7a:	4610      	mov	r0, r2
 8010c7c:	4619      	mov	r1, r3
 8010c7e:	f7ef fccb 	bl	8000618 <__aeabi_dmul>
 8010c82:	a37d      	add	r3, pc, #500	; (adr r3, 8010e78 <__ieee754_pow+0x6f0>)
 8010c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c88:	4604      	mov	r4, r0
 8010c8a:	460d      	mov	r5, r1
 8010c8c:	f7ef fcc4 	bl	8000618 <__aeabi_dmul>
 8010c90:	a37b      	add	r3, pc, #492	; (adr r3, 8010e80 <__ieee754_pow+0x6f8>)
 8010c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c96:	f7ef fb09 	bl	80002ac <__adddf3>
 8010c9a:	4622      	mov	r2, r4
 8010c9c:	462b      	mov	r3, r5
 8010c9e:	f7ef fcbb 	bl	8000618 <__aeabi_dmul>
 8010ca2:	a379      	add	r3, pc, #484	; (adr r3, 8010e88 <__ieee754_pow+0x700>)
 8010ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ca8:	f7ef fb00 	bl	80002ac <__adddf3>
 8010cac:	4622      	mov	r2, r4
 8010cae:	462b      	mov	r3, r5
 8010cb0:	f7ef fcb2 	bl	8000618 <__aeabi_dmul>
 8010cb4:	a376      	add	r3, pc, #472	; (adr r3, 8010e90 <__ieee754_pow+0x708>)
 8010cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cba:	f7ef faf7 	bl	80002ac <__adddf3>
 8010cbe:	4622      	mov	r2, r4
 8010cc0:	462b      	mov	r3, r5
 8010cc2:	f7ef fca9 	bl	8000618 <__aeabi_dmul>
 8010cc6:	a374      	add	r3, pc, #464	; (adr r3, 8010e98 <__ieee754_pow+0x710>)
 8010cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ccc:	f7ef faee 	bl	80002ac <__adddf3>
 8010cd0:	4622      	mov	r2, r4
 8010cd2:	462b      	mov	r3, r5
 8010cd4:	f7ef fca0 	bl	8000618 <__aeabi_dmul>
 8010cd8:	a371      	add	r3, pc, #452	; (adr r3, 8010ea0 <__ieee754_pow+0x718>)
 8010cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cde:	f7ef fae5 	bl	80002ac <__adddf3>
 8010ce2:	4622      	mov	r2, r4
 8010ce4:	4606      	mov	r6, r0
 8010ce6:	460f      	mov	r7, r1
 8010ce8:	462b      	mov	r3, r5
 8010cea:	4620      	mov	r0, r4
 8010cec:	4629      	mov	r1, r5
 8010cee:	f7ef fc93 	bl	8000618 <__aeabi_dmul>
 8010cf2:	4602      	mov	r2, r0
 8010cf4:	460b      	mov	r3, r1
 8010cf6:	4630      	mov	r0, r6
 8010cf8:	4639      	mov	r1, r7
 8010cfa:	f7ef fc8d 	bl	8000618 <__aeabi_dmul>
 8010cfe:	4642      	mov	r2, r8
 8010d00:	4604      	mov	r4, r0
 8010d02:	460d      	mov	r5, r1
 8010d04:	464b      	mov	r3, r9
 8010d06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010d0a:	f7ef facf 	bl	80002ac <__adddf3>
 8010d0e:	ec53 2b18 	vmov	r2, r3, d8
 8010d12:	f7ef fc81 	bl	8000618 <__aeabi_dmul>
 8010d16:	4622      	mov	r2, r4
 8010d18:	462b      	mov	r3, r5
 8010d1a:	f7ef fac7 	bl	80002ac <__adddf3>
 8010d1e:	4642      	mov	r2, r8
 8010d20:	4682      	mov	sl, r0
 8010d22:	468b      	mov	fp, r1
 8010d24:	464b      	mov	r3, r9
 8010d26:	4640      	mov	r0, r8
 8010d28:	4649      	mov	r1, r9
 8010d2a:	f7ef fc75 	bl	8000618 <__aeabi_dmul>
 8010d2e:	4b6c      	ldr	r3, [pc, #432]	; (8010ee0 <__ieee754_pow+0x758>)
 8010d30:	2200      	movs	r2, #0
 8010d32:	4606      	mov	r6, r0
 8010d34:	460f      	mov	r7, r1
 8010d36:	f7ef fab9 	bl	80002ac <__adddf3>
 8010d3a:	4652      	mov	r2, sl
 8010d3c:	465b      	mov	r3, fp
 8010d3e:	f7ef fab5 	bl	80002ac <__adddf3>
 8010d42:	9c04      	ldr	r4, [sp, #16]
 8010d44:	460d      	mov	r5, r1
 8010d46:	4622      	mov	r2, r4
 8010d48:	460b      	mov	r3, r1
 8010d4a:	4640      	mov	r0, r8
 8010d4c:	4649      	mov	r1, r9
 8010d4e:	f7ef fc63 	bl	8000618 <__aeabi_dmul>
 8010d52:	4b63      	ldr	r3, [pc, #396]	; (8010ee0 <__ieee754_pow+0x758>)
 8010d54:	4680      	mov	r8, r0
 8010d56:	4689      	mov	r9, r1
 8010d58:	2200      	movs	r2, #0
 8010d5a:	4620      	mov	r0, r4
 8010d5c:	4629      	mov	r1, r5
 8010d5e:	f7ef faa3 	bl	80002a8 <__aeabi_dsub>
 8010d62:	4632      	mov	r2, r6
 8010d64:	463b      	mov	r3, r7
 8010d66:	f7ef fa9f 	bl	80002a8 <__aeabi_dsub>
 8010d6a:	4602      	mov	r2, r0
 8010d6c:	460b      	mov	r3, r1
 8010d6e:	4650      	mov	r0, sl
 8010d70:	4659      	mov	r1, fp
 8010d72:	f7ef fa99 	bl	80002a8 <__aeabi_dsub>
 8010d76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010d7a:	f7ef fc4d 	bl	8000618 <__aeabi_dmul>
 8010d7e:	4622      	mov	r2, r4
 8010d80:	4606      	mov	r6, r0
 8010d82:	460f      	mov	r7, r1
 8010d84:	462b      	mov	r3, r5
 8010d86:	ec51 0b18 	vmov	r0, r1, d8
 8010d8a:	f7ef fc45 	bl	8000618 <__aeabi_dmul>
 8010d8e:	4602      	mov	r2, r0
 8010d90:	460b      	mov	r3, r1
 8010d92:	4630      	mov	r0, r6
 8010d94:	4639      	mov	r1, r7
 8010d96:	f7ef fa89 	bl	80002ac <__adddf3>
 8010d9a:	4606      	mov	r6, r0
 8010d9c:	460f      	mov	r7, r1
 8010d9e:	4602      	mov	r2, r0
 8010da0:	460b      	mov	r3, r1
 8010da2:	4640      	mov	r0, r8
 8010da4:	4649      	mov	r1, r9
 8010da6:	f7ef fa81 	bl	80002ac <__adddf3>
 8010daa:	9c04      	ldr	r4, [sp, #16]
 8010dac:	a33e      	add	r3, pc, #248	; (adr r3, 8010ea8 <__ieee754_pow+0x720>)
 8010dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010db2:	4620      	mov	r0, r4
 8010db4:	460d      	mov	r5, r1
 8010db6:	f7ef fc2f 	bl	8000618 <__aeabi_dmul>
 8010dba:	4642      	mov	r2, r8
 8010dbc:	ec41 0b18 	vmov	d8, r0, r1
 8010dc0:	464b      	mov	r3, r9
 8010dc2:	4620      	mov	r0, r4
 8010dc4:	4629      	mov	r1, r5
 8010dc6:	f7ef fa6f 	bl	80002a8 <__aeabi_dsub>
 8010dca:	4602      	mov	r2, r0
 8010dcc:	460b      	mov	r3, r1
 8010dce:	4630      	mov	r0, r6
 8010dd0:	4639      	mov	r1, r7
 8010dd2:	f7ef fa69 	bl	80002a8 <__aeabi_dsub>
 8010dd6:	a336      	add	r3, pc, #216	; (adr r3, 8010eb0 <__ieee754_pow+0x728>)
 8010dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ddc:	f7ef fc1c 	bl	8000618 <__aeabi_dmul>
 8010de0:	a335      	add	r3, pc, #212	; (adr r3, 8010eb8 <__ieee754_pow+0x730>)
 8010de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010de6:	4606      	mov	r6, r0
 8010de8:	460f      	mov	r7, r1
 8010dea:	4620      	mov	r0, r4
 8010dec:	4629      	mov	r1, r5
 8010dee:	f7ef fc13 	bl	8000618 <__aeabi_dmul>
 8010df2:	4602      	mov	r2, r0
 8010df4:	460b      	mov	r3, r1
 8010df6:	4630      	mov	r0, r6
 8010df8:	4639      	mov	r1, r7
 8010dfa:	f7ef fa57 	bl	80002ac <__adddf3>
 8010dfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010e00:	4b38      	ldr	r3, [pc, #224]	; (8010ee4 <__ieee754_pow+0x75c>)
 8010e02:	4413      	add	r3, r2
 8010e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e08:	f7ef fa50 	bl	80002ac <__adddf3>
 8010e0c:	4682      	mov	sl, r0
 8010e0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010e10:	468b      	mov	fp, r1
 8010e12:	f7ef fb97 	bl	8000544 <__aeabi_i2d>
 8010e16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010e18:	4b33      	ldr	r3, [pc, #204]	; (8010ee8 <__ieee754_pow+0x760>)
 8010e1a:	4413      	add	r3, r2
 8010e1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010e20:	4606      	mov	r6, r0
 8010e22:	460f      	mov	r7, r1
 8010e24:	4652      	mov	r2, sl
 8010e26:	465b      	mov	r3, fp
 8010e28:	ec51 0b18 	vmov	r0, r1, d8
 8010e2c:	f7ef fa3e 	bl	80002ac <__adddf3>
 8010e30:	4642      	mov	r2, r8
 8010e32:	464b      	mov	r3, r9
 8010e34:	f7ef fa3a 	bl	80002ac <__adddf3>
 8010e38:	4632      	mov	r2, r6
 8010e3a:	463b      	mov	r3, r7
 8010e3c:	f7ef fa36 	bl	80002ac <__adddf3>
 8010e40:	9c04      	ldr	r4, [sp, #16]
 8010e42:	4632      	mov	r2, r6
 8010e44:	463b      	mov	r3, r7
 8010e46:	4620      	mov	r0, r4
 8010e48:	460d      	mov	r5, r1
 8010e4a:	f7ef fa2d 	bl	80002a8 <__aeabi_dsub>
 8010e4e:	4642      	mov	r2, r8
 8010e50:	464b      	mov	r3, r9
 8010e52:	f7ef fa29 	bl	80002a8 <__aeabi_dsub>
 8010e56:	ec53 2b18 	vmov	r2, r3, d8
 8010e5a:	f7ef fa25 	bl	80002a8 <__aeabi_dsub>
 8010e5e:	4602      	mov	r2, r0
 8010e60:	460b      	mov	r3, r1
 8010e62:	4650      	mov	r0, sl
 8010e64:	4659      	mov	r1, fp
 8010e66:	e606      	b.n	8010a76 <__ieee754_pow+0x2ee>
 8010e68:	2401      	movs	r4, #1
 8010e6a:	e6a0      	b.n	8010bae <__ieee754_pow+0x426>
 8010e6c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8010ec0 <__ieee754_pow+0x738>
 8010e70:	e60d      	b.n	8010a8e <__ieee754_pow+0x306>
 8010e72:	bf00      	nop
 8010e74:	f3af 8000 	nop.w
 8010e78:	4a454eef 	.word	0x4a454eef
 8010e7c:	3fca7e28 	.word	0x3fca7e28
 8010e80:	93c9db65 	.word	0x93c9db65
 8010e84:	3fcd864a 	.word	0x3fcd864a
 8010e88:	a91d4101 	.word	0xa91d4101
 8010e8c:	3fd17460 	.word	0x3fd17460
 8010e90:	518f264d 	.word	0x518f264d
 8010e94:	3fd55555 	.word	0x3fd55555
 8010e98:	db6fabff 	.word	0xdb6fabff
 8010e9c:	3fdb6db6 	.word	0x3fdb6db6
 8010ea0:	33333303 	.word	0x33333303
 8010ea4:	3fe33333 	.word	0x3fe33333
 8010ea8:	e0000000 	.word	0xe0000000
 8010eac:	3feec709 	.word	0x3feec709
 8010eb0:	dc3a03fd 	.word	0xdc3a03fd
 8010eb4:	3feec709 	.word	0x3feec709
 8010eb8:	145b01f5 	.word	0x145b01f5
 8010ebc:	be3e2fe0 	.word	0xbe3e2fe0
 8010ec0:	00000000 	.word	0x00000000
 8010ec4:	3ff00000 	.word	0x3ff00000
 8010ec8:	7ff00000 	.word	0x7ff00000
 8010ecc:	43400000 	.word	0x43400000
 8010ed0:	0003988e 	.word	0x0003988e
 8010ed4:	000bb679 	.word	0x000bb679
 8010ed8:	08018508 	.word	0x08018508
 8010edc:	3ff00000 	.word	0x3ff00000
 8010ee0:	40080000 	.word	0x40080000
 8010ee4:	08018528 	.word	0x08018528
 8010ee8:	08018518 	.word	0x08018518
 8010eec:	a3b5      	add	r3, pc, #724	; (adr r3, 80111c4 <__ieee754_pow+0xa3c>)
 8010eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ef2:	4640      	mov	r0, r8
 8010ef4:	4649      	mov	r1, r9
 8010ef6:	f7ef f9d9 	bl	80002ac <__adddf3>
 8010efa:	4622      	mov	r2, r4
 8010efc:	ec41 0b1a 	vmov	d10, r0, r1
 8010f00:	462b      	mov	r3, r5
 8010f02:	4630      	mov	r0, r6
 8010f04:	4639      	mov	r1, r7
 8010f06:	f7ef f9cf 	bl	80002a8 <__aeabi_dsub>
 8010f0a:	4602      	mov	r2, r0
 8010f0c:	460b      	mov	r3, r1
 8010f0e:	ec51 0b1a 	vmov	r0, r1, d10
 8010f12:	f7ef fe11 	bl	8000b38 <__aeabi_dcmpgt>
 8010f16:	2800      	cmp	r0, #0
 8010f18:	f47f adf8 	bne.w	8010b0c <__ieee754_pow+0x384>
 8010f1c:	4aa4      	ldr	r2, [pc, #656]	; (80111b0 <__ieee754_pow+0xa28>)
 8010f1e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010f22:	4293      	cmp	r3, r2
 8010f24:	f340 810b 	ble.w	801113e <__ieee754_pow+0x9b6>
 8010f28:	151b      	asrs	r3, r3, #20
 8010f2a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8010f2e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8010f32:	fa4a f303 	asr.w	r3, sl, r3
 8010f36:	445b      	add	r3, fp
 8010f38:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8010f3c:	4e9d      	ldr	r6, [pc, #628]	; (80111b4 <__ieee754_pow+0xa2c>)
 8010f3e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8010f42:	4116      	asrs	r6, r2
 8010f44:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8010f48:	2000      	movs	r0, #0
 8010f4a:	ea23 0106 	bic.w	r1, r3, r6
 8010f4e:	f1c2 0214 	rsb	r2, r2, #20
 8010f52:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8010f56:	fa4a fa02 	asr.w	sl, sl, r2
 8010f5a:	f1bb 0f00 	cmp.w	fp, #0
 8010f5e:	4602      	mov	r2, r0
 8010f60:	460b      	mov	r3, r1
 8010f62:	4620      	mov	r0, r4
 8010f64:	4629      	mov	r1, r5
 8010f66:	bfb8      	it	lt
 8010f68:	f1ca 0a00 	rsblt	sl, sl, #0
 8010f6c:	f7ef f99c 	bl	80002a8 <__aeabi_dsub>
 8010f70:	ec41 0b19 	vmov	d9, r0, r1
 8010f74:	4642      	mov	r2, r8
 8010f76:	464b      	mov	r3, r9
 8010f78:	ec51 0b19 	vmov	r0, r1, d9
 8010f7c:	f7ef f996 	bl	80002ac <__adddf3>
 8010f80:	2400      	movs	r4, #0
 8010f82:	a379      	add	r3, pc, #484	; (adr r3, 8011168 <__ieee754_pow+0x9e0>)
 8010f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f88:	4620      	mov	r0, r4
 8010f8a:	460d      	mov	r5, r1
 8010f8c:	f7ef fb44 	bl	8000618 <__aeabi_dmul>
 8010f90:	ec53 2b19 	vmov	r2, r3, d9
 8010f94:	4606      	mov	r6, r0
 8010f96:	460f      	mov	r7, r1
 8010f98:	4620      	mov	r0, r4
 8010f9a:	4629      	mov	r1, r5
 8010f9c:	f7ef f984 	bl	80002a8 <__aeabi_dsub>
 8010fa0:	4602      	mov	r2, r0
 8010fa2:	460b      	mov	r3, r1
 8010fa4:	4640      	mov	r0, r8
 8010fa6:	4649      	mov	r1, r9
 8010fa8:	f7ef f97e 	bl	80002a8 <__aeabi_dsub>
 8010fac:	a370      	add	r3, pc, #448	; (adr r3, 8011170 <__ieee754_pow+0x9e8>)
 8010fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fb2:	f7ef fb31 	bl	8000618 <__aeabi_dmul>
 8010fb6:	a370      	add	r3, pc, #448	; (adr r3, 8011178 <__ieee754_pow+0x9f0>)
 8010fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fbc:	4680      	mov	r8, r0
 8010fbe:	4689      	mov	r9, r1
 8010fc0:	4620      	mov	r0, r4
 8010fc2:	4629      	mov	r1, r5
 8010fc4:	f7ef fb28 	bl	8000618 <__aeabi_dmul>
 8010fc8:	4602      	mov	r2, r0
 8010fca:	460b      	mov	r3, r1
 8010fcc:	4640      	mov	r0, r8
 8010fce:	4649      	mov	r1, r9
 8010fd0:	f7ef f96c 	bl	80002ac <__adddf3>
 8010fd4:	4604      	mov	r4, r0
 8010fd6:	460d      	mov	r5, r1
 8010fd8:	4602      	mov	r2, r0
 8010fda:	460b      	mov	r3, r1
 8010fdc:	4630      	mov	r0, r6
 8010fde:	4639      	mov	r1, r7
 8010fe0:	f7ef f964 	bl	80002ac <__adddf3>
 8010fe4:	4632      	mov	r2, r6
 8010fe6:	463b      	mov	r3, r7
 8010fe8:	4680      	mov	r8, r0
 8010fea:	4689      	mov	r9, r1
 8010fec:	f7ef f95c 	bl	80002a8 <__aeabi_dsub>
 8010ff0:	4602      	mov	r2, r0
 8010ff2:	460b      	mov	r3, r1
 8010ff4:	4620      	mov	r0, r4
 8010ff6:	4629      	mov	r1, r5
 8010ff8:	f7ef f956 	bl	80002a8 <__aeabi_dsub>
 8010ffc:	4642      	mov	r2, r8
 8010ffe:	4606      	mov	r6, r0
 8011000:	460f      	mov	r7, r1
 8011002:	464b      	mov	r3, r9
 8011004:	4640      	mov	r0, r8
 8011006:	4649      	mov	r1, r9
 8011008:	f7ef fb06 	bl	8000618 <__aeabi_dmul>
 801100c:	a35c      	add	r3, pc, #368	; (adr r3, 8011180 <__ieee754_pow+0x9f8>)
 801100e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011012:	4604      	mov	r4, r0
 8011014:	460d      	mov	r5, r1
 8011016:	f7ef faff 	bl	8000618 <__aeabi_dmul>
 801101a:	a35b      	add	r3, pc, #364	; (adr r3, 8011188 <__ieee754_pow+0xa00>)
 801101c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011020:	f7ef f942 	bl	80002a8 <__aeabi_dsub>
 8011024:	4622      	mov	r2, r4
 8011026:	462b      	mov	r3, r5
 8011028:	f7ef faf6 	bl	8000618 <__aeabi_dmul>
 801102c:	a358      	add	r3, pc, #352	; (adr r3, 8011190 <__ieee754_pow+0xa08>)
 801102e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011032:	f7ef f93b 	bl	80002ac <__adddf3>
 8011036:	4622      	mov	r2, r4
 8011038:	462b      	mov	r3, r5
 801103a:	f7ef faed 	bl	8000618 <__aeabi_dmul>
 801103e:	a356      	add	r3, pc, #344	; (adr r3, 8011198 <__ieee754_pow+0xa10>)
 8011040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011044:	f7ef f930 	bl	80002a8 <__aeabi_dsub>
 8011048:	4622      	mov	r2, r4
 801104a:	462b      	mov	r3, r5
 801104c:	f7ef fae4 	bl	8000618 <__aeabi_dmul>
 8011050:	a353      	add	r3, pc, #332	; (adr r3, 80111a0 <__ieee754_pow+0xa18>)
 8011052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011056:	f7ef f929 	bl	80002ac <__adddf3>
 801105a:	4622      	mov	r2, r4
 801105c:	462b      	mov	r3, r5
 801105e:	f7ef fadb 	bl	8000618 <__aeabi_dmul>
 8011062:	4602      	mov	r2, r0
 8011064:	460b      	mov	r3, r1
 8011066:	4640      	mov	r0, r8
 8011068:	4649      	mov	r1, r9
 801106a:	f7ef f91d 	bl	80002a8 <__aeabi_dsub>
 801106e:	4604      	mov	r4, r0
 8011070:	460d      	mov	r5, r1
 8011072:	4602      	mov	r2, r0
 8011074:	460b      	mov	r3, r1
 8011076:	4640      	mov	r0, r8
 8011078:	4649      	mov	r1, r9
 801107a:	f7ef facd 	bl	8000618 <__aeabi_dmul>
 801107e:	2200      	movs	r2, #0
 8011080:	ec41 0b19 	vmov	d9, r0, r1
 8011084:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011088:	4620      	mov	r0, r4
 801108a:	4629      	mov	r1, r5
 801108c:	f7ef f90c 	bl	80002a8 <__aeabi_dsub>
 8011090:	4602      	mov	r2, r0
 8011092:	460b      	mov	r3, r1
 8011094:	ec51 0b19 	vmov	r0, r1, d9
 8011098:	f7ef fbe8 	bl	800086c <__aeabi_ddiv>
 801109c:	4632      	mov	r2, r6
 801109e:	4604      	mov	r4, r0
 80110a0:	460d      	mov	r5, r1
 80110a2:	463b      	mov	r3, r7
 80110a4:	4640      	mov	r0, r8
 80110a6:	4649      	mov	r1, r9
 80110a8:	f7ef fab6 	bl	8000618 <__aeabi_dmul>
 80110ac:	4632      	mov	r2, r6
 80110ae:	463b      	mov	r3, r7
 80110b0:	f7ef f8fc 	bl	80002ac <__adddf3>
 80110b4:	4602      	mov	r2, r0
 80110b6:	460b      	mov	r3, r1
 80110b8:	4620      	mov	r0, r4
 80110ba:	4629      	mov	r1, r5
 80110bc:	f7ef f8f4 	bl	80002a8 <__aeabi_dsub>
 80110c0:	4642      	mov	r2, r8
 80110c2:	464b      	mov	r3, r9
 80110c4:	f7ef f8f0 	bl	80002a8 <__aeabi_dsub>
 80110c8:	460b      	mov	r3, r1
 80110ca:	4602      	mov	r2, r0
 80110cc:	493a      	ldr	r1, [pc, #232]	; (80111b8 <__ieee754_pow+0xa30>)
 80110ce:	2000      	movs	r0, #0
 80110d0:	f7ef f8ea 	bl	80002a8 <__aeabi_dsub>
 80110d4:	e9cd 0100 	strd	r0, r1, [sp]
 80110d8:	9b01      	ldr	r3, [sp, #4]
 80110da:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80110de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80110e2:	da2f      	bge.n	8011144 <__ieee754_pow+0x9bc>
 80110e4:	4650      	mov	r0, sl
 80110e6:	ed9d 0b00 	vldr	d0, [sp]
 80110ea:	f000 f9cd 	bl	8011488 <scalbn>
 80110ee:	ec51 0b10 	vmov	r0, r1, d0
 80110f2:	ec53 2b18 	vmov	r2, r3, d8
 80110f6:	f7ff bbe0 	b.w	80108ba <__ieee754_pow+0x132>
 80110fa:	4b30      	ldr	r3, [pc, #192]	; (80111bc <__ieee754_pow+0xa34>)
 80110fc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011100:	429e      	cmp	r6, r3
 8011102:	f77f af0b 	ble.w	8010f1c <__ieee754_pow+0x794>
 8011106:	4b2e      	ldr	r3, [pc, #184]	; (80111c0 <__ieee754_pow+0xa38>)
 8011108:	440b      	add	r3, r1
 801110a:	4303      	orrs	r3, r0
 801110c:	d00b      	beq.n	8011126 <__ieee754_pow+0x99e>
 801110e:	a326      	add	r3, pc, #152	; (adr r3, 80111a8 <__ieee754_pow+0xa20>)
 8011110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011114:	ec51 0b18 	vmov	r0, r1, d8
 8011118:	f7ef fa7e 	bl	8000618 <__aeabi_dmul>
 801111c:	a322      	add	r3, pc, #136	; (adr r3, 80111a8 <__ieee754_pow+0xa20>)
 801111e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011122:	f7ff bbca 	b.w	80108ba <__ieee754_pow+0x132>
 8011126:	4622      	mov	r2, r4
 8011128:	462b      	mov	r3, r5
 801112a:	f7ef f8bd 	bl	80002a8 <__aeabi_dsub>
 801112e:	4642      	mov	r2, r8
 8011130:	464b      	mov	r3, r9
 8011132:	f7ef fcf7 	bl	8000b24 <__aeabi_dcmpge>
 8011136:	2800      	cmp	r0, #0
 8011138:	f43f aef0 	beq.w	8010f1c <__ieee754_pow+0x794>
 801113c:	e7e7      	b.n	801110e <__ieee754_pow+0x986>
 801113e:	f04f 0a00 	mov.w	sl, #0
 8011142:	e717      	b.n	8010f74 <__ieee754_pow+0x7ec>
 8011144:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011148:	4619      	mov	r1, r3
 801114a:	e7d2      	b.n	80110f2 <__ieee754_pow+0x96a>
 801114c:	491a      	ldr	r1, [pc, #104]	; (80111b8 <__ieee754_pow+0xa30>)
 801114e:	2000      	movs	r0, #0
 8011150:	f7ff bb9e 	b.w	8010890 <__ieee754_pow+0x108>
 8011154:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011158:	f7ff bb9a 	b.w	8010890 <__ieee754_pow+0x108>
 801115c:	9000      	str	r0, [sp, #0]
 801115e:	f7ff bb76 	b.w	801084e <__ieee754_pow+0xc6>
 8011162:	2100      	movs	r1, #0
 8011164:	f7ff bb60 	b.w	8010828 <__ieee754_pow+0xa0>
 8011168:	00000000 	.word	0x00000000
 801116c:	3fe62e43 	.word	0x3fe62e43
 8011170:	fefa39ef 	.word	0xfefa39ef
 8011174:	3fe62e42 	.word	0x3fe62e42
 8011178:	0ca86c39 	.word	0x0ca86c39
 801117c:	be205c61 	.word	0xbe205c61
 8011180:	72bea4d0 	.word	0x72bea4d0
 8011184:	3e663769 	.word	0x3e663769
 8011188:	c5d26bf1 	.word	0xc5d26bf1
 801118c:	3ebbbd41 	.word	0x3ebbbd41
 8011190:	af25de2c 	.word	0xaf25de2c
 8011194:	3f11566a 	.word	0x3f11566a
 8011198:	16bebd93 	.word	0x16bebd93
 801119c:	3f66c16c 	.word	0x3f66c16c
 80111a0:	5555553e 	.word	0x5555553e
 80111a4:	3fc55555 	.word	0x3fc55555
 80111a8:	c2f8f359 	.word	0xc2f8f359
 80111ac:	01a56e1f 	.word	0x01a56e1f
 80111b0:	3fe00000 	.word	0x3fe00000
 80111b4:	000fffff 	.word	0x000fffff
 80111b8:	3ff00000 	.word	0x3ff00000
 80111bc:	4090cbff 	.word	0x4090cbff
 80111c0:	3f6f3400 	.word	0x3f6f3400
 80111c4:	652b82fe 	.word	0x652b82fe
 80111c8:	3c971547 	.word	0x3c971547

080111cc <__ieee754_sqrt>:
 80111cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111d0:	ec55 4b10 	vmov	r4, r5, d0
 80111d4:	4e56      	ldr	r6, [pc, #344]	; (8011330 <__ieee754_sqrt+0x164>)
 80111d6:	43ae      	bics	r6, r5
 80111d8:	ee10 0a10 	vmov	r0, s0
 80111dc:	ee10 3a10 	vmov	r3, s0
 80111e0:	4629      	mov	r1, r5
 80111e2:	462a      	mov	r2, r5
 80111e4:	d110      	bne.n	8011208 <__ieee754_sqrt+0x3c>
 80111e6:	ee10 2a10 	vmov	r2, s0
 80111ea:	462b      	mov	r3, r5
 80111ec:	f7ef fa14 	bl	8000618 <__aeabi_dmul>
 80111f0:	4602      	mov	r2, r0
 80111f2:	460b      	mov	r3, r1
 80111f4:	4620      	mov	r0, r4
 80111f6:	4629      	mov	r1, r5
 80111f8:	f7ef f858 	bl	80002ac <__adddf3>
 80111fc:	4604      	mov	r4, r0
 80111fe:	460d      	mov	r5, r1
 8011200:	ec45 4b10 	vmov	d0, r4, r5
 8011204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011208:	2d00      	cmp	r5, #0
 801120a:	dc10      	bgt.n	801122e <__ieee754_sqrt+0x62>
 801120c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011210:	4330      	orrs	r0, r6
 8011212:	d0f5      	beq.n	8011200 <__ieee754_sqrt+0x34>
 8011214:	b15d      	cbz	r5, 801122e <__ieee754_sqrt+0x62>
 8011216:	ee10 2a10 	vmov	r2, s0
 801121a:	462b      	mov	r3, r5
 801121c:	ee10 0a10 	vmov	r0, s0
 8011220:	f7ef f842 	bl	80002a8 <__aeabi_dsub>
 8011224:	4602      	mov	r2, r0
 8011226:	460b      	mov	r3, r1
 8011228:	f7ef fb20 	bl	800086c <__aeabi_ddiv>
 801122c:	e7e6      	b.n	80111fc <__ieee754_sqrt+0x30>
 801122e:	1509      	asrs	r1, r1, #20
 8011230:	d076      	beq.n	8011320 <__ieee754_sqrt+0x154>
 8011232:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8011236:	07ce      	lsls	r6, r1, #31
 8011238:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801123c:	bf5e      	ittt	pl
 801123e:	0fda      	lsrpl	r2, r3, #31
 8011240:	005b      	lslpl	r3, r3, #1
 8011242:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8011246:	0fda      	lsrs	r2, r3, #31
 8011248:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801124c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8011250:	2000      	movs	r0, #0
 8011252:	106d      	asrs	r5, r5, #1
 8011254:	005b      	lsls	r3, r3, #1
 8011256:	f04f 0e16 	mov.w	lr, #22
 801125a:	4684      	mov	ip, r0
 801125c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011260:	eb0c 0401 	add.w	r4, ip, r1
 8011264:	4294      	cmp	r4, r2
 8011266:	bfde      	ittt	le
 8011268:	1b12      	suble	r2, r2, r4
 801126a:	eb04 0c01 	addle.w	ip, r4, r1
 801126e:	1840      	addle	r0, r0, r1
 8011270:	0052      	lsls	r2, r2, #1
 8011272:	f1be 0e01 	subs.w	lr, lr, #1
 8011276:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801127a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801127e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011282:	d1ed      	bne.n	8011260 <__ieee754_sqrt+0x94>
 8011284:	4671      	mov	r1, lr
 8011286:	2720      	movs	r7, #32
 8011288:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801128c:	4562      	cmp	r2, ip
 801128e:	eb04 060e 	add.w	r6, r4, lr
 8011292:	dc02      	bgt.n	801129a <__ieee754_sqrt+0xce>
 8011294:	d113      	bne.n	80112be <__ieee754_sqrt+0xf2>
 8011296:	429e      	cmp	r6, r3
 8011298:	d811      	bhi.n	80112be <__ieee754_sqrt+0xf2>
 801129a:	2e00      	cmp	r6, #0
 801129c:	eb06 0e04 	add.w	lr, r6, r4
 80112a0:	da43      	bge.n	801132a <__ieee754_sqrt+0x15e>
 80112a2:	f1be 0f00 	cmp.w	lr, #0
 80112a6:	db40      	blt.n	801132a <__ieee754_sqrt+0x15e>
 80112a8:	f10c 0801 	add.w	r8, ip, #1
 80112ac:	eba2 020c 	sub.w	r2, r2, ip
 80112b0:	429e      	cmp	r6, r3
 80112b2:	bf88      	it	hi
 80112b4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80112b8:	1b9b      	subs	r3, r3, r6
 80112ba:	4421      	add	r1, r4
 80112bc:	46c4      	mov	ip, r8
 80112be:	0052      	lsls	r2, r2, #1
 80112c0:	3f01      	subs	r7, #1
 80112c2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80112c6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80112ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80112ce:	d1dd      	bne.n	801128c <__ieee754_sqrt+0xc0>
 80112d0:	4313      	orrs	r3, r2
 80112d2:	d006      	beq.n	80112e2 <__ieee754_sqrt+0x116>
 80112d4:	1c4c      	adds	r4, r1, #1
 80112d6:	bf13      	iteet	ne
 80112d8:	3101      	addne	r1, #1
 80112da:	3001      	addeq	r0, #1
 80112dc:	4639      	moveq	r1, r7
 80112de:	f021 0101 	bicne.w	r1, r1, #1
 80112e2:	1043      	asrs	r3, r0, #1
 80112e4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80112e8:	0849      	lsrs	r1, r1, #1
 80112ea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80112ee:	07c2      	lsls	r2, r0, #31
 80112f0:	bf48      	it	mi
 80112f2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80112f6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80112fa:	460c      	mov	r4, r1
 80112fc:	463d      	mov	r5, r7
 80112fe:	e77f      	b.n	8011200 <__ieee754_sqrt+0x34>
 8011300:	0ada      	lsrs	r2, r3, #11
 8011302:	3815      	subs	r0, #21
 8011304:	055b      	lsls	r3, r3, #21
 8011306:	2a00      	cmp	r2, #0
 8011308:	d0fa      	beq.n	8011300 <__ieee754_sqrt+0x134>
 801130a:	02d7      	lsls	r7, r2, #11
 801130c:	d50a      	bpl.n	8011324 <__ieee754_sqrt+0x158>
 801130e:	f1c1 0420 	rsb	r4, r1, #32
 8011312:	fa23 f404 	lsr.w	r4, r3, r4
 8011316:	1e4d      	subs	r5, r1, #1
 8011318:	408b      	lsls	r3, r1
 801131a:	4322      	orrs	r2, r4
 801131c:	1b41      	subs	r1, r0, r5
 801131e:	e788      	b.n	8011232 <__ieee754_sqrt+0x66>
 8011320:	4608      	mov	r0, r1
 8011322:	e7f0      	b.n	8011306 <__ieee754_sqrt+0x13a>
 8011324:	0052      	lsls	r2, r2, #1
 8011326:	3101      	adds	r1, #1
 8011328:	e7ef      	b.n	801130a <__ieee754_sqrt+0x13e>
 801132a:	46e0      	mov	r8, ip
 801132c:	e7be      	b.n	80112ac <__ieee754_sqrt+0xe0>
 801132e:	bf00      	nop
 8011330:	7ff00000 	.word	0x7ff00000

08011334 <fabs>:
 8011334:	ec51 0b10 	vmov	r0, r1, d0
 8011338:	ee10 2a10 	vmov	r2, s0
 801133c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011340:	ec43 2b10 	vmov	d0, r2, r3
 8011344:	4770      	bx	lr

08011346 <finite>:
 8011346:	b082      	sub	sp, #8
 8011348:	ed8d 0b00 	vstr	d0, [sp]
 801134c:	9801      	ldr	r0, [sp, #4]
 801134e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8011352:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8011356:	0fc0      	lsrs	r0, r0, #31
 8011358:	b002      	add	sp, #8
 801135a:	4770      	bx	lr
 801135c:	0000      	movs	r0, r0
	...

08011360 <nan>:
 8011360:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011368 <nan+0x8>
 8011364:	4770      	bx	lr
 8011366:	bf00      	nop
 8011368:	00000000 	.word	0x00000000
 801136c:	7ff80000 	.word	0x7ff80000

08011370 <rint>:
 8011370:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011372:	ec51 0b10 	vmov	r0, r1, d0
 8011376:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801137a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801137e:	2e13      	cmp	r6, #19
 8011380:	ee10 4a10 	vmov	r4, s0
 8011384:	460b      	mov	r3, r1
 8011386:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801138a:	dc58      	bgt.n	801143e <rint+0xce>
 801138c:	2e00      	cmp	r6, #0
 801138e:	da2b      	bge.n	80113e8 <rint+0x78>
 8011390:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8011394:	4302      	orrs	r2, r0
 8011396:	d023      	beq.n	80113e0 <rint+0x70>
 8011398:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801139c:	4302      	orrs	r2, r0
 801139e:	4254      	negs	r4, r2
 80113a0:	4314      	orrs	r4, r2
 80113a2:	0c4b      	lsrs	r3, r1, #17
 80113a4:	0b24      	lsrs	r4, r4, #12
 80113a6:	045b      	lsls	r3, r3, #17
 80113a8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80113ac:	ea44 0103 	orr.w	r1, r4, r3
 80113b0:	4b32      	ldr	r3, [pc, #200]	; (801147c <rint+0x10c>)
 80113b2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80113b6:	e9d3 6700 	ldrd	r6, r7, [r3]
 80113ba:	4602      	mov	r2, r0
 80113bc:	460b      	mov	r3, r1
 80113be:	4630      	mov	r0, r6
 80113c0:	4639      	mov	r1, r7
 80113c2:	f7ee ff73 	bl	80002ac <__adddf3>
 80113c6:	e9cd 0100 	strd	r0, r1, [sp]
 80113ca:	463b      	mov	r3, r7
 80113cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80113d0:	4632      	mov	r2, r6
 80113d2:	f7ee ff69 	bl	80002a8 <__aeabi_dsub>
 80113d6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80113da:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80113de:	4639      	mov	r1, r7
 80113e0:	ec41 0b10 	vmov	d0, r0, r1
 80113e4:	b003      	add	sp, #12
 80113e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113e8:	4a25      	ldr	r2, [pc, #148]	; (8011480 <rint+0x110>)
 80113ea:	4132      	asrs	r2, r6
 80113ec:	ea01 0702 	and.w	r7, r1, r2
 80113f0:	4307      	orrs	r7, r0
 80113f2:	d0f5      	beq.n	80113e0 <rint+0x70>
 80113f4:	0851      	lsrs	r1, r2, #1
 80113f6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80113fa:	4314      	orrs	r4, r2
 80113fc:	d00c      	beq.n	8011418 <rint+0xa8>
 80113fe:	ea23 0201 	bic.w	r2, r3, r1
 8011402:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011406:	2e13      	cmp	r6, #19
 8011408:	fa43 f606 	asr.w	r6, r3, r6
 801140c:	bf0c      	ite	eq
 801140e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8011412:	2400      	movne	r4, #0
 8011414:	ea42 0306 	orr.w	r3, r2, r6
 8011418:	4918      	ldr	r1, [pc, #96]	; (801147c <rint+0x10c>)
 801141a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801141e:	4622      	mov	r2, r4
 8011420:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011424:	4620      	mov	r0, r4
 8011426:	4629      	mov	r1, r5
 8011428:	f7ee ff40 	bl	80002ac <__adddf3>
 801142c:	e9cd 0100 	strd	r0, r1, [sp]
 8011430:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011434:	4622      	mov	r2, r4
 8011436:	462b      	mov	r3, r5
 8011438:	f7ee ff36 	bl	80002a8 <__aeabi_dsub>
 801143c:	e7d0      	b.n	80113e0 <rint+0x70>
 801143e:	2e33      	cmp	r6, #51	; 0x33
 8011440:	dd07      	ble.n	8011452 <rint+0xe2>
 8011442:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011446:	d1cb      	bne.n	80113e0 <rint+0x70>
 8011448:	ee10 2a10 	vmov	r2, s0
 801144c:	f7ee ff2e 	bl	80002ac <__adddf3>
 8011450:	e7c6      	b.n	80113e0 <rint+0x70>
 8011452:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8011456:	f04f 36ff 	mov.w	r6, #4294967295
 801145a:	40d6      	lsrs	r6, r2
 801145c:	4230      	tst	r0, r6
 801145e:	d0bf      	beq.n	80113e0 <rint+0x70>
 8011460:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8011464:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8011468:	bf1f      	itttt	ne
 801146a:	ea24 0101 	bicne.w	r1, r4, r1
 801146e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8011472:	fa44 f202 	asrne.w	r2, r4, r2
 8011476:	ea41 0402 	orrne.w	r4, r1, r2
 801147a:	e7cd      	b.n	8011418 <rint+0xa8>
 801147c:	08018538 	.word	0x08018538
 8011480:	000fffff 	.word	0x000fffff
 8011484:	00000000 	.word	0x00000000

08011488 <scalbn>:
 8011488:	b570      	push	{r4, r5, r6, lr}
 801148a:	ec55 4b10 	vmov	r4, r5, d0
 801148e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8011492:	4606      	mov	r6, r0
 8011494:	462b      	mov	r3, r5
 8011496:	b99a      	cbnz	r2, 80114c0 <scalbn+0x38>
 8011498:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801149c:	4323      	orrs	r3, r4
 801149e:	d036      	beq.n	801150e <scalbn+0x86>
 80114a0:	4b39      	ldr	r3, [pc, #228]	; (8011588 <scalbn+0x100>)
 80114a2:	4629      	mov	r1, r5
 80114a4:	ee10 0a10 	vmov	r0, s0
 80114a8:	2200      	movs	r2, #0
 80114aa:	f7ef f8b5 	bl	8000618 <__aeabi_dmul>
 80114ae:	4b37      	ldr	r3, [pc, #220]	; (801158c <scalbn+0x104>)
 80114b0:	429e      	cmp	r6, r3
 80114b2:	4604      	mov	r4, r0
 80114b4:	460d      	mov	r5, r1
 80114b6:	da10      	bge.n	80114da <scalbn+0x52>
 80114b8:	a32b      	add	r3, pc, #172	; (adr r3, 8011568 <scalbn+0xe0>)
 80114ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114be:	e03a      	b.n	8011536 <scalbn+0xae>
 80114c0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80114c4:	428a      	cmp	r2, r1
 80114c6:	d10c      	bne.n	80114e2 <scalbn+0x5a>
 80114c8:	ee10 2a10 	vmov	r2, s0
 80114cc:	4620      	mov	r0, r4
 80114ce:	4629      	mov	r1, r5
 80114d0:	f7ee feec 	bl	80002ac <__adddf3>
 80114d4:	4604      	mov	r4, r0
 80114d6:	460d      	mov	r5, r1
 80114d8:	e019      	b.n	801150e <scalbn+0x86>
 80114da:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80114de:	460b      	mov	r3, r1
 80114e0:	3a36      	subs	r2, #54	; 0x36
 80114e2:	4432      	add	r2, r6
 80114e4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80114e8:	428a      	cmp	r2, r1
 80114ea:	dd08      	ble.n	80114fe <scalbn+0x76>
 80114ec:	2d00      	cmp	r5, #0
 80114ee:	a120      	add	r1, pc, #128	; (adr r1, 8011570 <scalbn+0xe8>)
 80114f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80114f4:	da1c      	bge.n	8011530 <scalbn+0xa8>
 80114f6:	a120      	add	r1, pc, #128	; (adr r1, 8011578 <scalbn+0xf0>)
 80114f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80114fc:	e018      	b.n	8011530 <scalbn+0xa8>
 80114fe:	2a00      	cmp	r2, #0
 8011500:	dd08      	ble.n	8011514 <scalbn+0x8c>
 8011502:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011506:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801150a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801150e:	ec45 4b10 	vmov	d0, r4, r5
 8011512:	bd70      	pop	{r4, r5, r6, pc}
 8011514:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011518:	da19      	bge.n	801154e <scalbn+0xc6>
 801151a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801151e:	429e      	cmp	r6, r3
 8011520:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8011524:	dd0a      	ble.n	801153c <scalbn+0xb4>
 8011526:	a112      	add	r1, pc, #72	; (adr r1, 8011570 <scalbn+0xe8>)
 8011528:	e9d1 0100 	ldrd	r0, r1, [r1]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d1e2      	bne.n	80114f6 <scalbn+0x6e>
 8011530:	a30f      	add	r3, pc, #60	; (adr r3, 8011570 <scalbn+0xe8>)
 8011532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011536:	f7ef f86f 	bl	8000618 <__aeabi_dmul>
 801153a:	e7cb      	b.n	80114d4 <scalbn+0x4c>
 801153c:	a10a      	add	r1, pc, #40	; (adr r1, 8011568 <scalbn+0xe0>)
 801153e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011542:	2b00      	cmp	r3, #0
 8011544:	d0b8      	beq.n	80114b8 <scalbn+0x30>
 8011546:	a10e      	add	r1, pc, #56	; (adr r1, 8011580 <scalbn+0xf8>)
 8011548:	e9d1 0100 	ldrd	r0, r1, [r1]
 801154c:	e7b4      	b.n	80114b8 <scalbn+0x30>
 801154e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011552:	3236      	adds	r2, #54	; 0x36
 8011554:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011558:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801155c:	4620      	mov	r0, r4
 801155e:	4b0c      	ldr	r3, [pc, #48]	; (8011590 <scalbn+0x108>)
 8011560:	2200      	movs	r2, #0
 8011562:	e7e8      	b.n	8011536 <scalbn+0xae>
 8011564:	f3af 8000 	nop.w
 8011568:	c2f8f359 	.word	0xc2f8f359
 801156c:	01a56e1f 	.word	0x01a56e1f
 8011570:	8800759c 	.word	0x8800759c
 8011574:	7e37e43c 	.word	0x7e37e43c
 8011578:	8800759c 	.word	0x8800759c
 801157c:	fe37e43c 	.word	0xfe37e43c
 8011580:	c2f8f359 	.word	0xc2f8f359
 8011584:	81a56e1f 	.word	0x81a56e1f
 8011588:	43500000 	.word	0x43500000
 801158c:	ffff3cb0 	.word	0xffff3cb0
 8011590:	3c900000 	.word	0x3c900000

08011594 <abort>:
 8011594:	b508      	push	{r3, lr}
 8011596:	2006      	movs	r0, #6
 8011598:	f001 f9c2 	bl	8012920 <raise>
 801159c:	2001      	movs	r0, #1
 801159e:	f7f1 fc27 	bl	8002df0 <_exit>
	...

080115a4 <__errno>:
 80115a4:	4b01      	ldr	r3, [pc, #4]	; (80115ac <__errno+0x8>)
 80115a6:	6818      	ldr	r0, [r3, #0]
 80115a8:	4770      	bx	lr
 80115aa:	bf00      	nop
 80115ac:	2000004c 	.word	0x2000004c

080115b0 <std>:
 80115b0:	2300      	movs	r3, #0
 80115b2:	b510      	push	{r4, lr}
 80115b4:	4604      	mov	r4, r0
 80115b6:	e9c0 3300 	strd	r3, r3, [r0]
 80115ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80115be:	6083      	str	r3, [r0, #8]
 80115c0:	8181      	strh	r1, [r0, #12]
 80115c2:	6643      	str	r3, [r0, #100]	; 0x64
 80115c4:	81c2      	strh	r2, [r0, #14]
 80115c6:	6183      	str	r3, [r0, #24]
 80115c8:	4619      	mov	r1, r3
 80115ca:	2208      	movs	r2, #8
 80115cc:	305c      	adds	r0, #92	; 0x5c
 80115ce:	f000 f945 	bl	801185c <memset>
 80115d2:	4b05      	ldr	r3, [pc, #20]	; (80115e8 <std+0x38>)
 80115d4:	6263      	str	r3, [r4, #36]	; 0x24
 80115d6:	4b05      	ldr	r3, [pc, #20]	; (80115ec <std+0x3c>)
 80115d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80115da:	4b05      	ldr	r3, [pc, #20]	; (80115f0 <std+0x40>)
 80115dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80115de:	4b05      	ldr	r3, [pc, #20]	; (80115f4 <std+0x44>)
 80115e0:	6224      	str	r4, [r4, #32]
 80115e2:	6323      	str	r3, [r4, #48]	; 0x30
 80115e4:	bd10      	pop	{r4, pc}
 80115e6:	bf00      	nop
 80115e8:	080129f1 	.word	0x080129f1
 80115ec:	08012a17 	.word	0x08012a17
 80115f0:	08012a4f 	.word	0x08012a4f
 80115f4:	08012a73 	.word	0x08012a73

080115f8 <_cleanup_r>:
 80115f8:	4901      	ldr	r1, [pc, #4]	; (8011600 <_cleanup_r+0x8>)
 80115fa:	f000 b8af 	b.w	801175c <_fwalk_reent>
 80115fe:	bf00      	nop
 8011600:	08014915 	.word	0x08014915

08011604 <__sfmoreglue>:
 8011604:	b570      	push	{r4, r5, r6, lr}
 8011606:	1e4a      	subs	r2, r1, #1
 8011608:	2568      	movs	r5, #104	; 0x68
 801160a:	4355      	muls	r5, r2
 801160c:	460e      	mov	r6, r1
 801160e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011612:	f000 f97b 	bl	801190c <_malloc_r>
 8011616:	4604      	mov	r4, r0
 8011618:	b140      	cbz	r0, 801162c <__sfmoreglue+0x28>
 801161a:	2100      	movs	r1, #0
 801161c:	e9c0 1600 	strd	r1, r6, [r0]
 8011620:	300c      	adds	r0, #12
 8011622:	60a0      	str	r0, [r4, #8]
 8011624:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011628:	f000 f918 	bl	801185c <memset>
 801162c:	4620      	mov	r0, r4
 801162e:	bd70      	pop	{r4, r5, r6, pc}

08011630 <__sfp_lock_acquire>:
 8011630:	4801      	ldr	r0, [pc, #4]	; (8011638 <__sfp_lock_acquire+0x8>)
 8011632:	f000 b8d8 	b.w	80117e6 <__retarget_lock_acquire_recursive>
 8011636:	bf00      	nop
 8011638:	20006114 	.word	0x20006114

0801163c <__sfp_lock_release>:
 801163c:	4801      	ldr	r0, [pc, #4]	; (8011644 <__sfp_lock_release+0x8>)
 801163e:	f000 b8d3 	b.w	80117e8 <__retarget_lock_release_recursive>
 8011642:	bf00      	nop
 8011644:	20006114 	.word	0x20006114

08011648 <__sinit_lock_acquire>:
 8011648:	4801      	ldr	r0, [pc, #4]	; (8011650 <__sinit_lock_acquire+0x8>)
 801164a:	f000 b8cc 	b.w	80117e6 <__retarget_lock_acquire_recursive>
 801164e:	bf00      	nop
 8011650:	2000610f 	.word	0x2000610f

08011654 <__sinit_lock_release>:
 8011654:	4801      	ldr	r0, [pc, #4]	; (801165c <__sinit_lock_release+0x8>)
 8011656:	f000 b8c7 	b.w	80117e8 <__retarget_lock_release_recursive>
 801165a:	bf00      	nop
 801165c:	2000610f 	.word	0x2000610f

08011660 <__sinit>:
 8011660:	b510      	push	{r4, lr}
 8011662:	4604      	mov	r4, r0
 8011664:	f7ff fff0 	bl	8011648 <__sinit_lock_acquire>
 8011668:	69a3      	ldr	r3, [r4, #24]
 801166a:	b11b      	cbz	r3, 8011674 <__sinit+0x14>
 801166c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011670:	f7ff bff0 	b.w	8011654 <__sinit_lock_release>
 8011674:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011678:	6523      	str	r3, [r4, #80]	; 0x50
 801167a:	4b13      	ldr	r3, [pc, #76]	; (80116c8 <__sinit+0x68>)
 801167c:	4a13      	ldr	r2, [pc, #76]	; (80116cc <__sinit+0x6c>)
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	62a2      	str	r2, [r4, #40]	; 0x28
 8011682:	42a3      	cmp	r3, r4
 8011684:	bf04      	itt	eq
 8011686:	2301      	moveq	r3, #1
 8011688:	61a3      	streq	r3, [r4, #24]
 801168a:	4620      	mov	r0, r4
 801168c:	f000 f820 	bl	80116d0 <__sfp>
 8011690:	6060      	str	r0, [r4, #4]
 8011692:	4620      	mov	r0, r4
 8011694:	f000 f81c 	bl	80116d0 <__sfp>
 8011698:	60a0      	str	r0, [r4, #8]
 801169a:	4620      	mov	r0, r4
 801169c:	f000 f818 	bl	80116d0 <__sfp>
 80116a0:	2200      	movs	r2, #0
 80116a2:	60e0      	str	r0, [r4, #12]
 80116a4:	2104      	movs	r1, #4
 80116a6:	6860      	ldr	r0, [r4, #4]
 80116a8:	f7ff ff82 	bl	80115b0 <std>
 80116ac:	68a0      	ldr	r0, [r4, #8]
 80116ae:	2201      	movs	r2, #1
 80116b0:	2109      	movs	r1, #9
 80116b2:	f7ff ff7d 	bl	80115b0 <std>
 80116b6:	68e0      	ldr	r0, [r4, #12]
 80116b8:	2202      	movs	r2, #2
 80116ba:	2112      	movs	r1, #18
 80116bc:	f7ff ff78 	bl	80115b0 <std>
 80116c0:	2301      	movs	r3, #1
 80116c2:	61a3      	str	r3, [r4, #24]
 80116c4:	e7d2      	b.n	801166c <__sinit+0xc>
 80116c6:	bf00      	nop
 80116c8:	080185a8 	.word	0x080185a8
 80116cc:	080115f9 	.word	0x080115f9

080116d0 <__sfp>:
 80116d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116d2:	4607      	mov	r7, r0
 80116d4:	f7ff ffac 	bl	8011630 <__sfp_lock_acquire>
 80116d8:	4b1e      	ldr	r3, [pc, #120]	; (8011754 <__sfp+0x84>)
 80116da:	681e      	ldr	r6, [r3, #0]
 80116dc:	69b3      	ldr	r3, [r6, #24]
 80116de:	b913      	cbnz	r3, 80116e6 <__sfp+0x16>
 80116e0:	4630      	mov	r0, r6
 80116e2:	f7ff ffbd 	bl	8011660 <__sinit>
 80116e6:	3648      	adds	r6, #72	; 0x48
 80116e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80116ec:	3b01      	subs	r3, #1
 80116ee:	d503      	bpl.n	80116f8 <__sfp+0x28>
 80116f0:	6833      	ldr	r3, [r6, #0]
 80116f2:	b30b      	cbz	r3, 8011738 <__sfp+0x68>
 80116f4:	6836      	ldr	r6, [r6, #0]
 80116f6:	e7f7      	b.n	80116e8 <__sfp+0x18>
 80116f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80116fc:	b9d5      	cbnz	r5, 8011734 <__sfp+0x64>
 80116fe:	4b16      	ldr	r3, [pc, #88]	; (8011758 <__sfp+0x88>)
 8011700:	60e3      	str	r3, [r4, #12]
 8011702:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011706:	6665      	str	r5, [r4, #100]	; 0x64
 8011708:	f000 f86c 	bl	80117e4 <__retarget_lock_init_recursive>
 801170c:	f7ff ff96 	bl	801163c <__sfp_lock_release>
 8011710:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011714:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011718:	6025      	str	r5, [r4, #0]
 801171a:	61a5      	str	r5, [r4, #24]
 801171c:	2208      	movs	r2, #8
 801171e:	4629      	mov	r1, r5
 8011720:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011724:	f000 f89a 	bl	801185c <memset>
 8011728:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801172c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011730:	4620      	mov	r0, r4
 8011732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011734:	3468      	adds	r4, #104	; 0x68
 8011736:	e7d9      	b.n	80116ec <__sfp+0x1c>
 8011738:	2104      	movs	r1, #4
 801173a:	4638      	mov	r0, r7
 801173c:	f7ff ff62 	bl	8011604 <__sfmoreglue>
 8011740:	4604      	mov	r4, r0
 8011742:	6030      	str	r0, [r6, #0]
 8011744:	2800      	cmp	r0, #0
 8011746:	d1d5      	bne.n	80116f4 <__sfp+0x24>
 8011748:	f7ff ff78 	bl	801163c <__sfp_lock_release>
 801174c:	230c      	movs	r3, #12
 801174e:	603b      	str	r3, [r7, #0]
 8011750:	e7ee      	b.n	8011730 <__sfp+0x60>
 8011752:	bf00      	nop
 8011754:	080185a8 	.word	0x080185a8
 8011758:	ffff0001 	.word	0xffff0001

0801175c <_fwalk_reent>:
 801175c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011760:	4606      	mov	r6, r0
 8011762:	4688      	mov	r8, r1
 8011764:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011768:	2700      	movs	r7, #0
 801176a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801176e:	f1b9 0901 	subs.w	r9, r9, #1
 8011772:	d505      	bpl.n	8011780 <_fwalk_reent+0x24>
 8011774:	6824      	ldr	r4, [r4, #0]
 8011776:	2c00      	cmp	r4, #0
 8011778:	d1f7      	bne.n	801176a <_fwalk_reent+0xe>
 801177a:	4638      	mov	r0, r7
 801177c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011780:	89ab      	ldrh	r3, [r5, #12]
 8011782:	2b01      	cmp	r3, #1
 8011784:	d907      	bls.n	8011796 <_fwalk_reent+0x3a>
 8011786:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801178a:	3301      	adds	r3, #1
 801178c:	d003      	beq.n	8011796 <_fwalk_reent+0x3a>
 801178e:	4629      	mov	r1, r5
 8011790:	4630      	mov	r0, r6
 8011792:	47c0      	blx	r8
 8011794:	4307      	orrs	r7, r0
 8011796:	3568      	adds	r5, #104	; 0x68
 8011798:	e7e9      	b.n	801176e <_fwalk_reent+0x12>
	...

0801179c <__libc_init_array>:
 801179c:	b570      	push	{r4, r5, r6, lr}
 801179e:	4d0d      	ldr	r5, [pc, #52]	; (80117d4 <__libc_init_array+0x38>)
 80117a0:	4c0d      	ldr	r4, [pc, #52]	; (80117d8 <__libc_init_array+0x3c>)
 80117a2:	1b64      	subs	r4, r4, r5
 80117a4:	10a4      	asrs	r4, r4, #2
 80117a6:	2600      	movs	r6, #0
 80117a8:	42a6      	cmp	r6, r4
 80117aa:	d109      	bne.n	80117c0 <__libc_init_array+0x24>
 80117ac:	4d0b      	ldr	r5, [pc, #44]	; (80117dc <__libc_init_array+0x40>)
 80117ae:	4c0c      	ldr	r4, [pc, #48]	; (80117e0 <__libc_init_array+0x44>)
 80117b0:	f005 f888 	bl	80168c4 <_init>
 80117b4:	1b64      	subs	r4, r4, r5
 80117b6:	10a4      	asrs	r4, r4, #2
 80117b8:	2600      	movs	r6, #0
 80117ba:	42a6      	cmp	r6, r4
 80117bc:	d105      	bne.n	80117ca <__libc_init_array+0x2e>
 80117be:	bd70      	pop	{r4, r5, r6, pc}
 80117c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80117c4:	4798      	blx	r3
 80117c6:	3601      	adds	r6, #1
 80117c8:	e7ee      	b.n	80117a8 <__libc_init_array+0xc>
 80117ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80117ce:	4798      	blx	r3
 80117d0:	3601      	adds	r6, #1
 80117d2:	e7f2      	b.n	80117ba <__libc_init_array+0x1e>
 80117d4:	08018a18 	.word	0x08018a18
 80117d8:	08018a18 	.word	0x08018a18
 80117dc:	08018a18 	.word	0x08018a18
 80117e0:	08018a20 	.word	0x08018a20

080117e4 <__retarget_lock_init_recursive>:
 80117e4:	4770      	bx	lr

080117e6 <__retarget_lock_acquire_recursive>:
 80117e6:	4770      	bx	lr

080117e8 <__retarget_lock_release_recursive>:
 80117e8:	4770      	bx	lr
	...

080117ec <malloc>:
 80117ec:	4b02      	ldr	r3, [pc, #8]	; (80117f8 <malloc+0xc>)
 80117ee:	4601      	mov	r1, r0
 80117f0:	6818      	ldr	r0, [r3, #0]
 80117f2:	f000 b88b 	b.w	801190c <_malloc_r>
 80117f6:	bf00      	nop
 80117f8:	2000004c 	.word	0x2000004c

080117fc <free>:
 80117fc:	4b02      	ldr	r3, [pc, #8]	; (8011808 <free+0xc>)
 80117fe:	4601      	mov	r1, r0
 8011800:	6818      	ldr	r0, [r3, #0]
 8011802:	f000 b833 	b.w	801186c <_free_r>
 8011806:	bf00      	nop
 8011808:	2000004c 	.word	0x2000004c

0801180c <memcpy>:
 801180c:	440a      	add	r2, r1
 801180e:	4291      	cmp	r1, r2
 8011810:	f100 33ff 	add.w	r3, r0, #4294967295
 8011814:	d100      	bne.n	8011818 <memcpy+0xc>
 8011816:	4770      	bx	lr
 8011818:	b510      	push	{r4, lr}
 801181a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801181e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011822:	4291      	cmp	r1, r2
 8011824:	d1f9      	bne.n	801181a <memcpy+0xe>
 8011826:	bd10      	pop	{r4, pc}

08011828 <memmove>:
 8011828:	4288      	cmp	r0, r1
 801182a:	b510      	push	{r4, lr}
 801182c:	eb01 0402 	add.w	r4, r1, r2
 8011830:	d902      	bls.n	8011838 <memmove+0x10>
 8011832:	4284      	cmp	r4, r0
 8011834:	4623      	mov	r3, r4
 8011836:	d807      	bhi.n	8011848 <memmove+0x20>
 8011838:	1e43      	subs	r3, r0, #1
 801183a:	42a1      	cmp	r1, r4
 801183c:	d008      	beq.n	8011850 <memmove+0x28>
 801183e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011842:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011846:	e7f8      	b.n	801183a <memmove+0x12>
 8011848:	4402      	add	r2, r0
 801184a:	4601      	mov	r1, r0
 801184c:	428a      	cmp	r2, r1
 801184e:	d100      	bne.n	8011852 <memmove+0x2a>
 8011850:	bd10      	pop	{r4, pc}
 8011852:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011856:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801185a:	e7f7      	b.n	801184c <memmove+0x24>

0801185c <memset>:
 801185c:	4402      	add	r2, r0
 801185e:	4603      	mov	r3, r0
 8011860:	4293      	cmp	r3, r2
 8011862:	d100      	bne.n	8011866 <memset+0xa>
 8011864:	4770      	bx	lr
 8011866:	f803 1b01 	strb.w	r1, [r3], #1
 801186a:	e7f9      	b.n	8011860 <memset+0x4>

0801186c <_free_r>:
 801186c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801186e:	2900      	cmp	r1, #0
 8011870:	d048      	beq.n	8011904 <_free_r+0x98>
 8011872:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011876:	9001      	str	r0, [sp, #4]
 8011878:	2b00      	cmp	r3, #0
 801187a:	f1a1 0404 	sub.w	r4, r1, #4
 801187e:	bfb8      	it	lt
 8011880:	18e4      	addlt	r4, r4, r3
 8011882:	f003 fc91 	bl	80151a8 <__malloc_lock>
 8011886:	4a20      	ldr	r2, [pc, #128]	; (8011908 <_free_r+0x9c>)
 8011888:	9801      	ldr	r0, [sp, #4]
 801188a:	6813      	ldr	r3, [r2, #0]
 801188c:	4615      	mov	r5, r2
 801188e:	b933      	cbnz	r3, 801189e <_free_r+0x32>
 8011890:	6063      	str	r3, [r4, #4]
 8011892:	6014      	str	r4, [r2, #0]
 8011894:	b003      	add	sp, #12
 8011896:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801189a:	f003 bc8b 	b.w	80151b4 <__malloc_unlock>
 801189e:	42a3      	cmp	r3, r4
 80118a0:	d90b      	bls.n	80118ba <_free_r+0x4e>
 80118a2:	6821      	ldr	r1, [r4, #0]
 80118a4:	1862      	adds	r2, r4, r1
 80118a6:	4293      	cmp	r3, r2
 80118a8:	bf04      	itt	eq
 80118aa:	681a      	ldreq	r2, [r3, #0]
 80118ac:	685b      	ldreq	r3, [r3, #4]
 80118ae:	6063      	str	r3, [r4, #4]
 80118b0:	bf04      	itt	eq
 80118b2:	1852      	addeq	r2, r2, r1
 80118b4:	6022      	streq	r2, [r4, #0]
 80118b6:	602c      	str	r4, [r5, #0]
 80118b8:	e7ec      	b.n	8011894 <_free_r+0x28>
 80118ba:	461a      	mov	r2, r3
 80118bc:	685b      	ldr	r3, [r3, #4]
 80118be:	b10b      	cbz	r3, 80118c4 <_free_r+0x58>
 80118c0:	42a3      	cmp	r3, r4
 80118c2:	d9fa      	bls.n	80118ba <_free_r+0x4e>
 80118c4:	6811      	ldr	r1, [r2, #0]
 80118c6:	1855      	adds	r5, r2, r1
 80118c8:	42a5      	cmp	r5, r4
 80118ca:	d10b      	bne.n	80118e4 <_free_r+0x78>
 80118cc:	6824      	ldr	r4, [r4, #0]
 80118ce:	4421      	add	r1, r4
 80118d0:	1854      	adds	r4, r2, r1
 80118d2:	42a3      	cmp	r3, r4
 80118d4:	6011      	str	r1, [r2, #0]
 80118d6:	d1dd      	bne.n	8011894 <_free_r+0x28>
 80118d8:	681c      	ldr	r4, [r3, #0]
 80118da:	685b      	ldr	r3, [r3, #4]
 80118dc:	6053      	str	r3, [r2, #4]
 80118de:	4421      	add	r1, r4
 80118e0:	6011      	str	r1, [r2, #0]
 80118e2:	e7d7      	b.n	8011894 <_free_r+0x28>
 80118e4:	d902      	bls.n	80118ec <_free_r+0x80>
 80118e6:	230c      	movs	r3, #12
 80118e8:	6003      	str	r3, [r0, #0]
 80118ea:	e7d3      	b.n	8011894 <_free_r+0x28>
 80118ec:	6825      	ldr	r5, [r4, #0]
 80118ee:	1961      	adds	r1, r4, r5
 80118f0:	428b      	cmp	r3, r1
 80118f2:	bf04      	itt	eq
 80118f4:	6819      	ldreq	r1, [r3, #0]
 80118f6:	685b      	ldreq	r3, [r3, #4]
 80118f8:	6063      	str	r3, [r4, #4]
 80118fa:	bf04      	itt	eq
 80118fc:	1949      	addeq	r1, r1, r5
 80118fe:	6021      	streq	r1, [r4, #0]
 8011900:	6054      	str	r4, [r2, #4]
 8011902:	e7c7      	b.n	8011894 <_free_r+0x28>
 8011904:	b003      	add	sp, #12
 8011906:	bd30      	pop	{r4, r5, pc}
 8011908:	200059b0 	.word	0x200059b0

0801190c <_malloc_r>:
 801190c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801190e:	1ccd      	adds	r5, r1, #3
 8011910:	f025 0503 	bic.w	r5, r5, #3
 8011914:	3508      	adds	r5, #8
 8011916:	2d0c      	cmp	r5, #12
 8011918:	bf38      	it	cc
 801191a:	250c      	movcc	r5, #12
 801191c:	2d00      	cmp	r5, #0
 801191e:	4606      	mov	r6, r0
 8011920:	db01      	blt.n	8011926 <_malloc_r+0x1a>
 8011922:	42a9      	cmp	r1, r5
 8011924:	d903      	bls.n	801192e <_malloc_r+0x22>
 8011926:	230c      	movs	r3, #12
 8011928:	6033      	str	r3, [r6, #0]
 801192a:	2000      	movs	r0, #0
 801192c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801192e:	f003 fc3b 	bl	80151a8 <__malloc_lock>
 8011932:	4921      	ldr	r1, [pc, #132]	; (80119b8 <_malloc_r+0xac>)
 8011934:	680a      	ldr	r2, [r1, #0]
 8011936:	4614      	mov	r4, r2
 8011938:	b99c      	cbnz	r4, 8011962 <_malloc_r+0x56>
 801193a:	4f20      	ldr	r7, [pc, #128]	; (80119bc <_malloc_r+0xb0>)
 801193c:	683b      	ldr	r3, [r7, #0]
 801193e:	b923      	cbnz	r3, 801194a <_malloc_r+0x3e>
 8011940:	4621      	mov	r1, r4
 8011942:	4630      	mov	r0, r6
 8011944:	f000 ffae 	bl	80128a4 <_sbrk_r>
 8011948:	6038      	str	r0, [r7, #0]
 801194a:	4629      	mov	r1, r5
 801194c:	4630      	mov	r0, r6
 801194e:	f000 ffa9 	bl	80128a4 <_sbrk_r>
 8011952:	1c43      	adds	r3, r0, #1
 8011954:	d123      	bne.n	801199e <_malloc_r+0x92>
 8011956:	230c      	movs	r3, #12
 8011958:	6033      	str	r3, [r6, #0]
 801195a:	4630      	mov	r0, r6
 801195c:	f003 fc2a 	bl	80151b4 <__malloc_unlock>
 8011960:	e7e3      	b.n	801192a <_malloc_r+0x1e>
 8011962:	6823      	ldr	r3, [r4, #0]
 8011964:	1b5b      	subs	r3, r3, r5
 8011966:	d417      	bmi.n	8011998 <_malloc_r+0x8c>
 8011968:	2b0b      	cmp	r3, #11
 801196a:	d903      	bls.n	8011974 <_malloc_r+0x68>
 801196c:	6023      	str	r3, [r4, #0]
 801196e:	441c      	add	r4, r3
 8011970:	6025      	str	r5, [r4, #0]
 8011972:	e004      	b.n	801197e <_malloc_r+0x72>
 8011974:	6863      	ldr	r3, [r4, #4]
 8011976:	42a2      	cmp	r2, r4
 8011978:	bf0c      	ite	eq
 801197a:	600b      	streq	r3, [r1, #0]
 801197c:	6053      	strne	r3, [r2, #4]
 801197e:	4630      	mov	r0, r6
 8011980:	f003 fc18 	bl	80151b4 <__malloc_unlock>
 8011984:	f104 000b 	add.w	r0, r4, #11
 8011988:	1d23      	adds	r3, r4, #4
 801198a:	f020 0007 	bic.w	r0, r0, #7
 801198e:	1ac2      	subs	r2, r0, r3
 8011990:	d0cc      	beq.n	801192c <_malloc_r+0x20>
 8011992:	1a1b      	subs	r3, r3, r0
 8011994:	50a3      	str	r3, [r4, r2]
 8011996:	e7c9      	b.n	801192c <_malloc_r+0x20>
 8011998:	4622      	mov	r2, r4
 801199a:	6864      	ldr	r4, [r4, #4]
 801199c:	e7cc      	b.n	8011938 <_malloc_r+0x2c>
 801199e:	1cc4      	adds	r4, r0, #3
 80119a0:	f024 0403 	bic.w	r4, r4, #3
 80119a4:	42a0      	cmp	r0, r4
 80119a6:	d0e3      	beq.n	8011970 <_malloc_r+0x64>
 80119a8:	1a21      	subs	r1, r4, r0
 80119aa:	4630      	mov	r0, r6
 80119ac:	f000 ff7a 	bl	80128a4 <_sbrk_r>
 80119b0:	3001      	adds	r0, #1
 80119b2:	d1dd      	bne.n	8011970 <_malloc_r+0x64>
 80119b4:	e7cf      	b.n	8011956 <_malloc_r+0x4a>
 80119b6:	bf00      	nop
 80119b8:	200059b0 	.word	0x200059b0
 80119bc:	200059b4 	.word	0x200059b4

080119c0 <__cvt>:
 80119c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80119c4:	ec55 4b10 	vmov	r4, r5, d0
 80119c8:	2d00      	cmp	r5, #0
 80119ca:	460e      	mov	r6, r1
 80119cc:	4619      	mov	r1, r3
 80119ce:	462b      	mov	r3, r5
 80119d0:	bfbb      	ittet	lt
 80119d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80119d6:	461d      	movlt	r5, r3
 80119d8:	2300      	movge	r3, #0
 80119da:	232d      	movlt	r3, #45	; 0x2d
 80119dc:	700b      	strb	r3, [r1, #0]
 80119de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80119e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80119e4:	4691      	mov	r9, r2
 80119e6:	f023 0820 	bic.w	r8, r3, #32
 80119ea:	bfbc      	itt	lt
 80119ec:	4622      	movlt	r2, r4
 80119ee:	4614      	movlt	r4, r2
 80119f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80119f4:	d005      	beq.n	8011a02 <__cvt+0x42>
 80119f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80119fa:	d100      	bne.n	80119fe <__cvt+0x3e>
 80119fc:	3601      	adds	r6, #1
 80119fe:	2102      	movs	r1, #2
 8011a00:	e000      	b.n	8011a04 <__cvt+0x44>
 8011a02:	2103      	movs	r1, #3
 8011a04:	ab03      	add	r3, sp, #12
 8011a06:	9301      	str	r3, [sp, #4]
 8011a08:	ab02      	add	r3, sp, #8
 8011a0a:	9300      	str	r3, [sp, #0]
 8011a0c:	ec45 4b10 	vmov	d0, r4, r5
 8011a10:	4653      	mov	r3, sl
 8011a12:	4632      	mov	r2, r6
 8011a14:	f002 f90c 	bl	8013c30 <_dtoa_r>
 8011a18:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011a1c:	4607      	mov	r7, r0
 8011a1e:	d102      	bne.n	8011a26 <__cvt+0x66>
 8011a20:	f019 0f01 	tst.w	r9, #1
 8011a24:	d022      	beq.n	8011a6c <__cvt+0xac>
 8011a26:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011a2a:	eb07 0906 	add.w	r9, r7, r6
 8011a2e:	d110      	bne.n	8011a52 <__cvt+0x92>
 8011a30:	783b      	ldrb	r3, [r7, #0]
 8011a32:	2b30      	cmp	r3, #48	; 0x30
 8011a34:	d10a      	bne.n	8011a4c <__cvt+0x8c>
 8011a36:	2200      	movs	r2, #0
 8011a38:	2300      	movs	r3, #0
 8011a3a:	4620      	mov	r0, r4
 8011a3c:	4629      	mov	r1, r5
 8011a3e:	f7ef f853 	bl	8000ae8 <__aeabi_dcmpeq>
 8011a42:	b918      	cbnz	r0, 8011a4c <__cvt+0x8c>
 8011a44:	f1c6 0601 	rsb	r6, r6, #1
 8011a48:	f8ca 6000 	str.w	r6, [sl]
 8011a4c:	f8da 3000 	ldr.w	r3, [sl]
 8011a50:	4499      	add	r9, r3
 8011a52:	2200      	movs	r2, #0
 8011a54:	2300      	movs	r3, #0
 8011a56:	4620      	mov	r0, r4
 8011a58:	4629      	mov	r1, r5
 8011a5a:	f7ef f845 	bl	8000ae8 <__aeabi_dcmpeq>
 8011a5e:	b108      	cbz	r0, 8011a64 <__cvt+0xa4>
 8011a60:	f8cd 900c 	str.w	r9, [sp, #12]
 8011a64:	2230      	movs	r2, #48	; 0x30
 8011a66:	9b03      	ldr	r3, [sp, #12]
 8011a68:	454b      	cmp	r3, r9
 8011a6a:	d307      	bcc.n	8011a7c <__cvt+0xbc>
 8011a6c:	9b03      	ldr	r3, [sp, #12]
 8011a6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011a70:	1bdb      	subs	r3, r3, r7
 8011a72:	4638      	mov	r0, r7
 8011a74:	6013      	str	r3, [r2, #0]
 8011a76:	b004      	add	sp, #16
 8011a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a7c:	1c59      	adds	r1, r3, #1
 8011a7e:	9103      	str	r1, [sp, #12]
 8011a80:	701a      	strb	r2, [r3, #0]
 8011a82:	e7f0      	b.n	8011a66 <__cvt+0xa6>

08011a84 <__exponent>:
 8011a84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011a86:	4603      	mov	r3, r0
 8011a88:	2900      	cmp	r1, #0
 8011a8a:	bfb8      	it	lt
 8011a8c:	4249      	neglt	r1, r1
 8011a8e:	f803 2b02 	strb.w	r2, [r3], #2
 8011a92:	bfb4      	ite	lt
 8011a94:	222d      	movlt	r2, #45	; 0x2d
 8011a96:	222b      	movge	r2, #43	; 0x2b
 8011a98:	2909      	cmp	r1, #9
 8011a9a:	7042      	strb	r2, [r0, #1]
 8011a9c:	dd2a      	ble.n	8011af4 <__exponent+0x70>
 8011a9e:	f10d 0407 	add.w	r4, sp, #7
 8011aa2:	46a4      	mov	ip, r4
 8011aa4:	270a      	movs	r7, #10
 8011aa6:	46a6      	mov	lr, r4
 8011aa8:	460a      	mov	r2, r1
 8011aaa:	fb91 f6f7 	sdiv	r6, r1, r7
 8011aae:	fb07 1516 	mls	r5, r7, r6, r1
 8011ab2:	3530      	adds	r5, #48	; 0x30
 8011ab4:	2a63      	cmp	r2, #99	; 0x63
 8011ab6:	f104 34ff 	add.w	r4, r4, #4294967295
 8011aba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011abe:	4631      	mov	r1, r6
 8011ac0:	dcf1      	bgt.n	8011aa6 <__exponent+0x22>
 8011ac2:	3130      	adds	r1, #48	; 0x30
 8011ac4:	f1ae 0502 	sub.w	r5, lr, #2
 8011ac8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011acc:	1c44      	adds	r4, r0, #1
 8011ace:	4629      	mov	r1, r5
 8011ad0:	4561      	cmp	r1, ip
 8011ad2:	d30a      	bcc.n	8011aea <__exponent+0x66>
 8011ad4:	f10d 0209 	add.w	r2, sp, #9
 8011ad8:	eba2 020e 	sub.w	r2, r2, lr
 8011adc:	4565      	cmp	r5, ip
 8011ade:	bf88      	it	hi
 8011ae0:	2200      	movhi	r2, #0
 8011ae2:	4413      	add	r3, r2
 8011ae4:	1a18      	subs	r0, r3, r0
 8011ae6:	b003      	add	sp, #12
 8011ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011aea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011aee:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011af2:	e7ed      	b.n	8011ad0 <__exponent+0x4c>
 8011af4:	2330      	movs	r3, #48	; 0x30
 8011af6:	3130      	adds	r1, #48	; 0x30
 8011af8:	7083      	strb	r3, [r0, #2]
 8011afa:	70c1      	strb	r1, [r0, #3]
 8011afc:	1d03      	adds	r3, r0, #4
 8011afe:	e7f1      	b.n	8011ae4 <__exponent+0x60>

08011b00 <_printf_float>:
 8011b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b04:	ed2d 8b02 	vpush	{d8}
 8011b08:	b08d      	sub	sp, #52	; 0x34
 8011b0a:	460c      	mov	r4, r1
 8011b0c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011b10:	4616      	mov	r6, r2
 8011b12:	461f      	mov	r7, r3
 8011b14:	4605      	mov	r5, r0
 8011b16:	f003 fabb 	bl	8015090 <_localeconv_r>
 8011b1a:	f8d0 a000 	ldr.w	sl, [r0]
 8011b1e:	4650      	mov	r0, sl
 8011b20:	f7ee fb66 	bl	80001f0 <strlen>
 8011b24:	2300      	movs	r3, #0
 8011b26:	930a      	str	r3, [sp, #40]	; 0x28
 8011b28:	6823      	ldr	r3, [r4, #0]
 8011b2a:	9305      	str	r3, [sp, #20]
 8011b2c:	f8d8 3000 	ldr.w	r3, [r8]
 8011b30:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011b34:	3307      	adds	r3, #7
 8011b36:	f023 0307 	bic.w	r3, r3, #7
 8011b3a:	f103 0208 	add.w	r2, r3, #8
 8011b3e:	f8c8 2000 	str.w	r2, [r8]
 8011b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b46:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011b4a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8011b4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011b52:	9307      	str	r3, [sp, #28]
 8011b54:	f8cd 8018 	str.w	r8, [sp, #24]
 8011b58:	ee08 0a10 	vmov	s16, r0
 8011b5c:	4b9f      	ldr	r3, [pc, #636]	; (8011ddc <_printf_float+0x2dc>)
 8011b5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011b62:	f04f 32ff 	mov.w	r2, #4294967295
 8011b66:	f7ee fff1 	bl	8000b4c <__aeabi_dcmpun>
 8011b6a:	bb88      	cbnz	r0, 8011bd0 <_printf_float+0xd0>
 8011b6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011b70:	4b9a      	ldr	r3, [pc, #616]	; (8011ddc <_printf_float+0x2dc>)
 8011b72:	f04f 32ff 	mov.w	r2, #4294967295
 8011b76:	f7ee ffcb 	bl	8000b10 <__aeabi_dcmple>
 8011b7a:	bb48      	cbnz	r0, 8011bd0 <_printf_float+0xd0>
 8011b7c:	2200      	movs	r2, #0
 8011b7e:	2300      	movs	r3, #0
 8011b80:	4640      	mov	r0, r8
 8011b82:	4649      	mov	r1, r9
 8011b84:	f7ee ffba 	bl	8000afc <__aeabi_dcmplt>
 8011b88:	b110      	cbz	r0, 8011b90 <_printf_float+0x90>
 8011b8a:	232d      	movs	r3, #45	; 0x2d
 8011b8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b90:	4b93      	ldr	r3, [pc, #588]	; (8011de0 <_printf_float+0x2e0>)
 8011b92:	4894      	ldr	r0, [pc, #592]	; (8011de4 <_printf_float+0x2e4>)
 8011b94:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011b98:	bf94      	ite	ls
 8011b9a:	4698      	movls	r8, r3
 8011b9c:	4680      	movhi	r8, r0
 8011b9e:	2303      	movs	r3, #3
 8011ba0:	6123      	str	r3, [r4, #16]
 8011ba2:	9b05      	ldr	r3, [sp, #20]
 8011ba4:	f023 0204 	bic.w	r2, r3, #4
 8011ba8:	6022      	str	r2, [r4, #0]
 8011baa:	f04f 0900 	mov.w	r9, #0
 8011bae:	9700      	str	r7, [sp, #0]
 8011bb0:	4633      	mov	r3, r6
 8011bb2:	aa0b      	add	r2, sp, #44	; 0x2c
 8011bb4:	4621      	mov	r1, r4
 8011bb6:	4628      	mov	r0, r5
 8011bb8:	f000 f9d8 	bl	8011f6c <_printf_common>
 8011bbc:	3001      	adds	r0, #1
 8011bbe:	f040 8090 	bne.w	8011ce2 <_printf_float+0x1e2>
 8011bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8011bc6:	b00d      	add	sp, #52	; 0x34
 8011bc8:	ecbd 8b02 	vpop	{d8}
 8011bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bd0:	4642      	mov	r2, r8
 8011bd2:	464b      	mov	r3, r9
 8011bd4:	4640      	mov	r0, r8
 8011bd6:	4649      	mov	r1, r9
 8011bd8:	f7ee ffb8 	bl	8000b4c <__aeabi_dcmpun>
 8011bdc:	b140      	cbz	r0, 8011bf0 <_printf_float+0xf0>
 8011bde:	464b      	mov	r3, r9
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	bfbc      	itt	lt
 8011be4:	232d      	movlt	r3, #45	; 0x2d
 8011be6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011bea:	487f      	ldr	r0, [pc, #508]	; (8011de8 <_printf_float+0x2e8>)
 8011bec:	4b7f      	ldr	r3, [pc, #508]	; (8011dec <_printf_float+0x2ec>)
 8011bee:	e7d1      	b.n	8011b94 <_printf_float+0x94>
 8011bf0:	6863      	ldr	r3, [r4, #4]
 8011bf2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011bf6:	9206      	str	r2, [sp, #24]
 8011bf8:	1c5a      	adds	r2, r3, #1
 8011bfa:	d13f      	bne.n	8011c7c <_printf_float+0x17c>
 8011bfc:	2306      	movs	r3, #6
 8011bfe:	6063      	str	r3, [r4, #4]
 8011c00:	9b05      	ldr	r3, [sp, #20]
 8011c02:	6861      	ldr	r1, [r4, #4]
 8011c04:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011c08:	2300      	movs	r3, #0
 8011c0a:	9303      	str	r3, [sp, #12]
 8011c0c:	ab0a      	add	r3, sp, #40	; 0x28
 8011c0e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011c12:	ab09      	add	r3, sp, #36	; 0x24
 8011c14:	ec49 8b10 	vmov	d0, r8, r9
 8011c18:	9300      	str	r3, [sp, #0]
 8011c1a:	6022      	str	r2, [r4, #0]
 8011c1c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011c20:	4628      	mov	r0, r5
 8011c22:	f7ff fecd 	bl	80119c0 <__cvt>
 8011c26:	9b06      	ldr	r3, [sp, #24]
 8011c28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011c2a:	2b47      	cmp	r3, #71	; 0x47
 8011c2c:	4680      	mov	r8, r0
 8011c2e:	d108      	bne.n	8011c42 <_printf_float+0x142>
 8011c30:	1cc8      	adds	r0, r1, #3
 8011c32:	db02      	blt.n	8011c3a <_printf_float+0x13a>
 8011c34:	6863      	ldr	r3, [r4, #4]
 8011c36:	4299      	cmp	r1, r3
 8011c38:	dd41      	ble.n	8011cbe <_printf_float+0x1be>
 8011c3a:	f1ab 0b02 	sub.w	fp, fp, #2
 8011c3e:	fa5f fb8b 	uxtb.w	fp, fp
 8011c42:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011c46:	d820      	bhi.n	8011c8a <_printf_float+0x18a>
 8011c48:	3901      	subs	r1, #1
 8011c4a:	465a      	mov	r2, fp
 8011c4c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011c50:	9109      	str	r1, [sp, #36]	; 0x24
 8011c52:	f7ff ff17 	bl	8011a84 <__exponent>
 8011c56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011c58:	1813      	adds	r3, r2, r0
 8011c5a:	2a01      	cmp	r2, #1
 8011c5c:	4681      	mov	r9, r0
 8011c5e:	6123      	str	r3, [r4, #16]
 8011c60:	dc02      	bgt.n	8011c68 <_printf_float+0x168>
 8011c62:	6822      	ldr	r2, [r4, #0]
 8011c64:	07d2      	lsls	r2, r2, #31
 8011c66:	d501      	bpl.n	8011c6c <_printf_float+0x16c>
 8011c68:	3301      	adds	r3, #1
 8011c6a:	6123      	str	r3, [r4, #16]
 8011c6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d09c      	beq.n	8011bae <_printf_float+0xae>
 8011c74:	232d      	movs	r3, #45	; 0x2d
 8011c76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011c7a:	e798      	b.n	8011bae <_printf_float+0xae>
 8011c7c:	9a06      	ldr	r2, [sp, #24]
 8011c7e:	2a47      	cmp	r2, #71	; 0x47
 8011c80:	d1be      	bne.n	8011c00 <_printf_float+0x100>
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d1bc      	bne.n	8011c00 <_printf_float+0x100>
 8011c86:	2301      	movs	r3, #1
 8011c88:	e7b9      	b.n	8011bfe <_printf_float+0xfe>
 8011c8a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011c8e:	d118      	bne.n	8011cc2 <_printf_float+0x1c2>
 8011c90:	2900      	cmp	r1, #0
 8011c92:	6863      	ldr	r3, [r4, #4]
 8011c94:	dd0b      	ble.n	8011cae <_printf_float+0x1ae>
 8011c96:	6121      	str	r1, [r4, #16]
 8011c98:	b913      	cbnz	r3, 8011ca0 <_printf_float+0x1a0>
 8011c9a:	6822      	ldr	r2, [r4, #0]
 8011c9c:	07d0      	lsls	r0, r2, #31
 8011c9e:	d502      	bpl.n	8011ca6 <_printf_float+0x1a6>
 8011ca0:	3301      	adds	r3, #1
 8011ca2:	440b      	add	r3, r1
 8011ca4:	6123      	str	r3, [r4, #16]
 8011ca6:	65a1      	str	r1, [r4, #88]	; 0x58
 8011ca8:	f04f 0900 	mov.w	r9, #0
 8011cac:	e7de      	b.n	8011c6c <_printf_float+0x16c>
 8011cae:	b913      	cbnz	r3, 8011cb6 <_printf_float+0x1b6>
 8011cb0:	6822      	ldr	r2, [r4, #0]
 8011cb2:	07d2      	lsls	r2, r2, #31
 8011cb4:	d501      	bpl.n	8011cba <_printf_float+0x1ba>
 8011cb6:	3302      	adds	r3, #2
 8011cb8:	e7f4      	b.n	8011ca4 <_printf_float+0x1a4>
 8011cba:	2301      	movs	r3, #1
 8011cbc:	e7f2      	b.n	8011ca4 <_printf_float+0x1a4>
 8011cbe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011cc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011cc4:	4299      	cmp	r1, r3
 8011cc6:	db05      	blt.n	8011cd4 <_printf_float+0x1d4>
 8011cc8:	6823      	ldr	r3, [r4, #0]
 8011cca:	6121      	str	r1, [r4, #16]
 8011ccc:	07d8      	lsls	r0, r3, #31
 8011cce:	d5ea      	bpl.n	8011ca6 <_printf_float+0x1a6>
 8011cd0:	1c4b      	adds	r3, r1, #1
 8011cd2:	e7e7      	b.n	8011ca4 <_printf_float+0x1a4>
 8011cd4:	2900      	cmp	r1, #0
 8011cd6:	bfd4      	ite	le
 8011cd8:	f1c1 0202 	rsble	r2, r1, #2
 8011cdc:	2201      	movgt	r2, #1
 8011cde:	4413      	add	r3, r2
 8011ce0:	e7e0      	b.n	8011ca4 <_printf_float+0x1a4>
 8011ce2:	6823      	ldr	r3, [r4, #0]
 8011ce4:	055a      	lsls	r2, r3, #21
 8011ce6:	d407      	bmi.n	8011cf8 <_printf_float+0x1f8>
 8011ce8:	6923      	ldr	r3, [r4, #16]
 8011cea:	4642      	mov	r2, r8
 8011cec:	4631      	mov	r1, r6
 8011cee:	4628      	mov	r0, r5
 8011cf0:	47b8      	blx	r7
 8011cf2:	3001      	adds	r0, #1
 8011cf4:	d12c      	bne.n	8011d50 <_printf_float+0x250>
 8011cf6:	e764      	b.n	8011bc2 <_printf_float+0xc2>
 8011cf8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011cfc:	f240 80e0 	bls.w	8011ec0 <_printf_float+0x3c0>
 8011d00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011d04:	2200      	movs	r2, #0
 8011d06:	2300      	movs	r3, #0
 8011d08:	f7ee feee 	bl	8000ae8 <__aeabi_dcmpeq>
 8011d0c:	2800      	cmp	r0, #0
 8011d0e:	d034      	beq.n	8011d7a <_printf_float+0x27a>
 8011d10:	4a37      	ldr	r2, [pc, #220]	; (8011df0 <_printf_float+0x2f0>)
 8011d12:	2301      	movs	r3, #1
 8011d14:	4631      	mov	r1, r6
 8011d16:	4628      	mov	r0, r5
 8011d18:	47b8      	blx	r7
 8011d1a:	3001      	adds	r0, #1
 8011d1c:	f43f af51 	beq.w	8011bc2 <_printf_float+0xc2>
 8011d20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011d24:	429a      	cmp	r2, r3
 8011d26:	db02      	blt.n	8011d2e <_printf_float+0x22e>
 8011d28:	6823      	ldr	r3, [r4, #0]
 8011d2a:	07d8      	lsls	r0, r3, #31
 8011d2c:	d510      	bpl.n	8011d50 <_printf_float+0x250>
 8011d2e:	ee18 3a10 	vmov	r3, s16
 8011d32:	4652      	mov	r2, sl
 8011d34:	4631      	mov	r1, r6
 8011d36:	4628      	mov	r0, r5
 8011d38:	47b8      	blx	r7
 8011d3a:	3001      	adds	r0, #1
 8011d3c:	f43f af41 	beq.w	8011bc2 <_printf_float+0xc2>
 8011d40:	f04f 0800 	mov.w	r8, #0
 8011d44:	f104 091a 	add.w	r9, r4, #26
 8011d48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d4a:	3b01      	subs	r3, #1
 8011d4c:	4543      	cmp	r3, r8
 8011d4e:	dc09      	bgt.n	8011d64 <_printf_float+0x264>
 8011d50:	6823      	ldr	r3, [r4, #0]
 8011d52:	079b      	lsls	r3, r3, #30
 8011d54:	f100 8105 	bmi.w	8011f62 <_printf_float+0x462>
 8011d58:	68e0      	ldr	r0, [r4, #12]
 8011d5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011d5c:	4298      	cmp	r0, r3
 8011d5e:	bfb8      	it	lt
 8011d60:	4618      	movlt	r0, r3
 8011d62:	e730      	b.n	8011bc6 <_printf_float+0xc6>
 8011d64:	2301      	movs	r3, #1
 8011d66:	464a      	mov	r2, r9
 8011d68:	4631      	mov	r1, r6
 8011d6a:	4628      	mov	r0, r5
 8011d6c:	47b8      	blx	r7
 8011d6e:	3001      	adds	r0, #1
 8011d70:	f43f af27 	beq.w	8011bc2 <_printf_float+0xc2>
 8011d74:	f108 0801 	add.w	r8, r8, #1
 8011d78:	e7e6      	b.n	8011d48 <_printf_float+0x248>
 8011d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	dc39      	bgt.n	8011df4 <_printf_float+0x2f4>
 8011d80:	4a1b      	ldr	r2, [pc, #108]	; (8011df0 <_printf_float+0x2f0>)
 8011d82:	2301      	movs	r3, #1
 8011d84:	4631      	mov	r1, r6
 8011d86:	4628      	mov	r0, r5
 8011d88:	47b8      	blx	r7
 8011d8a:	3001      	adds	r0, #1
 8011d8c:	f43f af19 	beq.w	8011bc2 <_printf_float+0xc2>
 8011d90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011d94:	4313      	orrs	r3, r2
 8011d96:	d102      	bne.n	8011d9e <_printf_float+0x29e>
 8011d98:	6823      	ldr	r3, [r4, #0]
 8011d9a:	07d9      	lsls	r1, r3, #31
 8011d9c:	d5d8      	bpl.n	8011d50 <_printf_float+0x250>
 8011d9e:	ee18 3a10 	vmov	r3, s16
 8011da2:	4652      	mov	r2, sl
 8011da4:	4631      	mov	r1, r6
 8011da6:	4628      	mov	r0, r5
 8011da8:	47b8      	blx	r7
 8011daa:	3001      	adds	r0, #1
 8011dac:	f43f af09 	beq.w	8011bc2 <_printf_float+0xc2>
 8011db0:	f04f 0900 	mov.w	r9, #0
 8011db4:	f104 0a1a 	add.w	sl, r4, #26
 8011db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011dba:	425b      	negs	r3, r3
 8011dbc:	454b      	cmp	r3, r9
 8011dbe:	dc01      	bgt.n	8011dc4 <_printf_float+0x2c4>
 8011dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011dc2:	e792      	b.n	8011cea <_printf_float+0x1ea>
 8011dc4:	2301      	movs	r3, #1
 8011dc6:	4652      	mov	r2, sl
 8011dc8:	4631      	mov	r1, r6
 8011dca:	4628      	mov	r0, r5
 8011dcc:	47b8      	blx	r7
 8011dce:	3001      	adds	r0, #1
 8011dd0:	f43f aef7 	beq.w	8011bc2 <_printf_float+0xc2>
 8011dd4:	f109 0901 	add.w	r9, r9, #1
 8011dd8:	e7ee      	b.n	8011db8 <_printf_float+0x2b8>
 8011dda:	bf00      	nop
 8011ddc:	7fefffff 	.word	0x7fefffff
 8011de0:	080185ac 	.word	0x080185ac
 8011de4:	080185b0 	.word	0x080185b0
 8011de8:	080185b8 	.word	0x080185b8
 8011dec:	080185b4 	.word	0x080185b4
 8011df0:	080189f9 	.word	0x080189f9
 8011df4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011df6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011df8:	429a      	cmp	r2, r3
 8011dfa:	bfa8      	it	ge
 8011dfc:	461a      	movge	r2, r3
 8011dfe:	2a00      	cmp	r2, #0
 8011e00:	4691      	mov	r9, r2
 8011e02:	dc37      	bgt.n	8011e74 <_printf_float+0x374>
 8011e04:	f04f 0b00 	mov.w	fp, #0
 8011e08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011e0c:	f104 021a 	add.w	r2, r4, #26
 8011e10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011e12:	9305      	str	r3, [sp, #20]
 8011e14:	eba3 0309 	sub.w	r3, r3, r9
 8011e18:	455b      	cmp	r3, fp
 8011e1a:	dc33      	bgt.n	8011e84 <_printf_float+0x384>
 8011e1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011e20:	429a      	cmp	r2, r3
 8011e22:	db3b      	blt.n	8011e9c <_printf_float+0x39c>
 8011e24:	6823      	ldr	r3, [r4, #0]
 8011e26:	07da      	lsls	r2, r3, #31
 8011e28:	d438      	bmi.n	8011e9c <_printf_float+0x39c>
 8011e2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011e2c:	9b05      	ldr	r3, [sp, #20]
 8011e2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011e30:	1ad3      	subs	r3, r2, r3
 8011e32:	eba2 0901 	sub.w	r9, r2, r1
 8011e36:	4599      	cmp	r9, r3
 8011e38:	bfa8      	it	ge
 8011e3a:	4699      	movge	r9, r3
 8011e3c:	f1b9 0f00 	cmp.w	r9, #0
 8011e40:	dc35      	bgt.n	8011eae <_printf_float+0x3ae>
 8011e42:	f04f 0800 	mov.w	r8, #0
 8011e46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011e4a:	f104 0a1a 	add.w	sl, r4, #26
 8011e4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011e52:	1a9b      	subs	r3, r3, r2
 8011e54:	eba3 0309 	sub.w	r3, r3, r9
 8011e58:	4543      	cmp	r3, r8
 8011e5a:	f77f af79 	ble.w	8011d50 <_printf_float+0x250>
 8011e5e:	2301      	movs	r3, #1
 8011e60:	4652      	mov	r2, sl
 8011e62:	4631      	mov	r1, r6
 8011e64:	4628      	mov	r0, r5
 8011e66:	47b8      	blx	r7
 8011e68:	3001      	adds	r0, #1
 8011e6a:	f43f aeaa 	beq.w	8011bc2 <_printf_float+0xc2>
 8011e6e:	f108 0801 	add.w	r8, r8, #1
 8011e72:	e7ec      	b.n	8011e4e <_printf_float+0x34e>
 8011e74:	4613      	mov	r3, r2
 8011e76:	4631      	mov	r1, r6
 8011e78:	4642      	mov	r2, r8
 8011e7a:	4628      	mov	r0, r5
 8011e7c:	47b8      	blx	r7
 8011e7e:	3001      	adds	r0, #1
 8011e80:	d1c0      	bne.n	8011e04 <_printf_float+0x304>
 8011e82:	e69e      	b.n	8011bc2 <_printf_float+0xc2>
 8011e84:	2301      	movs	r3, #1
 8011e86:	4631      	mov	r1, r6
 8011e88:	4628      	mov	r0, r5
 8011e8a:	9205      	str	r2, [sp, #20]
 8011e8c:	47b8      	blx	r7
 8011e8e:	3001      	adds	r0, #1
 8011e90:	f43f ae97 	beq.w	8011bc2 <_printf_float+0xc2>
 8011e94:	9a05      	ldr	r2, [sp, #20]
 8011e96:	f10b 0b01 	add.w	fp, fp, #1
 8011e9a:	e7b9      	b.n	8011e10 <_printf_float+0x310>
 8011e9c:	ee18 3a10 	vmov	r3, s16
 8011ea0:	4652      	mov	r2, sl
 8011ea2:	4631      	mov	r1, r6
 8011ea4:	4628      	mov	r0, r5
 8011ea6:	47b8      	blx	r7
 8011ea8:	3001      	adds	r0, #1
 8011eaa:	d1be      	bne.n	8011e2a <_printf_float+0x32a>
 8011eac:	e689      	b.n	8011bc2 <_printf_float+0xc2>
 8011eae:	9a05      	ldr	r2, [sp, #20]
 8011eb0:	464b      	mov	r3, r9
 8011eb2:	4442      	add	r2, r8
 8011eb4:	4631      	mov	r1, r6
 8011eb6:	4628      	mov	r0, r5
 8011eb8:	47b8      	blx	r7
 8011eba:	3001      	adds	r0, #1
 8011ebc:	d1c1      	bne.n	8011e42 <_printf_float+0x342>
 8011ebe:	e680      	b.n	8011bc2 <_printf_float+0xc2>
 8011ec0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011ec2:	2a01      	cmp	r2, #1
 8011ec4:	dc01      	bgt.n	8011eca <_printf_float+0x3ca>
 8011ec6:	07db      	lsls	r3, r3, #31
 8011ec8:	d538      	bpl.n	8011f3c <_printf_float+0x43c>
 8011eca:	2301      	movs	r3, #1
 8011ecc:	4642      	mov	r2, r8
 8011ece:	4631      	mov	r1, r6
 8011ed0:	4628      	mov	r0, r5
 8011ed2:	47b8      	blx	r7
 8011ed4:	3001      	adds	r0, #1
 8011ed6:	f43f ae74 	beq.w	8011bc2 <_printf_float+0xc2>
 8011eda:	ee18 3a10 	vmov	r3, s16
 8011ede:	4652      	mov	r2, sl
 8011ee0:	4631      	mov	r1, r6
 8011ee2:	4628      	mov	r0, r5
 8011ee4:	47b8      	blx	r7
 8011ee6:	3001      	adds	r0, #1
 8011ee8:	f43f ae6b 	beq.w	8011bc2 <_printf_float+0xc2>
 8011eec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	f7ee fdf8 	bl	8000ae8 <__aeabi_dcmpeq>
 8011ef8:	b9d8      	cbnz	r0, 8011f32 <_printf_float+0x432>
 8011efa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011efc:	f108 0201 	add.w	r2, r8, #1
 8011f00:	3b01      	subs	r3, #1
 8011f02:	4631      	mov	r1, r6
 8011f04:	4628      	mov	r0, r5
 8011f06:	47b8      	blx	r7
 8011f08:	3001      	adds	r0, #1
 8011f0a:	d10e      	bne.n	8011f2a <_printf_float+0x42a>
 8011f0c:	e659      	b.n	8011bc2 <_printf_float+0xc2>
 8011f0e:	2301      	movs	r3, #1
 8011f10:	4652      	mov	r2, sl
 8011f12:	4631      	mov	r1, r6
 8011f14:	4628      	mov	r0, r5
 8011f16:	47b8      	blx	r7
 8011f18:	3001      	adds	r0, #1
 8011f1a:	f43f ae52 	beq.w	8011bc2 <_printf_float+0xc2>
 8011f1e:	f108 0801 	add.w	r8, r8, #1
 8011f22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f24:	3b01      	subs	r3, #1
 8011f26:	4543      	cmp	r3, r8
 8011f28:	dcf1      	bgt.n	8011f0e <_printf_float+0x40e>
 8011f2a:	464b      	mov	r3, r9
 8011f2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011f30:	e6dc      	b.n	8011cec <_printf_float+0x1ec>
 8011f32:	f04f 0800 	mov.w	r8, #0
 8011f36:	f104 0a1a 	add.w	sl, r4, #26
 8011f3a:	e7f2      	b.n	8011f22 <_printf_float+0x422>
 8011f3c:	2301      	movs	r3, #1
 8011f3e:	4642      	mov	r2, r8
 8011f40:	e7df      	b.n	8011f02 <_printf_float+0x402>
 8011f42:	2301      	movs	r3, #1
 8011f44:	464a      	mov	r2, r9
 8011f46:	4631      	mov	r1, r6
 8011f48:	4628      	mov	r0, r5
 8011f4a:	47b8      	blx	r7
 8011f4c:	3001      	adds	r0, #1
 8011f4e:	f43f ae38 	beq.w	8011bc2 <_printf_float+0xc2>
 8011f52:	f108 0801 	add.w	r8, r8, #1
 8011f56:	68e3      	ldr	r3, [r4, #12]
 8011f58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011f5a:	1a5b      	subs	r3, r3, r1
 8011f5c:	4543      	cmp	r3, r8
 8011f5e:	dcf0      	bgt.n	8011f42 <_printf_float+0x442>
 8011f60:	e6fa      	b.n	8011d58 <_printf_float+0x258>
 8011f62:	f04f 0800 	mov.w	r8, #0
 8011f66:	f104 0919 	add.w	r9, r4, #25
 8011f6a:	e7f4      	b.n	8011f56 <_printf_float+0x456>

08011f6c <_printf_common>:
 8011f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f70:	4616      	mov	r6, r2
 8011f72:	4699      	mov	r9, r3
 8011f74:	688a      	ldr	r2, [r1, #8]
 8011f76:	690b      	ldr	r3, [r1, #16]
 8011f78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011f7c:	4293      	cmp	r3, r2
 8011f7e:	bfb8      	it	lt
 8011f80:	4613      	movlt	r3, r2
 8011f82:	6033      	str	r3, [r6, #0]
 8011f84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011f88:	4607      	mov	r7, r0
 8011f8a:	460c      	mov	r4, r1
 8011f8c:	b10a      	cbz	r2, 8011f92 <_printf_common+0x26>
 8011f8e:	3301      	adds	r3, #1
 8011f90:	6033      	str	r3, [r6, #0]
 8011f92:	6823      	ldr	r3, [r4, #0]
 8011f94:	0699      	lsls	r1, r3, #26
 8011f96:	bf42      	ittt	mi
 8011f98:	6833      	ldrmi	r3, [r6, #0]
 8011f9a:	3302      	addmi	r3, #2
 8011f9c:	6033      	strmi	r3, [r6, #0]
 8011f9e:	6825      	ldr	r5, [r4, #0]
 8011fa0:	f015 0506 	ands.w	r5, r5, #6
 8011fa4:	d106      	bne.n	8011fb4 <_printf_common+0x48>
 8011fa6:	f104 0a19 	add.w	sl, r4, #25
 8011faa:	68e3      	ldr	r3, [r4, #12]
 8011fac:	6832      	ldr	r2, [r6, #0]
 8011fae:	1a9b      	subs	r3, r3, r2
 8011fb0:	42ab      	cmp	r3, r5
 8011fb2:	dc26      	bgt.n	8012002 <_printf_common+0x96>
 8011fb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011fb8:	1e13      	subs	r3, r2, #0
 8011fba:	6822      	ldr	r2, [r4, #0]
 8011fbc:	bf18      	it	ne
 8011fbe:	2301      	movne	r3, #1
 8011fc0:	0692      	lsls	r2, r2, #26
 8011fc2:	d42b      	bmi.n	801201c <_printf_common+0xb0>
 8011fc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011fc8:	4649      	mov	r1, r9
 8011fca:	4638      	mov	r0, r7
 8011fcc:	47c0      	blx	r8
 8011fce:	3001      	adds	r0, #1
 8011fd0:	d01e      	beq.n	8012010 <_printf_common+0xa4>
 8011fd2:	6823      	ldr	r3, [r4, #0]
 8011fd4:	68e5      	ldr	r5, [r4, #12]
 8011fd6:	6832      	ldr	r2, [r6, #0]
 8011fd8:	f003 0306 	and.w	r3, r3, #6
 8011fdc:	2b04      	cmp	r3, #4
 8011fde:	bf08      	it	eq
 8011fe0:	1aad      	subeq	r5, r5, r2
 8011fe2:	68a3      	ldr	r3, [r4, #8]
 8011fe4:	6922      	ldr	r2, [r4, #16]
 8011fe6:	bf0c      	ite	eq
 8011fe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011fec:	2500      	movne	r5, #0
 8011fee:	4293      	cmp	r3, r2
 8011ff0:	bfc4      	itt	gt
 8011ff2:	1a9b      	subgt	r3, r3, r2
 8011ff4:	18ed      	addgt	r5, r5, r3
 8011ff6:	2600      	movs	r6, #0
 8011ff8:	341a      	adds	r4, #26
 8011ffa:	42b5      	cmp	r5, r6
 8011ffc:	d11a      	bne.n	8012034 <_printf_common+0xc8>
 8011ffe:	2000      	movs	r0, #0
 8012000:	e008      	b.n	8012014 <_printf_common+0xa8>
 8012002:	2301      	movs	r3, #1
 8012004:	4652      	mov	r2, sl
 8012006:	4649      	mov	r1, r9
 8012008:	4638      	mov	r0, r7
 801200a:	47c0      	blx	r8
 801200c:	3001      	adds	r0, #1
 801200e:	d103      	bne.n	8012018 <_printf_common+0xac>
 8012010:	f04f 30ff 	mov.w	r0, #4294967295
 8012014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012018:	3501      	adds	r5, #1
 801201a:	e7c6      	b.n	8011faa <_printf_common+0x3e>
 801201c:	18e1      	adds	r1, r4, r3
 801201e:	1c5a      	adds	r2, r3, #1
 8012020:	2030      	movs	r0, #48	; 0x30
 8012022:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012026:	4422      	add	r2, r4
 8012028:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801202c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012030:	3302      	adds	r3, #2
 8012032:	e7c7      	b.n	8011fc4 <_printf_common+0x58>
 8012034:	2301      	movs	r3, #1
 8012036:	4622      	mov	r2, r4
 8012038:	4649      	mov	r1, r9
 801203a:	4638      	mov	r0, r7
 801203c:	47c0      	blx	r8
 801203e:	3001      	adds	r0, #1
 8012040:	d0e6      	beq.n	8012010 <_printf_common+0xa4>
 8012042:	3601      	adds	r6, #1
 8012044:	e7d9      	b.n	8011ffa <_printf_common+0x8e>
	...

08012048 <_printf_i>:
 8012048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801204c:	460c      	mov	r4, r1
 801204e:	4691      	mov	r9, r2
 8012050:	7e27      	ldrb	r7, [r4, #24]
 8012052:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012054:	2f78      	cmp	r7, #120	; 0x78
 8012056:	4680      	mov	r8, r0
 8012058:	469a      	mov	sl, r3
 801205a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801205e:	d807      	bhi.n	8012070 <_printf_i+0x28>
 8012060:	2f62      	cmp	r7, #98	; 0x62
 8012062:	d80a      	bhi.n	801207a <_printf_i+0x32>
 8012064:	2f00      	cmp	r7, #0
 8012066:	f000 80d8 	beq.w	801221a <_printf_i+0x1d2>
 801206a:	2f58      	cmp	r7, #88	; 0x58
 801206c:	f000 80a3 	beq.w	80121b6 <_printf_i+0x16e>
 8012070:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012074:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012078:	e03a      	b.n	80120f0 <_printf_i+0xa8>
 801207a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801207e:	2b15      	cmp	r3, #21
 8012080:	d8f6      	bhi.n	8012070 <_printf_i+0x28>
 8012082:	a001      	add	r0, pc, #4	; (adr r0, 8012088 <_printf_i+0x40>)
 8012084:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012088:	080120e1 	.word	0x080120e1
 801208c:	080120f5 	.word	0x080120f5
 8012090:	08012071 	.word	0x08012071
 8012094:	08012071 	.word	0x08012071
 8012098:	08012071 	.word	0x08012071
 801209c:	08012071 	.word	0x08012071
 80120a0:	080120f5 	.word	0x080120f5
 80120a4:	08012071 	.word	0x08012071
 80120a8:	08012071 	.word	0x08012071
 80120ac:	08012071 	.word	0x08012071
 80120b0:	08012071 	.word	0x08012071
 80120b4:	08012201 	.word	0x08012201
 80120b8:	08012125 	.word	0x08012125
 80120bc:	080121e3 	.word	0x080121e3
 80120c0:	08012071 	.word	0x08012071
 80120c4:	08012071 	.word	0x08012071
 80120c8:	08012223 	.word	0x08012223
 80120cc:	08012071 	.word	0x08012071
 80120d0:	08012125 	.word	0x08012125
 80120d4:	08012071 	.word	0x08012071
 80120d8:	08012071 	.word	0x08012071
 80120dc:	080121eb 	.word	0x080121eb
 80120e0:	680b      	ldr	r3, [r1, #0]
 80120e2:	1d1a      	adds	r2, r3, #4
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	600a      	str	r2, [r1, #0]
 80120e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80120ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80120f0:	2301      	movs	r3, #1
 80120f2:	e0a3      	b.n	801223c <_printf_i+0x1f4>
 80120f4:	6825      	ldr	r5, [r4, #0]
 80120f6:	6808      	ldr	r0, [r1, #0]
 80120f8:	062e      	lsls	r6, r5, #24
 80120fa:	f100 0304 	add.w	r3, r0, #4
 80120fe:	d50a      	bpl.n	8012116 <_printf_i+0xce>
 8012100:	6805      	ldr	r5, [r0, #0]
 8012102:	600b      	str	r3, [r1, #0]
 8012104:	2d00      	cmp	r5, #0
 8012106:	da03      	bge.n	8012110 <_printf_i+0xc8>
 8012108:	232d      	movs	r3, #45	; 0x2d
 801210a:	426d      	negs	r5, r5
 801210c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012110:	485e      	ldr	r0, [pc, #376]	; (801228c <_printf_i+0x244>)
 8012112:	230a      	movs	r3, #10
 8012114:	e019      	b.n	801214a <_printf_i+0x102>
 8012116:	f015 0f40 	tst.w	r5, #64	; 0x40
 801211a:	6805      	ldr	r5, [r0, #0]
 801211c:	600b      	str	r3, [r1, #0]
 801211e:	bf18      	it	ne
 8012120:	b22d      	sxthne	r5, r5
 8012122:	e7ef      	b.n	8012104 <_printf_i+0xbc>
 8012124:	680b      	ldr	r3, [r1, #0]
 8012126:	6825      	ldr	r5, [r4, #0]
 8012128:	1d18      	adds	r0, r3, #4
 801212a:	6008      	str	r0, [r1, #0]
 801212c:	0628      	lsls	r0, r5, #24
 801212e:	d501      	bpl.n	8012134 <_printf_i+0xec>
 8012130:	681d      	ldr	r5, [r3, #0]
 8012132:	e002      	b.n	801213a <_printf_i+0xf2>
 8012134:	0669      	lsls	r1, r5, #25
 8012136:	d5fb      	bpl.n	8012130 <_printf_i+0xe8>
 8012138:	881d      	ldrh	r5, [r3, #0]
 801213a:	4854      	ldr	r0, [pc, #336]	; (801228c <_printf_i+0x244>)
 801213c:	2f6f      	cmp	r7, #111	; 0x6f
 801213e:	bf0c      	ite	eq
 8012140:	2308      	moveq	r3, #8
 8012142:	230a      	movne	r3, #10
 8012144:	2100      	movs	r1, #0
 8012146:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801214a:	6866      	ldr	r6, [r4, #4]
 801214c:	60a6      	str	r6, [r4, #8]
 801214e:	2e00      	cmp	r6, #0
 8012150:	bfa2      	ittt	ge
 8012152:	6821      	ldrge	r1, [r4, #0]
 8012154:	f021 0104 	bicge.w	r1, r1, #4
 8012158:	6021      	strge	r1, [r4, #0]
 801215a:	b90d      	cbnz	r5, 8012160 <_printf_i+0x118>
 801215c:	2e00      	cmp	r6, #0
 801215e:	d04d      	beq.n	80121fc <_printf_i+0x1b4>
 8012160:	4616      	mov	r6, r2
 8012162:	fbb5 f1f3 	udiv	r1, r5, r3
 8012166:	fb03 5711 	mls	r7, r3, r1, r5
 801216a:	5dc7      	ldrb	r7, [r0, r7]
 801216c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012170:	462f      	mov	r7, r5
 8012172:	42bb      	cmp	r3, r7
 8012174:	460d      	mov	r5, r1
 8012176:	d9f4      	bls.n	8012162 <_printf_i+0x11a>
 8012178:	2b08      	cmp	r3, #8
 801217a:	d10b      	bne.n	8012194 <_printf_i+0x14c>
 801217c:	6823      	ldr	r3, [r4, #0]
 801217e:	07df      	lsls	r7, r3, #31
 8012180:	d508      	bpl.n	8012194 <_printf_i+0x14c>
 8012182:	6923      	ldr	r3, [r4, #16]
 8012184:	6861      	ldr	r1, [r4, #4]
 8012186:	4299      	cmp	r1, r3
 8012188:	bfde      	ittt	le
 801218a:	2330      	movle	r3, #48	; 0x30
 801218c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012190:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012194:	1b92      	subs	r2, r2, r6
 8012196:	6122      	str	r2, [r4, #16]
 8012198:	f8cd a000 	str.w	sl, [sp]
 801219c:	464b      	mov	r3, r9
 801219e:	aa03      	add	r2, sp, #12
 80121a0:	4621      	mov	r1, r4
 80121a2:	4640      	mov	r0, r8
 80121a4:	f7ff fee2 	bl	8011f6c <_printf_common>
 80121a8:	3001      	adds	r0, #1
 80121aa:	d14c      	bne.n	8012246 <_printf_i+0x1fe>
 80121ac:	f04f 30ff 	mov.w	r0, #4294967295
 80121b0:	b004      	add	sp, #16
 80121b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121b6:	4835      	ldr	r0, [pc, #212]	; (801228c <_printf_i+0x244>)
 80121b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80121bc:	6823      	ldr	r3, [r4, #0]
 80121be:	680e      	ldr	r6, [r1, #0]
 80121c0:	061f      	lsls	r7, r3, #24
 80121c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80121c6:	600e      	str	r6, [r1, #0]
 80121c8:	d514      	bpl.n	80121f4 <_printf_i+0x1ac>
 80121ca:	07d9      	lsls	r1, r3, #31
 80121cc:	bf44      	itt	mi
 80121ce:	f043 0320 	orrmi.w	r3, r3, #32
 80121d2:	6023      	strmi	r3, [r4, #0]
 80121d4:	b91d      	cbnz	r5, 80121de <_printf_i+0x196>
 80121d6:	6823      	ldr	r3, [r4, #0]
 80121d8:	f023 0320 	bic.w	r3, r3, #32
 80121dc:	6023      	str	r3, [r4, #0]
 80121de:	2310      	movs	r3, #16
 80121e0:	e7b0      	b.n	8012144 <_printf_i+0xfc>
 80121e2:	6823      	ldr	r3, [r4, #0]
 80121e4:	f043 0320 	orr.w	r3, r3, #32
 80121e8:	6023      	str	r3, [r4, #0]
 80121ea:	2378      	movs	r3, #120	; 0x78
 80121ec:	4828      	ldr	r0, [pc, #160]	; (8012290 <_printf_i+0x248>)
 80121ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80121f2:	e7e3      	b.n	80121bc <_printf_i+0x174>
 80121f4:	065e      	lsls	r6, r3, #25
 80121f6:	bf48      	it	mi
 80121f8:	b2ad      	uxthmi	r5, r5
 80121fa:	e7e6      	b.n	80121ca <_printf_i+0x182>
 80121fc:	4616      	mov	r6, r2
 80121fe:	e7bb      	b.n	8012178 <_printf_i+0x130>
 8012200:	680b      	ldr	r3, [r1, #0]
 8012202:	6826      	ldr	r6, [r4, #0]
 8012204:	6960      	ldr	r0, [r4, #20]
 8012206:	1d1d      	adds	r5, r3, #4
 8012208:	600d      	str	r5, [r1, #0]
 801220a:	0635      	lsls	r5, r6, #24
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	d501      	bpl.n	8012214 <_printf_i+0x1cc>
 8012210:	6018      	str	r0, [r3, #0]
 8012212:	e002      	b.n	801221a <_printf_i+0x1d2>
 8012214:	0671      	lsls	r1, r6, #25
 8012216:	d5fb      	bpl.n	8012210 <_printf_i+0x1c8>
 8012218:	8018      	strh	r0, [r3, #0]
 801221a:	2300      	movs	r3, #0
 801221c:	6123      	str	r3, [r4, #16]
 801221e:	4616      	mov	r6, r2
 8012220:	e7ba      	b.n	8012198 <_printf_i+0x150>
 8012222:	680b      	ldr	r3, [r1, #0]
 8012224:	1d1a      	adds	r2, r3, #4
 8012226:	600a      	str	r2, [r1, #0]
 8012228:	681e      	ldr	r6, [r3, #0]
 801222a:	6862      	ldr	r2, [r4, #4]
 801222c:	2100      	movs	r1, #0
 801222e:	4630      	mov	r0, r6
 8012230:	f7ed ffe6 	bl	8000200 <memchr>
 8012234:	b108      	cbz	r0, 801223a <_printf_i+0x1f2>
 8012236:	1b80      	subs	r0, r0, r6
 8012238:	6060      	str	r0, [r4, #4]
 801223a:	6863      	ldr	r3, [r4, #4]
 801223c:	6123      	str	r3, [r4, #16]
 801223e:	2300      	movs	r3, #0
 8012240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012244:	e7a8      	b.n	8012198 <_printf_i+0x150>
 8012246:	6923      	ldr	r3, [r4, #16]
 8012248:	4632      	mov	r2, r6
 801224a:	4649      	mov	r1, r9
 801224c:	4640      	mov	r0, r8
 801224e:	47d0      	blx	sl
 8012250:	3001      	adds	r0, #1
 8012252:	d0ab      	beq.n	80121ac <_printf_i+0x164>
 8012254:	6823      	ldr	r3, [r4, #0]
 8012256:	079b      	lsls	r3, r3, #30
 8012258:	d413      	bmi.n	8012282 <_printf_i+0x23a>
 801225a:	68e0      	ldr	r0, [r4, #12]
 801225c:	9b03      	ldr	r3, [sp, #12]
 801225e:	4298      	cmp	r0, r3
 8012260:	bfb8      	it	lt
 8012262:	4618      	movlt	r0, r3
 8012264:	e7a4      	b.n	80121b0 <_printf_i+0x168>
 8012266:	2301      	movs	r3, #1
 8012268:	4632      	mov	r2, r6
 801226a:	4649      	mov	r1, r9
 801226c:	4640      	mov	r0, r8
 801226e:	47d0      	blx	sl
 8012270:	3001      	adds	r0, #1
 8012272:	d09b      	beq.n	80121ac <_printf_i+0x164>
 8012274:	3501      	adds	r5, #1
 8012276:	68e3      	ldr	r3, [r4, #12]
 8012278:	9903      	ldr	r1, [sp, #12]
 801227a:	1a5b      	subs	r3, r3, r1
 801227c:	42ab      	cmp	r3, r5
 801227e:	dcf2      	bgt.n	8012266 <_printf_i+0x21e>
 8012280:	e7eb      	b.n	801225a <_printf_i+0x212>
 8012282:	2500      	movs	r5, #0
 8012284:	f104 0619 	add.w	r6, r4, #25
 8012288:	e7f5      	b.n	8012276 <_printf_i+0x22e>
 801228a:	bf00      	nop
 801228c:	080185bc 	.word	0x080185bc
 8012290:	080185cd 	.word	0x080185cd

08012294 <_scanf_float>:
 8012294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012298:	b087      	sub	sp, #28
 801229a:	4617      	mov	r7, r2
 801229c:	9303      	str	r3, [sp, #12]
 801229e:	688b      	ldr	r3, [r1, #8]
 80122a0:	1e5a      	subs	r2, r3, #1
 80122a2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80122a6:	bf83      	ittte	hi
 80122a8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80122ac:	195b      	addhi	r3, r3, r5
 80122ae:	9302      	strhi	r3, [sp, #8]
 80122b0:	2300      	movls	r3, #0
 80122b2:	bf86      	itte	hi
 80122b4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80122b8:	608b      	strhi	r3, [r1, #8]
 80122ba:	9302      	strls	r3, [sp, #8]
 80122bc:	680b      	ldr	r3, [r1, #0]
 80122be:	468b      	mov	fp, r1
 80122c0:	2500      	movs	r5, #0
 80122c2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80122c6:	f84b 3b1c 	str.w	r3, [fp], #28
 80122ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80122ce:	4680      	mov	r8, r0
 80122d0:	460c      	mov	r4, r1
 80122d2:	465e      	mov	r6, fp
 80122d4:	46aa      	mov	sl, r5
 80122d6:	46a9      	mov	r9, r5
 80122d8:	9501      	str	r5, [sp, #4]
 80122da:	68a2      	ldr	r2, [r4, #8]
 80122dc:	b152      	cbz	r2, 80122f4 <_scanf_float+0x60>
 80122de:	683b      	ldr	r3, [r7, #0]
 80122e0:	781b      	ldrb	r3, [r3, #0]
 80122e2:	2b4e      	cmp	r3, #78	; 0x4e
 80122e4:	d864      	bhi.n	80123b0 <_scanf_float+0x11c>
 80122e6:	2b40      	cmp	r3, #64	; 0x40
 80122e8:	d83c      	bhi.n	8012364 <_scanf_float+0xd0>
 80122ea:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80122ee:	b2c8      	uxtb	r0, r1
 80122f0:	280e      	cmp	r0, #14
 80122f2:	d93a      	bls.n	801236a <_scanf_float+0xd6>
 80122f4:	f1b9 0f00 	cmp.w	r9, #0
 80122f8:	d003      	beq.n	8012302 <_scanf_float+0x6e>
 80122fa:	6823      	ldr	r3, [r4, #0]
 80122fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012300:	6023      	str	r3, [r4, #0]
 8012302:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012306:	f1ba 0f01 	cmp.w	sl, #1
 801230a:	f200 8113 	bhi.w	8012534 <_scanf_float+0x2a0>
 801230e:	455e      	cmp	r6, fp
 8012310:	f200 8105 	bhi.w	801251e <_scanf_float+0x28a>
 8012314:	2501      	movs	r5, #1
 8012316:	4628      	mov	r0, r5
 8012318:	b007      	add	sp, #28
 801231a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801231e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8012322:	2a0d      	cmp	r2, #13
 8012324:	d8e6      	bhi.n	80122f4 <_scanf_float+0x60>
 8012326:	a101      	add	r1, pc, #4	; (adr r1, 801232c <_scanf_float+0x98>)
 8012328:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801232c:	0801246b 	.word	0x0801246b
 8012330:	080122f5 	.word	0x080122f5
 8012334:	080122f5 	.word	0x080122f5
 8012338:	080122f5 	.word	0x080122f5
 801233c:	080124cb 	.word	0x080124cb
 8012340:	080124a3 	.word	0x080124a3
 8012344:	080122f5 	.word	0x080122f5
 8012348:	080122f5 	.word	0x080122f5
 801234c:	08012479 	.word	0x08012479
 8012350:	080122f5 	.word	0x080122f5
 8012354:	080122f5 	.word	0x080122f5
 8012358:	080122f5 	.word	0x080122f5
 801235c:	080122f5 	.word	0x080122f5
 8012360:	08012431 	.word	0x08012431
 8012364:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8012368:	e7db      	b.n	8012322 <_scanf_float+0x8e>
 801236a:	290e      	cmp	r1, #14
 801236c:	d8c2      	bhi.n	80122f4 <_scanf_float+0x60>
 801236e:	a001      	add	r0, pc, #4	; (adr r0, 8012374 <_scanf_float+0xe0>)
 8012370:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8012374:	08012423 	.word	0x08012423
 8012378:	080122f5 	.word	0x080122f5
 801237c:	08012423 	.word	0x08012423
 8012380:	080124b7 	.word	0x080124b7
 8012384:	080122f5 	.word	0x080122f5
 8012388:	080123d1 	.word	0x080123d1
 801238c:	0801240d 	.word	0x0801240d
 8012390:	0801240d 	.word	0x0801240d
 8012394:	0801240d 	.word	0x0801240d
 8012398:	0801240d 	.word	0x0801240d
 801239c:	0801240d 	.word	0x0801240d
 80123a0:	0801240d 	.word	0x0801240d
 80123a4:	0801240d 	.word	0x0801240d
 80123a8:	0801240d 	.word	0x0801240d
 80123ac:	0801240d 	.word	0x0801240d
 80123b0:	2b6e      	cmp	r3, #110	; 0x6e
 80123b2:	d809      	bhi.n	80123c8 <_scanf_float+0x134>
 80123b4:	2b60      	cmp	r3, #96	; 0x60
 80123b6:	d8b2      	bhi.n	801231e <_scanf_float+0x8a>
 80123b8:	2b54      	cmp	r3, #84	; 0x54
 80123ba:	d077      	beq.n	80124ac <_scanf_float+0x218>
 80123bc:	2b59      	cmp	r3, #89	; 0x59
 80123be:	d199      	bne.n	80122f4 <_scanf_float+0x60>
 80123c0:	2d07      	cmp	r5, #7
 80123c2:	d197      	bne.n	80122f4 <_scanf_float+0x60>
 80123c4:	2508      	movs	r5, #8
 80123c6:	e029      	b.n	801241c <_scanf_float+0x188>
 80123c8:	2b74      	cmp	r3, #116	; 0x74
 80123ca:	d06f      	beq.n	80124ac <_scanf_float+0x218>
 80123cc:	2b79      	cmp	r3, #121	; 0x79
 80123ce:	e7f6      	b.n	80123be <_scanf_float+0x12a>
 80123d0:	6821      	ldr	r1, [r4, #0]
 80123d2:	05c8      	lsls	r0, r1, #23
 80123d4:	d51a      	bpl.n	801240c <_scanf_float+0x178>
 80123d6:	9b02      	ldr	r3, [sp, #8]
 80123d8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80123dc:	6021      	str	r1, [r4, #0]
 80123de:	f109 0901 	add.w	r9, r9, #1
 80123e2:	b11b      	cbz	r3, 80123ec <_scanf_float+0x158>
 80123e4:	3b01      	subs	r3, #1
 80123e6:	3201      	adds	r2, #1
 80123e8:	9302      	str	r3, [sp, #8]
 80123ea:	60a2      	str	r2, [r4, #8]
 80123ec:	68a3      	ldr	r3, [r4, #8]
 80123ee:	3b01      	subs	r3, #1
 80123f0:	60a3      	str	r3, [r4, #8]
 80123f2:	6923      	ldr	r3, [r4, #16]
 80123f4:	3301      	adds	r3, #1
 80123f6:	6123      	str	r3, [r4, #16]
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	3b01      	subs	r3, #1
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	607b      	str	r3, [r7, #4]
 8012400:	f340 8084 	ble.w	801250c <_scanf_float+0x278>
 8012404:	683b      	ldr	r3, [r7, #0]
 8012406:	3301      	adds	r3, #1
 8012408:	603b      	str	r3, [r7, #0]
 801240a:	e766      	b.n	80122da <_scanf_float+0x46>
 801240c:	eb1a 0f05 	cmn.w	sl, r5
 8012410:	f47f af70 	bne.w	80122f4 <_scanf_float+0x60>
 8012414:	6822      	ldr	r2, [r4, #0]
 8012416:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801241a:	6022      	str	r2, [r4, #0]
 801241c:	f806 3b01 	strb.w	r3, [r6], #1
 8012420:	e7e4      	b.n	80123ec <_scanf_float+0x158>
 8012422:	6822      	ldr	r2, [r4, #0]
 8012424:	0610      	lsls	r0, r2, #24
 8012426:	f57f af65 	bpl.w	80122f4 <_scanf_float+0x60>
 801242a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801242e:	e7f4      	b.n	801241a <_scanf_float+0x186>
 8012430:	f1ba 0f00 	cmp.w	sl, #0
 8012434:	d10e      	bne.n	8012454 <_scanf_float+0x1c0>
 8012436:	f1b9 0f00 	cmp.w	r9, #0
 801243a:	d10e      	bne.n	801245a <_scanf_float+0x1c6>
 801243c:	6822      	ldr	r2, [r4, #0]
 801243e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012442:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012446:	d108      	bne.n	801245a <_scanf_float+0x1c6>
 8012448:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801244c:	6022      	str	r2, [r4, #0]
 801244e:	f04f 0a01 	mov.w	sl, #1
 8012452:	e7e3      	b.n	801241c <_scanf_float+0x188>
 8012454:	f1ba 0f02 	cmp.w	sl, #2
 8012458:	d055      	beq.n	8012506 <_scanf_float+0x272>
 801245a:	2d01      	cmp	r5, #1
 801245c:	d002      	beq.n	8012464 <_scanf_float+0x1d0>
 801245e:	2d04      	cmp	r5, #4
 8012460:	f47f af48 	bne.w	80122f4 <_scanf_float+0x60>
 8012464:	3501      	adds	r5, #1
 8012466:	b2ed      	uxtb	r5, r5
 8012468:	e7d8      	b.n	801241c <_scanf_float+0x188>
 801246a:	f1ba 0f01 	cmp.w	sl, #1
 801246e:	f47f af41 	bne.w	80122f4 <_scanf_float+0x60>
 8012472:	f04f 0a02 	mov.w	sl, #2
 8012476:	e7d1      	b.n	801241c <_scanf_float+0x188>
 8012478:	b97d      	cbnz	r5, 801249a <_scanf_float+0x206>
 801247a:	f1b9 0f00 	cmp.w	r9, #0
 801247e:	f47f af3c 	bne.w	80122fa <_scanf_float+0x66>
 8012482:	6822      	ldr	r2, [r4, #0]
 8012484:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012488:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801248c:	f47f af39 	bne.w	8012302 <_scanf_float+0x6e>
 8012490:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012494:	6022      	str	r2, [r4, #0]
 8012496:	2501      	movs	r5, #1
 8012498:	e7c0      	b.n	801241c <_scanf_float+0x188>
 801249a:	2d03      	cmp	r5, #3
 801249c:	d0e2      	beq.n	8012464 <_scanf_float+0x1d0>
 801249e:	2d05      	cmp	r5, #5
 80124a0:	e7de      	b.n	8012460 <_scanf_float+0x1cc>
 80124a2:	2d02      	cmp	r5, #2
 80124a4:	f47f af26 	bne.w	80122f4 <_scanf_float+0x60>
 80124a8:	2503      	movs	r5, #3
 80124aa:	e7b7      	b.n	801241c <_scanf_float+0x188>
 80124ac:	2d06      	cmp	r5, #6
 80124ae:	f47f af21 	bne.w	80122f4 <_scanf_float+0x60>
 80124b2:	2507      	movs	r5, #7
 80124b4:	e7b2      	b.n	801241c <_scanf_float+0x188>
 80124b6:	6822      	ldr	r2, [r4, #0]
 80124b8:	0591      	lsls	r1, r2, #22
 80124ba:	f57f af1b 	bpl.w	80122f4 <_scanf_float+0x60>
 80124be:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80124c2:	6022      	str	r2, [r4, #0]
 80124c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80124c8:	e7a8      	b.n	801241c <_scanf_float+0x188>
 80124ca:	6822      	ldr	r2, [r4, #0]
 80124cc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80124d0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80124d4:	d006      	beq.n	80124e4 <_scanf_float+0x250>
 80124d6:	0550      	lsls	r0, r2, #21
 80124d8:	f57f af0c 	bpl.w	80122f4 <_scanf_float+0x60>
 80124dc:	f1b9 0f00 	cmp.w	r9, #0
 80124e0:	f43f af0f 	beq.w	8012302 <_scanf_float+0x6e>
 80124e4:	0591      	lsls	r1, r2, #22
 80124e6:	bf58      	it	pl
 80124e8:	9901      	ldrpl	r1, [sp, #4]
 80124ea:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80124ee:	bf58      	it	pl
 80124f0:	eba9 0101 	subpl.w	r1, r9, r1
 80124f4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80124f8:	bf58      	it	pl
 80124fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80124fe:	6022      	str	r2, [r4, #0]
 8012500:	f04f 0900 	mov.w	r9, #0
 8012504:	e78a      	b.n	801241c <_scanf_float+0x188>
 8012506:	f04f 0a03 	mov.w	sl, #3
 801250a:	e787      	b.n	801241c <_scanf_float+0x188>
 801250c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012510:	4639      	mov	r1, r7
 8012512:	4640      	mov	r0, r8
 8012514:	4798      	blx	r3
 8012516:	2800      	cmp	r0, #0
 8012518:	f43f aedf 	beq.w	80122da <_scanf_float+0x46>
 801251c:	e6ea      	b.n	80122f4 <_scanf_float+0x60>
 801251e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012522:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012526:	463a      	mov	r2, r7
 8012528:	4640      	mov	r0, r8
 801252a:	4798      	blx	r3
 801252c:	6923      	ldr	r3, [r4, #16]
 801252e:	3b01      	subs	r3, #1
 8012530:	6123      	str	r3, [r4, #16]
 8012532:	e6ec      	b.n	801230e <_scanf_float+0x7a>
 8012534:	1e6b      	subs	r3, r5, #1
 8012536:	2b06      	cmp	r3, #6
 8012538:	d825      	bhi.n	8012586 <_scanf_float+0x2f2>
 801253a:	2d02      	cmp	r5, #2
 801253c:	d836      	bhi.n	80125ac <_scanf_float+0x318>
 801253e:	455e      	cmp	r6, fp
 8012540:	f67f aee8 	bls.w	8012314 <_scanf_float+0x80>
 8012544:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012548:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801254c:	463a      	mov	r2, r7
 801254e:	4640      	mov	r0, r8
 8012550:	4798      	blx	r3
 8012552:	6923      	ldr	r3, [r4, #16]
 8012554:	3b01      	subs	r3, #1
 8012556:	6123      	str	r3, [r4, #16]
 8012558:	e7f1      	b.n	801253e <_scanf_float+0x2aa>
 801255a:	9802      	ldr	r0, [sp, #8]
 801255c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012560:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8012564:	9002      	str	r0, [sp, #8]
 8012566:	463a      	mov	r2, r7
 8012568:	4640      	mov	r0, r8
 801256a:	4798      	blx	r3
 801256c:	6923      	ldr	r3, [r4, #16]
 801256e:	3b01      	subs	r3, #1
 8012570:	6123      	str	r3, [r4, #16]
 8012572:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012576:	fa5f fa8a 	uxtb.w	sl, sl
 801257a:	f1ba 0f02 	cmp.w	sl, #2
 801257e:	d1ec      	bne.n	801255a <_scanf_float+0x2c6>
 8012580:	3d03      	subs	r5, #3
 8012582:	b2ed      	uxtb	r5, r5
 8012584:	1b76      	subs	r6, r6, r5
 8012586:	6823      	ldr	r3, [r4, #0]
 8012588:	05da      	lsls	r2, r3, #23
 801258a:	d52f      	bpl.n	80125ec <_scanf_float+0x358>
 801258c:	055b      	lsls	r3, r3, #21
 801258e:	d510      	bpl.n	80125b2 <_scanf_float+0x31e>
 8012590:	455e      	cmp	r6, fp
 8012592:	f67f aebf 	bls.w	8012314 <_scanf_float+0x80>
 8012596:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801259a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801259e:	463a      	mov	r2, r7
 80125a0:	4640      	mov	r0, r8
 80125a2:	4798      	blx	r3
 80125a4:	6923      	ldr	r3, [r4, #16]
 80125a6:	3b01      	subs	r3, #1
 80125a8:	6123      	str	r3, [r4, #16]
 80125aa:	e7f1      	b.n	8012590 <_scanf_float+0x2fc>
 80125ac:	46aa      	mov	sl, r5
 80125ae:	9602      	str	r6, [sp, #8]
 80125b0:	e7df      	b.n	8012572 <_scanf_float+0x2de>
 80125b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80125b6:	6923      	ldr	r3, [r4, #16]
 80125b8:	2965      	cmp	r1, #101	; 0x65
 80125ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80125be:	f106 35ff 	add.w	r5, r6, #4294967295
 80125c2:	6123      	str	r3, [r4, #16]
 80125c4:	d00c      	beq.n	80125e0 <_scanf_float+0x34c>
 80125c6:	2945      	cmp	r1, #69	; 0x45
 80125c8:	d00a      	beq.n	80125e0 <_scanf_float+0x34c>
 80125ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80125ce:	463a      	mov	r2, r7
 80125d0:	4640      	mov	r0, r8
 80125d2:	4798      	blx	r3
 80125d4:	6923      	ldr	r3, [r4, #16]
 80125d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80125da:	3b01      	subs	r3, #1
 80125dc:	1eb5      	subs	r5, r6, #2
 80125de:	6123      	str	r3, [r4, #16]
 80125e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80125e4:	463a      	mov	r2, r7
 80125e6:	4640      	mov	r0, r8
 80125e8:	4798      	blx	r3
 80125ea:	462e      	mov	r6, r5
 80125ec:	6825      	ldr	r5, [r4, #0]
 80125ee:	f015 0510 	ands.w	r5, r5, #16
 80125f2:	d158      	bne.n	80126a6 <_scanf_float+0x412>
 80125f4:	7035      	strb	r5, [r6, #0]
 80125f6:	6823      	ldr	r3, [r4, #0]
 80125f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80125fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012600:	d11c      	bne.n	801263c <_scanf_float+0x3a8>
 8012602:	9b01      	ldr	r3, [sp, #4]
 8012604:	454b      	cmp	r3, r9
 8012606:	eba3 0209 	sub.w	r2, r3, r9
 801260a:	d124      	bne.n	8012656 <_scanf_float+0x3c2>
 801260c:	2200      	movs	r2, #0
 801260e:	4659      	mov	r1, fp
 8012610:	4640      	mov	r0, r8
 8012612:	f001 f86b 	bl	80136ec <_strtod_r>
 8012616:	9b03      	ldr	r3, [sp, #12]
 8012618:	6821      	ldr	r1, [r4, #0]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	f011 0f02 	tst.w	r1, #2
 8012620:	ec57 6b10 	vmov	r6, r7, d0
 8012624:	f103 0204 	add.w	r2, r3, #4
 8012628:	d020      	beq.n	801266c <_scanf_float+0x3d8>
 801262a:	9903      	ldr	r1, [sp, #12]
 801262c:	600a      	str	r2, [r1, #0]
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	e9c3 6700 	strd	r6, r7, [r3]
 8012634:	68e3      	ldr	r3, [r4, #12]
 8012636:	3301      	adds	r3, #1
 8012638:	60e3      	str	r3, [r4, #12]
 801263a:	e66c      	b.n	8012316 <_scanf_float+0x82>
 801263c:	9b04      	ldr	r3, [sp, #16]
 801263e:	2b00      	cmp	r3, #0
 8012640:	d0e4      	beq.n	801260c <_scanf_float+0x378>
 8012642:	9905      	ldr	r1, [sp, #20]
 8012644:	230a      	movs	r3, #10
 8012646:	462a      	mov	r2, r5
 8012648:	3101      	adds	r1, #1
 801264a:	4640      	mov	r0, r8
 801264c:	f001 f8d8 	bl	8013800 <_strtol_r>
 8012650:	9b04      	ldr	r3, [sp, #16]
 8012652:	9e05      	ldr	r6, [sp, #20]
 8012654:	1ac2      	subs	r2, r0, r3
 8012656:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801265a:	429e      	cmp	r6, r3
 801265c:	bf28      	it	cs
 801265e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8012662:	4912      	ldr	r1, [pc, #72]	; (80126ac <_scanf_float+0x418>)
 8012664:	4630      	mov	r0, r6
 8012666:	f000 f977 	bl	8012958 <siprintf>
 801266a:	e7cf      	b.n	801260c <_scanf_float+0x378>
 801266c:	f011 0f04 	tst.w	r1, #4
 8012670:	9903      	ldr	r1, [sp, #12]
 8012672:	600a      	str	r2, [r1, #0]
 8012674:	d1db      	bne.n	801262e <_scanf_float+0x39a>
 8012676:	f8d3 8000 	ldr.w	r8, [r3]
 801267a:	ee10 2a10 	vmov	r2, s0
 801267e:	ee10 0a10 	vmov	r0, s0
 8012682:	463b      	mov	r3, r7
 8012684:	4639      	mov	r1, r7
 8012686:	f7ee fa61 	bl	8000b4c <__aeabi_dcmpun>
 801268a:	b128      	cbz	r0, 8012698 <_scanf_float+0x404>
 801268c:	4808      	ldr	r0, [pc, #32]	; (80126b0 <_scanf_float+0x41c>)
 801268e:	f000 f919 	bl	80128c4 <nanf>
 8012692:	ed88 0a00 	vstr	s0, [r8]
 8012696:	e7cd      	b.n	8012634 <_scanf_float+0x3a0>
 8012698:	4630      	mov	r0, r6
 801269a:	4639      	mov	r1, r7
 801269c:	f7ee fab4 	bl	8000c08 <__aeabi_d2f>
 80126a0:	f8c8 0000 	str.w	r0, [r8]
 80126a4:	e7c6      	b.n	8012634 <_scanf_float+0x3a0>
 80126a6:	2500      	movs	r5, #0
 80126a8:	e635      	b.n	8012316 <_scanf_float+0x82>
 80126aa:	bf00      	nop
 80126ac:	080185de 	.word	0x080185de
 80126b0:	08018673 	.word	0x08018673

080126b4 <iprintf>:
 80126b4:	b40f      	push	{r0, r1, r2, r3}
 80126b6:	4b0a      	ldr	r3, [pc, #40]	; (80126e0 <iprintf+0x2c>)
 80126b8:	b513      	push	{r0, r1, r4, lr}
 80126ba:	681c      	ldr	r4, [r3, #0]
 80126bc:	b124      	cbz	r4, 80126c8 <iprintf+0x14>
 80126be:	69a3      	ldr	r3, [r4, #24]
 80126c0:	b913      	cbnz	r3, 80126c8 <iprintf+0x14>
 80126c2:	4620      	mov	r0, r4
 80126c4:	f7fe ffcc 	bl	8011660 <__sinit>
 80126c8:	ab05      	add	r3, sp, #20
 80126ca:	9a04      	ldr	r2, [sp, #16]
 80126cc:	68a1      	ldr	r1, [r4, #8]
 80126ce:	9301      	str	r3, [sp, #4]
 80126d0:	4620      	mov	r0, r4
 80126d2:	f003 fdbd 	bl	8016250 <_vfiprintf_r>
 80126d6:	b002      	add	sp, #8
 80126d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80126dc:	b004      	add	sp, #16
 80126de:	4770      	bx	lr
 80126e0:	2000004c 	.word	0x2000004c

080126e4 <_puts_r>:
 80126e4:	b570      	push	{r4, r5, r6, lr}
 80126e6:	460e      	mov	r6, r1
 80126e8:	4605      	mov	r5, r0
 80126ea:	b118      	cbz	r0, 80126f4 <_puts_r+0x10>
 80126ec:	6983      	ldr	r3, [r0, #24]
 80126ee:	b90b      	cbnz	r3, 80126f4 <_puts_r+0x10>
 80126f0:	f7fe ffb6 	bl	8011660 <__sinit>
 80126f4:	69ab      	ldr	r3, [r5, #24]
 80126f6:	68ac      	ldr	r4, [r5, #8]
 80126f8:	b913      	cbnz	r3, 8012700 <_puts_r+0x1c>
 80126fa:	4628      	mov	r0, r5
 80126fc:	f7fe ffb0 	bl	8011660 <__sinit>
 8012700:	4b2c      	ldr	r3, [pc, #176]	; (80127b4 <_puts_r+0xd0>)
 8012702:	429c      	cmp	r4, r3
 8012704:	d120      	bne.n	8012748 <_puts_r+0x64>
 8012706:	686c      	ldr	r4, [r5, #4]
 8012708:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801270a:	07db      	lsls	r3, r3, #31
 801270c:	d405      	bmi.n	801271a <_puts_r+0x36>
 801270e:	89a3      	ldrh	r3, [r4, #12]
 8012710:	0598      	lsls	r0, r3, #22
 8012712:	d402      	bmi.n	801271a <_puts_r+0x36>
 8012714:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012716:	f7ff f866 	bl	80117e6 <__retarget_lock_acquire_recursive>
 801271a:	89a3      	ldrh	r3, [r4, #12]
 801271c:	0719      	lsls	r1, r3, #28
 801271e:	d51d      	bpl.n	801275c <_puts_r+0x78>
 8012720:	6923      	ldr	r3, [r4, #16]
 8012722:	b1db      	cbz	r3, 801275c <_puts_r+0x78>
 8012724:	3e01      	subs	r6, #1
 8012726:	68a3      	ldr	r3, [r4, #8]
 8012728:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801272c:	3b01      	subs	r3, #1
 801272e:	60a3      	str	r3, [r4, #8]
 8012730:	bb39      	cbnz	r1, 8012782 <_puts_r+0x9e>
 8012732:	2b00      	cmp	r3, #0
 8012734:	da38      	bge.n	80127a8 <_puts_r+0xc4>
 8012736:	4622      	mov	r2, r4
 8012738:	210a      	movs	r1, #10
 801273a:	4628      	mov	r0, r5
 801273c:	f001 f8ea 	bl	8013914 <__swbuf_r>
 8012740:	3001      	adds	r0, #1
 8012742:	d011      	beq.n	8012768 <_puts_r+0x84>
 8012744:	250a      	movs	r5, #10
 8012746:	e011      	b.n	801276c <_puts_r+0x88>
 8012748:	4b1b      	ldr	r3, [pc, #108]	; (80127b8 <_puts_r+0xd4>)
 801274a:	429c      	cmp	r4, r3
 801274c:	d101      	bne.n	8012752 <_puts_r+0x6e>
 801274e:	68ac      	ldr	r4, [r5, #8]
 8012750:	e7da      	b.n	8012708 <_puts_r+0x24>
 8012752:	4b1a      	ldr	r3, [pc, #104]	; (80127bc <_puts_r+0xd8>)
 8012754:	429c      	cmp	r4, r3
 8012756:	bf08      	it	eq
 8012758:	68ec      	ldreq	r4, [r5, #12]
 801275a:	e7d5      	b.n	8012708 <_puts_r+0x24>
 801275c:	4621      	mov	r1, r4
 801275e:	4628      	mov	r0, r5
 8012760:	f001 f93c 	bl	80139dc <__swsetup_r>
 8012764:	2800      	cmp	r0, #0
 8012766:	d0dd      	beq.n	8012724 <_puts_r+0x40>
 8012768:	f04f 35ff 	mov.w	r5, #4294967295
 801276c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801276e:	07da      	lsls	r2, r3, #31
 8012770:	d405      	bmi.n	801277e <_puts_r+0x9a>
 8012772:	89a3      	ldrh	r3, [r4, #12]
 8012774:	059b      	lsls	r3, r3, #22
 8012776:	d402      	bmi.n	801277e <_puts_r+0x9a>
 8012778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801277a:	f7ff f835 	bl	80117e8 <__retarget_lock_release_recursive>
 801277e:	4628      	mov	r0, r5
 8012780:	bd70      	pop	{r4, r5, r6, pc}
 8012782:	2b00      	cmp	r3, #0
 8012784:	da04      	bge.n	8012790 <_puts_r+0xac>
 8012786:	69a2      	ldr	r2, [r4, #24]
 8012788:	429a      	cmp	r2, r3
 801278a:	dc06      	bgt.n	801279a <_puts_r+0xb6>
 801278c:	290a      	cmp	r1, #10
 801278e:	d004      	beq.n	801279a <_puts_r+0xb6>
 8012790:	6823      	ldr	r3, [r4, #0]
 8012792:	1c5a      	adds	r2, r3, #1
 8012794:	6022      	str	r2, [r4, #0]
 8012796:	7019      	strb	r1, [r3, #0]
 8012798:	e7c5      	b.n	8012726 <_puts_r+0x42>
 801279a:	4622      	mov	r2, r4
 801279c:	4628      	mov	r0, r5
 801279e:	f001 f8b9 	bl	8013914 <__swbuf_r>
 80127a2:	3001      	adds	r0, #1
 80127a4:	d1bf      	bne.n	8012726 <_puts_r+0x42>
 80127a6:	e7df      	b.n	8012768 <_puts_r+0x84>
 80127a8:	6823      	ldr	r3, [r4, #0]
 80127aa:	250a      	movs	r5, #10
 80127ac:	1c5a      	adds	r2, r3, #1
 80127ae:	6022      	str	r2, [r4, #0]
 80127b0:	701d      	strb	r5, [r3, #0]
 80127b2:	e7db      	b.n	801276c <_puts_r+0x88>
 80127b4:	08018568 	.word	0x08018568
 80127b8:	08018588 	.word	0x08018588
 80127bc:	08018548 	.word	0x08018548

080127c0 <puts>:
 80127c0:	4b02      	ldr	r3, [pc, #8]	; (80127cc <puts+0xc>)
 80127c2:	4601      	mov	r1, r0
 80127c4:	6818      	ldr	r0, [r3, #0]
 80127c6:	f7ff bf8d 	b.w	80126e4 <_puts_r>
 80127ca:	bf00      	nop
 80127cc:	2000004c 	.word	0x2000004c

080127d0 <cleanup_glue>:
 80127d0:	b538      	push	{r3, r4, r5, lr}
 80127d2:	460c      	mov	r4, r1
 80127d4:	6809      	ldr	r1, [r1, #0]
 80127d6:	4605      	mov	r5, r0
 80127d8:	b109      	cbz	r1, 80127de <cleanup_glue+0xe>
 80127da:	f7ff fff9 	bl	80127d0 <cleanup_glue>
 80127de:	4621      	mov	r1, r4
 80127e0:	4628      	mov	r0, r5
 80127e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80127e6:	f7ff b841 	b.w	801186c <_free_r>
	...

080127ec <_reclaim_reent>:
 80127ec:	4b2c      	ldr	r3, [pc, #176]	; (80128a0 <_reclaim_reent+0xb4>)
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	4283      	cmp	r3, r0
 80127f2:	b570      	push	{r4, r5, r6, lr}
 80127f4:	4604      	mov	r4, r0
 80127f6:	d051      	beq.n	801289c <_reclaim_reent+0xb0>
 80127f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80127fa:	b143      	cbz	r3, 801280e <_reclaim_reent+0x22>
 80127fc:	68db      	ldr	r3, [r3, #12]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d14a      	bne.n	8012898 <_reclaim_reent+0xac>
 8012802:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012804:	6819      	ldr	r1, [r3, #0]
 8012806:	b111      	cbz	r1, 801280e <_reclaim_reent+0x22>
 8012808:	4620      	mov	r0, r4
 801280a:	f7ff f82f 	bl	801186c <_free_r>
 801280e:	6961      	ldr	r1, [r4, #20]
 8012810:	b111      	cbz	r1, 8012818 <_reclaim_reent+0x2c>
 8012812:	4620      	mov	r0, r4
 8012814:	f7ff f82a 	bl	801186c <_free_r>
 8012818:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801281a:	b111      	cbz	r1, 8012822 <_reclaim_reent+0x36>
 801281c:	4620      	mov	r0, r4
 801281e:	f7ff f825 	bl	801186c <_free_r>
 8012822:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012824:	b111      	cbz	r1, 801282c <_reclaim_reent+0x40>
 8012826:	4620      	mov	r0, r4
 8012828:	f7ff f820 	bl	801186c <_free_r>
 801282c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801282e:	b111      	cbz	r1, 8012836 <_reclaim_reent+0x4a>
 8012830:	4620      	mov	r0, r4
 8012832:	f7ff f81b 	bl	801186c <_free_r>
 8012836:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012838:	b111      	cbz	r1, 8012840 <_reclaim_reent+0x54>
 801283a:	4620      	mov	r0, r4
 801283c:	f7ff f816 	bl	801186c <_free_r>
 8012840:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8012842:	b111      	cbz	r1, 801284a <_reclaim_reent+0x5e>
 8012844:	4620      	mov	r0, r4
 8012846:	f7ff f811 	bl	801186c <_free_r>
 801284a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801284c:	b111      	cbz	r1, 8012854 <_reclaim_reent+0x68>
 801284e:	4620      	mov	r0, r4
 8012850:	f7ff f80c 	bl	801186c <_free_r>
 8012854:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012856:	b111      	cbz	r1, 801285e <_reclaim_reent+0x72>
 8012858:	4620      	mov	r0, r4
 801285a:	f7ff f807 	bl	801186c <_free_r>
 801285e:	69a3      	ldr	r3, [r4, #24]
 8012860:	b1e3      	cbz	r3, 801289c <_reclaim_reent+0xb0>
 8012862:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012864:	4620      	mov	r0, r4
 8012866:	4798      	blx	r3
 8012868:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801286a:	b1b9      	cbz	r1, 801289c <_reclaim_reent+0xb0>
 801286c:	4620      	mov	r0, r4
 801286e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012872:	f7ff bfad 	b.w	80127d0 <cleanup_glue>
 8012876:	5949      	ldr	r1, [r1, r5]
 8012878:	b941      	cbnz	r1, 801288c <_reclaim_reent+0xa0>
 801287a:	3504      	adds	r5, #4
 801287c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801287e:	2d80      	cmp	r5, #128	; 0x80
 8012880:	68d9      	ldr	r1, [r3, #12]
 8012882:	d1f8      	bne.n	8012876 <_reclaim_reent+0x8a>
 8012884:	4620      	mov	r0, r4
 8012886:	f7fe fff1 	bl	801186c <_free_r>
 801288a:	e7ba      	b.n	8012802 <_reclaim_reent+0x16>
 801288c:	680e      	ldr	r6, [r1, #0]
 801288e:	4620      	mov	r0, r4
 8012890:	f7fe ffec 	bl	801186c <_free_r>
 8012894:	4631      	mov	r1, r6
 8012896:	e7ef      	b.n	8012878 <_reclaim_reent+0x8c>
 8012898:	2500      	movs	r5, #0
 801289a:	e7ef      	b.n	801287c <_reclaim_reent+0x90>
 801289c:	bd70      	pop	{r4, r5, r6, pc}
 801289e:	bf00      	nop
 80128a0:	2000004c 	.word	0x2000004c

080128a4 <_sbrk_r>:
 80128a4:	b538      	push	{r3, r4, r5, lr}
 80128a6:	4d06      	ldr	r5, [pc, #24]	; (80128c0 <_sbrk_r+0x1c>)
 80128a8:	2300      	movs	r3, #0
 80128aa:	4604      	mov	r4, r0
 80128ac:	4608      	mov	r0, r1
 80128ae:	602b      	str	r3, [r5, #0]
 80128b0:	f7f0 fb16 	bl	8002ee0 <_sbrk>
 80128b4:	1c43      	adds	r3, r0, #1
 80128b6:	d102      	bne.n	80128be <_sbrk_r+0x1a>
 80128b8:	682b      	ldr	r3, [r5, #0]
 80128ba:	b103      	cbz	r3, 80128be <_sbrk_r+0x1a>
 80128bc:	6023      	str	r3, [r4, #0]
 80128be:	bd38      	pop	{r3, r4, r5, pc}
 80128c0:	20006118 	.word	0x20006118

080128c4 <nanf>:
 80128c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80128cc <nanf+0x8>
 80128c8:	4770      	bx	lr
 80128ca:	bf00      	nop
 80128cc:	7fc00000 	.word	0x7fc00000

080128d0 <_raise_r>:
 80128d0:	291f      	cmp	r1, #31
 80128d2:	b538      	push	{r3, r4, r5, lr}
 80128d4:	4604      	mov	r4, r0
 80128d6:	460d      	mov	r5, r1
 80128d8:	d904      	bls.n	80128e4 <_raise_r+0x14>
 80128da:	2316      	movs	r3, #22
 80128dc:	6003      	str	r3, [r0, #0]
 80128de:	f04f 30ff 	mov.w	r0, #4294967295
 80128e2:	bd38      	pop	{r3, r4, r5, pc}
 80128e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80128e6:	b112      	cbz	r2, 80128ee <_raise_r+0x1e>
 80128e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80128ec:	b94b      	cbnz	r3, 8012902 <_raise_r+0x32>
 80128ee:	4620      	mov	r0, r4
 80128f0:	f000 f830 	bl	8012954 <_getpid_r>
 80128f4:	462a      	mov	r2, r5
 80128f6:	4601      	mov	r1, r0
 80128f8:	4620      	mov	r0, r4
 80128fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80128fe:	f000 b817 	b.w	8012930 <_kill_r>
 8012902:	2b01      	cmp	r3, #1
 8012904:	d00a      	beq.n	801291c <_raise_r+0x4c>
 8012906:	1c59      	adds	r1, r3, #1
 8012908:	d103      	bne.n	8012912 <_raise_r+0x42>
 801290a:	2316      	movs	r3, #22
 801290c:	6003      	str	r3, [r0, #0]
 801290e:	2001      	movs	r0, #1
 8012910:	e7e7      	b.n	80128e2 <_raise_r+0x12>
 8012912:	2400      	movs	r4, #0
 8012914:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012918:	4628      	mov	r0, r5
 801291a:	4798      	blx	r3
 801291c:	2000      	movs	r0, #0
 801291e:	e7e0      	b.n	80128e2 <_raise_r+0x12>

08012920 <raise>:
 8012920:	4b02      	ldr	r3, [pc, #8]	; (801292c <raise+0xc>)
 8012922:	4601      	mov	r1, r0
 8012924:	6818      	ldr	r0, [r3, #0]
 8012926:	f7ff bfd3 	b.w	80128d0 <_raise_r>
 801292a:	bf00      	nop
 801292c:	2000004c 	.word	0x2000004c

08012930 <_kill_r>:
 8012930:	b538      	push	{r3, r4, r5, lr}
 8012932:	4d07      	ldr	r5, [pc, #28]	; (8012950 <_kill_r+0x20>)
 8012934:	2300      	movs	r3, #0
 8012936:	4604      	mov	r4, r0
 8012938:	4608      	mov	r0, r1
 801293a:	4611      	mov	r1, r2
 801293c:	602b      	str	r3, [r5, #0]
 801293e:	f7f0 fa47 	bl	8002dd0 <_kill>
 8012942:	1c43      	adds	r3, r0, #1
 8012944:	d102      	bne.n	801294c <_kill_r+0x1c>
 8012946:	682b      	ldr	r3, [r5, #0]
 8012948:	b103      	cbz	r3, 801294c <_kill_r+0x1c>
 801294a:	6023      	str	r3, [r4, #0]
 801294c:	bd38      	pop	{r3, r4, r5, pc}
 801294e:	bf00      	nop
 8012950:	20006118 	.word	0x20006118

08012954 <_getpid_r>:
 8012954:	f7f0 ba34 	b.w	8002dc0 <_getpid>

08012958 <siprintf>:
 8012958:	b40e      	push	{r1, r2, r3}
 801295a:	b500      	push	{lr}
 801295c:	b09c      	sub	sp, #112	; 0x70
 801295e:	ab1d      	add	r3, sp, #116	; 0x74
 8012960:	9002      	str	r0, [sp, #8]
 8012962:	9006      	str	r0, [sp, #24]
 8012964:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012968:	4809      	ldr	r0, [pc, #36]	; (8012990 <siprintf+0x38>)
 801296a:	9107      	str	r1, [sp, #28]
 801296c:	9104      	str	r1, [sp, #16]
 801296e:	4909      	ldr	r1, [pc, #36]	; (8012994 <siprintf+0x3c>)
 8012970:	f853 2b04 	ldr.w	r2, [r3], #4
 8012974:	9105      	str	r1, [sp, #20]
 8012976:	6800      	ldr	r0, [r0, #0]
 8012978:	9301      	str	r3, [sp, #4]
 801297a:	a902      	add	r1, sp, #8
 801297c:	f003 f96c 	bl	8015c58 <_svfiprintf_r>
 8012980:	9b02      	ldr	r3, [sp, #8]
 8012982:	2200      	movs	r2, #0
 8012984:	701a      	strb	r2, [r3, #0]
 8012986:	b01c      	add	sp, #112	; 0x70
 8012988:	f85d eb04 	ldr.w	lr, [sp], #4
 801298c:	b003      	add	sp, #12
 801298e:	4770      	bx	lr
 8012990:	2000004c 	.word	0x2000004c
 8012994:	ffff0208 	.word	0xffff0208

08012998 <siscanf>:
 8012998:	b40e      	push	{r1, r2, r3}
 801299a:	b510      	push	{r4, lr}
 801299c:	b09f      	sub	sp, #124	; 0x7c
 801299e:	ac21      	add	r4, sp, #132	; 0x84
 80129a0:	f44f 7101 	mov.w	r1, #516	; 0x204
 80129a4:	f854 2b04 	ldr.w	r2, [r4], #4
 80129a8:	9201      	str	r2, [sp, #4]
 80129aa:	f8ad 101c 	strh.w	r1, [sp, #28]
 80129ae:	9004      	str	r0, [sp, #16]
 80129b0:	9008      	str	r0, [sp, #32]
 80129b2:	f7ed fc1d 	bl	80001f0 <strlen>
 80129b6:	4b0c      	ldr	r3, [pc, #48]	; (80129e8 <siscanf+0x50>)
 80129b8:	9005      	str	r0, [sp, #20]
 80129ba:	9009      	str	r0, [sp, #36]	; 0x24
 80129bc:	930d      	str	r3, [sp, #52]	; 0x34
 80129be:	480b      	ldr	r0, [pc, #44]	; (80129ec <siscanf+0x54>)
 80129c0:	9a01      	ldr	r2, [sp, #4]
 80129c2:	6800      	ldr	r0, [r0, #0]
 80129c4:	9403      	str	r4, [sp, #12]
 80129c6:	2300      	movs	r3, #0
 80129c8:	9311      	str	r3, [sp, #68]	; 0x44
 80129ca:	9316      	str	r3, [sp, #88]	; 0x58
 80129cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80129d0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80129d4:	a904      	add	r1, sp, #16
 80129d6:	4623      	mov	r3, r4
 80129d8:	f003 fa98 	bl	8015f0c <__ssvfiscanf_r>
 80129dc:	b01f      	add	sp, #124	; 0x7c
 80129de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129e2:	b003      	add	sp, #12
 80129e4:	4770      	bx	lr
 80129e6:	bf00      	nop
 80129e8:	08012a13 	.word	0x08012a13
 80129ec:	2000004c 	.word	0x2000004c

080129f0 <__sread>:
 80129f0:	b510      	push	{r4, lr}
 80129f2:	460c      	mov	r4, r1
 80129f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129f8:	f003 fea6 	bl	8016748 <_read_r>
 80129fc:	2800      	cmp	r0, #0
 80129fe:	bfab      	itete	ge
 8012a00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012a02:	89a3      	ldrhlt	r3, [r4, #12]
 8012a04:	181b      	addge	r3, r3, r0
 8012a06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012a0a:	bfac      	ite	ge
 8012a0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8012a0e:	81a3      	strhlt	r3, [r4, #12]
 8012a10:	bd10      	pop	{r4, pc}

08012a12 <__seofread>:
 8012a12:	2000      	movs	r0, #0
 8012a14:	4770      	bx	lr

08012a16 <__swrite>:
 8012a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a1a:	461f      	mov	r7, r3
 8012a1c:	898b      	ldrh	r3, [r1, #12]
 8012a1e:	05db      	lsls	r3, r3, #23
 8012a20:	4605      	mov	r5, r0
 8012a22:	460c      	mov	r4, r1
 8012a24:	4616      	mov	r6, r2
 8012a26:	d505      	bpl.n	8012a34 <__swrite+0x1e>
 8012a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a2c:	2302      	movs	r3, #2
 8012a2e:	2200      	movs	r2, #0
 8012a30:	f002 fb32 	bl	8015098 <_lseek_r>
 8012a34:	89a3      	ldrh	r3, [r4, #12]
 8012a36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012a3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012a3e:	81a3      	strh	r3, [r4, #12]
 8012a40:	4632      	mov	r2, r6
 8012a42:	463b      	mov	r3, r7
 8012a44:	4628      	mov	r0, r5
 8012a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a4a:	f000 bfb5 	b.w	80139b8 <_write_r>

08012a4e <__sseek>:
 8012a4e:	b510      	push	{r4, lr}
 8012a50:	460c      	mov	r4, r1
 8012a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a56:	f002 fb1f 	bl	8015098 <_lseek_r>
 8012a5a:	1c43      	adds	r3, r0, #1
 8012a5c:	89a3      	ldrh	r3, [r4, #12]
 8012a5e:	bf15      	itete	ne
 8012a60:	6560      	strne	r0, [r4, #84]	; 0x54
 8012a62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012a66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012a6a:	81a3      	strheq	r3, [r4, #12]
 8012a6c:	bf18      	it	ne
 8012a6e:	81a3      	strhne	r3, [r4, #12]
 8012a70:	bd10      	pop	{r4, pc}

08012a72 <__sclose>:
 8012a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a76:	f001 b83d 	b.w	8013af4 <_close_r>

08012a7a <strncmp>:
 8012a7a:	b510      	push	{r4, lr}
 8012a7c:	b16a      	cbz	r2, 8012a9a <strncmp+0x20>
 8012a7e:	3901      	subs	r1, #1
 8012a80:	1884      	adds	r4, r0, r2
 8012a82:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012a86:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012a8a:	4293      	cmp	r3, r2
 8012a8c:	d103      	bne.n	8012a96 <strncmp+0x1c>
 8012a8e:	42a0      	cmp	r0, r4
 8012a90:	d001      	beq.n	8012a96 <strncmp+0x1c>
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d1f5      	bne.n	8012a82 <strncmp+0x8>
 8012a96:	1a98      	subs	r0, r3, r2
 8012a98:	bd10      	pop	{r4, pc}
 8012a9a:	4610      	mov	r0, r2
 8012a9c:	e7fc      	b.n	8012a98 <strncmp+0x1e>

08012a9e <sulp>:
 8012a9e:	b570      	push	{r4, r5, r6, lr}
 8012aa0:	4604      	mov	r4, r0
 8012aa2:	460d      	mov	r5, r1
 8012aa4:	ec45 4b10 	vmov	d0, r4, r5
 8012aa8:	4616      	mov	r6, r2
 8012aaa:	f002 fef5 	bl	8015898 <__ulp>
 8012aae:	ec51 0b10 	vmov	r0, r1, d0
 8012ab2:	b17e      	cbz	r6, 8012ad4 <sulp+0x36>
 8012ab4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012ab8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	dd09      	ble.n	8012ad4 <sulp+0x36>
 8012ac0:	051b      	lsls	r3, r3, #20
 8012ac2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8012ac6:	2400      	movs	r4, #0
 8012ac8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8012acc:	4622      	mov	r2, r4
 8012ace:	462b      	mov	r3, r5
 8012ad0:	f7ed fda2 	bl	8000618 <__aeabi_dmul>
 8012ad4:	bd70      	pop	{r4, r5, r6, pc}
	...

08012ad8 <_strtod_l>:
 8012ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012adc:	b0a3      	sub	sp, #140	; 0x8c
 8012ade:	461f      	mov	r7, r3
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	931e      	str	r3, [sp, #120]	; 0x78
 8012ae4:	4ba4      	ldr	r3, [pc, #656]	; (8012d78 <_strtod_l+0x2a0>)
 8012ae6:	9219      	str	r2, [sp, #100]	; 0x64
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	9307      	str	r3, [sp, #28]
 8012aec:	4604      	mov	r4, r0
 8012aee:	4618      	mov	r0, r3
 8012af0:	4688      	mov	r8, r1
 8012af2:	f7ed fb7d 	bl	80001f0 <strlen>
 8012af6:	f04f 0a00 	mov.w	sl, #0
 8012afa:	4605      	mov	r5, r0
 8012afc:	f04f 0b00 	mov.w	fp, #0
 8012b00:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8012b04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012b06:	781a      	ldrb	r2, [r3, #0]
 8012b08:	2a2b      	cmp	r2, #43	; 0x2b
 8012b0a:	d04c      	beq.n	8012ba6 <_strtod_l+0xce>
 8012b0c:	d839      	bhi.n	8012b82 <_strtod_l+0xaa>
 8012b0e:	2a0d      	cmp	r2, #13
 8012b10:	d832      	bhi.n	8012b78 <_strtod_l+0xa0>
 8012b12:	2a08      	cmp	r2, #8
 8012b14:	d832      	bhi.n	8012b7c <_strtod_l+0xa4>
 8012b16:	2a00      	cmp	r2, #0
 8012b18:	d03c      	beq.n	8012b94 <_strtod_l+0xbc>
 8012b1a:	2300      	movs	r3, #0
 8012b1c:	930e      	str	r3, [sp, #56]	; 0x38
 8012b1e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8012b20:	7833      	ldrb	r3, [r6, #0]
 8012b22:	2b30      	cmp	r3, #48	; 0x30
 8012b24:	f040 80b4 	bne.w	8012c90 <_strtod_l+0x1b8>
 8012b28:	7873      	ldrb	r3, [r6, #1]
 8012b2a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012b2e:	2b58      	cmp	r3, #88	; 0x58
 8012b30:	d16c      	bne.n	8012c0c <_strtod_l+0x134>
 8012b32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012b34:	9301      	str	r3, [sp, #4]
 8012b36:	ab1e      	add	r3, sp, #120	; 0x78
 8012b38:	9702      	str	r7, [sp, #8]
 8012b3a:	9300      	str	r3, [sp, #0]
 8012b3c:	4a8f      	ldr	r2, [pc, #572]	; (8012d7c <_strtod_l+0x2a4>)
 8012b3e:	ab1f      	add	r3, sp, #124	; 0x7c
 8012b40:	a91d      	add	r1, sp, #116	; 0x74
 8012b42:	4620      	mov	r0, r4
 8012b44:	f001 ff9c 	bl	8014a80 <__gethex>
 8012b48:	f010 0707 	ands.w	r7, r0, #7
 8012b4c:	4605      	mov	r5, r0
 8012b4e:	d005      	beq.n	8012b5c <_strtod_l+0x84>
 8012b50:	2f06      	cmp	r7, #6
 8012b52:	d12a      	bne.n	8012baa <_strtod_l+0xd2>
 8012b54:	3601      	adds	r6, #1
 8012b56:	2300      	movs	r3, #0
 8012b58:	961d      	str	r6, [sp, #116]	; 0x74
 8012b5a:	930e      	str	r3, [sp, #56]	; 0x38
 8012b5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	f040 8596 	bne.w	8013690 <_strtod_l+0xbb8>
 8012b64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012b66:	b1db      	cbz	r3, 8012ba0 <_strtod_l+0xc8>
 8012b68:	4652      	mov	r2, sl
 8012b6a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012b6e:	ec43 2b10 	vmov	d0, r2, r3
 8012b72:	b023      	add	sp, #140	; 0x8c
 8012b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b78:	2a20      	cmp	r2, #32
 8012b7a:	d1ce      	bne.n	8012b1a <_strtod_l+0x42>
 8012b7c:	3301      	adds	r3, #1
 8012b7e:	931d      	str	r3, [sp, #116]	; 0x74
 8012b80:	e7c0      	b.n	8012b04 <_strtod_l+0x2c>
 8012b82:	2a2d      	cmp	r2, #45	; 0x2d
 8012b84:	d1c9      	bne.n	8012b1a <_strtod_l+0x42>
 8012b86:	2201      	movs	r2, #1
 8012b88:	920e      	str	r2, [sp, #56]	; 0x38
 8012b8a:	1c5a      	adds	r2, r3, #1
 8012b8c:	921d      	str	r2, [sp, #116]	; 0x74
 8012b8e:	785b      	ldrb	r3, [r3, #1]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d1c4      	bne.n	8012b1e <_strtod_l+0x46>
 8012b94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012b96:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	f040 8576 	bne.w	801368c <_strtod_l+0xbb4>
 8012ba0:	4652      	mov	r2, sl
 8012ba2:	465b      	mov	r3, fp
 8012ba4:	e7e3      	b.n	8012b6e <_strtod_l+0x96>
 8012ba6:	2200      	movs	r2, #0
 8012ba8:	e7ee      	b.n	8012b88 <_strtod_l+0xb0>
 8012baa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012bac:	b13a      	cbz	r2, 8012bbe <_strtod_l+0xe6>
 8012bae:	2135      	movs	r1, #53	; 0x35
 8012bb0:	a820      	add	r0, sp, #128	; 0x80
 8012bb2:	f002 ff7c 	bl	8015aae <__copybits>
 8012bb6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012bb8:	4620      	mov	r0, r4
 8012bba:	f002 fb41 	bl	8015240 <_Bfree>
 8012bbe:	3f01      	subs	r7, #1
 8012bc0:	2f05      	cmp	r7, #5
 8012bc2:	d807      	bhi.n	8012bd4 <_strtod_l+0xfc>
 8012bc4:	e8df f007 	tbb	[pc, r7]
 8012bc8:	1d180b0e 	.word	0x1d180b0e
 8012bcc:	030e      	.short	0x030e
 8012bce:	f04f 0b00 	mov.w	fp, #0
 8012bd2:	46da      	mov	sl, fp
 8012bd4:	0728      	lsls	r0, r5, #28
 8012bd6:	d5c1      	bpl.n	8012b5c <_strtod_l+0x84>
 8012bd8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8012bdc:	e7be      	b.n	8012b5c <_strtod_l+0x84>
 8012bde:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8012be2:	e7f7      	b.n	8012bd4 <_strtod_l+0xfc>
 8012be4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8012be8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012bea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012bee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012bf2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012bf6:	e7ed      	b.n	8012bd4 <_strtod_l+0xfc>
 8012bf8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8012d80 <_strtod_l+0x2a8>
 8012bfc:	f04f 0a00 	mov.w	sl, #0
 8012c00:	e7e8      	b.n	8012bd4 <_strtod_l+0xfc>
 8012c02:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8012c06:	f04f 3aff 	mov.w	sl, #4294967295
 8012c0a:	e7e3      	b.n	8012bd4 <_strtod_l+0xfc>
 8012c0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012c0e:	1c5a      	adds	r2, r3, #1
 8012c10:	921d      	str	r2, [sp, #116]	; 0x74
 8012c12:	785b      	ldrb	r3, [r3, #1]
 8012c14:	2b30      	cmp	r3, #48	; 0x30
 8012c16:	d0f9      	beq.n	8012c0c <_strtod_l+0x134>
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d09f      	beq.n	8012b5c <_strtod_l+0x84>
 8012c1c:	2301      	movs	r3, #1
 8012c1e:	f04f 0900 	mov.w	r9, #0
 8012c22:	9304      	str	r3, [sp, #16]
 8012c24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012c26:	930a      	str	r3, [sp, #40]	; 0x28
 8012c28:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8012c2c:	464f      	mov	r7, r9
 8012c2e:	220a      	movs	r2, #10
 8012c30:	981d      	ldr	r0, [sp, #116]	; 0x74
 8012c32:	7806      	ldrb	r6, [r0, #0]
 8012c34:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8012c38:	b2d9      	uxtb	r1, r3
 8012c3a:	2909      	cmp	r1, #9
 8012c3c:	d92a      	bls.n	8012c94 <_strtod_l+0x1bc>
 8012c3e:	9907      	ldr	r1, [sp, #28]
 8012c40:	462a      	mov	r2, r5
 8012c42:	f7ff ff1a 	bl	8012a7a <strncmp>
 8012c46:	b398      	cbz	r0, 8012cb0 <_strtod_l+0x1d8>
 8012c48:	2000      	movs	r0, #0
 8012c4a:	4633      	mov	r3, r6
 8012c4c:	463d      	mov	r5, r7
 8012c4e:	9007      	str	r0, [sp, #28]
 8012c50:	4602      	mov	r2, r0
 8012c52:	2b65      	cmp	r3, #101	; 0x65
 8012c54:	d001      	beq.n	8012c5a <_strtod_l+0x182>
 8012c56:	2b45      	cmp	r3, #69	; 0x45
 8012c58:	d118      	bne.n	8012c8c <_strtod_l+0x1b4>
 8012c5a:	b91d      	cbnz	r5, 8012c64 <_strtod_l+0x18c>
 8012c5c:	9b04      	ldr	r3, [sp, #16]
 8012c5e:	4303      	orrs	r3, r0
 8012c60:	d098      	beq.n	8012b94 <_strtod_l+0xbc>
 8012c62:	2500      	movs	r5, #0
 8012c64:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8012c68:	f108 0301 	add.w	r3, r8, #1
 8012c6c:	931d      	str	r3, [sp, #116]	; 0x74
 8012c6e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012c72:	2b2b      	cmp	r3, #43	; 0x2b
 8012c74:	d075      	beq.n	8012d62 <_strtod_l+0x28a>
 8012c76:	2b2d      	cmp	r3, #45	; 0x2d
 8012c78:	d07b      	beq.n	8012d72 <_strtod_l+0x29a>
 8012c7a:	f04f 0c00 	mov.w	ip, #0
 8012c7e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8012c82:	2909      	cmp	r1, #9
 8012c84:	f240 8082 	bls.w	8012d8c <_strtod_l+0x2b4>
 8012c88:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8012c8c:	2600      	movs	r6, #0
 8012c8e:	e09d      	b.n	8012dcc <_strtod_l+0x2f4>
 8012c90:	2300      	movs	r3, #0
 8012c92:	e7c4      	b.n	8012c1e <_strtod_l+0x146>
 8012c94:	2f08      	cmp	r7, #8
 8012c96:	bfd8      	it	le
 8012c98:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8012c9a:	f100 0001 	add.w	r0, r0, #1
 8012c9e:	bfda      	itte	le
 8012ca0:	fb02 3301 	mlale	r3, r2, r1, r3
 8012ca4:	9309      	strle	r3, [sp, #36]	; 0x24
 8012ca6:	fb02 3909 	mlagt	r9, r2, r9, r3
 8012caa:	3701      	adds	r7, #1
 8012cac:	901d      	str	r0, [sp, #116]	; 0x74
 8012cae:	e7bf      	b.n	8012c30 <_strtod_l+0x158>
 8012cb0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012cb2:	195a      	adds	r2, r3, r5
 8012cb4:	921d      	str	r2, [sp, #116]	; 0x74
 8012cb6:	5d5b      	ldrb	r3, [r3, r5]
 8012cb8:	2f00      	cmp	r7, #0
 8012cba:	d037      	beq.n	8012d2c <_strtod_l+0x254>
 8012cbc:	9007      	str	r0, [sp, #28]
 8012cbe:	463d      	mov	r5, r7
 8012cc0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8012cc4:	2a09      	cmp	r2, #9
 8012cc6:	d912      	bls.n	8012cee <_strtod_l+0x216>
 8012cc8:	2201      	movs	r2, #1
 8012cca:	e7c2      	b.n	8012c52 <_strtod_l+0x17a>
 8012ccc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012cce:	1c5a      	adds	r2, r3, #1
 8012cd0:	921d      	str	r2, [sp, #116]	; 0x74
 8012cd2:	785b      	ldrb	r3, [r3, #1]
 8012cd4:	3001      	adds	r0, #1
 8012cd6:	2b30      	cmp	r3, #48	; 0x30
 8012cd8:	d0f8      	beq.n	8012ccc <_strtod_l+0x1f4>
 8012cda:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8012cde:	2a08      	cmp	r2, #8
 8012ce0:	f200 84db 	bhi.w	801369a <_strtod_l+0xbc2>
 8012ce4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012ce6:	9007      	str	r0, [sp, #28]
 8012ce8:	2000      	movs	r0, #0
 8012cea:	920a      	str	r2, [sp, #40]	; 0x28
 8012cec:	4605      	mov	r5, r0
 8012cee:	3b30      	subs	r3, #48	; 0x30
 8012cf0:	f100 0201 	add.w	r2, r0, #1
 8012cf4:	d014      	beq.n	8012d20 <_strtod_l+0x248>
 8012cf6:	9907      	ldr	r1, [sp, #28]
 8012cf8:	4411      	add	r1, r2
 8012cfa:	9107      	str	r1, [sp, #28]
 8012cfc:	462a      	mov	r2, r5
 8012cfe:	eb00 0e05 	add.w	lr, r0, r5
 8012d02:	210a      	movs	r1, #10
 8012d04:	4572      	cmp	r2, lr
 8012d06:	d113      	bne.n	8012d30 <_strtod_l+0x258>
 8012d08:	182a      	adds	r2, r5, r0
 8012d0a:	2a08      	cmp	r2, #8
 8012d0c:	f105 0501 	add.w	r5, r5, #1
 8012d10:	4405      	add	r5, r0
 8012d12:	dc1c      	bgt.n	8012d4e <_strtod_l+0x276>
 8012d14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012d16:	220a      	movs	r2, #10
 8012d18:	fb02 3301 	mla	r3, r2, r1, r3
 8012d1c:	9309      	str	r3, [sp, #36]	; 0x24
 8012d1e:	2200      	movs	r2, #0
 8012d20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012d22:	1c59      	adds	r1, r3, #1
 8012d24:	911d      	str	r1, [sp, #116]	; 0x74
 8012d26:	785b      	ldrb	r3, [r3, #1]
 8012d28:	4610      	mov	r0, r2
 8012d2a:	e7c9      	b.n	8012cc0 <_strtod_l+0x1e8>
 8012d2c:	4638      	mov	r0, r7
 8012d2e:	e7d2      	b.n	8012cd6 <_strtod_l+0x1fe>
 8012d30:	2a08      	cmp	r2, #8
 8012d32:	dc04      	bgt.n	8012d3e <_strtod_l+0x266>
 8012d34:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8012d36:	434e      	muls	r6, r1
 8012d38:	9609      	str	r6, [sp, #36]	; 0x24
 8012d3a:	3201      	adds	r2, #1
 8012d3c:	e7e2      	b.n	8012d04 <_strtod_l+0x22c>
 8012d3e:	f102 0c01 	add.w	ip, r2, #1
 8012d42:	f1bc 0f10 	cmp.w	ip, #16
 8012d46:	bfd8      	it	le
 8012d48:	fb01 f909 	mulle.w	r9, r1, r9
 8012d4c:	e7f5      	b.n	8012d3a <_strtod_l+0x262>
 8012d4e:	2d10      	cmp	r5, #16
 8012d50:	bfdc      	itt	le
 8012d52:	220a      	movle	r2, #10
 8012d54:	fb02 3909 	mlale	r9, r2, r9, r3
 8012d58:	e7e1      	b.n	8012d1e <_strtod_l+0x246>
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	9307      	str	r3, [sp, #28]
 8012d5e:	2201      	movs	r2, #1
 8012d60:	e77c      	b.n	8012c5c <_strtod_l+0x184>
 8012d62:	f04f 0c00 	mov.w	ip, #0
 8012d66:	f108 0302 	add.w	r3, r8, #2
 8012d6a:	931d      	str	r3, [sp, #116]	; 0x74
 8012d6c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8012d70:	e785      	b.n	8012c7e <_strtod_l+0x1a6>
 8012d72:	f04f 0c01 	mov.w	ip, #1
 8012d76:	e7f6      	b.n	8012d66 <_strtod_l+0x28e>
 8012d78:	08018874 	.word	0x08018874
 8012d7c:	080185e4 	.word	0x080185e4
 8012d80:	7ff00000 	.word	0x7ff00000
 8012d84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012d86:	1c59      	adds	r1, r3, #1
 8012d88:	911d      	str	r1, [sp, #116]	; 0x74
 8012d8a:	785b      	ldrb	r3, [r3, #1]
 8012d8c:	2b30      	cmp	r3, #48	; 0x30
 8012d8e:	d0f9      	beq.n	8012d84 <_strtod_l+0x2ac>
 8012d90:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8012d94:	2908      	cmp	r1, #8
 8012d96:	f63f af79 	bhi.w	8012c8c <_strtod_l+0x1b4>
 8012d9a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8012d9e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012da0:	9308      	str	r3, [sp, #32]
 8012da2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012da4:	1c59      	adds	r1, r3, #1
 8012da6:	911d      	str	r1, [sp, #116]	; 0x74
 8012da8:	785b      	ldrb	r3, [r3, #1]
 8012daa:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8012dae:	2e09      	cmp	r6, #9
 8012db0:	d937      	bls.n	8012e22 <_strtod_l+0x34a>
 8012db2:	9e08      	ldr	r6, [sp, #32]
 8012db4:	1b89      	subs	r1, r1, r6
 8012db6:	2908      	cmp	r1, #8
 8012db8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8012dbc:	dc02      	bgt.n	8012dc4 <_strtod_l+0x2ec>
 8012dbe:	4576      	cmp	r6, lr
 8012dc0:	bfa8      	it	ge
 8012dc2:	4676      	movge	r6, lr
 8012dc4:	f1bc 0f00 	cmp.w	ip, #0
 8012dc8:	d000      	beq.n	8012dcc <_strtod_l+0x2f4>
 8012dca:	4276      	negs	r6, r6
 8012dcc:	2d00      	cmp	r5, #0
 8012dce:	d14f      	bne.n	8012e70 <_strtod_l+0x398>
 8012dd0:	9904      	ldr	r1, [sp, #16]
 8012dd2:	4301      	orrs	r1, r0
 8012dd4:	f47f aec2 	bne.w	8012b5c <_strtod_l+0x84>
 8012dd8:	2a00      	cmp	r2, #0
 8012dda:	f47f aedb 	bne.w	8012b94 <_strtod_l+0xbc>
 8012dde:	2b69      	cmp	r3, #105	; 0x69
 8012de0:	d027      	beq.n	8012e32 <_strtod_l+0x35a>
 8012de2:	dc24      	bgt.n	8012e2e <_strtod_l+0x356>
 8012de4:	2b49      	cmp	r3, #73	; 0x49
 8012de6:	d024      	beq.n	8012e32 <_strtod_l+0x35a>
 8012de8:	2b4e      	cmp	r3, #78	; 0x4e
 8012dea:	f47f aed3 	bne.w	8012b94 <_strtod_l+0xbc>
 8012dee:	499e      	ldr	r1, [pc, #632]	; (8013068 <_strtod_l+0x590>)
 8012df0:	a81d      	add	r0, sp, #116	; 0x74
 8012df2:	f002 f89d 	bl	8014f30 <__match>
 8012df6:	2800      	cmp	r0, #0
 8012df8:	f43f aecc 	beq.w	8012b94 <_strtod_l+0xbc>
 8012dfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012dfe:	781b      	ldrb	r3, [r3, #0]
 8012e00:	2b28      	cmp	r3, #40	; 0x28
 8012e02:	d12d      	bne.n	8012e60 <_strtod_l+0x388>
 8012e04:	4999      	ldr	r1, [pc, #612]	; (801306c <_strtod_l+0x594>)
 8012e06:	aa20      	add	r2, sp, #128	; 0x80
 8012e08:	a81d      	add	r0, sp, #116	; 0x74
 8012e0a:	f002 f8a5 	bl	8014f58 <__hexnan>
 8012e0e:	2805      	cmp	r0, #5
 8012e10:	d126      	bne.n	8012e60 <_strtod_l+0x388>
 8012e12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012e14:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8012e18:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8012e1c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8012e20:	e69c      	b.n	8012b5c <_strtod_l+0x84>
 8012e22:	210a      	movs	r1, #10
 8012e24:	fb01 3e0e 	mla	lr, r1, lr, r3
 8012e28:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8012e2c:	e7b9      	b.n	8012da2 <_strtod_l+0x2ca>
 8012e2e:	2b6e      	cmp	r3, #110	; 0x6e
 8012e30:	e7db      	b.n	8012dea <_strtod_l+0x312>
 8012e32:	498f      	ldr	r1, [pc, #572]	; (8013070 <_strtod_l+0x598>)
 8012e34:	a81d      	add	r0, sp, #116	; 0x74
 8012e36:	f002 f87b 	bl	8014f30 <__match>
 8012e3a:	2800      	cmp	r0, #0
 8012e3c:	f43f aeaa 	beq.w	8012b94 <_strtod_l+0xbc>
 8012e40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012e42:	498c      	ldr	r1, [pc, #560]	; (8013074 <_strtod_l+0x59c>)
 8012e44:	3b01      	subs	r3, #1
 8012e46:	a81d      	add	r0, sp, #116	; 0x74
 8012e48:	931d      	str	r3, [sp, #116]	; 0x74
 8012e4a:	f002 f871 	bl	8014f30 <__match>
 8012e4e:	b910      	cbnz	r0, 8012e56 <_strtod_l+0x37e>
 8012e50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012e52:	3301      	adds	r3, #1
 8012e54:	931d      	str	r3, [sp, #116]	; 0x74
 8012e56:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8013084 <_strtod_l+0x5ac>
 8012e5a:	f04f 0a00 	mov.w	sl, #0
 8012e5e:	e67d      	b.n	8012b5c <_strtod_l+0x84>
 8012e60:	4885      	ldr	r0, [pc, #532]	; (8013078 <_strtod_l+0x5a0>)
 8012e62:	f7fe fa7d 	bl	8011360 <nan>
 8012e66:	ed8d 0b04 	vstr	d0, [sp, #16]
 8012e6a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8012e6e:	e675      	b.n	8012b5c <_strtod_l+0x84>
 8012e70:	9b07      	ldr	r3, [sp, #28]
 8012e72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012e74:	1af3      	subs	r3, r6, r3
 8012e76:	2f00      	cmp	r7, #0
 8012e78:	bf08      	it	eq
 8012e7a:	462f      	moveq	r7, r5
 8012e7c:	2d10      	cmp	r5, #16
 8012e7e:	9308      	str	r3, [sp, #32]
 8012e80:	46a8      	mov	r8, r5
 8012e82:	bfa8      	it	ge
 8012e84:	f04f 0810 	movge.w	r8, #16
 8012e88:	f7ed fb4c 	bl	8000524 <__aeabi_ui2d>
 8012e8c:	2d09      	cmp	r5, #9
 8012e8e:	4682      	mov	sl, r0
 8012e90:	468b      	mov	fp, r1
 8012e92:	dd13      	ble.n	8012ebc <_strtod_l+0x3e4>
 8012e94:	4b79      	ldr	r3, [pc, #484]	; (801307c <_strtod_l+0x5a4>)
 8012e96:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012e9a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8012e9e:	f7ed fbbb 	bl	8000618 <__aeabi_dmul>
 8012ea2:	4682      	mov	sl, r0
 8012ea4:	4648      	mov	r0, r9
 8012ea6:	468b      	mov	fp, r1
 8012ea8:	f7ed fb3c 	bl	8000524 <__aeabi_ui2d>
 8012eac:	4602      	mov	r2, r0
 8012eae:	460b      	mov	r3, r1
 8012eb0:	4650      	mov	r0, sl
 8012eb2:	4659      	mov	r1, fp
 8012eb4:	f7ed f9fa 	bl	80002ac <__adddf3>
 8012eb8:	4682      	mov	sl, r0
 8012eba:	468b      	mov	fp, r1
 8012ebc:	2d0f      	cmp	r5, #15
 8012ebe:	dc38      	bgt.n	8012f32 <_strtod_l+0x45a>
 8012ec0:	9b08      	ldr	r3, [sp, #32]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	f43f ae4a 	beq.w	8012b5c <_strtod_l+0x84>
 8012ec8:	dd24      	ble.n	8012f14 <_strtod_l+0x43c>
 8012eca:	2b16      	cmp	r3, #22
 8012ecc:	dc0b      	bgt.n	8012ee6 <_strtod_l+0x40e>
 8012ece:	4d6b      	ldr	r5, [pc, #428]	; (801307c <_strtod_l+0x5a4>)
 8012ed0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8012ed4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012ed8:	4652      	mov	r2, sl
 8012eda:	465b      	mov	r3, fp
 8012edc:	f7ed fb9c 	bl	8000618 <__aeabi_dmul>
 8012ee0:	4682      	mov	sl, r0
 8012ee2:	468b      	mov	fp, r1
 8012ee4:	e63a      	b.n	8012b5c <_strtod_l+0x84>
 8012ee6:	9a08      	ldr	r2, [sp, #32]
 8012ee8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8012eec:	4293      	cmp	r3, r2
 8012eee:	db20      	blt.n	8012f32 <_strtod_l+0x45a>
 8012ef0:	4c62      	ldr	r4, [pc, #392]	; (801307c <_strtod_l+0x5a4>)
 8012ef2:	f1c5 050f 	rsb	r5, r5, #15
 8012ef6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8012efa:	4652      	mov	r2, sl
 8012efc:	465b      	mov	r3, fp
 8012efe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f02:	f7ed fb89 	bl	8000618 <__aeabi_dmul>
 8012f06:	9b08      	ldr	r3, [sp, #32]
 8012f08:	1b5d      	subs	r5, r3, r5
 8012f0a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8012f0e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012f12:	e7e3      	b.n	8012edc <_strtod_l+0x404>
 8012f14:	9b08      	ldr	r3, [sp, #32]
 8012f16:	3316      	adds	r3, #22
 8012f18:	db0b      	blt.n	8012f32 <_strtod_l+0x45a>
 8012f1a:	9b07      	ldr	r3, [sp, #28]
 8012f1c:	4a57      	ldr	r2, [pc, #348]	; (801307c <_strtod_l+0x5a4>)
 8012f1e:	1b9e      	subs	r6, r3, r6
 8012f20:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8012f24:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012f28:	4650      	mov	r0, sl
 8012f2a:	4659      	mov	r1, fp
 8012f2c:	f7ed fc9e 	bl	800086c <__aeabi_ddiv>
 8012f30:	e7d6      	b.n	8012ee0 <_strtod_l+0x408>
 8012f32:	9b08      	ldr	r3, [sp, #32]
 8012f34:	eba5 0808 	sub.w	r8, r5, r8
 8012f38:	4498      	add	r8, r3
 8012f3a:	f1b8 0f00 	cmp.w	r8, #0
 8012f3e:	dd71      	ble.n	8013024 <_strtod_l+0x54c>
 8012f40:	f018 030f 	ands.w	r3, r8, #15
 8012f44:	d00a      	beq.n	8012f5c <_strtod_l+0x484>
 8012f46:	494d      	ldr	r1, [pc, #308]	; (801307c <_strtod_l+0x5a4>)
 8012f48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012f4c:	4652      	mov	r2, sl
 8012f4e:	465b      	mov	r3, fp
 8012f50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f54:	f7ed fb60 	bl	8000618 <__aeabi_dmul>
 8012f58:	4682      	mov	sl, r0
 8012f5a:	468b      	mov	fp, r1
 8012f5c:	f038 080f 	bics.w	r8, r8, #15
 8012f60:	d04d      	beq.n	8012ffe <_strtod_l+0x526>
 8012f62:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8012f66:	dd22      	ble.n	8012fae <_strtod_l+0x4d6>
 8012f68:	2500      	movs	r5, #0
 8012f6a:	462e      	mov	r6, r5
 8012f6c:	9509      	str	r5, [sp, #36]	; 0x24
 8012f6e:	9507      	str	r5, [sp, #28]
 8012f70:	2322      	movs	r3, #34	; 0x22
 8012f72:	f8df b110 	ldr.w	fp, [pc, #272]	; 8013084 <_strtod_l+0x5ac>
 8012f76:	6023      	str	r3, [r4, #0]
 8012f78:	f04f 0a00 	mov.w	sl, #0
 8012f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	f43f adec 	beq.w	8012b5c <_strtod_l+0x84>
 8012f84:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012f86:	4620      	mov	r0, r4
 8012f88:	f002 f95a 	bl	8015240 <_Bfree>
 8012f8c:	9907      	ldr	r1, [sp, #28]
 8012f8e:	4620      	mov	r0, r4
 8012f90:	f002 f956 	bl	8015240 <_Bfree>
 8012f94:	4631      	mov	r1, r6
 8012f96:	4620      	mov	r0, r4
 8012f98:	f002 f952 	bl	8015240 <_Bfree>
 8012f9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012f9e:	4620      	mov	r0, r4
 8012fa0:	f002 f94e 	bl	8015240 <_Bfree>
 8012fa4:	4629      	mov	r1, r5
 8012fa6:	4620      	mov	r0, r4
 8012fa8:	f002 f94a 	bl	8015240 <_Bfree>
 8012fac:	e5d6      	b.n	8012b5c <_strtod_l+0x84>
 8012fae:	2300      	movs	r3, #0
 8012fb0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8012fb4:	4650      	mov	r0, sl
 8012fb6:	4659      	mov	r1, fp
 8012fb8:	4699      	mov	r9, r3
 8012fba:	f1b8 0f01 	cmp.w	r8, #1
 8012fbe:	dc21      	bgt.n	8013004 <_strtod_l+0x52c>
 8012fc0:	b10b      	cbz	r3, 8012fc6 <_strtod_l+0x4ee>
 8012fc2:	4682      	mov	sl, r0
 8012fc4:	468b      	mov	fp, r1
 8012fc6:	4b2e      	ldr	r3, [pc, #184]	; (8013080 <_strtod_l+0x5a8>)
 8012fc8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8012fcc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8012fd0:	4652      	mov	r2, sl
 8012fd2:	465b      	mov	r3, fp
 8012fd4:	e9d9 0100 	ldrd	r0, r1, [r9]
 8012fd8:	f7ed fb1e 	bl	8000618 <__aeabi_dmul>
 8012fdc:	4b29      	ldr	r3, [pc, #164]	; (8013084 <_strtod_l+0x5ac>)
 8012fde:	460a      	mov	r2, r1
 8012fe0:	400b      	ands	r3, r1
 8012fe2:	4929      	ldr	r1, [pc, #164]	; (8013088 <_strtod_l+0x5b0>)
 8012fe4:	428b      	cmp	r3, r1
 8012fe6:	4682      	mov	sl, r0
 8012fe8:	d8be      	bhi.n	8012f68 <_strtod_l+0x490>
 8012fea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8012fee:	428b      	cmp	r3, r1
 8012ff0:	bf86      	itte	hi
 8012ff2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801308c <_strtod_l+0x5b4>
 8012ff6:	f04f 3aff 	movhi.w	sl, #4294967295
 8012ffa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8012ffe:	2300      	movs	r3, #0
 8013000:	9304      	str	r3, [sp, #16]
 8013002:	e081      	b.n	8013108 <_strtod_l+0x630>
 8013004:	f018 0f01 	tst.w	r8, #1
 8013008:	d007      	beq.n	801301a <_strtod_l+0x542>
 801300a:	4b1d      	ldr	r3, [pc, #116]	; (8013080 <_strtod_l+0x5a8>)
 801300c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8013010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013014:	f7ed fb00 	bl	8000618 <__aeabi_dmul>
 8013018:	2301      	movs	r3, #1
 801301a:	f109 0901 	add.w	r9, r9, #1
 801301e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013022:	e7ca      	b.n	8012fba <_strtod_l+0x4e2>
 8013024:	d0eb      	beq.n	8012ffe <_strtod_l+0x526>
 8013026:	f1c8 0800 	rsb	r8, r8, #0
 801302a:	f018 020f 	ands.w	r2, r8, #15
 801302e:	d00a      	beq.n	8013046 <_strtod_l+0x56e>
 8013030:	4b12      	ldr	r3, [pc, #72]	; (801307c <_strtod_l+0x5a4>)
 8013032:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013036:	4650      	mov	r0, sl
 8013038:	4659      	mov	r1, fp
 801303a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801303e:	f7ed fc15 	bl	800086c <__aeabi_ddiv>
 8013042:	4682      	mov	sl, r0
 8013044:	468b      	mov	fp, r1
 8013046:	ea5f 1828 	movs.w	r8, r8, asr #4
 801304a:	d0d8      	beq.n	8012ffe <_strtod_l+0x526>
 801304c:	f1b8 0f1f 	cmp.w	r8, #31
 8013050:	dd1e      	ble.n	8013090 <_strtod_l+0x5b8>
 8013052:	2500      	movs	r5, #0
 8013054:	462e      	mov	r6, r5
 8013056:	9509      	str	r5, [sp, #36]	; 0x24
 8013058:	9507      	str	r5, [sp, #28]
 801305a:	2322      	movs	r3, #34	; 0x22
 801305c:	f04f 0a00 	mov.w	sl, #0
 8013060:	f04f 0b00 	mov.w	fp, #0
 8013064:	6023      	str	r3, [r4, #0]
 8013066:	e789      	b.n	8012f7c <_strtod_l+0x4a4>
 8013068:	080185b9 	.word	0x080185b9
 801306c:	080185f8 	.word	0x080185f8
 8013070:	080185b1 	.word	0x080185b1
 8013074:	08018778 	.word	0x08018778
 8013078:	08018673 	.word	0x08018673
 801307c:	08018910 	.word	0x08018910
 8013080:	080188e8 	.word	0x080188e8
 8013084:	7ff00000 	.word	0x7ff00000
 8013088:	7ca00000 	.word	0x7ca00000
 801308c:	7fefffff 	.word	0x7fefffff
 8013090:	f018 0310 	ands.w	r3, r8, #16
 8013094:	bf18      	it	ne
 8013096:	236a      	movne	r3, #106	; 0x6a
 8013098:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8013450 <_strtod_l+0x978>
 801309c:	9304      	str	r3, [sp, #16]
 801309e:	4650      	mov	r0, sl
 80130a0:	4659      	mov	r1, fp
 80130a2:	2300      	movs	r3, #0
 80130a4:	f018 0f01 	tst.w	r8, #1
 80130a8:	d004      	beq.n	80130b4 <_strtod_l+0x5dc>
 80130aa:	e9d9 2300 	ldrd	r2, r3, [r9]
 80130ae:	f7ed fab3 	bl	8000618 <__aeabi_dmul>
 80130b2:	2301      	movs	r3, #1
 80130b4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80130b8:	f109 0908 	add.w	r9, r9, #8
 80130bc:	d1f2      	bne.n	80130a4 <_strtod_l+0x5cc>
 80130be:	b10b      	cbz	r3, 80130c4 <_strtod_l+0x5ec>
 80130c0:	4682      	mov	sl, r0
 80130c2:	468b      	mov	fp, r1
 80130c4:	9b04      	ldr	r3, [sp, #16]
 80130c6:	b1bb      	cbz	r3, 80130f8 <_strtod_l+0x620>
 80130c8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80130cc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	4659      	mov	r1, fp
 80130d4:	dd10      	ble.n	80130f8 <_strtod_l+0x620>
 80130d6:	2b1f      	cmp	r3, #31
 80130d8:	f340 8128 	ble.w	801332c <_strtod_l+0x854>
 80130dc:	2b34      	cmp	r3, #52	; 0x34
 80130de:	bfde      	ittt	le
 80130e0:	3b20      	suble	r3, #32
 80130e2:	f04f 32ff 	movle.w	r2, #4294967295
 80130e6:	fa02 f303 	lslle.w	r3, r2, r3
 80130ea:	f04f 0a00 	mov.w	sl, #0
 80130ee:	bfcc      	ite	gt
 80130f0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80130f4:	ea03 0b01 	andle.w	fp, r3, r1
 80130f8:	2200      	movs	r2, #0
 80130fa:	2300      	movs	r3, #0
 80130fc:	4650      	mov	r0, sl
 80130fe:	4659      	mov	r1, fp
 8013100:	f7ed fcf2 	bl	8000ae8 <__aeabi_dcmpeq>
 8013104:	2800      	cmp	r0, #0
 8013106:	d1a4      	bne.n	8013052 <_strtod_l+0x57a>
 8013108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801310a:	9300      	str	r3, [sp, #0]
 801310c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801310e:	462b      	mov	r3, r5
 8013110:	463a      	mov	r2, r7
 8013112:	4620      	mov	r0, r4
 8013114:	f002 f900 	bl	8015318 <__s2b>
 8013118:	9009      	str	r0, [sp, #36]	; 0x24
 801311a:	2800      	cmp	r0, #0
 801311c:	f43f af24 	beq.w	8012f68 <_strtod_l+0x490>
 8013120:	9b07      	ldr	r3, [sp, #28]
 8013122:	1b9e      	subs	r6, r3, r6
 8013124:	9b08      	ldr	r3, [sp, #32]
 8013126:	2b00      	cmp	r3, #0
 8013128:	bfb4      	ite	lt
 801312a:	4633      	movlt	r3, r6
 801312c:	2300      	movge	r3, #0
 801312e:	9310      	str	r3, [sp, #64]	; 0x40
 8013130:	9b08      	ldr	r3, [sp, #32]
 8013132:	2500      	movs	r5, #0
 8013134:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013138:	9318      	str	r3, [sp, #96]	; 0x60
 801313a:	462e      	mov	r6, r5
 801313c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801313e:	4620      	mov	r0, r4
 8013140:	6859      	ldr	r1, [r3, #4]
 8013142:	f002 f83d 	bl	80151c0 <_Balloc>
 8013146:	9007      	str	r0, [sp, #28]
 8013148:	2800      	cmp	r0, #0
 801314a:	f43f af11 	beq.w	8012f70 <_strtod_l+0x498>
 801314e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013150:	691a      	ldr	r2, [r3, #16]
 8013152:	3202      	adds	r2, #2
 8013154:	f103 010c 	add.w	r1, r3, #12
 8013158:	0092      	lsls	r2, r2, #2
 801315a:	300c      	adds	r0, #12
 801315c:	f7fe fb56 	bl	801180c <memcpy>
 8013160:	ec4b ab10 	vmov	d0, sl, fp
 8013164:	aa20      	add	r2, sp, #128	; 0x80
 8013166:	a91f      	add	r1, sp, #124	; 0x7c
 8013168:	4620      	mov	r0, r4
 801316a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801316e:	f002 fc0f 	bl	8015990 <__d2b>
 8013172:	901e      	str	r0, [sp, #120]	; 0x78
 8013174:	2800      	cmp	r0, #0
 8013176:	f43f aefb 	beq.w	8012f70 <_strtod_l+0x498>
 801317a:	2101      	movs	r1, #1
 801317c:	4620      	mov	r0, r4
 801317e:	f002 f965 	bl	801544c <__i2b>
 8013182:	4606      	mov	r6, r0
 8013184:	2800      	cmp	r0, #0
 8013186:	f43f aef3 	beq.w	8012f70 <_strtod_l+0x498>
 801318a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801318c:	9904      	ldr	r1, [sp, #16]
 801318e:	2b00      	cmp	r3, #0
 8013190:	bfab      	itete	ge
 8013192:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8013194:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8013196:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8013198:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801319c:	bfac      	ite	ge
 801319e:	eb03 0902 	addge.w	r9, r3, r2
 80131a2:	1ad7      	sublt	r7, r2, r3
 80131a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80131a6:	eba3 0801 	sub.w	r8, r3, r1
 80131aa:	4490      	add	r8, r2
 80131ac:	4ba3      	ldr	r3, [pc, #652]	; (801343c <_strtod_l+0x964>)
 80131ae:	f108 38ff 	add.w	r8, r8, #4294967295
 80131b2:	4598      	cmp	r8, r3
 80131b4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80131b8:	f280 80cc 	bge.w	8013354 <_strtod_l+0x87c>
 80131bc:	eba3 0308 	sub.w	r3, r3, r8
 80131c0:	2b1f      	cmp	r3, #31
 80131c2:	eba2 0203 	sub.w	r2, r2, r3
 80131c6:	f04f 0101 	mov.w	r1, #1
 80131ca:	f300 80b6 	bgt.w	801333a <_strtod_l+0x862>
 80131ce:	fa01 f303 	lsl.w	r3, r1, r3
 80131d2:	9311      	str	r3, [sp, #68]	; 0x44
 80131d4:	2300      	movs	r3, #0
 80131d6:	930c      	str	r3, [sp, #48]	; 0x30
 80131d8:	eb09 0802 	add.w	r8, r9, r2
 80131dc:	9b04      	ldr	r3, [sp, #16]
 80131de:	45c1      	cmp	r9, r8
 80131e0:	4417      	add	r7, r2
 80131e2:	441f      	add	r7, r3
 80131e4:	464b      	mov	r3, r9
 80131e6:	bfa8      	it	ge
 80131e8:	4643      	movge	r3, r8
 80131ea:	42bb      	cmp	r3, r7
 80131ec:	bfa8      	it	ge
 80131ee:	463b      	movge	r3, r7
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	bfc2      	ittt	gt
 80131f4:	eba8 0803 	subgt.w	r8, r8, r3
 80131f8:	1aff      	subgt	r7, r7, r3
 80131fa:	eba9 0903 	subgt.w	r9, r9, r3
 80131fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013200:	2b00      	cmp	r3, #0
 8013202:	dd17      	ble.n	8013234 <_strtod_l+0x75c>
 8013204:	4631      	mov	r1, r6
 8013206:	461a      	mov	r2, r3
 8013208:	4620      	mov	r0, r4
 801320a:	f002 f9db 	bl	80155c4 <__pow5mult>
 801320e:	4606      	mov	r6, r0
 8013210:	2800      	cmp	r0, #0
 8013212:	f43f aead 	beq.w	8012f70 <_strtod_l+0x498>
 8013216:	4601      	mov	r1, r0
 8013218:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801321a:	4620      	mov	r0, r4
 801321c:	f002 f92c 	bl	8015478 <__multiply>
 8013220:	900f      	str	r0, [sp, #60]	; 0x3c
 8013222:	2800      	cmp	r0, #0
 8013224:	f43f aea4 	beq.w	8012f70 <_strtod_l+0x498>
 8013228:	991e      	ldr	r1, [sp, #120]	; 0x78
 801322a:	4620      	mov	r0, r4
 801322c:	f002 f808 	bl	8015240 <_Bfree>
 8013230:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013232:	931e      	str	r3, [sp, #120]	; 0x78
 8013234:	f1b8 0f00 	cmp.w	r8, #0
 8013238:	f300 8091 	bgt.w	801335e <_strtod_l+0x886>
 801323c:	9b08      	ldr	r3, [sp, #32]
 801323e:	2b00      	cmp	r3, #0
 8013240:	dd08      	ble.n	8013254 <_strtod_l+0x77c>
 8013242:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013244:	9907      	ldr	r1, [sp, #28]
 8013246:	4620      	mov	r0, r4
 8013248:	f002 f9bc 	bl	80155c4 <__pow5mult>
 801324c:	9007      	str	r0, [sp, #28]
 801324e:	2800      	cmp	r0, #0
 8013250:	f43f ae8e 	beq.w	8012f70 <_strtod_l+0x498>
 8013254:	2f00      	cmp	r7, #0
 8013256:	dd08      	ble.n	801326a <_strtod_l+0x792>
 8013258:	9907      	ldr	r1, [sp, #28]
 801325a:	463a      	mov	r2, r7
 801325c:	4620      	mov	r0, r4
 801325e:	f002 fa0b 	bl	8015678 <__lshift>
 8013262:	9007      	str	r0, [sp, #28]
 8013264:	2800      	cmp	r0, #0
 8013266:	f43f ae83 	beq.w	8012f70 <_strtod_l+0x498>
 801326a:	f1b9 0f00 	cmp.w	r9, #0
 801326e:	dd08      	ble.n	8013282 <_strtod_l+0x7aa>
 8013270:	4631      	mov	r1, r6
 8013272:	464a      	mov	r2, r9
 8013274:	4620      	mov	r0, r4
 8013276:	f002 f9ff 	bl	8015678 <__lshift>
 801327a:	4606      	mov	r6, r0
 801327c:	2800      	cmp	r0, #0
 801327e:	f43f ae77 	beq.w	8012f70 <_strtod_l+0x498>
 8013282:	9a07      	ldr	r2, [sp, #28]
 8013284:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013286:	4620      	mov	r0, r4
 8013288:	f002 fa7e 	bl	8015788 <__mdiff>
 801328c:	4605      	mov	r5, r0
 801328e:	2800      	cmp	r0, #0
 8013290:	f43f ae6e 	beq.w	8012f70 <_strtod_l+0x498>
 8013294:	68c3      	ldr	r3, [r0, #12]
 8013296:	930f      	str	r3, [sp, #60]	; 0x3c
 8013298:	2300      	movs	r3, #0
 801329a:	60c3      	str	r3, [r0, #12]
 801329c:	4631      	mov	r1, r6
 801329e:	f002 fa57 	bl	8015750 <__mcmp>
 80132a2:	2800      	cmp	r0, #0
 80132a4:	da65      	bge.n	8013372 <_strtod_l+0x89a>
 80132a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80132a8:	ea53 030a 	orrs.w	r3, r3, sl
 80132ac:	f040 8087 	bne.w	80133be <_strtod_l+0x8e6>
 80132b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	f040 8082 	bne.w	80133be <_strtod_l+0x8e6>
 80132ba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80132be:	0d1b      	lsrs	r3, r3, #20
 80132c0:	051b      	lsls	r3, r3, #20
 80132c2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80132c6:	d97a      	bls.n	80133be <_strtod_l+0x8e6>
 80132c8:	696b      	ldr	r3, [r5, #20]
 80132ca:	b913      	cbnz	r3, 80132d2 <_strtod_l+0x7fa>
 80132cc:	692b      	ldr	r3, [r5, #16]
 80132ce:	2b01      	cmp	r3, #1
 80132d0:	dd75      	ble.n	80133be <_strtod_l+0x8e6>
 80132d2:	4629      	mov	r1, r5
 80132d4:	2201      	movs	r2, #1
 80132d6:	4620      	mov	r0, r4
 80132d8:	f002 f9ce 	bl	8015678 <__lshift>
 80132dc:	4631      	mov	r1, r6
 80132de:	4605      	mov	r5, r0
 80132e0:	f002 fa36 	bl	8015750 <__mcmp>
 80132e4:	2800      	cmp	r0, #0
 80132e6:	dd6a      	ble.n	80133be <_strtod_l+0x8e6>
 80132e8:	9904      	ldr	r1, [sp, #16]
 80132ea:	4a55      	ldr	r2, [pc, #340]	; (8013440 <_strtod_l+0x968>)
 80132ec:	465b      	mov	r3, fp
 80132ee:	2900      	cmp	r1, #0
 80132f0:	f000 8085 	beq.w	80133fe <_strtod_l+0x926>
 80132f4:	ea02 010b 	and.w	r1, r2, fp
 80132f8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80132fc:	dc7f      	bgt.n	80133fe <_strtod_l+0x926>
 80132fe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013302:	f77f aeaa 	ble.w	801305a <_strtod_l+0x582>
 8013306:	4a4f      	ldr	r2, [pc, #316]	; (8013444 <_strtod_l+0x96c>)
 8013308:	2300      	movs	r3, #0
 801330a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801330e:	4650      	mov	r0, sl
 8013310:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8013314:	4659      	mov	r1, fp
 8013316:	f7ed f97f 	bl	8000618 <__aeabi_dmul>
 801331a:	460b      	mov	r3, r1
 801331c:	4303      	orrs	r3, r0
 801331e:	bf08      	it	eq
 8013320:	2322      	moveq	r3, #34	; 0x22
 8013322:	4682      	mov	sl, r0
 8013324:	468b      	mov	fp, r1
 8013326:	bf08      	it	eq
 8013328:	6023      	streq	r3, [r4, #0]
 801332a:	e62b      	b.n	8012f84 <_strtod_l+0x4ac>
 801332c:	f04f 32ff 	mov.w	r2, #4294967295
 8013330:	fa02 f303 	lsl.w	r3, r2, r3
 8013334:	ea03 0a0a 	and.w	sl, r3, sl
 8013338:	e6de      	b.n	80130f8 <_strtod_l+0x620>
 801333a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801333e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8013342:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8013346:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801334a:	fa01 f308 	lsl.w	r3, r1, r8
 801334e:	930c      	str	r3, [sp, #48]	; 0x30
 8013350:	9111      	str	r1, [sp, #68]	; 0x44
 8013352:	e741      	b.n	80131d8 <_strtod_l+0x700>
 8013354:	2300      	movs	r3, #0
 8013356:	930c      	str	r3, [sp, #48]	; 0x30
 8013358:	2301      	movs	r3, #1
 801335a:	9311      	str	r3, [sp, #68]	; 0x44
 801335c:	e73c      	b.n	80131d8 <_strtod_l+0x700>
 801335e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013360:	4642      	mov	r2, r8
 8013362:	4620      	mov	r0, r4
 8013364:	f002 f988 	bl	8015678 <__lshift>
 8013368:	901e      	str	r0, [sp, #120]	; 0x78
 801336a:	2800      	cmp	r0, #0
 801336c:	f47f af66 	bne.w	801323c <_strtod_l+0x764>
 8013370:	e5fe      	b.n	8012f70 <_strtod_l+0x498>
 8013372:	465f      	mov	r7, fp
 8013374:	d16e      	bne.n	8013454 <_strtod_l+0x97c>
 8013376:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013378:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801337c:	b342      	cbz	r2, 80133d0 <_strtod_l+0x8f8>
 801337e:	4a32      	ldr	r2, [pc, #200]	; (8013448 <_strtod_l+0x970>)
 8013380:	4293      	cmp	r3, r2
 8013382:	d128      	bne.n	80133d6 <_strtod_l+0x8fe>
 8013384:	9b04      	ldr	r3, [sp, #16]
 8013386:	4650      	mov	r0, sl
 8013388:	b1eb      	cbz	r3, 80133c6 <_strtod_l+0x8ee>
 801338a:	4a2d      	ldr	r2, [pc, #180]	; (8013440 <_strtod_l+0x968>)
 801338c:	403a      	ands	r2, r7
 801338e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8013392:	f04f 31ff 	mov.w	r1, #4294967295
 8013396:	d819      	bhi.n	80133cc <_strtod_l+0x8f4>
 8013398:	0d12      	lsrs	r2, r2, #20
 801339a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801339e:	fa01 f303 	lsl.w	r3, r1, r3
 80133a2:	4298      	cmp	r0, r3
 80133a4:	d117      	bne.n	80133d6 <_strtod_l+0x8fe>
 80133a6:	4b29      	ldr	r3, [pc, #164]	; (801344c <_strtod_l+0x974>)
 80133a8:	429f      	cmp	r7, r3
 80133aa:	d102      	bne.n	80133b2 <_strtod_l+0x8da>
 80133ac:	3001      	adds	r0, #1
 80133ae:	f43f addf 	beq.w	8012f70 <_strtod_l+0x498>
 80133b2:	4b23      	ldr	r3, [pc, #140]	; (8013440 <_strtod_l+0x968>)
 80133b4:	403b      	ands	r3, r7
 80133b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80133ba:	f04f 0a00 	mov.w	sl, #0
 80133be:	9b04      	ldr	r3, [sp, #16]
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d1a0      	bne.n	8013306 <_strtod_l+0x82e>
 80133c4:	e5de      	b.n	8012f84 <_strtod_l+0x4ac>
 80133c6:	f04f 33ff 	mov.w	r3, #4294967295
 80133ca:	e7ea      	b.n	80133a2 <_strtod_l+0x8ca>
 80133cc:	460b      	mov	r3, r1
 80133ce:	e7e8      	b.n	80133a2 <_strtod_l+0x8ca>
 80133d0:	ea53 030a 	orrs.w	r3, r3, sl
 80133d4:	d088      	beq.n	80132e8 <_strtod_l+0x810>
 80133d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80133d8:	b1db      	cbz	r3, 8013412 <_strtod_l+0x93a>
 80133da:	423b      	tst	r3, r7
 80133dc:	d0ef      	beq.n	80133be <_strtod_l+0x8e6>
 80133de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80133e0:	9a04      	ldr	r2, [sp, #16]
 80133e2:	4650      	mov	r0, sl
 80133e4:	4659      	mov	r1, fp
 80133e6:	b1c3      	cbz	r3, 801341a <_strtod_l+0x942>
 80133e8:	f7ff fb59 	bl	8012a9e <sulp>
 80133ec:	4602      	mov	r2, r0
 80133ee:	460b      	mov	r3, r1
 80133f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80133f4:	f7ec ff5a 	bl	80002ac <__adddf3>
 80133f8:	4682      	mov	sl, r0
 80133fa:	468b      	mov	fp, r1
 80133fc:	e7df      	b.n	80133be <_strtod_l+0x8e6>
 80133fe:	4013      	ands	r3, r2
 8013400:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013404:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013408:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801340c:	f04f 3aff 	mov.w	sl, #4294967295
 8013410:	e7d5      	b.n	80133be <_strtod_l+0x8e6>
 8013412:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013414:	ea13 0f0a 	tst.w	r3, sl
 8013418:	e7e0      	b.n	80133dc <_strtod_l+0x904>
 801341a:	f7ff fb40 	bl	8012a9e <sulp>
 801341e:	4602      	mov	r2, r0
 8013420:	460b      	mov	r3, r1
 8013422:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013426:	f7ec ff3f 	bl	80002a8 <__aeabi_dsub>
 801342a:	2200      	movs	r2, #0
 801342c:	2300      	movs	r3, #0
 801342e:	4682      	mov	sl, r0
 8013430:	468b      	mov	fp, r1
 8013432:	f7ed fb59 	bl	8000ae8 <__aeabi_dcmpeq>
 8013436:	2800      	cmp	r0, #0
 8013438:	d0c1      	beq.n	80133be <_strtod_l+0x8e6>
 801343a:	e60e      	b.n	801305a <_strtod_l+0x582>
 801343c:	fffffc02 	.word	0xfffffc02
 8013440:	7ff00000 	.word	0x7ff00000
 8013444:	39500000 	.word	0x39500000
 8013448:	000fffff 	.word	0x000fffff
 801344c:	7fefffff 	.word	0x7fefffff
 8013450:	08018610 	.word	0x08018610
 8013454:	4631      	mov	r1, r6
 8013456:	4628      	mov	r0, r5
 8013458:	f002 faf6 	bl	8015a48 <__ratio>
 801345c:	ec59 8b10 	vmov	r8, r9, d0
 8013460:	ee10 0a10 	vmov	r0, s0
 8013464:	2200      	movs	r2, #0
 8013466:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801346a:	4649      	mov	r1, r9
 801346c:	f7ed fb50 	bl	8000b10 <__aeabi_dcmple>
 8013470:	2800      	cmp	r0, #0
 8013472:	d07c      	beq.n	801356e <_strtod_l+0xa96>
 8013474:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013476:	2b00      	cmp	r3, #0
 8013478:	d04c      	beq.n	8013514 <_strtod_l+0xa3c>
 801347a:	4b95      	ldr	r3, [pc, #596]	; (80136d0 <_strtod_l+0xbf8>)
 801347c:	2200      	movs	r2, #0
 801347e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8013482:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80136d0 <_strtod_l+0xbf8>
 8013486:	f04f 0800 	mov.w	r8, #0
 801348a:	4b92      	ldr	r3, [pc, #584]	; (80136d4 <_strtod_l+0xbfc>)
 801348c:	403b      	ands	r3, r7
 801348e:	9311      	str	r3, [sp, #68]	; 0x44
 8013490:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013492:	4b91      	ldr	r3, [pc, #580]	; (80136d8 <_strtod_l+0xc00>)
 8013494:	429a      	cmp	r2, r3
 8013496:	f040 80b2 	bne.w	80135fe <_strtod_l+0xb26>
 801349a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801349e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80134a2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80134a6:	ec4b ab10 	vmov	d0, sl, fp
 80134aa:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80134ae:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80134b2:	f002 f9f1 	bl	8015898 <__ulp>
 80134b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80134ba:	ec53 2b10 	vmov	r2, r3, d0
 80134be:	f7ed f8ab 	bl	8000618 <__aeabi_dmul>
 80134c2:	4652      	mov	r2, sl
 80134c4:	465b      	mov	r3, fp
 80134c6:	f7ec fef1 	bl	80002ac <__adddf3>
 80134ca:	460b      	mov	r3, r1
 80134cc:	4981      	ldr	r1, [pc, #516]	; (80136d4 <_strtod_l+0xbfc>)
 80134ce:	4a83      	ldr	r2, [pc, #524]	; (80136dc <_strtod_l+0xc04>)
 80134d0:	4019      	ands	r1, r3
 80134d2:	4291      	cmp	r1, r2
 80134d4:	4682      	mov	sl, r0
 80134d6:	d95e      	bls.n	8013596 <_strtod_l+0xabe>
 80134d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80134da:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80134de:	4293      	cmp	r3, r2
 80134e0:	d103      	bne.n	80134ea <_strtod_l+0xa12>
 80134e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80134e4:	3301      	adds	r3, #1
 80134e6:	f43f ad43 	beq.w	8012f70 <_strtod_l+0x498>
 80134ea:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80136e8 <_strtod_l+0xc10>
 80134ee:	f04f 3aff 	mov.w	sl, #4294967295
 80134f2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80134f4:	4620      	mov	r0, r4
 80134f6:	f001 fea3 	bl	8015240 <_Bfree>
 80134fa:	9907      	ldr	r1, [sp, #28]
 80134fc:	4620      	mov	r0, r4
 80134fe:	f001 fe9f 	bl	8015240 <_Bfree>
 8013502:	4631      	mov	r1, r6
 8013504:	4620      	mov	r0, r4
 8013506:	f001 fe9b 	bl	8015240 <_Bfree>
 801350a:	4629      	mov	r1, r5
 801350c:	4620      	mov	r0, r4
 801350e:	f001 fe97 	bl	8015240 <_Bfree>
 8013512:	e613      	b.n	801313c <_strtod_l+0x664>
 8013514:	f1ba 0f00 	cmp.w	sl, #0
 8013518:	d11b      	bne.n	8013552 <_strtod_l+0xa7a>
 801351a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801351e:	b9f3      	cbnz	r3, 801355e <_strtod_l+0xa86>
 8013520:	4b6b      	ldr	r3, [pc, #428]	; (80136d0 <_strtod_l+0xbf8>)
 8013522:	2200      	movs	r2, #0
 8013524:	4640      	mov	r0, r8
 8013526:	4649      	mov	r1, r9
 8013528:	f7ed fae8 	bl	8000afc <__aeabi_dcmplt>
 801352c:	b9d0      	cbnz	r0, 8013564 <_strtod_l+0xa8c>
 801352e:	4640      	mov	r0, r8
 8013530:	4649      	mov	r1, r9
 8013532:	4b6b      	ldr	r3, [pc, #428]	; (80136e0 <_strtod_l+0xc08>)
 8013534:	2200      	movs	r2, #0
 8013536:	f7ed f86f 	bl	8000618 <__aeabi_dmul>
 801353a:	4680      	mov	r8, r0
 801353c:	4689      	mov	r9, r1
 801353e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013542:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8013546:	931b      	str	r3, [sp, #108]	; 0x6c
 8013548:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801354c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8013550:	e79b      	b.n	801348a <_strtod_l+0x9b2>
 8013552:	f1ba 0f01 	cmp.w	sl, #1
 8013556:	d102      	bne.n	801355e <_strtod_l+0xa86>
 8013558:	2f00      	cmp	r7, #0
 801355a:	f43f ad7e 	beq.w	801305a <_strtod_l+0x582>
 801355e:	4b61      	ldr	r3, [pc, #388]	; (80136e4 <_strtod_l+0xc0c>)
 8013560:	2200      	movs	r2, #0
 8013562:	e78c      	b.n	801347e <_strtod_l+0x9a6>
 8013564:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80136e0 <_strtod_l+0xc08>
 8013568:	f04f 0800 	mov.w	r8, #0
 801356c:	e7e7      	b.n	801353e <_strtod_l+0xa66>
 801356e:	4b5c      	ldr	r3, [pc, #368]	; (80136e0 <_strtod_l+0xc08>)
 8013570:	4640      	mov	r0, r8
 8013572:	4649      	mov	r1, r9
 8013574:	2200      	movs	r2, #0
 8013576:	f7ed f84f 	bl	8000618 <__aeabi_dmul>
 801357a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801357c:	4680      	mov	r8, r0
 801357e:	4689      	mov	r9, r1
 8013580:	b933      	cbnz	r3, 8013590 <_strtod_l+0xab8>
 8013582:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013586:	9012      	str	r0, [sp, #72]	; 0x48
 8013588:	9313      	str	r3, [sp, #76]	; 0x4c
 801358a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801358e:	e7dd      	b.n	801354c <_strtod_l+0xa74>
 8013590:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8013594:	e7f9      	b.n	801358a <_strtod_l+0xab2>
 8013596:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801359a:	9b04      	ldr	r3, [sp, #16]
 801359c:	2b00      	cmp	r3, #0
 801359e:	d1a8      	bne.n	80134f2 <_strtod_l+0xa1a>
 80135a0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80135a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80135a6:	0d1b      	lsrs	r3, r3, #20
 80135a8:	051b      	lsls	r3, r3, #20
 80135aa:	429a      	cmp	r2, r3
 80135ac:	d1a1      	bne.n	80134f2 <_strtod_l+0xa1a>
 80135ae:	4640      	mov	r0, r8
 80135b0:	4649      	mov	r1, r9
 80135b2:	f7ed fb91 	bl	8000cd8 <__aeabi_d2lz>
 80135b6:	f7ed f801 	bl	80005bc <__aeabi_l2d>
 80135ba:	4602      	mov	r2, r0
 80135bc:	460b      	mov	r3, r1
 80135be:	4640      	mov	r0, r8
 80135c0:	4649      	mov	r1, r9
 80135c2:	f7ec fe71 	bl	80002a8 <__aeabi_dsub>
 80135c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80135c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80135cc:	ea43 030a 	orr.w	r3, r3, sl
 80135d0:	4313      	orrs	r3, r2
 80135d2:	4680      	mov	r8, r0
 80135d4:	4689      	mov	r9, r1
 80135d6:	d053      	beq.n	8013680 <_strtod_l+0xba8>
 80135d8:	a335      	add	r3, pc, #212	; (adr r3, 80136b0 <_strtod_l+0xbd8>)
 80135da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135de:	f7ed fa8d 	bl	8000afc <__aeabi_dcmplt>
 80135e2:	2800      	cmp	r0, #0
 80135e4:	f47f acce 	bne.w	8012f84 <_strtod_l+0x4ac>
 80135e8:	a333      	add	r3, pc, #204	; (adr r3, 80136b8 <_strtod_l+0xbe0>)
 80135ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135ee:	4640      	mov	r0, r8
 80135f0:	4649      	mov	r1, r9
 80135f2:	f7ed faa1 	bl	8000b38 <__aeabi_dcmpgt>
 80135f6:	2800      	cmp	r0, #0
 80135f8:	f43f af7b 	beq.w	80134f2 <_strtod_l+0xa1a>
 80135fc:	e4c2      	b.n	8012f84 <_strtod_l+0x4ac>
 80135fe:	9b04      	ldr	r3, [sp, #16]
 8013600:	b333      	cbz	r3, 8013650 <_strtod_l+0xb78>
 8013602:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013604:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013608:	d822      	bhi.n	8013650 <_strtod_l+0xb78>
 801360a:	a32d      	add	r3, pc, #180	; (adr r3, 80136c0 <_strtod_l+0xbe8>)
 801360c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013610:	4640      	mov	r0, r8
 8013612:	4649      	mov	r1, r9
 8013614:	f7ed fa7c 	bl	8000b10 <__aeabi_dcmple>
 8013618:	b1a0      	cbz	r0, 8013644 <_strtod_l+0xb6c>
 801361a:	4649      	mov	r1, r9
 801361c:	4640      	mov	r0, r8
 801361e:	f7ed fad3 	bl	8000bc8 <__aeabi_d2uiz>
 8013622:	2801      	cmp	r0, #1
 8013624:	bf38      	it	cc
 8013626:	2001      	movcc	r0, #1
 8013628:	f7ec ff7c 	bl	8000524 <__aeabi_ui2d>
 801362c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801362e:	4680      	mov	r8, r0
 8013630:	4689      	mov	r9, r1
 8013632:	bb13      	cbnz	r3, 801367a <_strtod_l+0xba2>
 8013634:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013638:	9014      	str	r0, [sp, #80]	; 0x50
 801363a:	9315      	str	r3, [sp, #84]	; 0x54
 801363c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8013640:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8013644:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013646:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013648:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801364c:	1a9b      	subs	r3, r3, r2
 801364e:	930d      	str	r3, [sp, #52]	; 0x34
 8013650:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013654:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8013658:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801365c:	f002 f91c 	bl	8015898 <__ulp>
 8013660:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013664:	ec53 2b10 	vmov	r2, r3, d0
 8013668:	f7ec ffd6 	bl	8000618 <__aeabi_dmul>
 801366c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013670:	f7ec fe1c 	bl	80002ac <__adddf3>
 8013674:	4682      	mov	sl, r0
 8013676:	468b      	mov	fp, r1
 8013678:	e78f      	b.n	801359a <_strtod_l+0xac2>
 801367a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801367e:	e7dd      	b.n	801363c <_strtod_l+0xb64>
 8013680:	a311      	add	r3, pc, #68	; (adr r3, 80136c8 <_strtod_l+0xbf0>)
 8013682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013686:	f7ed fa39 	bl	8000afc <__aeabi_dcmplt>
 801368a:	e7b4      	b.n	80135f6 <_strtod_l+0xb1e>
 801368c:	2300      	movs	r3, #0
 801368e:	930e      	str	r3, [sp, #56]	; 0x38
 8013690:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013692:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013694:	6013      	str	r3, [r2, #0]
 8013696:	f7ff ba65 	b.w	8012b64 <_strtod_l+0x8c>
 801369a:	2b65      	cmp	r3, #101	; 0x65
 801369c:	f43f ab5d 	beq.w	8012d5a <_strtod_l+0x282>
 80136a0:	2b45      	cmp	r3, #69	; 0x45
 80136a2:	f43f ab5a 	beq.w	8012d5a <_strtod_l+0x282>
 80136a6:	2201      	movs	r2, #1
 80136a8:	f7ff bb92 	b.w	8012dd0 <_strtod_l+0x2f8>
 80136ac:	f3af 8000 	nop.w
 80136b0:	94a03595 	.word	0x94a03595
 80136b4:	3fdfffff 	.word	0x3fdfffff
 80136b8:	35afe535 	.word	0x35afe535
 80136bc:	3fe00000 	.word	0x3fe00000
 80136c0:	ffc00000 	.word	0xffc00000
 80136c4:	41dfffff 	.word	0x41dfffff
 80136c8:	94a03595 	.word	0x94a03595
 80136cc:	3fcfffff 	.word	0x3fcfffff
 80136d0:	3ff00000 	.word	0x3ff00000
 80136d4:	7ff00000 	.word	0x7ff00000
 80136d8:	7fe00000 	.word	0x7fe00000
 80136dc:	7c9fffff 	.word	0x7c9fffff
 80136e0:	3fe00000 	.word	0x3fe00000
 80136e4:	bff00000 	.word	0xbff00000
 80136e8:	7fefffff 	.word	0x7fefffff

080136ec <_strtod_r>:
 80136ec:	4b01      	ldr	r3, [pc, #4]	; (80136f4 <_strtod_r+0x8>)
 80136ee:	f7ff b9f3 	b.w	8012ad8 <_strtod_l>
 80136f2:	bf00      	nop
 80136f4:	200000b4 	.word	0x200000b4

080136f8 <_strtol_l.isra.0>:
 80136f8:	2b01      	cmp	r3, #1
 80136fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136fe:	d001      	beq.n	8013704 <_strtol_l.isra.0+0xc>
 8013700:	2b24      	cmp	r3, #36	; 0x24
 8013702:	d906      	bls.n	8013712 <_strtol_l.isra.0+0x1a>
 8013704:	f7fd ff4e 	bl	80115a4 <__errno>
 8013708:	2316      	movs	r3, #22
 801370a:	6003      	str	r3, [r0, #0]
 801370c:	2000      	movs	r0, #0
 801370e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013712:	4f3a      	ldr	r7, [pc, #232]	; (80137fc <_strtol_l.isra.0+0x104>)
 8013714:	468e      	mov	lr, r1
 8013716:	4676      	mov	r6, lr
 8013718:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801371c:	5de5      	ldrb	r5, [r4, r7]
 801371e:	f015 0508 	ands.w	r5, r5, #8
 8013722:	d1f8      	bne.n	8013716 <_strtol_l.isra.0+0x1e>
 8013724:	2c2d      	cmp	r4, #45	; 0x2d
 8013726:	d134      	bne.n	8013792 <_strtol_l.isra.0+0x9a>
 8013728:	f89e 4000 	ldrb.w	r4, [lr]
 801372c:	f04f 0801 	mov.w	r8, #1
 8013730:	f106 0e02 	add.w	lr, r6, #2
 8013734:	2b00      	cmp	r3, #0
 8013736:	d05c      	beq.n	80137f2 <_strtol_l.isra.0+0xfa>
 8013738:	2b10      	cmp	r3, #16
 801373a:	d10c      	bne.n	8013756 <_strtol_l.isra.0+0x5e>
 801373c:	2c30      	cmp	r4, #48	; 0x30
 801373e:	d10a      	bne.n	8013756 <_strtol_l.isra.0+0x5e>
 8013740:	f89e 4000 	ldrb.w	r4, [lr]
 8013744:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8013748:	2c58      	cmp	r4, #88	; 0x58
 801374a:	d14d      	bne.n	80137e8 <_strtol_l.isra.0+0xf0>
 801374c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8013750:	2310      	movs	r3, #16
 8013752:	f10e 0e02 	add.w	lr, lr, #2
 8013756:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801375a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801375e:	2600      	movs	r6, #0
 8013760:	fbbc f9f3 	udiv	r9, ip, r3
 8013764:	4635      	mov	r5, r6
 8013766:	fb03 ca19 	mls	sl, r3, r9, ip
 801376a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801376e:	2f09      	cmp	r7, #9
 8013770:	d818      	bhi.n	80137a4 <_strtol_l.isra.0+0xac>
 8013772:	463c      	mov	r4, r7
 8013774:	42a3      	cmp	r3, r4
 8013776:	dd24      	ble.n	80137c2 <_strtol_l.isra.0+0xca>
 8013778:	2e00      	cmp	r6, #0
 801377a:	db1f      	blt.n	80137bc <_strtol_l.isra.0+0xc4>
 801377c:	45a9      	cmp	r9, r5
 801377e:	d31d      	bcc.n	80137bc <_strtol_l.isra.0+0xc4>
 8013780:	d101      	bne.n	8013786 <_strtol_l.isra.0+0x8e>
 8013782:	45a2      	cmp	sl, r4
 8013784:	db1a      	blt.n	80137bc <_strtol_l.isra.0+0xc4>
 8013786:	fb05 4503 	mla	r5, r5, r3, r4
 801378a:	2601      	movs	r6, #1
 801378c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8013790:	e7eb      	b.n	801376a <_strtol_l.isra.0+0x72>
 8013792:	2c2b      	cmp	r4, #43	; 0x2b
 8013794:	bf08      	it	eq
 8013796:	f89e 4000 	ldrbeq.w	r4, [lr]
 801379a:	46a8      	mov	r8, r5
 801379c:	bf08      	it	eq
 801379e:	f106 0e02 	addeq.w	lr, r6, #2
 80137a2:	e7c7      	b.n	8013734 <_strtol_l.isra.0+0x3c>
 80137a4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80137a8:	2f19      	cmp	r7, #25
 80137aa:	d801      	bhi.n	80137b0 <_strtol_l.isra.0+0xb8>
 80137ac:	3c37      	subs	r4, #55	; 0x37
 80137ae:	e7e1      	b.n	8013774 <_strtol_l.isra.0+0x7c>
 80137b0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80137b4:	2f19      	cmp	r7, #25
 80137b6:	d804      	bhi.n	80137c2 <_strtol_l.isra.0+0xca>
 80137b8:	3c57      	subs	r4, #87	; 0x57
 80137ba:	e7db      	b.n	8013774 <_strtol_l.isra.0+0x7c>
 80137bc:	f04f 36ff 	mov.w	r6, #4294967295
 80137c0:	e7e4      	b.n	801378c <_strtol_l.isra.0+0x94>
 80137c2:	2e00      	cmp	r6, #0
 80137c4:	da05      	bge.n	80137d2 <_strtol_l.isra.0+0xda>
 80137c6:	2322      	movs	r3, #34	; 0x22
 80137c8:	6003      	str	r3, [r0, #0]
 80137ca:	4665      	mov	r5, ip
 80137cc:	b942      	cbnz	r2, 80137e0 <_strtol_l.isra.0+0xe8>
 80137ce:	4628      	mov	r0, r5
 80137d0:	e79d      	b.n	801370e <_strtol_l.isra.0+0x16>
 80137d2:	f1b8 0f00 	cmp.w	r8, #0
 80137d6:	d000      	beq.n	80137da <_strtol_l.isra.0+0xe2>
 80137d8:	426d      	negs	r5, r5
 80137da:	2a00      	cmp	r2, #0
 80137dc:	d0f7      	beq.n	80137ce <_strtol_l.isra.0+0xd6>
 80137de:	b10e      	cbz	r6, 80137e4 <_strtol_l.isra.0+0xec>
 80137e0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80137e4:	6011      	str	r1, [r2, #0]
 80137e6:	e7f2      	b.n	80137ce <_strtol_l.isra.0+0xd6>
 80137e8:	2430      	movs	r4, #48	; 0x30
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d1b3      	bne.n	8013756 <_strtol_l.isra.0+0x5e>
 80137ee:	2308      	movs	r3, #8
 80137f0:	e7b1      	b.n	8013756 <_strtol_l.isra.0+0x5e>
 80137f2:	2c30      	cmp	r4, #48	; 0x30
 80137f4:	d0a4      	beq.n	8013740 <_strtol_l.isra.0+0x48>
 80137f6:	230a      	movs	r3, #10
 80137f8:	e7ad      	b.n	8013756 <_strtol_l.isra.0+0x5e>
 80137fa:	bf00      	nop
 80137fc:	08018675 	.word	0x08018675

08013800 <_strtol_r>:
 8013800:	f7ff bf7a 	b.w	80136f8 <_strtol_l.isra.0>

08013804 <_strtoul_l.isra.0>:
 8013804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013808:	4e3b      	ldr	r6, [pc, #236]	; (80138f8 <_strtoul_l.isra.0+0xf4>)
 801380a:	4686      	mov	lr, r0
 801380c:	468c      	mov	ip, r1
 801380e:	4660      	mov	r0, ip
 8013810:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8013814:	5da5      	ldrb	r5, [r4, r6]
 8013816:	f015 0508 	ands.w	r5, r5, #8
 801381a:	d1f8      	bne.n	801380e <_strtoul_l.isra.0+0xa>
 801381c:	2c2d      	cmp	r4, #45	; 0x2d
 801381e:	d134      	bne.n	801388a <_strtoul_l.isra.0+0x86>
 8013820:	f89c 4000 	ldrb.w	r4, [ip]
 8013824:	f04f 0801 	mov.w	r8, #1
 8013828:	f100 0c02 	add.w	ip, r0, #2
 801382c:	2b00      	cmp	r3, #0
 801382e:	d05e      	beq.n	80138ee <_strtoul_l.isra.0+0xea>
 8013830:	2b10      	cmp	r3, #16
 8013832:	d10c      	bne.n	801384e <_strtoul_l.isra.0+0x4a>
 8013834:	2c30      	cmp	r4, #48	; 0x30
 8013836:	d10a      	bne.n	801384e <_strtoul_l.isra.0+0x4a>
 8013838:	f89c 0000 	ldrb.w	r0, [ip]
 801383c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8013840:	2858      	cmp	r0, #88	; 0x58
 8013842:	d14f      	bne.n	80138e4 <_strtoul_l.isra.0+0xe0>
 8013844:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8013848:	2310      	movs	r3, #16
 801384a:	f10c 0c02 	add.w	ip, ip, #2
 801384e:	f04f 37ff 	mov.w	r7, #4294967295
 8013852:	2500      	movs	r5, #0
 8013854:	fbb7 f7f3 	udiv	r7, r7, r3
 8013858:	fb03 f907 	mul.w	r9, r3, r7
 801385c:	ea6f 0909 	mvn.w	r9, r9
 8013860:	4628      	mov	r0, r5
 8013862:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8013866:	2e09      	cmp	r6, #9
 8013868:	d818      	bhi.n	801389c <_strtoul_l.isra.0+0x98>
 801386a:	4634      	mov	r4, r6
 801386c:	42a3      	cmp	r3, r4
 801386e:	dd24      	ble.n	80138ba <_strtoul_l.isra.0+0xb6>
 8013870:	2d00      	cmp	r5, #0
 8013872:	db1f      	blt.n	80138b4 <_strtoul_l.isra.0+0xb0>
 8013874:	4287      	cmp	r7, r0
 8013876:	d31d      	bcc.n	80138b4 <_strtoul_l.isra.0+0xb0>
 8013878:	d101      	bne.n	801387e <_strtoul_l.isra.0+0x7a>
 801387a:	45a1      	cmp	r9, r4
 801387c:	db1a      	blt.n	80138b4 <_strtoul_l.isra.0+0xb0>
 801387e:	fb00 4003 	mla	r0, r0, r3, r4
 8013882:	2501      	movs	r5, #1
 8013884:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8013888:	e7eb      	b.n	8013862 <_strtoul_l.isra.0+0x5e>
 801388a:	2c2b      	cmp	r4, #43	; 0x2b
 801388c:	bf08      	it	eq
 801388e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8013892:	46a8      	mov	r8, r5
 8013894:	bf08      	it	eq
 8013896:	f100 0c02 	addeq.w	ip, r0, #2
 801389a:	e7c7      	b.n	801382c <_strtoul_l.isra.0+0x28>
 801389c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80138a0:	2e19      	cmp	r6, #25
 80138a2:	d801      	bhi.n	80138a8 <_strtoul_l.isra.0+0xa4>
 80138a4:	3c37      	subs	r4, #55	; 0x37
 80138a6:	e7e1      	b.n	801386c <_strtoul_l.isra.0+0x68>
 80138a8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80138ac:	2e19      	cmp	r6, #25
 80138ae:	d804      	bhi.n	80138ba <_strtoul_l.isra.0+0xb6>
 80138b0:	3c57      	subs	r4, #87	; 0x57
 80138b2:	e7db      	b.n	801386c <_strtoul_l.isra.0+0x68>
 80138b4:	f04f 35ff 	mov.w	r5, #4294967295
 80138b8:	e7e4      	b.n	8013884 <_strtoul_l.isra.0+0x80>
 80138ba:	2d00      	cmp	r5, #0
 80138bc:	da07      	bge.n	80138ce <_strtoul_l.isra.0+0xca>
 80138be:	2322      	movs	r3, #34	; 0x22
 80138c0:	f8ce 3000 	str.w	r3, [lr]
 80138c4:	f04f 30ff 	mov.w	r0, #4294967295
 80138c8:	b942      	cbnz	r2, 80138dc <_strtoul_l.isra.0+0xd8>
 80138ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80138ce:	f1b8 0f00 	cmp.w	r8, #0
 80138d2:	d000      	beq.n	80138d6 <_strtoul_l.isra.0+0xd2>
 80138d4:	4240      	negs	r0, r0
 80138d6:	2a00      	cmp	r2, #0
 80138d8:	d0f7      	beq.n	80138ca <_strtoul_l.isra.0+0xc6>
 80138da:	b10d      	cbz	r5, 80138e0 <_strtoul_l.isra.0+0xdc>
 80138dc:	f10c 31ff 	add.w	r1, ip, #4294967295
 80138e0:	6011      	str	r1, [r2, #0]
 80138e2:	e7f2      	b.n	80138ca <_strtoul_l.isra.0+0xc6>
 80138e4:	2430      	movs	r4, #48	; 0x30
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d1b1      	bne.n	801384e <_strtoul_l.isra.0+0x4a>
 80138ea:	2308      	movs	r3, #8
 80138ec:	e7af      	b.n	801384e <_strtoul_l.isra.0+0x4a>
 80138ee:	2c30      	cmp	r4, #48	; 0x30
 80138f0:	d0a2      	beq.n	8013838 <_strtoul_l.isra.0+0x34>
 80138f2:	230a      	movs	r3, #10
 80138f4:	e7ab      	b.n	801384e <_strtoul_l.isra.0+0x4a>
 80138f6:	bf00      	nop
 80138f8:	08018675 	.word	0x08018675

080138fc <_strtoul_r>:
 80138fc:	f7ff bf82 	b.w	8013804 <_strtoul_l.isra.0>

08013900 <strtoul>:
 8013900:	4613      	mov	r3, r2
 8013902:	460a      	mov	r2, r1
 8013904:	4601      	mov	r1, r0
 8013906:	4802      	ldr	r0, [pc, #8]	; (8013910 <strtoul+0x10>)
 8013908:	6800      	ldr	r0, [r0, #0]
 801390a:	f7ff bf7b 	b.w	8013804 <_strtoul_l.isra.0>
 801390e:	bf00      	nop
 8013910:	2000004c 	.word	0x2000004c

08013914 <__swbuf_r>:
 8013914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013916:	460e      	mov	r6, r1
 8013918:	4614      	mov	r4, r2
 801391a:	4605      	mov	r5, r0
 801391c:	b118      	cbz	r0, 8013926 <__swbuf_r+0x12>
 801391e:	6983      	ldr	r3, [r0, #24]
 8013920:	b90b      	cbnz	r3, 8013926 <__swbuf_r+0x12>
 8013922:	f7fd fe9d 	bl	8011660 <__sinit>
 8013926:	4b21      	ldr	r3, [pc, #132]	; (80139ac <__swbuf_r+0x98>)
 8013928:	429c      	cmp	r4, r3
 801392a:	d12b      	bne.n	8013984 <__swbuf_r+0x70>
 801392c:	686c      	ldr	r4, [r5, #4]
 801392e:	69a3      	ldr	r3, [r4, #24]
 8013930:	60a3      	str	r3, [r4, #8]
 8013932:	89a3      	ldrh	r3, [r4, #12]
 8013934:	071a      	lsls	r2, r3, #28
 8013936:	d52f      	bpl.n	8013998 <__swbuf_r+0x84>
 8013938:	6923      	ldr	r3, [r4, #16]
 801393a:	b36b      	cbz	r3, 8013998 <__swbuf_r+0x84>
 801393c:	6923      	ldr	r3, [r4, #16]
 801393e:	6820      	ldr	r0, [r4, #0]
 8013940:	1ac0      	subs	r0, r0, r3
 8013942:	6963      	ldr	r3, [r4, #20]
 8013944:	b2f6      	uxtb	r6, r6
 8013946:	4283      	cmp	r3, r0
 8013948:	4637      	mov	r7, r6
 801394a:	dc04      	bgt.n	8013956 <__swbuf_r+0x42>
 801394c:	4621      	mov	r1, r4
 801394e:	4628      	mov	r0, r5
 8013950:	f000 ffe0 	bl	8014914 <_fflush_r>
 8013954:	bb30      	cbnz	r0, 80139a4 <__swbuf_r+0x90>
 8013956:	68a3      	ldr	r3, [r4, #8]
 8013958:	3b01      	subs	r3, #1
 801395a:	60a3      	str	r3, [r4, #8]
 801395c:	6823      	ldr	r3, [r4, #0]
 801395e:	1c5a      	adds	r2, r3, #1
 8013960:	6022      	str	r2, [r4, #0]
 8013962:	701e      	strb	r6, [r3, #0]
 8013964:	6963      	ldr	r3, [r4, #20]
 8013966:	3001      	adds	r0, #1
 8013968:	4283      	cmp	r3, r0
 801396a:	d004      	beq.n	8013976 <__swbuf_r+0x62>
 801396c:	89a3      	ldrh	r3, [r4, #12]
 801396e:	07db      	lsls	r3, r3, #31
 8013970:	d506      	bpl.n	8013980 <__swbuf_r+0x6c>
 8013972:	2e0a      	cmp	r6, #10
 8013974:	d104      	bne.n	8013980 <__swbuf_r+0x6c>
 8013976:	4621      	mov	r1, r4
 8013978:	4628      	mov	r0, r5
 801397a:	f000 ffcb 	bl	8014914 <_fflush_r>
 801397e:	b988      	cbnz	r0, 80139a4 <__swbuf_r+0x90>
 8013980:	4638      	mov	r0, r7
 8013982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013984:	4b0a      	ldr	r3, [pc, #40]	; (80139b0 <__swbuf_r+0x9c>)
 8013986:	429c      	cmp	r4, r3
 8013988:	d101      	bne.n	801398e <__swbuf_r+0x7a>
 801398a:	68ac      	ldr	r4, [r5, #8]
 801398c:	e7cf      	b.n	801392e <__swbuf_r+0x1a>
 801398e:	4b09      	ldr	r3, [pc, #36]	; (80139b4 <__swbuf_r+0xa0>)
 8013990:	429c      	cmp	r4, r3
 8013992:	bf08      	it	eq
 8013994:	68ec      	ldreq	r4, [r5, #12]
 8013996:	e7ca      	b.n	801392e <__swbuf_r+0x1a>
 8013998:	4621      	mov	r1, r4
 801399a:	4628      	mov	r0, r5
 801399c:	f000 f81e 	bl	80139dc <__swsetup_r>
 80139a0:	2800      	cmp	r0, #0
 80139a2:	d0cb      	beq.n	801393c <__swbuf_r+0x28>
 80139a4:	f04f 37ff 	mov.w	r7, #4294967295
 80139a8:	e7ea      	b.n	8013980 <__swbuf_r+0x6c>
 80139aa:	bf00      	nop
 80139ac:	08018568 	.word	0x08018568
 80139b0:	08018588 	.word	0x08018588
 80139b4:	08018548 	.word	0x08018548

080139b8 <_write_r>:
 80139b8:	b538      	push	{r3, r4, r5, lr}
 80139ba:	4d07      	ldr	r5, [pc, #28]	; (80139d8 <_write_r+0x20>)
 80139bc:	4604      	mov	r4, r0
 80139be:	4608      	mov	r0, r1
 80139c0:	4611      	mov	r1, r2
 80139c2:	2200      	movs	r2, #0
 80139c4:	602a      	str	r2, [r5, #0]
 80139c6:	461a      	mov	r2, r3
 80139c8:	f7ef fa39 	bl	8002e3e <_write>
 80139cc:	1c43      	adds	r3, r0, #1
 80139ce:	d102      	bne.n	80139d6 <_write_r+0x1e>
 80139d0:	682b      	ldr	r3, [r5, #0]
 80139d2:	b103      	cbz	r3, 80139d6 <_write_r+0x1e>
 80139d4:	6023      	str	r3, [r4, #0]
 80139d6:	bd38      	pop	{r3, r4, r5, pc}
 80139d8:	20006118 	.word	0x20006118

080139dc <__swsetup_r>:
 80139dc:	4b32      	ldr	r3, [pc, #200]	; (8013aa8 <__swsetup_r+0xcc>)
 80139de:	b570      	push	{r4, r5, r6, lr}
 80139e0:	681d      	ldr	r5, [r3, #0]
 80139e2:	4606      	mov	r6, r0
 80139e4:	460c      	mov	r4, r1
 80139e6:	b125      	cbz	r5, 80139f2 <__swsetup_r+0x16>
 80139e8:	69ab      	ldr	r3, [r5, #24]
 80139ea:	b913      	cbnz	r3, 80139f2 <__swsetup_r+0x16>
 80139ec:	4628      	mov	r0, r5
 80139ee:	f7fd fe37 	bl	8011660 <__sinit>
 80139f2:	4b2e      	ldr	r3, [pc, #184]	; (8013aac <__swsetup_r+0xd0>)
 80139f4:	429c      	cmp	r4, r3
 80139f6:	d10f      	bne.n	8013a18 <__swsetup_r+0x3c>
 80139f8:	686c      	ldr	r4, [r5, #4]
 80139fa:	89a3      	ldrh	r3, [r4, #12]
 80139fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013a00:	0719      	lsls	r1, r3, #28
 8013a02:	d42c      	bmi.n	8013a5e <__swsetup_r+0x82>
 8013a04:	06dd      	lsls	r5, r3, #27
 8013a06:	d411      	bmi.n	8013a2c <__swsetup_r+0x50>
 8013a08:	2309      	movs	r3, #9
 8013a0a:	6033      	str	r3, [r6, #0]
 8013a0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013a10:	81a3      	strh	r3, [r4, #12]
 8013a12:	f04f 30ff 	mov.w	r0, #4294967295
 8013a16:	e03e      	b.n	8013a96 <__swsetup_r+0xba>
 8013a18:	4b25      	ldr	r3, [pc, #148]	; (8013ab0 <__swsetup_r+0xd4>)
 8013a1a:	429c      	cmp	r4, r3
 8013a1c:	d101      	bne.n	8013a22 <__swsetup_r+0x46>
 8013a1e:	68ac      	ldr	r4, [r5, #8]
 8013a20:	e7eb      	b.n	80139fa <__swsetup_r+0x1e>
 8013a22:	4b24      	ldr	r3, [pc, #144]	; (8013ab4 <__swsetup_r+0xd8>)
 8013a24:	429c      	cmp	r4, r3
 8013a26:	bf08      	it	eq
 8013a28:	68ec      	ldreq	r4, [r5, #12]
 8013a2a:	e7e6      	b.n	80139fa <__swsetup_r+0x1e>
 8013a2c:	0758      	lsls	r0, r3, #29
 8013a2e:	d512      	bpl.n	8013a56 <__swsetup_r+0x7a>
 8013a30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013a32:	b141      	cbz	r1, 8013a46 <__swsetup_r+0x6a>
 8013a34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013a38:	4299      	cmp	r1, r3
 8013a3a:	d002      	beq.n	8013a42 <__swsetup_r+0x66>
 8013a3c:	4630      	mov	r0, r6
 8013a3e:	f7fd ff15 	bl	801186c <_free_r>
 8013a42:	2300      	movs	r3, #0
 8013a44:	6363      	str	r3, [r4, #52]	; 0x34
 8013a46:	89a3      	ldrh	r3, [r4, #12]
 8013a48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013a4c:	81a3      	strh	r3, [r4, #12]
 8013a4e:	2300      	movs	r3, #0
 8013a50:	6063      	str	r3, [r4, #4]
 8013a52:	6923      	ldr	r3, [r4, #16]
 8013a54:	6023      	str	r3, [r4, #0]
 8013a56:	89a3      	ldrh	r3, [r4, #12]
 8013a58:	f043 0308 	orr.w	r3, r3, #8
 8013a5c:	81a3      	strh	r3, [r4, #12]
 8013a5e:	6923      	ldr	r3, [r4, #16]
 8013a60:	b94b      	cbnz	r3, 8013a76 <__swsetup_r+0x9a>
 8013a62:	89a3      	ldrh	r3, [r4, #12]
 8013a64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013a6c:	d003      	beq.n	8013a76 <__swsetup_r+0x9a>
 8013a6e:	4621      	mov	r1, r4
 8013a70:	4630      	mov	r0, r6
 8013a72:	f001 fb47 	bl	8015104 <__smakebuf_r>
 8013a76:	89a0      	ldrh	r0, [r4, #12]
 8013a78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013a7c:	f010 0301 	ands.w	r3, r0, #1
 8013a80:	d00a      	beq.n	8013a98 <__swsetup_r+0xbc>
 8013a82:	2300      	movs	r3, #0
 8013a84:	60a3      	str	r3, [r4, #8]
 8013a86:	6963      	ldr	r3, [r4, #20]
 8013a88:	425b      	negs	r3, r3
 8013a8a:	61a3      	str	r3, [r4, #24]
 8013a8c:	6923      	ldr	r3, [r4, #16]
 8013a8e:	b943      	cbnz	r3, 8013aa2 <__swsetup_r+0xc6>
 8013a90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013a94:	d1ba      	bne.n	8013a0c <__swsetup_r+0x30>
 8013a96:	bd70      	pop	{r4, r5, r6, pc}
 8013a98:	0781      	lsls	r1, r0, #30
 8013a9a:	bf58      	it	pl
 8013a9c:	6963      	ldrpl	r3, [r4, #20]
 8013a9e:	60a3      	str	r3, [r4, #8]
 8013aa0:	e7f4      	b.n	8013a8c <__swsetup_r+0xb0>
 8013aa2:	2000      	movs	r0, #0
 8013aa4:	e7f7      	b.n	8013a96 <__swsetup_r+0xba>
 8013aa6:	bf00      	nop
 8013aa8:	2000004c 	.word	0x2000004c
 8013aac:	08018568 	.word	0x08018568
 8013ab0:	08018588 	.word	0x08018588
 8013ab4:	08018548 	.word	0x08018548

08013ab8 <__assert_func>:
 8013ab8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013aba:	4614      	mov	r4, r2
 8013abc:	461a      	mov	r2, r3
 8013abe:	4b09      	ldr	r3, [pc, #36]	; (8013ae4 <__assert_func+0x2c>)
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	4605      	mov	r5, r0
 8013ac4:	68d8      	ldr	r0, [r3, #12]
 8013ac6:	b14c      	cbz	r4, 8013adc <__assert_func+0x24>
 8013ac8:	4b07      	ldr	r3, [pc, #28]	; (8013ae8 <__assert_func+0x30>)
 8013aca:	9100      	str	r1, [sp, #0]
 8013acc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013ad0:	4906      	ldr	r1, [pc, #24]	; (8013aec <__assert_func+0x34>)
 8013ad2:	462b      	mov	r3, r5
 8013ad4:	f000 ff5a 	bl	801498c <fiprintf>
 8013ad8:	f7fd fd5c 	bl	8011594 <abort>
 8013adc:	4b04      	ldr	r3, [pc, #16]	; (8013af0 <__assert_func+0x38>)
 8013ade:	461c      	mov	r4, r3
 8013ae0:	e7f3      	b.n	8013aca <__assert_func+0x12>
 8013ae2:	bf00      	nop
 8013ae4:	2000004c 	.word	0x2000004c
 8013ae8:	08018638 	.word	0x08018638
 8013aec:	08018645 	.word	0x08018645
 8013af0:	08018673 	.word	0x08018673

08013af4 <_close_r>:
 8013af4:	b538      	push	{r3, r4, r5, lr}
 8013af6:	4d06      	ldr	r5, [pc, #24]	; (8013b10 <_close_r+0x1c>)
 8013af8:	2300      	movs	r3, #0
 8013afa:	4604      	mov	r4, r0
 8013afc:	4608      	mov	r0, r1
 8013afe:	602b      	str	r3, [r5, #0]
 8013b00:	f7ef f9b9 	bl	8002e76 <_close>
 8013b04:	1c43      	adds	r3, r0, #1
 8013b06:	d102      	bne.n	8013b0e <_close_r+0x1a>
 8013b08:	682b      	ldr	r3, [r5, #0]
 8013b0a:	b103      	cbz	r3, 8013b0e <_close_r+0x1a>
 8013b0c:	6023      	str	r3, [r4, #0]
 8013b0e:	bd38      	pop	{r3, r4, r5, pc}
 8013b10:	20006118 	.word	0x20006118

08013b14 <quorem>:
 8013b14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b18:	6903      	ldr	r3, [r0, #16]
 8013b1a:	690c      	ldr	r4, [r1, #16]
 8013b1c:	42a3      	cmp	r3, r4
 8013b1e:	4607      	mov	r7, r0
 8013b20:	f2c0 8081 	blt.w	8013c26 <quorem+0x112>
 8013b24:	3c01      	subs	r4, #1
 8013b26:	f101 0814 	add.w	r8, r1, #20
 8013b2a:	f100 0514 	add.w	r5, r0, #20
 8013b2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013b32:	9301      	str	r3, [sp, #4]
 8013b34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013b38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013b3c:	3301      	adds	r3, #1
 8013b3e:	429a      	cmp	r2, r3
 8013b40:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013b44:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013b48:	fbb2 f6f3 	udiv	r6, r2, r3
 8013b4c:	d331      	bcc.n	8013bb2 <quorem+0x9e>
 8013b4e:	f04f 0e00 	mov.w	lr, #0
 8013b52:	4640      	mov	r0, r8
 8013b54:	46ac      	mov	ip, r5
 8013b56:	46f2      	mov	sl, lr
 8013b58:	f850 2b04 	ldr.w	r2, [r0], #4
 8013b5c:	b293      	uxth	r3, r2
 8013b5e:	fb06 e303 	mla	r3, r6, r3, lr
 8013b62:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8013b66:	b29b      	uxth	r3, r3
 8013b68:	ebaa 0303 	sub.w	r3, sl, r3
 8013b6c:	0c12      	lsrs	r2, r2, #16
 8013b6e:	f8dc a000 	ldr.w	sl, [ip]
 8013b72:	fb06 e202 	mla	r2, r6, r2, lr
 8013b76:	fa13 f38a 	uxtah	r3, r3, sl
 8013b7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013b7e:	fa1f fa82 	uxth.w	sl, r2
 8013b82:	f8dc 2000 	ldr.w	r2, [ip]
 8013b86:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8013b8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013b8e:	b29b      	uxth	r3, r3
 8013b90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013b94:	4581      	cmp	r9, r0
 8013b96:	f84c 3b04 	str.w	r3, [ip], #4
 8013b9a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013b9e:	d2db      	bcs.n	8013b58 <quorem+0x44>
 8013ba0:	f855 300b 	ldr.w	r3, [r5, fp]
 8013ba4:	b92b      	cbnz	r3, 8013bb2 <quorem+0x9e>
 8013ba6:	9b01      	ldr	r3, [sp, #4]
 8013ba8:	3b04      	subs	r3, #4
 8013baa:	429d      	cmp	r5, r3
 8013bac:	461a      	mov	r2, r3
 8013bae:	d32e      	bcc.n	8013c0e <quorem+0xfa>
 8013bb0:	613c      	str	r4, [r7, #16]
 8013bb2:	4638      	mov	r0, r7
 8013bb4:	f001 fdcc 	bl	8015750 <__mcmp>
 8013bb8:	2800      	cmp	r0, #0
 8013bba:	db24      	blt.n	8013c06 <quorem+0xf2>
 8013bbc:	3601      	adds	r6, #1
 8013bbe:	4628      	mov	r0, r5
 8013bc0:	f04f 0c00 	mov.w	ip, #0
 8013bc4:	f858 2b04 	ldr.w	r2, [r8], #4
 8013bc8:	f8d0 e000 	ldr.w	lr, [r0]
 8013bcc:	b293      	uxth	r3, r2
 8013bce:	ebac 0303 	sub.w	r3, ip, r3
 8013bd2:	0c12      	lsrs	r2, r2, #16
 8013bd4:	fa13 f38e 	uxtah	r3, r3, lr
 8013bd8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013bdc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013be0:	b29b      	uxth	r3, r3
 8013be2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013be6:	45c1      	cmp	r9, r8
 8013be8:	f840 3b04 	str.w	r3, [r0], #4
 8013bec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013bf0:	d2e8      	bcs.n	8013bc4 <quorem+0xb0>
 8013bf2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013bf6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013bfa:	b922      	cbnz	r2, 8013c06 <quorem+0xf2>
 8013bfc:	3b04      	subs	r3, #4
 8013bfe:	429d      	cmp	r5, r3
 8013c00:	461a      	mov	r2, r3
 8013c02:	d30a      	bcc.n	8013c1a <quorem+0x106>
 8013c04:	613c      	str	r4, [r7, #16]
 8013c06:	4630      	mov	r0, r6
 8013c08:	b003      	add	sp, #12
 8013c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c0e:	6812      	ldr	r2, [r2, #0]
 8013c10:	3b04      	subs	r3, #4
 8013c12:	2a00      	cmp	r2, #0
 8013c14:	d1cc      	bne.n	8013bb0 <quorem+0x9c>
 8013c16:	3c01      	subs	r4, #1
 8013c18:	e7c7      	b.n	8013baa <quorem+0x96>
 8013c1a:	6812      	ldr	r2, [r2, #0]
 8013c1c:	3b04      	subs	r3, #4
 8013c1e:	2a00      	cmp	r2, #0
 8013c20:	d1f0      	bne.n	8013c04 <quorem+0xf0>
 8013c22:	3c01      	subs	r4, #1
 8013c24:	e7eb      	b.n	8013bfe <quorem+0xea>
 8013c26:	2000      	movs	r0, #0
 8013c28:	e7ee      	b.n	8013c08 <quorem+0xf4>
 8013c2a:	0000      	movs	r0, r0
 8013c2c:	0000      	movs	r0, r0
	...

08013c30 <_dtoa_r>:
 8013c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c34:	ed2d 8b02 	vpush	{d8}
 8013c38:	ec57 6b10 	vmov	r6, r7, d0
 8013c3c:	b095      	sub	sp, #84	; 0x54
 8013c3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013c40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013c44:	9105      	str	r1, [sp, #20]
 8013c46:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8013c4a:	4604      	mov	r4, r0
 8013c4c:	9209      	str	r2, [sp, #36]	; 0x24
 8013c4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013c50:	b975      	cbnz	r5, 8013c70 <_dtoa_r+0x40>
 8013c52:	2010      	movs	r0, #16
 8013c54:	f7fd fdca 	bl	80117ec <malloc>
 8013c58:	4602      	mov	r2, r0
 8013c5a:	6260      	str	r0, [r4, #36]	; 0x24
 8013c5c:	b920      	cbnz	r0, 8013c68 <_dtoa_r+0x38>
 8013c5e:	4bb2      	ldr	r3, [pc, #712]	; (8013f28 <_dtoa_r+0x2f8>)
 8013c60:	21ea      	movs	r1, #234	; 0xea
 8013c62:	48b2      	ldr	r0, [pc, #712]	; (8013f2c <_dtoa_r+0x2fc>)
 8013c64:	f7ff ff28 	bl	8013ab8 <__assert_func>
 8013c68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013c6c:	6005      	str	r5, [r0, #0]
 8013c6e:	60c5      	str	r5, [r0, #12]
 8013c70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013c72:	6819      	ldr	r1, [r3, #0]
 8013c74:	b151      	cbz	r1, 8013c8c <_dtoa_r+0x5c>
 8013c76:	685a      	ldr	r2, [r3, #4]
 8013c78:	604a      	str	r2, [r1, #4]
 8013c7a:	2301      	movs	r3, #1
 8013c7c:	4093      	lsls	r3, r2
 8013c7e:	608b      	str	r3, [r1, #8]
 8013c80:	4620      	mov	r0, r4
 8013c82:	f001 fadd 	bl	8015240 <_Bfree>
 8013c86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013c88:	2200      	movs	r2, #0
 8013c8a:	601a      	str	r2, [r3, #0]
 8013c8c:	1e3b      	subs	r3, r7, #0
 8013c8e:	bfb9      	ittee	lt
 8013c90:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013c94:	9303      	strlt	r3, [sp, #12]
 8013c96:	2300      	movge	r3, #0
 8013c98:	f8c8 3000 	strge.w	r3, [r8]
 8013c9c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8013ca0:	4ba3      	ldr	r3, [pc, #652]	; (8013f30 <_dtoa_r+0x300>)
 8013ca2:	bfbc      	itt	lt
 8013ca4:	2201      	movlt	r2, #1
 8013ca6:	f8c8 2000 	strlt.w	r2, [r8]
 8013caa:	ea33 0309 	bics.w	r3, r3, r9
 8013cae:	d11b      	bne.n	8013ce8 <_dtoa_r+0xb8>
 8013cb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013cb2:	f242 730f 	movw	r3, #9999	; 0x270f
 8013cb6:	6013      	str	r3, [r2, #0]
 8013cb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013cbc:	4333      	orrs	r3, r6
 8013cbe:	f000 857a 	beq.w	80147b6 <_dtoa_r+0xb86>
 8013cc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013cc4:	b963      	cbnz	r3, 8013ce0 <_dtoa_r+0xb0>
 8013cc6:	4b9b      	ldr	r3, [pc, #620]	; (8013f34 <_dtoa_r+0x304>)
 8013cc8:	e024      	b.n	8013d14 <_dtoa_r+0xe4>
 8013cca:	4b9b      	ldr	r3, [pc, #620]	; (8013f38 <_dtoa_r+0x308>)
 8013ccc:	9300      	str	r3, [sp, #0]
 8013cce:	3308      	adds	r3, #8
 8013cd0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013cd2:	6013      	str	r3, [r2, #0]
 8013cd4:	9800      	ldr	r0, [sp, #0]
 8013cd6:	b015      	add	sp, #84	; 0x54
 8013cd8:	ecbd 8b02 	vpop	{d8}
 8013cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ce0:	4b94      	ldr	r3, [pc, #592]	; (8013f34 <_dtoa_r+0x304>)
 8013ce2:	9300      	str	r3, [sp, #0]
 8013ce4:	3303      	adds	r3, #3
 8013ce6:	e7f3      	b.n	8013cd0 <_dtoa_r+0xa0>
 8013ce8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013cec:	2200      	movs	r2, #0
 8013cee:	ec51 0b17 	vmov	r0, r1, d7
 8013cf2:	2300      	movs	r3, #0
 8013cf4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8013cf8:	f7ec fef6 	bl	8000ae8 <__aeabi_dcmpeq>
 8013cfc:	4680      	mov	r8, r0
 8013cfe:	b158      	cbz	r0, 8013d18 <_dtoa_r+0xe8>
 8013d00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013d02:	2301      	movs	r3, #1
 8013d04:	6013      	str	r3, [r2, #0]
 8013d06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	f000 8551 	beq.w	80147b0 <_dtoa_r+0xb80>
 8013d0e:	488b      	ldr	r0, [pc, #556]	; (8013f3c <_dtoa_r+0x30c>)
 8013d10:	6018      	str	r0, [r3, #0]
 8013d12:	1e43      	subs	r3, r0, #1
 8013d14:	9300      	str	r3, [sp, #0]
 8013d16:	e7dd      	b.n	8013cd4 <_dtoa_r+0xa4>
 8013d18:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8013d1c:	aa12      	add	r2, sp, #72	; 0x48
 8013d1e:	a913      	add	r1, sp, #76	; 0x4c
 8013d20:	4620      	mov	r0, r4
 8013d22:	f001 fe35 	bl	8015990 <__d2b>
 8013d26:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013d2a:	4683      	mov	fp, r0
 8013d2c:	2d00      	cmp	r5, #0
 8013d2e:	d07c      	beq.n	8013e2a <_dtoa_r+0x1fa>
 8013d30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d32:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8013d36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013d3a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8013d3e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8013d42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8013d46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013d4a:	4b7d      	ldr	r3, [pc, #500]	; (8013f40 <_dtoa_r+0x310>)
 8013d4c:	2200      	movs	r2, #0
 8013d4e:	4630      	mov	r0, r6
 8013d50:	4639      	mov	r1, r7
 8013d52:	f7ec faa9 	bl	80002a8 <__aeabi_dsub>
 8013d56:	a36e      	add	r3, pc, #440	; (adr r3, 8013f10 <_dtoa_r+0x2e0>)
 8013d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d5c:	f7ec fc5c 	bl	8000618 <__aeabi_dmul>
 8013d60:	a36d      	add	r3, pc, #436	; (adr r3, 8013f18 <_dtoa_r+0x2e8>)
 8013d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d66:	f7ec faa1 	bl	80002ac <__adddf3>
 8013d6a:	4606      	mov	r6, r0
 8013d6c:	4628      	mov	r0, r5
 8013d6e:	460f      	mov	r7, r1
 8013d70:	f7ec fbe8 	bl	8000544 <__aeabi_i2d>
 8013d74:	a36a      	add	r3, pc, #424	; (adr r3, 8013f20 <_dtoa_r+0x2f0>)
 8013d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d7a:	f7ec fc4d 	bl	8000618 <__aeabi_dmul>
 8013d7e:	4602      	mov	r2, r0
 8013d80:	460b      	mov	r3, r1
 8013d82:	4630      	mov	r0, r6
 8013d84:	4639      	mov	r1, r7
 8013d86:	f7ec fa91 	bl	80002ac <__adddf3>
 8013d8a:	4606      	mov	r6, r0
 8013d8c:	460f      	mov	r7, r1
 8013d8e:	f7ec fef3 	bl	8000b78 <__aeabi_d2iz>
 8013d92:	2200      	movs	r2, #0
 8013d94:	4682      	mov	sl, r0
 8013d96:	2300      	movs	r3, #0
 8013d98:	4630      	mov	r0, r6
 8013d9a:	4639      	mov	r1, r7
 8013d9c:	f7ec feae 	bl	8000afc <__aeabi_dcmplt>
 8013da0:	b148      	cbz	r0, 8013db6 <_dtoa_r+0x186>
 8013da2:	4650      	mov	r0, sl
 8013da4:	f7ec fbce 	bl	8000544 <__aeabi_i2d>
 8013da8:	4632      	mov	r2, r6
 8013daa:	463b      	mov	r3, r7
 8013dac:	f7ec fe9c 	bl	8000ae8 <__aeabi_dcmpeq>
 8013db0:	b908      	cbnz	r0, 8013db6 <_dtoa_r+0x186>
 8013db2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013db6:	f1ba 0f16 	cmp.w	sl, #22
 8013dba:	d854      	bhi.n	8013e66 <_dtoa_r+0x236>
 8013dbc:	4b61      	ldr	r3, [pc, #388]	; (8013f44 <_dtoa_r+0x314>)
 8013dbe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dc6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013dca:	f7ec fe97 	bl	8000afc <__aeabi_dcmplt>
 8013dce:	2800      	cmp	r0, #0
 8013dd0:	d04b      	beq.n	8013e6a <_dtoa_r+0x23a>
 8013dd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013dd6:	2300      	movs	r3, #0
 8013dd8:	930e      	str	r3, [sp, #56]	; 0x38
 8013dda:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013ddc:	1b5d      	subs	r5, r3, r5
 8013dde:	1e6b      	subs	r3, r5, #1
 8013de0:	9304      	str	r3, [sp, #16]
 8013de2:	bf43      	ittte	mi
 8013de4:	2300      	movmi	r3, #0
 8013de6:	f1c5 0801 	rsbmi	r8, r5, #1
 8013dea:	9304      	strmi	r3, [sp, #16]
 8013dec:	f04f 0800 	movpl.w	r8, #0
 8013df0:	f1ba 0f00 	cmp.w	sl, #0
 8013df4:	db3b      	blt.n	8013e6e <_dtoa_r+0x23e>
 8013df6:	9b04      	ldr	r3, [sp, #16]
 8013df8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8013dfc:	4453      	add	r3, sl
 8013dfe:	9304      	str	r3, [sp, #16]
 8013e00:	2300      	movs	r3, #0
 8013e02:	9306      	str	r3, [sp, #24]
 8013e04:	9b05      	ldr	r3, [sp, #20]
 8013e06:	2b09      	cmp	r3, #9
 8013e08:	d869      	bhi.n	8013ede <_dtoa_r+0x2ae>
 8013e0a:	2b05      	cmp	r3, #5
 8013e0c:	bfc4      	itt	gt
 8013e0e:	3b04      	subgt	r3, #4
 8013e10:	9305      	strgt	r3, [sp, #20]
 8013e12:	9b05      	ldr	r3, [sp, #20]
 8013e14:	f1a3 0302 	sub.w	r3, r3, #2
 8013e18:	bfcc      	ite	gt
 8013e1a:	2500      	movgt	r5, #0
 8013e1c:	2501      	movle	r5, #1
 8013e1e:	2b03      	cmp	r3, #3
 8013e20:	d869      	bhi.n	8013ef6 <_dtoa_r+0x2c6>
 8013e22:	e8df f003 	tbb	[pc, r3]
 8013e26:	4e2c      	.short	0x4e2c
 8013e28:	5a4c      	.short	0x5a4c
 8013e2a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8013e2e:	441d      	add	r5, r3
 8013e30:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8013e34:	2b20      	cmp	r3, #32
 8013e36:	bfc1      	itttt	gt
 8013e38:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013e3c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8013e40:	fa09 f303 	lslgt.w	r3, r9, r3
 8013e44:	fa26 f000 	lsrgt.w	r0, r6, r0
 8013e48:	bfda      	itte	le
 8013e4a:	f1c3 0320 	rsble	r3, r3, #32
 8013e4e:	fa06 f003 	lslle.w	r0, r6, r3
 8013e52:	4318      	orrgt	r0, r3
 8013e54:	f7ec fb66 	bl	8000524 <__aeabi_ui2d>
 8013e58:	2301      	movs	r3, #1
 8013e5a:	4606      	mov	r6, r0
 8013e5c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8013e60:	3d01      	subs	r5, #1
 8013e62:	9310      	str	r3, [sp, #64]	; 0x40
 8013e64:	e771      	b.n	8013d4a <_dtoa_r+0x11a>
 8013e66:	2301      	movs	r3, #1
 8013e68:	e7b6      	b.n	8013dd8 <_dtoa_r+0x1a8>
 8013e6a:	900e      	str	r0, [sp, #56]	; 0x38
 8013e6c:	e7b5      	b.n	8013dda <_dtoa_r+0x1aa>
 8013e6e:	f1ca 0300 	rsb	r3, sl, #0
 8013e72:	9306      	str	r3, [sp, #24]
 8013e74:	2300      	movs	r3, #0
 8013e76:	eba8 080a 	sub.w	r8, r8, sl
 8013e7a:	930d      	str	r3, [sp, #52]	; 0x34
 8013e7c:	e7c2      	b.n	8013e04 <_dtoa_r+0x1d4>
 8013e7e:	2300      	movs	r3, #0
 8013e80:	9308      	str	r3, [sp, #32]
 8013e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	dc39      	bgt.n	8013efc <_dtoa_r+0x2cc>
 8013e88:	f04f 0901 	mov.w	r9, #1
 8013e8c:	f8cd 9004 	str.w	r9, [sp, #4]
 8013e90:	464b      	mov	r3, r9
 8013e92:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8013e96:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8013e98:	2200      	movs	r2, #0
 8013e9a:	6042      	str	r2, [r0, #4]
 8013e9c:	2204      	movs	r2, #4
 8013e9e:	f102 0614 	add.w	r6, r2, #20
 8013ea2:	429e      	cmp	r6, r3
 8013ea4:	6841      	ldr	r1, [r0, #4]
 8013ea6:	d92f      	bls.n	8013f08 <_dtoa_r+0x2d8>
 8013ea8:	4620      	mov	r0, r4
 8013eaa:	f001 f989 	bl	80151c0 <_Balloc>
 8013eae:	9000      	str	r0, [sp, #0]
 8013eb0:	2800      	cmp	r0, #0
 8013eb2:	d14b      	bne.n	8013f4c <_dtoa_r+0x31c>
 8013eb4:	4b24      	ldr	r3, [pc, #144]	; (8013f48 <_dtoa_r+0x318>)
 8013eb6:	4602      	mov	r2, r0
 8013eb8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013ebc:	e6d1      	b.n	8013c62 <_dtoa_r+0x32>
 8013ebe:	2301      	movs	r3, #1
 8013ec0:	e7de      	b.n	8013e80 <_dtoa_r+0x250>
 8013ec2:	2300      	movs	r3, #0
 8013ec4:	9308      	str	r3, [sp, #32]
 8013ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ec8:	eb0a 0903 	add.w	r9, sl, r3
 8013ecc:	f109 0301 	add.w	r3, r9, #1
 8013ed0:	2b01      	cmp	r3, #1
 8013ed2:	9301      	str	r3, [sp, #4]
 8013ed4:	bfb8      	it	lt
 8013ed6:	2301      	movlt	r3, #1
 8013ed8:	e7dd      	b.n	8013e96 <_dtoa_r+0x266>
 8013eda:	2301      	movs	r3, #1
 8013edc:	e7f2      	b.n	8013ec4 <_dtoa_r+0x294>
 8013ede:	2501      	movs	r5, #1
 8013ee0:	2300      	movs	r3, #0
 8013ee2:	9305      	str	r3, [sp, #20]
 8013ee4:	9508      	str	r5, [sp, #32]
 8013ee6:	f04f 39ff 	mov.w	r9, #4294967295
 8013eea:	2200      	movs	r2, #0
 8013eec:	f8cd 9004 	str.w	r9, [sp, #4]
 8013ef0:	2312      	movs	r3, #18
 8013ef2:	9209      	str	r2, [sp, #36]	; 0x24
 8013ef4:	e7cf      	b.n	8013e96 <_dtoa_r+0x266>
 8013ef6:	2301      	movs	r3, #1
 8013ef8:	9308      	str	r3, [sp, #32]
 8013efa:	e7f4      	b.n	8013ee6 <_dtoa_r+0x2b6>
 8013efc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8013f00:	f8cd 9004 	str.w	r9, [sp, #4]
 8013f04:	464b      	mov	r3, r9
 8013f06:	e7c6      	b.n	8013e96 <_dtoa_r+0x266>
 8013f08:	3101      	adds	r1, #1
 8013f0a:	6041      	str	r1, [r0, #4]
 8013f0c:	0052      	lsls	r2, r2, #1
 8013f0e:	e7c6      	b.n	8013e9e <_dtoa_r+0x26e>
 8013f10:	636f4361 	.word	0x636f4361
 8013f14:	3fd287a7 	.word	0x3fd287a7
 8013f18:	8b60c8b3 	.word	0x8b60c8b3
 8013f1c:	3fc68a28 	.word	0x3fc68a28
 8013f20:	509f79fb 	.word	0x509f79fb
 8013f24:	3fd34413 	.word	0x3fd34413
 8013f28:	08018782 	.word	0x08018782
 8013f2c:	08018799 	.word	0x08018799
 8013f30:	7ff00000 	.word	0x7ff00000
 8013f34:	0801877e 	.word	0x0801877e
 8013f38:	08018775 	.word	0x08018775
 8013f3c:	080189fa 	.word	0x080189fa
 8013f40:	3ff80000 	.word	0x3ff80000
 8013f44:	08018910 	.word	0x08018910
 8013f48:	080187f8 	.word	0x080187f8
 8013f4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013f4e:	9a00      	ldr	r2, [sp, #0]
 8013f50:	601a      	str	r2, [r3, #0]
 8013f52:	9b01      	ldr	r3, [sp, #4]
 8013f54:	2b0e      	cmp	r3, #14
 8013f56:	f200 80ad 	bhi.w	80140b4 <_dtoa_r+0x484>
 8013f5a:	2d00      	cmp	r5, #0
 8013f5c:	f000 80aa 	beq.w	80140b4 <_dtoa_r+0x484>
 8013f60:	f1ba 0f00 	cmp.w	sl, #0
 8013f64:	dd36      	ble.n	8013fd4 <_dtoa_r+0x3a4>
 8013f66:	4ac3      	ldr	r2, [pc, #780]	; (8014274 <_dtoa_r+0x644>)
 8013f68:	f00a 030f 	and.w	r3, sl, #15
 8013f6c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013f70:	ed93 7b00 	vldr	d7, [r3]
 8013f74:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8013f78:	ea4f 172a 	mov.w	r7, sl, asr #4
 8013f7c:	eeb0 8a47 	vmov.f32	s16, s14
 8013f80:	eef0 8a67 	vmov.f32	s17, s15
 8013f84:	d016      	beq.n	8013fb4 <_dtoa_r+0x384>
 8013f86:	4bbc      	ldr	r3, [pc, #752]	; (8014278 <_dtoa_r+0x648>)
 8013f88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013f8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013f90:	f7ec fc6c 	bl	800086c <__aeabi_ddiv>
 8013f94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013f98:	f007 070f 	and.w	r7, r7, #15
 8013f9c:	2503      	movs	r5, #3
 8013f9e:	4eb6      	ldr	r6, [pc, #728]	; (8014278 <_dtoa_r+0x648>)
 8013fa0:	b957      	cbnz	r7, 8013fb8 <_dtoa_r+0x388>
 8013fa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013fa6:	ec53 2b18 	vmov	r2, r3, d8
 8013faa:	f7ec fc5f 	bl	800086c <__aeabi_ddiv>
 8013fae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013fb2:	e029      	b.n	8014008 <_dtoa_r+0x3d8>
 8013fb4:	2502      	movs	r5, #2
 8013fb6:	e7f2      	b.n	8013f9e <_dtoa_r+0x36e>
 8013fb8:	07f9      	lsls	r1, r7, #31
 8013fba:	d508      	bpl.n	8013fce <_dtoa_r+0x39e>
 8013fbc:	ec51 0b18 	vmov	r0, r1, d8
 8013fc0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013fc4:	f7ec fb28 	bl	8000618 <__aeabi_dmul>
 8013fc8:	ec41 0b18 	vmov	d8, r0, r1
 8013fcc:	3501      	adds	r5, #1
 8013fce:	107f      	asrs	r7, r7, #1
 8013fd0:	3608      	adds	r6, #8
 8013fd2:	e7e5      	b.n	8013fa0 <_dtoa_r+0x370>
 8013fd4:	f000 80a6 	beq.w	8014124 <_dtoa_r+0x4f4>
 8013fd8:	f1ca 0600 	rsb	r6, sl, #0
 8013fdc:	4ba5      	ldr	r3, [pc, #660]	; (8014274 <_dtoa_r+0x644>)
 8013fde:	4fa6      	ldr	r7, [pc, #664]	; (8014278 <_dtoa_r+0x648>)
 8013fe0:	f006 020f 	and.w	r2, r6, #15
 8013fe4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013ff0:	f7ec fb12 	bl	8000618 <__aeabi_dmul>
 8013ff4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013ff8:	1136      	asrs	r6, r6, #4
 8013ffa:	2300      	movs	r3, #0
 8013ffc:	2502      	movs	r5, #2
 8013ffe:	2e00      	cmp	r6, #0
 8014000:	f040 8085 	bne.w	801410e <_dtoa_r+0x4de>
 8014004:	2b00      	cmp	r3, #0
 8014006:	d1d2      	bne.n	8013fae <_dtoa_r+0x37e>
 8014008:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801400a:	2b00      	cmp	r3, #0
 801400c:	f000 808c 	beq.w	8014128 <_dtoa_r+0x4f8>
 8014010:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014014:	4b99      	ldr	r3, [pc, #612]	; (801427c <_dtoa_r+0x64c>)
 8014016:	2200      	movs	r2, #0
 8014018:	4630      	mov	r0, r6
 801401a:	4639      	mov	r1, r7
 801401c:	f7ec fd6e 	bl	8000afc <__aeabi_dcmplt>
 8014020:	2800      	cmp	r0, #0
 8014022:	f000 8081 	beq.w	8014128 <_dtoa_r+0x4f8>
 8014026:	9b01      	ldr	r3, [sp, #4]
 8014028:	2b00      	cmp	r3, #0
 801402a:	d07d      	beq.n	8014128 <_dtoa_r+0x4f8>
 801402c:	f1b9 0f00 	cmp.w	r9, #0
 8014030:	dd3c      	ble.n	80140ac <_dtoa_r+0x47c>
 8014032:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014036:	9307      	str	r3, [sp, #28]
 8014038:	2200      	movs	r2, #0
 801403a:	4b91      	ldr	r3, [pc, #580]	; (8014280 <_dtoa_r+0x650>)
 801403c:	4630      	mov	r0, r6
 801403e:	4639      	mov	r1, r7
 8014040:	f7ec faea 	bl	8000618 <__aeabi_dmul>
 8014044:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014048:	3501      	adds	r5, #1
 801404a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801404e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014052:	4628      	mov	r0, r5
 8014054:	f7ec fa76 	bl	8000544 <__aeabi_i2d>
 8014058:	4632      	mov	r2, r6
 801405a:	463b      	mov	r3, r7
 801405c:	f7ec fadc 	bl	8000618 <__aeabi_dmul>
 8014060:	4b88      	ldr	r3, [pc, #544]	; (8014284 <_dtoa_r+0x654>)
 8014062:	2200      	movs	r2, #0
 8014064:	f7ec f922 	bl	80002ac <__adddf3>
 8014068:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801406c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014070:	9303      	str	r3, [sp, #12]
 8014072:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014074:	2b00      	cmp	r3, #0
 8014076:	d15c      	bne.n	8014132 <_dtoa_r+0x502>
 8014078:	4b83      	ldr	r3, [pc, #524]	; (8014288 <_dtoa_r+0x658>)
 801407a:	2200      	movs	r2, #0
 801407c:	4630      	mov	r0, r6
 801407e:	4639      	mov	r1, r7
 8014080:	f7ec f912 	bl	80002a8 <__aeabi_dsub>
 8014084:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014088:	4606      	mov	r6, r0
 801408a:	460f      	mov	r7, r1
 801408c:	f7ec fd54 	bl	8000b38 <__aeabi_dcmpgt>
 8014090:	2800      	cmp	r0, #0
 8014092:	f040 8296 	bne.w	80145c2 <_dtoa_r+0x992>
 8014096:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801409a:	4630      	mov	r0, r6
 801409c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80140a0:	4639      	mov	r1, r7
 80140a2:	f7ec fd2b 	bl	8000afc <__aeabi_dcmplt>
 80140a6:	2800      	cmp	r0, #0
 80140a8:	f040 8288 	bne.w	80145bc <_dtoa_r+0x98c>
 80140ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80140b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80140b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	f2c0 8158 	blt.w	801436c <_dtoa_r+0x73c>
 80140bc:	f1ba 0f0e 	cmp.w	sl, #14
 80140c0:	f300 8154 	bgt.w	801436c <_dtoa_r+0x73c>
 80140c4:	4b6b      	ldr	r3, [pc, #428]	; (8014274 <_dtoa_r+0x644>)
 80140c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80140ca:	e9d3 8900 	ldrd	r8, r9, [r3]
 80140ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	f280 80e3 	bge.w	801429c <_dtoa_r+0x66c>
 80140d6:	9b01      	ldr	r3, [sp, #4]
 80140d8:	2b00      	cmp	r3, #0
 80140da:	f300 80df 	bgt.w	801429c <_dtoa_r+0x66c>
 80140de:	f040 826d 	bne.w	80145bc <_dtoa_r+0x98c>
 80140e2:	4b69      	ldr	r3, [pc, #420]	; (8014288 <_dtoa_r+0x658>)
 80140e4:	2200      	movs	r2, #0
 80140e6:	4640      	mov	r0, r8
 80140e8:	4649      	mov	r1, r9
 80140ea:	f7ec fa95 	bl	8000618 <__aeabi_dmul>
 80140ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80140f2:	f7ec fd17 	bl	8000b24 <__aeabi_dcmpge>
 80140f6:	9e01      	ldr	r6, [sp, #4]
 80140f8:	4637      	mov	r7, r6
 80140fa:	2800      	cmp	r0, #0
 80140fc:	f040 8243 	bne.w	8014586 <_dtoa_r+0x956>
 8014100:	9d00      	ldr	r5, [sp, #0]
 8014102:	2331      	movs	r3, #49	; 0x31
 8014104:	f805 3b01 	strb.w	r3, [r5], #1
 8014108:	f10a 0a01 	add.w	sl, sl, #1
 801410c:	e23f      	b.n	801458e <_dtoa_r+0x95e>
 801410e:	07f2      	lsls	r2, r6, #31
 8014110:	d505      	bpl.n	801411e <_dtoa_r+0x4ee>
 8014112:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014116:	f7ec fa7f 	bl	8000618 <__aeabi_dmul>
 801411a:	3501      	adds	r5, #1
 801411c:	2301      	movs	r3, #1
 801411e:	1076      	asrs	r6, r6, #1
 8014120:	3708      	adds	r7, #8
 8014122:	e76c      	b.n	8013ffe <_dtoa_r+0x3ce>
 8014124:	2502      	movs	r5, #2
 8014126:	e76f      	b.n	8014008 <_dtoa_r+0x3d8>
 8014128:	9b01      	ldr	r3, [sp, #4]
 801412a:	f8cd a01c 	str.w	sl, [sp, #28]
 801412e:	930c      	str	r3, [sp, #48]	; 0x30
 8014130:	e78d      	b.n	801404e <_dtoa_r+0x41e>
 8014132:	9900      	ldr	r1, [sp, #0]
 8014134:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014136:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014138:	4b4e      	ldr	r3, [pc, #312]	; (8014274 <_dtoa_r+0x644>)
 801413a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801413e:	4401      	add	r1, r0
 8014140:	9102      	str	r1, [sp, #8]
 8014142:	9908      	ldr	r1, [sp, #32]
 8014144:	eeb0 8a47 	vmov.f32	s16, s14
 8014148:	eef0 8a67 	vmov.f32	s17, s15
 801414c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014150:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014154:	2900      	cmp	r1, #0
 8014156:	d045      	beq.n	80141e4 <_dtoa_r+0x5b4>
 8014158:	494c      	ldr	r1, [pc, #304]	; (801428c <_dtoa_r+0x65c>)
 801415a:	2000      	movs	r0, #0
 801415c:	f7ec fb86 	bl	800086c <__aeabi_ddiv>
 8014160:	ec53 2b18 	vmov	r2, r3, d8
 8014164:	f7ec f8a0 	bl	80002a8 <__aeabi_dsub>
 8014168:	9d00      	ldr	r5, [sp, #0]
 801416a:	ec41 0b18 	vmov	d8, r0, r1
 801416e:	4639      	mov	r1, r7
 8014170:	4630      	mov	r0, r6
 8014172:	f7ec fd01 	bl	8000b78 <__aeabi_d2iz>
 8014176:	900c      	str	r0, [sp, #48]	; 0x30
 8014178:	f7ec f9e4 	bl	8000544 <__aeabi_i2d>
 801417c:	4602      	mov	r2, r0
 801417e:	460b      	mov	r3, r1
 8014180:	4630      	mov	r0, r6
 8014182:	4639      	mov	r1, r7
 8014184:	f7ec f890 	bl	80002a8 <__aeabi_dsub>
 8014188:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801418a:	3330      	adds	r3, #48	; 0x30
 801418c:	f805 3b01 	strb.w	r3, [r5], #1
 8014190:	ec53 2b18 	vmov	r2, r3, d8
 8014194:	4606      	mov	r6, r0
 8014196:	460f      	mov	r7, r1
 8014198:	f7ec fcb0 	bl	8000afc <__aeabi_dcmplt>
 801419c:	2800      	cmp	r0, #0
 801419e:	d165      	bne.n	801426c <_dtoa_r+0x63c>
 80141a0:	4632      	mov	r2, r6
 80141a2:	463b      	mov	r3, r7
 80141a4:	4935      	ldr	r1, [pc, #212]	; (801427c <_dtoa_r+0x64c>)
 80141a6:	2000      	movs	r0, #0
 80141a8:	f7ec f87e 	bl	80002a8 <__aeabi_dsub>
 80141ac:	ec53 2b18 	vmov	r2, r3, d8
 80141b0:	f7ec fca4 	bl	8000afc <__aeabi_dcmplt>
 80141b4:	2800      	cmp	r0, #0
 80141b6:	f040 80b9 	bne.w	801432c <_dtoa_r+0x6fc>
 80141ba:	9b02      	ldr	r3, [sp, #8]
 80141bc:	429d      	cmp	r5, r3
 80141be:	f43f af75 	beq.w	80140ac <_dtoa_r+0x47c>
 80141c2:	4b2f      	ldr	r3, [pc, #188]	; (8014280 <_dtoa_r+0x650>)
 80141c4:	ec51 0b18 	vmov	r0, r1, d8
 80141c8:	2200      	movs	r2, #0
 80141ca:	f7ec fa25 	bl	8000618 <__aeabi_dmul>
 80141ce:	4b2c      	ldr	r3, [pc, #176]	; (8014280 <_dtoa_r+0x650>)
 80141d0:	ec41 0b18 	vmov	d8, r0, r1
 80141d4:	2200      	movs	r2, #0
 80141d6:	4630      	mov	r0, r6
 80141d8:	4639      	mov	r1, r7
 80141da:	f7ec fa1d 	bl	8000618 <__aeabi_dmul>
 80141de:	4606      	mov	r6, r0
 80141e0:	460f      	mov	r7, r1
 80141e2:	e7c4      	b.n	801416e <_dtoa_r+0x53e>
 80141e4:	ec51 0b17 	vmov	r0, r1, d7
 80141e8:	f7ec fa16 	bl	8000618 <__aeabi_dmul>
 80141ec:	9b02      	ldr	r3, [sp, #8]
 80141ee:	9d00      	ldr	r5, [sp, #0]
 80141f0:	930c      	str	r3, [sp, #48]	; 0x30
 80141f2:	ec41 0b18 	vmov	d8, r0, r1
 80141f6:	4639      	mov	r1, r7
 80141f8:	4630      	mov	r0, r6
 80141fa:	f7ec fcbd 	bl	8000b78 <__aeabi_d2iz>
 80141fe:	9011      	str	r0, [sp, #68]	; 0x44
 8014200:	f7ec f9a0 	bl	8000544 <__aeabi_i2d>
 8014204:	4602      	mov	r2, r0
 8014206:	460b      	mov	r3, r1
 8014208:	4630      	mov	r0, r6
 801420a:	4639      	mov	r1, r7
 801420c:	f7ec f84c 	bl	80002a8 <__aeabi_dsub>
 8014210:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014212:	3330      	adds	r3, #48	; 0x30
 8014214:	f805 3b01 	strb.w	r3, [r5], #1
 8014218:	9b02      	ldr	r3, [sp, #8]
 801421a:	429d      	cmp	r5, r3
 801421c:	4606      	mov	r6, r0
 801421e:	460f      	mov	r7, r1
 8014220:	f04f 0200 	mov.w	r2, #0
 8014224:	d134      	bne.n	8014290 <_dtoa_r+0x660>
 8014226:	4b19      	ldr	r3, [pc, #100]	; (801428c <_dtoa_r+0x65c>)
 8014228:	ec51 0b18 	vmov	r0, r1, d8
 801422c:	f7ec f83e 	bl	80002ac <__adddf3>
 8014230:	4602      	mov	r2, r0
 8014232:	460b      	mov	r3, r1
 8014234:	4630      	mov	r0, r6
 8014236:	4639      	mov	r1, r7
 8014238:	f7ec fc7e 	bl	8000b38 <__aeabi_dcmpgt>
 801423c:	2800      	cmp	r0, #0
 801423e:	d175      	bne.n	801432c <_dtoa_r+0x6fc>
 8014240:	ec53 2b18 	vmov	r2, r3, d8
 8014244:	4911      	ldr	r1, [pc, #68]	; (801428c <_dtoa_r+0x65c>)
 8014246:	2000      	movs	r0, #0
 8014248:	f7ec f82e 	bl	80002a8 <__aeabi_dsub>
 801424c:	4602      	mov	r2, r0
 801424e:	460b      	mov	r3, r1
 8014250:	4630      	mov	r0, r6
 8014252:	4639      	mov	r1, r7
 8014254:	f7ec fc52 	bl	8000afc <__aeabi_dcmplt>
 8014258:	2800      	cmp	r0, #0
 801425a:	f43f af27 	beq.w	80140ac <_dtoa_r+0x47c>
 801425e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014260:	1e6b      	subs	r3, r5, #1
 8014262:	930c      	str	r3, [sp, #48]	; 0x30
 8014264:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014268:	2b30      	cmp	r3, #48	; 0x30
 801426a:	d0f8      	beq.n	801425e <_dtoa_r+0x62e>
 801426c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8014270:	e04a      	b.n	8014308 <_dtoa_r+0x6d8>
 8014272:	bf00      	nop
 8014274:	08018910 	.word	0x08018910
 8014278:	080188e8 	.word	0x080188e8
 801427c:	3ff00000 	.word	0x3ff00000
 8014280:	40240000 	.word	0x40240000
 8014284:	401c0000 	.word	0x401c0000
 8014288:	40140000 	.word	0x40140000
 801428c:	3fe00000 	.word	0x3fe00000
 8014290:	4baf      	ldr	r3, [pc, #700]	; (8014550 <_dtoa_r+0x920>)
 8014292:	f7ec f9c1 	bl	8000618 <__aeabi_dmul>
 8014296:	4606      	mov	r6, r0
 8014298:	460f      	mov	r7, r1
 801429a:	e7ac      	b.n	80141f6 <_dtoa_r+0x5c6>
 801429c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80142a0:	9d00      	ldr	r5, [sp, #0]
 80142a2:	4642      	mov	r2, r8
 80142a4:	464b      	mov	r3, r9
 80142a6:	4630      	mov	r0, r6
 80142a8:	4639      	mov	r1, r7
 80142aa:	f7ec fadf 	bl	800086c <__aeabi_ddiv>
 80142ae:	f7ec fc63 	bl	8000b78 <__aeabi_d2iz>
 80142b2:	9002      	str	r0, [sp, #8]
 80142b4:	f7ec f946 	bl	8000544 <__aeabi_i2d>
 80142b8:	4642      	mov	r2, r8
 80142ba:	464b      	mov	r3, r9
 80142bc:	f7ec f9ac 	bl	8000618 <__aeabi_dmul>
 80142c0:	4602      	mov	r2, r0
 80142c2:	460b      	mov	r3, r1
 80142c4:	4630      	mov	r0, r6
 80142c6:	4639      	mov	r1, r7
 80142c8:	f7eb ffee 	bl	80002a8 <__aeabi_dsub>
 80142cc:	9e02      	ldr	r6, [sp, #8]
 80142ce:	9f01      	ldr	r7, [sp, #4]
 80142d0:	3630      	adds	r6, #48	; 0x30
 80142d2:	f805 6b01 	strb.w	r6, [r5], #1
 80142d6:	9e00      	ldr	r6, [sp, #0]
 80142d8:	1bae      	subs	r6, r5, r6
 80142da:	42b7      	cmp	r7, r6
 80142dc:	4602      	mov	r2, r0
 80142de:	460b      	mov	r3, r1
 80142e0:	d137      	bne.n	8014352 <_dtoa_r+0x722>
 80142e2:	f7eb ffe3 	bl	80002ac <__adddf3>
 80142e6:	4642      	mov	r2, r8
 80142e8:	464b      	mov	r3, r9
 80142ea:	4606      	mov	r6, r0
 80142ec:	460f      	mov	r7, r1
 80142ee:	f7ec fc23 	bl	8000b38 <__aeabi_dcmpgt>
 80142f2:	b9c8      	cbnz	r0, 8014328 <_dtoa_r+0x6f8>
 80142f4:	4642      	mov	r2, r8
 80142f6:	464b      	mov	r3, r9
 80142f8:	4630      	mov	r0, r6
 80142fa:	4639      	mov	r1, r7
 80142fc:	f7ec fbf4 	bl	8000ae8 <__aeabi_dcmpeq>
 8014300:	b110      	cbz	r0, 8014308 <_dtoa_r+0x6d8>
 8014302:	9b02      	ldr	r3, [sp, #8]
 8014304:	07d9      	lsls	r1, r3, #31
 8014306:	d40f      	bmi.n	8014328 <_dtoa_r+0x6f8>
 8014308:	4620      	mov	r0, r4
 801430a:	4659      	mov	r1, fp
 801430c:	f000 ff98 	bl	8015240 <_Bfree>
 8014310:	2300      	movs	r3, #0
 8014312:	702b      	strb	r3, [r5, #0]
 8014314:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014316:	f10a 0001 	add.w	r0, sl, #1
 801431a:	6018      	str	r0, [r3, #0]
 801431c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801431e:	2b00      	cmp	r3, #0
 8014320:	f43f acd8 	beq.w	8013cd4 <_dtoa_r+0xa4>
 8014324:	601d      	str	r5, [r3, #0]
 8014326:	e4d5      	b.n	8013cd4 <_dtoa_r+0xa4>
 8014328:	f8cd a01c 	str.w	sl, [sp, #28]
 801432c:	462b      	mov	r3, r5
 801432e:	461d      	mov	r5, r3
 8014330:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014334:	2a39      	cmp	r2, #57	; 0x39
 8014336:	d108      	bne.n	801434a <_dtoa_r+0x71a>
 8014338:	9a00      	ldr	r2, [sp, #0]
 801433a:	429a      	cmp	r2, r3
 801433c:	d1f7      	bne.n	801432e <_dtoa_r+0x6fe>
 801433e:	9a07      	ldr	r2, [sp, #28]
 8014340:	9900      	ldr	r1, [sp, #0]
 8014342:	3201      	adds	r2, #1
 8014344:	9207      	str	r2, [sp, #28]
 8014346:	2230      	movs	r2, #48	; 0x30
 8014348:	700a      	strb	r2, [r1, #0]
 801434a:	781a      	ldrb	r2, [r3, #0]
 801434c:	3201      	adds	r2, #1
 801434e:	701a      	strb	r2, [r3, #0]
 8014350:	e78c      	b.n	801426c <_dtoa_r+0x63c>
 8014352:	4b7f      	ldr	r3, [pc, #508]	; (8014550 <_dtoa_r+0x920>)
 8014354:	2200      	movs	r2, #0
 8014356:	f7ec f95f 	bl	8000618 <__aeabi_dmul>
 801435a:	2200      	movs	r2, #0
 801435c:	2300      	movs	r3, #0
 801435e:	4606      	mov	r6, r0
 8014360:	460f      	mov	r7, r1
 8014362:	f7ec fbc1 	bl	8000ae8 <__aeabi_dcmpeq>
 8014366:	2800      	cmp	r0, #0
 8014368:	d09b      	beq.n	80142a2 <_dtoa_r+0x672>
 801436a:	e7cd      	b.n	8014308 <_dtoa_r+0x6d8>
 801436c:	9a08      	ldr	r2, [sp, #32]
 801436e:	2a00      	cmp	r2, #0
 8014370:	f000 80c4 	beq.w	80144fc <_dtoa_r+0x8cc>
 8014374:	9a05      	ldr	r2, [sp, #20]
 8014376:	2a01      	cmp	r2, #1
 8014378:	f300 80a8 	bgt.w	80144cc <_dtoa_r+0x89c>
 801437c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801437e:	2a00      	cmp	r2, #0
 8014380:	f000 80a0 	beq.w	80144c4 <_dtoa_r+0x894>
 8014384:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014388:	9e06      	ldr	r6, [sp, #24]
 801438a:	4645      	mov	r5, r8
 801438c:	9a04      	ldr	r2, [sp, #16]
 801438e:	2101      	movs	r1, #1
 8014390:	441a      	add	r2, r3
 8014392:	4620      	mov	r0, r4
 8014394:	4498      	add	r8, r3
 8014396:	9204      	str	r2, [sp, #16]
 8014398:	f001 f858 	bl	801544c <__i2b>
 801439c:	4607      	mov	r7, r0
 801439e:	2d00      	cmp	r5, #0
 80143a0:	dd0b      	ble.n	80143ba <_dtoa_r+0x78a>
 80143a2:	9b04      	ldr	r3, [sp, #16]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	dd08      	ble.n	80143ba <_dtoa_r+0x78a>
 80143a8:	42ab      	cmp	r3, r5
 80143aa:	9a04      	ldr	r2, [sp, #16]
 80143ac:	bfa8      	it	ge
 80143ae:	462b      	movge	r3, r5
 80143b0:	eba8 0803 	sub.w	r8, r8, r3
 80143b4:	1aed      	subs	r5, r5, r3
 80143b6:	1ad3      	subs	r3, r2, r3
 80143b8:	9304      	str	r3, [sp, #16]
 80143ba:	9b06      	ldr	r3, [sp, #24]
 80143bc:	b1fb      	cbz	r3, 80143fe <_dtoa_r+0x7ce>
 80143be:	9b08      	ldr	r3, [sp, #32]
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	f000 809f 	beq.w	8014504 <_dtoa_r+0x8d4>
 80143c6:	2e00      	cmp	r6, #0
 80143c8:	dd11      	ble.n	80143ee <_dtoa_r+0x7be>
 80143ca:	4639      	mov	r1, r7
 80143cc:	4632      	mov	r2, r6
 80143ce:	4620      	mov	r0, r4
 80143d0:	f001 f8f8 	bl	80155c4 <__pow5mult>
 80143d4:	465a      	mov	r2, fp
 80143d6:	4601      	mov	r1, r0
 80143d8:	4607      	mov	r7, r0
 80143da:	4620      	mov	r0, r4
 80143dc:	f001 f84c 	bl	8015478 <__multiply>
 80143e0:	4659      	mov	r1, fp
 80143e2:	9007      	str	r0, [sp, #28]
 80143e4:	4620      	mov	r0, r4
 80143e6:	f000 ff2b 	bl	8015240 <_Bfree>
 80143ea:	9b07      	ldr	r3, [sp, #28]
 80143ec:	469b      	mov	fp, r3
 80143ee:	9b06      	ldr	r3, [sp, #24]
 80143f0:	1b9a      	subs	r2, r3, r6
 80143f2:	d004      	beq.n	80143fe <_dtoa_r+0x7ce>
 80143f4:	4659      	mov	r1, fp
 80143f6:	4620      	mov	r0, r4
 80143f8:	f001 f8e4 	bl	80155c4 <__pow5mult>
 80143fc:	4683      	mov	fp, r0
 80143fe:	2101      	movs	r1, #1
 8014400:	4620      	mov	r0, r4
 8014402:	f001 f823 	bl	801544c <__i2b>
 8014406:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014408:	2b00      	cmp	r3, #0
 801440a:	4606      	mov	r6, r0
 801440c:	dd7c      	ble.n	8014508 <_dtoa_r+0x8d8>
 801440e:	461a      	mov	r2, r3
 8014410:	4601      	mov	r1, r0
 8014412:	4620      	mov	r0, r4
 8014414:	f001 f8d6 	bl	80155c4 <__pow5mult>
 8014418:	9b05      	ldr	r3, [sp, #20]
 801441a:	2b01      	cmp	r3, #1
 801441c:	4606      	mov	r6, r0
 801441e:	dd76      	ble.n	801450e <_dtoa_r+0x8de>
 8014420:	2300      	movs	r3, #0
 8014422:	9306      	str	r3, [sp, #24]
 8014424:	6933      	ldr	r3, [r6, #16]
 8014426:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801442a:	6918      	ldr	r0, [r3, #16]
 801442c:	f000 ffbe 	bl	80153ac <__hi0bits>
 8014430:	f1c0 0020 	rsb	r0, r0, #32
 8014434:	9b04      	ldr	r3, [sp, #16]
 8014436:	4418      	add	r0, r3
 8014438:	f010 001f 	ands.w	r0, r0, #31
 801443c:	f000 8086 	beq.w	801454c <_dtoa_r+0x91c>
 8014440:	f1c0 0320 	rsb	r3, r0, #32
 8014444:	2b04      	cmp	r3, #4
 8014446:	dd7f      	ble.n	8014548 <_dtoa_r+0x918>
 8014448:	f1c0 001c 	rsb	r0, r0, #28
 801444c:	9b04      	ldr	r3, [sp, #16]
 801444e:	4403      	add	r3, r0
 8014450:	4480      	add	r8, r0
 8014452:	4405      	add	r5, r0
 8014454:	9304      	str	r3, [sp, #16]
 8014456:	f1b8 0f00 	cmp.w	r8, #0
 801445a:	dd05      	ble.n	8014468 <_dtoa_r+0x838>
 801445c:	4659      	mov	r1, fp
 801445e:	4642      	mov	r2, r8
 8014460:	4620      	mov	r0, r4
 8014462:	f001 f909 	bl	8015678 <__lshift>
 8014466:	4683      	mov	fp, r0
 8014468:	9b04      	ldr	r3, [sp, #16]
 801446a:	2b00      	cmp	r3, #0
 801446c:	dd05      	ble.n	801447a <_dtoa_r+0x84a>
 801446e:	4631      	mov	r1, r6
 8014470:	461a      	mov	r2, r3
 8014472:	4620      	mov	r0, r4
 8014474:	f001 f900 	bl	8015678 <__lshift>
 8014478:	4606      	mov	r6, r0
 801447a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801447c:	2b00      	cmp	r3, #0
 801447e:	d069      	beq.n	8014554 <_dtoa_r+0x924>
 8014480:	4631      	mov	r1, r6
 8014482:	4658      	mov	r0, fp
 8014484:	f001 f964 	bl	8015750 <__mcmp>
 8014488:	2800      	cmp	r0, #0
 801448a:	da63      	bge.n	8014554 <_dtoa_r+0x924>
 801448c:	2300      	movs	r3, #0
 801448e:	4659      	mov	r1, fp
 8014490:	220a      	movs	r2, #10
 8014492:	4620      	mov	r0, r4
 8014494:	f000 fef6 	bl	8015284 <__multadd>
 8014498:	9b08      	ldr	r3, [sp, #32]
 801449a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801449e:	4683      	mov	fp, r0
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	f000 818f 	beq.w	80147c4 <_dtoa_r+0xb94>
 80144a6:	4639      	mov	r1, r7
 80144a8:	2300      	movs	r3, #0
 80144aa:	220a      	movs	r2, #10
 80144ac:	4620      	mov	r0, r4
 80144ae:	f000 fee9 	bl	8015284 <__multadd>
 80144b2:	f1b9 0f00 	cmp.w	r9, #0
 80144b6:	4607      	mov	r7, r0
 80144b8:	f300 808e 	bgt.w	80145d8 <_dtoa_r+0x9a8>
 80144bc:	9b05      	ldr	r3, [sp, #20]
 80144be:	2b02      	cmp	r3, #2
 80144c0:	dc50      	bgt.n	8014564 <_dtoa_r+0x934>
 80144c2:	e089      	b.n	80145d8 <_dtoa_r+0x9a8>
 80144c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80144c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80144ca:	e75d      	b.n	8014388 <_dtoa_r+0x758>
 80144cc:	9b01      	ldr	r3, [sp, #4]
 80144ce:	1e5e      	subs	r6, r3, #1
 80144d0:	9b06      	ldr	r3, [sp, #24]
 80144d2:	42b3      	cmp	r3, r6
 80144d4:	bfbf      	itttt	lt
 80144d6:	9b06      	ldrlt	r3, [sp, #24]
 80144d8:	9606      	strlt	r6, [sp, #24]
 80144da:	1af2      	sublt	r2, r6, r3
 80144dc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80144de:	bfb6      	itet	lt
 80144e0:	189b      	addlt	r3, r3, r2
 80144e2:	1b9e      	subge	r6, r3, r6
 80144e4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80144e6:	9b01      	ldr	r3, [sp, #4]
 80144e8:	bfb8      	it	lt
 80144ea:	2600      	movlt	r6, #0
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	bfb5      	itete	lt
 80144f0:	eba8 0503 	sublt.w	r5, r8, r3
 80144f4:	9b01      	ldrge	r3, [sp, #4]
 80144f6:	2300      	movlt	r3, #0
 80144f8:	4645      	movge	r5, r8
 80144fa:	e747      	b.n	801438c <_dtoa_r+0x75c>
 80144fc:	9e06      	ldr	r6, [sp, #24]
 80144fe:	9f08      	ldr	r7, [sp, #32]
 8014500:	4645      	mov	r5, r8
 8014502:	e74c      	b.n	801439e <_dtoa_r+0x76e>
 8014504:	9a06      	ldr	r2, [sp, #24]
 8014506:	e775      	b.n	80143f4 <_dtoa_r+0x7c4>
 8014508:	9b05      	ldr	r3, [sp, #20]
 801450a:	2b01      	cmp	r3, #1
 801450c:	dc18      	bgt.n	8014540 <_dtoa_r+0x910>
 801450e:	9b02      	ldr	r3, [sp, #8]
 8014510:	b9b3      	cbnz	r3, 8014540 <_dtoa_r+0x910>
 8014512:	9b03      	ldr	r3, [sp, #12]
 8014514:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014518:	b9a3      	cbnz	r3, 8014544 <_dtoa_r+0x914>
 801451a:	9b03      	ldr	r3, [sp, #12]
 801451c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014520:	0d1b      	lsrs	r3, r3, #20
 8014522:	051b      	lsls	r3, r3, #20
 8014524:	b12b      	cbz	r3, 8014532 <_dtoa_r+0x902>
 8014526:	9b04      	ldr	r3, [sp, #16]
 8014528:	3301      	adds	r3, #1
 801452a:	9304      	str	r3, [sp, #16]
 801452c:	f108 0801 	add.w	r8, r8, #1
 8014530:	2301      	movs	r3, #1
 8014532:	9306      	str	r3, [sp, #24]
 8014534:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014536:	2b00      	cmp	r3, #0
 8014538:	f47f af74 	bne.w	8014424 <_dtoa_r+0x7f4>
 801453c:	2001      	movs	r0, #1
 801453e:	e779      	b.n	8014434 <_dtoa_r+0x804>
 8014540:	2300      	movs	r3, #0
 8014542:	e7f6      	b.n	8014532 <_dtoa_r+0x902>
 8014544:	9b02      	ldr	r3, [sp, #8]
 8014546:	e7f4      	b.n	8014532 <_dtoa_r+0x902>
 8014548:	d085      	beq.n	8014456 <_dtoa_r+0x826>
 801454a:	4618      	mov	r0, r3
 801454c:	301c      	adds	r0, #28
 801454e:	e77d      	b.n	801444c <_dtoa_r+0x81c>
 8014550:	40240000 	.word	0x40240000
 8014554:	9b01      	ldr	r3, [sp, #4]
 8014556:	2b00      	cmp	r3, #0
 8014558:	dc38      	bgt.n	80145cc <_dtoa_r+0x99c>
 801455a:	9b05      	ldr	r3, [sp, #20]
 801455c:	2b02      	cmp	r3, #2
 801455e:	dd35      	ble.n	80145cc <_dtoa_r+0x99c>
 8014560:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8014564:	f1b9 0f00 	cmp.w	r9, #0
 8014568:	d10d      	bne.n	8014586 <_dtoa_r+0x956>
 801456a:	4631      	mov	r1, r6
 801456c:	464b      	mov	r3, r9
 801456e:	2205      	movs	r2, #5
 8014570:	4620      	mov	r0, r4
 8014572:	f000 fe87 	bl	8015284 <__multadd>
 8014576:	4601      	mov	r1, r0
 8014578:	4606      	mov	r6, r0
 801457a:	4658      	mov	r0, fp
 801457c:	f001 f8e8 	bl	8015750 <__mcmp>
 8014580:	2800      	cmp	r0, #0
 8014582:	f73f adbd 	bgt.w	8014100 <_dtoa_r+0x4d0>
 8014586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014588:	9d00      	ldr	r5, [sp, #0]
 801458a:	ea6f 0a03 	mvn.w	sl, r3
 801458e:	f04f 0800 	mov.w	r8, #0
 8014592:	4631      	mov	r1, r6
 8014594:	4620      	mov	r0, r4
 8014596:	f000 fe53 	bl	8015240 <_Bfree>
 801459a:	2f00      	cmp	r7, #0
 801459c:	f43f aeb4 	beq.w	8014308 <_dtoa_r+0x6d8>
 80145a0:	f1b8 0f00 	cmp.w	r8, #0
 80145a4:	d005      	beq.n	80145b2 <_dtoa_r+0x982>
 80145a6:	45b8      	cmp	r8, r7
 80145a8:	d003      	beq.n	80145b2 <_dtoa_r+0x982>
 80145aa:	4641      	mov	r1, r8
 80145ac:	4620      	mov	r0, r4
 80145ae:	f000 fe47 	bl	8015240 <_Bfree>
 80145b2:	4639      	mov	r1, r7
 80145b4:	4620      	mov	r0, r4
 80145b6:	f000 fe43 	bl	8015240 <_Bfree>
 80145ba:	e6a5      	b.n	8014308 <_dtoa_r+0x6d8>
 80145bc:	2600      	movs	r6, #0
 80145be:	4637      	mov	r7, r6
 80145c0:	e7e1      	b.n	8014586 <_dtoa_r+0x956>
 80145c2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80145c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80145c8:	4637      	mov	r7, r6
 80145ca:	e599      	b.n	8014100 <_dtoa_r+0x4d0>
 80145cc:	9b08      	ldr	r3, [sp, #32]
 80145ce:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	f000 80fd 	beq.w	80147d2 <_dtoa_r+0xba2>
 80145d8:	2d00      	cmp	r5, #0
 80145da:	dd05      	ble.n	80145e8 <_dtoa_r+0x9b8>
 80145dc:	4639      	mov	r1, r7
 80145de:	462a      	mov	r2, r5
 80145e0:	4620      	mov	r0, r4
 80145e2:	f001 f849 	bl	8015678 <__lshift>
 80145e6:	4607      	mov	r7, r0
 80145e8:	9b06      	ldr	r3, [sp, #24]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d05c      	beq.n	80146a8 <_dtoa_r+0xa78>
 80145ee:	6879      	ldr	r1, [r7, #4]
 80145f0:	4620      	mov	r0, r4
 80145f2:	f000 fde5 	bl	80151c0 <_Balloc>
 80145f6:	4605      	mov	r5, r0
 80145f8:	b928      	cbnz	r0, 8014606 <_dtoa_r+0x9d6>
 80145fa:	4b80      	ldr	r3, [pc, #512]	; (80147fc <_dtoa_r+0xbcc>)
 80145fc:	4602      	mov	r2, r0
 80145fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014602:	f7ff bb2e 	b.w	8013c62 <_dtoa_r+0x32>
 8014606:	693a      	ldr	r2, [r7, #16]
 8014608:	3202      	adds	r2, #2
 801460a:	0092      	lsls	r2, r2, #2
 801460c:	f107 010c 	add.w	r1, r7, #12
 8014610:	300c      	adds	r0, #12
 8014612:	f7fd f8fb 	bl	801180c <memcpy>
 8014616:	2201      	movs	r2, #1
 8014618:	4629      	mov	r1, r5
 801461a:	4620      	mov	r0, r4
 801461c:	f001 f82c 	bl	8015678 <__lshift>
 8014620:	9b00      	ldr	r3, [sp, #0]
 8014622:	3301      	adds	r3, #1
 8014624:	9301      	str	r3, [sp, #4]
 8014626:	9b00      	ldr	r3, [sp, #0]
 8014628:	444b      	add	r3, r9
 801462a:	9307      	str	r3, [sp, #28]
 801462c:	9b02      	ldr	r3, [sp, #8]
 801462e:	f003 0301 	and.w	r3, r3, #1
 8014632:	46b8      	mov	r8, r7
 8014634:	9306      	str	r3, [sp, #24]
 8014636:	4607      	mov	r7, r0
 8014638:	9b01      	ldr	r3, [sp, #4]
 801463a:	4631      	mov	r1, r6
 801463c:	3b01      	subs	r3, #1
 801463e:	4658      	mov	r0, fp
 8014640:	9302      	str	r3, [sp, #8]
 8014642:	f7ff fa67 	bl	8013b14 <quorem>
 8014646:	4603      	mov	r3, r0
 8014648:	3330      	adds	r3, #48	; 0x30
 801464a:	9004      	str	r0, [sp, #16]
 801464c:	4641      	mov	r1, r8
 801464e:	4658      	mov	r0, fp
 8014650:	9308      	str	r3, [sp, #32]
 8014652:	f001 f87d 	bl	8015750 <__mcmp>
 8014656:	463a      	mov	r2, r7
 8014658:	4681      	mov	r9, r0
 801465a:	4631      	mov	r1, r6
 801465c:	4620      	mov	r0, r4
 801465e:	f001 f893 	bl	8015788 <__mdiff>
 8014662:	68c2      	ldr	r2, [r0, #12]
 8014664:	9b08      	ldr	r3, [sp, #32]
 8014666:	4605      	mov	r5, r0
 8014668:	bb02      	cbnz	r2, 80146ac <_dtoa_r+0xa7c>
 801466a:	4601      	mov	r1, r0
 801466c:	4658      	mov	r0, fp
 801466e:	f001 f86f 	bl	8015750 <__mcmp>
 8014672:	9b08      	ldr	r3, [sp, #32]
 8014674:	4602      	mov	r2, r0
 8014676:	4629      	mov	r1, r5
 8014678:	4620      	mov	r0, r4
 801467a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801467e:	f000 fddf 	bl	8015240 <_Bfree>
 8014682:	9b05      	ldr	r3, [sp, #20]
 8014684:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014686:	9d01      	ldr	r5, [sp, #4]
 8014688:	ea43 0102 	orr.w	r1, r3, r2
 801468c:	9b06      	ldr	r3, [sp, #24]
 801468e:	430b      	orrs	r3, r1
 8014690:	9b08      	ldr	r3, [sp, #32]
 8014692:	d10d      	bne.n	80146b0 <_dtoa_r+0xa80>
 8014694:	2b39      	cmp	r3, #57	; 0x39
 8014696:	d029      	beq.n	80146ec <_dtoa_r+0xabc>
 8014698:	f1b9 0f00 	cmp.w	r9, #0
 801469c:	dd01      	ble.n	80146a2 <_dtoa_r+0xa72>
 801469e:	9b04      	ldr	r3, [sp, #16]
 80146a0:	3331      	adds	r3, #49	; 0x31
 80146a2:	9a02      	ldr	r2, [sp, #8]
 80146a4:	7013      	strb	r3, [r2, #0]
 80146a6:	e774      	b.n	8014592 <_dtoa_r+0x962>
 80146a8:	4638      	mov	r0, r7
 80146aa:	e7b9      	b.n	8014620 <_dtoa_r+0x9f0>
 80146ac:	2201      	movs	r2, #1
 80146ae:	e7e2      	b.n	8014676 <_dtoa_r+0xa46>
 80146b0:	f1b9 0f00 	cmp.w	r9, #0
 80146b4:	db06      	blt.n	80146c4 <_dtoa_r+0xa94>
 80146b6:	9905      	ldr	r1, [sp, #20]
 80146b8:	ea41 0909 	orr.w	r9, r1, r9
 80146bc:	9906      	ldr	r1, [sp, #24]
 80146be:	ea59 0101 	orrs.w	r1, r9, r1
 80146c2:	d120      	bne.n	8014706 <_dtoa_r+0xad6>
 80146c4:	2a00      	cmp	r2, #0
 80146c6:	ddec      	ble.n	80146a2 <_dtoa_r+0xa72>
 80146c8:	4659      	mov	r1, fp
 80146ca:	2201      	movs	r2, #1
 80146cc:	4620      	mov	r0, r4
 80146ce:	9301      	str	r3, [sp, #4]
 80146d0:	f000 ffd2 	bl	8015678 <__lshift>
 80146d4:	4631      	mov	r1, r6
 80146d6:	4683      	mov	fp, r0
 80146d8:	f001 f83a 	bl	8015750 <__mcmp>
 80146dc:	2800      	cmp	r0, #0
 80146de:	9b01      	ldr	r3, [sp, #4]
 80146e0:	dc02      	bgt.n	80146e8 <_dtoa_r+0xab8>
 80146e2:	d1de      	bne.n	80146a2 <_dtoa_r+0xa72>
 80146e4:	07da      	lsls	r2, r3, #31
 80146e6:	d5dc      	bpl.n	80146a2 <_dtoa_r+0xa72>
 80146e8:	2b39      	cmp	r3, #57	; 0x39
 80146ea:	d1d8      	bne.n	801469e <_dtoa_r+0xa6e>
 80146ec:	9a02      	ldr	r2, [sp, #8]
 80146ee:	2339      	movs	r3, #57	; 0x39
 80146f0:	7013      	strb	r3, [r2, #0]
 80146f2:	462b      	mov	r3, r5
 80146f4:	461d      	mov	r5, r3
 80146f6:	3b01      	subs	r3, #1
 80146f8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80146fc:	2a39      	cmp	r2, #57	; 0x39
 80146fe:	d050      	beq.n	80147a2 <_dtoa_r+0xb72>
 8014700:	3201      	adds	r2, #1
 8014702:	701a      	strb	r2, [r3, #0]
 8014704:	e745      	b.n	8014592 <_dtoa_r+0x962>
 8014706:	2a00      	cmp	r2, #0
 8014708:	dd03      	ble.n	8014712 <_dtoa_r+0xae2>
 801470a:	2b39      	cmp	r3, #57	; 0x39
 801470c:	d0ee      	beq.n	80146ec <_dtoa_r+0xabc>
 801470e:	3301      	adds	r3, #1
 8014710:	e7c7      	b.n	80146a2 <_dtoa_r+0xa72>
 8014712:	9a01      	ldr	r2, [sp, #4]
 8014714:	9907      	ldr	r1, [sp, #28]
 8014716:	f802 3c01 	strb.w	r3, [r2, #-1]
 801471a:	428a      	cmp	r2, r1
 801471c:	d02a      	beq.n	8014774 <_dtoa_r+0xb44>
 801471e:	4659      	mov	r1, fp
 8014720:	2300      	movs	r3, #0
 8014722:	220a      	movs	r2, #10
 8014724:	4620      	mov	r0, r4
 8014726:	f000 fdad 	bl	8015284 <__multadd>
 801472a:	45b8      	cmp	r8, r7
 801472c:	4683      	mov	fp, r0
 801472e:	f04f 0300 	mov.w	r3, #0
 8014732:	f04f 020a 	mov.w	r2, #10
 8014736:	4641      	mov	r1, r8
 8014738:	4620      	mov	r0, r4
 801473a:	d107      	bne.n	801474c <_dtoa_r+0xb1c>
 801473c:	f000 fda2 	bl	8015284 <__multadd>
 8014740:	4680      	mov	r8, r0
 8014742:	4607      	mov	r7, r0
 8014744:	9b01      	ldr	r3, [sp, #4]
 8014746:	3301      	adds	r3, #1
 8014748:	9301      	str	r3, [sp, #4]
 801474a:	e775      	b.n	8014638 <_dtoa_r+0xa08>
 801474c:	f000 fd9a 	bl	8015284 <__multadd>
 8014750:	4639      	mov	r1, r7
 8014752:	4680      	mov	r8, r0
 8014754:	2300      	movs	r3, #0
 8014756:	220a      	movs	r2, #10
 8014758:	4620      	mov	r0, r4
 801475a:	f000 fd93 	bl	8015284 <__multadd>
 801475e:	4607      	mov	r7, r0
 8014760:	e7f0      	b.n	8014744 <_dtoa_r+0xb14>
 8014762:	f1b9 0f00 	cmp.w	r9, #0
 8014766:	9a00      	ldr	r2, [sp, #0]
 8014768:	bfcc      	ite	gt
 801476a:	464d      	movgt	r5, r9
 801476c:	2501      	movle	r5, #1
 801476e:	4415      	add	r5, r2
 8014770:	f04f 0800 	mov.w	r8, #0
 8014774:	4659      	mov	r1, fp
 8014776:	2201      	movs	r2, #1
 8014778:	4620      	mov	r0, r4
 801477a:	9301      	str	r3, [sp, #4]
 801477c:	f000 ff7c 	bl	8015678 <__lshift>
 8014780:	4631      	mov	r1, r6
 8014782:	4683      	mov	fp, r0
 8014784:	f000 ffe4 	bl	8015750 <__mcmp>
 8014788:	2800      	cmp	r0, #0
 801478a:	dcb2      	bgt.n	80146f2 <_dtoa_r+0xac2>
 801478c:	d102      	bne.n	8014794 <_dtoa_r+0xb64>
 801478e:	9b01      	ldr	r3, [sp, #4]
 8014790:	07db      	lsls	r3, r3, #31
 8014792:	d4ae      	bmi.n	80146f2 <_dtoa_r+0xac2>
 8014794:	462b      	mov	r3, r5
 8014796:	461d      	mov	r5, r3
 8014798:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801479c:	2a30      	cmp	r2, #48	; 0x30
 801479e:	d0fa      	beq.n	8014796 <_dtoa_r+0xb66>
 80147a0:	e6f7      	b.n	8014592 <_dtoa_r+0x962>
 80147a2:	9a00      	ldr	r2, [sp, #0]
 80147a4:	429a      	cmp	r2, r3
 80147a6:	d1a5      	bne.n	80146f4 <_dtoa_r+0xac4>
 80147a8:	f10a 0a01 	add.w	sl, sl, #1
 80147ac:	2331      	movs	r3, #49	; 0x31
 80147ae:	e779      	b.n	80146a4 <_dtoa_r+0xa74>
 80147b0:	4b13      	ldr	r3, [pc, #76]	; (8014800 <_dtoa_r+0xbd0>)
 80147b2:	f7ff baaf 	b.w	8013d14 <_dtoa_r+0xe4>
 80147b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	f47f aa86 	bne.w	8013cca <_dtoa_r+0x9a>
 80147be:	4b11      	ldr	r3, [pc, #68]	; (8014804 <_dtoa_r+0xbd4>)
 80147c0:	f7ff baa8 	b.w	8013d14 <_dtoa_r+0xe4>
 80147c4:	f1b9 0f00 	cmp.w	r9, #0
 80147c8:	dc03      	bgt.n	80147d2 <_dtoa_r+0xba2>
 80147ca:	9b05      	ldr	r3, [sp, #20]
 80147cc:	2b02      	cmp	r3, #2
 80147ce:	f73f aec9 	bgt.w	8014564 <_dtoa_r+0x934>
 80147d2:	9d00      	ldr	r5, [sp, #0]
 80147d4:	4631      	mov	r1, r6
 80147d6:	4658      	mov	r0, fp
 80147d8:	f7ff f99c 	bl	8013b14 <quorem>
 80147dc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80147e0:	f805 3b01 	strb.w	r3, [r5], #1
 80147e4:	9a00      	ldr	r2, [sp, #0]
 80147e6:	1aaa      	subs	r2, r5, r2
 80147e8:	4591      	cmp	r9, r2
 80147ea:	ddba      	ble.n	8014762 <_dtoa_r+0xb32>
 80147ec:	4659      	mov	r1, fp
 80147ee:	2300      	movs	r3, #0
 80147f0:	220a      	movs	r2, #10
 80147f2:	4620      	mov	r0, r4
 80147f4:	f000 fd46 	bl	8015284 <__multadd>
 80147f8:	4683      	mov	fp, r0
 80147fa:	e7eb      	b.n	80147d4 <_dtoa_r+0xba4>
 80147fc:	080187f8 	.word	0x080187f8
 8014800:	080189f9 	.word	0x080189f9
 8014804:	08018775 	.word	0x08018775

08014808 <__sflush_r>:
 8014808:	898a      	ldrh	r2, [r1, #12]
 801480a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801480e:	4605      	mov	r5, r0
 8014810:	0710      	lsls	r0, r2, #28
 8014812:	460c      	mov	r4, r1
 8014814:	d458      	bmi.n	80148c8 <__sflush_r+0xc0>
 8014816:	684b      	ldr	r3, [r1, #4]
 8014818:	2b00      	cmp	r3, #0
 801481a:	dc05      	bgt.n	8014828 <__sflush_r+0x20>
 801481c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801481e:	2b00      	cmp	r3, #0
 8014820:	dc02      	bgt.n	8014828 <__sflush_r+0x20>
 8014822:	2000      	movs	r0, #0
 8014824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014828:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801482a:	2e00      	cmp	r6, #0
 801482c:	d0f9      	beq.n	8014822 <__sflush_r+0x1a>
 801482e:	2300      	movs	r3, #0
 8014830:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014834:	682f      	ldr	r7, [r5, #0]
 8014836:	602b      	str	r3, [r5, #0]
 8014838:	d032      	beq.n	80148a0 <__sflush_r+0x98>
 801483a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801483c:	89a3      	ldrh	r3, [r4, #12]
 801483e:	075a      	lsls	r2, r3, #29
 8014840:	d505      	bpl.n	801484e <__sflush_r+0x46>
 8014842:	6863      	ldr	r3, [r4, #4]
 8014844:	1ac0      	subs	r0, r0, r3
 8014846:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014848:	b10b      	cbz	r3, 801484e <__sflush_r+0x46>
 801484a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801484c:	1ac0      	subs	r0, r0, r3
 801484e:	2300      	movs	r3, #0
 8014850:	4602      	mov	r2, r0
 8014852:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014854:	6a21      	ldr	r1, [r4, #32]
 8014856:	4628      	mov	r0, r5
 8014858:	47b0      	blx	r6
 801485a:	1c43      	adds	r3, r0, #1
 801485c:	89a3      	ldrh	r3, [r4, #12]
 801485e:	d106      	bne.n	801486e <__sflush_r+0x66>
 8014860:	6829      	ldr	r1, [r5, #0]
 8014862:	291d      	cmp	r1, #29
 8014864:	d82c      	bhi.n	80148c0 <__sflush_r+0xb8>
 8014866:	4a2a      	ldr	r2, [pc, #168]	; (8014910 <__sflush_r+0x108>)
 8014868:	40ca      	lsrs	r2, r1
 801486a:	07d6      	lsls	r6, r2, #31
 801486c:	d528      	bpl.n	80148c0 <__sflush_r+0xb8>
 801486e:	2200      	movs	r2, #0
 8014870:	6062      	str	r2, [r4, #4]
 8014872:	04d9      	lsls	r1, r3, #19
 8014874:	6922      	ldr	r2, [r4, #16]
 8014876:	6022      	str	r2, [r4, #0]
 8014878:	d504      	bpl.n	8014884 <__sflush_r+0x7c>
 801487a:	1c42      	adds	r2, r0, #1
 801487c:	d101      	bne.n	8014882 <__sflush_r+0x7a>
 801487e:	682b      	ldr	r3, [r5, #0]
 8014880:	b903      	cbnz	r3, 8014884 <__sflush_r+0x7c>
 8014882:	6560      	str	r0, [r4, #84]	; 0x54
 8014884:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014886:	602f      	str	r7, [r5, #0]
 8014888:	2900      	cmp	r1, #0
 801488a:	d0ca      	beq.n	8014822 <__sflush_r+0x1a>
 801488c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014890:	4299      	cmp	r1, r3
 8014892:	d002      	beq.n	801489a <__sflush_r+0x92>
 8014894:	4628      	mov	r0, r5
 8014896:	f7fc ffe9 	bl	801186c <_free_r>
 801489a:	2000      	movs	r0, #0
 801489c:	6360      	str	r0, [r4, #52]	; 0x34
 801489e:	e7c1      	b.n	8014824 <__sflush_r+0x1c>
 80148a0:	6a21      	ldr	r1, [r4, #32]
 80148a2:	2301      	movs	r3, #1
 80148a4:	4628      	mov	r0, r5
 80148a6:	47b0      	blx	r6
 80148a8:	1c41      	adds	r1, r0, #1
 80148aa:	d1c7      	bne.n	801483c <__sflush_r+0x34>
 80148ac:	682b      	ldr	r3, [r5, #0]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d0c4      	beq.n	801483c <__sflush_r+0x34>
 80148b2:	2b1d      	cmp	r3, #29
 80148b4:	d001      	beq.n	80148ba <__sflush_r+0xb2>
 80148b6:	2b16      	cmp	r3, #22
 80148b8:	d101      	bne.n	80148be <__sflush_r+0xb6>
 80148ba:	602f      	str	r7, [r5, #0]
 80148bc:	e7b1      	b.n	8014822 <__sflush_r+0x1a>
 80148be:	89a3      	ldrh	r3, [r4, #12]
 80148c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80148c4:	81a3      	strh	r3, [r4, #12]
 80148c6:	e7ad      	b.n	8014824 <__sflush_r+0x1c>
 80148c8:	690f      	ldr	r7, [r1, #16]
 80148ca:	2f00      	cmp	r7, #0
 80148cc:	d0a9      	beq.n	8014822 <__sflush_r+0x1a>
 80148ce:	0793      	lsls	r3, r2, #30
 80148d0:	680e      	ldr	r6, [r1, #0]
 80148d2:	bf08      	it	eq
 80148d4:	694b      	ldreq	r3, [r1, #20]
 80148d6:	600f      	str	r7, [r1, #0]
 80148d8:	bf18      	it	ne
 80148da:	2300      	movne	r3, #0
 80148dc:	eba6 0807 	sub.w	r8, r6, r7
 80148e0:	608b      	str	r3, [r1, #8]
 80148e2:	f1b8 0f00 	cmp.w	r8, #0
 80148e6:	dd9c      	ble.n	8014822 <__sflush_r+0x1a>
 80148e8:	6a21      	ldr	r1, [r4, #32]
 80148ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80148ec:	4643      	mov	r3, r8
 80148ee:	463a      	mov	r2, r7
 80148f0:	4628      	mov	r0, r5
 80148f2:	47b0      	blx	r6
 80148f4:	2800      	cmp	r0, #0
 80148f6:	dc06      	bgt.n	8014906 <__sflush_r+0xfe>
 80148f8:	89a3      	ldrh	r3, [r4, #12]
 80148fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80148fe:	81a3      	strh	r3, [r4, #12]
 8014900:	f04f 30ff 	mov.w	r0, #4294967295
 8014904:	e78e      	b.n	8014824 <__sflush_r+0x1c>
 8014906:	4407      	add	r7, r0
 8014908:	eba8 0800 	sub.w	r8, r8, r0
 801490c:	e7e9      	b.n	80148e2 <__sflush_r+0xda>
 801490e:	bf00      	nop
 8014910:	20400001 	.word	0x20400001

08014914 <_fflush_r>:
 8014914:	b538      	push	{r3, r4, r5, lr}
 8014916:	690b      	ldr	r3, [r1, #16]
 8014918:	4605      	mov	r5, r0
 801491a:	460c      	mov	r4, r1
 801491c:	b913      	cbnz	r3, 8014924 <_fflush_r+0x10>
 801491e:	2500      	movs	r5, #0
 8014920:	4628      	mov	r0, r5
 8014922:	bd38      	pop	{r3, r4, r5, pc}
 8014924:	b118      	cbz	r0, 801492e <_fflush_r+0x1a>
 8014926:	6983      	ldr	r3, [r0, #24]
 8014928:	b90b      	cbnz	r3, 801492e <_fflush_r+0x1a>
 801492a:	f7fc fe99 	bl	8011660 <__sinit>
 801492e:	4b14      	ldr	r3, [pc, #80]	; (8014980 <_fflush_r+0x6c>)
 8014930:	429c      	cmp	r4, r3
 8014932:	d11b      	bne.n	801496c <_fflush_r+0x58>
 8014934:	686c      	ldr	r4, [r5, #4]
 8014936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801493a:	2b00      	cmp	r3, #0
 801493c:	d0ef      	beq.n	801491e <_fflush_r+0xa>
 801493e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014940:	07d0      	lsls	r0, r2, #31
 8014942:	d404      	bmi.n	801494e <_fflush_r+0x3a>
 8014944:	0599      	lsls	r1, r3, #22
 8014946:	d402      	bmi.n	801494e <_fflush_r+0x3a>
 8014948:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801494a:	f7fc ff4c 	bl	80117e6 <__retarget_lock_acquire_recursive>
 801494e:	4628      	mov	r0, r5
 8014950:	4621      	mov	r1, r4
 8014952:	f7ff ff59 	bl	8014808 <__sflush_r>
 8014956:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014958:	07da      	lsls	r2, r3, #31
 801495a:	4605      	mov	r5, r0
 801495c:	d4e0      	bmi.n	8014920 <_fflush_r+0xc>
 801495e:	89a3      	ldrh	r3, [r4, #12]
 8014960:	059b      	lsls	r3, r3, #22
 8014962:	d4dd      	bmi.n	8014920 <_fflush_r+0xc>
 8014964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014966:	f7fc ff3f 	bl	80117e8 <__retarget_lock_release_recursive>
 801496a:	e7d9      	b.n	8014920 <_fflush_r+0xc>
 801496c:	4b05      	ldr	r3, [pc, #20]	; (8014984 <_fflush_r+0x70>)
 801496e:	429c      	cmp	r4, r3
 8014970:	d101      	bne.n	8014976 <_fflush_r+0x62>
 8014972:	68ac      	ldr	r4, [r5, #8]
 8014974:	e7df      	b.n	8014936 <_fflush_r+0x22>
 8014976:	4b04      	ldr	r3, [pc, #16]	; (8014988 <_fflush_r+0x74>)
 8014978:	429c      	cmp	r4, r3
 801497a:	bf08      	it	eq
 801497c:	68ec      	ldreq	r4, [r5, #12]
 801497e:	e7da      	b.n	8014936 <_fflush_r+0x22>
 8014980:	08018568 	.word	0x08018568
 8014984:	08018588 	.word	0x08018588
 8014988:	08018548 	.word	0x08018548

0801498c <fiprintf>:
 801498c:	b40e      	push	{r1, r2, r3}
 801498e:	b503      	push	{r0, r1, lr}
 8014990:	4601      	mov	r1, r0
 8014992:	ab03      	add	r3, sp, #12
 8014994:	4805      	ldr	r0, [pc, #20]	; (80149ac <fiprintf+0x20>)
 8014996:	f853 2b04 	ldr.w	r2, [r3], #4
 801499a:	6800      	ldr	r0, [r0, #0]
 801499c:	9301      	str	r3, [sp, #4]
 801499e:	f001 fc57 	bl	8016250 <_vfiprintf_r>
 80149a2:	b002      	add	sp, #8
 80149a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80149a8:	b003      	add	sp, #12
 80149aa:	4770      	bx	lr
 80149ac:	2000004c 	.word	0x2000004c

080149b0 <rshift>:
 80149b0:	6903      	ldr	r3, [r0, #16]
 80149b2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80149b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80149ba:	ea4f 1261 	mov.w	r2, r1, asr #5
 80149be:	f100 0414 	add.w	r4, r0, #20
 80149c2:	dd45      	ble.n	8014a50 <rshift+0xa0>
 80149c4:	f011 011f 	ands.w	r1, r1, #31
 80149c8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80149cc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80149d0:	d10c      	bne.n	80149ec <rshift+0x3c>
 80149d2:	f100 0710 	add.w	r7, r0, #16
 80149d6:	4629      	mov	r1, r5
 80149d8:	42b1      	cmp	r1, r6
 80149da:	d334      	bcc.n	8014a46 <rshift+0x96>
 80149dc:	1a9b      	subs	r3, r3, r2
 80149de:	009b      	lsls	r3, r3, #2
 80149e0:	1eea      	subs	r2, r5, #3
 80149e2:	4296      	cmp	r6, r2
 80149e4:	bf38      	it	cc
 80149e6:	2300      	movcc	r3, #0
 80149e8:	4423      	add	r3, r4
 80149ea:	e015      	b.n	8014a18 <rshift+0x68>
 80149ec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80149f0:	f1c1 0820 	rsb	r8, r1, #32
 80149f4:	40cf      	lsrs	r7, r1
 80149f6:	f105 0e04 	add.w	lr, r5, #4
 80149fa:	46a1      	mov	r9, r4
 80149fc:	4576      	cmp	r6, lr
 80149fe:	46f4      	mov	ip, lr
 8014a00:	d815      	bhi.n	8014a2e <rshift+0x7e>
 8014a02:	1a9b      	subs	r3, r3, r2
 8014a04:	009a      	lsls	r2, r3, #2
 8014a06:	3a04      	subs	r2, #4
 8014a08:	3501      	adds	r5, #1
 8014a0a:	42ae      	cmp	r6, r5
 8014a0c:	bf38      	it	cc
 8014a0e:	2200      	movcc	r2, #0
 8014a10:	18a3      	adds	r3, r4, r2
 8014a12:	50a7      	str	r7, [r4, r2]
 8014a14:	b107      	cbz	r7, 8014a18 <rshift+0x68>
 8014a16:	3304      	adds	r3, #4
 8014a18:	1b1a      	subs	r2, r3, r4
 8014a1a:	42a3      	cmp	r3, r4
 8014a1c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014a20:	bf08      	it	eq
 8014a22:	2300      	moveq	r3, #0
 8014a24:	6102      	str	r2, [r0, #16]
 8014a26:	bf08      	it	eq
 8014a28:	6143      	streq	r3, [r0, #20]
 8014a2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a2e:	f8dc c000 	ldr.w	ip, [ip]
 8014a32:	fa0c fc08 	lsl.w	ip, ip, r8
 8014a36:	ea4c 0707 	orr.w	r7, ip, r7
 8014a3a:	f849 7b04 	str.w	r7, [r9], #4
 8014a3e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014a42:	40cf      	lsrs	r7, r1
 8014a44:	e7da      	b.n	80149fc <rshift+0x4c>
 8014a46:	f851 cb04 	ldr.w	ip, [r1], #4
 8014a4a:	f847 cf04 	str.w	ip, [r7, #4]!
 8014a4e:	e7c3      	b.n	80149d8 <rshift+0x28>
 8014a50:	4623      	mov	r3, r4
 8014a52:	e7e1      	b.n	8014a18 <rshift+0x68>

08014a54 <__hexdig_fun>:
 8014a54:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014a58:	2b09      	cmp	r3, #9
 8014a5a:	d802      	bhi.n	8014a62 <__hexdig_fun+0xe>
 8014a5c:	3820      	subs	r0, #32
 8014a5e:	b2c0      	uxtb	r0, r0
 8014a60:	4770      	bx	lr
 8014a62:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014a66:	2b05      	cmp	r3, #5
 8014a68:	d801      	bhi.n	8014a6e <__hexdig_fun+0x1a>
 8014a6a:	3847      	subs	r0, #71	; 0x47
 8014a6c:	e7f7      	b.n	8014a5e <__hexdig_fun+0xa>
 8014a6e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014a72:	2b05      	cmp	r3, #5
 8014a74:	d801      	bhi.n	8014a7a <__hexdig_fun+0x26>
 8014a76:	3827      	subs	r0, #39	; 0x27
 8014a78:	e7f1      	b.n	8014a5e <__hexdig_fun+0xa>
 8014a7a:	2000      	movs	r0, #0
 8014a7c:	4770      	bx	lr
	...

08014a80 <__gethex>:
 8014a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a84:	ed2d 8b02 	vpush	{d8}
 8014a88:	b089      	sub	sp, #36	; 0x24
 8014a8a:	ee08 0a10 	vmov	s16, r0
 8014a8e:	9304      	str	r3, [sp, #16]
 8014a90:	4bbc      	ldr	r3, [pc, #752]	; (8014d84 <__gethex+0x304>)
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	9301      	str	r3, [sp, #4]
 8014a96:	4618      	mov	r0, r3
 8014a98:	468b      	mov	fp, r1
 8014a9a:	4690      	mov	r8, r2
 8014a9c:	f7eb fba8 	bl	80001f0 <strlen>
 8014aa0:	9b01      	ldr	r3, [sp, #4]
 8014aa2:	f8db 2000 	ldr.w	r2, [fp]
 8014aa6:	4403      	add	r3, r0
 8014aa8:	4682      	mov	sl, r0
 8014aaa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8014aae:	9305      	str	r3, [sp, #20]
 8014ab0:	1c93      	adds	r3, r2, #2
 8014ab2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8014ab6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8014aba:	32fe      	adds	r2, #254	; 0xfe
 8014abc:	18d1      	adds	r1, r2, r3
 8014abe:	461f      	mov	r7, r3
 8014ac0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014ac4:	9100      	str	r1, [sp, #0]
 8014ac6:	2830      	cmp	r0, #48	; 0x30
 8014ac8:	d0f8      	beq.n	8014abc <__gethex+0x3c>
 8014aca:	f7ff ffc3 	bl	8014a54 <__hexdig_fun>
 8014ace:	4604      	mov	r4, r0
 8014ad0:	2800      	cmp	r0, #0
 8014ad2:	d13a      	bne.n	8014b4a <__gethex+0xca>
 8014ad4:	9901      	ldr	r1, [sp, #4]
 8014ad6:	4652      	mov	r2, sl
 8014ad8:	4638      	mov	r0, r7
 8014ada:	f7fd ffce 	bl	8012a7a <strncmp>
 8014ade:	4605      	mov	r5, r0
 8014ae0:	2800      	cmp	r0, #0
 8014ae2:	d168      	bne.n	8014bb6 <__gethex+0x136>
 8014ae4:	f817 000a 	ldrb.w	r0, [r7, sl]
 8014ae8:	eb07 060a 	add.w	r6, r7, sl
 8014aec:	f7ff ffb2 	bl	8014a54 <__hexdig_fun>
 8014af0:	2800      	cmp	r0, #0
 8014af2:	d062      	beq.n	8014bba <__gethex+0x13a>
 8014af4:	4633      	mov	r3, r6
 8014af6:	7818      	ldrb	r0, [r3, #0]
 8014af8:	2830      	cmp	r0, #48	; 0x30
 8014afa:	461f      	mov	r7, r3
 8014afc:	f103 0301 	add.w	r3, r3, #1
 8014b00:	d0f9      	beq.n	8014af6 <__gethex+0x76>
 8014b02:	f7ff ffa7 	bl	8014a54 <__hexdig_fun>
 8014b06:	2301      	movs	r3, #1
 8014b08:	fab0 f480 	clz	r4, r0
 8014b0c:	0964      	lsrs	r4, r4, #5
 8014b0e:	4635      	mov	r5, r6
 8014b10:	9300      	str	r3, [sp, #0]
 8014b12:	463a      	mov	r2, r7
 8014b14:	4616      	mov	r6, r2
 8014b16:	3201      	adds	r2, #1
 8014b18:	7830      	ldrb	r0, [r6, #0]
 8014b1a:	f7ff ff9b 	bl	8014a54 <__hexdig_fun>
 8014b1e:	2800      	cmp	r0, #0
 8014b20:	d1f8      	bne.n	8014b14 <__gethex+0x94>
 8014b22:	9901      	ldr	r1, [sp, #4]
 8014b24:	4652      	mov	r2, sl
 8014b26:	4630      	mov	r0, r6
 8014b28:	f7fd ffa7 	bl	8012a7a <strncmp>
 8014b2c:	b980      	cbnz	r0, 8014b50 <__gethex+0xd0>
 8014b2e:	b94d      	cbnz	r5, 8014b44 <__gethex+0xc4>
 8014b30:	eb06 050a 	add.w	r5, r6, sl
 8014b34:	462a      	mov	r2, r5
 8014b36:	4616      	mov	r6, r2
 8014b38:	3201      	adds	r2, #1
 8014b3a:	7830      	ldrb	r0, [r6, #0]
 8014b3c:	f7ff ff8a 	bl	8014a54 <__hexdig_fun>
 8014b40:	2800      	cmp	r0, #0
 8014b42:	d1f8      	bne.n	8014b36 <__gethex+0xb6>
 8014b44:	1bad      	subs	r5, r5, r6
 8014b46:	00ad      	lsls	r5, r5, #2
 8014b48:	e004      	b.n	8014b54 <__gethex+0xd4>
 8014b4a:	2400      	movs	r4, #0
 8014b4c:	4625      	mov	r5, r4
 8014b4e:	e7e0      	b.n	8014b12 <__gethex+0x92>
 8014b50:	2d00      	cmp	r5, #0
 8014b52:	d1f7      	bne.n	8014b44 <__gethex+0xc4>
 8014b54:	7833      	ldrb	r3, [r6, #0]
 8014b56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014b5a:	2b50      	cmp	r3, #80	; 0x50
 8014b5c:	d13b      	bne.n	8014bd6 <__gethex+0x156>
 8014b5e:	7873      	ldrb	r3, [r6, #1]
 8014b60:	2b2b      	cmp	r3, #43	; 0x2b
 8014b62:	d02c      	beq.n	8014bbe <__gethex+0x13e>
 8014b64:	2b2d      	cmp	r3, #45	; 0x2d
 8014b66:	d02e      	beq.n	8014bc6 <__gethex+0x146>
 8014b68:	1c71      	adds	r1, r6, #1
 8014b6a:	f04f 0900 	mov.w	r9, #0
 8014b6e:	7808      	ldrb	r0, [r1, #0]
 8014b70:	f7ff ff70 	bl	8014a54 <__hexdig_fun>
 8014b74:	1e43      	subs	r3, r0, #1
 8014b76:	b2db      	uxtb	r3, r3
 8014b78:	2b18      	cmp	r3, #24
 8014b7a:	d82c      	bhi.n	8014bd6 <__gethex+0x156>
 8014b7c:	f1a0 0210 	sub.w	r2, r0, #16
 8014b80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014b84:	f7ff ff66 	bl	8014a54 <__hexdig_fun>
 8014b88:	1e43      	subs	r3, r0, #1
 8014b8a:	b2db      	uxtb	r3, r3
 8014b8c:	2b18      	cmp	r3, #24
 8014b8e:	d91d      	bls.n	8014bcc <__gethex+0x14c>
 8014b90:	f1b9 0f00 	cmp.w	r9, #0
 8014b94:	d000      	beq.n	8014b98 <__gethex+0x118>
 8014b96:	4252      	negs	r2, r2
 8014b98:	4415      	add	r5, r2
 8014b9a:	f8cb 1000 	str.w	r1, [fp]
 8014b9e:	b1e4      	cbz	r4, 8014bda <__gethex+0x15a>
 8014ba0:	9b00      	ldr	r3, [sp, #0]
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	bf14      	ite	ne
 8014ba6:	2700      	movne	r7, #0
 8014ba8:	2706      	moveq	r7, #6
 8014baa:	4638      	mov	r0, r7
 8014bac:	b009      	add	sp, #36	; 0x24
 8014bae:	ecbd 8b02 	vpop	{d8}
 8014bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bb6:	463e      	mov	r6, r7
 8014bb8:	4625      	mov	r5, r4
 8014bba:	2401      	movs	r4, #1
 8014bbc:	e7ca      	b.n	8014b54 <__gethex+0xd4>
 8014bbe:	f04f 0900 	mov.w	r9, #0
 8014bc2:	1cb1      	adds	r1, r6, #2
 8014bc4:	e7d3      	b.n	8014b6e <__gethex+0xee>
 8014bc6:	f04f 0901 	mov.w	r9, #1
 8014bca:	e7fa      	b.n	8014bc2 <__gethex+0x142>
 8014bcc:	230a      	movs	r3, #10
 8014bce:	fb03 0202 	mla	r2, r3, r2, r0
 8014bd2:	3a10      	subs	r2, #16
 8014bd4:	e7d4      	b.n	8014b80 <__gethex+0x100>
 8014bd6:	4631      	mov	r1, r6
 8014bd8:	e7df      	b.n	8014b9a <__gethex+0x11a>
 8014bda:	1bf3      	subs	r3, r6, r7
 8014bdc:	3b01      	subs	r3, #1
 8014bde:	4621      	mov	r1, r4
 8014be0:	2b07      	cmp	r3, #7
 8014be2:	dc0b      	bgt.n	8014bfc <__gethex+0x17c>
 8014be4:	ee18 0a10 	vmov	r0, s16
 8014be8:	f000 faea 	bl	80151c0 <_Balloc>
 8014bec:	4604      	mov	r4, r0
 8014bee:	b940      	cbnz	r0, 8014c02 <__gethex+0x182>
 8014bf0:	4b65      	ldr	r3, [pc, #404]	; (8014d88 <__gethex+0x308>)
 8014bf2:	4602      	mov	r2, r0
 8014bf4:	21de      	movs	r1, #222	; 0xde
 8014bf6:	4865      	ldr	r0, [pc, #404]	; (8014d8c <__gethex+0x30c>)
 8014bf8:	f7fe ff5e 	bl	8013ab8 <__assert_func>
 8014bfc:	3101      	adds	r1, #1
 8014bfe:	105b      	asrs	r3, r3, #1
 8014c00:	e7ee      	b.n	8014be0 <__gethex+0x160>
 8014c02:	f100 0914 	add.w	r9, r0, #20
 8014c06:	f04f 0b00 	mov.w	fp, #0
 8014c0a:	f1ca 0301 	rsb	r3, sl, #1
 8014c0e:	f8cd 9008 	str.w	r9, [sp, #8]
 8014c12:	f8cd b000 	str.w	fp, [sp]
 8014c16:	9306      	str	r3, [sp, #24]
 8014c18:	42b7      	cmp	r7, r6
 8014c1a:	d340      	bcc.n	8014c9e <__gethex+0x21e>
 8014c1c:	9802      	ldr	r0, [sp, #8]
 8014c1e:	9b00      	ldr	r3, [sp, #0]
 8014c20:	f840 3b04 	str.w	r3, [r0], #4
 8014c24:	eba0 0009 	sub.w	r0, r0, r9
 8014c28:	1080      	asrs	r0, r0, #2
 8014c2a:	0146      	lsls	r6, r0, #5
 8014c2c:	6120      	str	r0, [r4, #16]
 8014c2e:	4618      	mov	r0, r3
 8014c30:	f000 fbbc 	bl	80153ac <__hi0bits>
 8014c34:	1a30      	subs	r0, r6, r0
 8014c36:	f8d8 6000 	ldr.w	r6, [r8]
 8014c3a:	42b0      	cmp	r0, r6
 8014c3c:	dd63      	ble.n	8014d06 <__gethex+0x286>
 8014c3e:	1b87      	subs	r7, r0, r6
 8014c40:	4639      	mov	r1, r7
 8014c42:	4620      	mov	r0, r4
 8014c44:	f000 ff56 	bl	8015af4 <__any_on>
 8014c48:	4682      	mov	sl, r0
 8014c4a:	b1a8      	cbz	r0, 8014c78 <__gethex+0x1f8>
 8014c4c:	1e7b      	subs	r3, r7, #1
 8014c4e:	1159      	asrs	r1, r3, #5
 8014c50:	f003 021f 	and.w	r2, r3, #31
 8014c54:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8014c58:	f04f 0a01 	mov.w	sl, #1
 8014c5c:	fa0a f202 	lsl.w	r2, sl, r2
 8014c60:	420a      	tst	r2, r1
 8014c62:	d009      	beq.n	8014c78 <__gethex+0x1f8>
 8014c64:	4553      	cmp	r3, sl
 8014c66:	dd05      	ble.n	8014c74 <__gethex+0x1f4>
 8014c68:	1eb9      	subs	r1, r7, #2
 8014c6a:	4620      	mov	r0, r4
 8014c6c:	f000 ff42 	bl	8015af4 <__any_on>
 8014c70:	2800      	cmp	r0, #0
 8014c72:	d145      	bne.n	8014d00 <__gethex+0x280>
 8014c74:	f04f 0a02 	mov.w	sl, #2
 8014c78:	4639      	mov	r1, r7
 8014c7a:	4620      	mov	r0, r4
 8014c7c:	f7ff fe98 	bl	80149b0 <rshift>
 8014c80:	443d      	add	r5, r7
 8014c82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014c86:	42ab      	cmp	r3, r5
 8014c88:	da4c      	bge.n	8014d24 <__gethex+0x2a4>
 8014c8a:	ee18 0a10 	vmov	r0, s16
 8014c8e:	4621      	mov	r1, r4
 8014c90:	f000 fad6 	bl	8015240 <_Bfree>
 8014c94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014c96:	2300      	movs	r3, #0
 8014c98:	6013      	str	r3, [r2, #0]
 8014c9a:	27a3      	movs	r7, #163	; 0xa3
 8014c9c:	e785      	b.n	8014baa <__gethex+0x12a>
 8014c9e:	1e73      	subs	r3, r6, #1
 8014ca0:	9a05      	ldr	r2, [sp, #20]
 8014ca2:	9303      	str	r3, [sp, #12]
 8014ca4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014ca8:	4293      	cmp	r3, r2
 8014caa:	d019      	beq.n	8014ce0 <__gethex+0x260>
 8014cac:	f1bb 0f20 	cmp.w	fp, #32
 8014cb0:	d107      	bne.n	8014cc2 <__gethex+0x242>
 8014cb2:	9b02      	ldr	r3, [sp, #8]
 8014cb4:	9a00      	ldr	r2, [sp, #0]
 8014cb6:	f843 2b04 	str.w	r2, [r3], #4
 8014cba:	9302      	str	r3, [sp, #8]
 8014cbc:	2300      	movs	r3, #0
 8014cbe:	9300      	str	r3, [sp, #0]
 8014cc0:	469b      	mov	fp, r3
 8014cc2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8014cc6:	f7ff fec5 	bl	8014a54 <__hexdig_fun>
 8014cca:	9b00      	ldr	r3, [sp, #0]
 8014ccc:	f000 000f 	and.w	r0, r0, #15
 8014cd0:	fa00 f00b 	lsl.w	r0, r0, fp
 8014cd4:	4303      	orrs	r3, r0
 8014cd6:	9300      	str	r3, [sp, #0]
 8014cd8:	f10b 0b04 	add.w	fp, fp, #4
 8014cdc:	9b03      	ldr	r3, [sp, #12]
 8014cde:	e00d      	b.n	8014cfc <__gethex+0x27c>
 8014ce0:	9b03      	ldr	r3, [sp, #12]
 8014ce2:	9a06      	ldr	r2, [sp, #24]
 8014ce4:	4413      	add	r3, r2
 8014ce6:	42bb      	cmp	r3, r7
 8014ce8:	d3e0      	bcc.n	8014cac <__gethex+0x22c>
 8014cea:	4618      	mov	r0, r3
 8014cec:	9901      	ldr	r1, [sp, #4]
 8014cee:	9307      	str	r3, [sp, #28]
 8014cf0:	4652      	mov	r2, sl
 8014cf2:	f7fd fec2 	bl	8012a7a <strncmp>
 8014cf6:	9b07      	ldr	r3, [sp, #28]
 8014cf8:	2800      	cmp	r0, #0
 8014cfa:	d1d7      	bne.n	8014cac <__gethex+0x22c>
 8014cfc:	461e      	mov	r6, r3
 8014cfe:	e78b      	b.n	8014c18 <__gethex+0x198>
 8014d00:	f04f 0a03 	mov.w	sl, #3
 8014d04:	e7b8      	b.n	8014c78 <__gethex+0x1f8>
 8014d06:	da0a      	bge.n	8014d1e <__gethex+0x29e>
 8014d08:	1a37      	subs	r7, r6, r0
 8014d0a:	4621      	mov	r1, r4
 8014d0c:	ee18 0a10 	vmov	r0, s16
 8014d10:	463a      	mov	r2, r7
 8014d12:	f000 fcb1 	bl	8015678 <__lshift>
 8014d16:	1bed      	subs	r5, r5, r7
 8014d18:	4604      	mov	r4, r0
 8014d1a:	f100 0914 	add.w	r9, r0, #20
 8014d1e:	f04f 0a00 	mov.w	sl, #0
 8014d22:	e7ae      	b.n	8014c82 <__gethex+0x202>
 8014d24:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014d28:	42a8      	cmp	r0, r5
 8014d2a:	dd72      	ble.n	8014e12 <__gethex+0x392>
 8014d2c:	1b45      	subs	r5, r0, r5
 8014d2e:	42ae      	cmp	r6, r5
 8014d30:	dc36      	bgt.n	8014da0 <__gethex+0x320>
 8014d32:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014d36:	2b02      	cmp	r3, #2
 8014d38:	d02a      	beq.n	8014d90 <__gethex+0x310>
 8014d3a:	2b03      	cmp	r3, #3
 8014d3c:	d02c      	beq.n	8014d98 <__gethex+0x318>
 8014d3e:	2b01      	cmp	r3, #1
 8014d40:	d115      	bne.n	8014d6e <__gethex+0x2ee>
 8014d42:	42ae      	cmp	r6, r5
 8014d44:	d113      	bne.n	8014d6e <__gethex+0x2ee>
 8014d46:	2e01      	cmp	r6, #1
 8014d48:	d10b      	bne.n	8014d62 <__gethex+0x2e2>
 8014d4a:	9a04      	ldr	r2, [sp, #16]
 8014d4c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014d50:	6013      	str	r3, [r2, #0]
 8014d52:	2301      	movs	r3, #1
 8014d54:	6123      	str	r3, [r4, #16]
 8014d56:	f8c9 3000 	str.w	r3, [r9]
 8014d5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014d5c:	2762      	movs	r7, #98	; 0x62
 8014d5e:	601c      	str	r4, [r3, #0]
 8014d60:	e723      	b.n	8014baa <__gethex+0x12a>
 8014d62:	1e71      	subs	r1, r6, #1
 8014d64:	4620      	mov	r0, r4
 8014d66:	f000 fec5 	bl	8015af4 <__any_on>
 8014d6a:	2800      	cmp	r0, #0
 8014d6c:	d1ed      	bne.n	8014d4a <__gethex+0x2ca>
 8014d6e:	ee18 0a10 	vmov	r0, s16
 8014d72:	4621      	mov	r1, r4
 8014d74:	f000 fa64 	bl	8015240 <_Bfree>
 8014d78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014d7a:	2300      	movs	r3, #0
 8014d7c:	6013      	str	r3, [r2, #0]
 8014d7e:	2750      	movs	r7, #80	; 0x50
 8014d80:	e713      	b.n	8014baa <__gethex+0x12a>
 8014d82:	bf00      	nop
 8014d84:	08018874 	.word	0x08018874
 8014d88:	080187f8 	.word	0x080187f8
 8014d8c:	08018809 	.word	0x08018809
 8014d90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d1eb      	bne.n	8014d6e <__gethex+0x2ee>
 8014d96:	e7d8      	b.n	8014d4a <__gethex+0x2ca>
 8014d98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d1d5      	bne.n	8014d4a <__gethex+0x2ca>
 8014d9e:	e7e6      	b.n	8014d6e <__gethex+0x2ee>
 8014da0:	1e6f      	subs	r7, r5, #1
 8014da2:	f1ba 0f00 	cmp.w	sl, #0
 8014da6:	d131      	bne.n	8014e0c <__gethex+0x38c>
 8014da8:	b127      	cbz	r7, 8014db4 <__gethex+0x334>
 8014daa:	4639      	mov	r1, r7
 8014dac:	4620      	mov	r0, r4
 8014dae:	f000 fea1 	bl	8015af4 <__any_on>
 8014db2:	4682      	mov	sl, r0
 8014db4:	117b      	asrs	r3, r7, #5
 8014db6:	2101      	movs	r1, #1
 8014db8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8014dbc:	f007 071f 	and.w	r7, r7, #31
 8014dc0:	fa01 f707 	lsl.w	r7, r1, r7
 8014dc4:	421f      	tst	r7, r3
 8014dc6:	4629      	mov	r1, r5
 8014dc8:	4620      	mov	r0, r4
 8014dca:	bf18      	it	ne
 8014dcc:	f04a 0a02 	orrne.w	sl, sl, #2
 8014dd0:	1b76      	subs	r6, r6, r5
 8014dd2:	f7ff fded 	bl	80149b0 <rshift>
 8014dd6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014dda:	2702      	movs	r7, #2
 8014ddc:	f1ba 0f00 	cmp.w	sl, #0
 8014de0:	d048      	beq.n	8014e74 <__gethex+0x3f4>
 8014de2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014de6:	2b02      	cmp	r3, #2
 8014de8:	d015      	beq.n	8014e16 <__gethex+0x396>
 8014dea:	2b03      	cmp	r3, #3
 8014dec:	d017      	beq.n	8014e1e <__gethex+0x39e>
 8014dee:	2b01      	cmp	r3, #1
 8014df0:	d109      	bne.n	8014e06 <__gethex+0x386>
 8014df2:	f01a 0f02 	tst.w	sl, #2
 8014df6:	d006      	beq.n	8014e06 <__gethex+0x386>
 8014df8:	f8d9 0000 	ldr.w	r0, [r9]
 8014dfc:	ea4a 0a00 	orr.w	sl, sl, r0
 8014e00:	f01a 0f01 	tst.w	sl, #1
 8014e04:	d10e      	bne.n	8014e24 <__gethex+0x3a4>
 8014e06:	f047 0710 	orr.w	r7, r7, #16
 8014e0a:	e033      	b.n	8014e74 <__gethex+0x3f4>
 8014e0c:	f04f 0a01 	mov.w	sl, #1
 8014e10:	e7d0      	b.n	8014db4 <__gethex+0x334>
 8014e12:	2701      	movs	r7, #1
 8014e14:	e7e2      	b.n	8014ddc <__gethex+0x35c>
 8014e16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014e18:	f1c3 0301 	rsb	r3, r3, #1
 8014e1c:	9315      	str	r3, [sp, #84]	; 0x54
 8014e1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d0f0      	beq.n	8014e06 <__gethex+0x386>
 8014e24:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014e28:	f104 0314 	add.w	r3, r4, #20
 8014e2c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8014e30:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8014e34:	f04f 0c00 	mov.w	ip, #0
 8014e38:	4618      	mov	r0, r3
 8014e3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e3e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014e42:	d01c      	beq.n	8014e7e <__gethex+0x3fe>
 8014e44:	3201      	adds	r2, #1
 8014e46:	6002      	str	r2, [r0, #0]
 8014e48:	2f02      	cmp	r7, #2
 8014e4a:	f104 0314 	add.w	r3, r4, #20
 8014e4e:	d13f      	bne.n	8014ed0 <__gethex+0x450>
 8014e50:	f8d8 2000 	ldr.w	r2, [r8]
 8014e54:	3a01      	subs	r2, #1
 8014e56:	42b2      	cmp	r2, r6
 8014e58:	d10a      	bne.n	8014e70 <__gethex+0x3f0>
 8014e5a:	1171      	asrs	r1, r6, #5
 8014e5c:	2201      	movs	r2, #1
 8014e5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014e62:	f006 061f 	and.w	r6, r6, #31
 8014e66:	fa02 f606 	lsl.w	r6, r2, r6
 8014e6a:	421e      	tst	r6, r3
 8014e6c:	bf18      	it	ne
 8014e6e:	4617      	movne	r7, r2
 8014e70:	f047 0720 	orr.w	r7, r7, #32
 8014e74:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014e76:	601c      	str	r4, [r3, #0]
 8014e78:	9b04      	ldr	r3, [sp, #16]
 8014e7a:	601d      	str	r5, [r3, #0]
 8014e7c:	e695      	b.n	8014baa <__gethex+0x12a>
 8014e7e:	4299      	cmp	r1, r3
 8014e80:	f843 cc04 	str.w	ip, [r3, #-4]
 8014e84:	d8d8      	bhi.n	8014e38 <__gethex+0x3b8>
 8014e86:	68a3      	ldr	r3, [r4, #8]
 8014e88:	459b      	cmp	fp, r3
 8014e8a:	db19      	blt.n	8014ec0 <__gethex+0x440>
 8014e8c:	6861      	ldr	r1, [r4, #4]
 8014e8e:	ee18 0a10 	vmov	r0, s16
 8014e92:	3101      	adds	r1, #1
 8014e94:	f000 f994 	bl	80151c0 <_Balloc>
 8014e98:	4681      	mov	r9, r0
 8014e9a:	b918      	cbnz	r0, 8014ea4 <__gethex+0x424>
 8014e9c:	4b1a      	ldr	r3, [pc, #104]	; (8014f08 <__gethex+0x488>)
 8014e9e:	4602      	mov	r2, r0
 8014ea0:	2184      	movs	r1, #132	; 0x84
 8014ea2:	e6a8      	b.n	8014bf6 <__gethex+0x176>
 8014ea4:	6922      	ldr	r2, [r4, #16]
 8014ea6:	3202      	adds	r2, #2
 8014ea8:	f104 010c 	add.w	r1, r4, #12
 8014eac:	0092      	lsls	r2, r2, #2
 8014eae:	300c      	adds	r0, #12
 8014eb0:	f7fc fcac 	bl	801180c <memcpy>
 8014eb4:	4621      	mov	r1, r4
 8014eb6:	ee18 0a10 	vmov	r0, s16
 8014eba:	f000 f9c1 	bl	8015240 <_Bfree>
 8014ebe:	464c      	mov	r4, r9
 8014ec0:	6923      	ldr	r3, [r4, #16]
 8014ec2:	1c5a      	adds	r2, r3, #1
 8014ec4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014ec8:	6122      	str	r2, [r4, #16]
 8014eca:	2201      	movs	r2, #1
 8014ecc:	615a      	str	r2, [r3, #20]
 8014ece:	e7bb      	b.n	8014e48 <__gethex+0x3c8>
 8014ed0:	6922      	ldr	r2, [r4, #16]
 8014ed2:	455a      	cmp	r2, fp
 8014ed4:	dd0b      	ble.n	8014eee <__gethex+0x46e>
 8014ed6:	2101      	movs	r1, #1
 8014ed8:	4620      	mov	r0, r4
 8014eda:	f7ff fd69 	bl	80149b0 <rshift>
 8014ede:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014ee2:	3501      	adds	r5, #1
 8014ee4:	42ab      	cmp	r3, r5
 8014ee6:	f6ff aed0 	blt.w	8014c8a <__gethex+0x20a>
 8014eea:	2701      	movs	r7, #1
 8014eec:	e7c0      	b.n	8014e70 <__gethex+0x3f0>
 8014eee:	f016 061f 	ands.w	r6, r6, #31
 8014ef2:	d0fa      	beq.n	8014eea <__gethex+0x46a>
 8014ef4:	449a      	add	sl, r3
 8014ef6:	f1c6 0620 	rsb	r6, r6, #32
 8014efa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8014efe:	f000 fa55 	bl	80153ac <__hi0bits>
 8014f02:	42b0      	cmp	r0, r6
 8014f04:	dbe7      	blt.n	8014ed6 <__gethex+0x456>
 8014f06:	e7f0      	b.n	8014eea <__gethex+0x46a>
 8014f08:	080187f8 	.word	0x080187f8

08014f0c <L_shift>:
 8014f0c:	f1c2 0208 	rsb	r2, r2, #8
 8014f10:	0092      	lsls	r2, r2, #2
 8014f12:	b570      	push	{r4, r5, r6, lr}
 8014f14:	f1c2 0620 	rsb	r6, r2, #32
 8014f18:	6843      	ldr	r3, [r0, #4]
 8014f1a:	6804      	ldr	r4, [r0, #0]
 8014f1c:	fa03 f506 	lsl.w	r5, r3, r6
 8014f20:	432c      	orrs	r4, r5
 8014f22:	40d3      	lsrs	r3, r2
 8014f24:	6004      	str	r4, [r0, #0]
 8014f26:	f840 3f04 	str.w	r3, [r0, #4]!
 8014f2a:	4288      	cmp	r0, r1
 8014f2c:	d3f4      	bcc.n	8014f18 <L_shift+0xc>
 8014f2e:	bd70      	pop	{r4, r5, r6, pc}

08014f30 <__match>:
 8014f30:	b530      	push	{r4, r5, lr}
 8014f32:	6803      	ldr	r3, [r0, #0]
 8014f34:	3301      	adds	r3, #1
 8014f36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014f3a:	b914      	cbnz	r4, 8014f42 <__match+0x12>
 8014f3c:	6003      	str	r3, [r0, #0]
 8014f3e:	2001      	movs	r0, #1
 8014f40:	bd30      	pop	{r4, r5, pc}
 8014f42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014f46:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014f4a:	2d19      	cmp	r5, #25
 8014f4c:	bf98      	it	ls
 8014f4e:	3220      	addls	r2, #32
 8014f50:	42a2      	cmp	r2, r4
 8014f52:	d0f0      	beq.n	8014f36 <__match+0x6>
 8014f54:	2000      	movs	r0, #0
 8014f56:	e7f3      	b.n	8014f40 <__match+0x10>

08014f58 <__hexnan>:
 8014f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f5c:	680b      	ldr	r3, [r1, #0]
 8014f5e:	6801      	ldr	r1, [r0, #0]
 8014f60:	115e      	asrs	r6, r3, #5
 8014f62:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014f66:	f013 031f 	ands.w	r3, r3, #31
 8014f6a:	b087      	sub	sp, #28
 8014f6c:	bf18      	it	ne
 8014f6e:	3604      	addne	r6, #4
 8014f70:	2500      	movs	r5, #0
 8014f72:	1f37      	subs	r7, r6, #4
 8014f74:	4682      	mov	sl, r0
 8014f76:	4690      	mov	r8, r2
 8014f78:	9301      	str	r3, [sp, #4]
 8014f7a:	f846 5c04 	str.w	r5, [r6, #-4]
 8014f7e:	46b9      	mov	r9, r7
 8014f80:	463c      	mov	r4, r7
 8014f82:	9502      	str	r5, [sp, #8]
 8014f84:	46ab      	mov	fp, r5
 8014f86:	784a      	ldrb	r2, [r1, #1]
 8014f88:	1c4b      	adds	r3, r1, #1
 8014f8a:	9303      	str	r3, [sp, #12]
 8014f8c:	b342      	cbz	r2, 8014fe0 <__hexnan+0x88>
 8014f8e:	4610      	mov	r0, r2
 8014f90:	9105      	str	r1, [sp, #20]
 8014f92:	9204      	str	r2, [sp, #16]
 8014f94:	f7ff fd5e 	bl	8014a54 <__hexdig_fun>
 8014f98:	2800      	cmp	r0, #0
 8014f9a:	d14f      	bne.n	801503c <__hexnan+0xe4>
 8014f9c:	9a04      	ldr	r2, [sp, #16]
 8014f9e:	9905      	ldr	r1, [sp, #20]
 8014fa0:	2a20      	cmp	r2, #32
 8014fa2:	d818      	bhi.n	8014fd6 <__hexnan+0x7e>
 8014fa4:	9b02      	ldr	r3, [sp, #8]
 8014fa6:	459b      	cmp	fp, r3
 8014fa8:	dd13      	ble.n	8014fd2 <__hexnan+0x7a>
 8014faa:	454c      	cmp	r4, r9
 8014fac:	d206      	bcs.n	8014fbc <__hexnan+0x64>
 8014fae:	2d07      	cmp	r5, #7
 8014fb0:	dc04      	bgt.n	8014fbc <__hexnan+0x64>
 8014fb2:	462a      	mov	r2, r5
 8014fb4:	4649      	mov	r1, r9
 8014fb6:	4620      	mov	r0, r4
 8014fb8:	f7ff ffa8 	bl	8014f0c <L_shift>
 8014fbc:	4544      	cmp	r4, r8
 8014fbe:	d950      	bls.n	8015062 <__hexnan+0x10a>
 8014fc0:	2300      	movs	r3, #0
 8014fc2:	f1a4 0904 	sub.w	r9, r4, #4
 8014fc6:	f844 3c04 	str.w	r3, [r4, #-4]
 8014fca:	f8cd b008 	str.w	fp, [sp, #8]
 8014fce:	464c      	mov	r4, r9
 8014fd0:	461d      	mov	r5, r3
 8014fd2:	9903      	ldr	r1, [sp, #12]
 8014fd4:	e7d7      	b.n	8014f86 <__hexnan+0x2e>
 8014fd6:	2a29      	cmp	r2, #41	; 0x29
 8014fd8:	d156      	bne.n	8015088 <__hexnan+0x130>
 8014fda:	3102      	adds	r1, #2
 8014fdc:	f8ca 1000 	str.w	r1, [sl]
 8014fe0:	f1bb 0f00 	cmp.w	fp, #0
 8014fe4:	d050      	beq.n	8015088 <__hexnan+0x130>
 8014fe6:	454c      	cmp	r4, r9
 8014fe8:	d206      	bcs.n	8014ff8 <__hexnan+0xa0>
 8014fea:	2d07      	cmp	r5, #7
 8014fec:	dc04      	bgt.n	8014ff8 <__hexnan+0xa0>
 8014fee:	462a      	mov	r2, r5
 8014ff0:	4649      	mov	r1, r9
 8014ff2:	4620      	mov	r0, r4
 8014ff4:	f7ff ff8a 	bl	8014f0c <L_shift>
 8014ff8:	4544      	cmp	r4, r8
 8014ffa:	d934      	bls.n	8015066 <__hexnan+0x10e>
 8014ffc:	f1a8 0204 	sub.w	r2, r8, #4
 8015000:	4623      	mov	r3, r4
 8015002:	f853 1b04 	ldr.w	r1, [r3], #4
 8015006:	f842 1f04 	str.w	r1, [r2, #4]!
 801500a:	429f      	cmp	r7, r3
 801500c:	d2f9      	bcs.n	8015002 <__hexnan+0xaa>
 801500e:	1b3b      	subs	r3, r7, r4
 8015010:	f023 0303 	bic.w	r3, r3, #3
 8015014:	3304      	adds	r3, #4
 8015016:	3401      	adds	r4, #1
 8015018:	3e03      	subs	r6, #3
 801501a:	42b4      	cmp	r4, r6
 801501c:	bf88      	it	hi
 801501e:	2304      	movhi	r3, #4
 8015020:	4443      	add	r3, r8
 8015022:	2200      	movs	r2, #0
 8015024:	f843 2b04 	str.w	r2, [r3], #4
 8015028:	429f      	cmp	r7, r3
 801502a:	d2fb      	bcs.n	8015024 <__hexnan+0xcc>
 801502c:	683b      	ldr	r3, [r7, #0]
 801502e:	b91b      	cbnz	r3, 8015038 <__hexnan+0xe0>
 8015030:	4547      	cmp	r7, r8
 8015032:	d127      	bne.n	8015084 <__hexnan+0x12c>
 8015034:	2301      	movs	r3, #1
 8015036:	603b      	str	r3, [r7, #0]
 8015038:	2005      	movs	r0, #5
 801503a:	e026      	b.n	801508a <__hexnan+0x132>
 801503c:	3501      	adds	r5, #1
 801503e:	2d08      	cmp	r5, #8
 8015040:	f10b 0b01 	add.w	fp, fp, #1
 8015044:	dd06      	ble.n	8015054 <__hexnan+0xfc>
 8015046:	4544      	cmp	r4, r8
 8015048:	d9c3      	bls.n	8014fd2 <__hexnan+0x7a>
 801504a:	2300      	movs	r3, #0
 801504c:	f844 3c04 	str.w	r3, [r4, #-4]
 8015050:	2501      	movs	r5, #1
 8015052:	3c04      	subs	r4, #4
 8015054:	6822      	ldr	r2, [r4, #0]
 8015056:	f000 000f 	and.w	r0, r0, #15
 801505a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801505e:	6022      	str	r2, [r4, #0]
 8015060:	e7b7      	b.n	8014fd2 <__hexnan+0x7a>
 8015062:	2508      	movs	r5, #8
 8015064:	e7b5      	b.n	8014fd2 <__hexnan+0x7a>
 8015066:	9b01      	ldr	r3, [sp, #4]
 8015068:	2b00      	cmp	r3, #0
 801506a:	d0df      	beq.n	801502c <__hexnan+0xd4>
 801506c:	f04f 32ff 	mov.w	r2, #4294967295
 8015070:	f1c3 0320 	rsb	r3, r3, #32
 8015074:	fa22 f303 	lsr.w	r3, r2, r3
 8015078:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801507c:	401a      	ands	r2, r3
 801507e:	f846 2c04 	str.w	r2, [r6, #-4]
 8015082:	e7d3      	b.n	801502c <__hexnan+0xd4>
 8015084:	3f04      	subs	r7, #4
 8015086:	e7d1      	b.n	801502c <__hexnan+0xd4>
 8015088:	2004      	movs	r0, #4
 801508a:	b007      	add	sp, #28
 801508c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015090 <_localeconv_r>:
 8015090:	4800      	ldr	r0, [pc, #0]	; (8015094 <_localeconv_r+0x4>)
 8015092:	4770      	bx	lr
 8015094:	200001a4 	.word	0x200001a4

08015098 <_lseek_r>:
 8015098:	b538      	push	{r3, r4, r5, lr}
 801509a:	4d07      	ldr	r5, [pc, #28]	; (80150b8 <_lseek_r+0x20>)
 801509c:	4604      	mov	r4, r0
 801509e:	4608      	mov	r0, r1
 80150a0:	4611      	mov	r1, r2
 80150a2:	2200      	movs	r2, #0
 80150a4:	602a      	str	r2, [r5, #0]
 80150a6:	461a      	mov	r2, r3
 80150a8:	f7ed ff0c 	bl	8002ec4 <_lseek>
 80150ac:	1c43      	adds	r3, r0, #1
 80150ae:	d102      	bne.n	80150b6 <_lseek_r+0x1e>
 80150b0:	682b      	ldr	r3, [r5, #0]
 80150b2:	b103      	cbz	r3, 80150b6 <_lseek_r+0x1e>
 80150b4:	6023      	str	r3, [r4, #0]
 80150b6:	bd38      	pop	{r3, r4, r5, pc}
 80150b8:	20006118 	.word	0x20006118

080150bc <__swhatbuf_r>:
 80150bc:	b570      	push	{r4, r5, r6, lr}
 80150be:	460e      	mov	r6, r1
 80150c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150c4:	2900      	cmp	r1, #0
 80150c6:	b096      	sub	sp, #88	; 0x58
 80150c8:	4614      	mov	r4, r2
 80150ca:	461d      	mov	r5, r3
 80150cc:	da07      	bge.n	80150de <__swhatbuf_r+0x22>
 80150ce:	2300      	movs	r3, #0
 80150d0:	602b      	str	r3, [r5, #0]
 80150d2:	89b3      	ldrh	r3, [r6, #12]
 80150d4:	061a      	lsls	r2, r3, #24
 80150d6:	d410      	bmi.n	80150fa <__swhatbuf_r+0x3e>
 80150d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80150dc:	e00e      	b.n	80150fc <__swhatbuf_r+0x40>
 80150de:	466a      	mov	r2, sp
 80150e0:	f001 fbc6 	bl	8016870 <_fstat_r>
 80150e4:	2800      	cmp	r0, #0
 80150e6:	dbf2      	blt.n	80150ce <__swhatbuf_r+0x12>
 80150e8:	9a01      	ldr	r2, [sp, #4]
 80150ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80150ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80150f2:	425a      	negs	r2, r3
 80150f4:	415a      	adcs	r2, r3
 80150f6:	602a      	str	r2, [r5, #0]
 80150f8:	e7ee      	b.n	80150d8 <__swhatbuf_r+0x1c>
 80150fa:	2340      	movs	r3, #64	; 0x40
 80150fc:	2000      	movs	r0, #0
 80150fe:	6023      	str	r3, [r4, #0]
 8015100:	b016      	add	sp, #88	; 0x58
 8015102:	bd70      	pop	{r4, r5, r6, pc}

08015104 <__smakebuf_r>:
 8015104:	898b      	ldrh	r3, [r1, #12]
 8015106:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015108:	079d      	lsls	r5, r3, #30
 801510a:	4606      	mov	r6, r0
 801510c:	460c      	mov	r4, r1
 801510e:	d507      	bpl.n	8015120 <__smakebuf_r+0x1c>
 8015110:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015114:	6023      	str	r3, [r4, #0]
 8015116:	6123      	str	r3, [r4, #16]
 8015118:	2301      	movs	r3, #1
 801511a:	6163      	str	r3, [r4, #20]
 801511c:	b002      	add	sp, #8
 801511e:	bd70      	pop	{r4, r5, r6, pc}
 8015120:	ab01      	add	r3, sp, #4
 8015122:	466a      	mov	r2, sp
 8015124:	f7ff ffca 	bl	80150bc <__swhatbuf_r>
 8015128:	9900      	ldr	r1, [sp, #0]
 801512a:	4605      	mov	r5, r0
 801512c:	4630      	mov	r0, r6
 801512e:	f7fc fbed 	bl	801190c <_malloc_r>
 8015132:	b948      	cbnz	r0, 8015148 <__smakebuf_r+0x44>
 8015134:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015138:	059a      	lsls	r2, r3, #22
 801513a:	d4ef      	bmi.n	801511c <__smakebuf_r+0x18>
 801513c:	f023 0303 	bic.w	r3, r3, #3
 8015140:	f043 0302 	orr.w	r3, r3, #2
 8015144:	81a3      	strh	r3, [r4, #12]
 8015146:	e7e3      	b.n	8015110 <__smakebuf_r+0xc>
 8015148:	4b0d      	ldr	r3, [pc, #52]	; (8015180 <__smakebuf_r+0x7c>)
 801514a:	62b3      	str	r3, [r6, #40]	; 0x28
 801514c:	89a3      	ldrh	r3, [r4, #12]
 801514e:	6020      	str	r0, [r4, #0]
 8015150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015154:	81a3      	strh	r3, [r4, #12]
 8015156:	9b00      	ldr	r3, [sp, #0]
 8015158:	6163      	str	r3, [r4, #20]
 801515a:	9b01      	ldr	r3, [sp, #4]
 801515c:	6120      	str	r0, [r4, #16]
 801515e:	b15b      	cbz	r3, 8015178 <__smakebuf_r+0x74>
 8015160:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015164:	4630      	mov	r0, r6
 8015166:	f001 fb95 	bl	8016894 <_isatty_r>
 801516a:	b128      	cbz	r0, 8015178 <__smakebuf_r+0x74>
 801516c:	89a3      	ldrh	r3, [r4, #12]
 801516e:	f023 0303 	bic.w	r3, r3, #3
 8015172:	f043 0301 	orr.w	r3, r3, #1
 8015176:	81a3      	strh	r3, [r4, #12]
 8015178:	89a0      	ldrh	r0, [r4, #12]
 801517a:	4305      	orrs	r5, r0
 801517c:	81a5      	strh	r5, [r4, #12]
 801517e:	e7cd      	b.n	801511c <__smakebuf_r+0x18>
 8015180:	080115f9 	.word	0x080115f9

08015184 <__ascii_mbtowc>:
 8015184:	b082      	sub	sp, #8
 8015186:	b901      	cbnz	r1, 801518a <__ascii_mbtowc+0x6>
 8015188:	a901      	add	r1, sp, #4
 801518a:	b142      	cbz	r2, 801519e <__ascii_mbtowc+0x1a>
 801518c:	b14b      	cbz	r3, 80151a2 <__ascii_mbtowc+0x1e>
 801518e:	7813      	ldrb	r3, [r2, #0]
 8015190:	600b      	str	r3, [r1, #0]
 8015192:	7812      	ldrb	r2, [r2, #0]
 8015194:	1e10      	subs	r0, r2, #0
 8015196:	bf18      	it	ne
 8015198:	2001      	movne	r0, #1
 801519a:	b002      	add	sp, #8
 801519c:	4770      	bx	lr
 801519e:	4610      	mov	r0, r2
 80151a0:	e7fb      	b.n	801519a <__ascii_mbtowc+0x16>
 80151a2:	f06f 0001 	mvn.w	r0, #1
 80151a6:	e7f8      	b.n	801519a <__ascii_mbtowc+0x16>

080151a8 <__malloc_lock>:
 80151a8:	4801      	ldr	r0, [pc, #4]	; (80151b0 <__malloc_lock+0x8>)
 80151aa:	f7fc bb1c 	b.w	80117e6 <__retarget_lock_acquire_recursive>
 80151ae:	bf00      	nop
 80151b0:	20006110 	.word	0x20006110

080151b4 <__malloc_unlock>:
 80151b4:	4801      	ldr	r0, [pc, #4]	; (80151bc <__malloc_unlock+0x8>)
 80151b6:	f7fc bb17 	b.w	80117e8 <__retarget_lock_release_recursive>
 80151ba:	bf00      	nop
 80151bc:	20006110 	.word	0x20006110

080151c0 <_Balloc>:
 80151c0:	b570      	push	{r4, r5, r6, lr}
 80151c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80151c4:	4604      	mov	r4, r0
 80151c6:	460d      	mov	r5, r1
 80151c8:	b976      	cbnz	r6, 80151e8 <_Balloc+0x28>
 80151ca:	2010      	movs	r0, #16
 80151cc:	f7fc fb0e 	bl	80117ec <malloc>
 80151d0:	4602      	mov	r2, r0
 80151d2:	6260      	str	r0, [r4, #36]	; 0x24
 80151d4:	b920      	cbnz	r0, 80151e0 <_Balloc+0x20>
 80151d6:	4b18      	ldr	r3, [pc, #96]	; (8015238 <_Balloc+0x78>)
 80151d8:	4818      	ldr	r0, [pc, #96]	; (801523c <_Balloc+0x7c>)
 80151da:	2166      	movs	r1, #102	; 0x66
 80151dc:	f7fe fc6c 	bl	8013ab8 <__assert_func>
 80151e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80151e4:	6006      	str	r6, [r0, #0]
 80151e6:	60c6      	str	r6, [r0, #12]
 80151e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80151ea:	68f3      	ldr	r3, [r6, #12]
 80151ec:	b183      	cbz	r3, 8015210 <_Balloc+0x50>
 80151ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80151f0:	68db      	ldr	r3, [r3, #12]
 80151f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80151f6:	b9b8      	cbnz	r0, 8015228 <_Balloc+0x68>
 80151f8:	2101      	movs	r1, #1
 80151fa:	fa01 f605 	lsl.w	r6, r1, r5
 80151fe:	1d72      	adds	r2, r6, #5
 8015200:	0092      	lsls	r2, r2, #2
 8015202:	4620      	mov	r0, r4
 8015204:	f000 fc97 	bl	8015b36 <_calloc_r>
 8015208:	b160      	cbz	r0, 8015224 <_Balloc+0x64>
 801520a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801520e:	e00e      	b.n	801522e <_Balloc+0x6e>
 8015210:	2221      	movs	r2, #33	; 0x21
 8015212:	2104      	movs	r1, #4
 8015214:	4620      	mov	r0, r4
 8015216:	f000 fc8e 	bl	8015b36 <_calloc_r>
 801521a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801521c:	60f0      	str	r0, [r6, #12]
 801521e:	68db      	ldr	r3, [r3, #12]
 8015220:	2b00      	cmp	r3, #0
 8015222:	d1e4      	bne.n	80151ee <_Balloc+0x2e>
 8015224:	2000      	movs	r0, #0
 8015226:	bd70      	pop	{r4, r5, r6, pc}
 8015228:	6802      	ldr	r2, [r0, #0]
 801522a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801522e:	2300      	movs	r3, #0
 8015230:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015234:	e7f7      	b.n	8015226 <_Balloc+0x66>
 8015236:	bf00      	nop
 8015238:	08018782 	.word	0x08018782
 801523c:	08018888 	.word	0x08018888

08015240 <_Bfree>:
 8015240:	b570      	push	{r4, r5, r6, lr}
 8015242:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015244:	4605      	mov	r5, r0
 8015246:	460c      	mov	r4, r1
 8015248:	b976      	cbnz	r6, 8015268 <_Bfree+0x28>
 801524a:	2010      	movs	r0, #16
 801524c:	f7fc face 	bl	80117ec <malloc>
 8015250:	4602      	mov	r2, r0
 8015252:	6268      	str	r0, [r5, #36]	; 0x24
 8015254:	b920      	cbnz	r0, 8015260 <_Bfree+0x20>
 8015256:	4b09      	ldr	r3, [pc, #36]	; (801527c <_Bfree+0x3c>)
 8015258:	4809      	ldr	r0, [pc, #36]	; (8015280 <_Bfree+0x40>)
 801525a:	218a      	movs	r1, #138	; 0x8a
 801525c:	f7fe fc2c 	bl	8013ab8 <__assert_func>
 8015260:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015264:	6006      	str	r6, [r0, #0]
 8015266:	60c6      	str	r6, [r0, #12]
 8015268:	b13c      	cbz	r4, 801527a <_Bfree+0x3a>
 801526a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801526c:	6862      	ldr	r2, [r4, #4]
 801526e:	68db      	ldr	r3, [r3, #12]
 8015270:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015274:	6021      	str	r1, [r4, #0]
 8015276:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801527a:	bd70      	pop	{r4, r5, r6, pc}
 801527c:	08018782 	.word	0x08018782
 8015280:	08018888 	.word	0x08018888

08015284 <__multadd>:
 8015284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015288:	690e      	ldr	r6, [r1, #16]
 801528a:	4607      	mov	r7, r0
 801528c:	4698      	mov	r8, r3
 801528e:	460c      	mov	r4, r1
 8015290:	f101 0014 	add.w	r0, r1, #20
 8015294:	2300      	movs	r3, #0
 8015296:	6805      	ldr	r5, [r0, #0]
 8015298:	b2a9      	uxth	r1, r5
 801529a:	fb02 8101 	mla	r1, r2, r1, r8
 801529e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80152a2:	0c2d      	lsrs	r5, r5, #16
 80152a4:	fb02 c505 	mla	r5, r2, r5, ip
 80152a8:	b289      	uxth	r1, r1
 80152aa:	3301      	adds	r3, #1
 80152ac:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80152b0:	429e      	cmp	r6, r3
 80152b2:	f840 1b04 	str.w	r1, [r0], #4
 80152b6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80152ba:	dcec      	bgt.n	8015296 <__multadd+0x12>
 80152bc:	f1b8 0f00 	cmp.w	r8, #0
 80152c0:	d022      	beq.n	8015308 <__multadd+0x84>
 80152c2:	68a3      	ldr	r3, [r4, #8]
 80152c4:	42b3      	cmp	r3, r6
 80152c6:	dc19      	bgt.n	80152fc <__multadd+0x78>
 80152c8:	6861      	ldr	r1, [r4, #4]
 80152ca:	4638      	mov	r0, r7
 80152cc:	3101      	adds	r1, #1
 80152ce:	f7ff ff77 	bl	80151c0 <_Balloc>
 80152d2:	4605      	mov	r5, r0
 80152d4:	b928      	cbnz	r0, 80152e2 <__multadd+0x5e>
 80152d6:	4602      	mov	r2, r0
 80152d8:	4b0d      	ldr	r3, [pc, #52]	; (8015310 <__multadd+0x8c>)
 80152da:	480e      	ldr	r0, [pc, #56]	; (8015314 <__multadd+0x90>)
 80152dc:	21b5      	movs	r1, #181	; 0xb5
 80152de:	f7fe fbeb 	bl	8013ab8 <__assert_func>
 80152e2:	6922      	ldr	r2, [r4, #16]
 80152e4:	3202      	adds	r2, #2
 80152e6:	f104 010c 	add.w	r1, r4, #12
 80152ea:	0092      	lsls	r2, r2, #2
 80152ec:	300c      	adds	r0, #12
 80152ee:	f7fc fa8d 	bl	801180c <memcpy>
 80152f2:	4621      	mov	r1, r4
 80152f4:	4638      	mov	r0, r7
 80152f6:	f7ff ffa3 	bl	8015240 <_Bfree>
 80152fa:	462c      	mov	r4, r5
 80152fc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8015300:	3601      	adds	r6, #1
 8015302:	f8c3 8014 	str.w	r8, [r3, #20]
 8015306:	6126      	str	r6, [r4, #16]
 8015308:	4620      	mov	r0, r4
 801530a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801530e:	bf00      	nop
 8015310:	080187f8 	.word	0x080187f8
 8015314:	08018888 	.word	0x08018888

08015318 <__s2b>:
 8015318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801531c:	460c      	mov	r4, r1
 801531e:	4615      	mov	r5, r2
 8015320:	461f      	mov	r7, r3
 8015322:	2209      	movs	r2, #9
 8015324:	3308      	adds	r3, #8
 8015326:	4606      	mov	r6, r0
 8015328:	fb93 f3f2 	sdiv	r3, r3, r2
 801532c:	2100      	movs	r1, #0
 801532e:	2201      	movs	r2, #1
 8015330:	429a      	cmp	r2, r3
 8015332:	db09      	blt.n	8015348 <__s2b+0x30>
 8015334:	4630      	mov	r0, r6
 8015336:	f7ff ff43 	bl	80151c0 <_Balloc>
 801533a:	b940      	cbnz	r0, 801534e <__s2b+0x36>
 801533c:	4602      	mov	r2, r0
 801533e:	4b19      	ldr	r3, [pc, #100]	; (80153a4 <__s2b+0x8c>)
 8015340:	4819      	ldr	r0, [pc, #100]	; (80153a8 <__s2b+0x90>)
 8015342:	21ce      	movs	r1, #206	; 0xce
 8015344:	f7fe fbb8 	bl	8013ab8 <__assert_func>
 8015348:	0052      	lsls	r2, r2, #1
 801534a:	3101      	adds	r1, #1
 801534c:	e7f0      	b.n	8015330 <__s2b+0x18>
 801534e:	9b08      	ldr	r3, [sp, #32]
 8015350:	6143      	str	r3, [r0, #20]
 8015352:	2d09      	cmp	r5, #9
 8015354:	f04f 0301 	mov.w	r3, #1
 8015358:	6103      	str	r3, [r0, #16]
 801535a:	dd16      	ble.n	801538a <__s2b+0x72>
 801535c:	f104 0909 	add.w	r9, r4, #9
 8015360:	46c8      	mov	r8, r9
 8015362:	442c      	add	r4, r5
 8015364:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015368:	4601      	mov	r1, r0
 801536a:	3b30      	subs	r3, #48	; 0x30
 801536c:	220a      	movs	r2, #10
 801536e:	4630      	mov	r0, r6
 8015370:	f7ff ff88 	bl	8015284 <__multadd>
 8015374:	45a0      	cmp	r8, r4
 8015376:	d1f5      	bne.n	8015364 <__s2b+0x4c>
 8015378:	f1a5 0408 	sub.w	r4, r5, #8
 801537c:	444c      	add	r4, r9
 801537e:	1b2d      	subs	r5, r5, r4
 8015380:	1963      	adds	r3, r4, r5
 8015382:	42bb      	cmp	r3, r7
 8015384:	db04      	blt.n	8015390 <__s2b+0x78>
 8015386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801538a:	340a      	adds	r4, #10
 801538c:	2509      	movs	r5, #9
 801538e:	e7f6      	b.n	801537e <__s2b+0x66>
 8015390:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015394:	4601      	mov	r1, r0
 8015396:	3b30      	subs	r3, #48	; 0x30
 8015398:	220a      	movs	r2, #10
 801539a:	4630      	mov	r0, r6
 801539c:	f7ff ff72 	bl	8015284 <__multadd>
 80153a0:	e7ee      	b.n	8015380 <__s2b+0x68>
 80153a2:	bf00      	nop
 80153a4:	080187f8 	.word	0x080187f8
 80153a8:	08018888 	.word	0x08018888

080153ac <__hi0bits>:
 80153ac:	0c03      	lsrs	r3, r0, #16
 80153ae:	041b      	lsls	r3, r3, #16
 80153b0:	b9d3      	cbnz	r3, 80153e8 <__hi0bits+0x3c>
 80153b2:	0400      	lsls	r0, r0, #16
 80153b4:	2310      	movs	r3, #16
 80153b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80153ba:	bf04      	itt	eq
 80153bc:	0200      	lsleq	r0, r0, #8
 80153be:	3308      	addeq	r3, #8
 80153c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80153c4:	bf04      	itt	eq
 80153c6:	0100      	lsleq	r0, r0, #4
 80153c8:	3304      	addeq	r3, #4
 80153ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80153ce:	bf04      	itt	eq
 80153d0:	0080      	lsleq	r0, r0, #2
 80153d2:	3302      	addeq	r3, #2
 80153d4:	2800      	cmp	r0, #0
 80153d6:	db05      	blt.n	80153e4 <__hi0bits+0x38>
 80153d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80153dc:	f103 0301 	add.w	r3, r3, #1
 80153e0:	bf08      	it	eq
 80153e2:	2320      	moveq	r3, #32
 80153e4:	4618      	mov	r0, r3
 80153e6:	4770      	bx	lr
 80153e8:	2300      	movs	r3, #0
 80153ea:	e7e4      	b.n	80153b6 <__hi0bits+0xa>

080153ec <__lo0bits>:
 80153ec:	6803      	ldr	r3, [r0, #0]
 80153ee:	f013 0207 	ands.w	r2, r3, #7
 80153f2:	4601      	mov	r1, r0
 80153f4:	d00b      	beq.n	801540e <__lo0bits+0x22>
 80153f6:	07da      	lsls	r2, r3, #31
 80153f8:	d424      	bmi.n	8015444 <__lo0bits+0x58>
 80153fa:	0798      	lsls	r0, r3, #30
 80153fc:	bf49      	itett	mi
 80153fe:	085b      	lsrmi	r3, r3, #1
 8015400:	089b      	lsrpl	r3, r3, #2
 8015402:	2001      	movmi	r0, #1
 8015404:	600b      	strmi	r3, [r1, #0]
 8015406:	bf5c      	itt	pl
 8015408:	600b      	strpl	r3, [r1, #0]
 801540a:	2002      	movpl	r0, #2
 801540c:	4770      	bx	lr
 801540e:	b298      	uxth	r0, r3
 8015410:	b9b0      	cbnz	r0, 8015440 <__lo0bits+0x54>
 8015412:	0c1b      	lsrs	r3, r3, #16
 8015414:	2010      	movs	r0, #16
 8015416:	f013 0fff 	tst.w	r3, #255	; 0xff
 801541a:	bf04      	itt	eq
 801541c:	0a1b      	lsreq	r3, r3, #8
 801541e:	3008      	addeq	r0, #8
 8015420:	071a      	lsls	r2, r3, #28
 8015422:	bf04      	itt	eq
 8015424:	091b      	lsreq	r3, r3, #4
 8015426:	3004      	addeq	r0, #4
 8015428:	079a      	lsls	r2, r3, #30
 801542a:	bf04      	itt	eq
 801542c:	089b      	lsreq	r3, r3, #2
 801542e:	3002      	addeq	r0, #2
 8015430:	07da      	lsls	r2, r3, #31
 8015432:	d403      	bmi.n	801543c <__lo0bits+0x50>
 8015434:	085b      	lsrs	r3, r3, #1
 8015436:	f100 0001 	add.w	r0, r0, #1
 801543a:	d005      	beq.n	8015448 <__lo0bits+0x5c>
 801543c:	600b      	str	r3, [r1, #0]
 801543e:	4770      	bx	lr
 8015440:	4610      	mov	r0, r2
 8015442:	e7e8      	b.n	8015416 <__lo0bits+0x2a>
 8015444:	2000      	movs	r0, #0
 8015446:	4770      	bx	lr
 8015448:	2020      	movs	r0, #32
 801544a:	4770      	bx	lr

0801544c <__i2b>:
 801544c:	b510      	push	{r4, lr}
 801544e:	460c      	mov	r4, r1
 8015450:	2101      	movs	r1, #1
 8015452:	f7ff feb5 	bl	80151c0 <_Balloc>
 8015456:	4602      	mov	r2, r0
 8015458:	b928      	cbnz	r0, 8015466 <__i2b+0x1a>
 801545a:	4b05      	ldr	r3, [pc, #20]	; (8015470 <__i2b+0x24>)
 801545c:	4805      	ldr	r0, [pc, #20]	; (8015474 <__i2b+0x28>)
 801545e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8015462:	f7fe fb29 	bl	8013ab8 <__assert_func>
 8015466:	2301      	movs	r3, #1
 8015468:	6144      	str	r4, [r0, #20]
 801546a:	6103      	str	r3, [r0, #16]
 801546c:	bd10      	pop	{r4, pc}
 801546e:	bf00      	nop
 8015470:	080187f8 	.word	0x080187f8
 8015474:	08018888 	.word	0x08018888

08015478 <__multiply>:
 8015478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801547c:	4614      	mov	r4, r2
 801547e:	690a      	ldr	r2, [r1, #16]
 8015480:	6923      	ldr	r3, [r4, #16]
 8015482:	429a      	cmp	r2, r3
 8015484:	bfb8      	it	lt
 8015486:	460b      	movlt	r3, r1
 8015488:	460d      	mov	r5, r1
 801548a:	bfbc      	itt	lt
 801548c:	4625      	movlt	r5, r4
 801548e:	461c      	movlt	r4, r3
 8015490:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8015494:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8015498:	68ab      	ldr	r3, [r5, #8]
 801549a:	6869      	ldr	r1, [r5, #4]
 801549c:	eb0a 0709 	add.w	r7, sl, r9
 80154a0:	42bb      	cmp	r3, r7
 80154a2:	b085      	sub	sp, #20
 80154a4:	bfb8      	it	lt
 80154a6:	3101      	addlt	r1, #1
 80154a8:	f7ff fe8a 	bl	80151c0 <_Balloc>
 80154ac:	b930      	cbnz	r0, 80154bc <__multiply+0x44>
 80154ae:	4602      	mov	r2, r0
 80154b0:	4b42      	ldr	r3, [pc, #264]	; (80155bc <__multiply+0x144>)
 80154b2:	4843      	ldr	r0, [pc, #268]	; (80155c0 <__multiply+0x148>)
 80154b4:	f240 115d 	movw	r1, #349	; 0x15d
 80154b8:	f7fe fafe 	bl	8013ab8 <__assert_func>
 80154bc:	f100 0614 	add.w	r6, r0, #20
 80154c0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80154c4:	4633      	mov	r3, r6
 80154c6:	2200      	movs	r2, #0
 80154c8:	4543      	cmp	r3, r8
 80154ca:	d31e      	bcc.n	801550a <__multiply+0x92>
 80154cc:	f105 0c14 	add.w	ip, r5, #20
 80154d0:	f104 0314 	add.w	r3, r4, #20
 80154d4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80154d8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80154dc:	9202      	str	r2, [sp, #8]
 80154de:	ebac 0205 	sub.w	r2, ip, r5
 80154e2:	3a15      	subs	r2, #21
 80154e4:	f022 0203 	bic.w	r2, r2, #3
 80154e8:	3204      	adds	r2, #4
 80154ea:	f105 0115 	add.w	r1, r5, #21
 80154ee:	458c      	cmp	ip, r1
 80154f0:	bf38      	it	cc
 80154f2:	2204      	movcc	r2, #4
 80154f4:	9201      	str	r2, [sp, #4]
 80154f6:	9a02      	ldr	r2, [sp, #8]
 80154f8:	9303      	str	r3, [sp, #12]
 80154fa:	429a      	cmp	r2, r3
 80154fc:	d808      	bhi.n	8015510 <__multiply+0x98>
 80154fe:	2f00      	cmp	r7, #0
 8015500:	dc55      	bgt.n	80155ae <__multiply+0x136>
 8015502:	6107      	str	r7, [r0, #16]
 8015504:	b005      	add	sp, #20
 8015506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801550a:	f843 2b04 	str.w	r2, [r3], #4
 801550e:	e7db      	b.n	80154c8 <__multiply+0x50>
 8015510:	f8b3 a000 	ldrh.w	sl, [r3]
 8015514:	f1ba 0f00 	cmp.w	sl, #0
 8015518:	d020      	beq.n	801555c <__multiply+0xe4>
 801551a:	f105 0e14 	add.w	lr, r5, #20
 801551e:	46b1      	mov	r9, r6
 8015520:	2200      	movs	r2, #0
 8015522:	f85e 4b04 	ldr.w	r4, [lr], #4
 8015526:	f8d9 b000 	ldr.w	fp, [r9]
 801552a:	b2a1      	uxth	r1, r4
 801552c:	fa1f fb8b 	uxth.w	fp, fp
 8015530:	fb0a b101 	mla	r1, sl, r1, fp
 8015534:	4411      	add	r1, r2
 8015536:	f8d9 2000 	ldr.w	r2, [r9]
 801553a:	0c24      	lsrs	r4, r4, #16
 801553c:	0c12      	lsrs	r2, r2, #16
 801553e:	fb0a 2404 	mla	r4, sl, r4, r2
 8015542:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8015546:	b289      	uxth	r1, r1
 8015548:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801554c:	45f4      	cmp	ip, lr
 801554e:	f849 1b04 	str.w	r1, [r9], #4
 8015552:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8015556:	d8e4      	bhi.n	8015522 <__multiply+0xaa>
 8015558:	9901      	ldr	r1, [sp, #4]
 801555a:	5072      	str	r2, [r6, r1]
 801555c:	9a03      	ldr	r2, [sp, #12]
 801555e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015562:	3304      	adds	r3, #4
 8015564:	f1b9 0f00 	cmp.w	r9, #0
 8015568:	d01f      	beq.n	80155aa <__multiply+0x132>
 801556a:	6834      	ldr	r4, [r6, #0]
 801556c:	f105 0114 	add.w	r1, r5, #20
 8015570:	46b6      	mov	lr, r6
 8015572:	f04f 0a00 	mov.w	sl, #0
 8015576:	880a      	ldrh	r2, [r1, #0]
 8015578:	f8be b002 	ldrh.w	fp, [lr, #2]
 801557c:	fb09 b202 	mla	r2, r9, r2, fp
 8015580:	4492      	add	sl, r2
 8015582:	b2a4      	uxth	r4, r4
 8015584:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8015588:	f84e 4b04 	str.w	r4, [lr], #4
 801558c:	f851 4b04 	ldr.w	r4, [r1], #4
 8015590:	f8be 2000 	ldrh.w	r2, [lr]
 8015594:	0c24      	lsrs	r4, r4, #16
 8015596:	fb09 2404 	mla	r4, r9, r4, r2
 801559a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801559e:	458c      	cmp	ip, r1
 80155a0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80155a4:	d8e7      	bhi.n	8015576 <__multiply+0xfe>
 80155a6:	9a01      	ldr	r2, [sp, #4]
 80155a8:	50b4      	str	r4, [r6, r2]
 80155aa:	3604      	adds	r6, #4
 80155ac:	e7a3      	b.n	80154f6 <__multiply+0x7e>
 80155ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d1a5      	bne.n	8015502 <__multiply+0x8a>
 80155b6:	3f01      	subs	r7, #1
 80155b8:	e7a1      	b.n	80154fe <__multiply+0x86>
 80155ba:	bf00      	nop
 80155bc:	080187f8 	.word	0x080187f8
 80155c0:	08018888 	.word	0x08018888

080155c4 <__pow5mult>:
 80155c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80155c8:	4615      	mov	r5, r2
 80155ca:	f012 0203 	ands.w	r2, r2, #3
 80155ce:	4606      	mov	r6, r0
 80155d0:	460f      	mov	r7, r1
 80155d2:	d007      	beq.n	80155e4 <__pow5mult+0x20>
 80155d4:	4c25      	ldr	r4, [pc, #148]	; (801566c <__pow5mult+0xa8>)
 80155d6:	3a01      	subs	r2, #1
 80155d8:	2300      	movs	r3, #0
 80155da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80155de:	f7ff fe51 	bl	8015284 <__multadd>
 80155e2:	4607      	mov	r7, r0
 80155e4:	10ad      	asrs	r5, r5, #2
 80155e6:	d03d      	beq.n	8015664 <__pow5mult+0xa0>
 80155e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80155ea:	b97c      	cbnz	r4, 801560c <__pow5mult+0x48>
 80155ec:	2010      	movs	r0, #16
 80155ee:	f7fc f8fd 	bl	80117ec <malloc>
 80155f2:	4602      	mov	r2, r0
 80155f4:	6270      	str	r0, [r6, #36]	; 0x24
 80155f6:	b928      	cbnz	r0, 8015604 <__pow5mult+0x40>
 80155f8:	4b1d      	ldr	r3, [pc, #116]	; (8015670 <__pow5mult+0xac>)
 80155fa:	481e      	ldr	r0, [pc, #120]	; (8015674 <__pow5mult+0xb0>)
 80155fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015600:	f7fe fa5a 	bl	8013ab8 <__assert_func>
 8015604:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015608:	6004      	str	r4, [r0, #0]
 801560a:	60c4      	str	r4, [r0, #12]
 801560c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015610:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015614:	b94c      	cbnz	r4, 801562a <__pow5mult+0x66>
 8015616:	f240 2171 	movw	r1, #625	; 0x271
 801561a:	4630      	mov	r0, r6
 801561c:	f7ff ff16 	bl	801544c <__i2b>
 8015620:	2300      	movs	r3, #0
 8015622:	f8c8 0008 	str.w	r0, [r8, #8]
 8015626:	4604      	mov	r4, r0
 8015628:	6003      	str	r3, [r0, #0]
 801562a:	f04f 0900 	mov.w	r9, #0
 801562e:	07eb      	lsls	r3, r5, #31
 8015630:	d50a      	bpl.n	8015648 <__pow5mult+0x84>
 8015632:	4639      	mov	r1, r7
 8015634:	4622      	mov	r2, r4
 8015636:	4630      	mov	r0, r6
 8015638:	f7ff ff1e 	bl	8015478 <__multiply>
 801563c:	4639      	mov	r1, r7
 801563e:	4680      	mov	r8, r0
 8015640:	4630      	mov	r0, r6
 8015642:	f7ff fdfd 	bl	8015240 <_Bfree>
 8015646:	4647      	mov	r7, r8
 8015648:	106d      	asrs	r5, r5, #1
 801564a:	d00b      	beq.n	8015664 <__pow5mult+0xa0>
 801564c:	6820      	ldr	r0, [r4, #0]
 801564e:	b938      	cbnz	r0, 8015660 <__pow5mult+0x9c>
 8015650:	4622      	mov	r2, r4
 8015652:	4621      	mov	r1, r4
 8015654:	4630      	mov	r0, r6
 8015656:	f7ff ff0f 	bl	8015478 <__multiply>
 801565a:	6020      	str	r0, [r4, #0]
 801565c:	f8c0 9000 	str.w	r9, [r0]
 8015660:	4604      	mov	r4, r0
 8015662:	e7e4      	b.n	801562e <__pow5mult+0x6a>
 8015664:	4638      	mov	r0, r7
 8015666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801566a:	bf00      	nop
 801566c:	080189d8 	.word	0x080189d8
 8015670:	08018782 	.word	0x08018782
 8015674:	08018888 	.word	0x08018888

08015678 <__lshift>:
 8015678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801567c:	460c      	mov	r4, r1
 801567e:	6849      	ldr	r1, [r1, #4]
 8015680:	6923      	ldr	r3, [r4, #16]
 8015682:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015686:	68a3      	ldr	r3, [r4, #8]
 8015688:	4607      	mov	r7, r0
 801568a:	4691      	mov	r9, r2
 801568c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015690:	f108 0601 	add.w	r6, r8, #1
 8015694:	42b3      	cmp	r3, r6
 8015696:	db0b      	blt.n	80156b0 <__lshift+0x38>
 8015698:	4638      	mov	r0, r7
 801569a:	f7ff fd91 	bl	80151c0 <_Balloc>
 801569e:	4605      	mov	r5, r0
 80156a0:	b948      	cbnz	r0, 80156b6 <__lshift+0x3e>
 80156a2:	4602      	mov	r2, r0
 80156a4:	4b28      	ldr	r3, [pc, #160]	; (8015748 <__lshift+0xd0>)
 80156a6:	4829      	ldr	r0, [pc, #164]	; (801574c <__lshift+0xd4>)
 80156a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80156ac:	f7fe fa04 	bl	8013ab8 <__assert_func>
 80156b0:	3101      	adds	r1, #1
 80156b2:	005b      	lsls	r3, r3, #1
 80156b4:	e7ee      	b.n	8015694 <__lshift+0x1c>
 80156b6:	2300      	movs	r3, #0
 80156b8:	f100 0114 	add.w	r1, r0, #20
 80156bc:	f100 0210 	add.w	r2, r0, #16
 80156c0:	4618      	mov	r0, r3
 80156c2:	4553      	cmp	r3, sl
 80156c4:	db33      	blt.n	801572e <__lshift+0xb6>
 80156c6:	6920      	ldr	r0, [r4, #16]
 80156c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80156cc:	f104 0314 	add.w	r3, r4, #20
 80156d0:	f019 091f 	ands.w	r9, r9, #31
 80156d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80156d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80156dc:	d02b      	beq.n	8015736 <__lshift+0xbe>
 80156de:	f1c9 0e20 	rsb	lr, r9, #32
 80156e2:	468a      	mov	sl, r1
 80156e4:	2200      	movs	r2, #0
 80156e6:	6818      	ldr	r0, [r3, #0]
 80156e8:	fa00 f009 	lsl.w	r0, r0, r9
 80156ec:	4302      	orrs	r2, r0
 80156ee:	f84a 2b04 	str.w	r2, [sl], #4
 80156f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80156f6:	459c      	cmp	ip, r3
 80156f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80156fc:	d8f3      	bhi.n	80156e6 <__lshift+0x6e>
 80156fe:	ebac 0304 	sub.w	r3, ip, r4
 8015702:	3b15      	subs	r3, #21
 8015704:	f023 0303 	bic.w	r3, r3, #3
 8015708:	3304      	adds	r3, #4
 801570a:	f104 0015 	add.w	r0, r4, #21
 801570e:	4584      	cmp	ip, r0
 8015710:	bf38      	it	cc
 8015712:	2304      	movcc	r3, #4
 8015714:	50ca      	str	r2, [r1, r3]
 8015716:	b10a      	cbz	r2, 801571c <__lshift+0xa4>
 8015718:	f108 0602 	add.w	r6, r8, #2
 801571c:	3e01      	subs	r6, #1
 801571e:	4638      	mov	r0, r7
 8015720:	612e      	str	r6, [r5, #16]
 8015722:	4621      	mov	r1, r4
 8015724:	f7ff fd8c 	bl	8015240 <_Bfree>
 8015728:	4628      	mov	r0, r5
 801572a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801572e:	f842 0f04 	str.w	r0, [r2, #4]!
 8015732:	3301      	adds	r3, #1
 8015734:	e7c5      	b.n	80156c2 <__lshift+0x4a>
 8015736:	3904      	subs	r1, #4
 8015738:	f853 2b04 	ldr.w	r2, [r3], #4
 801573c:	f841 2f04 	str.w	r2, [r1, #4]!
 8015740:	459c      	cmp	ip, r3
 8015742:	d8f9      	bhi.n	8015738 <__lshift+0xc0>
 8015744:	e7ea      	b.n	801571c <__lshift+0xa4>
 8015746:	bf00      	nop
 8015748:	080187f8 	.word	0x080187f8
 801574c:	08018888 	.word	0x08018888

08015750 <__mcmp>:
 8015750:	b530      	push	{r4, r5, lr}
 8015752:	6902      	ldr	r2, [r0, #16]
 8015754:	690c      	ldr	r4, [r1, #16]
 8015756:	1b12      	subs	r2, r2, r4
 8015758:	d10e      	bne.n	8015778 <__mcmp+0x28>
 801575a:	f100 0314 	add.w	r3, r0, #20
 801575e:	3114      	adds	r1, #20
 8015760:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015764:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015768:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801576c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015770:	42a5      	cmp	r5, r4
 8015772:	d003      	beq.n	801577c <__mcmp+0x2c>
 8015774:	d305      	bcc.n	8015782 <__mcmp+0x32>
 8015776:	2201      	movs	r2, #1
 8015778:	4610      	mov	r0, r2
 801577a:	bd30      	pop	{r4, r5, pc}
 801577c:	4283      	cmp	r3, r0
 801577e:	d3f3      	bcc.n	8015768 <__mcmp+0x18>
 8015780:	e7fa      	b.n	8015778 <__mcmp+0x28>
 8015782:	f04f 32ff 	mov.w	r2, #4294967295
 8015786:	e7f7      	b.n	8015778 <__mcmp+0x28>

08015788 <__mdiff>:
 8015788:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801578c:	460c      	mov	r4, r1
 801578e:	4606      	mov	r6, r0
 8015790:	4611      	mov	r1, r2
 8015792:	4620      	mov	r0, r4
 8015794:	4617      	mov	r7, r2
 8015796:	f7ff ffdb 	bl	8015750 <__mcmp>
 801579a:	1e05      	subs	r5, r0, #0
 801579c:	d110      	bne.n	80157c0 <__mdiff+0x38>
 801579e:	4629      	mov	r1, r5
 80157a0:	4630      	mov	r0, r6
 80157a2:	f7ff fd0d 	bl	80151c0 <_Balloc>
 80157a6:	b930      	cbnz	r0, 80157b6 <__mdiff+0x2e>
 80157a8:	4b39      	ldr	r3, [pc, #228]	; (8015890 <__mdiff+0x108>)
 80157aa:	4602      	mov	r2, r0
 80157ac:	f240 2132 	movw	r1, #562	; 0x232
 80157b0:	4838      	ldr	r0, [pc, #224]	; (8015894 <__mdiff+0x10c>)
 80157b2:	f7fe f981 	bl	8013ab8 <__assert_func>
 80157b6:	2301      	movs	r3, #1
 80157b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80157bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157c0:	bfa4      	itt	ge
 80157c2:	463b      	movge	r3, r7
 80157c4:	4627      	movge	r7, r4
 80157c6:	4630      	mov	r0, r6
 80157c8:	6879      	ldr	r1, [r7, #4]
 80157ca:	bfa6      	itte	ge
 80157cc:	461c      	movge	r4, r3
 80157ce:	2500      	movge	r5, #0
 80157d0:	2501      	movlt	r5, #1
 80157d2:	f7ff fcf5 	bl	80151c0 <_Balloc>
 80157d6:	b920      	cbnz	r0, 80157e2 <__mdiff+0x5a>
 80157d8:	4b2d      	ldr	r3, [pc, #180]	; (8015890 <__mdiff+0x108>)
 80157da:	4602      	mov	r2, r0
 80157dc:	f44f 7110 	mov.w	r1, #576	; 0x240
 80157e0:	e7e6      	b.n	80157b0 <__mdiff+0x28>
 80157e2:	693e      	ldr	r6, [r7, #16]
 80157e4:	60c5      	str	r5, [r0, #12]
 80157e6:	6925      	ldr	r5, [r4, #16]
 80157e8:	f107 0114 	add.w	r1, r7, #20
 80157ec:	f104 0914 	add.w	r9, r4, #20
 80157f0:	f100 0e14 	add.w	lr, r0, #20
 80157f4:	f107 0210 	add.w	r2, r7, #16
 80157f8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80157fc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8015800:	46f2      	mov	sl, lr
 8015802:	2700      	movs	r7, #0
 8015804:	f859 3b04 	ldr.w	r3, [r9], #4
 8015808:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801580c:	fa1f f883 	uxth.w	r8, r3
 8015810:	fa17 f78b 	uxtah	r7, r7, fp
 8015814:	0c1b      	lsrs	r3, r3, #16
 8015816:	eba7 0808 	sub.w	r8, r7, r8
 801581a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801581e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015822:	fa1f f888 	uxth.w	r8, r8
 8015826:	141f      	asrs	r7, r3, #16
 8015828:	454d      	cmp	r5, r9
 801582a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801582e:	f84a 3b04 	str.w	r3, [sl], #4
 8015832:	d8e7      	bhi.n	8015804 <__mdiff+0x7c>
 8015834:	1b2b      	subs	r3, r5, r4
 8015836:	3b15      	subs	r3, #21
 8015838:	f023 0303 	bic.w	r3, r3, #3
 801583c:	3304      	adds	r3, #4
 801583e:	3415      	adds	r4, #21
 8015840:	42a5      	cmp	r5, r4
 8015842:	bf38      	it	cc
 8015844:	2304      	movcc	r3, #4
 8015846:	4419      	add	r1, r3
 8015848:	4473      	add	r3, lr
 801584a:	469e      	mov	lr, r3
 801584c:	460d      	mov	r5, r1
 801584e:	4565      	cmp	r5, ip
 8015850:	d30e      	bcc.n	8015870 <__mdiff+0xe8>
 8015852:	f10c 0203 	add.w	r2, ip, #3
 8015856:	1a52      	subs	r2, r2, r1
 8015858:	f022 0203 	bic.w	r2, r2, #3
 801585c:	3903      	subs	r1, #3
 801585e:	458c      	cmp	ip, r1
 8015860:	bf38      	it	cc
 8015862:	2200      	movcc	r2, #0
 8015864:	441a      	add	r2, r3
 8015866:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801586a:	b17b      	cbz	r3, 801588c <__mdiff+0x104>
 801586c:	6106      	str	r6, [r0, #16]
 801586e:	e7a5      	b.n	80157bc <__mdiff+0x34>
 8015870:	f855 8b04 	ldr.w	r8, [r5], #4
 8015874:	fa17 f488 	uxtah	r4, r7, r8
 8015878:	1422      	asrs	r2, r4, #16
 801587a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801587e:	b2a4      	uxth	r4, r4
 8015880:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8015884:	f84e 4b04 	str.w	r4, [lr], #4
 8015888:	1417      	asrs	r7, r2, #16
 801588a:	e7e0      	b.n	801584e <__mdiff+0xc6>
 801588c:	3e01      	subs	r6, #1
 801588e:	e7ea      	b.n	8015866 <__mdiff+0xde>
 8015890:	080187f8 	.word	0x080187f8
 8015894:	08018888 	.word	0x08018888

08015898 <__ulp>:
 8015898:	b082      	sub	sp, #8
 801589a:	ed8d 0b00 	vstr	d0, [sp]
 801589e:	9b01      	ldr	r3, [sp, #4]
 80158a0:	4912      	ldr	r1, [pc, #72]	; (80158ec <__ulp+0x54>)
 80158a2:	4019      	ands	r1, r3
 80158a4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80158a8:	2900      	cmp	r1, #0
 80158aa:	dd05      	ble.n	80158b8 <__ulp+0x20>
 80158ac:	2200      	movs	r2, #0
 80158ae:	460b      	mov	r3, r1
 80158b0:	ec43 2b10 	vmov	d0, r2, r3
 80158b4:	b002      	add	sp, #8
 80158b6:	4770      	bx	lr
 80158b8:	4249      	negs	r1, r1
 80158ba:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80158be:	ea4f 5021 	mov.w	r0, r1, asr #20
 80158c2:	f04f 0200 	mov.w	r2, #0
 80158c6:	f04f 0300 	mov.w	r3, #0
 80158ca:	da04      	bge.n	80158d6 <__ulp+0x3e>
 80158cc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80158d0:	fa41 f300 	asr.w	r3, r1, r0
 80158d4:	e7ec      	b.n	80158b0 <__ulp+0x18>
 80158d6:	f1a0 0114 	sub.w	r1, r0, #20
 80158da:	291e      	cmp	r1, #30
 80158dc:	bfda      	itte	le
 80158de:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80158e2:	fa20 f101 	lsrle.w	r1, r0, r1
 80158e6:	2101      	movgt	r1, #1
 80158e8:	460a      	mov	r2, r1
 80158ea:	e7e1      	b.n	80158b0 <__ulp+0x18>
 80158ec:	7ff00000 	.word	0x7ff00000

080158f0 <__b2d>:
 80158f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158f2:	6905      	ldr	r5, [r0, #16]
 80158f4:	f100 0714 	add.w	r7, r0, #20
 80158f8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80158fc:	1f2e      	subs	r6, r5, #4
 80158fe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8015902:	4620      	mov	r0, r4
 8015904:	f7ff fd52 	bl	80153ac <__hi0bits>
 8015908:	f1c0 0320 	rsb	r3, r0, #32
 801590c:	280a      	cmp	r0, #10
 801590e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801598c <__b2d+0x9c>
 8015912:	600b      	str	r3, [r1, #0]
 8015914:	dc14      	bgt.n	8015940 <__b2d+0x50>
 8015916:	f1c0 0e0b 	rsb	lr, r0, #11
 801591a:	fa24 f10e 	lsr.w	r1, r4, lr
 801591e:	42b7      	cmp	r7, r6
 8015920:	ea41 030c 	orr.w	r3, r1, ip
 8015924:	bf34      	ite	cc
 8015926:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801592a:	2100      	movcs	r1, #0
 801592c:	3015      	adds	r0, #21
 801592e:	fa04 f000 	lsl.w	r0, r4, r0
 8015932:	fa21 f10e 	lsr.w	r1, r1, lr
 8015936:	ea40 0201 	orr.w	r2, r0, r1
 801593a:	ec43 2b10 	vmov	d0, r2, r3
 801593e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015940:	42b7      	cmp	r7, r6
 8015942:	bf3a      	itte	cc
 8015944:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015948:	f1a5 0608 	subcc.w	r6, r5, #8
 801594c:	2100      	movcs	r1, #0
 801594e:	380b      	subs	r0, #11
 8015950:	d017      	beq.n	8015982 <__b2d+0x92>
 8015952:	f1c0 0c20 	rsb	ip, r0, #32
 8015956:	fa04 f500 	lsl.w	r5, r4, r0
 801595a:	42be      	cmp	r6, r7
 801595c:	fa21 f40c 	lsr.w	r4, r1, ip
 8015960:	ea45 0504 	orr.w	r5, r5, r4
 8015964:	bf8c      	ite	hi
 8015966:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801596a:	2400      	movls	r4, #0
 801596c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8015970:	fa01 f000 	lsl.w	r0, r1, r0
 8015974:	fa24 f40c 	lsr.w	r4, r4, ip
 8015978:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801597c:	ea40 0204 	orr.w	r2, r0, r4
 8015980:	e7db      	b.n	801593a <__b2d+0x4a>
 8015982:	ea44 030c 	orr.w	r3, r4, ip
 8015986:	460a      	mov	r2, r1
 8015988:	e7d7      	b.n	801593a <__b2d+0x4a>
 801598a:	bf00      	nop
 801598c:	3ff00000 	.word	0x3ff00000

08015990 <__d2b>:
 8015990:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015994:	4689      	mov	r9, r1
 8015996:	2101      	movs	r1, #1
 8015998:	ec57 6b10 	vmov	r6, r7, d0
 801599c:	4690      	mov	r8, r2
 801599e:	f7ff fc0f 	bl	80151c0 <_Balloc>
 80159a2:	4604      	mov	r4, r0
 80159a4:	b930      	cbnz	r0, 80159b4 <__d2b+0x24>
 80159a6:	4602      	mov	r2, r0
 80159a8:	4b25      	ldr	r3, [pc, #148]	; (8015a40 <__d2b+0xb0>)
 80159aa:	4826      	ldr	r0, [pc, #152]	; (8015a44 <__d2b+0xb4>)
 80159ac:	f240 310a 	movw	r1, #778	; 0x30a
 80159b0:	f7fe f882 	bl	8013ab8 <__assert_func>
 80159b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80159b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80159bc:	bb35      	cbnz	r5, 8015a0c <__d2b+0x7c>
 80159be:	2e00      	cmp	r6, #0
 80159c0:	9301      	str	r3, [sp, #4]
 80159c2:	d028      	beq.n	8015a16 <__d2b+0x86>
 80159c4:	4668      	mov	r0, sp
 80159c6:	9600      	str	r6, [sp, #0]
 80159c8:	f7ff fd10 	bl	80153ec <__lo0bits>
 80159cc:	9900      	ldr	r1, [sp, #0]
 80159ce:	b300      	cbz	r0, 8015a12 <__d2b+0x82>
 80159d0:	9a01      	ldr	r2, [sp, #4]
 80159d2:	f1c0 0320 	rsb	r3, r0, #32
 80159d6:	fa02 f303 	lsl.w	r3, r2, r3
 80159da:	430b      	orrs	r3, r1
 80159dc:	40c2      	lsrs	r2, r0
 80159de:	6163      	str	r3, [r4, #20]
 80159e0:	9201      	str	r2, [sp, #4]
 80159e2:	9b01      	ldr	r3, [sp, #4]
 80159e4:	61a3      	str	r3, [r4, #24]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	bf14      	ite	ne
 80159ea:	2202      	movne	r2, #2
 80159ec:	2201      	moveq	r2, #1
 80159ee:	6122      	str	r2, [r4, #16]
 80159f0:	b1d5      	cbz	r5, 8015a28 <__d2b+0x98>
 80159f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80159f6:	4405      	add	r5, r0
 80159f8:	f8c9 5000 	str.w	r5, [r9]
 80159fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015a00:	f8c8 0000 	str.w	r0, [r8]
 8015a04:	4620      	mov	r0, r4
 8015a06:	b003      	add	sp, #12
 8015a08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015a10:	e7d5      	b.n	80159be <__d2b+0x2e>
 8015a12:	6161      	str	r1, [r4, #20]
 8015a14:	e7e5      	b.n	80159e2 <__d2b+0x52>
 8015a16:	a801      	add	r0, sp, #4
 8015a18:	f7ff fce8 	bl	80153ec <__lo0bits>
 8015a1c:	9b01      	ldr	r3, [sp, #4]
 8015a1e:	6163      	str	r3, [r4, #20]
 8015a20:	2201      	movs	r2, #1
 8015a22:	6122      	str	r2, [r4, #16]
 8015a24:	3020      	adds	r0, #32
 8015a26:	e7e3      	b.n	80159f0 <__d2b+0x60>
 8015a28:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015a2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015a30:	f8c9 0000 	str.w	r0, [r9]
 8015a34:	6918      	ldr	r0, [r3, #16]
 8015a36:	f7ff fcb9 	bl	80153ac <__hi0bits>
 8015a3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015a3e:	e7df      	b.n	8015a00 <__d2b+0x70>
 8015a40:	080187f8 	.word	0x080187f8
 8015a44:	08018888 	.word	0x08018888

08015a48 <__ratio>:
 8015a48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a4c:	4688      	mov	r8, r1
 8015a4e:	4669      	mov	r1, sp
 8015a50:	4681      	mov	r9, r0
 8015a52:	f7ff ff4d 	bl	80158f0 <__b2d>
 8015a56:	a901      	add	r1, sp, #4
 8015a58:	4640      	mov	r0, r8
 8015a5a:	ec55 4b10 	vmov	r4, r5, d0
 8015a5e:	f7ff ff47 	bl	80158f0 <__b2d>
 8015a62:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015a66:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015a6a:	eba3 0c02 	sub.w	ip, r3, r2
 8015a6e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015a72:	1a9b      	subs	r3, r3, r2
 8015a74:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015a78:	ec51 0b10 	vmov	r0, r1, d0
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	bfd6      	itet	le
 8015a80:	460a      	movle	r2, r1
 8015a82:	462a      	movgt	r2, r5
 8015a84:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015a88:	468b      	mov	fp, r1
 8015a8a:	462f      	mov	r7, r5
 8015a8c:	bfd4      	ite	le
 8015a8e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8015a92:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8015a96:	4620      	mov	r0, r4
 8015a98:	ee10 2a10 	vmov	r2, s0
 8015a9c:	465b      	mov	r3, fp
 8015a9e:	4639      	mov	r1, r7
 8015aa0:	f7ea fee4 	bl	800086c <__aeabi_ddiv>
 8015aa4:	ec41 0b10 	vmov	d0, r0, r1
 8015aa8:	b003      	add	sp, #12
 8015aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015aae <__copybits>:
 8015aae:	3901      	subs	r1, #1
 8015ab0:	b570      	push	{r4, r5, r6, lr}
 8015ab2:	1149      	asrs	r1, r1, #5
 8015ab4:	6914      	ldr	r4, [r2, #16]
 8015ab6:	3101      	adds	r1, #1
 8015ab8:	f102 0314 	add.w	r3, r2, #20
 8015abc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015ac0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015ac4:	1f05      	subs	r5, r0, #4
 8015ac6:	42a3      	cmp	r3, r4
 8015ac8:	d30c      	bcc.n	8015ae4 <__copybits+0x36>
 8015aca:	1aa3      	subs	r3, r4, r2
 8015acc:	3b11      	subs	r3, #17
 8015ace:	f023 0303 	bic.w	r3, r3, #3
 8015ad2:	3211      	adds	r2, #17
 8015ad4:	42a2      	cmp	r2, r4
 8015ad6:	bf88      	it	hi
 8015ad8:	2300      	movhi	r3, #0
 8015ada:	4418      	add	r0, r3
 8015adc:	2300      	movs	r3, #0
 8015ade:	4288      	cmp	r0, r1
 8015ae0:	d305      	bcc.n	8015aee <__copybits+0x40>
 8015ae2:	bd70      	pop	{r4, r5, r6, pc}
 8015ae4:	f853 6b04 	ldr.w	r6, [r3], #4
 8015ae8:	f845 6f04 	str.w	r6, [r5, #4]!
 8015aec:	e7eb      	b.n	8015ac6 <__copybits+0x18>
 8015aee:	f840 3b04 	str.w	r3, [r0], #4
 8015af2:	e7f4      	b.n	8015ade <__copybits+0x30>

08015af4 <__any_on>:
 8015af4:	f100 0214 	add.w	r2, r0, #20
 8015af8:	6900      	ldr	r0, [r0, #16]
 8015afa:	114b      	asrs	r3, r1, #5
 8015afc:	4298      	cmp	r0, r3
 8015afe:	b510      	push	{r4, lr}
 8015b00:	db11      	blt.n	8015b26 <__any_on+0x32>
 8015b02:	dd0a      	ble.n	8015b1a <__any_on+0x26>
 8015b04:	f011 011f 	ands.w	r1, r1, #31
 8015b08:	d007      	beq.n	8015b1a <__any_on+0x26>
 8015b0a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015b0e:	fa24 f001 	lsr.w	r0, r4, r1
 8015b12:	fa00 f101 	lsl.w	r1, r0, r1
 8015b16:	428c      	cmp	r4, r1
 8015b18:	d10b      	bne.n	8015b32 <__any_on+0x3e>
 8015b1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015b1e:	4293      	cmp	r3, r2
 8015b20:	d803      	bhi.n	8015b2a <__any_on+0x36>
 8015b22:	2000      	movs	r0, #0
 8015b24:	bd10      	pop	{r4, pc}
 8015b26:	4603      	mov	r3, r0
 8015b28:	e7f7      	b.n	8015b1a <__any_on+0x26>
 8015b2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015b2e:	2900      	cmp	r1, #0
 8015b30:	d0f5      	beq.n	8015b1e <__any_on+0x2a>
 8015b32:	2001      	movs	r0, #1
 8015b34:	e7f6      	b.n	8015b24 <__any_on+0x30>

08015b36 <_calloc_r>:
 8015b36:	b513      	push	{r0, r1, r4, lr}
 8015b38:	434a      	muls	r2, r1
 8015b3a:	4611      	mov	r1, r2
 8015b3c:	9201      	str	r2, [sp, #4]
 8015b3e:	f7fb fee5 	bl	801190c <_malloc_r>
 8015b42:	4604      	mov	r4, r0
 8015b44:	b118      	cbz	r0, 8015b4e <_calloc_r+0x18>
 8015b46:	9a01      	ldr	r2, [sp, #4]
 8015b48:	2100      	movs	r1, #0
 8015b4a:	f7fb fe87 	bl	801185c <memset>
 8015b4e:	4620      	mov	r0, r4
 8015b50:	b002      	add	sp, #8
 8015b52:	bd10      	pop	{r4, pc}

08015b54 <_realloc_r>:
 8015b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b56:	4607      	mov	r7, r0
 8015b58:	4614      	mov	r4, r2
 8015b5a:	460e      	mov	r6, r1
 8015b5c:	b921      	cbnz	r1, 8015b68 <_realloc_r+0x14>
 8015b5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015b62:	4611      	mov	r1, r2
 8015b64:	f7fb bed2 	b.w	801190c <_malloc_r>
 8015b68:	b922      	cbnz	r2, 8015b74 <_realloc_r+0x20>
 8015b6a:	f7fb fe7f 	bl	801186c <_free_r>
 8015b6e:	4625      	mov	r5, r4
 8015b70:	4628      	mov	r0, r5
 8015b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b74:	f000 fe9e 	bl	80168b4 <_malloc_usable_size_r>
 8015b78:	42a0      	cmp	r0, r4
 8015b7a:	d20f      	bcs.n	8015b9c <_realloc_r+0x48>
 8015b7c:	4621      	mov	r1, r4
 8015b7e:	4638      	mov	r0, r7
 8015b80:	f7fb fec4 	bl	801190c <_malloc_r>
 8015b84:	4605      	mov	r5, r0
 8015b86:	2800      	cmp	r0, #0
 8015b88:	d0f2      	beq.n	8015b70 <_realloc_r+0x1c>
 8015b8a:	4631      	mov	r1, r6
 8015b8c:	4622      	mov	r2, r4
 8015b8e:	f7fb fe3d 	bl	801180c <memcpy>
 8015b92:	4631      	mov	r1, r6
 8015b94:	4638      	mov	r0, r7
 8015b96:	f7fb fe69 	bl	801186c <_free_r>
 8015b9a:	e7e9      	b.n	8015b70 <_realloc_r+0x1c>
 8015b9c:	4635      	mov	r5, r6
 8015b9e:	e7e7      	b.n	8015b70 <_realloc_r+0x1c>

08015ba0 <__ssputs_r>:
 8015ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ba4:	688e      	ldr	r6, [r1, #8]
 8015ba6:	429e      	cmp	r6, r3
 8015ba8:	4682      	mov	sl, r0
 8015baa:	460c      	mov	r4, r1
 8015bac:	4690      	mov	r8, r2
 8015bae:	461f      	mov	r7, r3
 8015bb0:	d838      	bhi.n	8015c24 <__ssputs_r+0x84>
 8015bb2:	898a      	ldrh	r2, [r1, #12]
 8015bb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015bb8:	d032      	beq.n	8015c20 <__ssputs_r+0x80>
 8015bba:	6825      	ldr	r5, [r4, #0]
 8015bbc:	6909      	ldr	r1, [r1, #16]
 8015bbe:	eba5 0901 	sub.w	r9, r5, r1
 8015bc2:	6965      	ldr	r5, [r4, #20]
 8015bc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015bc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015bcc:	3301      	adds	r3, #1
 8015bce:	444b      	add	r3, r9
 8015bd0:	106d      	asrs	r5, r5, #1
 8015bd2:	429d      	cmp	r5, r3
 8015bd4:	bf38      	it	cc
 8015bd6:	461d      	movcc	r5, r3
 8015bd8:	0553      	lsls	r3, r2, #21
 8015bda:	d531      	bpl.n	8015c40 <__ssputs_r+0xa0>
 8015bdc:	4629      	mov	r1, r5
 8015bde:	f7fb fe95 	bl	801190c <_malloc_r>
 8015be2:	4606      	mov	r6, r0
 8015be4:	b950      	cbnz	r0, 8015bfc <__ssputs_r+0x5c>
 8015be6:	230c      	movs	r3, #12
 8015be8:	f8ca 3000 	str.w	r3, [sl]
 8015bec:	89a3      	ldrh	r3, [r4, #12]
 8015bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015bf2:	81a3      	strh	r3, [r4, #12]
 8015bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8015bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015bfc:	6921      	ldr	r1, [r4, #16]
 8015bfe:	464a      	mov	r2, r9
 8015c00:	f7fb fe04 	bl	801180c <memcpy>
 8015c04:	89a3      	ldrh	r3, [r4, #12]
 8015c06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015c0e:	81a3      	strh	r3, [r4, #12]
 8015c10:	6126      	str	r6, [r4, #16]
 8015c12:	6165      	str	r5, [r4, #20]
 8015c14:	444e      	add	r6, r9
 8015c16:	eba5 0509 	sub.w	r5, r5, r9
 8015c1a:	6026      	str	r6, [r4, #0]
 8015c1c:	60a5      	str	r5, [r4, #8]
 8015c1e:	463e      	mov	r6, r7
 8015c20:	42be      	cmp	r6, r7
 8015c22:	d900      	bls.n	8015c26 <__ssputs_r+0x86>
 8015c24:	463e      	mov	r6, r7
 8015c26:	4632      	mov	r2, r6
 8015c28:	6820      	ldr	r0, [r4, #0]
 8015c2a:	4641      	mov	r1, r8
 8015c2c:	f7fb fdfc 	bl	8011828 <memmove>
 8015c30:	68a3      	ldr	r3, [r4, #8]
 8015c32:	6822      	ldr	r2, [r4, #0]
 8015c34:	1b9b      	subs	r3, r3, r6
 8015c36:	4432      	add	r2, r6
 8015c38:	60a3      	str	r3, [r4, #8]
 8015c3a:	6022      	str	r2, [r4, #0]
 8015c3c:	2000      	movs	r0, #0
 8015c3e:	e7db      	b.n	8015bf8 <__ssputs_r+0x58>
 8015c40:	462a      	mov	r2, r5
 8015c42:	f7ff ff87 	bl	8015b54 <_realloc_r>
 8015c46:	4606      	mov	r6, r0
 8015c48:	2800      	cmp	r0, #0
 8015c4a:	d1e1      	bne.n	8015c10 <__ssputs_r+0x70>
 8015c4c:	6921      	ldr	r1, [r4, #16]
 8015c4e:	4650      	mov	r0, sl
 8015c50:	f7fb fe0c 	bl	801186c <_free_r>
 8015c54:	e7c7      	b.n	8015be6 <__ssputs_r+0x46>
	...

08015c58 <_svfiprintf_r>:
 8015c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c5c:	4698      	mov	r8, r3
 8015c5e:	898b      	ldrh	r3, [r1, #12]
 8015c60:	061b      	lsls	r3, r3, #24
 8015c62:	b09d      	sub	sp, #116	; 0x74
 8015c64:	4607      	mov	r7, r0
 8015c66:	460d      	mov	r5, r1
 8015c68:	4614      	mov	r4, r2
 8015c6a:	d50e      	bpl.n	8015c8a <_svfiprintf_r+0x32>
 8015c6c:	690b      	ldr	r3, [r1, #16]
 8015c6e:	b963      	cbnz	r3, 8015c8a <_svfiprintf_r+0x32>
 8015c70:	2140      	movs	r1, #64	; 0x40
 8015c72:	f7fb fe4b 	bl	801190c <_malloc_r>
 8015c76:	6028      	str	r0, [r5, #0]
 8015c78:	6128      	str	r0, [r5, #16]
 8015c7a:	b920      	cbnz	r0, 8015c86 <_svfiprintf_r+0x2e>
 8015c7c:	230c      	movs	r3, #12
 8015c7e:	603b      	str	r3, [r7, #0]
 8015c80:	f04f 30ff 	mov.w	r0, #4294967295
 8015c84:	e0d1      	b.n	8015e2a <_svfiprintf_r+0x1d2>
 8015c86:	2340      	movs	r3, #64	; 0x40
 8015c88:	616b      	str	r3, [r5, #20]
 8015c8a:	2300      	movs	r3, #0
 8015c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8015c8e:	2320      	movs	r3, #32
 8015c90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015c94:	f8cd 800c 	str.w	r8, [sp, #12]
 8015c98:	2330      	movs	r3, #48	; 0x30
 8015c9a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015e44 <_svfiprintf_r+0x1ec>
 8015c9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015ca2:	f04f 0901 	mov.w	r9, #1
 8015ca6:	4623      	mov	r3, r4
 8015ca8:	469a      	mov	sl, r3
 8015caa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015cae:	b10a      	cbz	r2, 8015cb4 <_svfiprintf_r+0x5c>
 8015cb0:	2a25      	cmp	r2, #37	; 0x25
 8015cb2:	d1f9      	bne.n	8015ca8 <_svfiprintf_r+0x50>
 8015cb4:	ebba 0b04 	subs.w	fp, sl, r4
 8015cb8:	d00b      	beq.n	8015cd2 <_svfiprintf_r+0x7a>
 8015cba:	465b      	mov	r3, fp
 8015cbc:	4622      	mov	r2, r4
 8015cbe:	4629      	mov	r1, r5
 8015cc0:	4638      	mov	r0, r7
 8015cc2:	f7ff ff6d 	bl	8015ba0 <__ssputs_r>
 8015cc6:	3001      	adds	r0, #1
 8015cc8:	f000 80aa 	beq.w	8015e20 <_svfiprintf_r+0x1c8>
 8015ccc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015cce:	445a      	add	r2, fp
 8015cd0:	9209      	str	r2, [sp, #36]	; 0x24
 8015cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	f000 80a2 	beq.w	8015e20 <_svfiprintf_r+0x1c8>
 8015cdc:	2300      	movs	r3, #0
 8015cde:	f04f 32ff 	mov.w	r2, #4294967295
 8015ce2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015ce6:	f10a 0a01 	add.w	sl, sl, #1
 8015cea:	9304      	str	r3, [sp, #16]
 8015cec:	9307      	str	r3, [sp, #28]
 8015cee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015cf2:	931a      	str	r3, [sp, #104]	; 0x68
 8015cf4:	4654      	mov	r4, sl
 8015cf6:	2205      	movs	r2, #5
 8015cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015cfc:	4851      	ldr	r0, [pc, #324]	; (8015e44 <_svfiprintf_r+0x1ec>)
 8015cfe:	f7ea fa7f 	bl	8000200 <memchr>
 8015d02:	9a04      	ldr	r2, [sp, #16]
 8015d04:	b9d8      	cbnz	r0, 8015d3e <_svfiprintf_r+0xe6>
 8015d06:	06d0      	lsls	r0, r2, #27
 8015d08:	bf44      	itt	mi
 8015d0a:	2320      	movmi	r3, #32
 8015d0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015d10:	0711      	lsls	r1, r2, #28
 8015d12:	bf44      	itt	mi
 8015d14:	232b      	movmi	r3, #43	; 0x2b
 8015d16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015d1a:	f89a 3000 	ldrb.w	r3, [sl]
 8015d1e:	2b2a      	cmp	r3, #42	; 0x2a
 8015d20:	d015      	beq.n	8015d4e <_svfiprintf_r+0xf6>
 8015d22:	9a07      	ldr	r2, [sp, #28]
 8015d24:	4654      	mov	r4, sl
 8015d26:	2000      	movs	r0, #0
 8015d28:	f04f 0c0a 	mov.w	ip, #10
 8015d2c:	4621      	mov	r1, r4
 8015d2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015d32:	3b30      	subs	r3, #48	; 0x30
 8015d34:	2b09      	cmp	r3, #9
 8015d36:	d94e      	bls.n	8015dd6 <_svfiprintf_r+0x17e>
 8015d38:	b1b0      	cbz	r0, 8015d68 <_svfiprintf_r+0x110>
 8015d3a:	9207      	str	r2, [sp, #28]
 8015d3c:	e014      	b.n	8015d68 <_svfiprintf_r+0x110>
 8015d3e:	eba0 0308 	sub.w	r3, r0, r8
 8015d42:	fa09 f303 	lsl.w	r3, r9, r3
 8015d46:	4313      	orrs	r3, r2
 8015d48:	9304      	str	r3, [sp, #16]
 8015d4a:	46a2      	mov	sl, r4
 8015d4c:	e7d2      	b.n	8015cf4 <_svfiprintf_r+0x9c>
 8015d4e:	9b03      	ldr	r3, [sp, #12]
 8015d50:	1d19      	adds	r1, r3, #4
 8015d52:	681b      	ldr	r3, [r3, #0]
 8015d54:	9103      	str	r1, [sp, #12]
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	bfbb      	ittet	lt
 8015d5a:	425b      	neglt	r3, r3
 8015d5c:	f042 0202 	orrlt.w	r2, r2, #2
 8015d60:	9307      	strge	r3, [sp, #28]
 8015d62:	9307      	strlt	r3, [sp, #28]
 8015d64:	bfb8      	it	lt
 8015d66:	9204      	strlt	r2, [sp, #16]
 8015d68:	7823      	ldrb	r3, [r4, #0]
 8015d6a:	2b2e      	cmp	r3, #46	; 0x2e
 8015d6c:	d10c      	bne.n	8015d88 <_svfiprintf_r+0x130>
 8015d6e:	7863      	ldrb	r3, [r4, #1]
 8015d70:	2b2a      	cmp	r3, #42	; 0x2a
 8015d72:	d135      	bne.n	8015de0 <_svfiprintf_r+0x188>
 8015d74:	9b03      	ldr	r3, [sp, #12]
 8015d76:	1d1a      	adds	r2, r3, #4
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	9203      	str	r2, [sp, #12]
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	bfb8      	it	lt
 8015d80:	f04f 33ff 	movlt.w	r3, #4294967295
 8015d84:	3402      	adds	r4, #2
 8015d86:	9305      	str	r3, [sp, #20]
 8015d88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015e54 <_svfiprintf_r+0x1fc>
 8015d8c:	7821      	ldrb	r1, [r4, #0]
 8015d8e:	2203      	movs	r2, #3
 8015d90:	4650      	mov	r0, sl
 8015d92:	f7ea fa35 	bl	8000200 <memchr>
 8015d96:	b140      	cbz	r0, 8015daa <_svfiprintf_r+0x152>
 8015d98:	2340      	movs	r3, #64	; 0x40
 8015d9a:	eba0 000a 	sub.w	r0, r0, sl
 8015d9e:	fa03 f000 	lsl.w	r0, r3, r0
 8015da2:	9b04      	ldr	r3, [sp, #16]
 8015da4:	4303      	orrs	r3, r0
 8015da6:	3401      	adds	r4, #1
 8015da8:	9304      	str	r3, [sp, #16]
 8015daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015dae:	4826      	ldr	r0, [pc, #152]	; (8015e48 <_svfiprintf_r+0x1f0>)
 8015db0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015db4:	2206      	movs	r2, #6
 8015db6:	f7ea fa23 	bl	8000200 <memchr>
 8015dba:	2800      	cmp	r0, #0
 8015dbc:	d038      	beq.n	8015e30 <_svfiprintf_r+0x1d8>
 8015dbe:	4b23      	ldr	r3, [pc, #140]	; (8015e4c <_svfiprintf_r+0x1f4>)
 8015dc0:	bb1b      	cbnz	r3, 8015e0a <_svfiprintf_r+0x1b2>
 8015dc2:	9b03      	ldr	r3, [sp, #12]
 8015dc4:	3307      	adds	r3, #7
 8015dc6:	f023 0307 	bic.w	r3, r3, #7
 8015dca:	3308      	adds	r3, #8
 8015dcc:	9303      	str	r3, [sp, #12]
 8015dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015dd0:	4433      	add	r3, r6
 8015dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8015dd4:	e767      	b.n	8015ca6 <_svfiprintf_r+0x4e>
 8015dd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8015dda:	460c      	mov	r4, r1
 8015ddc:	2001      	movs	r0, #1
 8015dde:	e7a5      	b.n	8015d2c <_svfiprintf_r+0xd4>
 8015de0:	2300      	movs	r3, #0
 8015de2:	3401      	adds	r4, #1
 8015de4:	9305      	str	r3, [sp, #20]
 8015de6:	4619      	mov	r1, r3
 8015de8:	f04f 0c0a 	mov.w	ip, #10
 8015dec:	4620      	mov	r0, r4
 8015dee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015df2:	3a30      	subs	r2, #48	; 0x30
 8015df4:	2a09      	cmp	r2, #9
 8015df6:	d903      	bls.n	8015e00 <_svfiprintf_r+0x1a8>
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d0c5      	beq.n	8015d88 <_svfiprintf_r+0x130>
 8015dfc:	9105      	str	r1, [sp, #20]
 8015dfe:	e7c3      	b.n	8015d88 <_svfiprintf_r+0x130>
 8015e00:	fb0c 2101 	mla	r1, ip, r1, r2
 8015e04:	4604      	mov	r4, r0
 8015e06:	2301      	movs	r3, #1
 8015e08:	e7f0      	b.n	8015dec <_svfiprintf_r+0x194>
 8015e0a:	ab03      	add	r3, sp, #12
 8015e0c:	9300      	str	r3, [sp, #0]
 8015e0e:	462a      	mov	r2, r5
 8015e10:	4b0f      	ldr	r3, [pc, #60]	; (8015e50 <_svfiprintf_r+0x1f8>)
 8015e12:	a904      	add	r1, sp, #16
 8015e14:	4638      	mov	r0, r7
 8015e16:	f7fb fe73 	bl	8011b00 <_printf_float>
 8015e1a:	1c42      	adds	r2, r0, #1
 8015e1c:	4606      	mov	r6, r0
 8015e1e:	d1d6      	bne.n	8015dce <_svfiprintf_r+0x176>
 8015e20:	89ab      	ldrh	r3, [r5, #12]
 8015e22:	065b      	lsls	r3, r3, #25
 8015e24:	f53f af2c 	bmi.w	8015c80 <_svfiprintf_r+0x28>
 8015e28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015e2a:	b01d      	add	sp, #116	; 0x74
 8015e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e30:	ab03      	add	r3, sp, #12
 8015e32:	9300      	str	r3, [sp, #0]
 8015e34:	462a      	mov	r2, r5
 8015e36:	4b06      	ldr	r3, [pc, #24]	; (8015e50 <_svfiprintf_r+0x1f8>)
 8015e38:	a904      	add	r1, sp, #16
 8015e3a:	4638      	mov	r0, r7
 8015e3c:	f7fc f904 	bl	8012048 <_printf_i>
 8015e40:	e7eb      	b.n	8015e1a <_svfiprintf_r+0x1c2>
 8015e42:	bf00      	nop
 8015e44:	080189e4 	.word	0x080189e4
 8015e48:	080189ee 	.word	0x080189ee
 8015e4c:	08011b01 	.word	0x08011b01
 8015e50:	08015ba1 	.word	0x08015ba1
 8015e54:	080189ea 	.word	0x080189ea

08015e58 <_sungetc_r>:
 8015e58:	b538      	push	{r3, r4, r5, lr}
 8015e5a:	1c4b      	adds	r3, r1, #1
 8015e5c:	4614      	mov	r4, r2
 8015e5e:	d103      	bne.n	8015e68 <_sungetc_r+0x10>
 8015e60:	f04f 35ff 	mov.w	r5, #4294967295
 8015e64:	4628      	mov	r0, r5
 8015e66:	bd38      	pop	{r3, r4, r5, pc}
 8015e68:	8993      	ldrh	r3, [r2, #12]
 8015e6a:	f023 0320 	bic.w	r3, r3, #32
 8015e6e:	8193      	strh	r3, [r2, #12]
 8015e70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015e72:	6852      	ldr	r2, [r2, #4]
 8015e74:	b2cd      	uxtb	r5, r1
 8015e76:	b18b      	cbz	r3, 8015e9c <_sungetc_r+0x44>
 8015e78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015e7a:	4293      	cmp	r3, r2
 8015e7c:	dd08      	ble.n	8015e90 <_sungetc_r+0x38>
 8015e7e:	6823      	ldr	r3, [r4, #0]
 8015e80:	1e5a      	subs	r2, r3, #1
 8015e82:	6022      	str	r2, [r4, #0]
 8015e84:	f803 5c01 	strb.w	r5, [r3, #-1]
 8015e88:	6863      	ldr	r3, [r4, #4]
 8015e8a:	3301      	adds	r3, #1
 8015e8c:	6063      	str	r3, [r4, #4]
 8015e8e:	e7e9      	b.n	8015e64 <_sungetc_r+0xc>
 8015e90:	4621      	mov	r1, r4
 8015e92:	f000 fca5 	bl	80167e0 <__submore>
 8015e96:	2800      	cmp	r0, #0
 8015e98:	d0f1      	beq.n	8015e7e <_sungetc_r+0x26>
 8015e9a:	e7e1      	b.n	8015e60 <_sungetc_r+0x8>
 8015e9c:	6921      	ldr	r1, [r4, #16]
 8015e9e:	6823      	ldr	r3, [r4, #0]
 8015ea0:	b151      	cbz	r1, 8015eb8 <_sungetc_r+0x60>
 8015ea2:	4299      	cmp	r1, r3
 8015ea4:	d208      	bcs.n	8015eb8 <_sungetc_r+0x60>
 8015ea6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8015eaa:	42a9      	cmp	r1, r5
 8015eac:	d104      	bne.n	8015eb8 <_sungetc_r+0x60>
 8015eae:	3b01      	subs	r3, #1
 8015eb0:	3201      	adds	r2, #1
 8015eb2:	6023      	str	r3, [r4, #0]
 8015eb4:	6062      	str	r2, [r4, #4]
 8015eb6:	e7d5      	b.n	8015e64 <_sungetc_r+0xc>
 8015eb8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8015ebc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015ec0:	6363      	str	r3, [r4, #52]	; 0x34
 8015ec2:	2303      	movs	r3, #3
 8015ec4:	63a3      	str	r3, [r4, #56]	; 0x38
 8015ec6:	4623      	mov	r3, r4
 8015ec8:	f803 5f46 	strb.w	r5, [r3, #70]!
 8015ecc:	6023      	str	r3, [r4, #0]
 8015ece:	2301      	movs	r3, #1
 8015ed0:	e7dc      	b.n	8015e8c <_sungetc_r+0x34>

08015ed2 <__ssrefill_r>:
 8015ed2:	b510      	push	{r4, lr}
 8015ed4:	460c      	mov	r4, r1
 8015ed6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8015ed8:	b169      	cbz	r1, 8015ef6 <__ssrefill_r+0x24>
 8015eda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015ede:	4299      	cmp	r1, r3
 8015ee0:	d001      	beq.n	8015ee6 <__ssrefill_r+0x14>
 8015ee2:	f7fb fcc3 	bl	801186c <_free_r>
 8015ee6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015ee8:	6063      	str	r3, [r4, #4]
 8015eea:	2000      	movs	r0, #0
 8015eec:	6360      	str	r0, [r4, #52]	; 0x34
 8015eee:	b113      	cbz	r3, 8015ef6 <__ssrefill_r+0x24>
 8015ef0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015ef2:	6023      	str	r3, [r4, #0]
 8015ef4:	bd10      	pop	{r4, pc}
 8015ef6:	6923      	ldr	r3, [r4, #16]
 8015ef8:	6023      	str	r3, [r4, #0]
 8015efa:	2300      	movs	r3, #0
 8015efc:	6063      	str	r3, [r4, #4]
 8015efe:	89a3      	ldrh	r3, [r4, #12]
 8015f00:	f043 0320 	orr.w	r3, r3, #32
 8015f04:	81a3      	strh	r3, [r4, #12]
 8015f06:	f04f 30ff 	mov.w	r0, #4294967295
 8015f0a:	e7f3      	b.n	8015ef4 <__ssrefill_r+0x22>

08015f0c <__ssvfiscanf_r>:
 8015f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f10:	460c      	mov	r4, r1
 8015f12:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8015f16:	2100      	movs	r1, #0
 8015f18:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8015f1c:	49b2      	ldr	r1, [pc, #712]	; (80161e8 <__ssvfiscanf_r+0x2dc>)
 8015f1e:	91a0      	str	r1, [sp, #640]	; 0x280
 8015f20:	f10d 0804 	add.w	r8, sp, #4
 8015f24:	49b1      	ldr	r1, [pc, #708]	; (80161ec <__ssvfiscanf_r+0x2e0>)
 8015f26:	4fb2      	ldr	r7, [pc, #712]	; (80161f0 <__ssvfiscanf_r+0x2e4>)
 8015f28:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 80161f4 <__ssvfiscanf_r+0x2e8>
 8015f2c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8015f30:	4606      	mov	r6, r0
 8015f32:	91a1      	str	r1, [sp, #644]	; 0x284
 8015f34:	9300      	str	r3, [sp, #0]
 8015f36:	f892 a000 	ldrb.w	sl, [r2]
 8015f3a:	f1ba 0f00 	cmp.w	sl, #0
 8015f3e:	f000 8151 	beq.w	80161e4 <__ssvfiscanf_r+0x2d8>
 8015f42:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8015f46:	f013 0308 	ands.w	r3, r3, #8
 8015f4a:	f102 0501 	add.w	r5, r2, #1
 8015f4e:	d019      	beq.n	8015f84 <__ssvfiscanf_r+0x78>
 8015f50:	6863      	ldr	r3, [r4, #4]
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	dd0f      	ble.n	8015f76 <__ssvfiscanf_r+0x6a>
 8015f56:	6823      	ldr	r3, [r4, #0]
 8015f58:	781a      	ldrb	r2, [r3, #0]
 8015f5a:	5cba      	ldrb	r2, [r7, r2]
 8015f5c:	0712      	lsls	r2, r2, #28
 8015f5e:	d401      	bmi.n	8015f64 <__ssvfiscanf_r+0x58>
 8015f60:	462a      	mov	r2, r5
 8015f62:	e7e8      	b.n	8015f36 <__ssvfiscanf_r+0x2a>
 8015f64:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015f66:	3201      	adds	r2, #1
 8015f68:	9245      	str	r2, [sp, #276]	; 0x114
 8015f6a:	6862      	ldr	r2, [r4, #4]
 8015f6c:	3301      	adds	r3, #1
 8015f6e:	3a01      	subs	r2, #1
 8015f70:	6062      	str	r2, [r4, #4]
 8015f72:	6023      	str	r3, [r4, #0]
 8015f74:	e7ec      	b.n	8015f50 <__ssvfiscanf_r+0x44>
 8015f76:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015f78:	4621      	mov	r1, r4
 8015f7a:	4630      	mov	r0, r6
 8015f7c:	4798      	blx	r3
 8015f7e:	2800      	cmp	r0, #0
 8015f80:	d0e9      	beq.n	8015f56 <__ssvfiscanf_r+0x4a>
 8015f82:	e7ed      	b.n	8015f60 <__ssvfiscanf_r+0x54>
 8015f84:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8015f88:	f040 8083 	bne.w	8016092 <__ssvfiscanf_r+0x186>
 8015f8c:	9341      	str	r3, [sp, #260]	; 0x104
 8015f8e:	9343      	str	r3, [sp, #268]	; 0x10c
 8015f90:	7853      	ldrb	r3, [r2, #1]
 8015f92:	2b2a      	cmp	r3, #42	; 0x2a
 8015f94:	bf02      	ittt	eq
 8015f96:	2310      	moveq	r3, #16
 8015f98:	1c95      	addeq	r5, r2, #2
 8015f9a:	9341      	streq	r3, [sp, #260]	; 0x104
 8015f9c:	220a      	movs	r2, #10
 8015f9e:	46ab      	mov	fp, r5
 8015fa0:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8015fa4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8015fa8:	2b09      	cmp	r3, #9
 8015faa:	d91d      	bls.n	8015fe8 <__ssvfiscanf_r+0xdc>
 8015fac:	4891      	ldr	r0, [pc, #580]	; (80161f4 <__ssvfiscanf_r+0x2e8>)
 8015fae:	2203      	movs	r2, #3
 8015fb0:	f7ea f926 	bl	8000200 <memchr>
 8015fb4:	b140      	cbz	r0, 8015fc8 <__ssvfiscanf_r+0xbc>
 8015fb6:	2301      	movs	r3, #1
 8015fb8:	eba0 0009 	sub.w	r0, r0, r9
 8015fbc:	fa03 f000 	lsl.w	r0, r3, r0
 8015fc0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015fc2:	4318      	orrs	r0, r3
 8015fc4:	9041      	str	r0, [sp, #260]	; 0x104
 8015fc6:	465d      	mov	r5, fp
 8015fc8:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015fcc:	2b78      	cmp	r3, #120	; 0x78
 8015fce:	d806      	bhi.n	8015fde <__ssvfiscanf_r+0xd2>
 8015fd0:	2b57      	cmp	r3, #87	; 0x57
 8015fd2:	d810      	bhi.n	8015ff6 <__ssvfiscanf_r+0xea>
 8015fd4:	2b25      	cmp	r3, #37	; 0x25
 8015fd6:	d05c      	beq.n	8016092 <__ssvfiscanf_r+0x186>
 8015fd8:	d856      	bhi.n	8016088 <__ssvfiscanf_r+0x17c>
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d074      	beq.n	80160c8 <__ssvfiscanf_r+0x1bc>
 8015fde:	2303      	movs	r3, #3
 8015fe0:	9347      	str	r3, [sp, #284]	; 0x11c
 8015fe2:	230a      	movs	r3, #10
 8015fe4:	9342      	str	r3, [sp, #264]	; 0x108
 8015fe6:	e081      	b.n	80160ec <__ssvfiscanf_r+0x1e0>
 8015fe8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8015fea:	fb02 1303 	mla	r3, r2, r3, r1
 8015fee:	3b30      	subs	r3, #48	; 0x30
 8015ff0:	9343      	str	r3, [sp, #268]	; 0x10c
 8015ff2:	465d      	mov	r5, fp
 8015ff4:	e7d3      	b.n	8015f9e <__ssvfiscanf_r+0x92>
 8015ff6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8015ffa:	2a20      	cmp	r2, #32
 8015ffc:	d8ef      	bhi.n	8015fde <__ssvfiscanf_r+0xd2>
 8015ffe:	a101      	add	r1, pc, #4	; (adr r1, 8016004 <__ssvfiscanf_r+0xf8>)
 8016000:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016004:	080160d7 	.word	0x080160d7
 8016008:	08015fdf 	.word	0x08015fdf
 801600c:	08015fdf 	.word	0x08015fdf
 8016010:	08016135 	.word	0x08016135
 8016014:	08015fdf 	.word	0x08015fdf
 8016018:	08015fdf 	.word	0x08015fdf
 801601c:	08015fdf 	.word	0x08015fdf
 8016020:	08015fdf 	.word	0x08015fdf
 8016024:	08015fdf 	.word	0x08015fdf
 8016028:	08015fdf 	.word	0x08015fdf
 801602c:	08015fdf 	.word	0x08015fdf
 8016030:	0801614b 	.word	0x0801614b
 8016034:	08016121 	.word	0x08016121
 8016038:	0801608f 	.word	0x0801608f
 801603c:	0801608f 	.word	0x0801608f
 8016040:	0801608f 	.word	0x0801608f
 8016044:	08015fdf 	.word	0x08015fdf
 8016048:	08016125 	.word	0x08016125
 801604c:	08015fdf 	.word	0x08015fdf
 8016050:	08015fdf 	.word	0x08015fdf
 8016054:	08015fdf 	.word	0x08015fdf
 8016058:	08015fdf 	.word	0x08015fdf
 801605c:	0801615b 	.word	0x0801615b
 8016060:	0801612d 	.word	0x0801612d
 8016064:	080160cf 	.word	0x080160cf
 8016068:	08015fdf 	.word	0x08015fdf
 801606c:	08015fdf 	.word	0x08015fdf
 8016070:	08016157 	.word	0x08016157
 8016074:	08015fdf 	.word	0x08015fdf
 8016078:	08016121 	.word	0x08016121
 801607c:	08015fdf 	.word	0x08015fdf
 8016080:	08015fdf 	.word	0x08015fdf
 8016084:	080160d7 	.word	0x080160d7
 8016088:	3b45      	subs	r3, #69	; 0x45
 801608a:	2b02      	cmp	r3, #2
 801608c:	d8a7      	bhi.n	8015fde <__ssvfiscanf_r+0xd2>
 801608e:	2305      	movs	r3, #5
 8016090:	e02b      	b.n	80160ea <__ssvfiscanf_r+0x1de>
 8016092:	6863      	ldr	r3, [r4, #4]
 8016094:	2b00      	cmp	r3, #0
 8016096:	dd0d      	ble.n	80160b4 <__ssvfiscanf_r+0x1a8>
 8016098:	6823      	ldr	r3, [r4, #0]
 801609a:	781a      	ldrb	r2, [r3, #0]
 801609c:	4552      	cmp	r2, sl
 801609e:	f040 80a1 	bne.w	80161e4 <__ssvfiscanf_r+0x2d8>
 80160a2:	3301      	adds	r3, #1
 80160a4:	6862      	ldr	r2, [r4, #4]
 80160a6:	6023      	str	r3, [r4, #0]
 80160a8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80160aa:	3a01      	subs	r2, #1
 80160ac:	3301      	adds	r3, #1
 80160ae:	6062      	str	r2, [r4, #4]
 80160b0:	9345      	str	r3, [sp, #276]	; 0x114
 80160b2:	e755      	b.n	8015f60 <__ssvfiscanf_r+0x54>
 80160b4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80160b6:	4621      	mov	r1, r4
 80160b8:	4630      	mov	r0, r6
 80160ba:	4798      	blx	r3
 80160bc:	2800      	cmp	r0, #0
 80160be:	d0eb      	beq.n	8016098 <__ssvfiscanf_r+0x18c>
 80160c0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80160c2:	2800      	cmp	r0, #0
 80160c4:	f040 8084 	bne.w	80161d0 <__ssvfiscanf_r+0x2c4>
 80160c8:	f04f 30ff 	mov.w	r0, #4294967295
 80160cc:	e086      	b.n	80161dc <__ssvfiscanf_r+0x2d0>
 80160ce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80160d0:	f042 0220 	orr.w	r2, r2, #32
 80160d4:	9241      	str	r2, [sp, #260]	; 0x104
 80160d6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80160d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80160dc:	9241      	str	r2, [sp, #260]	; 0x104
 80160de:	2210      	movs	r2, #16
 80160e0:	2b6f      	cmp	r3, #111	; 0x6f
 80160e2:	9242      	str	r2, [sp, #264]	; 0x108
 80160e4:	bf34      	ite	cc
 80160e6:	2303      	movcc	r3, #3
 80160e8:	2304      	movcs	r3, #4
 80160ea:	9347      	str	r3, [sp, #284]	; 0x11c
 80160ec:	6863      	ldr	r3, [r4, #4]
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	dd41      	ble.n	8016176 <__ssvfiscanf_r+0x26a>
 80160f2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80160f4:	0659      	lsls	r1, r3, #25
 80160f6:	d404      	bmi.n	8016102 <__ssvfiscanf_r+0x1f6>
 80160f8:	6823      	ldr	r3, [r4, #0]
 80160fa:	781a      	ldrb	r2, [r3, #0]
 80160fc:	5cba      	ldrb	r2, [r7, r2]
 80160fe:	0712      	lsls	r2, r2, #28
 8016100:	d440      	bmi.n	8016184 <__ssvfiscanf_r+0x278>
 8016102:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8016104:	2b02      	cmp	r3, #2
 8016106:	dc4f      	bgt.n	80161a8 <__ssvfiscanf_r+0x29c>
 8016108:	466b      	mov	r3, sp
 801610a:	4622      	mov	r2, r4
 801610c:	a941      	add	r1, sp, #260	; 0x104
 801610e:	4630      	mov	r0, r6
 8016110:	f000 f9ce 	bl	80164b0 <_scanf_chars>
 8016114:	2801      	cmp	r0, #1
 8016116:	d065      	beq.n	80161e4 <__ssvfiscanf_r+0x2d8>
 8016118:	2802      	cmp	r0, #2
 801611a:	f47f af21 	bne.w	8015f60 <__ssvfiscanf_r+0x54>
 801611e:	e7cf      	b.n	80160c0 <__ssvfiscanf_r+0x1b4>
 8016120:	220a      	movs	r2, #10
 8016122:	e7dd      	b.n	80160e0 <__ssvfiscanf_r+0x1d4>
 8016124:	2300      	movs	r3, #0
 8016126:	9342      	str	r3, [sp, #264]	; 0x108
 8016128:	2303      	movs	r3, #3
 801612a:	e7de      	b.n	80160ea <__ssvfiscanf_r+0x1de>
 801612c:	2308      	movs	r3, #8
 801612e:	9342      	str	r3, [sp, #264]	; 0x108
 8016130:	2304      	movs	r3, #4
 8016132:	e7da      	b.n	80160ea <__ssvfiscanf_r+0x1de>
 8016134:	4629      	mov	r1, r5
 8016136:	4640      	mov	r0, r8
 8016138:	f000 fb18 	bl	801676c <__sccl>
 801613c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801613e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016142:	9341      	str	r3, [sp, #260]	; 0x104
 8016144:	4605      	mov	r5, r0
 8016146:	2301      	movs	r3, #1
 8016148:	e7cf      	b.n	80160ea <__ssvfiscanf_r+0x1de>
 801614a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801614c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016150:	9341      	str	r3, [sp, #260]	; 0x104
 8016152:	2300      	movs	r3, #0
 8016154:	e7c9      	b.n	80160ea <__ssvfiscanf_r+0x1de>
 8016156:	2302      	movs	r3, #2
 8016158:	e7c7      	b.n	80160ea <__ssvfiscanf_r+0x1de>
 801615a:	9841      	ldr	r0, [sp, #260]	; 0x104
 801615c:	06c3      	lsls	r3, r0, #27
 801615e:	f53f aeff 	bmi.w	8015f60 <__ssvfiscanf_r+0x54>
 8016162:	9b00      	ldr	r3, [sp, #0]
 8016164:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016166:	1d19      	adds	r1, r3, #4
 8016168:	9100      	str	r1, [sp, #0]
 801616a:	681b      	ldr	r3, [r3, #0]
 801616c:	07c0      	lsls	r0, r0, #31
 801616e:	bf4c      	ite	mi
 8016170:	801a      	strhmi	r2, [r3, #0]
 8016172:	601a      	strpl	r2, [r3, #0]
 8016174:	e6f4      	b.n	8015f60 <__ssvfiscanf_r+0x54>
 8016176:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016178:	4621      	mov	r1, r4
 801617a:	4630      	mov	r0, r6
 801617c:	4798      	blx	r3
 801617e:	2800      	cmp	r0, #0
 8016180:	d0b7      	beq.n	80160f2 <__ssvfiscanf_r+0x1e6>
 8016182:	e79d      	b.n	80160c0 <__ssvfiscanf_r+0x1b4>
 8016184:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016186:	3201      	adds	r2, #1
 8016188:	9245      	str	r2, [sp, #276]	; 0x114
 801618a:	6862      	ldr	r2, [r4, #4]
 801618c:	3a01      	subs	r2, #1
 801618e:	2a00      	cmp	r2, #0
 8016190:	6062      	str	r2, [r4, #4]
 8016192:	dd02      	ble.n	801619a <__ssvfiscanf_r+0x28e>
 8016194:	3301      	adds	r3, #1
 8016196:	6023      	str	r3, [r4, #0]
 8016198:	e7ae      	b.n	80160f8 <__ssvfiscanf_r+0x1ec>
 801619a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801619c:	4621      	mov	r1, r4
 801619e:	4630      	mov	r0, r6
 80161a0:	4798      	blx	r3
 80161a2:	2800      	cmp	r0, #0
 80161a4:	d0a8      	beq.n	80160f8 <__ssvfiscanf_r+0x1ec>
 80161a6:	e78b      	b.n	80160c0 <__ssvfiscanf_r+0x1b4>
 80161a8:	2b04      	cmp	r3, #4
 80161aa:	dc06      	bgt.n	80161ba <__ssvfiscanf_r+0x2ae>
 80161ac:	466b      	mov	r3, sp
 80161ae:	4622      	mov	r2, r4
 80161b0:	a941      	add	r1, sp, #260	; 0x104
 80161b2:	4630      	mov	r0, r6
 80161b4:	f000 f9d4 	bl	8016560 <_scanf_i>
 80161b8:	e7ac      	b.n	8016114 <__ssvfiscanf_r+0x208>
 80161ba:	4b0f      	ldr	r3, [pc, #60]	; (80161f8 <__ssvfiscanf_r+0x2ec>)
 80161bc:	2b00      	cmp	r3, #0
 80161be:	f43f aecf 	beq.w	8015f60 <__ssvfiscanf_r+0x54>
 80161c2:	466b      	mov	r3, sp
 80161c4:	4622      	mov	r2, r4
 80161c6:	a941      	add	r1, sp, #260	; 0x104
 80161c8:	4630      	mov	r0, r6
 80161ca:	f7fc f863 	bl	8012294 <_scanf_float>
 80161ce:	e7a1      	b.n	8016114 <__ssvfiscanf_r+0x208>
 80161d0:	89a3      	ldrh	r3, [r4, #12]
 80161d2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80161d6:	bf18      	it	ne
 80161d8:	f04f 30ff 	movne.w	r0, #4294967295
 80161dc:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80161e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161e4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80161e6:	e7f9      	b.n	80161dc <__ssvfiscanf_r+0x2d0>
 80161e8:	08015e59 	.word	0x08015e59
 80161ec:	08015ed3 	.word	0x08015ed3
 80161f0:	08018675 	.word	0x08018675
 80161f4:	080189ea 	.word	0x080189ea
 80161f8:	08012295 	.word	0x08012295

080161fc <__sfputc_r>:
 80161fc:	6893      	ldr	r3, [r2, #8]
 80161fe:	3b01      	subs	r3, #1
 8016200:	2b00      	cmp	r3, #0
 8016202:	b410      	push	{r4}
 8016204:	6093      	str	r3, [r2, #8]
 8016206:	da08      	bge.n	801621a <__sfputc_r+0x1e>
 8016208:	6994      	ldr	r4, [r2, #24]
 801620a:	42a3      	cmp	r3, r4
 801620c:	db01      	blt.n	8016212 <__sfputc_r+0x16>
 801620e:	290a      	cmp	r1, #10
 8016210:	d103      	bne.n	801621a <__sfputc_r+0x1e>
 8016212:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016216:	f7fd bb7d 	b.w	8013914 <__swbuf_r>
 801621a:	6813      	ldr	r3, [r2, #0]
 801621c:	1c58      	adds	r0, r3, #1
 801621e:	6010      	str	r0, [r2, #0]
 8016220:	7019      	strb	r1, [r3, #0]
 8016222:	4608      	mov	r0, r1
 8016224:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016228:	4770      	bx	lr

0801622a <__sfputs_r>:
 801622a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801622c:	4606      	mov	r6, r0
 801622e:	460f      	mov	r7, r1
 8016230:	4614      	mov	r4, r2
 8016232:	18d5      	adds	r5, r2, r3
 8016234:	42ac      	cmp	r4, r5
 8016236:	d101      	bne.n	801623c <__sfputs_r+0x12>
 8016238:	2000      	movs	r0, #0
 801623a:	e007      	b.n	801624c <__sfputs_r+0x22>
 801623c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016240:	463a      	mov	r2, r7
 8016242:	4630      	mov	r0, r6
 8016244:	f7ff ffda 	bl	80161fc <__sfputc_r>
 8016248:	1c43      	adds	r3, r0, #1
 801624a:	d1f3      	bne.n	8016234 <__sfputs_r+0xa>
 801624c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016250 <_vfiprintf_r>:
 8016250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016254:	460d      	mov	r5, r1
 8016256:	b09d      	sub	sp, #116	; 0x74
 8016258:	4614      	mov	r4, r2
 801625a:	4698      	mov	r8, r3
 801625c:	4606      	mov	r6, r0
 801625e:	b118      	cbz	r0, 8016268 <_vfiprintf_r+0x18>
 8016260:	6983      	ldr	r3, [r0, #24]
 8016262:	b90b      	cbnz	r3, 8016268 <_vfiprintf_r+0x18>
 8016264:	f7fb f9fc 	bl	8011660 <__sinit>
 8016268:	4b89      	ldr	r3, [pc, #548]	; (8016490 <_vfiprintf_r+0x240>)
 801626a:	429d      	cmp	r5, r3
 801626c:	d11b      	bne.n	80162a6 <_vfiprintf_r+0x56>
 801626e:	6875      	ldr	r5, [r6, #4]
 8016270:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016272:	07d9      	lsls	r1, r3, #31
 8016274:	d405      	bmi.n	8016282 <_vfiprintf_r+0x32>
 8016276:	89ab      	ldrh	r3, [r5, #12]
 8016278:	059a      	lsls	r2, r3, #22
 801627a:	d402      	bmi.n	8016282 <_vfiprintf_r+0x32>
 801627c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801627e:	f7fb fab2 	bl	80117e6 <__retarget_lock_acquire_recursive>
 8016282:	89ab      	ldrh	r3, [r5, #12]
 8016284:	071b      	lsls	r3, r3, #28
 8016286:	d501      	bpl.n	801628c <_vfiprintf_r+0x3c>
 8016288:	692b      	ldr	r3, [r5, #16]
 801628a:	b9eb      	cbnz	r3, 80162c8 <_vfiprintf_r+0x78>
 801628c:	4629      	mov	r1, r5
 801628e:	4630      	mov	r0, r6
 8016290:	f7fd fba4 	bl	80139dc <__swsetup_r>
 8016294:	b1c0      	cbz	r0, 80162c8 <_vfiprintf_r+0x78>
 8016296:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016298:	07dc      	lsls	r4, r3, #31
 801629a:	d50e      	bpl.n	80162ba <_vfiprintf_r+0x6a>
 801629c:	f04f 30ff 	mov.w	r0, #4294967295
 80162a0:	b01d      	add	sp, #116	; 0x74
 80162a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162a6:	4b7b      	ldr	r3, [pc, #492]	; (8016494 <_vfiprintf_r+0x244>)
 80162a8:	429d      	cmp	r5, r3
 80162aa:	d101      	bne.n	80162b0 <_vfiprintf_r+0x60>
 80162ac:	68b5      	ldr	r5, [r6, #8]
 80162ae:	e7df      	b.n	8016270 <_vfiprintf_r+0x20>
 80162b0:	4b79      	ldr	r3, [pc, #484]	; (8016498 <_vfiprintf_r+0x248>)
 80162b2:	429d      	cmp	r5, r3
 80162b4:	bf08      	it	eq
 80162b6:	68f5      	ldreq	r5, [r6, #12]
 80162b8:	e7da      	b.n	8016270 <_vfiprintf_r+0x20>
 80162ba:	89ab      	ldrh	r3, [r5, #12]
 80162bc:	0598      	lsls	r0, r3, #22
 80162be:	d4ed      	bmi.n	801629c <_vfiprintf_r+0x4c>
 80162c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80162c2:	f7fb fa91 	bl	80117e8 <__retarget_lock_release_recursive>
 80162c6:	e7e9      	b.n	801629c <_vfiprintf_r+0x4c>
 80162c8:	2300      	movs	r3, #0
 80162ca:	9309      	str	r3, [sp, #36]	; 0x24
 80162cc:	2320      	movs	r3, #32
 80162ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80162d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80162d6:	2330      	movs	r3, #48	; 0x30
 80162d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801649c <_vfiprintf_r+0x24c>
 80162dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80162e0:	f04f 0901 	mov.w	r9, #1
 80162e4:	4623      	mov	r3, r4
 80162e6:	469a      	mov	sl, r3
 80162e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80162ec:	b10a      	cbz	r2, 80162f2 <_vfiprintf_r+0xa2>
 80162ee:	2a25      	cmp	r2, #37	; 0x25
 80162f0:	d1f9      	bne.n	80162e6 <_vfiprintf_r+0x96>
 80162f2:	ebba 0b04 	subs.w	fp, sl, r4
 80162f6:	d00b      	beq.n	8016310 <_vfiprintf_r+0xc0>
 80162f8:	465b      	mov	r3, fp
 80162fa:	4622      	mov	r2, r4
 80162fc:	4629      	mov	r1, r5
 80162fe:	4630      	mov	r0, r6
 8016300:	f7ff ff93 	bl	801622a <__sfputs_r>
 8016304:	3001      	adds	r0, #1
 8016306:	f000 80aa 	beq.w	801645e <_vfiprintf_r+0x20e>
 801630a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801630c:	445a      	add	r2, fp
 801630e:	9209      	str	r2, [sp, #36]	; 0x24
 8016310:	f89a 3000 	ldrb.w	r3, [sl]
 8016314:	2b00      	cmp	r3, #0
 8016316:	f000 80a2 	beq.w	801645e <_vfiprintf_r+0x20e>
 801631a:	2300      	movs	r3, #0
 801631c:	f04f 32ff 	mov.w	r2, #4294967295
 8016320:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016324:	f10a 0a01 	add.w	sl, sl, #1
 8016328:	9304      	str	r3, [sp, #16]
 801632a:	9307      	str	r3, [sp, #28]
 801632c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016330:	931a      	str	r3, [sp, #104]	; 0x68
 8016332:	4654      	mov	r4, sl
 8016334:	2205      	movs	r2, #5
 8016336:	f814 1b01 	ldrb.w	r1, [r4], #1
 801633a:	4858      	ldr	r0, [pc, #352]	; (801649c <_vfiprintf_r+0x24c>)
 801633c:	f7e9 ff60 	bl	8000200 <memchr>
 8016340:	9a04      	ldr	r2, [sp, #16]
 8016342:	b9d8      	cbnz	r0, 801637c <_vfiprintf_r+0x12c>
 8016344:	06d1      	lsls	r1, r2, #27
 8016346:	bf44      	itt	mi
 8016348:	2320      	movmi	r3, #32
 801634a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801634e:	0713      	lsls	r3, r2, #28
 8016350:	bf44      	itt	mi
 8016352:	232b      	movmi	r3, #43	; 0x2b
 8016354:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016358:	f89a 3000 	ldrb.w	r3, [sl]
 801635c:	2b2a      	cmp	r3, #42	; 0x2a
 801635e:	d015      	beq.n	801638c <_vfiprintf_r+0x13c>
 8016360:	9a07      	ldr	r2, [sp, #28]
 8016362:	4654      	mov	r4, sl
 8016364:	2000      	movs	r0, #0
 8016366:	f04f 0c0a 	mov.w	ip, #10
 801636a:	4621      	mov	r1, r4
 801636c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016370:	3b30      	subs	r3, #48	; 0x30
 8016372:	2b09      	cmp	r3, #9
 8016374:	d94e      	bls.n	8016414 <_vfiprintf_r+0x1c4>
 8016376:	b1b0      	cbz	r0, 80163a6 <_vfiprintf_r+0x156>
 8016378:	9207      	str	r2, [sp, #28]
 801637a:	e014      	b.n	80163a6 <_vfiprintf_r+0x156>
 801637c:	eba0 0308 	sub.w	r3, r0, r8
 8016380:	fa09 f303 	lsl.w	r3, r9, r3
 8016384:	4313      	orrs	r3, r2
 8016386:	9304      	str	r3, [sp, #16]
 8016388:	46a2      	mov	sl, r4
 801638a:	e7d2      	b.n	8016332 <_vfiprintf_r+0xe2>
 801638c:	9b03      	ldr	r3, [sp, #12]
 801638e:	1d19      	adds	r1, r3, #4
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	9103      	str	r1, [sp, #12]
 8016394:	2b00      	cmp	r3, #0
 8016396:	bfbb      	ittet	lt
 8016398:	425b      	neglt	r3, r3
 801639a:	f042 0202 	orrlt.w	r2, r2, #2
 801639e:	9307      	strge	r3, [sp, #28]
 80163a0:	9307      	strlt	r3, [sp, #28]
 80163a2:	bfb8      	it	lt
 80163a4:	9204      	strlt	r2, [sp, #16]
 80163a6:	7823      	ldrb	r3, [r4, #0]
 80163a8:	2b2e      	cmp	r3, #46	; 0x2e
 80163aa:	d10c      	bne.n	80163c6 <_vfiprintf_r+0x176>
 80163ac:	7863      	ldrb	r3, [r4, #1]
 80163ae:	2b2a      	cmp	r3, #42	; 0x2a
 80163b0:	d135      	bne.n	801641e <_vfiprintf_r+0x1ce>
 80163b2:	9b03      	ldr	r3, [sp, #12]
 80163b4:	1d1a      	adds	r2, r3, #4
 80163b6:	681b      	ldr	r3, [r3, #0]
 80163b8:	9203      	str	r2, [sp, #12]
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	bfb8      	it	lt
 80163be:	f04f 33ff 	movlt.w	r3, #4294967295
 80163c2:	3402      	adds	r4, #2
 80163c4:	9305      	str	r3, [sp, #20]
 80163c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80164ac <_vfiprintf_r+0x25c>
 80163ca:	7821      	ldrb	r1, [r4, #0]
 80163cc:	2203      	movs	r2, #3
 80163ce:	4650      	mov	r0, sl
 80163d0:	f7e9 ff16 	bl	8000200 <memchr>
 80163d4:	b140      	cbz	r0, 80163e8 <_vfiprintf_r+0x198>
 80163d6:	2340      	movs	r3, #64	; 0x40
 80163d8:	eba0 000a 	sub.w	r0, r0, sl
 80163dc:	fa03 f000 	lsl.w	r0, r3, r0
 80163e0:	9b04      	ldr	r3, [sp, #16]
 80163e2:	4303      	orrs	r3, r0
 80163e4:	3401      	adds	r4, #1
 80163e6:	9304      	str	r3, [sp, #16]
 80163e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80163ec:	482c      	ldr	r0, [pc, #176]	; (80164a0 <_vfiprintf_r+0x250>)
 80163ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80163f2:	2206      	movs	r2, #6
 80163f4:	f7e9 ff04 	bl	8000200 <memchr>
 80163f8:	2800      	cmp	r0, #0
 80163fa:	d03f      	beq.n	801647c <_vfiprintf_r+0x22c>
 80163fc:	4b29      	ldr	r3, [pc, #164]	; (80164a4 <_vfiprintf_r+0x254>)
 80163fe:	bb1b      	cbnz	r3, 8016448 <_vfiprintf_r+0x1f8>
 8016400:	9b03      	ldr	r3, [sp, #12]
 8016402:	3307      	adds	r3, #7
 8016404:	f023 0307 	bic.w	r3, r3, #7
 8016408:	3308      	adds	r3, #8
 801640a:	9303      	str	r3, [sp, #12]
 801640c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801640e:	443b      	add	r3, r7
 8016410:	9309      	str	r3, [sp, #36]	; 0x24
 8016412:	e767      	b.n	80162e4 <_vfiprintf_r+0x94>
 8016414:	fb0c 3202 	mla	r2, ip, r2, r3
 8016418:	460c      	mov	r4, r1
 801641a:	2001      	movs	r0, #1
 801641c:	e7a5      	b.n	801636a <_vfiprintf_r+0x11a>
 801641e:	2300      	movs	r3, #0
 8016420:	3401      	adds	r4, #1
 8016422:	9305      	str	r3, [sp, #20]
 8016424:	4619      	mov	r1, r3
 8016426:	f04f 0c0a 	mov.w	ip, #10
 801642a:	4620      	mov	r0, r4
 801642c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016430:	3a30      	subs	r2, #48	; 0x30
 8016432:	2a09      	cmp	r2, #9
 8016434:	d903      	bls.n	801643e <_vfiprintf_r+0x1ee>
 8016436:	2b00      	cmp	r3, #0
 8016438:	d0c5      	beq.n	80163c6 <_vfiprintf_r+0x176>
 801643a:	9105      	str	r1, [sp, #20]
 801643c:	e7c3      	b.n	80163c6 <_vfiprintf_r+0x176>
 801643e:	fb0c 2101 	mla	r1, ip, r1, r2
 8016442:	4604      	mov	r4, r0
 8016444:	2301      	movs	r3, #1
 8016446:	e7f0      	b.n	801642a <_vfiprintf_r+0x1da>
 8016448:	ab03      	add	r3, sp, #12
 801644a:	9300      	str	r3, [sp, #0]
 801644c:	462a      	mov	r2, r5
 801644e:	4b16      	ldr	r3, [pc, #88]	; (80164a8 <_vfiprintf_r+0x258>)
 8016450:	a904      	add	r1, sp, #16
 8016452:	4630      	mov	r0, r6
 8016454:	f7fb fb54 	bl	8011b00 <_printf_float>
 8016458:	4607      	mov	r7, r0
 801645a:	1c78      	adds	r0, r7, #1
 801645c:	d1d6      	bne.n	801640c <_vfiprintf_r+0x1bc>
 801645e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016460:	07d9      	lsls	r1, r3, #31
 8016462:	d405      	bmi.n	8016470 <_vfiprintf_r+0x220>
 8016464:	89ab      	ldrh	r3, [r5, #12]
 8016466:	059a      	lsls	r2, r3, #22
 8016468:	d402      	bmi.n	8016470 <_vfiprintf_r+0x220>
 801646a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801646c:	f7fb f9bc 	bl	80117e8 <__retarget_lock_release_recursive>
 8016470:	89ab      	ldrh	r3, [r5, #12]
 8016472:	065b      	lsls	r3, r3, #25
 8016474:	f53f af12 	bmi.w	801629c <_vfiprintf_r+0x4c>
 8016478:	9809      	ldr	r0, [sp, #36]	; 0x24
 801647a:	e711      	b.n	80162a0 <_vfiprintf_r+0x50>
 801647c:	ab03      	add	r3, sp, #12
 801647e:	9300      	str	r3, [sp, #0]
 8016480:	462a      	mov	r2, r5
 8016482:	4b09      	ldr	r3, [pc, #36]	; (80164a8 <_vfiprintf_r+0x258>)
 8016484:	a904      	add	r1, sp, #16
 8016486:	4630      	mov	r0, r6
 8016488:	f7fb fdde 	bl	8012048 <_printf_i>
 801648c:	e7e4      	b.n	8016458 <_vfiprintf_r+0x208>
 801648e:	bf00      	nop
 8016490:	08018568 	.word	0x08018568
 8016494:	08018588 	.word	0x08018588
 8016498:	08018548 	.word	0x08018548
 801649c:	080189e4 	.word	0x080189e4
 80164a0:	080189ee 	.word	0x080189ee
 80164a4:	08011b01 	.word	0x08011b01
 80164a8:	0801622b 	.word	0x0801622b
 80164ac:	080189ea 	.word	0x080189ea

080164b0 <_scanf_chars>:
 80164b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80164b4:	4615      	mov	r5, r2
 80164b6:	688a      	ldr	r2, [r1, #8]
 80164b8:	4680      	mov	r8, r0
 80164ba:	460c      	mov	r4, r1
 80164bc:	b932      	cbnz	r2, 80164cc <_scanf_chars+0x1c>
 80164be:	698a      	ldr	r2, [r1, #24]
 80164c0:	2a00      	cmp	r2, #0
 80164c2:	bf0c      	ite	eq
 80164c4:	2201      	moveq	r2, #1
 80164c6:	f04f 32ff 	movne.w	r2, #4294967295
 80164ca:	608a      	str	r2, [r1, #8]
 80164cc:	6822      	ldr	r2, [r4, #0]
 80164ce:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801655c <_scanf_chars+0xac>
 80164d2:	06d1      	lsls	r1, r2, #27
 80164d4:	bf5f      	itttt	pl
 80164d6:	681a      	ldrpl	r2, [r3, #0]
 80164d8:	1d11      	addpl	r1, r2, #4
 80164da:	6019      	strpl	r1, [r3, #0]
 80164dc:	6816      	ldrpl	r6, [r2, #0]
 80164de:	2700      	movs	r7, #0
 80164e0:	69a0      	ldr	r0, [r4, #24]
 80164e2:	b188      	cbz	r0, 8016508 <_scanf_chars+0x58>
 80164e4:	2801      	cmp	r0, #1
 80164e6:	d107      	bne.n	80164f8 <_scanf_chars+0x48>
 80164e8:	682b      	ldr	r3, [r5, #0]
 80164ea:	781a      	ldrb	r2, [r3, #0]
 80164ec:	6963      	ldr	r3, [r4, #20]
 80164ee:	5c9b      	ldrb	r3, [r3, r2]
 80164f0:	b953      	cbnz	r3, 8016508 <_scanf_chars+0x58>
 80164f2:	bb27      	cbnz	r7, 801653e <_scanf_chars+0x8e>
 80164f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80164f8:	2802      	cmp	r0, #2
 80164fa:	d120      	bne.n	801653e <_scanf_chars+0x8e>
 80164fc:	682b      	ldr	r3, [r5, #0]
 80164fe:	781b      	ldrb	r3, [r3, #0]
 8016500:	f813 3009 	ldrb.w	r3, [r3, r9]
 8016504:	071b      	lsls	r3, r3, #28
 8016506:	d41a      	bmi.n	801653e <_scanf_chars+0x8e>
 8016508:	6823      	ldr	r3, [r4, #0]
 801650a:	06da      	lsls	r2, r3, #27
 801650c:	bf5e      	ittt	pl
 801650e:	682b      	ldrpl	r3, [r5, #0]
 8016510:	781b      	ldrbpl	r3, [r3, #0]
 8016512:	f806 3b01 	strbpl.w	r3, [r6], #1
 8016516:	682a      	ldr	r2, [r5, #0]
 8016518:	686b      	ldr	r3, [r5, #4]
 801651a:	3201      	adds	r2, #1
 801651c:	602a      	str	r2, [r5, #0]
 801651e:	68a2      	ldr	r2, [r4, #8]
 8016520:	3b01      	subs	r3, #1
 8016522:	3a01      	subs	r2, #1
 8016524:	606b      	str	r3, [r5, #4]
 8016526:	3701      	adds	r7, #1
 8016528:	60a2      	str	r2, [r4, #8]
 801652a:	b142      	cbz	r2, 801653e <_scanf_chars+0x8e>
 801652c:	2b00      	cmp	r3, #0
 801652e:	dcd7      	bgt.n	80164e0 <_scanf_chars+0x30>
 8016530:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016534:	4629      	mov	r1, r5
 8016536:	4640      	mov	r0, r8
 8016538:	4798      	blx	r3
 801653a:	2800      	cmp	r0, #0
 801653c:	d0d0      	beq.n	80164e0 <_scanf_chars+0x30>
 801653e:	6823      	ldr	r3, [r4, #0]
 8016540:	f013 0310 	ands.w	r3, r3, #16
 8016544:	d105      	bne.n	8016552 <_scanf_chars+0xa2>
 8016546:	68e2      	ldr	r2, [r4, #12]
 8016548:	3201      	adds	r2, #1
 801654a:	60e2      	str	r2, [r4, #12]
 801654c:	69a2      	ldr	r2, [r4, #24]
 801654e:	b102      	cbz	r2, 8016552 <_scanf_chars+0xa2>
 8016550:	7033      	strb	r3, [r6, #0]
 8016552:	6923      	ldr	r3, [r4, #16]
 8016554:	441f      	add	r7, r3
 8016556:	6127      	str	r7, [r4, #16]
 8016558:	2000      	movs	r0, #0
 801655a:	e7cb      	b.n	80164f4 <_scanf_chars+0x44>
 801655c:	08018675 	.word	0x08018675

08016560 <_scanf_i>:
 8016560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016564:	4698      	mov	r8, r3
 8016566:	4b74      	ldr	r3, [pc, #464]	; (8016738 <_scanf_i+0x1d8>)
 8016568:	460c      	mov	r4, r1
 801656a:	4682      	mov	sl, r0
 801656c:	4616      	mov	r6, r2
 801656e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016572:	b087      	sub	sp, #28
 8016574:	ab03      	add	r3, sp, #12
 8016576:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801657a:	4b70      	ldr	r3, [pc, #448]	; (801673c <_scanf_i+0x1dc>)
 801657c:	69a1      	ldr	r1, [r4, #24]
 801657e:	4a70      	ldr	r2, [pc, #448]	; (8016740 <_scanf_i+0x1e0>)
 8016580:	2903      	cmp	r1, #3
 8016582:	bf18      	it	ne
 8016584:	461a      	movne	r2, r3
 8016586:	68a3      	ldr	r3, [r4, #8]
 8016588:	9201      	str	r2, [sp, #4]
 801658a:	1e5a      	subs	r2, r3, #1
 801658c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016590:	bf88      	it	hi
 8016592:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016596:	4627      	mov	r7, r4
 8016598:	bf82      	ittt	hi
 801659a:	eb03 0905 	addhi.w	r9, r3, r5
 801659e:	f240 135d 	movwhi	r3, #349	; 0x15d
 80165a2:	60a3      	strhi	r3, [r4, #8]
 80165a4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80165a8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80165ac:	bf98      	it	ls
 80165ae:	f04f 0900 	movls.w	r9, #0
 80165b2:	6023      	str	r3, [r4, #0]
 80165b4:	463d      	mov	r5, r7
 80165b6:	f04f 0b00 	mov.w	fp, #0
 80165ba:	6831      	ldr	r1, [r6, #0]
 80165bc:	ab03      	add	r3, sp, #12
 80165be:	7809      	ldrb	r1, [r1, #0]
 80165c0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80165c4:	2202      	movs	r2, #2
 80165c6:	f7e9 fe1b 	bl	8000200 <memchr>
 80165ca:	b328      	cbz	r0, 8016618 <_scanf_i+0xb8>
 80165cc:	f1bb 0f01 	cmp.w	fp, #1
 80165d0:	d159      	bne.n	8016686 <_scanf_i+0x126>
 80165d2:	6862      	ldr	r2, [r4, #4]
 80165d4:	b92a      	cbnz	r2, 80165e2 <_scanf_i+0x82>
 80165d6:	6822      	ldr	r2, [r4, #0]
 80165d8:	2308      	movs	r3, #8
 80165da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80165de:	6063      	str	r3, [r4, #4]
 80165e0:	6022      	str	r2, [r4, #0]
 80165e2:	6822      	ldr	r2, [r4, #0]
 80165e4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80165e8:	6022      	str	r2, [r4, #0]
 80165ea:	68a2      	ldr	r2, [r4, #8]
 80165ec:	1e51      	subs	r1, r2, #1
 80165ee:	60a1      	str	r1, [r4, #8]
 80165f0:	b192      	cbz	r2, 8016618 <_scanf_i+0xb8>
 80165f2:	6832      	ldr	r2, [r6, #0]
 80165f4:	1c51      	adds	r1, r2, #1
 80165f6:	6031      	str	r1, [r6, #0]
 80165f8:	7812      	ldrb	r2, [r2, #0]
 80165fa:	f805 2b01 	strb.w	r2, [r5], #1
 80165fe:	6872      	ldr	r2, [r6, #4]
 8016600:	3a01      	subs	r2, #1
 8016602:	2a00      	cmp	r2, #0
 8016604:	6072      	str	r2, [r6, #4]
 8016606:	dc07      	bgt.n	8016618 <_scanf_i+0xb8>
 8016608:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801660c:	4631      	mov	r1, r6
 801660e:	4650      	mov	r0, sl
 8016610:	4790      	blx	r2
 8016612:	2800      	cmp	r0, #0
 8016614:	f040 8085 	bne.w	8016722 <_scanf_i+0x1c2>
 8016618:	f10b 0b01 	add.w	fp, fp, #1
 801661c:	f1bb 0f03 	cmp.w	fp, #3
 8016620:	d1cb      	bne.n	80165ba <_scanf_i+0x5a>
 8016622:	6863      	ldr	r3, [r4, #4]
 8016624:	b90b      	cbnz	r3, 801662a <_scanf_i+0xca>
 8016626:	230a      	movs	r3, #10
 8016628:	6063      	str	r3, [r4, #4]
 801662a:	6863      	ldr	r3, [r4, #4]
 801662c:	4945      	ldr	r1, [pc, #276]	; (8016744 <_scanf_i+0x1e4>)
 801662e:	6960      	ldr	r0, [r4, #20]
 8016630:	1ac9      	subs	r1, r1, r3
 8016632:	f000 f89b 	bl	801676c <__sccl>
 8016636:	f04f 0b00 	mov.w	fp, #0
 801663a:	68a3      	ldr	r3, [r4, #8]
 801663c:	6822      	ldr	r2, [r4, #0]
 801663e:	2b00      	cmp	r3, #0
 8016640:	d03d      	beq.n	80166be <_scanf_i+0x15e>
 8016642:	6831      	ldr	r1, [r6, #0]
 8016644:	6960      	ldr	r0, [r4, #20]
 8016646:	f891 c000 	ldrb.w	ip, [r1]
 801664a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801664e:	2800      	cmp	r0, #0
 8016650:	d035      	beq.n	80166be <_scanf_i+0x15e>
 8016652:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8016656:	d124      	bne.n	80166a2 <_scanf_i+0x142>
 8016658:	0510      	lsls	r0, r2, #20
 801665a:	d522      	bpl.n	80166a2 <_scanf_i+0x142>
 801665c:	f10b 0b01 	add.w	fp, fp, #1
 8016660:	f1b9 0f00 	cmp.w	r9, #0
 8016664:	d003      	beq.n	801666e <_scanf_i+0x10e>
 8016666:	3301      	adds	r3, #1
 8016668:	f109 39ff 	add.w	r9, r9, #4294967295
 801666c:	60a3      	str	r3, [r4, #8]
 801666e:	6873      	ldr	r3, [r6, #4]
 8016670:	3b01      	subs	r3, #1
 8016672:	2b00      	cmp	r3, #0
 8016674:	6073      	str	r3, [r6, #4]
 8016676:	dd1b      	ble.n	80166b0 <_scanf_i+0x150>
 8016678:	6833      	ldr	r3, [r6, #0]
 801667a:	3301      	adds	r3, #1
 801667c:	6033      	str	r3, [r6, #0]
 801667e:	68a3      	ldr	r3, [r4, #8]
 8016680:	3b01      	subs	r3, #1
 8016682:	60a3      	str	r3, [r4, #8]
 8016684:	e7d9      	b.n	801663a <_scanf_i+0xda>
 8016686:	f1bb 0f02 	cmp.w	fp, #2
 801668a:	d1ae      	bne.n	80165ea <_scanf_i+0x8a>
 801668c:	6822      	ldr	r2, [r4, #0]
 801668e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8016692:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8016696:	d1bf      	bne.n	8016618 <_scanf_i+0xb8>
 8016698:	2310      	movs	r3, #16
 801669a:	6063      	str	r3, [r4, #4]
 801669c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80166a0:	e7a2      	b.n	80165e8 <_scanf_i+0x88>
 80166a2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80166a6:	6022      	str	r2, [r4, #0]
 80166a8:	780b      	ldrb	r3, [r1, #0]
 80166aa:	f805 3b01 	strb.w	r3, [r5], #1
 80166ae:	e7de      	b.n	801666e <_scanf_i+0x10e>
 80166b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80166b4:	4631      	mov	r1, r6
 80166b6:	4650      	mov	r0, sl
 80166b8:	4798      	blx	r3
 80166ba:	2800      	cmp	r0, #0
 80166bc:	d0df      	beq.n	801667e <_scanf_i+0x11e>
 80166be:	6823      	ldr	r3, [r4, #0]
 80166c0:	05d9      	lsls	r1, r3, #23
 80166c2:	d50d      	bpl.n	80166e0 <_scanf_i+0x180>
 80166c4:	42bd      	cmp	r5, r7
 80166c6:	d909      	bls.n	80166dc <_scanf_i+0x17c>
 80166c8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80166cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80166d0:	4632      	mov	r2, r6
 80166d2:	4650      	mov	r0, sl
 80166d4:	4798      	blx	r3
 80166d6:	f105 39ff 	add.w	r9, r5, #4294967295
 80166da:	464d      	mov	r5, r9
 80166dc:	42bd      	cmp	r5, r7
 80166de:	d028      	beq.n	8016732 <_scanf_i+0x1d2>
 80166e0:	6822      	ldr	r2, [r4, #0]
 80166e2:	f012 0210 	ands.w	r2, r2, #16
 80166e6:	d113      	bne.n	8016710 <_scanf_i+0x1b0>
 80166e8:	702a      	strb	r2, [r5, #0]
 80166ea:	6863      	ldr	r3, [r4, #4]
 80166ec:	9e01      	ldr	r6, [sp, #4]
 80166ee:	4639      	mov	r1, r7
 80166f0:	4650      	mov	r0, sl
 80166f2:	47b0      	blx	r6
 80166f4:	f8d8 3000 	ldr.w	r3, [r8]
 80166f8:	6821      	ldr	r1, [r4, #0]
 80166fa:	1d1a      	adds	r2, r3, #4
 80166fc:	f8c8 2000 	str.w	r2, [r8]
 8016700:	f011 0f20 	tst.w	r1, #32
 8016704:	681b      	ldr	r3, [r3, #0]
 8016706:	d00f      	beq.n	8016728 <_scanf_i+0x1c8>
 8016708:	6018      	str	r0, [r3, #0]
 801670a:	68e3      	ldr	r3, [r4, #12]
 801670c:	3301      	adds	r3, #1
 801670e:	60e3      	str	r3, [r4, #12]
 8016710:	1bed      	subs	r5, r5, r7
 8016712:	44ab      	add	fp, r5
 8016714:	6925      	ldr	r5, [r4, #16]
 8016716:	445d      	add	r5, fp
 8016718:	6125      	str	r5, [r4, #16]
 801671a:	2000      	movs	r0, #0
 801671c:	b007      	add	sp, #28
 801671e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016722:	f04f 0b00 	mov.w	fp, #0
 8016726:	e7ca      	b.n	80166be <_scanf_i+0x15e>
 8016728:	07ca      	lsls	r2, r1, #31
 801672a:	bf4c      	ite	mi
 801672c:	8018      	strhmi	r0, [r3, #0]
 801672e:	6018      	strpl	r0, [r3, #0]
 8016730:	e7eb      	b.n	801670a <_scanf_i+0x1aa>
 8016732:	2001      	movs	r0, #1
 8016734:	e7f2      	b.n	801671c <_scanf_i+0x1bc>
 8016736:	bf00      	nop
 8016738:	0801838c 	.word	0x0801838c
 801673c:	080138fd 	.word	0x080138fd
 8016740:	08013801 	.word	0x08013801
 8016744:	08018a0e 	.word	0x08018a0e

08016748 <_read_r>:
 8016748:	b538      	push	{r3, r4, r5, lr}
 801674a:	4d07      	ldr	r5, [pc, #28]	; (8016768 <_read_r+0x20>)
 801674c:	4604      	mov	r4, r0
 801674e:	4608      	mov	r0, r1
 8016750:	4611      	mov	r1, r2
 8016752:	2200      	movs	r2, #0
 8016754:	602a      	str	r2, [r5, #0]
 8016756:	461a      	mov	r2, r3
 8016758:	f7ec fb54 	bl	8002e04 <_read>
 801675c:	1c43      	adds	r3, r0, #1
 801675e:	d102      	bne.n	8016766 <_read_r+0x1e>
 8016760:	682b      	ldr	r3, [r5, #0]
 8016762:	b103      	cbz	r3, 8016766 <_read_r+0x1e>
 8016764:	6023      	str	r3, [r4, #0]
 8016766:	bd38      	pop	{r3, r4, r5, pc}
 8016768:	20006118 	.word	0x20006118

0801676c <__sccl>:
 801676c:	b570      	push	{r4, r5, r6, lr}
 801676e:	780b      	ldrb	r3, [r1, #0]
 8016770:	4604      	mov	r4, r0
 8016772:	2b5e      	cmp	r3, #94	; 0x5e
 8016774:	bf0b      	itete	eq
 8016776:	784b      	ldrbeq	r3, [r1, #1]
 8016778:	1c48      	addne	r0, r1, #1
 801677a:	1c88      	addeq	r0, r1, #2
 801677c:	2200      	movne	r2, #0
 801677e:	bf08      	it	eq
 8016780:	2201      	moveq	r2, #1
 8016782:	1e61      	subs	r1, r4, #1
 8016784:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8016788:	f801 2f01 	strb.w	r2, [r1, #1]!
 801678c:	42a9      	cmp	r1, r5
 801678e:	d1fb      	bne.n	8016788 <__sccl+0x1c>
 8016790:	b90b      	cbnz	r3, 8016796 <__sccl+0x2a>
 8016792:	3801      	subs	r0, #1
 8016794:	bd70      	pop	{r4, r5, r6, pc}
 8016796:	f082 0101 	eor.w	r1, r2, #1
 801679a:	54e1      	strb	r1, [r4, r3]
 801679c:	1c42      	adds	r2, r0, #1
 801679e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80167a2:	2d2d      	cmp	r5, #45	; 0x2d
 80167a4:	f102 36ff 	add.w	r6, r2, #4294967295
 80167a8:	4610      	mov	r0, r2
 80167aa:	d006      	beq.n	80167ba <__sccl+0x4e>
 80167ac:	2d5d      	cmp	r5, #93	; 0x5d
 80167ae:	d0f1      	beq.n	8016794 <__sccl+0x28>
 80167b0:	b90d      	cbnz	r5, 80167b6 <__sccl+0x4a>
 80167b2:	4630      	mov	r0, r6
 80167b4:	e7ee      	b.n	8016794 <__sccl+0x28>
 80167b6:	462b      	mov	r3, r5
 80167b8:	e7ef      	b.n	801679a <__sccl+0x2e>
 80167ba:	7816      	ldrb	r6, [r2, #0]
 80167bc:	2e5d      	cmp	r6, #93	; 0x5d
 80167be:	d0fa      	beq.n	80167b6 <__sccl+0x4a>
 80167c0:	42b3      	cmp	r3, r6
 80167c2:	dcf8      	bgt.n	80167b6 <__sccl+0x4a>
 80167c4:	4618      	mov	r0, r3
 80167c6:	3001      	adds	r0, #1
 80167c8:	4286      	cmp	r6, r0
 80167ca:	5421      	strb	r1, [r4, r0]
 80167cc:	dcfb      	bgt.n	80167c6 <__sccl+0x5a>
 80167ce:	43d8      	mvns	r0, r3
 80167d0:	4430      	add	r0, r6
 80167d2:	1c5d      	adds	r5, r3, #1
 80167d4:	42b3      	cmp	r3, r6
 80167d6:	bfa8      	it	ge
 80167d8:	2000      	movge	r0, #0
 80167da:	182b      	adds	r3, r5, r0
 80167dc:	3202      	adds	r2, #2
 80167de:	e7de      	b.n	801679e <__sccl+0x32>

080167e0 <__submore>:
 80167e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167e4:	460c      	mov	r4, r1
 80167e6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80167e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80167ec:	4299      	cmp	r1, r3
 80167ee:	d11d      	bne.n	801682c <__submore+0x4c>
 80167f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80167f4:	f7fb f88a 	bl	801190c <_malloc_r>
 80167f8:	b918      	cbnz	r0, 8016802 <__submore+0x22>
 80167fa:	f04f 30ff 	mov.w	r0, #4294967295
 80167fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016802:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016806:	63a3      	str	r3, [r4, #56]	; 0x38
 8016808:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801680c:	6360      	str	r0, [r4, #52]	; 0x34
 801680e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8016812:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8016816:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801681a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801681e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8016822:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8016826:	6020      	str	r0, [r4, #0]
 8016828:	2000      	movs	r0, #0
 801682a:	e7e8      	b.n	80167fe <__submore+0x1e>
 801682c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801682e:	0077      	lsls	r7, r6, #1
 8016830:	463a      	mov	r2, r7
 8016832:	f7ff f98f 	bl	8015b54 <_realloc_r>
 8016836:	4605      	mov	r5, r0
 8016838:	2800      	cmp	r0, #0
 801683a:	d0de      	beq.n	80167fa <__submore+0x1a>
 801683c:	eb00 0806 	add.w	r8, r0, r6
 8016840:	4601      	mov	r1, r0
 8016842:	4632      	mov	r2, r6
 8016844:	4640      	mov	r0, r8
 8016846:	f7fa ffe1 	bl	801180c <memcpy>
 801684a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801684e:	f8c4 8000 	str.w	r8, [r4]
 8016852:	e7e9      	b.n	8016828 <__submore+0x48>

08016854 <__ascii_wctomb>:
 8016854:	b149      	cbz	r1, 801686a <__ascii_wctomb+0x16>
 8016856:	2aff      	cmp	r2, #255	; 0xff
 8016858:	bf85      	ittet	hi
 801685a:	238a      	movhi	r3, #138	; 0x8a
 801685c:	6003      	strhi	r3, [r0, #0]
 801685e:	700a      	strbls	r2, [r1, #0]
 8016860:	f04f 30ff 	movhi.w	r0, #4294967295
 8016864:	bf98      	it	ls
 8016866:	2001      	movls	r0, #1
 8016868:	4770      	bx	lr
 801686a:	4608      	mov	r0, r1
 801686c:	4770      	bx	lr
	...

08016870 <_fstat_r>:
 8016870:	b538      	push	{r3, r4, r5, lr}
 8016872:	4d07      	ldr	r5, [pc, #28]	; (8016890 <_fstat_r+0x20>)
 8016874:	2300      	movs	r3, #0
 8016876:	4604      	mov	r4, r0
 8016878:	4608      	mov	r0, r1
 801687a:	4611      	mov	r1, r2
 801687c:	602b      	str	r3, [r5, #0]
 801687e:	f7ec fb06 	bl	8002e8e <_fstat>
 8016882:	1c43      	adds	r3, r0, #1
 8016884:	d102      	bne.n	801688c <_fstat_r+0x1c>
 8016886:	682b      	ldr	r3, [r5, #0]
 8016888:	b103      	cbz	r3, 801688c <_fstat_r+0x1c>
 801688a:	6023      	str	r3, [r4, #0]
 801688c:	bd38      	pop	{r3, r4, r5, pc}
 801688e:	bf00      	nop
 8016890:	20006118 	.word	0x20006118

08016894 <_isatty_r>:
 8016894:	b538      	push	{r3, r4, r5, lr}
 8016896:	4d06      	ldr	r5, [pc, #24]	; (80168b0 <_isatty_r+0x1c>)
 8016898:	2300      	movs	r3, #0
 801689a:	4604      	mov	r4, r0
 801689c:	4608      	mov	r0, r1
 801689e:	602b      	str	r3, [r5, #0]
 80168a0:	f7ec fb05 	bl	8002eae <_isatty>
 80168a4:	1c43      	adds	r3, r0, #1
 80168a6:	d102      	bne.n	80168ae <_isatty_r+0x1a>
 80168a8:	682b      	ldr	r3, [r5, #0]
 80168aa:	b103      	cbz	r3, 80168ae <_isatty_r+0x1a>
 80168ac:	6023      	str	r3, [r4, #0]
 80168ae:	bd38      	pop	{r3, r4, r5, pc}
 80168b0:	20006118 	.word	0x20006118

080168b4 <_malloc_usable_size_r>:
 80168b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80168b8:	1f18      	subs	r0, r3, #4
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	bfbc      	itt	lt
 80168be:	580b      	ldrlt	r3, [r1, r0]
 80168c0:	18c0      	addlt	r0, r0, r3
 80168c2:	4770      	bx	lr

080168c4 <_init>:
 80168c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168c6:	bf00      	nop
 80168c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80168ca:	bc08      	pop	{r3}
 80168cc:	469e      	mov	lr, r3
 80168ce:	4770      	bx	lr

080168d0 <_fini>:
 80168d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168d2:	bf00      	nop
 80168d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80168d6:	bc08      	pop	{r3}
 80168d8:	469e      	mov	lr, r3
 80168da:	4770      	bx	lr
